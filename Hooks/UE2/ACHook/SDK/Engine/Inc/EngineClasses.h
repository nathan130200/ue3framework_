/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if _MSC_VER
#pragma pack (push,4)
#endif

#ifndef ENGINE_API
#define ENGINE_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern ENGINE_API FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(Spawned)
AUTOGENERATE_NAME(Destroyed)
AUTOGENERATE_NAME(GainedChild)
AUTOGENERATE_NAME(LostChild)
AUTOGENERATE_NAME(Trigger)
AUTOGENERATE_NAME(UnTrigger)
AUTOGENERATE_NAME(Timer)
AUTOGENERATE_NAME(HitWall)
AUTOGENERATE_NAME(Falling)
AUTOGENERATE_NAME(Landed)
AUTOGENERATE_NAME(ZoneChange)
AUTOGENERATE_NAME(Touch)
AUTOGENERATE_NAME(UnTouch)
AUTOGENERATE_NAME(Bump)
AUTOGENERATE_NAME(BaseChange)
AUTOGENERATE_NAME(Attach)
AUTOGENERATE_NAME(Detach)
AUTOGENERATE_NAME(ActorEntered)
AUTOGENERATE_NAME(ActorLeaving)
AUTOGENERATE_NAME(KillCredit)
AUTOGENERATE_NAME(AnimEnd)
AUTOGENERATE_NAME(EndedRotation)
AUTOGENERATE_NAME(InterpolateEnd)
AUTOGENERATE_NAME(EncroachingOn)
AUTOGENERATE_NAME(EncroachedBy)
AUTOGENERATE_NAME(FootZoneChange)
AUTOGENERATE_NAME(HeadZoneChange)
AUTOGENERATE_NAME(PainTimer)
AUTOGENERATE_NAME(SpeechTimer)
AUTOGENERATE_NAME(MayFall)
AUTOGENERATE_NAME(Tick)
AUTOGENERATE_NAME(PlayerTick)
AUTOGENERATE_NAME(Expired)
AUTOGENERATE_NAME(SeePlayer)
AUTOGENERATE_NAME(EnemyNotVisible)
AUTOGENERATE_NAME(HearNoise)
AUTOGENERATE_NAME(UpdateEyeHeight)
AUTOGENERATE_NAME(SpecialHandling)
AUTOGENERATE_NAME(BotDesireability)
AUTOGENERATE_NAME(Generate)
AUTOGENERATE_NAME(PlayerCalcView)
AUTOGENERATE_NAME(PlayerInput)
AUTOGENERATE_NAME(PlayerTimeout)
AUTOGENERATE_NAME(Possess)
AUTOGENERATE_NAME(UnPossess)
AUTOGENERATE_NAME(PreTeleport)
AUTOGENERATE_NAME(PostTeleport)
AUTOGENERATE_NAME(Login)
AUTOGENERATE_NAME(AcceptInventory)
AUTOGENERATE_NAME(ClientHearSound)
AUTOGENERATE_NAME(ClientMessage)
AUTOGENERATE_NAME(LongFall)
AUTOGENERATE_NAME(BeginEvent)
AUTOGENERATE_NAME(EndEvent)
AUTOGENERATE_NAME(KilledBy)
AUTOGENERATE_NAME(TakeDamage)
AUTOGENERATE_NAME(BeginPlay)
AUTOGENERATE_NAME(PreBeginPlay)
AUTOGENERATE_NAME(PostBeginPlay)
AUTOGENERATE_NAME(TravelPreAccept)
AUTOGENERATE_NAME(TravelPostAccept)
AUTOGENERATE_NAME(PreRender)
AUTOGENERATE_NAME(PostRender)
AUTOGENERATE_NAME(ForceGenerate)
AUTOGENERATE_NAME(InitGame)
AUTOGENERATE_NAME(Accept)
AUTOGENERATE_NAME(GetBeaconText)
AUTOGENERATE_NAME(SetInitialState)
AUTOGENERATE_NAME(PreLogin)
AUTOGENERATE_NAME(DetailChange)
AUTOGENERATE_NAME(ClientTravel)
AUTOGENERATE_NAME(ShowUpgradeMenu)
AUTOGENERATE_NAME(TeamMessage)
AUTOGENERATE_NAME(FellOutOfWorld)
AUTOGENERATE_NAME(SpecialCost)
AUTOGENERATE_NAME(RenderOverlays)
AUTOGENERATE_NAME(RenderTexture)
AUTOGENERATE_NAME(GameEnding)
AUTOGENERATE_NAME(WalkTexture)
AUTOGENERATE_NAME(BroadcastMessage)
AUTOGENERATE_NAME(ServerTravel)
AUTOGENERATE_NAME(PostLogin)
AUTOGENERATE_NAME(DemoPlaySound)
AUTOGENERATE_NAME(PreClientTravel)
AUTOGENERATE_NAME(BroadcastLocalizedMessage)
AUTOGENERATE_NAME(ReceiveLocalizedMessage)
AUTOGENERATE_NAME(LogGameSpecial)
AUTOGENERATE_NAME(PostTouch)
AUTOGENERATE_NAME(Update)
AUTOGENERATE_NAME(AlterDestination)
AUTOGENERATE_NAME(SpawnNotification)
AUTOGENERATE_NAME(UpdateTactics)
AUTOGENERATE_NAME(LogGameSpecial2)
AUTOGENERATE_NAME(PostNetBeginPlay)

#ifndef NAMES_ONLY

enum EInputKey
{
    IK_None                 =0,
    IK_LeftMouse            =1,
    IK_RightMouse           =2,
    IK_Cancel               =3,
    IK_MiddleMouse          =4,
    IK_Unknown05            =5,
    IK_Unknown06            =6,
    IK_Unknown07            =7,
    IK_Backspace            =8,
    IK_Tab                  =9,
    IK_Unknown0A            =10,
    IK_Unknown0B            =11,
    IK_Unknown0C            =12,
    IK_Enter                =13,
    IK_Unknown0E            =14,
    IK_Unknown0F            =15,
    IK_Shift                =16,
    IK_Ctrl                 =17,
    IK_Alt                  =18,
    IK_Pause                =19,
    IK_CapsLock             =20,
    IK_Unknown15            =21,
    IK_Unknown16            =22,
    IK_Unknown17            =23,
    IK_Unknown18            =24,
    IK_Unknown19            =25,
    IK_Unknown1A            =26,
    IK_Escape               =27,
    IK_Unknown1C            =28,
    IK_Unknown1D            =29,
    IK_Unknown1E            =30,
    IK_Unknown1F            =31,
    IK_Space                =32,
    IK_PageUp               =33,
    IK_PageDown             =34,
    IK_End                  =35,
    IK_Home                 =36,
    IK_Left                 =37,
    IK_Up                   =38,
    IK_Right                =39,
    IK_Down                 =40,
    IK_Select               =41,
    IK_Print                =42,
    IK_Execute              =43,
    IK_PrintScrn            =44,
    IK_Insert               =45,
    IK_Delete               =46,
    IK_Help                 =47,
    IK_0                    =48,
    IK_1                    =49,
    IK_2                    =50,
    IK_3                    =51,
    IK_4                    =52,
    IK_5                    =53,
    IK_6                    =54,
    IK_7                    =55,
    IK_8                    =56,
    IK_9                    =57,
    IK_Unknown3A            =58,
    IK_Unknown3B            =59,
    IK_Unknown3C            =60,
    IK_Unknown3D            =61,
    IK_Unknown3E            =62,
    IK_Unknown3F            =63,
    IK_Unknown40            =64,
    IK_A                    =65,
    IK_B                    =66,
    IK_C                    =67,
    IK_D                    =68,
    IK_E                    =69,
    IK_F                    =70,
    IK_G                    =71,
    IK_H                    =72,
    IK_I                    =73,
    IK_J                    =74,
    IK_K                    =75,
    IK_L                    =76,
    IK_M                    =77,
    IK_N                    =78,
    IK_O                    =79,
    IK_P                    =80,
    IK_Q                    =81,
    IK_R                    =82,
    IK_S                    =83,
    IK_T                    =84,
    IK_U                    =85,
    IK_V                    =86,
    IK_W                    =87,
    IK_X                    =88,
    IK_Y                    =89,
    IK_Z                    =90,
    IK_Unknown5B            =91,
    IK_Unknown5C            =92,
    IK_Unknown5D            =93,
    IK_Unknown5E            =94,
    IK_Unknown5F            =95,
    IK_NumPad0              =96,
    IK_NumPad1              =97,
    IK_NumPad2              =98,
    IK_NumPad3              =99,
    IK_NumPad4              =100,
    IK_NumPad5              =101,
    IK_NumPad6              =102,
    IK_NumPad7              =103,
    IK_NumPad8              =104,
    IK_NumPad9              =105,
    IK_GreyStar             =106,
    IK_GreyPlus             =107,
    IK_Separator            =108,
    IK_GreyMinus            =109,
    IK_NumPadPeriod         =110,
    IK_GreySlash            =111,
    IK_F1                   =112,
    IK_F2                   =113,
    IK_F3                   =114,
    IK_F4                   =115,
    IK_F5                   =116,
    IK_F6                   =117,
    IK_F7                   =118,
    IK_F8                   =119,
    IK_F9                   =120,
    IK_F10                  =121,
    IK_F11                  =122,
    IK_F12                  =123,
    IK_F13                  =124,
    IK_F14                  =125,
    IK_F15                  =126,
    IK_F16                  =127,
    IK_F17                  =128,
    IK_F18                  =129,
    IK_F19                  =130,
    IK_F20                  =131,
    IK_F21                  =132,
    IK_F22                  =133,
    IK_F23                  =134,
    IK_F24                  =135,
    IK_Unknown88            =136,
    IK_Unknown89            =137,
    IK_Unknown8A            =138,
    IK_Unknown8B            =139,
    IK_Unknown8C            =140,
    IK_Unknown8D            =141,
    IK_Unknown8E            =142,
    IK_Unknown8F            =143,
    IK_NumLock              =144,
    IK_ScrollLock           =145,
    IK_Unknown92            =146,
    IK_Unknown93            =147,
    IK_Unknown94            =148,
    IK_Unknown95            =149,
    IK_Unknown96            =150,
    IK_Unknown97            =151,
    IK_Unknown98            =152,
    IK_Unknown99            =153,
    IK_Unknown9A            =154,
    IK_Unknown9B            =155,
    IK_Unknown9C            =156,
    IK_Unknown9D            =157,
    IK_Unknown9E            =158,
    IK_Unknown9F            =159,
    IK_LShift               =160,
    IK_RShift               =161,
    IK_LControl             =162,
    IK_RControl             =163,
    IK_UnknownA4            =164,
    IK_UnknownA5            =165,
    IK_UnknownA6            =166,
    IK_UnknownA7            =167,
    IK_UnknownA8            =168,
    IK_UnknownA9            =169,
    IK_UnknownAA            =170,
    IK_UnknownAB            =171,
    IK_UnknownAC            =172,
    IK_UnknownAD            =173,
    IK_UnknownAE            =174,
    IK_UnknownAF            =175,
    IK_UnknownB0            =176,
    IK_UnknownB1            =177,
    IK_UnknownB2            =178,
    IK_UnknownB3            =179,
    IK_UnknownB4            =180,
    IK_UnknownB5            =181,
    IK_UnknownB6            =182,
    IK_UnknownB7            =183,
    IK_UnknownB8            =184,
    IK_UnknownB9            =185,
    IK_Semicolon            =186,
    IK_Equals               =187,
    IK_Comma                =188,
    IK_Minus                =189,
    IK_Period               =190,
    IK_Slash                =191,
    IK_Tilde                =192,
    IK_UnknownC1            =193,
    IK_UnknownC2            =194,
    IK_UnknownC3            =195,
    IK_UnknownC4            =196,
    IK_UnknownC5            =197,
    IK_UnknownC6            =198,
    IK_UnknownC7            =199,
    IK_Joy1                 =200,
    IK_Joy2                 =201,
    IK_Joy3                 =202,
    IK_Joy4                 =203,
    IK_Joy5                 =204,
    IK_Joy6                 =205,
    IK_Joy7                 =206,
    IK_Joy8                 =207,
    IK_Joy9                 =208,
    IK_Joy10                =209,
    IK_Joy11                =210,
    IK_Joy12                =211,
    IK_Joy13                =212,
    IK_Joy14                =213,
    IK_Joy15                =214,
    IK_Joy16                =215,
    IK_UnknownD8            =216,
    IK_UnknownD9            =217,
    IK_UnknownDA            =218,
    IK_LeftBracket          =219,
    IK_Backslash            =220,
    IK_RightBracket         =221,
    IK_SingleQuote          =222,
    IK_UnknownDF            =223,
    IK_JoyX                 =224,
    IK_JoyY                 =225,
    IK_JoyZ                 =226,
    IK_JoyR                 =227,
    IK_MouseX               =228,
    IK_MouseY               =229,
    IK_MouseZ               =230,
    IK_MouseW               =231,
    IK_JoyU                 =232,
    IK_JoyV                 =233,
    IK_UnknownEA            =234,
    IK_UnknownEB            =235,
    IK_MouseWheelUp         =236,
    IK_MouseWheelDown       =237,
    IK_Unknown10E           =238,
    UK_Unknown10F           =239,
    IK_JoyPovUp             =240,
    IK_JoyPovDown           =241,
    IK_JoyPovLeft           =242,
    IK_JoyPovRight          =243,
    IK_UnknownF4            =244,
    IK_UnknownF5            =245,
    IK_Attn                 =246,
    IK_CrSel                =247,
    IK_ExSel                =248,
    IK_ErEof                =249,
    IK_Play                 =250,
    IK_Zoom                 =251,
    IK_NoName               =252,
    IK_PA1                  =253,
    IK_OEMClear             =254,
    IK_MAX                  =255,
};
enum EInputAction
{
    IST_None                =0,
    IST_Press               =1,
    IST_Hold                =2,
    IST_Release             =3,
    IST_Axis                =4,
    IST_MAX                 =5,
};
enum ETravelType
{
    TRAVEL_Absolute         =0,
    TRAVEL_Partial          =1,
    TRAVEL_Relative         =2,
    TRAVEL_MAX              =3,
};
enum EDodgeDir
{
    DODGE_None              =0,
    DODGE_Left              =1,
    DODGE_Right             =2,
    DODGE_Forward           =3,
    DODGE_Back              =4,
    DODGE_Active            =5,
    DODGE_Done              =6,
    DODGE_MAX               =7,
};
enum ELightEffect
{
    LE_None                 =0,
    LE_TorchWaver           =1,
    LE_FireWaver            =2,
    LE_WateryShimmer        =3,
    LE_Searchlight          =4,
    LE_SlowWave             =5,
    LE_FastWave             =6,
    LE_CloudCast            =7,
    LE_StaticSpot           =8,
    LE_Shock                =9,
    LE_Disco                =10,
    LE_Warp                 =11,
    LE_Spotlight            =12,
    LE_NonIncidence         =13,
    LE_Shell                =14,
    LE_OmniBumpMap          =15,
    LE_Interference         =16,
    LE_Cylinder             =17,
    LE_Rotor                =18,
    LE_Unused               =19,
    LE_MAX                  =20,
};
enum ELightType
{
    LT_None                 =0,
    LT_Steady               =1,
    LT_Pulse                =2,
    LT_Blink                =3,
    LT_Flicker              =4,
    LT_Strobe               =5,
    LT_BackdropLight        =6,
    LT_SubtlePulse          =7,
    LT_TexturePaletteOnce   =8,
    LT_TexturePaletteLoop   =9,
    LT_MAX                  =10,
};
enum EMusicTransition
{
    MTRAN_None              =0,
    MTRAN_Instant           =1,
    MTRAN_Segue             =2,
    MTRAN_Fade              =3,
    MTRAN_FastFade          =4,
    MTRAN_SlowFade          =5,
    MTRAN_MAX               =6,
};
enum ESoundSlot
{
    SLOT_None               =0,
    SLOT_Misc               =1,
    SLOT_Pain               =2,
    SLOT_Interact           =3,
    SLOT_Ambient            =4,
    SLOT_Talk               =5,
    SLOT_Interface          =6,
    SLOT_MAX                =7,
};
enum ERenderStyle
{
    STY_None                =0,
    STY_Normal              =1,
    STY_Masked              =2,
    STY_Translucent         =3,
    STY_Modulated           =4,
    STY_MAX                 =5,
};
enum EDrawType
{
    DT_None                 =0,
    DT_Sprite               =1,
    DT_Mesh                 =2,
    DT_Brush                =3,
    DT_RopeSprite           =4,
    DT_VerticalSprite       =5,
    DT_Terraform            =6,
    DT_SpriteAnimOnce       =7,
    DT_MAX                  =8,
};
enum ENetRole
{
    ROLE_None               =0,
    ROLE_DumbProxy          =1,
    ROLE_SimulatedProxy     =2,
    ROLE_AutonomousProxy    =3,
    ROLE_Authority          =4,
    ROLE_MAX                =5,
};
enum EPhysics
{
	PHYS_None               =0,
	PHYS_Walking            =1,
	PHYS_Falling            =2,
	PHYS_Swimming           =3,
	PHYS_Flying             =4,
	PHYS_Rotating           =5,
	PHYS_Projectile         =6,
	PHYS_Interpolating      =7,
	PHYS_MovingBrush        =8,
	PHYS_Spider             =9,
	PHYS_Trailer            =10,
	PHYS_Ladder             =11,
	PHYS_RootMotion         =12,
	PHYS_Karma              =13,
	PHYS_KarmaRagDoll       =14,
	PHYS_Hovering           =15,
	PHYS_CinMotion          =16,
	PHYS_MAX                =17,
};

struct AActor_eventRenderTexture_Parms
{
    class UScriptedTexture* Tex;
};
struct AActor_eventTravelPostAccept_Parms
{
};
struct AActor_eventTravelPreAccept_Parms
{
};
struct AActor_eventPostNetBeginPlay_Parms
{
};
struct AActor_eventSetInitialState_Parms
{
};
struct AActor_eventPostBeginPlay_Parms
{
};
struct AActor_eventBroadcastLocalizedMessage_Parms
{
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct AActor_eventBroadcastMessage_Parms
{
    FString Msg;
    BITFIELD bBeep;
    FName Type;
};
struct AActor_eventPreBeginPlay_Parms
{
};
struct AActor_eventRenderOverlays_Parms
{
    class UCanvas* Canvas;
};
struct AActor_eventBeginPlay_Parms
{
};
struct AActor_eventPostTeleport_Parms
{
    class ATeleporter* OutTeleporter;
};
struct AActor_eventPreTeleport_Parms
{
    class ATeleporter* InTeleporter;
    BITFIELD ReturnValue;
};
struct AActor_eventDemoPlaySound_Parms
{
    class USound* Sound;
    BYTE Slot;
    FLOAT Volume;
    BITFIELD bNoOverride;
    FLOAT Radius;
    FLOAT Pitch;
};
struct AActor_eventTakeDamage_Parms
{
    INT Damage;
    class APawn* EventInstigator;
    FVector HitLocation;
    FVector Momentum;
    FName DamageType;
};
struct AActor_eventKilledBy_Parms
{
    class APawn* EventInstigator;
};
struct AActor_eventFellOutOfWorld_Parms
{
};
struct AActor_eventEndedRotation_Parms
{
};
struct AActor_eventInterpolateEnd_Parms
{
    class AActor* Other;
};
struct AActor_eventEncroachedBy_Parms
{
    class AActor* Other;
};
struct AActor_eventEncroachingOn_Parms
{
    class AActor* Other;
    BITFIELD ReturnValue;
};
struct AActor_eventSpecialHandling_Parms
{
    class APawn* Other;
    class AActor* ReturnValue;
};
struct AActor_eventKillCredit_Parms
{
    class AActor* Other;
};
struct AActor_eventDetach_Parms
{
    class AActor* Other;
};
struct AActor_eventAttach_Parms
{
    class AActor* Other;
};
struct AActor_eventBaseChange_Parms
{
};
struct AActor_eventBump_Parms
{
    class AActor* Other;
};
struct AActor_eventUnTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventPostTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventZoneChange_Parms
{
    class AZoneInfo* NewZone;
};
struct AActor_eventLanded_Parms
{
    FVector HitNormal;
};
struct AActor_eventFalling_Parms
{
};
struct AActor_eventHitWall_Parms
{
    FVector HitNormal;
    class AActor* HitWall;
};
struct AActor_eventTimer_Parms
{
};
struct AActor_eventEndEvent_Parms
{
};
struct AActor_eventBeginEvent_Parms
{
};
struct AActor_eventUnTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventTick_Parms
{
    FLOAT DeltaTime;
};
struct AActor_eventLostChild_Parms
{
    class AActor* Other;
};
struct AActor_eventGainedChild_Parms
{
    class AActor* Other;
};
struct AActor_eventExpired_Parms
{
};
struct AActor_eventDestroyed_Parms
{
};
struct AActor_eventSpawned_Parms
{
};
struct AActor_eventAnimEnd_Parms
{
};

struct FAnimRep
{
  FName AnimSequence;
  BITFIELD bAnimLoop;
  BYTE AnimRate;
  BYTE AnimFrame;
  BYTE TweenRate;
};

struct FBatchReference
{
  INT BatchIndex;
  INT ElementIndex;
};

struct FLightRenderDataPtr
{
  void* Ptr;
};

struct FActorRenderDataPtr
{
  void* Ptr;
};

struct FStaticMeshProjectorRenderInfoPtr
{
  void* Ptr;
};

struct FProjectorRenderInfoPtr
{
  void* Ptr;
};

class DLL_IMPORT UPlayerInput : public UObject
{
public:
	BITFIELD bInvertMouse:1;		// Offset 40 (0x28)	Size 4	PFlags (0x44000) 0|CPF_Config|CPF_GlobalConfig
	BITFIELD bWasForward:1;		// Offset 40 (0x28)	Size 4	PFlags (0x0) 0
	BITFIELD bWasBack:1;		// Offset 40 (0x28)	Size 4	PFlags (0x0) 0
	BITFIELD bWasLeft:1;		// Offset 40 (0x28)	Size 4	PFlags (0x0) 0
	BITFIELD bWasRight:1;		// Offset 40 (0x28)	Size 4	PFlags (0x0) 0
	BITFIELD bEdgeForward:1;		// Offset 40 (0x28)	Size 4	PFlags (0x0) 0
	BITFIELD bEdgeBack:1;		// Offset 40 (0x28)	Size 4	PFlags (0x0) 0
	BITFIELD bEdgeLeft:1;		// Offset 40 (0x28)	Size 4	PFlags (0x0) 0
	BITFIELD bEdgeRight:1;		// Offset 40 (0x28)	Size 4	PFlags (0x0) 0
	BITFIELD bAdjustSampling:1;		// Offset 40 (0x28)	Size 4	PFlags (0x0) 0
	BYTE MouseSmoothingMode;		// Offset 44 (0x2c)	Size 1	PFlags (0x44000) 0|CPF_Config|CPF_GlobalConfig
	FLOAT MouseSmoothingStrength;		// Offset 48 (0x30)	Size 4	PFlags (0x44000) 0|CPF_Config|CPF_GlobalConfig
	FLOAT MouseSensitivity;		// Offset 52 (0x34)	Size 4	PFlags (0x44000) 0|CPF_Config|CPF_GlobalConfig
	FLOAT MouseSamplingTime;		// Offset 56 (0x38)	Size 4	PFlags (0x44000) 0|CPF_Config|CPF_GlobalConfig
	FLOAT MouseAccelThreshold;		// Offset 60 (0x3c)	Size 4	PFlags (0x44000) 0|CPF_Config|CPF_GlobalConfig
	FLOAT SmoothedMouse[2];		// Offset 64 (0x40)	Size 4	PFlags (0x0) 0
	FLOAT ZeroTime[2];		// Offset 72 (0x48)	Size 4	PFlags (0x0) 0
	FLOAT SamplingTime[2];		// Offset 80 (0x50)	Size 4	PFlags (0x0) 0
	FLOAT MaybeTime[2];		// Offset 88 (0x58)	Size 4	PFlags (0x0) 0
	FLOAT OldSamples[4];		// Offset 96 (0x60)	Size 4	PFlags (0x0) 0
	INT MouseSamples[2];		// Offset 112 (0x70)	Size 4	PFlags (0x0) 0
	FLOAT DoubleClickTimer;		// Offset 120 (0x78)	Size 4	PFlags (0x0) 0
	FLOAT DoubleClickTime;		// Offset 124 (0x7c)	Size 4	PFlags (0x44000) 0|CPF_Config|CPF_GlobalConfig
	BITFIELD bEnableDodging:1;		// Offset 128 (0x80)	Size 4	PFlags (0x44000) 0|CPF_Config|CPF_GlobalConfig
	DECLARE_FUNCTION(execCheckForDoubleClickMove);
	DECLARE_FUNCTION(execChangeSnapView);
	DECLARE_FUNCTION(execInvertMouse);
	DECLARE_FUNCTION(execUpdateAccel);
	DECLARE_FUNCTION(execUpdateSensitivity);
	DECLARE_FUNCTION(execAccelerateMouse);
	DECLARE_FUNCTION(execPlayerInput);
	DECLARE_FUNCTION(execInvertLook);

	DECLARE_CLASS(UPlayerInput,UObject,0|CLASS_SafeReplace|CLASS_RuntimeStatic|CLASS_NoUserCreate|CLASS_Inherit|CLASS_RecompilerClear,Engine)
};


class DLL_IMPORT UMeshInstance : public UPrimitive
{
public:

	virtual ~UMeshInstance ();
	/*030*/	virtual int PointCheck ( struct FCheckResult &, class AActor *, class FVector const &, class FVector const &, DWORD );
	/*031*/	virtual int LineCheck ( struct FCheckResult &, class AActor *, class FVector const &, class FVector const &, class FVector const &, DWORD, DWORD );
	/*032*/	virtual class FBox GetRenderBoundingBox ( class AActor const * );
	/*033*/	virtual class FSphere GetRenderBoundingSphere ( class AActor const * );
	/*039*/	virtual class USkeletalMeshInstance * GetUSkeletalMeshInstance ();
	/*040*/	virtual class AActor * GetActor ();
	/*041*/	virtual void SetActor ( class AActor * );
	/*042*/	virtual class UMesh * GetMesh ();
	/*043*/	virtual void SetMesh ( class UMesh * );
	/*044*/	virtual void SetStatus ( int );
	/*045*/	virtual int GetStatus ();
	/*046*/	virtual int UpdateAnimation ( float );
	/*047*/	virtual int PlayAnim ( int, class FName, float, float, int );
	/*048*/	virtual int GetAnimCount ();
	/*049*/	virtual void * GetAnimIndexed ( int );
	/*050*/	virtual void * GetAnimNamed ( class FName );
	/*051*/	virtual class FName AnimGetName ( void * );
	/*052*/	virtual class FName AnimGetGroup ( void * );
	/*053*/	virtual int AnimIsInGroup ( void *, class FName );
	/*054*/	virtual float AnimGetFrameCount ( void * );
	/*055*/	virtual float AnimGetRate ( void * );
	/*056*/	virtual int AnimGetNotifyCount ( void * );
	/*057*/	virtual float AnimGetNotifyTime ( void *, int );
	/*058*/	virtual TCHAR const * AnimGetNotifyText ( void *, int );
	/*059*/	virtual class UAnimNotify * AnimGetNotifyObject ( void *, int );
	/*060*/	virtual int IsAnimating ( int );
	/*061*/	virtual int StopAnimating ();
	/*062*/	virtual int FreezeAnimAt ( float, int );
	/*063*/	virtual int IsAnimTweening ( int );
	/*064*/	virtual int IsAnimAlphaBlending ( int );
	/*065*/	virtual int IsAnimLooping ( int );
	/*066*/	virtual int IsAnimPastLastFrame ( int );
	/*067*/	virtual int AnimStopLooping ( int );
	/*068*/	virtual class FName GetActiveAnimSequence ( int );
	/*069*/	virtual float GetActiveAnimRate ( int );
	/*070*/	virtual float GetActiveAnimFrame ( int );
	/*071*/	virtual int SetBlendParams ( int, float, float, float, class FName, int );
	/*072*/	virtual int GetAttachMatrix ( class FName, class FMatrix & );
	/*073*/	virtual int GetAttachCount ();
	/*074*/	virtual int GetAttachIdx ( int, class FName &, class FMatrix & );
	/*075*/	virtual int CheckAnimFinished ( int );
	/*076*/	virtual int SetBoneLocation ( class FName, class FVector, float );
	/*077*/	virtual int SetBoneRotation ( class FName, class FRotator, int, float );
	/*078*/	virtual int SetBoneScale ( int, float, class FName );
	/*079*/	virtual int MatchRefBone ( class FName );
	/*080*/	virtual void DrawVolume ( class AActor *, class FRenderInterface *, class FVector );
	/*081*/	virtual bool InitSkeletalPhysics ();
	/*082*/	virtual bool TickSkeletalPhysics ( float );
	/*083*/	virtual void SetAnimFrame ( int, float, int );
	/*084*/	virtual int AnimForcePose ( class FName, float, float, int );
	/*085*/	virtual class FBox GetCollisionBoundingBox ( class AActor const * );
	/*086*/	virtual class UMaterial * GetMaterial ( int, class AActor * );
	/*087*/	virtual void GetFrame ( class AActor *, class FLevelSceneNode *, class FVector *, int, int &, DWORD );
	/*088*/	virtual class FMatrix MeshToWorld ();
//	/*089*/	virtual void Render ( class FDynamicActor *, class FLevelSceneNode *, class TList<class FDynamicLight *> *, class TList<struct FProjectorRenderInfo *> *, class FRenderInterface * );
	/*090*/	virtual void SetScale ( class FVector );
	/*091*/	virtual void MeshBuildBounds ();

	UMeshInstance ( class UMeshInstance const & );
	UMeshInstance ();
	static void * operator new ( UINT, class UObject *, TCHAR *, DWORD );
	static void * operator new ( UINT, class UObject *, TCHAR const *, DWORD );
	static void * operator new ( UINT, class UObject *, class FName, DWORD );
	static void * operator new ( UINT, enum EInternal * );
	class UMeshInstance & operator= ( class UMeshInstance const & );
	static void InternalConstructor ( void * );
	static class UClass * StaticClass ();

private:
	static class UClass PrivateStaticClass;
};


class DLL_IMPORT ULodMeshInstance : public UMeshInstance
{
public:

};

class DLL_IMPORT USkeletalMeshInstance : public ULodMeshInstance
{
public:
	void BlendToAlpha(int,float,float);
	void ClearSkelAnims(void);
	void ClosestPointOnLineToPoint(FVector &,FVector &,FVector &,float *);
	void CopyAnimation(int,int);
	FString CurrentLIPSincAnim(void);
	int CylinderLineHit(struct FCheckResult &,FVector,FVector,float,FVector,FVector,FVector,int);
	int EnableChannelNotify(int,int);
	void FindClosestPoints(FVector &,FVector &,float *,FVector &,FVector &,float *);
	void FindPlaneHit(FVector &,FVector &,FVector &,FVector &,FVector &);
	void FindSphereHit(FVector &,float,FVector &,FVector &,FVector &);
	void ForceAnimRate(int,float);
	void ForceUpdate(void);
	int GetAnimChannelCount(void);
	float GetAnimFrame(int);
	float GetAnimRateOnChannel(int);
	FName GetAnimSequence(int);
	float GetBlendAlpha(int);
	FCoords GetBoneCoords(unsigned long);
	FRotator GetBoneRotation(unsigned long,int);
	FRotator GetBoneRotation(FName,int);
	int GetMeshJointsAndNormals(AActor *,TArray<FVector> *,int);
	int GetMeshVertsAndNormals(AActor *,TArray<FVector> *);
	FVector GetRootLocation(void);
	FVector GetRootLocationDelta(void);
	FRotator GetRootRotation(void);
	FRotator GetRootRotationDelta(void);
	FCoords GetTagCoords(FName);
	int HasLIPSincAnim(FName);
	int HighlightBoneRadius(int);
	static void InternalConstructor(void *);
	int IsPlayingLIPSincAnim(void);
	int LockRootMotion(int);
	int MatchRefBone(FName);
	int PauseLIPSincAnim(void);
	int PerBoneLineCheck(struct FCheckResult &,AActor *,FVector,FVector,FVector,unsigned long);
	void PlayLIPSincAnim(FName,float,float,float);
	int ResumeLIPSincAnim(void);
	void SetAnimRate(int,float);
	void SetAnimSequence(int,FName);
	void SetBlendAlpha(int,float);
	int SetBlendParams(int,float,float,float,FName,int);
	int SetBoneDirection(FName,FRotator,FVector,float,int);
	int SetBoneLocation(FName,FVector,float);
	int SetBoneRotation(FName,FRotator,int,float);
	int SetBoneScale(int,float,FName);
	int SetSkelAnim(void *,void *);
	static UClass * StaticClass(void);
	int StopAnimating(int);
	int StopLIPSincAnim(void);
	void UpdateBlendAlpha(int,float,float);
	int ValidateAnimChannel(int);
};

class ENGINE_API AActor : public UObject
{
public:
	BYTE LightType;
	BYTE LightEffect;
	BYTE LightHue;
	BYTE LightSaturation;
	FLOAT LightBrightness;
	FLOAT LightRadius;
	BYTE LightPeriod;
	BYTE LightPhase;
	BYTE LightCone;
	BYTE DrawType;
	BYTE StaticFilterState;
	class UStaticMesh* StaticMesh;
	class AActor* Owner;
	class AActor* Base;
	FActorRenderDataPtr ActorRenderData;
	FLightRenderDataPtr LightRenderData;
	INT RenderRevision;
	TArray<FBatchReference> StaticSectionBatches;
	FName ForcedVisibilityZoneTag;
	FLOAT CullDistance;
	BITFIELD bSpecialLit:1;
	BITFIELD bActorShadows:1;
	BITFIELD bCorona:1;
	BITFIELD bDirectionalCorona:1;
	BITFIELD bAttenByLife:1;
	BITFIELD bLightingVisibility:1;
	BITFIELD bUseDynamicLights:1;
	BITFIELD bLightChanged:1;
	BITFIELD bDramaticLighting:1;
	BITFIELD bStatic:1;
	BITFIELD bHidden:1;
	BITFIELD bNoDelete:1;
	BITFIELD bDeleteMe:1;
	BITFIELD bTicked:1;
	BITFIELD bDynamicLight:1;
	BITFIELD bTimerLoop:1;
	BITFIELD bOnlyOwnerSee:1;
	BITFIELD bHighDetail:1;
	BITFIELD bSuperHighDetail:1;
	BITFIELD bOnlyDrawIfAttached:1;
	BITFIELD bStasis:1;
	BITFIELD bTrailerAllowRotation:1;
	BITFIELD bTrailerSameRotation:1;
	BITFIELD bTrailerPrePivot:1;
	BITFIELD bWorldGeometry:1;
	BITFIELD bAcceptsProjectors:1;
	BITFIELD bOrientOnSlope:1;
	BITFIELD bOnlyAffectPawns:1;
	BITFIELD bDisableSorting:1;
	BITFIELD bIgnoreEncroachers:1;
	BITFIELD bShowOctreeNodes:1;
	BITFIELD bWasSNFiltered:1;
	BITFIELD bShouldStopKarma:1;
	BITFIELD bDetailAttachment:1;
	BITFIELD bNetTemporary:1;
	BITFIELD bOnlyRelevantToOwner:1;
	BITFIELD bNetDirty:1;
	BITFIELD bAlwaysRelevant:1;
	BITFIELD bReplicateInstigator:1;
	BITFIELD bReplicateMovement:1;
	BITFIELD bSkipActorPropertyReplication:1;
	BITFIELD bUpdateSimulatedPosition:1;
	BITFIELD bTearOff:1;
	BITFIELD bOnlyDirtyReplication:1;
	BITFIELD bReplicateAnimations:1;
	BITFIELD bNetInitialRotation:1;
	BITFIELD bCompressedPosition:1;
	BITFIELD bAlwaysZeroBoneOffset:1;
	BITFIELD bIgnoreVehicles:1;
	BITFIELD bDeferRendering:1;
	BITFIELD bBadStateCode:1;
	BYTE Physics;
	BYTE RemoteRole;
	BYTE Role;
	INT NetTag;
	FLOAT NetUpdateTime;
	FLOAT NetUpdateFrequency;
	FLOAT NetPriority;
	class APawn* Instigator;
	class USound* AmbientSound;
	FName AttachmentBone;
	class ALevelInfo* Level;
	class ULevel* XLevel;
	FLOAT LifeSpan;
	FPointRegion Region;
	FLOAT TimerRate;
	class UMaterial* OverlayMaterial;
	class UMesh* Mesh;
	FLOAT LastRenderTime;
	FName Tag;
	TArray<INT> Leaves;
	FName Event;
	class AInventory* Inventory;
	FLOAT TimerCounter;
	class UMeshInstance* MeshInstance;
	FLOAT LODBias;
	FName InitialState;
	FName Group;
	TArray<class AActor*> Touching;
	TArray<INT*> OctreeNodes;
	FBox OctreeBox;
	FVector OctreeBoxCenter;
	FVector OctreeBoxRadii;
	class AActor* Deleted;
	FLOAT LatentFloat;
	INT CollisionTag;
	INT JoinedTag;
	class APhysicsVolume* PhysicsVolume;
	FVector Location;
	FRotator Rotation;
	FVector Velocity;
	FVector Acceleration;
	FVector CachedLocation;
	FRotator CachedRotation;
	FMatrix CachedLocalToWorld;
	FName AttachTag;
	TArray<class AActor*> Attached;
	FVector RelativeLocation;
	FRotator RelativeRotation;
	FMatrix HardRelMatrix;
	TArray<FProjectorRenderInfoPtr> Projectors;
	TArray<FStaticMeshProjectorRenderInfoPtr> StaticMeshProjectors;
	class UMaterial* Texture;
	class UStaticMeshInstance* StaticMeshInstance;
	class UModel* Brush;
	FLOAT DrawScale;
	FVector DrawScale3D;
	FVector PrePivot;
	TArray<class UMaterial*> Skins;
	class UMaterial* RepSkin;
	BYTE AmbientGlow;
	BYTE MaxLights;
	BYTE UV2Mode;
	class UConvexVolume* AntiPortal;
	class UMaterial* UV2Texture;
	FLOAT ScaleGlow;
	BYTE SurfaceType;
	BYTE Style;
	BITFIELD bUnlit:1;
	BITFIELD bShadowCast:1;
	BITFIELD bStaticLighting:1;
	BITFIELD bUseLightingFromBase:1;
	BITFIELD bHurtEntry:1;
	BITFIELD bGameRelevant:1;
	BITFIELD bCollideWhenPlacing:1;
	BITFIELD bTravel:1;
	BITFIELD bMovable:1;
	BITFIELD bDestroyInPainVolume:1;
	BITFIELD bCanBeDamaged:1;
	BITFIELD bShouldBaseAtStartup:1;
	BITFIELD bPendingDelete:1;
	BITFIELD bAnimByOwner:1;
	BITFIELD bOwnerNoSee:1;
	BITFIELD bCanTeleport:1;
	BITFIELD bClientAnim:1;
	BITFIELD bDisturbFluidSurface:1;
	FLOAT FluidSurfaceShootStrengthMod;
	BITFIELD bAlwaysTick:1;
	BITFIELD bFullVolume:1;
	BITFIELD bNotifyLocalPlayerTeamReceived:1;
	BITFIELD bHardAttach:1;
	BITFIELD bForceSkelUpdate:1;
	BITFIELD bClientAuthoritative:1;
	BYTE SoundVolume;
	BYTE SoundPitch;
	BYTE SoundOcclusion;
	FLOAT SoundRadius;
	FLOAT TransientSoundVolume;
	FLOAT TransientSoundRadius;
	FLOAT CollisionRadius;
	FLOAT CollisionHeight;//////////////
	BITFIELD bCollideActors:1;
	BITFIELD bCollideWorld:1;
	BITFIELD bBlockActors:1;
	BITFIELD bBlockPlayers:1;
	BITFIELD bBlockProjectiles:1;
	BITFIELD bProjTarget:1;
	BITFIELD bBlockZeroExtentTraces:1;
	BITFIELD bBlockNonZeroExtentTraces:1;
	BITFIELD bAutoAlignToTerrain:1;
	BITFIELD bUseCylinderCollision:1;
	BITFIELD bBlockKarma:1;
	BITFIELD bBlocksTeleport:1;
	BITFIELD bAlwaysFaceCamera:1;
	BITFIELD bNetNotify:1;
	BITFIELD bClientTrigger:1;
	BITFIELD bUseCollisionStaticMesh:1;
	BITFIELD bSmoothKarmaStateUpdates:1;
	BITFIELD bIgnoreOutOfWorld:1;
	BITFIELD bBounce:1;
	BITFIELD bFixedRotationDir:1;
	BITFIELD bRotateToDesired:1;
	BITFIELD bIgnoreTerminalVelocity:1;
	BITFIELD bOrientToVelocity:1;
	BITFIELD bInterpolating:1;
	BITFIELD bJustTeleported:1;
	FLOAT Mass;
	FLOAT Buoyancy;
	FRotator RotationRate;
	FRotator DesiredRotation;
	class AActor* PendingTouch;
	FVector ColLocation;
	FName ExcludeTag[8];
	class UKarmaParamsCollision* KParams;
	INT KStepTag;
	FLOAT AccumKarmaAngleError;
	FAnimRep SimAnim;
	BYTE ForceType;
	FLOAT ForceRadius;
	FLOAT ForceScale;
	FLOAT ForceNoise;
	BITFIELD bNetInitial:1;
	BITFIELD bNetOwner:1;
	BITFIELD bNetRelevant:1;
	BITFIELD bDemoRecording:1;
	BITFIELD bClientDemoRecording:1;
	BITFIELD bRepClientDemo:1;
	BITFIELD bClientDemoNetFunc:1;
	BITFIELD bDemoOwner:1;
	BITFIELD bNoRepMesh:1;
	BITFIELD bNotOnDedServer:1;
	BITFIELD bAlreadyPrecachedMaterials:1;
	BITFIELD bAlreadyPrecachedMeshes:1;
	BITFIELD bHiddenEd:1;
	BITFIELD bHiddenEdGroup:1;
	BITFIELD bDirectional:1;
	BITFIELD bSelected:1;
	BITFIELD bEdShouldSnap:1;
	BITFIELD bEdSnap:1;
	BITFIELD bTempEditor:1;
	BITFIELD bObsolete:1;
	BITFIELD bPathColliding:1;
	BITFIELD bPathTemp:1;
	BITFIELD bScriptInitialized:1;
	BITFIELD bLockLocation:1;
	BITFIELD bTraceWater:1;
	class UClass* MessageClass;
	FLOAT OverlayTimer;
	FLOAT ClientOverlayTimer;
	FLOAT ClientOverlayCounter;
	class UMaterial* HighDetailOverlay;


	AActor(AActor const &);
	AActor(void);
	static void * operator new(unsigned int,UObject *,unsigned short *,unsigned long);
	static void * operator new(unsigned int,UObject *,unsigned short const *,unsigned long);
	static void * operator new(unsigned int,UObject *,FName,unsigned long);
	static void * operator new(unsigned int,enum EInternal *);
	AActor & operator=(AActor const &);
	void AttachProjector(void * AProjector);
	int AttachToBone(AActor *,FName);
	void BeginTouch(AActor *);
	void CheckNoiseHearing(float);
	void ClearOctreeData(void);
	void ClearRenderData(void);
	int DetachFromBone(AActor *);
	void DetachProjector(void * Projector);
	void EndTouch(AActor *,int);
	void FindBase(void);
	void * GetActorRenderData(void);
	AActor * GetAmbientLightingActor(void);
	FVector GetCylinderExtent(void)const ;
	AActor * GetHitActor(void);
	ULevel * GetLevel(void)const ;
	void * GetLightRenderData(void);
	void GetNetBuoyancy(float &,float &);
	APawn * GetPlayerPawn(void)const ;
	AActor * GetTopOwner(void);
	FRotator GetViewRotation(void);
	static void InternalConstructor(void *);
	int IsAnimating(int)const ;
	int IsBasedOn(AActor const *)const ;
	int IsBlockedBy(AActor const *)const ;
	int IsBrush(void)const ;
	int IsEncroacher(void)const ;
	int IsHiddenEd(void);
	int IsInOctree(void);
	int IsInZone(AZoneInfo const *)const ;
	int IsMovingBrush(void)const ;
	int IsOverlapping(AActor *,struct FCheckResult *);
	int IsOwnedBy(AActor const *)const ;
	int IsPlayer(void)const ;
	int IsStaticBrush(void)const ;
	int IsVolumeBrush(void)const ;
	void KAddAngularImpulse(FVector);
	void KAddForces(FVector,FVector);
	void KAddImpulse(FVector,FVector,FName);
	void KDrawRigidBodyState(struct _FKRigidBodyState *,int);
	void KFreezeRagdoll(void);
	void KGetRigidBodyState(struct _FKRigidBodyState *);
	int KIsAwake(void);
	void KWake(void);
	float LifeFraction(void);
	void PlayReplicatedAnim(void);
	void ProcessDemoRecFunction(UFunction *,void *,struct FFrame *);
	void ReplicateAnim(int,FName,float,float,float,float,int);
	void SetCollision(int,int);
	void SetCollisionSize(float,float);
	void SetDrawScale3D(FVector);
	void SetDrawScale(float);
	void SetDrawType(enum EDrawType);
	void SetOwner(AActor *);
	void SetStaticMesh(UStaticMesh *);
	static UClass * StaticClass(void);
	FVector SuggestFallVelocity(FVector,FVector,float,float,float,float);
	int TestCanSeeMe(void* PlayerController);
	void TextToSpeech(FString const &,float);
	void TwoWallAdjust(FVector &,FVector &,FVector &,FVector &,float);
	void UpdateOverlay(float);
	void UpdateRelativeRotation(void);
	void UpdateRenderData(void);
	void UpdateTimers(float);

	void eventAnimEnd(int);
	void eventAttach(AActor *);
	void eventBaseChange(void);
	void eventBeginEvent(void);
	void eventBeginPlay(void);
	void eventBroadcastLocalizedMessage(UClass *,int,APlayerReplicationInfo *,APlayerReplicationInfo *,UObject *);
	void eventBump(AActor *);
	void eventClientTrigger(void);
	void eventDemoPlaySound(USound *,unsigned char,float,unsigned long,float,float,unsigned long);
	void eventDestroyed(void);
	void eventDetach(AActor *);
	void eventEncroachedBy(AActor *);
	unsigned long eventEncroachingOn(AActor *);
	void eventEndEvent(void);
	void eventEndedRotation(void);
	void eventFalling(void);
	void eventFellOutOfWorld(unsigned char);
	void eventFinishedInterpolation(void);
	void eventGainedChild(AActor *);
	void eventHitWall(FVector,AActor *);
	void eventKApplyForce(FVector &,FVector &);
	void eventKImpact(AActor *,FVector,FVector,FVector);
	void eventKSkelConvulse(void);
	unsigned long eventKUpdateState(struct _FKRigidBodyState &);
	void eventKVelDropBelow(void);
	void eventKilledBy(APawn *);
	void eventLIPSincAnimEnd(void);
	void eventLanded(FVector);
	void eventLostChild(AActor *);
	void eventPhysicsVolumeChange(APhysicsVolume *);
	void eventPostBeginPlay(void);
	void eventPostLoadSavedGame(void);
	void eventPostNetBeginPlay(void);
	void eventPostNetReceive(void);
	void eventPostTeleport(ATeleporter *);
	void eventPostTouch(AActor *);
	void eventPreBeginPlay(void);
	void eventPreSaveGame(void);
	unsigned long eventPreTeleport(ATeleporter *);
	void eventRanInto(AActor *);
	void eventRecoverFromBadStateCode(void);
	void eventRenderTexture(UScriptedTexture *);
	void eventSetInitialState(void);
	AActor * eventSpecialHandling(APawn *);
	void eventTakeDamage(int,APawn *,FVector,FVector,UClass *);
	void eventTick(float);
	void eventTimer(void);
	void eventTornOff(void);
	void eventTouch(AActor *);
	void eventTravelPostAccept(void);
	void eventTravelPreAccept(void);
	void eventTrigger(AActor *,APawn *);
	void eventTriggerEvent(FName,AActor *,APawn *);
	void eventUnTouch(AActor *);
	void eventUnTrigger(AActor *,APawn *);
	void eventUsedBy(APawn *);
	void eventZoneChange(AZoneInfo *);
	void execAddToPackageMap(struct FFrame &,void * const);
	void execAdd_ColorColor(struct FFrame &,void * const);
	void execAdjustVolume(struct FFrame &,void * const);
	void execAllActors(struct FFrame &,void * const);
	void execAllowMusicPlayback(struct FFrame &,void * const);
	void execAnimBlendParams(struct FFrame &,void * const);
	void execAnimBlendToAlpha(struct FFrame &,void * const);
	void execAnimIsInGroup(struct FFrame &,void * const);
	void execAnimStopLooping(struct FFrame &,void * const);
	void execAttachToBone(struct FFrame &,void * const);
	void execAutonomousPhysics(struct FFrame &,void * const);
	void execBasedActors(struct FFrame &,void * const);
	void execBoneRefresh(struct FFrame &,void * const);
	void execChangeBaseParamsFeedbackEffect(struct FFrame &,void * const);
	void execChangeSpringFeedbackEffect(struct FFrame &,void * const);
	void execChildActors(struct FFrame &,void * const);
	void execClearStayingDebugLines(struct FFrame &,void * const);
	void execClock(struct FFrame &,void * const);
	void execCollidingActors(struct FFrame &,void * const);
	void execConsoleCommand(struct FFrame &,void * const);
	void execCopyObjectToClipboard(struct FFrame &,void * const);
	void execCurrentLIPSincAnim(struct FFrame &,void * const);
	void execDebugClock(struct FFrame &,void * const);
	void execDebugUnclock(struct FFrame &,void * const);
	void execDemoPlaySound(struct FFrame &,void * const);
	void execDestroy(struct FFrame &,void * const);
	void execDetachFromBone(struct FFrame &,void * const);
	void execDrawDebugCircle(struct FFrame &,void * const);
	void execDrawDebugLine(struct FFrame &,void * const);
	void execDrawDebugSphere(struct FFrame &,void * const);
	void execDrawStayingDebugLine(struct FFrame &,void * const);
	void execDynamicActors(struct FFrame &,void * const);
	void execEnableChannelNotify(struct FFrame &,void * const);
	void execError(struct FFrame &,void * const);
	void execFastTrace(struct FFrame &,void * const);
	void execFinishAnim(struct FFrame &,void * const);
	void execFinishInterpolation(struct FFrame &,void * const);
	void execForceFeedbackSupported(struct FFrame &,void * const);
	void execFreezeAnimAt(struct FFrame &,void * const);
	void execGetAllInt(struct FFrame &,void * const);
	void execGetAllIntDesc(struct FFrame &,void * const);
	void execGetAnimParams(struct FFrame &,void * const);
	void execGetBoneCoords(struct FFrame &,void * const);
	void execGetBoneRotation(struct FFrame &,void * const);
	void execGetCacheEntry(struct FFrame &,void * const);
	void execGetClosestBone(struct FFrame &,void * const);
	void execGetMapName(struct FFrame &,void * const);
	void execGetMeshName(struct FFrame &,void * const);
	void execGetNextInt(struct FFrame &,void * const);
	void execGetNextIntDesc(struct FFrame &,void * const);
	void execGetNextSkin(struct FFrame &,void * const);
	void execGetNotifyChannel(struct FFrame &,void * const);
	void execGetRenderBoundingSphere(struct FFrame &,void * const);
	void execGetRootLocation(struct FFrame &,void * const);
	void execGetRootLocationDelta(struct FFrame &,void * const);
	void execGetRootRotation(struct FFrame &,void * const);
	void execGetRootRotationDelta(struct FFrame &,void * const);
	void execGetSoundDuration(struct FFrame &,void * const);
	void execGetURLMap(struct FFrame &,void * const);
	void execGetUrlOption(struct FFrame &,void * const);
	void execHasAnim(struct FFrame &,void * const);
	void execHasLIPSincAnim(struct FFrame &,void * const);
	void execIsAnimating(struct FFrame &,void * const);
	void execIsJoinedTo(struct FFrame &,void * const);
	void execIsPlayingLIPSincAnim(struct FFrame &,void * const);
	void execIsTweening(struct FFrame &,void * const);
	void execKAddAngularImpulse(struct FFrame &,void * const);
	void execKAddBoneLifter(struct FFrame &,void * const);
	void execKAddImpulse(struct FFrame &,void * const);
	void execKDisableCollision(struct FFrame &,void * const);
	void execKDrawRigidBodyState(struct FFrame &,void * const);
	void execKEnableCollision(struct FFrame &,void * const);
	void execKFreezeRagdoll(struct FFrame &,void * const);
	void execKGetActorGravScale(struct FFrame &,void * const);
	void execKGetCOMOffset(struct FFrame &,void * const);
	void execKGetCOMPosition(struct FFrame &,void * const);
	void execKGetDampingProps(struct FFrame &,void * const);
	void execKGetFriction(struct FFrame &,void * const);
	void execKGetImpactThreshold(struct FFrame &,void * const);
	void execKGetInertiaTensor(struct FFrame &,void * const);
	void execKGetMass(struct FFrame &,void * const);
	void execKGetRBQuaternion(struct FFrame &,void * const);
	void execKGetRestitution(struct FFrame &,void * const);
	void execKGetRigidBodyState(struct FFrame &,void * const);
	void execKGetSimParams(struct FFrame &,void * const);
	void execKGetSkelMass(struct FFrame &,void * const);
	void execKIsAwake(struct FFrame &,void * const);
	void execKIsRagdollAvailable(struct FFrame &,void * const);
	void execKMakeRagdollAvailable(struct FFrame &,void * const);
	void execKRBVecFromVector(struct FFrame &,void * const);
	void execKRBVecToVector(struct FFrame &,void * const);
	void execKRemoveAllBoneLifters(struct FFrame &,void * const);
	void execKRemoveLifterFromBone(struct FFrame &,void * const);
	void execKScaleJointLimits(struct FFrame &,void * const);
	void execKSetActorGravScale(struct FFrame &,void * const);
	void execKSetBlockKarma(struct FFrame &,void * const);
	void execKSetCOMOffset(struct FFrame &,void * const);
	void execKSetDampingProps(struct FFrame &,void * const);
	void execKSetFriction(struct FFrame &,void * const);
	void execKSetImpactThreshold(struct FFrame &,void * const);
	void execKSetInertiaTensor(struct FFrame &,void * const);
	void execKSetMass(struct FFrame &,void * const);
	void execKSetRestitution(struct FFrame &,void * const);
	void execKSetSimParams(struct FFrame &,void * const);
	void execKSetSkelVel(struct FFrame &,void * const);
	void execKSetStayUpright(struct FFrame &,void * const);
	void execKSetStayUprightParams(struct FFrame &,void * const);
	void execKWake(struct FFrame &,void * const);
	void execLinkMesh(struct FFrame &,void * const);
	void execLinkSkelAnim(struct FFrame &,void * const);
	void execLockRootMotion(struct FFrame &,void * const);
	void execLoopAnim(struct FFrame &,void * const);
	void execMakeNoise(struct FFrame &,void * const);
	void execMove(struct FFrame &,void * const);
	void execMoveCacheEntry(struct FFrame &,void * const);
	void execMoveSmooth(struct FFrame &,void * const);
	void execMultiply_ColorFloat(struct FFrame &,void * const);
	void execMultiply_FloatColor(struct FFrame &,void * const);
	void execOnlyAffectPawns(struct FFrame &,void * const);
	void execPauseStream(struct FFrame &,void * const);
	void execPlayAnim(struct FFrame &,void * const);
	void execPlayFeedbackEffect(struct FFrame &,void * const);
	void execPlayLIPSincAnim(struct FFrame &,void * const);
	void execPlayMusic(struct FFrame &,void * const);
	void execPlayOwnedSound(struct FFrame &,void * const);
	void execPlaySound(struct FFrame &,void * const);
	void execPlayStream(struct FFrame &,void * const);
	void execPlayerCanSeeMe(struct FFrame &,void * const);
	void execPollFinishAnim(struct FFrame &,void * const);
	void execPollFinishInterpolation(struct FFrame &,void * const);
	void execPollSleep(struct FFrame &,void * const);
	void execRadiusActors(struct FFrame &,void * const);
	void execResetStaticFilterState(struct FFrame &,void * const);
	void execSeekStream(struct FFrame &,void * const);
	void execSetAnimFrame(struct FFrame &,void * const);
	void execSetBase(struct FFrame &,void * const);
	void execSetBoneDirection(struct FFrame &,void * const);
	void execSetBoneLocation(struct FFrame &,void * const);
	void execSetBoneRotation(struct FFrame &,void * const);
	void execSetBoneScale(struct FFrame &,void * const);
	void execSetCollision(struct FFrame &,void * const);
	void execSetCollisionSize(struct FFrame &,void * const);
	void execSetDrawScale3D(struct FFrame &,void * const);
	void execSetDrawScale(struct FFrame &,void * const);
	void execSetDrawType(struct FFrame &,void * const);
	void execSetLocation(struct FFrame &,void * const);
	void execSetOwner(struct FFrame &,void * const);
	void execSetPhysics(struct FFrame &,void * const);
	void execSetRelativeLocation(struct FFrame &,void * const);
	void execSetRelativeRotation(struct FFrame &,void * const);
	void execSetRotation(struct FFrame &,void * const);
	void execSetStaticMesh(struct FFrame &,void * const);
	void execSetTimer(struct FFrame &,void * const);
	void execShouldBeHidden(struct FFrame &,void * const);
	void execSleep(struct FFrame &,void * const);
	void execSpawn(struct FFrame &,void * const);
	void execStopAllMusic(struct FFrame &,void * const);
	void execStopAnimating(struct FFrame &,void * const);
	void execStopFeedbackEffect(struct FFrame &,void * const);
	void execStopLIPSincAnim(struct FFrame &,void * const);
	void execStopMusic(struct FFrame &,void * const);
	void execStopStream(struct FFrame &,void * const);
	void execSubtract_ColorColor(struct FFrame &,void * const);
	void execSuggestFallVelocity(struct FFrame &,void * const);
	void execTextToSpeech(struct FFrame &,void * const);
	void execTouchingActors(struct FFrame &,void * const);
	void execTrace(struct FFrame &,void * const);
	void execTraceActors(struct FFrame &,void * const);
	void execTraceThisActor(struct FFrame &,void * const);
	void execTweenAnim(struct FFrame &,void * const);
	void execUnClock(struct FFrame &,void * const);
	void execUpdateURL(struct FFrame &,void * const);
	void execVisibleActors(struct FFrame &,void * const);
	void execVisibleCollidingActors(struct FFrame &,void * const);
	int fixedTurn(int,int,int);
	int moveSmooth(FVector);
	void physKarmaRagDoll(float);
	void physKarmaRagDoll_internal(float);
	void physKarma_internal(float);
	void physProjectile(float,int);
	void physRootMotion(float);
	void physTrailer(float);
	void physicsRotation(float);
	void postKarmaStep_skeletal(void);
	void preKarmaStep_skeletal(float);

	virtual int* 			GetOptimizedRepList	(unsigned char *,struct FPropertyRetirement *,int *,void *,void *);
	virtual int 			IsJoinedTo			(AActor const *);
	virtual int 			ShouldUpdateRelativeLocation(void);
	virtual void 			DoCleanup			(void);
	virtual float 			GetNetPriority		(FVector &,FVector &,AActor *,float,float);
	virtual float 			WorldLightRadius		(void);
	virtual int 			Tick					(float,enum ELevelTick);
	virtual void 			PostEditMove			(void);
	virtual void 			PostEditLoad			(void);
	virtual void 			PreRaytrace			(void);
	virtual void 			PostRaytrace			(void);
	virtual void 			Spawned				(void);
	virtual void 			PreNetReceive		(void);
	virtual void 			PostNetReceive		(void);
	virtual void 			PostNetReceiveLocation(void);
	virtual UMaterial*		GetSkin				(int);
	virtual int 			ShouldTickInEntry	(void);
	virtual FCoords 		ToLocal				(void);
	virtual FCoords 		ToWorld				(void);
	virtual FMatrix 		LocalToWorld			(void);
	virtual FMatrix 		WorldToLocal			(void);
	virtual void 			PostScriptDestroyed	(void);
	virtual void 			CleanupSubObjects	(void);
	virtual int 			ShouldTrace			(AActor *,DWORD);
	virtual UPrimitive* 	GetPrimitive			(void);
	virtual void 			NotifyBump			(AActor *);
	virtual void 			SetBase				(AActor *,FVector,int);
	virtual void 			NotifyAnimEnd		(int);
	virtual void 			NotifyLIPSincAnimEnd	(void);
	virtual void 			UpdateAnimation		(float);
	virtual void 			StartAnimPoll		(void);
	virtual int 			CheckAnimFinished	(int);
	virtual int 			CheckOwnerUpdated	(void);
	virtual void 			TickAuthoritative	(float);
	virtual void 			TickSimulated		(float);
	virtual void 			TickSpecial			(float);
	virtual int 			PlayerControlled		(void);
	virtual int 			IsNetRelevantFor		(void *,AActor *,FVector);
	virtual int 			DelayScriptReplication(float);
	virtual void 			RenderEditorInfo		(void *,void *,void *);
	virtual void 			RenderEditorSelected	(void *,void *,void *);
	virtual float 			GetAmbientVolume		(float);
	virtual void 			SetZone				(int,int);
	virtual void 			SetVolumes			(void);
	virtual void 			SetVolumes2			(TArray<void *> const &);
	virtual void 			PostBeginPlay		(void);
	virtual void 			setPhysics			(unsigned char,AActor *,FVector);
	virtual void 			performPhysics		(float);
	virtual void 			BoundProjectileVelocity(void);
	virtual void 			processHitWall		(FVector,AActor *);
	virtual void 			processLanded		(FVector,AActor *,float,int);
	virtual void 			physFalling			(float,int);
	virtual void 			physWalking			(float,int);
	virtual void 			physFlying			(float,int);
	virtual FRotator		FindSlopeRotation	(FVector,FRotator);
	virtual void 			SmoothHitWall		(FVector,AActor *);
	virtual void 			stepUp				(FVector,FVector,FVector,struct FCheckResult &);
	virtual int 			ShrinkCollision		(AActor *,FVector const &);
	virtual void* 			getKModel			(void);
	virtual void 			physKarma			(float);
	virtual void 			preKarmaStep			(float);
	virtual void 			postKarmaStep		(void);
	virtual void 			preContactUpdate		(void);
	virtual int 			KRepulsorsShouldHit	(AActor *);
	virtual int 			ReachedBy			(APawn *,FVector);
	virtual int 			NoReachDistance		(void);
	virtual int 			AddMyMarker			(AActor *);
	virtual void 			ClearMarker			(void);
	virtual AActor*			AssociatedLevelGeometry(void);
	virtual int 			HasAssociatedLevelGeometry(AActor *);
	virtual FVector			GetDestination		(void *);
	virtual int 			PlayAnim				(int,FName,float,float,int);
	virtual FVector			GetRootLocation		(void);
	virtual void 			CheckForErrors		(void);
	virtual void 			PrePath				(void);
	virtual void 			PostPath				(void);
	virtual AActor* 		GetProjectorBase		(void);
	virtual int 			IsABrush				(void);
	virtual int 			IsAMover				(void);
	virtual int 			IsAVolume			(void);
	virtual void 			PostRender			(void *,void *);
	virtual void* GetAPlayerController	(void);
	virtual void* 			etAPawn				(void);
	virtual void* 	GetAProjectile		(void);
	virtual void* 		GetAMover			(void);
	virtual void* GetTopPlayerController(void);

private:
	static UClass PrivateStaticClass;

};

enum EIntelligence
{
    BRAINS_NONE             =0,
    BRAINS_REPTILE          =1,
    BRAINS_MAMMAL           =2,
    BRAINS_HUMAN            =3,
    BRAINS_MAX              =4,
};
enum EAttitude
{
    ATTITUDE_Fear           =0,
    ATTITUDE_Hate           =1,
    ATTITUDE_Frenzy         =2,
    ATTITUDE_Threaten       =3,
    ATTITUDE_Ignore         =4,
    ATTITUDE_Friendly       =5,
    ATTITUDE_Follow         =6,
    ATTITUDE_MAX            =7,
};

struct APawn_eventPainTimer_Parms
{
};
struct APawn_eventSpeechTimer_Parms
{
};
struct APawn_eventHeadZoneChange_Parms
{
    class AZoneInfo* newHeadZone;
};
struct APawn_eventFootZoneChange_Parms
{
    class AZoneInfo* newFootZone;
};
struct APawn_eventWalkTexture_Parms
{
    class UTexture* Texture;
    FVector StepLocation;
    FVector StepNormal;
};
struct APawn_eventEnemyNotVisible_Parms
{
};
struct APawn_eventUpdateTactics_Parms
{
    FLOAT DeltaTime;
};
struct APawn_eventUpdateEyeHeight_Parms
{
    FLOAT DeltaTime;
};
struct APawn_eventSeePlayer_Parms
{
    class AActor* Seen;
};
struct APawn_eventHearNoise_Parms
{
    FLOAT Loudness;
    class AActor* NoiseMaker;
};
struct APawn_eventClientHearSound_Parms
{
    class AActor* Actor;
    INT Id;
    class USound* S;
    FVector SoundLocation;
    FVector Parameters;
};
struct APawn_eventLongFall_Parms
{
};
struct APawn_eventPlayerTimeout_Parms
{
};
struct APawn_eventReceiveLocalizedMessage_Parms
{
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct APawn_eventTeamMessage_Parms
{
    class APlayerReplicationInfo* PRI;
    FString S;
    FName Type;
    BITFIELD bBeep;
};
struct APawn_eventClientMessage_Parms
{
    FString S;
    FName Type;
    BITFIELD bBeep;
};
struct APawn_eventAlterDestination_Parms
{
};
struct APawn_eventMayFall_Parms
{
};

struct ENGINE_API FHitFXData
{
    FName Bone GCC_PACK(4);
    class UClass* damtype;
    BITFIELD bSever:1 GCC_PACK(4);
    FRotator rotDir GCC_PACK(4);
};

struct FCompressedPosition
{
  FVector Location;
  FRotator Rotation;
  FVector Velocity;
};

class ENGINE_API APawn : public AActor
{
private:
      class FVector findWaterLine(class FVector,class FVector);
      float Swim(class FVector,struct FCheckResult &);
      int checkFloor(class FVector,struct FCheckResult &);
      int findNewFloor(class FVector,float,float,int);
      int Get4WayDirection(void);
      int Pick3DWallAdjust(class FVector,class AActor *);
      static class UClass PrivateStaticClass;
      void calcVelocity(class FVector,float,float,float,int,int,int);
      void PlayIdle(void);
      void PlayLand(void);
      void PlayRunning(void);
      void SetTwistLook(int,int);
      void SpiderstepUp(class FVector,class FVector,struct FCheckResult &);
      void UpdateInAir(void);
      void UpdateOnGround(void);
      void UpdateSwimming(void);
      void UpdateTwistLook(float);

public:
	class AController* Controller;
	int unk;
	FLOAT NetRelevancyTime;
	class APlayerController* LastRealViewer;
	class AActor* LastViewer;
	FLOAT LastLocTime;
	BITFIELD bJustLanded:1;
	BITFIELD bLandRecovery:1;
	BITFIELD bUpAndOut:1;
	BITFIELD bIsWalking:1;
	BITFIELD bWarping:1;
	BITFIELD bWantsToCrouch:1;
	BITFIELD bIsCrouched:1;
	BITFIELD bTryToUncrouch:1;
	BITFIELD bCanCrouch:1;
	BITFIELD bCrawler:1;
	BITFIELD bReducedSpeed:1;
	BITFIELD bJumpCapable:1;
	BITFIELD bCanJump:1;
	BITFIELD bCanWalk:1;
	BITFIELD bCanSwim:1;
	BITFIELD bCanFly:1;
	BITFIELD bCanClimbLadders:1;
	BITFIELD bCanStrafe:1;
	BITFIELD bCanDoubleJump:1;
	BITFIELD bCanWallDodge:1;
	BITFIELD bAvoidLedges:1;
	BITFIELD bStopAtLedges:1;
	BITFIELD bNoJumpAdjust:1;
	BITFIELD bCountJumps:1;
	BITFIELD bSimulateGravity:1;
	BITFIELD bUpdateEyeheight:1;
	BITFIELD bIgnoreForces:1;
	BITFIELD bNoVelocityUpdate:1;
	BITFIELD bCanWalkOffLedges:1;
	BITFIELD bSteadyFiring:1;
	BITFIELD bCanBeBaseForPawns:1;
	BITFIELD bClientCollision:1;
	BITFIELD bSimGravityDisabled:1;
	BITFIELD bDirectHitWall:1;
	BITFIELD bServerMoveSetPawnRot:1;
	BITFIELD bFlyingKarma:1;
	BITFIELD bDrawCorona:1;
	BITFIELD bNoCoronas:1;
	BITFIELD bThumped:1;
	BITFIELD bInvulnerableBody:1;
	BITFIELD bIsFemale:1;
	BITFIELD bAutoActivate:1;
	BITFIELD bCanPickupInventory:1;
	BITFIELD bUpdatingDisplay:1;
	BITFIELD bAmbientCreature:1;
	BITFIELD bLOSHearing:1;
	BITFIELD bSameZoneHearing:1;
	BITFIELD bAdjacentZoneHearing:1;
	BITFIELD bMuffledHearing:1;
	BITFIELD bAroundCornerHearing:1;
	BITFIELD bDontPossess:1;
	BITFIELD bAutoFire:1;
	BITFIELD bRollToDesired:1;
	BITFIELD bIgnorePlayFiring:1;
	BITFIELD bStationary:1;
	BITFIELD bCachedRelevant:1;
	BITFIELD bUseCompressedPosition:1;
	BITFIELD bWeaponBob:1;
	BITFIELD bHideRegularHUD:1;
	BITFIELD bSpecialHUD:1;
	BITFIELD bSpecialCrosshair:1;
	BITFIELD bSpecialCalcView:1;
	BITFIELD bNoTeamBeacon:1;
	BITFIELD bNoWeaponFiring:1;
	BITFIELD bIsTyping:1;
	BITFIELD bScriptPostRender:1;
	BITFIELD bCanUse:1;
	BITFIELD bSuperSize:1;
	BYTE FlashCount;
	BYTE Visibility;
	FLOAT DesiredSpeed;
	FLOAT MaxDesiredSpeed;
	FName AIScriptTag;
	FLOAT HearingThreshold;
	FLOAT Alertness;
	FLOAT SightRadius;
	FLOAT PeripheralVision;
	FLOAT SkillModifier;
	FLOAT AvgPhysicsTime;
	FLOAT MeleeRange;
	FLOAT NavigationPointRange;
	class ANavigationPoint* Anchor;
	class ANavigationPoint* LastAnchor;
	FLOAT FindAnchorFailedTime;
	FLOAT LastValidAnchorTime;
	FLOAT DestinationOffset;
	FLOAT NextPathRadius;
	FVector SerpentineDir;
	FLOAT SerpentineDist;
	FLOAT SerpentineTime;
	FLOAT UncrouchTime;
	FLOAT SpawnTime;
	FLOAT GroundSpeed;
	FLOAT WaterSpeed;
	FLOAT AirSpeed;
	FLOAT LadderSpeed;
	FLOAT AccelRate;
	FLOAT JumpZ;
	FLOAT AirControl;
	FLOAT WalkingPct;
	FLOAT CrouchedPct;
	FLOAT MaxFallSpeed;
	FVector ConstantAcceleration;
	class AVehicle* DrivenVehicle;
	FVector ImpactVelocity;
	INT PitchUpLimit;
	INT PitchDownLimit;
	FStringNoInit OwnerName;
	class AWeapon* Weapon;
	class AWeapon* PendingWeapon;
	class APowerups* SelectedItem;
	FLOAT BaseEyeHeight;
	FLOAT EyeHeight;
	FVector Floor;
	FLOAT SplashTime;
	FLOAT CrouchHeight;
	FLOAT CrouchRadius;
	FLOAT DrivingHeight;
	FLOAT DrivingRadius;
	FLOAT OldZ;
	class APhysicsVolume* HeadVolume;
	FLOAT HealthMax;
	FLOAT SuperHealthMax;
	INT Health;
	FLOAT BreathTime;
	FLOAT UnderWaterTime;
	FLOAT LastPainTime;
	class UClass* ReducedDamageType;
	FLOAT HeadRadius;
	FLOAT HeadHeight;
	FLOAT HeadScale;
	BITFIELD bSetPCRotOnPossess:1;
	FVector noise1spot;
	FLOAT noise1time;
	class APawn* noise1other;
	FLOAT noise1loudness;
	FVector noise2spot;
	FLOAT noise2time;
	class APawn* noise2other;
	FLOAT noise2loudness;
	FLOAT LastPainSound;
	FLOAT Bob;
	FLOAT LandBob;
	FLOAT AppliedBob;
	FLOAT bobtime;
	FVector WalkBob;
	FLOAT SoundDampening;
	FLOAT DamageScaling;
	FLOAT AmbientSoundScaling;
	FStringNoInit MenuName;
	class AProjector* Shadow;
	class UClass* BloodEffect;
	class UClass* LowGoreBlood;
	class UClass* ControllerClass;
	class APlayerReplicationInfo* PlayerReplicationInfo;
	class ALadderVolume* OnLadder;
	FName LandMovementState;
	FName WaterMovementState;
	class APlayerStart* LastStartSpot;
	FLOAT LastStartTime;
	FName AnimAction;
	FVector TakeHitLocation;
	class UClass* HitDamageType;
	FVector TearOffMomentum;
	BYTE OldPhysics;
	BITFIELD bPhysicsAnimUpdate:1;
	BITFIELD bWasCrouched:1;
	BITFIELD bWasWalking:1;
	BITFIELD bWasOnGround:1;
	BITFIELD bInitializeAnimation:1;
	BITFIELD bPlayedDeath:1;
	BITFIELD bIsIdle:1;
	BITFIELD bWaitForAnim:1;
	BITFIELD bReverseRun:1;
	BITFIELD bDoTorsoTwist:1;
	BITFIELD FootTurning:1;
	BITFIELD FootStill:1;
	BYTE ViewPitch;
	INT SmoothViewPitch;
	INT SmoothViewYaw;
	FLOAT OldRotYaw;
	FVector OldAcceleration;
	FName MovementAnims[4];
	FName TurnLeftAnim;
	FName TurnRightAnim;
	FLOAT BlendChangeTime;
	FLOAT MovementBlendStartTime;
	FLOAT ForwardStrafeBias;
	FLOAT BackwardStrafeBias;
	FLOAT DodgeSpeedFactor;
	FLOAT DodgeSpeedZ;
	INT OldAnimDir;
	FVector OldVelocity;
	FLOAT IdleTime;
	FName SwimAnims[4];
	FName CrouchAnims[4];
	FName WalkAnims[4];
	FName AirAnims[4];
	FName TakeoffAnims[4];
	FName LandAnims[4];
	FName DoubleJumpAnims[4];
	FName DodgeAnims[4];
	FName AirStillAnim;
	FName TakeoffStillAnim;
	FName CrouchTurnRightAnim;
	FName CrouchTurnLeftAnim;
	FName IdleCrouchAnim;
	FName IdleSwimAnim;
	FName IdleWeaponAnim;
	FName IdleRestAnim;
	FName IdleChatAnim;
	TArray<FName> TauntAnims;
	FStringNoInit TauntAnimNames[16];
	INT FootRot;
	INT TurnDir;
	FName RootBone;
	FName HeadBone;
	FName SpineBone1;
	FName SpineBone2;
	FLOAT ShieldStrength;
	FHitFXData HitFx[8];
	INT HitFxTicker;
	FCompressedPosition PawnPosition;
	class AController* DelayedDamageInstigatorController;
	class AController* LastHitBy;
	FLOAT MinFlySpeed;
	FLOAT MaxRotation;


      APawn & operator=(APawn const &);
      APawn(APawn const &);
      APawn(void);
      class ANavigationPoint * breadthPathTo(float (__cdecl*)(class ANavigationPoint *,APawn *,float),class ANavigationPoint *,int,float *,int);
      class ANavigationPoint * CheckDetour(class ANavigationPoint *,class ANavigationPoint *,int);
      class FVector CheckForLedges(class FVector,class FVector,class FVector,int &,int &);
      class FVector NewFallVelocity(class FVector,class FVector,float);
      class FVector SuggestJumpVelocity(class FVector,float,float);
      enum ETestMoveResult FindBestJump(class FVector);
      enum ETestMoveResult FindJumpUp(class FVector);
      enum ETestMoveResult flyMove(class FVector,class AActor *,float);
      enum ETestMoveResult HitGoal(class AActor *);
      enum ETestMoveResult jumpLanding(class FVector,int);
      enum ETestMoveResult swimMove(class FVector,class AActor *,float);
      enum ETestMoveResult walkMove(class FVector,struct FCheckResult &,class AActor *,float);
      float findPathToward(class AActor *,class FVector,float (__cdecl*)(class ANavigationPoint *,APawn *,float),float,int);
      float GetMaxSpeed(void);
      int CacheNetRelevancy(int,class APlayerController *,class AActor *);
      int calcMoveFlags(void);
      int CanCrouchWalk(class FVector const &,class FVector const &,class AActor *);
      int flyReachable(class FVector,int,class AActor *);
      int IsHumanControlled(void);
      int IsLocallyControlled(void);
      int IsPlayer(void);
      int jumpReachable(class FVector,int,class AActor *);
      int ladderReachable(class FVector,int,class AActor *);
      int PickWallAdjust(class FVector,class AActor *);
      int Reachable(class FVector,class AActor *);
      int ReachedDestination(class FVector,class AActor *);
      int swimReachable(class FVector,int,class AActor *);
      int ValidAnchor(void);
      int walkReachable(class FVector,int,class AActor *);
      static class UClass * __cdecl StaticClass(void);
      static void * __cdecl operator new(unsigned int,class UObject *,class FName,unsigned long);
      static void * __cdecl operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
      static void * __cdecl operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
      static void * __cdecl operator new(unsigned int,enum EInternal *);
      static void __cdecl InternalConstructor(void *);



	virtual void 	setMoveTimer(FVector);
	virtual int  	moveToward(FVector const &,AActor *);
	virtual void  	rotateToward(AActor *,FVector);
	virtual int  	ReachedDesiredRotation(void);
	virtual int  	SharingVehicleWith(APawn *);
	virtual int  	pointReachable(FVector,int);
	virtual int  	actorReachable(AActor *,int,int);
	virtual int  	HurtByVolume(AActor *);
	virtual void  	physicsRotation	(float,FVector);
	virtual APawn*  GetVehicleBase(void);

      void ClearSerpentine(void);
      void Crouch(int);
      void eventBreathTimer(void);
      void eventChangeAnimation(void);
      void eventClientMessage(class FString const &,class FName);
      void eventEndCrouch(float);
      void eventHeadVolumeChange(class APhysicsVolume *);
      void eventModifyVelocity(float,class FVector);
      void eventPlayDying(class UClass *,class FVector);
      void eventPlayFalling(void);
      void eventPlayJump(void);
      void eventPlayLandingAnimation(float);
      void eventPostRender2D(class UCanvas *,float,float);
      void eventSetAnimAction(class FName);
      void eventSetHeadScale(float);
      void eventSetWalking(unsigned long);
      void eventStartCrouch(float);
      void eventStartDriving(class AVehicle *);
      void eventStopDriving(class AVehicle *);
      void eventStopPlayFiring(void);
      void eventUpdateEyeHeight(float);
      void execForceCrouch(struct FFrame &,void * const);
      void execGet4WayDirection(struct FFrame &,void * const);
      void execReachedDestination(struct FFrame &,void * const);
      void execSetTwistLook(struct FFrame &,void * const);
      void execSetViewPitch(struct FFrame &,void * const);
      void physHovering(float,int);
      void physLadder(float,int);
      void physSpider(float,int);
      void physSwimming(float,int);
      void SetAnchor(class ANavigationPoint *);
      void startNewPhysics(float,int);
      void StartNewSerpentine(class FVector,class FVector);
      void startSwimming(class FVector,class FVector,float,float,int);
      void UnCrouch(int);
      void UpdateMovementAnimation(float);
      void ZeroMovementAlpha(int,int,float);

};

struct APlayerPawn_eventPlayerCalcView_Parms
{
    class AActor* ViewActor;
    FVector CameraLocation;
    FRotator CameraRotation;
};
struct APlayerPawn_eventPlayerTick_Parms
{
    FLOAT Time;
};
struct APlayerPawn_eventUnPossess_Parms
{
};
struct APlayerPawn_eventPossess_Parms
{
};
struct APlayerPawn_eventPlayerInput_Parms
{
    FLOAT DeltaTime;
};
struct APlayerPawn_eventShowUpgradeMenu_Parms
{
};
struct APlayerPawn_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
struct APlayerPawn_eventPreRender_Parms
{
    class UCanvas* Canvas;
};
struct APlayerPawn_eventPreClientTravel_Parms
{
};
struct APlayerPawn_eventClientTravel_Parms
{
    FString URL;
    BYTE TravelType;
    BITFIELD bItems;
};


class ENGINE_API APlayerPawn : public APawn
{
private:
	static class UClass PrivateStaticClass;

public:
    class UPlayer* Player;
    FStringNoInit Password;
    FLOAT DodgeClickTimer;
    FLOAT DodgeClickTime;
    FLOAT Bob;
    FLOAT LandBob;
    FLOAT AppliedBob;
    FLOAT bobtime;
    INT ShowFlags;
    INT RendMap;
    INT Misc1;
    INT Misc2;
    class AActor* ViewTarget;
    FVector FlashScale;
    FVector FlashFog;
    class AHUD* myHUD;
    class AScoreBoard* Scoring;
    class UClass* HUDType;
    class UClass* ScoringType;
    FLOAT DesiredFlashScale;
    FLOAT ConstantGlowScale;
    FLOAT InstantFlash;
    FVector DesiredFlashFog;
    FVector ConstantGlowFog;
    FVector InstantFog;
    FLOAT DesiredFOV;
    FLOAT DefaultFOV;
    class UMusic* Song;
    BYTE SongSection;
    BYTE CdTrack;
    BYTE Transition;
    FLOAT shaketimer;
    INT shakemag;
    FLOAT shakevert;
    FLOAT maxshake;
    FLOAT verttimer;
    class UClass* CarcassType;
    FLOAT MyAutoAim;
    FLOAT Handedness;
    class USound* JumpSound;
    BITFIELD bAdmin:1 GCC_PACK(4);
    BITFIELD bLookUpStairs:1;
    BITFIELD bSnapToLevel:1;
    BITFIELD bAlwaysMouseLook:1;
    BITFIELD bKeyboardLook:1;
    BITFIELD bWasForward:1;
    BITFIELD bWasBack:1;
    BITFIELD bWasLeft:1;
    BITFIELD bWasRight:1;
    BITFIELD bEdgeForward:1;
    BITFIELD bEdgeBack:1;
    BITFIELD bEdgeLeft:1;
    BITFIELD bEdgeRight:1;
    BITFIELD bIsCrouching:1;
    BITFIELD bShakeDir:1;
    BITFIELD bAnimTransition:1;
    BITFIELD bIsTurning:1;
    BITFIELD bFrozen:1;
    BITFIELD bBadConnectionAlert:1;
    BITFIELD bInvertMouse:1;
    BITFIELD bShowScores:1;
    BITFIELD bShowMenu:1;
    BITFIELD bSpecialMenu:1;
    BITFIELD bWokeUp:1;
    BITFIELD bPressedJump:1;
    BITFIELD bUpdatePosition:1;
    BITFIELD bDelayedCommand:1;
    BITFIELD bRising:1;
    BITFIELD bReducedVis:1;
    BITFIELD bCenterView:1;
    BITFIELD bMaxMouseSmoothing:1;
    BITFIELD bMouseZeroed:1;
    BITFIELD bReadyToPlay:1;
    BITFIELD bNoFlash:1;
    BITFIELD bNoVoices:1;
    BITFIELD bMessageBeep:1;
    BITFIELD bZooming:1;
    BITFIELD bSinglePlayer:1;
    BITFIELD bJustFired:1;
    BITFIELD bJustAltFired:1;
    BITFIELD bIsTyping:1;
    BITFIELD bFixedCamera:1;
    BITFIELD bNeverAutoSwitch:1;
    BITFIELD bJumpStatus:1;
    BITFIELD bUpdating:1;
    BITFIELD bCheatsEnabled:1;
    FLOAT ZoomLevel GCC_PACK(4);
    class UClass* SpecialMenu;
    FStringNoInit DelayedCommand;
    FLOAT MouseSensitivity;
    FName WeaponPriority[50];
    FLOAT SmoothMouseX;
    FLOAT SmoothMouseY;
    FLOAT BorrowedMouseX;
    FLOAT BorrowedMouseY;
    FLOAT MouseSmoothThreshold;
    FLOAT MouseZeroTime;
    FLOAT aBaseX;
    FLOAT aBaseY;
    FLOAT aBaseZ;
    FLOAT aMouseX;
    FLOAT aMouseY;
    FLOAT aForward;
    FLOAT aTurn;
    FLOAT aStrafe;
    FLOAT aUp;
    FLOAT aLookUp;
    FLOAT aExtra4;
    FLOAT aExtra3;
    FLOAT aExtra2;
    FLOAT aExtra1;
    FLOAT aExtra0;
    class ASavedMove* SavedMoves;
    class ASavedMove* FreeMoves;
    class ASavedMove* PendingMove;
    FLOAT CurrentTimeStamp;
    FLOAT LastUpdateTime;
    FLOAT ServerTimeStamp;
    FLOAT TimeMargin;
    FLOAT ClientUpdateTime;
    FLOAT MaxTimeMargin;
    FStringNoInit ProgressMessage[8];
    FColor ProgressColor[8];
    FLOAT ProgressTimeOut;
    FStringNoInit QuickSaveString;
    FStringNoInit NoPauseMessage;
    FStringNoInit ViewingFrom;
    FStringNoInit OwnCamera;
    FStringNoInit FailedView;
    class AGameReplicationInfo* GameReplicationInfo;
    FStringNoInit ngWorldSecret;
    BITFIELD ngSecretSet:1 GCC_PACK(4);
    BITFIELD ReceivedSecretChecksum:1;
    FRotator TargetViewRotation GCC_PACK(4);
    FLOAT TargetEyeHeight;
    FVector TargetWeaponViewOffset;
    INT DemoViewPitch;
    INT DemoViewYaw;
    FLOAT LastPlaySound;
    FLOAT LastMessageWindow;
    DECLARE_FUNCTION(execPasteFromClipboard);
    DECLARE_FUNCTION(execCopyToClipboard);
    DECLARE_FUNCTION(execConsoleCommand);
    DECLARE_FUNCTION(execGetPlayerNetworkAddress);
    DECLARE_FUNCTION(execGetEntryLevel);
    DECLARE_FUNCTION(execGetDefaultURL);
    DECLARE_FUNCTION(execUpdateURL);
    DECLARE_FUNCTION(execResetKeyboard);
    DECLARE_FUNCTION(execClientTravel);
    void eventPlayerCalcView(class AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation)
    {
        APlayerPawn_eventPlayerCalcView_Parms Parms;
        Parms.ViewActor=ViewActor;
        Parms.CameraLocation=CameraLocation;
        Parms.CameraRotation=CameraRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcView),&Parms);
        ViewActor=Parms.ViewActor;
        CameraLocation=Parms.CameraLocation;
        CameraRotation=Parms.CameraRotation;
    }
    void eventPlayerTick(FLOAT Time)
    {
        APlayerPawn_eventPlayerTick_Parms Parms;
        Parms.Time=Time;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerTick),&Parms);
    }
    void eventUnPossess()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UnPossess),NULL);
    }
    void eventPossess()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Possess),NULL);
    }
    void eventPlayerInput(FLOAT DeltaTime)
    {
        APlayerPawn_eventPlayerInput_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerInput),&Parms);
    }
    void eventShowUpgradeMenu()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ShowUpgradeMenu),NULL);
    }
    void eventPostRender(class UCanvas* Canvas)
    {
        APlayerPawn_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    void eventPreRender(class UCanvas* Canvas)
    {
        APlayerPawn_eventPreRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PreRender),&Parms);
    }
    void eventPreClientTravel()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreClientTravel),NULL);
    }
    void eventClientTravel(const FString& URL, BYTE TravelType, BITFIELD bItems)
    {
        APlayerPawn_eventClientTravel_Parms Parms;
        Parms.URL=URL;
        Parms.TravelType=TravelType;
        Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientTravel),&Parms);
    }
    DECLARE_CLASS(APlayerPawn,APawn,0|CLASS_Config|CLASS_NativeReplication,Engine)
    #include "APlayerPawn.h"
};



#define UCONST_LATENT_MOVETOWARD 503

struct AController_eventMonitoredPawnAlert_Parms
{
};
struct AController_eventDelayedWarning_Parms
{
};
struct AController_eventReceiveWarning_Parms
{
    class APawn* shooter;
    FLOAT projSpeed;
    FVector FireDir;
};
struct AController_eventEnemyNotVisible_Parms
{
};
struct AController_eventSeeMonster_Parms
{
    class APawn* Seen;
};
struct AController_eventSeePlayer_Parms
{
    class APawn* Seen;
};
struct AController_eventHearNoise_Parms
{
    FLOAT Loudness;
    class AActor* NoiseMaker;
};
struct AController_eventSetupSpecialPathAbilities_Parms
{
};
struct AController_eventSuperDesireability_Parms
{
    class APickup* P;
    FLOAT ReturnValue;
};
struct AController_eventDesireability_Parms
{
    class APickup* P;
    FLOAT ReturnValue;
};
struct AController_eventPrepareForMove_Parms
{
    class ANavigationPoint* Goal;
    class UReachSpec* Path;
};
struct AController_eventAllowDetourTo_Parms
{
    class ANavigationPoint* N;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyMissedJump_Parms
{
};
struct AController_eventNotifyJumpApex_Parms
{
};
struct AController_eventNotifyHitMover_Parms
{
    FVector HitNormal;
    class AMover* Wall;
};
struct AController_eventNotifyBump_Parms
{
    class AActor* Other;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyFallingHitWall_Parms
{
    FVector HitNormal;
    class AActor* Wall;
};
struct AController_eventNotifyHitWall_Parms
{
    FVector HitNormal;
    class AActor* Wall;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyLanded_Parms
{
    FVector HitNormal;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyHeadVolumeChange_Parms
{
    class APhysicsVolume* NewVolume;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyPhysicsVolumeChange_Parms
{
    class APhysicsVolume* NewVolume;
    BITFIELD ReturnValue;
};
struct AController_eventLongFall_Parms
{
};
struct AController_eventSoakStop_Parms
{
    FString problem;
};
struct AController_eventAIHearSound_Parms
{
    class AActor* Actor;
    INT Id;
    class USound* S;
    FVector SoundLocation;
    FVector Parameters;
    BITFIELD Attenuate;
};
struct AController_eventMissedDodge_Parms
{
};
struct AController_eventMayDodgeToMoveTarget_Parms
{
};
struct AController_eventMayFall_Parms
{
};
class ENGINE_API AController : public AActor
{
public:
	class APawn* Pawn;
	INT PlayerNum;
	FLOAT SightCounter;
	FLOAT FovAngle;
	FLOAT Handedness;
	BITFIELD bIsPlayer:1;
	BITFIELD bGodMode:1;
	BITFIELD bLOSflag:1;
	BITFIELD bAdvancedTactics:1;
	BITFIELD bCanOpenDoors:1;
	BITFIELD bCanDoSpecial:1;
	BITFIELD bAdjusting:1;
	BITFIELD bPreparingMove:1;
	BITFIELD bControlAnimations:1;
	BITFIELD bEnemyInfoValid:1;
	BITFIELD bNotifyApex:1;
	BITFIELD bUsePlayerHearing:1;
	BITFIELD bJumpOverWall:1;
	BITFIELD bEnemyAcquired:1;
	BITFIELD bSoaking:1;
	BITFIELD bHuntPlayer:1;
	BITFIELD bAllowedToTranslocate:1;
	BITFIELD bAllowedToImpactJump:1;
	BITFIELD bAdrenalineEnabled:1;
	BITFIELD bNotifyFallingHitWall:1;
	BITFIELD bSlowerZAcquire:1;
	BITFIELD bInDodgeMove:1;
	BITFIELD bVehicleTransition:1;
	BITFIELD bForceStrafe:1;
	BITFIELD bNotifyPostLanded:1;
	BYTE bRun;
	BYTE bDuck;
	BYTE bFire;
	BYTE bAltFire;
	BYTE bVoiceTalk;
	FVector AdjustLoc;
	class AController* nextController;
	FLOAT Stimulus;
	FLOAT MoveTimer;
	class AActor* MoveTarget;
	FVector Destination;
	FVector FocalPoint;
	class AActor* Focus;
	FLOAT FocusLead;
	class AMover* PendingMover;
	class AActor* GoalList[4];
	class ANavigationPoint* home;
	FLOAT MinHitWall;
	FLOAT RespawnPredictionTime;
	FLOAT DodgeToGoalPct;
	INT AcquisitionYawRate;
	FLOAT DodgeLandZ;
	class AVehicle* LastBlockingVehicle;
	class APawn* Enemy;
	class AActor* Target;
	FVector LastSeenPos;
	FVector LastSeeingPos;
	FLOAT LastSeenTime;
	FStringNoInit VoiceType;
	FLOAT OldMessageTime;
	class AActor* RouteCache[16];
	class UReachSpec* CurrentPath;
	class UReachSpec* NextRoutePath;
	FVector CurrentPathDir;
	class AActor* RouteGoal;
	FLOAT RouteDist;
	FLOAT LastRouteFind;
	FVector DirectionHint;
	class UClass* PlayerReplicationInfoClass;
	class APlayerReplicationInfo* PlayerReplicationInfo;
	class UClass* PawnClass;
	class UClass* PreviousPawnClass;
	FLOAT GroundPitchTime;
	FVector ViewX;
	FVector ViewY;
	FVector ViewZ;
	class ANavigationPoint* StartSpot;
	FVector MonitorStartLoc;
	class APawn* MonitoredPawn;
	FLOAT MonitorMaxDistSq;
	class AAvoidMarker* FearSpots[2];
	FLOAT WarningDelay;
	class AProjectile* WarningProjectile;
	class APawn* ShotTarget;
	class AActor* LastFailedReach;
	FLOAT FailedReachTime;
	FVector FailedReachLocation;
	FLOAT Adrenaline;
	FLOAT AdrenalineMax;
	class UClass* LastPawnWeapon;

	/*unsigned long LineOfSightTo(class AActor *,int);
    unsigned long SeePawn(class APawn *,int);

    DECLARE_CLASS(AController,AActor,0|CLASS_Config|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AController)*/

      AController & operator=(AController const &);
      AController(AController const &);
      AController(void);
      class AActor * FindPath(class FVector,class AActor *,int);
      class AActor * HandleSpecial(class AActor *);
      class AActor * SetPath(int);
      float eventDesireability(class APickup *);
      float eventSuperDesireability(class APickup *);
      int CanHear(class FVector,float,class AActor *);
      int CanHearSound(class FVector,class AActor *,float);
      static class UClass * __cdecl StaticClass(void);
      static void * __cdecl operator new(unsigned int,class UObject *,class FName,unsigned long);
      static void * __cdecl operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
      static void * __cdecl operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
      static void * __cdecl operator new(unsigned int,enum EInternal *);
      static void __cdecl InternalConstructor(void *);
      unsigned long eventAllowDetourTo(class ANavigationPoint *);
      unsigned long eventNotifyBump(class AActor *);
      unsigned long eventNotifyHeadVolumeChange(class APhysicsVolume *);
      unsigned long eventNotifyHitWall(class FVector,class AActor *);
      unsigned long eventNotifyLanded(class FVector);
      unsigned long eventNotifyPhysicsVolumeChange(class APhysicsVolume *);
      unsigned long LineOfSightTo(class AActor *,int);
      unsigned long SeePawn(class APawn *,int);


	virtual void 	CheckHearSound(AActor *,int,USound *,FVector,float,int);
	virtual AActor* GetViewTarget(void);
	virtual int 	AcceptNearbyPath(AActor *);
	virtual void 	AdjustFromWall(FVector,AActor *);
	virtual void 	SetAdjustLocation(FVector);
	virtual int 	LocalPlayerController(void);
	virtual int 	WantsLedgeCheck(void);
	virtual int 	StopAtLedge(void);
	virtual void 	AirSteering(float);


      void CheckEnemyVisible(void);
      void CheckFears(void);
      void eventAIHearSound(class AActor *,int,class USound *,class FVector,class FVector,unsigned long);
      void eventDelayedWarning(void);
      void eventEnemyNotVisible(void);
      void eventHearNoise(float,class AActor *);
      void eventLongFall(void);
      void eventMayDodgeToMoveTarget(void);
      void eventMayFall(void);
      void eventMissedDodge(void);
      void eventMonitoredPawnAlert(void);
      void eventNotifyFallingHitWall(class FVector,class AActor *);
      void eventNotifyHitMover(class FVector,class AMover *);
      void eventNotifyJumpApex(void);
      void eventNotifyMissedJump(void);
      void eventNotifyPostLanded(void);
      void eventPrepareForMove(class ANavigationPoint *,class UReachSpec *);
      void eventReceiveWarning(class APawn *,float,class FVector);
      void eventSeeMonster(class APawn *);
      void eventSeePlayer(class APawn *);
      void eventSetupSpecialPathAbilities(void);
      void eventSoakStop(class FString const &);
      void execactorReachable(struct FFrame &,void * const);
      void execAddController(struct FFrame &,void * const);
      void execCanMakePathTo(struct FFrame &,void * const);
      void execCanSee(struct FFrame &,void * const);
      void execEAdjustJump(struct FFrame &,void * const);
      void execEndClimbLadder(struct FFrame &,void * const);
      void execFindBestInventoryPath(struct FFrame &,void * const);
      void execFindBestSuperPickup(struct FFrame &,void * const);
      void execFindPathTo(struct FFrame &,void * const);
      void execFindPathToIntercept(struct FFrame &,void * const);
      void execFindPathToward(struct FFrame &,void * const);
      void execFindPathTowardNearest(struct FFrame &,void * const);
      void execFindRandomDest(struct FFrame &,void * const);
      void execFinishRotation(struct FFrame &,void * const);
      void execInLatentExecution(struct FFrame &,void * const);
      void execLineOfSightTo(struct FFrame &,void * const);
      void execMoveTo(struct FFrame &,void * const);
      void execMoveToward(struct FFrame &,void * const);
      void execPickAnyTarget(struct FFrame &,void * const);
      void execPickTarget(struct FFrame &,void * const);
      void execPickWallAdjust(struct FFrame &,void * const);
      void execpointReachable(struct FFrame &,void * const);
      void execPollFinishRotation(struct FFrame &,void * const);
      void execPollMoveTo(struct FFrame &,void * const);
      void execPollMoveToward(struct FFrame &,void * const);
      void execPollWaitForLanding(struct FFrame &,void * const);
      void execRemoveController(struct FFrame &,void * const);
      void execStopWaiting(struct FFrame &,void * const);
      void execWaitForLanding(struct FFrame &,void * const);
      void SetRouteCache(class ANavigationPoint *,float,float);
      void ShowSelf(void);
};


struct APlayerController_eventVoiceCommand_Parms
{
    FString RecognizedString;
    FString RawString;
};
struct APlayerController_eventStartClientDemoRec_Parms
{
};
struct APlayerController_eventClientNetworkMessage_Parms
{
    FString ParamA;
    FString ParamB;
};
struct APlayerController_eventClientCloseMenu_Parms
{
    BITFIELD bCloseAll;
    BITFIELD bCancel;
};
struct APlayerController_eventClientReplaceMenu_Parms
{
    FString Menu;
    BITFIELD bDisconnect;
    FString Msg1;
    FString Msg2;
};
struct APlayerController_eventClientOpenMenu_Parms
{
    FString Menu;
    BITFIELD bDisconnect;
    FString Msg1;
    FString Msg2;
};
struct APlayerController_eventUnPressButtons_Parms
{
};
struct APlayerController_eventPlayerCalcView_Parms
{
    class AActor* ViewActor;
    FVector CameraLocation;
    FRotator CameraRotation;
};
struct APlayerController_eventRemoveCameraEffect_Parms
{
    class UCameraEffect* ExEffect;
};
struct APlayerController_eventAddCameraEffect_Parms
{
    class UCameraEffect* NewEffect;
    BITFIELD RemoveExisting;
};
struct APlayerController_eventPlayerTick_Parms
{
    FLOAT DeltaTime;
};
struct APlayerController_eventSetProgressTime_Parms
{
    FLOAT t;
};
struct APlayerController_eventSetProgressMessage_Parms
{
    INT Index;
    FString S;
    FColor C;
};
struct APlayerController_eventProgressCommand_Parms
{
    FString Cmd;
    FString Msg1;
    FString Msg2;
};
struct APlayerController_eventShakeViewEvent_Parms
{
    FVector shRotMag;
    FVector shRotRate;
    FLOAT shRotTime;
    FVector shOffsetMag;
    FVector shOffsetRate;
    FLOAT shOffsetTime;
};
struct APlayerController_eventSetAmbientShake_Parms
{
    FLOAT FalloffStartTime;
    FLOAT FalloffTime;
    FVector OffsetMag;
    FLOAT OffsetFreq;
    FRotator RotMag;
    FLOAT RotFreq;
};
struct APlayerController_eventSendClientAdjustment_Parms
{
};
struct APlayerController_eventPreClientTravel_Parms
{
};
struct APlayerController_eventTeamMessage_Parms
{
    class APlayerReplicationInfo* PRI;
    FString S;
    FName Type;
};
struct APlayerController_eventClientMessage_Parms
{
    FString S;
    FName Type;
};
struct APlayerController_eventChatRoomMessage_Parms
{
    BYTE Result;
    INT ChannelIndex;
    class APlayerReplicationInfo* RelatedPRI;
};
struct APlayerController_eventReceiveLocalizedMessage_Parms
{
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct APlayerController_eventInitInputSystem_Parms
{
};
struct APlayerController_eventClientReset_Parms
{
};
struct APlayerController_eventClientSetViewTarget_Parms
{
    class AActor* A;
};
struct APlayerController_eventStreamFinished_Parms
{
    INT StreamHandle;
    BYTE Reason;
};
struct APlayerController_eventKickWarning_Parms
{
};
struct APlayerController_eventClientHearSound_Parms
{
    class AActor* Actor;
    INT Id;
    class USound* S;
    FVector SoundLocation;
    FVector Parameters;
    BITFIELD Attenuate;
};
struct APlayerController_eventServerValidationResponse_Parms
{
    FString R;
};
struct APlayerController_eventClientValidate_Parms
{
    FString C;
};
struct APlayerController_eventClientTravel_Parms
{
    FString URL;
    BYTE TravelType;
    BITFIELD bItems;
};

struct ENGINE_API FPlayerNameInfo
{
    FStringNoInit mInfo GCC_PACK(4);
    FColor mColor;
    FLOAT mXPos;
    FLOAT mYPos;
};

struct ENGINE_API FStoredChatPassword
{
    FStringNoInit ChatRoomName GCC_PACK(4);
    FStringNoInit ChatRoomPassword;
};


struct FRange
{
  FLOAT Min;
  FLOAT Max;
};

struct FRangeVector
{
  FRange X;
  FRange Y;
  FRange Z;
};


struct ENGINE_API FClientAdjustment
{
    FLOAT TimeStamp GCC_PACK(4);
    FName NewState;
    BYTE newPhysics;
    FVector NewLoc GCC_PACK(4);
    FVector NewVel;
    class AActor* NewBase;
    FVector NewFloor;
};





class ENGINE_API APlayerController : public AController
{
public:
	class UPlayer* Player;
	BITFIELD bLookUpStairs:1;
	BITFIELD bSnapToLevel:1;
	BITFIELD bAlwaysMouseLook:1;
	BITFIELD bKeyboardLook:1;
	BITFIELD bCenterView:1;
	BITFIELD bBehindView:1;
	BITFIELD bFrozen:1;
	BITFIELD bPressedJump:1;
	BITFIELD bDoubleJump:1;
	BITFIELD bUpdatePosition:1;
	BITFIELD bIsTyping:1;
	BITFIELD bFixedCamera:1;
	BITFIELD bJumpStatus:1;
	BITFIELD bUpdating:1;
	BITFIELD bNeverSwitchOnPickup:1;
	BITFIELD bHideSpectatorBeacons:1;
	BITFIELD bZooming:1;
	BITFIELD bHideVehicleNoEntryIndicator:1;
	BITFIELD bAlwaysLevel:1;
	BITFIELD bSetTurnRot:1;
	BITFIELD bCheatFlying:1;
	BITFIELD bFreeCamera:1;
	BITFIELD bZeroRoll:1;
	BITFIELD bCameraPositionLocked:1;
	BITFIELD bViewBot:1;
	BITFIELD UseFixedVisibility:1;
	BITFIELD bFreeCam:1;
	BITFIELD bFreeCamZoom:1;
	BITFIELD bFreeCamSwivel:1;
	BITFIELD bBlockCloseCamera:1;
	BITFIELD bValidBehindCamera:1;
	BITFIELD bForcePrecache:1;
	BITFIELD bClientDemo:1;
	BITFIELD bAllActorsRelevant:1;
	BITFIELD bShortConnectTimeOut:1;
	BITFIELD bPendingDestroy:1;
	BITFIELD bEnableAmbientShake:1;
	BITFIELD bNoVoiceMessages:1;
	BITFIELD bNoTextToSpeechVoiceMessages:1;
	BITFIELD bNoVoiceTaunts:1;
	BITFIELD bNoAutoTaunts:1;
	BITFIELD bAutoTaunt:1;
	BITFIELD bNoMatureLanguage:1;
	BITFIELD bDynamicNetSpeed:1;
	BITFIELD bSmallWeapons:1;
	BITFIELD bWeaponViewShake:1;
	BITFIELD bLandingShake:1;
	BITFIELD bAimingHelp:1;
	BITFIELD bEnablePickupForceFeedback:1;
	BITFIELD bEnableWeaponForceFeedback:1;
	BITFIELD bEnableDamageForceFeedback:1;
	BITFIELD bEnableGUIForceFeedback:1;
	BITFIELD bForceFeedbackSupported:1;
	BITFIELD bVoiceChatEnabled:1;
	BITFIELD bEnableInitialChatRoom:1;
	BITFIELD bViewingMatineeCinematic:1;
	BITFIELD bCustomListener:1;
	BITFIELD bAcuteHearing:1;
	BITFIELD bMenuBeforeRespawn:1;
	BITFIELD bSkippedLastUpdate:1;
	BITFIELD bLastPressedJump:1;
	BITFIELD bEnableStatsTracking:1;
	BITFIELD bOnlySpeakTeamText:1;
	BITFIELD bWasSpeedHack:1;
	BITFIELD bIsSpaceFighter:1;
	BITFIELD bWasSaturated:1;
	FLOAT FOVBias;
	BYTE AutoJoinMask;
	BYTE bStrafe;
	BYTE bSnapLevel;
	BYTE bLook;
	BYTE bFreeLook;
	BYTE bTurn180;
	BYTE bTurnToNearest;
	BYTE bXAxis;
	BYTE bYAxis;
	BYTE DoubleClickDir;
	BYTE AnnouncerLevel;
	BYTE AnnouncerVolume;
	FLOAT TextToSpeechVoiceVolume;
	FLOAT MaxResponseTime;
	FLOAT WaitDelay;
	class APawn* AcknowledgedPawn;
	FLOAT aBaseX;
	FLOAT aBaseY;
	FLOAT aBaseZ;
	FLOAT aMouseX;
	FLOAT aMouseY;
	FLOAT aForward;
	FLOAT aTurn;
	FLOAT aStrafe;
	FLOAT aUp;
	FLOAT aLookUp;
	FLOAT aLastForward;
	FLOAT aLastStrafe;
	FLOAT aLastUp;
	FLOAT NumServerDrives;
	FLOAT NumSkips;
	FLOAT VehicleCheckRadius;
	BITFIELD bSuccessfulUse:1;
	INT ShowFlags;
	INT Misc1;
	INT Misc2;
	INT RendMap;
	FLOAT OrthoZoom;
	class AActor* ViewTarget;
	class AController* RealViewTarget;
	class APlayerController* DemoViewer;
	FLOAT CameraDist;
	FRange CameraDistRange;
	FVector OldCameraLoc;
	FRotator OldCameraRot;
	TArray<class UCameraEffect*> CameraEffects;
	FLOAT DesiredFOV;
	FLOAT DefaultFOV;
	FLOAT ZoomLevel;
	FLOAT DesiredZoomLevel;
	FVector ListenerLocation;
	FRotator ListenerRotation;
	FVector FixedLocation;
	FRotator FixedRotation;
	FMatrix RenderWorldToCamera;
	FVector FlashScale;
	FVector FlashFog;
	FLOAT ConstantGlowScale;
	FVector ConstantGlowFog;
	FLOAT ScreenFlashScaling;
	FColor LastDistanceFogColor;
	FLOAT LastDistanceFogStart;
	FLOAT LastDistanceFogEnd;
	FLOAT CurrentDistanceFogEnd;
	FLOAT TimeSinceLastFogChange;
	INT LastZone;
	FRotator TargetViewRotation;
	FRotator BlendedTargetViewRotation;
	FLOAT TargetEyeHeight;
	FVector TargetWeaponViewOffset;
	class AHUD* myHUD;
	FLOAT LastPlaySound;
	FLOAT LastPlaySpeech;
	FStringNoInit Song;
	BYTE Transition;
	class ASavedMove* SavedMoves;
	class ASavedMove* FreeMoves;
	class ASavedMove* PendingMove;
	FLOAT CurrentTimeStamp;
	FLOAT LastUpdateTime;
	FLOAT ServerTimeStamp;
	FLOAT TimeMargin;
	FLOAT ClientUpdateTime;
	FLOAT MaxTimeMargin;
	FLOAT TimeMarginSlack;
	class AWeapon* OldClientWeapon;
	INT WeaponUpdate;
	FStringNoInit ProgressMessage[4];
	FColor ProgressColor[4];
	FLOAT ProgressTimeOut;
	FStringNoInit QuickSaveString;
	FStringNoInit NoPauseMessage;
	FStringNoInit ViewingFrom;
	FStringNoInit OwnCamera;
	class AGameReplicationInfo* GameReplicationInfo;
	class AVoiceChatReplicationInfo* VoiceReplicationInfo;
	class AVotingReplicationInfoBase* VoteReplicationInfo;
	FStringNoInit StatsUsername;
	FStringNoInit StatsPassword;
	class UClass* LocalMessageClass;
	class UClass* ChatRoomMessageClass;
	FVector ShakeOffsetRate;
	FVector ShakeOffset;
	FVector ShakeOffsetTime;
	FVector ShakeOffsetMax;
	FVector ShakeRotRate;
	FVector ShakeRotMax;
	FRotator ShakeRot;
	FVector ShakeRotTime;
	FLOAT AmbientShakeFalloffStartTime;
	FLOAT AmbientShakeFalloffTime;
	FVector AmbientShakeOffsetMag;
	FLOAT AmbientShakeOffsetFreq;
	FRotator AmbientShakeRotMag;
	FLOAT AmbientShakeRotFreq;
	class APawn* TurnTarget;
	INT EnemyTurnSpeed;
	INT GroundPitch;
	FRotator TurnRot180;
	FVector OldFloor;
	class UCheatManager* CheatManager;
	class UClass* CheatClass;
	class UPlayerInput* PlayerInput;
	class UClass* InputClass;
	class UAdminBase* AdminManager;
	class AMaplistManagerBase* MapHandler;
	FStringNoInit PlayerChatType;
	class APlayerChatManager* ChatManager;
	FVector FailedPathStart;
	FRotator CameraDeltaRotation;
	FLOAT CameraDeltaRad;
	FRotator CameraSwivel;
	FLOAT TeamBeaconMaxDist;
	FLOAT TeamBeaconPlayerInfoMaxDist;
	class UTexture* TeamBeaconTexture;
	class UTexture* LinkBeaconTexture;
	class UTexture* SpeakingBeaconTexture;
	FColor TeamBeaconTeamColors[2];
	FColor TeamBeaconCustomColor;
	TArray<FPlayerNameInfo> PlayerNameArray;
	INT DemoViewPitch;
	INT DemoViewYaw;
	class ASecurity* PlayerSecurity;
	FLOAT LoginDelay;
	FLOAT NextLoginTime;
	FLOAT ForcePrecacheTime;
	FLOAT LastPingUpdate;
	FLOAT ExactPing;
	FLOAT OldPing;
	FLOAT SpectateSpeed;
	FLOAT DynamicPingThreshold;
	FLOAT NextSpeedChange;
	FLOAT VoiceChangeLimit;
	INT ClientCap;
	FStringNoInit MidGameMenuClass;
	FStringNoInit DemoMenuClass;
	FStringNoInit AdminMenuClass;
	FStringNoInit ChatPasswordMenuClass;
	TArray<FStoredChatPassword> StoredChatPasswords;
	class AVoiceChatRoom* ActiveRoom;
	FStringNoInit LastActiveChannel;
	FStringNoInit VoiceChatCodec;
	FStringNoInit VoiceChatLANCodec;
	FStringNoInit ChatPassword;
	FStringNoInit DefaultActiveChannel;
	FClientAdjustment PendingAdjustment;
	class AAnnouncerQueueManager* AnnouncerQueueManager;
	class AAnnouncerVoice* StatusAnnouncer;
	class AAnnouncerVoice* RewardAnnouncer;
	FLOAT LastActiveTime;
	class AActor* CalcViewActor;
	FVector CalcViewActorLocation;
	FVector CalcViewLocation;
	FRotator CalcViewRotation;
	FLOAT LastPlayerCalcView;
	FLOAT LastBroadcastTime;
	FStringNoInit LastBroadcastString[4];
	FLOAT LastSpeedHackLog;
	FStringNoInit PlayerOwnerName;

      APlayerController & operator=(APlayerController const &);
      APlayerController(APlayerController const &);
      APlayerController(void);
      static class UClass * __cdecl StaticClass(void);
      static void * __cdecl operator new(unsigned int,class UObject *,class FName,unsigned long);
      static void * __cdecl operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
      static void * __cdecl operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
      static void * __cdecl operator new(unsigned int,enum EInternal *);
      static void __cdecl InternalConstructor(void *);

      virtual void PostRender(struct FSceneNode *);

      void eventAddCameraEffect(class UCameraEffect *,unsigned long);
      void eventChatRoomMessage(unsigned char,int,class APlayerReplicationInfo *);
      void eventClientCloseMenu(unsigned long,unsigned long);
      void eventClientHearSound(class AActor *,int,class USound *,class FVector,class FVector,unsigned long);
      void eventClientMessage(class FString const &,class FName);
      void eventClientNetworkMessage(class FString const &,class FString const &);
      void eventClientOpenMenu(class FString const &,unsigned long,class FString const &,class FString const &);
      void eventClientReplaceMenu(class FString const &,unsigned long,class FString const &,class FString const &);
      void eventClientReset(void);
      void eventClientSetViewTarget(class AActor *);
      void eventClientTravel(class FString const &,unsigned char,unsigned long);
      void eventClientValidate(class FString const &);
      void eventInitInputSystem(void);
      void eventKickWarning(void);
      void eventPlayerCalcView(class AActor * &,class FVector &,class FRotator &);
      void eventPlayerTick(float);
      void eventPreClientTravel(void);
      void eventProgressCommand(class FString const &,class FString const &,class FString const &);
      void eventReceiveLocalizedMessage(class UClass *,int,class APlayerReplicationInfo *,class APlayerReplicationInfo *,class UObject *);
      void eventRemoveCameraEffect(class UCameraEffect *);
      void eventSendClientAdjustment(void);
      void eventServerValidationResponse(class FString const &);
      void eventSetAmbientShake(float,float,class FVector,float,class FRotator,float);
      void eventSetProgressMessage(int,class FString const &,class FColor);
      void eventSetProgressTime(float);
      void eventShakeViewEvent(class FVector,class FVector,float,class FVector,class FVector,float);
      void eventStartClientDemoRec(void);
      void eventStreamFinished(int,unsigned char);
      void eventTeamMessage(class APlayerReplicationInfo *,class FString const &,class FName);
      void eventUnPressButtons(void);
      void eventVoiceCommand(class FString const &,class FString const &);
      void execCheckSpeedHack(struct FFrame &,void * const);
      void execClientHearSound(struct FFrame &,void * const);
      void execClientTravel(struct FFrame &,void * const);
      void execClientValidate(struct FFrame &,void * const);
      void execConsoleCommand(struct FFrame &,void * const);
      void execCopyToClipboard(struct FFrame &,void * const);
      void execFindStairRotation(struct FFrame &,void * const);
      void execGetDefaultURL(struct FFrame &,void * const);
      void execGetEntryLevel(struct FFrame &,void * const);
      void execGetPlayerIDHash(struct FFrame &,void * const);
      void execGetPlayerNetworkAddress(struct FFrame &,void * const);
      void execGetServerNetworkAddress(struct FFrame &,void * const);
      void execGetURLProtocol(struct FFrame &,void * const);
      void execPasteFromClipboard(struct FFrame &,void * const);
      void execResetInput(struct FFrame &,void * const);
      void execResetKeyboard(struct FFrame &,void * const);
      void execServerValidationResponse(struct FFrame &,void * const);
      void execSetNetSpeed(struct FFrame &,void * const);
      void execSetViewTarget(struct FFrame &,void * const);
      void SetPlayer(class UPlayer *);

    //DECLARE_CLASS(APlayerController,AController,0|CLASS_Config|CLASS_NativeReplication,Engine)
    //NO_DEFAULT_CONSTRUCTOR(APlayerController)
};



class ENGINE_API ACamera : public APlayerPawn
{
public:
    DECLARE_CLASS(ACamera,APlayerPawn,0|CLASS_Config,Engine)
    #include "ACamera.h"
};


class ENGINE_API AScout : public APawn
{
public:
    DECLARE_CLASS(AScout,APawn,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AScout)
};

enum ECsgOper
{
    CSG_Active              =0,
    CSG_Add                 =1,
    CSG_Subtract            =2,
    CSG_Intersect           =3,
    CSG_Deintersect         =4,
    CSG_MAX                 =5,
};


class ENGINE_API ABrush : public AActor
{
public:
	BYTE CsgOper;		// Offset 848 (0x350)	Size 1	PFlags (0x1) 0|CPF_Edit
	class UObject* UnusedLightMesh;		// Offset 852 (0x354)	Size 4	PFlags (0x2) 0|CPF_Const|CPF_PropagateFromStruct
	FVector PostPivot;		// Offset 856 (0x358)	Size 12	PFlags (0x0) 0
	FScale MainScale;		// Offset 868 (0x364)	Size 20	PFlags (0x0) 0
	FScale PostScale;		// Offset 888 (0x378)	Size 20	PFlags (0x0) 0
	FScale TempScale;		// Offset 908 (0x38c)	Size 20	PFlags (0x0) 0
	FColor BrushColor;		// Offset 928 (0x3a0)	Size 4	PFlags (0x1) 0|CPF_Edit
	INT PolyFlags;		// Offset 932 (0x3a4)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bColored:1;		// Offset 936 (0x3a8)	Size 4	PFlags (0x1) 0|CPF_Edit

    DECLARE_CLASS(ABrush,AActor,0,Engine)
    #include "ABrush.h"
};


class DLL_IMPORT AVolume : public ABrush
{
public:
	class AActor* AssociatedActor;		// Offset 940 (0x3ac)	Size 4	PFlags (0x0) 0
	FName AssociatedActorTag;		// Offset 944 (0x3b0)	Size 4	PFlags (0x1) 0|CPF_Edit
	INT LocationPriority;		// Offset 948 (0x3b4)	Size 4	PFlags (0x1) 0|CPF_Edit
	FStringNoInit LocationName;		// Offset 952 (0x3b8)	Size 12	PFlags (0x408001) 0|CPF_Edit|CPF_Localized|CPF_NeedCtorLink
	class ADecorationList* DecoList;		// Offset 964 (0x3c4)	Size 4	PFlags (0x8000001) 0|CPF_Edit

	DECLARE_CLASS(AVolume,ABrush,0|CLASS_SafeReplace|CLASS_RuntimeStatic|CLASS_NoUserCreate|CLASS_Inherit|CLASS_RecompilerClear,Engine)
};

class DLL_IMPORT APhysicsVolume : public AVolume
{
public:
	FVector ZoneVelocity;		// Offset 968 (0x3c8)	Size 12	PFlags (0x1) 0|CPF_Edit
	FVector Gravity;		// Offset 980 (0x3d4)	Size 12	PFlags (0x21) 0|CPF_Edit|CPF_Net
	FVector BACKUP_Gravity;		// Offset 992 (0x3e0)	Size 12	PFlags (0x0) 0
	FLOAT GroundFriction;		// Offset 1004 (0x3ec)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT TerminalVelocity;		// Offset 1008 (0x3f0)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT DamagePerSec;		// Offset 1012 (0x3f4)	Size 4	PFlags (0x1) 0|CPF_Edit
	class UClass* DamageType;		// Offset 1016 (0x3f8)	Size 4	PFlags (0x1) 0|CPF_Edit
	INT Priority;		// Offset 1020 (0x3fc)	Size 4	PFlags (0x1) 0|CPF_Edit
	class USound* EntrySound;		// Offset 1024 (0x400)	Size 4	PFlags (0x1) 0|CPF_Edit
	class USound* ExitSound;		// Offset 1028 (0x404)	Size 4	PFlags (0x1) 0|CPF_Edit
	class UI3DL2Listener* VolumeEffect;		// Offset 1032 (0x408)	Size 4	PFlags (0x4000001) 0|CPF_Edit
	class UClass* EntryActor;		// Offset 1036 (0x40c)	Size 4	PFlags (0x1) 0|CPF_Edit
	class UClass* ExitActor;		// Offset 1040 (0x410)	Size 4	PFlags (0x1) 0|CPF_Edit
	class UClass* PawnEntryActor;		// Offset 1044 (0x414)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT FluidFriction;		// Offset 1048 (0x418)	Size 4	PFlags (0x1) 0|CPF_Edit
	FVector ViewFlash;		// Offset 1052 (0x41c)	Size 12	PFlags (0x1) 0|CPF_Edit
	FVector ViewFog;		// Offset 1064 (0x428)	Size 12	PFlags (0x1) 0|CPF_Edit
	BITFIELD bPainCausing:1;		// Offset 1076 (0x434)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD BACKUP_bPainCausing:1;		// Offset 1076 (0x434)	Size 4	PFlags (0x0) 0
	BITFIELD bDestructive:1;		// Offset 1076 (0x434)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bNoInventory:1;		// Offset 1076 (0x434)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bMoveProjectiles:1;		// Offset 1076 (0x434)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bBounceVelocity:1;		// Offset 1076 (0x434)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bNeutralZone:1;		// Offset 1076 (0x434)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bWaterVolume:1;		// Offset 1076 (0x434)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bNoDecals:1;		// Offset 1076 (0x434)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bDamagesVehicles:1;		// Offset 1076 (0x434)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bDistanceFog:1;		// Offset 1076 (0x434)	Size 4	PFlags (0x1) 0|CPF_Edit
	FColor DistanceFogColor;		// Offset 1080 (0x438)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT DistanceFogStart;		// Offset 1084 (0x43c)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT DistanceFogEnd;		// Offset 1088 (0x440)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT KExtraLinearDamping;		// Offset 1092 (0x444)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT KExtraAngularDamping;		// Offset 1096 (0x448)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT KBuoyancy;		// Offset 1100 (0x44c)	Size 4	PFlags (0x1) 0|CPF_Edit
	class AInfo* PainTimer;		// Offset 1104 (0x450)	Size 4	PFlags (0x0) 0
	class APhysicsVolume* NextPhysicsVolume;		// Offset 1108 (0x454)	Size 4	PFlags (0x0) 0
	DECLARE_FUNCTION(execUnTouch);
	DECLARE_FUNCTION(execTouch);
	DECLARE_FUNCTION(execTrigger);
	DECLARE_FUNCTION(execPlayerPawnDiedInVolume);
	DECLARE_FUNCTION(execPawnLeavingVolume);
	DECLARE_FUNCTION(execActorLeavingVolume);
	DECLARE_FUNCTION(execActorEnteredVolume);
	DECLARE_FUNCTION(execPhysicsChangedFor);

	DECLARE_CLASS(APhysicsVolume,AVolume,0|CLASS_SafeReplace|CLASS_RuntimeStatic|CLASS_NoUserCreate|CLASS_Inherit|CLASS_RecompilerClear,Engine)
};

enum EBumpType
{
    BT_PlayerBump           =0,
    BT_PawnBump             =1,
    BT_AnyBump              =2,
    BT_MAX                  =3,
};
enum EMoverGlideType
{
    MV_MoveByTime           =0,
    MV_GlideByTime          =1,
    MV_MAX                  =2,
};
enum EMoverEncroachType
{
    ME_StopWhenEncroach     =0,
    ME_ReturnWhenEncroach   =1,
    ME_CrushWhenEncroach    =2,
    ME_IgnoreWhenEncroach   =3,
    ME_MAX                  =4,
};

class ENGINE_API AMover : public ABrush
{
public:
    BYTE MoverEncroachType;
    BYTE MoverGlideType;
    BYTE BumpType;
    BYTE KeyNum;
    BYTE PrevKeyNum;
    BYTE NumKeys;
    BYTE WorldRaytraceKey;
    BYTE BrushRaytraceKey;
    FLOAT MoveTime;
    FLOAT StayOpenTime;
    FLOAT OtherTime;
    INT EncroachDamage;
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bSlave:1;
    BITFIELD bUseTriggered:1;
    BITFIELD bDamageTriggered:1;
    BITFIELD bDynamicLightMover:1;
    FName PlayerBumpEvent GCC_PACK(4);
    FName BumpEvent;
    class AActor* SavedTrigger;
    FLOAT DamageThreshold;
    INT numTriggerEvents;
    class AMover* Leader;
    class AMover* Follower;
    FName ReturnGroup;
    FLOAT DelayTime;
    class USound* OpeningSound;
    class USound* OpenedSound;
    class USound* ClosingSound;
    class USound* ClosedSound;
    class USound* MoveAmbientSound;
    FVector KeyPos[8];
    FRotator KeyRot[8];
    FVector BasePos;
    FVector OldPos;
    FVector OldPrePivot;
    FVector SavedPos;
    FRotator BaseRot;
    FRotator OldRot;
    FRotator SavedRot;
    class ANavigationPoint* myMarker;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    class APawn* WaitingPawn;
    BITFIELD bOpening:1 GCC_PACK(4);
    BITFIELD bDelaying:1;
    BITFIELD bClientPause:1;
    BITFIELD bPlayerOnly:1;
    class ATrigger* RecommendedTrigger GCC_PACK(4);
    FVector SimOldPos;
    INT SimOldRotPitch;
    INT SimOldRotYaw;
    INT SimOldRotRoll;
    FVector SimInterpolate;
    FVector RealPosition;
    FRotator RealRotation;
    INT ClientUpdate;
    DECLARE_CLASS(AMover,ABrush,0|CLASS_NativeReplication,Engine)
    #include "AMover.h"
};


struct AInventory_eventBotDesireability_Parms
{
    class APawn* Bot;
    FLOAT ReturnValue;
};

class DLL_IMPORT FIntBox
{
	INT X1;		// Offset 0 (0x0)	Size 4	PFlags (0x0) 0
	INT Y1;		// Offset 4 (0x4)	Size 4	PFlags (0x0) 0
	INT X2;		// Offset 8 (0x8)	Size 4	PFlags (0x0) 0
	INT Y2;		// Offset 12 (0xc)	Size 4	PFlags (0x0) 0
};

class ENGINE_API AInventory : public AActor
{
public:
	BYTE InventoryGroup;
	BYTE GroupOffset;
	BITFIELD bDisplayableInv:1;
	BITFIELD bTossedOut:1;
	class UClass* PickupClass;
	INT Charge;
	FVector PlayerViewOffset;
	FRotator PlayerViewPivot;
	BITFIELD bDrawingFirstPerson:1;
	FLOAT BobDamping;
	class AActor* ThirdPersonActor;
	class UClass* AttachmentClass;
	class UMaterial* IconMaterial;
	FIntBox IconCoords;
	FStringNoInit ItemName;

    DECLARE_CLASS(AInventory,AActor,0|CLASS_NativeReplication,Engine)
    #include "AInventory.h"
};


class ENGINE_API APickup : public AInventory
{
public:
    class AInventory* Inv;
    INT NumCopies;
    BITFIELD bCanHaveMultipleCopies:1 GCC_PACK(4);
    BITFIELD bCanActivate:1;
    FStringNoInit ExpireMessage GCC_PACK(4);
    BITFIELD bAutoActivate:1 GCC_PACK(4);
    DECLARE_CLASS(APickup,AInventory,0|CLASS_NativeReplication,Engine)
    #include "APickup.h"
};


class ENGINE_API AAmmo : public APickup
{
public:
    INT AmmoAmount;
    INT MaxAmmo;
    class UClass* ParentAmmo;
    BYTE UsedInWeaponSlot[10];
    class AAmmo* PAmmo;
    DECLARE_CLASS(AAmmo,APickup,0|CLASS_NativeReplication,Engine)
    #include "AAmmo.h"
};

enum ESpreadStyle
{
	SS_None,
	SS_Random,
	SS_Line,
	SS_Ring,
};

class DLL_IMPORT FFireProperties
{
	class UClass* AmmoClass;		// Offset 0 (0x0)	Size 4	PFlags (0x0) 0
	class UClass* ProjectileClass;		// Offset 4 (0x4)	Size 4	PFlags (0x0) 0
	FLOAT WarnTargetPct;		// Offset 8 (0x8)	Size 4	PFlags (0x0) 0
	FLOAT MaxRange;		// Offset 12 (0xc)	Size 4	PFlags (0x0) 0
	BITFIELD bTossed:1;		// Offset 16 (0x10)	Size 4	PFlags (0x0) 0
	BITFIELD bTrySplash:1;		// Offset 16 (0x10)	Size 4	PFlags (0x0) 0
	BITFIELD bLeadTarget:1;		// Offset 16 (0x10)	Size 4	PFlags (0x0) 0
	BITFIELD bInstantHit:1;		// Offset 16 (0x10)	Size 4	PFlags (0x0) 0
	BITFIELD bInitialized:1;		// Offset 16 (0x10)	Size 4	PFlags (0x0) 0
};

class DLL_IMPORT UWeaponFire : public UObject
{
public:
	BITFIELD bSplashDamage:1;		// Offset 40 (0x28)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bSplashJump:1;		// Offset 40 (0x28)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bRecommendSplashDamage:1;		// Offset 40 (0x28)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bTossed:1;		// Offset 40 (0x28)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bLeadTarget:1;		// Offset 40 (0x28)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bInstantHit:1;		// Offset 40 (0x28)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bPawnRapidFireAnim:1;		// Offset 40 (0x28)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bReflective:1;		// Offset 40 (0x28)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bTimerLoop:1;		// Offset 40 (0x28)	Size 4	PFlags (0x0) 0
	BITFIELD bFireOnRelease:1;		// Offset 40 (0x28)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bWaitForRelease:1;		// Offset 40 (0x28)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bModeExclusive:1;		// Offset 40 (0x28)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bIsFiring:1;		// Offset 40 (0x28)	Size 4	PFlags (0x0) 0
	BITFIELD bNowWaiting:1;		// Offset 40 (0x28)	Size 4	PFlags (0x0) 0
	BITFIELD bServerDelayStopFire:1;		// Offset 40 (0x28)	Size 4	PFlags (0x0) 0
	BITFIELD bServerDelayStartFire:1;		// Offset 40 (0x28)	Size 4	PFlags (0x0) 0
	BITFIELD bInstantStop:1;		// Offset 40 (0x28)	Size 4	PFlags (0x0) 0
	BITFIELD bAttachSmokeEmitter:1;		// Offset 40 (0x28)	Size 4	PFlags (0x1) 0|CPF_Edit
	BITFIELD bAttachFlashEmitter:1;		// Offset 40 (0x28)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT TimerInterval;		// Offset 44 (0x2c)	Size 4	PFlags (0x0) 0
	FLOAT NextTimerPop;		// Offset 48 (0x30)	Size 4	PFlags (0x0) 0
	class AWeapon* Weapon;		// Offset 52 (0x34)	Size 4	PFlags (0x1) 0|CPF_Edit
	class APawn* Instigator;		// Offset 56 (0x38)	Size 4	PFlags (0x0) 0
	class ALevelInfo* Level;		// Offset 60 (0x3c)	Size 4	PFlags (0x0) 0
	class AActor* Owner;		// Offset 64 (0x40)	Size 4	PFlags (0x0) 0
	FLOAT NextFireTime;		// Offset 68 (0x44)	Size 4	PFlags (0x0) 0
	FLOAT PreFireTime;		// Offset 72 (0x48)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT MaxHoldTime;		// Offset 76 (0x4c)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT HoldTime;		// Offset 80 (0x50)	Size 4	PFlags (0x1) 0|CPF_Edit
	INT ThisModeNum;		// Offset 84 (0x54)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT TransientSoundVolume;		// Offset 88 (0x58)	Size 4	PFlags (0x0) 0
	FLOAT TransientSoundRadius;		// Offset 92 (0x5c)	Size 4	PFlags (0x0) 0
	FName PreFireAnim;		// Offset 96 (0x60)	Size 4	PFlags (0x1) 0|CPF_Edit
	FName FireAnim;		// Offset 100 (0x64)	Size 4	PFlags (0x1) 0|CPF_Edit
	FName FireLoopAnim;		// Offset 104 (0x68)	Size 4	PFlags (0x1) 0|CPF_Edit
	FName FireEndAnim;		// Offset 108 (0x6c)	Size 4	PFlags (0x1) 0|CPF_Edit
	FName ReloadAnim;		// Offset 112 (0x70)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT PreFireAnimRate;		// Offset 116 (0x74)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT FireAnimRate;		// Offset 120 (0x78)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT FireLoopAnimRate;		// Offset 124 (0x7c)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT FireEndAnimRate;		// Offset 128 (0x80)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT ReloadAnimRate;		// Offset 132 (0x84)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT TweenTime;		// Offset 136 (0x88)	Size 4	PFlags (0x1) 0|CPF_Edit
	class USound* FireSound;		// Offset 140 (0x8c)	Size 4	PFlags (0x1) 0|CPF_Edit
	class USound* ReloadSound;		// Offset 144 (0x90)	Size 4	PFlags (0x1) 0|CPF_Edit
	class USound* NoAmmoSound;		// Offset 148 (0x94)	Size 4	PFlags (0x1) 0|CPF_Edit
	FStringNoInit FireForce;		// Offset 152 (0x98)	Size 12	PFlags (0x400001) 0|CPF_Edit|CPF_NeedCtorLink
	FStringNoInit ReloadForce;		// Offset 164 (0xa4)	Size 12	PFlags (0x400001) 0|CPF_Edit|CPF_NeedCtorLink
	FStringNoInit NoAmmoForce;		// Offset 176 (0xb0)	Size 12	PFlags (0x400001) 0|CPF_Edit|CPF_NeedCtorLink
	FLOAT FireRate;		// Offset 188 (0xbc)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT ServerStartFireTime;		// Offset 192 (0xc0)	Size 4	PFlags (0x0) 0
	class UClass* AmmoClass;		// Offset 196 (0xc4)	Size 4	PFlags (0x1) 0|CPF_Edit
	INT AmmoPerFire;		// Offset 200 (0xc8)	Size 4	PFlags (0x1) 0|CPF_Edit
	INT AmmoClipSize;		// Offset 204 (0xcc)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT load;		// Offset 208 (0xd0)	Size 4	PFlags (0x1) 0|CPF_Edit
	FVector ShakeRotMag;		// Offset 212 (0xd4)	Size 12	PFlags (0x1) 0|CPF_Edit
	FVector ShakeRotRate;		// Offset 224 (0xe0)	Size 12	PFlags (0x1) 0|CPF_Edit
	FLOAT ShakeRotTime;		// Offset 236 (0xec)	Size 4	PFlags (0x1) 0|CPF_Edit
	FVector ShakeOffsetMag;		// Offset 240 (0xf0)	Size 12	PFlags (0x1) 0|CPF_Edit
	FVector ShakeOffsetRate;		// Offset 252 (0xfc)	Size 12	PFlags (0x1) 0|CPF_Edit
	FLOAT ShakeOffsetTime;		// Offset 264 (0x108)	Size 4	PFlags (0x1) 0|CPF_Edit
	class UClass* ProjectileClass;		// Offset 268 (0x10c)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT BotRefireRate;		// Offset 272 (0x110)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT WarnTargetPct;		// Offset 276 (0x114)	Size 4	PFlags (0x1) 0|CPF_Edit
	class UClass* FlashEmitterClass;		// Offset 280 (0x118)	Size 4	PFlags (0x1) 0|CPF_Edit
	class AxEmitter* FlashEmitter;		// Offset 284 (0x11c)	Size 4	PFlags (0x1) 0|CPF_Edit
	class UClass* SmokeEmitterClass;		// Offset 288 (0x120)	Size 4	PFlags (0x1) 0|CPF_Edit
	class AxEmitter* SmokeEmitter;		// Offset 292 (0x124)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT aimerror;		// Offset 296 (0x128)	Size 4	PFlags (0x1) 0|CPF_Edit
	FLOAT Spread;		// Offset 300 (0x12c)	Size 4	PFlags (0x1) 0|CPF_Edit
	BYTE SpreadStyle;		// Offset 304 (0x130)	Size 1	PFlags (0x1) 0|CPF_Edit
	INT FireCount;		// Offset 308 (0x134)	Size 4	PFlags (0x0) 0
	FLOAT DamageAtten;		// Offset 312 (0x138)	Size 4	PFlags (0x1) 0|CPF_Edit
	FFireProperties SavedFireProperties;		// Offset 316 (0x13c)	Size 20	PFlags (0x0) 0
	DECLARE_FUNCTION(execTrace);
	DECLARE_FUNCTION(execMaxRange);
	DECLARE_FUNCTION(execAdjustAim);
	DECLARE_FUNCTION(execPlayFireEnd);
	DECLARE_FUNCTION(execPlayStartHold);
	DECLARE_FUNCTION(execAllowFire);
	DECLARE_FUNCTION(execModeHoldFire);
	DECLARE_FUNCTION(execModeDoFire);
	DECLARE_FUNCTION(execModeTick);
	DECLARE_FUNCTION(execIsFiring);
	DECLARE_FUNCTION(execStartSuperBerserk);
	DECLARE_FUNCTION(execStopBerserk);
	DECLARE_FUNCTION(execStopFiring);
	DECLARE_FUNCTION(execStartFiring);
	DECLARE_FUNCTION(execUpdate);
	DECLARE_FUNCTION(execStopForceFeedback);
	DECLARE_FUNCTION(execShakeView);
	DECLARE_FUNCTION(execDoFireEffect);
	DECLARE_FUNCTION(execInitEffects);
	DECLARE_FUNCTION(execDestroyEffects);
	DECLARE_FUNCTION(execSetInitialState);
	DECLARE_FUNCTION(execPostNetBeginPlay);
	DECLARE_FUNCTION(execBeginPlay);
	DECLARE_FUNCTION(execPreBeginPlay);
	DECLARE_FUNCTION(execTimer);

	DECLARE_CLASS(UWeaponFire,UObject,0|CLASS_SafeReplace|CLASS_RuntimeStatic|CLASS_NoUserCreate|CLASS_Inherit|CLASS_RecompilerClear,Engine)
};


class ENGINE_API AWeapon : public AInventory
{
public:
	class UClass* FireModeClass[2];
	class UWeaponFire* FireMode[2];
	class AAmmunition* Ammo[2];
	FName IdleAnim;
	FName RestAnim;
	FName AimAnim;
	FName RunAnim;
	FName SelectAnim;
	FName PutDownAnim;
	FLOAT IdleAnimRate;
	FLOAT RestAnimRate;
	FLOAT AimAnimRate;
	FLOAT RunAnimRate;
	FLOAT SelectAnimRate;
	FLOAT PutDownAnimRate;
	FLOAT PutDownTime;
	FLOAT BringUpTime;
	class USound* SelectSound;
	FStringNoInit SelectForce;
	INT BotMode;
	FLOAT AIRating;
	FLOAT CurrentRating;
	BITFIELD bMeleeWeapon:1;
	BITFIELD bSniping:1;
	BITFIELD bShowChargingBar:1;
	BITFIELD bMatchWeapons:1;
	BITFIELD bCanThrow:1;
	BITFIELD bForceSwitch:1;
	BITFIELD bNotInPriorityList:1;
	BITFIELD bNotInDemo:1;
	BITFIELD bNoVoluntarySwitch:1;
	BITFIELD bSpectated:1;
	BITFIELD bDebugging:1;
	BITFIELD bNoInstagibReplace:1;
	BITFIELD bInitOldMesh:1;
	BITFIELD bUseOldWeaponMesh:1;
	BITFIELD bEndOfRound:1;
	BITFIELD bNoAmmoInstances:1;
	BITFIELD bBerserk:1;
	INT AmmoCharge[2];
	class UClass* AmmoClass[2];
	class UMesh* OldMesh;
	FStringNoInit OldPickup;
	FLOAT OldDrawScale;
	FLOAT OldCenteredOffsetY;
	FVector OldPlayerViewOffset;
	FVector OldSmallViewOffset;
	FRotator OldPlayerViewPivot;
	INT OldCenteredRoll;
	INT OldCenteredYaw;
	FStringNoInit Description;
	class UClass* DemoReplacement;
	BITFIELD bPendingSwitch:1;
	FVector EffectOffset;
	FStringNoInit MessageNoAmmo;
	FLOAT DisplayFOV;
	BYTE ClientState;
	BYTE ExchangeFireModes;
	BYTE Priority;
	BYTE DefaultPriority;
	FLOAT hand;
	FLOAT RenderedHand;
	FColor HudColor;
	class AWeapon* OldWeapon;
	FVector SmallViewOffset;
	FVector SmallEffectOffset;
	FLOAT CenteredOffsetY;
	INT CenteredRoll;
	INT CenteredYaw;
	INT CustomCrosshair;
	FColor CustomCrossHairColor;
	FLOAT CustomCrossHairScale;
	FStringNoInit CustomCrossHairTextureName;
	class UTexture* CustomCrossHairTexture;
	FLOAT DownDelay;
	FLOAT MinReloadPct;

    DECLARE_CLASS(AWeapon,AInventory,0|CLASS_NativeReplication,Engine)
    #include "AWeapon.h"
};


struct ASpawnNotify_eventSpawnNotification_Parms
{
    class AActor* A;
    class AActor* ReturnValue;
};
class ENGINE_API ASpawnNotify : public AActor
{
public:
    class UClass* ActorClass;
    class ASpawnNotify* Next;
    class AActor* eventSpawnNotification(class AActor* A)
    {
        ASpawnNotify_eventSpawnNotification_Parms Parms;
        Parms.A=A;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_SpawnNotification),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ASpawnNotify,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASpawnNotify)
};


struct ADecal_eventUpdate_Parms
{
    class AActor* L;
};
class ENGINE_API ADecal : public AActor
{
public:
    INT MultiDecalLevel;
    FLOAT LastRenderedTime;
    TArray<INT> SurfList;
    DECLARE_FUNCTION(execDetachDecal);
    DECLARE_FUNCTION(execAttachDecal);
    void eventUpdate(class AActor* L)
    {
        ADecal_eventUpdate_Parms Parms;
        Parms.L=L;
        ProcessEvent(FindFunctionChecked(ENGINE_Update),&Parms);
    }
    DECLARE_CLASS(ADecal,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADecal)
};


class ENGINE_API AKeypoint : public AActor
{
public:
    DECLARE_CLASS(AKeypoint,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKeypoint)
};


class ENGINE_API Alocationid : public AKeypoint
{
public:
    FStringNoInit LocationName;
    FLOAT Radius;
    class Alocationid* NextLocation;
    DECLARE_CLASS(Alocationid,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(Alocationid)
};


class ENGINE_API AInterpolationPoint : public AKeypoint
{
public:
    INT Position;
    FLOAT RateModifier;
    FLOAT GameSpeedModifier;
    FLOAT FovModifier;
    BITFIELD bEndOfPath:1 GCC_PACK(4);
    BITFIELD bSkipNextPath:1;
    FLOAT ScreenFlashScale GCC_PACK(4);
    FVector ScreenFlashFog;
    class AInterpolationPoint* Prev;
    class AInterpolationPoint* Next;
    DECLARE_CLASS(AInterpolationPoint,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInterpolationPoint)
};


class ENGINE_API AClipMarker : public AKeypoint
{
public:
    DECLARE_CLASS(AClipMarker,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AClipMarker)
};


class ENGINE_API AInfo : public AActor
{
public:
    DECLARE_CLASS(AInfo,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInfo)

	FStringNoInit RulesGroup;
	FStringNoInit GameGroup;
	FStringNoInit ServerGroup;
	FStringNoInit ChatGroup;
	FStringNoInit BotsGroup;
	FStringNoInit MapVoteGroup;
	FStringNoInit KickVoteGroup;

};

class ENGINE_API AReplicationInfo : public AInfo
{
public:
    DECLARE_CLASS(AReplicationInfo,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AReplicationInfo)
};

class ENGINE_API ATeamInfo : public AReplicationInfo
{
public:
	FStringNoInit TeamName;
	INT Size;
	FLOAT Score;
	INT TeamIndex;
	FColor TeamColor;
	FColor AltTeamColor;
	class AActor* HomeBase;
	class UClass* DefaultPlayerClass;
	FStringNoInit ColorNames[4];

    DECLARE_CLASS(ATeamInfo,AReplicationInfo,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATeamInfo)
};

struct APlayerReplicationInfo_eventGetNameCallSign_Parms
{
    FString ReturnValue;
};
struct APlayerReplicationInfo_eventClientNameChange_Parms
{
};
struct APlayerReplicationInfo_eventUpdateCharacter_Parms
{
};
class ENGINE_API APlayerReplicationInfo : public AReplicationInfo
{
public:
	FLOAT Score;
	FLOAT Deaths;
	class ADecoration* HasFlag;
	BYTE Ping;
	class AVolume* PlayerVolume;
	class AZoneInfo* PlayerZone;
	INT NumLives;
	FStringNoInit PlayerName;
	FStringNoInit CharacterName;
	FStringNoInit OldCharacterName;
	FStringNoInit OldName;
	FStringNoInit PreviousName;
	INT PlayerID;
	class ATeamInfo* Team;
	INT TeamID;
	class UClass* VoiceType;
	FStringNoInit VoiceTypeName;
	BITFIELD bAdmin:1;
	BITFIELD bIsFemale:1;
	BITFIELD bIsSpectator:1;
	BITFIELD bOnlySpectator:1;
	BITFIELD bWaitingPlayer:1;
	BITFIELD bReadyToPlay:1;
	BITFIELD bOutOfLives:1;
	BITFIELD bBot:1;
	BITFIELD bWelcomed:1;
	BITFIELD bReceivedPing:1;
	BITFIELD bNoTeam:1;
	BITFIELD bTeamNotified:1;
	BYTE PacketLoss;
	INT StartTime;
	FStringNoInit StringDead;
	FStringNoInit StringSpectating;
	FStringNoInit StringUnknown;
	INT GoalsScored;
	INT Kills;
	class AVehicle* CurrentVehicle;
	class ALinkedReplicationInfo* CustomReplicationInfo;
	class AVoiceChatReplicationInfo* VoiceInfo;
	BITFIELD bRegisteredChatRoom:1;
	class AVoiceChatRoom* PrivateChatRoom;
	INT ActiveChannel;
	INT VoiceMemberMask;
	BYTE VoiceID;

    DECLARE_CLASS(APlayerReplicationInfo,AReplicationInfo,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerReplicationInfo)
};

struct AStatLog_eventLogGameSpecial2_Parms
{
    FString SpecialID;
    FString SpecialParam;
    FString SpecialParam2;
};
struct AStatLog_eventLogGameSpecial_Parms
{
    FString SpecialID;
    FString SpecialParam;
};
class ENGINE_API AStatLog : public AInfo
{
public:
    INT Context;
    BITFIELD bWorld:1 GCC_PACK(4);
    FLOAT TimeStamp GCC_PACK(4);
    FStringNoInit LocalStandard;
    FStringNoInit WorldStandard;
    FStringNoInit LogVersion;
    FStringNoInit LogInfoURL;
    FStringNoInit GameName;
    FStringNoInit GameCreator;
    FStringNoInit GameCreatorURL;
    FStringNoInit DecoderRingURL;
    FStringNoInit LocalBatcherURL;
    FStringNoInit LocalBatcherParams;
    FStringNoInit LocalStatsURL;
    FStringNoInit WorldBatcherURL;
    FStringNoInit WorldBatcherParams;
    FStringNoInit WorldStatsURL;
    FStringNoInit LocalLogDir;
    FStringNoInit WorldLogDir;
    BITFIELD bWorldBatcherError:1 GCC_PACK(4);
    DECLARE_FUNCTION(execGetMapFileName);
    DECLARE_FUNCTION(execGetGMTRef);
    DECLARE_FUNCTION(execGetPlayerChecksum);
    DECLARE_FUNCTION(execLogMutator);
    DECLARE_FUNCTION(execInitialCheck);
    DECLARE_FUNCTION(execBrowseRelativeLocalURL);
    DECLARE_FUNCTION(execExecuteWorldLogBatcher);
    DECLARE_FUNCTION(execBatchLocal);
    DECLARE_FUNCTION(execExecuteSilentLogBatcher);
    DECLARE_FUNCTION(execExecuteLocalLogBatcher);
    void eventLogGameSpecial2(const FString& SpecialID, const FString& SpecialParam, const FString& SpecialParam2)
    {
        AStatLog_eventLogGameSpecial2_Parms Parms;
        Parms.SpecialID=SpecialID;
        Parms.SpecialParam=SpecialParam;
        Parms.SpecialParam2=SpecialParam2;
        ProcessEvent(FindFunctionChecked(ENGINE_LogGameSpecial2),&Parms);
    }
    void eventLogGameSpecial(const FString& SpecialID, const FString& SpecialParam)
    {
        AStatLog_eventLogGameSpecial_Parms Parms;
        Parms.SpecialID=SpecialID;
        Parms.SpecialParam=SpecialParam;
        ProcessEvent(FindFunctionChecked(ENGINE_LogGameSpecial),&Parms);
    }
    DECLARE_CLASS(AStatLog,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStatLog)
};


class ENGINE_API AStatLogFile : public AStatLog
{
public:
    BITFIELD bWatermark:1 GCC_PACK(4);
    INT LogAr GCC_PACK(4);
    FStringNoInit StatLogFile;
    FStringNoInit StatLogFinal;
    DECLARE_FUNCTION(execFileLog);
    DECLARE_FUNCTION(execFileFlush);
    DECLARE_FUNCTION(execGetChecksum);
    DECLARE_FUNCTION(execWatermark);
    DECLARE_FUNCTION(execCloseLog);
    DECLARE_FUNCTION(execOpenLog);
    DECLARE_CLASS(AStatLogFile,AStatLog,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStatLogFile)
};


class ENGINE_API AInternetInfo : public AInfo
{
public:
    DECLARE_CLASS(AInternetInfo,AInfo,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInternetInfo)
};


class ENGINE_API ASavedMove : public AInfo
{
public:
    class ASavedMove* NextMove;
    FLOAT TimeStamp;
    FLOAT Delta;
    BITFIELD bRun:1 GCC_PACK(4);
    BITFIELD bDuck:1;
    BITFIELD bPressedJump:1;
    BITFIELD bFire:1;
    BITFIELD bAltFire:1;
    BITFIELD bForceFire:1;
    BITFIELD bForceAltFire:1;
    BYTE DodgeMove GCC_PACK(4);
    DECLARE_CLASS(ASavedMove,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASavedMove)
};


struct AZoneInfo_eventActorLeaving_Parms
{
    class AActor* Other;
};
struct AZoneInfo_eventActorEntered_Parms
{
    class AActor* Other;
};
class ENGINE_API AZoneInfo : public AInfo
{
public:
    FName ZoneTag;
    FVector ZoneGravity;
    FVector ZoneVelocity;
    FLOAT ZoneGroundFriction;
    FLOAT ZoneFluidFriction;
    FLOAT ZoneTerminalVelocity;
    FName ZonePlayerEvent;
    INT ZonePlayerCount;
    INT NumCarcasses;
    INT DamagePerSec;
    FName DamageType;
    FStringNoInit DamageString;
    FStringNoInit ZoneName;
    class Alocationid* locationid;
    INT MaxCarcasses;
    class USound* EntrySound;
    class USound* ExitSound;
    class UClass* EntryActor;
    class UClass* ExitActor;
    class ASkyZoneInfo* SkyZone;
    BITFIELD bWaterZone:1 GCC_PACK(4);
    BITFIELD bFogZone:1;
    BITFIELD bKillZone:1;
    BITFIELD bNeutralZone:1;
    BITFIELD bGravityZone:1;
    BITFIELD bPainZone:1;
    BITFIELD bDestructive:1;
    BITFIELD bNoInventory:1;
    BITFIELD bMoveProjectiles:1;
    BITFIELD bBounceVelocity:1;
    BYTE AmbientBrightness GCC_PACK(4);
    BYTE AmbientHue;
    BYTE AmbientSaturation;
    FColor FogColor;
    FLOAT FogDistance;
    class UTexture* EnvironmentMap;
    FLOAT TexUPanSpeed;
    FLOAT TexVPanSpeed;
    FVector ViewFlash;
    FVector ViewFog;
    BITFIELD bReverbZone:1 GCC_PACK(4);
    BITFIELD bRaytraceReverb:1;
    FLOAT SpeedOfSound GCC_PACK(4);
    BYTE MasterGain;
    INT CutoffHz;
    BYTE Delay[6];
    BYTE Gain[6];
    class UTexture* LensFlare[12];
    FLOAT LensFlareOffset[12];
    FLOAT LensFlareScale[12];
    BYTE MinLightCount;
    BYTE MaxLightCount;
    INT MinLightingPolyCount;
    INT MaxLightingPolyCount;
    DECLARE_FUNCTION(execZoneActors);
    void eventActorLeaving(class AActor* Other)
    {
        AZoneInfo_eventActorLeaving_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeaving),&Parms);
    }
    void eventActorEntered(class AActor* Other)
    {
        AZoneInfo_eventActorEntered_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEntered),&Parms);
    }
    DECLARE_CLASS(AZoneInfo,AInfo,0|CLASS_NativeReplication,Engine)
    #include "AZoneInfo.h"
};


struct AWarpZoneInfo_eventForceGenerate_Parms
{
};
struct AWarpZoneInfo_eventGenerate_Parms
{
};
class ENGINE_API AWarpZoneInfo : public AZoneInfo
{
public:
    FStringNoInit OtherSideURL;
    FName ThisTag;
    BITFIELD bNoTeleFrag:1 GCC_PACK(4);
    INT iWarpZone GCC_PACK(4);
    FCoords WarpCoords;
    class AWarpZoneInfo* OtherSideActor;
    class UObject* OtherSideLevel;
    FStringNoInit Destinations[8];
    INT numDestinations;
    DECLARE_FUNCTION(execUnWarp);
    DECLARE_FUNCTION(execWarp);
    void eventForceGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ForceGenerate),NULL);
    }
    void eventGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Generate),NULL);
    }
    DECLARE_CLASS(AWarpZoneInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AWarpZoneInfo)
};


class ENGINE_API ASkyZoneInfo : public AZoneInfo
{
public:
    DECLARE_CLASS(ASkyZoneInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASkyZoneInfo)
};

enum ENetMode
{
    NM_Standalone           =0,
    NM_DedicatedServer      =1,
    NM_ListenServer         =2,
    NM_Client               =3,
    NM_MAX                  =4,
};
enum ELevelAction
{
    LEVACT_None             =0,
    LEVACT_Loading          =1,
    LEVACT_Saving           =2,
    LEVACT_Connecting       =3,
    LEVACT_Precaching       =4,
    LEVACT_MAX              =5,
};

struct ALevelInfo_eventServerTravel_Parms
{
    FString URL;
    BITFIELD bItems;
};
class ENGINE_API ALevelInfo : public AZoneInfo
{
public:
    FLOAT TimeDilation;
    FLOAT TimeSeconds;
    INT Year;
    INT Month;
    INT Day;
    INT DayOfWeek;
    INT Hour;
    INT Minute;
    INT Second;
    INT Millisecond;
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit IdealPlayerCount;
    INT RecommendedEnemies;
    INT RecommendedTeammates;
    FStringNoInit LevelEnterText;
    FStringNoInit LocalizedPkg;
    FStringNoInit Pauser;
    class ULevelSummary* Summary;
    FStringNoInit VisibleGroups;
    BITFIELD bLonePlayer:1 GCC_PACK(4);
    BITFIELD bBegunPlay:1;
    BITFIELD bPlayersOnly:1;
    BITFIELD bHighDetailMode:1;
    BITFIELD bDropDetail:1;
    BITFIELD bAggressiveLOD:1;
    BITFIELD bStartup:1;
    BITFIELD bHumansOnly:1;
    BITFIELD bNoCheating:1;
    BITFIELD bAllowFOV:1;
    BITFIELD bLowRes:1;
    class UMusic* Song GCC_PACK(4);
    BYTE SongSection;
    BYTE CdTrack;
    FLOAT PlayerDoppler;
    FLOAT Brightness;
    class UTexture* Screenshot;
    class UTexture* DefaultTexture;
    INT HubStackLevel;
    BYTE LevelAction;
    BITFIELD bNeverPrecache:1 GCC_PACK(4);
    BYTE NetMode GCC_PACK(4);
    FStringNoInit ComputerName;
    FStringNoInit EngineVersion;
    FStringNoInit MinNetVersion;
    class UClass* DefaultGameType;
    class AGameInfo* Game;
    class ANavigationPoint* NavigationPointList;
    class APawn* PawnList;
    FStringNoInit NextURL;
    BITFIELD bNextItems:1 GCC_PACK(4);
    FLOAT NextSwitchCountdown GCC_PACK(4);
    INT AIProfile[8];
    FLOAT AvgAITime;
    BITFIELD bCheckWalkSurfaces:1 GCC_PACK(4);
    class ASpawnNotify* SpawnNotify GCC_PACK(4);
    DECLARE_FUNCTION(execGetAddressURL);
    DECLARE_FUNCTION(execGetLocalURL);
    void eventServerTravel(const FString& URL, BITFIELD bItems)
    {
        ALevelInfo_eventServerTravel_Parms Parms;
        Parms.URL=URL;
        Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerTravel),&Parms);
    }
    DECLARE_CLASS(ALevelInfo,AZoneInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
    #include "ALevelInfo.h"
};


struct AGameInfo_eventAcceptInventory_Parms
{
    class APawn* PlayerPawn;
};
struct AGameInfo_eventPostLogin_Parms
{
    class APlayerPawn* NewPlayer;
};
struct AGameInfo_eventLogin_Parms
{
    FString Portal;
    FString Options;
    FString Error;
    class UClass* SpawnClass;
    class APlayerPawn* ReturnValue;
};
struct AGameInfo_eventPreLogin_Parms
{
    FString Options;
    FString Address;
    FString Error;
    FString FailCode;
};
struct AGameInfo_eventGetBeaconText_Parms
{
    FString ReturnValue;
};
struct AGameInfo_eventInitGame_Parms
{
    FString Options;
    FString Error;
};
struct AGameInfo_eventDetailChange_Parms
{
};
struct AGameInfo_eventGameEnding_Parms
{
};
class ENGINE_API AGameInfo : public AInfo
{
public:
    INT ItemGoals;
    INT KillGoals;
    INT SecretGoals;
    BYTE Difficulty;
    BITFIELD bNoMonsters:1 GCC_PACK(4);
    BITFIELD bMuteSpectators:1;
    BITFIELD bHumansOnly:1;
    BITFIELD bRestartLevel:1;
    BITFIELD bPauseable:1;
    BITFIELD bCoopWeaponMode:1;
    BITFIELD bClassicDeathMessages:1;
    BITFIELD bLowGore:1;
    BITFIELD bCanChangeSkin:1;
    BITFIELD bTeamGame:1;
    BITFIELD bVeryLowGore:1;
    BITFIELD bNoCheating:1;
    BITFIELD bAllowFOV:1;
    BITFIELD bDeathMatch:1;
    BITFIELD bGameEnded:1;
    BITFIELD bOverTime:1;
    BITFIELD bAlternateMode:1;
    BITFIELD bCanViewOthers:1;
    BITFIELD bExternalBatcher:1;
    FLOAT AutoAim GCC_PACK(4);
    FLOAT GameSpeed;
    FLOAT StartTime;
    class UClass* DefaultPlayerClass;
    class UClass* DefaultWeapon;
    INT MaxSpectators;
    INT NumSpectators;
    FStringNoInit AdminPassword;
    FStringNoInit GamePassword;
    class UClass* ScoreBoardType;
    class UClass* GameMenuType;
    FStringNoInit BotMenuType;
    FStringNoInit RulesMenuType;
    FStringNoInit SettingsMenuType;
    FStringNoInit GameUMenuType;
    FStringNoInit MultiplayerUMenuType;
    FStringNoInit GameOptionsMenuType;
    class UClass* HUDType;
    class UClass* MapListType;
    FStringNoInit MapPrefix;
    FStringNoInit BeaconName;
    FStringNoInit SpecialDamageString;
    FStringNoInit SwitchLevelMessage;
    INT SentText;
    FStringNoInit DefaultPlayerName;
    FStringNoInit LeftMessage;
    FStringNoInit FailedSpawnMessage;
    FStringNoInit FailedPlaceMessage;
    FStringNoInit FailedTeamMessage;
    FStringNoInit NameChangedMessage;
    FStringNoInit EnteredMessage;
    FStringNoInit GameName;
    FStringNoInit MaxedOutMessage;
    FStringNoInit WrongPassword;
    FStringNoInit NeedPassword;
    FStringNoInit IPBanned;
    INT MaxPlayers;
    INT NumPlayers;
    INT CurrentID;
    FStringNoInit IPPolicies[50];
    class UClass* DeathMessageClass;
    class UClass* DMMessageClass;
    class UClass* MutatorClass;
    class AMutator* BaseMutator;
    class AMutator* DamageMutator;
    class AMutator* MessageMutator;
    class UClass* WaterZoneType;
    FName DefaultPlayerState;
    class UClass* GameReplicationInfoClass;
    class AGameReplicationInfo* GameReplicationInfo;
    FStringNoInit ServerLogName;
    class AStatLog* LocalLog;
    class AStatLog* WorldLog;
    BITFIELD bLocalLog:1 GCC_PACK(4);
    BITFIELD bWorldLog:1;
    BITFIELD bBatchLocal:1;
    BITFIELD bLoggingGame:1;
    FStringNoInit LocalLogFileName GCC_PACK(4);
    FStringNoInit WorldLogFileName;
    class UClass* StatLogClass;
    INT DemoBuild;
    INT DemoHasTuts;
    FStringNoInit EnabledMutators;
    DECLARE_FUNCTION(execParseKillMessage);
    DECLARE_FUNCTION(execGetNetworkNumber);
    void eventAcceptInventory(class APawn* PlayerPawn)
    {
        AGameInfo_eventAcceptInventory_Parms Parms;
        Parms.PlayerPawn=PlayerPawn;
        ProcessEvent(FindFunctionChecked(ENGINE_AcceptInventory),&Parms);
    }
    void eventPostLogin(class APlayerPawn* NewPlayer)
    {
        AGameInfo_eventPostLogin_Parms Parms;
        Parms.NewPlayer=NewPlayer;
        ProcessEvent(FindFunctionChecked(ENGINE_PostLogin),&Parms);
    }
    class APlayerPawn* eventLogin(const FString& Portal, const FString& Options, FString& Error, class UClass* SpawnClass)
    {
        AGameInfo_eventLogin_Parms Parms;
        Parms.Portal=Portal;
        Parms.Options=Options;
        Parms.Error=Error;
        Parms.SpawnClass=SpawnClass;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_Login),&Parms);
        Error=Parms.Error;
        return Parms.ReturnValue;
    }
    void eventPreLogin(const FString& Options, const FString& Address, FString& Error, FString& FailCode)
    {
        AGameInfo_eventPreLogin_Parms Parms;
        Parms.Options=Options;
        Parms.Address=Address;
        Parms.Error=Error;
        Parms.FailCode=FailCode;
        ProcessEvent(FindFunctionChecked(ENGINE_PreLogin),&Parms);
        Error=Parms.Error;
        FailCode=Parms.FailCode;
    }
    FString eventGetBeaconText()
    {
        AGameInfo_eventGetBeaconText_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBeaconText),&Parms);
        return Parms.ReturnValue;
    }
    void eventInitGame(const FString& Options, FString& Error)
    {
        AGameInfo_eventInitGame_Parms Parms;
        Parms.Options=Options;
        Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_InitGame),&Parms);
        Error=Parms.Error;
    }
    void eventDetailChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DetailChange),NULL);
    }
    void eventGameEnding()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_GameEnding),NULL);
    }
    DECLARE_CLASS(AGameInfo,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AGameInfo)
};


struct AMutator_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
class ENGINE_API AMutator : public AInfo
{
public:
    class AMutator* NextMutator;
    class AMutator* NextDamageMutator;
    class AMutator* NextMessageMutator;
    class AMutator* NextHUDMutator;
    BITFIELD bHUDMutator:1 GCC_PACK(4);
    class UClass* DefaultWeapon GCC_PACK(4);
    void eventPostRender(class UCanvas* Canvas)
    {
        AMutator_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    DECLARE_CLASS(AMutator,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMutator)
};


struct ANavigationPoint_eventAccept_Parms
{
    class AActor* Incoming;
    class AActor* Source;
    BITFIELD ReturnValue;
};
struct ANavigationPoint_eventSpecialCost_Parms
{
    class APawn* Seeker;
    INT ReturnValue;
};
class ENGINE_API ANavigationPoint : public AActor
{
public:
    FName ownerTeam;
    BITFIELD taken:1 GCC_PACK(4);
    INT upstreamPaths[16] GCC_PACK(4);
    INT Paths[16];
    INT PrunedPaths[16];
    class ANavigationPoint* VisNoReachPaths[16];
    INT visitedWeight;
    class AActor* RouteCache;
    INT bestPathWeight;
    class ANavigationPoint* nextNavigationPoint;
    class ANavigationPoint* nextOrdered;
    class ANavigationPoint* prevOrdered;
    class ANavigationPoint* startPath;
    class ANavigationPoint* previousPath;
    INT cost;
    INT ExtraCost;
    BITFIELD bPlayerOnly:1 GCC_PACK(4);
    BITFIELD bEndPoint:1;
    BITFIELD bEndPointOnly:1;
    BITFIELD bSpecialCost:1;
    BITFIELD bOneWayPath:1;
    BITFIELD bNeverUseStrafing:1;
    BITFIELD bAutoBuilt:1;
    BITFIELD bTwoWay:1;
    DECLARE_FUNCTION(execdescribeSpec);
    BITFIELD eventAccept(class AActor* Incoming, class AActor* Source)
    {
        ANavigationPoint_eventAccept_Parms Parms;
        Parms.Incoming=Incoming;
        Parms.Source=Source;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_Accept),&Parms);
        return Parms.ReturnValue;
    }
    INT eventSpecialCost(class APawn* Seeker)
    {
        ANavigationPoint_eventSpecialCost_Parms Parms;
        Parms.Seeker=Seeker;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialCost),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ANavigationPoint,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ANavigationPoint)
};


class ENGINE_API ALiftExit : public ANavigationPoint
{
public:
    FName LiftTag;
    class AMover* MyLift;
    FName LiftTrigger;
    class ATrigger* RecommendedTrigger;
    FLOAT LastTriggerTime;
    DECLARE_CLASS(ALiftExit,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALiftExit)
};


class ENGINE_API ALiftCenter : public ANavigationPoint
{
public:
    FName LiftTag;
    class AMover* MyLift;
    FName LiftTrigger;
    class ATrigger* RecommendedTrigger;
    FLOAT LastTriggerTime;
    FLOAT MaxZDiffAdd;
    FLOAT MaxDist2D;
    FVector LiftOffset;
    DECLARE_CLASS(ALiftCenter,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALiftCenter)
};


class ENGINE_API AWarpZoneMarker : public ANavigationPoint
{
public:
    class AWarpZoneInfo* markedWarpZone;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    DECLARE_CLASS(AWarpZoneMarker,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AWarpZoneMarker)
};


class ENGINE_API AButtonMarker : public ANavigationPoint
{
public:
    DECLARE_CLASS(AButtonMarker,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AButtonMarker)
};


class ENGINE_API ATriggerMarker : public ANavigationPoint
{
public:
    DECLARE_CLASS(ATriggerMarker,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATriggerMarker)
};


class ENGINE_API AInventorySpot : public ANavigationPoint
{
public:
    class AInventory* markedItem;
    DECLARE_CLASS(AInventorySpot,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInventorySpot)
};


class ENGINE_API APlayerStart : public ANavigationPoint
{
public:
    BYTE TeamNumber;
    BITFIELD bSinglePlayerStart:1 GCC_PACK(4);
    BITFIELD bCoopStart:1;
    BITFIELD bEnabled:1;
    DECLARE_CLASS(APlayerStart,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerStart)
};


class ENGINE_API ATeleporter : public ANavigationPoint
{
public:
    FStringNoInit URL;
    FName ProductRequired;
    BITFIELD bChangesVelocity:1 GCC_PACK(4);
    BITFIELD bChangesYaw:1;
    BITFIELD bReversesX:1;
    BITFIELD bReversesY:1;
    BITFIELD bReversesZ:1;
    BITFIELD bEnabled:1;
    FVector TargetVelocity GCC_PACK(4);
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    FLOAT LastFired;
    DECLARE_CLASS(ATeleporter,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATeleporter)
};


class ENGINE_API APathNode : public ANavigationPoint
{
public:
    DECLARE_CLASS(APathNode,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APathNode)
};


class ENGINE_API ADecoration : public AActor
{
public:
    class UClass* EffectWhenDestroyed;
    BITFIELD bPushable:1 GCC_PACK(4);
    BITFIELD bOnlyTriggerable:1;
    BITFIELD bSplash:1;
    BITFIELD bBobbing:1;
    BITFIELD bWasCarried:1;
    class USound* PushSound GCC_PACK(4);
    INT numLandings;
    class UClass* contents;
    class UClass* content2;
    class UClass* content3;
    class USound* EndPushSound;
    BITFIELD bPushSoundPlaying:1 GCC_PACK(4);
    DECLARE_CLASS(ADecoration,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADecoration)
};


class ENGINE_API ACarcass : public ADecoration
{
public:
    BITFIELD bPlayerCarcass:1 GCC_PACK(4);
    BYTE flies GCC_PACK(4);
    BYTE rats;
    BITFIELD bReducedHeight:1 GCC_PACK(4);
    BITFIELD bDecorative:1;
    BITFIELD bSlidingCarcass:1;
    INT CumulativeDamage GCC_PACK(4);
    class APlayerReplicationInfo* PlayerOwner;
    class APawn* Bugs;
    DECLARE_CLASS(ACarcass,ADecoration,0,Engine)
    #include "ACarcass.h"
};


class ENGINE_API AMenu : public AActor
{
public:
    class AMenu* ParentMenu;
    INT Selection;
    INT MenuLength;
    BITFIELD bConfigChanged:1 GCC_PACK(4);
    BITFIELD bExitAllMenus:1;
    class APlayerPawn* PlayerOwner GCC_PACK(4);
    FStringNoInit HelpMessage[24];
    FStringNoInit MenuList[24];
    FStringNoInit LeftString;
    FStringNoInit RightString;
    FStringNoInit CenterString;
    FStringNoInit EnabledString;
    FStringNoInit DisabledString;
    FStringNoInit MenuTitle;
    FStringNoInit YesString;
    FStringNoInit NoString;
    DECLARE_CLASS(AMenu,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMenu)
};


struct AHUD_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
struct AHUD_eventPreRender_Parms
{
    class UCanvas* Canvas;
};
class ENGINE_API AHUD : public AActor
{
public:
    INT HudMode;
    INT Crosshair;
    class UClass* MainMenuType;
    FStringNoInit HUDConfigWindowType;
    FColor WhiteColor;
    class AMenu* MainMenu;
    class AMutator* HUDMutator;
    class APlayerPawn* PlayerOwner;
    void eventPostRender(class UCanvas* Canvas)
    {
        AHUD_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    void eventPreRender(class UCanvas* Canvas)
    {
        AHUD_eventPreRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PreRender),&Parms);
    }
    DECLARE_CLASS(AHUD,AActor,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AHUD)
};


class ENGINE_API ATriggers : public AActor
{
public:
    DECLARE_CLASS(ATriggers,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATriggers)
};

enum ETriggerType
{
    TT_PlayerProximity      =0,
    TT_PawnProximity        =1,
    TT_ClassProximity       =2,
    TT_AnyProximity         =3,
    TT_Shoot                =4,
    TT_MAX                  =5,
};

class ENGINE_API ATrigger : public ATriggers
{
public:
    BYTE TriggerType;
    FStringNoInit Message;
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bInitiallyActive:1;
    class UClass* ClassProximityType GCC_PACK(4);
    FLOAT RepeatTriggerTime;
    FLOAT ReTriggerDelay;
    FLOAT TriggerTime;
    FLOAT DamageThreshold;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    DECLARE_CLASS(ATrigger,ATriggers,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATrigger)
};


class ENGINE_API AProjectile : public AActor
{
public:
	FLOAT Speed;		// Offset 848 (0x350)	Size 4	PFlags (0x0) 0
	FLOAT MaxSpeed;		// Offset 852 (0x354)	Size 4	PFlags (0x0) 0
	FLOAT TossZ;		// Offset 856 (0x358)	Size 4	PFlags (0x0) 0
	class AActor* ZeroCollider;		// Offset 860 (0x35c)	Size 4	PFlags (0x0) 0
	BITFIELD bSwitchToZeroCollision:1;		// Offset 864 (0x360)	Size 4	PFlags (0x0) 0
	BITFIELD bNoFX:1;		// Offset 864 (0x360)	Size 4	PFlags (0x0) 0
	BITFIELD bReadyToSplash:1;		// Offset 864 (0x360)	Size 4	PFlags (0x0) 0
	BITFIELD bSpecialCalcView:1;		// Offset 864 (0x360)	Size 4	PFlags (0x0) 0
	FLOAT Damage;		// Offset 868 (0x364)	Size 4	PFlags (0x0) 0
	FLOAT DamageRadius;		// Offset 872 (0x368)	Size 4	PFlags (0x0) 0
	FLOAT MomentumTransfer;		// Offset 876 (0x36c)	Size 4	PFlags (0x0) 0
	class UClass* MyDamageType;		// Offset 880 (0x370)	Size 4	PFlags (0x0) 0
	class USound* SpawnSound;		// Offset 884 (0x374)	Size 4	PFlags (0x0) 0
	class USound* ImpactSound;		// Offset 888 (0x378)	Size 4	PFlags (0x0) 0
	class UClass* ExplosionDecal;		// Offset 892 (0x37c)	Size 4	PFlags (0x0) 0
	FLOAT ExploWallOut;		// Offset 896 (0x380)	Size 4	PFlags (0x0) 0
	class AController* InstigatorController;		// Offset 900 (0x384)	Size 4	PFlags (0x0) 0
	class AActor* LastTouched;		// Offset 904 (0x388)	Size 4	PFlags (0x0) 0
	class AActor* HurtWall;		// Offset 908 (0x38c)	Size 4	PFlags (0x0) 0
	FLOAT MaxEffectDistance;		// Offset 912 (0x390)	Size 4	PFlags (0x0) 0
	BITFIELD bScriptPostRender:1;		// Offset 916 (0x394)	Size 4	PFlags (0x0) 0
	DECLARE_FUNCTION(execPostRender2D);
	DECLARE_FUNCTION(execExplode);
	DECLARE_FUNCTION(execTouch);
	DECLARE_FUNCTION(execDelayedHurtRadius);
	DECLARE_FUNCTION(execHurtRadius);
	DECLARE_FUNCTION(execCheckMaxEffectDistance);
	DECLARE_FUNCTION(execReset);
	DECLARE_FUNCTION(execCanSplash);
	DECLARE_FUNCTION(execSpecialCalcView);
	DECLARE_FUNCTION(execPostBeginPlay);

    DECLARE_CLASS(AProjectile,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AProjectile)
};


class ENGINE_API AAmmunition : public AInventory
{
public:
	INT MaxAmmo;		// Offset 936 (0x3a8)	Size 4	PFlags (0x10000) 0|CPF_Travel
	INT AmmoAmount;		// Offset 940 (0x3ac)	Size 4	PFlags (0x10020) 0|CPF_Net|CPF_Travel
	INT InitialAmount;		// Offset 944 (0x3b0)	Size 4	PFlags (0x0) 0
	INT PickupAmmo;		// Offset 948 (0x3b4)	Size 4	PFlags (0x10000) 0|CPF_Travel
	BITFIELD bRecommendSplashDamage:1;		// Offset 952 (0x3b8)	Size 4	PFlags (0x0) 0
	BITFIELD bTossed:1;		// Offset 952 (0x3b8)	Size 4	PFlags (0x0) 0
	BITFIELD bTrySplash:1;		// Offset 952 (0x3b8)	Size 4	PFlags (0x0) 0
	BITFIELD bLeadTarget:1;		// Offset 952 (0x3b8)	Size 4	PFlags (0x0) 0
	BITFIELD bInstantHit:1;		// Offset 952 (0x3b8)	Size 4	PFlags (0x0) 0
	BITFIELD bSplashDamage:1;		// Offset 952 (0x3b8)	Size 4	PFlags (0x0) 0
	BITFIELD bTryHeadShot:1;		// Offset 952 (0x3b8)	Size 4	PFlags (0x0) 0
	class UClass* ProjectileClass;		// Offset 956 (0x3bc)	Size 4	PFlags (0x0) 0
	class UClass* MyDamageType;		// Offset 960 (0x3c0)	Size 4	PFlags (0x0) 0
	FLOAT WarnTargetPct;		// Offset 964 (0x3c4)	Size 4	PFlags (0x0) 0
	FLOAT RefireRate;		// Offset 968 (0x3c8)	Size 4	PFlags (0x0) 0
	class USound* FireSound;		// Offset 972 (0x3cc)	Size 4	PFlags (0x0) 0
	FLOAT MaxRange;		// Offset 976 (0x3d0)	Size 4	PFlags (0x0) 0
	class UMaterial* IconFlashMaterial;		// Offset 980 (0x3d4)	Size 4	PFlags (0x1) 0|CPF_Edit
	DECLARE_FUNCTION(execAddAmmo);
	DECLARE_FUNCTION(execDisplayDebug);
	DECLARE_FUNCTION(execUseAmmo);
	DECLARE_FUNCTION(execCheckOutOfAmmo);

	DECLARE_CLASS(AAmmunition,AInventory,0|CLASS_SafeReplace|CLASS_RuntimeStatic|CLASS_NoUserCreate|CLASS_Inherit|CLASS_RecompilerClear,Engine)
};


class ENGINE_API ALight : public AActor
{
public:
    DECLARE_CLASS(ALight,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALight)
};


class ENGINE_API ULevelSummary : public UObject
{
public:
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit IdealPlayerCount;
    INT RecommendedEnemies;
    INT RecommendedTeammates;
    FStringNoInit LevelEnterText;
    DECLARE_CLASS(ULevelSummary,UObject,0,Engine)
    #include "ULevelSummary.h"
};

/*=============================================================================
      ATerrainInfo.
===
==========================================================================*/

enum ESortOrder {
  SORT_NoSort,
  SORT_BackToFront,
  SORT_FrontToBack
};

enum ETexMapAxis {
  TEXMAPAXIS_XY,
  TEXMAPAXIS_XZ,
  TEXMAPAXIS_YZ
};

struct DecorationLayerData
{
  TArray<UObject*> Sectors;
};

struct DecoSectorInfo
{
  TArray<UObject*> DecoInfo;
  FVector Location;
  FLOAT Radius;
};

struct DecoInfo
{
  FVector Location;
  FRotator Rotation;
  FVector Scale;
  FVector TempScale;
  FColor Color;
  INT Distance;
};

struct DecorationLayer
{
  INT ShowOnTerrain;
  UTexture* ScaleMap;
  UTexture* DensityMap;
  UTexture* ColorMap;
  UMesh* StaticMesh;
  FRangeVector ScaleMultiplier;
  FRange FadeoutRadius;
  FRange DensityMultiplier;
  INT MaxPerQuad;
  INT Seed;
  INT AlignToTerrain;
  ESortOrder DrawOrder;
  INT ShowOnInvisibleTerrain;
  INT LitDirectional;
  INT DisregardTerrainLighting;
  INT RandomYaw;
};

struct TerrainLayer
{
  UMaterial* Texture;
  UTexture* AlphaMap;
  FLOAT UScale;
  FLOAT VScale;
  FLOAT UPan;
  FLOAT VPan;
  ETexMapAxis TextureMapAxis;
  FLOAT TextureRotation;
  FRotator LayerRotation;
  FMatrix TerrainMatrix;
  FLOAT KFriction;
  FLOAT KRestitution;
  UTexture* LayerWeightMap;
};



struct NormalPair
{
  FVector Normal1;
  FVector Normal2;
};


class ENGINE_API ATerrainInfo : public AInfo
{
private:
      static class UClass PrivateStaticClass;

public:

	INT TerrainSectorSize;
	UTexture* TerrainMap;
	UTexture* VertexLightMap;
	FVector TerrainScale;
	TerrainLayer Layers[32];
	TArray<DecorationLayer> DecoLayers;
	FLOAT DecoLayerOffset;
	BITFIELD Inverted;
	BITFIELD bKCollisionHalfRes;
	INT JustLoaded;
	TArray<DecorationLayerData> DecoLayerData;
	TArray<UObject*> Sectors;
	TArray<FVector> Vertices;
	INT HeightmapX;
	INT HeightmapY;
	INT SectorsX;
	INT SectorsY;
	UPrimitive* Primitive;
	TArray<NormalPair> FaceNormals;
	FVector ToWorld[4];
	FVector ToHeightmap[4];
	TArray<INT> SelectedVertices;
	INT ShowGrid;
	TArray<INT> QuadVisibilityBitmap;
	TArray<INT> EdgeTurnBitmap;
	TArray<UMaterial*> QuadDomMaterialBitmap;
	TArray<INT> RenderCombinations;
	TArray<INT> VertexStreams;
	TArray<FColor> VertexColors;
	TArray<FColor> PaintedColor;
	UTexture* CollapsedLayers;
	UTexture* OldTerrainMap;
	TArray<BYTE> OldHeightmap;


      ATerrainInfo & operator=(ATerrainInfo const &);
      ATerrainInfo(ATerrainInfo const &);
      ATerrainInfo(void);
      class FBox GetSelectedVerticesBounds(void);
      class FColor GetTextureColor(int,int,class UTexture *);
      class FVector GetVertexNormal(int,int);
      class FVector HeightmapToWorld(class FVector);
      class FVector WorldToHeightmap(class FVector);
      class UMaterial * GetQuadDomMaterialBitmap(int,int);
      int GetClosestVertex(class FVector &,class FVector *,int *,int *);
      int GetEdgeTurnBitmap(int,int);
      int GetGlobalVertex(int,int);
      int GetQuadVisibilityBitmap(int,int);
      int GetRenderCombinationNum(TArray<int> &,enum ETerrainRenderMethod);
      int LineCheck(struct FCheckResult &,class FVector const &,class FVector const &,class FVector const &,unsigned long,int);
      int LineCheckWithQuad(int,int,struct FCheckResult &,class FVector const &,class FVector const &,class FVector const &,unsigned long,int);
      int PointCheck(struct FCheckResult &,class FVector const &,class FVector const &,int);
      int SelectVertex(class FVector);
      int SelectVertexX(int,int);
      static class UClass * __cdecl StaticClass(void);
      static void * __cdecl operator new(unsigned int,class UObject *,class FName,unsigned long);
      static void * __cdecl operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
      static void * __cdecl operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
      static void * __cdecl operator new(unsigned int,enum EInternal *);
      static void __cdecl InternalConstructor(void *);
      unsigned char GetLayerAlpha(int,int,int,class UTexture *);
      unsigned short GetHeightmap(int,int);
      virtual class UPrimitive * GetPrimitive(void);
      virtual void CheckForErrors(void);
      virtual void Destroy(void);
      virtual void PostEditChange(void);
      virtual void PostLoad(void);
      virtual void Serialize(class FArchive &);
      virtual ~ATerrainInfo(void);
      void CalcCoords(void);
      void CalcLayerTexCoords(void);
      void CheckComputeDataOnLoad(void);
      void CombineLayerWeights(void);
      void ConvertHeightmapFormat(void);
      void execPokeTerrain(struct FFrame &,void * const);
      void MoveVertices(float);
      void PrecomputeLayerWeights(void);
      void Render(class FLevelSceneNode *,class FRenderInterface *,class FVisibilityInterface *,class FDynamicLight * *,int,struct FProjectorRenderInfo * *,int);
      void RenderDecorations(class FLevelSceneNode *,class FRenderInterface *,class FVisibilityInterface *);
      void ResetMove(void);
      void SelectVerticesInBox(class FBox &);
      void SetEdgeTurnBitmap(int,int,int);
      void SetHeightmap(int,int,unsigned short);
      void SetLayerAlpha(float,float,int,unsigned char,class UTexture *);
      void SetQuadVisibilityBitmap(int,int,int);
      void SetTextureColor(int,int,class UTexture *,class FColor &);
      void SetupSectors(void);
      void SmoothColors(void);
      void SoftDeselect(void);
      void SoftSelect(float,float);
      void Update(float,int,int,int,int,int);
      void UpdateDecorations(int);
      void UpdateFromSelectedVertices(void);
      void UpdateTriangles(int,int,int,int,int,int);
      void UpdateVertices(float,int,int,int,int);
};

#endif

AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPasteFromClipboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execCopyToClipboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetPlayerNetworkAddress);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetEntryLevel);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetDefaultURL);
AUTOGENERATE_FUNCTION(APlayerPawn,546,execUpdateURL);
AUTOGENERATE_FUNCTION(APlayerPawn,544,execResetKeyboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execClientTravel);
AUTOGENERATE_FUNCTION(APawn,-1,execClientHearSound);
AUTOGENERATE_FUNCTION(APawn,-1,execCheckValidSkinPackage);
AUTOGENERATE_FUNCTION(APawn,-1,execStopWaiting);
AUTOGENERATE_FUNCTION(APawn,534,execPickAnyTarget);
AUTOGENERATE_FUNCTION(APawn,531,execPickTarget);
AUTOGENERATE_FUNCTION(APawn,530,execRemovePawn);
AUTOGENERATE_FUNCTION(APawn,529,execAddPawn);
AUTOGENERATE_FUNCTION(APawn,540,execFindBestInventoryPath);
AUTOGENERATE_FUNCTION(APawn,527,execWaitForLanding);
AUTOGENERATE_FUNCTION(APawn,524,execFindStairRotation);
AUTOGENERATE_FUNCTION(APawn,526,execPickWallAdjust);
AUTOGENERATE_FUNCTION(APawn,520,execactorReachable);
AUTOGENERATE_FUNCTION(APawn,521,execpointReachable);
AUTOGENERATE_FUNCTION(APawn,523,execEAdjustJump);
AUTOGENERATE_FUNCTION(APawn,522,execClearPaths);
AUTOGENERATE_FUNCTION(APawn,525,execFindRandomDest);
AUTOGENERATE_FUNCTION(APawn,517,execFindPathToward);
AUTOGENERATE_FUNCTION(APawn,518,execFindPathTo);
AUTOGENERATE_FUNCTION(APawn,533,execCanSee);
AUTOGENERATE_FUNCTION(APawn,514,execLineOfSightTo);
AUTOGENERATE_FUNCTION(APawn,510,execTurnToward);
AUTOGENERATE_FUNCTION(APawn,508,execTurnTo);
AUTOGENERATE_FUNCTION(APawn,506,execStrafeFacing);
AUTOGENERATE_FUNCTION(APawn,504,execStrafeTo);
AUTOGENERATE_FUNCTION(APawn,502,execMoveToward);
AUTOGENERATE_FUNCTION(APawn,500,execMoveTo);
AUTOGENERATE_FUNCTION(AActor,552,execMultiply_ColorFloat);
AUTOGENERATE_FUNCTION(AActor,551,execAdd_ColorColor);
AUTOGENERATE_FUNCTION(AActor,550,execMultiply_FloatColor);
AUTOGENERATE_FUNCTION(AActor,549,execSubtract_ColorColor);
AUTOGENERATE_FUNCTION(AActor,312,execVisibleCollidingActors);
AUTOGENERATE_FUNCTION(AActor,311,execVisibleActors);
AUTOGENERATE_FUNCTION(AActor,310,execRadiusActors);
AUTOGENERATE_FUNCTION(AActor,309,execTraceActors);
AUTOGENERATE_FUNCTION(AActor,307,execTouchingActors);
AUTOGENERATE_FUNCTION(AActor,306,execBasedActors);
AUTOGENERATE_FUNCTION(AActor,305,execChildActors);
AUTOGENERATE_FUNCTION(AActor,304,execAllActors);
AUTOGENERATE_FUNCTION(AActor,-1,execMoveCacheEntry);
AUTOGENERATE_FUNCTION(AActor,-1,execGetCacheEntry);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextIntDesc);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextInt);
AUTOGENERATE_FUNCTION(AActor,547,execGetURLMap);
AUTOGENERATE_FUNCTION(AActor,545,execGetNextSkin);
AUTOGENERATE_FUNCTION(AActor,539,execGetMapName);
AUTOGENERATE_FUNCTION(AActor,532,execPlayerCanSeeMe);
AUTOGENERATE_FUNCTION(AActor,512,execMakeNoise);
AUTOGENERATE_FUNCTION(AActor,-1,execGetSoundDuration);
AUTOGENERATE_FUNCTION(AActor,-1,execDemoPlaySound);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayOwnedSound);
AUTOGENERATE_FUNCTION(AActor,264,execPlaySound);
AUTOGENERATE_FUNCTION(AActor,280,execSetTimer);
AUTOGENERATE_FUNCTION(AActor,279,execDestroy);
AUTOGENERATE_FUNCTION(AActor,278,execSpawn);
AUTOGENERATE_FUNCTION(AActor,548,execFastTrace);
AUTOGENERATE_FUNCTION(AActor,277,execTrace);
AUTOGENERATE_FUNCTION(AActor,3970,execSetPhysics);
AUTOGENERATE_FUNCTION(AActor,301,execFinishInterpolation);
AUTOGENERATE_FUNCTION(AActor,-1,execLinkSkelAnim);
AUTOGENERATE_FUNCTION(AActor,263,execHasAnim);
AUTOGENERATE_FUNCTION(AActor,261,execFinishAnim);
AUTOGENERATE_FUNCTION(AActor,293,execGetAnimGroup);
AUTOGENERATE_FUNCTION(AActor,282,execIsAnimating);
AUTOGENERATE_FUNCTION(AActor,294,execTweenAnim);
AUTOGENERATE_FUNCTION(AActor,260,execLoopAnim);
AUTOGENERATE_FUNCTION(AActor,259,execPlayAnim);
AUTOGENERATE_FUNCTION(AActor,272,execSetOwner);
AUTOGENERATE_FUNCTION(AActor,298,execSetBase);
AUTOGENERATE_FUNCTION(AActor,3971,execAutonomousPhysics);
AUTOGENERATE_FUNCTION(AActor,3969,execMoveSmooth);
AUTOGENERATE_FUNCTION(AActor,299,execSetRotation);
AUTOGENERATE_FUNCTION(AActor,267,execSetLocation);
AUTOGENERATE_FUNCTION(AActor,266,execMove);
AUTOGENERATE_FUNCTION(AActor,283,execSetCollisionSize);
AUTOGENERATE_FUNCTION(AActor,262,execSetCollision);
AUTOGENERATE_FUNCTION(AActor,256,execSleep);
AUTOGENERATE_FUNCTION(AActor,233,execError);
AUTOGENERATE_FUNCTION(AActor,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(ADecal,-1,execDetachDecal);
AUTOGENERATE_FUNCTION(ADecal,-1,execAttachDecal);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execFileLog);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execFileFlush);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execGetChecksum);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execWatermark);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execCloseLog);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execOpenLog);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetMapFileName);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetGMTRef);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetPlayerChecksum);
AUTOGENERATE_FUNCTION(AStatLog,-1,execLogMutator);
AUTOGENERATE_FUNCTION(AStatLog,-1,execInitialCheck);
AUTOGENERATE_FUNCTION(AStatLog,-1,execBrowseRelativeLocalURL);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteWorldLogBatcher);
AUTOGENERATE_FUNCTION(AStatLog,-1,execBatchLocal);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteSilentLogBatcher);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteLocalLogBatcher);
AUTOGENERATE_FUNCTION(ANavigationPoint,519,execdescribeSpec);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,315,execUnWarp);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,314,execWarp);
AUTOGENERATE_FUNCTION(AZoneInfo,308,execZoneActors);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execParseKillMessage);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execGetNetworkNumber);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetAddressURL);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetLocalURL);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif NAMES_ONLY

#if _MSC_VER
#pragma pack (pop)
#endif
