/*
#############################################################################################
# Tribes Ascend (1.0.1016.7) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: TribesGame_classes.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_THR_SPINFUSOR                                      1
#define CONST_THR_SMG                                            2
#define CONST_THR_RIFLE                                          3
#define CONST_THR_LOCKED_ON                                      4
#define CONST_THR_CROSSBOW                                       5
#define CONST_THR_FLAME_THROWER                                  6
#define CONST_THR_CHAIN_GUN                                      7
#define CONST_THR_MISSILE                                        8
#define CONST_THR_NANITE                                         9
#define CONST_THR_SHOTGUN                                        10
#define CONST_THR_UNKNOWN                                        11
#define CONST_THR_LASER                                          12
#define CONST_THR_CH_V13                                         13
#define CONST_THR_SCOPE                                          14
#define CONST_THR_STANDARD                                       15
#define CONST_THR_GRENADE_LAUNCHER                               16
#define CONST_THR_MELEE                                          17
#define CONST_THR_SHRIKE                                         18
#define CONST_THR_FREE_SPECTATOR                                 19
#define CONST_THR_RED_DOT                                        20
#define CONST_THR_BXT1                                           21
#define CONST_THR_PHASERIFLE                                     22
#define CONST_THR_SAP20                                          23
#define CONST_THR_PLASMAGUN                                      24
#define CONST_HAE_KILL_STREAK_LEVEL                              1
#define CONST_HAE_KILL_STREAK_LEVEL01                            2
#define CONST_HAE_KILL_STREAK_LEVEL02                            3
#define CONST_HAE_KILL_STREAK_LEVEL03                            4
#define CONST_HAE_KILL_STREAK_LEVEL04                            5
#define CONST_TRHUD_PACK_STEALTH                                 1
#define CONST_TRHUD_PACK_DAMAGE                                  2
#define CONST_TRHUD_PACK_OMNI                                    3
#define CONST_TRHUD_PACK_ERECHARGE                               4
#define CONST_TRHUD_PACK_AIRTURRET                               5
#define CONST_TRHUD_PACK_BLINK                                   6
#define CONST_TRHUD_PACK_ENERGY                                  7
#define CONST_TRHUD_PACK_SHIELD                                  8
#define CONST_TRHUD_PACK_JAMMER                                  9
#define CONST_TRHUD_PACK_LIGHTTURRET                             10
#define CONST_TRHUD_PACK_FORCEFIELD                              11
#define CONST_TRHUD_PACK_WALLTURRET                              12
#define CONST_TRHUD_PACK_REGEN                                   13
#define CONST_TRHUD_PACK_DROPJAMMER                              14
#define CONST_TRHUD_TBD1                                         15
#define CONST_TRHUD_TBD2                                         16
#define CONST_TRHUD_TBD3                                         17
#define CONST_TRHUD_BELT_STICKYGREN                              18
#define CONST_TRHUD_BELT_FRAG                                    19
#define CONST_TRHUD_BELT_CLAYMORE                                20
#define CONST_TRHUD_BELT_NITRON                                  21
#define CONST_TRHUD_BELT_MOTIONALARM                             22
#define CONST_TRHUD_BELT_SPIKEGREN                               23
#define CONST_TRHUD_BELT_WHITEOUT                                24
#define CONST_TRHUD_BELT_APGREN                                  25
#define CONST_TRHUD_BELT_STGREN                                  26
#define CONST_TRHUD_BELT_PRISMMINES                              27
#define CONST_TRHUD_BELT_FLARE                                   28
#define CONST_TRHUD_BELT_EMPGREN                                 29
#define CONST_TRHUD_BELT_MINES                                   30
#define CONST_TRHUD_BELT_DISKTOSS                                31
#define CONST_TRHUD_TBD4                                         32
#define CONST_TRHUD_TBD5                                         33
#define CONST_TRHUD_MEDAL_ASSIST                                 34
#define CONST_TRHUD_CLAYMOREMINE                                 35
#define CONST_TRHUD_PRISMMINE                                    36
#define CONST_TRHUD_LIGHTTURRET                                  37
#define CONST_TRHUD_AATURRET                                     38
#define CONST_TRHUD_MOTIONSENSOR                                 39
#define CONST_TRHUD_MINES                                        40
#define CONST_TRHUD_FORCESHIELD                                  41
#define CONST_TRHUD_DROPJAMMER                                   42
#define CONST_TRHUD_GENERATOR                                    43
#define CONST_TRHUD_SKIING                                       44
#define CONST_TRHUD_MEDAL_KILLINGSPREE                           45
#define CONST_TRHUD_MEDAL_KILLINGRAMPAGE                         46
#define CONST_TRHUD_MEDAL_UNSTOPPABLE                            47
#define CONST_TRHUD_MEDAL_RELENTLESS                             48
#define CONST_TRHUD_MEDAL_THESLAYER                              49
#define CONST_TRHUD_MEDAL_SNIPINGSPREE                           50
#define CONST_TRHUD_MEDAL_MARKSMAN                               51
#define CONST_TRHUD_MEDAL_SHARPSHOOTER                           52
#define CONST_TRHUD_MEDAL_AIRMAIL                                53
#define CONST_TRHUD_MEDAL_DEMOLITIONSEXPERT                      54
#define CONST_TRHUD_MEDAL_HURTLOCKER                             55
#define CONST_TRHUD_MEDAL_CLASSICSPREE                           56
#define CONST_TRHUD_MEDAL_DISKJOCKEY                             57
#define CONST_TRHUD_MEDAL_TRIBALFANATIC                          58
#define CONST_TRHUD_MEDAL_DOUBLEKILL                             59
#define CONST_TRHUD_MEDAL_TRIPLEKILL                             60
#define CONST_TRHUD_MEDAL_QUATRAKILL                             61
#define CONST_TRHUD_MEDAL_ULTRAKILL                              62
#define CONST_TRHUD_MEDAL_TEAMKILL                               63
#define CONST_TRHUD_MEDAL_NOJOY                                  64
#define CONST_TRHUD_MEDAL_REVENGE                                65
#define CONST_TRHUD_MEDAL_AFTERMATH                              66
#define CONST_TRHUD_MEDAL_FIRSTBLOOD                             67
#define CONST_TRHUD_MEDAL_BLUEPLATE                              68
#define CONST_TRHUD_MEDAL_STICKYKILL                             69
#define CONST_TRHUD_MEDAL_HEADSHOT                               70
#define CONST_TRHUD_MEDAL_ARTILLERYSHOT                          71
#define CONST_TRHUD_MEDAL_MARTIALART                             72
#define CONST_TRHUD_MEDAL_SQUISH                                 73
#define CONST_TRHUD_MEDAL_FLAGGOLD                               74
#define CONST_TRHUD_MEDAL_FLAGSILVER                             75
#define CONST_TRHUD_MEDAL_FLAGBRONZE                             75
#define CONST_TRHUD_MEDAL_FLAGLLAMA                              75
#define CONST_TRHUD_MEDAL_GENERHATER                             76
#define CONST_TRHUD_MEDAL_RABBITHUNTER                           77
#define CONST_TRHUD_MEDAL_CAERBANNOG                             78
#define CONST_TRHUD_MEDAL_FINALBLOW                              79
#define CONST_TRHUD_MEDAL_GENDEFENSE                             76
#define CONST_TRHUD_MEDAL_FLAGDEFENSE                            75
#define CONST_TRHUD_MEDAL_VDESTROY                               73
#define CONST_TRHUD_MEDAL_HOTAIR                                 284
#define CONST_TRICON_RANK                                        80
#define CONST_TRICON_RANK01                                      81
#define CONST_TRICON_RANK02                                      82
#define CONST_TRICON_RANK03                                      83
#define CONST_TRICON_RANK04                                      84
#define CONST_TRICON_RANK05                                      85
#define CONST_TRICON_RANK06                                      86
#define CONST_TRICON_RANK07                                      87
#define CONST_TRICON_RANK08                                      88
#define CONST_TRICON_RANK09                                      89
#define CONST_TRICON_RANK10                                      90
#define CONST_TRICON_RANK11                                      91
#define CONST_TRICON_RANK12                                      92
#define CONST_TRICON_RANK13                                      93
#define CONST_TRICON_RANK14                                      94
#define CONST_TRICON_RANK15                                      95
#define CONST_TRICON_RANK16                                      96
#define CONST_TRICON_RANK17                                      97
#define CONST_TRICON_RANK18                                      98
#define CONST_TRICON_RANK19                                      99
#define CONST_TRICON_RANK20                                      100
#define CONST_TRICON_RANK21                                      101
#define CONST_TRICON_RANK22                                      102
#define CONST_TRICON_RANK23                                      103
#define CONST_TRICON_RANK24                                      104
#define CONST_TRICON_RANK25                                      105
#define CONST_TRICON_RANK26                                      106
#define CONST_TRICON_RANK27                                      107
#define CONST_TRICON_RANK28                                      108
#define CONST_TRICON_RANK29                                      109
#define CONST_TRICON_RANK30                                      110
#define CONST_TRICON_RANK31                                      111
#define CONST_TRICON_RANK32                                      112
#define CONST_TRICON_RANK33                                      113
#define CONST_TRICON_RANK34                                      114
#define CONST_TRICON_RANK35                                      115
#define CONST_TRICON_RANK36                                      116
#define CONST_TRICON_RANK37                                      117
#define CONST_TRICON_RANK38                                      118
#define CONST_TRICON_RANK39                                      119
#define CONST_TRICON_RANK40                                      120
#define CONST_TRICON_RANK41                                      121
#define CONST_TRICON_RANK42                                      122
#define CONST_TRICON_RANK43                                      123
#define CONST_TRICON_RANK44                                      124
#define CONST_TRICON_RANK45                                      125
#define CONST_TRICON_RANK46                                      126
#define CONST_TRICON_RANK47                                      127
#define CONST_TRICON_RANK48                                      128
#define CONST_TRICON_RANK49                                      129
#define CONST_TRICON_KILLTYPE_EXPLOSIVE                          130
#define CONST_TRICON_KILLTYPE_STICKY                             131
#define CONST_TRICON_KILLTYPE_SQUISH                             132
#define CONST_TRICON_KILLTYPE_MELEE                              133
#define CONST_TRICON_KILLTYPE_FALLING                            134
#define CONST_TRICON_KILLTYPE_VEHICLE                            135
#define CONST_TRICON_KILLTYPE_BULLET                             136
#define CONST_TRICON_KILLTYPE_SNIPER                             137
#define CONST_TRICON_KILLTYPE_BASE_TURRET                        138
#define CONST_TRICON_KILLTYPE_HEADSHOT                           139
#define CONST_TRICON_KILLTYPE_GENERIC                            140
#define CONST_TRICON_KILLTYPE_SPINFUSOR                          141
#define CONST_TRICON_KILLTYPE_TURRET                             142
#define CONST_TRICON_ACCOLADE_BASE_DESTROY                       143
#define CONST_TRICON_ACCOLADE_BASE_REPAIR                        144
#define CONST_TRICON_ACCOLADE_MIRACLE                            145
#define CONST_TRICON_ACCOLADE_ULTRAKILLNORED                     146
#define CONST_TRICON_ACCOLADE_NOTAMONGEQUALS                     147
#define CONST_TRICON_ACCOLADE_EXPLOSIVESPREE                     148
#define CONST_TRICON_ACCOLADE_ULTRAFASTGRAB                      149
#define CONST_TRICON_ACCOLADE_ONEMANARMY                         150
#define CONST_TRICON_ACCOLADE_GAMEWINNER                         151
#define CONST_TRICON_ACCOLADE_UNITEDWESTAND                      152
#define CONST_TRICON_ACCOLADE_DOUBLEDOWN                         153
#define CONST_TRICON_ACCOLADE_FASTFLAGGRAB                       154
#define CONST_TRICON_ACCOLADE_SHRIKEDOWN                         155
#define CONST_TRICON_ACCOLADE_GRAVCYCLEDOWN                      156
#define CONST_TRICON_ACCOLADE_BEOWULFDOWN                        157
#define CONST_TRICON_ACCOLADE_FINALBLOW                          158
#define CONST_TRICON_ACCOLADE_BENCHEM                            159
#define CONST_TRICON_ACCOLADE_LASTMANSTANDING                    160
#define CONST_TRICON_ACCOLADE_TRIBALHONOR                        161
#define CONST_TRICON_ACCOLADE_FLAGKILLER                         162
#define CONST_TRICON_ACCOLADE_GAMECOMPLETE                       163
#define CONST_TRICON_ACCOLADE_FLAGDEFENSE                        164
#define CONST_TRICON_ACCOLADE_GENERATORDEFENSE                   165
#define CONST_TRICON_ACCOLADE_LLAMAGRAB                          166
#define CONST_TRICON_ACCOLADE_EGRAB                              167
#define CONST_TRICON_ACCOLADE_TURRETDESTROYED                    168
#define CONST_TRICON_ACCOLADE_ALTFLAGCARRY                       169
#define CONST_TRICON_ACCOLADE_HOLDTHELINE                        281
#define CONST_TRICON_ACCOLADE_CAPTUREANDHOLD                     282
#define CONST_TRICON_BADGE_FLAGDEFENSE                           170
#define CONST_TRICON_BADGE_FLAGDEFENSE01                         171
#define CONST_TRICON_BADGE_FLAGDEFENSE02                         172
#define CONST_TRICON_BADGE_FLAGDEFENSE03                         173
#define CONST_TRICON_BADGE_OPERATOR                              174
#define CONST_TRICON_BADGE_OPERATOR01                            175
#define CONST_TRICON_BADGE_OPERATOR02                            176
#define CONST_TRICON_BADGE_OPERATOR03                            177
#define CONST_TRICON_BADGE_CALLINKILLS                           178
#define CONST_TRICON_BADGE_CALLINKILLS01                         179
#define CONST_TRICON_BADGE_CALLINKILLS02                         180
#define CONST_TRICON_BADGE_CALLINKILLS03                         181
#define CONST_TRICON_BADGE_MELEEKILLS                            182
#define CONST_TRICON_BADGE_MELEEKILLS01                          183
#define CONST_TRICON_BADGE_MELEEKILLS02                          184
#define CONST_TRICON_BADGE_MELEEKILLS03                          185
#define CONST_TRICON_BADGE_ONEMANARMY                            186
#define CONST_TRICON_BADGE_ONEMANARMY01                          187
#define CONST_TRICON_BADGE_ONEMANARMY02                          188
#define CONST_TRICON_BADGE_ONEMANARMY03                          189
#define CONST_TRICON_BADGE_FLAGCAPPER                            190
#define CONST_TRICON_BADGE_FLAGCAPPER01                          191
#define CONST_TRICON_BADGE_FLAGCAPPER02                          192
#define CONST_TRICON_BADGE_FLAGCAPPER03                          193
#define CONST_TRICON_BADGE_TOUROFDUTY                            194
#define CONST_TRICON_BADGE_TOUROFDUTY01                          195
#define CONST_TRICON_BADGE_TOUROFDUTY02                          196
#define CONST_TRICON_BADGE_TOUROFDUTY03                          197
#define CONST_TRICON_BADGE_MULTIKILL                             198
#define CONST_TRICON_BADGE_MULTIKILL01                           199
#define CONST_TRICON_BADGE_MULTIKILL02                           200
#define CONST_TRICON_BADGE_MULTIKILL03                           201
#define CONST_TRICON_BADGE_COMBATSTAR                            202
#define CONST_TRICON_BADGE_COMBATSTAR01                          203
#define CONST_TRICON_BADGE_COMBATSTAR02                          204
#define CONST_TRICON_BADGE_COMBATSTAR03                          205
#define CONST_TRICON_BADGE_CROSSCOUNTRY                          206
#define CONST_TRICON_BADGE_CROSSCOUNTRY01                        207
#define CONST_TRICON_BADGE_CROSSCOUNTRY02                        208
#define CONST_TRICON_BADGE_CROSSCOUNTRY03                        209
#define CONST_TRICON_BADGE_POWERPLAYER                           210
#define CONST_TRICON_BADGE_POWERPLAYER01                         211
#define CONST_TRICON_BADGE_POWERPLAYER02                         212
#define CONST_TRICON_BADGE_POWERPLAYER03                         213
#define CONST_TRICON_BADGE_DEMOMAN                               214
#define CONST_TRICON_BADGE_DEMOMAN01                             215
#define CONST_TRICON_BADGE_DEMOMAN02                             216
#define CONST_TRICON_BADGE_DEMOMAN03                             217
#define CONST_TRICON_BADGE_SPEEDRUNNER                           218
#define CONST_TRICON_BADGE_SPEEDRUNNER01                         219
#define CONST_TRICON_BADGE_SPEEDRUNNER02                         220
#define CONST_TRICON_BADGE_SPEEDRUNNER03                         221
#define CONST_TRICON_BADGE_GOODDRIVER                            222
#define CONST_TRICON_BADGE_GOODDRIVER01                          223
#define CONST_TRICON_BADGE_GOODDRIVER02                          224
#define CONST_TRICON_BADGE_GOODDRIVER03                          225
#define CONST_TRICON_BADGE_PURPLEHEART                           226
#define CONST_TRICON_BADGE_PURPLEHEART01                         227
#define CONST_TRICON_BADGE_PURPLEHEART02                         228
#define CONST_TRICON_BADGE_PURPLEHEART03                         229
#define CONST_TRICON_BADGE_HAPPENSTOUSALL                        230
#define CONST_TRICON_BADGE_INVSTATION                            231
#define CONST_TRICON_BADGE_ANTIVEHICLE                           232
#define CONST_TRICON_BADGE_ANTIVEHICLE01                         233
#define CONST_TRICON_BADGE_ANTIVEHICLE02                         234
#define CONST_TRICON_BADGE_ANTIVEHICLE03                         235
#define CONST_TRICON_BADGE_UTILITYBELT                           236
#define CONST_TRICON_BADGE_UTILITYBELT01                         237
#define CONST_TRICON_BADGE_UTILITYBELT02                         238
#define CONST_TRICON_BADGE_UTILITYBELT03                         239
#define CONST_TRICON_BADGE_ONCALL                                240
#define CONST_TRICON_BADGE_ONCALL01                              241
#define CONST_TRICON_BADGE_ONCALL02                              242
#define CONST_TRICON_BADGE_ONCALL03                              243
#define CONST_TRICON_BADGE_SUPPORT                               244
#define CONST_TRICON_BADGE_SUPPORT01                             245
#define CONST_TRICON_BADGE_SUPPORT02                             246
#define CONST_TRICON_BADGE_SUPPORT03                             247
#define CONST_TRICON_BADGE_MARKSMAN                              248
#define CONST_TRICON_BADGE_MARKSMAN01                            249
#define CONST_TRICON_BADGE_MARKSMAN02                            250
#define CONST_TRICON_BADGE_MARKSMAN03                            251
#define CONST_TRICON_BADGE_ASSISTOR                              252
#define CONST_TRICON_BADGE_ASSISTOR01                            253
#define CONST_TRICON_BADGE_ASSISTOR02                            254
#define CONST_TRICON_BADGE_ASSISTOR03                            255
#define CONST_TRICON_BADGE_BUILDER                               256
#define CONST_TRICON_BADGE_BUILDER01                             257
#define CONST_TRICON_BADGE_BUILDER02                             258
#define CONST_TRICON_BADGE_BUILDER03                             259
#define CONST_TRICON_BADGE_GOINGFAST                             260
#define CONST_TRICON_BADGE_GOINGFAST01                           261
#define CONST_TRICON_BADGE_GOINGFAST02                           262
#define CONST_TRICON_BADGE_GOINGFAST03                           263
#define CONST_RANK_XP                                            0
#define CONST_RANK_XP01                                          1350
#define CONST_RANK_XP02                                          2781
#define CONST_RANK_XP03                                          4298
#define CONST_RANK_XP04                                          5906
#define CONST_RANK_XP05                                          11212
#define CONST_RANK_XP06                                          16836
#define CONST_RANK_XP07                                          22798
#define CONST_RANK_XP08                                          31741
#define CONST_RANK_XP09                                          41130
#define CONST_RANK_XP10                                          50990
#define CONST_RANK_XP11                                          61342
#define CONST_RANK_XP12                                          76870
#define CONST_RANK_XP13                                          93020
#define CONST_RANK_XP14                                          109815
#define CONST_RANK_XP15                                          127283
#define CONST_RANK_XP16                                          145449
#define CONST_RANK_XP17                                          172698
#define CONST_RANK_XP18                                          200765
#define CONST_RANK_XP19                                          229673
#define CONST_RANK_XP20                                          259449
#define CONST_RANK_XP21                                          290118
#define CONST_RANK_XP22                                          321707
#define CONST_RANK_XP23                                          369091
#define CONST_RANK_XP24                                          417896
#define CONST_RANK_XP25                                          468166
#define CONST_RANK_XP26                                          519943
#define CONST_RANK_XP27                                          573274
#define CONST_RANK_XP28                                          628205
#define CONST_RANK_XP29                                          684783
#define CONST_RANK_XP30                                          743059
#define CONST_RANK_XP31                                          803084
#define CONST_RANK_XP32                                          864909
#define CONST_RANK_XP33                                          928589
#define CONST_RANK_XP34                                          994179
#define CONST_RANK_XP35                                          1061737
#define CONST_RANK_XP36                                          1131321
#define CONST_RANK_XP37                                          1202994
#define CONST_RANK_XP38                                          1276816
#define CONST_RANK_XP39                                          1352853
#define CONST_RANK_XP40                                          1431171
#define CONST_RANK_XP41                                          1511839
#define CONST_RANK_XP42                                          1594926
#define CONST_RANK_XP43                                          1680507
#define CONST_RANK_XP44                                          1768654
#define CONST_RANK_XP45                                          1859447
#define CONST_RANK_XP46                                          1952963
#define CONST_RANK_XP47                                          2049284
#define CONST_RANK_XP48                                          2148495
#define CONST_RANK_XP49                                          2250682
#define CONST_ACCOLADE_TYPE_MISC                                 0
#define CONST_ACCOLADE_TYPE_MULTIKILL                            1
#define CONST_ACCOLADE_TYPE_KILLSTREAK                           2
#define CONST_TRICON_PERK_ICON_WIP                               1
#define CONST_TRICON_PERK_BONUS_KILL_CREDITS                     1
#define CONST_TRICON_PERK_STICKY_HANDS                           2
#define CONST_TRICON_PERK_REDUCED_VEHICLE_COST                   3
#define CONST_TRICON_PERK_REDUCED_SELF_DAMAGE                    4
#define CONST_TRICON_PERK_REDUCED_RUN_OVER                       5
#define CONST_TRICON_PERK_REDUCED_BASE_UPGRADE_COST              6
#define CONST_TRICON_PERK_REDUCED_FALL_DMG                       7
#define CONST_TRICON_PERK_REDUCED_AIR_VEHICLE_COST               8
#define CONST_TRICON_PERK_TRAP_DETECTION                         9
#define CONST_TRICON_PERK_PICKUP_ENERGY_HEALTH                   10
#define CONST_TRICON_PERK_MELEE_FLAG_DROP                        11
#define CONST_TRICON_PERK_EXTRA_MINES                            12
#define CONST_TRICON_PERK_EXTRA_ENERGY                           13
#define CONST_TRICON_PERK_EXTRA_GRENADE_PICKUP                   14
#define CONST_TRICON_PERK_EXTRA_AMMO                             15
#define CONST_TRICON_PERK_EXTRA_GRENADE                          16
#define CONST_TRICON_PERK_BEOWULF_HEALTH_INCREASE                17
#define CONST_TRICON_PERK_EJECTION_SEAT                          18
#define CONST_TRICON_PERK_ORBITAL_STRIKE                         19
#define CONST_TRICON_PERK_REDUCED_MELEE_DAMAGE                   20
#define CONST_TRICON_PERK_MELEE_BACKSTAB                         21
#define CONST_TRICON_PERK_DEMOLITIONS                            22
#define CONST_TRICON_PERK_SQUIRRELLY                             23
#define CONST_TRICON_PERK_STEALTHY                               24
#define CONST_TRICON_PERK_ULTRA_CAPACITOR                        25
#define CONST_TRICON_PERK_DETERMINATION                          26
#define CONST_TRICON_SKILL_SPEED                                 1
#define CONST_TRICON_SKILL_ENERGY                                2
#define CONST_TRICON_SKILL_PING                                  3
#define CONST_TRICON_SKILL_AMMO                                  4
#define CONST_TRICON_SKILL_ANTI_ARMOR                            5
#define CONST_TRICON_SKILL_GRENADE                               6
#define CONST_TRICON_SKILL_RADIUS                                7
#define CONST_TRICON_SKILL_HEALTH                                8
#define CONST_TRICON_SKILL_BOOT                                  9
#define CONST_TRICON_SKILL_TIMER                                 10
#define CONST_TRICON_CLASS_SENTINEL                              1
#define CONST_TRICON_CLASS_PATHFINDER                            2
#define CONST_TRICON_CLASS_JUMPER                                3
#define CONST_TRICON_CLASS_INFILTRATOR                           4
#define CONST_TRICON_CLASS_WARDER                                30
#define CONST_TRICON_CLASS_TECHNICIAN                            31
#define CONST_TRICON_CLASS_SOLDIER                               32
#define CONST_TRICON_CLASS_SCRAMBLER                             33
#define CONST_TRICON_CLASS_RANGER                                34
#define CONST_TRICON_CLASS_RAIDER                                35
#define CONST_TRICON_CLASS_ENGINEER                              36
#define CONST_TRICON_CLASS_ROOK                                  60
#define CONST_TRICON_CLASS_MARAUDER                              61
#define CONST_TRICON_CLASS_JUGGERNAUT                            62
#define CONST_TRICON_CLASS_DOOMBRINGER                           63
#define CONST_TRICON_CLASS_BRUTE                                 64
#define CONST_TRICON_CLASS_WIP                                   88
#define CONST_ICON_UPGRADE_NONE                                  0
#define CONST_MOD_TYPE_NONE                                      1
#define CONST_MOD_TYPE_HEALTH                                    2
#define CONST_MOD_TYPE_MASSPCT                                   3
#define CONST_MOD_TYPE_RADARLINK                                 4
#define CONST_MOD_TYPE_FLAGREACH                                 5
#define CONST_MOD_TYPE_BUILDUPPCT                                6
#define CONST_MOD_TYPE_CLOTHESLINE                               7
#define CONST_MOD_TYPE_STICKYHANDS                               8
#define CONST_MOD_TYPE_MAXSKISPEED                               9
#define CONST_MOD_TYPE_EXTRAENERGY                               10
#define CONST_MOD_TYPE_EJECTIONSEAT                              11
#define CONST_MOD_TYPE_SELFDAMAGEPCT                             12
#define CONST_MOD_TYPE_REPAIRRATEPCT                             13
#define CONST_MOD_TYPE_EXTRAMINESOUT                             14
#define CONST_MOD_TYPE_VEHICLEEXTRAHEALTH                        15
#define CONST_MOD_TYPE_GROUNDSPEEDPCT                            16
#define CONST_MOD_TYPE_ENERGYDRAINPCT                            17
#define CONST_MOD_TYPE_UPGRADECOSTPCT                            18
#define CONST_MOD_TYPE_CANDETECTTRAPS                            19
#define CONST_MOD_TYPE_SPLATDAMAGEPCT                            20
#define CONST_MOD_TYPE_WEAPONSWITCHPCT                           21
#define CONST_MOD_TYPE_POTENTIALENERGY                           22
#define CONST_MOD_TYPE_MAXJETTINGSPEED                           23
#define CONST_MOD_TYPE_CREDITSFROMKILLS                          24
#define CONST_MOD_TYPE_TERMINALSKISPEED                          25
#define CONST_MOD_TYPE_MAXSKICONTROLPCT                          26
#define CONST_MOD_TYPE_HASDETERMINATION                          27
#define CONST_MOD_TYPE_DEPLOYABLEHEALTH                          28
#define CONST_MOD_TYPE_EXTRAOFFHANDAMMO                          29
#define CONST_MOD_TYPE_EXTRAPRIMARYAMMO                          30
#define CONST_MOD_TYPE_PRIMARYRELOADPCT                          31
#define CONST_MOD_TYPE_SENSORDISTANCEPCT                         32
#define CONST_MOD_TYPE_PACKENERGYCOSTPCT                         33
#define CONST_MOD_TYPE_AMMOFROMPICKUPPCT                         34
#define CONST_MOD_TYPE_TIMETOREGENENERGY                         35
#define CONST_MOD_TYPE_SECONDARYRELOADPCT                        36
#define CONST_MOD_TYPE_EXTRASECONDARYAMMO                        37
#define CONST_MOD_TYPE_ENERGYREGENRATEPCT                        38
#define CONST_MOD_TYPE_HEALTHREGENRATEPCT                        39
#define CONST_MOD_TYPE_DEPLOYABLERANGEPCT                        40
#define CONST_MOD_TYPE_JAMMERPACKRADIUSPCT                       41
#define CONST_MOD_TYPE_BLINKPACKPOTENCYPCT                       42
#define CONST_MOD_TYPE_PEAKSKICONTROLSPEED                       43
#define CONST_MOD_TYPE_CANCALLINSUPPLYDROP                       44
#define CONST_MOD_TYPE_EXTRADEPLOYABLESOUT                       45
#define CONST_MOD_TYPE_HEALTHFROMPICKUPPCT                       46
#define CONST_MOD_TYPE_ENERGYFROMPICKUPPCT                       47
#define CONST_MOD_TYPE_TERMINALJETTINGSPEED                      48
#define CONST_MOD_TYPE_TIMETOREGENHEALTHPCT                      49
#define CONST_MOD_TYPE_VEHICLECOSTPCT                            50
#define CONST_MOD_TYPE_SKICONTROLSIGMASQUARE                     51
#define CONST_MOD_TYPE_RECEIVEMELEEDAMAGEPCT                     52
#define CONST_MOD_TYPE_VICTIMDROPFLAGONMELEE                     53
#define CONST_MOD_TYPE_PRIMARYWEAPONRANGEPCT                     54
#define CONST_MOD_TYPE_OFFHANDDAMAGERADIUSPCT                    55
#define CONST_MOD_TYPE_TURRETACQUIRETARGETPCT                    56
#define CONST_MOD_TYPE_WHITEOUTINTERPSPEEDPCT                    57
#define CONST_MOD_TYPE_BACKSTABMELEEDAMAGEPCT                    58
#define CONST_MOD_TYPE_MAXSTOPPINGDISTANCEPCT                    59
#define CONST_MOD_TYPE_SECONDARYWEAPONRANGEPCT                   60
#define CONST_MOD_TYPE_EXTRAGRENADESFROMPICKUP                   61
#define CONST_MOD_TYPE_SHIELDPACKEFFECTIVENESS                   62
#define CONST_MOD_TYPE_STEALTHPACKPULSETIMEPCT                   63
#define CONST_MOD_TYPE_PRIMARYINCREASEDCLIPSIZE                  64
#define CONST_MOD_TYPE_EXTRACREDITSFROMBELTKILLS                 65
#define CONST_MOD_TYPE_TURRETARMORPENETRATIONPCT                 66
#define CONST_MOD_TYPE_SECONDARYINCREASEDCLIPSIZE                67
#define CONST_MOD_TYPE_OFFHANDARMORPENETRATIONPCT                68
#define CONST_MOD_TYPE_PRIMARYARMORPENETRATIONPCT                69
#define CONST_MOD_TYPE_RUNOVERDAMAGEPROTECTIONPCT                70
#define CONST_MOD_TYPE_PRIMARYWEAPONENERGYCOSTPCT                71
#define CONST_MOD_TYPE_ACQUIRETIMEBYENEMYTURRETPCT               72
#define CONST_MOD_TYPE_SECONDARYARMORPENETRATIONPCT              73
#define CONST_MOD_TYPE_VEHICLEEXTRAENERGY                        74
#define CONST_MOD_TYPE_AMMOPICKUPREACH                           75
#define CONST_MOD_TYPE_VEHICLEPASSENGERDMGPROTPCT                76
#define CONST_MOD_TYPE_DAMAGEREPAIRENEMYOBJECTIVES               77
#define CONST_MOD_TYPE_POTENTIALENERGYFALLDAMAGE                 78
#define CONST_MOD_TYPE_FASTERTHROWBELTBUFFPCT                    79
#define CONST_MOD_TYPE_IGNOREGRENADESECONDARYONSELF              80
#define CONST_MOD_TYPE_POTENTIALENERGYDMGTRANSFERPCT             81
#define CONST_MOD_TYPE_FLAGREACHTIER                             82
#define CONST_MOD_TYPE_SONICPUNCH                                83
#define CONST_MOD_TYPE_SONICPUNCHDIST                            84
#define CONST_MOD_TYPE_SONICPUNCHKNOCKBACK                       85
#define CONST_MOD_TYPE_RAGE                                      86
#define CONST_MOD_TYPE_RAGEENERGYREGEN                           87
#define CONST_MOD_TYPE_RAGETIMELENGTH                            88
#define CONST_MOD_TYPE_RAGEHEALTHRESTOREPCT                      89
#define CONST_MOD_TYPE_IGNOREPULSESTEALTHTIME                    90
#define CONST_MOD_TYPE_RAGEMASSREDUCTION                         91
#define CONST_MOD_TYPE_REPAIRDEPLOYABLERATEPCT                   92
#define CONST_MAX_CLASS_SLOTS                                    10
#define CONST_TR_QUERY_CTF                                       0
#define CONST_TR_QUERY_TDM                                       1
#define CONST_TR_QUERY_RABBIT                                    2
#define CONST_TR_QUERY_TEAMRABBIT                                3
#define CONST_TR_QUERY_ARENA                                     4
#define CONST_TR_QUERY_DEFENDANDDESTROY                          5
#define CONST_TR_QUERY_CTFBLITZ                                  6
#define CONST_CONTEXT_GAME_MODE_TRCTF                            0
#define CONST_CONTEXT_GAME_MODE_TRTDM                            1
#define CONST_CONTEXT_GAME_MODE_TRRABBIT                         2
#define CONST_CONTEXT_GAME_MODE_TRSIEGE                          3
#define CONST_CONTEXT_GAME_MODE_TRTRAINING                       4
#define CONST_CONTEXT_GAME_MODE_TRSTORM                          5
#define CONST_CONTEXT_GAME_MODE_TRTEAMRABBIT                     6
#define CONST_CONTEXT_GAME_MODE_TRARENA                          7
#define CONST_CONTEXT_GAME_MODE_TRDEFENDANDDESTROY               8
#define CONST_CONTEXT_GAME_MODE_TRCAPTUREANDHOLD                 9
#define CONST_CONTEXT_GAME_MODE_TRCTFBLITZ                       10
#define CONST_STAT_VIEW_BASE_PLAYER                              1
#define CONST_STAT_VIEW_BASE_GAME                                101
#define CONST_STAT_VIEW_BASE_WEAPON_TYPE                         1000
#define CONST_GAME_SESSION_NAME                                  'Game'
#define CONST_PROPERTY_CUSTOM_MAPNAME                            0x40000001
#define CONST_PROPERTY_CUSTOM_GAMEMODE                           0x40000002
#define CONST_PROPERTY_SERVER_DESCRIPTION                        0x40000003
#define CONST_PROPERTY_CUSTOM_MUTATORS                           0x40000004
#define CONST_CLASS_TYPE_UNKNOWN                                 1668
#define CONST_CLASS_TYPE_LIGHT_INFILTRATOR                       1682
#define CONST_CLASS_TYPE_LIGHT_JUMPER                            1696
#define CONST_CLASS_TYPE_LIGHT_ARCHITECT                         1697
#define CONST_CLASS_TYPE_LIGHT_PATHFINDER                        1683
#define CONST_CLASS_TYPE_LIGHT_NAKEDPATHFINDER                   1701
#define CONST_CLASS_TYPE_LIGHT_WRAITH                            1685
#define CONST_CLASS_TYPE_LIGHT_SENTINEL                          1686
#define CONST_CLASS_TYPE_MEDIUM_ENGINEER                         1698
#define CONST_CLASS_TYPE_MEDIUM_RANGER                           1687
#define CONST_CLASS_TYPE_MEDIUM_SCRAMBLER                        1688
#define CONST_CLASS_TYPE_MEDIUM_SOLDIER                          1693
#define CONST_CLASS_TYPE_MEDIUM_RAIDER                           1699
#define CONST_CLASS_TYPE_MEDIUM_TECHNICIAN                       1694
#define CONST_CLASS_TYPE_MEDIUM_WARDER                           1700
#define CONST_CLASS_TYPE_HEAVY_BRUTE                             1689
#define CONST_CLASS_TYPE_HEAVY_ROOK                              1690
#define CONST_CLASS_TYPE_HEAVY_DOOMBRINGER                       1691
#define CONST_CLASS_TYPE_HEAVY_JUGGERNAUGHT                      1692
#define CONST_CLASS_TYPE_HEAVY_MARAUDER                          1695
#define CONST_CLASS_PURCHASE_LIGHT_INFILTRATOR                   7476
#define CONST_CLASS_PURCHASE_LIGHT_PATHFINDER                    7466
#define CONST_CLASS_PURCHASE_LIGHT_SENTINEL                      7478
#define CONST_CLASS_PURCHASE_MEDIUM_SOLDIER                      7470
#define CONST_CLASS_PURCHASE_MEDIUM_RAIDER                       7494
#define CONST_CLASS_PURCHASE_MEDIUM_TECHNICIAN                   7472
#define CONST_CLASS_PURCHASE_HEAVY_BRUTE                         7486
#define CONST_CLASS_PURCHASE_HEAVY_DOOMBRINGER                   7488
#define CONST_CLASS_PURCHASE_HEAVY_JUGGERNAUGHT                  7474
#define CONST_CLASS_INFO_BIT_NONE                                0x00000000
#define CONST_CLASS_INFO_BIT_INFILTRATOR                         0x00000001
#define CONST_CLASS_INFO_BIT_JUMPER                              0x00000002
#define CONST_CLASS_INFO_BIT_ARCHITECT                           0x00000004
#define CONST_CLASS_INFO_BIT_PATHFINDER                          0x00000008
#define CONST_CLASS_INFO_BIT_WRAITH                              0x00000010
#define CONST_CLASS_INFO_BIT_SENTINEL                            0x00000020
#define CONST_CLASS_INFO_BIT_ENGINEER                            0x00000040
#define CONST_CLASS_INFO_BIT_RANGER                              0x00000080
#define CONST_CLASS_INFO_BIT_SCRAMBLER                           0x00000100
#define CONST_CLASS_INFO_BIT_SOLDIER                             0x00000200
#define CONST_CLASS_INFO_BIT_RAIDER                              0x00000400
#define CONST_CLASS_INFO_BIT_TECHNICIAN                          0x00000800
#define CONST_CLASS_INFO_BIT_WARDER                              0x00001000
#define CONST_CLASS_INFO_BIT_BRUTE                               0x00002000
#define CONST_CLASS_INFO_BIT_ROOK                                0x00004000
#define CONST_CLASS_INFO_BIT_DOOMBRINGER                         0x00008000
#define CONST_CLASS_INFO_BIT_JUGGERNAUT                          0x00010000
#define CONST_CLASS_INFO_BIT_MARAUDER                            0x00020000
#define CONST_CLASS_INFO_BIT_NAKEDPATHFINDER                     0x00040000
#define CONST_WEAPON_ID_UNKNOWN                                  102000
#define CONST_WEAPON_ID_AVMINE                                   102003
#define CONST_WEAPON_ID_DUALRHINO                                102024
#define CONST_WEAPON_ID_LACERATOR                                102016
#define CONST_WEAPON_ID_ARX_BUSTER                               7384
#define CONST_WEAPON_ID_CHAINGUN                                 7386
#define CONST_WEAPON_ID_DROPJAMMER                               7456
#define CONST_WEAPON_ID_FORCEFIELD                               7411
#define CONST_WEAPON_ID_FORCEFIELD_PERSONAL                      7460
#define CONST_WEAPON_ID_GRENADE                                  7390
#define CONST_WEAPON_ID_GRENADE_AP                               7434
#define CONST_WEAPON_ID_GRENADE_AP_HEAVY                         7447
#define CONST_WEAPON_ID_GRENADE_EMP                              7444
#define CONST_WEAPON_ID_GRENADE_FLARE                            7389
#define CONST_WEAPON_ID_GRENADE_NITRON                           7387
#define CONST_WEAPON_ID_GRENADE_NITRON_HEAVY                     7450
#define CONST_WEAPON_ID_GRENADE_SPIKE                            7428
#define CONST_WEAPON_ID_GRENADE_ST                               7437
#define CONST_WEAPON_ID_GRENADE_STICKY                           7402
#define CONST_WEAPON_ID_GRENADE_STICKY_LIGHT                     7455
#define CONST_WEAPON_ID_GRENADE_WHITEOUT                         7432
#define CONST_WEAPON_ID_GRENADE_XL                               7430
#define CONST_WEAPON_ID_GUNNER_BEOWULF                           7405
#define CONST_WEAPON_ID_GUNNER_HERC                              7404
#define CONST_WEAPON_ID_LAUNCHER_BOLT                            7425
#define CONST_WEAPON_ID_LAUNCHER_BOLT_HEAVY                      7452
#define CONST_WEAPON_ID_LAUNCHER_GRENADE                         7416
#define CONST_WEAPON_ID_LAUNCHER_MIRV                            7457
#define CONST_WEAPON_ID_LAUNCHER_MORTAR                          7393
#define CONST_WEAPON_ID_LAUNCHER_SABER                           7398
#define CONST_WEAPON_ID_MELEE                                    7391
#define CONST_WEAPON_ID_MINE                                     7392
#define CONST_WEAPON_ID_MINE_CLAYMORE                            7421
#define CONST_WEAPON_ID_MINE_PRISM                               7440
#define CONST_WEAPON_ID_MOTIONALARM                              7426
#define CONST_WEAPON_ID_PILOT_BEOWULF                            7406
#define CONST_WEAPON_ID_PILOT_GRAVCYCLE                          7410
#define CONST_WEAPON_ID_PILOT_HAVOC                              7409
#define CONST_WEAPON_ID_PILOT_HERC                               7403
#define CONST_WEAPON_ID_PILOT_SHRIKE                             7407
#define CONST_WEAPON_ID_PISTOL_EAGLE                             7388
#define CONST_WEAPON_ID_PISTOL_EAGLE_CUSTOM                      7439
#define CONST_WEAPON_ID_PISTOL_NOVA_COLT                         7394
#define CONST_WEAPON_ID_PISTOL_NOVA_SLUG                         7431
#define CONST_WEAPON_ID_PISTOL_FALCON                            7419
#define CONST_WEAPON_ID_PISTOL_H1                                7435
#define CONST_WEAPON_ID_PISTOL_SN7                               7418
#define CONST_WEAPON_ID_PISTOL_SPARROW                           7433
#define CONST_WEAPON_ID_TURRET_EXR                               7417
#define CONST_WEAPON_ID_TURRET_BASE                              7412
#define CONST_WEAPON_ID_TURRET_LIGHT                             7413
#define CONST_WEAPON_ID_TURRET_WALL                              7445
#define CONST_WEAPON_ID_REPAIR_TOOL                              7396
#define CONST_WEAPON_ID_REPAIR_TOOL_SD                           7436
#define CONST_WEAPON_ID_RIFLE_ASSAULT                            7385
#define CONST_WEAPON_ID_RIFLE_ASSAULT_LIGHT                      7438
#define CONST_WEAPON_ID_RIFLE_ASSAULT_S22                        7424
#define CONST_WEAPON_ID_RIFLE_ASSAULT_X1                         7458
#define CONST_WEAPON_ID_RIFLE_PHASE                              7395
#define CONST_WEAPON_ID_RIFLE_SNIPER                             7400
#define CONST_WEAPON_ID_SMG_NJ4                                  7441
#define CONST_WEAPON_ID_SMG_RHINO                                7397
#define CONST_WEAPON_ID_SMG_TCN4                                 7443
#define CONST_WEAPON_ID_SHOTGUN                                  7399
#define CONST_WEAPON_ID_SHOTGUN_ARX                              7454
#define CONST_WEAPON_ID_SHOTGUN_AUTO                             7449
#define CONST_WEAPON_ID_SHOTGUN_SAWED_OFF                        7427
#define CONST_WEAPON_ID_SPINFUSOR                                7401
#define CONST_WEAPON_ID_SPINFUSOR_D                              7446
#define CONST_WEAPON_ID_SPINFUSOR_HEAVY                          7448
#define CONST_WEAPON_ID_SPINFUSOR_LIGHT                          7422
#define CONST_WEAPON_ID_SPINFUSOR_TOSS                           7459
#define CONST_WEAPON_ID_CALLIN_TACTICALSTRIKE                    7609
#define CONST_WEAPON_ID_CALLIN_INVENTORYDROP                     7610
#define CONST_WEAPON_ID_CALLIN_ORBITALSTRIKE                     7611
#define CONST_WEAPON_ID_TCNG                                     7736
#define CONST_WEAPON_ID_FALLING                                  7815
#define CONST_WEAPON_ID_HITWALL                                  7816
#define CONST_WEAPON_ID_RANOVER                                  7817
#define CONST_WEAPON_ID_THUMPER                                  7461
#define CONST_WEAPON_ID_THUMPER_D                                7462
#define CONST_WEAPON_ID_STEALTHLIGHTSPINFUSOR                    7902
#define CONST_WEAPON_ID_GRENADE_T5                               7914
#define CONST_WEAPON_ID_PROXIMITY_GRENADE                        8222
#define CONST_WEAPON_ID_INFILTRATORBLANK                         8230
#define CONST_WEAPON_ID_ACCURIZEDSHOTGUN                         8239
#define CONST_WEAPON_ID_MINE_ARMOREDCLAYMORE                     8240
#define CONST_WEAPON_ID_BUCKLER                                  8242
#define CONST_WEAPON_ID_IMPACTBOMBLETS                           8244
#define CONST_WEAPON_ID_LIGHTTWINFUSOR                           8245
#define CONST_WEAPON_ID_LR1MORTAR                                8246
#define CONST_WEAPON_ID_MIRV_GRENADE                             8247
#define CONST_WEAPON_ID_GRENADE_NINJASMOKE                       8248
#define CONST_WEAPON_ID_NJ5SMG                                   8249
#define CONST_WEAPON_ID_PLASMA_CANNON                            8250
#define CONST_WEAPON_ID_PLASMA_GUN                               8251
#define CONST_WEAPON_ID_REMOTE_ARX_BUSTER                        8252
#define CONST_WEAPON_ID_ROCKETLAUNCHER                           8253
#define CONST_WEAPON_ID_SAP20                                    8254
#define CONST_WEAPON_ID_THROWINGKNIVES                           8256
#define CONST_WEAPON_ID_TWINFUSOR                                8257
#define CONST_WEAPON_ID_HEAVYTWINFUSOR                           8656
#define CONST_WEAPON_ID_SPIKELAUNCHER                            8357
#define CONST_WEAPON_ID_TARGETINGBEACON                          8358
#define CONST_ITEM_PACK_AMMO                                     7821
#define CONST_ITEM_PACK_BLINK                                    7822
#define CONST_ITEM_PACK_DAMAGE                                   7823
#define CONST_ITEM_PACK_ENERGY_SOLDIER                           7824
#define CONST_ITEM_PACK_ENERGY_JUGGERNAUT                        7901
#define CONST_ITEM_PACK_ENERGY_BRUTE                             7830
#define CONST_ITEM_PACK_RECHARGE_PATHFINDER                      7825
#define CONST_ITEM_PACK_RECHARGE_SENTINEL                        7900
#define CONST_ITEM_PACK_HEAVYSHIELD                              7826
#define CONST_ITEM_PACK_JAMMER                                   7827
#define CONST_ITEM_PACK_LIGHTREGEN                               7828
#define CONST_ITEM_PACK_POWERPOOL                                7829
#define CONST_ITEM_PACK_MINORENERGY                              7830
#define CONST_ITEM_PACK_REGEN                                    7831
#define CONST_ITEM_PACK_SHIELD                                   7832
#define CONST_ITEM_PACK_STEALTH                                  7833
#define CONST_ITEM_PACK_UTILITY_SOLDIER                          8223
#define CONST_ITEM_PACK_HIGHSPEEDSTEALTH                         8243
#define CONST_ITEM_PACK_SURVIVAL                                 8255
#define CONST_WEAPON_BASE_UNKNOWN                                0
#define CONST_WEAPON_BASE_SPINFUSOR                              1
#define CONST_WEAPON_BASE_PISTOL                                 2
#define CONST_WEAPON_BASE_SNIPERRIFLE                            3
#define CONST_WEAPON_BASE_ASSAULTRIFLE                           4
#define CONST_WEAPON_BASE_GRENADE                                5
#define CONST_WEAPON_BASE_REPAIRTOOL                             6
#define CONST_WEAPON_BASE_CALLIN                                 7
#define CONST_WEAPON_BASE_SMG                                    8
#define CONST_WEAPON_BASE_SHOTGUN                                9
#define CONST_WEAPON_BASE_VEHICLE                                10
#define CONST_WEAPON_TYPE_UNKNOWN                                0
#define CONST_WEAPON_TYPE_PROJECTILE                             1
#define CONST_WEAPON_TYPE_INSTANTFIRE                            2
#define CONST_ITEM_PERK_BOUNTYHUNTER                             8153
#define CONST_ITEM_PERK_CLOSECOMBAT                              8156
#define CONST_ITEM_PERK_DETERMINATION                            8157
#define CONST_ITEM_PERK_EGOCENTRIC                               7917
#define CONST_ITEM_PERK_LOOTER                                   8158
#define CONST_ITEM_PERK_MECHANIC                                 8170
#define CONST_ITEM_PERK_PILOT                                    8159
#define CONST_ITEM_PERK_POTENTIALENERGY                          8160
#define CONST_ITEM_PERK_QUICKDRAW                                8161
#define CONST_ITEM_PERK_REACH                                    7916
#define CONST_ITEM_PERK_SAFEFALL                                 8162
#define CONST_ITEM_PERK_SAFETYTHIRD                              8163
#define CONST_ITEM_PERK_STEALTHY                                 8164
#define CONST_ITEM_PERK_SUPERCAPACITOR                           8165
#define CONST_ITEM_PERK_SUPERHEAVY                               8166
#define CONST_ITEM_PERK_SURVIVALIST                              8167
#define CONST_ITEM_PERK_ULTRACAPACITOR                           8168
#define CONST_ITEM_PERK_WHEELDEAL                                8169
#define CONST_ITEM_PERK_RAGE                                     8232
#define CONST_ITEM_PERK_SONICPUNCH                               8231
#define CONST_ITEM_PERK_LIGHTWEIGHT                              8646
#define CONST_ITEM_SKILL_PATHFINDER_PRIMARY_AMMO_I               7508
#define CONST_ITEM_SKILL_PATHFINDER_PRIMARY_AMMO_II              7637
#define CONST_ITEM_SKILL_PATHFINDER_PRIMARY_ANTIARMOR            7509
#define CONST_ITEM_SKILL_PATHFINDER_SECONDARY_AMMO_I             7638
#define CONST_ITEM_SKILL_PATHFINDER_SECONDARY_AMMO_II            7640
#define CONST_ITEM_SKILL_PATHFINDER_SECONDARY_CLIP               7639
#define CONST_ITEM_SKILL_PATHFINDER_SECONDARY_FALLOFF            7641
#define CONST_ITEM_SKILL_PATHFINDER_GRENADE_AMMO                 7504
#define CONST_ITEM_SKILL_PATHFINDER_GRENADE_RADIUS               7505
#define CONST_ITEM_SKILL_PATHFINDER_HEALTH_POOL                  7636
#define CONST_ITEM_SKILL_PATHFINDER_HEALTH_REGEN_RATE            7507
#define CONST_ITEM_SKILL_PATHFINDER_HEALTH_REGEN_DELAY           7506
#define CONST_ITEM_SKILL_PATHFINDER_ENERGY_REGEN_I               7501
#define CONST_ITEM_SKILL_PATHFINDER_ENERGY_REGEN_II              7635
#define CONST_ITEM_SKILL_PATHFINDER_SPEED_I                      7502
#define CONST_ITEM_SKILL_PATHFINDER_SPEED_II                     7503
#define CONST_ITEM_SKILL_PATHFINDER_GROUND_SPEED                 7754
#define CONST_ITEM_SKILL_PATHFINDER_STOP_DISTANCE                7755
#define CONST_ITEM_SKILL_JUMPER_PRIMARY_AMMO_I                   7564
#define CONST_ITEM_SKILL_JUMPER_PRIMARY_AMMO_II                  7646
#define CONST_ITEM_SKILL_JUMPER_PRIMARY_ANTIARMOR                7645
#define CONST_ITEM_SKILL_JUMPER_SECONDARY_AMMO                   7647
#define CONST_ITEM_SKILL_JUMPER_SECONDARY_RELOAD                 7565
#define CONST_ITEM_SKILL_JUMPER_SECONDARY_FALLOFF                7648
#define CONST_ITEM_SKILL_JUMPER_GRENADE_AMMO                     7563
#define CONST_ITEM_SKILL_JUMPER_PACK_COST_I                      7558
#define CONST_ITEM_SKILL_JUMPER_PACK_COST_II                     7643
#define CONST_ITEM_SKILL_JUMPER_PACK_POTENCY                     7560
#define CONST_ITEM_SKILL_JUMPER_HEALTH_POOL                      7562
#define CONST_ITEM_SKILL_JUMPER_HEALTH_REGEN_RATE                7644
#define CONST_ITEM_SKILL_JUMPER_HEALTH_REGEN_DELAY               7561
#define CONST_ITEM_SKILL_JUMPER_ENERGY_POOL                      7642
#define CONST_ITEM_SKILL_JUMPER_CONTROL                          7557
#define CONST_ITEM_SKILL_JUMPER_SPEED                            7559
#define CONST_ITEM_SKILL_JUMPER_GROUND_SPEED                     7756
#define CONST_ITEM_SKILL_JUMPER_STOP_DISTANCE                    7757
#define CONST_ITEM_SKILL_SOLDIER_PRIMARY_AMMO_I                  7551
#define CONST_ITEM_SKILL_SOLDIER_PRIMARY_AMMO_II                 7667
#define CONST_ITEM_SKILL_SOLDIER_PRIMARY_ANTIARMOR               7552
#define CONST_ITEM_SKILL_SOLDIER_SECONDARY_AMMO                  7670
#define CONST_ITEM_SKILL_SOLDIER_SECONDARY_CLIP                  7671
#define CONST_ITEM_SKILL_SOLDIER_SECONDARY_RELOAD                7556
#define CONST_ITEM_SKILL_SOLDIER_GRENADE_AMMO                    7540
#define CONST_ITEM_SKILL_SOLDIER_HEALTH_POOL_I                   7555
#define CONST_ITEM_SKILL_SOLDIER_HEALTH_POOL_II                  7668
#define CONST_ITEM_SKILL_SOLDIER_HEALTH_REGEN_RATE               7669
#define CONST_ITEM_SKILL_SOLDIER_HEALTH_REGEN_DELAY              7554
#define CONST_ITEM_SKILL_SOLDIER_ENERGY_POOL_I                   7541
#define CONST_ITEM_SKILL_SOLDIER_ENERGY_POOL_II                  7665
#define CONST_ITEM_SKILL_SOLDIER_CONTROL                         7664
#define CONST_ITEM_SKILL_SOLDIER_SPEED_I                         7548
#define CONST_ITEM_SKILL_SOLDIER_SPEED_II                        7666
#define CONST_ITEM_SKILL_SOLDIER_GROUND_SPEED                    7759
#define CONST_ITEM_SKILL_SOLDIER_STOP_DISTANCE                   7760
#define CONST_ITEM_SKILL_SOLDIER_WEAPON_SWITCH                   7761
#define CONST_ITEM_SKILL_JUGGERNAUGHT_PRIMARY_AMMO_I             7568
#define CONST_ITEM_SKILL_JUGGERNAUGHT_PRIMARY_AMMO_II            7658
#define CONST_ITEM_SKILL_JUGGERNAUGHT_PRIMARY_ANTIARMOR          7569
#define CONST_ITEM_SKILL_JUGGERNAUGHT_SECONDARY_AMMO_I           7573
#define CONST_ITEM_SKILL_JUGGERNAUGHT_SECONDARY_AMMO_II          7660
#define CONST_ITEM_SKILL_JUGGERNAUGHT_SECONDARY_ANTIARMOR        7574
#define CONST_ITEM_SKILL_JUGGERNAUGHT_GRENADE_AMMO_I             7566
#define CONST_ITEM_SKILL_JUGGERNAUGHT_GRENADE_AMMO_II            7663
#define CONST_ITEM_SKILL_JUGGERNAUGHT_GRENADE_RADIUS             7662
#define CONST_ITEM_SKILL_JUGGERNAUGHT_HEALTH_POOL_I              7576
#define CONST_ITEM_SKILL_JUGGERNAUGHT_HEALTH_POOL_II             7661
#define CONST_ITEM_SKILL_JUGGERNAUGHT_ENERGY_POOL_I              7572
#define CONST_ITEM_SKILL_JUGGERNAUGHT_ENERGY_POOL_II             7659
#define CONST_ITEM_SKILL_JUGGERNAUGHT_HEALTH_REGEN_DELAY         7575
#define CONST_ITEM_SKILL_JUGGERNAUGHT_CONTROL                    7657
#define CONST_ITEM_SKILL_JUGGERNAUGHT_SPEED                      7570
#define CONST_ITEM_SKILL_JUGGERNAUGHT_GROUND_SPEED               7770
#define CONST_ITEM_SKILL_JUGGERNAUGHT_WEAPON_SWITCH              7771
#define CONST_ITEM_SKILL_TECHNICIAN_PRIMARY_AMMO                 7685
#define CONST_ITEM_SKILL_TECHNICIAN_PRIMARY_RELOAD               7686
#define CONST_ITEM_SKILL_TECHNICIAN_REPAIR_RATE_I                7519
#define CONST_ITEM_SKILL_TECHNICIAN_REPAIR_RATE_II               7681
#define CONST_ITEM_SKILL_TECHNICIAN_GRENADE_AMMO_I               7518
#define CONST_ITEM_SKILL_TECHNICIAN_GRENADE_AMMO_II              7687
#define CONST_ITEM_SKILL_TECHNICIAN_DEPLOY_ACQUIRE               7512
#define CONST_ITEM_SKILL_TECHNICIAN_DEPLOY_LIMIT                 7513
#define CONST_ITEM_SKILL_TECHNICIAN_DEPLOY_ANTIARMOR             7514
#define CONST_ITEM_SKILL_TECHNICIAN_HEALTH_POOL_I                7520
#define CONST_ITEM_SKILL_TECHNICIAN_HEALTH_POOL_II               7684
#define CONST_ITEM_SKILL_TECHNICIAN_HEALTH_REGEN_DELAY           7516
#define CONST_ITEM_SKILL_TECHNICIAN_ENERGY_POOL                  7515
#define CONST_ITEM_SKILL_TECHNICIAN_CONTROL                      7517
#define CONST_ITEM_SKILL_TECHNICIAN_SPEED_I                      7682
#define CONST_ITEM_SKILL_TECHNICIAN_SPEED_II                     7683
#define CONST_ITEM_SKILL_TECHNICIAN_GROUND_SPEED                 7765
#define CONST_ITEM_SKILL_TECHNICIAN_STOP_DISTANCE                7766
#define CONST_ITEM_SKILL_TECHNICIAN_WEAPON_SWITCH                7767
#define CONST_ITEM_SKILL_SENTINEL_PRIMARY_AMMO_I                 7528
#define CONST_ITEM_SKILL_SENTINEL_PRIMARY_AMMO_II                7655
#define CONST_ITEM_SKILL_SENTINEL_PRIMARY_CLIP                   7654
#define CONST_ITEM_SKILL_SENTINEL_PRIMARY_FALLOFF                7529
#define CONST_ITEM_SKILL_SENTINEL_SECONDARY_AMMO                 7651
#define CONST_ITEM_SKILL_SENTINEL_SECONDARY_CLIP                 7652
#define CONST_ITEM_SKILL_SENTINEL_GRENADE_AMMO                   7527
#define CONST_ITEM_SKILL_SENTINEL_GRENADE_RADIUS                 7656
#define CONST_ITEM_SKILL_SENTINEL_DEPLOY_HEALTH                  7649
#define CONST_ITEM_SKILL_SENTINEL_DEPLOY_RADIUS_I                7521
#define CONST_ITEM_SKILL_SENTINEL_DEPLOY_RADIUS_II               7650
#define CONST_ITEM_SKILL_SENTINEL_HEALTH_REGEN_RATE              7526
#define CONST_ITEM_SKILL_SENTINEL_HEALTH_REGEN_DELAY             7525
#define CONST_ITEM_SKILL_SENTINEL_ENERGY_POOL_I                  7523
#define CONST_ITEM_SKILL_SENTINEL_ENERGY_POOL_II                 7653
#define CONST_ITEM_SKILL_SENTINEL_SPEED                          7524
#define CONST_ITEM_SKILL_SENTINEL_WEAPON_SWITCH                  7758
#define CONST_ITEM_SKILL_RANGER_PRIMARY_AMMO                     7679
#define CONST_ITEM_SKILL_RANGER_PRIMARY_CLIP                     7680
#define CONST_ITEM_SKILL_RANGER_PRIMARY_RELOAD                   7582
#define CONST_ITEM_SKILL_RANGER_SECONDARY_AMMO_I                 7581
#define CONST_ITEM_SKILL_RANGER_SECONDARY_AMMO_II                7675
#define CONST_ITEM_SKILL_RANGER_SECONDARY_ANTIARMOR              7674
#define CONST_ITEM_SKILL_RANGER_GRENADE_AMMO_I                   7580
#define CONST_ITEM_SKILL_RANGER_GRENADE_AMMO_II                  7677
#define CONST_ITEM_SKILL_RANGER_PACK_COST                        7583
#define CONST_ITEM_SKILL_RANGER_HEALTH_POOL_I                    7585
#define CONST_ITEM_SKILL_RANGER_HEALTH_POOL_II                   7676
#define CONST_ITEM_SKILL_RANGER_HEALTH_REGEN_DELAY               7584
#define CONST_ITEM_SKILL_RANGER_ENERGY_POOL_I                    7577
#define CONST_ITEM_SKILL_RANGER_ENERGY_POOL_II                   7678
#define CONST_ITEM_SKILL_RANGER_CONTROL                          7672
#define CONST_ITEM_SKILL_RANGER_SPEED_I                          7578
#define CONST_ITEM_SKILL_RANGER_SPEED_II                         7673
#define CONST_ITEM_SKILL_RANGER_GROUND_SPEED                     7762
#define CONST_ITEM_SKILL_RANGER_STOP_DISTANCE                    7763
#define CONST_ITEM_SKILL_RANGER_WEAPON_SWITCH                    7764
#define CONST_ITEM_SKILL_DOOMBRINGER_PRIMARY_AMMO_I              7598
#define CONST_ITEM_SKILL_DOOMBRINGER_PRIMARY_AMMO_II             7632
#define CONST_ITEM_SKILL_DOOMBRINGER_PRIMARY_SPINUP              7597
#define CONST_ITEM_SKILL_DOOMBRINGER_GRENADE_AMMO_I              7590
#define CONST_ITEM_SKILL_DOOMBRINGER_GRENADE_AMMO_II             7634
#define CONST_ITEM_SKILL_DOOMBRINGER_DEPLOY_AMMO                 7591
#define CONST_ITEM_SKILL_DOOMBRINGER_GRENADE_ANTIARMOR           7633
#define CONST_ITEM_SKILL_DOOMBRINGER_DEPLOY_HEALTH_I             7592
#define CONST_ITEM_SKILL_DOOMBRINGER_DEPLOY_HEALTH_II            7629
#define CONST_ITEM_SKILL_DOOMBRINGER_HEALTH_POOL_I               7596
#define CONST_ITEM_SKILL_DOOMBRINGER_HEALTH_POOL_II              7631
#define CONST_ITEM_SKILL_DOOMBRINGER_HEALTH_REGEN_DELAY          7595
#define CONST_ITEM_SKILL_DOOMBRINGER_ENERGY_POOL                 7628
#define CONST_ITEM_SKILL_DOOMBRINGER_CONTROL                     7594
#define CONST_ITEM_SKILL_DOOMBRINGER_SPEED_I                     7593
#define CONST_ITEM_SKILL_DOOMBRINGER_SPEED_II                    7630
#define CONST_ITEM_SKILL_DOOMBRINGER_GROUND_SPEED                7772
#define CONST_ITEM_SKILL_DOOMBRINGER_STOP_DISTANCE               7773
#define CONST_ITEM_SKILL_DOOMBRINGER_WEAPON_SWITCH               7774
#define CONST_ITEM_SKILL_INFILTRATOR_PRIMARY_AMMO_I              7612
#define CONST_ITEM_SKILL_INFILTRATOR_PRIMARY_AMMO_II             7818
#define CONST_ITEM_SKILL_INFILTRATOR_PRIMARY_RELOAD              7614
#define CONST_ITEM_SKILL_INFILTRATOR_PRIMARY_FALLOFF             7613
#define CONST_ITEM_SKILL_INFILTRATOR_SECONDARY_AMMO              7623
#define CONST_ITEM_SKILL_INFILTRATOR_SECONDARY_CLIP              7625
#define CONST_ITEM_SKILL_INFILTRATOR_SECONDARY_RELOAD            7624
#define CONST_ITEM_SKILL_INFILTRATOR_GRENADE_AMMO_I              7615
#define CONST_ITEM_SKILL_INFILTRATOR_GRENADE_AMMO_II             7618
#define CONST_ITEM_SKILL_INFILTRATOR_GRENADE_RADIUS              7617
#define CONST_ITEM_SKILL_INFILTRATOR_GRENADE_ANTIARMOR           7616
#define CONST_ITEM_SKILL_INFILTRATOR_PACK_COST_I                 7620
#define CONST_ITEM_SKILL_INFILTRATOR_PACK_COST_II                7622
#define CONST_ITEM_SKILL_INFILTRATOR_PACK_POTENCY                7621
#define CONST_ITEM_SKILL_INFILTRATOR_HEALTH_REGEN_RATE           7627
#define CONST_ITEM_SKILL_INFILTRATOR_HEALTH_REGEN_DELAY          7626
#define CONST_ITEM_SKILL_INFILTRATOR_ENERGY_POOL                 7619
#define CONST_ITEM_SKILL_RAIDER_PRIMARY_AMMO                     7688
#define CONST_ITEM_SKILL_RAIDER_PRIMARY_RELOAD                   7690
#define CONST_ITEM_SKILL_RAIDER_PRIMARY_FALLOFF                  7689
#define CONST_ITEM_SKILL_RAIDER_SECONDARY_AMMO                   7691
#define CONST_ITEM_SKILL_RAIDER_SECONDARY_CLIP                   7693
#define CONST_ITEM_SKILL_RAIDER_SECONDARY_ANTIARMOR              7692
#define CONST_ITEM_SKILL_RAIDER_GRENADE_AMMO                     7694
#define CONST_ITEM_SKILL_RAIDER_GRENADE_EFFECT                   7695
#define CONST_ITEM_SKILL_RAIDER_GRENADE_RADIUS                   7696
#define CONST_ITEM_SKILL_RAIDER_PACK_COST_I                      7700
#define CONST_ITEM_SKILL_RAIDER_PACK_COST_II                     7703
#define CONST_ITEM_SKILL_RAIDER_PACK_POTENCY                     7701
#define CONST_ITEM_SKILL_RAIDER_HEALTH_POOL_I                    7698
#define CONST_ITEM_SKILL_RAIDER_HEALTH_POOL_II                   7699
#define CONST_ITEM_SKILL_RAIDER_HEALTH_REGEN_DELAY               7697
#define CONST_ITEM_SKILL_RAIDER_ENERGY_POOL                      7702
#define CONST_ITEM_SKILL_BRUTE_ENERGY_POOL                       7723
#define CONST_ITEM_SKILL_BRUTE_GRENADE_AMMO                      7720
#define CONST_ITEM_SKILL_BRUTE_GRENADE_DURATION                  7721
#define CONST_ITEM_SKILL_BRUTE_GRENADE_RADIUS                    7722
#define CONST_ITEM_SKILL_BRUTE_HEALTH_POOL_I                     7729
#define CONST_ITEM_SKILL_BRUTE_HEALTH_POOL_II                    7732
#define CONST_ITEM_SKILL_BRUTE_HEALTH_REGEN_DELAY                7730
#define CONST_ITEM_SKILL_BRUTE_HEALTH_REGEN_RATE                 7731
#define CONST_ITEM_SKILL_BRUTE_PRIMARY_AMMO_I                    7726
#define CONST_ITEM_SKILL_BRUTE_PRIMARY_AMMO_II                   7728
#define CONST_ITEM_SKILL_BRUTE_PRIMARY_ANTIARMOR                 7727
#define CONST_ITEM_SKILL_BRUTE_SECONARY_AMMO                     7733
#define CONST_ITEM_SKILL_BRUTE_SECONDARY_CLIP                    7735
#define CONST_ITEM_SKILL_BRUTE_SECONDARY_RELOAD                  7734
#define CONST_ITEM_SKILL_BRUTE_CONTROL                           7725
#define CONST_ITEM_SKILL_BRUTE_SPEED                             7724
#define CONST_ITEM_SKILL_BRUTE_GROUND_SPEED                      7775
#define CONST_ITEM_SKILL_BRUTE_WEAPON_SWITCH                     7776
#define CONST_ITEM_SKILL_SCRAMBLER_ENERGY_POOL                   7707
#define CONST_ITEM_SKILL_SCRAMBLER_GRENADE_AMMO                  7704
#define CONST_ITEM_SKILL_SCRAMBLER_GRENADE_DURATION              7706
#define CONST_ITEM_SKILL_SCRAMBLER_GRENADE_RADIUS                7705
#define CONST_ITEM_SKILL_SCRAMBLER_HEALTH_POOL_I                 7714
#define CONST_ITEM_SKILL_SCRAMBLER_HEALTH_POOL_II                7715
#define CONST_ITEM_SKILL_SCRAMBLER_HEALTH_REGEN_DELAY            7713
#define CONST_ITEM_SKILL_SCRAMBLER_PACK_COST_I                   7716
#define CONST_ITEM_SKILL_SCRAMBLER_PACK_COST_II                  7718
#define CONST_ITEM_SKILL_SCRAMBLER_PACK_EFFECTIVENESS_I          7717
#define CONST_ITEM_SKILL_SCRAMBLER_PACK_EFFECTIVENESS_II         7719
#define CONST_ITEM_SKILL_SCRAMBLER_PRIMARY_AMMO_I                7710
#define CONST_ITEM_SKILL_SCRAMBLER_PRIMARY_AMMO_II               7712
#define CONST_ITEM_SKILL_SCRAMBLER_PRIMARY_ANTIARMOR             7711
#define CONST_ITEM_SKILL_SCRAMBLER_CONTROL                       7709
#define CONST_ITEM_SKILL_SCRAMBLER_SPEED                         7708
#define CONST_ITEM_SKILL_SCRAMBLER_GROUND_SPEED                  7768
#define CONST_ITEM_SKILL_SCRAMBLER_WEAPON_SWITCH                 7769
#define CONST_ITEM_SKILL_WRAITH_ENERGY_POOL                      7790
#define CONST_ITEM_SKILL_WRAITH_ENERGY_REGEN_I                   7781
#define CONST_ITEM_SKILL_WRAITH_ENERGY_REGEN_II                  7783
#define CONST_ITEM_SKILL_WRAITH_GRENADE_AMMO                     7788
#define CONST_ITEM_SKILL_WRAITH_GRENADE_RADIUS                   7789
#define CONST_ITEM_SKILL_WRAITH_GROUND_SPEED                     7782
#define CONST_ITEM_SKILL_WRAITH_HEALTH_REGEN_DELAY               7791
#define CONST_ITEM_SKILL_WRAITH_HEALTH_REGEN_RATE                7792
#define CONST_ITEM_SKILL_WRAITH_PRIMARY_AMMO_I                   7793
#define CONST_ITEM_SKILL_WRAITH_PRIMARY_AMMO_II                  7796
#define CONST_ITEM_SKILL_WRAITH_PRIMARY_CLIP                     7795
#define CONST_ITEM_SKILL_WRAITH_PRIMARY_ENERGY_COST              7794
#define CONST_ITEM_SKILL_WRAITH_SECONDARY_AMMO                   7784
#define CONST_ITEM_SKILL_WRAITH_SECONDARY_CLIP_I                 7785
#define CONST_ITEM_SKILL_WRAITH_SECONDARY_CLIP_II                7786
#define CONST_ITEM_SKILL_WRAITH_WEAPON_SWITCH                    7787
#define CONST_TR_MAX_CALLINS                                     3
#define CONST_PROPERTY_CALLIN_ORBITALSTRIKE                      10241
#define CONST_PROPERTY_CALLIN_TACTICALSTRIKE                     10201
#define CONST_PROPERTY_CALLIN_SUPPORTINVENTORY                   10234
#define CONST_ITEM_SKIN_PATHFINDER                               7834
#define CONST_ITEM_SKIN_PATHFINDER_MERC                          8326
#define CONST_ITEM_SKIN_INFILTRATOR                              7835
#define CONST_ITEM_SKIN_INFILTRATOR_ASSASSIN                     8337
#define CONST_ITEM_SKIN_INFILTRATOR_MERC                         8336
#define CONST_ITEM_SKIN_SENTINEL                                 8327
#define CONST_ITEM_SKIN_SENTINEL_MERC                            8665
#define CONST_ITEM_SKIN_SOLDIER                                  8328
#define CONST_ITEM_SKIN_TECHNICIAN                               8329
#define CONST_ITEM_SKIN_TECHNICIAN_MERC                          8731
#define CONST_ITEM_SKIN_RAIDER                                   8330
#define CONST_ITEM_SKIN_RAIDER_GRIEVER                           8351
#define CONST_ITEM_SKIN_RAIDER_MERC                              8352
#define CONST_ITEM_SKIN_JUGGERNAUT                               8331
#define CONST_ITEM_SKIN_DOOMBRINGER                              8332
#define CONST_ITEM_SKIN_BRUTE                                    8333
#define CONST_ITEM_SKIN_BRUTE_MERC                               8663
#define CONST_ITEM_VOICE_LIGHT_STANDARD                          7903
#define CONST_ITEM_VOICE_MEDIUM_STANDARD                         7904
#define CONST_ITEM_VOICE_HEAVY_STANDARD                          7905
#define CONST_ITEM_ARMOR_MOD_PATHFINDER                          7836
#define CONST_ITEM_ARMOR_MOD_SENTINEL                            7837
#define CONST_ITEM_ARMOR_MOD_INFILTRATOR                         7838
#define CONST_ITEM_ARMOR_MOD_SOLDIER                             7839
#define CONST_ITEM_ARMOR_MOD_TECHNICIAN                          7840
#define CONST_ITEM_ARMOR_MOD_RAIDER                              7841
#define CONST_ITEM_ARMOR_MOD_JUGGERNAUT                          7842
#define CONST_ITEM_ARMOR_MOD_DOOMBRINGER                         7843
#define CONST_ITEM_ARMOR_MOD_BRUTE                               7844
#define CONST_WEAPON_ID_ARX_BUSTER_MKD                           8391
#define CONST_WEAPON_ID_CHAINGUN_MKD                             8392
#define CONST_WEAPON_ID_GRENADE_MKD                              8393
#define CONST_WEAPON_ID_GRENADE_AP_HEAVY_MKD                     8394
#define CONST_WEAPON_ID_GRENADE_EMP_MKD                          8395
#define CONST_WEAPON_ID_GRENADE_NITRON_MKD                       8396
#define CONST_WEAPON_ID_GRENADE_SPIKE_MKD                        8397
#define CONST_WEAPON_ID_GRENADE_STICKY_MKD                       8398
#define CONST_WEAPON_ID_GRENADE_XL_MKD                           8399
#define CONST_WEAPON_ID_LAUNCHER_MORTAR_MKD                      8400
#define CONST_WEAPON_ID_LAUNCHER_SABER_MKD                       8401
#define CONST_WEAPON_ID_MINE_CLAYMORE_MKD                        8402
#define CONST_WEAPON_ID_PISTOL_NOVA_COLT_MKD                     8403
#define CONST_WEAPON_ID_PISTOL_SN7_MKD                           8404
#define CONST_WEAPON_ID_REPAIR_TOOL_SD_MKD                       8405
#define CONST_WEAPON_ID_RIFLE_ASSAULT_MKD                        8406
#define CONST_WEAPON_ID_RIFLE_SNIPER_MKD                         8407
#define CONST_WEAPON_ID_SMG_NJ4_MKD                              8408
#define CONST_WEAPON_ID_SMG_RHINO_MKD                            8409
#define CONST_WEAPON_ID_SMG_TCN4_MKD                             8410
#define CONST_WEAPON_ID_SHOTGUN_MKD                              8411
#define CONST_WEAPON_ID_SHOTGUN_AUTO_MKD                         8412
#define CONST_WEAPON_ID_SPINFUSOR_D_MKD                          8413
#define CONST_WEAPON_ID_SPINFUSOR_HEAVY_MKD                      8414
#define CONST_WEAPON_ID_SPINFUSOR_LIGHT_MKD                      8415
#define CONST_WEAPON_ID_TCNG_MKD                                 8416
#define CONST_WEAPON_ID_THUMPERD_MKD                             8417
#define CONST_WEAPON_ID_REPAIR_DEPLOYABLE                        8698
#define CONST_WEAPON_ID_SPINFUSOR_LIGHT_100X                     8696
#define CONST_WEAPON_ID_SPINFUSOR_100X                           8697
#define CONST_WEAPON_ID_TC24                                     8699
#define CONST_ITEM_UPGRADE_PATHFINDER_LIGHTSPINFUSOR_100X        8700
#define CONST_ITEM_UPGRADE_PATHFINDER_LIGHTSPINFUSOR_100X01      8701
#define CONST_ITEM_UPGRADE_PATHFINDER_LIGHTSPINFUSOR_100X02      8702
#define CONST_ITEM_UPGRADE_SOLDIER_SPINFUSOR_100X                8703
#define CONST_ITEM_UPGRADE_SOLDIER_SPINFUSOR_100X01              8704
#define CONST_ITEM_UPGRADE_SOLDIER_SPINFUSOR_100X02              8705
#define CONST_ITEM_UPGRADE_TECHNICIAN_REPAIR_DEPLOYABLE          8706
#define CONST_ITEM_UPGRADE_TECHNICIAN_REPAIR_DEPLOYABLE01        8707
#define CONST_ITEM_UPGRADE_TECHNICIAN_REPAIR_DEPLOYABLE02        8708
#define CONST_ITEM_UPGRADE_TECHNICIAN_TC24                       8709
#define CONST_ITEM_UPGRADE_TECHNICIAN_TC2401                     8710
#define CONST_ITEM_UPGRADE_TECHNICIAN_TC2402                     8711
#define CONST_ACTIVITY_PATHFINDER_PRIMARY_LIGHTSPINFUSOR_100X    265
#define CONST_ACTIVITY_TECHNICIAN_BELT_REPAIR_DEPLOYABLE         266
#define CONST_ACTIVITY_SOLDIER_PRIMARY_SPINFUSOR_100X            264
#define CONST_ACTIVITY_TECHNICIAN_PRIMARY_TC24                   267
#define CONST_ITEM_UPGRADE_PATHFINDER_LIGHTSPINFUSOR_MKD         8418
#define CONST_ITEM_UPGRADE_PATHFINDER_LIGHTSPINFUSOR_MKD01       8419
#define CONST_ITEM_UPGRADE_PATHFINDER_LIGHTSPINFUSOR_MKD02       8420
#define CONST_ITEM_UPGRADE_SENTINEL_BXT1SNIPERRIFLE_MKD          8421
#define CONST_ITEM_UPGRADE_SENTINEL_BXT1SNIPERRIFLE_MKD01        8422
#define CONST_ITEM_UPGRADE_SENTINEL_BXT1SNIPERRIFLE_MKD02        8423
#define CONST_ITEM_UPGRADE_SENTINEL_BXT1SNIPERRIFLE_MKD03        8424
#define CONST_ITEM_UPGRADE_INFILTRATOR_RHINOSMG_MKD              8425
#define CONST_ITEM_UPGRADE_INFILTRATOR_RHINOSMG_MKD01            8426
#define CONST_ITEM_UPGRADE_INFILTRATOR_RHINOSMG_MKD02            8427
#define CONST_ITEM_UPGRADE_INFILTRATOR_RHINOSMG_MKD03            8428
#define CONST_ITEM_UPGRADE_SOLDIER_ASSAULTRIFLE_MKD              8429
#define CONST_ITEM_UPGRADE_SOLDIER_ASSAULTRIFLE_MKD01            8430
#define CONST_ITEM_UPGRADE_SOLDIER_ASSAULTRIFLE_MKD02            8431
#define CONST_ITEM_UPGRADE_SOLDIER_ASSAULTRIFLE_MKD03            8432
#define CONST_ITEM_UPGRADE_TECHNICIAN_TCN4SMG_MKD                8433
#define CONST_ITEM_UPGRADE_TECHNICIAN_TCN4SMG_MKD01              8434
#define CONST_ITEM_UPGRADE_TECHNICIAN_TCN4SMG_MKD02              8435
#define CONST_ITEM_UPGRADE_TECHNICIAN_TCN4SMG_MKD03              8436
#define CONST_ITEM_UPGRADE_RAIDER_ARXBUSTER_MKD                  8437
#define CONST_ITEM_UPGRADE_RAIDER_ARXBUSTER_MKD01                8438
#define CONST_ITEM_UPGRADE_RAIDER_ARXBUSTER_MKD02                8439
#define CONST_ITEM_UPGRADE_JUGGERNAUT_FUSIONMORTAR_MKD           8440
#define CONST_ITEM_UPGRADE_JUGGERNAUT_FUSIONMORTAR_MKD01         8441
#define CONST_ITEM_UPGRADE_JUGGERNAUT_FUSIONMORTAR_MKD02         8442
#define CONST_ITEM_UPGRADE_DOOMBRINGER_CHAINGUN_MKD              8443
#define CONST_ITEM_UPGRADE_DOOMBRINGER_CHAINGUN_MKD01            8444
#define CONST_ITEM_UPGRADE_DOOMBRINGER_CHAINGUN_MKD02            8445
#define CONST_ITEM_UPGRADE_DOOMBRINGER_CHAINGUN_MKD03            8446
#define CONST_ITEM_UPGRADE_BRUTE_HEAVYSPINFUSOR_MKD              8447
#define CONST_ITEM_UPGRADE_BRUTE_HEAVYSPINFUSOR_MKD01            8448
#define CONST_ITEM_UPGRADE_BRUTE_HEAVYSPINFUSOR_MKD02            8449
#define CONST_ITEM_UPGRADE_JUGGERNAUT_HEAVYTWINFUSOR             8657
#define CONST_ITEM_UPGRADE_JUGGERNAUT_HEAVYTWINFUSOR01           8658
#define CONST_ITEM_UPGRADE_JUGGERNAUT_HEAVYTWINFUSOR02           8659
#define CONST_ITEM_UPGRADE_PATHFINDER_SHOTGUN_MKD                8450
#define CONST_ITEM_UPGRADE_PATHFINDER_SHOTGUN_MKD01              8451
#define CONST_ITEM_UPGRADE_PATHFINDER_SHOTGUN_MKD02              8452
#define CONST_ITEM_UPGRADE_SENTINEL_NOVABLASTER_MKD              8453
#define CONST_ITEM_UPGRADE_SENTINEL_NOVABLASTER_MKD01            8454
#define CONST_ITEM_UPGRADE_SENTINEL_NOVABLASTER_MKD02            8455
#define CONST_ITEM_UPGRADE_INFILTRATOR_SN7PISTOL_MKD             8456
#define CONST_ITEM_UPGRADE_INFILTRATOR_SN7PISTOL_MKD01           8457
#define CONST_ITEM_UPGRADE_INFILTRATOR_SN7PISTOL_MKD02           8458
#define CONST_ITEM_UPGRADE_SOLDIER_THUMPERD_MKD                  8459
#define CONST_ITEM_UPGRADE_SOLDIER_THUMPERD_MKD01                8460
#define CONST_ITEM_UPGRADE_SOLDIER_THUMPERD_MKD02                8461
#define CONST_ITEM_UPGRADE_TECHNICIAN_REPAIRTOOLSD_MKD           8462
#define CONST_ITEM_UPGRADE_TECHNICIAN_REPAIRTOOLSD_MKD01         8463
#define CONST_ITEM_UPGRADE_TECHNICIAN_REPAIRTOOLSD_MKD02         8464
#define CONST_ITEM_UPGRADE_RAIDER_NJ4SMG_MKD                     8465
#define CONST_ITEM_UPGRADE_RAIDER_NJ4SMG_MKD01                   8466
#define CONST_ITEM_UPGRADE_RAIDER_NJ4SMG_MKD02                   8467
#define CONST_ITEM_UPGRADE_RAIDER_NJ4SMG_MKD03                   8468
#define CONST_ITEM_UPGRADE_JUGGERNAUT_SPINFUSORD_MKD             8469
#define CONST_ITEM_UPGRADE_JUGGERNAUT_SPINFUSORD_MKD01           8470
#define CONST_ITEM_UPGRADE_JUGGERNAUT_SPINFUSORD_MKD02           8471
#define CONST_ITEM_UPGRADE_DOOMBRINGER_SABERLAUNCHER_MKD         8472
#define CONST_ITEM_UPGRADE_DOOMBRINGER_SABERLAUNCHER_MKD01       8473
#define CONST_ITEM_UPGRADE_DOOMBRINGER_SABERLAUNCHER_MKD02       8474
#define CONST_ITEM_UPGRADE_BRUTE_AUTOSHOTGUN_MKD                 8475
#define CONST_ITEM_UPGRADE_BRUTE_AUTOSHOTGUN_MKD01               8476
#define CONST_ITEM_UPGRADE_BRUTE_AUTOSHOTGUN_MKD02               8477
#define CONST_ITEM_UPGRADE_BRUTE_AUTOSHOTGUN_MKD03               8478
#define CONST_ITEM_UPGRADE_PATHFINDER_IMPACTNITRON_MKD           8479
#define CONST_ITEM_UPGRADE_PATHFINDER_IMPACTNITRON_MKD01         8480
#define CONST_ITEM_UPGRADE_PATHFINDER_IMPACTNITRON_MKD02         8481
#define CONST_ITEM_UPGRADE_SENTINEL_CLAYMORE_MKD                 8482
#define CONST_ITEM_UPGRADE_SENTINEL_CLAYMORE_MKD01               8483
#define CONST_ITEM_UPGRADE_SENTINEL_CLAYMORE_MKD02               8484
#define CONST_ITEM_UPGRADE_INFILTRATOR_STICKYGRENADE_MKD         8486
#define CONST_ITEM_UPGRADE_INFILTRATOR_STICKYGRENADE_MKD01       8487
#define CONST_ITEM_UPGRADE_INFILTRATOR_STICKYGRENADE_MKD02       8488
#define CONST_ITEM_UPGRADE_INFILTRATOR_STICKYGRENADE_MKD03       8489
#define CONST_ITEM_UPGRADE_SOLDIER_FRAGGRENADEXL_MKD             8490
#define CONST_ITEM_UPGRADE_SOLDIER_FRAGGRENADEXL_MKD01           8491
#define CONST_ITEM_UPGRADE_SOLDIER_FRAGGRENADEXL_MKD02           8492
#define CONST_ITEM_UPGRADE_TECHNICIAN_TCNGGRENADE_MKD            8493
#define CONST_ITEM_UPGRADE_TECHNICIAN_TCNGGRENADE_MKD01          8494
#define CONST_ITEM_UPGRADE_TECHNICIAN_TCNGGRENADE_MKD02          8495
#define CONST_ITEM_UPGRADE_RAIDER_EMPGRENADE_MKD                 8496
#define CONST_ITEM_UPGRADE_RAIDER_EMPGRENADE_MKD01               8497
#define CONST_ITEM_UPGRADE_RAIDER_EMPGRENADE_MKD02               8498
#define CONST_ITEM_UPGRADE_JUGGERNAUT_HEAVYAPGRENADE_MKD         8499
#define CONST_ITEM_UPGRADE_JUGGERNAUT_HEAVYAPGRENADE_MKD01       8500
#define CONST_ITEM_UPGRADE_JUGGERNAUT_HEAVYAPGRENADE_MKD02       8501
#define CONST_ITEM_UPGRADE_DOOMBRINGER_GRENADE_MKD               8502
#define CONST_ITEM_UPGRADE_DOOMBRINGER_GRENADE_MKD01             8503
#define CONST_ITEM_UPGRADE_DOOMBRINGER_GRENADE_MKD02             8504
#define CONST_ITEM_UPGRADE_BRUTE_FRACTALGRENADE_MKD              8505
#define CONST_ITEM_UPGRADE_BRUTE_FRACTALGRENADE_MKD01            8506
#define CONST_ITEM_UPGRADE_BRUTE_FRACTALGRENADE_MKD02            8507
#define CONST_ITEM_UPGRADE_PATHFINDER_BOLTLAUNCHER               7850
#define CONST_ITEM_UPGRADE_PATHFINDER_BOLTLAUNCHER01             7851
#define CONST_ITEM_UPGRADE_PATHFINDER_BOLTLAUNCHER02             7852
#define CONST_ITEM_UPGRADE_PATHFINDER_LIGHTSPINFUSOR             7855
#define CONST_ITEM_UPGRADE_PATHFINDER_LIGHTSPINFUSOR01           7860
#define CONST_ITEM_UPGRADE_PATHFINDER_LIGHTSPINFUSOR02           7857
#define CONST_ITEM_UPGRADE_PATHFINDER_LIGHTTWINFUSOR             8277
#define CONST_ITEM_UPGRADE_PATHFINDER_LIGHTTWINFUSOR01           8278
#define CONST_ITEM_UPGRADE_PATHFINDER_LIGHTTWINFUSOR02           8279
#define CONST_ITEM_UPGRADE_SENTINEL_BXT1SNIPERRIFLE              7927
#define CONST_ITEM_UPGRADE_SENTINEL_BXT1SNIPERRIFLE01            7929
#define CONST_ITEM_UPGRADE_SENTINEL_BXT1SNIPERRIFLE02            7930
#define CONST_ITEM_UPGRADE_SENTINEL_BXT1SNIPERRIFLE03            7931
#define CONST_ITEM_UPGRADE_SENTINEL_PHASERIFLE                   7932
#define CONST_ITEM_UPGRADE_SENTINEL_PHASERIFLE01                 7933
#define CONST_ITEM_UPGRADE_SENTINEL_PHASERIFLE02                 7934
#define CONST_ITEM_UPGRADE_SENTINEL_PHASERIFLE03                 7935
#define CONST_ITEM_UPGRADE_SENTINEL_SAP20                        8305
#define CONST_ITEM_UPGRADE_SENTINEL_SAP2001                      8306
#define CONST_ITEM_UPGRADE_SENTINEL_SAP2002                      8307
#define CONST_ITEM_UPGRADE_SENTINEL_SAP2003                      8308
#define CONST_ITEM_UPGRADE_INFILTRATOR_RHINOSMG                  7960
#define CONST_ITEM_UPGRADE_INFILTRATOR_RHINOSMG01                7961
#define CONST_ITEM_UPGRADE_INFILTRATOR_RHINOSMG02                7962
#define CONST_ITEM_UPGRADE_INFILTRATOR_RHINOSMG03                7963
#define CONST_ITEM_UPGRADE_INFILTRATOR_STEALTHLIGHTSPINFUSOR     7964
#define CONST_ITEM_UPGRADE_INFILTRATOR_STEALTHLIGHTSPINFUSOR01   7965
#define CONST_ITEM_UPGRADE_INFILTRATOR_STEALTHLIGHTSPINFUSOR02   7966
#define CONST_ITEM_UPGRADE_INFILTRATOR_REMOTEARXBUSTER           8298
#define CONST_ITEM_UPGRADE_INFILTRATOR_REMOTEARXBUSTER01         8299
#define CONST_ITEM_UPGRADE_INFILTRATOR_REMOTEARXBUSTER02         8300
#define CONST_ITEM_UPGRADE_SOLDIER_ASSAULTRIFLE                  7985
#define CONST_ITEM_UPGRADE_SOLDIER_ASSAULTRIFLE01                7986
#define CONST_ITEM_UPGRADE_SOLDIER_ASSAULTRIFLE02                7987
#define CONST_ITEM_UPGRADE_SOLDIER_ASSAULTRIFLE03                7988
#define CONST_ITEM_UPGRADE_SOLDIER_SPINFUSOR                     7992
#define CONST_ITEM_UPGRADE_SOLDIER_SPINFUSOR01                   7993
#define CONST_ITEM_UPGRADE_SOLDIER_SPINFUSOR02                   7994
#define CONST_ITEM_UPGRADE_SOLDIER_TWINFUSOR                     8316
#define CONST_ITEM_UPGRADE_SOLDIER_TWINFUSOR01                   8317
#define CONST_ITEM_UPGRADE_SOLDIER_TWINFUSOR02                   8318
#define CONST_ITEM_UPGRADE_TECHNICIAN_TCN4SMG                    8012
#define CONST_ITEM_UPGRADE_TECHNICIAN_TCN4SMG01                  8013
#define CONST_ITEM_UPGRADE_TECHNICIAN_TCN4SMG02                  8014
#define CONST_ITEM_UPGRADE_TECHNICIAN_TCN4SMG03                  8015
#define CONST_ITEM_UPGRADE_TECHNICIAN_THUMPER                    8016
#define CONST_ITEM_UPGRADE_TECHNICIAN_THUMPER01                  8017
#define CONST_ITEM_UPGRADE_TECHNICIAN_THUMPER02                  8018
#define CONST_ITEM_UPGRADE_RAIDER_GRENADELAUNCHER                8045
#define CONST_ITEM_UPGRADE_RAIDER_GRENADELAUNCHER01              8046
#define CONST_ITEM_UPGRADE_RAIDER_GRENADELAUNCHER02              8047
#define CONST_ITEM_UPGRADE_RAIDER_ARXBUSTER                      8042
#define CONST_ITEM_UPGRADE_RAIDER_ARXBUSTER01                    8043
#define CONST_ITEM_UPGRADE_RAIDER_ARXBUSTER02                    8044
#define CONST_ITEM_UPGRADE_JUGGERNAUT_FUSIONMORTAR               8070
#define CONST_ITEM_UPGRADE_JUGGERNAUT_FUSIONMORTAR01             8071
#define CONST_ITEM_UPGRADE_JUGGERNAUT_FUSIONMORTAR02             8072
#define CONST_ITEM_UPGRADE_JUGGERNAUT_MIRVLAUNCHER               8073
#define CONST_ITEM_UPGRADE_JUGGERNAUT_MIRVLAUNCHER01             8074
#define CONST_ITEM_UPGRADE_JUGGERNAUT_MIRVLAUNCHER02             8075
#define CONST_ITEM_UPGRADE_JUGGERNAUT_LR1MORTAR                  8280
#define CONST_ITEM_UPGRADE_JUGGERNAUT_LR1MORTAR01                8281
#define CONST_ITEM_UPGRADE_JUGGERNAUT_LR1MORTAR02                8282
#define CONST_ITEM_UPGRADE_DOOMBRINGER_CHAINGUN                  8100
#define CONST_ITEM_UPGRADE_DOOMBRINGER_CHAINGUN01                8101
#define CONST_ITEM_UPGRADE_DOOMBRINGER_CHAINGUN02                8102
#define CONST_ITEM_UPGRADE_DOOMBRINGER_CHAINGUN03                8103
#define CONST_ITEM_UPGRADE_DOOMBRINGER_HEAVYBOLTLAUNCHER         8104
#define CONST_ITEM_UPGRADE_DOOMBRINGER_HEAVYBOLTLAUNCHER01       8105
#define CONST_ITEM_UPGRADE_DOOMBRINGER_HEAVYBOLTLAUNCHER02       8106
#define CONST_ITEM_UPGRADE_BRUTE_HEAVYSPINFUSOR                  8124
#define CONST_ITEM_UPGRADE_BRUTE_HEAVYSPINFUSOR01                8125
#define CONST_ITEM_UPGRADE_BRUTE_HEAVYSPINFUSOR02                8126
#define CONST_ITEM_UPGRADE_BRUTE_PLASMACANNON                    8292
#define CONST_ITEM_UPGRADE_BRUTE_PLASMACANNON01                  8293
#define CONST_ITEM_UPGRADE_BRUTE_PLASMACANNON02                  8294
#define CONST_ITEM_UPGRADE_BRUTE_SPIKELAUNCHER                   8386
#define CONST_ITEM_UPGRADE_BRUTE_SPIKELAUNCHER01                 8387
#define CONST_ITEM_UPGRADE_BRUTE_SPIKELAUNCHER02                 8388
#define CONST_ITEM_UPGRADE_PATHFINDER_SHOTGUN                    7861
#define CONST_ITEM_UPGRADE_PATHFINDER_SHOTGUN01                  7862
#define CONST_ITEM_UPGRADE_PATHFINDER_SHOTGUN02                  7863
#define CONST_ITEM_UPGRADE_PATHFINDER_LIGHTASSAULTRIFLE          7866
#define CONST_ITEM_UPGRADE_PATHFINDER_LIGHTASSAULTRIFLE01        7867
#define CONST_ITEM_UPGRADE_PATHFINDER_LIGHTASSAULTRIFLE02        7868
#define CONST_ITEM_UPGRADE_PATHFINDER_LIGHTASSAULTRIFLE03        7869
#define CONST_ITEM_UPGRADE_PATHFINDER_BUCKLER                    8265
#define CONST_ITEM_UPGRADE_PATHFINDER_BUCKLER01                  8266
#define CONST_ITEM_UPGRADE_PATHFINDER_BUCKLER02                  8267
#define CONST_ITEM_UPGRADE_SENTINEL_NOVABLASTER                  7936
#define CONST_ITEM_UPGRADE_SENTINEL_NOVABLASTER01                7937
#define CONST_ITEM_UPGRADE_SENTINEL_NOVABLASTER02                7938
#define CONST_ITEM_UPGRADE_SENTINEL_FALCONAUTOPISTOL             7939
#define CONST_ITEM_UPGRADE_SENTINEL_FALCONAUTOPISTOL01           7940
#define CONST_ITEM_UPGRADE_SENTINEL_FALCONAUTOPISTOL02           7941
#define CONST_ITEM_UPGRADE_SENTINEL_FALCONAUTOPISTOL03           7942
#define CONST_ITEM_UPGRADE_SENTINEL_ACCURIZEDSHOTGUN             8258
#define CONST_ITEM_UPGRADE_SENTINEL_ACCURIZEDSHOTGUN01           8259
#define CONST_ITEM_UPGRADE_SENTINEL_ACCURIZEDSHOTGUN02           8260
#define CONST_ITEM_UPGRADE_SENTINEL_ACCURIZEDSHOTGUN03           8261
#define CONST_ITEM_UPGRADE_INFILTRATOR_SN7PISTOL                 7967
#define CONST_ITEM_UPGRADE_INFILTRATOR_SN7PISTOL01               7968
#define CONST_ITEM_UPGRADE_INFILTRATOR_SN7PISTOL02               7969
#define CONST_ITEM_UPGRADE_INFILTRATOR_THROWINGKNIVES            8312
#define CONST_ITEM_UPGRADE_INFILTRATOR_THROWINGKNIVES01          8313
#define CONST_ITEM_UPGRADE_INFILTRATOR_THROWINGKNIVES02          8314
#define CONST_ITEM_UPGRADE_INFILTRATOR_THROWINGKNIVES03          8315
#define CONST_ITEM_UPGRADE_SOLDIER_EAGLEPISTOL                   7995
#define CONST_ITEM_UPGRADE_SOLDIER_EAGLEPISTOL01                 7996
#define CONST_ITEM_UPGRADE_SOLDIER_EAGLEPISTOL02                 7997
#define CONST_ITEM_UPGRADE_SOLDIER_THUMPERD                      7989
#define CONST_ITEM_UPGRADE_SOLDIER_THUMPERD01                    7990
#define CONST_ITEM_UPGRADE_SOLDIER_THUMPERD02                    7991
#define CONST_ITEM_UPGRADE_SOLDIER_PLASMAGUN                     8295
#define CONST_ITEM_UPGRADE_SOLDIER_PLASMAGUN01                   8296
#define CONST_ITEM_UPGRADE_SOLDIER_PLASMAGUN02                   8297
#define CONST_ITEM_UPGRADE_TECHNICIAN_REPAIRTOOLSD               8019
#define CONST_ITEM_UPGRADE_TECHNICIAN_REPAIRTOOLSD01             8020
#define CONST_ITEM_UPGRADE_TECHNICIAN_REPAIRTOOLSD02             8021
#define CONST_ITEM_UPGRADE_TECHNICIAN_SAWEDOFFSHOTGUN            8022
#define CONST_ITEM_UPGRADE_TECHNICIAN_SAWEDOFFSHOTGUN01          8023
#define CONST_ITEM_UPGRADE_TECHNICIAN_SAWEDOFFSHOTGUN02          8024
#define CONST_ITEM_UPGRADE_TECHNICIAN_SPARROWPISTOL              8025
#define CONST_ITEM_UPGRADE_TECHNICIAN_SPARROWPISTOL01            8026
#define CONST_ITEM_UPGRADE_TECHNICIAN_SPARROWPISTOL02            8027
#define CONST_ITEM_UPGRADE_RAIDER_NJ4SMG                         8048
#define CONST_ITEM_UPGRADE_RAIDER_NJ4SMG01                       8049
#define CONST_ITEM_UPGRADE_RAIDER_NJ4SMG02                       8050
#define CONST_ITEM_UPGRADE_RAIDER_NJ4SMG03                       8051
#define CONST_ITEM_UPGRADE_RAIDER_NJ5SMG                         8289
#define CONST_ITEM_UPGRADE_RAIDER_NJ5SMG01                       8290
#define CONST_ITEM_UPGRADE_RAIDER_NJ5SMG02                       8291
#define CONST_ITEM_UPGRADE_RAIDER_NJ5SMG03                       8304
#define CONST_ITEM_UPGRADE_JUGGERNAUT_SPINFUSORD                 8076
#define CONST_ITEM_UPGRADE_JUGGERNAUT_SPINFUSORD01               8077
#define CONST_ITEM_UPGRADE_JUGGERNAUT_SPINFUSORD02               8078
#define CONST_ITEM_UPGRADE_JUGGERNAUT_LMG                        8079
#define CONST_ITEM_UPGRADE_JUGGERNAUT_LMG01                      8080
#define CONST_ITEM_UPGRADE_JUGGERNAUT_LMG02                      8081
#define CONST_ITEM_UPGRADE_JUGGERNAUT_LMG03                      8082
#define CONST_ITEM_UPGRADE_DOOMBRINGER_SABERLAUNCHER             8107
#define CONST_ITEM_UPGRADE_DOOMBRINGER_SABERLAUNCHER01           8108
#define CONST_ITEM_UPGRADE_DOOMBRINGER_SABERLAUNCHER02           8109
#define CONST_ITEM_UPGRADE_DOOMBRINGER_ROCKETLAUNCHER            8301
#define CONST_ITEM_UPGRADE_DOOMBRINGER_ROCKETLAUNCHER01          8302
#define CONST_ITEM_UPGRADE_DOOMBRINGER_ROCKETLAUNCHER02          8303
#define CONST_ITEM_UPGRADE_BRUTE_AUTOSHOTGUN                     8127
#define CONST_ITEM_UPGRADE_BRUTE_AUTOSHOTGUN01                   8128
#define CONST_ITEM_UPGRADE_BRUTE_AUTOSHOTGUN02                   8129
#define CONST_ITEM_UPGRADE_BRUTE_AUTOSHOTGUN03                   8130
#define CONST_ITEM_UPGRADE_BRUTE_NOVACOLT                        8131
#define CONST_ITEM_UPGRADE_BRUTE_NOVACOLT01                      8132
#define CONST_ITEM_UPGRADE_BRUTE_NOVACOLT02                      8133
#define CONST_ITEM_UPGRADE_BRUTE_NOVACOLT03                      8134
#define CONST_ITEM_UPGRADE_PATHFINDER_IMPACTNITRON               7881
#define CONST_ITEM_UPGRADE_PATHFINDER_IMPACTNITRON01             7882
#define CONST_ITEM_UPGRADE_PATHFINDER_IMPACTNITRON02             7883
#define CONST_ITEM_UPGRADE_PATHFINDER_GRENADE_ST                 7888
#define CONST_ITEM_UPGRADE_PATHFINDER_GRENADE_ST01               7889
#define CONST_ITEM_UPGRADE_PATHFINDER_GRENADE_ST02               7890
#define CONST_ITEM_UPGRADE_PATHFINDER_IMPACTBOMBLETS             8274
#define CONST_ITEM_UPGRADE_PATHFINDER_IMPACTBOMBLETS01           8275
#define CONST_ITEM_UPGRADE_PATHFINDER_IMPACTBOMBLETS02           8276
#define CONST_ITEM_UPGRADE_SENTINEL_CLAYMORE                     7943
#define CONST_ITEM_UPGRADE_SENTINEL_CLAYMORE01                   7944
#define CONST_ITEM_UPGRADE_SENTINEL_CLAYMORE02                   7945
#define CONST_ITEM_UPGRADE_SENTINEL_GRENADEXL                    7946
#define CONST_ITEM_UPGRADE_SENTINEL_GRENADEXL01                  7947
#define CONST_ITEM_UPGRADE_SENTINEL_GRENADEXL02                  7948
#define CONST_ITEM_UPGRADE_SENTINEL_ARMOREDCLAYMORE              8262
#define CONST_ITEM_UPGRADE_SENTINEL_ARMOREDCLAYMORE01            8263
#define CONST_ITEM_UPGRADE_SENTINEL_ARMOREDCLAYMORE02            8264
#define CONST_ITEM_UPGRADE_INFILTRATOR_STICKYGRENADE             7970
#define CONST_ITEM_UPGRADE_INFILTRATOR_STICKYGRENADE01           7971
#define CONST_ITEM_UPGRADE_INFILTRATOR_STICKYGRENADE02           7972
#define CONST_ITEM_UPGRADE_INFILTRATOR_STICKYGRENADE03           7973
#define CONST_ITEM_UPGRADE_INFILTRATOR_PRISMMINES                7974
#define CONST_ITEM_UPGRADE_INFILTRATOR_PRISMMINES01              7975
#define CONST_ITEM_UPGRADE_INFILTRATOR_PRISMMINES02              7976
#define CONST_ITEM_UPGRADE_INFILTRATOR_NINJASMOKE                8286
#define CONST_ITEM_UPGRADE_INFILTRATOR_NINJASMOKE01              8287
#define CONST_ITEM_UPGRADE_INFILTRATOR_NINJASMOKE02              8288
#define CONST_ITEM_UPGRADE_SOLDIER_FRAGGRENADEXL                 7998
#define CONST_ITEM_UPGRADE_SOLDIER_FRAGGRENADEXL01               7999
#define CONST_ITEM_UPGRADE_SOLDIER_FRAGGRENADEXL02               8000
#define CONST_ITEM_UPGRADE_SOLDIER_APGRENADE                     8001
#define CONST_ITEM_UPGRADE_SOLDIER_APGRENADE01                   8002
#define CONST_ITEM_UPGRADE_SOLDIER_APGRENADE02                   8003
#define CONST_ITEM_UPGRADE_SOLDIER_PROXIMITYGRENADE              8227
#define CONST_ITEM_UPGRADE_SOLDIER_PROXIMITYGRENADE01            8228
#define CONST_ITEM_UPGRADE_SOLDIER_PROXIMITYGRENADE02            8229
#define CONST_ITEM_UPGRADE_TECHNICIAN_TCNGGRENADE                8028
#define CONST_ITEM_UPGRADE_TECHNICIAN_TCNGGRENADE01              8029
#define CONST_ITEM_UPGRADE_TECHNICIAN_TCNGGRENADE02              8030
#define CONST_ITEM_UPGRADE_TECHNICIAN_MOTIONALARM                8031
#define CONST_ITEM_UPGRADE_TECHNICIAN_MOTIONALARM01              8032
#define CONST_ITEM_UPGRADE_TECHNICIAN_MOTIONALARM02              8033
#define CONST_ITEM_UPGRADE_RAIDER_EMPGRENADE                     8052
#define CONST_ITEM_UPGRADE_RAIDER_EMPGRENADE01                   8053
#define CONST_ITEM_UPGRADE_RAIDER_EMPGRENADE02                   8054
#define CONST_ITEM_UPGRADE_RAIDER_WHITEOUTGRENADE                8055
#define CONST_ITEM_UPGRADE_RAIDER_WHITEOUTGRENADE01              8056
#define CONST_ITEM_UPGRADE_RAIDER_WHITEOUTGRENADE02              8057
#define CONST_ITEM_UPGRADE_RAIDER_MIRVGRENADE                    8283
#define CONST_ITEM_UPGRADE_RAIDER_MIRVGRENADE01                  8284
#define CONST_ITEM_UPGRADE_RAIDER_MIRVGRENADE02                  8285
#define CONST_ITEM_UPGRADE_JUGGERNAUT_HEAVYAPGRENADE             8083
#define CONST_ITEM_UPGRADE_JUGGERNAUT_HEAVYAPGRENADE01           8084
#define CONST_ITEM_UPGRADE_JUGGERNAUT_HEAVYAPGRENADE02           8085
#define CONST_ITEM_UPGRADE_JUGGERNAUT_DISKTOSS                   8086
#define CONST_ITEM_UPGRADE_JUGGERNAUT_DISKTOSS01                 8087
#define CONST_ITEM_UPGRADE_JUGGERNAUT_DISKTOSS02                 8088
#define CONST_ITEM_UPGRADE_DOOMBRINGER_GRENADE                   8110
#define CONST_ITEM_UPGRADE_DOOMBRINGER_GRENADE01                 8111
#define CONST_ITEM_UPGRADE_DOOMBRINGER_GRENADE02                 8112
#define CONST_ITEM_UPGRADE_DOOMBRINGER_MINES                     8113
#define CONST_ITEM_UPGRADE_DOOMBRINGER_MINES01                   8114
#define CONST_ITEM_UPGRADE_DOOMBRINGER_MINES02                   8115
#define CONST_ITEM_UPGRADE_BRUTE_FRACTALGRENADE                  8135
#define CONST_ITEM_UPGRADE_BRUTE_FRACTALGRENADE01                8136
#define CONST_ITEM_UPGRADE_BRUTE_FRACTALGRENADE02                8137
#define CONST_ITEM_UPGRADE_BRUTE_STICKYGRENADE                   8138
#define CONST_ITEM_UPGRADE_BRUTE_STICKYGRENADE01                 8139
#define CONST_ITEM_UPGRADE_BRUTE_STICKYGRENADE02                 8140
#define CONST_ITEM_UPGRADE_PATHFINDER_ENERGYRECHARGEPACK         7871
#define CONST_ITEM_UPGRADE_PATHFINDER_ENERGYRECHARGEPACK01       7872
#define CONST_ITEM_UPGRADE_PATHFINDER_ENERGYRECHARGEPACK02       7873
#define CONST_ITEM_UPGRADE_PATHFINDER_JUMPPACK                   7876
#define CONST_ITEM_UPGRADE_PATHFINDER_JUMPPACK01                 7877
#define CONST_ITEM_UPGRADE_PATHFINDER_JUMPPACK02                 7878
#define CONST_ITEM_UPGRADE_SENTINEL_DROPJAMMER                   7949
#define CONST_ITEM_UPGRADE_SENTINEL_DROPJAMMER01                 7950
#define CONST_ITEM_UPGRADE_SENTINEL_DROPJAMMER02                 7951
#define CONST_ITEM_UPGRADE_SENTINEL_ENERGYRECHARGEPACK           7952
#define CONST_ITEM_UPGRADE_SENTINEL_ENERGYRECHARGEPACK01         7953
#define CONST_ITEM_UPGRADE_SENTINEL_ENERGYRECHARGEPACK02         7954
#define CONST_ITEM_UPGRADE_INFILTRATOR_STEALTHPACK               7977
#define CONST_ITEM_UPGRADE_INFILTRATOR_STEALTHPACK01             7978
#define CONST_ITEM_UPGRADE_INFILTRATOR_STEALTHPACK02             7979
#define CONST_ITEM_UPGRADE_INFILTRATOR_HIGHSPEEDSTEALTH          8271
#define CONST_ITEM_UPGRADE_INFILTRATOR_HIGHSPEEDSTEALTH01        8272
#define CONST_ITEM_UPGRADE_INFILTRATOR_HIGHSPEEDSTEALTH02        8273
#define CONST_ITEM_UPGRADE_SOLDIER_ENERGYPACK                    8004
#define CONST_ITEM_UPGRADE_SOLDIER_ENERGYPACK01                  8005
#define CONST_ITEM_UPGRADE_SOLDIER_ENERGYPACK02                  8006
#define CONST_ITEM_UPGRADE_SOLDIER_UTILITYPACK                   8224
#define CONST_ITEM_UPGRADE_SOLDIER_UTILITYPACK01                 8225
#define CONST_ITEM_UPGRADE_SOLDIER_UTILITYPACK02                 8226
#define CONST_ITEM_UPGRADE_TECHNICIAN_LIGHTTURRET                8034
#define CONST_ITEM_UPGRADE_TECHNICIAN_LIGHTTURRET01              8035
#define CONST_ITEM_UPGRADE_TECHNICIAN_LIGHTTURRET02              8036
#define CONST_ITEM_UPGRADE_TECHNICIAN_EXRTURRET                  8268
#define CONST_ITEM_UPGRADE_TECHNICIAN_EXRTURRET01                8269
#define CONST_ITEM_UPGRADE_TECHNICIAN_EXRTURRET02                8270
#define CONST_ITEM_UPGRADE_RAIDER_SHIELDPACK                     8058
#define CONST_ITEM_UPGRADE_RAIDER_SHIELDPACK01                   8059
#define CONST_ITEM_UPGRADE_RAIDER_SHIELDPACK02                   8060
#define CONST_ITEM_UPGRADE_RAIDER_JAMMERPACK                     8061
#define CONST_ITEM_UPGRADE_RAIDER_JAMMERPACK01                   8062
#define CONST_ITEM_UPGRADE_RAIDER_JAMMERPACK02                   8063
#define CONST_ITEM_UPGRADE_RAIDER_JAMMERPACK03                   8064
#define CONST_ITEM_UPGRADE_JUGGERNAUT_HEALTHREGENPACK            8089
#define CONST_ITEM_UPGRADE_JUGGERNAUT_HEALTHREGENPACK01          8090
#define CONST_ITEM_UPGRADE_JUGGERNAUT_HEALTHREGENPACK02          8091
#define CONST_ITEM_UPGRADE_JUGGERNAUT_ENERGYPACK                 8092
#define CONST_ITEM_UPGRADE_JUGGERNAUT_ENERGYPACK01               8093
#define CONST_ITEM_UPGRADE_JUGGERNAUT_ENERGYPACK02               8094
#define CONST_ITEM_UPGRADE_JUGGERNAUT_SURVIVALPACK               8309
#define CONST_ITEM_UPGRADE_JUGGERNAUT_SURVIVALPACK01             8310
#define CONST_ITEM_UPGRADE_JUGGERNAUT_SURVIVALPACK02             8311
#define CONST_ITEM_UPGRADE_DOOMBRINGER_FORCEFIELD                8116
#define CONST_ITEM_UPGRADE_DOOMBRINGER_FORCEFIELD01              8117
#define CONST_ITEM_UPGRADE_DOOMBRINGER_FORCEFIELD02              8118
#define CONST_ITEM_UPGRADE_BRUTE_ENERGYPACK                      8141
#define CONST_ITEM_UPGRADE_BRUTE_ENERGYPACK01                    8142
#define CONST_ITEM_UPGRADE_BRUTE_ENERGYPACK02                    8143
#define CONST_ITEM_UPGRADE_BRUTE_SHIELDPACK                      8144
#define CONST_ITEM_UPGRADE_BRUTE_SHIELDPACK01                    8145
#define CONST_ITEM_UPGRADE_BRUTE_SHIELDPACK02                    8146
#define CONST_ITEM_UPGRADE_PATHFINDER_ARMOR                      7893
#define CONST_ITEM_UPGRADE_PATHFINDER_ARMOR01                    7894
#define CONST_ITEM_UPGRADE_PATHFINDER_ARMOR02                    7895
#define CONST_ITEM_UPGRADE_PATHFINDER_ARMOR03                    7896
#define CONST_ITEM_UPGRADE_PATHFINDER_ARMOR04                    7897
#define CONST_ITEM_UPGRADE_SENTINEL_ARMOR                        7955
#define CONST_ITEM_UPGRADE_SENTINEL_ARMOR01                      7956
#define CONST_ITEM_UPGRADE_SENTINEL_ARMOR02                      7957
#define CONST_ITEM_UPGRADE_SENTINEL_ARMOR03                      7958
#define CONST_ITEM_UPGRADE_SENTINEL_ARMOR04                      7959
#define CONST_ITEM_UPGRADE_INFILTRATOR_ARMOR                     7980
#define CONST_ITEM_UPGRADE_INFILTRATOR_ARMOR01                   7981
#define CONST_ITEM_UPGRADE_INFILTRATOR_ARMOR02                   7982
#define CONST_ITEM_UPGRADE_INFILTRATOR_ARMOR03                   7983
#define CONST_ITEM_UPGRADE_INFILTRATOR_ARMOR04                   7984
#define CONST_ITEM_UPGRADE_SOLDIER_ARMOR                         8007
#define CONST_ITEM_UPGRADE_SOLDIER_ARMOR01                       8008
#define CONST_ITEM_UPGRADE_SOLDIER_ARMOR02                       8009
#define CONST_ITEM_UPGRADE_SOLDIER_ARMOR03                       8010
#define CONST_ITEM_UPGRADE_SOLDIER_ARMOR04                       8011
#define CONST_ITEM_UPGRADE_TECHNICIAN_ARMOR                      8037
#define CONST_ITEM_UPGRADE_TECHNICIAN_ARMOR01                    8038
#define CONST_ITEM_UPGRADE_TECHNICIAN_ARMOR02                    8039
#define CONST_ITEM_UPGRADE_TECHNICIAN_ARMOR03                    8040
#define CONST_ITEM_UPGRADE_TECHNICIAN_ARMOR04                    8041
#define CONST_ITEM_UPGRADE_RAIDER_ARMOR                          8065
#define CONST_ITEM_UPGRADE_RAIDER_ARMOR01                        8066
#define CONST_ITEM_UPGRADE_RAIDER_ARMOR02                        8067
#define CONST_ITEM_UPGRADE_RAIDER_ARMOR03                        8068
#define CONST_ITEM_UPGRADE_RAIDER_ARMOR04                        8069
#define CONST_ITEM_UPGRADE_JUGGERNAUT_ARMOR                      8095
#define CONST_ITEM_UPGRADE_JUGGERNAUT_ARMOR01                    8096
#define CONST_ITEM_UPGRADE_JUGGERNAUT_ARMOR02                    8097
#define CONST_ITEM_UPGRADE_JUGGERNAUT_ARMOR03                    8098
#define CONST_ITEM_UPGRADE_JUGGERNAUT_ARMOR04                    8099
#define CONST_ITEM_UPGRADE_DOOMBRINGER_ARMOR                     8119
#define CONST_ITEM_UPGRADE_DOOMBRINGER_ARMOR01                   8120
#define CONST_ITEM_UPGRADE_DOOMBRINGER_ARMOR02                   8121
#define CONST_ITEM_UPGRADE_DOOMBRINGER_ARMOR03                   8122
#define CONST_ITEM_UPGRADE_DOOMBRINGER_ARMOR04                   8123
#define CONST_ITEM_UPGRADE_BRUTE_ARMOR                           8147
#define CONST_ITEM_UPGRADE_BRUTE_ARMOR01                         8148
#define CONST_ITEM_UPGRADE_BRUTE_ARMOR02                         8149
#define CONST_ITEM_UPGRADE_BRUTE_ARMOR03                         8150
#define CONST_ITEM_UPGRADE_BRUTE_ARMOR04                         8151
#define CONST_ITEM_PERK_UPGRADE_BOUNTYHUNTER                     8188
#define CONST_ITEM_PERK_UPGRADE_BOUNTYHUNTER01                   8189
#define CONST_ITEM_PERK_UPGRADE_BOUNTYHUNTER02                   8190
#define CONST_ITEM_PERK_UPGRADE_CLOSECOMBAT                      8194
#define CONST_ITEM_PERK_UPGRADE_CLOSECOMBAT01                    8195
#define CONST_ITEM_PERK_UPGRADE_CLOSECOMBAT02                    8196
#define CONST_ITEM_PERK_UPGRADE_EGOCENTRIC                       8173
#define CONST_ITEM_PERK_UPGRADE_EGOCENTRIC01                     8174
#define CONST_ITEM_PERK_UPGRADE_EGOCENTRIC02                     8175
#define CONST_ITEM_PERK_UPGRADE_LOOTER                           8185
#define CONST_ITEM_PERK_UPGRADE_LOOTER01                         8186
#define CONST_ITEM_PERK_UPGRADE_LOOTER02                         8187
#define CONST_ITEM_PERK_UPGRADE_MECHANIC                         8215
#define CONST_ITEM_PERK_UPGRADE_MECHANIC01                       8216
#define CONST_ITEM_PERK_UPGRADE_MECHANIC02                       8217
#define CONST_ITEM_PERK_UPGRADE_PILOT                            8179
#define CONST_ITEM_PERK_UPGRADE_PILOT01                          8180
#define CONST_ITEM_PERK_UPGRADE_PILOT02                          8181
#define CONST_ITEM_PERK_UPGRADE_POTENTIALENERGY                  8200
#define CONST_ITEM_PERK_UPGRADE_POTENTIALENERGY01                8201
#define CONST_ITEM_PERK_UPGRADE_POTENTIALENERGY02                8202
#define CONST_ITEM_PERK_UPGRADE_QUICKDRAW                        8209
#define CONST_ITEM_PERK_UPGRADE_QUICKDRAW01                      8210
#define CONST_ITEM_PERK_UPGRADE_QUICKDRAW02                      8211
#define CONST_ITEM_PERK_UPGRADE_REACH                            8152
#define CONST_ITEM_PERK_UPGRADE_REACH01                          8171
#define CONST_ITEM_PERK_UPGRADE_REACH02                          8172
#define CONST_ITEM_PERK_UPGRADE_SAFEFALL                         8176
#define CONST_ITEM_PERK_UPGRADE_SAFEFALL01                       8177
#define CONST_ITEM_PERK_UPGRADE_SAFEFALL02                       8178
#define CONST_ITEM_PERK_UPGRADE_SAFETYTHIRD                      8212
#define CONST_ITEM_PERK_UPGRADE_SAFETYTHIRD01                    8213
#define CONST_ITEM_PERK_UPGRADE_SAFETYTHIRD02                    8214
#define CONST_ITEM_PERK_UPGRADE_STEALTHY                         8206
#define CONST_ITEM_PERK_UPGRADE_STEALTHY01                       8207
#define CONST_ITEM_PERK_UPGRADE_STEALTHY02                       8208
#define CONST_ITEM_PERK_UPGRADE_SUPERHEAVY                       8197
#define CONST_ITEM_PERK_UPGRADE_SUPERHEAVY01                     8198
#define CONST_ITEM_PERK_UPGRADE_SUPERHEAVY02                     8199
#define CONST_ITEM_PERK_UPGRADE_SURVIVALIST                      8191
#define CONST_ITEM_PERK_UPGRADE_SURVIVALIST01                    8192
#define CONST_ITEM_PERK_UPGRADE_SURVIVALIST02                    8193
#define CONST_ITEM_PERK_UPGRADE_ULTRACAPACITOR                   8203
#define CONST_ITEM_PERK_UPGRADE_ULTRACAPACITOR01                 8204
#define CONST_ITEM_PERK_UPGRADE_ULTRACAPACITOR02                 8205
#define CONST_ITEM_PERK_UPGRADE_WHEELDEAL                        8182
#define CONST_ITEM_PERK_UPGRADE_WHEELDEAL01                      8183
#define CONST_ITEM_PERK_UPGRADE_WHEELDEAL02                      8184
#define CONST_ITEM_PERK_UPGRADE_RAGE                             8236
#define CONST_ITEM_PERK_UPGRADE_RAGE01                           8237
#define CONST_ITEM_PERK_UPGRADE_RAGE02                           8238
#define CONST_ITEM_PERK_UPGRADE_SONICPUNCH                       8233
#define CONST_ITEM_PERK_UPGRADE_SONICPUNCH01                     8234
#define CONST_ITEM_PERK_UPGRADE_SONICPUNCH02                     8235
#define CONST_ITEM_UPGRADE_TEMP                                  99999
#define CONST_SHOP_VENDOR_GOLD                                   507
#define CONST_SHOP_VENDOR_BUNDLES                                518
#define CONST_SHOP_VENDOR_BOOSTERS                               508
#define CONST_SHOP_VENDOR_NAMECHANGE                             512
#define CONST_SHOP_VENDOR_CLANTAG                                545
#define CONST_SKIN_INFILTRATOR_BE                                6
#define CONST_SKIN_INFILTRATOR_DS                                7
#define CONST_SKIN_SENTINEL_BE                                   8
#define CONST_SKIN_SENTINEL_DS                                   9
#define CONST_SKIN_RAIDER_BE                                     10
#define CONST_SKIN_RAIDER_DS                                     11
#define CONST_SKIN_TECHNICIAN_BE                                 12
#define CONST_SKIN_TECHNICIAN_DS                                 13
#define CONST_SKIN_DOOMBRINGER_BE                                14
#define CONST_SKIN_DOOMBRINGER_DS                                15
#define CONST_SKIN_JUGGERNAUT_BE                                 16
#define CONST_SKIN_JUGGERNAUT_DS                                 17
#define CONST_SKIN_BRUTE_BE                                      18
#define CONST_SKIN_BRUTE_DS                                      19
#define CONST_SKIN_SOLDIER_BE                                    20
#define CONST_SKIN_SOLDIER_DS                                    21
#define CONST_SKIN_PATHFINDER_BE                                 22
#define CONST_SKIN_PATHFINDER_DS                                 23
#define CONST_SKIN_PATHFINDER_MC                                 24
#define CONST_SKIN_INFILTRATOR_AS                                25
#define CONST_SKIN_INFILTRATOR_MC                                26
#define CONST_SKIN_RAIDER_GV                                     25
#define CONST_SKIN_RAIDER_MC                                     26
#define CONST_SKIN_SENTINEL_MC                                   27
#define CONST_SKIN_BRUTE_MC                                      28
#define CONST_SKIN_TECHNICIAN_MC                                 29
#define CONST_QUEUE_CONFIG_SERVERNAME                            1243
#define CONST_QUEUE_CONFIG_ADMINPASSWORD                         1245
#define CONST_QUEUE_CONFIG_GENPASSWORD                           1246
#define CONST_QUEUE_CONFIG_SLOTS                                 1247
#define CONST_QUEUE_CONFIG_MATCHQUEUEID                          1253
#define CONST_QUEUE_CONFIG_SERVERDESCRIPTION                     1255
#define CONST_QUEUE_CONFIG_MAPROTATIONTYPE                       1256
#define CONST_QUEUE_CONFIG_MAPSLOT1                              1257
#define CONST_QUEUE_CONFIG_MAPSLOT2                              1258
#define CONST_QUEUE_CONFIG_MAPSLOT3                              1259
#define CONST_QUEUE_CONFIG_MAPSLOT4                              1260
#define CONST_QUEUE_CONFIG_MAPSLOT5                              1261
#define CONST_QUEUE_CONFIG_MAPSLOT6                              1262
#define CONST_QUEUE_CONFIG_MAPSLOT7                              1263
#define CONST_QUEUE_CONFIG_MAPSLOT8                              1264
#define CONST_QUEUE_CONFIG_SITEID                                1272
#define CONST_QUEUE_CONFIG_MINLEVEL                              1296
#define CONST_QUEUE_CONFIG_MAXLEVEL                              1297
#define CONST_GAME_CONFIG_TIMELIMIT                              1059
#define CONST_GAME_CONFIG_MAXPLAYERS                             1060
#define CONST_GAME_CONFIG_AUTOBALANCE                            1062
#define CONST_GAME_CONFIG_OVERTIMELIMIT                          1063
#define CONST_GAME_CONFIG_RESPAWNTIME                            1064
#define CONST_GAME_CONFIG_FRIENDLYFIRE                           1065
#define CONST_GAME_CONFIG_GENAUTOREGEN                           1066
#define CONST_GAME_CONFIG_UPGRADES                               1067
#define CONST_GAME_CONFIG_SPAWNNAKED                             1068
#define CONST_GAME_CONFIG_BASEASSETS                             1070
#define CONST_GAME_CONFIG_POWERDEPLOYS                           1072
#define CONST_GAME_CONFIG_VEHICLELIMITS                          1075
#define CONST_GAME_CONFIG_VGRAVCYCLELIMIT                        1268
#define CONST_GAME_CONFIG_VBEOWULFLIMIT                          1269
#define CONST_GAME_CONFIG_VSHRIKELIMIT                           1270
#define CONST_GAME_CONFIG_VBEOWULFPRICE                          1076
#define CONST_GAME_CONFIG_VGRAVPRICE                             1077
#define CONST_GAME_CONFIG_VSHRIKEPRICE                           1080
#define CONST_GAME_CONFIG_TEAMJOINTYPE                           1081
#define CONST_GAME_CONFIG_FFMULTIPLIER                           1123
#define CONST_GAME_CONFIG_CALLINSDENIED                          1233
#define CONST_GAME_CONFIG_CALLINPRICETAC                         1234
#define CONST_GAME_CONFIG_CALLINPRICESUP                         1235
#define CONST_GAME_CONFIG_CALLINPRICEORB                         1236
#define CONST_GAME_CONFIG_CALLINCLDWNTAC                         1237
#define CONST_GAME_CONFIG_CALLINCLDWNSUP                         1238
#define CONST_GAME_CONFIG_CALLINCLDWNORB                         1239
#define CONST_GAME_CONFIG_CALLINBLDUPTAC                         1249
#define CONST_GAME_CONFIG_CALLINBLDUPSUP                         1250
#define CONST_GAME_CONFIG_CALLINBLDUPORB                         1251
#define CONST_GAME_CONFIG_BASEDESTLIMIT                          1241
#define CONST_GAME_CONFIG_WARMUPTIME                             1248
#define CONST_GAME_CONFIG_TEAMDISPARITY                          1252
#define CONST_GAME_CONFIG_CONFIGCASEID                           1254
#define CONST_GAME_CONFIG_ARENAROUNDS                            1265
#define CONST_GAME_CONFIG_SCORELIMIT_CTF                         1061
#define CONST_GAME_CONFIG_SCORELIMIT_RAB                         1278
#define CONST_GAME_CONFIG_SCORELIMIT_TDM                         1276
#define CONST_GAME_CONFIG_SCORELIMIT_ARN                         1277
#define CONST_GAME_CONFIG_SCORELIMIT_CAH                         1279
#define CONST_GAME_CONFIG_GAMETYPE                               1244
#define CONST_GAME_CONFIG_GENDESTROYABLE                         1280
#define CONST_GAME_CONFIG_INVDESTROYABLE                         1281
#define CONST_GAME_CONFIG_FFDEPLOYABLES                          1282
#define CONST_GAME_CONFIG_FFBASEASSETS                           1283
#define CONST_GAME_CONFIG_FFDMGLIMIT                             1284
#define CONST_GAME_CONFIG_FFKILLLIMIT                            1285
#define CONST_GAME_CONFIG_SUPPLYDROPAMMOONLY                     1286
#define CONST_GAME_CONFIG_CLASSCOUNT_PTH                         1287
#define CONST_GAME_CONFIG_CLASSCOUNT_SEN                         1289
#define CONST_GAME_CONFIG_CLASSCOUNT_INF                         1288
#define CONST_GAME_CONFIG_CLASSCOUNT_SLD                         1290
#define CONST_GAME_CONFIG_CLASSCOUNT_TCN                         1291
#define CONST_GAME_CONFIG_CLASSCOUNT_RDR                         1292
#define CONST_GAME_CONFIG_CLASSCOUNT_JUG                         1293
#define CONST_GAME_CONFIG_CLASSCOUNT_DMB                         1294
#define CONST_GAME_CONFIG_CLASSCOUNT_BRT                         1295
#define CONST_GAME_CONFIG_POWEREDCALLINS                         1298
#define CONST_GAME_CONFIG_TEAMCREDITS                            1299
#define CONST_GAME_CONFIG_VEHICLEHEALTHMULT                      1327
#define CONST_GAME_CONFIG_SKIENABLED                             1373
#define CONST_GAME_CONFIG_ENERGYMULTIPLIER                       1374
#define CONST_GAME_CONFIG_AOESIZEMULTIPLIER                      1375
#define CONST_GAME_CONFIG_AOEDAMAGEMULTIPLIER                    1376
#define CONST_GAME_CONFIG_CTFBLITZALLFLAGSMOVE                   1377
#define CONST_SERVER_RT_METHOD_RANDOM                            10070
#define CONST_SERVER_RT_METHOD_LINEAR                            10071
#define CONST_SERVER_RT_METHOD_LINEAR2                           10072
#define CONST_SERVER_RT_METHOD_LINEAR4                           10073
#define CONST_TR_MAX_GAMETYPES                                   5
#define CONST_SERVER_GAMECLASSID_CTF                             197
#define CONST_SERVER_GAMECLASSID_RAB                             8012
#define CONST_SERVER_GAMECLASSID_TDM                             8036
#define CONST_SERVER_GAMECLASSID_ARN                             8086
#define CONST_SERVER_GAMECLASSID_CAH                             8094
#define CONST_SERVER_GAMECLASSID_BTZ                             8118
#define CONST_SERVER_DEFAULT_MAP_CTF                             1462
#define CONST_SERVER_DEFAULT_MAP_RAB                             1465
#define CONST_SERVER_DEFAULT_MAP_TDM                             1488
#define CONST_SERVER_DEFAULT_MAP_ARN                             1495
#define CONST_SERVER_DEFAULT_MAP_CAH                             1519
#define CONST_SERVER_DEFAULT_MAP_BTZ                             1539
#define CONST_PTH_LOADOUT_ONE                                    8359
#define CONST_PTH_LOADOUT_TWO                                    8360
#define CONST_PTH_LOADOUT_THREE                                  8361
#define CONST_PTH_LOADOUT_FOUR                                   8674
#define CONST_PTH_LOADOUT_FIVE                                   8675
#define CONST_INF_LOADOUT_ONE                                    8362
#define CONST_INF_LOADOUT_TWO                                    8363
#define CONST_INF_LOADOUT_THREE                                  8364
#define CONST_INF_LOADOUT_FOUR                                   8676
#define CONST_INF_LOADOUT_FIVE                                   8677
#define CONST_SEN_LOADOUT_ONE                                    8365
#define CONST_SEN_LOADOUT_TWO                                    8366
#define CONST_SEN_LOADOUT_THREE                                  8367
#define CONST_SEN_LOADOUT_FOUR                                   8678
#define CONST_SEN_LOADOUT_FIVE                                   8679
#define CONST_SLD_LOADOUT_ONE                                    8368
#define CONST_SLD_LOADOUT_TWO                                    8369
#define CONST_SLD_LOADOUT_THREE                                  8370
#define CONST_SLD_LOADOUT_FOUR                                   8680
#define CONST_SLD_LOADOUT_FIVE                                   8681
#define CONST_TCN_LOADOUT_ONE                                    8371
#define CONST_TCN_LOADOUT_TWO                                    8372
#define CONST_TCN_LOADOUT_THREE                                  8373
#define CONST_TCN_LOADOUT_FOUR                                   8682
#define CONST_TCN_LOADOUT_FIVE                                   8683
#define CONST_RDR_LOADOUT_ONE                                    8374
#define CONST_RDR_LOADOUT_TWO                                    8375
#define CONST_RDR_LOADOUT_THREE                                  8376
#define CONST_RDR_LOADOUT_FOUR                                   8684
#define CONST_RDR_LOADOUT_FIVE                                   8685
#define CONST_JUG_LOADOUT_ONE                                    8377
#define CONST_JUG_LOADOUT_TWO                                    8378
#define CONST_JUG_LOADOUT_THREE                                  8379
#define CONST_JUG_LOADOUT_FOUR                                   8686
#define CONST_JUG_LOADOUT_FIVE                                   8687
#define CONST_DMB_LOADOUT_ONE                                    8380
#define CONST_DMB_LOADOUT_TWO                                    8381
#define CONST_DMB_LOADOUT_THREE                                  8382
#define CONST_DMB_LOADOUT_FOUR                                   8688
#define CONST_DMB_LOADOUT_FIVE                                   8689
#define CONST_BRT_LOADOUT_ONE                                    8383
#define CONST_BRT_LOADOUT_TWO                                    8384
#define CONST_BRT_LOADOUT_THREE                                  8385
#define CONST_BRT_LOADOUT_FOUR                                   8690
#define CONST_BRT_LOADOUT_FIVE                                   8691
#define CONST_ACTIVITY_DEVICE_NONE                               0
#define CONST_ACTIVITY_SENTINEL_PRIMARY_BXT1                     124
#define CONST_ACTIVITY_SENTINEL_BELT_MINE_CLAYMORE_MKD           125
#define CONST_ACTIVITY_SENTINEL_PRIMARY_SNIPERRIFLE_MKD          126
#define CONST_ACTIVITY_BRUTE_PRIMARY_HEAVYSPINFUSOR              127
#define CONST_ACTIVITY_BRUTE_PRIMARY_HEAVYSPINFUSOR_MKD          128
#define CONST_ACTIVITY_BRUTE_PRIMARY_SPIKELAUNCHER               129
#define CONST_ACTIVITY_DOOMBRINGER_PRIMARY_CHAINGUN              131
#define CONST_ACTIVITY_DOOMBRINGER_PRIMARY_CHAINGUN_MKD          132
#define CONST_ACTIVITY_DOOMBRINGER_PRIMARY_HEAVYBOLTLAUNCHER     133
#define CONST_ACTIVITY_INFILTRATOR_PRIMARY_REMOTEARXBUSTER       134
#define CONST_ACTIVITY_INFILTRATOR_PRIMARY_RHINOSMG              135
#define CONST_ACTIVITY_INFILTRATOR_PRIMARY_RHINOSMG_MKD          136
#define CONST_ACTIVITY_INFILTRATOR_PRIMARY_STEALTHLIGHTSPINFUSOR 137
#define CONST_ACTIVITY_JUGGERNAUT_PRIMARY_FUSIONMORTAR           138
#define CONST_ACTIVITY_JUGGERNAUT_PRIMARY_FUSIONMORTAR_MKD       139
#define CONST_ACTIVITY_JUGGERNAUT_PRIMARY_MIRVLAUNCHER           140
#define CONST_ACTIVITY_PATHFINDER_PRIMARY_BOLTLAUNCHER           141
#define CONST_ACTIVITY_PATHFINDER_PRIMARY_LIGHTSPINFUSOR         142
#define CONST_ACTIVITY_PATHFINDER_PRIMARY_LIGHTSPINFUSOR_MKD     143
#define CONST_ACTIVITY_RAIDER_PRIMARY_ARXBUSTER                  144
#define CONST_ACTIVITY_RAIDER_PRIMARY_ARXBUSTER_MKD              145
#define CONST_ACTIVITY_RAIDER_PRIMARY_GRENADELAUNCHER            146
#define CONST_ACTIVITY_RAIDER_PRIMARY_PLASMAGUN                  147
#define CONST_ACTIVITY_SENTINEL_PRIMARY_PHASERIFLE               148
#define CONST_ACTIVITY_SOLDIER_PRIMARY_ASSAULTRIFLE              149
#define CONST_ACTIVITY_SOLDIER_PRIMARY_ASSAULTRIFLE_MKD          150
#define CONST_ACTIVITY_SOLDIER_PRIMARY_SPINFUSOR                 151
#define CONST_ACTIVITY_TECHNICIAN_PRIMARY_TCN4                   152
#define CONST_ACTIVITY_TECHNICIAN_PRIMARY_TCN4_MKD               153
#define CONST_ACTIVITY_TECHNICIAN_PRIMARY_THUMPER                154
#define CONST_ACTIVITY_BRUTE_SECONDARY_AUTOSHOTGUN               155
#define CONST_ACTIVITY_BRUTE_SECONDARY_AUTOSHOTGUN_MKD           156
#define CONST_ACTIVITY_BRUTE_SECONDARY_NOVACOLT                  157
#define CONST_ACTIVITY_BRUTE_SECONDARY_PLASMACANNON              158
#define CONST_ACTIVITY_DOOMBRINGER_SECONDARY_SABERLAUNCHER       159
#define CONST_ACTIVITY_DOOMBRINGER_SECONDARY_SABERLAUNCHER_MKD   160
#define CONST_ACTIVITY_INFILTRATOR_SECONDARY_SN7                 161
#define CONST_ACTIVITY_INFILTRATOR_SECONDARY_SN7_MKD             162
#define CONST_ACTIVITY_INFILTRATOR_SECONDARY_THROWINGKNIVES      163
#define CONST_ACTIVITY_JUGGERNAUT_SECONDARY_SPINFUSORD           164
#define CONST_ACTIVITY_JUGGERNAUT_SECONDARY_SPINFUSORD_MKD       165
#define CONST_ACTIVITY_JUGGERNAUT_SECONDARY_X1LMG                166
#define CONST_ACTIVITY_PATHFINDER_SECONDARY_LIGHTASSAULTRIFLE    167
#define CONST_ACTIVITY_PATHFINDER_SECONDARY_SHOTGUN              168
#define CONST_ACTIVITY_PATHFINDER_SECONDARY_SHOTGUN_MKD          169
#define CONST_ACTIVITY_RAIDER_SECONDARY_NJ4SMG                   170
#define CONST_ACTIVITY_RAIDER_SECONDARY_NJ4SMG_MKD               171
#define CONST_ACTIVITY_RAIDER_SECONDARY_NJ5SMG                   172
#define CONST_ACTIVITY_SENTINEL_SECONDARY_FALCON                 173
#define CONST_ACTIVITY_SENTINEL_SECONDARY_NOVABLASTER            174
#define CONST_ACTIVITY_SENTINEL_SECONDARY_NOVABLASTER_MKD        175
#define CONST_ACTIVITY_SOLDIER_SECONDARY_EAGLE                   176
#define CONST_ACTIVITY_SOLDIER_SECONDARY_THUMPERD                177
#define CONST_ACTIVITY_SOLDIER_SECONDARY_THUMPERD_MKD            178
#define CONST_ACTIVITY_TECHNICIAN_SECONDARY_REPAIRTOOLSD         179
#define CONST_ACTIVITY_TECHNICIAN_SECONDARY_REPAIRTOOLSD_MKD     180
#define CONST_ACTIVITY_TECHNICIAN_SECONDARY_SAWEDOFF             181
#define CONST_ACTIVITY_TECHNICIAN_SECONDARY_SPARROW              182
#define CONST_ACTIVITY_ARMOR_MOD_BRUTE                           183
#define CONST_ACTIVITY_ARMOR_MOD_DOOMBRINGER                     184
#define CONST_ACTIVITY_ARMOR_MOD_INFILTRATOR                     185
#define CONST_ACTIVITY_ARMOR_MOD_JUGGERNAUT                      186
#define CONST_ACTIVITY_ARMOR_MOD_PATHFINDER                      187
#define CONST_ACTIVITY_ARMOR_MOD_RAIDER                          188
#define CONST_ACTIVITY_ARMOR_MOD_SENTINEL                        189
#define CONST_ACTIVITY_ARMOR_MOD_TECHNICIAN                      190
#define CONST_ACTIVITY_ARMOR_MOD_SOLDIER                         191
#define CONST_ACTIVITY_BRUTE_BELT_FRACTALGRENADE                 192
#define CONST_ACTIVITY_BRUTE_BELT_FRACTALGRENADE_MKD             193
#define CONST_ACTIVITY_BRUTE_BELT_LIGHTSTICKYGRENADE             194
#define CONST_ACTIVITY_DOOMBRINGER_BELT_MINE                     195
#define CONST_ACTIVITY_DOOMBRINGER_BELT_STANDARDGRENADE          196
#define CONST_ACTIVITY_DOOMBRINGER_BELT_STANDARDGRENADE_MKD      197
#define CONST_ACTIVITY_INFILTRATOR_BELT_NINJASMOKE               198
#define CONST_ACTIVITY_INFILTRATOR_BELT_PRISMMINES               199
#define CONST_ACTIVITY_INFILTRATOR_BELT_STICKYGRENADE            200
#define CONST_ACTIVITY_INFILTRATOR_BELT_STICKYGRENADE_MKD        201
#define CONST_ACTIVITY_JUGGERNAUT_BELT_DISKTOSS                  202
#define CONST_ACTIVITY_JUGGERNAUT_BELT_HEAVYAPGRENADE            203
#define CONST_ACTIVITY_JUGGERNAUT_BELT_HEAVYAPGRENADE_MKD        204
#define CONST_ACTIVITY_PATHFINDER_BELT_IMPACTNITRON              205
#define CONST_ACTIVITY_PATHFINDER_BELT_IMPACTNITRON_MKD          206
#define CONST_ACTIVITY_PATHFINDER_BELT_STGRENADE                 207
#define CONST_ACTIVITY_RAIDER_BELT_EMPGRENADE                    208
#define CONST_ACTIVITY_RAIDER_BELT_EMPGRENADE_MKD                209
#define CONST_ACTIVITY_RAIDER_BELT_MIRVGRENADE                   210
#define CONST_ACTIVITY_RAIDER_BELT_WHITEOUT                      211
#define CONST_ACTIVITY_SENTINEL_BELT_ARMOREDCLAYMORE             212
#define CONST_ACTIVITY_SENTINEL_BELT_CLAYMORE                    213
#define CONST_ACTIVITY_SENTINEL_BELT_CLAYMORE_MKD                214
#define CONST_ACTIVITY_SENTINEL_BELT_GRENADET5                   215
#define CONST_ACTIVITY_SOLDIER_BELT_APGRENADE                    216
#define CONST_ACTIVITY_SOLDIER_BELT_FRAGGRENADEXL                217
#define CONST_ACTIVITY_SOLDIER_BELT_FRAGGRENADEXL_MKD            218
#define CONST_ACTIVITY_SOLDIER_BELT_PROXIMITYGRENADE             219
#define CONST_ACTIVITY_TECHNICIAN_BELT_MOTIONALARM               220
#define CONST_ACTIVITY_TECHNICIAN_BELT_TCNG                      221
#define CONST_ACTIVITY_TECHNICIAN_BELT_TCNG_MKD                  222
#define CONST_ACTIVITY_BRUTE_PACK_HEAVYSHIELD                    223
#define CONST_ACTIVITY_BRUTE_PACK_MINORENERGY                    224
#define CONST_ACTIVITY_BRUTE_PACK_SURVIVALPACK                   225
#define CONST_ACTIVITY_DOOMBRINGER_PACK_FORCEFIELD               226
#define CONST_ACTIVITY_INFILTRATOR_PACK_STEALTH                  227
#define CONST_ACTIVITY_JUGGERNAUT_PACK_HEALTHREGEN               228
#define CONST_ACTIVITY_PATHFINDER_PACK_ENERGYRECHARGE            229
#define CONST_ACTIVITY_PATHFINDER_PACK_JUMPPACK                  230
#define CONST_ACTIVITY_RAIDER_PACK_JAMMER                        231
#define CONST_ACTIVITY_RAIDER_PACK_SHIELD                        232
#define CONST_ACTIVITY_SENTINEL_PACK_DROPJAMMER                  233
#define CONST_ACTIVITY_SENTINEL_PACK_ENERGYRECHARGE              234
#define CONST_ACTIVITY_SOLDIER_PACK_ENERGYPOOL                   235
#define CONST_ACTIVITY_SOLDIER_PACK_UTILITY                      236
#define CONST_ACTIVITY_TECHNICIAN_PACK_EXRTURRET                 237
#define CONST_ACTIVITY_TECHNICIAN_PACK_LIGHTTURRET               238
#define CONST_ACTIVITY_PERK_BOUNTY_HUNTER                        239
#define CONST_ACTIVITY_PERK_CLOSE_COMBAT                         240
#define CONST_ACTIVITY_PERK_LOOTER                               241
#define CONST_ACTIVITY_PERK_RAGE                                 242
#define CONST_ACTIVITY_PERK_REACH                                243
#define CONST_ACTIVITY_PERK_SAFE_FALL                            244
#define CONST_ACTIVITY_PERK_SAFETY_THIRD                         245
#define CONST_ACTIVITY_PERK_STEALTHY                             246
#define CONST_ACTIVITY_PERK_SUPER_CAPACITOR                      247
#define CONST_ACTIVITY_PERK_WHEEL_DEAL                           248
#define CONST_ACTIVITY_PERK_DETERMINATION                        249
#define CONST_ACTIVITY_PERK_EGOCENTRIC                           250
#define CONST_ACTIVITY_PERK_MECHANIC                             253
#define CONST_ACTIVITY_PERK_PILOT                                254
#define CONST_ACTIVITY_PERK_POTENTIAL_ENERGY                     255
#define CONST_ACTIVITY_PERK_QUICKDRAW                            256
#define CONST_ACTIVITY_PERK_SONIC_PUNCH                          257
#define CONST_ACTIVITY_PERK_SUPER_HEAVY                          258
#define CONST_ACTIVITY_PERK_SURVIVALIST                          259
#define CONST_ACTIVITY_PERK_ULTRA_CAPACITOR                      260
#define CONST_ACTIVITY_PATHFINDER_PRIMARY_LIGHTTWINFUSOR         261
#define CONST_ACTIVITY_SOLDIER_PRIMARY_TWINFUSOR                 262
#define CONST_ACTIVITY_JUGGERNAUT_SECONDARY_HEAVYTWINFUSOR       263
#define CONST_BUNDLE_LOOT_ID_CAD_ASSASSIN                        8918
#define CONST_BUNDLE_LOOT_ID_CAD_MERCENARY                       8919
#define CONST_BUNDLE_LOOT_ID_CAD_PREMIUM                         8912
#define CONST_BUNDLE_LOOT_ID_CAD_WEAPONS                         8920
#define CONST_BUNDLE_LOOT_ID_RAP_GRIEVER                         8982
#define CONST_BUNDLE_LOOT_ID_RAP_MERCENARY                       8983
#define CONST_BUNDLE_LOOT_ID_RAP_PREMIUM                         8981
#define CONST_BUNDLE_LOOT_ID_RAP_WEAPONS                         8984
#define CONST_BUNDLE_LOOT_ID_NEWPLAYER                           9214
#define CONST_BUNDLE_LOOT_ID_SHAZBUNDLE                          9213
#define CONST_BUNDLE_LOOT_ID_STAYINALIVE                         9035
#define CONST_BUNDLE_LOOT_ID_TWINFUSOR                           9449
#define CONST_BUNDLE_LOOT_ID_SKINPACK                            9457
#define CONST_BUNDLE_LOOT_ID_SPECIALIST                          9496
#define CONST_ITEM_VOICE_LIGHT                                   8666
#define CONST_ITEM_VOICE_MEDIUM                                  8667
#define CONST_ITEM_VOICE_HEAVY                                   8668
#define CONST_ITEM_VOICE_DARK                                    8669
#define CONST_ITEM_VOICE_FEM1                                    8670
#define CONST_ITEM_VOICE_FEM2                                    8671
#define CONST_ITEM_VOICE_AUS                                     8695
#define CONST_ITEM_VOICE_T2FEM01                                 8712
#define CONST_ITEM_VOICE_T2FEM02                                 8714
#define CONST_ITEM_VOICE_T2FEM03                                 8715
#define CONST_ITEM_VOICE_T2FEM04                                 8716
#define CONST_ITEM_VOICE_T2FEM05                                 8717
#define CONST_ITEM_VOICE_T2MALE01                                8719
#define CONST_ITEM_VOICE_T2MALE02                                8720
#define CONST_ITEM_VOICE_T2MALE03                                8721
#define CONST_ITEM_VOICE_T2MALE04                                8722
#define CONST_ITEM_VOICE_T2MALE05                                8723
#define CONST_ITEM_VOICE_T2BDERM01                               8724
#define CONST_ITEM_VOICE_T2BDERM02                               8725
#define CONST_ITEM_VOICE_T2BDERM03                               8726
#define CONST_MAX_VGS_ENTRIES                                    16
#define CONST_MENU_ELEMENT_LOGIN                                 1
#define CONST_MENU_ELEMENT_OPTIONS                               2
#define CONST_MENU_ELEMENT_SIDEBAR                               3
#define CONST_MENU_ELEMENT_DESCRIPTION                           4
#define CONST_MENU_ELEMENT_UPGRADES                              5
#define CONST_MENU_ELEMENT_POPUPACQ                              6
#define CONST_MENU_ELEMENT_POPUPALERT                            7
#define CONST_MENU_ELEMENT_POPUPPURCHASE                         8
#define CONST_MENU_ELEMENT_SUMMARYPLAYER                         9
#define CONST_MENU_ELEMENT_SUMMARYTEAM                           10
#define CONST_MENU_ELEMENT_NOUSE                                 11
#define CONST_MENU_ELEMENT_PRICE                                 12
#define CONST_MENU_ELEMENT_PROFILE                               13
#define CONST_MENU_ELEMENT_FEATURE                               14
#define CONST_MENU_ELEMENT_SERVERBROWSER                         15
#define CONST_MAX_FRIENDS_DISPLAYED                              150
#define CONST_STAT_GAME_MAP                                      200001
#define CONST_STAT_GAME_TYPE                                     200002
#define CONST_STAT_GAME_TIME                                     200003
#define CONST_STAT_GAME_OVERTIME                                 200004
#define CONST_STAT_GAME_WINNER                                   200005
#define CONST_STAT_CLASS_TYPE                                    201000
#define CONST_STAT_CLASS_SCORE                                   201001
#define CONST_STAT_CLASS_KILLS                                   201002
#define CONST_STAT_CLASS_DEATHS                                  201003
#define CONST_STAT_CLASS_ASSISTS                                 201004
#define CONST_STAT_CLASS_CREDITS_EARNED                          201005
#define CONST_STAT_CLASS_CREDITS_SPENT                           201006
#define CONST_STAT_WEAPON_TYPE                                   202000
#define CONST_STAT_WEAPON_DAMAGE                                 202001
#define CONST_STAT_WEAPON_KILLS                                  202002
#define CONST_STAT_WEAPON_SHOTS                                  202003
#define CONST_STAT_WEAPON_HITS                                   202004
#define CONST_STAT_WEAPON_TIME                                   202005
#define CONST_STAT_WEAPON_DISTANCE                               202006
#define CONST_STAT_ACO_KS_FIVE                                   203001
#define CONST_STAT_ACO_KS_TEN                                    203002
#define CONST_STAT_ACO_KS_FIFTEEN                                203003
#define CONST_STAT_ACO_KS_TWENTY                                 203004
#define CONST_STAT_ACO_KS_TWENTYFIVE                             203005
#define CONST_STAT_ACO_KS_FIVE_SNIPING                           203006
#define CONST_STAT_ACO_KS_TEN_SNIPING                            203007
#define CONST_STAT_ACO_KS_FIFTEEN_SNIPING                        203008
#define CONST_STAT_ACO_KS_FIVE_EXPLOSIVE                         203009
#define CONST_STAT_ACO_KS_TEN_EXPLOSIVE                          203010
#define CONST_STAT_ACO_KS_FIFTEEN_EXPLOSIVE                      203011
#define CONST_STAT_ACO_KS_FIVE_SPINFUSOR                         203012
#define CONST_STAT_ACO_KS_TEN_SPINFUSOR                          203013
#define CONST_STAT_ACO_KS_FIFTEEN_SPINFUSOR                      203014
#define CONST_STAT_ACO_MK_DOUBLE                                 203015
#define CONST_STAT_ACO_MK_TRIPLE                                 203016
#define CONST_STAT_ACO_MK_QUATRA                                 203017
#define CONST_STAT_ACO_MK_ULTRA                                  203018
#define CONST_STAT_ACO_MK_TEAM                                   203019
#define CONST_STAT_ACO_NOJOY                                     203020
#define CONST_STAT_ACO_REVENGE                                   203021
#define CONST_STAT_ACO_AFTERMATH                                 203022
#define CONST_STAT_ACO_FIRSTBLOOD                                203023
#define CONST_STAT_ACO_BLUEPLATESPECIAL                          203024
#define CONST_STAT_ACO_STICKYKILL                                203025
#define CONST_STAT_ACO_HEADSHOT                                  203026
#define CONST_STAT_ACO_ARTILLERYSTRIKE                           203027
#define CONST_STAT_ACO_MELEE                                     203028
#define CONST_STAT_ACO_ROADKILL                                  203029
#define CONST_STAT_ACO_FLAG_CAPTURE                              203030
#define CONST_STAT_ACO_FLAG_GRAB                                 203031
#define CONST_STAT_ACO_BK_GEN                                    203032
#define CONST_STAT_ACO_RABBITKILL                                203033
#define CONST_STAT_ACO_KILLASRABBIT                              203034
#define CONST_STAT_ACO_FINALBLOW                                 203035
#define CONST_STAT_ACO_REPAIR                                    203036
#define CONST_STAT_ACO_BK_TURRET                                 203037
#define CONST_STAT_ACO_ASSIST                                    203039
#define CONST_STAT_ACO_FLAG_RETURN                               203040
#define CONST_STAT_ACO_BK_RADAR                                  203041
#define CONST_STAT_ACO_FLAG_ASSIST                               203042
#define CONST_STAT_ACO_AIRMAIL                                   203043
#define CONST_STAT_ACO_GAME_COMPLETE                             203044
#define CONST_STAT_ACO_GAME_WINNER                               203045
#define CONST_STAT_ACO_FLAG_GRABDM                               203046
#define CONST_STAT_ACO_FLAG_HOLDER                               203047
#define CONST_STAT_ACO_FLAG_KILLER                               203048
#define CONST_STAT_ACO_FLAG_GRABFAST                             203049
#define CONST_STAT_ACO_DEFENSE_GEN                               203050
#define CONST_STAT_ACO_DEFENSE_FLAG                              203051
#define CONST_STAT_ACO_VD_BIKE                                   203052
#define CONST_STAT_ACO_VD_TANK                                   203053
#define CONST_STAT_ACO_VD_SHRIKE                                 203054
#define CONST_STAT_ACO_FLAG_GRABE                                203055
#define CONST_STAT_ACO_FLAG_GRABLLAMA                            203056
#define CONST_STAT_ACO_ASSIST_VEHICLE                            203057
#define CONST_STAT_ACO_FLAG_GRABULTRA                            203058
#define CONST_STAT_ACO_BENCHEM                                   203059
#define CONST_STAT_ACO_DOUBLEDOWN                                203060
#define CONST_STAT_ACO_LASTMANSTANDING                           203061
#define CONST_STAT_ACO_MIRACLE                                   203062
#define CONST_STAT_ACO_NOTAMONGEQUALS                            203063
#define CONST_STAT_ACO_ONEMANARMY                                203064
#define CONST_STAT_ACO_TRIBALHONOR                               203065
#define CONST_STAT_ACO_UNITEDWESTAND                             203066
#define CONST_STAT_ACO_HOLDTHELINE                               203067
#define CONST_STAT_ACO_CAPTUREANDHOLD                            203068
#define CONST_STAT_ACO_BASEASSIST                                203069
#define CONST_STAT_ACO_TURRETASSIST                              203070
#define CONST_STAT_ACO_HOTAIR                                    203071
#define CONST_ACT_ACO_KS_FIVE                                    56
#define CONST_ACT_ACO_KS_TEN                                     63
#define CONST_ACT_ACO_KS_FIFTEEN                                 55
#define CONST_ACT_ACO_KS_TWENTY                                  64
#define CONST_ACT_ACO_KS_TWENTYFIVE                              65
#define CONST_ACT_ACO_KS_FIVE_SNIPING                            58
#define CONST_ACT_ACO_KS_TEN_SNIPING                             59
#define CONST_ACT_ACO_KS_FIFTEEN_SNIPING                         57
#define CONST_ACT_ACO_KS_FIVE_EXPLOSIVE                          53
#define CONST_ACT_ACO_KS_TEN_EXPLOSIVE                           54
#define CONST_ACT_ACO_KS_FIFTEEN_EXPLOSIVE                       52
#define CONST_ACT_ACO_KS_FIVE_SPINFUSOR                          61
#define CONST_ACT_ACO_KS_TEN_SPINFUSOR                           62
#define CONST_ACT_ACO_KS_FIFTEEN_SPINFUSOR                       60
#define CONST_ACT_ACO_MK_DOUBLE                                  66
#define CONST_ACT_ACO_MK_TRIPLE                                  67
#define CONST_ACT_ACO_MK_QUATRA                                  68
#define CONST_ACT_ACO_MK_ULTRA                                   69
#define CONST_ACT_ACO_MK_TEAM                                    70
#define CONST_ACT_ACO_NOJOY                                      89
#define CONST_ACT_ACO_REVENGE                                    90
#define CONST_ACT_ACO_AFTERMATH                                  73
#define CONST_ACT_ACO_FIRSTBLOOD                                 78
#define CONST_ACT_ACO_BLUEPLATESPECIAL                           29
#define CONST_ACT_ACO_STICKYKILL                                 92
#define CONST_ACT_ACO_HEADSHOT                                   84
#define CONST_ACT_ACO_ARTILLERYSTRIKE                            75
#define CONST_ACT_ACO_MELEE                                      88
#define CONST_ACT_ACO_ROADKILL                                   91
#define CONST_ACT_ACO_FLAG_CAPTURE                               42
#define CONST_ACT_ACO_FLAG_GRAB                                  80
#define CONST_ACT_ACO_BK_GEN                                     48
#define CONST_ACT_ACO_RABBITKILL                                 72
#define CONST_ACT_ACO_KILLASRABBIT                               71
#define CONST_ACT_ACO_FINALBLOW                                  49
#define CONST_ACT_ACO_REPAIR                                     39
#define CONST_ACT_ACO_BK_TURRET                                  40
#define CONST_ACT_ACO_ASSIST                                     76
#define CONST_ACT_ACO_FLAG_RETURN                                46
#define CONST_ACT_ACO_BK_RADAR                                   38
#define CONST_ACT_ACO_FLAG_ASSIST                                41
#define CONST_ACT_ACO_AIRMAIL                                    74
#define CONST_ACT_ACO_GAME_COMPLETE                              82
#define CONST_ACT_ACO_GAME_WINNER                                83
#define CONST_ACT_ACO_FLAG_HOLDER                                51
#define CONST_ACT_ACO_FLAG_KILLER                                81
#define CONST_ACT_ACO_FLAG_GRABFAST                              77
#define CONST_ACT_ACO_DEFENSE_GEN                                47
#define CONST_ACT_ACO_DEFENSE_FLAG                               79
#define CONST_ACT_ACO_VD_BIKE                                    87
#define CONST_ACT_ACO_VD_TANK                                    85
#define CONST_ACT_ACO_VD_SHRIKE                                  86
#define CONST_ACT_ACO_FLAG_GRABE                                 44
#define CONST_ACT_ACO_FLAG_GRABLLAMA                             45
#define CONST_ACT_ACO_ASSIST_VEHICLE                             94
#define CONST_ACT_ACO_FLAG_GRABULTRA                             93
#define CONST_ACT_ACO_BENCHEM                                    30
#define CONST_ACT_ACO_DOUBLEDOWN                                 31
#define CONST_ACT_ACO_LASTMANSTANDING                            32
#define CONST_ACT_ACO_MIRACLE                                    33
#define CONST_ACT_ACO_NOTAMONGEQUALS                             34
#define CONST_ACT_ACO_ONEMANARMY                                 35
#define CONST_ACT_ACO_TRIBALHONOR                                36
#define CONST_ACT_ACO_UNITEDWESTAND                              37
#define CONST_ACT_ACO_HOLDTHELINE                                117
#define CONST_ACT_ACO_CAPTUREANDHOLD                             118
#define CONST_ACT_ACO_BASEASSIST                                 121
#define CONST_ACT_ACO_TURRETASSIST                               122
#define CONST_ACT_ACO_HOTAIR                                     123
#define CONST_ACO_TYPE_GENERAL                                   0
#define CONST_ACO_TYPE_COMBAT                                    1
#define CONST_ACO_TYPE_FLAG                                      2
#define CONST_ACO_TYPE_OBJECTIVE                                 3
#define CONST_ACO_TYPE_SPREES                                    4
#define CONST_ACO_TYPE_MULTIKILL                                 5
#define CONST_ACO_TYPE_ARENA                                     6
#define CONST_STAT_ACOW_KS_FIVE                                  5
#define CONST_STAT_ACOW_KS_TEN                                   12
#define CONST_STAT_ACOW_KS_FIFTEEN                               20
#define CONST_STAT_ACOW_KS_TWENTY                                40
#define CONST_STAT_ACOW_KS_TWENTYFIVE                            100
#define CONST_STAT_ACOW_KS_FIVE_SNIPING                          5
#define CONST_STAT_ACOW_KS_TEN_SNIPING                           12
#define CONST_STAT_ACOW_KS_FIFTEEN_SNIPING                       20
#define CONST_STAT_ACOW_KS_FIVE_EXPLOSIVE                        5
#define CONST_STAT_ACOW_KS_TEN_EXPLOSIVE                         12
#define CONST_STAT_ACOW_KS_FIFTEEN_EXPLOSIVE                     20
#define CONST_STAT_ACOW_KS_FIVE_SPINFUSOR                        5
#define CONST_STAT_ACOW_KS_TEN_SPINFUSOR                         12
#define CONST_STAT_ACOW_KS_FIFTEEN_SPINFUSOR                     20
#define CONST_STAT_ACOW_MK_DOUBLE                                6
#define CONST_STAT_ACOW_MK_TRIPLE                                20
#define CONST_STAT_ACOW_MK_QUATRA                                50
#define CONST_STAT_ACOW_MK_ULTRA                                 75
#define CONST_STAT_ACOW_MK_TEAM                                  100
#define CONST_STAT_ACOW_NOJOY                                    3
#define CONST_STAT_ACOW_REVENGE                                  1
#define CONST_STAT_ACOW_AFTERMATH                                1
#define CONST_STAT_ACOW_FIRSTBLOOD                               1
#define CONST_STAT_ACOW_BLUEPLATESPECIAL                         6
#define CONST_STAT_ACOW_STICKYKILL                               1
#define CONST_STAT_ACOW_HEADSHOT                                 1
#define CONST_STAT_ACOW_ARTILLERYSTRIKE                          3
#define CONST_STAT_ACOW_MELEE                                    1
#define CONST_STAT_ACOW_ROADKILL                                 1
#define CONST_STAT_ACOW_FLAG_CAPTURE                             30
#define CONST_STAT_ACOW_FLAG_GRAB                                1
#define CONST_STAT_ACOW_BK_GEN                                   2
#define CONST_STAT_ACOW_RABBITKILL                               1
#define CONST_STAT_ACOW_KILLASRABBIT                             1
#define CONST_STAT_ACOW_FINALBLOW                                4
#define CONST_STAT_ACOW_REPAIR                                   1
#define CONST_STAT_ACOW_BK_TURRET                                1
#define CONST_STAT_ACOW_ASSIST                                   1
#define CONST_STAT_ACOW_FLAG_RETURN                              1
#define CONST_STAT_ACOW_BK_RADAR                                 1
#define CONST_STAT_ACOW_FLAG_ASSIST                              1
#define CONST_STAT_ACOW_AIRMAIL                                  6
#define CONST_STAT_ACOW_HOTAIR                                   3
#define CONST_STAT_ACOW_GAME_COMPLETE                            1
#define CONST_STAT_ACOW_GAME_WINNER                              1
#define CONST_STAT_ACOW_FLAG_GRABDM                              1
#define CONST_STAT_ACOW_FLAG_HOLDER                              1
#define CONST_STAT_ACOW_FLAG_KILLER                              3
#define CONST_STAT_ACOW_FLAG_GRABFAST                            1
#define CONST_STAT_ACOW_DEFENSE_GEN                              1
#define CONST_STAT_ACOW_DEFENSE_FLAG                             1
#define CONST_STAT_ACOW_VD_BIKE                                  2
#define CONST_STAT_ACOW_VD_TANK                                  2
#define CONST_STAT_ACOW_VD_SHRIKE                                2
#define CONST_STAT_ACOW_FLAG_GRABE                               5
#define CONST_STAT_ACOW_FLAG_GRABLLAMA                           1
#define CONST_STAT_ACOW_ASSIST_VEHICLE                           1
#define CONST_STAT_ACOW_FLAG_GRABULTRA                           2
#define CONST_STAT_ACOW_BASEASSIST                               1
#define CONST_STAT_ACOW_TURRETASSIST                             1
#define CONST_STAT_AWD_CREDITS_EARNED                            204001
#define CONST_STAT_AWD_CREDITS_SPENT                             204002
#define CONST_STAT_AWD_DESTRUCTION_DEPLOYABLE                    204003
#define CONST_STAT_AWD_DESTRUCTION_VEHICLE                       204004
#define CONST_STAT_AWD_DISTANCE_HEADSHOT                         204005
#define CONST_STAT_AWD_DISTANCE_KILL                             204006
#define CONST_STAT_AWD_DISTANCE_SKIED                            204007
#define CONST_STAT_AWD_KILLS                                     204008
#define CONST_STAT_AWD_KILLS_DEPLOYABLE                          204009
#define CONST_STAT_AWD_KILLS_MIDAIR                              204010
#define CONST_STAT_AWD_KILLS_VEHICLE                             204011
#define CONST_STAT_AWD_REPAIRS                                   204012
#define CONST_STAT_AWD_SPEED_FLAGCAP                             204013
#define CONST_STAT_AWD_SPEED_FLAGGRAB                            204014
#define CONST_STAT_AWD_SPEED_SKIED                               204015
#define CONST_STAT_AWD_FLAG_RETURNS                              204016
#define CONST_STAT_AWD_DEATHS                                    204017
#define CONST_STAT_AWDW_CREDITS_EARNED                           98
#define CONST_STAT_AWDW_CREDITS_SPENT                            89
#define CONST_STAT_AWDW_DESTRUCTION_DEPLOYABLE                   84
#define CONST_STAT_AWDW_DESTRUCTION_VEHICLE                      88
#define CONST_STAT_AWDW_DISTANCE_HEADSHOT                        87
#define CONST_STAT_AWDW_DISTANCE_KILL                            93
#define CONST_STAT_AWDW_DISTANCE_SKIED                           90
#define CONST_STAT_AWDW_KILLS                                    86
#define CONST_STAT_AWDW_KILLS_DEPLOYABLE                         92
#define CONST_STAT_AWDW_KILLS_MIDAIR                             94
#define CONST_STAT_AWDW_KILLS_VEHICLE                            81
#define CONST_STAT_AWDW_REPAIRS                                  96
#define CONST_STAT_AWDW_SPEED_FLAGCAP                            -100
#define CONST_STAT_AWDW_SPEED_FLAGGRAB                           97
#define CONST_STAT_AWDW_SPEED_SKIED                              95
#define CONST_STAT_AWDW_FLAG_RETURNS                             85
#define CONST_STAT_AWDW_DEATHS                                   1
#define CONST_MIN_CREDITS_FOR_XP                                 100
#define CONST_FRIEND_REFERRAL_ACTIVITY                           115
#define CONST_HIDDEN_IF_UNEARNED_TYPE                            10378
#define CONST_FEET_TO_UNREAL_UNITS                               16
#define CONST_INDEX_DISPLAY_TARGET_INGAME                        0
#define CONST_INDEX_DISPLAY_TARGET_FOREGROUND                    1
#define CONST_INDEX_SEE_NORMAL_ENEMY                             0
#define CONST_INDEX_SEE_STEALTHED_ENEMY                          1
#define CONST_INDEX_SEE_LOW_HEALTH_ENEMY                         2
#define CONST_TR_TASKFORCE_NONE                                  0
#define CONST_TR_TASKFORCE_BLOODEAGLE                            1
#define CONST_TR_TASKFORCE_DIAMONDSWORD                          2
#define CONST_FADE_TIME                                          1.0f
#define CONST_MAX_HEARING_DISTANCE                               1300
#define CONST_TR_MAX_SLOTS_TO_EQUIP                              5
#define CONST__AddAsFriend                                       0
#define CONST__JoinInGame                                        1
#define CONST__InviteToParty                                     2
#define CONST__SendMessage                                       3
#define CONST__UpdateNotes                                       4
#define CONST__InviteToTribe                                     5
#define CONST__BlockPlayer                                       6
#define CONST__JoinInGame01                                      0
#define CONST__InviteToParty01                                   1
#define CONST__SendMessage01                                     2
#define CONST__UpdateNotes01                                     3
#define CONST__InviteToTribe01                                   4
#define CONST__RemoveFriend                                      5
#define CONST_Action_AddFriend                                   1
#define CONST_Action_SendMessage                                 2
#define CONST_Action_KickMember                                  3
#define CONST_QUI_CTF                                            10350
#define CONST_QUI_TeamRabbit                                     10351
#define CONST_QUI_Arena                                          10352
#define CONST_QUI_Rabbit                                         10353
#define CONST_QUI_Special                                        10354
#define CONST_QUI_CaptureAndHold                                 10377
#define CONST_MAX_NUM_ARENA_PLAYERS_PER_TEAM                     8
#define CONST_VALIDATE_HIT_DEFER                                 -1
#define CONST_VALIDATE_HIT_REJECT                                0
#define CONST_VALIDATE_HIT_APPROVE                               1
#define CONST_DEPLOYABLE_STARTING_HEALTH_PCT                     0.10f
#define CONST_MAX_SCANNER_SEE_FLAG                               2
#define CONST_MAX_SCANNER_DISPLAY_FLAG                           3
#define CONST_MAX_MULTISHOT_LOCATIONS                            8
#define CONST_VELOCITY_HISTORY_SIZE                              3
#define CONST_DEPLOYMODE_GROUND_DELTA_CHECK_DIST                 60.0f
#define CONST_DEPLOYMODE_MINIMUM_RADIUS_CHECK_DIST               30.0f
#define CONST_TR_MAX_FACTION_NBR                                 3
#define CONST_MESSAGE_SCORE_SWITCH_LIMIT                         0xFFF
#define CONST_MESSAGE_SCORE_SWITCH_TEAM                          17
#define CONST_MIN_PLAYERS_FOR_PERF_BONUS                         6
#define CONST_MIN_PLAYERS_FOR_PRIVATE_XP                         8
#define CONST_MAX_TRACERS                                        20
#define CONST_SPAWNED_VEHICLE_LIST_MASK                          0xF

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum TribesGame.AlienFXManager.FXOverlay
/*enum FXOverlay
{
	FXO_NONE                                           = 0,
	FXO_RAGE                                           = 1,
	FXO_REGEN                                          = 2,
	FXO_DYING                                          = 3,
	FXO_INVULN                                         = 4,
	FXO_JAMMER                                         = 5,
	FXO_SHIELD                                         = 6,
	FXO_STEALTH                                        = 7,
	FXO_MAX                                            = 8
};*/

// Enum TribesGame.AlienFXManager.FXArea
/*enum FXArea
{
	FXA_ALL                                            = 0,
	FXA_RIGHT                                          = 1,
	FXA_LEFT                                           = 2,
	FXA_UPPER                                          = 3,
	FXA_LOWER                                          = 4,
	FXA_FRONT                                          = 5,
	FXA_REAR                                           = 6,
	FXA_MAX                                            = 7
};*/

// Enum TribesGame.TrVGSCommandList.EVGSContextLocation
/*enum EVGSContextLocation
{
	VGSContext_None                                    = 0,
	VGSContext_InsideBase                              = 1,
	VGSContext_AroundBase                              = 2,
	VGSContext_BehindBase                              = 3,
	VGSContext_Midfield                                = 4,
	VGSContext_NearGenerator                           = 5,
	VGSContext_NearFlag                                = 6,
	VGSContext_NearBaseTurret                          = 7,
	VGSContext_NearVehiclePad                          = 8,
	VGSContext_MAX                                     = 9
};*/

// Enum TribesGame.TrVGSCommandList.EVGSScope
/*enum EVGSScope
{
	VGSScope_Team                                      = 0,
	VGSScope_Global                                    = 1,
	VGSScope_MAX                                       = 2
};*/

// Enum TribesGame.TrVGSCommandList.VGSCommandType
/*enum VGSCommandType
{
	VGSCommandType_GlobalYes                           = 0,
	VGSCommandType_GlobalNo                            = 1,
	VGSCommandType_GlobalHi                            = 2,
	VGSCommandType_GlobalBye                           = 3,
	VGSCommandType_GlobalOoops                         = 4,
	VGSCommandType_GlobalQuiet                         = 5,
	VGSCommandType_GlobalShazbot                       = 6,
	VGSCommandType_GlobalWoohoo                        = 7,
	VGSCommandType_GlobalComplimentAwesome             = 8,
	VGSCommandType_GlobalComplimentGoodGame            = 9,
	VGSCommandType_GlobalComplimentNiceMove            = 10,
	VGSCommandType_GlobalComplimentYouRock             = 11,
	VGSCommandType_GlobalComplimentGreatShot           = 12,
	VGSCommandType_GlobalRespondAnyTime                = 13,
	VGSCommandType_GlobalRespondDontKnow               = 14,
	VGSCommandType_GlobalRespondThanks                 = 15,
	VGSCommandType_GlobalRespondWait                   = 16,
	VGSCommandType_GlobalTauntAww                      = 17,
	VGSCommandType_GlobalTauntObnoxious                = 18,
	VGSCommandType_GlobalTauntBrag                     = 19,
	VGSCommandType_GlobalTauntSarcasm                  = 20,
	VGSCommandType_GlobalTauntLearn                    = 21,
	VGSCommandType_Attack                              = 22,
	VGSCommandType_AttackBase                          = 23,
	VGSCommandType_AttackChase                         = 24,
	VGSCommandType_AttackDisrupt                       = 25,
	VGSCommandType_AttackFlag                          = 26,
	VGSCommandType_AttackGenerator                     = 27,
	VGSCommandType_AttackReinforce                     = 28,
	VGSCommandType_AttackSensors                       = 29,
	VGSCommandType_AttackTurrets                       = 30,
	VGSCommandType_AttackVehicle                       = 31,
	VGSCommandType_AttackWait                          = 32,
	VGSCommandType_AttackPointA                        = 33,
	VGSCommandType_AttackPointB                        = 34,
	VGSCommandType_AttackPointC                        = 35,
	VGSCommandType_AttackPointD                        = 36,
	VGSCommandType_AttackPointE                        = 37,
	VGSCommandType_DefendBase                          = 38,
	VGSCommandType_DefendFlagCarrier                   = 39,
	VGSCommandType_DefendEntrances                     = 40,
	VGSCommandType_DefendFlag                          = 41,
	VGSCommandType_DefendGenerator                     = 42,
	VGSCommandType_DefendMe                            = 43,
	VGSCommandType_DefendReinforce                     = 44,
	VGSCommandType_DefendSensors                       = 45,
	VGSCommandType_DefendTurrets                       = 46,
	VGSCommandType_DefendVehicle                       = 47,
	VGSCommandType_DefendPointA                        = 48,
	VGSCommandType_DefendPointB                        = 49,
	VGSCommandType_DefendPointC                        = 50,
	VGSCommandType_DefendPointD                        = 51,
	VGSCommandType_DefendPointE                        = 52,
	VGSCommandType_RepairGenerator                     = 53,
	VGSCommandType_RepairSensors                       = 54,
	VGSCommandType_RepairTurrets                       = 55,
	VGSCommandType_RepairVehicle                       = 56,
	VGSCommandType_BaseClear                           = 57,
	VGSCommandType_EnemyInBase                         = 58,
	VGSCommandType_BaseRetake                          = 59,
	VGSCommandType_BaseSecure                          = 60,
	VGSCommandType_CommandAcknowledged                 = 61,
	VGSCommandType_CommandCompleted                    = 62,
	VGSCommandType_CommandDeclined                     = 63,
	VGSCommandType_CommandAssignment                   = 64,
	VGSCommandType_EnemyDisarray                       = 65,
	VGSCommandType_EnemyGeneratorDestroyed             = 66,
	VGSCommandType_EnemySensorsDestroyed               = 67,
	VGSCommandType_EnemyTurretsDestroyed               = 68,
	VGSCommandType_EnemyVehicleDestroyed               = 69,
	VGSCommandType_FlagDefend                          = 70,
	VGSCommandType_FlagIHave                           = 71,
	VGSCommandType_FlagGiveMe                          = 72,
	VGSCommandType_FlagSecure                          = 73,
	VGSCommandType_FlagRetrieve                        = 74,
	VGSCommandType_FlagSelfRetrieve                    = 75,
	VGSCommandType_FlagTake                            = 76,
	VGSCommandType_NeedCover                           = 77,
	VGSCommandType_NeedDriver                          = 78,
	VGSCommandType_NeedEscort                          = 79,
	VGSCommandType_NeedHoldVehicle                     = 80,
	VGSCommandType_NeedRide                            = 81,
	VGSCommandType_NeedSupport                         = 82,
	VGSCommandType_NeedVehicleReady                    = 83,
	VGSCommandType_NeedWhereTo                         = 84,
	VGSCommandType_SelfAttack                          = 85,
	VGSCommandType_SelfAttackBase                      = 86,
	VGSCommandType_SelfAttackFlag                      = 87,
	VGSCommandType_SelfAttackGenerator                 = 88,
	VGSCommandType_SelfAttackSensors                   = 89,
	VGSCommandType_SelfAttackTurrets                   = 90,
	VGSCommandType_SelfAttackVehicle                   = 91,
	VGSCommandType_SelfAttackPointA                    = 92,
	VGSCommandType_SelfAttackPointB                    = 93,
	VGSCommandType_SelfAttackPointC                    = 94,
	VGSCommandType_SelfAttackPointD                    = 95,
	VGSCommandType_SelfAttackPointE                    = 96,
	VGSCommandType_SelfDefendBase                      = 97,
	VGSCommandType_SelfDefend                          = 98,
	VGSCommandType_SelfDefendFlag                      = 99,
	VGSCommandType_SelfDefendGenerator                 = 100,
	VGSCommandType_SelfDefendSensors                   = 101,
	VGSCommandType_SelfDefendTurrets                   = 102,
	VGSCommandType_SelfDefendVehicle                   = 103,
	VGSCommandType_SelfDefendPointA                    = 104,
	VGSCommandType_SelfDefendPointB                    = 105,
	VGSCommandType_SelfDefendPointC                    = 106,
	VGSCommandType_SelfDefendPointD                    = 107,
	VGSCommandType_SelfDefendPointE                    = 108,
	VGSCommandType_SelfRepairBase                      = 109,
	VGSCommandType_SelfRepairGenerator                 = 110,
	VGSCommandType_SelfRepairSensors                   = 111,
	VGSCommandType_SelfRepairTurrets                   = 112,
	VGSCommandType_SelfRepairVehicle                   = 113,
	VGSCommandType_SelfTaskCover                       = 114,
	VGSCommandType_SelfTaskDefenses                    = 115,
	VGSCommandType_SelfTaskForcefield                  = 116,
	VGSCommandType_SelfTaskOnIt                        = 117,
	VGSCommandType_SelfTaskDeploySensors               = 118,
	VGSCommandType_SelfTaskDeployTurrets               = 119,
	VGSCommandType_SelfTaskVehicle                     = 120,
	VGSCommandType_SelfUpgradeGenerator                = 121,
	VGSCommandType_SelfUpgradeSensors                  = 122,
	VGSCommandType_SelfUpgradeTurrets                  = 123,
	VGSCommandType_TargetAcquired                      = 124,
	VGSCommandType_TargetBase                          = 125,
	VGSCommandType_TargetDestroyed                     = 126,
	VGSCommandType_TargetFlag                          = 127,
	VGSCommandType_TargetFireOnMy                      = 128,
	VGSCommandType_TargetNeed                          = 129,
	VGSCommandType_TargetSensors                       = 130,
	VGSCommandType_TargetTurret                        = 131,
	VGSCommandType_TargetVehicle                       = 132,
	VGSCommandType_TargetWait                          = 133,
	VGSCommandType_UpgradeGenerator                    = 134,
	VGSCommandType_UpgradeSensors                      = 135,
	VGSCommandType_UpgradeTurrets                      = 136,
	VGSCommandType_WarnEnemies                         = 137,
	VGSCommandType_WarnVehicle                         = 138,
	VGSCommandType_TeamYes                             = 139,
	VGSCommandType_TeamNo                              = 140,
	VGSCommandType_TeamAnytime                         = 141,
	VGSCommandType_TeamBaseSecure                      = 142,
	VGSCommandType_TeamCeaseFire                       = 143,
	VGSCommandType_TeamDontKnow                        = 144,
	VGSCommandType_TeamHelp                            = 145,
	VGSCommandType_TeamMove                            = 146,
	VGSCommandType_TeamSorry                           = 147,
	VGSCommandType_TeamThanks                          = 148,
	VGSCommandType_TeamWait                            = 149,
	VGSCommandType_MAX                                 = 150
};*/

// Enum TribesGame.TrVGSCommandList.EVGSContextActor
/*enum EVGSContextActor
{
	VGSContextActors_None                              = 0,
	VGSContextActors_ActorLightPawn                    = 1,
	VGSContextActors_ActorMediumPawn                   = 2,
	VGSContextActors_ActorHeavyPawn                    = 3,
	VGSContextActors_ActorTurret                       = 4,
	VGSContextActors_ActorSensor                       = 5,
	VGSContextActors_ActorVehicle                      = 6,
	VGSContextActors_ActorDeployable                   = 7,
	VGSContextActors_MAX                               = 8
};*/

// Enum TribesGame.GFxTrMenuMoviePlayer.AcquisitionType
/*enum AcquisitionType
{
	AT_STANDARD                                        = 0,
	AT_USEDGOLD                                        = 1,
	AT_USEDXP                                          = 2,
	AT_VIP                                             = 3,
	AT_BOOST                                           = 4,
	AT_FWOTD                                           = 5,
	AT_PROMO                                           = 6,
	AT_CLASS                                           = 7,
	AT_SKILL                                           = 8,
	AT_MAX                                             = 9
};*/

// Enum TribesGame.GFxTrMenuMoviePlayer.POPUPTYPE
/*enum POPUPTYPE
{
	PUT_NONE                                           = 0,
	PUT_STEAM_INIT                                     = 1,
	PUT_STEAM_FINALIZE                                 = 2,
	PUT_STEAM_DECLINED                                 = 3,
	PUT_STEAM_BADDATA                                  = 4,
	PUT_MAX                                            = 5
};*/

// Enum TribesGame.GFxTrMenuSounds.EMenuSound
/*enum EMenuSound
{
	EMS_CLASS_ROLLOVER                                 = 0,
	EMS_CLASS_SELECTED                                 = 1,
	EMS_CLASS_UNLOCKED                                 = 2,
	EMS_CLASS_DENIED                                   = 3,
	EMS_SKILL_ROLLOVER                                 = 4,
	EMS_SKILL_SELECTED                                 = 5,
	EMS_SKILL_UNLOCKED                                 = 6,
	EMS_QUEUE_SELECTED                                 = 7,
	EMS_QUEUE_EXIT                                     = 8,
	EMS_TOOLTIP_OPEN                                   = 9,
	EMS_TOOLTIP_CLOSE                                  = 10,
	EMS_XP_GAIN                                        = 11,
	EMS_XP_POINT_POSITIVE                              = 12,
	EMS_XP_POINT_NEGATIVE                              = 13,
	EMS_PAGE_FORWARD                                   = 14,
	EMS_PAGE_BACK                                      = 15,
	EMS_MAX                                            = 16
};*/

// Enum TribesGame.TrObject.EffectFormMatTypes
/*enum EffectFormMatTypes
{
	MAT_None                                           = 0,
	MAT_Stealth                                        = 1,
	MAT_Shield                                         = 2,
	MAT_MAX                                            = 3
};*/

// Enum TribesGame.TrObject.TeamAssignTypes
/*enum TeamAssignTypes
{
	TAT_BALANCED                                       = 0,
	TAT_UNBALANCED                                     = 1,
	TAT_AUTOASSIGN                                     = 2,
	TAT_MAX                                            = 3
};*/

// Enum TribesGame.TrObject.TrMiscMessages
/*enum TrMiscMessages
{
	TrMISC_BloodEagleBoughtHerc                        = 0,
	TrMISC_DiamondSwordBoughtHerc                      = 1,
	TrMISC_BloodEagleCloseToWin                        = 2,
	TrMISC_DiamondSwordCloseToWin                      = 3,
	TrMISC_MAX                                         = 4
};*/

// Enum TribesGame.TrObject.EArmorType
/*enum EArmorType
{
	ARMOR_Light                                        = 0,
	ARMOR_Medium                                       = 1,
	ARMOR_Heavy                                        = 2,
	ARMOR_MAX                                          = 3
};*/

// Enum TribesGame.TrObject.ETrPlayerCallIns
/*enum ETrPlayerCallIns
{
	TRCALLIN_None                                      = 0,
	TrCallIn_SupportInventory                          = 1,
	TrCallIn_OrbitalStrike                             = 2,
	TrCallIn_TacticalStrike                            = 3,
	ETrPlayerCallIns_MAX                               = 4
};*/

// Enum TribesGame.TrObject.ESettingsList
/*enum ESettingsList
{
	ESL_KEYBIND_START                                  = 0,
	ESL_MOVE_FORWARD                                   = 1,
	ESL_MOVE_BACKWARD                                  = 2,
	ESL_STRAFE_LEFT                                    = 3,
	ESL_STRAFE_RIGHT                                   = 4,
	ESL_DO_SKI                                         = 5,
	ESL_DO_JUMP                                        = 6,
	ESL_DO_JETPACK                                     = 7,
	ESL_DO_JUMPJETPACK                                 = 8,
	ESL_DO_JUMPSKI                                     = 9,
	ESL_TOGGLE_SKI                                     = 10,
	ESL_DO_ZOOM                                        = 11,
	ESL_FIRE_WEAPON                                    = 12,
	ESL_RELOAD                                         = 13,
	ESL_NEXT_WEAPON                                    = 14,
	ESL_WEAPON_SWITCH_FILTER                           = 15,
	ESL_WEAPON_SWITCH_FILTER2                          = 16,
	ESL_USE                                            = 17,
	ESL_ACTIVATE_MELEE                                 = 18,
	ESL_ACTIVATE_PACK                                  = 19,
	ESL_ACTIVATE_BELT                                  = 20,
	ESL_TOGGLE_MENU_CLASS                              = 21,
	ESL_SHOW_SCORES                                    = 22,
	ESL_SHOW_OBJECTIVES                                = 23,
	ESL_DROP_FLAG                                      = 24,
	ESL_TALK                                           = 25,
	ESL_TALK_TEAM                                      = 26,
	ESL_TALK_REPLY                                     = 27,
	ESL_HORN                                           = 28,
	ESL_BEGIN_VGS                                      = 29,
	ESL_CALLIN_ONE                                     = 30,
	ESL_CALLIN_TWO                                     = 31,
	ESL_CALLIN_THREE                                   = 32,
	ESL_TYPE_KEY                                       = 33,
	ESL_WEAPON_PRIMARY                                 = 34,
	ESL_WEAPON_SECONDARY                               = 35,
	ESL_SWITCH_SEAT_ONE                                = 36,
	ESL_SWITCH_SEAT_TWO                                = 37,
	ESL_SWITCH_SEAT_THREE                              = 38,
	ESL_SWITCH_SEAT_FOUR                               = 39,
	ESL_SWITCH_SEAT_FIVE                               = 40,
	ESL_SWITCH_SEAT_SIX                                = 41,
	ESL_SUICIDE                                        = 42,
	ESL_SPOT_TARGET                                    = 43,
	ESL_THIRD_PERSON                                   = 44,
	ESL_FREE_LOOK                                      = 45,
	ESL_TEAM_SELECT                                    = 46,
	ESL_SUPPRESS_HELP                                  = 47,
	ESL_QUICKCLASSES                                   = 48,
	ESL_FRIENDS                                        = 49,
	ESL_SETTINGS                                       = 50,
	ESL_MAINMENU                                       = 51,
	ESL_HOTKEY1                                        = 52,
	ESL_HOTKEY2                                        = 53,
	ESL_HOTKEY3                                        = 54,
	ESL_HOTKEY4                                        = 55,
	ESL_HOTKEY5                                        = 56,
	ESL_HOTKEY6                                        = 57,
	ESL_HOTKEY7                                        = 58,
	ESL_HOTKEY8                                        = 59,
	ESL_HOTKEY9                                        = 60,
	ESL_CHAT                                           = 61,
	ESL_SPECTATE_MOVEUP                                = 62,
	ESL_SPECTATE_MOVEDOWN                              = 63,
	ESL_SPECTATE_MOVEFORWARD                           = 64,
	ESL_SPECTATE_MOVEBACKWARD                          = 65,
	ESL_SPECTATE_TURNLEFT                              = 66,
	ESL_SPECTATE_TURNRIGHT                             = 67,
	ESL_SPECTATE_STRAFELEFT                            = 68,
	ESL_SPECTATE_STRAFERIGHT                           = 69,
	ESL_SPECTATE_CAMERAX                               = 70,
	ESL_SPECTATE_CAMERAY                               = 71,
	ESL_SPECTATE_SPEEDINCREASE                         = 72,
	ESL_SPECTATE_SPEEDDECREASE                         = 73,
	ESL_SPECTATE_VIEWNEXTPLAYER                        = 74,
	ESL_SPECTATE_VIEWPREVPLAYER                        = 75,
	ESL_SPECTATE_VIEWSELF                              = 76,
	ESL_SPECTATE_VIEWBOOKMARKS                         = 77,
	ESL_SPECTATE_VIEWGENERATORS                        = 78,
	ESL_SPECTATE_VIEWSTANDS                            = 79,
	ESL_SPECTATE_VIEWFLAGS                             = 80,
	ESL_SPECTATE_SHOWCONTROLS                          = 81,
	ESL_SPECTATE_SHOWHUD                               = 82,
	ESL_SPECTATE_SHOWSCORES                            = 83,
	ESL_SPECTATE_TYPE_KEY                              = 84,
	ESL_SPECTATE_CHANGETEAM                            = 85,
	ESL_SPECTATE_VEHICLES                              = 86,
	ESL_SPECTATE_FASTESTPLAYER                         = 87,
	ESL_SPECTATE_OBJECTIVES                            = 88,
	ESL_SPECTATE_LOCKVIEW                              = 89,
	ESL_KEYBIND_END                                    = 90,
	ESL_CONTROL_START                                  = 91,
	ESL_MOUSESENSITIVITY                               = 92,
	ESL_FLYINGPITCHSENSITIVITY                         = 93,
	ESL_FLYINGYAWSENSITIVITY                           = 94,
	ESL_MOUSEINVERT                                    = 95,
	ESL_VEHICLEINVERT                                  = 96,
	ESL_MOUSESMOOTHING                                 = 97,
	ESL_FOV                                            = 98,
	ESL_TOGGLEZOOM                                     = 99,
	ESL_DISABLEHELP                                    = 100,
	ESL_HUDOBJECTIVES                                  = 101,
	ESL_TINYWEAPONS                                    = 102,
	ESL_DAMAGECOUNTER                                  = 103,
	ESL_ALIENFX                                        = 104,
	ESL_CHATFILTER                                     = 105,
	ESL_HUDFRIENDSNOTIFY                               = 106,
	ESL_WHISPERNOTIFY                                  = 107,
	ESL_CONTROL_END                                    = 108,
	ESL_AUDIO_START                                    = 109,
	ESL_MASTER                                         = 110,
	ESL_EFFECTS                                        = 111,
	ESL_MUSIC                                          = 112,
	ESL_VGS                                            = 113,
	ESL_VOICE                                          = 114,
	ESL_BASSBOOST                                      = 115,
	ESL_AUDIO_END                                      = 116,
	EAKC_MAX                                           = 117,
	ESettingsList_MAX                                  = 118
};*/

// Enum TribesGame.TrObject.CaHCapturePointLabel
/*enum CaHCapturePointLabel
{
	CaHCapturePoint_A                                  = 0,
	CaHCapturePoint_B                                  = 1,
	CaHCapturePoint_C                                  = 2,
	CaHCapturePoint_D                                  = 3,
	CaHCapturePoint_E                                  = 4,
	CaHCapturePoint_MAX                                = 5
};*/

// Enum TribesGame.TrObject.ServerPropType
/*enum ServerPropType
{
	SPT_GAME                                           = 0,
	SPT_QUEUE                                          = 1,
	SPT_MAX                                            = 2
};*/

// Enum TribesGame.TrObject.TrClassType
/*enum TrClassType
{
	TCT_PTH                                            = 0,
	TCT_SEN                                            = 1,
	TCT_INF                                            = 2,
	TCT_SLD                                            = 3,
	TCT_TCN                                            = 4,
	TCT_RDR                                            = 5,
	TCT_JUG                                            = 6,
	TCT_DMB                                            = 7,
	TCT_BRT                                            = 8,
	TCT_MAX                                            = 9
};*/

// Enum TribesGame.TrObject.LoadoutSlotTypes
/*enum LoadoutSlotTypes
{
	LST_DEFAULT                                        = 0,
	LST_ONE                                            = 1,
	LST_TWO                                            = 2,
	LST_THREE                                          = 3,
	LST_FOUR                                           = 4,
	LST_FIVE                                           = 5,
	LST_MAX                                            = 6
};*/

// Enum TribesGame.TrObject.SpawnTypes
/*enum SpawnTypes
{
	EST_NORMAL                                         = 0,
	EST_PTHSLDJUG                                      = 1,
	EST_NAKEDPTH                                       = 2,
	EST_MAX                                            = 3
};*/

// Enum TribesGame.TrObject.EContentDataType
/*enum EContentDataType
{
	CDT_None                                           = 0,
	CDT_CTF                                            = 1,
	CDT_RemoveFriend                                   = 2,
	CDT_AddFriend                                      = 3,
	CDT_Login                                          = 4,
	CDT_BuyGold                                        = 5,
	CDT_BuyBoost                                       = 6,
	CDT_InviteToParty                                  = 7,
	CDT_JoinGame                                       = 8,
	CDT_MapRoaming                                     = 9,
	CDT_PlayNow                                        = 10,
	CDT_Rabbit                                         = 11,
	CDT_MainMenu                                       = 12,
	CDT_Settings                                       = 13,
	CDT_SkiingTutorial                                 = 14,
	CDT_TeamDeathMatch                                 = 15,
	CDT_TargetPractice                                 = 16,
	CDT_SkiChallenge                                   = 17,
	CDT_QuickMatch                                     = 18,
	CDT_RankedMatch                                    = 19,
	CDT_Arena                                          = 20,
	CDT_Bundle_Inf_Prem                                = 21,
	CDT_Bundle_Inf_Merc                                = 22,
	CDT_Bundle_Inf_Asn                                 = 23,
	CDT_Bundle_Inf_Wep                                 = 24,
	CDT_PrivateServer                                  = 25,
	CDT_CaptureAndHold                                 = 26,
	CDT_ChangeName                                     = 27,
	CDT_Bundle_Rdr_Prem                                = 28,
	CDT_Bundle_Rdr_Gvr                                 = 29,
	CDT_Bundle_Rdr_Merc                                = 30,
	CDT_Bundle_Rdr_Wep                                 = 31,
	CDT_Bundle_Brt_Wep                                 = 32,
	CDT_Bundle_LoG                                     = 33,
	CDT_StarterPack                                    = 34,
	CDT_Bundle_Twinfusor                               = 35,
	CDT_Bundle_SkinPack                                = 36,
	CDT_Bundle_Specialist                              = 37,
	CDT_MAX                                            = 38
};*/

// Enum TribesGame.TrObject.ReticuleDataType
/*enum ReticuleDataType
{
	RDT_TYPE                                           = 0,
	RDT_COLOR                                          = 1,
	RDT_OPACITY                                        = 2,
	RDT_MAX                                            = 3
};*/

// Enum TribesGame.TrObject.EVehicleTypes
/*enum EVehicleTypes
{
	VEHICLE_GravCycle                                  = 0,
	VEHICLE_Shrike                                     = 1,
	VEHICLE_Beowulf                                    = 2,
	VEHICLE_HERC                                       = 3,
	VEHICLE_Havoc                                      = 4,
	VEHICLE_MAX                                        = 5
};*/

// Enum TribesGame.TrObject.EWeaponTracerType
/*enum EWeaponTracerType
{
	WTT_PistolBullet                                   = 0,
	WTT_ChainGunBullet                                 = 1,
	WTT_MAX                                            = 2
};*/

// Enum TribesGame.TrObject.DeployModeStatus
/*enum DeployModeStatus
{
	DMS_None                                           = 0,
	DMS_CannotFire                                     = 1,
	DMS_CannotPlace                                    = 2,
	DMS_OK                                             = 3,
	DMS_MAX                                            = 4
};*/

// Enum TribesGame.TrObject.EffectCalcMethod
/*enum EffectCalcMethod
{
	TRCM_NA                                            = 0,
	TRCM_ADD                                           = 1,
	TRCM_SUBTRACT                                      = 2,
	TRCM_PERC_INCREASE                                 = 3,
	TRCM_PERC_DECREASE                                 = 4,
	TRCM_STATIC                                        = 5,
	TRCM_MAX                                           = 6
};*/

// Enum TribesGame.TrObject.EffectFormPriority
/*enum EffectFormPriority
{
	TR_EF_NORMAL                                       = 0,
	TR_EF_SHIELD                                       = 1,
	TR_EF_STEALTH                                      = 2,
	TR_EF_MAX                                          = 3
};*/

// Enum TribesGame.TrObject.DeviceAttackType
/*enum DeviceAttackType
{
	TRTT_ATTCK_NA                                      = 0,
	TRTT_ATTACK_INSTANT                                = 1,
	TRTT_ATTACK_PROJECTILE                             = 2,
	TRTT_ATTACK_DEPLOYABLE                             = 3,
	TRTT_ATTACK_SPAWN_PET                              = 4,
	TRTT_ATTACK_TELEPORT                               = 5,
	TRTT_MAX                                           = 6
};*/

// Enum TribesGame.TrObject.DeviceTargeterType
/*enum DeviceTargeterType
{
	TRDTT_None                                         = 0,
	TRDTT_Self                                         = 1,
	TRDTT_Friend                                       = 2,
	TRDTT_Enemy                                        = 3,
	TRDTT_Enemy_And_Self                               = 4,
	TRDTT_Friend_Only                                  = 5,
	TRDTT_All                                          = 6,
	TRDTT_MAX                                          = 7
};*/

// Enum TribesGame.TrObject.TR_WIDGET_SUBTYPES
/*enum TR_WIDGET_SUBTYPES
{
	IST_NONE                                           = 0,
	IST_DEVICE_MELEE                                   = 1,
	IST_DEVICE_RANGED                                  = 2,
	IST_DEVICE_SPECIALTY                               = 3,
	IST_DEVICE_JETPACK                                 = 4,
	IST_DEVICE_TOGGLE                                  = 5,
	IST_DEVICE_GRENADE                                 = 6,
	IST_DEVICE_BELT                                    = 7,
	IST_DEVICE_DEPLOYABLE                              = 8,
	IST_DEVICE_REST                                    = 9,
	IST_MAX                                            = 10
};*/

// Enum TribesGame.TrObject.EMissileLock
/*enum EMissileLock
{
	EMissileLockNone                                   = 0,
	EMissileLocking                                    = 1,
	EMissileLocked                                     = 2,
	EMissileFired                                      = 3,
	EMissilePotentialTarget                            = 4,
	EMissileLock_MAX                                   = 5
};*/

// Enum TribesGame.TrObject.TR_EQUIP_POINT
/*enum TR_EQUIP_POINT
{
	EQP_NONE                                           = 0,
	EQP_Melee                                          = 1,
	EQP_Primary                                        = 2,
	EQP_Secondary                                      = 3,
	EQP_Pack                                           = 4,
	EQP_Belt                                           = 5,
	EQP_Deployable                                     = 6,
	EQP_LaserTarget                                    = 7,
	EQP_Armor                                          = 8,
	EQP_PerkA                                          = 9,
	EQP_PerkB                                          = 10,
	EQP_Skin                                           = 11,
	EQP_Voice                                          = 12,
	EQP_MAX                                            = 13
};*/

// Enum TribesGame.TrObject.TgSupportedAspectRatios
/*enum TgSupportedAspectRatios
{
	TgAR_4x3                                           = 0,
	TgAR_5x4                                           = 1,
	TgAR_16x9                                          = 2,
	TgAR_16x10                                         = 3,
	TgAR_Other                                         = 4,
	TgAR_MAX                                           = 5
};*/

// Enum TribesGame.TrObject.TrCreditEventType
/*enum TrCreditEventType
{
	PlayerKillEvent                                    = 0,
	PlayerDeathEvent                                   = 1,
	FlagCaptureEvent                                   = 2,
	FlagPickupEvent                                    = 3,
	FlagReturnEvent                                    = 4,
	FiveKillStreakEvent                                = 5,
	TenKillStreakEvent                                 = 6,
	FifteenKillStreakEvent                             = 7,
	TwentyKillStreakEvent                              = 8,
	TwentyFiveKillStreakEvent                          = 9,
	PlayerKillAssistEvent                              = 10,
	FiveSnipingStreakEvent                             = 11,
	TenSnipingStreakEvent                              = 12,
	FifteenSnipingStreakEvent                          = 13,
	FiveExplosiveStreakEvent                           = 14,
	TenExplosiveStreakEvent                            = 15,
	FifteenExplosiveStreakEvent                        = 16,
	FiveSpinfusorStreakEvent                           = 17,
	TenSpinfusorStreakEvent                            = 18,
	FifteenSpinfusorStreakEvent                        = 19,
	DoubleKillEvent                                    = 20,
	TripleKillEvent                                    = 21,
	QuatraKillEvent                                    = 22,
	UltraKillEvent                                     = 23,
	TeamKillEvent                                      = 24,
	SpreeEndedEvent                                    = 25,
	RevengeEvent                                       = 26,
	AftermathEvent                                     = 27,
	FirstBloodEvent                                    = 28,
	BluePlateSpecialEvent                              = 29,
	StickyKillEvent                                    = 30,
	HeadShotEvent                                      = 31,
	ArtilleryShotEvent                                 = 32,
	MeleeKillEvent                                     = 33,
	SquishEvent                                        = 34,
	GeneratorKillEvent                                 = 35,
	GeneratorRepairEvent                               = 36,
	BaseTurretKillEvent                                = 37,
	BaseTurretRepairEvent                              = 38,
	RabbitKillEvent                                    = 39,
	KillAsRabbitEvent                                  = 40,
	FinalBlowEvent                                     = 41,
	SuicideEvent                                       = 42,
	OffhandKillCredit                                  = 43,
	TeamKillCredit                                     = 44,
	TrCreditEventType_MAX                              = 45
};*/

// Enum TribesGame.TrObject.OverlayType
/*enum OverlayType
{
	OT_UNKNOWN                                         = 0,
	OT_PLAYER                                          = 1,
	OT_OBJECTIVE                                       = 2,
	OT_DEPLOYABLE                                      = 3,
	OT_VEHICLE                                         = 4,
	OT_MAX                                             = 5
};*/

// Enum TribesGame.TrObject.EffectType
/*enum EffectType
{
	ET_None                                            = 0,
	ET_Hit                                             = 1,
	ET_Fire                                            = 2,
	ET_Equip                                           = 3,
	ET_Active                                          = 4,
	ET_MAX                                             = 5
};*/

// Enum TribesGame.TrObject.DAMAGE_INFO_TYPE
/*enum DAMAGE_INFO_TYPE
{
	DIT_Death                                          = 0,
	DIT_Damage                                         = 1,
	DIT_Status                                         = 2,
	DIT_Healing                                        = 3,
	DIT_Objective                                      = 4,
	DIT_Experience                                     = 5,
	DIT_MAX                                            = 6
};*/

// Enum TribesGame.TrObject.TR_HIDEABLE_HUD_ELEMENT
/*enum TR_HIDEABLE_HUD_ELEMENT
{
	DeviceBar                                          = 0,
	BuffBar                                            = 1,
	ChatBox                                            = 2,
	AlertBox                                           = 3,
	Minimap                                            = 4,
	MissionInfo                                        = 5,
	PlayerInfo                                         = 6,
	TeamInfo                                           = 7,
	Reticle                                            = 8,
	OmegaAlert                                         = 9,
	AgentInfo                                          = 10,
	QuestTracking                                      = 11,
	AllElements                                        = 12,
	TR_HIDEABLE_HUD_ELEMENT_MAX                        = 13
};*/

// Enum TribesGame.TrObject.GAME_TYPE
/*enum GAME_TYPE
{
	TGT_CTF                                            = 0,
	TGT_RAB                                            = 1,
	TGT_TDM                                            = 2,
	TGT_ARN                                            = 3,
	TGT_CAH                                            = 4,
	TGT_MAX                                            = 5
};*/

// Enum TribesGame.TrObject.GAME_WIN_STATE
/*enum GAME_WIN_STATE
{
	GWS_NONE                                           = 0,
	GWS_DEFENDER_WON                                   = 1,
	GWS_ATTACKER_WON                                   = 2,
	GWS_TIE                                            = 3,
	GWS_MAX                                            = 4
};*/

// Enum TribesGame.TrFriendManager.EOnlineState
/*enum EOnlineState
{
	EOS_OFFLINE                                        = 0,
	EOS_ONLINE                                         = 1,
	EOS_INGAME                                         = 2,
	EOS_MAX                                            = 3
};*/

// Enum TribesGame.GFxTrPage_Class.MENU_ACTION_CLASS
/*enum MENU_ACTION_CLASS
{
	MAC_PRIMARY                                        = 0,
	MAC_SECONDARY                                      = 1,
	MAC_BELT                                           = 2,
	MAC_PACK                                           = 3,
	MAC_ARMOR                                          = 4,
	MAC_PERKA                                          = 5,
	MAC_PERKB                                          = 6,
	MAC_SKIN                                           = 7,
	MAC_VOICE                                          = 8,
	MAC_MAX                                            = 9
};*/

// Enum TribesGame.GFxTrPage_Login.MENU_ACTION_LOGIN
/*enum MENU_ACTION_LOGIN
{
	MAL_LOAD                                           = 0,
	MAL_SUBMIT                                         = 1,
	MAL_BETAKEY                                        = 2,
	MAL_EXIT                                           = 3,
	MAL_HELPUSERNAME                                   = 4,
	MAL_HELPPASSWORD                                   = 5,
	MAL_NEWACCOUNT                                     = 6,
	MAL_REMEMBERME                                     = 7,
	MAL_MAX                                            = 8
};*/

// Enum TribesGame.GFxTrPage_Main.EFEATURES
/*enum EFEATURES
{
	FEA_DOTD                                           = 0,
	FEA_BUNDLEA                                        = 1,
	FEA_BUNDLEB                                        = 2,
	FEA_BUNDLEC                                        = 3,
	FEA_MAX                                            = 4
};*/

// Enum TribesGame.GFxTrPage_VideoGraphics.MENU_ACTION_VIDEOGRAPHICS
/*enum MENU_ACTION_VIDEOGRAPHICS
{
	MAVG_MINIMAL                                       = 0,
	MAVG_LOW                                           = 1,
	MAVG_MEDIUM                                        = 2,
	MAVG_HIGH                                          = 3,
	MAVG_VERYHIGH                                      = 4,
	MAVG_MAX                                           = 5
};*/

// Enum TribesGame.GFxTrPage_VideoWindow.MENU_ACTION_VIDEOWINDOW
/*enum MENU_ACTION_VIDEOWINDOW
{
	MAVW_FULLSCREEN                                    = 0,
	MAVW_WINDOWED                                      = 1,
	MAVW_BORDERLESS                                    = 2,
	MAVW_MAX                                           = 3
};*/

// Enum TribesGame.GFxTrPage_WhisperSettings.MENU_ACTION_WHISPER_NOTIFY_TYPE
/*enum MENU_ACTION_WHISPER_NOTIFY_TYPE
{
	MAWNT_SHOWALL                                      = 0,
	MAWNT_ONLYFRIENDS                                  = 1,
	MAWNT_NOBODY                                       = 2,
	MAVNT_MAX                                          = 3,
	MENU_ACTION_WHISPER_NOTIFY_TYPE_MAX                = 4
};*/

// Enum TribesGame.TrAnimNodeBlendByFlagDirection.EFlagAnimTypes
/*enum EFlagAnimTypes
{
	FlagAnim_Idle                                      = 0,
	FlagAnim_Forward                                   = 1,
	FlagAnim_Back                                      = 2,
	FlagAnim_Left                                      = 3,
	FlagAnim_Right                                     = 4,
	FlagAnim_Up                                        = 5,
	FlagAnim_Down                                      = 6,
	FlagAnim_None                                      = 7,
	FlagAnim_MAX                                       = 8
};*/

// Enum TribesGame.TrAnimNodeBlendByFlying.EFlyDirTypes
/*enum EFlyDirTypes
{
	FLY_Forward                                        = 0,
	FLY_Back                                           = 1,
	FLY_Left                                           = 2,
	FLY_Right                                          = 3,
	FLY_Up                                             = 4,
	FLY_Down                                           = 5,
	FLY_UpMidair                                       = 6,
	FLY_None                                           = 7,
	FLY_MAX                                            = 8
};*/

// Enum TribesGame.TrAnimNodeBlendByVehicle.EVehicleAnims
/*enum EVehicleAnims
{
	VANIM_NoVehicle                                    = 0,
	VANIM_Driving                                      = 1,
	VANIM_Enter                                        = 2,
	VANIM_Exit                                         = 3,
	VANIM_ChangeSeat                                   = 4,
	VANIM_MAX                                          = 5
};*/

// Enum TribesGame.TrAnimNodeTurnInPlace.ForcedTransitionAngle
/*enum ForcedTransitionAngle
{
	FTA_NONE                                           = 0,
	FTA                                                = 1,
	FTA01                                              = 2,
	FTA_MAX                                            = 3
};*/

// Enum TribesGame.TrArenaStats.ManGraphicState
/*enum ManGraphicState
{
	ManGraphic_Hidden                                  = 0,
	ManGraphic_HasSpawnsLeft                           = 1,
	ManGraphic_OutOfSpawns                             = 2,
	ManGraphic_CrossedOffList                          = 3,
	ManGraphic_MAX                                     = 4
};*/

// Enum TribesGame.TrHelpTextManager.EHelpTextType
/*enum EHelpTextType
{
	HelpText_SkiingHowTo                               = 0,
	HelpText_GeneratorDescriptionLevel1                = 1,
	HelpText_GeneratorDescriptionLevel2                = 2,
	HelpText_GeneratorDescriptionLevel3                = 3,
	HelpText_GeneratorDescriptionLevel4                = 4,
	HelpText_JetpackHowTo                              = 5,
	HelpText_OutOfAmmoNotifier                         = 6,
	HelpText_OffhandReminder                           = 7,
	HelpText_CTFFlagDescription                        = 8,
	HelpText_HoldingEnemyFlagDescription               = 9,
	HelpText_RabbitFlagDescription                     = 10,
	HelpText_HoldingRabbitFlagDescription              = 11,
	HelpText_InventoryStationDescription               = 12,
	HelpText_VehicleStationDescription                 = 13,
	HelpText_BaseTurretDescriptionLevel1               = 14,
	HelpText_BaseTurretDescriptionLevel2               = 15,
	HelpText_BaseTurretDescriptionLevel3               = 16,
	HelpText_BaseTurretDescriptionLevel4               = 17,
	HelpText_RadarSensorDescriptionLevel1              = 18,
	HelpText_RadarSensorDescriptionLevel2              = 19,
	HelpText_RadarSensorDescriptionLevel3              = 20,
	HelpText_RadarSensorDescriptionLevel4              = 21,
	HelpText_RepairStationDescription                  = 22,
	HelpText_ArmoredTargetDescription                  = 23,
	HelpText_CreditsDescription                        = 24,
	HelpText_YouCanPickupPassengerReminder             = 25,
	HelpText_ConduitDescription                        = 26,
	HelpText_SpotTargetReminder                        = 27,
	HelpText_ChangingClassDescription                  = 28,
	HelpText_ChangingClassHowTo                        = 29,
	HelpText_MAX                                       = 30
};*/

// Enum TribesGame.TrPawn.PhysicsType
/*enum PhysicsType
{
	PhysType_SpeedCap                                  = 0,
	PhysType_AccelCap                                  = 1,
	PhysType_NoCap                                     = 2,
	PhysType_MAX                                       = 3
};*/

// Enum TribesGame.TrPawn.WalkingDeceleration
/*enum WalkingDeceleration
{
	WalkingDeceleration_None                           = 0,
	WalkingDeceleration_A                              = 1,
	WalkingDeceleration_B                              = 2,
	WalkingDeceleration_C                              = 3,
	WalkingDeceleration_D                              = 4,
	WalkingDeceleration_E                              = 5,
	WalkingDeceleration_MAX                            = 6
};*/

// Enum TribesGame.TrCamera_SpectatorBookmark.ESpectatorBookmark
/*enum ESpectatorBookmark
{
	Bookmark_BEBase                                    = 0,
	Bookmark_DSBase                                    = 1,
	Bookmark_CTFBEGeneratorRoom                        = 2,
	Bookmark_CTFDSGeneratorRoom                        = 3,
	Bookmark_CTFBEMidfield                             = 4,
	Bookmark_CTFDSMidfield                             = 5,
	Bookmark_CTFMapOverhead                            = 6,
	Bookmark_CTFBEVehiclePad                           = 7,
	Bookmark_CTFDSVehiclePad                           = 8,
	Bookmark_CTFBESpawn                                = 9,
	Bookmark_CTFDSSpawn                                = 10,
	Bookmark_CTFBESensor                               = 11,
	Bookmark_CTFDSSensor                               = 12,
	Bookmark_CTFBETurretA                              = 13,
	Bookmark_CTFBETurretB                              = 14,
	Bookmark_CTFBETurretC                              = 15,
	Bookmark_CTFDSTurretA                              = 16,
	Bookmark_CTFDSTurretB                              = 17,
	Bookmark_CTFDSTurretC                              = 18,
	Bookmark_CTFBEBackRoute                            = 19,
	Bookmark_CTFDSBackRoute                            = 20,
	Bookmark_TDMEast                                   = 21,
	Bookmark_TDMWest                                   = 22,
	Bookmark_TDMNorth                                  = 23,
	Bookmark_TDMSouth                                  = 24,
	Bookmark_TDMCenter                                 = 25,
	Bookmark_TDMMapOverhead                            = 26,
	Bookmark_DdDryHigh                                 = 27,
	Bookmark_DdDryLow                                  = 28,
	Bookmark_DdBEWide                                  = 29,
	Bookmark_DdDSWide                                  = 30,
	Bookmark_DdDockHigh                                = 31,
	Bookmark_DdDockLow                                 = 32,
	Bookmark_DdBEBunker                                = 33,
	Bookmark_DdDSBunker                                = 34,
	Bookmark_DdBEBackEntrance                          = 35,
	Bookmark_DdDSBackEntrance                          = 36,
	Bookmark_DNFish                                    = 37,
	Bookmark_XFBSW                                     = 38,
	Bookmark_XFRSW                                     = 39,
	Bookmark_XFBERed                                   = 40,
	Bookmark_XFDSRed                                   = 41,
	Bookmark_XFBEBlue                                  = 42,
	Bookmark_XFDSBlue                                  = 43,
	Bookmark_XFBEBackstop                              = 44,
	Bookmark_XFDSBackstop                              = 45,
	Bookmark_XFBECRoom                                 = 46,
	Bookmark_XFDSCRoom                                 = 47,
	Bookmark_NKTower                                   = 48,
	Bookmark_NKTunnel                                  = 49,
	Bookmark_NKWhalebones                              = 50,
	Bookmark_NKMountainView                            = 51,
	Bookmark_NKMountainSide                            = 52,
	Bookmark_BTBase                                    = 53,
	Bookmark_BTBaseInterior                            = 54,
	Bookmark_BTTunnelEast                              = 55,
	Bookmark_BTTunnelWest                              = 56,
	Bookmark_GenericCamera                             = 57,
	Bookmark_MAX                                       = 58
};*/

// Enum TribesGame.TrCTFHUDMessage.CTF_HUD_MESSAGE
/*enum CTF_HUD_MESSAGE
{
	CTF_YouHaveTheFlag                                 = 0,
	CTF_EnemyHasTheFlag                                = 1,
	CTF_YouAndEnemyHaveTheFlag                         = 2,
	CTF_MAX                                            = 3
};*/

// Enum TribesGame.TrHelpTextManager_Training.EHelpTextTrainingType
/*enum EHelpTextTrainingType
{
	HelpTextTraining_None                              = 0,
	HelpTextTraining_Example1                          = 1,
	HelpTextTraining_Example2                          = 2,
	HelpTextTraining_Ski1                              = 3,
	HelpTextTraining_Ski2                              = 4,
	HelpTextTraining_Ski3                              = 5,
	HelpTextTraining_Ski4                              = 6,
	HelpTextTraining_Ski5                              = 7,
	HelpTextTraining_SkiAdv1                           = 8,
	HelpTextTraining_SkiAdv2                           = 9,
	HelpTextTraining_SkiAdv3                           = 10,
	HelpTextTraining_SkiAdv4                           = 11,
	HelpTextTraining_SkiAdv5                           = 12,
	HelpTextTraining_MAX                               = 13
};*/

// Enum TribesGame.TrHUDSettings.EHUDSettingType
/*enum EHUDSettingType
{
	EHST_HEROTEXT                                      = 0,
	EHST_COMBATLOG                                     = 1,
	EHST_CREDITS                                       = 2,
	EHST_CHAT                                          = 3,
	EHST_SCORES                                        = 4,
	EHST_ACCOLADES                                     = 5,
	EHST_BADGES                                        = 6,
	EHST_VISOR                                         = 7,
	EHST_KILLBOX                                       = 8,
	EHST_DEATHCAM                                      = 9,
	EHST_PROMPTPANEL                                   = 10,
	EHST_RESPAWNTIMER                                  = 11,
	EHST_HEALTHBAR                                     = 12,
	EHST_RETICULE                                      = 13,
	EHST_SKIBARS                                       = 14,
	EHST_FRIENDCOLOR                                   = 15,
	EHST_CRACKS                                        = 16,
	EHST_MAX                                           = 17
};*/

// Enum TribesGame.TrMusicManager.ETgMusicState
/*enum ETgMusicState
{
	MUSICSTATE_BattleLow                               = 0,
	MUSICSTATE_BattleMed                               = 1,
	MUSICSTATE_BattleHigh                              = 2,
	MUSICSTATE_FlagPossession                          = 3,
	MUSICSTATE_DeathDirge                              = 4,
	MUSICSTATE_TeamWonMatch                            = 5,
	MUSICSTATE_TeamLostMatch                           = 6,
	MUSICSTATE_NoMusic                                 = 7,
	MUSICSTATE_Ambient                                 = 8,
	MUSICSTATE_MAX                                     = 9
};*/

// Enum TribesGame.TrProj_TrackingMissile.ETrackingMissileStage
/*enum ETrackingMissileStage
{
	ETrackingMissileStage_JustFired                    = 0,
	ETrackingMissileStage_AdjustingForGoodLOS          = 1,
	ETrackingMissileStage_HomingInOnTarget             = 2,
	ETrackingMissileStage_MAX                          = 3
};*/

// Enum TribesGame.TrSeekingMissileManager.ETrackingMissileEvent
/*enum ETrackingMissileEvent
{
	MissileEvent_NewMissileTracking                    = 0,
	MissileEvent_MissileStoppedTracking                = 1,
	MissileEvent_NewSaberLauncherTargeting             = 2,
	MissileEvent_SaberLauncherStoppedTargeting         = 3,
	MissileEvent_NotifyClientAboutSaberLauncher        = 4,
	MissileEvent_MAX                                   = 5
};*/

// Enum TribesGame.TrStormControlPoint.ControlPointState
/*enum ControlPointState
{
	ControlPointState_Neutral                          = 0,
	ControlPointState_FullyOwnedBE                     = 1,
	ControlPointState_FullyOwnedDS                     = 2,
	ControlPointState_TransitioningToBE                = 3,
	ControlPointState_TransitioningToDS                = 4,
	ControlPointState_MAX                              = 5
};*/

// Enum TribesGame.TrStreamManager.STREAMTYPE
/*enum STREAMTYPE
{
	VST_NONE                                           = 0,
	VST_HIREZ                                          = 1,
	VST_TWITCH                                         = 2,
	VST_TRAINING                                       = 3,
	VST_COMMUNITY                                      = 4,
	VST_NEWS                                           = 5,
	VST_MAX                                            = 6
};*/

// Enum TribesGame.TrVideoSettings.EVideoSettingType
/*enum EVideoSettingType
{
	EVST_GraphicsDetail                                = 0,
	EVST_ShadowDetail                                  = 1,
	EVST_ScreenType                                    = 2,
	EVST_MotionBlur                                    = 3,
	EVST_VerticalSync                                  = 4,
	EVST_AntiAliasing                                  = 5,
	EVST_Resolution                                    = 6,
	EVST_SmoothFramerate                               = 7,
	EVST_MAX                                           = 8
};*/

// Enum TribesGame.TrVideoSettings.EScreenFrameType
/*enum EScreenFrameType
{
	ESFT_FullScreen                                    = 0,
	ESFT_Windowed                                      = 1,
	ESFT_Borderless                                    = 2,
	ESFT_MAX                                           = 3
};*/

// Enum TribesGame.TrVideoSettings.EAntiAliasing
/*enum EAntiAliasing
{
	EAA_Off                                            = 0,
	EAA_1X                                             = 1,
	EAA_2X                                             = 2,
	EAA_4X                                             = 3,
	EAA_MAX                                            = 4
};*/

// Enum TribesGame.TrVideoSettings.EVisualDetail
/*enum EVisualDetail
{
	EVQ_Off                                            = 0,
	EVQ_Low                                            = 1,
	EVQ_Med                                            = 2,
	EVQ_High                                           = 3,
	EVQ_VHigh                                          = 4,
	EVQ_MAX                                            = 5
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class TribesGame.TrGameObjective
// 0x014C (0x0550 - 0x0404)
class ATrGameObjective : public AUTGameObjective
{
public:
	class UTrStatsInterface*                           Stats;                                            		// 0x0404 (0x0004) [0x0000000000000000]              
	struct FRotator                                    CallInRotation;                                   		// 0x0408 (0x000C) [0x0000000000000000]              
	struct FVector                                     CallInPosition;                                   		// 0x0414 (0x000C) [0x0000000000000000]              
	class UDynamicLightEnvironmentComponent*           m_LightEnvironment;                               		// 0x0420 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_Mesh;                                           		// 0x0424 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   m_ObjectiveMIC;                                   		// 0x0428 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                r_Health;                                         		// 0x042C (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                r_MaxHealth;                                      		// 0x0430 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nLastHealth;                                    		// 0x0434 (0x0004) [0x0000000000000000]              
	int                                                m_nHealthRegenRate;                               		// 0x0438 (0x0004) [0x0000000000000000]              
	struct FVector                                     r_vReplicatedHitInfo;                             		// 0x043C (0x000C) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nCriticalHealthThreshold;                       		// 0x0448 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                r_nRepairHealthThreshold;                         		// 0x044C (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              m_fShieldHealthPercentage;                        		// 0x0450 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      m_ShieldMesh;                                     		// 0x0454 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterial*                                   m_ShieldMaterial;                                 		// 0x0458 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  m_ShieldNormalMap;                                		// 0x045C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MarkerOffset;                                     		// 0x0460 (0x0004) [0x0000000000000000]              
	float                                              ShowHeaderUntil;                                  		// 0x0464 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_ShieldMIC;                                      		// 0x0468 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fShieldHitTargetScale;                          		// 0x046C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fShieldHitTargetTimeLength;                     		// 0x0470 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fShieldHitRemainingTime;                        		// 0x0474 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystem*                             m_ExplosionTemplate;                              		// 0x0478 (0x0004) [0x0000000000000000]              
	class UCameraAnim*                                 m_ExplosionShake;                                 		// 0x047C (0x0004) [0x0000000000000000]              
	float                                              m_fInnerExplosionShakeRadius;                     		// 0x0480 (0x0004) [0x0000000000000000]              
	float                                              m_fOuterExplosionShakeRadius;                     		// 0x0484 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sScreenName;                                    		// 0x0488 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UClass*                                      m_ExplosionLightClass;                            		// 0x0494 (0x0004) [0x0000000000000000]              
	class UPhysicsAsset*                               m_OnlinePhysicsAsset;                             		// 0x0498 (0x0004) [0x0000000000000000]              
	class UPhysicsAsset*                               m_OfflinePhysicsAsset;                            		// 0x049C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bAutoPlayOnlineSound : 1;                       		// 0x04A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bInstantOnlineSound : 1;                        		// 0x04A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      r_bIsPowered : 1;                                 		// 0x04A0 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      m_bReceivesPowerFromGenerator : 1;                		// 0x04A0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bForceShowHUD : 1;                              		// 0x04A0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bVisibilityRequiredForEnemy : 1;                		// 0x04A0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bPostRenderForEnemy : 1;                        		// 0x04A0 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bIsRepairableAfterDeath : 1;                    		// 0x04A0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      r_bInDestroyedState : 1;                          		// 0x04A0 (0x0004) [0x0000000000000020] [0x00000100] ( CPF_Net )
	unsigned long                                      m_bHasPromptText : 1;                             		// 0x04A0 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      m_bIsUpgradeable : 1;                             		// 0x04A0 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bIsRepairable : 1;                              		// 0x04A0 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      m_bShowObjectivesForcesMarker : 1;                		// 0x04A0 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bDestroyable : 1;                               		// 0x04A0 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      m_bHurtByFriendlyFire : 1;                        		// 0x04A0 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      m_bAlwaysRelevantToSameTeam : 1;                  		// 0x04A0 (0x0004) [0x0000000000000000] [0x00008000] 
	class UAudioComponent*                             m_OnlineSound;                                    		// 0x04A4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   m_ExplosionSound;                                 		// 0x04A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             m_CriticalSound;                                  		// 0x04AC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_ShieldHitSound;                                 		// 0x04B0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_PowerDownSound;                                 		// 0x04B4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AController*                                 m_LastDamager;                                    		// 0x04B8 (0x0004) [0x0000000000000000]              
	float                                              m_fLifeAfterDeathSecs;                            		// 0x04BC (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             m_DestroyedSound;                                 		// 0x04C0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             DestroyedTemplate;                                		// 0x04C4 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    DestroyedParticleComp;                            		// 0x04C8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      r_bReset;                                         		// 0x04CC (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_MissileLockStatus;                              		// 0x04CD (0x0001) [0x0000000000000000]              
	float                                              m_fRemainingPotentialSeekingTargetHUDZoomTime;    		// 0x04D0 (0x0004) [0x0000000000000000]              
	struct FRotator                                    m_rPotentialSeekingTargetHUDRotation;             		// 0x04D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRemainingSeekingTargetHUDZoomTime;             		// 0x04E0 (0x0004) [0x0000000000000000]              
	float                                              m_fPromptMessageTime;                             		// 0x04E4 (0x0004) [0x0000000000000000]              
	int                                                m_nPromptMessageSwitch;                           		// 0x04E8 (0x0004) [0x0000000000000000]              
	TArray< struct FUpgradeSelectionList >             m_UpgradeList;                                    		// 0x04EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                r_nUpgradeLevel;                                  		// 0x04F8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UParticleSystem*                             m_UpgradeTemplate;                                		// 0x04FC (0x0004) [0x0000000000000000]              
	float                                              m_fRepairBoost;                                   		// 0x0500 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_HealthBarMIC;                                   		// 0x0504 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_MarkerMIC;                                      		// 0x0508 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fObjectiveHealthBarPlacementX;                  		// 0x050C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fObjectiveHealthBarPlacementY;                  		// 0x0510 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fObjectiveHealthBarWidth;                       		// 0x0514 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fObjectiveHealthBarHeight;                      		// 0x0518 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fObjectiveNamePlacementY;                       		// 0x051C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInstigatorNamePlacementY;                      		// 0x0520 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              REPAIR_ASSIST_PERCENTAGE;                         		// 0x0524 (0x0004) [0x0000000000000000]              
	float                                              DESTROY_ASSIST_PERCENTAGE;                        		// 0x0528 (0x0004) [0x0000000000000000]              
	TArray< struct FObjectiveDamageAssist >            DamageAssistList;                                 		// 0x052C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fMarker2DDistance;                              		// 0x0538 (0x0004) [0x0000000000000000]              
	float                                              fUpgradeAssistTime;                               		// 0x053C (0x0004) [0x0000000000000000]              
	class UClass*                                      m_AssistAccolade;                                 		// 0x0540 (0x0004) [0x0000000000000000]              
	TArray< class ATrPlayerController* >               m_Upgraders;                                      		// 0x0544 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45 ];

		return pClassPointer;
	};

	void eventOnUpgradePerformed ( struct FName VarName );
	void AwardUpgradeAssists ( );
	void AwardKillAssists ( );
	void Destroyed ( );
	void HideBasePlatform ( );
	void InstantlyRegenerateHealth ( );
	bool IsAliveAndWell ( );
	struct FString GetSpectatorDescription ( );
	void GetSpectatorHealthInfo ( int* Health, int* MaxHealth );
	void GiveDestroyAccolade ( class ATrPlayerController* TrPC );
	void ClearDamageAssistance ( unsigned long bOnlyDamagers );
	void CheckDestroyAssists ( );
	void CheckRepairAssists ( );
	void AddDamageAssistance ( class ATrPlayerController* TrPC, int DamageAmount );
	void AddUpgrader ( class ATrPlayerController* Upgrader );
	bool PerformUpgrade ( class ATrPlayerController* Purchaser );
	bool ReceivesPowerFromGenerator ( );
	bool ShouldShowHelpText ( unsigned char HelpTextType );
	void SpawnHelpTextCollisionProxy ( unsigned char HelpTextType );
	void Reset ( );
	bool eventBlocksLineChecksFromSourceActor ( class AActor* SourceActor );
	bool GetPossessiveInstigatorName ( struct FString* PlayerName );
	class UTexture2D* GetMarker ( );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	bool ShouldPostRenderForCaH ( );
	void HideMesh ( );
	void OnPowerStatusChanged ( );
	void SetPowered ( unsigned long bEnabled );
	void PlayExplosion ( );
	void PlayDamageShieldEffects ( );
	void PlayDamageHealthEffects ( int DamageAmount, int HitBoneIndex );
	void OnHealthChanged ( unsigned long wasDamage );
	void PlayDestroyedEffects ( );
	void ClientPlayUpgradeEffect ( );
	void eventClientRecievedHitInfo ( );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void DoRepairs ( int HealAmount, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void RegenerateHealth ( );
	bool Shootable ( );
	void eventTick ( float DeltaTime );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
	bool ShouldShowPromptText ( class APawn* aPawn );
	int GetUpgradeCost ( class ATrPlayerController* TrPC );
	float GetHealthAmount ( );
	struct FString GetSpectatorName ( );
	struct FString GetScreenName ( class APlayerController* PC );
	void ApplyServerSettings ( );
	bool IsInLOS_Basic ( class APawn* TouchedPawn );
	bool IsEnemy ( class AActor* Target );
};

UClass* ATrGameObjective::pClassPointer = NULL;

// Class TribesGame.TrDeployable
// 0x00A4 (0x05F4 - 0x0550)
class ATrDeployable : public ATrGameObjective
{
public:
	int                                                m_nMaxDeployablesOut;                             		// 0x0550 (0x0004) [0x0000000000000000]              
	float                                              m_TimeCreated;                                    		// 0x0554 (0x0004) [0x0000000000000000]              
	class ATrPawn*                                     m_TouchedPlayer;                                  		// 0x0558 (0x0004) [0x0000000000000000]              
	float                                              m_fBuildupTime;                                   		// 0x055C (0x0004) [0x0000000000000000]              
	float                                              m_fRemoteActivationTime;                          		// 0x0560 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeToDeploySecs;                              		// 0x0564 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsDeployed : 1;                                		// 0x0568 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bRequireLOS : 1;                                		// 0x0568 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bUsesArmoredMultiplier : 1;                     		// 0x0568 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bOverrideTargetComponentHeight : 1;             		// 0x0568 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bCachedRelevant : 1;                            		// 0x0568 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bIsXRay : 1;                                    		// 0x0568 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bCanBeSpottedByVGS : 1;                         		// 0x0568 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bBlocksFriendlies : 1;                          		// 0x0568 (0x0004) [0x0000000000000000] [0x00000080] 
	int                                                m_nFiringArcDegrees;                              		// 0x056C (0x0004) [0x0000000000000000]              
	struct FVector                                     m_PlacementOrientationVector;                     		// 0x0570 (0x000C) [0x0000000000000000]              
	float                                              m_fFiringArcCheckValue;                           		// 0x057C (0x0004) [0x0000000000000000]              
	class AController*                                 m_Controller;                                     		// 0x0580 (0x0004) [0x0000000000000000]              
	class UCylinderComponent*                          m_TargetComponent;                                		// 0x0584 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_TargetCollisionTraceDistance;                   		// 0x0588 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fOverriddenTargetComponentHeight;               		// 0x058C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ATrDeployableCollisionProxy*                 m_CollisionProxy;                                 		// 0x0590 (0x0004) [0x0000000000000000]              
	float                                              m_fDamageRadius;                                  		// 0x0594 (0x0004) [0x0000000000000000]              
	float                                              r_fNewDetectionRadius;                            		// 0x0598 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fAlwaysRelevantDistanceSquared;                 		// 0x059C (0x0004) [0x0000000000000000]              
	class UClass*                                      m_DeviceClass;                                    		// 0x05A0 (0x0004) [0x0000000000000000]              
	class ATrTurretPawn*                               m_WeaponHolder;                                   		// 0x05A4 (0x0004) [0x0000000000000000]              
	class ATrSubDevice*                                m_Weapon;                                         		// 0x05A8 (0x0004) [0x0000000000000000]              
	unsigned char                                      r_FlashCount;                                     		// 0x05AC (0x0001) [0x0000000000000020]              ( CPF_Net )
	class APawn*                                       r_TargetPawn;                                     		// 0x05B0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ATrPowerGenerator*                           m_MyMainGenerator;                                		// 0x05B4 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_DeploySound;                                    		// 0x05B8 (0x0004) [0x0000000000000000]              
	float                                              m_fNetRelevancyTime;                              		// 0x05BC (0x0004) [0x0000000000000000]              
	class APlayerController*                           m_LastRealViewer;                                 		// 0x05C0 (0x0004) [0x0000000000000000]              
	class AActor*                                      m_LastViewer;                                     		// 0x05C4 (0x0004) [0x0000000000000000]              
	TArray< float >                                    m_fRelevancyCheckHeights;                         		// 0x05C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAnimNodeScalePlayRate*                      m_AnimNodeScale;                                  		// 0x05D4 (0x0004) [0x0000000000000000]              
	float                                              m_fAnimInterpSpeed;                               		// 0x05D8 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      m_XRayMesh;                                       		// 0x05DC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class APlayerReplicationInfo*                      r_OwnerPRI;                                       		// 0x05E0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     m_vDeathCamStartOffset;                           		// 0x05E4 (0x000C) [0x0000000000000000]              
	int                                                m_nIconStackId;                                   		// 0x05F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46 ];

		return pClassPointer;
	};

	void eventOnUpgradePerformed ( struct FName VarName );
	bool CalcOtherWatchingCam ( float fDeltaTime, class ATrPlayerController* WatcherController, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool GetPossessiveInstigatorName ( struct FString* PlayerName );
	bool ReceivesPowerFromGenerator ( );
	void Destroyed ( );
	void PulseBackupGenerators ( );
	void PlayFireEffects ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation );
	void IncrementFlashCount ( class AWeapon* W, unsigned char FireModeNum );
	bool StopsProjectile ( class AProjectile* P );
	struct FVector GetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	void OnHealthChanged ( unsigned long wasDamage );
	void UpdateHealthMaterial ( );
	bool IsFiring ( );
	void DeployComplete ( );
	void FinalizeDeployment ( );
	float GetDamageRadius ( );
	void PostBeginPlay ( );
	void SetInstigatorController ( class ATrPlayerController* InstigatorController );
	void OnPowerStatusChanged ( );
	void OnVehicleExitedCollisionProxy ( class ATrVehicle* V );
	void OnVehicleDetectedByCollisionProxy ( class ATrVehicle* V );
	void OnPawnExitedCollisionProxy ( class APawn* P );
	void OnPawnDetectedByCollisionProxy ( class APawn* P );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	void eventTick ( float DeltaTime );
	void OnPRIReplicated ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void ApplyServerSettings ( );
	bool IsInLOS ( class AActor* TouchedActor, struct FVector StartLocation, struct FVector EndLocation, unsigned long CheckBlockedByBlockers, unsigned long CheckBlockedByActors );
	float CalcMeshOffset ( );
	void AdjustMeshToGround ( );
};

UClass* ATrDeployable::pClassPointer = NULL;

// Class TribesGame.TrPawn
// 0x03D0 (0x0C70 - 0x08A0)
class ATrPawn : public AUTPawn
{
public:
	int                                                r_nFactionId;                                     		// 0x08A0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FName                                       m_nmMakeVisible;                                  		// 0x08A4 (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bInitialized : 1;                               		// 0x08AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bRefreshInventoryWasRespawn : 1;                		// 0x08AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      r_bIsStealthed : 1;                               		// 0x08AC (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      m_bStealthVisible : 1;                            		// 0x08AC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      r_bIsRaged : 1;                                   		// 0x08AC (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      r_bIsShielded : 1;                                		// 0x08AC (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	unsigned long                                      r_bIsHealthRecharging : 1;                        		// 0x08AC (0x0004) [0x0000000000000020] [0x00000040] ( CPF_Net )
	unsigned long                                      r_bInFireLock : 1;                                		// 0x08AC (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bInFireLockClient : 1;                            		// 0x08AC (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      r_bInDeployMode : 1;                              		// 0x08AC (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bInDeployModeClient : 1;                          		// 0x08AC (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      r_bIsSkiing : 1;                                  		// 0x08AC (0x0004) [0x0000000000000020] [0x00000800] ( CPF_Net )
	unsigned long                                      m_bIsPlayingSkiEffects : 1;                       		// 0x08AC (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      m_bIsPlayingSkiEffectsSounds : 1;                 		// 0x08AC (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      r_bAimingMode : 1;                                		// 0x08AC (0x0004) [0x0000000000000020] [0x00004000] ( CPF_Net )
	unsigned long                                      r_bIsJetting : 1;                                 		// 0x08AC (0x0004) [0x0000000000000020] [0x00008000] ( CPF_Net )
	unsigned long                                      m_bIsJetEffectsPlaying : 1;                       		// 0x08AC (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      r_bIsJamming : 1;                                 		// 0x08AC (0x0004) [0x0000000000000020] [0x00020000] ( CPF_Net )
	unsigned long                                      m_bLoadoutReset : 1;                              		// 0x08AC (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      m_bUpdateStickyGrenades : 1;                      		// 0x08AC (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      r_bIsInvulnerable : 1;                            		// 0x08AC (0x0004) [0x0000000000000020] [0x00100000] ( CPF_Net )
	unsigned long                                      m_bIsInConduit : 1;                               		// 0x08AC (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      m_bSplattedAgainstWall : 1;                       		// 0x08AC (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      r_bDetectedByEnemyScanner : 1;                    		// 0x08AC (0x0004) [0x0000000000000020] [0x00800000] ( CPF_Net )
	unsigned long                                      m_bUseSmoothNetReceiveRotation : 1;               		// 0x08AC (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	class AActor*                                      r_LockedTarget;                                   		// 0x08B0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     r_FlashNormal;                                    		// 0x08B4 (0x000C) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      r_MissileLock;                                    		// 0x08C0 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      r_nPulseStealth;                                  		// 0x08C1 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      r_nBlinked;                                       		// 0x08C2 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      PhysType;                                         		// 0x08C3 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      r_RemoteViewYaw;                                  		// 0x08C4 (0x0001) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	unsigned char                                      m_MissileLockStatus;                              		// 0x08C5 (0x0001) [0x0000000000000000]              
	unsigned char                                      r_nWhiteOut;                                      		// 0x08C6 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      LastFXOverlay;                                    		// 0x08C7 (0x0001) [0x0000000000000000]              
	float                                              m_fEnableStealthVisibilityInterpSpeed;            		// 0x08C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDisableStealthVisibilityInterpSpeed;           		// 0x08CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMinStealthVisibilityParamValue;                		// 0x08D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   m_StealthMaterial;                                		// 0x08D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   m_StealthMIC;                                     		// 0x08D8 (0x0004) [0x0000000000000000]              
	float                                              m_fPulseStealthVisibleTimestamp;                  		// 0x08DC (0x0004) [0x0000000000000000]              
	float                                              m_fPulseStealthVisibleTime;                       		// 0x08E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPulseStealthFadeInInterpSpeed;                 		// 0x08E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              r_fPulseStealthSpeedThreshold;                    		// 0x08E8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fPulseStealthIgnoreTimeStamp;                   		// 0x08EC (0x0004) [0x0000000000000000]              
	float                                              m_fPulseStealthIgnoreTime;                        		// 0x08F0 (0x0004) [0x0000000000000000]              
	float                                              r_fFasterWeaponSwitchMultiplier;                  		// 0x08F4 (0x0004) [0x0000000000000000]              
	float                                              m_fShieldMultiple;                                		// 0x08F8 (0x0004) [0x0000000000000000]              
	float                                              s_fVE;                                            		// 0x08FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTimeLastSeenByLocalPlayer;                     		// 0x0900 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeLastUnseenByLocalPlayer;                   		// 0x0904 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeLastTargetByLocalPlayer;                   		// 0x0908 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeLastUntargetByLocalPlayer;                 		// 0x090C (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentPowerPool;                              		// 0x0910 (0x0004) [0x0000000000000000]              
	float                                              r_fCurrentPowerPool;                              		// 0x0914 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              r_fMaxPowerPool;                                  		// 0x0918 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              r_fPowerPoolRechargeRate;                         		// 0x091C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fSecondsBeforeAutoHeal;                         		// 0x0920 (0x0004) [0x0000000000000000]              
	float                                              m_fTickedRegenDecimal;                            		// 0x0924 (0x0004) [0x0000000000000000]              
	float                                              m_fHeadShotFudge;                                 		// 0x0928 (0x0004) [0x0000000000000000]              
	float                                              m_fHeadShotDamageMultiple;                        		// 0x092C (0x0004) [0x0000000000000000]              
	float                                              m_fStoppingDistance;                              		// 0x0930 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxStoppingDistance;                           		// 0x0934 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxJetpackThrustSpeed;                         		// 0x0938 (0x0004) [0x0000000000000000]              
	float                                              m_fAccelRateAtMaxThrustSpeed;                     		// 0x093C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMaxJettingSpeed;                               		// 0x0940 (0x0004) [0x0000000000000000]              
	float                                              m_fTerminalJettingSpeed;                          		// 0x0944 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxSpeedDecelerationRate;                      		// 0x0948 (0x0004) [0x0000000000000000]              
	float                                              m_fPreserveVelocityThresholdMax;                  		// 0x094C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPreserveVelocityThresholdMin;                  		// 0x0950 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPreserveVelocityZNormalThreshold;              		// 0x0954 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                r_nSensorAlertLevel;                              		// 0x0958 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FTR_HUD_INFO                                m_HudInfo;                                        		// 0x095C (0x0044) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ShowHeaderUntil;                                  		// 0x09A0 (0x0004) [0x0000000000000000]              
	TArray< class UTrEffect* >                         m_AppliedEffects;                                 		// 0x09A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTrEffectForm* >                     m_AppliedEffectForms;                             		// 0x09B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FTrTakeEffectInfo                           r_LastTakeEffectInfo;                             		// 0x09BC (0x0010) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fPeakSkiControlSpeed;                           		// 0x09CC (0x0004) [0x0000000000000000]              
	float                                              m_fSkiControlSigmaSquare;                         		// 0x09D0 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxSkiControlPct;                              		// 0x09D4 (0x0004) [0x0000000000000000]              
	float                                              m_fSkiSlopeGravityBoost;                          		// 0x09D8 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxSkiSpeed;                                   		// 0x09DC (0x0004) [0x0000000000000000]              
	float                                              m_fTerminalSkiSpeed;                              		// 0x09E0 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentAccuracy;                               		// 0x09E4 (0x0004) [0x0000000000000000]              
	float                                              m_fAirAccelCapSpeedThreshold;                     		// 0x09E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fAirAccelSpeed;                                 		// 0x09EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSkiAccelCapSpeedThreshold;                     		// 0x09F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSkiAccelPct;                                   		// 0x09F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_AssistDamagePercentQualifier;                   		// 0x09F8 (0x0004) [0x0000000000000000]              
	float                                              m_fLastVehicleDamagerTimeStamp;                   		// 0x09FC (0x0004) [0x0000000000000000]              
	float                                              m_fLastDamagerTimeStamp;                          		// 0x0A00 (0x0004) [0x0000000000000000]              
	TArray< struct FAssistInfo >                       m_KillAssisters;                                  		// 0x0A04 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fFallVelocityTransfer;                          		// 0x0A10 (0x0004) [0x0000000000000000]              
	class UTrAnimNodeAimOffset*                        m_AimOffsetNode;                                  		// 0x0A14 (0x0004) [0x0000000000000000]              
	class UTrAnimNodeAimOffset*                        m_1pBodyAimOffsetNode;                            		// 0x0A18 (0x0004) [0x0000000000000000]              
	class UTrAnimNodeBlendByVehicle*                   m_VehicleBlendNode;                               		// 0x0A1C (0x0004) [0x0000000000000000]              
	class UTrAnimNodeBlendByRidingPassenger*           m_RidingPassengerBlendNode;                       		// 0x0A20 (0x0004) [0x0000000000000000]              
	class UMorphNodeWeight*                            m_OverlayMorphNode;                               		// 0x0A24 (0x0004) [0x0000000000000000]              
	float                                              m_fFriendlyShowDistanceThreshold;                 		// 0x0A28 (0x0004) [0x0000000000000000]              
	float                                              m_fEnemyShowDistanceThreshold;                    		// 0x0A2C (0x0004) [0x0000000000000000]              
	float                                              m_fShowObjectThreshold;                           		// 0x0A30 (0x0004) [0x0000000000000000]              
	struct FVector                                     r_avMultiShotLocation[ 0x8 ];                     		// 0x0A34 (0x0060) [0x0000000000000020]              ( CPF_Net )
	class UAudioComponent*                             m_AudioComponentSkiLoop;                          		// 0x0A94 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_AudioComponentShieldPackLoop;                   		// 0x0A98 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_AudioComponentStealthPackLoop;                  		// 0x0A9C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_AudioComponentJammerPackLoop;                   		// 0x0AA0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_AudioComponentSpeedSound;                       		// 0x0AA4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_AudioComponentJetpackLoop;                      		// 0x0AA8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_AudioComponentHealthRechargeLoop;               		// 0x0AAC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_AudioComponentRageLoop;                         		// 0x0AB0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_OldSpeed;                                       		// 0x0AB4 (0x0004) [0x0000000000000000]              
	TArray< struct FEffectFormOverwrite >              m_EffectFormOverwrite;                            		// 0x0AB8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UMaterial*                                   r_ReplicatedWeaponAttachmentMat;                  		// 0x0AC4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ATrPawnCollisionProxy*                       m_JammingCollisionProxy;                          		// 0x0AC8 (0x0004) [0x0000000000000000]              
	float                                              m_fJamEffectRadius;                               		// 0x0ACC (0x0004) [0x0000000000000000]              
	TArray< class ATrPawn* >                           m_JammedFriends;                                  		// 0x0AD0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ATrPawn* >                           m_JammedEnemies;                                  		// 0x0ADC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_JammingFriendTeam;                              		// 0x0AE8 (0x0004) [0x0000000000000000]              
	class ATrPlayerReplicationInfo*                    r_FriendJammingPRI;                               		// 0x0AEC (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< class ATrPlayerReplicationInfo* >          m_FriendJammingList;                              		// 0x0AF0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                r_nEnemyJamCount;                                 		// 0x0AFC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                r_nFriendlyDropJammerCount;                       		// 0x0B00 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                r_nEnemyDropJammerCount;                          		// 0x0B04 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< class ATrDeployable_DropJammer* >          m_FriendlyDropJammerList;                         		// 0x0B08 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ATrDeployable_DropJammer* >          m_EnemyDropJammerList;                            		// 0x0B14 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fMaxJetpackBoostGroundspeed;                    		// 0x0B20 (0x0004) [0x0000000000000000]              
	float                                              m_fForwardJettingPct;                             		// 0x0B24 (0x0004) [0x0000000000000000]              
	class UMaterial*                                   m_ShieldPackOverlayMaterial;                      		// 0x0B28 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_ShieldPackOverlayMIC;                           		// 0x0B2C (0x0004) [0x0000000000000000]              
	float                                              m_fOverlayMaterialActivateSpeed;                  		// 0x0B30 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fOverlayMaterialDeactivateSpeed;                		// 0x0B34 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fShieldPackMaterialHitRampDownSpeed;            		// 0x0B38 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   m_RegenOverlayMaterial;                           		// 0x0B3C (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_RegenOverlayMIC;                                		// 0x0B40 (0x0004) [0x0000000000000000]              
	class UMaterial*                                   m_RegenPackOverlayMaterial;                       		// 0x0B44 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_RegenPackPackOverlayMIC;                        		// 0x0B48 (0x0004) [0x0000000000000000]              
	class UMaterial*                                   m_JammerPackOverlayMaterial;                      		// 0x0B4C (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_JammerPackOverlayMIC;                           		// 0x0B50 (0x0004) [0x0000000000000000]              
	class UMaterial*                                   m_RageOverlayMaterial;                            		// 0x0B54 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_RageOverlayMIC;                                 		// 0x0B58 (0x0004) [0x0000000000000000]              
	class UMaterial*                                   m_InvulnerableOverlayMaterial;                    		// 0x0B5C (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_InvulnerableOverlayMIC;                         		// 0x0B60 (0x0004) [0x0000000000000000]              
	class UUDKSkeletalMeshComponent*                   m_FirstPersonBodyMesh;                            		// 0x0B64 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UUDKSkeletalMeshComponent*                   m_FirstPersonBodyOverlayMesh;                     		// 0x0B68 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UUDKSkeletalMeshComponent*                   m_FirstPersonBodyShadowMesh;                      		// 0x0B6C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UUDKSkeletalMeshComponent*                   m_FirstPersonWeaponShadowMesh;                    		// 0x0B70 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UUDKSkeletalMeshComponent*                   m_FirstPersonFlagShadowMesh;                      		// 0x0B74 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< struct FFootstepParticleInfo >             m_SkiParticles;                                   		// 0x0B78 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fGroundSkiEffectDist;                           		// 0x0B84 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    m_GroundSkiPSC;                                   		// 0x0B88 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_fPawnViewForwardAmount;                         		// 0x0B8C (0x0004) [0x0000000000000000]              
	TArray< struct FStickyGrenadeSocketInfo >          m_StickyGrenadeSocketList;                        		// 0x0B90 (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              m_fRemainingPotentialSeekingTargetHUDZoomTime;    		// 0x0B9C (0x0004) [0x0000000000000000]              
	struct FRotator                                    m_rPotentialSeekingTargetHUDRotation;             		// 0x0BA0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRemainingSeekingTargetHUDZoomTime;             		// 0x0BAC (0x0004) [0x0000000000000000]              
	float                                              m_bJustLandedSpeedSq;                             		// 0x0BB0 (0x0004) [0x0000000000000000]              
	float                                              m_fSplatDamageFromLandMin;                        		// 0x0BB4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSplatDamageFromLandMax;                        		// 0x0BB8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSplatDamageFromWallMin;                        		// 0x0BBC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSplatDamageFromWallMax;                        		// 0x0BC0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSplatSpeedMin;                                 		// 0x0BC4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSplatSpeedMax;                                 		// 0x0BC8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fClotheslineDamageMin;                          		// 0x0BCC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fClotheslineDamageMax;                          		// 0x0BD0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fClotheslineSpeedDifferenceMin;                 		// 0x0BD4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fClotheslineSpeedDifferenceMax;                 		// 0x0BD8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLastTakeClotheslineDamageTimestamp;            		// 0x0BDC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FVector >                           m_aPreviousVelocities;                            		// 0x0BE0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FVector >                           m_aPreviousLocations;                             		// 0x0BEC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    m_aPreviousTickTimes;                             		// 0x0BF8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AUTWeaponAttachment*                         m_InHandWeaponAttachmentFromAutoFire;             		// 0x0C04 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_HealthBarMIC;                                   		// 0x0C08 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_MarkerMIC;                                      		// 0x0C0C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ATrVehicle*                                  m_RidingVehicle;                                  		// 0x0C10 (0x0004) [0x0000000000000000]              
	class AUDKCarriedObject*                           m_GameObjCheckTimer;                              		// 0x0C14 (0x0004) [0x0000000000000000]              
	int                                                m_nDetectedByEnemyScannerCount;                   		// 0x0C18 (0x0004) [0x0000000000000000]              
	float                                              m_fLastInventoryStationVisitTime;                 		// 0x0C1C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fInventoryStationLockoutTime;                   		// 0x0C20 (0x0004) [0x0000000000000000]              
	class UTrStatsInterface*                           Stats;                                            		// 0x0C24 (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               m_GibMesh;                                        		// 0x0C28 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_PreviousNetReceiveRotation;                     		// 0x0C2C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    m_TargetNetReceiveRotation;                       		// 0x0C38 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_RotationInterpRate;                             		// 0x0C44 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nNetRotationCount;                              		// 0x0C48 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nSmoothedRemoteViewPitch;                       		// 0x0C4C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nPreviousReceivedRemoteViewPitch;               		// 0x0C50 (0x0004) [0x0000000000000000]              
	int                                                m_nTargetRemoteViewPitch;                         		// 0x0C54 (0x0004) [0x0000000000000000]              
	float                                              m_PitchInterpRate;                                		// 0x0C58 (0x0004) [0x0000000000000000]              
	int                                                m_nNetViewPitchCount;                             		// 0x0C5C (0x0004) [0x0000000000000000]              
	class UClass*                                      c_Pending3PSkin;                                  		// 0x0C60 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      c_Pending1PSkin;                                  		// 0x0C64 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSwapSkinDistSq;                                		// 0x0C68 (0x0004) [0x0000000000000000]              
	float                                              m_TerrainWalkableFloorZ;                          		// 0x0C6C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54 ];

		return pClassPointer;
	};

	void eventAlienFXOverlay ( unsigned char Type );
	void ClearJetpackParticleEffects ( );
	void ClearSkiParticleEffects ( );
	class USkeletalMesh* GetHandsMesh ( class UClass* FamilyInfo );
	void ThrowWeaponOnDeath ( );
	void ThrowActiveWeapon ( unsigned long bDestroyWeap );
	void CheckApplyPending3PSkin ( );
	void SetPending3PSkin ( class UClass* NewPendingSkin );
	bool IsFirstPerson ( );
	void eventStuckOnPawn ( class APawn* OtherPawn );
	void CrushedBy ( class APawn* OtherPawn );
	struct FString GetSpectatorName ( );
	bool eventCheckClotheslineDamage ( class APawn* PawnHittingMe );
	bool DoJump ( unsigned long bUpdating );
	void PlayBlinkPackEffect ( );
	void Blink ( struct FVector Impulse, float MinZ, float PctEffectiveness );
	void LockFromFlagPickup ( float TimeToLock );
	void LockedOutFromFlagPickupTimer ( );
	class UClass* GetFamilyInfo ( );
	bool SetScannerDetect ( unsigned long detected );
	bool GetDetectedByEnemyScanner ( );
	void SetDetectedByEnemyScanner ( unsigned long detected );
	void TurnOff ( );
	void PlayTeleportEffect ( unsigned long bOut, unsigned long bSound );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void SetMovementPhysics ( );
	void ClearInvulnerability ( );
	void GoInvulnerable ( float InvulnerableTime );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, int* InDamage, struct FVector* Momentum );
	void eventHoldGameObject ( class AUDKCarriedObject* GameObj );
	void PlayDyingSound ( );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	void eventStopSkiEffectsSound ( );
	void eventPlaySkiEffectsSound ( );
	void eventStopSkiEffects ( );
	void eventPlaySkiEffects ( );
	void SetSkiing ( unsigned long bEnabled, unsigned long bJump );
	void eventUpdateStickyGrenades ( float DeltaSeconds );
	void StickGrenadeToPawn ( class ATrProjectile* Projectile );
	int FindClosestStickyGrenadeSocketIndex ( struct FVector ProjectileLocation, unsigned long bOnlyFindAvailableSlots );
	void ForceCrouch ( );
	void WeaponAttachmentChanged ( );
	void SetFirstPersonBodyVisibility ( unsigned long bHide );
	void SetMeshVisibility ( unsigned long bVisible );
	void eventDestroyed ( );
	struct FVector GetPawnViewLocation ( );
	void OnChangeJammingTeam ( );
	void PlayJammingByFriendlyDropJammerEffect ( );
	void PlayJammingByEnemyDropJammerEffect ( );
	void UpdateFriendlyDropJammer ( );
	void UpdateEnemyDropJammer ( );
	void OnExitedDropJammer ( class ATrDeployable_DropJammer* DropJammer );
	void OnEnteredDropJammer ( class ATrDeployable_DropJammer* DropJammer );
	void OnPawnExitedCollisionProxy ( class APawn* P );
	void OnPawnDetectedByCollisionProxy ( class APawn* P );
	void PlayEnemyJammerPackEffect ( unsigned long enteredJammingRadius );
	void PlayJammingByFriendEffect ( );
	void PlayJammerPackEffect ( );
	bool IsJammedByEnemy ( );
	bool IsJammedByFriendOrSelf ( );
	void ExitEnemyJammingRadius ( );
	void EnteredEnemyJammingRadius ( );
	void ExitFriendJammingRadius ( class ATrPawn* JammingFriend );
	void EnteredFriendJammingRadius ( class ATrPawn* JammingFriend );
	void DisableJammingOtherPawns ( );
	void DisableJamming ( );
	void EnableJamming ( );
	void eventOnRanOver ( class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex );
	void eventStopDriving ( class AVehicle* V );
	void eventStartDriving ( class AVehicle* V );
	void StopRidingInVehicle ( );
	void StartRidingInVehicle ( class ATrVehicle* V, int SeatIndex );
	void PlayInvulnerabilityEffect ( );
	void PlayRageEffect ( );
	void ClearRagePerk ( );
	void SetRagePerkActive ( );
	bool IsPulseStealthed ( );
	void PulseStealth ( unsigned long bOverrideIgnore );
	void PlayStealthPackEffect ( );
	void SetStealthPackActive ( unsigned long bActive );
	void PlayShieldPackEffect ( );
	void SetShieldPackActive ( unsigned long bActive );
	void ClientPlayHealthRegenEffect ( );
	void InitializeOverlayMaterials ( );
	bool CheckHeadShot ( struct FImpactInfo* Impact );
	void SetSkin ( class UMaterial* NewMaterial );
	void eventResetSkin ( );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void UpdateTeamBlockerMaterials ( );
	void NotifyTeamChanged ( );
	float GetHealthPct ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void SetOverlayMeshHidden ( unsigned long bNewHidden );
	void StopLocalEffectsAndSounds ( );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void PlayTakeHitEffects ( );
	bool IsLastHitFromNinjaSmoke ( );
	void PlayDamageCameraShake ( );
	void SetHandIKEnabled ( unsigned long bEnabled );
	bool ShouldGib ( class UClass* UTDamageType );
	void eventEncroachedBy ( class AActor* Other );
	void gibbedBy ( class AActor* Other );
	bool PerformDodge ( unsigned char DoubleClickMove, struct FVector Dir, struct FVector Cross );
	bool Dodge ( unsigned char DoubleClickMove );
	void WeaponFired ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation );
	void FlashLocationUpdated ( class AWeapon* InWeapon, struct FVector InFlashLocation, unsigned long bViaReplication );
	void ProcessCreditEvent ( unsigned char EventType, unsigned long bProxyEvent );
	void eventTakeFallDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum );
	void PlaySonicPunchEffect ( );
	void PlayHardLandingEffect ( struct FVector HitLocation );
	void TakeFallingDamage ( );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	float GetShowDistanceThreshold ( unsigned long bIsEnemy );
	bool RecentlyGrabbedFlag ( );
	void TakeRadiusDamage ( class AController* EventInstigator, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	void PlayWhiteoutEffect ( );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	class AController* CheckTribesTurretInstigator ( class AController* EventInstigator, class AActor* DamageCauser );
	void DoRepairs ( int HealAmount, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageType );
	float GetDamageScale ( class AActor* DamageCauser, float Dist, class UClass* dmgType, class AController* EventInstigator, class UTrValueModifier* VM, float* DamageScaleWithoutNewPlayerAssist );
	class ATrPawn* GetPawnCausingDamage ( class AController* EventInstigator, class AActor* DamageCauser );
	float GetUnshieldedDamage ( float inputDamage );
	void ProcessKillAssists ( class AController* Killer );
	class ATrPlayerController* GetLastDamager ( );
	struct FAssistInfo CreateAssistRecord ( class AController* Damager, int DamageAmount );
	void RememberLastDamager ( class AController* Damager, int DamageAmount, class AActor* DamagingActor );
	void PlayJumpingSound ( );
	void PlayLandingSound ( );
	void eventStopJetpackEffects ( );
	void eventUpdateJetpackEffects ( );
	void eventPlayJetpackEffects ( );
	void eventUpdateSkiEffects ( );
	struct FVector GetJetpackAirControl ( struct FVector InAcceleration, struct FVector ZAxis );
	void eventRechargeHealthPool ( float DeltaSeconds );
	void ForceHealthRegen ( );
	bool eventShouldRechargePowerPool ( );
	void ClientUpdateHUDHealth ( int NewHealth, int NewHealthMax );
	void SetMaxHealthPool ( int Value );
	void SetMaxPowerPool ( int Value );
	void AdjustMaxPowerPool ( float Change );
	void AdjustAmmoPool ( float Change );
	int GetShieldStrength ( );
	void ProcessEffectForm ( class UClass* efClass, unsigned long bRemove );
	void RemoveEffectByClass ( class UClass* efClass );
	void ActivateSelectedDeployable ( );
	void RefreshInventory ( unsigned long bIsRespawn, unsigned long bCallin );
	void SetValuesFromCurrentFamilyInfo ( );
	void RefreshInventoryTimer ( );
	void ActivatePendingClass ( unsigned long bIsRespawn, unsigned long bCallin );
	void SetCharacterClassFromInfo ( class UClass* Info, unsigned long bForce );
	void InitDefaultAnims ( class UClass* Info );
	void EquipBestPossibleDevice ( unsigned char eqpPoint );
	void ReplicateMultiFlashLocation ( int shotNumber, struct FVector HitLocation );
	void eventReplicatedEvent ( struct FName VarName );
	unsigned char eventGetArmorType ( );
	class ATrHUD* GetTrHud ( );
	class ATrPlayerReplicationInfo* GetTribesReplicationInfo ( );
	class UClass* GetCurrCharClassInfo ( );
	void ExitDeployMode ( );
	int CurrentDeployedCount ( class UClass* DeviceClass );
	void ClientRestart ( );
	int GetCurrentCredits ( );
	float GetMaxPowerPool ( );
	float GetCurrentPowerPool ( );
	void eventTick ( float DeltaTime );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void PostBeginPlay ( );
	void SetFlashNormal ( struct FVector FlashNormal );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	void NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	bool ServerUpdateLockedTarget ( class AActor* Locked );
	void SetOverlayMaterial ( class UMaterialInterface* NewOverlay );
	void GetCurrentDeviceAccuracyInfo ( float* fAccuracy, float* fAmountCurrentlyOffOfTargetAccuray );
	float GetPowerPoolPercent ( );
	void RegainPowerPool ( float fDeltaTime );
	void ConsumePowerPool ( float fAmount );
	void SyncClientCurrentPowerPool ( );
	float NativeGetCollisionRadius ( );
	float NativeGetCollisionHeight ( );
	int CalculatePawnSpeed ( );
	void CheckGrabSpeed ( );
};

UClass* ATrPawn::pClassPointer = NULL;

// Class TribesGame.AlienFXManager
// 0x0052 (0x008E - 0x003C)
class UAlienFXManager : public UObject
{
public:
	int                                                nTeam;                                            		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                nHealth;                                          		// 0x0040 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowFX : 1;                                      		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLoaded : 1;                                      		// 0x0044 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bMenuOpen : 1;                                    		// 0x0044 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bBrighten : 1;                                    		// 0x0044 (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              fDamageTime;                                      		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              fObjectiveTime;                                   		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              fDamages[ 0x8 ];                                  		// 0x0050 (0x0020) [0x0000000000000000]              
	int                                                nTarget;                                          		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              fLowBounds;                                       		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              fHighBounds;                                      		// 0x0078 (0x0004) [0x0000000000000000]              
	float                                              fBoundsPct;                                       		// 0x007C (0x0004) [0x0000000000000000]              
	float                                              fSpeed;                                           		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              fInterval;                                        		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              fIntervalCount;                                   		// 0x0088 (0x0004) [0x0000000000000000]              
	unsigned char                                      eCurrOverlay;                                     		// 0x008C (0x0001) [0x0000000000000000]              
	unsigned char                                      eLastOverlay;                                     		// 0x008D (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1490 ];

		return pClassPointer;
	};

	void DamageConvert ( struct FString Area );
	void Overlay ( unsigned char Type );
	void Tick ( float DeltaTime );
	void SetHealth ( int Health );
	void SetTeam ( int TeamNum );
	void Damage ( unsigned char Area );
	void menu ( unsigned long bOpen );
	void CheckHealth ( );
	void SwapWeapon ( );
	void Objective ( );
	void Queued ( );
	void Close ( );
	void Init ( unsigned long bEnable );
};

UClass* UAlienFXManager::pClassPointer = NULL;

// Class TribesGame.GFxTrFront
// 0x0000 (0x017C - 0x017C)
class UGFxTrFront : public UGFxMoviePlayer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1491 ];

		return pClassPointer;
	};

};

UClass* UGFxTrFront::pClassPointer = NULL;

// Class TribesGame.GFxTrMenuMoviePlayer
// 0x028C (0x0408 - 0x017C)
class UGFxTrMenuMoviePlayer : public UGFxMoviePlayer
{
public:
	unsigned char                                      m_PopupType;                                      		// 0x017C (0x0001) [0x0000000000000000]              
	unsigned char                                      UnlockIconType;                                   		// 0x017D (0x0001) [0x0000000000000000]              
	unsigned long                                      bPeachy : 1;                                      		// 0x0180 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bStartupCompleted : 1;                            		// 0x0180 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bWelcomed : 1;                                    		// 0x0180 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bInGame : 1;                                      		// 0x0180 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bLoading : 1;                                     		// 0x0180 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bInQueue : 1;                                     		// 0x0180 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bQueueListDirty : 1;                              		// 0x0180 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bEndOfMatch : 1;                                  		// 0x0180 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bNeedsEULA : 1;                                   		// 0x0180 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bLoggedIn : 1;                                    		// 0x0180 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bBlockHotkey : 1;                                 		// 0x0180 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bFullyLoaded : 1;                                 		// 0x0180 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bInitialized : 1;                                 		// 0x0180 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bBlockRelease : 1;                                		// 0x0180 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bProfileLoaded : 1;                               		// 0x0180 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bCreatingNewPlayer : 1;                           		// 0x0180 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bWebVendorLoaded : 1;                             		// 0x0180 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      LoginSuccess : 1;                                 		// 0x0180 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bEquipmentLoaded : 1;                             		// 0x0180 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bShowDiamondSword : 1;                            		// 0x0180 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bShowPurchaseFailed : 1;                          		// 0x0180 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bWaitingForSelectionPopup : 1;                    		// 0x0180 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bWaitingForCurrencyPopup : 1;                     		// 0x0180 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bWaitingForConfirmationPopup : 1;                 		// 0x0180 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bShowPromoCodeFailed : 1;                         		// 0x0180 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bShowGenericFailure : 1;                          		// 0x0180 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bWaitingForPlayerNamePopup : 1;                   		// 0x0180 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bWaitingForPlayerNameInput : 1;                   		// 0x0180 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bViewingSummary : 1;                              		// 0x0180 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bWaitingForQuitGameConfirm : 1;                   		// 0x0180 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bWaitingForLeaveMatchConfirm : 1;                 		// 0x0180 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bWaitingForLoginQueuePopup : 1;                   		// 0x0180 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bWaitingForServerDropPopup : 1;                   		// 0x0184 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWaitingForAFKKickPopup : 1;                      		// 0x0184 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bWaitingForAddFriendPopup : 1;                    		// 0x0184 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bWaitingForLoginFailedPopup : 1;                  		// 0x0184 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bWaitingForPurchaseReturn : 1;                    		// 0x0184 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bWaitingForJoinFailed : 1;                        		// 0x0184 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bWaitingForJoinRequiresPassword : 1;              		// 0x0184 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bWaitingForPopup : 1;                             		// 0x0184 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bPasswordPopup : 1;                               		// 0x0184 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bChatOpen : 1;                                    		// 0x0184 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bInvitationPopup : 1;                             		// 0x0184 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bBadgeModification : 1;                           		// 0x0184 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bOpeningMenu : 1;                                 		// 0x0184 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bRefreshingMenu : 1;                              		// 0x0184 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bWaitingForEntry : 1;                             		// 0x0184 (0x0004) [0x0000000000000000] [0x00004000] 
	struct FString                                     LoginPlayer;                                      		// 0x0188 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	struct FString                                     LoginReason;                                      		// 0x0194 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	struct FString                                     LoginFailure;                                     		// 0x01A0 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	struct FString                                     CapturedKey;                                      		// 0x01AC (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	struct FString                                     PromoFailReason;                                  		// 0x01B8 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	struct FString                                     GenericFailReason;                                		// 0x01C4 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	struct FString                                     NextMapName;                                      		// 0x01D0 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	int                                                UnlockIconId;                                     		// 0x01DC (0x0004) [0x0000000000000000]              
	struct FString                                     UnlockItemName;                                   		// 0x01E0 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	struct FString                                     UnlockTypeName;                                   		// 0x01EC (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	int                                                PlayerNameFailType;                               		// 0x01F8 (0x0004) [0x0000000000000000]              
	int                                                EndOfMatchTimer;                                  		// 0x01FC (0x0004) [0x0000000000000000]              
	int                                                PurchasingCurrency;                               		// 0x0200 (0x0004) [0x0000000000000000]              
	int                                                Progress;                                         		// 0x0204 (0x0004) [0x0000000000000000]              
	int                                                NextRank;                                         		// 0x0208 (0x0004) [0x0000000000000000]              
	int                                                RankIcon;                                         		// 0x020C (0x0004) [0x0000000000000000]              
	struct FString                                     PurchaseFailedMsg;                                		// 0x0210 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	int                                                EstimatedWaitTime;                                		// 0x021C (0x0004) [0x0000000000000000]              
	struct FString                                     NameRulesMessage;                                 		// 0x0220 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendLabel;                                      		// 0x022C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FollowerLabel;                                    		// 0x0238 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OfflineLabel;                                     		// 0x0244 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OnlineLabel;                                      		// 0x0250 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InGameLabel;                                      		// 0x025C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InLobbyLabel;                                     		// 0x0268 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OKLabel;                                          		// 0x0274 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CancelLabel;                                      		// 0x0280 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FVendorItemData >                   SteamItemList;                                    		// 0x028C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPropertyPair >                     UnknownList;                                      		// 0x0298 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FAcquisitionData >                  AcquisitionList;                                  		// 0x02A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FQueueUIData >                      QueueUIList;                                      		// 0x02B0 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	class UGFxTrScene_EULA*                            EULAScene;                                        		// 0x02BC (0x0004) [0x0000000000000000]              
	class UGFxTrScene_MatchSummary*                    MatchSummaryScene;                                		// 0x02C0 (0x0004) [0x0000000000000000]              
	class UGFxTrScene_PlayerSummary*                   PlayerSummaryScene;                               		// 0x02C4 (0x0004) [0x0000000000000000]              
	class UGFxTrMenuSounds*                            MenuSounds;                                       		// 0x02C8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  _global;                                          		// 0x02CC (0x0004) [0x0000000000000000]              
	class UTrUser*                                     User;                                             		// 0x02D0 (0x0004) [0x0000000000000000]              
	class UTrStrings*                                  Strings;                                          		// 0x02D4 (0x0004) [0x0000000000000000]              
	class UTrPageManager*                              Pages;                                            		// 0x02D8 (0x0004) [0x0000000000000000]              
	class UTrLoadingData*                              LoadingData;                                      		// 0x02DC (0x0004) [0x0000000000000000]              
	class UTrLoginManager*                             LoginManager;                                     		// 0x02E0 (0x0004) [0x0000000000000000]              
	class UTrQueueManager*                             QueueManager;                                     		// 0x02E4 (0x0004) [0x0000000000000000]              
	class UTrPartyManager*                             PartyManager;                                     		// 0x02E8 (0x0004) [0x0000000000000000]              
	class UTrStreamManager*                            StreamManager;                                    		// 0x02EC (0x0004) [0x0000000000000000]              
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x02F0 (0x0004) [0x0000000000000000]              
	class UTrFriendManager*                            Friends;                                          		// 0x02F4 (0x0004) [0x0000000000000000]              
	class UTrBrowserManager*                           Browser;                                          		// 0x02F8 (0x0004) [0x0000000000000000]              
	class UTgPlayerProfile*                            PlayerProfile;                                    		// 0x02FC (0x0004) [0x0000000000000000]              
	class UTrEquipInterface*                           EquipInterface;                                   		// 0x0300 (0x0004) [0x0000000000000000]              
	class UTrInventoryHelper*                          EquipHelper;                                      		// 0x0304 (0x0004) [0x0000000000000000]              
	class UTrSettingsManager*                          SettingsManager;                                  		// 0x0308 (0x0004) [0x0000000000000000]              
	class UOnlineChatInterface*                        ChatInterface;                                    		// 0x030C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0310 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UTrRibbonManager*                            RibbonManager;                                    		// 0x0314 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __DelegateNoParam__Delegate;                      		// 0x0318 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateInt__Delegate;                          		// 0x0324 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateBool__Delegate;                         		// 0x0330 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateString__Delegate;                       		// 0x033C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateGFxList__Delegate;                      		// 0x0348 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateIntInt__Delegate;                       		// 0x0354 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateIntString__Delegate;                    		// 0x0360 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateStringInt__Delegate;                    		// 0x036C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateStringBool__Delegate;                   		// 0x0378 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateIntGFxList__Delegate;                   		// 0x0384 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateOnMarshalEvent__Delegate;               		// 0x0390 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateGetInt__Delegate;                       		// 0x039C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateGetPrice__Delegate;                     		// 0x03A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateIntIntInt__Delegate;                    		// 0x03B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateGetBoolIntInt__Delegate;                		// 0x03C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateLogin__Delegate;                        		// 0x03CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateBoolGetBool__Delegate;                  		// 0x03D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateGetString__Delegate;                    		// 0x03E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateOptions__Delegate;                      		// 0x03F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateAction__Delegate;                       		// 0x03FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1492 ];

		return pClassPointer;
	};

	void SetAlertDelegate ( struct FScriptDelegate In );
	void SetBrowserClassVideoDelegate ( struct FScriptDelegate In );
	void SetGetViewModeDelegate ( struct FScriptDelegate In );
	void SetBrowserStoreDelegate ( struct FScriptDelegate In );
	void SetBrowserGoldDelegate ( struct FScriptDelegate In );
	void SetGetPlatformDelegate ( struct FScriptDelegate In );
	void SetShowingPopupDelegate ( struct FScriptDelegate In );
	void SetExitQueueDelegate ( struct FScriptDelegate In );
	void SetExitGameDelegate ( struct FScriptDelegate In );
	void SetAcceptEULADelegate ( struct FScriptDelegate In );
	void SetBrowserRecoverUsernameDelegate ( struct FScriptDelegate In );
	void SetBrowserRecoverPasswordDelegate ( struct FScriptDelegate In );
	void SetLoadTeamScoreboardDataDelegate ( struct FScriptDelegate In );
	void SetLoadTeamStatsDataDelegate ( struct FScriptDelegate In );
	void SetLoadTeamMiscDataDelegate ( struct FScriptDelegate In );
	void SetLoadPlayerAccoladeDataDelegate ( struct FScriptDelegate In );
	void SetLoadTeamAccoladeDataDelegate ( struct FScriptDelegate In );
	void SetBrowserCreateAccountDelegate ( struct FScriptDelegate In );
	void SetLoadPlayerStatsDataDelegate ( struct FScriptDelegate In );
	void SetLoadPlayerMiscDataDelegate ( struct FScriptDelegate In );
	void SetBrowserActivateKeyDelegate ( struct FScriptDelegate In );
	void SetSubmitPlayerNameDelegate ( struct FScriptDelegate In );
	void SetBrowserProfileDelegate ( struct FScriptDelegate In );
	void SetBrowserSupportDelegate ( struct FScriptDelegate In );
	void SetBrowserBoosterDelegate ( struct FScriptDelegate In );
	void SetLoginDelegate ( struct FScriptDelegate In );
	void SetEscapeClass ( struct FScriptDelegate In );
	void SetSoundClassType ( struct FScriptDelegate In );
	void SetSoundSkillType ( struct FScriptDelegate In );
	void SetSoundPerkType ( struct FScriptDelegate In );
	void SetSoundXPGain ( struct FScriptDelegate In );
	void SetSoundSkillBar ( struct FScriptDelegate In );
	void SetShowSummaryDelegate ( struct FScriptDelegate In );
	void SetSmoothAnimDelegate ( struct FScriptDelegate In );
	void SetStartLoginDelegate ( struct FScriptDelegate In );
	void SetRequestNewsDelegate ( struct FScriptDelegate In );
	void SetSaveReticuleDelegate ( struct FScriptDelegate In );
	void SetReticuleActionDelegate ( struct FScriptDelegate In );
	void SetServerSortDelegate ( struct FScriptDelegate In );
	void SetServerPageDelegate ( struct FScriptDelegate In );
	void SetPasswordServerDelegate ( struct FScriptDelegate In );
	void SetFavoriteServerDelegate ( struct FScriptDelegate In );
	void SetJoinCustomServerDelegate ( struct FScriptDelegate In );
	void SetSelectedFeatureDelegate ( struct FScriptDelegate In );
	void SetPromoActionDelegate ( struct FScriptDelegate In );
	void SetProfilePageDownDelegate ( struct FScriptDelegate In );
	void SetProfilePageUpDelegate ( struct FScriptDelegate In );
	void SetSummaryActionDelegate ( struct FScriptDelegate In );
	void SetFriendPlayerDelegate ( struct FScriptDelegate In );
	void SetMutePlayerDelegate ( struct FScriptDelegate In );
	void SetLoadXPSummaryDelegate ( struct FScriptDelegate In );
	void SetModifyFocusDelegate ( struct FScriptDelegate In );
	void SetActionDownDelegate ( struct FScriptDelegate In );
	void SetActionUpDelegate ( struct FScriptDelegate In );
	void SetModifiedActionDelegate ( struct FScriptDelegate In );
	void SetSelectedActionDelegate ( struct FScriptDelegate In );
	void SetFocusedActionDelegate ( struct FScriptDelegate In );
	void SetPopupCompleteDelegate ( struct FScriptDelegate In );
	void SetPopupDataDelegate ( struct FScriptDelegate In );
	void SetHelpButtonDelegate ( struct FScriptDelegate In );
	void ASC_SetMapLoadText ( struct FString A, struct FString B, struct FString C, struct FString D, struct FString E, struct FString F, struct FString G, struct FString H );
	void ASC_OpeningMenu ( );
	void ASC_ShowPeach ( );
	void ASC_ShowNews ( struct FString News, unsigned long bFeatured );
	void ASC_HideReticuleBuilder ( );
	void ASC_ShowReticuleBuilder ( class UGFxObject* Data );
	void ASC_SetFontIndex ( int FontIdx );
	void ASC_FillProfile ( class UGFxObject* ObjList );
	void ASC_UnlockedItem ( struct FString TopName, struct FString BotName, struct FString IconType, int IconId );
	void ASC_PurchaseComplete ( unsigned long bSuccess, struct FString Message );
	void ASC_PromptNewPlayerName ( struct FString ErrorString );
	void ASC_KeyPressCaptured ( struct FString KeyName );
	void ASC_FillEULAText ( struct FString EULAText, struct FString Title, struct FString Accept, struct FString Decline );
	void ASC_GlobalAlert ( struct FString Message );
	void ASC_PopupError ( struct FString Message );
	void ASC_LoadPlayerSummary ( );
	void ASC_LoadMatchSummary ( );
	void ASC_ProfileUpdated ( );
	void ASC_StopLoading ( );
	void ASC_FocusLogin ( );
	void ASC_ForceFocus ( );
	void ASC_HideMovie ( );
	void ASC_JoinGame ( );
	void ASC_LeftGame ( );
	void ASC_Resize ( );
	void ASC_GotoState ( struct FString NewState );
	void ASC_ShowQueue ( struct FString Estimate );
	void HidePopup ( );
	void ClosePopup ( );
	void HideWorkingGraphic ( );
	void ShowWorkingGraphic ( );
	void UpdateButton ( class UGFxObject* Obj );
	void TweenPlayerSummary ( );
	void eventHideNotification ( );
	void eventShowNotification ( struct FString Message, struct FString Message2 );
	void UpdateStatus ( struct FString Message );
	void StartMainMenu ( );
	void StartLogin ( );
	void QueuePopup ( );
	void CreateAccount ( );
	void eventNavigateSteamGold ( unsigned long bSuccess );
	bool HandlePopupComplete ( int Id, struct FString Text );
	bool HandlePopup ( class UGFxObject* Obj );
	void eventShowSteamResponse ( unsigned long bAuthorized );
	void eventStartSteamTransaction ( );
	void eventToggleChat ( );
	void eventPushChat ( struct FString chatStr );
	void eventHideChat ( );
	void eventShowChat ( );
	void eventAddVehicleMenuOption ( struct FString ClassName, struct FString DisplayName, int Cost, int Icon, int CountSpawned, int CountAllowed );
	void PullOpenMenu ( );
	void eventShowVehicleMenu ( int Credits );
	void eventClearVehicleMenu ( );
	void eventUILoadSummary ( );
	void eventSeedAccolades ( class UTgPlayerProfile* Profile );
	void eventUnlockedUnknown ( int VendorId, int LootId );
	void eventToggleWorkingGraphic ( unsigned long bEnabled );
	void eventTweenExperienceSummary ( );
	void eventBeginExperienceTweens ( unsigned long bDailyCompleted, unsigned long bWeeklyCompleted );
	void eventQueueTimer ( );
	void RequestNews ( );
	void eventDealTimer ( );
	void eventRevertSetting ( );
	void NewPlayerNamePopup ( class UGFxObject* Obj );
	void GenericFailurePopup ( class UGFxObject* Obj );
	void eventGenericFailure ( struct FString Reason );
	void PromoCodeFailedPopup ( class UGFxObject* Obj );
	void eventPromoCodeFailed ( struct FString Reason );
	void PurchaseFailedPopup ( class UGFxObject* Obj );
	void eventPurchaseFailed ( struct FString FailMessage );
	void AddFriendScoreboardPopup ( class UGFxObject* Obj );
	void PasswordPopup ( class UGFxObject* Obj );
	void WaitingForPurchaseReturn ( class UGFxObject* Obj );
	void LoginFailedPopup ( class UGFxObject* Obj );
	void AFKKickPopupData ( class UGFxObject* Obj );
	void ServerDropPopupData ( class UGFxObject* Obj );
	void LoginQueuePopupComplete ( int Action );
	void LoginQueuePopupData ( class UGFxObject* Obj );
	void eventPlayerInLoginQueue ( int Estimate );
	void eventKickVoteFeedback ( unsigned long bComplete, struct FString Message );
	void eventFireAcquisitions ( );
	void eventDisplayAcquisitions ( );
	void ReadyAcquisition ( struct FString TopName, struct FString BotName, unsigned char IconType, int IconId );
	void CheckVIPForLogin ( );
	void eventClaimedPromotion ( struct FString PromoName );
	void eventWinOfTheDay ( );
	void eventUnlockedSkill ( int SkillId, int ParentId );
	void eventUnlockedClanTag ( unsigned long bRemoved );
	void eventUnlockedServerTime ( );
	void eventUnlockedVIP ( );
	void eventUnlockedNameChange ( struct FString Description );
	void eventUnlockedBadge ( struct FString Description, struct FString RankStr, int Id );
	void eventUnlockedBooster ( struct FString Description );
	void eventUnlockedXP ( struct FString Description );
	void eventUnlockedGold ( struct FString Description );
	void eventUnlockedItem ( struct FString Description, int ItemId );
	void eventEndHotkeyBlock ( );
	void StartHotkeyBlock ( );
	class ATrHUD* GetPlayerHUD ( );
	bool PlayerNeedsClass ( );
	bool PlayerNeedsTeam ( );
	bool TeamSelectOpen ( );
	bool TeamSelectActive ( );
	bool eventKeyPressCaptured ( struct FString KeyName, unsigned long bReleased );
	void eventKeyBindCaptured ( struct FString KeyName );
	bool eventRequestPaperDoll ( );
	void eventLoadingTimer ( unsigned long bStart );
	void eventSetCountdownTimer ( int Seconds );
	void ChatMessageReceived ( int Channel, struct FString Sender, struct FString Message );
	void eventHideMovie ( );
	void eventShowMovie ( unsigned long bFocus );
	struct FString GetViewMode ( );
	int GetPlatform ( );
	void RestorePlayerHUD ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	class UClass* GetRankFromXP ( int XP );
	struct FString GetBoostLabel ( int Hours );
	void SendProfileData ( );
	void eventFillProfileData ( );
	int eventGetUserSelectedClass ( );
	void eventPlayerNameNotAllowed ( unsigned long bTaken );
	void eventCreateNewPlayer ( );
	void eventDisplayEULA ( );
	void ExitPopup ( );
	void eventProfileUpdated ( );
	void CheckRibbons ( unsigned long bForce );
	void JoinRequiresPasswordComplete ( int Action, struct FString TextInput );
	void eventJoinRequiresPassword ( );
	void DisplayJoinFailed ( class UGFxObject* Obj );
	void eventJoinFailed ( struct FString Error );
	void eventSwapModel ( );
	void eventRefreshPage ( );
	void eventEquipmentChanged ( );
	void eventEquipmentLoaded ( );
	void eventSendBack ( );
	bool eventIsLoadComplete ( );
	void eventOnProfileLoaded ( unsigned long bShowEula );
	void AlienMenu ( );
	void eventSendPlayerLogin ( struct FString PlayerName, struct FString Reason, unsigned long Success, unsigned long bNeedEULA );
	void Quit ( );
	void LeaveMatchPopupComplete ( int Action );
	void QuitGamePopupComplete ( int Action );
	void LeaveMatchPopup ( class UGFxObject* Obj );
	void QuitGamePopup ( class UGFxObject* Obj );
	void LeaveMatch ( );
	void QuitGame ( );
	void eventOpenSettings ( );
	void eventOpenFriends ( );
	void eventOpenClasses ( );
	void eventOpenMenu ( );
	void CloseClasses ( );
	void eventEscape ( );
	void eventShowSummary ( );
	void eventSetEndOfMatch ( );
	void eventSetPlayerInGame ( );
	void eventSetPlayerLoading ( );
	void eventSetPlayerInLobby ( );
	void eventSetPlayerInLogin ( unsigned long bServerDrop );
	void eventSetPlayerMainMenu ( );
	bool HaveEntry ( );
	void eventEntryPlayerReady ( );
	void eventShowPeach ( );
	void eventStartPeach ( );
	struct FString StripTag ( struct FString sValue );
	void ToggleMutePlayer ( struct FString PlayerName );
	void SummaryAction ( int ActionId );
	void CompleteStartup ( );
	bool Start ( unsigned long StartPaused );
	bool HaveClanTag ( );
	int GetEquipmentTierXP ( int ActivityId, int Tier );
	int GetEquipmentXP ( int ActivityId );
	void RequestStreams ( );
	int GetLanguageFontIndex ( );
	void GetQueueUIInfo ( );
	bool AddAcquisition ( int VendorId, int LootId );
	void ForceFocus ( );
	struct FString GetVersionString ( );
	bool RegisterMarshalCallback ( struct FScriptDelegate MarshalEventDelegate );
	void UserLoginChanged ( struct FPointer pMarEvent );
	bool ReadPlayerProfileData ( class UTgPlayerProfile* Profile );
	void OnMarshalEvent ( struct FPointer pMarEvent );
	void PurchasedItem ( int VendorId, int LootId, unsigned long bSuccess, struct FString Message );
	bool CheckAutoLoginStatus ( );
	void RequestSteamUserData ( );
	void RequestPurchaseSteamItem ( int LootId, int Price );
	int GetSteamItemInfo ( );
	bool UseSteam ( );
	int DelegateAction ( int val, class UGFxObject* List );
	void DelegateOptions ( class UGFxObject* List, int ClassId, int SkillId );
	struct FString DelegateGetString ( );
	bool DelegateBoolGetBool ( unsigned long val );
	bool DelegateLogin ( struct FString UserName, struct FString Password, unsigned long bRemember );
	bool DelegateGetBoolIntInt ( int SlotId, int ClassId );
	bool DelegateIntIntInt ( int Val1, int Val2, int Val3 );
	int DelegateGetPrice ( float XPValue );
	int DelegateGetInt ( );
	void DelegateOnMarshalEvent ( struct FPointer pMarEvent );
	void DelegateIntGFxList ( int val, class UGFxObject* List );
	void DelegateStringBool ( struct FString val, unsigned long bVal );
	void DelegateStringInt ( struct FString Val1, int Val2 );
	void DelegateIntString ( int Val1, struct FString Val2 );
	void DelegateIntInt ( int Val1, int Val2 );
	void DelegateGFxList ( class UGFxObject* List );
	void DelegateString ( struct FString val );
	void DelegateBool ( unsigned long bVal );
	void DelegateInt ( int val );
	void DelegateNoParam ( );
};

UClass* UGFxTrMenuMoviePlayer::pClassPointer = NULL;

// Class TribesGame.GFxTrScene
// 0x000C (0x0084 - 0x0078)
class UGFxTrScene : public UGFxObject
{
public:
	unsigned long                                      bSceneCreated : 1;                                		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x007C (0x0004) [0x0000000000000000]              
	class UGFxTrMenuMoviePlayer*                       TrOuter;                                          		// 0x0080 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1493 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UGFxTrScene::pClassPointer = NULL;

// Class TribesGame.GFxTrScene_EULA
// 0x000C (0x0090 - 0x0084)
class UGFxTrScene_EULA : public UGFxTrScene
{
public:
	struct FString                                     EULA;                                             		// 0x0084 (0x000C) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1494 ];

		return pClassPointer;
	};

	void EULAReponse ( unsigned long bAccepted );
	void Initialize ( );
	void AcceptEULA ( );
	void LoadEULA ( );
};

UClass* UGFxTrScene_EULA::pClassPointer = NULL;

// Class TribesGame.GFxTrScene_MatchSummary
// 0x0470 (0x04F4 - 0x0084)
class UGFxTrScene_MatchSummary : public UGFxTrScene
{
public:
	int                                                SCOREBOARD_SIZE;                                  		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                MiscDataCount;                                    		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                AwardDataCount;                                   		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                AccoladeDataCount;                                		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                ScoreboardDataCount;                              		// 0x0094 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  MiscDataList;                                     		// 0x0098 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  AwardDataList;                                    		// 0x009C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  AccoladeDataList;                                 		// 0x00A0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ScoreboardDataList;                               		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                WinningTeam;                                      		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                MatchId;                                          		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                MatchMapId;                                       		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                MatchGameType;                                    		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                MatchDuration;                                    		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                MatchDate;                                        		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                Team1Score;                                       		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                Team2Score;                                       		// 0x00C4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseSNS : 1;                                      		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FScoreSlot                                  Scoreboard[ 0x20 ];                               		// 0x00CC (0x0400) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMVPAward >                         MVPAwards;                                        		// 0x04CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMVPAward >                         MVPAccolades;                                     		// 0x04D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTrSummaryHelper*                            SummaryHelper;                                    		// 0x04E4 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __CreditsSort__Delegate;                          		// 0x04E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1495 ];

		return pClassPointer;
	};

	int CreditsSort ( class ATrPlayerReplicationInfo* A, class ATrPlayerReplicationInfo* B );
	void PopulateScoreboardDataFromGRI ( );
	struct FString FindPlayerName ( int PlayerID );
	struct FString FormatTime ( int Seconds );
	struct FString FormatResult ( int aWinningTeam );
	void AddMiscData ( );
	void AddScoreSlot ( struct FString PlayerName, int Kills, int Assists, int Credits, int Rank );
	void AddAccolade ( int PlayerID, int AccoladeId, int val );
	void AddAward ( int PlayerID, int AwardId, int val );
	void LoadTeamMiscData ( class UGFxObject* List );
	void LoadTeamScoreboardData ( class UGFxObject* List );
	void LoadTeamAccoladeData ( class UGFxObject* List );
	void LoadTeamStatsData ( class UGFxObject* List );
	void eventSummaryReady ( );
	void eventClearSummary ( );
	void Initialize ( );
};

UClass* UGFxTrScene_MatchSummary::pClassPointer = NULL;

// Class TribesGame.GFxTrScene_PlayerSummary
// 0x008C (0x0110 - 0x0084)
class UGFxTrScene_PlayerSummary : public UGFxTrScene
{
public:
	int                                                AWARD_TIER_SIZE;                                  		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                SkillClassId;                                     		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                MiscDataCount;                                    		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                AwardDataCount;                                   		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                AccoladeDataCount;                                		// 0x0094 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  MiscDataList;                                     		// 0x0098 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  AwardDataList;                                    		// 0x009C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  AccoladeDataList;                                 		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                PlayerID;                                         		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                Kills;                                            		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                Deaths;                                           		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                Assists;                                          		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                Credits;                                          		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                TopPlayedClass;                                   		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                RankBase;                                         		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                RankGained;                                       		// 0x00C0 (0x0004) [0x0000000000000000]              
	struct FString                                     PlayerName;                                       		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                XPBase;                                           		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                XPPerf;                                           		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                XPVIP;                                            		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                XPBoost;                                          		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                EarnedBadgeValue;                                 		// 0x00E0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseSNS : 1;                                      		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bFirstWin : 1;                                    		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSummaryReady : 1;                                		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSummaryTweened : 1;                              		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bSummaryXPTweened : 1;                            		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000010] 
	TArray< struct FPropertyPair >                     AwardData;                                        		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPropertyPair >                     accoladeData;                                     		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBadgeStruct >                      EarnedBadges;                                     		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTrSummaryHelper*                            SummaryHelper;                                    		// 0x010C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1496 ];

		return pClassPointer;
	};

	int GetFlagReturnCount ( );
	int GetFlagGrabCount ( );
	void AddMiscData ( );
	void AddAccolade ( int AccoladeId, int val );
	void AddBadge ( struct FBadgeStruct Badge );
	void AddAward ( int AwardId, int val );
	void LoadPlayerMiscData ( class UGFxObject* List );
	void LoadPlayerAccoladeData ( class UGFxObject* List );
	void LoadPlayerStatsData ( class UGFxObject* List );
	void LoadXPData ( class UGFxObject* List );
	void eventSummaryReady ( );
	void ClearEarnedBadgeValue ( );
	void eventClearSummary ( );
	void Initialize ( );
};

UClass* UGFxTrScene_PlayerSummary::pClassPointer = NULL;

// Class TribesGame.Interface_TrTripNotifier
// 0x0000 (0x003C - 0x003C)
class UInterface_TrTripNotifier : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1497 ];

		return pClassPointer;
	};

	void eventOnTripSleep ( );
	void eventOnTripAwake ( );
	bool eventGetTripSocketPosition ( unsigned long bIsLeft, struct FVector* SocketPosition );
	class UParticleSystem* GetParticleSystemName ( );
	void TripActivated ( class APawn* Other, struct FVector ActivateLocation, class ATrTripActor* TripActor );
	void RemoveTripActor ( class ATrTripActor* RemoveTrip );
	void AddTripActor ( class ATrTripActor* NewTrip );
};

UClass* UInterface_TrTripNotifier::pClassPointer = NULL;

// Class TribesGame.TrAccoladeManager
// 0x0038 (0x0074 - 0x003C)
class UTrAccoladeManager : public UObject
{
public:
	class ATrGame*                                     m_TrG;                                            		// 0x003C (0x0004) [0x0000000000000000]              
	class ATrPlayerController*                         m_TrPC;                                           		// 0x0040 (0x0004) [0x0000000000000000]              
	class UTrStatsInterface*                           Stats;                                            		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrSnipingKillStreak;                         		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrExplosiveKillStreak;                       		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                m_nCurrSpinfusorKillStreak;                       		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                MINIMUM_TIME_FLAG_CREDITS;                        		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                MAXIMUM_LLAMA_GRAB_SPEED;                         		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                MINIMUM_FAST_GRAB_SPEED;                          		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                MINIMUM_ULTRA_GRAB_SPEED;                         		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                MAXIMUM_FLAG_DEFENSE_DISTANCE;                    		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                MAXIMUM_EMERGENCY_GRAB_DISTANCE;                  		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                m_nLastFlagGrabTime;                              		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                m_nLastFlagReturnTime;                            		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1498 ];

		return pClassPointer;
	};

	void BroadcastAccolade ( class UClass* Accolade );
	bool CreditsGiven ( class UClass* Accolade );
	void QueueAccolade ( class UClass* Accolade, int ModifiedCredits );
	void UpdateSpecialAccolades ( class AController* Victim );
	void VehicleDestroyed ( class ATrVehicle* aVehicle );
	void UpdateMultiKills ( int MultiKillLevel );
	void GameWon ( );
	void GameCompleted ( );
	void NoJoy ( );
	void FlagReturn ( );
	void FlagCapture ( unsigned long bUnAssisted );
	void FlagAssist ( int AssistCount );
	void FlagHeld ( );
	void FlagGrabDeathmatch ( );
	void FlagGrab ( );
	void KilledBaseRadar ( );
	void KilledBaseTurret ( );
	void RepairedBase ( );
	void KilledGenerator ( );
	void UpdateStandardKillingSpree ( class AUTPlayerReplicationInfo* Other, int currentSpree );
	void KilledTheFlagHolder ( );
	void KilledTheRabbit ( class AController* Killer, class AController* Other );
	void KillAsRabbit ( class AController* Killer, class AController* Other );
	void GiveVehicleAssist ( );
	void GiveAssist ( );
	void ResetStreaks ( );
	void Initialize ( class ATrPlayerController* TrPC );
	int GetFlagDistance ( struct FVector Loc1, struct FVector Loc2 );
};

UClass* UTrAccoladeManager::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeAimOffset
// 0x0050 (0x018C - 0x013C)
class UTrAnimNodeAimOffset : public UAnimNodeAimOffset
{
public:
	class ATrPawn*                                     m_TrPawn;                                         		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ATrDevice*                                   m_TrDevice;                                       		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTurnInPlaceOffset;                             		// 0x0144 (0x0004) [0x0000000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )
	struct FVector2D                                   m_v2dLastAimOffset;                               		// 0x0148 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector2D                                   m_v2dLastPostProcessedAimOffset;                  		// 0x0150 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              m_fTurnAroundTimeToGo;                            		// 0x0158 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              m_fTurnAroundBlendTime;                           		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bRandomAimPointsEnabled : 1;                    		// 0x0160 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FVector2D                                   m_RandomAimPointsRangeX;                          		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   m_RandomAimPointsRangeY;                          		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRandomAimPointsInterpRate;                     		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRandomAimPointsIntervalMin;                    		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRandomAimPointsIntervalMax;                    		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCurrentRandomAimPointsInterval;                		// 0x0180 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   m_TargetRandomAimLocation;                        		// 0x0184 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1499 ];

		return pClassPointer;
	};

};

UClass* UTrAnimNodeAimOffset::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeBlendByDirection
// 0x0010 (0x015C - 0x014C)
class UTrAnimNodeBlendByDirection : public UAnimNodeSequenceBlendBase
{
public:
	float                                              m_fBlendSpeed;                                    		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDirAngle;                                      		// 0x0150 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bInterpolateWeights : 1;                        		// 0x0154 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      m_bForwardLeftCorrection : 1;                     		// 0x0154 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class ATrPawn*                                     m_TrPawn;                                         		// 0x0158 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1500 ];

		return pClassPointer;
	};

};

UClass* UTrAnimNodeBlendByDirection::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeBlendByGravCycleTilt
// 0x0017 (0x0108 - 0x00F1)
class UTrAnimNodeBlendByGravCycleTilt : public UAnimNodeBlendBase
{
public:
	float                                              m_fTiltAmount;                                    		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              m_fTiltScale;                                     		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_RootBoneName;                                   		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDeadZone;                                      		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1501 ];

		return pClassPointer;
	};

};

UClass* UTrAnimNodeBlendByGravCycleTilt::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeBlendBySpeed
// 0x0020 (0x0164 - 0x0144)
class UTrAnimNodeBlendBySpeed : public UAnimNodeBlendBySpeed
{
public:
	class ATrPawn*                                     m_TrPawn;                                         		// 0x0144 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< float >                                    m_BaseSpeed;                                      		// 0x0148 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bIgnoreZVelocity : 1;                           		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< unsigned char >                            m_IgnoredPhysics;                                 		// 0x0158 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1502 ];

		return pClassPointer;
	};

};

UClass* UTrAnimNodeBlendBySpeed::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeBlendList
// 0x0010 (0x0124 - 0x0114)
class UTrAnimNodeBlendList : public UAnimNodeBlendList
{
public:
	TArray< float >                                    m_ChildBlendInTime;                               		// 0x0114 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_fBlendTime;                                     		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1503 ];

		return pClassPointer;
	};

	float GetBlendTime ( int ChildIndex, unsigned long bGetDefault );
};

UClass* UTrAnimNodeBlendList::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeBlendBy3pDevice
// 0x0044 (0x0168 - 0x0124)
class UTrAnimNodeBlendBy3pDevice : public UTrAnimNodeBlendList
{
public:
	class ATrPawn*                                     m_TrPawn;                                         		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             m_nmRecoilControlNames;                           		// 0x0128 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UGameSkelCtrl_Recoil* >              m_RecoilControls;                                 		// 0x0134 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bScaleFireByRefireTime : 1;                     		// 0x0140 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bFirePreview : 1;                               		// 0x0140 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bScalePutawayRetrieveAnims : 1;                 		// 0x0140 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bCurrentDeviceSupportsAltSkiFireAnims : 1;      		// 0x0140 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bCurrentDeviceSupportsAltSkiReloadAnims : 1;    		// 0x0140 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	float                                              m_fRefireTimePreview;                             		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_SkiingFireName;                                 		// 0x0148 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_StandardFireAnimName;                           		// 0x0150 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_SkiingReloadName;                               		// 0x0158 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_StandardReloadAnimName;                         		// 0x0160 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1504 ];

		return pClassPointer;
	};

	void PlayOffhand ( struct FName OffhandAnimName );
	void PlayReload ( float ReloadTime );
	void PlayRetrieve ( float RetrieveTime, float ForcedRateBuff );
	void PlayPutaway ( float PutAwayTime, float ForcedRateBuff );
	void PlayFire ( float RefireTime );
	void PlayBuildup ( );
	void PlayIdle ( );
};

UClass* UTrAnimNodeBlendBy3pDevice::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeBlendByDeployableState
// 0x0004 (0x0128 - 0x0124)
class UTrAnimNodeBlendByDeployableState : public UTrAnimNodeBlendList
{
public:
	class ATrDeployable*                               m_TrDeployable;                                   		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1505 ];

		return pClassPointer;
	};

};

UClass* UTrAnimNodeBlendByDeployableState::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeBlendByDeviceAnim
// 0x0080 (0x01A4 - 0x0124)
class UTrAnimNodeBlendByDeviceAnim : public UTrAnimNodeBlendList
{
public:
	class ATrPawn*                                     m_TrPawn;                                         		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ATrDevice*                                   m_Device;                                         		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmBuildupFireSpinControlName;                   		// 0x012C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTrSkelControl_SpinControl*                  m_BuildupFireSpinControl;                         		// 0x0134 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             m_nmRecoilControlNames;                           		// 0x0138 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UGameSkelCtrl_Recoil* >              m_RecoilControls;                                 		// 0x0144 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UGameSkelCtrl_Recoil* >              m_TinyWeaponsRecoilControls;                      		// 0x0150 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bPlayBuildUp : 1;                               		// 0x015C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bPlayFire : 1;                                  		// 0x015C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bScaleFireByRefireTime : 1;                     		// 0x015C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bScalePutawayRetrieveAnims : 1;                 		// 0x015C (0x0004) [0x0000000000000000] [0x00000008] 
	struct FName                                       m_FireFinalRoundAnimName;                         		// 0x0160 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_DryFireAnimName;                                		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_StandardFireAnimName;                           		// 0x0170 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_ReloadPartialClipAnimName;                      		// 0x0178 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_StandardReloadAnimName;                         		// 0x0180 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_SecondaryDeviceBlendNodeName;                   		// 0x0188 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTrAnimNodeBlendByDeviceAnim*                m_SecondaryDeviceBlendNode;                       		// 0x0190 (0x0004) [0x0000000000000000]              
	int                                                m_nSocketIndex;                                   		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FDeviceNodeCameraAnimation >        m_CameraAnimations;                               		// 0x0198 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1506 ];

		return pClassPointer;
	};

	void PlayQuickRetrieve ( );
	void PlayDryFire ( );
	void OnStopFire ( );
	void PlayOffhand ( float Rate );
	void PlayReload ( float ReloadTime, int RoundsRemainingInClip );
	void PlayRetrieve ( float RetrieveTime, float ForcedRateBuff );
	void PlayPutaway ( float PutAwayTime, float ForcedRateBuff );
	void PlayFire ( int SocketIndex, float RefireTime, int RoundsRemainingInClip );
	void PlayBuildup ( float BuildupTime );
	void PlayAltIdle ( );
	void PlayIdle ( );
	void SetActiveChild ( int ChildIndex, float BlendTime );
	void StopAnim ( );
};

UClass* UTrAnimNodeBlendByDeviceAnim::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeBlendByFlagDirection
// 0x0020 (0x0144 - 0x0124)
class UTrAnimNodeBlendByFlagDirection : public UTrAnimNodeBlendList
{
public:
	unsigned char                                      LastDirection;                                    		// 0x0124 (0x0001) [0x0000000000000002]              ( CPF_Const )
	class ATrFlagBase*                                 m_TrFlagOwner;                                    		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fIdleSpeedSizeSq;                               		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmAdditiveAnimNodeName;                         		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeAdditiveBlending*                   m_AdditiveBlendNode;                              		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              m_fIdleBlendInTime;                               		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fIdleBlendOutTime;                              		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1507 ];

		return pClassPointer;
	};

};

UClass* UTrAnimNodeBlendByFlagDirection::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeBlendByFlying
// 0x0008 (0x012C - 0x0124)
class UTrAnimNodeBlendByFlying : public UTrAnimNodeBlendList
{
public:
	unsigned char                                      LastDirection;                                    		// 0x0124 (0x0001) [0x0000000000000002]              ( CPF_Const )
	class ATrPawn*                                     m_TrPawn;                                         		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1508 ];

		return pClassPointer;
	};

};

UClass* UTrAnimNodeBlendByFlying::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeBlendByFlyingVehicleThrottle
// 0x0004 (0x0128 - 0x0124)
class UTrAnimNodeBlendByFlyingVehicleThrottle : public UTrAnimNodeBlendList
{
public:
	class ATrVehicle*                                  m_TrVehicle;                                      		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1509 ];

		return pClassPointer;
	};

};

UClass* UTrAnimNodeBlendByFlyingVehicleThrottle::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeBlendByGravCycleDirection
// 0x0008 (0x012C - 0x0124)
class UTrAnimNodeBlendByGravCycleDirection : public UTrAnimNodeBlendList
{
public:
	class ATrVehicle*                                  m_TrVehicle;                                      		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fBackwardThreshold;                             		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1510 ];

		return pClassPointer;
	};

};

UClass* UTrAnimNodeBlendByGravCycleDirection::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeBlendByPhysics
// 0x0028 (0x014C - 0x0124)
class UTrAnimNodeBlendByPhysics : public UTrAnimNodeBlendList
{
public:
	class ATrPawn*                                     m_TrPawn;                                         		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_LastPhysics;                                    		// 0x0128 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_CurrentPhysics;                                 		// 0x0129 (0x0001) [0x0000000000000000]              
	int                                                m_CurrentPhysicsChildIndex;                       		// 0x012C (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            m_PhysicsChildren;                                		// 0x0130 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bDirectUnspecifiedPhysicsThroughChild0 : 1;     		// 0x013C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FChildrenBlendInfo >                m_ChildrenBlendInfo;                              		// 0x0140 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1511 ];

		return pClassPointer;
	};

};

UClass* UTrAnimNodeBlendByPhysics::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeBlendByRidingPassenger
// 0x0010 (0x0134 - 0x0124)
class UTrAnimNodeBlendByRidingPassenger : public UTrAnimNodeBlendList
{
public:
	class ATrPawn*                                     m_TrPawn;                                         		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmFireAnimSeqNodeName;                          		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeSequence*                           m_FireAnimSeqNode;                                		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1512 ];

		return pClassPointer;
	};

	void PlayOffhand ( );
	void PlayReload ( float ReloadTime );
	void PlayFire ( float RefireTime, struct FName FireAnimName, float ReloadTime );
	void PlayIdle ( );
};

UClass* UTrAnimNodeBlendByRidingPassenger::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeBlendByTankSteering
// 0x0004 (0x0128 - 0x0124)
class UTrAnimNodeBlendByTankSteering : public UTrAnimNodeBlendList
{
public:
	class ATrVehicle*                                  m_TrVehicle;                                      		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1513 ];

		return pClassPointer;
	};

};

UClass* UTrAnimNodeBlendByTankSteering::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeBlendByTankThrottle
// 0x0004 (0x0128 - 0x0124)
class UTrAnimNodeBlendByTankThrottle : public UTrAnimNodeBlendList
{
public:
	class ATrVehicle*                                  m_TrVehicle;                                      		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1514 ];

		return pClassPointer;
	};

};

UClass* UTrAnimNodeBlendByTankThrottle::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeBlendByVehicle
// 0x0004 (0x0128 - 0x0124)
class UTrAnimNodeBlendByVehicle : public UTrAnimNodeBlendList
{
public:
	class ATrPawn*                                     m_TrPawn;                                         		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1515 ];

		return pClassPointer;
	};

	void PlayChangeSeatAnim ( );
	void PlayExitAnim ( );
	void PlayEnterAnim ( );
	void PlayDrivingAnim ( );
	void PlayNoVehicleAnim ( );
};

UClass* UTrAnimNodeBlendByVehicle::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeSequencePose
// 0x000C (0x014C - 0x0140)
class UTrAnimNodeSequencePose : public UAnimNodeSequence
{
public:
	TArray< struct FBoneAtom >                         m_PoseSpaceBases;                                 		// 0x0140 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1516 ];

		return pClassPointer;
	};

	void FillWithPose ( class ATrPawn* P );
};

UClass* UTrAnimNodeSequencePose::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeTurnInPlace
// 0x0078 (0x017C - 0x0104)
class UTrAnimNodeTurnInPlace : public UAnimNodeBlend
{
public:
	class ATrPawn*                                     m_TrPawn;                                         		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bInitialized : 1;                               		// 0x0108 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      m_bRootRotInitialized : 1;                        		// 0x0108 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      m_bDisableRotation : 1;                           		// 0x0108 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bDelayBlendOutToPlayAnim : 1;                   		// 0x0108 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bPlayingTurnTransition : 1;                     		// 0x0108 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      m_bCanChooseNewTransition : 1;                    		// 0x0108 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bOverrideInterpolationTime : 1;                 		// 0x0108 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      m_bMirrorOffsetWhenPawnMirrored : 1;              		// 0x0108 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      m_bAlwaysUpdateYawOffset : 1;                     		// 0x0108 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      m_bIgnoreTransitionAnimations : 1;                		// 0x0108 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      m_bOnlyUpdateRotationWhenMoving : 1;              		// 0x0108 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      m_bTurnTowardsVelocity : 1;                       		// 0x0108 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      m_bUsePawnRotationAtZeroVelocity : 1;             		// 0x0108 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      m_bUse180ShortestRoute : 1;                       		// 0x0108 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      m_bConstrictIdleYawOffset : 1;                    		// 0x0108 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      m_bDisableAllTurning : 1;                         		// 0x0108 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	int                                                m_nLastPawnYaw;                                   		// 0x010C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                m_nLastPawnPitch;                                 		// 0x0110 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              m_fPawnRotationRate;                              		// 0x0114 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                m_nLastRootBoneYaw;                               		// 0x0118 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                m_nYawOffset;                                     		// 0x011C (0x0004) [0x0000000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )
	int                                                m_nPitchOffset;                                   		// 0x0120 (0x0004) [0x0000000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )
	float                                              m_fRelativeOffset;                                		// 0x0124 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class UTrAnimNodeAimOffset* >              m_OffsetNodes;                                    		// 0x0128 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRotTransitionInfo >                m_RotTransitions;                                 		// 0x0134 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_fTransitionBlendTime;                           		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nCurrentTransitionIndex;                        		// 0x0144 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fTransitionThresholdAngle;                      		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_ForcedTransitionAngle;                          		// 0x014C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fChooseNewTransitionPercent;                    		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInterpolationTime;                             		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_RemainingInterpolationTime;                     		// 0x0158 (0x0004) [0x0000000000000000]              
	TArray< class UTrAnimNodeTurnInPlace_Player* >     m_PlayerNodes;                                    		// 0x015C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fIgnoredTransitionTime;                         		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTurnInterpTime;                                		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    m_InterpRotation;                                 		// 0x0170 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1517 ];

		return pClassPointer;
	};

};

UClass* UTrAnimNodeTurnInPlace::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeTurnInPlace_Player
// 0x000C (0x014C - 0x0140)
class UTrAnimNodeTurnInPlace_Player : public UAnimNodeSequence
{
public:
	TArray< struct FTIP_Transition >                   TIP_Transitions;                                  		// 0x0140 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1518 ];

		return pClassPointer;
	};

};

UClass* UTrAnimNodeTurnInPlace_Player::pClassPointer = NULL;

// Class TribesGame.TrAnimNodeTurnInPlace_Rotator
// 0x0013 (0x0104 - 0x00F1)
class UTrAnimNodeTurnInPlace_Rotator : public UAnimNodeBlendBase
{
public:
	class ATrPawn*                                     m_TrPawn;                                         		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UTrAnimNodeTurnInPlace* >            c_TurnInPlaceNodes;                               		// 0x00F8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1519 ];

		return pClassPointer;
	};

};

UClass* UTrAnimNodeTurnInPlace_Rotator::pClassPointer = NULL;

// Class TribesGame.TrAnimNotify_Sound
// 0x0010 (0x006C - 0x005C)
class UTrAnimNotify_Sound : public UAnimNotify_Sound
{
public:
	TArray< struct FDeviceOverride >                   m_DeviceOverrides;                                		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      m_PreviewDeviceClass;                             		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1520 ];

		return pClassPointer;
	};

};

UClass* UTrAnimNotify_Sound::pClassPointer = NULL;

// Class TribesGame.TrAudioSettings
// 0x0058 (0x00D0 - 0x0078)
class UTrAudioSettings : public UGFxObject
{
public:
	int                                                m_SettingsCount;                                  		// 0x0078 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  m_SettingsList;                                   		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                m_nVolumeEffects;                                 		// 0x0080 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nVolumeVGS;                                     		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nVolumeVoice;                                   		// 0x0088 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nVolumeMusic;                                   		// 0x008C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nVolumeMaster;                                  		// 0x0090 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           MasterSoundClassNames;                            		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           EffectsSoundClassNames;                           		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           MusicSoundClassNames;                             		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           VGSSoundClassNames;                               		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           VoiceSoundClassNames;                             		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1521 ];

		return pClassPointer;
	};

	struct FString GetSettingNameFromType ( unsigned char Type );
	void SetBassBoost ( unsigned long NewBassBoost );
	bool GetBassBoost ( );
	void SetVoiceVolume ( float NewVolume );
	void SetVGSVolume ( float NewVolume );
	void SetMusicVolume ( float NewVolume );
	void SetEffectsVolume ( float NewVolume );
	void SetMasterVolume ( float NewVolume );
	void AddSettingToList ( struct FString SettingName, int val );
	int GetCurrentSettingValue ( unsigned char Type );
	void ApplyAudioSetting ( int Type, int val, unsigned long bStore );
	void LoadAudioSettings ( class UGFxObject* List );
	void InitializeAudioVolumes ( );
	void ReadSettings ( );
	int ReadSetting ( int SettingId );
	void StoreSetting ( int SettingId, int val );
	void FlushSettings ( );
};

UClass* UTrAudioSettings::pClassPointer = NULL;

// Class TribesGame.TrBrowserManager
// 0x009C (0x00D8 - 0x003C)
class UTrBrowserManager : public UObject
{
public:
	struct FString                                     URLGold;                                          		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     URLAlert;                                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     URLStore;                                         		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     URLBooster;                                       		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     URLSupport;                                       		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     URLProfile;                                       		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     URLRedirect;                                      		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     URLClassVideo;                                    		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     URLActivateKey;                                   		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     URLCreateAccount;                                 		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     URLRecoverPassword;                               		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     URLRecoverUsername;                               		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     URLCreateSteamAccount;                            		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1522 ];

		return pClassPointer;
	};

	struct FString GetLangParam ( );
	void CreateAccount ( unsigned long bUsingSteam );
	void ClassVideo ( int Id );
	void RecoverUsername ( );
	void RecoverPassword ( );
	void ActivateKey ( );
	void Profile ( );
	void Support ( );
	void Booster ( );
	void Store ( );
	void Gold ( );
	void Alert ( );
	struct FString GetLanguageString ( );
	void OpenVideo ( struct FString URL );
	void OpenURL ( struct FString URL );
};

UClass* UTrBrowserManager::pClassPointer = NULL;

// Class TribesGame.TrCallIn
// 0x0044 (0x0220 - 0x01DC)
class ATrCallIn : public AActor
{
public:
	unsigned char                                      CallInId;                                         		// 0x01DC (0x0001) [0x0000000000000000]              
	int                                                DatabaseId;                                       		// 0x01E0 (0x0004) [0x0000000000000000]              
	float                                              BuildupTime;                                      		// 0x01E4 (0x0004) [0x0000000000000000]              
	float                                              CallTime;                                         		// 0x01E8 (0x0004) [0x0000000000000000]              
	float                                              CooldownTime;                                     		// 0x01EC (0x0004) [0x0000000000000000]              
	float                                              DegreeOfMovement;                                 		// 0x01F0 (0x0004) [0x0000000000000000]              
	int                                                CreditCost;                                       		// 0x01F4 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   MICDisplay;                                       		// 0x01F8 (0x0004) [0x0000000000000000]              
	struct FString                                     DisplayName;                                      		// 0x01FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              FlagStationDist;                                  		// 0x0208 (0x0004) [0x0000000000000000]              
	float                                              GameObjectiveDist;                                		// 0x020C (0x0004) [0x0000000000000000]              
	float                                              VehicleDist;                                      		// 0x0210 (0x0004) [0x0000000000000000]              
	unsigned long                                      CheckExtentsOnSpawn : 1;                          		// 0x0214 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      PendingDelete : 1;                                		// 0x0214 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      IsInProgress : 1;                                 		// 0x0214 (0x0004) [0x0000000000000000] [0x00000004] 
	class UClass*                                      ExtentTemplateClass;                              		// 0x0218 (0x0004) [0x0000000000000000]              
	class ATrPlayerController*                         OwningController;                                 		// 0x021C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1523 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	bool FireCompletedCallIn ( int CallInOffs, struct FVector TargetLocation, struct FVector TargetNormal );
	bool VerifyPower ( );
	bool VerifyCredits ( );
	int GetCreditCost ( );
	void Initialize ( int NewPrice, int NewBuildup, int NewCooldown );
};

UClass* ATrCallIn::pClassPointer = NULL;

// Class TribesGame.TrCallIn_DeliveryPod
// 0x004C (0x0228 - 0x01DC)
class ATrCallIn_DeliveryPod : public AActor
{
public:
	class UMaterialInstanceTimeVarying*                PodHitDecal;                                      		// 0x01DC (0x0004) [0x0000000000000000]              
	float                                              HitDecalHeight;                                   		// 0x01E0 (0x0004) [0x0000000000000000]              
	float                                              HitDecalWidth;                                    		// 0x01E4 (0x0004) [0x0000000000000000]              
	float                                              DecalDissolveTime;                                		// 0x01E8 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             DeliveryPodParticleTemplate;                      		// 0x01EC (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    DeliveryPodParticleEffects;                       		// 0x01F0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             DeliveryPodImpactTemplate;                        		// 0x01F4 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             FallingSoundComponent;                            		// 0x01F8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   FallingSound;                                     		// 0x01FC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   ImpactSound;                                      		// 0x0200 (0x0004) [0x0000000000000000]              
	float                                              LifeAfterImpact;                                  		// 0x0204 (0x0004) [0x0000000000000000]              
	float                                              Speed;                                            		// 0x0208 (0x0004) [0x0000000000000000]              
	struct FVector                                     TargetHitNormal;                                  		// 0x020C (0x000C) [0x0000000000000000]              
	struct FVector                                     TargetImpactPoint;                                		// 0x0218 (0x000C) [0x0000000000000000]              
	class UDynamicLightEnvironmentComponent*           m_LightEnvironment;                               		// 0x0224 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1524 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void PostBeginPlay ( );
	void ParticleSystemFinished ( class UParticleSystemComponent* PSC );
	void HideMesh ( );
	void BreakApart ( );
	void Init ( class ATrCallIn_CrashLandInfo* CrashInfo );
	float GetTerminalVelocity ( );
};

UClass* ATrCallIn_DeliveryPod::pClassPointer = NULL;

// Class TribesGame.TrCallIn_SupportItemPlatform
// 0x0015 (0x01F1 - 0x01DC)
class ATrCallIn_SupportItemPlatform : public AActor
{
public:
	class ATrGameObjective*                            r_DeployedItem;                                   		// 0x01DC (0x0004) [0x0000000000000020]              ( CPF_Net )
	class USkeletalMeshComponent*                      m_Mesh;                                           		// 0x01E0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x01E4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       ItemAttachPointName;                              		// 0x01E8 (0x0008) [0x0000000000000000]              
	unsigned char                                      DefenderTeamIndex;                                		// 0x01F0 (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1525 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	void HideMesh ( );
	unsigned char eventScriptGetTeamNum ( );
	void Init ( class AActor* DeployableOwner, class UClass* GameObjectiveClass );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
};

UClass* ATrCallIn_SupportItemPlatform::pClassPointer = NULL;

// Class TribesGame.TrCameraModifier_CameraShake
// 0x0000 (0x0068 - 0x0068)
class UTrCameraModifier_CameraShake : public UCameraModifier_CameraShake
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1526 ];

		return pClassPointer;
	};

};

UClass* UTrCameraModifier_CameraShake::pClassPointer = NULL;

// Class TribesGame.TrPlayerController
// 0x04E8 (0x0D68 - 0x0880)
class ATrPlayerController : public AUTPlayerController
{
public:
	class AActor*                                      m_aHoverActor;                                    		// 0x0880 (0x0004) [0x0000000000000000]              
	float                                              m_fLastWeaponSwitchTimestamp;                     		// 0x0884 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bEditorMode : 1;                                		// 0x0888 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bPressingJetpackButton : 1;                     		// 0x0888 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bPressingJetpack : 1;                           		// 0x0888 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bJumpJet : 1;                                   		// 0x0888 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bBlink : 1;                                     		// 0x0888 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bKickbackBlendingIn : 1;                        		// 0x0888 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bAftermathKill : 1;                             		// 0x0888 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bWasAutoBalanced : 1;                             		// 0x0888 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bPlayCreditsSound : 1;                          		// 0x0888 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      c_bPressingZoomButton : 1;                        		// 0x0888 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bZoomMagnified : 1;                             		// 0x0888 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bReturnTo3PAfterZoom : 1;                       		// 0x0888 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      m_bPlayerSwappedTeams : 1;                        		// 0x0888 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bRequestingSki : 1;                             		// 0x0888 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      m_bLoadoutChangeAlerted : 1;                      		// 0x0888 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      r_bNeedTeam : 1;                                  		// 0x0888 (0x0004) [0x0000000000000020] [0x00008000] ( CPF_Net )
	unsigned long                                      r_bNeedLoadout : 1;                               		// 0x0888 (0x0004) [0x0000000000000020] [0x00010000] ( CPF_Net )
	unsigned long                                      m_bEnableCameraSpeedEffect : 1;                   		// 0x0888 (0x0004) [0x0000000000004000] [0x00020000] ( CPF_Config )
	unsigned long                                      m_bSkiHelpTextThresholdReached : 1;               		// 0x0888 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      m_bJetpackHelpTextThresholdReached : 1;           		// 0x0888 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      m_bMonkeyMode : 1;                                		// 0x0888 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      m_bLastDeathWasUserSuicide : 1;                   		// 0x0888 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      m_bViewThroughDeathCamera : 1;                    		// 0x0888 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      m_bJustJoined : 1;                                		// 0x0888 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      m_bIsJumpJetting : 1;                             		// 0x0888 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      r_bDailyCompleted : 1;                            		// 0x0888 (0x0004) [0x0000000000000020] [0x02000000] ( CPF_Net )
	unsigned long                                      r_bWeeklyCompleted : 1;                           		// 0x0888 (0x0004) [0x0000000000000020] [0x04000000] ( CPF_Net )
	unsigned long                                      m_bShowSpectatorControls : 1;                     		// 0x0888 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned long                                      m_bShowSpectatorHUD : 1;                          		// 0x0888 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      m_bIsRovingSpectating : 1;                        		// 0x0888 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      r_bViewTargetVehiclePrimaryWeaponReady : 1;       		// 0x0888 (0x0004) [0x0000000000000020] [0x40000000] ( CPF_Net )
	unsigned long                                      r_bViewTargetVehicleSecondaryWeaponReady : 1;     		// 0x0888 (0x0004) [0x0000000000000020] [0x80000000] ( CPF_Net )
	unsigned long                                      m_bEnableOverheadDamageIndicators : 1;            		// 0x088C (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDObjectives : 1;                         		// 0x088C (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDReticule : 1;                           		// 0x088C (0x0004) [0x0000000000044000] [0x00000004] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDCredits : 1;                            		// 0x088C (0x0004) [0x0000000000044000] [0x00000008] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDAccolades : 1;                          		// 0x088C (0x0004) [0x0000000000044000] [0x00000010] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDBadges : 1;                             		// 0x088C (0x0004) [0x0000000000044000] [0x00000020] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDScores : 1;                             		// 0x088C (0x0004) [0x0000000000044000] [0x00000040] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDHealthBar : 1;                          		// 0x088C (0x0004) [0x0000000000044000] [0x00000080] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDVisor : 1;                              		// 0x088C (0x0004) [0x0000000000044000] [0x00000100] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDChat : 1;                               		// 0x088C (0x0004) [0x0000000000044000] [0x00000200] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDCombatLog : 1;                          		// 0x088C (0x0004) [0x0000000000044000] [0x00000400] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDKillbox : 1;                            		// 0x088C (0x0004) [0x0000000000044000] [0x00000800] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDDeathcam : 1;                           		// 0x088C (0x0004) [0x0000000000044000] [0x00001000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDHeroText : 1;                           		// 0x088C (0x0004) [0x0000000000044000] [0x00002000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDPromptPanel : 1;                        		// 0x088C (0x0004) [0x0000000000044000] [0x00004000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDRespawnTimer : 1;                       		// 0x088C (0x0004) [0x0000000000044000] [0x00008000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDSkiBars : 1;                            		// 0x088C (0x0004) [0x0000000000044000] [0x00010000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDFriendColoring : 1;                     		// 0x088C (0x0004) [0x0000000000044000] [0x00020000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDNotifications : 1;                      		// 0x088C (0x0004) [0x0000000000044000] [0x00040000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDFriendStateNotifications : 1;           		// 0x088C (0x0004) [0x0000000000044000] [0x00080000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowHUDCracks : 1;                             		// 0x088C (0x0004) [0x0000000000044000] [0x00100000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bAnimMenu : 1;                                  		// 0x088C (0x0004) [0x0000000000044000] [0x00200000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      EnableAlienFX : 1;                                		// 0x088C (0x0004) [0x0000000000044000] [0x00400000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bBlockForAcquisition : 1;                         		// 0x088C (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bAutoRevertSetting : 1;                           		// 0x088C (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      m_bEnableChatFilter : 1;                          		// 0x088C (0x0004) [0x0000000000044000] [0x02000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bAirSpeedBoundToGroundSpeed : 1;                		// 0x088C (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      m_bEjectedFromVehicle : 1;                        		// 0x088C (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bWarmingUp : 1;                                   		// 0x088C (0x0004) [0x0000000000000000] [0x10000000] 
	float                                              m_fRemainingInitiatingJettingTime;                		// 0x0890 (0x0004) [0x0000000000000000]              
	float                                              m_fKickbackViewBlendOutTime;                      		// 0x0894 (0x0004) [0x0000000000000000]              
	float                                              m_fKickbackViewBlendInTime;                       		// 0x0898 (0x0004) [0x0000000000000000]              
	float                                              m_fLastKickbackViewTime;                          		// 0x089C (0x0004) [0x0000000000000000]              
	struct FRotator                                    m_rKickbackAim;                                   		// 0x08A0 (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_rCurrentKickbackDirection;                      		// 0x08AC (0x000C) [0x0000000000000000]              
	class ACameraActor*                                m_OverwatchCam;                                   		// 0x08B8 (0x0004) [0x0000000000000000]              
	int                                                m_OverwatchTeam;                                  		// 0x08BC (0x0004) [0x0000000000000000]              
	int                                                m_RequestedTeam;                                  		// 0x08C0 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             m_AudioComponentLowHealthLoop;                    		// 0x08C4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_AudioComponentRechargeHealth;                   		// 0x08C8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_AudioComponentMissileLockingLoop;               		// 0x08CC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_AudioComponentMissileSeekingSelfLoop;           		// 0x08D0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_AudioComponentMissileTargetingSelfLoop;         		// 0x08D4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_AudioComponentCreditsSound;                     		// 0x08D8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   m_MissileLockingCue;                              		// 0x08DC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_MissileLockedCue;                               		// 0x08E0 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_MissileFiredCue;                                		// 0x08E4 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_MissileSeekingSelfCue;                          		// 0x08E8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_RicochetSound3P;                                		// 0x08EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                r_nCurrentCredits;                                		// 0x08F0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FTrEventCredits >                   m_EventCreditMap;                                 		// 0x08F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ATrStation*                                  m_CurrentStation;                                 		// 0x0900 (0x0004) [0x0000000000000000]              
	float                                              m_fDesiredZoomFOV;                                		// 0x0904 (0x0004) [0x0000000000000000]              
	float                                              m_fDesiredMagnifiedZoomFOV;                       		// 0x0908 (0x0004) [0x0000000000000000]              
	float                                              m_fZoomRate;                                      		// 0x090C (0x0004) [0x0000000000000000]              
	float                                              c_fZoomButtonPressedTimeStamp;                    		// 0x0910 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_ZoomState;                                      		// 0x0914 (0x0001) [0x0000000000000000]              
	unsigned char                                      r_nHitEnemy;                                      		// 0x0915 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      r_nHitEnemyHeadshot;                              		// 0x0916 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_nLastHitEnemyHeadshot;                          		// 0x0917 (0x0001) [0x0000000000000000]              
	unsigned char                                      r_nCallinCooldownFlash[ 0x3 ];                    		// 0x0918 (0x0003) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_nCallinCooldownFlashStored[ 0x3 ];              		// 0x091B (0x0003) [0x0000000000000000]              
	unsigned char                                      m_CurrentDecelerationFactor;                      		// 0x091E (0x0001) [0x0000000000000000]              
	float                                              c_fHUDZoomDuration;                               		// 0x0920 (0x0004) [0x0000000000000000]              
	class UMaterialEffect*                             m_ZoomedEffect;                                   		// 0x0924 (0x0004) [0x0000000000000000]              
	class ATrMusicManager*                             m_MusicManager;                                   		// 0x0928 (0x0004) [0x0000000000000000]              
	class UTrAccoladeManager*                          m_AccoladeManager;                                		// 0x092C (0x0004) [0x0000000000000000]              
	class ATrAnnouncer*                                m_Announcer;                                      		// 0x0930 (0x0004) [0x0000000000000000]              
	float                                              m_fLastHitEnemyTime;                              		// 0x0934 (0x0004) [0x0000000000000000]              
	float                                              m_fPlayBeginTime;                                 		// 0x0938 (0x0004) [0x0000000000000000]              
	int                                                m_nRespawnTimeRemaining;                          		// 0x093C (0x0004) [0x0000000000000000]              
	int                                                m_nClientSpawnTimeRemaining;                      		// 0x0940 (0x0004) [0x0000000000000000]              
	float                                              r_fRespawnTime;                                   		// 0x0944 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              m_LastLoadoutRequestTime;                         		// 0x0948 (0x0004) [0x0000000000000000]              
	class ATrPlayerController*                         m_LastKilledBy;                                   		// 0x094C (0x0004) [0x0000000000000000]              
	class AActor*                                      r_KilledBy;                                       		// 0x0950 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AActor*                                      m_LastDamagedBy;                                  		// 0x0954 (0x0004) [0x0000000000000000]              
	int                                                m_nLastDamagerHealthPercent;                      		// 0x0958 (0x0004) [0x0000000000000000]              
	int                                                m_nLastDamagerUpgradeLevel;                       		// 0x095C (0x0004) [0x0000000000000000]              
	float                                              m_fSkiFollowthroughTime;                          		// 0x0960 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMinActiveSkiTimeToEnableFollowthough;          		// 0x0964 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_LastPressedSkiTimeStamp;                        		// 0x0968 (0x0004) [0x0000000000000000]              
	int                                                m_VehicleSeatIndex;                               		// 0x096C (0x0004) [0x0000000000000000]              
	int                                                m_BeginPlayedTime;                                		// 0x0970 (0x0004) [0x0000000000000000]              
	class AWeapon*                                     m_LastWeaponEquipped;                             		// 0x0974 (0x0004) [0x0000000000000000]              
	class UTrCameraModifier_CameraShake*               m_CameraShake;                                    		// 0x0978 (0x0004) [0x0000000000000000]              
	int                                                m_nLatestAccoladeIcon;                            		// 0x097C (0x0004) [0x0000000000000000]              
	TArray< struct FTrCameraShakeInfo >                m_CameraShakes;                                   		// 0x0980 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	class AUDKEmitCameraEffect*                        m_SpeedCameraEffect;                              		// 0x098C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class AUDKEmitCameraEffect*                        m_WeatherCameraEffect;                            		// 0x0990 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	TArray< class ATrWeatherVolume* >                  m_CurrentWeatherVolumes;                          		// 0x0994 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fSpeedCameraSpeedSqared;                        		// 0x09A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPostProcessSettings                        m_DefaultPPSettings;                              		// 0x09A4 (0x00DC) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FPostProcessSettings                        m_RoundEndedPPSettings;                           		// 0x0A80 (0x00DC) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_RoundEndedPPInterpSpeed;                        		// 0x0B5C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_RoundEndedPPAlpha;                              		// 0x0B60 (0x0004) [0x0000000000000000]              
	float                                              m_RoundEndedPPTarget;                             		// 0x0B64 (0x0004) [0x0000000000000000]              
	float                                              m_RoundEndedVZeroSpeed;                           		// 0x0B68 (0x0004) [0x0000000000000000]              
	float                                              m_fIdleCheckTimer;                                		// 0x0B6C (0x0004) [0x0000000000000000]              
	int                                                m_LastVGSUse;                                     		// 0x0B70 (0x0004) [0x0000000000000000]              
	int                                                m_ActiveClassId;                                  		// 0x0B74 (0x0004) [0x0000000000000000]              
	class UClass*                                      m_OldPossessedFamilyInfo;                         		// 0x0B78 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ATrVehicle*                                  m_LastAcknowledgedVehicle;                        		// 0x0B7C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ATrHelpTextManager*                          m_HelpTextManager;                                		// 0x0B80 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      m_HelpTextManagerClass;                           		// 0x0B84 (0x0004) [0x0000000000000000]              
	float                                              m_fTotalDistanceSkiedSq;                          		// 0x0B88 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fDistanceCheckInterval;                         		// 0x0B8C (0x0004) [0x0000000000000000]              
	float                                              m_fLastDistanceCheckTime;                         		// 0x0B90 (0x0004) [0x0000000000000000]              
	float                                              m_fLastDistanceSkiedSq;                           		// 0x0B94 (0x0004) [0x0000000000000000]              
	float                                              m_fHideSkiHelpTextDistanceThresholdSq;            		// 0x0B98 (0x0004) [0x0000000000000000]              
	float                                              m_fTotalDistanceJetpackedSq;                      		// 0x0B9C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fHideJetpackHelpTextDistanceThresholdSq;        		// 0x0BA0 (0x0004) [0x0000000000000000]              
	float                                              m_fSpeedCheckInterval;                            		// 0x0BA4 (0x0004) [0x0000000000000000]              
	float                                              m_fLastSpeedCheckTime;                            		// 0x0BA8 (0x0004) [0x0000000000000000]              
	float                                              m_fLastSpeedCheckCount;                           		// 0x0BAC (0x0004) [0x0000000000000000]              
	float                                              m_fSpeedCheckTotal;                               		// 0x0BB0 (0x0004) [0x0000000000000000]              
	float                                              m_fSkiSpeedRecord;                                		// 0x0BB4 (0x0004) [0x0000000000000000]              
	float                                              m_fFlagCapSpeedRecord;                            		// 0x0BB8 (0x0004) [0x0000000000000000]              
	float                                              m_fFlagGrabSpeedRecord;                           		// 0x0BBC (0x0004) [0x0000000000000000]              
	float                                              s_fNewPlayerAssistMitigateTakeDamageMultiplier;   		// 0x0BC0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              s_fNewPlayerAssistMitigateCauseDamageMultiplier;  		// 0x0BC4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                s_nMaxNewPlayerAssistPoints;                      		// 0x0BC8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                s_nNewPlayerAssistPoints;                         		// 0x0BCC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFreeCamYawOffset;                              		// 0x0BD0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFreeCamPitchOffset;                            		// 0x0BD4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLastSpotTargetTime;                            		// 0x0BD8 (0x0004) [0x0000000000000000]              
	int                                                m_fMaxBroadcastSpamCount;                         		// 0x0BDC (0x0004) [0x0000000000000000]              
	TArray< float >                                    m_fLastBroadcastTimes;                            		// 0x0BE0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fMessageSpamTime;                               		// 0x0BEC (0x0004) [0x0000000000000000]              
	float                                              m_fLockoutFromSpamTime;                           		// 0x0BF0 (0x0004) [0x0000000000000000]              
	float                                              m_fSpamLockoutTimeStamp;                          		// 0x0BF4 (0x0004) [0x0000000000000000]              
	TArray< class AActor* >                            m_PotentialSeekingTargets;                        		// 0x0BF8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fUserSuicideTimePenalty;                        		// 0x0C04 (0x0004) [0x0000000000000000]              
	float                                              m_fLastFlagGrabTimestamp;                         		// 0x0C08 (0x0004) [0x0000000000000000]              
	TArray< class ATrProjectile* >                     m_ProjectilesNeedingTethering;                    		// 0x0C0C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fDeathCameraOuterScale;                         		// 0x0C18 (0x0004) [0x0000000000000000]              
	float                                              m_fDeathCameraInnerScale;                         		// 0x0C1C (0x0004) [0x0000000000000000]              
	float                                              m_fDeathCameraCurrentScale;                       		// 0x0C20 (0x0004) [0x0000000000000000]              
	float                                              m_fDeathCameraInterpSpeed;                        		// 0x0C24 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_vDeathCamOffset;                                		// 0x0C28 (0x000C) [0x0000000000000000]              
	class ATrPaperDoll*                                m_PaperDoll;                                      		// 0x0C34 (0x0004) [0x0000000000000000]              
	float                                              LoadingScreenTimeout;                             		// 0x0C38 (0x0004) [0x0000000000000000]              
	float                                              m_fDeterminationAmount;                           		// 0x0C3C (0x0004) [0x0000000000000000]              
	float                                              m_fDeterminationAccumulator;                      		// 0x0C40 (0x0004) [0x0000000000000000]              
	class UMaterialEffect*                             m_RoundEndedME;                                   		// 0x0C44 (0x0004) [0x0000000000000000]              
	class UTrStatsInterface*                           Stats;                                            		// 0x0C48 (0x0004) [0x0000000000000000]              
	int                                                m_DamageNeededForCredit;                          		// 0x0C4C (0x0004) [0x0000000000000000]              
	int                                                m_TeamAssistCredit;                               		// 0x0C50 (0x0004) [0x0000000000000000]              
	int                                                m_TeamRabbitAssistCredit;                         		// 0x0C54 (0x0004) [0x0000000000000000]              
	TArray< struct FVGSAudioCommand >                  m_VGSAudioCommands;                               		// 0x0C58 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	int                                                m_nMaxVGSSoundChannels;                           		// 0x0C64 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< class ACameraActor* >                      m_SpectatorCameraBookmarks;                       		// 0x0C68 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ATrPowerGenerator* >                 m_SpectatorGenerators;                            		// 0x0C74 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ATrCTFBase* >                        m_SpectatorFlagStands;                            		// 0x0C80 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ATrFlagBase* >                       m_SpectatorFlags;                                 		// 0x0C8C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ATrVehicle* >                        m_SpectatorVehicles;                              		// 0x0C98 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              r_fViewTargetNextRegenTimestamp;                  		// 0x0CA4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              r_fViewTargetCurrentPowerpool;                    		// 0x0CA8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              r_fViewTargetMaxPowerPool;                        		// 0x0CAC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                r_nViewTargetPrimaryAmmoCount;                    		// 0x0CB0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                r_nViewTargetSecondaryAmmoCount;                  		// 0x0CB4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                r_nViewTargetPrimaryMaxAmmoCount;                 		// 0x0CB8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                r_nViewTargetSecondaryMaxAmmoCount;               		// 0x0CBC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                r_nViewTargetOffhandAmmoCount;                    		// 0x0CC0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                r_nViewTargetPackAmmoCount;                       		// 0x0CC4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              r_fViewTargetVehicleCurrentPowerPool;             		// 0x0CC8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              r_fViewTargetVehicleMaxPowerPool;                 		// 0x0CCC (0x0004) [0x0000000000000020]              ( CPF_Net )
	class APlayerReplicationInfo*                      r_ViewTargetVehicleDriverPRI;                     		// 0x0CD0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class APlayerReplicationInfo*                      r_ViewTargetVehiclePassengerPRI;                  		// 0x0CD4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     r_vViewTargetViewLocation;                        		// 0x0CD8 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    r_rViewTargetViewRotation;                        		// 0x0CE4 (0x000C) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FSpectatorKeybindViewTargetMap >    m_SpectatorTransientKeybinds;                     		// 0x0CF0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UTrChatConsoleCommands*                      m_PlayerCommands;                                 		// 0x0CFC (0x0004) [0x0000000000000000]              
	float                                              m_fCallInCooldown[ 0x3 ];                         		// 0x0D00 (0x000C) [0x0000000000000000]              
	int                                                m_WhisperFilter;                                  		// 0x0D0C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	class UAlienFXManager*                             AlienFX;                                          		// 0x0D10 (0x0004) [0x0000000000000000]              
	class UTrContentLoader*                            c_ContentLoader;                                  		// 0x0D14 (0x0004) [0x0000000000000000]              
	TArray< class UClass* >                            m_CachedPendingClassDeviceContentData;            		// 0x0D18 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            m_PendingLoadoutDeviceClasses;                    		// 0x0D24 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTrEquipInterface*                           m_TrEquipInterface;                               		// 0x0D30 (0x0004) [0x0000000000000000]              
	class UTrInventoryHelper*                          m_TrInventoryHelper;                              		// 0x0D34 (0x0004) [0x0000000000000000]              
	TArray< struct FPendingSkin >                      m_Pending3PSkins;                                 		// 0x0D38 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPendingSkin >                      m_Pending1PSkins;                                 		// 0x0D44 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                FriendlyFireKills;                                		// 0x0D50 (0x0004) [0x0000000000000000]              
	int                                                FriendlyFireDamage;                               		// 0x0D54 (0x0004) [0x0000000000000000]              
	int                                                VGSClassId;                                       		// 0x0D58 (0x0004) [0x0000000000000000]              
	float                                              m_fLastSuicideTimestamp;                          		// 0x0D5C (0x0004) [0x0000000000000000]              
	float                                              fSniperRespawnDelay;                              		// 0x0D60 (0x0004) [0x0000000000000000]              
	class UTrStrings*                                  Strings;                                          		// 0x0D64 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1527 ];

		return pClassPointer;
	};

	struct FString eventStripTag ( struct FString sValue );
	void SampleVoice ( class UClass* VoiceClass );
	void SpecList ( );
	void ClearPaperDoll ( );
	void ClearMainMenuPaperDoll ( );
	void UpdateMainMenuPaperDoll_Mesh ( unsigned char Type );
	void StartRefreshPageTimer ( );
	void CheckFriendlyFireDamage ( );
	void CheckFriendlyFireKills ( );
	int GetActiveClassId ( );
	int GetAllowedClassCount ( unsigned char ClassType );
	void OnScoreChanged ( class AUTTeamInfo* T );
	int GetTeamClassCount ( int ClassId );
	void OpenVehicleMenu ( class ATrVehicleStation* VehicleStation );
	void StartUILoadSummaryTimer ( );
	void EndVGSInput ( );
	void QuickLoadouts ( int ClassId );
	void QuickClasses ( );
	void ClassHotkeyBRT ( );
	void ClassHotkeyDMB ( );
	void ClassHotkeyJUG ( );
	void ClassHotkeyTCN ( );
	void ClassHotkeyRDR ( );
	void ClassHotkeySLD ( );
	void ClassHotkeyINF ( );
	void ClassHotkeySEN ( );
	void ClassHotkeyPTH ( );
	void ClientQueueAccolade ( int Icon, struct FString Title, struct FString Subtitle, unsigned long bIsBadge );
	void eventQueueBadge ( int Icon, struct FString Title, struct FString XPReward );
	void DestroyAllOwnedProjectiles ( );
	void DestroyAllOwnedMines ( class UClass* DestroyIfNotOfType );
	void DestroyAllOwnedDeployables ( class UClass* DestroyIfNotOfType );
	void ClientPlayerResettingAndRespawning ( );
	void ClientArenaRoundEnded ( int WinningTeam );
	void StartHotkeyBlock ( );
	void DealTimer ( );
	void TVTimer ( );
	void QueueTimer ( unsigned long bStart );
	void StartSendMenuBackTimer ( );
	void AutoRevertSetting ( );
	void StartSettingBlock ( );
	void StartAcquisitionFireTimer ( );
	void StartForceFocusTimer ( );
	void OnRefreshInventory ( class UTrSeqAct_RefreshInventory* Action );
	void OnPlayVGSCommand ( class UTrSeqAct_PlayVGSCommand* Action );
	void OnGiveAccolade ( class UTrSeqAct_GiveAccolade* Action );
	void OnGiveCredits ( class UTrSeqAct_GiveCredits* Action );
	void OnClassSelectedMainMenu ( );
	void AddPending3PSkin ( class ATrPlayerReplicationInfo* TrPRI, int skinId );
	void eventOn1PSkinContentLoaded ( class UClass* Skin1PDataClass );
	void eventOn3PSkinContentLoaded ( class UClass* Skin3PDataClass );
	void eventOnDeviceContentDataClassLoaded ( class UClass* DeviceContentDataClass );
	void ServerTestSlot ( unsigned char EquipId, int EquipItem );
	void TestSlot ( unsigned char equipType, int EquipId, unsigned long bTraining );
	bool InTraining ( );
	void TestTrainingSlot ( unsigned char equipType, int EquipId );
	int GetClassBit ( int ClassId );
	void ServerSetClassAffordable ( int BitMask );
	void SetFOV ( float NewFOV );
	void FixFOV ( );
	void FOV ( float F );
	void TypeKeyPressed ( );
	void AwardTeamRabbitAssistCredits ( int Multiplier );
	void AwardTeamAssistCredits ( );
	void CashForDamage ( int DamageAmount );
	int GetCreditsForDamageAmount ( int DamageAmount );
	void ClientShowOverheadNumber ( int NumberToShow, struct FVector WorldLocation, float fScreenDepth );
	void ServerShowOverheadNumber ( int NumberToShow, struct FVector WorldLocation, float fScreenDepth );
	void FlashShooterHitReticule ( int DamageAmount, unsigned long isInstantHit, int TeamNum );
	void VoteYes ( );
	void VoteNo ( );
	void SummaryTweenTimer ( int Amount );
	void SetWhisperFilter ( int FilterValue );
	int GetWhisperFilterValue ( );
	bool GetHUDFriendStateNotifications ( );
	bool GetHUDNotifications ( );
	bool GetHUDObjectivesValue ( );
	void ShowAlienFX ( unsigned long bEnable );
	void EnableHUDCracks ( unsigned long bEnable );
	void EnableHUDFriendStateNotifications ( unsigned long bEnable );
	void EnableHUDNotifications ( unsigned long bEnable );
	void EnableHUDFriendColoring ( unsigned long bEnable );
	void EnableHUDSkiBars ( unsigned long bEnable );
	void EnableHUDRespawnTimer ( unsigned long bEnable );
	void EnableHUDPromptPanel ( unsigned long bEnable );
	void EnableHUDHeroText ( unsigned long bEnable );
	void EnableHUDDeathcam ( unsigned long bEnable );
	void EnableHUDKillbox ( unsigned long bEnable );
	void EnableHUDCombatLog ( unsigned long bEnable );
	void EnableHUDChat ( unsigned long bEnable );
	void EnableHUDVisor ( unsigned long bEnable );
	void EnableHUDHealthBar ( unsigned long bEnable );
	void EnableHUDScores ( unsigned long bEnable );
	void EnableHUDBadges ( unsigned long bEnable );
	void EnableHUDAccolades ( unsigned long bEnable );
	void EnableHUDCredits ( unsigned long bEnable );
	void EnableHUDReticule ( unsigned long bEnable );
	void EnableHUDObjectives ( unsigned long bEnable );
	bool GetDamageCounterValue ( );
	void EnableDamageCounter ( unsigned long bEnable );
	bool GetChatFilterValue ( );
	void EnableChatFilter ( unsigned long bEnable );
	bool GetTinyWeaponValue ( );
	void EnableTinyWeapons ( unsigned long bEnable );
	void ClientSetLastDamagerInfo ( int Health, int UpgradeLevel );
	void VGSAudioFinished ( class UAudioComponent* AC );
	void ClientPlayVGSAudio ( class USoundCue* ASound, class APlayerReplicationInfo* InstigatorPRI );
	void OnMenuMovieClosed ( );
	void OnMenuMovieOpened ( );
	void AddDetermination ( );
	void ClearDetermination ( );
	void FlushAccumulatedDetermination ( );
	float GetCurrentDetermination ( );
	void LoadingTimer ( unsigned long bStart );
	void ConfigureSkiSpeedSteps ( float SoftCap );
	class ATrProjectile* TetherProjectile ( class ATrProjectile* ProjectileFromServer );
	void CheckTetherList ( class ATrProjectile* P );
	void AddProjectileToTetherList ( class ATrProjectile* P );
	void SwitchToDeathCamera ( );
	bool IsGameTypeCaH ( );
	bool IsGameTypeDaD ( );
	bool IsGameTypeArena ( );
	void CalcCameraOnViewTarget ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void UpdateCallInCooldown ( );
	void UpdateCallInAvailability ( );
	void ClientOnFumbledFlag ( );
	void FumbledFlag ( );
	void eventKickWarning ( );
	void ClientKickPlayer ( int Reason );
	void ServerKickPlayer ( int Reason );
	void UpdateGameCountdown ( int Seconds );
	void UpdateRoundCountdown ( int Seconds, int Round );
	void UpdateMatchCountdown ( int Seconds );
	void ClientFadeToSummary ( );
	void ClientSetEndOfMatch ( );
	void ClientMatchOver ( int Winner, struct FString WinnerName );
	void SummarizeAwards ( );
	void ClientPlayAirMailImpact ( );
	void ClientPlayBluePlateImpact ( );
	void ClientPlayReticuleHitSound ( );
	void ClientPlayTakeHit ( struct FVector HitLoc, unsigned char Damage, class UClass* DamageType );
	void ServerUnPossess ( );
	bool InRovingSpectate ( );
	void GetViewTargetList ( class ATrPawn** PawnViewTarget, class ATrVehicle** VehicleViewTarget, class ATrCamera_SpectatorBookmark** BookmarkViewTarget, class AActor** ObjectiveViewTarget );
	void OnViewTargetLeftVehicle ( class APlayerReplicationInfo* NewPRIToWatch );
	void OnViewTargetDroppedFlag ( class ATrFlagBase* NewFlagToWatch );
	void OnViewTargetFlagReturned ( );
	void OnViewTargetCapturedFlag ( class ATrFlagCTF* NewFlagToWatch );
	void ServerSetMoveSpeed ( float NewSpeed );
	void ServerDecreaseCamDistance ( int Amount );
	void ServerIncreaseCamDistance ( int Amount );
	void ClientOnViewTargetChange ( class AActor* NewViewTarget );
	void ServerViewActor ( class AActor* ActorToView );
	void ServerViewFastestPlayer ( );
	void ServerViewVehicles ( int Dir );
	void ServerViewBookmark ( int Dir );
	void ServerViewGenerators ( int Dir );
	void ServerViewFlagStands ( int Dir );
	void ServerViewFlags ( int Dir );
	void ServerSpectate ( unsigned long bNeutral );
	void ClientSpectate ( unsigned long bNeutral );
	void EndSpectate ( );
	void Spectate ( unsigned long bNeutral );
	void eventNotifyFallingHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool eventNotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	void UpdatePotentialSeekingTargets ( TArray< class AActor* > NewPotentialTargets );
	void ClientSetPlayerClassObjects ( struct FString ClassName, int PerkIcon1, int PerkIcon2 );
	void ClientShowFlagIcon ( unsigned long bShow );
	void eventHideHUDElements ( );
	class UClass* GetFamilyInfoFromId ( int ClassId );
	bool RegisterPendingClass ( int ClassId, int Loadout );
	void LoadPendingDeviceContentData ( class UClass* DeviceClass );
	void LoadPendingLoadoutContentData ( int ClassId, int Loadout );
	void ClientOnMotionSensorMineSounded ( );
	void ClientOnMotionSensorAlarmSounded ( class ATrDeployable_MotionSensor* MotionSensor );
	class UTrPlayerInput_Spectator* GetSpectatorSettings ( );
	class UPlayerInput* GetEngineSettings ( unsigned long bUse );
	void ClientSetBehindView ( unsigned long bNewBehindView );
	void ServerSetBehindView ( unsigned long bNewBehindView );
	void BehindView ( );
	float GetNewPlayerAssistToApply ( );
	void UpdateNewPlayerAssistPoints ( int AmoutToSubtract );
	float GetNewPlayerAssistAmount ( );
	void LoadPlayerProfile ( );
	void eventOnJetpackHelpTextDistanceThresholdReached ( );
	void eventOnSkiHelpTextDistanceThresholdReached ( );
	void ShowMoveErrors ( unsigned long bEnabled );
	void ClientReceiveVGSContextCommand ( class APlayerReplicationInfo* PRI, unsigned char ContextActor, unsigned char ContextLocation, unsigned long bEnemyLocation );
	void ClientReceiveVGSCommand ( class APlayerReplicationInfo* PRI, unsigned char VGSCommandIndex );
	void ServerRequestVGSCommand ( unsigned char VGSCommandIndex, unsigned long bGlobal );
	void ServerRequestVGSContextCommand ( unsigned char ContextActor, unsigned char ContextLocation, unsigned long bEnemyLocation, class AActor* SpottedActor );
	void SpotTarget ( );
	void BeginVGS ( );
	void WarnPlayerAboutSpam ( );
	bool AllowTextMessage ( struct FString msg );
	void TeamSay ( struct FString msg );
	void TeamTalk ( );
	void eventTalkConsole ( unsigned long bTeam );
	void ChatConsole ( unsigned long bTeam );
	bool CanCommunicate ( );
	void Talk ( );
	void ReplyTalk ( );
	struct FString GetLastTellSender ( );
	void eventAddChatToConsole ( struct FString Sender, struct FString ChatMessage, unsigned char Channel );
	struct FColor GetChatColor ( unsigned char Channel, unsigned long bSameTeam, int* ChatColorIdx );
	bool SendPrivateChatMessage ( struct FString PlayerName, struct FString Message );
	bool BroadcastChatMessage ( unsigned char Channel, struct FString Message );
	void eventShowFeedbackMessage ( struct FString Message );
	bool IsPlayerCommand ( struct FString msg );
	void Say ( struct FString msg );
	void TalkVGS ( struct FString Command );
	bool ChooseDiamondSword ( );
	bool ChooseBloodEagle ( );
	bool AllowHelpTextToDisplay ( );
	void SuppressHelpText ( );
	void ResetSoundMode ( );
	void MatchEndSoundMode ( );
	void AcknowledgePossession ( class APawn* P );
	void AddTimePlayed ( );
	void PulseShield ( );
	void ClientPulseHUD ( unsigned char Reason );
	void SpeedCamEffect ( unsigned long bEnabled );
	void UpdateSpeedCameraEffect ( unsigned long bEnabled );
	void eventClientPlayForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform, class AActor* FFWaveformInstigator );
	void PlayCameraShake ( struct FName ShakeName, float Scale, class UCameraShake* SourceShake );
	void SetViewTargetAsOverwatch ( unsigned long bForce );
	void DeactivateFreeCam ( );
	void ActivateFreeCam ( );
	void eventGetPlayerViewPoint ( struct FVector* POVLocation, struct FRotator* POVRotation );
	void ServerDropFlag ( );
	void ClientGameEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void CheckJumpOrDuck ( );
	void GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void UpdateClientSpawnTimer ( );
	void ClientRestart ( class APawn* NewPawn );
	void TrClientMusicEvent ( int EventIndex );
	void eventDestroyed ( );
	void eventReceiveLocalizedNagMessage ( class UClass* Message, int Switch, float Time );
	void eventReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void ServerSetZoom ( unsigned char NewZoomState );
	void ResetZoomDuration ( unsigned long bPlayRechargeSoundOnWeapon );
	void TrEndZoom ( );
	void TrStopZoom ( );
	void TrStartZoom ( );
	void CheckZoomButton ( );
	void ReleaseZoom ( );
	void DemagnifyZoom ( );
	void MagnifyZoom ( );
	void ReleasedZoom ( );
	void PressedZoom ( );
	unsigned char eventGetZoomedState ( );
	bool PerformedUseAction ( );
	void ServerRequestSpawnVehicle ( class UClass* VehicleClass );
	void ClientRestoreMoveInput ( );
	void RestoreMoveInput ( );
	void eventUpdateKickbackDirection ( float DeltaTime );
	void OnKickback ( struct FRotator KickbackAim, float KickbackBlendOutTime );
	void SwitchHud ( );
	void ClientSetHUD ( class UClass* newHUDType );
	void ServerStopSki ( );
	void ServerStartSki ( unsigned long bJump );
	void ToggleShowObjectMarkers ( );
	void SetBindSkiJet ( int method );
	void DelayReleasedSki ( );
	void ToggleSki ( );
	void ReleasedSki ( );
	void PressedSki ( unsigned long bJump );
	void eventRequestBuyVehicle ( struct FString vehicleClassStr );
	void SpawnVehicle ( struct FString vehicleClassStr );
	void UpdatePaperDoll_Device ( class UClass* DeviceClass );
	void UpdatePaperDoll ( class UClass* FamilyInfo, class UClass* DeviceClass, class UClass* skinClass, int TeamNum );
	int GetVehicleCost ( class UClass* VehicleClass );
	void ServerRequestLoadoutChange ( class UClass* FamilyInfo, int Loadout );
	bool NeedToVisitInventoryStation ( );
	bool TriggerInteracted ( );
	void ServerSwitchToSeat ( unsigned char T, class ATrVehicle* V );
	void SwitchToSeat ( unsigned char T );
	void ServerRequestCallInChange ( unsigned char T );
	void SwitchToCallIn ( unsigned char T );
	void ServerRiding ( float TimeStamp, int View );
	void ProcessRiding ( struct FRotator ViewRotation );
	void ToggleVehicleJets ( unsigned long bEnabled );
	void ServerToggleVehicleJets ( unsigned long bEnabled );
	void ServerCorrectClientPhys ( float TimeStamp );
	void ServerVerifyVehiclePhys ( float TimeStamp, float InForward, float InStrafe, float InUp, int View, struct FRigidBodyState InRBState );
	void eventServerVehiclePhysUpdated ( class ATrVehicle* InVehicle );
	void eventClientVehiclePhysUpdated ( class ATrVehicle* InVehicle );
	bool IsInVehicle ( );
	void SetAirVehicleControls ( unsigned long bInvert );
	void ServerSetAirVehicleControls ( unsigned long bInvert );
	bool GetAirVehicleInversion ( );
	void RefreshHUD ( );
	void eventPossess ( class APawn* aPawn, unsigned long bVehicleTransition );
	void OnCrossedOffArenaList ( );
	void CleanupGameplayEffectsOnDeath ( );
	void PlayRespawnSoonSound ( );
	void Respawn ( );
	void RequestRespawn ( );
	void ServerRequestRespawn ( );
	void UpdateRespawnTimer ( );
	void InitRespawnTimer ( );
	void GetBlinkPackAccel ( struct FVector* newAccel, float* BlinkPackPctEffectiveness );
	void PerformBlink ( );
	void DoJump ( );
	void IgnoreMoveInput ( unsigned long bNewMoveInput );
	void EnableJetpack ( unsigned long bEnabled, unsigned long bJump, unsigned long bForcedOff );
	void ToggleJetpack ( unsigned long bEnabled, unsigned long bJump );
	void StopRechargeHealthFX ( );
	void PlayRechargeHealthFX ( );
	void StopLowHealthFX ( );
	void PlayLowHealthFX ( );
	void PawnLeftWeatherVolume ( unsigned long bDeactivatePawnCentricWeather, class ATrWeatherVolume* WeatherVolume );
	void PawnEnteredWeatherVolume ( unsigned long bDeactivatePawnCentricWeather, class ATrWeatherVolume* WeatherVolume );
	void StopWeather ( );
	void StartWeather ( );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void eventPlayerTick ( float DeltaTime );
	void eventServerPlayerTick ( float DeltaTime );
	void ViewAPlayer ( int Dir );
	void ChangeTeam ( struct FString TeamName );
	void ClientEndTeamSelect ( int RequestedTeamNum );
	void ServerRequestAutoAssignTeam ( );
	void CompletePickTeam ( );
	bool ServerRequestPickTeam ( unsigned char RequestedTeamNum );
	void ClientStartSpawnTimer ( );
	void InitHUDObjects ( );
	void FindValidGRI ( );
	void PlayStartupMessage ( unsigned char StartupStage );
	void IdentifyTeamMessage ( );
	void eventUpdateLockedTarget ( class AActor* LockedActor );
	void StartFire ( unsigned char FireModeNum );
	void ActivateDevice ( unsigned char EquipPoint );
	void NextWeapon ( );
	void PrevWeapon ( );
	void SwitchWeapon ( unsigned char T );
	void EquipSecondary ( );
	void EquipPrimary ( );
	void PressedWeaponSwitch ( unsigned long bFilterTimeStamp );
	void PressedConsoleUse ( );
	void SetShowEquip ( unsigned long bShow );
	void PressedDeployable ( );
	void PressedPack ( );
	void PressedBelt ( );
	void PressedLaser ( );
	void PressedMelee ( );
	struct FRotator eventLimitViewRotation ( struct FRotator ViewRotation, float ViewPitchMin, float ViewPitchMax );
	float GetRespawnDelayTotalTime ( );
	unsigned char GetArmorType ( );
	void ServerSuicide ( );
	void Suicide ( );
	void ServerSetCharFamily ( struct FString FamilyClassStr );
	void ServerReloadWeapon ( );
	void ReloadWeapon ( );
	void NotifyChangedWeapon ( class AWeapon* PreviousWeapon, class AWeapon* NewWeapon );
	bool AimingHelp ( unsigned long bInstantHit );
	class ATrDevice* GetDeviceByEquipPoint ( unsigned char EquipPoint );
	void ServerGiveCreditsCheat ( int Count );
	void GiveCredits ( int Count );
	void ResetStreaks ( );
	void ClientShowAccoladeText ( struct FString Message, int ShowTime );
	void ClientShowAccoladeIcon ( int IconIndex, struct FString Description, struct FString Points );
	int GetLatestAccoladeIconIndex ( );
	void ClientUpdateCredits ( int Count );
	void CreditsSoundFinished ( class UAudioComponent* AC );
	void UpdateCurrentCredits ( int Count );
	void ModifyCredits ( int Count, unsigned long bFreeCredits );
	int GetCurrentCredits ( );
	void ProcessCreditEvent ( unsigned char EventType, unsigned long bProxyEvent );
	void eventReplicatedEvent ( struct FName VarName );
	void CheckBulletWhip ( class USoundCue* BulletWhip, struct FVector FireLocation, struct FVector FireDir, struct FVector HitLocation );
	void eventHideHUDNotification ( );
	void eventShowHUDNotification ( struct FString Message, struct FString Message2 );
	void OnMissileIntercepted ( );
	void ClientSeekingMissileTargetingSelfEvent ( int EventSwitch );
	void ClientMySaberLauncherTargetingUpdated ( unsigned char MissileLockValue );
	void eventClientHearReliableSound ( class USoundCue* ASound, class AActor* SourceActor, struct FVector SourceLocation, unsigned long bStopWhenOwnerDestroyed, unsigned long bIsOccluded );
	void TestAnnouncement ( unsigned long bPlayRightNow );
	void PlayAnnouncerSound ( class USoundCue* AnnouncementCue, unsigned long bPlayRightNow );
	void eventInitInputSystem ( );
	void InitHelpTextManager ( );
	void eventPostBeginPlay ( );
	void PlayReliableSound ( class USoundCue* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant );
	int GetLanguageFontIndex ( );
	void GetOnlineFriends ( TArray< struct FString >* vFriends );
	void AddVehicleMenuOption ( struct FString ClassName, struct FString DisplayName, int Cost, int Icon, int CountSpawned, int CountAllowed );
	void ShowVehicleMenu ( int Credits );
	void ClearVehicleMenu ( );
	void ResetRunaway ( );
	bool IsGameUsingSeekFreeLoading ( );
	void _Crash ( );
	void Bug ( );
	void PushChat ( struct FString chatStr );
	void ToggleChat ( );
	void HideChat ( );
	void ShowChat ( );
	void ChatMessageReceived ( int Channel, struct FString Sender, struct FString Message );
	void HideNotification ( );
	void ShowNotification ( struct FString Message, struct FString Message2 );
	void ForwardChatFlag ( );
	bool IsBassBoostToggled ( );
	void ToggleBassBoost ( unsigned long bEnable );
	void FireRefreshPage ( );
	void FireUILoadSummary ( );
	void ClaimPromotion ( struct FString PromoCode );
	void ToggleMainMenu ( );
	void ToggleSettings ( );
	void ToggleFriends ( );
	void OpenClasses ( );
	void OpenMenu ( );
	void HideMenu ( );
	void RequestKickVote ( struct FString PlayerName );
	bool IsChatFiltered ( struct FString PlayerName );
	bool HaveMenu ( );
	bool IsTrPlayerMuted ( struct FString PlayerName );
	void UnmutePlayer ( struct FString PlayerName );
	void MutePlayer ( struct FString PlayerName );
	void EndHotkeyBlock ( );
	void ToggleWorkingGraphic ( unsigned long bEnabled );
	void UpdateQueueTimer ( );
	void UpdateDealTimer ( );
	void UpdateTVTimer ( );
	void ForceFocus ( );
	void FireAcquisition ( );
	void SendMenuBack ( );
	void RevertSetting ( );
	int GetUserSelectedClass ( );
	void SetMenuMatchCountdown ( int Seconds );
	void KickVoteReply ( unsigned long bVote );
	void BeginExperienceTweens ( );
	void SetMenuEndOfMatch ( );
	void SetMenuSummaryScreen ( );
	void TweenSummaryScreen ( );
	void SendMenuToLobby ( );
	void SetMenuInGame ( );
	bool MainMenuIsOpen ( );
	void KickPlayerFromMatch ( int Reason );
	void SetHitValidationMode ( int loggingMode, int validationMode );
	void ShowAdminPage ( struct FString ServerURL );
	void TestSteamPurchase ( );
	void SendGameRequest ( struct FString fsRequest );
	void SendCtrlRequest ( struct FString fsRequest );
};

UClass* ATrPlayerController::pClassPointer = NULL;

// Class TribesGame.TrChatConsoleCommands
// 0x0000 (0x003C - 0x003C)
class UTrChatConsoleCommands : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1528 ];

		return pClassPointer;
	};

	void SpecList ( );
	void SendGameRequest ( struct FString fsRequest );
	void SendCtrlRequest ( struct FString fsRequest );
	void SC ( struct FString fsRequest );
	void GiveCredits ( int Count );
	void Quit ( );
	void Exit ( );
	void Tell ( struct FString PlayerName, struct FString Message );
	void Report ( struct FString PlayerName, struct FString Reason );
	void Votekick ( struct FString PlayerName );
	void Unmute ( struct FString PlayerName );
	void Mute ( struct FString PlayerName );
	void TeamSay ( struct FString msg );
	void Say ( struct FString msg );
	void ReportPlayer ( struct FString PlayerName, struct FString Reason );
	void ChatConsoleCommand ( struct FString Command );
};

UClass* UTrChatConsoleCommands::pClassPointer = NULL;

// Class TribesGame.TrCollisionProxy
// 0x0010 (0x01EC - 0x01DC)
class ATrCollisionProxy : public AActor
{
public:
	TArray< class APawn* >                             m_NearByPawns;                                    		// 0x01DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bIgnoreStealthPlayers : 1;                      		// 0x01E8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bIgnoreNonPlayers : 1;                          		// 0x01E8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bIgnoreHackedPawns : 1;                         		// 0x01E8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bIgnoreInvulnerablePlayers : 1;                 		// 0x01E8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bForwardOwnerOnly : 1;                          		// 0x01E8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bTrackLocallyControlledPawnsOnly : 1;           		// 0x01E8 (0x0004) [0x0000000000000000] [0x00000020] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1529 ];

		return pClassPointer;
	};

	void eventFellOutOfWorld ( class UClass* dmgType );
	int GetNearByPawns ( unsigned long bOnlyValid );
	void OnPawnRemoved ( class APawn* aPawn );
	void OnPawnAdded ( class APawn* aPawn );
	void CheckNearByPawns ( class APawn* aPawn, unsigned long bAdd );
	void Destroyed ( );
	void ForceClearNearByPawnsList ( );
	bool eventShouldIgnoreActor ( class AActor* Actor );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void ForceProximityScan ( float Radius );
	void TouchOther ( class AActor* Other, class UPrimitiveComponent* OtherComp );
};

UClass* ATrCollisionProxy::pClassPointer = NULL;

// Class TribesGame.TrMineCollisionProxy
// 0x0004 (0x01F0 - 0x01EC)
class ATrMineCollisionProxy : public ATrCollisionProxy
{
public:
	class UTrOrientedBoxComponent*                     m_BoxComponent;                                   		// 0x01EC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1530 ];

		return pClassPointer;
	};

	void OnPawnRemoved ( class APawn* aPawn );
	void OnPawnAdded ( class APawn* aPawn );
};

UClass* ATrMineCollisionProxy::pClassPointer = NULL;

// Class TribesGame.TrProximityGrenadeCollisionProxy
// 0x0000 (0x01EC - 0x01EC)
class ATrProximityGrenadeCollisionProxy : public ATrCollisionProxy
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1531 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void OnPawnRemoved ( class APawn* aPawn );
	void OnPawnAdded ( class APawn* aPawn );
};

UClass* ATrProximityGrenadeCollisionProxy::pClassPointer = NULL;

// Class TribesGame.TrContentLoader
// 0x0000 (0x003C - 0x003C)
class UTrContentLoader : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1532 ];

		return pClassPointer;
	};

	void StartLoadingPlayerSkin ( int ClassId, int skinId, unsigned long bLoad1PData );
	bool StartLoadingDeviceContentPackage ( class UClass* WeaponClass );
};

UClass* UTrContentLoader::pClassPointer = NULL;

// Class TribesGame.TrControlSettings
// 0x0008 (0x0080 - 0x0078)
class UTrControlSettings : public UGFxObject
{
public:
	int                                                m_ControlSettingsCount;                           		// 0x0078 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  m_ControlSettingsList;                            		// 0x007C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1533 ];

		return pClassPointer;
	};

	bool GetHUDObjectivesValue ( );
	void SaveHUDObjectivesValue ( int val );
	bool GetDamageCounterValue ( );
	void SaveDamageCounterValue ( int val );
	bool GetHelpTextValue ( );
	void SaveHelpTextValue ( int val );
	int GetWhisperNotificationsValue ( );
	void SaveWhisperNotificationsValue ( int val );
	bool GetHUDFriendStateNotifications ( );
	void SaveHUDFriendStateNotificationsValue ( int val );
	bool GetChatFilterValue ( );
	void SaveChatFilterValue ( int val );
	void SaveAlienFXValue ( int val );
	bool GetAlienFXValue ( );
	bool GetTinyWeaponValue ( );
	void SaveTinyWeaponValue ( int val );
	void UpdateRuntimePlayer ( class UPlayerInput* EngineInput );
	class UPlayerInput* GetPlayerInput ( );
	struct FString GetControlNameFromType ( unsigned char Index );
	unsigned char GetControlTypeFromName ( struct FString ControlName );
	float GetCurrentControlValue ( unsigned char Index );
	void SaveControlSetting ( int Index, float val, unsigned long bStore );
	void AddControlSetting ( struct FString ControlName, float val );
	void LoadControlSettings ( class UGFxObject* List );
	void ReadSettings ( );
	int ReadSetting ( int SettingId );
	void StoreSetting ( int SettingId, int val );
	void FlushSettings ( );
};

UClass* UTrControlSettings::pClassPointer = NULL;

// Class TribesGame.TrDeployableHologram
// 0x000C (0x0224 - 0x0218)
class ATrDeployableHologram : public ASkeletalMeshActorSpawnable
{
public:
	class UMaterialInstanceConstant*                   m_HologramMaterial;                               		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   m_RuntimeMIC;                                     		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nOldInvalidDeployReason;                        		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1534 ];

		return pClassPointer;
	};

	void Init ( class UClass* DeployableClass );
	void PreBeginPlay ( );
	void eventDestroyed ( );
	void ClearAllMessages ( );
	void eventSetValidDeployableLocation ( unsigned long bValidLocation, int InvalidDeployReason );
};

UClass* ATrDeployableHologram::pClassPointer = NULL;

// Class TribesGame.TrDevice
// 0x02A4 (0x0864 - 0x05C0)
class ATrDevice : public AUTWeapon
{
public:
	int                                                DBWeaponId;                                       		// 0x05C0 (0x0004) [0x0000000000000000]              
	int                                                DBWeaponBaseId;                                   		// 0x05C4 (0x0004) [0x0000000000000000]              
	int                                                DBWeaponTypeId;                                   		// 0x05C8 (0x0004) [0x0000000000000000]              
	int                                                DBXPActivityId;                                   		// 0x05CC (0x0004) [0x0000000000000000]              
	unsigned char                                      r_eEquipAt;                                       		// 0x05D0 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_TracerType;                                     		// 0x05D1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FEffectInfo >                       m_EffectInfo;                                     		// 0x05D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            m_eTargetType;                                    		// 0x05E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            m_eAttackType;                                    		// 0x05EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      m_PowerPoolCost;                                  		// 0x05F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fDamageRadius;                                  		// 0x0604 (0x0004) [0x0000000000000000]              
	float                                              m_fConeAttackAngle;                               		// 0x0608 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bAllowMultipleTargets : 1;                      		// 0x060C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bEquipEffectsApplied : 1;                       		// 0x060C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bHighlightEnemies : 1;                          		// 0x060C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bRequireAimMode : 1;                            		// 0x060C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bLowAmmoOn : 1;                                 		// 0x060C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bAllowReloads : 1;                              		// 0x060C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bReloadSingles : 1;                             		// 0x060C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bPendingReload : 1;                             		// 0x060C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bReloadBulletInChamber : 1;                     		// 0x060C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bCanEarlyAbortReload : 1;                       		// 0x060C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      r_bReadyToFire : 1;                               		// 0x060C (0x0004) [0x0000000000000020] [0x00000400] ( CPF_Net )
	unsigned long                                      m_bForceReplicateAmmoOnFire : 1;                  		// 0x060C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      c_bLocking : 1;                                   		// 0x060C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bUsesDeployMode : 1;                            		// 0x060C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      m_bSpawnTracers : 1;                              		// 0x060C (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      m_bSpawnTracerBeams : 1;                          		// 0x060C (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      m_bIsKickbackAdditive : 1;                        		// 0x060C (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      m_bIsPassive : 1;                                 		// 0x060C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      m_bWantsToFire : 1;                               		// 0x060C (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      m_bAllowHoldDownFire : 1;                         		// 0x060C (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      m_bAllowFireWhileZoomed : 1;                      		// 0x060C (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      m_bCanZoom : 1;                                   		// 0x060C (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      m_bUseMeshZoomOffset : 1;                         		// 0x060C (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      m_bEndZoomOnReload : 1;                           		// 0x060C (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      m_bResumeZoomOnReloadEnd : 1;                     		// 0x060C (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      r_bIsReloading : 1;                               		// 0x060C (0x0004) [0x0000000000002020] [0x02000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      m_bTinyWeaponsEnabled : 1;                        		// 0x060C (0x0004) [0x0000000000044001] [0x04000000] ( CPF_Edit | CPF_Config | CPF_GlobalConfig )
	float                                              m_fDefaultAccuracy;                               		// 0x0610 (0x0004) [0x0000000000000000]              
	float                                              m_fAccuracyLossOnJump;                            		// 0x0614 (0x0004) [0x0000000000000000]              
	float                                              m_fAccuracyLossOnWeaponSwitch;                    		// 0x0618 (0x0004) [0x0000000000000000]              
	float                                              m_fAccuracyLossOnShot;                            		// 0x061C (0x0004) [0x0000000000000000]              
	float                                              m_fAccuracyLossMax;                               		// 0x0620 (0x0004) [0x0000000000000000]              
	float                                              m_fAimingModeAccuracyBonus;                       		// 0x0624 (0x0004) [0x0000000000000000]              
	float                                              m_fAccuracyCorrectionRate;                        		// 0x0628 (0x0004) [0x0000000000000000]              
	float                                              m_fQuickRetrieveEquipTime;                        		// 0x062C (0x0004) [0x0000000000000000]              
	int                                                m_nReticuleIndex;                                 		// 0x0630 (0x0004) [0x0000000000000000]              
	int                                                m_nAltReticuleIndex;                              		// 0x0634 (0x0004) [0x0000000000000000]              
	int                                                m_nLowAmmoWarning;                                		// 0x0638 (0x0004) [0x0000000000000000]              
	int                                                m_nCarriedAmmo;                                   		// 0x063C (0x0004) [0x0000000000000000]              
	int                                                m_nMaxCarriedAmmo;                                		// 0x0640 (0x0004) [0x0000000000000000]              
	int                                                m_RemainingAmmoInClip;                            		// 0x0644 (0x0004) [0x0000000000000000]              
	float                                              m_fReloadTime;                                    		// 0x0648 (0x0004) [0x0000000000000000]              
	float                                              m_fPctTimeBeforeReload;                           		// 0x064C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_ReloadAmmoSoundCue;                             		// 0x0650 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_DryFireSoundCue;                                		// 0x0654 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_ZoomInSoundCue;                                 		// 0x0658 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_ZoomOutSoundCue;                                		// 0x065C (0x0004) [0x0000000000000000]              
	int                                                s_iCheatCountAmmo;                                		// 0x0660 (0x0004) [0x0000000000000000]              
	struct FReplicatedAmmoCount                        r_AmmoCount;                                      		// 0x0664 (0x0008) [0x0000000000000020]              ( CPF_Net )
	float                                              c_fLockTime;                                      		// 0x066C (0x0004) [0x0000000000000000]              
	class AActor*                                      c_LockedActor;                                    		// 0x0670 (0x0004) [0x0000000000000000]              
	float                                              m_fLockTargetTime;                                		// 0x0674 (0x0004) [0x0000000000000000]              
	TArray< class UClass* >                            m_WeaponDeployables;                              		// 0x0678 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTrAnimNodeBlendByDeviceAnim*                m_DeviceAnimNode;                                 		// 0x0684 (0x0004) [0x0000000000000000]              
	int                                                m_nTracerInterval;                                		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fShowTracerDistance;                            		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             m_TracerBeamTemplate;                             		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nCreditCost;                                    		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nIconIndex;                                     		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   m_v2MinMaxKickbackX;                              		// 0x069C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   m_v2MinMaxKickbackY;                              		// 0x06A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   m_v2KickbackAmount;                               		// 0x06AC (0x0008) [0x0000000000000000]              
	float                                              m_fLastKickbackTime;                              		// 0x06B4 (0x0004) [0x0000000000000000]              
	float                                              m_fKickbackBlendOutTime;                          		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMaxKickbackDistanceX;                          		// 0x06BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMaxKickbackDistanceY;                          		// 0x06C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   m_v2WeaponLagAimOffset;                           		// 0x06C4 (0x0008) [0x0000000000000000]              
	int                                                m_nMaxWeaponLagYaw;                               		// 0x06CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nMaxWeaponLagPitch;                             		// 0x06D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   m_v2WeaponLagInterpSpeed;                         		// 0x06D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   m_v2WeaponLagSmoothingFactor;                     		// 0x06DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   r_ReplicatedMaterial;                             		// 0x06E4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FEffectFormOverwrite >              m_EffectFormOverwrite;                            		// 0x06E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UUDKSkeletalMeshComponent*                   m_FirstPersonHandsMesh;                           		// 0x06F4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UUDKSkeletalMeshComponent*                   m_FirstPersonHandsOverlayMesh;                    		// 0x06F8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UCameraShake*                                m_FireCameraShake;                                		// 0x06FC (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	struct FVector                                     m_vPositionPivotOffset;                           		// 0x0700 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_ShotsFired;                                     		// 0x070C (0x0004) [0x0000000000000000]              
	float                                              m_fDesiredZoomFOV;                                		// 0x0710 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fZoomRate;                                      		// 0x0714 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vZoomMeshOffset;                                		// 0x0718 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmZoomMaterialEffectName;                       		// 0x0724 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   m_ZoomOverlayMaterial;                            		// 0x072C (0x0004) [0x0000000000000000]              
	TArray< class UAnimNodeSequence* >                 m_MeshAnimSequenceNodes;                          		// 0x0730 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              m_fClientSideHitLeeway;                           		// 0x073C (0x0004) [0x0000000000000000]              
	float                                              m_fFireIntervalForLastShotInClip;                 		// 0x0740 (0x0004) [0x0000000000000000]              
	class UAnimSet*                                    m_NoAmmoAnimSet;                                  		// 0x0744 (0x0004) [0x0000000000000000]              
	int                                                m_nTetherCounter;                                 		// 0x0748 (0x0004) [0x0000000000000000]              
	float                                              m_fLastActiveTime;                                		// 0x074C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTimeBeforeInactiveReload;                      		// 0x0750 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_TinyWeaponsOffset;                              		// 0x0754 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPaperDollInfo                              m_MainMenuPaperDollInfo;                          		// 0x0760 (0x0038) [0x0000000000000000]              
	struct FPaperDollInfo                              m_InGamePaperDollInfo;                            		// 0x0798 (0x0038) [0x0000000000000000]              
	struct FString                                     InfoPanelDescription;                             		// 0x07D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                InfoPanelDamage;                                  		// 0x07DC (0x0004) [0x0000000000000000]              
	int                                                InfoPanelRadius;                                  		// 0x07E0 (0x0004) [0x0000000000000000]              
	int                                                InfoPanelFireRate;                                		// 0x07E4 (0x0004) [0x0000000000000000]              
	int                                                InfoPanelClipSize;                                		// 0x07E8 (0x0004) [0x0000000000000000]              
	struct FString                                     UpgradeDescription[ 0x5 ];                        		// 0x07EC (0x003C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FDeviceUpgrade >                    Upgrades;                                         		// 0x0828 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FDeviceUpgrade                              BaseMod;                                          		// 0x0834 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sContentDataClassName;                          		// 0x0848 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTrDeviceContentData*                        m_ContentData;                                    		// 0x0854 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_vClientSideFireOffset;                          		// 0x0858 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1535 ];

		return pClassPointer;
	};

	void eventUpdateWeaponMICs ( );
	void ServerStartFire ( unsigned char FireModeNum );
	int GetBasePickupAmmoAmount ( );
	float GetMaxAmmoCount ( );
	void BuffMaxCarriedAmmo ( int Amount );
	void PlayDryFireZoom ( );
	struct FImpactInfo CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, TArray< struct FImpactInfo >* ImpactList );
	void ResetAltReticule ( );
	void SetAltReticule ( );
	bool CanViewZoom ( );
	void EndZoom ( class AUTPlayerController* PC, unsigned long bReturningTo3P );
	void StartZoom ( class AUTPlayerController* PC );
	void eventUpdateShotsFired ( unsigned long Reset );
	void ClientWeaponThrown ( );
	void WeaponPlaySoundLocal ( class USoundCue* Sound, float NoiseLoudness );
	void AttachMuzzleFlash ( );
	void CustomFire ( );
	float CalcHUDAimChargePercent ( );
	bool CanAutoDeviceFireNow ( );
	void ForceEndFire ( );
	void PutDownFast ( );
	bool DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup );
	void AnnounceInvalidPickup ( class ATrPawn* Other );
	void Activate ( );
	void StartFire ( unsigned char FireModeNum );
	bool ShouldRefire ( );
	int LagRot ( int NewValue, int LastValue, float MaxDiff, int Index, float DeltaSeconds );
	void eventSetPosition ( class AUDKPawn* Holder, float DeltaSeconds );
	void RemoveEquipEffect ( );
	void ApplyEquipEffect ( );
	void ServerOnClientDeniedFire ( );
	bool CanFireOffhandNow ( );
	float GetPutDownTime ( );
	void TimeWeaponPutDown ( );
	float GetEquipTime ( );
	void BeginFire ( unsigned char FireModeNum );
	void StopFire ( unsigned char FireModeNum );
	void GoInactiveDueToOffhand ( );
	void UpdateReplicatedCarriedAmmo ( );
	int AddCarriedAmmo ( int Amount );
	void BeginAReload ( );
	void OnReloadComplete ( );
	void EnableWeaponReadyToFire ( );
	void PlayReloadAnim ( );
	void ResumeZoomOnReloadEnd ( );
	void ClientFinishedReload ( );
	int CalcAmountToLoad ( );
	void PerformInactiveReload ( );
	void OnClientReloaded ( );
	void RequestReload ( );
	bool IsReloading ( );
	void SuppressAnimNotifies ( unsigned long bSuppress );
	void CacheMeshAnimSeqNodes ( );
	void ClearMeshAnimSeqNodes ( );
	float GetReloadTime ( class APlayerReplicationInfo* PRI, unsigned char EquipPoint );
	void HolderEnteredVehicle ( );
	bool CanClientRequestReloadNow ( );
	struct FRotator GetAimForCamera ( struct FVector StartFireLoc );
	float GetWeaponRange ( );
	float MaxRange ( );
	void FireAmmunition ( );
	void DestroyOldestProjectileOverLimit ( class AProjectile* newProjectile );
	class AProjectile* ProjectileFire ( );
	struct FVector GetClientSideProjectileFireStartLoc ( struct FVector AimDir );
	class UClass* GetProjectileClass ( );
	void UpdateLowAmmoWarning ( );
	int GetAmmoCount ( );
	bool NeedToVisitInventoryStation ( );
	bool ShowWeaponRedLowAmmoIndicator ( );
	struct FRotator GetAdjustedAim ( struct FVector StartFireLoc );
	bool AddKickback ( );
	struct FVector2D GetCurrentKickbackAmount ( );
	struct FRotator ApplyKickbackToAim ( struct FRotator Aim );
	struct FRotator AddSpreadWithAccuracy ( struct FRotator BaseAim, float fAccuracy );
	void PayAccuracyForShot ( );
	void PayAccuracyForWeaponSwitch ( );
	void PayAccuracyForJump ( );
	void ToggleActivate ( );
	void eventExitDeployMode ( );
	void eventEnterDeployMode ( );
	bool IsDeviceCoolingDown ( unsigned char FireModeNum );
	bool UsesPower ( );
	void ProcessEffect ( class AActor* Target, unsigned char FiringMode, unsigned char efType, unsigned long bRemove );
	float ModifyInstantHitDamage ( unsigned char FiringMode, struct FImpactInfo Impact, float Damage );
	void ProcessInstantHit_Internal ( unsigned char FiringMode, struct FImpactInfo Impact, unsigned long bHeadShot );
	void ServerNotifyHit ( unsigned char FiringMode, struct FImpactInfo Impact, unsigned long bHeadShot );
	void ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits );
	void InstantFire ( );
	float CalculateRangeDamageFalloff ( float Dist );
	bool AllowSwitchTo ( class AWeapon* NewWeapon );
	bool HasAnyAmmo ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	int GetNumRoundsCurrentlyInClip ( );
	class ATrProj_Tracer* GetTracer ( struct FVector SpawnLocation, struct FRotator SpawnRotation );
	class ATrProj_Tracer* SpawnTracerEffect ( struct FVector HitLocation, float HitDistance );
	void SpawnTracerBeam ( struct FVector Start, struct FVector End );
	bool ShouldFireTracerBeam ( );
	bool ShouldFireTracer ( );
	void ShakeView ( );
	void PlayFireAnimation ( unsigned char FireModeNum );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	void ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate );
	void OnSwitchAwayFromWeapon ( );
	void OnSwitchToWeapon ( );
	void WeaponEmpty ( );
	void PlayWeaponPutDown ( );
	void OnPlayRetrieveAnim ( );
	void PlayWeaponEquip ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void CreateOverlayMesh ( );
	void UpdateHandsMesh ( class UClass* FamilyInfo );
	void CentralUpdateHandsMesh ( class UClass* FamilyInfo );
	void ChangeVisibility ( unsigned long bIsVisible );
	void CreateFirstPersonHandsMesh ( );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName );
	class AActor* GetTraceOwner ( );
	void ConsumeAmmo ( unsigned char FireModeNum );
	void ConsumeAmmo_Internal ( unsigned char FireModeNum );
	bool ReplicateAmmoOnWeaponFire ( );
	int AddAmmo ( int Amount );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	struct FString GetObjectReferencerPackageName ( );
	struct FString GetObjectReferencerName ( );
	int ValidateClientReportedHitInternal ( unsigned char FiringMode, struct FImpactInfo Impact, unsigned long bHeadShot, unsigned long bDeviceIsFiring );
	int ValidateClientReportedHit ( unsigned char FiringMode, struct FImpactInfo Impact, unsigned long bHeadShot, unsigned long bDeviceIsFiring );
	class UTrDeviceContentData* LoadMeshData ( );
	void AttachHandsMesh ( );
	bool IsInLOS ( class AActor* TouchedActor, struct FVector ExpectedLocation );
	void RestoreKickback ( float DeltaSeconds );
	void RestoreAccuracy ( float fTimeStep );
	float GetTargetAccuracy ( );
	float GetAccuracy ( );
	class ATrDeployable* SpawnPet ( unsigned long bPet );
	class AActor* GetLockedTarget ( );
	void ResetLock ( );
	void TickInHandWeapon ( float DeltaSeconds );
	bool ShouldAddToImpactList ( class AActor* HitActor, TArray< struct FImpactInfo > ImpactList );
	bool IsInsideCone ( struct FVector SourceLookDir, class AActor* TargetActor, struct FVector StartCone, float MinCosine );
	bool IsEnemy ( class AActor* Target );
	bool IsValidTarget ( class AActor* Target, int nFireMode );
	unsigned char GetFireModeNum ( );
};

UClass* ATrDevice::pClassPointer = NULL;

// Class TribesGame.TrDevice_AutoFire
// 0x0010 (0x0874 - 0x0864)
class ATrDevice_AutoFire : public ATrDevice
{
public:
	float                                              m_fBuildupTime;                                   		// 0x0864 (0x0004) [0x0000000000000000]              
	class ATrDevice*                                   m_PostFireDevice;                                 		// 0x0868 (0x0004) [0x0000000000000000]              
	float                                              m_fPullPinTime;                                   		// 0x086C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bPullPinFire : 1;                               		// 0x0870 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1536 ];

		return pClassPointer;
	};

	void HolderEnteredVehicle ( );
	void OnSwitchAwayFromWeapon ( );
	class AProjectile* ProjectileFire ( );
	void ConsumeAmmo_Internal ( unsigned char FireModeNum );
	void ConsumeAmmo ( unsigned char FireModeNum );
	bool CanViewZoom ( );
	void IncrementFlashCount ( );
	void OnReloadComplete ( );
	void ClientFinishedReload ( );
	void OnClientReloaded ( );
	void RequestReload ( );
	bool CanAutoDeviceFireNow ( );
	bool DoOverridePrevWeapon ( );
	bool DoOverrideNextWeapon ( );
	bool CanFireNow ( );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void SwitchToPostFireDevice ( );
	void SetPostFireDevice ( class ATrDevice* PostFireDevice );
	void StartFire ( unsigned char FireModeNum );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	void PerformInactiveReload ( );
	int AddCarriedAmmo ( int Amount );
	void FireAmmunition ( );
	void PlayFireAnimation ( unsigned char FireModeNum );
	float GetPutDownTime ( );
	float GetEquipTime ( );
	float GetBuildUpTime ( );
};

UClass* ATrDevice_AutoFire::pClassPointer = NULL;

// Class TribesGame.TrDevice_ConstantFire
// 0x0018 (0x087C - 0x0864)
class ATrDevice_ConstantFire : public ATrDevice
{
public:
	class UAudioComponent*                             m_AudioComponentWeaponLoop;                       		// 0x0864 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      m_bSoundLinkedWithState : 1;                      		// 0x0868 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bHasLoopingFireAnim : 1;                        		// 0x0868 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bIsCurrentlyFiring : 1;                         		// 0x0868 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              WeaponFireFadeTime;                               		// 0x086C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_FireTail;                                       		// 0x0870 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_PostFireState;                                  		// 0x0874 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1537 ];

		return pClassPointer;
	};

	void PlayFireAnimation ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void EndFire ( unsigned char FireModeNum );
	void OnTickConstantFire ( );
	void OnStartConstantFire ( );
	void OnEndConstantFire ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ATrDevice_ConstantFire::pClassPointer = NULL;

// Class TribesGame.TrDevice_LaserTargeter
// 0x0034 (0x08B0 - 0x087C)
class ATrDevice_LaserTargeter : public ATrDevice_ConstantFire
{
public:
	float                                              m_fCallInEndTime;                                 		// 0x087C (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    m_pscLaserEffect;                                 		// 0x0880 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ATrCallIn*                                   r_CallIns[ 0x3 ];                                 		// 0x0884 (0x000C) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      r_ActiveCallin;                                   		// 0x0890 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_PrevActiveCallin;                               		// 0x0891 (0x0001) [0x0000000000000000]              
	class USoundCue*                                   m_CallInConfirmation;                             		// 0x0894 (0x0004) [0x0000000000000000]              
	struct FRotator                                    m_LastOwnerRot;                                   		// 0x0898 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_LastTargetPos;                                  		// 0x08A4 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1538 ];

		return pClassPointer;
	};

	void eventUpdateWeaponMICs ( );
	void UpdateCallInMaterial ( );
	void PlayWeaponEquip ( );
	void UpdateCreditMaterial ( );
	int GetAmmoCount ( );
	class AActor* GetTraceOwner ( );
	float CalcHUDAimChargePercent ( );
	void UpdateTarget ( unsigned long hasHitSomething, struct FVector End, float DeltaTime );
	void ServerPerformCallIn ( struct FVector EndLocation, struct FVector HitNormal );
	void CallInConfirmed ( );
	void UpdateLaserEffect ( float DeltaTime );
	void SpawnLaserEffect ( );
	void KillLaserEffect ( );
	bool GetLaserStartAndEnd ( struct FVector* StartLocation, struct FVector* EndLocation, struct FVector* EndLocationNormal );
	void OnStartConstantFire ( );
	void OnEndConstantFire ( );
	void SetActiveCallIn ( unsigned char CallInIndex );
	bool IsValidCallIn ( unsigned char CallInIndex );
	bool CanFireCallIn ( );
	void eventDestroyed ( );
	void UpdateCallins ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsValidTargetLocation ( struct FVector CurrentTarget, struct FVector PreviousTarget, class AActor* HitTarget );
};

UClass* ATrDevice_LaserTargeter::pClassPointer = NULL;

// Class TribesGame.TrDevice_Deployable
// 0x004C (0x08B0 - 0x0864)
class ATrDevice_Deployable : public ATrDevice
{
public:
	class ATrDeployableHologram*                       c_DeployableHologram;                             		// 0x0864 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UClass*                                      c_DeployableHologramClass;                        		// 0x0868 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nPerPlayerMaxDeployed;                          		// 0x086C (0x0004) [0x0000000000000000]              
	float                                              m_fPlacementScale;                                		// 0x0870 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_vPlacementExtent;                               		// 0x0874 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vDeployVolumePlacementExtent;                   		// 0x0880 (0x000C) [0x0000000000000000]              
	float                                              m_fOtherDeployableProximityCheck;                 		// 0x088C (0x0004) [0x0000000000000000]              
	float                                              m_fOutsideCheckDistance;                          		// 0x0890 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIgnoreCollisionForPlacement : 1;               		// 0x0894 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FVector                                     m_vDesiredPlacementLocation;                      		// 0x0898 (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_rDesiredPlacementRotation;                      		// 0x08A4 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1539 ];

		return pClassPointer;
	};

	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	bool HasAnyAmmo ( );
	int GetAmmoCount ( );
	bool CanAutoDeviceFireNow ( );
	void CustomFire ( );
	void ServerRequestDeploy ( struct FVector DesiredPlacement, struct FRotator DesiredRotation );
	bool IsValidDesiredDeploy ( struct FVector DesiredPlacement, struct FRotator DesiredRotation );
	void StartFire ( unsigned char FireModeNum );
	void eventExitDeployModeDisplay ( );
	void eventEnterDeployModeDisplay ( );
	void ChangeVisibility ( unsigned long bIsVisible );
	void EndZoom ( class AUTPlayerController* PC, unsigned long bReturningTo3P );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName );
	void eventExitDeployMode ( );
	void eventEnterDeployMode ( );
	bool eventCanAttemptDeploy ( );
	int AddAmmo ( int Amount );
	int AddCarriedAmmo ( int Amount );
	void ConsumeAmmo ( unsigned char FireModeNum );
	bool BelowMaxCountLimit ( unsigned long bDestroyOldest );
	bool eventIsDeployableOldest ( class ATrDeployable* OtherDep );
	int GetMaxDeployedLimit ( );
	bool TryPutDown ( );
	void ResumeInhandWeapon ( );
	void HolderEnteredVehicle ( );
	void eventDestroyed ( );
	void CheckInHandWeapon ( );
	void OnSwitchAwayFromWeapon ( );
	void OnSwitchToWeapon ( );
	void UpdateReplicatedCarriedAmmo ( );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsValidOutsideCheck ( struct FVector DeployLocation, unsigned long VerificationCheck );
	bool IsValidDeployProximity ( struct FVector DeployLocation, unsigned long VerificationCheck );
	bool IsValidDeployVolume ( unsigned long VerificationCheck, struct FVector* OutLocation, struct FRotator* OutRotation );
	bool IsValidDeployTerrain ( unsigned long VerificationCheck, struct FVector* OutLocation, struct FRotator* OutRotation );
	class ATrDeployable* Deploy ( );
	void TickInHandWeapon ( float DeltaSeconds );
	void UpdateDeployModeStatus ( );
};

UClass* ATrDevice_Deployable::pClassPointer = NULL;

// Class TribesGame.TrDevice_WallTurretDeployable
// 0x0000 (0x08B0 - 0x08B0)
class ATrDevice_WallTurretDeployable : public ATrDevice_Deployable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1540 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_WallTurretDeployable::pClassPointer = NULL;

// Class TribesGame.TrDevice_Shotgun
// 0x001C (0x0880 - 0x0864)
class ATrDevice_Shotgun : public ATrDevice
{
public:
	int                                                m_nMinShotCount;                                  		// 0x0864 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nImpactCounter;                                 		// 0x0868 (0x0004) [0x0000000000000000]              
	float                                              m_fConsumeAmmoTimeStamp;                          		// 0x086C (0x0004) [0x0000000000000000]              
	float                                              m_fInnerDefaultAccuracy;                          		// 0x0870 (0x0004) [0x0000000000000000]              
	int                                                m_nShotsFired;                                    		// 0x0874 (0x0004) [0x0000000000000000]              
	int                                                m_nConsumeShotsFired;                             		// 0x0878 (0x0004) [0x0000000000000000]              
	class UAnimNodePlayCustomAnim*                     ReloadCustomAnimNode;                             		// 0x087C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1541 ];

		return pClassPointer;
	};

	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void ProcessInstantHit_Internal ( unsigned char FiringMode, struct FImpactInfo Impact, unsigned long bHeadShot );
	void ConsumeAmmo_Internal ( unsigned char FireModeNum );
	void ConsumeAmmo ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void FireAmmunition ( );
	void CustomFire ( );
	void PerformInactiveReload ( );
	void SetFlashLocation ( struct FVector HitLocation );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
};

UClass* ATrDevice_Shotgun::pClassPointer = NULL;

// Class TribesGame.TrDeviceContentData
// 0x0020 (0x005C - 0x003C)
class UTrDeviceContentData : public UObject
{
public:
	class USkeletalMesh*                               m_SkeletalMesh1p;                                 		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UPhysicsAsset*                               m_PhysicsAsset1p;                                 		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAnimSet* >                          m_AnimSets1p;                                     		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UAnimTree*                                   m_AnimTreeTemplate1p;                             		// 0x0050 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAnimSet*                                    m_PaperDollAnimSet;                               		// 0x0054 (0x0004) [0x0000000000000000]              
	class UClass*                                      m_TrDeviceClass;                                  		// 0x0058 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1542 ];

		return pClassPointer;
	};

};

UClass* UTrDeviceContentData::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Base
// 0x007C (0x01A8 - 0x012C)
class UTrDmgType_Base : public UUTDamageType
{
public:
	int                                                DBWeaponId;                                       		// 0x012C (0x0004) [0x0000000000000000]              
	int                                                DBWeaponBaseId;                                   		// 0x0130 (0x0004) [0x0000000000000000]              
	int                                                DBWeaponTypeId;                                   		// 0x0134 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxDamageRangePct;                             		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              m_fMinDamageRangePct;                             		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              m_fMinDamagePct;                                  		// 0x0140 (0x0004) [0x0000000000000000]              
	float                                              m_fBulletDamageRange;                             		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              m_fDamageMultiplierAgainstArmor;                  		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              m_fDamageMultiplierAgainstGenerators;             		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              m_fDamageMultiplierAgainstNonArmoredObjectives;   		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              m_fDamageMultiplierAgainstShrike;                 		// 0x0154 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bCausesGib : 1;                                 		// 0x0158 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bEnableMotors : 1;                              		// 0x0158 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bIgnoreDamageFalloff : 1;                       		// 0x0158 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bImpulsesFlags : 1;                             		// 0x0158 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bOffhandType : 1;                                 		// 0x0158 (0x0004) [0x0000000000000000] [0x00000010] 
	float                                              m_fGibRadius;                                     		// 0x015C (0x0004) [0x0000000000000000]              
	float                                              m_fGibStrength;                                   		// 0x0160 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_GibFalloff;                                     		// 0x0164 (0x0001) [0x0000000000000000]              
	TArray< struct FName >                             m_nmDeathAnimNames;                               		// 0x0168 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       m_nmCameraShake;                                  		// 0x0174 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   m_RingingSound;                                   		// 0x017C (0x0004) [0x0000000000000000]              
	struct FName                                       m_nmTakeHitSoundMode;                             		// 0x0180 (0x0008) [0x0000000000000000]              
	int                                                m_nKillIconIndex;                                 		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_EnergyDrainAmount;                              		// 0x018C (0x0004) [0x0000000000000000]              
	struct FVector2D                                   m_v2DDamageNumbersMinMaxX;                        		// 0x0190 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_v2DDamageNumbersMinMaxY;                        		// 0x0198 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_v2DDamageNumbersMinMaxZ;                        		// 0x01A0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1543 ];

		return pClassPointer;
	};

	struct FName GetRandomDeathAnimName ( );
	struct FVector ModifyOverheadNumberLocation ( struct FVector InLocation );
	void GetCameraShake ( int Damage, struct FName* outCameraShakeName, float* outScale );
	float GetDamageScale ( class AActor* DamageCauser, float Dist, class UClass* dmgType );
	class AActor* GetActorCausingDamage ( class AController* EventInstigator, class AActor* DamageCauser );
	float CalculateRangeDamageFalloff ( float Dist, float damageRange, class ATrPlayerController* TrPCDamager, unsigned char EquipPoint, unsigned long bMinDamageAlwaysApplied );
	float VehicleDamageScalingFor ( class AVehicle* V );
};

UClass* UTrDmgType_Base::pClassPointer = NULL;

// Class TribesGame.TrDmgType_RepairDeployable
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_RepairDeployable : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1544 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_RepairDeployable::pClassPointer = NULL;

// Class TribesGame.TrEffectForm
// 0x001C (0x0058 - 0x003C)
class UTrEffectForm : public UObject
{
public:
	class UMaterial*                                   m_BodyMat;                                        		// 0x003C (0x0004) [0x0000000000000000]              
	float                                              m_fBodyMatFadeInTime;                             		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              m_fBodyMatFadeOutTime;                            		// 0x0044 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_ePriority;                                      		// 0x0048 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eMatType;                                       		// 0x0049 (0x0001) [0x0000000000000000]              
	unsigned long                                      m_bApplied : 1;                                   		// 0x004C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bIsManaged : 1;                                 		// 0x004C (0x0004) [0x0000000000000000] [0x00000002] 
	class UParticleSystem*                             m_PSC;                                            		// 0x0050 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_SoundCue;                                       		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1545 ];

		return pClassPointer;
	};

	class UMaterial* GetMatApplyToAttachment ( class UClass* attClass );
	class UMaterial* GetMatApplyToWeapon ( class UClass* devClass );
	class UMaterial* GetMatApplyToPawn ( class UClass* PawnClass );
	class UMaterial* GetOverwriteMat ( TArray< struct FEffectFormOverwrite > List );
};

UClass* UTrEffectForm::pClassPointer = NULL;

// Class TribesGame.TrEmitCameraEffect_Speed
// 0x0014 (0x0204 - 0x01F0)
class ATrEmitCameraEffect_Speed : public AUDKEmitCameraEffect
{
public:
	unsigned long                                      m_bUpdateRotation : 1;                            		// 0x01F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bUpdateLocationBasedOnVelocity : 1;             		// 0x01F0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class UAudioComponent*                             m_WeatherAC;                                      		// 0x01F4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   m_WeatherSound;                                   		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFadeInWeatherSoundTime;                        		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFadeOutWeatherSoundTime;                       		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1546 ];

		return pClassPointer;
	};

	void Deactivate ( );
	void Activate ( );
	void UpdateLocation ( float CamFOVDeg, struct FVector* CamLoc, struct FRotator* CamRot );
};

UClass* ATrEmitCameraEffect_Speed::pClassPointer = NULL;

// Class TribesGame.TrEntryGame
// 0x0000 (0x0530 - 0x0530)
class ATrEntryGame : public AUTEntryGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1547 ];

		return pClassPointer;
	};

	void eventOnEngineHasLoaded ( );
	class UClass* eventSetGameType ( struct FString MapName, struct FString Options, struct FString Portal );
	void SendMenuEngineLoaded ( );
};

UClass* ATrEntryGame::pClassPointer = NULL;

// Class TribesGame.TrEntryHUD
// 0x0000 (0x0464 - 0x0464)
class ATrEntryHUD : public AHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1548 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
	void CreateMainMenu ( );
};

UClass* ATrEntryHUD::pClassPointer = NULL;

// Class TribesGame.TrEquipInterface
// 0x0010 (0x004C - 0x003C)
class UTrEquipInterface : public UObject
{
public:
	unsigned long                                      m_bLoadComplete : 1;                              		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	struct FScriptDelegate                             __DelegateOnMarshalEvent__Delegate;               		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1549 ];

		return pClassPointer;
	};

	void InitClassList ( );
	void InitEquipManager ( );
	bool SetReticuleString ( int EquipId, unsigned char Type, struct FString sValue );
	struct FString GetReticuleString ( int EquipId, unsigned char Type );
	bool SetReticuleValue ( int EquipId, unsigned char Type, int nValue );
	int GetReticuleValue ( int EquipId, unsigned char Type );
	bool OwnsReticule ( int EquipId );
	bool HasReticule ( int EquipId );
	bool GetVendorItemPrice ( int VendorId, int VendorItemId, int Currency, int* Price );
	bool GetVendorItemInfo ( int VendorId, int VendorItemId, struct FString* ItemName, struct FString* itemDescr, struct FString* ribbonDesc );
	int GetVendorItemId ( int VendorId, int Index );
	int GetVendorSize ( int VendorId );
	bool RequestPurchaseGeneral ( int VendorId, int VendorItemId, int Currency, struct FString UserCustomInput );
	void SaveProfile ( );
	bool RequestPurchaseUpgrade ( int ClassId, int Type, int equip, int Upgrade, int Currency );
	bool RequestPurchaseReticule ( int ClassId, int Type, int equip, int Currency );
	bool RequestPurchaseEquip ( int ClassId, int Type, int equip, int Currency );
	bool RequestPurchaseLoadout ( int ClassId, int Loadout, int Currency );
	bool RequestPurchaseMastery ( int ClassId, int Type, int equip );
	bool RequestPurchaseClass ( int ClassId, int Currency );
	int GetUpgradePrice ( int ClassId, int Type, int equip, int Upgrade, int Currency );
	bool SetActiveEquipId ( int ClassId, int Type, int Loadout, int equip );
	int GetActiveEquipId ( int ClassId, int Type, int Loadout );
	void RetrieveActives ( );
	bool RequestPurchaseDeal ( int Currency );
	int GetDailyDealPercentOff ( );
	int GetDailyDealSecsLeft ( );
	int GetDailyDealNewPrice ( );
	int GetDailyDealOldPrice ( );
	int GetDailyDealXPPrice ( );
	int GetDailyDealLootId ( );
	int GetDailyDealItemId ( );
	int GetDailyDealClass ( );
	int GetDailyDealType ( );
	bool IsDailyDealOwned ( );
	int GetBundleParent ( int BundleId );
	bool IsBundleOwned ( int BundleId );
	bool SetLoadoutName ( int ClassId, int Loadout, struct FString loadoutName );
	int GetLoadoutPrice ( int ClassId, int Loadout, int Currency );
	struct FString GetLoadoutName ( int ClassId, int Loadout );
	bool IsLoadoutOwned ( int ClassId, int Loadout );
	int GetMasteryPrice ( int ClassId, int Type, int equip );
	int GetFirstEquipId ( int ClassId, int Type );
	int GetEquipRibbon ( int ClassId, int Type, int equip );
	int GetNextEquipId ( int ClassId, int Type, int PrevClass );
	int GetEquipPrice ( int ClassId, int Type, int equip, int Currency );
	int GetEquipCount ( int ClassId, int Type );
	int GetEquipLevel ( int ClassId, int Type, int equip );
	bool IsEquipMaxed ( int ClassId, int Type, int equip );
	bool IsEquipOwned ( int ClassId, int Type, int equip );
	int GetEquipId ( int ClassId, int Type, int Index );
	float GetClassUnlockPercent ( int ClassId );
	int GetFirstClassId ( );
	int GetClassRibbon ( int ClassId );
	int GetNextClassId ( int PrevClass );
	int GetClassPrice ( int ClassId, int Currency );
	int GetClassCount ( );
	bool IsClassOwned ( int ClassId );
	int GetClassId ( int Index );
	bool RegisterMarshalCallback ( struct FScriptDelegate MarshalEventDelegate );
	void OnMarshalEvent ( struct FPointer pMarEvent );
	void SetDefaultEquip ( int ClassId, int Type, int equip );
	void InitClass ( int ClassId );
	void LoadInventory ( );
	void DelegateOnMarshalEvent ( struct FPointer pMarEvent );
};

UClass* UTrEquipInterface::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo
// 0x0570 (0x070C - 0x019C)
class UTrFamilyInfo : public UUTFamilyInfo
{
public:
	TArray< struct FDeviceSelectionList >              DevSelectionList;                                 		// 0x019C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            VehicleSelectionList;                             		// 0x01A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            PassengerSelectionList;                           		// 0x01B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      DefaultSkinClass;                                 		// 0x01C0 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   m_vAirControlReductionRange;                      		// 0x01C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   m_vAirControlMultiplier;                          		// 0x01CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFlightAcceleration;                            		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fJetpackInitAccelMultiplier;                    		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fJetpackInitTotalTime;                          		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fJetpackPowerPoolCost;                          		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fJetpackPowerPoolTickRate;                      		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fJetpackInitialCost;                            		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             m_fJetpackRibbonTemplate;                         		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             m_fJetpackThrustTemplate;                         		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             m_nmJetpackThrustEffectSockets;                   		// 0x01F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             m_nmSkiThrusterEffectSockets;                     		// 0x0200 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             m_nmFootstepEffectSockets;                        		// 0x020C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              r_fMaxPowerPool;                                  		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPowerPoolRechargeRate;                         		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fHealthPoolRechargeRate;                        		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSecondsBeforeAutoHeal;                         		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLowHealthThreshold;                            		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMaxGroundSpeed;                                		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_nMaxHealthPool;                                 		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fVehicleSpeedInheritPercent;                    		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCollisionHeight;                               		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCollisionRadius;                               		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fHeadRadius;                                    		// 0x0240 (0x0004) [0x0000000000000000]              
	float                                              m_fHeadHeightOffset;                              		// 0x0244 (0x0004) [0x0000000000000000]              
	struct FName                                       m_nmHeadBone;                                     		// 0x0248 (0x0008) [0x0000000000000000]              
	float                                              m_fPassengerMeshScale;                            		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               m_FirstPersonBodyMesh;                            		// 0x0254 (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               m_FirstPersonHandsMesh;                           		// 0x0258 (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               m_GibMesh;                                        		// 0x025C (0x0004) [0x0000000000000000]              
	class UPhysicsAsset*                               m_GibPhysicsAsset;                                		// 0x0260 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             m_GibMeshParticleTemplate;                        		// 0x0264 (0x0004) [0x0000000000000000]              
	class UMorphTargetSet*                             m_OverlayMorphTarget;                             		// 0x0268 (0x0004) [0x0000000000000000]              
	class UAnimTree*                                   m_3pAnimTreeTemplate;                             		// 0x026C (0x0004) [0x0000000000000000]              
	struct FString                                     FriendlyName;                                     		// 0x0270 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                ClassId;                                          		// 0x027C (0x0004) [0x0000000000000000]              
	int                                                InfoBit;                                          		// 0x0280 (0x0004) [0x0000000000000000]              
	unsigned char                                      ClassType;                                        		// 0x0284 (0x0001) [0x0000000000000000]              
	struct FString                                     ShortDesc;                                        		// 0x0288 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClassDescription;                                 		// 0x0294 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Abbreviation;                                     		// 0x02A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              Stat_Range;                                       		// 0x02AC (0x0004) [0x0000000000000000]              
	float                                              Stat_Mobility;                                    		// 0x02B0 (0x0004) [0x0000000000000000]              
	float                                              Stat_AntiArmor;                                   		// 0x02B4 (0x0004) [0x0000000000000000]              
	float                                              Stat_Difficulty;                                  		// 0x02B8 (0x0004) [0x0000000000000000]              
	float                                              Stat_Durability;                                  		// 0x02BC (0x0004) [0x0000000000000000]              
	float                                              m_fMass;                                          		// 0x02C0 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bMomentumDampingEnabled : 1;                    		// 0x02C4 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              m_fMomentumDampingSpeed;                          		// 0x02C8 (0x0004) [0x0000000000000000]              
	float                                              m_fMomentumDampingPct;                            		// 0x02CC (0x0004) [0x0000000000000000]              
	float                                              m_fFIMaxJettingSpeed;                             		// 0x02D0 (0x0004) [0x0000000000000000]              
	float                                              m_fFITerminalJettingSpeed;                        		// 0x02D4 (0x0004) [0x0000000000000000]              
	float                                              m_fFIAirControl;                                  		// 0x02D8 (0x0004) [0x0000000000000000]              
	float                                              m_fFIAirSpeed;                                    		// 0x02DC (0x0004) [0x0000000000000000]              
	float                                              m_fFIMaxJetpackBoostGroundspeed;                  		// 0x02E0 (0x0004) [0x0000000000000000]              
	float                                              m_fFIMaxStoppingDistance;                         		// 0x02E4 (0x0004) [0x0000000000000000]              
	float                                              m_fFIFallVelocityTransfer;                        		// 0x02E8 (0x0004) [0x0000000000000000]              
	float                                              m_fFIMaxJetpackThrustSpeed;                       		// 0x02EC (0x0004) [0x0000000000000000]              
	float                                              m_fFIAccelRateAtMaxThrustSpeed;                   		// 0x02F0 (0x0004) [0x0000000000000000]              
	float                                              m_fFIForwardJettingPct;                           		// 0x02F4 (0x0004) [0x0000000000000000]              
	float                                              m_fFIMaxSkiSpeed;                                 		// 0x02F8 (0x0004) [0x0000000000000000]              
	float                                              m_fFITerminalSkiSpeed;                            		// 0x02FC (0x0004) [0x0000000000000000]              
	float                                              m_fFIPeakSkiControlSpeed;                         		// 0x0300 (0x0004) [0x0000000000000000]              
	float                                              m_fFISkiControlSigmaSquare;                       		// 0x0304 (0x0004) [0x0000000000000000]              
	float                                              m_fFIMaxSkiControlPct;                            		// 0x0308 (0x0004) [0x0000000000000000]              
	float                                              m_fFISkiSlopeGravityBoost;                        		// 0x030C (0x0004) [0x0000000000000000]              
	int                                                m_IconId;                                         		// 0x0310 (0x0004) [0x0000000000000000]              
	int                                                m_IconColor;                                      		// 0x0314 (0x0004) [0x0000000000000000]              
	float                                              m_fFIMaxSpeedDecelerationRate;                    		// 0x0318 (0x0004) [0x0000000000000000]              
	TArray< struct FSkillNode >                        m_SkillGrid;                                      		// 0x031C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_SkillNodeNames[ 0x19 ];                         		// 0x0328 (0x012C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_SkillNodeDescriptions[ 0x19 ];                  		// 0x0454 (0x012C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_SkillNodeShortDescriptions[ 0x19 ];             		// 0x0580 (0x012C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              m_fPaperDollFOV;                                  		// 0x06AC (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               m_PaperDollSidekickMesh;                          		// 0x06B0 (0x0004) [0x0000000000000000]              
	class UAnimSet*                                    m_PaperDollSidekickAnimset;                       		// 0x06B4 (0x0004) [0x0000000000000000]              
	class UAnimTree*                                   m_PaperDollSidekickAnimTree;                      		// 0x06B8 (0x0004) [0x0000000000000000]              
	class UPhysicsAsset*                               m_PaperDollSidekickPhysics;                       		// 0x06BC (0x0004) [0x0000000000000000]              
	float                                              m_FIJumpZ;                                        		// 0x06C0 (0x0004) [0x0000000000000000]              
	float                                              m_fFIAirAccelCapSpeedThreshold;                   		// 0x06C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFIAirAccelSpeed;                               		// 0x06C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFISkiAccelCapSpeedThreshold;                   		// 0x06CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFISkiAccelPct;                                 		// 0x06D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPaperDollInfo                              m_MainMenuPaperDollInfo;                          		// 0x06D4 (0x0038) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1550 ];

		return pClassPointer;
	};

	struct FString GetContentDeviceClassStringByEquipPoint ( unsigned char EquipPoint );
	class UClass* GetDeviceClassByEquipPoint ( unsigned char EquipPoint );
};

UClass* UTrFamilyInfo::pClassPointer = NULL;

// Class TribesGame.TrFlagBase
// 0x00A4 (0x03A4 - 0x0300)
class ATrFlagBase : public AUTCarriedObject
{
public:
	class UParticleSystem*                             RespawnEffect;                                    		// 0x0300 (0x0004) [0x0000000000000000]              
	unsigned long                                      bBringUpBright : 1;                               		// 0x0304 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bBringDownFromBright : 1;                         		// 0x0304 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFadingOut : 1;                                   		// 0x0304 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bRespawning : 1;                                  		// 0x0304 (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      bWasClothEnabled : 1;                             		// 0x0304 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bWasFlagReturned : 1;                             		// 0x0304 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bBounceSlideEnabled : 1;                        		// 0x0304 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bPassToTeammatesEnabled : 1;                    		// 0x0304 (0x0004) [0x0000000000000000] [0x00000080] 
	TArray< class UMaterialInstanceConstant* >         MICArray;                                         		// 0x0308 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     RunningClothVelClamp;                             		// 0x0314 (0x000C) [0x0000000000000000]              
	struct FVector                                     HoverboardingClothVelClamp;                       		// 0x0320 (0x000C) [0x0000000000000000]              
	class UParticleSystemComponent*                    SuccessfulCaptureSystem;                          		// 0x032C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0330 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LastLocationPingTime;                             		// 0x0334 (0x0004) [0x0000000000000000]              
	float                                              m_fMass;                                          		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFriction;                                      		// 0x033C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_FlagIconAlpha;                                  		// 0x0340 (0x0004) [0x0000000000000000]              
	struct FVector                                     LastScreenLoc;                                    		// 0x0344 (0x000C) [0x0000000000000000]              
	struct FVector                                     LastCameraDir;                                    		// 0x0350 (0x000C) [0x0000000000000000]              
	struct FVector                                     LastCameraPos;                                    		// 0x035C (0x000C) [0x0000000000000000]              
	int                                                m_TimeAwaySeconds;                                		// 0x0368 (0x0004) [0x0000000000000000]              
	float                                              m_fInheritVelocityPct;                            		// 0x036C (0x0004) [0x0000000000000000]              
	float                                              m_fForwardThrowVelocity;                          		// 0x0370 (0x0004) [0x0000000000000000]              
	float                                              m_fBounceDampingPercent;                          		// 0x0374 (0x0004) [0x0000000000000000]              
	class ATrCollisionProxy*                           m_CollisionProxyLevel1;                           		// 0x0378 (0x0004) [0x0000000000000000]              
	class ATrCollisionProxy*                           m_CollisionProxyLevel2;                           		// 0x037C (0x0004) [0x0000000000000000]              
	class ATrCollisionProxy*                           m_CollisionProxyLevel3;                           		// 0x0380 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_MarkerMIC;                                      		// 0x0384 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fIgnoreSameTeamTouch;                           		// 0x0388 (0x0004) [0x0000000000000000]              
	int                                                m_nNumBouncesBeforeSlide;                         		// 0x038C (0x0004) [0x0000000000000000]              
	int                                                m_nNumBounces;                                    		// 0x0390 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTeammatePassMaxDistanceSq;                     		// 0x0394 (0x0004) [0x0000000000000000]              
	int                                                m_nDropFlagPingThreshold;                         		// 0x0398 (0x0004) [0x0000000000000000]              
	float                                              m_fDamageMomentumDampingWhileFalling;             		// 0x039C (0x0004) [0x0000000000000000]              
	float                                              m_fRageRadius;                                    		// 0x03A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1551 ];

		return pClassPointer;
	};

	void OnCollisionProxyTouched ( class ATrPawn* TRP );
	struct FString GetSpectatorDescription ( );
	struct FString GetSpectatorName ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void eventDestroyed ( );
	void SetFlagDynamicLightToNotBeDynamic ( );
	void SetFlagPropertiesToStationaryFlagState ( );
	void eventDrop ( class AController* Killer, unsigned long bNoThrow );
	void eventEncroachedBy ( class AActor* Other );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void CustomFadeOutEffects ( );
	void bringUpBrightOff ( );
	void CustomRespawnEffects ( );
	void SameTeamTouch ( class AController* C );
	bool ValidHolder ( class AActor* Other );
	void SetHolder ( class AController* C );
	void ClientReturnedHome ( );
	bool ShouldMinimapRenderFor ( class APlayerController* PC );
	void eventOnBaseChainChanged ( );
	void Tick ( float DeltaTime );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ATrFlagBase::pClassPointer = NULL;

// Class TribesGame.TrGame
// 0x0080 (0x05B0 - 0x0530)
class ATrGame : public AUTTeamGame
{
public:
	unsigned long                                      m_bPostedStats : 1;                               		// 0x0530 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bForceEndGame : 1;                                		// 0x0530 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bForceRoundStart : 1;                             		// 0x0530 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bFirstBloodAchieved : 1;                          		// 0x0530 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bPlayTeamAudio : 1;                               		// 0x0530 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bPlayedBEWinning : 1;                             		// 0x0530 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bPlayedDSWinning : 1;                             		// 0x0530 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      PlayedEndOfGame : 1;                              		// 0x0530 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bShouldAutoBalance : 1;                         		// 0x0530 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bRoamingMap : 1;                                		// 0x0530 (0x0004) [0x0000000000000000] [0x00000200] 
	struct FString                                     m_sWinnerName;                                    		// 0x0534 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nWinningTeam;                                   		// 0x0540 (0x0004) [0x0000000000000000]              
	int                                                m_nEndMatchCounter;                               		// 0x0544 (0x0004) [0x0000000000000000]              
	int                                                m_nNextEffectInstanceId;                          		// 0x0548 (0x0004) [0x0000000000000000]              
	float                                              m_OvertimeTimeLimit;                              		// 0x054C (0x0004) [0x0000000000000000]              
	int                                                MINIMUM_CREDITS_FOR_EXPERIENCE;                   		// 0x0550 (0x0004) [0x0000000000000000]              
	class UTrStatsInterface*                           Stats;                                            		// 0x0554 (0x0004) [0x0000000000000000]              
	int                                                EndGameWait;                                      		// 0x0558 (0x0004) [0x0000000000000000]              
	int                                                SummaryWait;                                      		// 0x055C (0x0004) [0x0000000000000000]              
	int                                                CountdownWait;                                    		// 0x0560 (0x0004) [0x0000000000000000]              
	int                                                m_nPlayerTrackingCount;                           		// 0x0564 (0x0004) [0x0000000000000000]              
	int                                                m_nPlayerTrackingInterval;                        		// 0x0568 (0x0004) [0x0000000000000000]              
	float                                              m_fAutoBalanceTime;                               		// 0x056C (0x0004) [0x0000000000000000]              
	int                                                m_nAutoBalanceTeamDifference;                     		// 0x0570 (0x0004) [0x0000000000000000]              
	float                                              m_fFriendlyFireDamageScale;                       		// 0x0574 (0x0004) [0x0000000000000000]              
	class ATrSeekingMissileManager*                    m_SeekingMissileManager;                          		// 0x0578 (0x0004) [0x0000000000000000]              
	float                                              m_fForcedRespawnTime;                             		// 0x057C (0x0004) [0x0000000000000000]              
	int                                                m_nRoundCountdownTime;                            		// 0x0580 (0x0004) [0x0000000000000000]              
	int                                                m_nRoundCountdownRemainingTime;                   		// 0x0584 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMinNetPlayers;                                 		// 0x0588 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __ScoreSort__Delegate;                            		// 0x058C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CreditSort__Delegate;                           		// 0x0598 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CreditsSortViaPC__Delegate;                     		// 0x05A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1552 ];

		return pClassPointer;
	};

	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	void eventTgGetSpectators ( TArray< struct FString >* List );
	void eventTgChangeTime ( int nSeconds );
	void eventTgChangeScore ( int nTeam, int nCount );
	void eventTgEndGame ( struct FString* Reason );
	void eventTgStartGame ( struct FString* Reason );
	void OnGeneratorPowerChange ( class ATrPowerGenerator* G );
	bool CanEnterSpectate ( class ATrPlayerController* TrPC, unsigned long bNeutral );
	int GetGameTypeId ( );
	int eventFindGameTypeId ( );
	void OnServerSpawnedPlayer ( class ATrPlayerController* TrPC );
	void SendMessageToAll ( class UClass* InMessageClass, int Switch );
	void BroadcastAccolade ( struct FString Message );
	bool AllowRespawn ( class ATrPlayerController* TrPC );
	bool CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget );
	int GetRankFromXP ( int XP );
	void SetPRI ( class APlayerController* PC, class APlayerReplicationInfo* NewPRI );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	void MoveRandomPlayerFromTeam ( TArray< class APlayerController* > TeamList, int PlayersToMove );
	void AutoBalanceTeams ( );
	void AutoBalanceInFive ( );
	void AutoBalanceInTwenty ( );
	void CheckForAutoBalance ( );
	bool AreTeamsUnbalanced ( );
	bool AllowCheats ( class APlayerController* P );
	int CreditsSortViaPC ( class APlayerController* A, class APlayerController* B );
	int CreditSort ( class APlayerReplicationInfo* A, class APlayerReplicationInfo* B );
	int ScoreSort ( class APlayerReplicationInfo* A, class APlayerReplicationInfo* B );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType );
	void SetPlayerDefaults ( class APawn* PlayerPawn );
	void eventHandleSeamlessTravelPlayer ( class AController** C );
	bool AutoAssignTeam ( class AController* C );
	bool RequestTeam ( unsigned char RequestedTeamNum, class AController* C );
	unsigned char PickTeamForMigration ( class AController* C );
	unsigned char PickTeam ( unsigned char Num, class AController* C );
	bool ChangeTeam ( class AController* Other, int Num, unsigned long bNewTeam );
	void RestartPlayer ( class AController* aPlayer );
	bool ForceRespawn ( );
	void ScoreKill ( class AController* Killer, class AController* Other );
	void SendMatchCountdown ( int Seconds );
	void SendNextMatchCountdown ( int Seconds );
	void SendShowSummary ( );
	void SendMatchOver ( );
	void PlayEndOfMatchMessage ( );
	class UClass* eventSetGameType ( struct FString MapName, struct FString Options, struct FString Portal );
	void GenericPlayerInitialization ( class AController* C );
	void EndSpree ( class AUTPlayerReplicationInfo* Killer, class AUTPlayerReplicationInfo* Other );
	void NotifySpree ( class AUTPlayerReplicationInfo* Other, int Num );
	void ForceRoundStart ( );
	void ResetRound ( );
	void ResetScores ( );
	void RespawnPlayers ( );
	void TrackPlayerMovement ( );
	void SetEndGameFocus ( class APlayerReplicationInfo* Winner );
	void EndOnlineGame ( );
	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	int DetermineWinningTeam ( );
	class APawn* SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot );
	class APlayerController* eventLogin ( struct FString Portal, struct FString Options, struct FUniqueNetId UniqueId, struct FString* ErrorMessage );
	void eventKickIdler ( class APlayerController* PC );
	void StartBots ( );
	void InitializeBot ( class AUTBot* NewBot, class AUTTeamInfo* BotTeam, struct FCharacterInfo* BotInfo );
	class AUTBot* SpawnBot ( struct FString BotName, unsigned long bUseTeamIndex, int TeamIndex );
	void AddBots ( int Num );
	class AUTBot* AddBot ( struct FString BotName, unsigned long bUseTeamIndex, int TeamIndex );
	void AddInitialBots ( );
	void PreBeginPlay ( );
	void ReduceDamage ( class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum );
	void ApplyServerSettings ( );
	void OnServerInitialized ( );
	void LocalLeaveGame ( );
	int GetNextEffectInstanceId ( );
};

UClass* ATrGame::pClassPointer = NULL;

// Class TribesGame.TrGameEngine
// 0x0004 (0x0734 - 0x0730)
class UTrGameEngine : public UTgGameEngine
{
public:
	float                                              fBGMVolume;                                       		// 0x0730 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1553 ];

		return pClassPointer;
	};

};

UClass* UTrGameEngine::pClassPointer = NULL;

// Class TribesGame.TrCaHCapturePoint
// 0x00F0 (0x0640 - 0x0550)
class ATrCaHCapturePoint : public ATrGameObjective
{
public:
	struct FString                                     m_sCapturePointName;                              		// 0x0550 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ATrBaseTurret_Neutral* >             m_BaseTurrets;                                    		// 0x055C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class ATrRadarStation_Neutral* >           m_BaseSensors;                                    		// 0x0568 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class ATrInventoryStation_Neutral* >       m_InventoryStations;                              		// 0x0574 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class ATrRepairStation_Neutral* >          m_RepairStations;                                 		// 0x0580 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UStaticMeshComponent*                        m_GroundBloodEagleHologramMesh;                   		// 0x058C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        m_GroundDiamondSwordHologramMesh;                 		// 0x0590 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        m_SkyBloodEagleHologramMesh;                      		// 0x0594 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        m_SkyDiamondSwordHologramMesh;                    		// 0x0598 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        m_SkyPreviewHologramMesh;                         		// 0x059C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   m_BloodEagleHologramMIC;                          		// 0x05A0 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_DiamondSwordHologramMIC;                        		// 0x05A4 (0x0004) [0x0000000000000000]              
	float                                              m_fSkyHologramOffsetX;                            		// 0x05A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSkyHologramOffsetY;                            		// 0x05AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSkyHologramOffsetZ;                            		// 0x05B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vSkyHologramOffsetBE;                           		// 0x05B4 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vSkyHologramOffsetDS;                           		// 0x05C0 (0x000C) [0x0000000000000000]              
	float                                              m_fSkyHologramScaleOffset;                        		// 0x05CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSkyHologramScaleBE;                            		// 0x05D0 (0x0004) [0x0000000000000000]              
	float                                              m_fSkyHologramScaleDS;                            		// 0x05D4 (0x0004) [0x0000000000000000]              
	class USkelControlSingleBone*                      m_SkyHologramSkelControl;                         		// 0x05D8 (0x0004) [0x0000000000000000]              
	float                                              m_fInfluenceRadiusSize;                           		// 0x05DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LastScreenLoc;                                    		// 0x05E0 (0x000C) [0x0000000000000000]              
	struct FVector                                     LastCameraDir;                                    		// 0x05EC (0x000C) [0x0000000000000000]              
	struct FVector                                     LastCameraPos;                                    		// 0x05F8 (0x000C) [0x0000000000000000]              
	unsigned long                                      r_bIsHeld : 1;                                    		// 0x0604 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned char                                      m_CapturePointLabel;                              		// 0x0608 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      r_nFlashPointPulse;                               		// 0x0609 (0x0001) [0x0000000000000020]              ( CPF_Net )
	float                                              m_MarkerSize;                                     		// 0x060C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	float                                              m_fRemainingPulseMarkerTime;                      		// 0x0610 (0x0004) [0x0000000000000000]              
	float                                              m_fPulseMarkerTime;                               		// 0x0614 (0x0004) [0x0000000000000000]              
	float                                              m_fPulseMarkerSpeed;                              		// 0x0618 (0x0004) [0x0000000000000000]              
	float                                              m_fRemainingPointPulseMarkerTime;                 		// 0x061C (0x0004) [0x0000000000000000]              
	float                                              m_fPointPulseMarkerTime;                          		// 0x0620 (0x0004) [0x0000000000000000]              
	float                                              m_fPointPulseMarkerSpeed;                         		// 0x0624 (0x0004) [0x0000000000000000]              
	class ATrPlayerController*                         m_LastCapturedBy;                                 		// 0x0628 (0x0004) [0x0000000000000000]              
	TArray< struct FNearbyPlayer >                     m_NearbyPlayers;                                  		// 0x062C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fNearbyPawnCheckTime;                           		// 0x0638 (0x0004) [0x0000000000000000]              
	float                                              m_HoldTheLineAccoladeTime;                        		// 0x063C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1554 ];

		return pClassPointer;
	};

	bool IsPawnConsideredNearby ( class ATrPawn* TRP );
	void CheckNearbyPlayersTimer ( );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	struct FString GetScreenName ( class APlayerController* PC );
	bool ShouldPostRenderForCaH ( );
	void AwardPointTimer ( );
	void PostCapturePointTimer ( );
	void OnPawnTouched ( class ATrPawn* TRP );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventReplicatedEvent ( struct FName VarName );
	void eventUpdateHologramVisibility ( );
	void PointPulseMarker ( );
	void PulseMarker ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void PostBeginPlay ( );
};

UClass* ATrCaHCapturePoint::pClassPointer = NULL;

// Class TribesGame.TrDeployable_PrismMine
// 0x0038 (0x062C - 0x05F4)
class ATrDeployable_PrismMine : public ATrDeployable
{
public:
	struct FPointer                                    VfTable_IInterface_TrTripNotifier;                		// 0x05F4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class ATrTripActor* >                      m_aTripActors;                                    		// 0x05F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fPrismRadius;                                   		// 0x0604 (0x0004) [0x0000000000000000]              
	struct FName                                       m_nSocketTraceName;                               		// 0x0608 (0x0008) [0x0000000000000000]              
	class UClass*                                      m_DamageType;                                     		// 0x0610 (0x0004) [0x0000000000000000]              
	float                                              m_fSleepTimeAfterHit;                             		// 0x0614 (0x0004) [0x0000000000000000]              
	int                                                m_DamageAmount;                                   		// 0x0618 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             m_LaserTemplate;                                  		// 0x061C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_ActivateSound;                                  		// 0x0620 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_DeactivateSound;                                		// 0x0624 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_HitSound;                                       		// 0x0628 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1555 ];

		return pClassPointer;
	};

	void OnPowerStatusChanged ( );
	bool NoConnectionExists ( class ATrDeployable_PrismMine* AdjacentMine );
	void DeployComplete ( );
	void eventOnTripSleep ( );
	void eventOnTripAwake ( );
	bool eventGetTripSocketPosition ( unsigned long bIsLeft, struct FVector* SocketPosition );
	class UParticleSystem* GetParticleSystemName ( );
	void TripActivated ( class APawn* Other, struct FVector ActivateLocation, class ATrTripActor* TripActor );
	void RemoveTripActor ( class ATrTripActor* RemoveTrip );
	void AddTripActor ( class ATrTripActor* NewTrip );
	void DestroyTripActor ( class ATrTripActor* DestroyTrip );
	void CreateTripActor ( class ATrDeployable_PrismMine* Right, struct FVector LeftLocation, struct FVector RightLocation );
};

UClass* ATrDeployable_PrismMine::pClassPointer = NULL;

// Class TribesGame.TrDeployable_Sensor
// 0x0010 (0x0604 - 0x05F4)
class ATrDeployable_Sensor : public ATrDeployable
{
public:
	TArray< class APawn* >                             m_DetectedPawns;                                  		// 0x05F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fDetectionZOffset;                              		// 0x0600 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1556 ];

		return pClassPointer;
	};

	class UTexture2D* GetMarker ( );
	void OnPowerStatusChanged ( );
	void ScanTargets ( );
	bool IsDeployed ( );
	void OnPawnExitedCollisionProxy ( class APawn* P );
	bool IsInRange ( class APawn* P );
	void OnPawnDetectedByCollisionProxy ( class APawn* P );
	bool ShouldDetectPawn ( class APawn* P );
	void ReleaseOutOfSightEnemies ( );
	void ManageEnemiesOutOfSight ( );
	void ReleaseAllDetectedPawns ( );
	void RemoveDetectedPawn ( class APawn* DetectedPawn );
	void AddDetectedPawn ( class APawn* DetectedPawn );
	void SetPowered ( unsigned long bEnabled );
	void ModifyDetectedPawn ( class APawn* DetectedPawn, unsigned long detected );
	void DeployComplete ( );
	bool CheckLOS ( class APawn* Target );
};

UClass* ATrDeployable_Sensor::pClassPointer = NULL;

// Class TribesGame.TrDeployable_TripSensor
// 0x0004 (0x0608 - 0x0604)
class ATrDeployable_TripSensor : public ATrDeployable_Sensor
{
public:
	struct FPointer                                    VfTable_IInterface_TrTripNotifier;                		// 0x0604 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1557 ];

		return pClassPointer;
	};

	void eventOnTripSleep ( );
	void eventOnTripAwake ( );
	bool eventGetTripSocketPosition ( unsigned long bIsLeft, struct FVector* SocketPosition );
	class UParticleSystem* GetParticleSystemName ( );
	void TripActivated ( class APawn* Other, struct FVector ActivateLocation, class ATrTripActor* TripActor );
	void RemoveTripActor ( class ATrTripActor* RemoveTrip );
	void AddTripActor ( class ATrTripActor* NewTrip );
};

UClass* ATrDeployable_TripSensor::pClassPointer = NULL;

// Class TribesGame.TrStation
// 0x0024 (0x0574 - 0x0550)
class ATrStation : public ATrGameObjective
{
public:
	float                                              m_fStationZOffset;                                		// 0x0550 (0x0004) [0x0000000000000000]              
	class ATrStationCollision*                         m_Collision;                                      		// 0x0554 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ATrPawn*                                     r_CurrentPawn;                                    		// 0x0558 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      StationCollisionClass;                            		// 0x055C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_StationEnteredSoundCue;                         		// 0x0560 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             m_StationEnteredAudioComponent;                   		// 0x0564 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   m_StationLeftSoundCue;                            		// 0x0568 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             m_StationLeftAudioComponent;                      		// 0x056C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ATrCaHCapturePoint*                          m_OwningCaHCapturePoint;                          		// 0x0570 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1558 ];

		return pClassPointer;
	};

	bool eventBlocksLineChecksFromSourceActor ( class AActor* SourceActor );
	void PlayStationLeftEffects ( );
	void PlayStationEnteredEffects ( );
	void PawnLeftStation ( class ATrPawn* P );
	void PawnEnteredStation ( class ATrPawn* P );
	void Destroyed ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* ATrStation::pClassPointer = NULL;

// Class TribesGame.TrInventoryStation
// 0x001C (0x0590 - 0x0574)
class ATrInventoryStation : public ATrStation
{
public:
	float                                              m_fStationAnimTime;                               		// 0x0574 (0x0004) [0x0000000000000000]              
	float                                              m_fStationReleaseTime;                            		// 0x0578 (0x0004) [0x0000000000000000]              
	class UPointLightComponent*                        m_PowerLight;                                     		// 0x057C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FColor                                      m_PowerOnColor;                                   		// 0x0580 (0x0004) [0x0000000000000000]              
	struct FColor                                      m_PowerOffColor;                                  		// 0x0584 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bForceHealthRegen : 1;                          		// 0x0588 (0x0004) [0x0000000000000000] [0x00000001] 
	class ATrPawn*                                     m_PawnToRefresh;                                  		// 0x058C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1559 ];

		return pClassPointer;
	};

	class UTexture2D* GetMarker ( );
	void Timer ( );
	void PlayStationEnteredEffects ( );
	void OnPowerStatusChanged ( );
	void PawnEnteredStation ( class ATrPawn* P );
};

UClass* ATrInventoryStation::pClassPointer = NULL;

// Class TribesGame.TrInventoryStation_Spawnable
// 0x0000 (0x0590 - 0x0590)
class ATrInventoryStation_Spawnable : public ATrInventoryStation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1560 ];

		return pClassPointer;
	};

	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
};

UClass* ATrInventoryStation_Spawnable::pClassPointer = NULL;

// Class TribesGame.TrGameObjectiveUpgrade
// 0x0014 (0x0050 - 0x003C)
class UTrGameObjectiveUpgrade : public UObject
{
public:
	struct FName                                       m_nmClassPropertyName;                            		// 0x003C (0x0008) [0x0000000000000000]              
	float                                              m_fNewValue;                                      		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_ClassPropertyPointer;                           		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ATrGameObjective*                            m_Owner;                                          		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1561 ];

		return pClassPointer;
	};

	void InitUpgrade ( class ATrGameObjective* OwnerObject );
};

UClass* UTrGameObjectiveUpgrade::pClassPointer = NULL;

// Class TribesGame.TrGameObjectiveUpgrade_ModifyByteClassProperty
// 0x0000 (0x0050 - 0x0050)
class UTrGameObjectiveUpgrade_ModifyByteClassProperty : public UTrGameObjectiveUpgrade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1562 ];

		return pClassPointer;
	};

};

UClass* UTrGameObjectiveUpgrade_ModifyByteClassProperty::pClassPointer = NULL;

// Class TribesGame.TrGameObjectiveUpgrade_ModifyFloatClassProperty
// 0x0000 (0x0050 - 0x0050)
class UTrGameObjectiveUpgrade_ModifyFloatClassProperty : public UTrGameObjectiveUpgrade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1563 ];

		return pClassPointer;
	};

};

UClass* UTrGameObjectiveUpgrade_ModifyFloatClassProperty::pClassPointer = NULL;

// Class TribesGame.TrGameObjectiveUpgrade_ModifyIntClassProperty
// 0x0000 (0x0050 - 0x0050)
class UTrGameObjectiveUpgrade_ModifyIntClassProperty : public UTrGameObjectiveUpgrade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1564 ];

		return pClassPointer;
	};

};

UClass* UTrGameObjectiveUpgrade_ModifyIntClassProperty::pClassPointer = NULL;

// Class TribesGame.TrGameObjectiveUpgrade_IncrementIntClassProperty
// 0x0000 (0x0050 - 0x0050)
class UTrGameObjectiveUpgrade_IncrementIntClassProperty : public UTrGameObjectiveUpgrade_ModifyIntClassProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1565 ];

		return pClassPointer;
	};

};

UClass* UTrGameObjectiveUpgrade_IncrementIntClassProperty::pClassPointer = NULL;

// Class TribesGame.TrGameReplicationInfo
// 0x00F4 (0x0370 - 0x027C)
class ATrGameReplicationInfo : public AUTGameReplicationInfo
{
public:
	class ATrObjectPool*                               m_TrObjectPool;                                   		// 0x027C (0x0004) [0x0000000000000000]              
	TArray< class ATrDeployable* >                     m_Deployables;                                    		// 0x0280 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	class APlayerReplicationInfo*                      m_RabbitLeaderBoard[ 0x3 ];                       		// 0x028C (0x000C) [0x0000000000000020]              ( CPF_Net )
	class APlayerReplicationInfo*                      m_CurrentRabbitPRI;                               		// 0x0298 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                FlagReturnTime[ 0x2 ];                            		// 0x029C (0x0008) [0x0000000000000020]              ( CPF_Net )
	class ATrFlagBase*                                 m_Flags[ 0x2 ];                                   		// 0x02A4 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class ATrServerSettingsInfo*                       r_ServerConfig;                                   		// 0x02AC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                GeneratorPower[ 0x2 ];                            		// 0x02B0 (0x0008) [0x0000000000000020]              ( CPF_Net )
	int                                                GeneratorDowntime[ 0x2 ];                         		// 0x02B8 (0x0008) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      r_bCanPlaceDeployables : 1;                       		// 0x02C0 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      r_bPoweredCallins : 1;                            		// 0x02C0 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bGivePrivateXP : 1;                               		// 0x02C0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bGivePerfBonus : 1;                               		// 0x02C0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      r_bSkiEnabled : 1;                                		// 0x02C0 (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned char                                      r_ResetGame;                                      		// 0x02C4 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      r_nPhase0SeigeEnded;                              		// 0x02C5 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      r_nBlip;                                          		// 0x02C6 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      r_PhysType;                                       		// 0x02C7 (0x0001) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	TArray< class ATrTeamBlockerStaticMeshActor* >     m_TeamBlockerCache;                               		// 0x02C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fCurrentSensorBlipOpacity;                      		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSensorBlipFadeSpeed;                           		// 0x02D8 (0x0004) [0x0000000000000000]              
	float                                              r_fGlobalSpeedCapMultiplier;                      		// 0x02DC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              r_fGlobalAccelerationMultiplier;                  		// 0x02E0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              r_fGlobalAirSpeedMultiplier;                      		// 0x02E4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              r_fGlobalMaxJetpackThrustSpeedMultiplier;         		// 0x02E8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                r_CarrierShieldHealth[ 0x2 ];                     		// 0x02EC (0x0008) [0x0000000000000020]              ( CPF_Net )
	int                                                r_CarrierCoreHealth[ 0x2 ];                       		// 0x02F4 (0x0008) [0x0000000000000020]              ( CPF_Net )
	int                                                r_nRoundScore[ 0x2 ];                             		// 0x02FC (0x0008) [0x0000000000000020]              ( CPF_Net )
	int                                                r_nCurrentRound;                                  		// 0x0304 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ATrDaDCore*                                  r_DaDCore[ 0x2 ];                                 		// 0x0308 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class ATrDaDCapacitor*                             r_DaDCapacitorBE[ 0x3 ];                          		// 0x0310 (0x000C) [0x0000000000000020]              ( CPF_Net )
	class ATrDaDCapacitor*                             r_DaDCapacitorDS[ 0x3 ];                          		// 0x031C (0x000C) [0x0000000000000020]              ( CPF_Net )
	int                                                r_nNumCapturePointsHeld[ 0x2 ];                   		// 0x0328 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class ATrPlayerReplicationInfo*                    r_BEPlayerList[ 0x8 ];                            		// 0x0330 (0x0020) [0x0000000000000020]              ( CPF_Net )
	class ATrPlayerReplicationInfo*                    r_DSPlayerList[ 0x8 ];                            		// 0x0350 (0x0020) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1566 ];

		return pClassPointer;
	};

	bool CanJoinTeam ( unsigned char RequestedTeam, unsigned char CurrentTeam );
	int GetTeamSize ( unsigned char TeamNum );
	void AddPRI ( class APlayerReplicationInfo* PRI );
	void SetWarmingUp ( unsigned long bWarmup );
	bool IsValidTeamPlayer ( class ATrPlayerReplicationInfo* TrPRI );
	bool IsClassAllowed ( int TeamNum, class UClass* FamilyInfo );
	void ChangePhysicsType ( int Type );
	float GetGlobalMaxJetpackThrustSpeedMultiplier ( );
	float GetGlobalAirSpeedMultiplier ( );
	float GetGlobalAccelerationMultiplier ( );
	float GetGlobalSpeedCapMultiplier ( );
	void eventTick ( float DeltaTime );
	void Blip ( );
	bool OnSameTeam ( class AActor* A, class AActor* B );
	void Timer ( );
	void OnResetGame ( );
	void OnPhase0SiegeEnded ( );
	void CanPlaceDeployables ( unsigned long Value );
	void ApplyServerSettings ( );
	void eventPostBeginPlay ( );
	void PreBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ATrGameReplicationInfo::pClassPointer = NULL;

// Class TribesGame.TrGenerateRefPackagesCommandlet
// 0x0000 (0x007C - 0x007C)
class UTrGenerateRefPackagesCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1567 ];

		return pClassPointer;
	};

};

UClass* UTrGenerateRefPackagesCommandlet::pClassPointer = NULL;

// Class TribesGame.TrInvalidDeployableVolume
// 0x0000 (0x0208 - 0x0208)
class ATrInvalidDeployableVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1568 ];

		return pClassPointer;
	};

};

UClass* ATrInvalidDeployableVolume::pClassPointer = NULL;

// Class TribesGame.TrKeyBindings
// 0x00A0 (0x0118 - 0x0078)
class UTrKeyBindings : public UGFxObject
{
public:
	unsigned long                                      m_bGotInputKey : 1;                               		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                m_KeyBindingsCount;                               		// 0x007C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  m_KeyBindingsList;                                		// 0x0080 (0x0004) [0x0000000000000000]              
	class UPlayerInput*                                m_EngineInput;                                    		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FString                                     m_EscapeKeybind;                                  		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_EnterKeybind;                                   		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_TeamSelectKeybind;                              		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_ClassSelectKeybind;                             		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_ScoreboardKeybind;                              		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_TalkKeybind;                                    		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_TeamTalkKeybind;                                		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_TalkReplyKeybind;                               		// 0x00DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_FriendsHotkey;                                  		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_SettingsHotkey;                                 		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_MainMenuHotkey;                                 		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_ChatHotkey;                                     		// 0x010C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1569 ];

		return pClassPointer;
	};

	void SaveInterceptKeys ( );
	void UpdateRuntimeSpectator ( class UTrPlayerInput_Spectator* SpecInput );
	void UpdateRuntimePlayer ( class UPlayerInput* EngineInput );
	class UTrPlayerInput_Spectator* GetSpectatorInput ( );
	class UPlayerInput* GetPlayerInput ( );
	void ApplyDefaultSettings ( );
	struct FString GetCommandName ( unsigned char Index );
	struct FString GetCurrentBinding ( class UPlayerInput* pInput, struct FString Command );
	void UnbindSpectatorCommand ( class UTrPlayerInput_Spectator* pInput, struct FString Command );
	void UnbindPlayerCommand ( class UPlayerInput* pInput, struct FString Command );
	struct FString SaveSpectatorKeyBind ( int Index, struct FString KeyName, unsigned long bStore );
	struct FString SavePlayerKeyBind ( int Index, struct FString KeyName, unsigned long bStore );
	struct FString SaveKeyBind ( int Index, struct FString KeyName, unsigned long bStore );
	void ApplyKeyBinding ( int Index, struct FString val );
	void AddBinding ( struct FString Command, struct FString KeyName );
	struct FString GetCurrentBind ( unsigned char Key );
	void ReadBindings ( );
	void ResetDefaultSpectatorBindings ( class UTrPlayerInput_Spectator* pInput );
	void ResetDefaultKeyBindings ( class UPlayerInput* pInput );
	void CaptureNextKey ( );
	struct FString ReadSetting ( int SettingId );
	void StoreSetting ( int SettingId, struct FString KeyBind );
	void ClearSettingByValue ( struct FString StrValue );
	void ClearSettingById ( int SettingId );
	void FlushSettings ( );
};

UClass* UTrKeyBindings::pClassPointer = NULL;

// Class TribesGame.TrLaserTarget
// 0x0001 (0x01DD - 0x01DC)
class ATrLaserTarget : public AActor
{
public:
	unsigned char                                      m_nTeamId;                                        		// 0x01DC (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1570 ];

		return pClassPointer;
	};

	void RenderForTeammate ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir, float Distance );
	void RenderForOwner ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir, float Distance );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void PostBeginPlay ( );
	void Destroyed ( );
	void UpdateLocation ( struct FVector NewLocation );
	unsigned char GetTeamNum ( );
	void SetTeamNum ( unsigned char TeamID );
};

UClass* ATrLaserTarget::pClassPointer = NULL;

// Class TribesGame.TrLoadingData
// 0x00D8 (0x0114 - 0x003C)
class UTrLoadingData : public UObject
{
public:
	struct FString                                     Tip;                                              		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Rules;                                            		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MapURL;                                           		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MapName;                                          		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     GameType;                                         		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     RulesForCTF;                                      		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RulesForTDM;                                      		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RulesForRabbit;                                   		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RulesForArena;                                    		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RulesForDaD;                                      		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RulesForCaH;                                      		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RulesForBlitz;                                    		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           CTFTips;                                          		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           TDMTips;                                          		// 0x00D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           RabbitTips;                                       		// 0x00E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ArenaTips;                                        		// 0x00F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           GenericTips;                                      		// 0x00FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           CaHTips;                                          		// 0x0108 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1571 ];

		return pClassPointer;
	};

	void SetDataFields ( );
	void Initialize ( );
	struct FString GetRandomTip ( int GameIndex );
};

UClass* UTrLoadingData::pClassPointer = NULL;

// Class TribesGame.TrMapInfo
// 0x0034 (0x0074 - 0x0040)
class UTrMapInfo : public UUDKMapInfo
{
public:
	class UTrMapMusicInfo*                             m_MapMusicInfo;                                   		// 0x0040 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	TArray< class ATrInvalidDeployableVolume* >        m_BEInvalidDeployableVolumes;                     		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class ATrInvalidDeployableVolume* >        m_DSInvalidDeployableVolumes;                     		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class ATrInvalidDeployableVolume* >        m_NeutralInvalidDeployableVolumes;                		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       m_DefaultPhysicalMaterialName;                    		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      m_WeatherEffect;                                  		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1572 ];

		return pClassPointer;
	};

};

UClass* UTrMapInfo::pClassPointer = NULL;

// Class TribesGame.TrObject
// 0x0000 (0x003C - 0x003C)
class UTrObject : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1573 ];

		return pClassPointer;
	};

};

UClass* UTrObject::pClassPointer = NULL;

// Class TribesGame.TrFriendManager
// 0x0048 (0x0084 - 0x003C)
class UTrFriendManager : public UTrObject
{
public:
	int                                                PrevFriendCount;                                  		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                PrevFollowerCount;                                		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                PrevBlockedCount;                                 		// 0x0044 (0x0004) [0x0000000000000000]              
	unsigned long                                      AddFriendSuccess : 1;                             		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     RecentlyAddedFriend;                              		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                GFxCount;                                         		// 0x0058 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  GFxList;                                          		// 0x005C (0x0004) [0x0000000000000000]              
	TArray< struct FFriendStruct >                     FriendsList;                                      		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FFriendStruct >                     FollowersList;                                    		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FFriendStruct >                     IgnoredList;                                      		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1574 ];

		return pClassPointer;
	};

	void AddFriendScoreboard ( struct FString PlayerName );
	int GetFriendListIndex ( struct FString PlayerName );
	bool IsFriend ( struct FString PlayerName );
	int GetOnlineFollowerCount ( );
	int GetInGameFriendCount ( );
	int GetOnlineFriendCount ( );
	void RemoveFromList ( struct FString PlayerName );
	void eventUpdate ( );
	void RemoveFriend ( struct FString PlayerName );
	void IgnoreFriend ( struct FString PlayerName, unsigned long bIgnore );
	bool JoinFriend ( struct FString PlayerName, struct FString Password );
	void AddFriend ( struct FString PlayerName );
	void RequestFriendsList ( );
};

UClass* UTrFriendManager::pClassPointer = NULL;

// Class TribesGame.TrOrientedBoxComponent
// 0x000C (0x01F4 - 0x01E8)
class UTrOrientedBoxComponent : public UPrimitiveComponent
{
public:
	float                                              BoxHeight;                                        		// 0x01E8 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	float                                              BoxWidth;                                         		// 0x01EC (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	float                                              BoxLength;                                        		// 0x01F0 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1575 ];

		return pClassPointer;
	};

	void SetBoxSize ( float NewHeight, float NewLength, float NewWidth, unsigned long IsRadii );
};

UClass* UTrOrientedBoxComponent::pClassPointer = NULL;

// Class TribesGame.TrPaperDoll
// 0x0168 (0x038C - 0x0224)
class ATrPaperDoll : public ASkeletalMeshActorMAT
{
public:
	TArray< class ULightComponent* >                   m_Lights;                                         		// 0x0224 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     m_vViewOffset4x3;                                 		// 0x0230 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vViewOffset16x9;                                		// 0x023C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vViewOffset16x10;                               		// 0x0248 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      m_FamilyInfoClass;                                		// 0x0254 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UClass*                                      m_TrDeviceClass;                                  		// 0x0258 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UUDKSkeletalMeshComponent*                   m_CharacterMesh;                                  		// 0x025C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UUDKSkeletalMeshComponent*                   m_WeaponMesh;                                     		// 0x0260 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UUDKSkeletalMeshComponent*                   m_SidekickMesh;                                   		// 0x0264 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UUDKSkeletalMeshComponent*                   m_BackdropMesh;                                   		// 0x0268 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   m_BloodEagleBackdropMaterial;                     		// 0x026C (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_DiamondSwordBackdropMaterial;                   		// 0x0270 (0x0004) [0x0000000000000000]              
	float                                              m_fBackdropScale4x3;                              		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fBackdropScale16x9;                             		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fBackdropScale16x10;                            		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vBackdropOffset;                                		// 0x0280 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vOffsetLight;                                   		// 0x028C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vOffsetMedium;                                  		// 0x0298 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vOffsetHeavy;                                   		// 0x02A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodePlayCustomAnim*                     m_CharacterCustomAnimNode;                        		// 0x02B0 (0x0004) [0x0000000000000000]              
	class UAnimNodePlayCustomAnim*                     m_SidekickCustomAnimNode;                         		// 0x02B4 (0x0004) [0x0000000000000000]              
	float                                              m_fMinCustomAnimTime;                             		// 0x02B8 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxCustomAnimTime;                             		// 0x02BC (0x0004) [0x0000000000000000]              
	struct FPaperDollInfo                              m_CurrentPaperDollInfo;                           		// 0x02C0 (0x0038) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class ATrPlayerController*                         m_TrPlayerController;                             		// 0x02F8 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bWasLastMeshSwapRequestNonWeapon : 1;           		// 0x02FC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class UClass*                                      m_LastDeviceClassRequest;                         		// 0x0300 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      m_LastDeviceOnlyRequest;                          		// 0x0304 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      m_LastFamilyClassRequest;                         		// 0x0308 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_LastSkinIdRequest;                              		// 0x030C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPaperDollInfo                              m_PendingPaperDollInfoDevice;                     		// 0x0310 (0x0038) [0x0000000000002000]              ( CPF_Transient )
	struct FPaperDollInfo                              m_PendingPaperDollInfoSkin;                       		// 0x0348 (0x0038) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCheckStreamingFrequency;                       		// 0x0380 (0x0004) [0x0000000000000000]              
	float                                              m_fLastStreamingCheckTimestamp;                   		// 0x0384 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      m_DeviceContentDataClass;                         		// 0x0388 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1576 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void SetMainMesh ( struct FPaperDollInfo NewInfo );
	struct FPaperDollInfo GetDevicePaperDollInfo ( class UClass* WeaponClass );
	void SetWeaponOnlyMesh ( class UClass* WeaponClass );
	void eventOnWeaponFinishedStreaming ( struct FPaperDollInfo NewPaperDollInfo );
	void StopLoadingGraphic ( );
	void PlayLoadingGraphic ( );
	void OnDeviceContentDataClassLoaded ( class UClass* DeviceContentDataClass );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void ResetCustomAnimTimer ( );
	void StopCustomAnimation ( float FadeOutTime );
	void PlayCustomAnimation ( );
	void SetFamilyInfo ( class UClass* NewFamilyInfoClass, class UClass* DeviceClass, class UClass* skinClass, int TeamNum );
	void TryUpdatingPaperDoll ( );
	void eventOnSkeletalMeshFinishedStreaming ( class USkeletalMesh* NewSkelMesh );
	void OnCharacterMeshContentDataClassLoaded ( class UClass* Skin3PDataClass );
	class USkeletalMesh* GetCharacterSkeletalMesh ( class UClass* FamilyInfoClass, unsigned char TeamNum );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventPostBeginPlay ( );
	bool IsFullyStreamed ( struct FPaperDollInfo PaperDoll );
};

UClass* ATrPaperDoll::pClassPointer = NULL;

// Class TribesGame.TrPartyManager
// 0x0010 (0x004C - 0x003C)
class UTrPartyManager : public UObject
{
public:
	unsigned long                                      bCreatedParty : 1;                                		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     InvitingPlayer;                                   		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1577 ];

		return pClassPointer;
	};

	void LeaveParty ( unsigned long bHandle );
	void eventOnUpdate ( );
	void InvitationComplete ( int Action );
	void InvitationPopup ( class UGFxObject* Obj );
	void eventShowInvitation ( struct FString LeaderName );
	void Initialize ( );
	struct FString GetMemberName ( int Index );
	struct FString GetLeaderName ( );
	bool AcceptInvite ( );
	bool ActiveMember ( int Index );
	bool SendInvite ( struct FString PlayerName );
	bool Kick ( struct FString PlayerName );
	bool Leave ( );
	bool CanInvite ( );
	bool AmLeader ( );
	bool InParty ( );
	int GetMemberCap ( );
	int GetMemberCount ( );
	int GetMemberId ( int Index );
};

UClass* UTrPartyManager::pClassPointer = NULL;

// Class TribesGame.TrTurretPawn
// 0x0004 (0x0C74 - 0x0C70)
class ATrTurretPawn : public ATrPawn
{
public:
	class ATrDeployable*                               m_OwnerDeployable;                                		// 0x0C70 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1578 ];

		return pClassPointer;
	};

	void IncrementFlashCount ( class AWeapon* W, unsigned char FireModeNum );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void SetCharacterClassFromInfo ( class UClass* Info, unsigned long bForce );
	void RefreshInventory ( unsigned long bIsRespawn, unsigned long bCallin );
	void RefreshPlayer ( );
	void TakeRadiusDamage ( class AController* EventInstigator, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void Reset ( );
	struct FVector GetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	struct FVector LeadingAimLocation ( class AActor* Enemy );
	struct FRotator GetAdjustedAimFor ( class AWeapon* InWeapon, struct FVector projStart );
	struct FVector GetAimVectorFor ( class AWeapon* InWeapon, struct FVector projStart, class AActor* Enemy );
	void WeaponFired ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation );
	void Destroyed ( );
	void PostBeginPlay ( );
	struct FVector GetValidAimTarget ( struct FVector PawnLocation, struct FVector PawnTargetLocation );
};

UClass* ATrTurretPawn::pClassPointer = NULL;

// Class TribesGame.TrPhysicalMaterialProperty
// 0x0008 (0x0044 - 0x003C)
class UTrPhysicalMaterialProperty : public UPhysicalMaterialPropertyBase
{
public:
	struct FName                                       MaterialType;                                     		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1579 ];

		return pClassPointer;
	};

};

UClass* UTrPhysicalMaterialProperty::pClassPointer = NULL;

// Class TribesGame.TrEntryPlayerController
// 0x0084 (0x0DEC - 0x0D68)
class ATrEntryPlayerController : public ATrPlayerController
{
public:
	int                                                m_CountdownTime;                                  		// 0x0D68 (0x0004) [0x0000000000000000]              
	int                                                MIN_RESEND_WAIT_TIME;                             		// 0x0D6C (0x0004) [0x0000000000000000]              
	int                                                MAX_RESEND_WAIT_TIME;                             		// 0x0D70 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMenuNotified : 1;                                		// 0x0D74 (0x0004) [0x0000000000000000] [0x00000001] 
	class UPostProcessChain*                           EntryPostProcessChain;                            		// 0x0D78 (0x0004) [0x0000000000000000]              
	TArray< class UPostProcessChain* >                 OldPostProcessChain;                              		// 0x0D7C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ULocalPlayer*                                OldPlayer;                                        		// 0x0D88 (0x0004) [0x0000000000000000]              
	class UTrMainMenuContentData*                      m_MainMenuContentData;                            		// 0x0D8C (0x0004) [0x0000000000000000]              
	struct FString                                     MainMenuContentClassName;                         		// 0x0D90 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ATrPaperDollMainMenu*                        m_MainMenuPaperDoll;                              		// 0x0D9C (0x0004) [0x0000000000000000]              
	unsigned char                                      m_ContentDataType;                                		// 0x0DA0 (0x0001) [0x0000000000000000]              
	float                                              m_PreloadTextureTime;                             		// 0x0DA4 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_CameraLocation16x9;                             		// 0x0DA8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_CameraLocation16x10;                            		// 0x0DB4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_CameraLocation4x3;                              		// 0x0DC0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    m_rInitialCameraRotation;                         		// 0x0DCC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    m_rTargetCameraRotation;                          		// 0x0DD8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCameraRotationCurrTime;                        		// 0x0DE4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCameraRotationInterpTime;                      		// 0x0DE8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1580 ];

		return pClassPointer;
	};

	void ShowPeachTimer ( );
	void SwapModelTimer ( );
	void RefreshFriendsTimer ( );
	void eventOn3PSkinContentLoaded ( class UClass* Skin3PDataClass );
	void OnClassSelectedMainMenu ( );
	void eventOnDeviceContentDataClassLoaded ( class UClass* DeviceContentDataClass );
	void UpdatePaperDoll ( class UClass* FamilyInfoClass, class UClass* DeviceClass, class UClass* skinClass, int TeamNum );
	void UpdateMainMenuPaperDoll_Mesh ( unsigned char Type );
	void ClearMainMenuPaperDoll ( );
	void UpdatePaperDoll_Device ( class UClass* DeviceClass );
	void Char ( int CharID );
	void Weap ( int WeapId );
	void Pose ( int PoseId );
	void ShowScoreboard ( );
	void ShowMidGameMenu ( struct FName TabTag, unsigned long bEnableInput );
	void SetPawnConstructionScene ( unsigned long bShow );
	void QuitToMainMenu ( );
	void OnLinkStatusChanged ( unsigned long bConnected );
	void OnConnectionStatusChange ( unsigned char ConnectionStatus );
	void OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message );
	void OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message );
	void OnGameInviteReceived ( unsigned char LocalUserNum, struct FString RequestingNick );
	void OnControllerChanged ( int ControllerId, unsigned long bIsConnected );
	void eventDestroyed ( );
	void eventInitInputSystem ( );
	void LoadingTimer ( unsigned long bStart );
	void ClearQueueResendTimer ( );
	void eventBeginQueueResendTimer ( int SecondsLeft );
	void RequestPaperDollTimer ( );
	void NotifyMenuReadyTimer ( );
	void PreloadTexturesTimer ( );
	void SwingCameraBack ( );
	void SwingCamera ( float TargetPitch, float TargetYaw, float TargetRoll );
	void eventGetPlayerViewPoint ( struct FVector* POVLocation, struct FRotator* POVRotation );
	void PostBeginPlay ( );
	void ToggleMenuVisible ( );
	void ShowPeach ( );
	void SwapModel ( );
	void RefreshFriends ( );
	void NotifyMenuReady ( );
	int GetWaitRemaining ( );
	void UpdateMenuTimer ( int Seconds );
	void ResendReadyCheck ( );
	void SendMenuToLobby ( );
	bool RequestPaperDoll ( );
};

UClass* ATrEntryPlayerController::pClassPointer = NULL;

// Class TribesGame.TrPlayerInput
// 0x004C (0x01C8 - 0x017C)
class UTrPlayerInput : public UPlayerInput
{
public:
	int                                                m_VGSClassId;                                     		// 0x017C (0x0004) [0x0000000000000000]              
	float                                              m_LeftJoystickLastValue;                          		// 0x0180 (0x0004) [0x0000000000000000]              
	float                                              m_RightJoystickLastValue;                         		// 0x0184 (0x0004) [0x0000000000000000]              
	class ATrHUD*                                      m_HUD;                                            		// 0x0188 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bInVGSCaptureMode : 1;                          		// 0x018C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bInVGSClassMode : 1;                            		// 0x018C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bInVGSLoadoutMode : 1;                          		// 0x018C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	TArray< struct FName >                             m_VGSPassThroughKeys;                             		// 0x0190 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             m_VGSNumKeys;                                     		// 0x019C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             m_VGSPadKeys;                                     		// 0x01A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      m_CurrentVGSNode;                                 		// 0x01B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTrVGSCommandList*                           m_VGSCommandList;                                 		// 0x01B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     m_CurrentVGSKeySequence;                          		// 0x01BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1581 ];

		return pClassPointer;
	};

	int GetVGSClassId ( );
	bool InVGSLoadoutMode ( );
	bool InVGSClassMode ( );
	void SetFlyingYawSensitivity ( float F );
	void SetFlyingPitchSensitivity ( float F );
	void eventPlayerInput ( float DeltaTime );
	void PreProcessInput ( float DeltaTime );
	void PushAnalogJoysticksToScaleform ( );
	int GetStickAngle ( float UpDown, float LeftRight );
	void SetHUDTarget ( class ATrHUD* TrH );
	void EndVGS ( );
	void StartVGSLoadouts ( int ClassId );
	void StartVGSClasses ( );
	void StartVGS ( );
	bool IsValidVGSTarget ( class AActor* ActorUnderReticule );
	void PlayVGSCommand ( unsigned char VGSCommandIndex );
	bool PlaySpottedCommand ( );
	void eventOnVGSNumKeyPressed ( int Index );
	void eventOnVGSKeyPressed ( struct FName KeyPressed );
	bool IsMouseSmoothEnabled ( );
	void AdjustMouseSensitivity ( float FOVScale );
	void InitInputSystem ( );
};

UClass* UTrPlayerInput::pClassPointer = NULL;

// Class TribesGame.TrPlayerInput_Spectator
// 0x0000 (0x017C - 0x017C)
class UTrPlayerInput_Spectator : public UPlayerInput
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1582 ];

		return pClassPointer;
	};

};

UClass* UTrPlayerInput_Spectator::pClassPointer = NULL;

// Class TribesGame.TrPlayerReplicationInfo
// 0x00EB (0x0470 - 0x0385)
class ATrPlayerReplicationInfo : public AUTPlayerReplicationInfo
{
public:
	int                                                m_CurrentLoadout;                                 		// 0x0388 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_PendingLoadout;                                 		// 0x038C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      m_Rank;                                           		// 0x0390 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      m_CurrentBaseClass;                               		// 0x0394 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      m_PendingBaseClass;                               		// 0x0398 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nRabbitRank;                                    		// 0x039C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nRankNum;                                       		// 0x03A0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nRankIconIndex;                                 		// 0x03A4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nPlayerIconIndex;                               		// 0x03A8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nKills;                                         		// 0x03AC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nAssists;                                       		// 0x03B0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nCreditsEarned;                                 		// 0x03B4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nBaseGP;                                        		// 0x03B8 (0x0004) [0x0000000000000000]              
	int                                                m_nBaseXP;                                        		// 0x03BC (0x0004) [0x0000000000000000]              
	int                                                m_nPlayerClassId;                                 		// 0x03C0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nFreeCredits;                                   		// 0x03C4 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentCredits;                                		// 0x03C8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDevUpgrades : 1;                                 		// 0x03CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      c_bIsBuddyToLocalPlayer : 1;                      		// 0x03CC (0x0004) [0x0000000000002003] [0x00000002] ( CPF_Edit | CPF_Const | CPF_Transient )
	unsigned long                                      c_bIsMutualBuddiesWithLocalPlayer : 1;            		// 0x03CC (0x0004) [0x0000000000002003] [0x00000004] ( CPF_Edit | CPF_Const | CPF_Transient )
	unsigned long                                      r_bIsCrossedOffArenaList : 1;                     		// 0x03CC (0x0004) [0x0000000000002020] [0x00000008] ( CPF_Net | CPF_Transient )
	unsigned long                                      r_bIsLastManStanding : 1;                         		// 0x03CC (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	class AActor*                                      m_LockedTarget;                                   		// 0x03D0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_ArmorType;                                      		// 0x03D4 (0x0001) [0x0000000000000000]              
	class UClass*                                      r_VoiceClass;                                     		// 0x03D8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UTrStatsInterface*                           Stats;                                            		// 0x03DC (0x0004) [0x0000000000000000]              
	class UTrInventoryHelper*                          InvHelper;                                        		// 0x03E0 (0x0004) [0x0000000000000000]              
	float                                              c_fCurrentPingMS;                                 		// 0x03E4 (0x0004) [0x0000000000000000]              
	float                                              c_fRedFlagPingThreshold;                          		// 0x03E8 (0x0004) [0x0000000000000000]              
	float                                              c_fRedFlagPingTime;                               		// 0x03EC (0x0004) [0x0000000000000000]              
	float                                              c_fRedFlagTimeStamp;                              		// 0x03F0 (0x0004) [0x0000000000000000]              
	struct FEquipLevel                                 r_EquipLevels[ 0xD ];                             		// 0x03F4 (0x0068) [0x0000000000000020]              ( CPF_Net )
	class UTrValueModifier*                            m_ValueModifier;                                  		// 0x045C (0x0004) [0x0000000004000000]              ( CPF_EditInline )
	class UClass*                                      c_Cached3PSkin;                                   		// 0x0460 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      c_Cached1PSkin;                                   		// 0x0464 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                r_nArenaSpawnsLeft;                               		// 0x0468 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                r_bSkinId;                                        		// 0x046C (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1583 ];

		return pClassPointer;
	};

	void ServerPingRedFlag ( float CurrentPingMS );
	void eventOnPingRedFlagged ( );
	int GetJetpackSocketCount ( class UClass* FamilyInfo );
	struct FName GetJetpackSocket ( class UClass* FamilyInfo, int Socket );
	class UParticleSystem* GetSkiThrust ( class UClass* FamilyInfo, class UParticleSystem* DefaultSystem );
	class UParticleSystem* GetJetpackTrail ( class UClass* FamilyInfo );
	class UParticleSystem* GetJetpackThrust ( class UClass* FamilyInfo );
	class USkeletalMesh* GetGibMesh ( class UClass* FamilyInfo );
	class USkeletalMesh* GetHandsMesh ( );
	class USkeletalMesh* GetBodyMesh ( );
	void Update1PMesh ( class UClass* FamilyInfo );
	class USkeletalMesh* Get3PSkin ( );
	void On1PSkinContentLoaded ( class UClass* Skin1PDataClass );
	void On3PSkinContentLoaded ( class UClass* Skin3PDataClass );
	void UpdateCachedSkin ( );
	class UClass* GetCurrentVoiceClass ( class UClass* FamilyInfo );
	class UClass* GetCurrentSkinClass ( class UClass* FamilyInfo );
	void SetCached3PSkin ( class UClass* NewCachedSkin );
	void CopyProperties ( class APlayerReplicationInfo* PRI );
	class APlayerReplicationInfo* Duplicate ( );
	void SetFlag ( class AUTCarriedObject* NewFlag );
	class UClass* eventGetPerkFromId ( int PerkId );
	class UClass* GetRankFromXP ( int XP );
	void SetPlayerXP ( int XP );
	void SetPlayerGP ( int GP );
	int GetBaseXP ( );
	int GetBaseGP ( );
	int GetRankIcon ( );
	int GetPlayerRankNum ( );
	class UClass* GetPlayerRank ( );
	struct FString GetCurrentClassAbb ( );
	class UClass* GetPendingClass ( );
	class UClass* GetCurrentClass ( );
	int GetPlayerClassId ( );
	void CheckMultiKill ( );
	void IncrementKills ( unsigned long bEnemyKill );
	void SetActiveEquip ( unsigned char EquipId, int ItemId );
	unsigned char GetEquipPointByWeaponId ( int WeaponId );
	class UClass* GetEquipDevice ( class UClass* FamilyInfo, unsigned char equipSlot );
	void ResolveDefaultEquip ( class UClass* FamilyInfo );
	bool ShouldVisitStation ( );
	struct FString GetSelectedLoadout ( );
	bool RequestLoadoutChange ( class UClass* FamilyInfo, int Loadout );
	bool VerifyAndLoadCharacter ( class UClass* FamilyInfo, int Loadout );
	void SwapToPendingCharClass ( unsigned long bIsRespawn );
	unsigned char eventGetArmorType ( );
	void SetPlayerTeam ( class ATeamInfo* NewTeam );
	void Reset ( );
	class UTrValueModifier* GetCurrentValueModifier ( );
	void UpdateValueModifier ( );
	void RegisterPlayerWithSession ( );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	class UClass* Load1PData ( struct FString ContentPath );
	void RegisterBuddy ( );
	void UpdatePing ( float TimeStamp );
	int GetUpgradeLevelLocal ( int ClassId, int Type, TArray< int > UpgradeList );
	int GetUpgradeLevel ( int ClassId, int Type, TArray< int > UpgradeList );
	void GetCharacterEquipLocal ( int ClassId, int Loadout );
	void GetCharacterEquip ( int ClassId, int Loadout );
	bool VerifyCharacter ( int ClassId );
};

UClass* ATrPlayerReplicationInfo::pClassPointer = NULL;

// Class TribesGame.TrPlayerSkin1PData
// 0x0010 (0x004C - 0x003C)
class UTrPlayerSkin1PData : public UObject
{
public:
	int                                                m_nSkinId;                                        		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nClassId;                                       		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class USkeletalMesh*                               m_FirstPersonBodyMesh;                            		// 0x0044 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class USkeletalMesh*                               m_FirstPersonHandsMesh;                           		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1584 ];

		return pClassPointer;
	};

};

UClass* UTrPlayerSkin1PData::pClassPointer = NULL;

// Class TribesGame.TrPlayerSkin3PData
// 0x0010 (0x004C - 0x003C)
class UTrPlayerSkin3PData : public UObject
{
public:
	int                                                m_nSkinId;                                        		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nClassId;                                       		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class USkeletalMesh*                               m_SkeletalMesh3p;                                 		// 0x0044 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class USkeletalMesh*                               m_GibMesh;                                        		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1585 ];

		return pClassPointer;
	};

};

UClass* UTrPlayerSkin3PData::pClassPointer = NULL;

// Class TribesGame.TrProjectile
// 0x0088 (0x032C - 0x02A4)
class ATrProjectile : public AUTProjectile
{
public:
	class UPrimitiveComponent*                         m_ProjMesh;                                       		// 0x02A4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UClass*                                      m_SpawnedDeployableClass;                         		// 0x02A8 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bLimitXYDamageCheck : 1;                        		// 0x02AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDebugProjectileRadius : 1;                     		// 0x02AC (0x0004) [0x0000000000004001] [0x00000002] ( CPF_Edit | CPF_Config )
	unsigned long                                      m_bFastProjectile : 1;                            		// 0x02AC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bHasBounced : 1;                                		// 0x02AC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bOrientToWall : 1;                              		// 0x02AC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bAuthoritativeExploding : 1;                    		// 0x02AC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bTether : 1;                                    		// 0x02AC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bSimulateAutonomousProjectiles : 1;             		// 0x02AC (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bIsBullet : 1;                                  		// 0x02AC (0x0004) [0x0000000000000000] [0x00000100] 
	float                                              m_fXYDamageRadius;                                		// 0x02B0 (0x0004) [0x0000000000000000]              
	float                                              m_fProjInheritVelocityPct;                        		// 0x02B4 (0x0004) [0x0000000000000000]              
	float                                              m_fProjInheritVelocityPctZ;                       		// 0x02B8 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxProjInheritPct;                             		// 0x02BC (0x0004) [0x0000000000000000]              
	class UDynamicLightEnvironmentComponent*           m_ProjLightEnvironment;                           		// 0x02C0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                m_nPerPlayerMaxDeployed;                          		// 0x02C4 (0x0004) [0x0000000000000000]              
	float                                              m_fBounceDampingPercent;                          		// 0x02C8 (0x0004) [0x0000000000000000]              
	float                                              m_fDirectHitMultiplier;                           		// 0x02CC (0x0004) [0x0000000000000000]              
	float                                              m_fAmbientSoundFadeIn;                            		// 0x02D0 (0x0004) [0x0000000000000000]              
	float                                              m_fAmbientSoundFadeOut;                           		// 0x02D4 (0x0004) [0x0000000000000000]              
	float                                              m_fInstigatorMomentumTransferMultiplier;          		// 0x02D8 (0x0004) [0x0000000000000000]              
	float                                              m_fInstigatorExtraZMomentum;                      		// 0x02DC (0x0004) [0x0000000000000000]              
	int                                                r_nTetherId;                                      		// 0x02E0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ATrProjectile*                               c_ParentTetheredProjectile;                       		// 0x02E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ATrProjectile*                               c_ChildTetheredProjectile;                        		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCurrentTetherTweenAmount;                      		// 0x02EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTweenSpeed;                                    		// 0x02F0 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_SpawnedEquipPoint;                              		// 0x02F4 (0x0001) [0x0000000000000000]              
	float                                              m_fClientSimulatedSpeed;                          		// 0x02F8 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_vAccelDirection;                                		// 0x02FC (0x000C) [0x0000000000000000]              
	struct FVector                                     r_vSpawnLocation;                                 		// 0x0308 (0x000C) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FMaterialImpactEffect >             ImpactEffects;                                    		// 0x0314 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fMaxLifespan;                                   		// 0x0320 (0x0004) [0x0000000000000000]              
	float                                              m_fMinLifespan;                                   		// 0x0324 (0x0004) [0x0000000000000000]              
	float                                              m_fAlwaysRelevantDistanceSquared;                 		// 0x0328 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1586 ];

		return pClassPointer;
	};

	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	bool HurtRadius_Internal ( float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, struct FVector AltHurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	bool ProjectileHurtRadius ( struct FVector HurtOrigin, struct FVector HitNormal );
	void Bounce ( class AActor* Other, struct FVector WallNormal );
	void ShutDown ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	class USoundCue* GetExplosionSound ( class UPhysicalMaterial* HitMaterial, class AActor* HitActor );
	void SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal );
	void ClientCheckFastSpawnExplode ( );
	void ApplyInheritance ( struct FVector ProjectileDir );
	void InitProjectile ( struct FVector Direction, class UClass* ClassToInherit );
	void Init ( struct FVector Direction );
	int GetMaxDeployedLimit ( );
	void DestroyOldestOverLimit ( );
	void DetonateObsolete ( unsigned long bDetonateFromAOE );
	void eventCreateProjectileLight ( );
	void ClientReceivedProjectileToTether ( );
	void PostBeginPlay ( );
	void ExplodeFromTimeLimit ( );
	void eventPreBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	struct FVector CalculateHitLocation ( class AActor* shooter, struct FVector ShotDirection, struct FVector ShotLocation, float ClampedMaxSpeed );
	void OrientToSlope ( struct FVector HitNormal );
	bool IsBlockedByBlocker ( class AActor* DamageInstigator, class AActor* Target, class AActor* OriginActor, unsigned long CheckWorldGeometry, struct FVector AltOriginLocation );
};

UClass* ATrProjectile::pClassPointer = NULL;

// Class TribesGame.TrProj_Grenade
// 0x0044 (0x0370 - 0x032C)
class ATrProj_Grenade : public ATrProjectile
{
public:
	unsigned long                                      m_bStuckOnPlayer : 1;                             		// 0x032C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bTimedExplosion : 1;                            		// 0x032C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bExplodeOnTouchEvent : 1;                       		// 0x032C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bBounceRequiredForExplode : 1;                  		// 0x032C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bDoRandSpin : 1;                                		// 0x032C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bFullyInheritVelocity : 1;                      		// 0x032C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bScanProxyOnInit : 1;                           		// 0x032C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bSpawnProxyOnInit : 1;                          		// 0x032C (0x0004) [0x0000000000000000] [0x00000080] 
	float                                              m_fExplosionTime;                                 		// 0x0330 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    m_StuckOnTargetEffects;                           		// 0x0334 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             m_StuckOnTargetTemplate;                          		// 0x0338 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_StuckOnPawnLoopingSound;                        		// 0x033C (0x0004) [0x0000000000000000]              
	struct FVector                                     m_OverloadHitNormal;                              		// 0x0340 (0x000C) [0x0000000000000000]              
	float                                              m_fStuckDamageMultiplier;                         		// 0x034C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fStuckMomentumMultiplier;                       		// 0x0350 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ATrCollisionProxy*                           m_CollisionProxy;                                 		// 0x0354 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      m_CollisionProxyClass;                            		// 0x0358 (0x0004) [0x0000000000000000]              
	float                                              m_fProxyDetonationRadius;                         		// 0x035C (0x0004) [0x0000000000000000]              
	float                                              m_fProxyDetonationHeight;                         		// 0x0360 (0x0004) [0x0000000000000000]              
	TArray< class APawn* >                             m_PotentialTargets;                               		// 0x0364 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1587 ];

		return pClassPointer;
	};

	void eventNativeExplode ( struct FVector HitLocation, struct FVector HitNormal );
	void PawnLeftDetonationArea ( class APawn* Other );
	void PawnEnteredDetonationArea ( class APawn* Other );
	void MyOnParticleSystemFinished ( class UParticleSystemComponent* PSC );
	void PlayStuckOnEffects ( );
	bool StickToTarget ( class AActor* Target, struct FVector HitLocation, struct FVector HitNormal );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void PhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void Timer ( );
	void ApplyInheritance ( struct FVector ProjectileDir );
	void ShutDown ( );
	void DestroyCollisionProxy ( );
	void SpawnCollisionProxy ( );
	void InitProjectile ( struct FVector Direction, class UClass* ClassToInherit );
	void PostBeginPlay ( );
};

UClass* ATrProj_Grenade::pClassPointer = NULL;

// Class TribesGame.TrProj_StickyGrenade
// 0x0008 (0x0378 - 0x0370)
class ATrProj_StickyGrenade : public ATrProj_Grenade
{
public:
	unsigned long                                      m_bHasStuckToTarget : 1;                          		// 0x0370 (0x0004) [0x0000000000000000] [0x00000001] 
	class AActor*                                      m_OldBase;                                        		// 0x0374 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1588 ];

		return pClassPointer;
	};

	void eventOnBaseChanged ( );
	bool StickToTarget ( class AActor* Target, struct FVector HitLocation, struct FVector HitNormal );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void PostBeginPlay ( );
};

UClass* ATrProj_StickyGrenade::pClassPointer = NULL;

// Class TribesGame.TrProj_Lacerator
// 0x0030 (0x035C - 0x032C)
class ATrProj_Lacerator : public ATrProjectile
{
public:
	int                                                Bounces;                                          		// 0x032C (0x0004) [0x0000000000000000]              
	float                                              DamageAttenuation;                                		// 0x0330 (0x0004) [0x0000000000000000]              
	float                                              ShrinkTimer;                                      		// 0x0334 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             BounceTemplate;                                   		// 0x0338 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             RockSmokeTemplate;                                		// 0x033C (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    LastImpactEffect;                                 		// 0x0340 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FMaterialSoundEffect                        DefaultHitSound;                                  		// 0x0344 (0x000C) [0x0000000000000000]              
	class USoundCue*                                   HitPawnSound;                                     		// 0x0350 (0x0004) [0x0000000000000000]              
	unsigned long                                      bCheckShortRangeKill : 1;                         		// 0x0354 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShrinking : 1;                                   		// 0x0354 (0x0004) [0x0000000000000000] [0x00000002] 
	class UCameraAnim*                                 ShortRangeKillAnim;                               		// 0x0358 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1589 ];

		return pClassPointer;
	};

	void MyOnParticleSystemFinished ( class UParticleSystemComponent* PSC );
	void StartToShrink ( );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	bool SpawnImpactEffect ( struct FVector HitLocation, struct FVector HitNormal );
	void Landed ( struct FVector HitNormal, class AActor* FloorActor );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	float GetMomentumTransfer ( );
	float GetDamage ( class AActor* Other, struct FVector HitLocation );
	void InternalSpawnFlightEffects ( );
	void SpawnFlightEffects ( );
	void InitProjectile ( struct FVector Direction, class UClass* ClassToInherit );
};

UClass* ATrProj_Lacerator::pClassPointer = NULL;

// Class TribesGame.TrProj_Mine
// 0x0054 (0x0380 - 0x032C)
class ATrProj_Mine : public ATrProjectile
{
public:
	class USoundCue*                                   WallImpactSound;                                  		// 0x032C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bArmed : 1;                                     		// 0x0330 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bUsesDetonationProxy : 1;                       		// 0x0330 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bDrawOwnerName : 1;                             		// 0x0330 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bPostRenderTraceSucceeded : 1;                    		// 0x0330 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bIsPostRendered : 1;                            		// 0x0330 (0x0004) [0x0000000000000000] [0x00000010] 
	float                                              m_fDeploySeconds;                                 		// 0x0334 (0x0004) [0x0000000000000000]              
	float                                              m_fDetonationRadius;                              		// 0x0338 (0x0004) [0x0000000000000000]              
	float                                              m_fDetonationHeight;                              		// 0x033C (0x0004) [0x0000000000000000]              
	class ATrMineCollisionProxy*                       m_CollisionProxy;                                 		// 0x0340 (0x0004) [0x0000000000000000]              
	TArray< class APawn* >                             m_PotentialTargets;                               		// 0x0344 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fMaxFloorZ;                                     		// 0x0350 (0x0004) [0x0000000000000000]              
	int                                                m_nNumBounces;                                    		// 0x0354 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nNumBouncesBeforeDetonateObsolete;              		// 0x0358 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sScreenName;                                    		// 0x035C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              LastPostRenderTraceTime;                          		// 0x0368 (0x0004) [0x0000000000000000]              
	float                                              m_fShowHeaderUntil;                               		// 0x036C (0x0004) [0x0000000000000000]              
	int                                                m_nMarkerOffset;                                  		// 0x0370 (0x0004) [0x0000000000000000]              
	class APlayerReplicationInfo*                      r_OwnerPRI;                                       		// 0x0374 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UMaterialInstanceConstant*                   m_MarkerMIC;                                      		// 0x0378 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nIconStackId;                                   		// 0x037C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1590 ];

		return pClassPointer;
	};

	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	class UTexture2D* GetMarker ( );
	void ShutDown ( );
	void Bounce ( class AActor* Other, struct FVector WallNormal );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventNativeExplode ( struct FVector HitLocation, struct FVector HitNormal );
	void PawnLeftDetonationArea ( class APawn* Other );
	void PawnEnteredDetonationArea ( class APawn* Other );
	void InitProjectile ( struct FVector Direction, class UClass* ClassToInherit );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void TakeRadiusDamage ( class AController* EventInstigator, float BaseDamage, float InDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void ArmedTimer ( );
	void PostBeginPlay ( );
	bool IsAliveAndWell ( );
	void OnPRIReplicated ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ATrProj_Mine::pClassPointer = NULL;

// Class TribesGame.TrProj_Claymore
// 0x0008 (0x0388 - 0x0380)
class ATrProj_Claymore : public ATrProj_Mine
{
public:
	float                                              m_fDetonationAngle;                               		// 0x0380 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fScalarAngle;                                   		// 0x0384 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1591 ];

		return pClassPointer;
	};

	class UTexture2D* GetMarker ( );
	void PawnEnteredDetonationArea ( class APawn* Other );
	void SetExplosionEffectParameters ( class UParticleSystemComponent* ProjExplosion );
	void InitProjectile ( struct FVector Direction, class UClass* ClassToInherit );
};

UClass* ATrProj_Claymore::pClassPointer = NULL;

// Class TribesGame.TrProj_PrismMine
// 0x0030 (0x03B0 - 0x0380)
class ATrProj_PrismMine : public ATrProj_Mine
{
public:
	struct FPointer                                    VfTable_IInterface_TrTripNotifier;                		// 0x0380 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class ATrTripActor*                                m_TripActor;                                      		// 0x0384 (0x0004) [0x0000000000000000]              
	float                                              m_fTripDistance;                                  		// 0x0388 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             m_LaserTemplate;                                  		// 0x038C (0x0004) [0x0000000000000000]              
	struct FName                                       m_nSocketTraceName;                               		// 0x0390 (0x0008) [0x0000000000000000]              
	struct FVector                                     r_vLeftHit;                                       		// 0x0398 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     r_vRightHit;                                      		// 0x03A4 (0x000C) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1592 ];

		return pClassPointer;
	};

	void RemoveTripActor ( class ATrTripActor* RemoveTrip );
	void AddTripActor ( class ATrTripActor* NewTrip );
	void eventOnTripSleep ( );
	void eventOnTripAwake ( );
	bool eventGetTripSocketPosition ( unsigned long bIsLeft, struct FVector* SocketPosition );
	class UParticleSystem* GetParticleSystemName ( );
	void TripActivated ( class APawn* Other, struct FVector ActivateLocation, class ATrTripActor* TripActor );
	void CreateTripActor ( );
	void ShutDown ( );
	void ArmedTimer ( );
	void InitProjectile ( struct FVector Direction, class UClass* ClassToInherit );
	void PawnEnteredDetonationArea ( class APawn* Other );
};

UClass* ATrProj_PrismMine::pClassPointer = NULL;

// Class TribesGame.TrProj_RepairDeployable
// 0x0034 (0x03B4 - 0x0380)
class ATrProj_RepairDeployable : public ATrProj_Mine
{
public:
	float                                              m_fCheckNearbyActorsFrequency;                    		// 0x0380 (0x0004) [0x0000000000000000]              
	float                                              m_fRepairRadius;                                  		// 0x0384 (0x0004) [0x0000000000000000]              
	float                                              m_fRepairBuff;                                    		// 0x0388 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRepairPercentage;                              		// 0x038C (0x0004) [0x0000000000000000]              
	float                                              m_fVehicleRepairPercentage;                       		// 0x0390 (0x0004) [0x0000000000000000]              
	TArray< class AActor* >                            ActorsToRepair;                                   		// 0x0394 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UParticleSystemComponent* >          RepairBeams;                                      		// 0x03A0 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class USoundCue*                                   RepairBeamSound;                                  		// 0x03AC (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             RepairBeamAC;                                     		// 0x03B0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1593 ];

		return pClassPointer;
	};

	void DetonateObsolete ( unsigned long bDetonateFromDamage );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void CheckRepair ( );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void ArmedTimer ( );
	void InitProjectile ( struct FVector Direction, class UClass* ClassToInherit );
	void PostBeginPlay ( );
};

UClass* ATrProj_RepairDeployable::pClassPointer = NULL;

// Class TribesGame.TrProj_ThrowDeployable
// 0x0004 (0x0384 - 0x0380)
class ATrProj_ThrowDeployable : public ATrProj_Mine
{
public:
	class UClass*                                      m_DeployableToSpawn;                              		// 0x0380 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1594 ];

		return pClassPointer;
	};

	void ArmedTimer ( );
	int GetMaxDeployedLimit ( );
	void DestroyOldestOverLimit ( );
	class ATrDeployable* SpawnDeployable ( );
};

UClass* ATrProj_ThrowDeployable::pClassPointer = NULL;

// Class TribesGame.TrProj_TrackingMissile
// 0x0048 (0x0374 - 0x032C)
class ATrProj_TrackingMissile : public ATrProjectile
{
public:
	unsigned char                                      m_MissileStage;                                   		// 0x032C (0x0001) [0x0000000000000000]              
	unsigned long                                      m_bHasBentToTarget : 1;                           		// 0x0330 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bLostTightHoming : 1;                           		// 0x0330 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              m_fLOSDelay;                                      		// 0x0334 (0x0004) [0x0000000000000000]              
	float                                              m_fTrackingDelay;                                 		// 0x0338 (0x0004) [0x0000000000000000]              
	float                                              m_fTrackingTime;                                  		// 0x033C (0x0004) [0x0000000000000000]              
	float                                              m_fAdjustingForGoodLOSAccelRate;                  		// 0x0340 (0x0004) [0x0000000000000000]              
	float                                              m_fIdealHeightAboveTargetForGoodLOS;              		// 0x0344 (0x0004) [0x0000000000000000]              
	float                                              m_fMinHeightGainForGoodLOS;                       		// 0x0348 (0x0004) [0x0000000000000000]              
	class UStaticMeshComponent*                        m_ProjectileMesh;                                 		// 0x034C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_fInitialLocationZ;                              		// 0x0350 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vLastKnownTargetLocation;                       		// 0x0354 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fStage1MinGroundDist;                           		// 0x0360 (0x0004) [0x0000000000000000]              
	struct FRotator                                    m_MissileCaratRotation;                           		// 0x0364 (0x000C) [0x0000000000000000]              
	float                                              m_fLoseTightTrackingDistance;                     		// 0x0370 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1595 ];

		return pClassPointer;
	};

	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void eventTick ( float DeltaTime );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void SpawnFlightEffectsTimer ( );
	void SpawnFlightEffects ( );
	class ATrSeekingMissileManager* GetSeekingMissileManager ( );
	void eventDestroyed ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void OnExploded ( );
	void eventNativeExplode ( struct FVector HitLocation, struct FVector HitNormal );
	void SetSeekTarget ( class AActor* NewSeekTarget );
	void EnableCollisionTimer ( );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void Init ( struct FVector Direction );
	void PostBeginPlay ( );
};

UClass* ATrProj_TrackingMissile::pClassPointer = NULL;

// Class TribesGame.TrQueueManager
// 0x0164 (0x01A0 - 0x003C)
class UTrQueueManager : public UObject
{
public:
	int                                                queueId;                                          		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                MapSlots[ 0x8 ];                                  		// 0x0040 (0x0020) [0x0000000000000000]              
	int                                                GameTypeId;                                       		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                ProfileIndex;                                     		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                ServerIndex;                                      		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                PasswordIndex;                                    		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                PasswordQueue;                                    		// 0x0070 (0x0004) [0x0000000000000000]              
	TArray< int >                                      RegionFilter;                                     		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bQueued : 1;                                      		// 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNeedPassword : 1;                                		// 0x0080 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bJoiningCustom : 1;                               		// 0x0080 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bFilterOwner : 1;                                 		// 0x0080 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bMapSort : 1;                                     		// 0x0080 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bNameSort : 1;                                    		// 0x0080 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bPingSort : 1;                                    		// 0x0080 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bTypeSort : 1;                                    		// 0x0080 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bRulesSort : 1;                                   		// 0x0080 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bRangeSort : 1;                                   		// 0x0080 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bSlotsSort : 1;                                   		// 0x0080 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bPasswordSort : 1;                                		// 0x0080 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bFavoriteSort : 1;                                		// 0x0080 (0x0004) [0x0000000000000000] [0x00001000] 
	struct FString                                     QueueFriend;                                      		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlineGameInterfaceMcts*                    OnlineGameMcts;                                   		// 0x0090 (0x0004) [0x0000000000000000]              
	class UGFxTrMenuMoviePlayer*                       TrOuter;                                          		// 0x0094 (0x0004) [0x0000000000000000]              
	TArray< struct FServerInfo >                       ServerInfoList;                                   		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FServerConfig >                     RentedServers;                                    		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRentalItem >                       RentalItems;                                      		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPropertyPair >                     FilteredGameTypes;                                		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __MapSortA__Delegate;                             		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NameSortA__Delegate;                            		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __PingSortA__Delegate;                            		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __TypeSortA__Delegate;                            		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __RulesSortA__Delegate;                           		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __RangeSortA__Delegate;                           		// 0x0104 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SlotsSortA__Delegate;                           		// 0x0110 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __PasswordSortA__Delegate;                        		// 0x011C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __FavoriteSortA__Delegate;                        		// 0x0128 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __MapSortB__Delegate;                             		// 0x0134 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NameSortB__Delegate;                            		// 0x0140 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __PingSortB__Delegate;                            		// 0x014C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __TypeSortB__Delegate;                            		// 0x0158 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __RulesSortB__Delegate;                           		// 0x0164 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __RangeSortB__Delegate;                           		// 0x0170 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SlotsSortB__Delegate;                           		// 0x017C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __PasswordSortB__Delegate;                        		// 0x0188 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __FavoriteSortB__Delegate;                        		// 0x0194 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1596 ];

		return pClassPointer;
	};

	bool IsGameTypeFiltered ( int Id );
	void FilterGameType ( int Id, unsigned long bFilter );
	void eventMarkFavorite ( int Index );
	int GetDefaultMapId ( );
	void ResetRotation ( );
	void eventAddProfileConfig ( int Index, struct FProfileConfig Data );
	void eventAddServerConfig ( int MatchQueueId );
	struct FString GetServerRotationName ( );
	struct FString GetServerGameTypeName ( int Index );
	struct FString GetServerTimeFormat ( );
	int GetServerTime ( );
	bool AmServerOwner ( );
	bool GetServerExpired ( );
	bool GetServerOnline ( int Index );
	struct FString GetServerName ( int Index );
	int GetProfileRegion ( );
	int GetProfileRotation ( );
	int GetProfileGameType ( );
	struct FString GetPublicPassword ( );
	struct FString GetAdminPassword ( );
	struct FString GetProfileDesc ( );
	struct FString GetProfileName ( );
	int GetQueueCaseId ( );
	int GetGameCaseId ( );
	int GetSlots ( );
	int FavoriteSortB ( struct FServerInfo A, struct FServerInfo B );
	int PasswordSortB ( struct FServerInfo A, struct FServerInfo B );
	int SlotsSortB ( struct FServerInfo A, struct FServerInfo B );
	int RangeSortB ( struct FServerInfo A, struct FServerInfo B );
	int RulesSortB ( struct FServerInfo A, struct FServerInfo B );
	int TypeSortB ( struct FServerInfo A, struct FServerInfo B );
	int PingSortB ( struct FServerInfo A, struct FServerInfo B );
	int NameSortB ( struct FServerInfo A, struct FServerInfo B );
	int MapSortB ( struct FServerInfo A, struct FServerInfo B );
	int FavoriteSortA ( struct FServerInfo A, struct FServerInfo B );
	int PasswordSortA ( struct FServerInfo A, struct FServerInfo B );
	int SlotsSortA ( struct FServerInfo A, struct FServerInfo B );
	int RangeSortA ( struct FServerInfo A, struct FServerInfo B );
	int RulesSortA ( struct FServerInfo A, struct FServerInfo B );
	int TypeSortA ( struct FServerInfo A, struct FServerInfo B );
	int PingSortA ( struct FServerInfo A, struct FServerInfo B );
	int NameSortA ( struct FServerInfo A, struct FServerInfo B );
	int MapSortA ( struct FServerInfo A, struct FServerInfo B );
	void SortOn ( struct FString SortName );
	void ServerSort ( struct FString SortName );
	void ServerPage ( int Index );
	void SetActiveServer ( int Index );
	void PasswordServer ( int Index );
	void FavoriteServer ( int Index );
	void JoinProtectedServer ( struct FString Password );
	void JoinCustomServer ( int Index );
	void eventServerInfoLoaded ( );
	void eventExitGameInProgress ( unsigned long bForceDrop, unsigned long bKicked );
	void JoinFriend ( struct FString PlayerName, struct FString Password );
	struct FString GetStatus ( );
	void eventSetPlayerQueued ( );
	void JoinQueue ( int nQueueId );
	void LeaveMatchmaking ( unsigned long bForced );
	void Initialize ( );
	bool MatchQueueJoin ( int Queue, struct FString Password );
	bool CustomSetName ( struct FString QueueName );
	bool CustomBan ( struct FString PlayerName );
	bool CustomKick ( struct FString PlayerName );
	bool CustomNextMap ( int MapId );
	bool CustomShutdown ( );
	bool CustomStop ( );
	bool CustomStart ( );
	bool CustomLogin ( struct FString Password );
	bool GetPropMax ( int PropId, int PropType, int* val );
	bool GetPropMin ( int PropId, int PropType, int* val );
	bool AddCustomServerTime ( int LootId );
	bool AddCustomServer ( );
	bool SetLocalName ( struct FString val );
	bool SetPropString ( int PropId, struct FString val, int PropType );
	bool SetPropNumber ( int PropId, int val, int PropType );
	struct FString GetPropString ( int PropId, int PropType );
	int GetPropNumber ( int PropId, int PropType );
	bool GetNextMapId ( unsigned long bStart, int* MapId );
	struct FString GetMapName ( int MapId );
	void RefreshRentedServers ( );
	void RequestCustomServers ( );
	void GetCustomServers ( );
	void OpenLocal ( struct FString URL );
	void ForceGoHome ( );
};

UClass* UTrQueueManager::pClassPointer = NULL;

// Class TribesGame.TrRegionSettings
// 0x0014 (0x008C - 0x0078)
class UTrRegionSettings : public UGFxObject
{
public:
	int                                                m_RegionSettingsCount;                            		// 0x0078 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  m_RegionSettingsList;                             		// 0x007C (0x0004) [0x0000000000000000]              
	TArray< struct FPropertyInfo >                     AvailableRegions;                                 		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1597 ];

		return pClassPointer;
	};

	void AddSetting ( struct FName RegionName, int Id );
	void eventAddRegion ( struct FString RegionName, int Id, unsigned long bCustomOnly );
	void SetPreferredRegion ( int Index );
	struct FString GetRegionName ( int siteId );
	int GetRegionIdAtIndex ( int Index );
	struct FString LoadRegionSetting ( );
	void LoadRegionLabels ( class UGFxObject* List );
	void SetPreferredSiteId ( int siteId );
	int GetPreferredSiteId ( );
	void LoadRegions ( );
};

UClass* UTrRegionSettings::pClassPointer = NULL;

// Class TribesGame.TrServerSettingsInfo
// 0x00D0 (0x02AC - 0x01DC)
class ATrServerSettingsInfo : public AInfo
{
public:
	int                                                TimeLimit;                                        		// 0x01DC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                WarmupTime;                                       		// 0x01E0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ScoreLimit;                                       		// 0x01E4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                MaxPlayers;                                       		// 0x01E8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ArenaRounds;                                      		// 0x01EC (0x0004) [0x0000000000000000]              
	int                                                RespawnTime;                                      		// 0x01F0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                OvertimeLimit;                                    		// 0x01F4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                TeamAssignType;                                   		// 0x01F8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                BaseDestructionLimit;                             		// 0x01FC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                FFKillLimit;                                      		// 0x0200 (0x0004) [0x0000000000000000]              
	int                                                FFDamageLimit;                                    		// 0x0204 (0x0004) [0x0000000000000000]              
	int                                                SpawnType;                                        		// 0x0208 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bFriendlyFire : 1;                                		// 0x020C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bAutoBalanceInGame : 1;                           		// 0x020C (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bObjectiveUpgrades : 1;                           		// 0x020C (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bPoweredDeployables : 1;                          		// 0x020C (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      bGeneratorAutoRegen : 1;                          		// 0x020C (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      bPreplacedObjectives : 1;                         		// 0x020C (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	unsigned long                                      bGenDestroyable : 1;                              		// 0x020C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bFriendlyFireBaseAssets : 1;                      		// 0x020C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bFriendlyFireDeployables : 1;                     		// 0x020C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bSupplyDropAmmoOnly : 1;                          		// 0x020C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bPoweredCallins : 1;                              		// 0x020C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bTeamCredits : 1;                                 		// 0x020C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bSkiEnabled : 1;                                  		// 0x020C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bCTFBlitzAllFlagsMove : 1;                        		// 0x020C (0x0004) [0x0000000000000000] [0x00002000] 
	int                                                GameScores[ 0x5 ];                                		// 0x0210 (0x0014) [0x0000000000000000]              
	int                                                ClassCounts[ 0x9 ];                               		// 0x0224 (0x0024) [0x0000000000000020]              ( CPF_Net )
	int                                                VehicleLimits[ 0x5 ];                             		// 0x0248 (0x0014) [0x0000000000000020]              ( CPF_Net )
	int                                                VehiclePrices[ 0x5 ];                             		// 0x025C (0x0014) [0x0000000000000020]              ( CPF_Net )
	int                                                CallinsDenied;                                    		// 0x0270 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CallinPrices[ 0x3 ];                              		// 0x0274 (0x000C) [0x0000000000000020]              ( CPF_Net )
	int                                                CallinCooldowns[ 0x3 ];                           		// 0x0280 (0x000C) [0x0000000000000020]              ( CPF_Net )
	float                                              CallinBuildups[ 0x3 ];                            		// 0x028C (0x000C) [0x0000000000000020]              ( CPF_Net )
	float                                              fFriendlyFireDamageMultiplier;                    		// 0x0298 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              fVehicleHealthMultiplier;                         		// 0x029C (0x0004) [0x0000000000000000]              
	float                                              fEnergyMultiplier;                                		// 0x02A0 (0x0004) [0x0000000000000000]              
	float                                              fAoESizeMultiplier;                               		// 0x02A4 (0x0004) [0x0000000000000000]              
	float                                              fAoEDamageMultiplier;                             		// 0x02A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1598 ];

		return pClassPointer;
	};

	int GetClassCount ( unsigned char ClassType );
	bool IsClassAllowed ( unsigned char ClassType, int CurrentCount );
	bool IsCallinAllowed ( int Index );
	int GetVehicleLimit ( int Index );
	void eventLoadServerSettings ( );
	void ApplyServerSettings ( );
	bool GetPropAsString ( int PropId, struct FString* Value );
	bool GetPropAsInt ( int PropId, int* Value );
	bool GetPropAsFloat ( int PropId, float* Value );
};

UClass* ATrServerSettingsInfo::pClassPointer = NULL;

// Class TribesGame.TrSkelControl_SpinControl
// 0x0030 (0x011C - 0x00EC)
class UTrSkelControl_SpinControl : public USkelControlSingleBone
{
public:
	float                                              m_fDegreesPerSecond;                              		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vAxis;                                          		// 0x00F0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_PreviewStartStop : 1;                           		// 0x00FC (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned long                                      m_bIsSpinning : 1;                                		// 0x00FC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bSpinningUp : 1;                                		// 0x00FC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bSpinningDown : 1;                              		// 0x00FC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bRotateToTargetRotation : 1;                    		// 0x00FC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	float                                              m_fSpinUpTime;                                    		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSpinDownTime;                                  		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCurrentDegreesPerSecond;                       		// 0x0108 (0x0004) [0x0000000000000000]              
	struct FRotator                                    m_TargetRotation;                                 		// 0x010C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_TimeToInterpToTargetRotation;                   		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1599 ];

		return pClassPointer;
	};

	void SpinToTargetRotation ( struct FRotator TargetRotation, float Time, unsigned long bReset );
	void Spin ( unsigned long bEnabled );
};

UClass* UTrSkelControl_SpinControl::pClassPointer = NULL;

// Class TribesGame.TrSkelControl_Suspension
// 0x0034 (0x0120 - 0x00EC)
class UTrSkelControl_Suspension : public USkelControlSingleBone
{
public:
	unsigned long                                      m_bApplyRotation : 1;                             		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bApplyTranslation : 1;                          		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              TransIgnore;                                      		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TransScale;                                       		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TransOffset;                                      		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxTrans;                                         		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinTrans;                                         		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotIgnore;                                        		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotScale;                                         		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRot;                                           		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinRot;                                           		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRotRate;                                       		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentRot;                                       		// 0x0118 (0x0004) [0x0000000000000000]              
	int                                                WheelIndex;                                       		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1600 ];

		return pClassPointer;
	};

};

UClass* UTrSkelControl_Suspension::pClassPointer = NULL;

// Class TribesGame.TrSkelControlFootPlacement_CCD
// 0x0040 (0x0144 - 0x0104)
class UTrSkelControlFootPlacement_CCD : public USkelControl_CCD_IK
{
public:
	float                                              FootOffset;                                       		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FootUpAxis;                                       		// 0x0108 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    FootRotOffset;                                    		// 0x010C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertFootUpAxis : 1;                            		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOrientFootToGround : 1;                          		// 0x0118 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnlyEnableForUpAdjustment : 1;                   		// 0x0118 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bFootOnGroundLastTick : 1;                        		// 0x0118 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	float                                              MaxUpAdjustment;                                  		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDownAdjustment;                                		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFootOrientAdjust;                              		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FootOrientInterpSpeed;                            		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FootUpDirLastTick;                                		// 0x012C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              OnContactFootAdjustInterpSpeed;                   		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffContactFootAdjustInterpSpeed;                  		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FootAdjustHeightLastTick;                         		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1601 ];

		return pClassPointer;
	};

};

UClass* UTrSkelControlFootPlacement_CCD::pClassPointer = NULL;

// Class TribesGame.TrSkeletalMeshComponent
// 0x000F (0x05F4 - 0x05E5)
class UTrSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	float                                              m_fFOV;                                           		// 0x05E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      m_bForceLoadTextures : 1;                         		// 0x05EC (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              m_fClearStreamingTime;                            		// 0x05F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1602 ];

		return pClassPointer;
	};

	void SetFOV ( float NewFOV );
	void eventPreloadTextures ( unsigned long bForcePreload, float ClearTime );
};

UClass* UTrSkeletalMeshComponent::pClassPointer = NULL;

// Class TribesGame.TrSpottedTarget
// 0x0024 (0x0200 - 0x01DC)
class ATrSpottedTarget : public AActor
{
public:
	class AActor*                                      m_SpottedActor;                                   		// 0x01DC (0x0004) [0x0000000000000000]              
	unsigned char                                      m_CachedTeamIndex;                                		// 0x01E0 (0x0001) [0x0000000000000000]              
	float                                              m_fLastSpottedTimestamp;                          		// 0x01E4 (0x0004) [0x0000000000000000]              
	float                                              m_fMarkerZOffset;                                 		// 0x01E8 (0x0004) [0x0000000000000000]              
	float                                              m_fMarkerOpacity;                                 		// 0x01EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSpottedActorDuration;                          		// 0x01F0 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_MarkerMIC;                                      		// 0x01F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   m_MarkerSize;                                     		// 0x01F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1603 ];

		return pClassPointer;
	};

	struct FLinearColor GetMarkerColor ( );
	class UTexture2D* GetMarker ( );
	bool ShouldRenderMarker ( );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void SetSpottedActor ( class AActor* NewSpottedActor );
	void PostBeginPlay ( );
};

UClass* ATrSpottedTarget::pClassPointer = NULL;

// Class TribesGame.TrSpottedTarget_MotionMine
// 0x0008 (0x0208 - 0x0200)
class ATrSpottedTarget_MotionMine : public ATrSpottedTarget
{
public:
	float                                              m_fCurrentMarkerTime;                             		// 0x0200 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMarkerBlinkSpeed;                              		// 0x0204 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1604 ];

		return pClassPointer;
	};

	bool ShouldRenderMarker ( );
	struct FLinearColor GetMarkerColor ( );
	class UTexture2D* GetMarker ( );
	void eventTick ( float DeltaTime );
};

UClass* ATrSpottedTarget_MotionMine::pClassPointer = NULL;

// Class TribesGame.TrStatsInterface
// 0x0000 (0x003C - 0x003C)
class UTrStatsInterface : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1605 ];

		return pClassPointer;
	};

	void Flush ( );
	void GameEnd ( );
	void WritePlayerStats ( TArray< class APlayerReplicationInfo* > PRIArray );
	void WriteMatchStats ( );
	void AddGeneratorDestruction ( );
	void AddVehicleSpawn ( );
	void TrackPlayerMovement ( class ATrPlayerController* PC, int TimeStamp );
	void BaseUpgrade ( class ATrPlayerController* PC );
	void SkiSpeed ( class ATrPlayerController* PC, int Speed );
	void InvStationVisited ( class ATrPlayerController* PC );
	void VEHICLEKILL ( class ATrPlayerController* PC );
	void FlagGrabSpeed ( class ATrPlayerController* PC, int Speed );
	void RegeneratedToFull ( class ATrPlayerController* PC );
	void CallInKill ( class ATrPlayerController* PC );
	void CallIn ( class ATrPlayerController* PC );
	void BeltKill ( class ATrPlayerController* PC );
	void SkiDistance ( class ATrPlayerController* PC, int Distance );
	void FallingDeath ( class ATrPlayerController* PC );
	void SetDistanceHeadshot ( class ATrPlayerController* PC, int val );
	void SetSpeedFlagGrab ( class ATrPlayerController* PC, int val );
	void AddDistanceSkied ( class ATrPlayerController* PC, int val );
	void AddCreditsEarned ( class ATrPlayerController* PC, int val );
	void SetSpeedFlagCap ( class ATrPlayerController* PC, int val );
	void SetDistanceKill ( class ATrPlayerController* PC, int val );
	void AddCreditsSpent ( class ATrPlayerController* PC, int val );
	void AddDeployableDestruction ( class ATrPlayerController* PC );
	void SetSpeedSkied ( class ATrPlayerController* PC, int val );
	void AddVehicleDestruction ( class ATrPlayerController* PC );
	void SetTeam ( class ATrPlayerController* PC, int TeamNum );
	void SetXP ( class ATrPlayerController* PC, int val );
	void AddVehicleKill ( class ATrPlayerController* PC );
	void AddMidairKill ( class ATrPlayerController* PC );
	void AddFlagReturn ( class ATrPlayerController* PC );
	void AddFlagGrab ( class ATrPlayerController* PC );
	void AddFlagCap ( class ATrPlayerController* PC );
	void AddRepair ( class ATrPlayerController* PC );
	void SetActiveClass ( class ATrPlayerController* PC, int ClassId );
	void SetIdentification ( class ATrPlayerController* PC );
	void UpdateDamage ( class ATrPlayerController* PC, int WeaponId, int Amount, int Dist, unsigned long bKill, unsigned long bVehicle );
	void UpdateWeapon ( class ATrPlayerController* PC, int WeaponId, int ActivityId, int ShotsFired, int TimeUsed );
	void UpdateTimePlayed ( class ATrPlayerController* PC, int TimeUsed );
	void AddCredits ( class ATrPlayerController* PC, int val, unsigned long bSpent, unsigned long bFree );
	void AddAccolade ( class ATrPlayerController* PC, int Id, int ActivityId );
	void AddAssist ( class ATrPlayerController* PC );
	void AddDeath ( class ATrPlayerController* PC );
	void AddKill ( class ATrPlayerController* PC );
	void Initialize ( class UOnlineSubsystem* Sub );
};

UClass* UTrStatsInterface::pClassPointer = NULL;

// Class TribesGame.TrStreamManager
// 0x0080 (0x00BC - 0x003C)
class UTrStreamManager : public UObject
{
public:
	unsigned long                                      bUpdateReady : 1;                                 		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                NewsIndex;                                        		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FString                                     TokName;                                          		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TokTitle;                                         		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TokViewers;                                       		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     WatchStart;                                       		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     WatchEnd;                                         		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     StreamURL;                                        		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     StreamPath;                                       		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     StreamServer;                                     		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FGameStream >                       Streams;                                          		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ViewerSort__Delegate;                           		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1606 ];

		return pClassPointer;
	};

	struct FString GetFeatureDescription ( int Count );
	struct FString GetFeatureName ( int Count );
	bool HaveFeature ( );
	bool IsLiveAtIndex ( int Index );
	struct FString GetDescriptionAtIndex ( int Index );
	struct FString GetViewersAtIndex ( int Index );
	struct FString GetTitleAtIndex ( int Index );
	bool IsStream ( int Index );
	int GetTypeCountWatching ( unsigned char Type );
	int GetTypeCount ( unsigned char Type );
	int ViewerSort ( struct FGameStream A, struct FGameStream B );
	void eventCompleteUpdate ( );
	void GetLatestNews ( );
	void CheckForUpdate ( unsigned long bRunIfReady );
	void eventUpdateStreams ( unsigned long bForce );
	void StartTVTimer ( );
	void ViewVideoIndex ( int Index );
	void ViewStreamIndex ( int Index );
	void Initialize ( );
	void OpenStream ( struct FString URL );
	void GetStreamData ( );
	void LoadStreams ( );
};

UClass* UTrStreamManager::pClassPointer = NULL;

// Class TribesGame.TrStrings
// 0x10A4 (0x10E0 - 0x003C)
class UTrStrings : public UObject
{
public:
	struct FString                                     Loading;                                          		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Quit;                                             		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     QuitGameBody;                                     		// 0x0054 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BACK;                                             		// 0x0060 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Leave;                                            		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LeaveMatchBody;                                   		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Cancel;                                           		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FailedToJoin;                                     		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OK;                                               		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LostConn;                                         		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LostConnBody;                                     		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Status;                                           		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Active;                                           		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrClass;                                          		// 0x00D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoBoost;                                          		// 0x00E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OneDayleft;                                       		// 0x00F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DaysLeft;                                         		// 0x00FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HoursLeft;                                        		// 0x0108 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Unlocked;                                         		// 0x0114 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Acquired;                                         		// 0x0120 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Complete;                                         		// 0x012C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BecomeVIP;                                        		// 0x0138 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     YouWereKickedBody;                                		// 0x0144 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AlreadyFriendsBody;                               		// 0x0150 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NotEnoguhGoldBody;                                		// 0x015C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VIPMessage;                                       		// 0x0168 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BoostMessage;                                     		// 0x0174 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EarnMoreXP;                                       		// 0x0180 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BundleRequiresBody;                               		// 0x018C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BundleOwnedBody;                                  		// 0x0198 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SpawnLimitReached;                                		// 0x01A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrClassBanned;                                    		// 0x01B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChangeBindingBody;                                		// 0x01BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CreateNewServerBody;                              		// 0x01C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnableServerBody;                                 		// 0x01D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ServerExpiredBody;                                		// 0x01E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DisableServerBody;                                		// 0x01EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KillServerBody;                                   		// 0x01F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GoToNextMapBody;                                  		// 0x0204 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KickPlayerBody;                                   		// 0x0210 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BanPlayerBody;                                    		// 0x021C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ResolutionChangeBody;                             		// 0x0228 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NameAlreadyTaken;                                 		// 0x0234 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Failure;                                          		// 0x0240 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CodeNotAccepted;                                  		// 0x024C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Transaction;                                      		// 0x0258 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Failed;                                           		// 0x0264 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Friend;                                           		// 0x0270 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Added;                                            		// 0x027C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Password;                                         		// 0x0288 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Required;                                         		// 0x0294 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ServerPasswordBody;                               		// 0x02A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Purchasing;                                       		// 0x02AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Item;                                             		// 0x02B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Items;                                            		// 0x02C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Login;                                            		// 0x02D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     YouWereKicked;                                    		// 0x02DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrServer;                                         		// 0x02E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrServers;                                        		// 0x02F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Redeemed;                                         		// 0x0300 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FWOTD;                                            		// 0x030C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Time;                                             		// 0x0318 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VIP;                                              		// 0x0324 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Left;                                             		// 0x0330 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrNew;                                            		// 0x033C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Error;                                            		// 0x0348 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Teammate;                                         		// 0x0354 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BackToGame;                                       		// 0x0360 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NameNotAllowed;                                   		// 0x036C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NotEnough;                                        		// 0x0378 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Gold;                                             		// 0x0384 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XP;                                               		// 0x0390 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     YouAdded;                                         		// 0x039C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PleaseWait;                                       		// 0x03A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Full;                                             		// 0x03B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Limit;                                            		// 0x03C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Reached;                                          		// 0x03CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnterGamerName;                                   		// 0x03D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NotEnoughGoldBody;                                		// 0x03E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AsAFriend;                                        		// 0x03F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Estimated;                                        		// 0x03FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Wait;                                             		// 0x0408 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Unlock;                                           		// 0x0414 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Mastered;                                         		// 0x0420 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Enter;                                            		// 0x042C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Visit;                                            		// 0x0438 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Store;                                            		// 0x0444 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Already;                                          		// 0x0450 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Friends;                                          		// 0x045C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OverAnHour;                                       		// 0x0468 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Available;                                        		// 0x0474 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Locked;                                           		// 0x0480 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Exit;                                             		// 0x048C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Game;                                             		// 0x0498 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrHour;                                           		// 0x04A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrHours;                                          		// 0x04B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrMinute;                                         		// 0x04BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrMinutes;                                        		// 0x04C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrMinutesAbb;                                     		// 0x04D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrMinutesInitial;                                 		// 0x04E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrSecond;                                         		// 0x04EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrSeconds;                                        		// 0x04F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrSecondsAbb;                                     		// 0x0504 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Upgrade;                                          		// 0x0510 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BecomeAVIP;                                       		// 0x051C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Accolades;                                        		// 0x0528 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SetAudioLevel;                                    		// 0x0534 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Off;                                              		// 0x0540 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Enable;                                           		// 0x054C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Enabled;                                          		// 0x0558 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Completed;                                        		// 0x0564 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Badges;                                           		// 0x0570 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Requires;                                         		// 0x057C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BundlePack;                                       		// 0x0588 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Buy;                                              		// 0x0594 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Remove;                                           		// 0x05A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Loadout;                                          		// 0x05AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Or;                                               		// 0x05B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoInfoFound;                                      		// 0x05C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Denied;                                           		// 0x05D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Modify;                                           		// 0x05DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Change;                                           		// 0x05E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     All;                                              		// 0x05F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CustomServerBrowser;                              		// 0x0600 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     JoiningServer;                                    		// 0x060C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Message;                                          		// 0x0618 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Ratings;                                          		// 0x0624 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Upgrades;                                         		// 0x0630 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UpgradeDesc;                                      		// 0x063C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Lvl;                                              		// 0x0648 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CodeAccepted;                                     		// 0x0654 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnterCode;                                        		// 0x0660 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Team;                                             		// 0x066C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Shown;                                            		// 0x0678 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Visible;                                          		// 0x0684 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Set;                                              		// 0x0690 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Edit;                                             		// 0x069C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CreateNewServer;                                  		// 0x06A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SelectToAddMap;                                   		// 0x06B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AvailableAtLevel;                                 		// 0x06C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Earned;                                           		// 0x06CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Accept;                                           		// 0x06D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Disable;                                          		// 0x06E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Disabled;                                         		// 0x06F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NotEarned;                                        		// 0x06FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Bundle;                                           		// 0x0708 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Purchase;                                         		// 0x0714 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Map;                                              		// 0x0720 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Primary;                                          		// 0x072C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Secondary;                                        		// 0x0738 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Belt;                                             		// 0x0744 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Pack;                                             		// 0x0750 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Perk;                                             		// 0x075C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Use;                                              		// 0x0768 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FOV;                                              		// 0x0774 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MeAndFriends;                                     		// 0x0780 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Page;                                             		// 0x078C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AttemptingToJoin;                                 		// 0x0798 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Damage;                                           		// 0x07A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Owned;                                            		// 0x07B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Base;                                             		// 0x07BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Offline;                                          		// 0x07C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Online;                                           		// 0x07D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Select;                                           		// 0x07E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Hidden;                                           		// 0x07EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrClasses;                                        		// 0x07F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrHoursInitial;                                   		// 0x0804 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrNone;                                           		// 0x0810 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Overview;                                         		// 0x081C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Player;                                           		// 0x0828 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Join;                                             		// 0x0834 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Kill;                                             		// 0x0840 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Add;                                              		// 0x084C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AddRentalTimeToThisServer;                        		// 0x0858 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OutOfBounds;                                      		// 0x0864 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Banned;                                           		// 0x0870 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Category;                                         		// 0x087C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrFor;                                            		// 0x0888 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AllItemsOwned;                                    		// 0x0894 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SelectTo;                                         		// 0x08A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AreYouSureYouWantTo;                              		// 0x08AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Sensitivity;                                      		// 0x08B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FavoriteInitial;                                  		// 0x08C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SetMapName;                                       		// 0x08D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Radius;                                           		// 0x08DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChooseYourTeam;                                   		// 0x08E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Unlocks;                                          		// 0x08F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SelectToManage;                                   		// 0x0900 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Level;                                            		// 0x090C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TeamDeathmatch;                                   		// 0x0918 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GoToNextMap;                                      		// 0x0924 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ValueMustBeWithin;                                		// 0x0930 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Only;                                             		// 0x093C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Free;                                             		// 0x0948 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrLocal;                                          		// 0x0954 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrName;                                           		// 0x0960 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Players;                                          		// 0x096C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PerTeam;                                          		// 0x0978 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Bundles;                                          		// 0x0984 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Recommended;                                      		// 0x0990 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Credits;                                          		// 0x099C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Confirm;                                          		// 0x09A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Resolutions;                                      		// 0x09B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PasswordInitial;                                  		// 0x09C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Filter;                                           		// 0x09CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FireRate;                                         		// 0x09D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrSpawn;                                          		// 0x09E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Follower;                                         		// 0x09F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Account;                                          		// 0x09FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CaptureTheFlag;                                   		// 0x0A08 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Kick;                                             		// 0x0A14 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     And;                                              		// 0x0A20 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrDefault;                                        		// 0x0A2C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Balanced;                                         		// 0x0A38 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Of;                                               		// 0x0A44 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChangeNameTo;                                     		// 0x0A50 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Resolution;                                       		// 0x0A5C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Other;                                            		// 0x0A68 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Slots;                                            		// 0x0A74 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClipSize;                                         		// 0x0A80 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ToSpawn;                                          		// 0x0A8C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Followers;                                        		// 0x0A98 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Played;                                           		// 0x0AA4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Not;                                              		// 0x0AB0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Rabbit;                                           		// 0x0ABC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Ban;                                              		// 0x0AC8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Total;                                            		// 0x0AD4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Price;                                            		// 0x0AE0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Value;                                            		// 0x0AEC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Score;                                            		// 0x0AF8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Display;                                          		// 0x0B04 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Unbalanced;                                       		// 0x0B10 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BaseDestReq;                                      		// 0x0B1C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Warmup;                                           		// 0x0B28 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Health;                                           		// 0x0B34 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Revert;                                           		// 0x0B40 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Ping;                                             		// 0x0B4C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Queue;                                            		// 0x0B58 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InQueue;                                          		// 0x0B64 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     No;                                               		// 0x0B70 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Boosted;                                          		// 0x0B7C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Arena;                                            		// 0x0B88 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Allowed;                                          		// 0x0B94 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Cooldown;                                         		// 0x0BA0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ToWin;                                            		// 0x0BAC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x0BB8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AutoAssign;                                       		// 0x0BC4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Gametime;                                         		// 0x0BD0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Multiplier;                                       		// 0x0BDC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Type;                                             		// 0x0BE8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SearchingForAMatch;                               		// 0x0BF4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Buildup;                                          		// 0x0C00 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Admin;                                            		// 0x0C0C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Overtime;                                         		// 0x0C18 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Rules;                                            		// 0x0C24 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrClassUsage;                                     		// 0x0C30 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrPublic;                                         		// 0x0C3C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Respawn;                                          		// 0x0C48 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Most;                                             		// 0x0C54 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Stats;                                            		// 0x0C60 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Match;                                            		// 0x0C6C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Matches;                                          		// 0x0C78 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PerHour;                                          		// 0x0C84 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Won;                                              		// 0x0C90 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Win;                                              		// 0x0C9C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Lost;                                             		// 0x0CA8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Loss;                                             		// 0x0CB4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Combat;                                           		// 0x0CC0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Kills;                                            		// 0x0CCC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Assists;                                          		// 0x0CD8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Midairs;                                          		// 0x0CE4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FastestSki;                                       		// 0x0CF0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Objective;                                        		// 0x0CFC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Flag;                                             		// 0x0D08 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Defense;                                          		// 0x0D14 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Caps;                                             		// 0x0D20 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Gens;                                             		// 0x0D2C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Objs;                                             		// 0x0D38 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Destroyed;                                        		// 0x0D44 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DestroyedAbb;                                     		// 0x0D50 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MostRecentAwards;                                 		// 0x0D5C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LoggingIn;                                        		// 0x0D68 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Pending;                                          		// 0x0D74 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CustomServer;                                     		// 0x0D80 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewBundleTitle;                                   		// 0x0D8C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewBundleDescription;                             		// 0x0D98 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Your;                                             		// 0x0DA4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DealoftheDay;                                     		// 0x0DB0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Video;                                            		// 0x0DBC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Videos;                                           		// 0x0DC8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Stream;                                           		// 0x0DD4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Streams;                                          		// 0x0DE0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Featured;                                         		// 0x0DEC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SelectToGoBack;                                   		// 0x0DF8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Viewers;                                          		// 0x0E04 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ComingSoon;                                       		// 0x0E10 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VisitClassPage;                                   		// 0x0E1C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Range;                                            		// 0x0E28 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Ammo;                                             		// 0x0E34 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AreYouSureYouWantToUnlockAllUpgradesForXX;        		// 0x0E40 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Mastery;                                          		// 0x0E4C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     STEAMTransaction;                                 		// 0x0E58 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     STEAMPendingTransaction;                          		// 0x0E64 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     STEAMDeclinedTransaction;                         		// 0x0E70 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     STEAMCompletingTransaction;                       		// 0x0E7C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     STEAMBadUserData;                                 		// 0x0E88 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Max;                                              		// 0x0E94 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CustomReticule;                                   		// 0x0EA0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Welcome;                                          		// 0x0EAC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Party;                                            		// 0x0EB8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CreateParty;                                      		// 0x0EC4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SendMessage;                                      		// 0x0ED0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KickFromParty;                                    		// 0x0EDC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InvitationSentTo;                                 		// 0x0EE8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CouldNotFindPlayer;                               		// 0x0EF4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PartyInvite;                                      		// 0x0F00 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InvitesYouToJoinAParty;                           		// 0x0F0C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Decline;                                          		// 0x0F18 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LeaderOnly;                                       		// 0x0F24 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PendingInvite;                                    		// 0x0F30 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Actions;                                          		// 0x0F3C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InviteByName;                                     		// 0x0F48 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InviteSent;                                       		// 0x0F54 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InviteFailed;                                     		// 0x0F60 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AddedNewFriend;                                   		// 0x0F6C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InGame;                                           		// 0x0F78 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Block;                                            		// 0x0F84 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChangeClanTagTo;                                  		// 0x0F90 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanTag;                                          		// 0x0F9C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanTags;                                         		// 0x0FA8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AddClanTag;                                       		// 0x0FB4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChangeClanTag;                                    		// 0x0FC0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Removed;                                          		// 0x0FCC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FlagsMoveEveryCap;                                		// 0x0FD8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Testing;                                          		// 0x0FE4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SpawningAs;                                       		// 0x0FF0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ResetAllToDefault;                                		// 0x0FFC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RenameLoadout;                                    		// 0x1008 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SelectToRenameThisLoadout;                        		// 0x1014 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EULAAgreement;                                    		// 0x1020 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LearnMore;                                        		// 0x102C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NextMap;                                          		// 0x1038 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GameType;                                         		// 0x1044 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GameRules;                                        		// 0x1050 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GameTip;                                          		// 0x105C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FireToSpectate;                                   		// 0x1068 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FireToRespawn;                                    		// 0x1074 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OutOfRespawns;                                    		// 0x1080 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OutOfTeamRespawns;                                		// 0x108C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TimeUntilRespawn;                                 		// 0x1098 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TeamScoreBoard;                                   		// 0x10A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Spectate;                                         		// 0x10B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KilledBy;                                         		// 0x10BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UsingWeapon;                                      		// 0x10C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UsingPerks;                                       		// 0x10D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1607 ];

		return pClassPointer;
	};

};

UClass* UTrStrings::pClassPointer = NULL;

// Class TribesGame.TrSummaryHelper
// 0x001C (0x0058 - 0x003C)
class UTrSummaryHelper : public UObject
{
public:
	int                                                AWARD_TIER_SIZE;                                  		// 0x003C (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __MVPSort__Delegate;                              		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __AwardSort__Delegate;                            		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1608 ];

		return pClassPointer;
	};

	class UClass* GetNextRank ( class UClass* Rank );
	class UClass* GetRankFromXP ( int XP );
	class UClass* GetAccoladeFromId ( int AccoladeId );
	class UClass* GetAwardFromId ( int AwardId );
	struct FString GetTierTitle ( int val, class UClass* award );
	float GetTieredWeight ( int AwardId, int val );
	int GetMinTierValue ( int AwardId );
	int AwardSort ( struct FPropertyPair A, struct FPropertyPair B );
	int MVPSort ( struct FMVPAward A, struct FMVPAward B );
	void SortMVPAwards ( TArray< struct FMVPAward >* AwardArray );
	void SortPlayerAwards ( TArray< struct FPropertyPair >* AwardArray );
};

UClass* UTrSummaryHelper::pClassPointer = NULL;

// Class TribesGame.TrSVehicleSimHover
// 0x0018 (0x0150 - 0x0138)
class UTrSVehicleSimHover : public UUDKVehicleSimHover
{
public:
	struct FAnglePID                                   RollGain;                                         		// 0x0138 (0x0014) [0x0000000000000000]              
	unsigned long                                      bShouldStabilizeRotation : 1;                     		// 0x014C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1609 ];

		return pClassPointer;
	};

};

UClass* UTrSVehicleSimHover::pClassPointer = NULL;

// Class TribesGame.TrSVehicleSimTank
// 0x0008 (0x00FC - 0x00F4)
class UTrSVehicleSimTank : public USVehicleSimTank
{
public:
	float                                              m_fLastDirectionNudgeTime;                        		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              m_fVelocityChangeDamping;                         		// 0x00F8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1610 ];

		return pClassPointer;
	};

};

UClass* UTrSVehicleSimTank::pClassPointer = NULL;

// Class TribesGame.TrTeamBlockerStaticMeshActor
// 0x0018 (0x01FC - 0x01E4)
class ATrTeamBlockerStaticMeshActor : public AStaticMeshActor
{
public:
	unsigned char                                      m_DefenderTeamIndex;                              		// 0x01E4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bDisableBlockingOnSiegePhase0Ends : 1;          		// 0x01E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class UMaterialInstanceConstant* >         m_MICs;                                           		// 0x01EC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UMaterial*                                   m_BaseMaterial;                                   		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1611 ];

		return pClassPointer;
	};

	void CreateMICs ( );
	void UpdateMaterialForPawn ( class ATrPawn* P );
	void EnableBlocking ( );
	void DisableBlocking ( );
	void eventPostBeginPlay ( );
};

UClass* ATrTeamBlockerStaticMeshActor::pClassPointer = NULL;

// Class TribesGame.TrTripActor
// 0x0038 (0x0214 - 0x01DC)
class ATrTripActor : public AActor
{
public:
	class AActor*                                      r_Left;                                           		// 0x01DC (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AActor*                                      r_Right;                                          		// 0x01E0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      r_bIsPowered : 1;                                 		// 0x01E4 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      r_bIsInitialized : 1;                             		// 0x01E4 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      m_bRequiresTwoNotifiers : 1;                      		// 0x01E4 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              r_fSleepEndTime;                                  		// 0x01E8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fSleepTime;                                     		// 0x01EC (0x0004) [0x0000000000000000]              
	class UInterface_TrTripNotifier*                   m_DestroyNotifier;                                		// 0x01F0 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x01F4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UInterface_TrTripNotifier*                   m_LeftNotifier;                                   		// 0x01F8 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x01FC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UInterface_TrTripNotifier*                   m_RightNotifier;                                  		// 0x0200 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0204 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UParticleSystem*                             m_LaserTemplate;                                  		// 0x0208 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    m_pscLaserEffect;                                 		// 0x020C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UTrTripComponent*                            m_TripComponent;                                  		// 0x0210 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1612 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventTick ( float DeltaTime );
	void GoToSleep ( unsigned long bIsPowered );
	void InitializeTripPhysics ( class UInterface_TrTripNotifier* Left, class UInterface_TrTripNotifier* Right );
	void Destroyed ( );
	void DestroyNotify ( class UInterface_TrTripNotifier* Notifier );
	void ClientCreateVisualEffect ( );
	void CreateTripComponent ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ATrTripActor::pClassPointer = NULL;

// Class TribesGame.TrTripComponent
// 0x0008 (0x01F0 - 0x01E8)
class UTrTripComponent : public UPrimitiveComponent
{
public:
	class ATrTripActor*                                m_TripActor;                                      		// 0x01E8 (0x0004) [0x0000000000000000]              
	float                                              m_fCachedX;                                       		// 0x01EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1613 ];

		return pClassPointer;
	};

};

UClass* UTrTripComponent::pClassPointer = NULL;

// Class TribesGame.TrUser
// 0x0070 (0x00AC - 0x003C)
class UTrUser : public UObject
{
public:
	int                                                CurrencyCode;                                     		// 0x003C (0x0004) [0x0000000000000000]              
	struct FString                                     CurrencyName;                                     		// 0x0040 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	int                                                m_ClassId;                                        		// 0x004C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_DidLogin : 1;                                   		// 0x0050 (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_ChoseRegion : 1;                                		// 0x0050 (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_ChoseRegion2 : 1;                               		// 0x0050 (0x0004) [0x0000000000044000] [0x00000004] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_SeenClanTags : 1;                               		// 0x0050 (0x0004) [0x0000000000044000] [0x00000008] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_SeenNewGametype : 1;                            		// 0x0050 (0x0004) [0x0000000000044000] [0x00000010] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_SeenNewItemsMain : 1;                           		// 0x0050 (0x0004) [0x0000000000044000] [0x00000020] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_SeenNewBundlesMain : 1;                         		// 0x0050 (0x0004) [0x0000000000044000] [0x00000040] ( CPF_Config | CPF_GlobalConfig )
	struct FString                                     m_GameType;                                       		// 0x0054 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     m_Username;                                       		// 0x0060 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     m_Password;                                       		// 0x006C (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	TArray< struct FNewItem >                          NewItems;                                         		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FNewItem >                          NewBundles;                                       		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FNewItem >                          SeenNewItems;                                     		// 0x0090 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	TArray< int >                                      FavServers;                                       		// 0x009C (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UGFxTrMenuMoviePlayer*                       MainMenu;                                         		// 0x00A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1614 ];

		return pClassPointer;
	};

	bool IsFavoriteServer ( int ServerID );
	void SetFavoriteServer ( int ServerID );
	bool NeedToSeeNewBundle ( int ItemId );
	bool NeedToSeeAnyNewItem ( );
	bool NeedsToSeeNewBundle ( int ItemId );
	bool NeedsToSeeNewItem ( int EquipId );
	bool NeedsToSeeNewItemsType ( int ClassId, int Type );
	bool NeedsToSeeNewItemsClass ( int ClassId );
	bool NeedsToSeeClanTags ( );
	void SeenNewItemsType ( int ClassId, int Type );
	void SeenNewItemsClass ( int ClassId );
	void SeenNewBundle ( int ItemId );
	void SeenClanTags ( );
	void SeenNewBundlesMain ( );
	void SeenNewItemsMain ( );
	void SeenNewGametype ( );
	void SaveChoseRegion ( );
	void SaveDidLogin ( );
	void SaveGameType ( struct FString NewGameType );
	void SaveClassId ( int NewClassId );
	void SaveCredentials ( struct FString NewUserName, struct FString NewPassword );
	void Initialize ( class UGFxTrMenuMoviePlayer* Movie );
	struct FString DecryptPassword ( );
	struct FString EncryptPassword ( struct FString Password );
};

UClass* UTrUser::pClassPointer = NULL;

// Class TribesGame.TrVehicle
// 0x01C8 (0x0C8C - 0x0AC4)
class ATrVehicle : public AUTVehicle
{
public:
	class APawn*                                       Passenger[ 0x4 ];                                 		// 0x0AC4 (0x0010) [0x0000000000000020]              ( CPF_Net )
	class ATrPawn*                                     m_PawnToTeleport;                                 		// 0x0AD4 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bPostSpawnLocked : 1;                           		// 0x0AD8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bBoostRequiresThrust : 1;                       		// 0x0AD8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bImprovedLagSupport : 1;                        		// 0x0AD8 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      r_bIsInvulnerable : 1;                            		// 0x0AD8 (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      r_BoostersEnabled : 1;                            		// 0x0AD8 (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      m_bLowPowerPool : 1;                              		// 0x0AD8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      r_LevelFlightEnabled : 1;                         		// 0x0AD8 (0x0004) [0x0000000000000020] [0x00000040] ( CPF_Net )
	unsigned long                                      m_bUsesArmoredMultiplier : 1;                     		// 0x0AD8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      m_bClientPhysDirty : 1;                           		// 0x0AD8 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bServerCorrectionForce : 1;                     		// 0x0AD8 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      r_bDetectedByEnemyScanner : 1;                    		// 0x0AD8 (0x0004) [0x0000000000000020] [0x00000400] ( CPF_Net )
	unsigned char                                      m_VehicleType;                                    		// 0x0ADC (0x0001) [0x0000000000000000]              
	unsigned char                                      r_MissileLock;                                    		// 0x0ADD (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_MissileLockStatus;                              		// 0x0ADE (0x0001) [0x0000000000000000]              
	class ATrVehicleStation*                           m_OwnerStation;                                   		// 0x0AE0 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeToReset;                                   		// 0x0AE4 (0x0004) [0x0000000000000000]              
	float                                              m_fBoostMultiplier;                               		// 0x0AE8 (0x0004) [0x0000000000000000]              
	float                                              m_fBoostEnergyPerSec;                             		// 0x0AEC (0x0004) [0x0000000000000000]              
	float                                              m_fBoostReactivatePct;                            		// 0x0AF0 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentPowerPool;                              		// 0x0AF4 (0x0004) [0x0000000000000000]              
	float                                              r_fCurrentPowerPool;                              		// 0x0AF8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              r_fMaxPowerPool;                                  		// 0x0AFC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fPowerPoolRechargeRate;                         		// 0x0B00 (0x0004) [0x0000000000000000]              
	float                                              m_fPowerPoolTickRate;                             		// 0x0B04 (0x0004) [0x0000000000000000]              
	float                                              m_CrashDamageSeverity;                            		// 0x0B08 (0x0004) [0x0000000000000000]              
	float                                              m_fFlagPushSpeed;                                 		// 0x0B0C (0x0004) [0x0000000000000000]              
	float                                              m_fPawnPushSpeed;                                 		// 0x0B10 (0x0004) [0x0000000000000000]              
	float                                              m_fPawnMaxDamageSpeed;                            		// 0x0B14 (0x0004) [0x0000000000000000]              
	float                                              m_fPawnMinDamage;                                 		// 0x0B18 (0x0004) [0x0000000000000000]              
	float                                              m_fPawnMaxDamage;                                 		// 0x0B1C (0x0004) [0x0000000000000000]              
	float                                              m_fPawnDamageTickTime;                            		// 0x0B20 (0x0004) [0x0000000000000000]              
	class UClass*                                      VehicleCollisionDamageType;                       		// 0x0B24 (0x0004) [0x0000000000000000]              
	float                                              m_fVehicleMaxDamageSpeed;                         		// 0x0B28 (0x0004) [0x0000000000000000]              
	float                                              m_fVehicleMinDamageSpeed;                         		// 0x0B2C (0x0004) [0x0000000000000000]              
	float                                              m_fVehicleMinDamage;                              		// 0x0B30 (0x0004) [0x0000000000000000]              
	float                                              m_fVehicleMaxDamage;                              		// 0x0B34 (0x0004) [0x0000000000000000]              
	float                                              m_fLastVehicleDamageTime;                         		// 0x0B38 (0x0004) [0x0000000000000000]              
	float                                              m_fVehicleDamageTickTime;                         		// 0x0B3C (0x0004) [0x0000000000000000]              
	class UClass*                                      WallCollisionDamageType;                          		// 0x0B40 (0x0004) [0x0000000000000000]              
	float                                              m_fWallMaxDamageSpeed;                            		// 0x0B44 (0x0004) [0x0000000000000000]              
	float                                              m_fWallMinDamageSpeed;                            		// 0x0B48 (0x0004) [0x0000000000000000]              
	float                                              m_fWallMinDamage;                                 		// 0x0B4C (0x0004) [0x0000000000000000]              
	float                                              m_fWallMaxDamage;                                 		// 0x0B50 (0x0004) [0x0000000000000000]              
	float                                              m_fLastWallDamageTime;                            		// 0x0B54 (0x0004) [0x0000000000000000]              
	float                                              m_fWallDamageTickTime;                            		// 0x0B58 (0x0004) [0x0000000000000000]              
	int                                                r_nBaseMaxSpeed;                                  		// 0x0B5C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fDivingMaxSpeedMultiplier;                      		// 0x0B60 (0x0004) [0x0000000000000000]              
	float                                              m_fBoostFadeInTime;                               		// 0x0B64 (0x0004) [0x0000000000000000]              
	float                                              m_fBoostFadeOutTime;                              		// 0x0B68 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             m_AudioComponentBoostSound;                       		// 0x0B6C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ShowHeaderUntil;                                  		// 0x0B70 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sName;                                          		// 0x0B74 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                m_nIconIndex;                                     		// 0x0B80 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FMaterialImpactEffect >             m_DustEffects;                                    		// 0x0B84 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FMaterialImpactEffect                       m_DefaultDustEffect;                              		// 0x0B90 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UParticleSystemComponent*                    m_DustPSC;                                        		// 0x0BC0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_fContrailSpeed;                                 		// 0x0BC4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRemainingPotentialSeekingTargetHUDZoomTime;    		// 0x0BC8 (0x0004) [0x0000000000000000]              
	struct FRotator                                    m_rPotentialSeekingTargetHUDRotation;             		// 0x0BCC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRemainingSeekingTargetHUDZoomTime;             		// 0x0BD8 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_HealthBarMIC;                                   		// 0x0BDC (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_DriverHealthBarMIC;                             		// 0x0BE0 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_Passenger1HealthBarMIC;                         		// 0x0BE4 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_Passenger2HealthBarMIC;                         		// 0x0BE8 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_Passenger3HealthBarMIC;                         		// 0x0BEC (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_Passenger4HealthBarMIC;                         		// 0x0BF0 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_MarkerMIC;                                      		// 0x0BF4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fVehicleHealthBarPlacementX;                    		// 0x0BF8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fVehicleHealthBarPlacementY;                    		// 0x0BFC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fVehicleHealthBarWidth;                         		// 0x0C00 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fVehicleHealthBarHeight;                        		// 0x0C04 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vDeathCamStartOffset;                           		// 0x0C08 (0x000C) [0x0000000000000000]              
	struct FString                                     m_sWeapon1Name;                                   		// 0x0C14 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_sWeapon2Name;                                   		// 0x0C20 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UTrStatsInterface*                           Stats;                                            		// 0x0C2C (0x0004) [0x0000000000000000]              
	float                                              m_fClientPhysDeltaTime;                           		// 0x0C30 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0C34 (0x000C) MISSED OFFSET
	struct FRigidBodyState                             m_ClientRBState;                                  		// 0x0C40 (0x0040) [0x0000000000000000]              
	int                                                m_nServerTickCount;                               		// 0x0C80 (0x0004) [0x0000000000000000]              
	int                                                m_nDetectedByEnemyScannerCount;                   		// 0x0C84 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxPawnLeaveSpeed;                             		// 0x0C88 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1615 ];

		return pClassPointer;
	};

	void ClearInvulnerability ( );
	void GoInvulnerable ( float InvulnerableTime );
	void PlayHorn ( );
	struct FString GetSpectatorName ( );
	struct FVector GetCameraFocus ( int SeatIndex );
	bool CalcOtherWatchingCam ( float fDeltaTime, class ATrPlayerController* WatcherController, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void StopVehicleSounds ( );
	void MigrateVehicleSounds ( class APawn* P, unsigned long bIsRiding );
	void PlayClientVehicleSound ( struct FName SoundTag );
	void VehicleEvent ( struct FName EventTag );
	void eventPlayVehicleEvent ( struct FName EventTag );
	void SetDriving ( unsigned long bNewDriving );
	bool ShouldShowUseable ( class APlayerController* PC, float Dist );
	void ProcessViewRotationBasedOnSeat ( int SeatIndex, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	class ATrProj_Tracer* SpawnTracerEffect ( unsigned char TracerType, struct FVector EffectLocation, struct FVector HitLocation, float HitDistance );
	void SpawnTracerBeam ( struct FVector Start, struct FVector End, class UParticleSystem* TracerBeamTemplate );
	void ThirdPersonFireEffects ( struct FVector HitLocation, int SeatIndex );
	void VehicleWeaponStoppedFiring ( unsigned long bViaReplication, int SeatIndex );
	void VehicleWeaponFireEffects ( struct FVector HitLocation, int SeatIndex );
	void BlowupVehicle ( );
	void CheckDamageSmoke ( );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	void Suicide ( );
	void DriverRadiusDamage ( float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, struct FVector HitLocation, class AActor* DamageCauser, float DamageFalloffExponent );
	void DoRepairs ( int HealAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool HealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void WeaponRotationChanged ( int SeatIndex );
	struct FRotator GetWeaponAim ( class AUTVehicleWeapon* VWeapon );
	bool AnySeatAvailable ( );
	bool SeatAvailable ( int SeatIndex );
	bool TryExitPos ( class APawn* ExitingDriver, struct FVector ExitPos, unsigned long bMustFindGround );
	bool PlaceExitingDriver ( class APawn* ExitingDriver );
	int GetSeatIndexForStoragePawn ( class APawn* P );
	int GetSeatIndexForController ( class AController* ControllerToMove );
	void SwitchWeapon ( unsigned char NewGroup );
	bool ChangeSeat ( class AController* ControllerToMove, int RequestedSeat );
	void SwitchSeat ( int RequestedSeat, class AController* ControllerRequestingSeatChange );
	void ServerChangeSeat ( int RequestedSeat );
	class APlayerReplicationInfo* GetSeatPRI ( int SeatNum );
	bool DriverEnter ( class APawn* P );
	bool RidingPawnLeave ( int SeatIndex, unsigned long bForceLeave );
	void HandleEnteringFlag ( class AUTPlayerReplicationInfo* EnteringPRI, int SeatIndex );
	void eventHoldGameObject ( class AUDKCarriedObject* GameObj );
	void UpdateSeatAnimations ( class ATrPawn* PawnToSit, int SeatIndex );
	void DetachRidingPawn ( class ATrPawn* PawnLeft );
	void AttachRidingPawn ( class ATrPawn* PawnToSit, int SeatIndex );
	void AttachDriver ( class APawn* P );
	bool PassengerEnter ( class APawn* P, int SeatIndex );
	void InitializeSeats ( );
	void GetSVehicleDebug ( TArray< struct FString >* DebugInfo );
	void SetSeatStoragePawn ( int SeatIndex, class APawn* PawnToSit );
	bool RenderDriverPassengerMarker ( class UCanvas* Canvas, unsigned long friendly, class ATrHUD* HUD, class ATrPlayerController* TrPC );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	bool Occupied ( );
	void eventTick ( float DeltaTime );
	void PlayMissileLockSounds ( );
	void PlayBoosterEffects ( unsigned long bEnabled );
	void BoostSoundFinished ( class UAudioComponent* AC );
	void ServerToggleLevelFlight ( unsigned long bEnabled );
	bool eventShouldRechargePowerPool ( );
	bool CanActivateBoosters ( );
	void ConsumeBoostPowerPool ( );
	void ToggleBoosters ( unsigned long bEnabled, unsigned long ToggleTimer );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void ResetResetTime ( );
	void eventCheckReset ( );
	void PassengerLeave ( int SeatIndex );
	void DriverLeft ( );
	bool TryToDrive ( class APawn* P );
	int GetFirstAvailableSeat ( unsigned long bSeatMustAllowFlag );
	bool CanArmorEnterVehicle ( class UClass* FamilyInfo );
	bool CanArmorDriveVehicle ( class UClass* FamilyInfo );
	void TeleportDriverToSeat ( );
	void KillControllerForTeamChange ( class AController* ControllerToKill );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void SendLockOnMessage ( int Switch );
	void SetPostSpawnLocked ( unsigned long bLocked );
	void SetPawnToTeleport ( class ATrPawn* P );
	bool IsEmpty ( );
	void DetachDriver ( class APawn* P );
	void SitDriver ( class AUTPawn* UTP, int SeatIndex );
	bool StopsProjectile ( class AProjectile* P );
	void eventRanInto ( class AActor* Other );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* Collision );
	float GetDamageAmountForCollision ( float Speed );
	class AController* GetCollisionDamageInstigator ( );
	void PancakeOther ( class APawn* Other );
	bool SetScannerDetect ( unsigned long detected );
	bool GetDetectedByEnemyScanner ( );
	void SetDetectedByEnemyScanner ( unsigned long detected );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void SyncClientCurrentPowerPool ( );
	void RegainPowerPool ( float fDeltaTime );
	float GetPowerPoolPercent ( );
	void ConsumePowerPool ( float fAmount );
	void NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
};

UClass* ATrVehicle::pClassPointer = NULL;

// Class TribesGame.TrVehicle_BaseFlying
// 0x0050 (0x0CDC - 0x0C8C)
class ATrVehicle_BaseFlying : public ATrVehicle
{
public:
	TArray< struct FFlyingParticleEffects >            LeftEngineParticles;                              		// 0x0C8C (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FFlyingParticleEffects >            MidEngineParticles;                               		// 0x0C98 (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FFlyingParticleEffects >            RightEngineParticles;                             		// 0x0CA4 (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FFlyingParticleEffects >            LeftContrailParticles;                            		// 0x0CB0 (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FFlyingParticleEffects >            RightContrailParticles;                           		// 0x0CBC (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              m_fThrustBuildUp;                                 		// 0x0CC8 (0x0004) [0x0000000000000000]              
	float                                              m_fThrustInvDuration;                             		// 0x0CCC (0x0004) [0x0000000000000000]              
	float                                              m_fBoostThrustBuildUp;                            		// 0x0CD0 (0x0004) [0x0000000000000000]              
	float                                              m_fBoostThrustInvDuration;                        		// 0x0CD4 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bFreeLook : 1;                                  		// 0x0CD8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bCanAutoLevelVehicle : 1;                       		// 0x0CD8 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1616 ];

		return pClassPointer;
	};

	void VehicleCalcCamera ( float DeltaTime, int SeatIndex, unsigned long bPivotOnly, struct FVector* out_CamLoc, struct FRotator* out_CamRot, struct FVector* CamStart );
	void SetInputs ( float InForward, float InStrafe, float InUp );
	void CreateParticleSystems ( );
	void eventPostBeginPlay ( );
};

UClass* ATrVehicle_BaseFlying::pClassPointer = NULL;

// Class TribesGame.TrVehicleSimChopper
// 0x003C (0x0170 - 0x0134)
class UTrVehicleSimChopper : public UUDKVehicleSimChopper
{
public:
	float                                              HoverHeight;                                      		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReverseSpeed;                                     		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nLastPitchInput;                                		// 0x013C (0x0004) [0x0000000000000000]              
	int                                                m_nLastYawInput;                                  		// 0x0140 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bInvertFlight : 1;                              		// 0x0144 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShouldStabilizeRotation : 1;                     		// 0x0144 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FAnglePID                                   PitchGain;                                        		// 0x0148 (0x0014) [0x0000000000000000]              
	struct FAnglePID                                   RollGain;                                         		// 0x015C (0x0014) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1617 ];

		return pClassPointer;
	};

	void SetVehicleControls ( unsigned long bInvert );
};

UClass* UTrVehicleSimChopper::pClassPointer = NULL;

// Class TribesGame.TrVehicleSimChopperFlat
// 0x0000 (0x0170 - 0x0170)
class UTrVehicleSimChopperFlat : public UTrVehicleSimChopper
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1618 ];

		return pClassPointer;
	};

};

UClass* UTrVehicleSimChopperFlat::pClassPointer = NULL;

// Class TribesGame.TrVehicleWeapon
// 0x0080 (0x06F4 - 0x0674)
class ATrVehicleWeapon : public AUTVehicleWeapon
{
public:
	int                                                DBWeaponId;                                       		// 0x0674 (0x0004) [0x0000000000000000]              
	int                                                m_nReticuleIndex;                                 		// 0x0678 (0x0004) [0x0000000000000000]              
	int                                                m_nAltReticuleIndex;                              		// 0x067C (0x0004) [0x0000000000000000]              
	int                                                m_ShotsFired;                                     		// 0x0680 (0x0004) [0x0000000000000000]              
	int                                                m_nFiringConeWidthDegrees;                        		// 0x0684 (0x0004) [0x0000000000000000]              
	float                                              m_fCachedFiringCone;                              		// 0x0688 (0x0004) [0x0000000000000000]              
	float                                              m_fDefaultAccuracy;                               		// 0x068C (0x0004) [0x0000000000000000]              
	float                                              m_fAccuracyLossOnJump;                            		// 0x0690 (0x0004) [0x0000000000000000]              
	float                                              m_fAccuracyLossOnWeaponSwitch;                    		// 0x0694 (0x0004) [0x0000000000000000]              
	float                                              m_fAccuracyLossOnShot;                            		// 0x0698 (0x0004) [0x0000000000000000]              
	float                                              m_fAccuracyLossMax;                               		// 0x069C (0x0004) [0x0000000000000000]              
	float                                              m_fAimingModeAccuracyBonus;                       		// 0x06A0 (0x0004) [0x0000000000000000]              
	float                                              m_fAccuracyCorrectionRate;                        		// 0x06A4 (0x0004) [0x0000000000000000]              
	float                                              m_fReloadTimeRemaining;                           		// 0x06A8 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_TracerType;                                     		// 0x06AC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bSpawnTracers : 1;                              		// 0x06B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bSpawnTracerBeams : 1;                          		// 0x06B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bLowAmmoOn : 1;                                 		// 0x06B0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bReloadSingles : 1;                             		// 0x06B0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bPendingReload : 1;                             		// 0x06B0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bShowAmmoIndicator : 1;                         		// 0x06B0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      r_bIsReloading : 1;                               		// 0x06B0 (0x0004) [0x0000000000002020] [0x00000040] ( CPF_Net | CPF_Transient )
	unsigned long                                      m_bCanZoom : 1;                                   		// 0x06B0 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      m_bEndZoomOnReload : 1;                           		// 0x06B0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	int                                                m_nTracerInterval;                                		// 0x06B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fShowTracerDistance;                            		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             m_TracerBeamTemplate;                             		// 0x06BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nLowAmmoWarning;                                		// 0x06C0 (0x0004) [0x0000000000000000]              
	int                                                m_nCarriedAmmo;                                   		// 0x06C4 (0x0004) [0x0000000000000000]              
	float                                              m_fReloadTime;                                    		// 0x06C8 (0x0004) [0x0000000000000000]              
	float                                              m_fPctTimeBeforeReload;                           		// 0x06CC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_ReloadAmmoSoundCue;                             		// 0x06D0 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_DryFireSoundCue;                                		// 0x06D4 (0x0004) [0x0000000000000000]              
	int                                                r_nCarriedAmmoCount;                              		// 0x06D8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FName                                       m_nmZoomMaterialEffectName;                       		// 0x06DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   m_ZoomOverlayMaterial;                            		// 0x06E4 (0x0004) [0x0000000000000000]              
	class UCameraShake*                                m_FireCameraShake;                                		// 0x06E8 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	struct FName                                       m_WeaponSpinControl;                              		// 0x06EC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1619 ];

		return pClassPointer;
	};

	void ResetAltReticule ( );
	void SetAltReticule ( );
	void EndZoom ( class AUTPlayerController* PC, unsigned long bReturningTo3P );
	void StartZoom ( class AUTPlayerController* PC );
	bool CanViewZoom ( );
	void UpdateReplicatedCarriedAmmo ( );
	int AddCarriedAmmo ( int Amount );
	void BeginAReload ( );
	float CalculateReloadPercentRemaining ( );
	void OnReloadComplete ( );
	void ClientFinishedReload ( );
	void OnClientReloaded ( );
	void RequestReload ( );
	bool CanClientRequestReloadNow ( );
	bool HasReticuleCharge ( );
	void PutDownWeapon ( );
	void BeginFire ( unsigned char FireModeNum );
	void FireAmmunition ( );
	struct FRotator AddSpread ( struct FRotator BaseAim );
	struct FRotator GetAdjustedAim ( struct FVector StartFireLoc );
	struct FRotator AddSpreadWithAccuracy ( struct FRotator BaseAim, float fAccuracy );
	void PayAccuracyForShot ( );
	class ATrProj_Tracer* GetTracer ( struct FVector SpawnLocation, struct FRotator SpawnRotation );
	void WeaponPlaySoundLocal ( class USoundCue* Sound, float NoiseLoudness, unsigned long bStopWhenOwnerDestroyed );
	class ATrProj_Tracer* SpawnTracerEffect ( struct FVector HitLocation, float HitDistance );
	void SpawnTracerBeam ( struct FVector Start, struct FVector End );
	bool ShouldFireTracerBeam ( );
	bool ShouldFireTracer ( );
	void ShakeView ( );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	void StopMuzzleFlash ( );
	void CauseMuzzleFlash ( );
	void MuzzleFlashTimer ( );
	void AttachMuzzleFlash ( );
	struct FVector GetEffectLocation ( );
	int GetNumRoundsCurrentlyInClip ( );
	void eventUpdateShotsFired ( unsigned long Reset );
	class UClass* GetProjectileClass ( );
	class AProjectile* ProjectileFire ( );
	bool IsWeaponInFiringCone ( );
	void StartFire ( unsigned char FireModeNum );
	void PostBeginPlay ( );
	float CalculateReloadTime ( );
	void InitVehicleGun ( );
	void RestoreAccuracy ( float fTimeStep );
	float GetTargetAccuracy ( );
	float GetAccuracy ( );
};

UClass* ATrVehicleWeapon::pClassPointer = NULL;

// Class TribesGame.TrVideoSettings
// 0x002C (0x00A4 - 0x0078)
class UTrVideoSettings : public UGFxObject
{
public:
	int                                                m_ResolutionCount;                                		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                m_VideoSettingsCount;                             		// 0x007C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  m_ResolutionList;                                 		// 0x0080 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  m_VideoSettingsList;                              		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                m_Cached_GraphicsDetail;                          		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                m_Cached_ShadowDetail;                            		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                m_Cached_ScreenType;                              		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                m_Cached_MotionBlur;                              		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                m_Cached_VerticalSync;                            		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                m_Cached_Resolution;                              		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                m_Cached_SmoothFramerate;                         		// 0x00A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1620 ];

		return pClassPointer;
	};

	void eventSetSmoothFramerateValue ( int val );
	int eventGetSmoothFramerateValue ( );
	void CacheVideoSetting ( int Index, int val );
	unsigned char GetSettingTypeFromName ( struct FString val );
	struct FString GetSettingNameFromType ( unsigned char Index );
	void AddResolutionToList ( struct FString Resolution );
	void LoadResolutions ( class UGFxObject* List );
	void LoadVideoResolutions ( class UGFxObject* List );
	void AddVideoSettingToList ( struct FString SettingName, int val );
	void LoadVideoSettings ( class UGFxObject* List );
	void SetMotionBlur ( unsigned long bEnable );
	void SetVSync ( unsigned long bEnable );
	void GetResolutions ( TArray< struct FPropertyPair >* ResolutionList );
	void ChangeGraphicsDetail ( int Index );
	void ChangeResolution ( int Index );
	void ChangeScreenType ( int Index );
	void ApplyVideoSettings ( );
	void GetAllowedResolutions ( TArray< struct FResolutionData >* ResolutionList );
	int GetCurrentSettingValue ( unsigned char Type );
};

UClass* UTrVideoSettings::pClassPointer = NULL;

// Class TribesGame.TrWeaponPawn
// 0x0014 (0x062C - 0x0618)
class ATrWeaponPawn : public AUTWeaponPawn
{
public:
	float                                              m_fCurrentAccuracy;                               		// 0x0618 (0x0004) [0x0000000000000000]              
	unsigned char                                      r_nFlashReload;                                   		// 0x061C (0x0001) [0x0000000000000020]              ( CPF_Net )
	class UAudioComponent*                             FiringLoopAudio;                                  		// 0x0620 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      r_bFiringLoopSound : 1;                           		// 0x0624 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	class USoundCue*                                   r_scFiringLoop;                                   		// 0x0628 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1621 ];

		return pClassPointer;
	};

	void PlayLoopingSound ( class USoundCue* InSound, unsigned long Play );
	void ClientPlayLoopSound ( );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void PlayReload ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ATrWeaponPawn::pClassPointer = NULL;

// Class TribesGame.dsWebAdmin
// 0x0000 (0x0050 - 0x0050)
class UdsWebAdmin : public UWebApplication
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50731 ];

		return pClassPointer;
	};

	void eventQuery ( class UWebRequest* Request, class UWebResponse* Response );
	void Init ( );
};

UClass* UdsWebAdmin::pClassPointer = NULL;

// Class TribesGame.GFxDeviceAmmoCount
// 0x0004 (0x0180 - 0x017C)
class UGFxDeviceAmmoCount : public UGFxMoviePlayer
{
public:
	class UGFxObject*                                  AmmoCountTF;                                      		// 0x017C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50741 ];

		return pClassPointer;
	};

	void Init ( class ULocalPlayer* Player );
};

UClass* UGFxDeviceAmmoCount::pClassPointer = NULL;

// Class TribesGame.GFxTrAction
// 0x0018 (0x0054 - 0x003C)
class UGFxTrAction : public UObject
{
public:
	int                                                ActionIndex;                                      		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                ActionNumber;                                     		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FString                                     ActionString;                                     		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxTrPage*                                  ActionPage;                                       		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50748 ];

		return pClassPointer;
	};

};

UClass* UGFxTrAction::pClassPointer = NULL;

// Class TribesGame.GFxTrPage
// 0x00EC (0x0164 - 0x0078)
class UGFxTrPage : public UGFxObject
{
public:
	int                                                ActiveLoadout;                                    		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                GoBack;                                           		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                HelpButtonANum;                                   		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                HelpButtonBNum;                                   		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                HelpButtonXNum;                                   		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                HelpButtonYNum;                                   		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                ScrollIndex;                                      		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                ActiveIndex;                                      		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                DataCount;                                        		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                OptionCount;                                      		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                NewAction;                                        		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                LoadoutClassId;                                   		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                LoadoutEquipType;                                 		// 0x00A8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFillingFocus : 1;                                		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bModifyOption : 1;                                		// 0x00AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bRemoveOption : 1;                                		// 0x00AC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bEndOfLine : 1;                                   		// 0x00AC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bAllowBack : 1;                                   		// 0x00AC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bActive : 1;                                      		// 0x00AC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bCreated : 1;                                     		// 0x00AC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bHasModifiers : 1;                                		// 0x00AC (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bParentLocked : 1;                                		// 0x00AC (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bShowTribesLogo : 1;                              		// 0x00AC (0x0004) [0x0000000000000000] [0x00000200] 
	struct FString                                     PageLabelOverride;                                		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           OptionTitlesOverride;                             		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           OptionSubtextOverride;                            		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PageLabel;                                        		// 0x00D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HelpButtonAKey;                                   		// 0x00E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HelpButtonBKey;                                   		// 0x00EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HelpButtonXKey;                                   		// 0x00F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HelpButtonYKey;                                   		// 0x0104 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HelpButtonALabel;                                 		// 0x0110 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HelpButtonBLabel;                                 		// 0x011C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HelpButtonXLabel;                                 		// 0x0128 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HelpButtonYLabel;                                 		// 0x0134 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           OptionTitles;                                     		// 0x0140 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           OptionSubtext;                                    		// 0x014C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< class UGFxTrAction* >                      PageActions;                                      		// 0x0158 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50750 ];

		return pClassPointer;
	};

	void OnClose ( );
	void SaveReticule ( class UGFxObject* Data );
	void ShowReticule ( int Index );
	void ResetRunaway ( );
	void ProfileDown ( int ActionIndex );
	void ProfileUp ( int ActionIndex );
	void UpdateQueueTimer ( );
	void UpdateDealTimer ( );
	void KeyEvent ( );
	void RefreshButtons ( );
	void ActionDown ( );
	void ActionUp ( );
	void OnPurchaseSuccess ( );
	void RevertSetting ( );
	bool NewEquipUpgrade ( int EquipId );
	bool NewClassUpgrade ( int ClassId );
	bool NewClassEquip ( int ClassId );
	class UGFxObject* FillEquipTypes ( int EquipId, int ActionIndex );
	class UGFxObject* FillClass ( int ClassId, int ActionIndex, unsigned long bShowActive );
	void ShowModel ( );
	void ClearActions ( );
	void FillPage ( class UGFxObject* DataList );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillPricing ( class UGFxObject* DataList );
	class UGFxObject* FillUpgrades ( class UGFxObject* DataList );
	bool CheckPricing ( class UGFxObject* DataList );
	bool CheckUpgrades ( class UGFxObject* DataList );
	class UGFxObject* FillDefault ( );
	class UGFxObject* FillOption ( int ActionIndex );
	bool IsEquipMaxed ( int Index );
	bool CheckPurchasable ( );
	bool IsOwned ( int Index );
	class UGFxObject* FillOptions ( class UGFxObject* DataList );
	void FillData ( class UGFxObject* DataList );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void SpecialAction ( class UGFxTrAction* Action );
	void HelpButton ( int ActionIndex );
	void ModifyFocus ( int ActionIndex );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	class UGFxTrAction* AddActionSet ( class UGFxTrPage* ActionPage, int ActionNumber, struct FString ActionString );
	class UGFxTrAction* AddActionPage ( class UGFxTrPage* ActionPage );
	class UGFxTrAction* AddActionString ( struct FString ActionString );
	class UGFxTrAction* AddActionNumber ( int ActionNumber );
	class UGFxTrAction* AddAction ( );
	void Initialize ( );
};

UClass* UGFxTrPage::pClassPointer = NULL;

// Class TribesGame.GFxTrDevices
// 0x000C (0x0084 - 0x0078)
class UGFxTrDevices : public UGFxObject
{
public:
	class UGFxMinimapHud*                              HUD;                                              		// 0x0078 (0x0004) [0x0000000000000000]              
	class AWorldInfo*                                  ThisWorld;                                        		// 0x007C (0x0004) [0x0000000000000000]              
	unsigned long                                      bNeedsUpdateData : 1;                             		// 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50755 ];

		return pClassPointer;
	};

	void Update ( );
	void UpdateData ( );
	class UGFxObject* GetAmmonPool ( );
	class UGFxObject* GetAmmonClip ( );
	void Init ( class UGFxMinimapHud* H );
};

UClass* UGFxTrDevices::pClassPointer = NULL;

// Class TribesGame.GFxTrFront_View
// 0x0000 (0x007C - 0x007C)
class UGFxTrFront_View : public UGFxUIView
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50768 ];

		return pClassPointer;
	};

};

UClass* UGFxTrFront_View::pClassPointer = NULL;

// Class TribesGame.GFxTrFront_Dialog
// 0x0000 (0x007C - 0x007C)
class UGFxTrFront_Dialog : public UGFxTrFront_View
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50770 ];

		return pClassPointer;
	};

};

UClass* UGFxTrFront_Dialog::pClassPointer = NULL;

// Class TribesGame.GFxTrDialog_Error
// 0x0000 (0x007C - 0x007C)
class UGFxTrDialog_Error : public UGFxTrFront_Dialog
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50772 ];

		return pClassPointer;
	};

};

UClass* UGFxTrDialog_Error::pClassPointer = NULL;

// Class TribesGame.GFxTrDialog_Info
// 0x0000 (0x007C - 0x007C)
class UGFxTrDialog_Info : public UGFxTrFront_Dialog
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50774 ];

		return pClassPointer;
	};

};

UClass* UGFxTrDialog_Info::pClassPointer = NULL;

// Class TribesGame.GFxTrFront_CustomGameSetup
// 0x0000 (0x003C - 0x003C)
class UGFxTrFront_CustomGameSetup : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50776 ];

		return pClassPointer;
	};

};

UClass* UGFxTrFront_CustomGameSetup::pClassPointer = NULL;

// Class TribesGame.GFxTrFront_Party
// 0x0000 (0x003C - 0x003C)
class UGFxTrFront_Party : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50778 ];

		return pClassPointer;
	};

};

UClass* UGFxTrFront_Party::pClassPointer = NULL;

// Class TribesGame.GFxTrFront_Setup
// 0x0000 (0x003C - 0x003C)
class UGFxTrFront_Setup : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50780 ];

		return pClassPointer;
	};

};

UClass* UGFxTrFront_Setup::pClassPointer = NULL;

// Class TribesGame.TrVGSCommandList
// 0x2D9C (0x2DD8 - 0x003C)
class UTrVGSCommandList : public UObject
{
public:
	struct FTrVGSCommand                               m_CommandList[ 0x96 ];                            		// 0x003C (0x1E78) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalYes;                             		// 0x1EB4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalNo;                              		// 0x1EC0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalHi;                              		// 0x1ECC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalBye;                             		// 0x1ED8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalOoops;                           		// 0x1EE4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalQuiet;                           		// 0x1EF0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalShazbot;                         		// 0x1EFC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalWoohoo;                          		// 0x1F08 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalComplimentAwesome;               		// 0x1F14 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalComplimentGoodGame;              		// 0x1F20 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalComplimentNiceMove;              		// 0x1F2C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalComplimentYouRock;               		// 0x1F38 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalComplimentGreatShot;             		// 0x1F44 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalRespondAnyTime;                  		// 0x1F50 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalRespondDontKnow;                 		// 0x1F5C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalRespondThanks;                   		// 0x1F68 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalRespondWait;                     		// 0x1F74 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalTauntAww;                        		// 0x1F80 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalTauntObnoxious;                  		// 0x1F8C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalTauntBrag;                       		// 0x1F98 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalTauntSarcasm;                    		// 0x1FA4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_GlobalTauntLearn;                      		// 0x1FB0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_Attack;                                		// 0x1FBC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_AttackBase;                            		// 0x1FC8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_AttackChase;                           		// 0x1FD4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_AttackDisrupt;                         		// 0x1FE0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_AttackFlag;                            		// 0x1FEC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_AttackGenerator;                       		// 0x1FF8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_AttackReinforce;                       		// 0x2004 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_AttackSensors;                         		// 0x2010 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_AttackTurrets;                         		// 0x201C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_AttackVehicle;                         		// 0x2028 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_AttackWait;                            		// 0x2034 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_AttackPointA;                          		// 0x2040 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_AttackPointB;                          		// 0x204C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_AttackPointC;                          		// 0x2058 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_AttackPointD;                          		// 0x2064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_AttackPointE;                          		// 0x2070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_DefendBase;                            		// 0x207C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_DefendFlagCarrier;                     		// 0x2088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_DefendEntrances;                       		// 0x2094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_DefendFlag;                            		// 0x20A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_DefendGenerator;                       		// 0x20AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_DefendMe;                              		// 0x20B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_DefendReinforce;                       		// 0x20C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_DefendSensors;                         		// 0x20D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_DefendTurrets;                         		// 0x20DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_DefendVehicle;                         		// 0x20E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_DefendPointA;                          		// 0x20F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_DefendPointB;                          		// 0x2100 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_DefendPointC;                          		// 0x210C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_DefendPointD;                          		// 0x2118 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_DefendPointE;                          		// 0x2124 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_RepairGenerator;                       		// 0x2130 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_RepairSensors;                         		// 0x213C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_RepairTurrets;                         		// 0x2148 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_RepairVehicle;                         		// 0x2154 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_BaseClear;                             		// 0x2160 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_EnemyInBase;                           		// 0x216C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_BaseRetake;                            		// 0x2178 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_BaseSecure;                            		// 0x2184 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_CommandAcknowledged;                   		// 0x2190 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_CommandCompleted;                      		// 0x219C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_CommandDeclined;                       		// 0x21A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_CommandAssignment;                     		// 0x21B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_EnemyDisarray;                         		// 0x21C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_EnemyGeneratorDestroyed;               		// 0x21CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_EnemySensorsDestroyed;                 		// 0x21D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_EnemyTurretsDestroyed;                 		// 0x21E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_EnemyVehicleDestroyed;                 		// 0x21F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_FlagDefend;                            		// 0x21FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_FlagIHave;                             		// 0x2208 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_FlagGiveMe;                            		// 0x2214 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_FlagRetrieve;                          		// 0x2220 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_FlagSelfRetrieve;                      		// 0x222C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_FlagSecure;                            		// 0x2238 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_FlagTake;                              		// 0x2244 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_NeedCover;                             		// 0x2250 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_NeedDriver;                            		// 0x225C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_NeedEscort;                            		// 0x2268 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_NeedHoldVehicle;                       		// 0x2274 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_NeedRide;                              		// 0x2280 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_NeedSupport;                           		// 0x228C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_NeedVehicleReady;                      		// 0x2298 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_NeedWhereTo;                           		// 0x22A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfAttack;                            		// 0x22B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfAttackBase;                        		// 0x22BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfAttackFlag;                        		// 0x22C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfAttackGenerator;                   		// 0x22D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfAttackSensors;                     		// 0x22E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfAttackTurrets;                     		// 0x22EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfAttackVehicle;                     		// 0x22F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfAttackPointA;                      		// 0x2304 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfAttackPointB;                      		// 0x2310 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfAttackPointC;                      		// 0x231C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfAttackPointD;                      		// 0x2328 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfAttackPointE;                      		// 0x2334 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfDefendBase;                        		// 0x2340 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfDefend;                            		// 0x234C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfDefendFlag;                        		// 0x2358 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfDefendGenerator;                   		// 0x2364 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfDefendSensors;                     		// 0x2370 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfDefendTurrets;                     		// 0x237C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfDefendVehicle;                     		// 0x2388 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfDefendPointA;                      		// 0x2394 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfDefendPointB;                      		// 0x23A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfDefendPointC;                      		// 0x23AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfDefendPointD;                      		// 0x23B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfDefendPointE;                      		// 0x23C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfRepairBase;                        		// 0x23D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfRepairGenerator;                   		// 0x23DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfRepairSensors;                     		// 0x23E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfRepairTurrets;                     		// 0x23F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfRepairVehicle;                     		// 0x2400 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfTaskCover;                         		// 0x240C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfTaskDefenses;                      		// 0x2418 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfTaskForcefield;                    		// 0x2424 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfTaskOnIt;                          		// 0x2430 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfTaskDeploySensors;                 		// 0x243C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfTaskDeployTurrets;                 		// 0x2448 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfTaskVehicle;                       		// 0x2454 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfUpgradeGenerator;                  		// 0x2460 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfUpgradeSensors;                    		// 0x246C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_SelfUpgradeTurrets;                    		// 0x2478 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TargetAcquired;                        		// 0x2484 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TargetBase;                            		// 0x2490 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TargetDestroyed;                       		// 0x249C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TargetFlag;                            		// 0x24A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TargetFireOnMy;                        		// 0x24B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TargetNeed;                            		// 0x24C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TargetSensors;                         		// 0x24CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TargetTurret;                          		// 0x24D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TargetVehicle;                         		// 0x24E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TargetWait;                            		// 0x24F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_UpgradeGenerator;                      		// 0x24FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_UpgradeSensors;                        		// 0x2508 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_UpgradeTurrets;                        		// 0x2514 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnEnemies;                           		// 0x2520 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnVehicle;                           		// 0x252C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_EnemyInsideOurBase;        		// 0x2538 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_EnemyInsideEnemyBase;      		// 0x2544 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_EnemyAroundOurBase;        		// 0x2550 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_EnemyAroundEnemyBase;      		// 0x255C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_EnemyBehindOurBase;        		// 0x2568 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_EnemyBehindEnemyBase;      		// 0x2574 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_EnemyInMidfield;           		// 0x2580 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_EnemyNearOurGenerator;     		// 0x258C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_EnemyNearEnemyGenerator;   		// 0x2598 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_EnemyNearOurFlag;          		// 0x25A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_EnemyNearEnemyFlag;        		// 0x25B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_EnemyNearOurBaseTurret;    		// 0x25BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_EnemyNearEnemyBaseTurret;  		// 0x25C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_EnemyNearOurVehiclePad;    		// 0x25D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_EnemyNearEnemyVehiclePad;  		// 0x25E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_EnemyNearby;               		// 0x25EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_ActorLightPawn;            		// 0x25F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_ActorMediumPawn;           		// 0x2604 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_ActorHeavyPawn;            		// 0x2610 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_ActorTurret;               		// 0x261C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_ActorSensor;               		// 0x2628 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_ActorVehicle;              		// 0x2634 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_WarnContext_ActorDeployable;           		// 0x2640 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TeamYes;                               		// 0x264C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TeamNo;                                		// 0x2658 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TeamAnytime;                           		// 0x2664 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TeamBaseSecure;                        		// 0x2670 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TeamCeaseFire;                         		// 0x267C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TeamDontKnow;                          		// 0x2688 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TeamHelp;                              		// 0x2694 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TeamMove;                              		// 0x26A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TeamSorry;                             		// 0x26AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TeamThanks;                            		// 0x26B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatString_TeamWait;                              		// 0x26C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalYes;                             		// 0x26D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalNo;                              		// 0x26DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalHi;                              		// 0x26E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalBye;                             		// 0x26F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalOoops;                           		// 0x2700 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalQuiet;                           		// 0x270C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalShazbot;                         		// 0x2718 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalWoohoo;                          		// 0x2724 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalComplimentAwesome;               		// 0x2730 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalComplimentGoodGame;              		// 0x273C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalComplimentNiceMove;              		// 0x2748 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalComplimentYouRock;               		// 0x2754 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalComplimentGreatShot;             		// 0x2760 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalRespondAnyTime;                  		// 0x276C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalRespondDontKnow;                 		// 0x2778 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalRespondThanks;                   		// 0x2784 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalRespondWait;                     		// 0x2790 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalTauntAww;                        		// 0x279C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalTauntObnoxious;                  		// 0x27A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalTauntBrag;                       		// 0x27B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalTauntSarcasm;                    		// 0x27C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_GlobalTauntLearn;                      		// 0x27CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_Attack;                                		// 0x27D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_AttackBase;                            		// 0x27E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_AttackChase;                           		// 0x27F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_AttackDisrupt;                         		// 0x27FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_AttackFlag;                            		// 0x2808 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_AttackGenerator;                       		// 0x2814 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_AttackReinforce;                       		// 0x2820 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_AttackSensors;                         		// 0x282C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_AttackTurrets;                         		// 0x2838 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_AttackVehicle;                         		// 0x2844 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_AttackWait;                            		// 0x2850 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_AttackPointA;                          		// 0x285C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_AttackPointB;                          		// 0x2868 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_AttackPointC;                          		// 0x2874 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_AttackPointD;                          		// 0x2880 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_AttackPointE;                          		// 0x288C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_DefendBase;                            		// 0x2898 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_DefendFlagCarrier;                     		// 0x28A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_DefendEntrances;                       		// 0x28B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_DefendFlag;                            		// 0x28BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_DefendGenerator;                       		// 0x28C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_DefendMe;                              		// 0x28D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_DefendReinforce;                       		// 0x28E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_DefendSensors;                         		// 0x28EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_DefendTurrets;                         		// 0x28F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_DefendVehicle;                         		// 0x2904 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_DefendPointA;                          		// 0x2910 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_DefendPointB;                          		// 0x291C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_DefendPointC;                          		// 0x2928 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_DefendPointD;                          		// 0x2934 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_DefendPointE;                          		// 0x2940 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_RepairGenerator;                       		// 0x294C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_RepairSensors;                         		// 0x2958 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_RepairTurrets;                         		// 0x2964 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_RepairVehicle;                         		// 0x2970 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_BaseClear;                             		// 0x297C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_EnemyInBase;                           		// 0x2988 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_BaseRetake;                            		// 0x2994 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_BaseSecure;                            		// 0x29A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_CommandAcknowledged;                   		// 0x29AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_CommandCompleted;                      		// 0x29B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_CommandDeclined;                       		// 0x29C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_CommandAssignment;                     		// 0x29D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_EnemyDisarray;                         		// 0x29DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_EnemyGeneratorDestroyed;               		// 0x29E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_EnemySensorsDestroyed;                 		// 0x29F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_EnemyTurretsDestroyed;                 		// 0x2A00 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_EnemyVehicleDestroyed;                 		// 0x2A0C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_FlagDefend;                            		// 0x2A18 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_FlagIHave;                             		// 0x2A24 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_FlagGiveMe;                            		// 0x2A30 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_FlagRetrieve;                          		// 0x2A3C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_FlagSelfRetrieve;                      		// 0x2A48 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_FlagSecure;                            		// 0x2A54 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_FlagTake;                              		// 0x2A60 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_NeedCover;                             		// 0x2A6C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_NeedDriver;                            		// 0x2A78 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_NeedEscort;                            		// 0x2A84 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_NeedHoldVehicle;                       		// 0x2A90 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_NeedRide;                              		// 0x2A9C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_NeedSupport;                           		// 0x2AA8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_NeedVehicleReady;                      		// 0x2AB4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_NeedWhereTo;                           		// 0x2AC0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfAttack;                            		// 0x2ACC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfAttackBase;                        		// 0x2AD8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfAttackFlag;                        		// 0x2AE4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfAttackGenerator;                   		// 0x2AF0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfAttackSensors;                     		// 0x2AFC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfAttackTurrets;                     		// 0x2B08 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfAttackVehicle;                     		// 0x2B14 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfAttackPointA;                      		// 0x2B20 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfAttackPointB;                      		// 0x2B2C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfAttackPointC;                      		// 0x2B38 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfAttackPointD;                      		// 0x2B44 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfAttackPointE;                      		// 0x2B50 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfDefendBase;                        		// 0x2B5C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfDefend;                            		// 0x2B68 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfDefendFlag;                        		// 0x2B74 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfDefendGenerator;                   		// 0x2B80 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfDefendSensors;                     		// 0x2B8C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfDefendTurrets;                     		// 0x2B98 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfDefendVehicle;                     		// 0x2BA4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfDefendPointA;                      		// 0x2BB0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfDefendPointB;                      		// 0x2BBC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfDefendPointC;                      		// 0x2BC8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfDefendPointD;                      		// 0x2BD4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfDefendPointE;                      		// 0x2BE0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfRepairBase;                        		// 0x2BEC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfRepairGenerator;                   		// 0x2BF8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfRepairSensors;                     		// 0x2C04 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfRepairTurrets;                     		// 0x2C10 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfRepairVehicle;                     		// 0x2C1C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfTaskCover;                         		// 0x2C28 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfTaskDefenses;                      		// 0x2C34 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfTaskForcefield;                    		// 0x2C40 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfTaskOnIt;                          		// 0x2C4C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfTaskDeploySensors;                 		// 0x2C58 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfTaskDeployTurrets;                 		// 0x2C64 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfTaskVehicle;                       		// 0x2C70 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfUpgradeGenerator;                  		// 0x2C7C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfUpgradeSensors;                    		// 0x2C88 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_SelfUpgradeTurrets;                    		// 0x2C94 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TargetAcquired;                        		// 0x2CA0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TargetBase;                            		// 0x2CAC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TargetDestroyed;                       		// 0x2CB8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TargetFlag;                            		// 0x2CC4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TargetFireOnMy;                        		// 0x2CD0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TargetNeed;                            		// 0x2CDC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TargetSensors;                         		// 0x2CE8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TargetTurret;                          		// 0x2CF4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TargetVehicle;                         		// 0x2D00 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TargetWait;                            		// 0x2D0C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_UpgradeGenerator;                      		// 0x2D18 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_UpgradeSensors;                        		// 0x2D24 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_UpgradeTurrets;                        		// 0x2D30 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_WarnEnemies;                           		// 0x2D3C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_WarnVehicle;                           		// 0x2D48 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TeamYes;                               		// 0x2D54 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TeamNo;                                		// 0x2D60 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TeamAnytime;                           		// 0x2D6C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TeamBaseSecure;                        		// 0x2D78 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TeamCeaseFire;                         		// 0x2D84 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TeamDontKnow;                          		// 0x2D90 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TeamHelp;                              		// 0x2D9C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TeamMove;                              		// 0x2DA8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TeamSorry;                             		// 0x2DB4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TeamThanks;                            		// 0x2DC0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuString_TeamWait;                              		// 0x2DCC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50782 ];

		return pClassPointer;
	};

	struct FString GetContextLocationString ( unsigned char Loc, unsigned long bEnemyLocation );
	void Init ( );
};

UClass* UTrVGSCommandList::pClassPointer = NULL;

// Class TribesGame.GfxTrHud
// 0x09B0 (0x0C2C - 0x027C)
class UGfxTrHud : public UGFxMinimapHud
{
public:
	class ATrHUD*                                      m_TrHUD;                                          		// 0x027C (0x0004) [0x0000000000000000]              
	class ATrPlayerController*                         m_TrPC;                                           		// 0x0280 (0x0004) [0x0000000000000000]              
	int                                                m_HUDStageOriginX;                                		// 0x0284 (0x0004) [0x0000000000000000]              
	int                                                m_HUDStageOriginY;                                		// 0x0288 (0x0004) [0x0000000000000000]              
	int                                                m_HUDStageWidth;                                  		// 0x028C (0x0004) [0x0000000000000000]              
	int                                                m_HUDStageHeight;                                 		// 0x0290 (0x0004) [0x0000000000000000]              
	int                                                m_nLastPercent;                                   		// 0x0294 (0x0004) [0x0000000000000000]              
	int                                                m_nLastCredits;                                   		// 0x0298 (0x0004) [0x0000000000000000]              
	int                                                m_nLastAmmoPool;                                  		// 0x029C (0x0004) [0x0000000000000000]              
	int                                                m_nCrossHairMode;                                 		// 0x02A0 (0x0004) [0x0000000000000000]              
	int                                                m_nStreakEvent[ 0x5 ];                            		// 0x02A4 (0x0014) [0x0000000000000000]              
	int                                                m_nLastSkiSpeedStep;                              		// 0x02B8 (0x0004) [0x0000000000000000]              
	int                                                m_nLastPercentLaser;                              		// 0x02BC (0x0004) [0x0000000000000000]              
	int                                                m_nLastPercentReload;                             		// 0x02C0 (0x0004) [0x0000000000000000]              
	int                                                m_nLastOffhandCount[ 0x3 ];                       		// 0x02C4 (0x000C) [0x0000000000000000]              
	int                                                m_nLastEnemyGeneratorTime;                        		// 0x02D0 (0x0004) [0x0000000000000000]              
	int                                                m_nLastFriendlyGeneratorTime;                     		// 0x02D4 (0x0004) [0x0000000000000000]              
	float                                              m_fCrosshairDepth;                                		// 0x02D8 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bLastSkiing : 1;                                		// 0x02DC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bLastHasFlag : 1;                               		// 0x02DC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bShowPlayerStats : 1;                           		// 0x02DC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bGameOver : 1;                                  		// 0x02DC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bLastInVehicle : 1;                             		// 0x02DC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bShowingAmmoClip : 1;                           		// 0x02DC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bLastIn3P : 1;                                  		// 0x02DC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bShowingBadge : 1;                                		// 0x02DC (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bNearDeathOn : 1;                               		// 0x02DC (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bVGSLoadouts : 1;                                 		// 0x02DC (0x0004) [0x0000000000000000] [0x00000200] 
	float                                              m_fLastRotation;                                  		// 0x02E0 (0x0004) [0x0000000000000000]              
	float                                              m_fLastMaxHealth;                                 		// 0x02E4 (0x0004) [0x0000000000000000]              
	float                                              m_fLastActualHealth;                              		// 0x02E8 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentGhostHealth;                            		// 0x02EC (0x0004) [0x0000000000000000]              
	float                                              m_fLastSpeedometerUpdateTime;                     		// 0x02F0 (0x0004) [0x0000000000000000]              
	int                                                m_VGSMenuListCount;                               		// 0x02F4 (0x0004) [0x0000000000000000]              
	int                                                m_SkiSpeedSteps[ 0xC ];                           		// 0x02F8 (0x0030) [0x0000000000000000]              
	float                                              m_fSpeedometerUpdateInterval;                     		// 0x0328 (0x0004) [0x0000000000000000]              
	int                                                m_nLastSeatMask;                                  		// 0x032C (0x0004) [0x0000000000000000]              
	int                                                m_nLastVehicleHealth;                             		// 0x0330 (0x0004) [0x0000000000000000]              
	float                                              m_fLastVehicleEnergy;                             		// 0x0334 (0x0004) [0x0000000000000000]              
	int                                                m_nLastVehicleAmmoPool;                           		// 0x0338 (0x0004) [0x0000000000000000]              
	class ATeamInfo*                                   m_LastTeam;                                       		// 0x033C (0x0004) [0x0000000000000000]              
	class ATrDevice*                                   m_LastOffhand[ 0x3 ];                             		// 0x0340 (0x000C) [0x0000000000000000]              
	class UGFxObject*                                  sniperPowerUp;                                    		// 0x034C (0x0004) [0x0000000000000000]              
	class UGFxTrReticules*                             Reticules;                                        		// 0x0350 (0x0004) [0x0000000000000000]              
	class UGFxDeviceAmmoCount*                         deviceAmmoCountMP;                                		// 0x0354 (0x0004) [0x0000000000000000]              
	class UGFxDeviceAmmoCount*                         deviceAmmoPoolMP;                                 		// 0x0358 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  Visor[ 0x4 ];                                     		// 0x035C (0x0010) [0x0000000000000000]              
	class UGFxObject*                                  PlayerStats;                                      		// 0x036C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  HeroStatus_outputTF;                              		// 0x0370 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  PromptPanel;                                      		// 0x0374 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  KillCamInfo;                                      		// 0x0378 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  KillMessageArea;                                  		// 0x037C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CombatLog;                                        		// 0x0380 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SkiIndicator[ 0x2 ];                              		// 0x0384 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  SkiIndicatorTF[ 0x2 ];                            		// 0x038C (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  SkiIndicatorFillBar[ 0x2 ];                       		// 0x0394 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  CreditsAndStreaks;                                		// 0x039C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CreditsAndStreaks_Streak[ 0x3 ];                  		// 0x03A0 (0x000C) [0x0000000000000000]              
	class UGFxObject*                                  SpawnCounter_StatusMessage;                       		// 0x03AC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpawnCounter_TimeLabel;                           		// 0x03B0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  PlayerStats_HealthFillBar;                        		// 0x03B4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  PlayerStats_GhostHealthBar;                       		// 0x03B8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  PlayerStats_EnergyFillBar;                        		// 0x03BC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  TeamScoreboard_Red_PlayerNameTF[ 0x10 ];          		// 0x03C0 (0x0040) [0x0000000000000000]              
	class UGFxObject*                                  TeamScoreboard_Red_ScoreTF[ 0x10 ];               		// 0x0400 (0x0040) [0x0000000000000000]              
	class UGFxObject*                                  TeamScoreboard_Red_KillsTF[ 0x10 ];               		// 0x0440 (0x0040) [0x0000000000000000]              
	class UGFxObject*                                  TeamScoreboard_Red_AssistsTF[ 0x10 ];             		// 0x0480 (0x0040) [0x0000000000000000]              
	class UGFxObject*                                  TeamScoreboard_Red_PingTF[ 0x10 ];                		// 0x04C0 (0x0040) [0x0000000000000000]              
	class UGFxObject*                                  TeamScoreboard_Red_ClassTF[ 0x10 ];               		// 0x0500 (0x0040) [0x0000000000000000]              
	class UGFxObject*                                  TeamScoreboard_Red_RankIcon[ 0x10 ];              		// 0x0540 (0x0040) [0x0000000000000000]              
	class UGFxObject*                                  TeamScoreboard_Red_RankTF[ 0x10 ];                		// 0x0580 (0x0040) [0x0000000000000000]              
	class UGFxObject*                                  TeamScoreboard_Blue_PlayerNameTF[ 0x10 ];         		// 0x05C0 (0x0040) [0x0000000000000000]              
	class UGFxObject*                                  TeamScoreboard_Blue_ScoreTF[ 0x10 ];              		// 0x0600 (0x0040) [0x0000000000000000]              
	class UGFxObject*                                  TeamScoreboard_Blue_KillsTF[ 0x10 ];              		// 0x0640 (0x0040) [0x0000000000000000]              
	class UGFxObject*                                  TeamScoreboard_Blue_AssistsTF[ 0x10 ];            		// 0x0680 (0x0040) [0x0000000000000000]              
	class UGFxObject*                                  TeamScoreboard_Blue_PingTF[ 0x10 ];               		// 0x06C0 (0x0040) [0x0000000000000000]              
	class UGFxObject*                                  TeamScoreboard_Blue_ClassTF[ 0x10 ];              		// 0x0700 (0x0040) [0x0000000000000000]              
	class UGFxObject*                                  TeamScoreboard_Blue_RankIcon[ 0x10 ];             		// 0x0740 (0x0040) [0x0000000000000000]              
	class UGFxObject*                                  TeamScoreboard_Blue_RankTF[ 0x10 ];               		// 0x0780 (0x0040) [0x0000000000000000]              
	class UGFxObject*                                  RabbitScoreboard_PlayerTF[ 0x8 ];                 		// 0x07C0 (0x0020) [0x0000000000000000]              
	class UGFxObject*                                  RabbitScoreboard_ScoreT[ 0x8 ];                   		// 0x07E0 (0x0020) [0x0000000000000000]              
	class UGFxObject*                                  RabbitScoreboard_KillsTF[ 0x8 ];                  		// 0x0800 (0x0020) [0x0000000000000000]              
	class UGFxObject*                                  RabbitScoreboard_AssistsTF[ 0x8 ];                		// 0x0820 (0x0020) [0x0000000000000000]              
	class UGFxObject*                                  RabbitScoreboard_PingTF[ 0x8 ];                   		// 0x0840 (0x0020) [0x0000000000000000]              
	class UGFxObject*                                  RabbitScoreboard_ClassTF[ 0x8 ];                  		// 0x0860 (0x0020) [0x0000000000000000]              
	class UGFxObject*                                  RabbitScoreboard_RankTF[ 0x8 ];                   		// 0x0880 (0x0020) [0x0000000000000000]              
	class UGFxObject*                                  RabbitScoreboard_RankIcon[ 0x8 ];                 		// 0x08A0 (0x0020) [0x0000000000000000]              
	class UGFxObject*                                  RabbitScoreboard_PlayerHighlight[ 0x8 ];          		// 0x08C0 (0x0020) [0x0000000000000000]              
	class UGFxObject*                                  RabbitStats;                                      		// 0x08E0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  RabbitStats_LeaderText[ 0x3 ];                    		// 0x08E4 (0x000C) [0x0000000000000000]              
	class UGFxObject*                                  RabbitStats_LeaderScore[ 0x3 ];                   		// 0x08F0 (0x000C) [0x0000000000000000]              
	class UGFxObject*                                  RabbitStats_Timer;                                		// 0x08FC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CTFStats_LeftGenStatus;                           		// 0x0900 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CTFStats_RightGenStatus;                          		// 0x0904 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CTFStats_LeftGenTimer;                            		// 0x0908 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CTFStats_RightGenTimer;                           		// 0x090C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CTFStats_LeftFlagStatus;                          		// 0x0910 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CTFStats_RightFlagStatus;                         		// 0x0914 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CTFStats_LeftFlagTimer;                           		// 0x0918 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CTFStats_RightFlagTimer;                          		// 0x091C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CTFStats_LeftScore;                               		// 0x0920 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CTFStats_RightScore;                              		// 0x0924 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CTFStats_Timer;                                   		// 0x0928 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CTFStats;                                         		// 0x092C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  TdmStats_leftFlagStatus;                          		// 0x0930 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  TdmStats_rightFlagStatus;                         		// 0x0934 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  TdmStats_gameTimer;                               		// 0x0938 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  TdmStats;                                         		// 0x093C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  DaDStats;                                         		// 0x0940 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CaHStats;                                         		// 0x0944 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CaHControlPointA;                                 		// 0x0948 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CaHControlPointB;                                 		// 0x094C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CaHControlPointC;                                 		// 0x0950 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CaHControlPointD;                                 		// 0x0954 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CaHControlPointE;                                 		// 0x0958 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_FriendlyManGraphic01;                  		// 0x095C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_FriendlyManGraphic02;                  		// 0x0960 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_FriendlyManGraphic03;                  		// 0x0964 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_FriendlyManGraphic04;                  		// 0x0968 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_FriendlyManGraphic05;                  		// 0x096C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_FriendlyManGraphic06;                  		// 0x0970 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_FriendlyManGraphic07;                  		// 0x0974 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_FriendlyManGraphic08;                  		// 0x0978 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_EnemyManGraphic01;                     		// 0x097C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_EnemyManGraphic02;                     		// 0x0980 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_EnemyManGraphic03;                     		// 0x0984 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_EnemyManGraphic04;                     		// 0x0988 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_EnemyManGraphic05;                     		// 0x098C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_EnemyManGraphic06;                     		// 0x0990 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_EnemyManGraphic07;                     		// 0x0994 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_EnemyManGraphic08;                     		// 0x0998 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_arenaGameTimerTF;                      		// 0x099C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_roundCountTF;                          		// 0x09A0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_FriendlyScoreTF;                       		// 0x09A4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats_EnemyScoreTF;                          		// 0x09A8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ArenaStats;                                       		// 0x09AC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  TeamScoreBoard;                                   		// 0x09B0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  RabbitScoreboard;                                 		// 0x09B4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  Credits_And_Streaks_CreditsGroup_CreditsMC_CreditsN;		// 0x09B8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  Offhands_And_Flag_FlagInHand;                     		// 0x09BC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  TeamStats;                                        		// 0x09C0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  VehicleStats;                                     		// 0x09C4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  VehicleStats_HealthTF_TextField;                  		// 0x09C8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  VehicleStats_VehicleHealthFill;                   		// 0x09CC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  VehicleStats_EnergyTF_TextField;                  		// 0x09D0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  VehicleStats_VehicleEnergyFill;                   		// 0x09D4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  VehicleStats_VehicleSlot[ 0x6 ];                  		// 0x09D8 (0x0018) [0x0000000000000000]              
	class UGFxObject*                                  playerStats_Offhand1;                             		// 0x09F0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  PlayerStats_Pack;                                 		// 0x09F4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  PlayerStats_PackMC;                               		// 0x09F8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  PlayerStats_PackCount;                            		// 0x09FC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  PlayerStats_Offhand1_Icon;                        		// 0x0A00 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  PlayerStats_Offhand1_Count;                       		// 0x0A04 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  Credits_And_Streaks_CallItem[ 0x3 ];              		// 0x0A08 (0x000C) [0x0000000000000000]              
	class UGFxObject*                                  GlobalAlertTF;                                    		// 0x0A14 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  DeployStatus[ 0x6 ];                              		// 0x0A18 (0x0018) [0x0000000000000000]              
	class UGFxObject*                                  NotificationPopup;                                		// 0x0A30 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  VGS;                                              		// 0x0A34 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp;                                         		// 0x0A38 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecFloat;                                        		// 0x0A3C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer;                                       		// 0x0A40 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecVehicle;                                      		// 0x0A44 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpawnCounter;                                     		// 0x0A48 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecBookmark;                                     		// 0x0A4C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecObjective;                                    		// 0x0A50 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_FlagCarried;                           		// 0x0A54 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_PlayerNameTF;                          		// 0x0A58 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_ClassNameTF;                           		// 0x0A5C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_RegenTF;                               		// 0x0A60 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_HealthFillBar;                         		// 0x0A64 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_HealthTF;                              		// 0x0A68 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_EnergyFillBar;                         		// 0x0A6C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_EnergyTF;                              		// 0x0A70 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_PrimaryNameTF;                         		// 0x0A74 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_PrimaryAmmoTF;                         		// 0x0A78 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_SecondaryNameTF;                       		// 0x0A7C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_SecondaryAmmoTF;                       		// 0x0A80 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_OffhandIcons_icon;                     		// 0x0A84 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_OffhandIcons_count;                    		// 0x0A88 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_OffhandNameTF;                         		// 0x0A8C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_PackIcons_icon;                        		// 0x0A90 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_PackIcons_count;                       		// 0x0A94 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_PackNameTF;                            		// 0x0A98 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_PerkItem1;                             		// 0x0A9C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_Perk1TF;                               		// 0x0AA0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_PerkItem2;                             		// 0x0AA4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_Perk2TF;                               		// 0x0AA8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_SkiIndicator_fillBar;                  		// 0x0AAC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecPlayer_SkiIndicator_fillBar_speedoTF;         		// 0x0AB0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecVehicle_FlagCarried;                          		// 0x0AB4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecVehicle_VehicleNameTF;                        		// 0x0AB8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecVehicle_DriverNameTF;                         		// 0x0ABC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecVehicle_PassengerNameTF;                      		// 0x0AC0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecVehicle_HealthFillBar;                        		// 0x0AC4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecVehicle_HealthTF;                             		// 0x0AC8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecVehicle_EnergyFillBar;                        		// 0x0ACC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecVehicle_EnergyTF;                             		// 0x0AD0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecVehicle_PrimaryNameTF;                        		// 0x0AD4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecVehicle_VehicleGroup_primaryReady;            		// 0x0AD8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecVehicle_SecondaryNameTF;                      		// 0x0ADC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecVehicle_VehicleGroup_secondaryReady;          		// 0x0AE0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecVehicle_SkiIndicator_fillBar;                 		// 0x0AE4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecVehicle_SkiIndicator_fillBar_speedoTF;        		// 0x0AE8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecBookmark_BookmarkNameTF;                      		// 0x0AEC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecBookmark_DescriptionTF;                       		// 0x0AF0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecObjective_ObjectiveNameTF;                    		// 0x0AF4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecObjective_DescriptionTF;                      		// 0x0AF8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecObjective_HealthFillBar;                      		// 0x0AFC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecObjective_HealthTF;                           		// 0x0B00 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecFloat_FloatCameraNameTF;                      		// 0x0B04 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecFloat_DescriptionTF;                          		// 0x0B08 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_HelpTF;                                  		// 0x0B0C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_TeamSelectTF;                            		// 0x0B10 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_ScoreboardTF;                            		// 0x0B14 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_MainmenuTF;                              		// 0x0B18 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_SpecHudTF;                               		// 0x0B1C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_ObjKaratsTF;                             		// 0x0B20 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_MoveUpTF;                                		// 0x0B24 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_MoveDownTF;                              		// 0x0B28 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_MoveForwardTF;                           		// 0x0B2C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_MoveBackTF;                              		// 0x0B30 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_StrafeLeftTF;                            		// 0x0B34 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_StrafeRightTF;                           		// 0x0B38 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_IncreaseSpeedTF;                         		// 0x0B3C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_DecreaseSpeedTF;                         		// 0x0B40 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_ChangePlayersTF;                         		// 0x0B44 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_ChangeGeneratorsTF;                      		// 0x0B48 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_ChangeFlagsTF;                           		// 0x0B4C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_ChangeFlagstandsTF;                      		// 0x0B50 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_ChangeBookmarksTF;                       		// 0x0B54 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_ChangeVehiclesTF;                        		// 0x0B58 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_FastestPlayerTF;                         		// 0x0B5C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_FreeCameraTF;                            		// 0x0B60 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_ZoomInTF;                                		// 0x0B64 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_ZoomOutTF;                               		// 0x0B68 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SpecHelp_LockViewTF;                              		// 0x0B6C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  VGSMenuEntry[ 0x10 ];                             		// 0x0B70 (0x0040) [0x0000000000000000]              
	class UGFxObject*                                  KillCamInfoObject;                                		// 0x0BB0 (0x0004) [0x0000000000000000]              
	int                                                m_nNearDeathHealthMax;                            		// 0x0BB4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDirectionalDamageFadeTime;                     		// 0x0BB8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             m_aDamageEffectNames;                             		// 0x0BBC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UMaterialEffect*                             m_DirectionalDamageEffect;                        		// 0x0BC8 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_DirDamageMaterialInstance;                      		// 0x0BCC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  _global;                                          		// 0x0BD0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  VGSMenuList;                                      		// 0x0BD4 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sRound;                                         		// 0x0BD8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FTrTempMessage                              m_PromptPanelTempMessage;                         		// 0x0BE4 (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FTrTempMessage                              m_HeroStatusTempMessage;                          		// 0x0BFC (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateLoadVGSMenu__Delegate;                  		// 0x0C14 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DelegateSoundAccolade__Delegate;                		// 0x0C20 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51124 ];

		return pClassPointer;
	};

	void SetSoundAccoladeDelegate ( struct FScriptDelegate InDelegate );
	void SetLoadVGSMenuDelegate ( struct FScriptDelegate InDelegate );
	void AddFlyingIcon ( int iconNumber, struct FString Description, struct FString Points, int bIsBadge );
	void SetFontIndex ( int FontIdx );
	void HideSpectatorFloatCameraPanel ( );
	void ShowSpectatorFloatCameraPanel ( );
	void HideSpectatorObjectivePanel ( );
	void ShowSpectatorObjectivePanel ( );
	void HideSpectatorBookmark ( );
	void ShowSpectatorBookmark ( );
	void HideSpectatorVehicle ( );
	void ShowSpectatorVehicle ( );
	void HideSpectatorPlayer ( );
	void ShowSpectatorPlayer ( );
	void ShowKillCamInfo ( class UGFxObject* Data );
	void AddUpdateToKillMessage ( int RankIcon, int PlayerIcon, struct FString PlayerName, struct FString Message );
	void AddUpdateToCombatLog ( int CombatType, struct FString Aggressor, int WeaponIcon, struct FString Victim );
	void UpdateTutorial ( struct FString Title, struct FString Body, float Icon, struct FString footer, struct FString Suppress );
	void SetHUDStageSize ( int HUDOriginX, int HUDOriginY, int Width, int Height );
	void TeamScoreboardUpdateTeamScore ( int Index, int Score );
	void RabbitScoreboardUpdateTime ( struct FString Time );
	void TeamScoreboardUpdateTime ( struct FString Time );
	void TeamScoreboardActivePlayer ( int Index );
	void RemoveFromPromptPanel ( struct FString Message );
	void AddtoPromptPanelAS ( struct FString Message );
	void UpdateChatLogInput ( struct FString Message );
	void SetPowerOscillation ( unsigned long bEnable );
	void UpdateChatLog ( struct FString Message, int ChannelColor, unsigned long bPublic );
	void ASSetHeading ( int Heading );
	void ShowEnding ( int Winner );
	void UpdateVGSMenuList ( );
	void HideKillCamInfo ( );
	void HideFlagCarried ( );
	void ShowFlagCarried ( );
	void HideTutorial ( );
	void HideVGSMenu ( );
	void HideChatLog ( );
	void ShowChatLog ( );
	void ShowSpectatorControls ( unsigned long bShowControls );
	void SetSpectatorFloatCameraPanel_Description ( struct FString Description );
	void SetSpectatorFloatCameraPanel_Name ( struct FString FloatCameraName );
	void SetSpectatorObjectivePanel_HealthFillBar ( int FrameIndex, int Health );
	void SetSpectatorObjectivePanel_ObjectiveDescription ( struct FString ObjectiveDescription );
	void SetSpectatorObjectivePanel_ObjectiveName ( struct FString ObjectiveName );
	void SetSpectatorBookmarkPanel_BookmarkName ( struct FString BookmarkName );
	void SetSpectatorVehiclePanel_Selected ( int FrameIndex );
	void SetSpectatorVehiclePanel_SkiIndicatorSpeed ( struct FString Speed );
	void SetSpectatorVehiclePanel_SkiIndicatorFillBar ( int FrameIndex );
	void SetSpectatorVehiclePanel_SecondaryWeaponVisible ( unsigned long bVisible );
	void SetSpectatorVehiclePanel_SecondaryWeaponReady ( int Ready );
	void SetSpectatorVehiclePanel_SecondaryWeaponName ( struct FString SecondaryWeaponName );
	void SetSpectatorVehiclePanel_PrimaryWeaponVisible ( unsigned long bVisible );
	void SetSpectatorVehiclePanel_PrimaryWeaponReady ( int Ready );
	void SetSpectatorVehiclePanel_PrimaryWeaponName ( struct FString PrimaryWeaponName );
	void SetSpectatorVehiclePanel_Energy ( struct FString Energy );
	void SetSpectatorVehiclePanel_EnergyFillBar ( int FrameIndex );
	void SetSpectatorVehiclePanel_Health ( struct FString Health );
	void SetSpectatorVehiclePanel_HealthFillBar ( int FrameIndex );
	void SetSpectatorVehiclePanel_PassengerName ( struct FString PassengerName );
	void SetSpectatorVehiclePanel_DriverName ( struct FString DriverName );
	void SetSpectatorVehiclePanel_VehicleName ( struct FString VehicleName );
	void SetSpectatorVehiclePanel_FlagCarried ( unsigned long bCarried );
	void SetSpectatorPlayerPanel_Selected ( int FrameIndex );
	void SetSpectatorPlayerPanel_SkiIndicatorSpeed ( struct FString Speed );
	void SetSpectatorPlayerPanel_SkiIndicatorFillBar ( int FrameIndex );
	void SetSpectatorPlayerPanel_Perk2Name ( struct FString PerkName );
	void SetSpectatorPlayerPanel_Perk2Icon ( int FrameIndex );
	void SetSpectatorPlayerPanel_Perk1Name ( struct FString PerkName );
	void SetSpectatorPlayerPanel_Perk1Icon ( int FrameIndex );
	void SetSpectatorPlayerPanel_PackName ( struct FString PackName );
	void SetSpectatorPlayerPanel_PackAmmo ( struct FString PackAmmo );
	void SetSpectatorPlayerPanel_PackIcon ( int FrameIndex );
	void SetSpectatorPlayerPanel_OffhandName ( struct FString OffhandName );
	void SetSpectatorPlayerPanel_OffhandAmmo ( struct FString OffhandAmmo );
	void SetSpectatorPlayerPanel_OffhandIcon ( int FrameIndex );
	void SetSpectatorPlayerPanel_SecondaryAmmoCount ( struct FString SecondaryAmmoCount );
	void SetSpectatorPlayerPanel_SecondaryWeaponName ( struct FString SecondaryWeaponName );
	void SetSpectatorPlayerPanel_PrimaryAmmoCount ( struct FString PrimaryAmmoCount );
	void SetSpectatorPlayerPanel_PrimaryWeaponName ( struct FString PrimaryWeaponName );
	void SetSpectatorPlayerPanel_Energy ( struct FString Energy );
	void SetSpectatorPlayerPanel_EnergyFillBar ( int FrameIndex );
	void SetSpectatorPlayerPanel_Health ( struct FString Health );
	void SetSpectatorPlayerPanel_HealthFillBar ( int FrameIndex );
	void SetSpectatorPlayerPanel_NextRegen ( struct FString NextRegen );
	void SetSpectatorPlayerPanel_ClassName ( struct FString ClassName );
	void SetSpectatorPlayerPanel_PlayerName ( struct FString PlayerName );
	void SetSpectatorPlayerPanel_FlagCarried ( unsigned long bCarried );
	struct FString GetWeaponNameFromDamageType ( class ATrPlayerReplicationInfo* PRI, class UClass* FamilyInfo, class UClass* KillDamageType );
	void CreateKillCamInfo ( class ATrPlayerReplicationInfo* KillerPRI, class ATrPlayerReplicationInfo* VictimPRI, class UClass* KillDamageType );
	void HideGlobalAlert ( );
	void SetGlobalAlert ( struct FString Message );
	class UGFxObject* RetrieveGFxObject ( struct FString ObjName, class UGFxObject** Obj );
	void UpdateCallIn ( int Index, unsigned long bEnable, unsigned long bAvailable );
	void SoundAccolade ( );
	void UpdateOwnedItem ( int Index, unsigned long bVisible, int FrameId );
	void UpdateOffhand ( int Index, unsigned long bVisible, int FrameId, int Count );
	void UpdateVehicleSeat ( int Index, int FrameId );
	void UpdateVehicleEnergy ( float Energy, int FrameId );
	void UpdateVehicleHealth ( int Health, int FrameId );
	void UpdateVehicleStats ( unsigned long bVisible, int FrameId );
	void UpdateTeamStats ( int Team );
	void UpdateSkiLevel ( int Level );
	void UpdateSkiing ( unsigned long bSkiing );
	void UpdateFlagInHand ( unsigned long bVisible );
	void UpdateCredits ( int Credits );
	void RabbitScoreboardShow ( unsigned long bVisible );
	void TeamScoreboardShow ( unsigned long bVisible );
	void CaHEnemyPointBreak ( struct FString Value );
	void CaHFriendlyPointBreak ( struct FString Value );
	void CaHPointUpdate ( struct FString PointName, int PointType, int PctHeld );
	void CaHUpdate ( int FriendlyHeld, int FriendlyPoints, int FriendlyPct, int EnemyHeld, int EnemyPoints, int EnemyPct, struct FString GenTime );
	void CaHControlPointEShow ( unsigned long bVisible );
	void CaHControlPointDShow ( unsigned long bVisible );
	void CaHControlPointCShow ( unsigned long bVisible );
	void CaHControlPointBShow ( unsigned long bVisible );
	void CaHControlPointAShow ( unsigned long bVisible );
	void CaHStatsShow ( unsigned long bVisible );
	void DaDUpdateEnemyStats ( int bGenOnline, struct FString RemainingGenTime, int CapAOnline, int CapBOnline, int CapCOnline, int CoreHealth );
	void DaDUpdateFriendlyStats ( int bGenOnline, struct FString RemainingGenTime, int CapAOnline, int CapBOnline, int CapCOnline, int CoreHealth );
	void DaDStatsShow ( unsigned long bVisible );
	void ASC_EnemyArenaLivesUpdate ( int val );
	void ASC_FriendlyArenaLivesUpdate ( int val );
	void ArenaStatsUpdateTeamScore ( int Team, int Score );
	void ASC_EnemyArenaPointBreak ( struct FString val );
	void ASC_FriendlyArenaPointBreak ( struct FString val );
	void ArenaStatsPointBreak ( int Team, struct FString val );
	void ArenaStatsShow ( unsigned long bVisible );
	void ArenaStatsUpdateEnemyRoundScore ( int Score );
	void ArenaStatsUpdateFriendlyRoundScore ( int Score );
	void ArenaStatsUpdateRoundCount ( int RoundNum );
	void ArenaStatsUpdateTime ( struct FString Time );
	void ArenaUpdateManGraphic ( class UGFxObject* Obj, struct FString Path, int Index );
	void TeamRabbitStatsShow ( unsigned long bVisible );
	void TeamRabbitStatsUpdateTime ( struct FString Time );
	void HideNotification ( );
	void ShowNotification ( struct FString val, struct FString Val2 );
	void ASC_EnemyTDMPointBreak ( struct FString val );
	void ASC_FriendlyTDMPointBreak ( struct FString val );
	void TeamRabbitStatsPointBreak ( int Team, struct FString val );
	void ASC_EnemyTDMScoreUpdate ( int val );
	void ASC_FriendlyTDMScoreUpdate ( int val );
	void TeamRabbitStatsUpdateTeamScore ( int Team, int Score );
	void TeamRabbitStatsUpdateFlagStatus ( int Team );
	void TeamCTFStatsShow ( unsigned long bVisible );
	void TeamCTFStatsUpdateTime ( struct FString Time );
	void TeamCTFStatsUpdateTeamScore ( int Team, int Score );
	void TeamCTFStatsUpdateFlagStatus ( int Team, unsigned long bAtBase );
	void TeamCTFStatsUpdateFlagReturnTime ( int Team, struct FString Time );
	void TeamCTFStatsUpdateGeneratorTimer ( int Team, struct FString Time );
	void TeamCTFStatsUpdateGeneratorStatus ( int Team, unsigned long bPowered );
	void RabbitLeaderboardUpdateTime ( struct FString Time );
	void RabbitLeaderboardUpdateSlot ( int Index, struct FString PlayerName, struct FString Score );
	void RabbitLeaderboardShow ( unsigned long bVisible );
	void RabbitScoreboardActivePlayer ( int Index, unsigned long bVisible );
	void RabbitScoreboardUpdateSlot ( int Index, struct FString PlayerName, struct FString Score, struct FString Kills, struct FString Assists, struct FString Ping, struct FString ClassAbb, int Rank, int RankIcon );
	void TeamScoreboardUpdateSlot ( int Index, struct FString PlayerName, struct FString Score, struct FString Kills, struct FString Assists, struct FString Ping, struct FString ClassAbb, int Rank, int RankIcon );
	void SetOwnership ( );
	void UpdateEnergy ( float NewEnergy, float EnergyMax, struct FHeEnDisplay* Info );
	void TickGhostHealth ( float DeltaTime );
	void UpdateHealth ( float NewHealth, float HealthMax, struct FHeEnDisplay* Info );
	void DisplayHit ( struct FVector HitDir, int Damage, class UClass* DamageType );
	void ApplyNearDeathEffect ( float Value );
	void ApplyDirectionalDamageEffect ( int EffectIndex, float addValue );
	void PlayDamageEffectWithNoDirectionalIndicator ( float Amount );
	bool ChangeDamageEffectParameter ( struct FName ParamName, float changeValue );
	void TickDirectionalDamageEffect ( float DeltaTime );
	void TickHud ( float DeltaTime );
	int GetFrameNumberForVehicle ( class ATrVehicle* V );
	void ConfigureSkiSpeedSteps ( float SoftCap );
	int GetSkiSpeedStep ( float Speed );
	void ForceHealthUpdate ( int NewHealth, int NewMaxHealth );
	void ClearStats ( unsigned long clearScores );
	void SetAmmoCountTF ( class AWeapon* Wep, struct FString Ammo );
	void registerHUDView ( class UGFxObject* MovieClip, unsigned long secondPass );
	void UpdateHUDCredits ( int changeAmount, int newTotal );
	void UpdateRespawnTimer ( int TimeRemaining );
	void SetRespawnText ( struct FString Text );
	void UpdateRespawnText ( struct FString Text );
	void SetScoreboardTitle ( struct FString sValue );
	void UpdateCreditsAndStreaks ( unsigned long bVisible );
	void ShowCenterHUDElements ( unsigned long bVisible );
	void ConfigureHUDState ( unsigned long bAlive, unsigned long bReady, unsigned long bForceCredits );
	void ConfigureSpectatorHUD ( unsigned long bIsNeutral );
	void SystemEnableNotifies ( unsigned long bEnable );
	bool ShouldShowSpectatorReticule ( );
	void SetPlayerClassObjects ( struct FString ClassName, int PerkIcon1, int PerkIcon2 );
	void SetPlayerTeamIcon ( int Team );
	void SetPlayerRankIcon ( int IconIndex );
	void SetSpeedometer ( int Speed );
	void ClearHeroStatus ( );
	void UpdateHeroStatus ( struct FString Message, float ShowTime );
	void AddToPromptPanelTime ( struct FString Message, float EndTime, unsigned char messagePriority );
	void AddVGSEntry ( struct FString Command, unsigned long bBold );
	void LoadVGSMenu ( class UGFxObject* List );
	void ClearPromptPanelMessage ( struct FString Message );
	void ClearPromptPanel ( );
	void Init ( class ULocalPlayer* Player );
	void registerReticules ( class UGFxTrReticules* MC );
	bool Start ( unsigned long StartPaused );
	void DelegateSoundAccolade ( );
	void DelegateLoadVGSMenu ( class UGFxObject* List );
};

UClass* UGfxTrHud::pClassPointer = NULL;

// Class TribesGame.GFxTrReticules
// 0x002C (0x00A4 - 0x0078)
class UGFxTrReticules : public UGFxObject
{
public:
	class UGfxTrHud*                                   HUD;                                              		// 0x0078 (0x0004) [0x0000000000000000]              
	class AWorldInfo*                                  ThisWorld;                                        		// 0x007C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ReticulesMC;                                      		// 0x0080 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ActiveReticule;                                   		// 0x0084 (0x0004) [0x0000000000000000]              
	class AWeapon*                                     LastWeapon;                                       		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                LastCrossMode;                                    		// 0x008C (0x0004) [0x0000000000000000]              
	float                                              LastAccuracy;                                     		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              LastHitEnemyTime;                                 		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              LastReticuleDepth;                                		// 0x0098 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bVisible : 1;                                   		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                m_nCurrentReticuleIndex;                          		// 0x00A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53202 ];

		return pClassPointer;
	};

	void UpdateReticule ( class APawn* pPawn, unsigned long bForceUpdate );
	void SetReticuleVisible ( unsigned long bNewVisible );
	void Init ( class UGfxTrHud* H );
	void SetGenericPowerupPercentage ( int pPercentage );
	void SetVehiclePowerupPercentage ( int pPercentage );
	void SetLaserPowerupPercentage ( int pPercentage );
	void SetPowerupPercentage ( int pPercentage );
	void SetVehicleAmmoClip ( struct FString AmmoCount );
	void EnableVehicleAmmoClip ( );
	void DisableVehicleAmmoClip ( );
	void CallShowHit ( );
	void CallSetAccuracy ( int nAccuracy );
	int GetCurrentReticuleIndex ( );
	bool SetCustomReticule ( );
	void ChangeReticule ( int nIndex );
	void CallSetReticuleDepth ( float fDepth );
	void ASC_SetCustomReticule ( class UGFxObject* Data );
	void CallSetReticuleColor ( int nType );
	void CallShowReticule ( int nIndex );
};

UClass* UGFxTrReticules::pClassPointer = NULL;

// Class TribesGame.TrHUD
// 0x03BC (0x09BC - 0x0600)
class ATrHUD : public AUTGFxHudWrapper
{
public:
	int                                                m_nWinningTeam;                                   		// 0x0600 (0x0004) [0x0000000000000000]              
	int                                                m_nLastPerk1Icon;                                 		// 0x0604 (0x0004) [0x0000000000000000]              
	int                                                m_nLastPerk2Icon;                                 		// 0x0608 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bGameOver : 1;                                  		// 0x060C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      HasGlobalChatAsAlert : 1;                         		// 0x060C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bShowObjectives : 1;                              		// 0x060C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bIsControllerSkiing : 1;                        		// 0x060C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bStrobeIn : 1;                                  		// 0x060C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bEffectFadingIn : 1;                            		// 0x060C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bRestoreHUDState : 1;                             		// 0x060C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bLoadSequenceComplete : 1;                        		// 0x060C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bUpdateWhiteoutEffect : 1;                      		// 0x060C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bUpdateFumbledFlagEffect : 1;                   		// 0x060C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bPlayAward : 1;                                   		// 0x060C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bVotePending : 1;                                 		// 0x060C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bIsMainMenuOpen : 1;                              		// 0x060C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bIsSpectatorPlayerPanelVisible : 1;             		// 0x060C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      m_bIsSpectatorVehiclePanelVisible : 1;            		// 0x060C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      m_bIsSpectatorBookmarkPanelVisible : 1;           		// 0x060C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      m_bIsSpectatorObjectivePanelVisible : 1;          		// 0x060C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      m_bIsSpectatorFloatCameraPanelVisible : 1;        		// 0x060C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bAccoladePlaying : 1;                             		// 0x060C (0x0004) [0x0000000000000000] [0x00040000] 
	struct FString                                     m_sWinningPlayer;                                 		// 0x0610 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sLastClassName;                                 		// 0x061C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              TeamPlayerInfoMaxDist;                            		// 0x0628 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ObjectiveInfoMaxDist;                             		// 0x062C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      ColorFriend;                                      		// 0x0630 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      ColorEnemy;                                       		// 0x0634 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      LaserTargetTracePossible;                         		// 0x0638 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      LaserTargetTraceImprobable;                       		// 0x063C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class ATrDeployable* >                     m_OwnedDeployables;                               		// 0x0640 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ATrProj_Mine* >                      m_OwnedMines;                                     		// 0x064C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_LastMineCount;                                  		// 0x0658 (0x0004) [0x0000000000000000]              
	int                                                m_LastDeployableCount;                            		// 0x065C (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   MarkerBaseMIC;                                    		// 0x0660 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FLinearColor                                MarkerColorEnemy;                                 		// 0x0664 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                MarkerColorEnemy_IsFriend;                        		// 0x0674 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                MarkerColorFriendly;                              		// 0x0684 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                MarkerColorFriendly_IsFriend;                     		// 0x0694 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                MarkerColorNone;                                  		// 0x06A4 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	class UTexture2D*                                  MarkerLight;                                      		// 0x06B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  MarkerMedium;                                     		// 0x06B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  MarkerHeavy;                                      		// 0x06BC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  VehicleMarker;                                    		// 0x06C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  VehicleMarkerLight;                               		// 0x06C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  VehicleMarkerMedium;                              		// 0x06C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  VehicleMarkerHeavy;                               		// 0x06CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  VehicleMarkerNoDriver;                            		// 0x06D0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  FlagAtBase;                                       		// 0x06D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  FlagDropped;                                      		// 0x06D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  FlagHeldLight;                                    		// 0x06DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  FlagHeldMedium;                                   		// 0x06E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  FlagHeldHeavy;                                    		// 0x06E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  FlagHeldVehicle;                                  		// 0x06E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  FlagEmptyBase;                                    		// 0x06EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  HUDMarkerMissileIncoming;                         		// 0x06F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  HUDMarkerMissileLocking;                          		// 0x06F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  HUDMarkerMissileLocked;                           		// 0x06F8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  HUDMarkerMissileTarget;                           		// 0x06FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  HUDMarkerMissileTargetLocked;                     		// 0x0700 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  HUDMarkerLaserTarget;                             		// 0x0704 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  HUDMarkerLaserTargetAimPoint;                     		// 0x0708 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseInventoryStation;                             		// 0x070C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseRepairStation;                                		// 0x0710 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseVehicleStation;                               		// 0x0714 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseNoPower;                                      		// 0x0718 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseDeployableLevel1;                             		// 0x071C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseDeployableLevel2;                             		// 0x0720 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseDeployableLevel3;                             		// 0x0724 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseDeployableLevel4;                             		// 0x0728 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseDeployableLevel5;                             		// 0x072C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseGeneratorLevel1;                              		// 0x0730 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseGeneratorLevel2;                              		// 0x0734 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseGeneratorLevel3;                              		// 0x0738 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseGeneratorLevel4;                              		// 0x073C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseGeneratorLevel5;                              		// 0x0740 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseGeneratorLevel1_Down;                         		// 0x0744 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseGeneratorLevel2_Down;                         		// 0x0748 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseGeneratorLevel3_Down;                         		// 0x074C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseGeneratorLevel4_Down;                         		// 0x0750 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseGeneratorLevel5_Down;                         		// 0x0754 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseSensorLevel1;                                 		// 0x0758 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseSensorLevel2;                                 		// 0x075C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseSensorLevel3;                                 		// 0x0760 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseSensorLevel4;                                 		// 0x0764 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseSensorLevel5;                                 		// 0x0768 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseSensorLevel1_Down;                            		// 0x076C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseSensorLevel2_Down;                            		// 0x0770 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseSensorLevel3_Down;                            		// 0x0774 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseSensorLevel4_Down;                            		// 0x0778 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseSensorLevel5_Down;                            		// 0x077C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseTurretLevel1;                                 		// 0x0780 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseTurretLevel2;                                 		// 0x0784 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseTurretLevel3;                                 		// 0x0788 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseTurretLevel4;                                 		// 0x078C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseTurretLevel5;                                 		// 0x0790 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseTurretLevel1_Down;                            		// 0x0794 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseTurretLevel2_Down;                            		// 0x0798 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseTurretLevel3_Down;                            		// 0x079C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseTurretLevel4_Down;                            		// 0x07A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  BaseTurretLevel5_Down;                            		// 0x07A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  DeployableClaymore;                               		// 0x07A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  DeployableJammer;                                 		// 0x07AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  DeployableMine;                                   		// 0x07B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  DeployableSensor;                                 		// 0x07B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  DeployableShield;                                 		// 0x07B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  DeployableTurret;                                 		// 0x07BC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  AmmoDropPickup;                                   		// 0x07C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  SpottedTarget;                                    		// 0x07C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  SpottedTarget_MotionMine;                         		// 0x07C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                InfoChatColorIdx;                                 		// 0x07CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                EnemyChatColorIdx;                                		// 0x07D0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                FriendlyChatColorIdx;                             		// 0x07D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SelfChatColorIdx;                                 		// 0x07D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                WhisperChatColorIdx;                              		// 0x07DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      FriendlyChatColor;                                		// 0x07E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      EnemyChatColor;                                   		// 0x07E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      TeamChatColor;                                    		// 0x07E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      WhisperChatColor;                                 		// 0x07EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UMaterialInstanceConstant*                   LowAmmoMic;                                       		// 0x07F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterial*                                   MapMaterialReference;                             		// 0x07F4 (0x0004) [0x0000000000000000]              
	class UGFxTrUI_VehicleMenu*                        VehicleMenuMovie;                                 		// 0x07F8 (0x0004) [0x0000000000000000]              
	class UGFxTrUI_TeamSelectionMenu*                  TeamSelectionMenuMovie;                           		// 0x07FC (0x0004) [0x0000000000000000]              
	class UTrScoreboard*                               Scoreboard;                                       		// 0x0800 (0x0004) [0x0000000000000000]              
	class UTrRabbitLeaderboard*                        RabbitLeaderboard;                                		// 0x0804 (0x0004) [0x0000000000000000]              
	class UTrHUDTeamCTFStats*                          HUDTeamCTFStats;                                  		// 0x0808 (0x0004) [0x0000000000000000]              
	class UTrTeamRabbitStats*                          TeamRabbitStats;                                  		// 0x080C (0x0004) [0x0000000000000000]              
	class UTrArenaStats*                               ArenaStats;                                       		// 0x0810 (0x0004) [0x0000000000000000]              
	class UTrDaDStats*                                 DaDStats;                                         		// 0x0814 (0x0004) [0x0000000000000000]              
	class UTrCaHStats*                                 CaHStats;                                         		// 0x0818 (0x0004) [0x0000000000000000]              
	class UGfxTrHud*                                   m_GFxHud;                                         		// 0x081C (0x0004) [0x0000000000000000]              
	float                                              m_fFriendlyGeneratorRestoreTime;                  		// 0x0820 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fEnemyGeneratorRestoreTime;                     		// 0x0824 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      m_MusicManagerClass;                              		// 0x0828 (0x0004) [0x0000000000000000]              
	class UClass*                                      m_GameClass;                                      		// 0x082C (0x0004) [0x0000000000000000]              
	class ATrPlayerController*                         TrPlayerOwner;                                    		// 0x0830 (0x0004) [0x0000000000000000]              
	class UMaterialEffect*                             m_SkiEffect;                                      		// 0x0834 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_SkiEffectMaterialInstance;                      		// 0x0838 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fControllerSkiSpeed;                            		// 0x083C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSkiEffectMaxIntensity;                         		// 0x0840 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSkiEffectMinIntensity;                         		// 0x0844 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSkiEffectFadeInTime;                           		// 0x0848 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSkiEffectFadeOutTime;                          		// 0x084C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSkiEffectStrobeTime;                           		// 0x0850 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialEffect*                             m_PickupFlashMaterialEffect;                      		// 0x0854 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_PickupFlashMaterialInstance;                    		// 0x0858 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_PickupFlashFadeOutSpeed;                        		// 0x085C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialEffect*                             m_InvulnerableMaterialEffect;                     		// 0x0860 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_InvulnerableMaterialInstance;                   		// 0x0864 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_InvulnerableFadeOutSpeed;                       		// 0x0868 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialEffect*                             m_ShieldMaterialEffect;                           		// 0x086C (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_ShieldMaterialInstance;                         		// 0x0870 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_ShieldFadeOutSpeed;                             		// 0x0874 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_ShieldHitFadeInSpeed;                           		// 0x0878 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_ShieldHitFadeOutSpeed;                          		// 0x087C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialEffect*                             m_JammerPackMaterialEffect;                       		// 0x0880 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_JammerPackMaterialInstance;                     		// 0x0884 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_JammerPackFadeOutSpeed;                         		// 0x0888 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastCreditTotal;                                  		// 0x088C (0x0004) [0x0000000000000000]              
	int                                                LastChangeResTime;                                		// 0x0890 (0x0004) [0x0000000000000000]              
	int                                                LastChangeResCheckTime;                           		// 0x0894 (0x0004) [0x0000000000000000]              
	class UMaterialEffect*                             m_VignetteMaterialEffect;                         		// 0x0898 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_VignetteMaterialInstance;                       		// 0x089C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_VignetteFadeSpeed;                              		// 0x08A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_VignetteFadeTarget;                             		// 0x08A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_VignetteValueMultiplier;                        		// 0x08A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialEffect*                             m_WhiteoutMaterialEffect;                         		// 0x08AC (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_WhiteoutMaterialInstance;                       		// 0x08B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_WhiteoutFadeOutSpeed;                           		// 0x08B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCurrentWhiteoutValue;                          		// 0x08B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialEffect*                             m_FumbledFlagMaterialEffect;                      		// 0x08BC (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_FumbledFlagMaterialInstance;                    		// 0x08C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_FumbledFlagFadeOutSpeed;                        		// 0x08C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCurrentFumbledFlagValue;                       		// 0x08C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AwardBaseSize;                                    		// 0x08CC (0x0004) [0x0000000000000000]              
	float                                              AwardBaseHeight;                                  		// 0x08D0 (0x0004) [0x0000000000000000]              
	float                                              AwardTimelineLength;                              		// 0x08D4 (0x0004) [0x0000000000000000]              
	float                                              AwardFadeInScale;                                 		// 0x08D8 (0x0004) [0x0000000000000000]              
	float                                              AwardTimelineLoc;                                 		// 0x08DC (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   AwardMIC;                                         		// 0x08E0 (0x0004) [0x0000000000000000]              
	int                                                m_nPotentialSeekingTargetHUDRotationRate;         		// 0x08E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPotentialSeekingTargetHUDZoomTime;             		// 0x08E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPotentialSeekingTargetHUDZoomStart;            		// 0x08EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPotentialSeekingTargetHUDZoomEnd;              		// 0x08F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPotentialSeekingTargetHUDZoomOpacityStart;     		// 0x08F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPotentialSeekingTargetHUDZoomOpacityEnd;       		// 0x08F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSeekingTargetHUDZoomTime;                      		// 0x08FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSeekingTargetHUDZoomStart;                     		// 0x0900 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSeekingTargetHUDZoomEnd;                       		// 0x0904 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSeekingTargetHUDZoomOpacityStart;              		// 0x0908 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSeekingTargetHUDZoomOpacityEnd;                		// 0x090C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInitialSeekingTargetYaw;                       		// 0x0910 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fHealthBarPlacementX;                           		// 0x0914 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fHealthBarPlacementY;                           		// 0x0918 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fHealthBarWidth;                                		// 0x091C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fHealthBarHeight;                               		// 0x0920 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fNamePlacementX;                                		// 0x0924 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fNamePlacementY;                                		// 0x0928 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCaratPlacementX;                               		// 0x092C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCaratPlacementY;                               		// 0x0930 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fVehicleNamePlacementX;                         		// 0x0934 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fVehicleNamePlacementY;                         		// 0x0938 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMineNamePlacementX;                            		// 0x093C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMineNamePlacementY;                            		// 0x0940 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMineDeployerNamePlacementX;                    		// 0x0944 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMineDeployerNamePlacementY;                    		// 0x0948 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FFontRenderInfo                             m_nNameFontRenderInfo;                            		// 0x094C (0x0028) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UUberPostProcessEffect*                      m_UperPPEffect;                                   		// 0x0974 (0x0004) [0x0000000000000000]              
	class UTrSpectatorHUDCache*                        m_SpectatorHUDCache;                              		// 0x0978 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FQueuedAccolade >                   QueuedAccolades;                                  		// 0x097C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FOverheadNumber >                   m_OverheadNumbers;                                		// 0x0988 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fOverheadNumberZSpeed;                          		// 0x0994 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      m_OverheadNumberColorMin;                         		// 0x0998 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      m_OverheadNumberColorMax;                         		// 0x099C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fOverheadNumberTotalTime;                       		// 0x09A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fOverheadNumberFadeTime;                        		// 0x09A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fOverheadNumberScaleTime;                       		// 0x09A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fOverheadNumberMaxScaleAmount;                  		// 0x09AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fOverheadNumberColorizeTimeMin;                 		// 0x09B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fOverheadNumberColorizeTimeMax;                 		// 0x09B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMarker2DDistance;                              		// 0x09B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53246 ];

		return pClassPointer;
	};

	void UpdateOwnedItems ( );
	void MineReplicated ( class ATrProj_Mine* NewMine );
	void DeployableReplicated ( class ATrDeployable* NewDep );
	void ClearQueuedAccoladesTimer ( );
	void RunQueuedAccoladesTimer ( unsigned long bIsBadge );
	void CheckQueuedAccolades ( );
	void QueueAccolade ( int Icon, struct FString Title, struct FString Subtitle, unsigned long bIsBadge );
	void PlayAward ( class UCanvas* DrawCanvas );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* DrawCanvas, struct FVector CameraPosition, struct FVector CameraDir );
	void eventTick ( float DeltaTime );
	void UpdateOverheadNumbers ( float DeltaTime );
	void AddOverheadNumber ( int Value, struct FVector4 WorldLocation );
	void TestNumber ( int Value );
	void OnViewTargetChange ( class AActor* NewViewTarget );
	void HideAllSpectatorPanels ( );
	void UpdateSpectatorFloatCameraPanel ( );
	void HideSpectatorFloatCameraPanel ( );
	void ShowSpectatorFloatCameraPanel ( );
	void UpdateSpectatorObjectivePanel ( class AActor* ObjectiveActor );
	void HideSpectatorObjectivePanel ( );
	void ShowSpectatorObjectivePanel ( );
	void UpdateSpectatorBookmarkPanel ( class ATrCamera_SpectatorBookmark* BookMark );
	void HideSpectatorBookmark ( );
	void ShowSpectatorBookmark ( );
	void UpdateSpectatorVehiclePanel ( class ATrVehicle* ViewTargetVehicle );
	void HideSpectatorVehicle ( );
	void ShowSpectatorVehicle ( );
	void UpdateSpectatorPlayerPanel ( class ATrPawn* ViewTargetTrPawn );
	void HideSpectatorPlayer ( );
	void ShowSpectatorPlayer ( );
	void EnableGameTypeHUD ( );
	void KickVoteMessage ( unsigned long bComplete, struct FString Message );
	void HideGlobalAlert ( );
	void SetPlayerClassObjects ( struct FString ClassName, int PerkIcon1, int PerkIcon2 );
	void SendLocalMessageToChat ( struct FString Message );
	void SendLocalMessageToGlobalAlert ( struct FString Message );
	struct FString StripTag ( struct FString sValue );
	void ChatMessageReceived ( int Channel, struct FString Sender, struct FString Message );
	void LocalizedMessage ( class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, class UObject* OptionalObject );
	void UpdateWhiteoutEffect ( );
	void ClearWhiteout ( );
	void Whiteout ( float Speed, float Amount );
	void UpdateFumbledFlagEffect ( );
	void FumbleFlag ( float Speed );
	void UpdateFadeEffect ( );
	void UpdateJammerEffect ( );
	void PulseShieldEffect ( );
	void UpdateShieldEffect ( );
	void UpdateInvulnerableEfect ( );
	void PulsePickupFlashEffect ( float PulseAmount, float PulseSpeed );
	void UpdatePickupFlashEffect ( );
	void UpdateSkiEffect ( );
	float GetRemainingEnemyGeneratorRestoreTime ( );
	float GetRemainingFriendlyGeneratorRestoreTime ( );
	void eventPostRender ( );
	bool GetEdgeScreenCoordinates ( class UCanvas* inCanvas, struct FVector CameraPosition, struct FVector CameraDir, struct FVector ObjectLocation, struct FVector* ScreenLocation );
	struct FVector DrawMICMarker ( class UMaterialInstanceConstant* MarkerMIC, struct FVector Placement, class UCanvas* DrawCanvas, struct FVector2D MarkerSize, struct FString markText, unsigned long bFriend, float distScale );
	void DrawHealthBar ( class UMaterialInstanceConstant* HealthBarMIC, unsigned long bFriend, struct FVector Placement, class UCanvas* DrawCanvas, float PlacementX, float PlacementY, float Width, float Height );
	void DrawSmallText ( struct FString ShowText, unsigned long bFriend, struct FVector Placement, class UCanvas* DrawCanvas );
	struct FVector DrawColoredMarkerText ( struct FString ShowText, struct FColor TextColor, struct FVector Placement, class UCanvas* DrawCanvas, float ScaleX, float ScaleY );
	struct FVector DrawMarkerText ( struct FString ShowText, unsigned long bFriend, struct FVector Placement, class UCanvas* DrawCanvas, unsigned long bBuddy );
	struct FVector DrawRotatedMarker ( class UTexture2D* Marker, struct FVector Placement, struct FRotator Rot, class UCanvas* DrawCanvas, struct FString markText, unsigned long bFriend, float Alpha, float distScale );
	struct FVector DrawMarker ( class UTexture2D* Marker, struct FVector Placement, class UCanvas* DrawCanvas, struct FString markText, unsigned long bFriend, float Alpha, float distScale );
	bool CheckCrosshairOnFriendly ( );
	void ClearCrosshairOnFriendly ( );
	void CompleteTeamSelectionMenuClose ( );
	void CompleteVehicleMenuClose ( );
	void RemoveMovies ( );
	void HideMenus ( );
	void RestoreHUDState ( );
	void ResolutionChanged ( );
	void RabbitScoreboardActivePlayer ( int Index, unsigned long bVisible );
	void TeamScoreboardActivePlayer ( int Index );
	void RabbitScoreboardUpdateTime ( struct FString Time );
	void TeamScoreboardUpdateTime ( struct FString Time );
	void TeamScoreboardUpdateTeamScore ( int Index, int Score );
	void RabbitScoreboardUpdateSlot ( int Index, struct FString PlayerName, struct FString Score, struct FString Kills, struct FString Assists, struct FString Ping, struct FString ClassAbb, int Rank, int RankIcon );
	void TeamScoreboardUpdateSlot ( int Index, struct FString PlayerName, struct FString Score, struct FString Kills, struct FString Assists, struct FString Ping, struct FString ClassAbb, int Rank, int RankIcon );
	void RabbitScoreboardShow ( unsigned long bVisible );
	void TeamScoreboardShow ( unsigned long bVisible );
	void UpdateHUDCredits ( int changeAmount, int newTotal );
	void UpdateRespawnTimer ( int TimeRemaining );
	void UpdateRespawnText ( struct FString Text );
	void ShowCenterHUDElements ( unsigned long bShow );
	void ShowHUDPlayerAlive ( );
	void ShowHUDPlayerSpawning ( );
	void HideHUDElements ( unsigned long bShowStats, unsigned long bForceCredits );
	void ClearSpectatorHUDCache ( );
	void CreateSpectatorHUDCache ( );
	void OnSpectate ( unsigned long bUpdateTeamState );
	void AddFlyingIcon ( int iconNumber, struct FString Description, struct FString Points, int bIsBadge );
	void AddUpdateToKillMessage ( int RankIcon, int PlayerIcon, struct FString PlayerName, struct FString Message );
	void ClearHelpText ( );
	void AddToHelpText ( struct FString Title, struct FString Body, float PictureIndex, struct FString footer, struct FString SuppressString );
	void HideVGSMenu ( );
	void UpdateVGSMenu ( );
	void ClearPromptPanelMessage ( struct FString Message );
	void ClearHeroStatus ( );
	void AddToHeroStatus ( struct FString Message, float ShowTime );
	void ClearPromptPanel ( );
	void AddToPromptPanelTime ( struct FString Message, float EndTime, unsigned char Priority );
	void AddToPromptPanel ( struct FString Message, unsigned char Priority );
	void AddUpdateToCombatLog ( int CombatType, struct FString Aggressor, int WeaponIcon, struct FString Victim );
	void SetPowerOscillation ( unsigned long bEnable );
	void ToggleTeamSelectionMenu ( );
	void ToggleVehicleMenu ( );
	void ToggleMovieHUD ( );
	void TogglePauseMenu ( );
	void ToggleSkiEffect ( unsigned long bEnabled, float fSpeed );
	void ScaleformJoystickInputEvent ( float leftAngle, float rightAngle );
	void FadeInSummary ( );
	void ShowEnding ( );
	void PlayMatchOver ( int Winner, struct FString WinnerName );
	void ShowRoundEnding ( );
	void PlayRoundOver ( int WinningTeam );
	void Fade ( float FadeTarget, float FadeSpeed, float bForceFadeInStartAlpha );
	void FadeInTimer ( );
	void InitializeGameHUD ( );
	void PostBeginPlay ( );
	void SetShowScores ( unsigned long bEnableShowScores );
	void ShowSpectatorControls ( unsigned long bForceEnabled );
	void CreateHUDMovie ( );
	void ShowDebugInfo ( float* out_YL, float* out_YPos );
};

UClass* ATrHUD::pClassPointer = NULL;

// Class TribesGame.TrVGSNode
// 0x0060 (0x009C - 0x003C)
class UTrVGSNode : public UObject
{
public:
	struct FName                                       m_KeyBind;                                        		// 0x003C (0x0008) [0x0000000000000000]              
	struct FString                                     m_MenuString;                                     		// 0x0044 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< class UClass* >                            m_Children;                                       		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            m_Commands;                                       		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            m_IgnoreCTFCommand;                               		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            m_IgnoreTeamRabbitCommand;                        		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            m_IgnoreArenaCommand;                             		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            m_IgnoreCaHCommand;                               		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bIgnoreCTF : 1;                                 		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bIgnoreTeamRabbit : 1;                          		// 0x0098 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bIgnoreArena : 1;                               		// 0x0098 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bIgnoreCaH : 1;                                 		// 0x0098 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bDrawHeader : 1;                                		// 0x0098 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53279 ];

		return pClassPointer;
	};

	void GetGametypeSpecificChildrenNodes ( class UClass* GameClass, TArray< class UClass* >* outVGSNodeChildrenClasses );
	void GetGametypeSpecificCommands ( class UClass* GameClass, TArray< unsigned char >* outGametypeSpecificCommands );
	bool VerifyVGSChild ( class UClass* VGSNodeClass, class UClass* GameClass );
	bool VerifyVGSCommandEntry ( unsigned char Command, class UClass* GameClass );
	class UClass* ProcessKeyInput ( struct FName Key, class UTrPlayerInput* PlayerInput, class UClass* GameClass );
};

UClass* UTrVGSNode::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfoList
// 0x000C (0x0048 - 0x003C)
class UTrFamilyInfoList : public UObject
{
public:
	TArray< struct FString >                           ClassList;                                        		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53281 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfoList::pClassPointer = NULL;

// Class TribesGame.TrCamera_SpectatorBookmark
// 0x02B9 (0x0589 - 0x02D0)
class ATrCamera_SpectatorBookmark : public ACameraActor
{
public:
	struct FString                                     BEBase;                                           		// 0x02D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DSBase;                                           		// 0x02DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFBEGeneratorRoom;                               		// 0x02E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFDSGeneratorRoom;                               		// 0x02F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFMapOverhead;                                   		// 0x0300 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFBEMidfield;                                    		// 0x030C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFDSMidfield;                                    		// 0x0318 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFBEVehiclePad;                                  		// 0x0324 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFDSVehiclePad;                                  		// 0x0330 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFBESpawn;                                       		// 0x033C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFDSSpawn;                                       		// 0x0348 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFBESensor;                                      		// 0x0354 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFDSSensor;                                      		// 0x0360 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFBETurretA;                                     		// 0x036C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFBETurretB;                                     		// 0x0378 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFBETurretC;                                     		// 0x0384 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFDSTurretA;                                     		// 0x0390 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFDSTurretB;                                     		// 0x039C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFDSTurretC;                                     		// 0x03A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFBEBackRoute;                                   		// 0x03B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CTFDSBackRoute;                                   		// 0x03C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TDMEast;                                          		// 0x03CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TDMWest;                                          		// 0x03D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TDMNorth;                                         		// 0x03E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TDMSouth;                                         		// 0x03F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TDMCenter;                                        		// 0x03FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TDMMapOverhead;                                   		// 0x0408 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DdDryHigh;                                        		// 0x0414 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DdDryLow;                                         		// 0x0420 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DdBEWide;                                         		// 0x042C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DdDSWide;                                         		// 0x0438 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DdDockHigh;                                       		// 0x0444 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DdDockLow;                                        		// 0x0450 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DdBEBunker;                                       		// 0x045C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DdDSBunker;                                       		// 0x0468 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DdBEBackEntrance;                                 		// 0x0474 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DdDSBackEntrance;                                 		// 0x0480 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DNFish;                                           		// 0x048C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XFBSW;                                            		// 0x0498 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XFRSW;                                            		// 0x04A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XFBERed;                                          		// 0x04B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XFDSRed;                                          		// 0x04BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XFBEBlue;                                         		// 0x04C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XFDSBlue;                                         		// 0x04D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XFBEBackstop;                                     		// 0x04E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XFDSBackstop;                                     		// 0x04EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XFBECRoom;                                        		// 0x04F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XFDSCRoom;                                        		// 0x0504 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NKTower;                                          		// 0x0510 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NKTunnel;                                         		// 0x051C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NKWhalebones;                                     		// 0x0528 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NKMountainView;                                   		// 0x0534 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NKMountainSide;                                   		// 0x0540 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BTBase;                                           		// 0x054C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BTBaseInterior;                                   		// 0x0558 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BTTunnelEast;                                     		// 0x0564 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BTTunnelWest;                                     		// 0x0570 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GenericCamera;                                    		// 0x057C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned char                                      m_BookmarkDescription;                            		// 0x0588 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53406 ];

		return pClassPointer;
	};

	struct FString GetSpectatorName ( );
	struct FString GetDescription ( );
};

UClass* ATrCamera_SpectatorBookmark::pClassPointer = NULL;

// Class TribesGame.TrDevice_Pack
// 0x0014 (0x0878 - 0x0864)
class ATrDevice_Pack : public ATrDevice
{
public:
	float                                              m_fDefaultPowerPoolCostPerSec;                    		// 0x0864 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPowerPoolCostInfo >                m_PowerPoolInfo;                                  		// 0x0868 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_CachedPowerPoolCostPerSec;                      		// 0x0874 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53445 ];

		return pClassPointer;
	};

	void SendToFiringState ( unsigned char FireModeNum );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void ClientForceInactive ( );
	void ClientForceActive ( );
	void ForceActivate ( );
	void ServerToggleActivate ( );
	void ToggleActivate ( );
	void ConsumePowerPool ( float DeltaTime );
	bool CanBeActive ( );
	float GetPowerPool ( class ATrPawn* aPawn );
	bool UsesPower ( );
};

UClass* ATrDevice_Pack::pClassPointer = NULL;

// Class TribesGame.TrRank
// 0x0018 (0x0054 - 0x003C)
class UTrRank : public UObject
{
public:
	int                                                Rank;                                             		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                IconIndex;                                        		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                RequiredXP;                                       		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FString                                     FriendlyName;                                     		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53705 ];

		return pClassPointer;
	};

};

UClass* UTrRank::pClassPointer = NULL;

// Class TribesGame.TrDmgType_BaseTurret
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_BaseTurret : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53722 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_BaseTurret::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Melee
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Melee : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53745 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Melee::pClassPointer = NULL;

// Class TribesGame.TrDmgType_BeowulfPilot
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_BeowulfPilot : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53746 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_BeowulfPilot::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Bullet
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Bullet : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53748 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Bullet::pClassPointer = NULL;

// Class TribesGame.TrDmgType_BeowulfGunner
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_BeowulfGunner : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53747 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_BeowulfGunner::pClassPointer = NULL;

// Class TribesGame.TrDmgType_GravCyclePilot
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_GravCyclePilot : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53749 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_GravCyclePilot::pClassPointer = NULL;

// Class TribesGame.TrDmgType_ShrikePilot
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_ShrikePilot : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53750 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_ShrikePilot::pClassPointer = NULL;

// Class TribesGame.TrDmgType_DeliveryPod
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_DeliveryPod : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53751 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_DeliveryPod::pClassPointer = NULL;

// Class TribesGame.TrDmgType_TacticalStrike
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_TacticalStrike : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53752 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_TacticalStrike::pClassPointer = NULL;

// Class TribesGame.TrDmgType_OrbitalStrike
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_OrbitalStrike : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53753 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_OrbitalStrike::pClassPointer = NULL;

// Class TribesGame.TrInventoryHelper
// 0x0000 (0x003C - 0x003C)
class UTrInventoryHelper : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53755 ];

		return pClassPointer;
	};

	class UClass* GetFamilyClass ( int ClassId );
	class UClass* GetSkinClass ( int skinId );
	class UClass* GetEquipClass ( int DeviceID );
};

UClass* UTrInventoryHelper::pClassPointer = NULL;

// Class TribesGame.TrSpectatorHUDCache
// 0x01AC (0x01E8 - 0x003C)
class UTrSpectatorHUDCache : public UObject
{
public:
	unsigned long                                      CachedPlayerPanelFlagCarried : 1;                 		// 0x003C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      CachedVehiclePanelFlagCarried : 1;                		// 0x003C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      CachedVehiclePanelPrimaryWeaponVisible : 1;       		// 0x003C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      CachedVehiclePanelSecondaryWeaponVisible : 1;     		// 0x003C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	struct FString                                     CachedPlayerPanelPlayerName;                      		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedPlayerPanelClassName;                       		// 0x004C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedPlayerPanelNextRegen;                       		// 0x0058 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CachedPlayerPanelHealthBarFill;                   		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedPlayerPanelHealth;                          		// 0x0068 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CachedPlayerPanelEnergyFillBar;                   		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedPlayerPanelEnergy;                          		// 0x0078 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedPlayerPanelPrimaryWeaponName;               		// 0x0084 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedPlayerPanelPrimaryAmmoCount;                		// 0x0090 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedPlayerPanelSecondaryWeaponName;             		// 0x009C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedPlayerPanelSecondaryAmmoCount;              		// 0x00A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CachedPlayerPanelOffhandIcon;                     		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedPlayerPanelOffhandAmmo;                     		// 0x00B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedPlayerPanelOffhandName;                     		// 0x00C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CachedPlayerPanelPackIcon;                        		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedPlayerPanelPackAmmo;                        		// 0x00D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedPlayerPanelPackName;                        		// 0x00E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CachedPlayerPanelPerk1Icon;                       		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedPlayerPanelPerk1Name;                       		// 0x00F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CachedPlayerPanelPerk2Icon;                       		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedPlayerPanelPerk2Name;                       		// 0x0100 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CachedPlayerPanelSkiFillBar;                      		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedPlayerPanelSkiSpeed;                        		// 0x0110 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CachedPlayerPanelSelected;                        		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedVehiclePanelVehicleName;                    		// 0x0120 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedVehiclePanelDriverName;                     		// 0x012C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedVehiclePanelPassengerName;                  		// 0x0138 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CachedVehiclePanelHealthFillBar;                  		// 0x0144 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedVehiclePanelHealth;                         		// 0x0148 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CachedVehiclePanelEnergyFillBar;                  		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedVehiclePanelEnergy;                         		// 0x0158 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedVehiclePanelPrimaryWeaponName;              		// 0x0164 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CachedVehiclePanelPrimaryWeaponReady;             		// 0x0170 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedVehiclePanelSecondaryWeaponName;            		// 0x0174 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CachedVehiclePanelSecondaryWeaponReady;           		// 0x0180 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedVehiclePanelSkiFillBar;                     		// 0x0184 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedVehiclePanelSkiSpeed;                       		// 0x0188 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CachedVehiclePanelSelected;                       		// 0x0194 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedBookmarkPanelTitle;                         		// 0x0198 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedBookmarkPanelName;                          		// 0x01A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedObjectivePanelObjectiveName;                		// 0x01B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedObjectivePanelObjectiveDescription;         		// 0x01BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CachedObjectivePanelHealthFillFrameIndex;         		// 0x01C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedObjectivePanelHealth;                       		// 0x01CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedFloatCameraPanelName;                       		// 0x01D0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedFloatCameraPanelDescription;                		// 0x01DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53762 ];

		return pClassPointer;
	};

};

UClass* UTrSpectatorHUDCache::pClassPointer = NULL;

// Class TribesGame.GfxTrHudTeam
// 0x0018 (0x0C44 - 0x0C2C)
class UGfxTrHudTeam : public UGfxTrHud
{
public:
	class UGFxObject*                                  ScoreBarMC[ 0x2 ];                                		// 0x0C2C (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  ScoreTF[ 0x2 ];                                   		// 0x0C34 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  FlagCarrierTF[ 0x2 ];                             		// 0x0C3C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53979 ];

		return pClassPointer;
	};

	struct FString GetRank ( class APlayerReplicationInfo* PRI );
	void UpdateGameHUD ( class AUTPlayerReplicationInfo* PRI );
	void ClearStats ( unsigned long clearScores );
	class UGFxObject* InitMessageRow ( );
	void Init ( class ULocalPlayer* Player );
};

UClass* UGfxTrHudTeam::pClassPointer = NULL;

// Class TribesGame.TrLoginManager
// 0x001C (0x0058 - 0x003C)
class UTrLoginManager : public UObject
{
public:
	unsigned long                                      bRemember : 1;                                    		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWaitingForLoginWaitPopup : 1;                    		// 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	struct FString                                     LoginName;                                        		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LoginPassword;                                    		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54142 ];

		return pClassPointer;
	};

	void PopupData ( class UGFxObject* Obj );
	void LoginWaitPopup ( );
	void SubmitPlayerName ( struct FString PlayerName );
	void Logout ( );
	void RetryLogin ( );
	void OnUserLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode );
	bool Login ( struct FString UserName, struct FString Password, unsigned long bShouldRemember );
	void Initialize ( );
};

UClass* UTrLoginManager::pClassPointer = NULL;

// Class TribesGame.TrPageManager
// 0x01A8 (0x01E4 - 0x003C)
class UTrPageManager : public UObject
{
public:
	int                                                NumDeal;                                          		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                NumBundle;                                        		// 0x0040 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Main*                             MainPage;                                         		// 0x0044 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Game*                             GamePage;                                         		// 0x0048 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Login*                            LoginPage;                                        		// 0x004C (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Class*                            ClassPage;                                        		// 0x0050 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Equip*                            EquipPage;                                        		// 0x0054 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Store*                            StorePage;                                        		// 0x0058 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Queued*                           QueuedPage;                                       		// 0x005C (0x0004) [0x0000000000000000]              
	class UGFxTrPage_RoamCTF*                          RoamCTFPage;                                      		// 0x0060 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_RoamTDM*                          RoamTDMPage;                                      		// 0x0064 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Social*                           SocialPage;                                       		// 0x0068 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Friends*                          FriendsPage;                                      		// 0x006C (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Followers*                        FollowersPage;                                    		// 0x0070 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_BlockedPlayers*                   BlockedPlayersPage;                               		// 0x0074 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Classes*                          ClassesPage;                                      		// 0x0078 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_PlayNow*                          PlayNowPage;                                      		// 0x007C (0x0004) [0x0000000000000000]              
	class UGFxTrPage_WatchNow*                         WatchNowPage;                                     		// 0x0080 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Profile*                          ProfilePage;                                      		// 0x0084 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Badges*                           BadgesPage;                                       		// 0x0088 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Accolades*                        AccoladesPage;                                    		// 0x008C (0x0004) [0x0000000000000000]              
	class UGFxTrPage_BuyGold*                          BuyGoldPage;                                      		// 0x0090 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Vehicle*                          VehiclePage;                                      		// 0x0094 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_BuyBoost*                         BuyBoostPage;                                     		// 0x0098 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Bundles*                          BundlesPage;                                      		// 0x009C (0x0004) [0x0000000000000000]              
	class UGFxTrPage_NameChange*                       NameChangePage;                                   		// 0x00A0 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ClanTagChange*                    ClanTagChangePage;                                		// 0x00A4 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Settings*                         SettingsPage;                                     		// 0x00A8 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Extras*                           ExtrasPage;                                       		// 0x00AC (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Loadouts*                         LoadoutsPage;                                     		// 0x00B0 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_FriendActions*                    FriendActionsPage;                                		// 0x00B4 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_FollowerActions*                  FollowerActionsPage;                              		// 0x00B8 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_JoinMatch*                        JoinMatchPage;                                    		// 0x00BC (0x0004) [0x0000000000000000]              
	class UGFxTrPage_RoamRabbit*                       RoamRabbitPage;                                   		// 0x00C0 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_RoamArena*                        RoamArenaPage;                                    		// 0x00C4 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_RoamCAH*                          RoamCAHPage;                                      		// 0x00C8 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_FriendJoin*                       FriendJoinPage;                                   		// 0x00CC (0x0004) [0x0000000000000000]              
	class UGFxTrPage_QuickMatch*                       QuickMatchPage;                                   		// 0x00D0 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ClassSelect*                      ClassSelectPage;                                  		// 0x00D4 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_RankedMatch*                      RankedMatchPage;                                  		// 0x00D8 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_CustomMatch*                      CustomMatchPage;                                  		// 0x00DC (0x0004) [0x0000000000000000]              
	class UGFxTrPage_VideoWindow*                      VideoWindowPage;                                  		// 0x00E0 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_HUDSettings*                      HUDSettingsPage;                                  		// 0x00E4 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_RoamingMatch*                     RoamingMatchPage;                                 		// 0x00E8 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_VideoGraphics*                    VideoGraphicsPage;                                		// 0x00EC (0x0004) [0x0000000000000000]              
	class UGFxTrPage_TrainingMatch*                    TrainingMatchPage;                                		// 0x00F0 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_VideoSettings*                    VideoSettingsPage;                                		// 0x00F4 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_AudioSettings*                    AudioSettingsPage;                                		// 0x00F8 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_RegionSettings*                   RegionSettingsPage;                               		// 0x00FC (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ControlSettings*                  ControlSettingsPage;                              		// 0x0100 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_VideoResolution*                  VideoResolutionPage;                              		// 0x0104 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_VideoResolutionTypes*             VideoResolutionTypesPage;                         		// 0x0108 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_NotificationSettings*             NotificationSettingsPage;                         		// 0x010C (0x0004) [0x0000000000000000]              
	class UGFxTrPage_WhisperSettings*                  WhisperSettingsPage;                              		// 0x0110 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_RentServer*                       RentServerPage;                                   		// 0x0114 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ManageServers*                    ManageServersPage;                                		// 0x0118 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ManageServer*                     ManageServerPage;                                 		// 0x011C (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ManageProfiles*                   ManageProfilesPage;                               		// 0x0120 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ManageProfile*                    ManageProfilePage;                                		// 0x0124 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_GameRules*                        GameRulesPage;                                    		// 0x0128 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_MapRotation*                      MapRotationPage;                                  		// 0x012C (0x0004) [0x0000000000000000]              
	class UGFxTrPage_GameMapSetup*                     GameMapSetupPage;                                 		// 0x0130 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_GameType*                         GameTypePage;                                     		// 0x0134 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_GameTypeFilter*                   GameTypeFilterPage;                               		// 0x0138 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_RotationType*                     RotationTypePage;                                 		// 0x013C (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ChangeMap*                        ChangeMapPage;                                    		// 0x0140 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_Party*                            PartyPage;                                        		// 0x0144 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_PartyAction*                      PartyActionPage;                                  		// 0x0148 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_PartyInvite*                      PartyInvitePage;                                  		// 0x014C (0x0004) [0x0000000000000000]              
	class UGFxTrPage_PartyMember*                      PartyMemberPage;                                  		// 0x0150 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ServerTime*                       ServerTimePage;                                   		// 0x0154 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ServerScoring*                    ServerScoringPage;                                		// 0x0158 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ServerPlayer*                     ServerPlayerPage;                                 		// 0x015C (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ServerTeam*                       ServerTeamPage;                                   		// 0x0160 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ServerBase*                       ServerBasePage;                                   		// 0x0164 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ServerVehicle*                    ServerVehiclePage;                                		// 0x0168 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ServerCallin*                     ServerCallinPage;                                 		// 0x016C (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ServerEditCallin*                 ServerEditCallinPage;                             		// 0x0170 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ServerClasses*                    ServerClassesPage;                                		// 0x0174 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ServerTeamJoin*                   ServerTeamJoinPage;                               		// 0x0178 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ServerSettings*                   ServerSettingsPage;                               		// 0x017C (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ServerActions*                    ServerActionsPage;                                		// 0x0180 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ServerAddTime*                    ServerAddTimePage;                                		// 0x0184 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ServerFF*                         ServerFFPage;                                     		// 0x0188 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_ServerSpawn*                      ServerSpawnPage;                                  		// 0x018C (0x0004) [0x0000000000000000]              
	class UGFxTrPage_KeybindSettings*                  KeybindSettingsPage;                              		// 0x0190 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_KeybindCommunication*             KeybindCommunicationPage;                         		// 0x0194 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_KeybindGameplay*                  KeybindGameplayPage;                              		// 0x0198 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_KeybindHotkeys*                   KeybindHotkeysPage;                               		// 0x019C (0x0004) [0x0000000000000000]              
	class UGFxTrPage_KeybindInterface*                 KeybindInterfacePage;                             		// 0x01A0 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_KeybindMovement*                  KeybindMovementPage;                              		// 0x01A4 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_KeybindVehicle*                   KeybindVehiclePage;                               		// 0x01A8 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_KeybindWeapon*                    KeybindWeaponPage;                                		// 0x01AC (0x0004) [0x0000000000000000]              
	class UGFxTrPage_KeybindSpecInterface*             KeybindSpecInterfacePage;                         		// 0x01B0 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_KeybindSpecMovement*              KeybindSpecMovementPage;                          		// 0x01B4 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_KeybindSpecTargeting*             KeybindSpecTargetingPage;                         		// 0x01B8 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_KeybindSpectator*                 KeybindSpectatorPage;                             		// 0x01BC (0x0004) [0x0000000000000000]              
	class UGFxTrPage_LiveStream*                       LiveStreamPage;                                   		// 0x01C0 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_HiRezVideo*                       HiRezVideoPage;                                   		// 0x01C4 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_TrainVideo*                       TrainVideoPage;                                   		// 0x01C8 (0x0004) [0x0000000000000000]              
	class UGFxTrPage_CmntyVideo*                       CmntyVideoPage;                                   		// 0x01CC (0x0004) [0x0000000000000000]              
	TArray< class UGFxTrPage* >                        PageStack;                                        		// 0x01D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                FocusIndex;                                       		// 0x01DC (0x0004) [0x0000000000000000]              
	unsigned long                                      bPopBack : 1;                                     		// 0x01E0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSelectRequired : 1;                              		// 0x01E0 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54147 ];

		return pClassPointer;
	};

	void SaveReticule ( class UGFxObject* Data );
	void ShowReticule ( int Index );
	void SelectedFeature ( int ActionIndex );
	void PromoAction ( int ActionIndex );
	void ShowInGameModel ( );
	void NavigateGold ( );
	void TravelToStore ( );
	void TravelToBundles ( );
	void TravelToSettings ( );
	void TravelToFriends ( );
	void TravelToClasses ( );
	void TravelToMain ( );
	void PushOpenLogin ( );
	void PushOpenClassSelect ( );
	void PushOpenParty ( );
	void PushOpenMain ( );
	class UGFxTrPage* GetActivePage ( );
	void ClearStack ( );
	class UGFxTrPage* PopPage ( );
	void PopBack ( );
	void PushOpen ( class UGFxTrPage* Page );
	void PushPage ( class UGFxTrPage* Page );
	void ProfileDown ( int ActionIndex );
	void ProfileUp ( int ActionIndex );
	void HelpButton ( int ActionIndex );
	void ModifyFocus ( int ActionIndex );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	void ActionDown ( );
	void ActionUp ( );
	int TakeAction ( int Index, class UGFxObject* DataList );
	int TakeFocus ( int Index, class UGFxObject* DataList );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void Initialize ( );
};

UClass* UTrPageManager::pClassPointer = NULL;

// Class TribesGame.TrSettingsManager
// 0x001C (0x0058 - 0x003C)
class UTrSettingsManager : public UObject
{
public:
	class UTrHUDSettings*                              HUDSettings;                                      		// 0x003C (0x0004) [0x0000000000000000]              
	class UTrKeyBindings*                              KeyBindings;                                      		// 0x0040 (0x0004) [0x0000000000000000]              
	class UTrAudioSettings*                            AudioSettings;                                    		// 0x0044 (0x0004) [0x0000000000000000]              
	class UTrVideoSettings*                            VideoSettings;                                    		// 0x0048 (0x0004) [0x0000000000000000]              
	class UTrRegionSettings*                           RegionSettings;                                   		// 0x004C (0x0004) [0x0000000000000000]              
	class UTrControlSettings*                          ControlSettings;                                  		// 0x0050 (0x0004) [0x0000000000000000]              
	class UGFxTrMenuMoviePlayer*                       MP;                                               		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54149 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UTrSettingsManager::pClassPointer = NULL;

// Class TribesGame.TrRibbonManager
// 0x0030 (0x006C - 0x003C)
class UTrRibbonManager : public UObject
{
public:
	int                                                PreviousXP;                                       		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                PreviousGold;                                     		// 0x0040 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDirty : 1;                                       		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHaveUnlocks : 1;                                 		// 0x0044 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bOnlyUnlocks : 1;                                 		// 0x0044 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bHaveUpgrades : 1;                                		// 0x0044 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bOnlyUpgrades : 1;                                		// 0x0044 (0x0004) [0x0000000000000000] [0x00000010] 
	TArray< struct FRibbonData >                       ClassRibbons;                                     		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRibbonData >                       TypeRibbons;                                      		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRibbonData >                       EquipRibbons;                                     		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54151 ];

		return pClassPointer;
	};

	int GetEquipRibbon ( int EquipId );
	int GetTypeRibbon ( int ClassId, int Type );
	int GetClassRibbon ( int ClassId );
	void CalculateRibbons ( int Gold, int XP, unsigned long bForce );
};

UClass* UTrRibbonManager::pClassPointer = NULL;

// Class TribesGame.GFxTrMenuSounds
// 0x0000 (0x003C - 0x003C)
class UGFxTrMenuSounds : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54157 ];

		return pClassPointer;
	};

	void PlayMenuSound ( unsigned char MenuSound );
	void ClassLocked ( );
	void ClassSelected ( );
	void ClassRollover ( );
	void PageBack ( );
	void PageForward ( );
	void LeaveQueue ( );
	void SoundSelectedQueue ( );
	void SoundPurchaseSkill ( );
	void SoundClassType ( int val );
	void SoundSkillType ( int val );
	void SoundXPGain ( int val );
	void SoundToolTip ( unsigned long bOpened );
};

UClass* UGFxTrMenuSounds::pClassPointer = NULL;

// Class TribesGame.GFxTrUI_TeamSelectionMenu
// 0x002C (0x01A8 - 0x017C)
class UGFxTrUI_TeamSelectionMenu : public UGFxMoviePlayer
{
public:
	int                                                AllowedTeamDiscrepancyNoTeam;                     		// 0x017C (0x0004) [0x0000000000000000]              
	int                                                AllowedTeamDiscrepancyOnTeam;                     		// 0x0180 (0x0004) [0x0000000000000000]              
	int                                                PrevBloodEagleCount;                              		// 0x0184 (0x0004) [0x0000000000000000]              
	int                                                PrevDiamondSwordCount;                            		// 0x0188 (0x0004) [0x0000000000000000]              
	unsigned long                                      bInitialized : 1;                                 		// 0x018C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bJustJoined : 1;                                  		// 0x018C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCompleted : 1;                                   		// 0x018C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      JoinBloodEagleAllowed : 1;                        		// 0x018C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      JoinDiamondSwordAllowed : 1;                      		// 0x018C (0x0004) [0x0000000000000000] [0x00000010] 
	class ATrPlayerController*                         TrPC;                                             		// 0x0190 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  MovieClip;                                        		// 0x0194 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  BloodEagleButton;                                 		// 0x0198 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  DiamondSwordButton;                               		// 0x019C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  BloodEagleCountTF;                                		// 0x01A0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  DiamondSwordCountTF;                              		// 0x01A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54476 ];

		return pClassPointer;
	};

	void AsTeamChooseEnableButton ( int TeamID, struct FString bEnable );
	void eventCompleteMovie ( unsigned long bHaveTeam );
	void choseTeamSpectate ( );
	void choseTeamDS ( );
	void choseTeamBE ( );
	void EnableSpectate ( unsigned long bEnable );
	void EnableDiamondSword ( unsigned long bEnable );
	void EnableBloodEagle ( unsigned long bEnable );
	void Tick ( class AGameReplicationInfo* GRI );
	void SetLabels ( struct FString Title, struct FString Spectate );
	void Show ( );
	void SetFontIndex ( int FontIdx );
	bool Start ( unsigned long StartPaused );
	void Initialize ( );
};

UClass* UGFxTrUI_TeamSelectionMenu::pClassPointer = NULL;

// Class TribesGame.TrSkin
// 0x003C (0x0078 - 0x003C)
class UTrSkin : public UObject
{
public:
	int                                                ItemId;                                           		// 0x003C (0x0004) [0x0000000000000000]              
	struct FString                                     ItemName;                                         		// 0x0040 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InfoPanelDescription;                             		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                TranslucencySortPriority;                         		// 0x0058 (0x0004) [0x0000000000000000]              
	class UClass*                                      SkinMeleeDevice;                                  		// 0x005C (0x0004) [0x0000000000000000]              
	TArray< struct FSkinStruct >                       Skins;                                            		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FVehicleSkinStruct >                VehicleSkins;                                     		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54515 ];

		return pClassPointer;
	};

};

UClass* UTrSkin::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Main
// 0x0038 (0x019C - 0x0164)
class UGFxTrPage_Main : public UGFxTrPage
{
public:
	int                                                NumQuit;                                          		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                ActiveFeature;                                    		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                FeatureShowTime;                                  		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                FeatureSwapTime;                                  		// 0x0170 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSwingingCamera : 1;                              		// 0x0174 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAnimInit : 1;                                    		// 0x0174 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FString                                     QueueTimer;                                       		// 0x0178 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TabOffset;                                        		// 0x0184 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBundleData >                       ActiveBundles;                                    		// 0x0190 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54679 ];

		return pClassPointer;
	};

	struct FString GetEquipTypeName ( int Type );
	bool NeedFeatureUpdate ( );
	void UpdateDealTimer ( );
	void StartDealTimer ( );
	void UpdateQueueTimer ( );
	void ShowModel ( );
	class UGFxObject* FillOption ( int ActionIndex );
	struct FString FormatDealTime ( );
	class UGFxObject* FillFeature ( );
	void CheckFeatures ( class UGFxObject* DataList );
	void FillData ( class UGFxObject* DataList );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	class UGFxObject* FillPricing ( class UGFxObject* DataList );
	bool CheckPricing ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_Main::pClassPointer = NULL;

// Class TribesGame.TrAccoladeList
// 0x000C (0x0048 - 0x003C)
class UTrAccoladeList : public UObject
{
public:
	TArray< struct FString >                           accoladeList;                                     		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54704 ];

		return pClassPointer;
	};

};

UClass* UTrAccoladeList::pClassPointer = NULL;

// Class TribesGame.TrAccolade
// 0x0044 (0x0080 - 0x003C)
class UTrAccolade : public UObject
{
public:
	int                                                CreditsAwarded;                                   		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                IconIndex;                                        		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                DatabaseId;                                       		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                ActivityId;                                       		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                MessageSwitch;                                    		// 0x004C (0x0004) [0x0000000000000000]              
	unsigned long                                      Broadcast : 1;                                    		// 0x0050 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              Weight;                                           		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                Type;                                             		// 0x0058 (0x0004) [0x0000000000000000]              
	struct FString                                     HUDMessage;                                       		// 0x005C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyName;                                     		// 0x0068 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x0074 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54706 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Vehicle
// 0x0010 (0x0174 - 0x0164)
class UGFxTrPage_Vehicle : public UGFxTrPage
{
public:
	int                                                PlayerCredits;                                    		// 0x0164 (0x0004) [0x0000000000000000]              
	TArray< struct FVehicleOption >                    VehicleOptions;                                   		// 0x0168 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54723 ];

		return pClassPointer;
	};

	void ShowModel ( );
	class UGFxObject* FillOption ( int ActionIndex );
	class UGFxObject* FillOptions ( class UGFxObject* DataList );
	void FillData ( class UGFxObject* DataList );
	void AddOption ( struct FString ClassName, struct FString DisplayName, int Cost, int Icon, int Count, int MaxCount );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void ClearActions ( );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_Vehicle::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Accolades
// 0x0004 (0x0168 - 0x0164)
class UGFxTrPage_Accolades : public UGFxTrPage
{
public:
	int                                                AccoladeType;                                     		// 0x0164 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56576 ];

		return pClassPointer;
	};

	class UClass* GetAccoladeClass ( int AccoladeId );
	class UGFxObject* FillAccolade ( struct FAccoladeStruct Accolade );
	class UGFxObject* FillAccolades ( );
	void FillData ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void ShowModel ( );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_Accolades::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_AudioSettings
// 0x0008 (0x016C - 0x0164)
class UGFxTrPage_AudioSettings : public UGFxTrPage
{
public:
	int                                                AudioIndex;                                       		// 0x0164 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWaitingForAudioEntry : 1;                        		// 0x0168 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56878 ];

		return pClassPointer;
	};

	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void SetSubTitle ( int Index, int val, class UGFxObject* Obj );
	class UGFxObject* FillOption ( int ActionIndex );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_AudioSettings::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Badges
// 0x004C (0x01B0 - 0x0164)
class UGFxTrPage_Badges : public UGFxTrPage
{
public:
	int                                                ActiveType;                                       		// 0x0164 (0x0004) [0x0000000000000000]              
	TArray< int >                                      CombatType;                                       		// 0x0168 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      ObjectiveType;                                    		// 0x0174 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      VehicleType;                                      		// 0x0180 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      TacticalType;                                     		// 0x018C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      SingleType;                                       		// 0x0198 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      ReferralType;                                     		// 0x01A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56907 ];

		return pClassPointer;
	};

	void ProfileDown ( int ActionIndex );
	void ProfileUp ( int ActionIndex );
	int GetHighestSkiBadgeIndex ( );
	int GetHighestBadgeIndex ( int ActivityId );
	void FillBadge ( class UGFxObject* Obj, int Count, int badgeIndex, unsigned long bSkiBadge, unsigned long bSingle, unsigned long bReferralBadge );
	void FillReferralType ( class UGFxObject* Obj );
	void FillSingleType ( class UGFxObject* Obj );
	void FillTacticalType ( class UGFxObject* Obj );
	void FillVehicleType ( class UGFxObject* Obj );
	void FillObjectiveType ( class UGFxObject* Obj );
	void FillCombatType ( class UGFxObject* Obj );
	class UGFxObject* FillProfile ( );
	void FillData ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void ShowModel ( );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_Badges::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_BlockedPlayers
// 0x0058 (0x01BC - 0x0164)
class UGFxTrPage_BlockedPlayers : public UGFxTrPage
{
public:
	int                                                FocusedIndex;                                     		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                PrevPlayerId;                                     		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                RemovingIndex;                                    		// 0x016C (0x0004) [0x0000000000000000]              
	unsigned long                                      bWaitingForFriendAddPopup : 1;                    		// 0x0170 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWaitingForFriendRemovePopup : 1;                 		// 0x0170 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FString                                     BlockOption;                                      		// 0x0174 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BlockSubtext;                                     		// 0x0180 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BlockedStatus;                                    		// 0x018C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UnblockOption;                                    		// 0x0198 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FlyoutTitle;                                      		// 0x01A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FFriendStruct >                     SortedFriends;                                    		// 0x01B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57420 ];

		return pClassPointer;
	};

	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	int FindNextBlocked ( );
	class UGFxObject* FillOption ( int ActionIndex );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void RefreshButtons ( );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	void ModifyFocus ( int ActionIndex );
	class UGFxObject* FillPricing ( class UGFxObject* DataList );
	bool CheckPricing ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void FillData ( class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_BlockedPlayers::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Bundles
// 0x001C (0x0180 - 0x0164)
class UGFxTrPage_Bundles : public UGFxTrPage
{
public:
	int                                                selectedActionIdx;                                		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                selectedVendorItemId;                             		// 0x0168 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWaitingForBundleOwnedPopup : 1;                  		// 0x016C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWaitingForClassRequiredPopup : 1;                		// 0x016C (0x0004) [0x0000000000000000] [0x00000002] 
	struct FString                                     DescriptionLabel;                                 		// 0x0170 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                classIdRequired;                                  		// 0x017C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57477 ];

		return pClassPointer;
	};

	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	void ShowModel ( );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	class UGFxObject* FillPricing ( class UGFxObject* DataList );
	bool CheckPricing ( class UGFxObject* DataList );
	void FillData ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
};

UClass* UGFxTrPage_Bundles::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_BuyBoost
// 0x0014 (0x0178 - 0x0164)
class UGFxTrPage_BuyBoost : public UGFxTrPage
{
public:
	int                                                selectedActionIdx;                                		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                selectedVendorItemId;                             		// 0x0168 (0x0004) [0x0000000000000000]              
	struct FString                                     DescriptionLabel;                                 		// 0x016C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57580 ];

		return pClassPointer;
	};

	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	void ShowModel ( );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	class UGFxObject* FillPricing ( class UGFxObject* DataList );
	bool CheckPricing ( class UGFxObject* DataList );
	void FillData ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
};

UClass* UGFxTrPage_BuyBoost::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_BuyGold
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_BuyGold : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57639 ];

		return pClassPointer;
	};

	void ShowModel ( );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
};

UClass* UGFxTrPage_BuyGold::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ChangeMap
// 0x0010 (0x0174 - 0x0164)
class UGFxTrPage_ChangeMap : public UGFxTrPage
{
public:
	int                                                RemoveMapNumber;                                  		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                CurrentMapId;                                     		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                CurrentSlotId;                                    		// 0x016C (0x0004) [0x0000000000000000]              
	unsigned long                                      bAllowRemove : 1;                                 		// 0x0170 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57653 ];

		return pClassPointer;
	};

	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
};

UClass* UGFxTrPage_ChangeMap::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_VendorTable
// 0x0028 (0x018C - 0x0164)
class UGFxTrPage_VendorTable : public UGFxTrPage
{
public:
	int                                                selectedActionIdx;                                		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                selectedVendorItemId;                             		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                VendorId;                                         		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                DollMeshId;                                       		// 0x0170 (0x0004) [0x0000000000000000]              
	struct FString                                     DescriptionLabel;                                 		// 0x0174 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UserInputString;                                  		// 0x0180 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57696 ];

		return pClassPointer;
	};

	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void ShowModel ( );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	class UGFxObject* FillPricing ( class UGFxObject* DataList );
	bool CheckPricing ( class UGFxObject* DataList );
	void FillData ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
};

UClass* UGFxTrPage_VendorTable::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ClanTagChange
// 0x0050 (0x01DC - 0x018C)
class UGFxTrPage_ClanTagChange : public UGFxTrPage_VendorTable
{
public:
	int                                                PopupNum;                                         		// 0x018C (0x0004) [0x0000000000000000]              
	int                                                EntryNum;                                         		// 0x0190 (0x0004) [0x0000000000000000]              
	int                                                ConfirmNum;                                       		// 0x0194 (0x0004) [0x0000000000000000]              
	int                                                CurrencyNum;                                      		// 0x0198 (0x0004) [0x0000000000000000]              
	int                                                gpPrice;                                          		// 0x019C (0x0004) [0x0000000000000000]              
	int                                                xpPrice;                                          		// 0x01A0 (0x0004) [0x0000000000000000]              
	int                                                ChangeItem;                                       		// 0x01A4 (0x0004) [0x0000000000000000]              
	int                                                RemoveItem;                                       		// 0x01A8 (0x0004) [0x0000000000000000]              
	struct FString                                     ChangePopupBody;                                  		// 0x01AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RemovePopupBody;                                  		// 0x01B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChangePopupTitle;                                 		// 0x01C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RemovePopupTitle;                                 		// 0x01D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57760 ];

		return pClassPointer;
	};

	void ShowModel ( );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	bool CheckPricing ( class UGFxObject* DataList );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
};

UClass* UGFxTrPage_ClanTagChange::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Class
// 0x000C (0x0170 - 0x0164)
class UGFxTrPage_Class : public UGFxTrPage
{
public:
	int                                                PopupNum;                                         		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                NumRenameLoadout;                                 		// 0x0168 (0x0004) [0x0000000000000000]              
	unsigned long                                      bClassLocked : 1;                                 		// 0x016C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bViewingEquip : 1;                                		// 0x016C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57807 ];

		return pClassPointer;
	};

	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void HelpButton ( int ActionIndex );
	struct FString GetEquipName ( int equipType );
	struct FString GetArmorName ( class UClass* FamilyInfo );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	int GetEquipType ( int ActionIndex );
	class UGFxObject* FillOption ( int ActionIndex );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void FillData ( class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_Class::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Heavy
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Heavy : public UTrFamilyInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57866 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Heavy::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light : public UTrFamilyInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57867 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Classes
// 0x0010 (0x0174 - 0x0164)
class UGFxTrPage_Classes : public UGFxTrPage
{
public:
	int                                                FocusedClass;                                     		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                PurchasingClass;                                  		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                GPAmount;                                         		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                XPAmount;                                         		// 0x0170 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57887 ];

		return pClassPointer;
	};

	void HelpButton ( int ActionIndex );
	bool RequestActiveClass ( int ClassId, int Loadout );
	bool IsOwned ( int Index );
	struct FString GetEquipName ( int equipType );
	struct FString GetArmorName ( class UClass* FamilyInfo );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillPricing ( class UGFxObject* DataList );
	bool CheckPricing ( class UGFxObject* DataList );
	bool CheckPurchasable ( );
	class UGFxObject* FillOption ( int ActionIndex );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void OnPurchaseSuccess ( );
	void FillData ( class UGFxObject* DataList );
	void ShowModel ( );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void RefreshClassList ( );
	void Initialize ( );
};

UClass* UGFxTrPage_Classes::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Loadouts
// 0x0020 (0x0184 - 0x0164)
class UGFxTrPage_Loadouts : public UGFxTrPage
{
public:
	int                                                GPAmount;                                         		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                XPAmount;                                         		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                PopupNum;                                         		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                ModelEquip;                                       		// 0x0170 (0x0004) [0x0000000000000000]              
	unsigned long                                      bInSelection : 1;                                 		// 0x0174 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bClassLocked : 1;                                 		// 0x0174 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCurrencyPopup : 1;                               		// 0x0174 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSelectionPopup : 1;                              		// 0x0174 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bConfirmationPopup : 1;                           		// 0x0174 (0x0004) [0x0000000000000000] [0x00000010] 
	struct FString                                     LoadoutClassName;                                 		// 0x0178 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57930 ];

		return pClassPointer;
	};

	struct FString GetEquipName ( int equipType );
	struct FString GetArmorName ( class UClass* FamilyInfo );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	bool RequestActiveClass ( int ClassId, int Loadout );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void ShowModel ( );
	class UGFxObject* FillPricing ( class UGFxObject* DataList );
	bool CheckPricing ( class UGFxObject* DataList );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_Loadouts::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ClassSelect
// 0x0014 (0x0178 - 0x0164)
class UGFxTrPage_ClassSelect : public UGFxTrPage
{
public:
	int                                                FocusedClass;                                     		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                PurchasingClass;                                  		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                GPAmount;                                         		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                XPAmount;                                         		// 0x0170 (0x0004) [0x0000000000000000]              
	unsigned long                                      bClassDeniedPopup : 1;                            		// 0x0174 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57998 ];

		return pClassPointer;
	};

	struct FString GetEquipName ( int equipType );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void OnPurchaseSuccess ( );
	class UGFxObject* FillPricing ( class UGFxObject* DataList );
	bool CheckPricing ( class UGFxObject* DataList );
	bool RequestActiveClass ( int ClassId, int Loadout );
	void ShowModel ( );
	class UGFxObject* FillOption ( int ActionIndex );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void FillData ( class UGFxObject* DataList );
	void RefreshClassList ( );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_ClassSelect::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_CmntyVideo
// 0x0004 (0x0168 - 0x0164)
class UGFxTrPage_CmntyVideo : public UGFxTrPage
{
public:
	unsigned long                                      bValid : 1;                                       		// 0x0164 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58081 ];

		return pClassPointer;
	};

	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void ShowModel ( );
	void Initialize ( );
};

UClass* UGFxTrPage_CmntyVideo::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ControlSettings
// 0x0008 (0x016C - 0x0164)
class UGFxTrPage_ControlSettings : public UGFxTrPage
{
public:
	int                                                popupIndex;                                       		// 0x0164 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWaitingForFOV : 1;                               		// 0x0168 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWaitingForSensitivity : 1;                       		// 0x0168 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bWaitingForVPSensitivity : 1;                     		// 0x0168 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bWaitingForVYSensitivity : 1;                     		// 0x0168 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58111 ];

		return pClassPointer;
	};

	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void SetSubTitle ( int Index, float val, class UGFxObject* Obj );
	class UGFxObject* FillOption ( int ActionIndex );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_ControlSettings::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_CustomMatch
// 0x0050 (0x01B4 - 0x0164)
class UGFxTrPage_CustomMatch : public UGFxTrPage
{
public:
	int                                                RefreshNum;                                       		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                FilterRegionNum;                                  		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                FilterMapNameNum;                                 		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                FilterEmptyNum;                                   		// 0x0170 (0x0004) [0x0000000000000000]              
	int                                                FilterFullNum;                                    		// 0x0174 (0x0004) [0x0000000000000000]              
	int                                                FilterOwnerNum;                                   		// 0x0178 (0x0004) [0x0000000000000000]              
	int                                                FilterServerNameNum;                              		// 0x017C (0x0004) [0x0000000000000000]              
	struct FString                                     MapNameFilter;                                    		// 0x0180 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ServerNameFilter;                                 		// 0x018C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bFilterFull : 1;                                  		// 0x0198 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bFilterEmpty : 1;                                 		// 0x0198 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bRefresh : 1;                                     		// 0x0198 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bFilterPopup : 1;                                 		// 0x0198 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bWaitingForJoinPopup : 1;                         		// 0x0198 (0x0004) [0x0000000000000000] [0x00000010] 
	int                                                ServerIndex;                                      		// 0x019C (0x0004) [0x0000000000000000]              
	int                                                PopupNumber;                                      		// 0x01A0 (0x0004) [0x0000000000000000]              
	struct FString                                     QueueJoinName;                                    		// 0x01A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SERVERS_PER_PAGE;                                 		// 0x01B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58145 ];

		return pClassPointer;
	};

	void ShowModel ( );
	void WaitPopup ( struct FString ServerName );
	struct FString GetLevelReq ( int Min, int Max );
	void ActionDown ( );
	void ActionUp ( );
	class UGFxObject* FillOption ( int ActionIndex );
	class UGFxObject* FillServerBrowser ( );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void FillData ( class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_CustomMatch::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_RegionSettings
// 0x0018 (0x017C - 0x0164)
class UGFxTrPage_RegionSettings : public UGFxTrPage
{
public:
	int                                                CurrFilterSite;                                   		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                CurrFilterIndex;                                  		// 0x0168 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFilter : 1;                                      		// 0x016C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bServer : 1;                                      		// 0x016C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bForceChoose : 1;                                 		// 0x016C (0x0004) [0x0000000000000000] [0x00000004] 
	struct FString                                     CurrRegion;                                       		// 0x0170 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58177 ];

		return pClassPointer;
	};

	class UGFxObject* FillOption ( int ActionIndex );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void FillData ( class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_RegionSettings::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Equip
// 0x0020 (0x0184 - 0x0164)
class UGFxTrPage_Equip : public UGFxTrPage
{
public:
	int                                                xpPrice;                                          		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                GoldPrice;                                        		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                ViewedEquip;                                      		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                FocusedEquip;                                     		// 0x0170 (0x0004) [0x0000000000000000]              
	int                                                PurchasingEquip;                                  		// 0x0174 (0x0004) [0x0000000000000000]              
	int                                                PurchasingUpgrade;                                		// 0x0178 (0x0004) [0x0000000000000000]              
	int                                                ReticuleIndex;                                    		// 0x017C (0x0004) [0x0000000000000000]              
	unsigned long                                      bUpgradePurchase : 1;                             		// 0x0180 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bReticulesOpen : 1;                               		// 0x0180 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58245 ];

		return pClassPointer;
	};

	void OnClose ( );
	void SaveReticule ( class UGFxObject* Data );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupDataSkin ( class UGFxObject* Obj );
	void PopupData ( class UGFxObject* Obj );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	bool IsOwned ( int Index );
	bool IsEquipMaxed ( int Index );
	bool CheckPurchasable ( );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillPricingSkin ( class UGFxObject* DataList );
	class UGFxObject* FillPricing ( class UGFxObject* DataList );
	bool CheckPricing ( class UGFxObject* DataList );
	class UGFxObject* FillUpgrades ( class UGFxObject* DataList );
	bool CheckUpgrades ( class UGFxObject* DataList );
	class UGFxObject* FillSkin ( int ActionIndex );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void SetActiveEquip ( int EquipId, unsigned long bShowStatus );
	void OnPurchaseSuccess ( );
	void HideReticule ( );
	void ShowReticule ( int Index );
	void SpecialAction ( class UGFxTrAction* Action );
};

UClass* UGFxTrPage_Equip::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice
// 0x0024 (0x0888 - 0x0864)
class ATrPlayerVoice : public ATrDevice
{
public:
	TArray< struct FVGSCommandToVoiceMap >             m_VGSCommandToVoiceMap;                           		// 0x0864 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USoundCue* >                         m_VGSSampleMap;                                   		// 0x0870 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FVGSContextCommandToVoiceMap >      m_VGSContextCommandToVoiceMap;                    		// 0x087C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58257 ];

		return pClassPointer;
	};

	void PlayRandomSample ( class ATrPlayerController* TrPC );
	void PlaySoundContext ( class ATrPlayerController* TrPC, unsigned char ContextActor, unsigned char ContextLocation, unsigned long bEnemyLocation, class APlayerReplicationInfo* InstigatorPRI );
	void PlaySoundEx ( unsigned char Command, class ATrPlayerController* TrPC, class APlayerReplicationInfo* InstigatorPRI );
};

UClass* ATrPlayerVoice::pClassPointer = NULL;

// Class TribesGame.TrArmorMod
// 0x0000 (0x0864 - 0x0864)
class ATrArmorMod : public ATrDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58290 ];

		return pClassPointer;
	};

};

UClass* ATrArmorMod::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Extras
// 0x003C (0x01A0 - 0x0164)
class UGFxTrPage_Extras : public UGFxTrPage
{
public:
	int                                                ClaimPromotionAction;                             		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                CheatCodeAction;                                  		// 0x0168 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWaitingForCheatCodePopup : 1;                    		// 0x016C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWaitingForClaimPromoPopup : 1;                   		// 0x016C (0x0004) [0x0000000000000000] [0x00000002] 
	struct FString                                     C1P1;                                             		// 0x0170 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     C1P2;                                             		// 0x017C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     C1P3;                                             		// 0x0188 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PromoPopupTitle;                                  		// 0x0194 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58432 ];

		return pClassPointer;
	};

	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void SpecialAction ( class UGFxTrAction* Action );
	void ShowModel ( );
	void Initialize ( );
};

UClass* UGFxTrPage_Extras::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_FollowerActions
// 0x0028 (0x018C - 0x0164)
class UGFxTrPage_FollowerActions : public UGFxTrPage
{
public:
	int                                                FriendActionPopupIndex;                           		// 0x0164 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWaitingForFriendActionPopup : 1;                 		// 0x0168 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     TargetPlayer;                                     		// 0x016C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TargetPlayerIndex;                                		// 0x0178 (0x0004) [0x0000000000000000]              
	unsigned char                                      TargetOnlineState;                                		// 0x017C (0x0001) [0x0000000000000000]              
	struct FString                                     AlreadyFriendText;                                		// 0x0180 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58457 ];

		return pClassPointer;
	};

	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void SpecialAction ( class UGFxTrAction* Action );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void RefreshButtons ( );
	void Initialize ( );
};

UClass* UGFxTrPage_FollowerActions::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Followers
// 0x0034 (0x0198 - 0x0164)
class UGFxTrPage_Followers : public UGFxTrPage
{
public:
	int                                                Criteria;                                         		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                FocusedIndex;                                     		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                PrevPlayerId;                                     		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                RemovingIndex;                                    		// 0x0170 (0x0004) [0x0000000000000000]              
	struct FString                                     SelectPromptLabel;                                		// 0x0174 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MutalFriendLabel;                                 		// 0x0180 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FFriendStruct >                     SortedFriends;                                    		// 0x018C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58495 ];

		return pClassPointer;
	};

	int FindNextFollower ( );
	class UGFxObject* FillOption ( int ActionIndex );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void RefreshButtons ( );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	class UGFxObject* FillPricing ( class UGFxObject* DataList );
	bool CheckPricing ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void FillData ( class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_Followers::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Friends
// 0x005C (0x01C0 - 0x0164)
class UGFxTrPage_Friends : public UGFxTrPage
{
public:
	int                                                Criteria;                                         		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                FocusedIndex;                                     		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                PrevPlayerId;                                     		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                RemovingIndex;                                    		// 0x0170 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWaitingForFriendAddPopup : 1;                    		// 0x0174 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWaitingForFriendRemovePopup : 1;                 		// 0x0174 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FString                                     SelectPromptLabel;                                		// 0x0178 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AddFriendTitle;                                   		// 0x0184 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AddFriendSubtext;                                 		// 0x0190 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RemoveFriendTitle;                                		// 0x019C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FlyoutTitle;                                      		// 0x01A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FFriendStruct >                     SortedFriends;                                    		// 0x01B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58522 ];

		return pClassPointer;
	};

	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	int FindNextFriend ( );
	class UGFxObject* FillOption ( int ActionIndex );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void RefreshButtons ( );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	void ModifyFocus ( int ActionIndex );
	class UGFxObject* FillPricing ( class UGFxObject* DataList );
	bool CheckPricing ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void FillData ( class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_Friends::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_FriendActions
// 0x0019 (0x017D - 0x0164)
class UGFxTrPage_FriendActions : public UGFxTrPage
{
public:
	int                                                FriendActionPopupIndex;                           		// 0x0164 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWaitingForFriendActionPopup : 1;                 		// 0x0168 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     TargetPlayer;                                     		// 0x016C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TargetPlayerIndex;                                		// 0x0178 (0x0004) [0x0000000000000000]              
	unsigned char                                      TargetOnlineState;                                		// 0x017C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58547 ];

		return pClassPointer;
	};

	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void SpecialAction ( class UGFxTrAction* Action );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void RefreshButtons ( );
	void Initialize ( );
};

UClass* UGFxTrPage_FriendActions::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_FriendJoin
// 0x0050 (0x01B4 - 0x0164)
class UGFxTrPage_FriendJoin : public UGFxTrPage
{
public:
	int                                                Criteria;                                         		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                FocusedIndex;                                     		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                PrevPlayerId;                                     		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                SpecActionIndex;                                  		// 0x0170 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWaitingForFriendAddPopup : 1;                    		// 0x0174 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWaitingForMessagePopup : 1;                      		// 0x0174 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FString                                     SelectPromptSubtext;                              		// 0x0178 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SocialTitle;                                      		// 0x0184 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SocialSubtext;                                    		// 0x0190 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NotInAGameSubtext;                                		// 0x019C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FFriendStruct >                     SortedFriends;                                    		// 0x01A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58582 ];

		return pClassPointer;
	};

	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	int FindNextFriend ( );
	class UGFxObject* FillOption ( int ActionIndex );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void RefreshButtons ( );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	void ModifyFocus ( int ActionIndex );
	class UGFxObject* FillPricing ( class UGFxObject* DataList );
	bool CheckPricing ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void FillData ( class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_FriendJoin::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Game
// 0x0050 (0x01B4 - 0x0164)
class UGFxTrPage_Game : public UGFxTrPage
{
public:
	int                                                TeamLoadoutNum;                                   		// 0x0164 (0x0004) [0x0000000000000000]              
	unsigned long                                      bRemovePartyTemp : 1;                             		// 0x0168 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     strParty;                                         		// 0x016C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strSocial;                                        		// 0x0178 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strStore;                                         		// 0x0184 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strSettings;                                      		// 0x0190 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strManageServers;                                 		// 0x019C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strExitMatch;                                     		// 0x01A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58701 ];

		return pClassPointer;
	};

	void HelpButton ( int ActionIndex );
	void PushModel ( );
	class UGFxObject* FillOption ( int ActionIndex );
	void SpecialAction ( class UGFxTrAction* Action );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void FillData ( class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_Game::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_GameMapSetup
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_GameMapSetup : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58749 ];

		return pClassPointer;
	};

	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_GameMapSetup::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_GameRules
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_GameRules : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58774 ];

		return pClassPointer;
	};

	void ShowModel ( );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_GameRules::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_GameType
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_GameType : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58801 ];

		return pClassPointer;
	};

	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_GameType::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_GameTypeFilter
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_GameTypeFilter : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58826 ];

		return pClassPointer;
	};

	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_GameTypeFilter::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_HiRezVideo
// 0x0004 (0x0168 - 0x0164)
class UGFxTrPage_HiRezVideo : public UGFxTrPage
{
public:
	unsigned long                                      bValid : 1;                                       		// 0x0164 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58857 ];

		return pClassPointer;
	};

	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void ShowModel ( );
	void Initialize ( );
};

UClass* UGFxTrPage_HiRezVideo::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_HUDSettings
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_HUDSettings : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58878 ];

		return pClassPointer;
	};

	void SetSubTitle ( int Index, float val, class UGFxObject* Obj );
	class UGFxObject* FillOption ( int ActionIndex );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_HUDSettings::pClassPointer = NULL;

// Class TribesGame.TrHUDSettings
// 0x0008 (0x0080 - 0x0078)
class UTrHUDSettings : public UGFxObject
{
public:
	int                                                SettingsCount;                                    		// 0x0078 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SettingsList;                                     		// 0x007C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58885 ];

		return pClassPointer;
	};

	float GetCurrentValue ( unsigned char Index );
	void SaveSetting ( int Index, float val );
};

UClass* UTrHUDSettings::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_JoinMatch
// 0x0008 (0x016C - 0x0164)
class UGFxTrPage_JoinMatch : public UGFxTrPage
{
public:
	int                                                queueId;                                          		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                DollMesh;                                         		// 0x0168 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58900 ];

		return pClassPointer;
	};

	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void FillData ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_JoinMatch::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_KeybindAction
// 0x000C (0x0170 - 0x0164)
class UGFxTrPage_KeybindAction : public UGFxTrPage
{
public:
	int                                                SelectedIndex;                                    		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                SelectedCommand;                                  		// 0x0168 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWaitingForKeybind : 1;                           		// 0x016C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58914 ];

		return pClassPointer;
	};

	void KeyEvent ( );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
};

UClass* UGFxTrPage_KeybindAction::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_KeybindCommunication
// 0x0000 (0x0170 - 0x0170)
class UGFxTrPage_KeybindCommunication : public UGFxTrPage_KeybindAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58939 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UGFxTrPage_KeybindCommunication::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_KeybindGameplay
// 0x0000 (0x0170 - 0x0170)
class UGFxTrPage_KeybindGameplay : public UGFxTrPage_KeybindAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58942 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UGFxTrPage_KeybindGameplay::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_KeybindHotkeys
// 0x0000 (0x0170 - 0x0170)
class UGFxTrPage_KeybindHotkeys : public UGFxTrPage_KeybindAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58945 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UGFxTrPage_KeybindHotkeys::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_KeybindInterface
// 0x0000 (0x0170 - 0x0170)
class UGFxTrPage_KeybindInterface : public UGFxTrPage_KeybindAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58948 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UGFxTrPage_KeybindInterface::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_KeybindMovement
// 0x0000 (0x0170 - 0x0170)
class UGFxTrPage_KeybindMovement : public UGFxTrPage_KeybindAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58951 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UGFxTrPage_KeybindMovement::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_KeybindSettings
// 0x0004 (0x0168 - 0x0164)
class UGFxTrPage_KeybindSettings : public UGFxTrPage
{
public:
	unsigned long                                      bWaitingForResetConfirmation : 1;                 		// 0x0164 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58954 ];

		return pClassPointer;
	};

	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	class UGFxObject* FillOption ( int ActionIndex );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_KeybindSettings::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_KeybindSpecInterface
// 0x0000 (0x0170 - 0x0170)
class UGFxTrPage_KeybindSpecInterface : public UGFxTrPage_KeybindAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58980 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UGFxTrPage_KeybindSpecInterface::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_KeybindSpecMovement
// 0x0000 (0x0170 - 0x0170)
class UGFxTrPage_KeybindSpecMovement : public UGFxTrPage_KeybindAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58983 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UGFxTrPage_KeybindSpecMovement::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_KeybindSpecTargeting
// 0x0000 (0x0170 - 0x0170)
class UGFxTrPage_KeybindSpecTargeting : public UGFxTrPage_KeybindAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58986 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UGFxTrPage_KeybindSpecTargeting::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_KeybindSpectator
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_KeybindSpectator : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58989 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UGFxTrPage_KeybindSpectator::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_KeybindVehicle
// 0x0000 (0x0170 - 0x0170)
class UGFxTrPage_KeybindVehicle : public UGFxTrPage_KeybindAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58995 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UGFxTrPage_KeybindVehicle::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_KeybindWeapon
// 0x0000 (0x0170 - 0x0170)
class UGFxTrPage_KeybindWeapon : public UGFxTrPage_KeybindAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58998 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UGFxTrPage_KeybindWeapon::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_LiveStream
// 0x0004 (0x0168 - 0x0164)
class UGFxTrPage_LiveStream : public UGFxTrPage
{
public:
	unsigned long                                      bValid : 1;                                       		// 0x0164 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59001 ];

		return pClassPointer;
	};

	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void ShowModel ( );
	void Initialize ( );
};

UClass* UGFxTrPage_LiveStream::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Login
// 0x0078 (0x01DC - 0x0164)
class UGFxTrPage_Login : public UGFxTrPage
{
public:
	struct FString                                     HelpLabel;                                        		// 0x0164 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SubmitLabel;                                      		// 0x0170 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AccountLabel;                                     		// 0x017C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BetaKeyLabel;                                     		// 0x0188 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UsernameLabel;                                    		// 0x0194 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PasswordLabel;                                    		// 0x01A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CheckboxLabel;                                    		// 0x01AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HelpUsernameLabel;                                		// 0x01B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HelpPasswordLabel;                                		// 0x01C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CreateAccountLabel;                               		// 0x01D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59112 ];

		return pClassPointer;
	};

	void ShowModel ( );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
};

UClass* UGFxTrPage_Login::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ManageProfile
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_ManageProfile : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59271 ];

		return pClassPointer;
	};

	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void ShowModel ( );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_ManageProfile::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ManageProfiles
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_ManageProfiles : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59287 ];

		return pClassPointer;
	};

	void FillData ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void ShowModel ( );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_ManageProfiles::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ManageServer
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_ManageServer : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59299 ];

		return pClassPointer;
	};

	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	void SetOverrides ( );
	void RefreshButtons ( );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_ManageServer::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ManageServers
// 0x000C (0x0170 - 0x0164)
class UGFxTrPage_ManageServers : public UGFxTrPage
{
public:
	int                                                Offset;                                           		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                AddServerNum;                                     		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                PopupNum;                                         		// 0x016C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59328 ];

		return pClassPointer;
	};

	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void ShowModel ( );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
};

UClass* UGFxTrPage_ManageServers::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_MapRotation
// 0x0004 (0x0168 - 0x0164)
class UGFxTrPage_MapRotation : public UGFxTrPage
{
public:
	int                                                AddMapNumber;                                     		// 0x0164 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59376 ];

		return pClassPointer;
	};

	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_MapRotation::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_NameChange
// 0x0010 (0x019C - 0x018C)
class UGFxTrPage_NameChange : public UGFxTrPage_VendorTable
{
public:
	struct FString                                     NamePopupTitle;                                   		// 0x018C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bWaitingForNewNameInput : 1;                      		// 0x0198 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59406 ];

		return pClassPointer;
	};

	void ShowModel ( );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
};

UClass* UGFxTrPage_NameChange::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_NotificationSettings
// 0x000C (0x0170 - 0x0164)
class UGFxTrPage_NotificationSettings : public UGFxTrPage
{
public:
	struct FString                                     ChatNotifySubtext;                                		// 0x0164 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59431 ];

		return pClassPointer;
	};

	void ShowModel ( );
	void SpecialAction ( class UGFxTrAction* Action );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_NotificationSettings::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Party
// 0x000C (0x0170 - 0x0164)
class UGFxTrPage_Party : public UGFxTrPage
{
public:
	int                                                PopupNum;                                         		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                Action_Leave;                                     		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                Action_SendMessage;                               		// 0x016C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59453 ];

		return pClassPointer;
	};

	void ShowModel ( );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void Initialize ( );
};

UClass* UGFxTrPage_Party::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_PartyAction
// 0x0010 (0x0174 - 0x0164)
class UGFxTrPage_PartyAction : public UGFxTrPage
{
public:
	int                                                PopupNum;                                         		// 0x0164 (0x0004) [0x0000000000000000]              
	struct FString                                     MemberName;                                       		// 0x0168 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59488 ];

		return pClassPointer;
	};

	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
};

UClass* UGFxTrPage_PartyAction::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_PartyInvite
// 0x002C (0x0190 - 0x0164)
class UGFxTrPage_PartyInvite : public UGFxTrPage
{
public:
	int                                                PopupNum;                                         		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                Action_ByName;                                    		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                Action_InviteSent;                                		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                Action_SendMessage;                               		// 0x0170 (0x0004) [0x0000000000000000]              
	int                                                Action_InviteFailed;                              		// 0x0174 (0x0004) [0x0000000000000000]              
	struct FString                                     MemberName;                                       		// 0x0178 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ShownFriends;                                     		// 0x0184 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59516 ];

		return pClassPointer;
	};

	void ShowModel ( );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	class UGFxObject* FillPricing ( class UGFxObject* DataList );
	bool CheckPricing ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void SpecialAction ( class UGFxTrAction* Action );
	void FillData ( class UGFxObject* DataList );
};

UClass* UGFxTrPage_PartyInvite::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_PartyMember
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_PartyMember : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59571 ];

		return pClassPointer;
	};

	void ShowModel ( );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	class UGFxObject* FillPricing ( class UGFxObject* DataList );
	bool CheckPricing ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
};

UClass* UGFxTrPage_PartyMember::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_PlayNow
// 0x0084 (0x01E8 - 0x0164)
class UGFxTrPage_PlayNow : public UGFxTrPage
{
public:
	struct FString                                     ComingSoonSubtext;                                		// 0x0164 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CustomServerSubtext;                              		// 0x0170 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     JoinFriendSubLabel;                               		// 0x017C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     JoinFriendInGameSubLabel;                         		// 0x0188 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     JoinFriendLabel;                                  		// 0x0194 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CustomServerLabel;                                		// 0x01A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RankedLabel;                                      		// 0x01AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RegionsLabel;                                     		// 0x01B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RegionsSubtext;                                   		// 0x01C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoFriendsOnlineLabel;                             		// 0x01D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SeasonUpcomingSubtext;                            		// 0x01DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59606 ];

		return pClassPointer;
	};

	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	bool HaveDuplicates ( int Index );
	void RemoveDuplicateQueues ( );
	void FillData ( class UGFxObject* DataList );
	void RefreshButtons ( );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
	int GetMeshEnumFromVV ( int InVal );
};

UClass* UGFxTrPage_PlayNow::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Profile
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_Profile : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59662 ];

		return pClassPointer;
	};

	int GetFastestSki ( );
	int GetMidairCount ( );
	int GetAssists ( );
	float GetObjsDestroyedPerHour ( );
	int GetObjsDestroyed ( );
	float GetGensDestroyedPerHour ( );
	int GetGensDestroyed ( );
	float GetFlagCapsHour ( );
	int GetFlagCaps ( );
	float GetFlagDefensesPerHour ( );
	int GetFlagDefenses ( );
	int GetTopBadgeIcon ( int Index );
	int GetAccoladeCount ( int AccoladeId );
	struct FString GetWinLossRatio ( );
	int GetGamesLost ( );
	int GetGamesWon ( );
	int GetAccoladesPerHour ( );
	int GetTotalAccolades ( );
	int GetScorePerHour ( );
	int GetTotalScore ( );
	int GetGamesPlayed ( );
	struct FString GetTimePlayed ( );
	struct FString GetMostPlayed ( );
	int GetPlayedPercent ( int ClassId, unsigned long bResolve );
	float GetKDR ( );
	class UGFxObject* FillProfile ( );
	void FillData ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void ShowModel ( );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_Profile::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Queued
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_Queued : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60043 ];

		return pClassPointer;
	};

	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_Queued::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_QuickMatch
// 0x000C (0x0170 - 0x0164)
class UGFxTrPage_QuickMatch : public UGFxTrPage
{
public:
	struct FString                                     ActiveQueue;                                      		// 0x0164 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60050 ];

		return pClassPointer;
	};

	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_QuickMatch::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_RankedMatch
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_RankedMatch : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60067 ];

		return pClassPointer;
	};

};

UClass* UGFxTrPage_RankedMatch::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_RentServer
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_RentServer : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60095 ];

		return pClassPointer;
	};

};

UClass* UGFxTrPage_RentServer::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_RoamArena
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_RoamArena : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60097 ];

		return pClassPointer;
	};

	void ShowModel ( );
	void JoinLocalGame ( struct FString SessionName );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_RoamArena::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_RoamCAH
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_RoamCAH : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60106 ];

		return pClassPointer;
	};

	void ShowModel ( );
	void JoinLocalGame ( struct FString SessionName );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_RoamCAH::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_RoamCTF
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_RoamCTF : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60115 ];

		return pClassPointer;
	};

	void ShowModel ( );
	void JoinLocalGame ( struct FString SessionName );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_RoamCTF::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_RoamingMatch
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_RoamingMatch : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60124 ];

		return pClassPointer;
	};

	void ShowModel ( );
	void Initialize ( );
};

UClass* UGFxTrPage_RoamingMatch::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_RoamRabbit
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_RoamRabbit : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60133 ];

		return pClassPointer;
	};

	void ShowModel ( );
	void JoinLocalGame ( struct FString SessionName );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_RoamRabbit::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_RoamTDM
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_RoamTDM : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60142 ];

		return pClassPointer;
	};

	void ShowModel ( );
	void JoinLocalGame ( struct FString SessionName );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_RoamTDM::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_RotationType
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_RotationType : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60151 ];

		return pClassPointer;
	};

	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_RotationType::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ServerActions
// 0x0020 (0x0184 - 0x0164)
class UGFxTrPage_ServerActions : public UGFxTrPage
{
public:
	int                                                EnableServerNum;                                  		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                DisableServerNum;                                 		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                KillServerNum;                                    		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                GotoMapServerNum;                                 		// 0x0170 (0x0004) [0x0000000000000000]              
	int                                                KickPlayerNum;                                    		// 0x0174 (0x0004) [0x0000000000000000]              
	int                                                BanPlayerNum;                                     		// 0x0178 (0x0004) [0x0000000000000000]              
	int                                                PopupNum;                                         		// 0x017C (0x0004) [0x0000000000000000]              
	unsigned long                                      bPopup : 1;                                       		// 0x0180 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60178 ];

		return pClassPointer;
	};

	void ShowModel ( );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_ServerActions::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ServerAddTime
// 0x0008 (0x016C - 0x0164)
class UGFxTrPage_ServerAddTime : public UGFxTrPage
{
public:
	int                                                FocusIndex;                                       		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                PurchaseIndex;                                    		// 0x0168 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60241 ];

		return pClassPointer;
	};

	class UGFxObject* FillPricing ( class UGFxObject* DataList );
	bool CheckPricing ( class UGFxObject* DataList );
	void ShowModel ( );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_ServerAddTime::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ServerBase
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_ServerBase : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60295 ];

		return pClassPointer;
	};

	void ShowModel ( );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	void SetSubTitle ( float val, class UGFxObject* Obj );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_ServerBase::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ServerCallin
// 0x000C (0x0170 - 0x0164)
class UGFxTrPage_ServerCallin : public UGFxTrPage
{
public:
	int                                                TACNumber;                                        		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                SUPNumber;                                        		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                ORBNumber;                                        		// 0x016C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60321 ];

		return pClassPointer;
	};

	void ShowModel ( );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	void SetSubTitle ( float val, class UGFxObject* Obj );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_ServerCallin::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ServerEditCallin
// 0x0030 (0x0194 - 0x0164)
class UGFxTrPage_ServerEditCallin : public UGFxTrPage
{
public:
	int                                                MinBounds;                                        		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                MaxBOunds;                                        		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                TACNumber;                                        		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                SUPNumber;                                        		// 0x0170 (0x0004) [0x0000000000000000]              
	int                                                ORBNumber;                                        		// 0x0174 (0x0004) [0x0000000000000000]              
	int                                                CallinType;                                       		// 0x0178 (0x0004) [0x0000000000000000]              
	int                                                EnabledIndex;                                     		// 0x017C (0x0004) [0x0000000000000000]              
	int                                                PriceIndex;                                       		// 0x0180 (0x0004) [0x0000000000000000]              
	int                                                CooldownIndex;                                    		// 0x0184 (0x0004) [0x0000000000000000]              
	int                                                BuildupIndex;                                     		// 0x0188 (0x0004) [0x0000000000000000]              
	int                                                popupIndex;                                       		// 0x018C (0x0004) [0x0000000000000000]              
	unsigned long                                      bPopup : 1;                                       		// 0x0190 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bBoundsPopup : 1;                                 		// 0x0190 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60330 ];

		return pClassPointer;
	};

	void ShowModel ( );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	void ShowBoundsError ( int PropId, int PropType );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void SetSubTitle ( float val, class UGFxObject* Obj );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
};

UClass* UGFxTrPage_ServerEditCallin::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ServerClasses
// 0x0010 (0x0174 - 0x0164)
class UGFxTrPage_ServerClasses : public UGFxTrPage
{
public:
	int                                                MinBounds;                                        		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                MaxBOunds;                                        		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                PopupNum;                                         		// 0x016C (0x0004) [0x0000000000000000]              
	unsigned long                                      bBoundsPopup : 1;                                 		// 0x0170 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60355 ];

		return pClassPointer;
	};

	void ShowBoundsError ( int PropId, int PropType );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void ShowModel ( );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_ServerClasses::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ServerFF
// 0x0010 (0x0174 - 0x0164)
class UGFxTrPage_ServerFF : public UGFxTrPage
{
public:
	int                                                PopupNum;                                         		// 0x0164 (0x0004) [0x0000000000000000]              
	unsigned long                                      bBoundsPopup : 1;                                 		// 0x0168 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              MinBounds;                                        		// 0x016C (0x0004) [0x0000000000000000]              
	float                                              MaxBOunds;                                        		// 0x0170 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60451 ];

		return pClassPointer;
	};

	void ShowModel ( );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	void SetSubTitle ( float val, class UGFxObject* Obj );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void ShowBoundsError ( int PropId, int PropType );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_ServerFF::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ServerPlayer
// 0x0010 (0x0174 - 0x0164)
class UGFxTrPage_ServerPlayer : public UGFxTrPage
{
public:
	int                                                PopupNum;                                         		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                MinBounds;                                        		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                MaxBOunds;                                        		// 0x016C (0x0004) [0x0000000000000000]              
	unsigned long                                      bBoundsPopup : 1;                                 		// 0x0170 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60494 ];

		return pClassPointer;
	};

	void ShowModel ( );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	void SetSubTitle ( float val, class UGFxObject* Obj );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void ShowBoundsError ( int PropId, int PropType );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_ServerPlayer::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ServerScoring
// 0x0014 (0x0178 - 0x0164)
class UGFxTrPage_ServerScoring : public UGFxTrPage
{
public:
	int                                                GameType;                                         		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                MinBounds;                                        		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                MaxBOunds;                                        		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                ScoreNumber;                                      		// 0x0170 (0x0004) [0x0000000000000000]              
	unsigned long                                      bScorePopup : 1;                                  		// 0x0174 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bRoundsPopup : 1;                                 		// 0x0174 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bLivesPopup : 1;                                  		// 0x0174 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bBoundsPopup : 1;                                 		// 0x0174 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60538 ];

		return pClassPointer;
	};

	void ShowModel ( );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void ShowBoundsError ( int PropId, int PropType );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_ServerScoring::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ServerSettings
// 0x000C (0x0170 - 0x0164)
class UGFxTrPage_ServerSettings : public UGFxTrPage
{
public:
	int                                                LocalNameNumber;                                  		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                PopupNumber;                                      		// 0x0168 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPopup : 1;                                       		// 0x016C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60579 ];

		return pClassPointer;
	};

	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	void SetOverrides ( );
	void RefreshButtons ( );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_ServerSettings::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ServerSpawn
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_ServerSpawn : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60624 ];

		return pClassPointer;
	};

	void ShowModel ( );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_ServerSpawn::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ServerTeam
// 0x000C (0x0170 - 0x0164)
class UGFxTrPage_ServerTeam : public UGFxTrPage
{
public:
	int                                                MinBounds;                                        		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                MaxBOunds;                                        		// 0x0168 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMaxPlayerPopup : 1;                              		// 0x016C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDisparityPopup : 1;                              		// 0x016C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPopupBaseDestPopup : 1;                          		// 0x016C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bBoundsPopup : 1;                                 		// 0x016C (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60647 ];

		return pClassPointer;
	};

	void ShowModel ( );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	void SetSubTitle ( float val, class UGFxObject* Obj );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void ShowBoundsError ( int PropId, int PropType );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_ServerTeam::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ServerTeamJoin
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_ServerTeamJoin : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60696 ];

		return pClassPointer;
	};

	void ShowModel ( );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_ServerTeamJoin::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ServerTime
// 0x000C (0x0170 - 0x0164)
class UGFxTrPage_ServerTime : public UGFxTrPage
{
public:
	int                                                MinBounds;                                        		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                MaxBOunds;                                        		// 0x0168 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWarmupTimePopup : 1;                             		// 0x016C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTimeLimitPopup : 1;                              		// 0x016C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bOverTimeLimitPopup : 1;                          		// 0x016C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bRespawnTimePopup : 1;                            		// 0x016C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bBoundsPopup : 1;                                 		// 0x016C (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60718 ];

		return pClassPointer;
	};

	void ShowModel ( );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void ShowBoundsError ( int PropId, int PropType );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_ServerTime::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_ServerVehicle
// 0x0010 (0x0174 - 0x0164)
class UGFxTrPage_ServerVehicle : public UGFxTrPage
{
public:
	int                                                PopupNumber;                                      		// 0x0164 (0x0004) [0x0000000000000000]              
	unsigned long                                      bBoundsPopup : 1;                                 		// 0x0168 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              MinBounds;                                        		// 0x016C (0x0004) [0x0000000000000000]              
	float                                              MaxBOunds;                                        		// 0x0170 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60760 ];

		return pClassPointer;
	};

	void ShowModel ( );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void ShowBoundsError ( int PropId, int PropType );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_ServerVehicle::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Settings
// 0x002C (0x0190 - 0x0164)
class UGFxTrPage_Settings : public UGFxTrPage
{
public:
	int                                                CheatCodeAction;                                  		// 0x0164 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWaitingForCheatCodePopup : 1;                    		// 0x0168 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     C1P1;                                             		// 0x016C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     C1P2;                                             		// 0x0178 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     C1P3;                                             		// 0x0184 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60799 ];

		return pClassPointer;
	};

	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	void ShowModel ( );
	void SpecialAction ( class UGFxTrAction* Action );
	void FillData ( class UGFxObject* DataList );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_Settings::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Social
// 0x0024 (0x0188 - 0x0164)
class UGFxTrPage_Social : public UGFxTrPage
{
public:
	struct FString                                     FriendsOnlineSubtext;                             		// 0x0164 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendsOfflineSubtext;                            		// 0x0170 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FollowersOnlineSubtext;                           		// 0x017C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60830 ];

		return pClassPointer;
	};

	void ShowModel ( );
	class UGFxObject* FillOption ( int ActionIndex );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_Social::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_Store
// 0x0038 (0x019C - 0x0164)
class UGFxTrPage_Store : public UGFxTrPage
{
public:
	int                                                xpCost;                                           		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                HZCost;                                           		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                NumDeal;                                          		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                NumGold;                                          		// 0x0170 (0x0004) [0x0000000000000000]              
	int                                                PopupNum;                                         		// 0x0174 (0x0004) [0x0000000000000000]              
	int                                                classIdRequired;                                  		// 0x0178 (0x0004) [0x0000000000000000]              
	unsigned long                                      bCurrencyPopup : 1;                               		// 0x017C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSelectionPopup : 1;                              		// 0x017C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bClassRequiredPopup : 1;                          		// 0x017C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bConfirmationPopup : 1;                           		// 0x017C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bWaitingForClaimPromoPopup : 1;                   		// 0x017C (0x0004) [0x0000000000000000] [0x00000010] 
	struct FString                                     NoNameChangeInGame;                               		// 0x0180 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                ClaimPromotionAction;                             		// 0x018C (0x0004) [0x0000000000000000]              
	struct FString                                     PromoPopupTitle;                                  		// 0x0190 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60846 ];

		return pClassPointer;
	};

	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	int ModifyAction ( int ActionIndex, class UGFxObject* DataList );
	class UGFxObject* FillPricing ( class UGFxObject* DataList );
	bool CheckPricing ( class UGFxObject* DataList );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	void CheckDescription ( class UGFxObject* DataList );
	int TakeAction ( int ActionIndex, class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_Store::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_TrainingMatch
// 0x0000 (0x0164 - 0x0164)
class UGFxTrPage_TrainingMatch : public UGFxTrPage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60933 ];

		return pClassPointer;
	};

	class UGFxObject* FillOption ( int ActionIndex );
	int TakeFocus ( int ActionIndex, class UGFxObject* DataList );
	void JoinLocalGame ( struct FString SessionName );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_TrainingMatch::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_TrainVideo
// 0x0004 (0x0168 - 0x0164)
class UGFxTrPage_TrainVideo : public UGFxTrPage
{
public:
	unsigned long                                      bValid : 1;                                       		// 0x0164 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60951 ];

		return pClassPointer;
	};

	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void ShowModel ( );
	void Initialize ( );
};

UClass* UGFxTrPage_TrainVideo::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_VideoGraphics
// 0x0004 (0x0168 - 0x0164)
class UGFxTrPage_VideoGraphics : public UGFxTrPage
{
public:
	int                                                CurrGraphics;                                     		// 0x0164 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61013 ];

		return pClassPointer;
	};

	class UGFxObject* FillOption ( int ActionIndex );
	void SpecialAction ( class UGFxTrAction* Action );
	void FillData ( class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_VideoGraphics::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_VideoResolution
// 0x0004 (0x0168 - 0x0164)
class UGFxTrPage_VideoResolution : public UGFxTrPage
{
public:
	int                                                CurrResolution;                                   		// 0x0164 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61030 ];

		return pClassPointer;
	};

	void RevertSetting ( );
	void PopupComplete ( int Action, struct FString TextInput );
	void PopupData ( class UGFxObject* Obj );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
};

UClass* UGFxTrPage_VideoResolution::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_VideoResolutionTypes
// 0x004C (0x01B0 - 0x0164)
class UGFxTrPage_VideoResolutionTypes : public UGFxTrPage
{
public:
	int                                                FourByThree;                                      		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                SixteenByNine;                                    		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                SixteenbyTen;                                     		// 0x016C (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowingFourByThree : 1;                          		// 0x0170 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowingSixteenByNine : 1;                        		// 0x0170 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bShowingSixteenbyTen : 1;                         		// 0x0170 (0x0004) [0x0000000000000000] [0x00000004] 
	TArray< struct FPropertyPair >                     AllResolutions;                                   		// 0x0174 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FResolutionSet >                    FourByThreeGroup;                                 		// 0x0180 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FResolutionSet >                    SixteenByNineGroup;                               		// 0x018C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FResolutionSet >                    SixteenbyTenGroup;                                		// 0x0198 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FResolutionSet >                    OtherGroup;                                       		// 0x01A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61054 ];

		return pClassPointer;
	};

	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_VideoResolutionTypes::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_VideoSettings
// 0x000C (0x0170 - 0x0164)
class UGFxTrPage_VideoSettings : public UGFxTrPage
{
public:
	int                                                VSyncNumber;                                      		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                FrameSmoothNumber;                                		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                MotionBlurNumber;                                 		// 0x016C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61090 ];

		return pClassPointer;
	};

	class UGFxObject* FillOption ( int ActionIndex );
	void SpecialAction ( class UGFxTrAction* Action );
	void Initialize ( );
};

UClass* UGFxTrPage_VideoSettings::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_VideoWindow
// 0x0004 (0x0168 - 0x0164)
class UGFxTrPage_VideoWindow : public UGFxTrPage
{
public:
	int                                                CurrWindow;                                       		// 0x0164 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61106 ];

		return pClassPointer;
	};

	class UGFxObject* FillOption ( int ActionIndex );
	void SpecialAction ( class UGFxTrAction* Action );
	void FillData ( class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_VideoWindow::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_WatchNow
// 0x004C (0x01B0 - 0x0164)
class UGFxTrPage_WatchNow : public UGFxTrPage
{
public:
	int                                                NumLiveStreams;                                   		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                NumHiRezVideos;                                   		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                NumTrainVideos;                                   		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                NumCmntyVideos;                                   		// 0x0170 (0x0004) [0x0000000000000000]              
	struct FString                                     strLiveStreams;                                   		// 0x0174 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strHiRezVideos;                                   		// 0x0180 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strTrainVideos;                                   		// 0x018C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strCmntyVideos;                                   		// 0x0198 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< int >                                      FeaturedNums;                                     		// 0x01A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61120 ];

		return pClassPointer;
	};

	bool IsFeatured ( int Num );
	class UGFxObject* FillDescription ( class UGFxObject* DataList );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void UpdateStreams ( );
	void SpecialAction ( class UGFxTrAction* Action );
	void ShowModel ( );
	void Initialize ( );
};

UClass* UGFxTrPage_WatchNow::pClassPointer = NULL;

// Class TribesGame.GFxTrPage_WhisperSettings
// 0x0004 (0x0168 - 0x0164)
class UGFxTrPage_WhisperSettings : public UGFxTrPage
{
public:
	int                                                CurrSetting;                                      		// 0x0164 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61172 ];

		return pClassPointer;
	};

	void ShowModel ( );
	void SpecialAction ( class UGFxTrAction* Action );
	class UGFxObject* FillOption ( int ActionIndex );
	void FillData ( class UGFxObject* DataList );
	void Initialize ( );
};

UClass* UGFxTrPage_WhisperSettings::pClassPointer = NULL;

// Class TribesGame.GFxTrScene_Class
// 0x0000 (0x0084 - 0x0084)
class UGFxTrScene_Class : public UGFxTrScene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62885 ];

		return pClassPointer;
	};

};

UClass* UGFxTrScene_Class::pClassPointer = NULL;

// Class TribesGame.GFxTrScene_Container
// 0x0000 (0x0084 - 0x0084)
class UGFxTrScene_Container : public UGFxTrScene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62887 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UGFxTrScene_Container::pClassPointer = NULL;

// Class TribesGame.GFxTrScene_ExperienceSummary
// 0x0000 (0x0084 - 0x0084)
class UGFxTrScene_ExperienceSummary : public UGFxTrScene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62895 ];

		return pClassPointer;
	};

};

UClass* UGFxTrScene_ExperienceSummary::pClassPointer = NULL;

// Class TribesGame.GFxTrScene_Friends
// 0x0000 (0x0084 - 0x0084)
class UGFxTrScene_Friends : public UGFxTrScene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62897 ];

		return pClassPointer;
	};

};

UClass* UGFxTrScene_Friends::pClassPointer = NULL;

// Class TribesGame.GFxTrScene_Header
// 0x0000 (0x0084 - 0x0084)
class UGFxTrScene_Header : public UGFxTrScene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62899 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UGFxTrScene_Header::pClassPointer = NULL;

// Class TribesGame.GFxTrScene_Login
// 0x0000 (0x0084 - 0x0084)
class UGFxTrScene_Login : public UGFxTrScene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62902 ];

		return pClassPointer;
	};

};

UClass* UGFxTrScene_Login::pClassPointer = NULL;

// Class TribesGame.TrAward
// 0x0044 (0x0080 - 0x003C)
class UTrAward : public UObject
{
public:
	int                                                DatabaseId;                                       		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                TierLimit[ 0x3 ];                                 		// 0x0040 (0x000C) [0x0000000000000000]              
	float                                              Weight;                                           		// 0x004C (0x0004) [0x0000000000000000]              
	struct FString                                     TitleTier1;                                       		// 0x0050 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TitleTier2;                                       		// 0x005C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TitleTier3;                                       		// 0x0068 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Units;                                            		// 0x0074 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63244 ];

		return pClassPointer;
	};

};

UClass* UTrAward::pClassPointer = NULL;

// Class TribesGame.GFxTrScene_PlayNow
// 0x0000 (0x0084 - 0x0084)
class UGFxTrScene_PlayNow : public UGFxTrScene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63389 ];

		return pClassPointer;
	};

};

UClass* UGFxTrScene_PlayNow::pClassPointer = NULL;

// Class TribesGame.GFxTrScene_Profile
// 0x000C (0x0090 - 0x0084)
class UGFxTrScene_Profile : public UGFxTrScene
{
public:
	TArray< int >                                      ChosenClasses;                                    		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63391 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UGFxTrScene_Profile::pClassPointer = NULL;

// Class TribesGame.GFxTrScene_Settings
// 0x0000 (0x0084 - 0x0084)
class UGFxTrScene_Settings : public UGFxTrScene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63396 ];

		return pClassPointer;
	};

};

UClass* UGFxTrScene_Settings::pClassPointer = NULL;

// Class TribesGame.GFxTrScene_Social
// 0x0000 (0x0084 - 0x0084)
class UGFxTrScene_Social : public UGFxTrScene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63398 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UGFxTrScene_Social::pClassPointer = NULL;

// Class TribesGame.GFxTrUI_ClassMenu
// 0x0000 (0x017C - 0x017C)
class UGFxTrUI_ClassMenu : public UGFxMoviePlayer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63401 ];

		return pClassPointer;
	};

};

UClass* UGFxTrUI_ClassMenu::pClassPointer = NULL;

// Class TribesGame.GFxTrUI_DeployableMenu
// 0x0000 (0x0188 - 0x0188)
class UGFxTrUI_DeployableMenu : public UUTGFxTweenableMoviePlayer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64769 ];

		return pClassPointer;
	};

};

UClass* UGFxTrUI_DeployableMenu::pClassPointer = NULL;

// Class TribesGame.GFxTrUI_LoadoutMenu
// 0x0000 (0x0188 - 0x0188)
class UGFxTrUI_LoadoutMenu : public UUTGFxTweenableMoviePlayer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64771 ];

		return pClassPointer;
	};

};

UClass* UGFxTrUI_LoadoutMenu::pClassPointer = NULL;

// Class TribesGame.GFxTrUI_MainMenu
// 0x0004 (0x01C4 - 0x01C0)
class UGFxTrUI_MainMenu : public UGFxUI_PauseMenu
{
public:
	class UGFxUI_PauseMenu*                            FamilyMenuMovie;                                  		// 0x01C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64773 ];

		return pClassPointer;
	};

	bool Start ( unsigned long StartPaused );
};

UClass* UGFxTrUI_MainMenu::pClassPointer = NULL;

// Class TribesGame.GFxTrUI_VehicleMenu
// 0x0000 (0x0188 - 0x0188)
class UGFxTrUI_VehicleMenu : public UUTGFxTweenableMoviePlayer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64835 ];

		return pClassPointer;
	};

	void OnVehicleScreenFinished ( );
	struct FString GetSelectedVehicle ( );
	void SetVehicleOption ( struct FString ClassName, struct FString DisplayName, int Cost, int nIconIndex );
	void VehicleOptionsClear ( );
	void VehicleOptionsComplete ( int Credits );
	void ConfigureOptions ( class UClass* FamilyInfo );
	bool Start ( unsigned long StartPaused );
};

UClass* UGFxTrUI_VehicleMenu::pClassPointer = NULL;

// Class TribesGame.GFxTrView_MatchMake
// 0x0000 (0x007C - 0x007C)
class UGFxTrView_MatchMake : public UGFxTrFront_View
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64864 ];

		return pClassPointer;
	};

};

UClass* UGFxTrView_MatchMake::pClassPointer = NULL;

// Class TribesGame.TrAccolade_Aftermath
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_Aftermath : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65648 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_Aftermath::pClassPointer = NULL;

// Class TribesGame.TrAccolade_AirMail
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_AirMail : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65650 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_AirMail::pClassPointer = NULL;

// Class TribesGame.TrAccolade_ArtilleryStrike
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_ArtilleryStrike : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65652 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_ArtilleryStrike::pClassPointer = NULL;

// Class TribesGame.TrAccolade_Assist
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_Assist : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65654 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_Assist::pClassPointer = NULL;

// Class TribesGame.TrAccolade_Assist_Vehicle
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_Assist_Vehicle : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65656 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_Assist_Vehicle::pClassPointer = NULL;

// Class TribesGame.TrAccolade_BaseAssist
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_BaseAssist : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65658 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_BaseAssist::pClassPointer = NULL;

// Class TribesGame.TrAccolade_BaseRadarKill
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_BaseRadarKill : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65660 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_BaseRadarKill::pClassPointer = NULL;

// Class TribesGame.TrAccolade_BaseRepair
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_BaseRepair : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65662 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_BaseRepair::pClassPointer = NULL;

// Class TribesGame.TrAccolade_BaseTurretKill
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_BaseTurretKill : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65664 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_BaseTurretKill::pClassPointer = NULL;

// Class TribesGame.TrAccolade_BenchEm
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_BenchEm : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65666 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_BenchEm::pClassPointer = NULL;

// Class TribesGame.TrAccolade_BluePlateSpecial
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_BluePlateSpecial : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65668 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_BluePlateSpecial::pClassPointer = NULL;

// Class TribesGame.TrAccolade_Caerbannog
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_Caerbannog : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65670 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_Caerbannog::pClassPointer = NULL;

// Class TribesGame.TrAccolade_CaptureAndHold
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_CaptureAndHold : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65672 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_CaptureAndHold::pClassPointer = NULL;

// Class TribesGame.TrAccolade_DoubleDown
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_DoubleDown : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65674 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_DoubleDown::pClassPointer = NULL;

// Class TribesGame.TrAccolade_FlagGrab
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_FlagGrab : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65676 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_FlagGrab::pClassPointer = NULL;

// Class TribesGame.TrAccolade_FastGrab
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_FastGrab : public UTrAccolade_FlagGrab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65678 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_FastGrab::pClassPointer = NULL;

// Class TribesGame.TrAccolade_FinalBlow
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_FinalBlow : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65680 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_FinalBlow::pClassPointer = NULL;

// Class TribesGame.TrAccolade_FirstBlood
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_FirstBlood : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65682 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_FirstBlood::pClassPointer = NULL;

// Class TribesGame.TrAccolade_FlagAssist
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_FlagAssist : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65684 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_FlagAssist::pClassPointer = NULL;

// Class TribesGame.TrAccolade_FlagCap
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_FlagCap : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65686 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_FlagCap::pClassPointer = NULL;

// Class TribesGame.TrAccolade_FlagDefense
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_FlagDefense : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65688 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_FlagDefense::pClassPointer = NULL;

// Class TribesGame.TrAccolade_FlagGrabCTF
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_FlagGrabCTF : public UTrAccolade_FlagGrab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65690 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_FlagGrabCTF::pClassPointer = NULL;

// Class TribesGame.TrAccolade_FlagGrabDM
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_FlagGrabDM : public UTrAccolade_FlagGrab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65692 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_FlagGrabDM::pClassPointer = NULL;

// Class TribesGame.TrAccolade_FlagGrabE
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_FlagGrabE : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65694 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_FlagGrabE::pClassPointer = NULL;

// Class TribesGame.TrAccolade_FlagGrabLlama
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_FlagGrabLlama : public UTrAccolade_FlagGrab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65696 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_FlagGrabLlama::pClassPointer = NULL;

// Class TribesGame.TrAccolade_FlagHolder
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_FlagHolder : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65698 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_FlagHolder::pClassPointer = NULL;

// Class TribesGame.TrAccolade_FlagKiller
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_FlagKiller : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65700 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_FlagKiller::pClassPointer = NULL;

// Class TribesGame.TrAccolade_FlagReturn
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_FlagReturn : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65702 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_FlagReturn::pClassPointer = NULL;

// Class TribesGame.TrAccolade_GameComplete
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_GameComplete : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65704 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_GameComplete::pClassPointer = NULL;

// Class TribesGame.TrAccolade_GameWinner
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_GameWinner : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65706 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_GameWinner::pClassPointer = NULL;

// Class TribesGame.TrAccolade_GenDefense
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_GenDefense : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65708 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_GenDefense::pClassPointer = NULL;

// Class TribesGame.TrAccolade_GeneratorKill
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_GeneratorKill : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65710 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_GeneratorKill::pClassPointer = NULL;

// Class TribesGame.TrAccolade_Headshot
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_Headshot : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65712 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_Headshot::pClassPointer = NULL;

// Class TribesGame.TrAccolade_HeavyVehicleDestroy
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_HeavyVehicleDestroy : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65714 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_HeavyVehicleDestroy::pClassPointer = NULL;

// Class TribesGame.TrAccolade_HoldTheLine
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_HoldTheLine : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65716 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_HoldTheLine::pClassPointer = NULL;

// Class TribesGame.TrAccolade_HotAir
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_HotAir : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65718 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_HotAir::pClassPointer = NULL;

// Class TribesGame.TrAccolade_KillStreak_Explosive_Fifteen
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_KillStreak_Explosive_Fifteen : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65720 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_KillStreak_Explosive_Fifteen::pClassPointer = NULL;

// Class TribesGame.TrAccolade_KillStreak_Explosive_Five
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_KillStreak_Explosive_Five : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65722 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_KillStreak_Explosive_Five::pClassPointer = NULL;

// Class TribesGame.TrAccolade_KillStreak_Explosive_Ten
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_KillStreak_Explosive_Ten : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65724 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_KillStreak_Explosive_Ten::pClassPointer = NULL;

// Class TribesGame.TrAccolade_KillStreak_Fifteen
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_KillStreak_Fifteen : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65726 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_KillStreak_Fifteen::pClassPointer = NULL;

// Class TribesGame.TrAccolade_KillStreak_Five
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_KillStreak_Five : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65728 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_KillStreak_Five::pClassPointer = NULL;

// Class TribesGame.TrAccolade_KillStreak_Sniping_Fifteen
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_KillStreak_Sniping_Fifteen : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65730 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_KillStreak_Sniping_Fifteen::pClassPointer = NULL;

// Class TribesGame.TrAccolade_KillStreak_Sniping_Five
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_KillStreak_Sniping_Five : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65732 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_KillStreak_Sniping_Five::pClassPointer = NULL;

// Class TribesGame.TrAccolade_KillStreak_Sniping_Ten
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_KillStreak_Sniping_Ten : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65734 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_KillStreak_Sniping_Ten::pClassPointer = NULL;

// Class TribesGame.TrAccolade_KillStreak_Spinfusor_Fifteen
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_KillStreak_Spinfusor_Fifteen : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65736 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_KillStreak_Spinfusor_Fifteen::pClassPointer = NULL;

// Class TribesGame.TrAccolade_KillStreak_Spinfusor_Five
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_KillStreak_Spinfusor_Five : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65738 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_KillStreak_Spinfusor_Five::pClassPointer = NULL;

// Class TribesGame.TrAccolade_KillStreak_Spinfusor_Ten
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_KillStreak_Spinfusor_Ten : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65740 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_KillStreak_Spinfusor_Ten::pClassPointer = NULL;

// Class TribesGame.TrAccolade_KillStreak_Ten
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_KillStreak_Ten : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65742 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_KillStreak_Ten::pClassPointer = NULL;

// Class TribesGame.TrAccolade_KillStreak_Twenty
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_KillStreak_Twenty : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65744 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_KillStreak_Twenty::pClassPointer = NULL;

// Class TribesGame.TrAccolade_KillStreak_TwentyFive
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_KillStreak_TwentyFive : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65746 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_KillStreak_TwentyFive::pClassPointer = NULL;

// Class TribesGame.TrAccolade_LastManStanding
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_LastManStanding : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65748 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_LastManStanding::pClassPointer = NULL;

// Class TribesGame.TrAccolade_LightVehicleDestroy
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_LightVehicleDestroy : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65750 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_LightVehicleDestroy::pClassPointer = NULL;

// Class TribesGame.TrAccolade_MediumVehicleDestroy
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_MediumVehicleDestroy : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65752 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_MediumVehicleDestroy::pClassPointer = NULL;

// Class TribesGame.TrAccolade_Melee
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_Melee : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65754 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_Melee::pClassPointer = NULL;

// Class TribesGame.TrAccolade_Miracle
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_Miracle : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65756 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_Miracle::pClassPointer = NULL;

// Class TribesGame.TrAccolade_MultiKill_Double
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_MultiKill_Double : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65758 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_MultiKill_Double::pClassPointer = NULL;

// Class TribesGame.TrAccolade_MultiKill_Quatra
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_MultiKill_Quatra : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65760 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_MultiKill_Quatra::pClassPointer = NULL;

// Class TribesGame.TrAccolade_MultiKill_Team
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_MultiKill_Team : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65762 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_MultiKill_Team::pClassPointer = NULL;

// Class TribesGame.TrAccolade_MultiKill_Triple
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_MultiKill_Triple : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65764 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_MultiKill_Triple::pClassPointer = NULL;

// Class TribesGame.TrAccolade_MultiKill_Ultra
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_MultiKill_Ultra : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65766 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_MultiKill_Ultra::pClassPointer = NULL;

// Class TribesGame.TrAccolade_NoJoy
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_NoJoy : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65768 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_NoJoy::pClassPointer = NULL;

// Class TribesGame.TrAccolade_NotAmongEquals
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_NotAmongEquals : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65770 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_NotAmongEquals::pClassPointer = NULL;

// Class TribesGame.TrAccolade_OneManArmy
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_OneManArmy : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65772 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_OneManArmy::pClassPointer = NULL;

// Class TribesGame.TrAccolade_RabbitHunter
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_RabbitHunter : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65774 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_RabbitHunter::pClassPointer = NULL;

// Class TribesGame.TrAccolade_Revenge
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_Revenge : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65776 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_Revenge::pClassPointer = NULL;

// Class TribesGame.TrAccolade_Roadkill
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_Roadkill : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65778 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_Roadkill::pClassPointer = NULL;

// Class TribesGame.TrAccolade_Sticky
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_Sticky : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65780 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_Sticky::pClassPointer = NULL;

// Class TribesGame.TrAccolade_TribalHonor
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_TribalHonor : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65782 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_TribalHonor::pClassPointer = NULL;

// Class TribesGame.TrAccolade_TurretAssist
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_TurretAssist : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65784 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_TurretAssist::pClassPointer = NULL;

// Class TribesGame.TrAccolade_UltraGrab
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_UltraGrab : public UTrAccolade_FlagGrab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65786 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_UltraGrab::pClassPointer = NULL;

// Class TribesGame.TrAccolade_UnitedWeStand
// 0x0000 (0x0080 - 0x0080)
class UTrAccolade_UnitedWeStand : public UTrAccolade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65788 ];

		return pClassPointer;
	};

};

UClass* UTrAccolade_UnitedWeStand::pClassPointer = NULL;

// Class TribesGame.TrAccoladeHelper
// 0x0000 (0x003C - 0x003C)
class UTrAccoladeHelper : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65790 ];

		return pClassPointer;
	};

};

UClass* UTrAccoladeHelper::pClassPointer = NULL;

// Class TribesGame.TrGame_TRCTF
// 0x000C (0x05BC - 0x05B0)
class ATrGame_TRCTF : public ATrGame
{
public:
	class ATrFlagCTF*                                  m_Flags[ 0x2 ];                                   		// 0x05B0 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      AnnouncerMessageClass;                            		// 0x05B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65834 ];

		return pClassPointer;
	};

	int GetGameTypeId ( );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void AnnounceScore ( int ScoringTeam );
	class AActor* GetAutoObjectiveFor ( class AUTPlayerController* PC );
	void ViewObjective ( class APlayerController* PC );
	void ScoreFlag ( class AController* Scorer, class ATrFlagBase* theFlag );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	bool WantFastSpawnFor ( class AAIController* B );
	bool NearGoal ( class AController* C );
	void RegisterFlag ( class AUTCarriedObject* F, int TeamIndex );
	bool GetLocationFor ( class APawn* StatusPawn, int LocationSpeechOffset, class AActor** LocationObject, int* MessageIndex );
	int GetHandicapNeed ( class APawn* Other );
	void ApplyServerSettings ( );
	void PostBeginPlay ( );
};

UClass* ATrGame_TRCTF::pClassPointer = NULL;

// Class TribesGame.TrVehicle_Tank
// 0x0024 (0x0CB0 - 0x0C8C)
class ATrVehicle_Tank : public ATrVehicle
{
public:
	struct FVector                                     GunnerFlashLocation;                              		// 0x0C8C (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    GunnerWeaponRotation;                             		// 0x0C98 (0x000C) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      GunnerFlashCount;                                 		// 0x0CA4 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      GunnerFiringMode;                                 		// 0x0CA5 (0x0001) [0x0000000000000020]              ( CPF_Net )
	class UCameraShake*                                m_FireCameraShake;                                		// 0x0CA8 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_CameraShakeEffectiveRadius;                     		// 0x0CAC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65853 ];

		return pClassPointer;
	};

	struct FRotator LimitViewRotation ( struct FRotator LimitViewRotation, float LimitViewPitchMin, float LimitViewPitchMax );
	void ProcessViewRotationBasedOnSeat ( int SeatIndex, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void VehicleWeaponFireEffects ( struct FVector HitLocation, int SeatIndex );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
};

UClass* ATrVehicle_Tank::pClassPointer = NULL;

// Class TribesGame.TrPhysicsVolume
// 0x0002 (0x024A - 0x0248)
class ATrPhysicsVolume : public APhysicsVolume
{
public:
	unsigned char                                      m_ContextLocation;                                		// 0x0248 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_DefenderTeamIndex;                              		// 0x0249 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65859 ];

		return pClassPointer;
	};

};

UClass* ATrPhysicsVolume::pClassPointer = NULL;

// Class TribesGame.TrDmgType_RanOver
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_RanOver : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65873 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_RanOver::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Explosive
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Explosive : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65875 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Explosive::pClassPointer = NULL;

// Class TribesGame.TrDmgType_StickyGrenade
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_StickyGrenade : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65874 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_StickyGrenade::pClassPointer = NULL;

// Class TribesGame.TrDmgType_LightStickyGrenade
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_LightStickyGrenade : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65876 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_LightStickyGrenade::pClassPointer = NULL;

// Class TribesGame.TrDmgType_ArxBuster
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_ArxBuster : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65877 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_ArxBuster::pClassPointer = NULL;

// Class TribesGame.TrDmgType_MortarLauncher
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_MortarLauncher : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65879 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_MortarLauncher::pClassPointer = NULL;

// Class TribesGame.TrDmgType_PhaseRifle
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_PhaseRifle : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65880 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_PhaseRifle::pClassPointer = NULL;

// Class TribesGame.TrDmgType_SniperRifle
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_SniperRifle : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65881 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_SniperRifle::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Spinfusor
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Spinfusor : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65882 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Spinfusor::pClassPointer = NULL;

// Class TribesGame.TrDmgType_PlasmaGun
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_PlasmaGun : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65883 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_PlasmaGun::pClassPointer = NULL;

// Class TribesGame.TrDmgType_PlasmaCannon
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_PlasmaCannon : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65884 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_PlasmaCannon::pClassPointer = NULL;

// Class TribesGame.TrDmgType_TrackingMissile
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_TrackingMissile : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65885 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_TrackingMissile::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Mine
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Mine : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65886 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Mine::pClassPointer = NULL;

// Class TribesGame.TrGame_TRTeamRabbit
// 0x0010 (0x05C0 - 0x05B0)
class ATrGame_TRTeamRabbit : public ATrGame
{
public:
	unsigned long                                      m_bSpawnFlagOnNextKill : 1;                       		// 0x05B0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bPlayedAnnouncerRally : 1;                      		// 0x05B0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class ATrFlagTeamRabbit*                           m_TeamRabbitFlag;                                 		// 0x05B4 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_nBuffedTeamIndex;                               		// 0x05B8 (0x0001) [0x0000000000000000]              
	int                                                m_nBuffAmount;                                    		// 0x05BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65887 ];

		return pClassPointer;
	};

	int GetGameTypeId ( );
	float RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void ScoreKill ( class AController* Killer, class AController* Other );
	void AwardFlagHolder ( );
	void DroppedFlag ( );
	void PickedUpFlag ( class AController* Holder );
	void FlagDestoyed ( );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType );
	void SpawnFlag ( struct FVector SpawnLocation, struct FVector InitialVelocity );
	void ApplyServerSettings ( );
	void ResetScores ( );
	void ResetLevel ( );
	void PostBeginPlay ( );
};

UClass* ATrGame_TRTeamRabbit::pClassPointer = NULL;

// Class TribesGame.TrActorFactoryPawn
// 0x000C (0x0094 - 0x0088)
class UTrActorFactoryPawn : public UUTActorFactoryAI
{
public:
	int                                                NextTeam;                                         		// 0x0088 (0x0004) [0x0000000000000000]              
	float                                              GroundSpeed;                                      		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      FamilyInfo;                                       		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65899 ];

		return pClassPointer;
	};

	void eventPostCreateActor ( class AActor* NewActor );
};

UClass* UTrActorFactoryPawn::pClassPointer = NULL;

// Class TribesGame.TrPlayerPawn
// 0x0100 (0x0D70 - 0x0C70)
class ATrPlayerPawn : public ATrPawn
{
public:
	class UAudioComponent*                             m_AudioComonentJetpackAttack;                     		// 0x0C70 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_fRemainingJetpackSoundFadeOutTime;              		// 0x0C74 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fJetpackSoundFadeOutTime;                       		// 0x0C78 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTrAnimNodeBlendBy3pDevice*                  m_3pDeviceAnimNode;                               		// 0x0C7C (0x0004) [0x0000000000000000]              
	class UTrAnimNodeBlendBy3pDevice*                  m_1pBodyMeshDeviceAnimNode;                       		// 0x0C80 (0x0004) [0x0000000000000000]              
	unsigned char                                      r_nFlashReloadPrimaryWeapon;                      		// 0x0C84 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      r_nFlashReloadSecondaryWeapon;                    		// 0x0C85 (0x0001) [0x0000000000000020]              ( CPF_Net )
	TArray< class UParticleSystemComponent* >          m_JetpackPSCs;                                    		// 0x0C88 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UParticleSystemComponent* >          m_JetpackRibbonPSCs;                              		// 0x0C94 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FFootstepParticleInfo >             m_HardLandingParticles;                           		// 0x0CA0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FFootstepParticleInfo >             m_StepParticles;                                  		// 0x0CAC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UParticleSystem*                             m_DefaultSkiJetParticle;                          		// 0x0CB8 (0x0004) [0x0000000000000000]              
	TArray< class UParticleSystemComponent* >          m_FootThrusterPSCs;                               		// 0x0CBC (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class USoundCue*                                   m_SonicPunch1p;                                   		// 0x0CC8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_SonicPunch3p;                                   		// 0x0CCC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             m_SonicPunchEffect1p;                             		// 0x0CD0 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             m_SonicPunchEffect3p;                             		// 0x0CD4 (0x0004) [0x0000000000000000]              
	float                                              m_fRibbonZVelocity;                               		// 0x0CD8 (0x0004) [0x0000000000000000]              
	struct FRotator                                    m_CamRotOffset;                                   		// 0x0CDC (0x000C) [0x0000000000000000]              
	class AActor*                                      m_DeathCamFocus;                                  		// 0x0CE8 (0x0004) [0x0000000000000000]              
	float                                              m_Cam3pZoomOutSpeed;                              		// 0x0CEC (0x0004) [0x0000000000000000]              
	float                                              m_Cam3pZoomInSpeed;                               		// 0x0CF0 (0x0004) [0x0000000000000000]              
	float                                              m_EyeHeightWalkingMinSmoothing;                   		// 0x0CF4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_EyeHeightWalkingMultiplier;                     		// 0x0CF8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_EyeHeightLandRecoveryMinSmoothing;              		// 0x0CFC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_EyeHeightLandRecoveryMultiplier;                		// 0x0D00 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_EyeHeightLandRecoveryMultiplier1;               		// 0x0D04 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_EyeHeightLandRecoveryMultiplier2;               		// 0x0D08 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_EyeHeightLandingMinSmoothing;                   		// 0x0D0C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_EyeHeightLandingMultiplier;                     		// 0x0D10 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_EyeHeightLandingMultiplier1;                    		// 0x0D14 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_EyeHeightLandingMultiplier2;                    		// 0x0D18 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_EyeHeightLandingMultiplier3;                    		// 0x0D1C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_EyeHeightLandingMultiplier4;                    		// 0x0D20 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_EyeHeightLandingMultiplier5;                    		// 0x0D24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_EyeHeightLandingSpeedSqThreshold;               		// 0x0D28 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_EyeHeightLandingSpeedSqThresholdSkiing;         		// 0x0D2C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_EyeHeightLandingSkiingMultiplier;               		// 0x0D30 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_EyeHeightLandingSkiingMultiplier2;              		// 0x0D34 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_JumpBob1;                                       		// 0x0D38 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_JumpBob2;                                       		// 0x0D3C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_JumpBob3;                                       		// 0x0D40 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_JumpBob4;                                       		// 0x0D44 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_JumpBob5;                                       		// 0x0D48 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_BobFootstepMultiplier;                          		// 0x0D4C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_WeaponBobMultiplier1;                           		// 0x0D50 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_WeaponBobMultiplier2;                           		// 0x0D54 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BobTimeMultiplier;                                		// 0x0D58 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BobGroundSpeedMultiplier1;                        		// 0x0D5C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BobGroundSpeedMultiplier2;                        		// 0x0D60 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimNodeSequence* >                 m_MeshAnimSequenceNodes;                          		// 0x0D64 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65907 ];

		return pClassPointer;
	};

	void SuppressAnimNotifies ( unsigned long bSuppress );
	void CacheMeshAnimSeqNodes ( );
	void ClearMeshAnimSeqNodes ( );
	bool CalcOtherWatchingCam ( float fDeltaTime, class ATrPlayerController* WatcherController, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool CalcThirdPersonCam ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void SetThirdPersonCamera ( unsigned long bNewBehindView );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void Tick ( float DeltaTime );
	void PlayReload ( unsigned char EquipPoint );
	void eventStopJetpackEffects ( );
	void eventUpdateJetpackEffects ( );
	void eventPlayJetpackEffects ( );
	void ClearJetpackParticleEffects ( );
	void CreateJetpackParticleEffects ( );
	void eventStopSkiEffects ( );
	void eventPlaySkiEffects ( );
	void ClearSkiParticleEffects ( );
	void CreateSkiParticleEffects ( );
	void PlaySonicPunchEffect ( );
	void PlayHardLandingEffect ( struct FVector HitLocation );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventReplicatedEvent ( struct FName VarName );
	struct FVector WeaponBob ( float BobDamping, float JumpDamping );
	void ActuallyPlayFootstepSound ( int FootDown );
	struct FName GetMaterialBelowFeet ( );
	struct FName GetMaterialBelowFeetByLoc ( struct FVector TestLocation );
	void eventUpdateEyeHeight ( float DeltaTime );
	void SetCharacterClassFromInfo ( class UClass* Info, unsigned long bForce );
};

UClass* ATrPlayerPawn::pClassPointer = NULL;

// Class TribesGame.TrBotPawn
// 0x0000 (0x0D70 - 0x0D70)
class ATrBotPawn : public ATrPlayerPawn
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65906 ];

		return pClassPointer;
	};

	void eventRechargeHealthPool ( float DeltaSeconds );
	void Tick ( float DeltaTime );
	void SetMovementPhysics ( );
};

UClass* ATrBotPawn::pClassPointer = NULL;

// Class TribesGame.TrBotAIController
// 0x0000 (0x0618 - 0x0618)
class ATrBotAIController : public AUTBot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65909 ];

		return pClassPointer;
	};

	void Possess ( class APawn* aPawn, unsigned long bVehicleTransition );
	void StopJetting ( );
	void StartJetting ( struct FVector Direction, float Magnitude );
	void OnAIMoveToActor ( class USeqAct_AIMoveToActor* Action );
	void OnAIStopSkiing ( class UTrSeqAct_AIStopSkiing* Action );
	void OnAIStartSkiing ( class UTrSeqAct_AIStartSkiing* Action );
	void OnAIStopJetting ( class UTrSeqAct_AIStopJetting* Action );
	void OnAIStartJetting ( class UTrSeqAct_AIStartJetting* Action );
};

UClass* ATrBotAIController::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium : public UTrFamilyInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65913 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Soldier
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Soldier : public UTrFamilyInfo_Medium
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65912 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Soldier::pClassPointer = NULL;

// Class TribesGame.TrActorFactoryVehicle
// 0x0001 (0x0061 - 0x0060)
class UTrActorFactoryVehicle : public UActorFactoryVehicle
{
public:
	unsigned char                                      TeamNum;                                          		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65914 ];

		return pClassPointer;
	};

	void eventPostCreateActor ( class AActor* NewActor );
};

UClass* UTrActorFactoryVehicle::pClassPointer = NULL;

// Class TribesGame.TrAnnouncer
// 0x0014 (0x01F0 - 0x01DC)
class ATrAnnouncer : public AInfo
{
public:
	TArray< class USoundCue* >                         m_QueuedAnnouncements;                            		// 0x01DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UAudioComponent*                             m_CurrentAnnouncementAudioComponent;              		// 0x01E8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ATrPlayerController*                         m_PlayerOwner;                                    		// 0x01EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66159 ];

		return pClassPointer;
	};

	void AnnouncementFinished ( class UAudioComponent* AC );
	void PlayAnnouncement ( class USoundCue* AnnouncementCue, unsigned long bPlayRightNow );
	void PostBeginPlay ( );
	void Destroyed ( );
};

UClass* ATrAnnouncer::pClassPointer = NULL;

// Class TribesGame.TrArenaMessage
// 0x006C (0x00D0 - 0x0064)
class UTrArenaMessage : public UUTLocalMessage
{
public:
	struct FString                                     TenTeamRespawnsRemain;                            		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FiveTeamRespawnsRemain;                           		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TeamRespawnsDepleted;                             		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     YouAreLastManStanding;                            		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Fight;                                            		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoRespawnsRemain;                                 		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CannotSwitchTeam;                                 		// 0x00AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeWonTheRound;                                    		// 0x00B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeLostTheRound;                                   		// 0x00C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66172 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrArenaMessage::pClassPointer = NULL;

// Class TribesGame.TrArenaStats
// 0x0038 (0x0074 - 0x003C)
class UTrArenaStats : public UObject
{
public:
	int                                                MyTeam;                                           		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                RemainingTime;                                    		// 0x0040 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsActive : 1;                                    		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bForcingUpdate : 1;                               		// 0x0044 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                TeamScore[ 0x2 ];                                 		// 0x0048 (0x0008) [0x0000000000000000]              
	int                                                RoundScore[ 0x2 ];                                		// 0x0050 (0x0008) [0x0000000000000000]              
	int                                                RoundNum;                                         		// 0x0058 (0x0004) [0x0000000000000000]              
	class UGfxTrHud*                                   m_MoviePlayer;                                    		// 0x005C (0x0004) [0x0000000000000000]              
	class ATrPlayerController*                         TrPC;                                             		// 0x0060 (0x0004) [0x0000000000000000]              
	unsigned char                                      FriendlyManGraphics[ 0x8 ];                       		// 0x0064 (0x0008) [0x0000000000000000]              
	unsigned char                                      EnemyManGraphics[ 0x8 ];                          		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66218 ];

		return pClassPointer;
	};

	void ForceUpdate ( );
	struct FString FormatTime ( int Seconds );
	void UpdateTime ( class ATrGameReplicationInfo* GRI );
	void UpdateRound ( class ATrGameReplicationInfo* GRI );
	void SetManGraphicState ( unsigned long bFriendly, int Index, unsigned char NewState );
	void UpdateTeamScore ( class ATrGameReplicationInfo* GRI );
	void UpdateTeam ( );
	void Tick ( );
	void Hide ( );
	void Show ( );
	void Initialize ( class ATrPlayerController* PC, class UGfxTrHud* MP );
};

UClass* UTrArenaStats::pClassPointer = NULL;

// Class TribesGame.TrEffect
// 0x0014 (0x0050 - 0x003C)
class UTrEffect : public UObject
{
public:
	int                                                m_nEffectInstanceId;                              		// 0x003C (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eCalcMethodCode;                                		// 0x0040 (0x0001) [0x0000000000000000]              
	unsigned long                                      m_bRemovable : 1;                                 		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              m_fValue;                                         		// 0x0048 (0x0004) [0x0000000000000000]              
	class UClass*                                      m_EffectFormClass;                                		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66790 ];

		return pClassPointer;
	};

	bool CanBeApplied ( class AActor* Target );
	void Remove ( class AActor* Target );
	void Apply ( class AActor* Target, struct FImpactInfo Impact );
};

UClass* UTrEffect::pClassPointer = NULL;

// Class TribesGame.TrValueModifier
// 0x0150 (0x018C - 0x003C)
class UTrValueModifier : public UObject
{
public:
	struct FString                                     FriendlyName;                                     		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                IconId;                                           		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                DatabaseItemId;                                   		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              m_fHealthBuff;                                    		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              m_fPrimaryWeaponReloadBuffPct;                    		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              m_fSecondaryWeaponReloadBuffPct;                  		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              m_fPrimaryWeaponArmorPenetrationBuffPct;          		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              m_fSecondaryWeaponArmorPenetrationBuffPct;        		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              m_fMaxJettingSpeedBuff;                           		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              m_fTerminalJettingSpeedBuff;                      		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxSkiSpeedBuff;                               		// 0x0078 (0x0004) [0x0000000000000000]              
	float                                              m_fTerminalSkiSpeedBuff;                          		// 0x007C (0x0004) [0x0000000000000000]              
	float                                              m_fHealthRegenRateBuffPct;                        		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeToRegenHealthBuffPct;                      		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              m_fExtraEnergyBuff;                               		// 0x0088 (0x0004) [0x0000000000000000]              
	float                                              m_fVehicleExtraHealthBuffPct;                     		// 0x008C (0x0004) [0x0000000000000000]              
	float                                              m_fVehicleExtraEnergyBuffPct;                     		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeToRegenEnergyBuff;                         		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              m_fEnergyRegenRateBuffPct;                        		// 0x0098 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bStickyHands : 1;                               		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bCanCallInSupplyDrop : 1;                       		// 0x009C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bCanDetectTraps : 1;                            		// 0x009C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bCanDamageRepairEnemyObjectives : 1;            		// 0x009C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bHasDetermination : 1;                          		// 0x009C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bVictimDropFlagOnMelee : 1;                     		// 0x009C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bEjectionSeat : 1;                              		// 0x009C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bClothesline : 1;                               		// 0x009C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bPotentialEnergy : 1;                           		// 0x009C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bPotentialEnergyFallDamage : 1;                 		// 0x009C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      m_bRadarLink : 1;                                 		// 0x009C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bFlagReach : 1;                                 		// 0x009C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      m_bAmmoPickupReach : 1;                           		// 0x009C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bIgnoreGrenadeSecondaryOnSelf : 1;              		// 0x009C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      m_bSonicPunch : 1;                                		// 0x009C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      m_bRage : 1;                                      		// 0x009C (0x0004) [0x0000000000000000] [0x00008000] 
	int                                                m_nExtraOffhandAmmo;                              		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              m_fOffhandDamageRadiusBuffPct;                    		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                m_nExtraPrimaryAmmo;                              		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                m_nExtraSecondaryAmmo;                            		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              m_fSelfDamagePct;                                 		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              m_fPeakSkiControlSpeedBuff;                       		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              m_fSkiControlSigmaSquareBuff;                     		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxSkiControlBuffPct;                          		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              m_fPackEnergyCostBuffPct;                         		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              m_fBlinkPackPotencyBuffPct;                       		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              m_fSplatDamageBuffPct;                            		// 0x00C8 (0x0004) [0x0000000000000000]              
	int                                                m_nCreditsFromKillsBuff;                          		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              m_fVehicleRunOverDamageProtectionPct;             		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              m_fMultiCrewedVehicleDamageProtectionPct;         		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                m_nExtraGrenadesFromPickupBuff;                   		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              m_fAmmoFromPickupBuffPct;                         		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              m_fTurretAcquireTargetBuffPct;                    		// 0x00E0 (0x0004) [0x0000000000000000]              
	int                                                m_nExtraDeployablesOutBuff;                       		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              m_fDeployedTurretArmorPenetrationBuffPct;         		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              m_fRepairRateBuffPct;                             		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              m_fRepairDeployableRateBuffPct;                   		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              m_fUpgradeCostBuffPct;                            		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              m_fReceiveMeleeDamageBuffPct;                     		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              m_fDeployableRangeBuffPct;                        		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              m_fVehicleCostBuffPct;                            		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                m_nExtraMinesOutBuff;                             		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              m_fPrimaryWeaponRangeBuffPct;                     		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              m_fSecondaryWeaponRangeBuffPct;                   		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              m_fHealthFromPickupBuffPct;                       		// 0x0110 (0x0004) [0x0000000000000000]              
	float                                              m_fEnergyFromPickupBuffPct;                       		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              m_fDeployableHealthBuff;                          		// 0x0118 (0x0004) [0x0000000000000000]              
	float                                              m_fBuildupBuffPct;                                		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              m_fShieldPackEffectivenessBuff;                   		// 0x0120 (0x0004) [0x0000000000000000]              
	float                                              m_fStealthPackPulseTimeBuffPct;                   		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                m_nPrimaryWeaponIncreasedClipSizeBuff;            		// 0x0128 (0x0004) [0x0000000000000000]              
	int                                                m_nSecondaryWeaponIncreasedClipSizeBuff;          		// 0x012C (0x0004) [0x0000000000000000]              
	float                                              m_fOffhandArmorPenetrationBuffPct;                		// 0x0130 (0x0004) [0x0000000000000000]              
	int                                                m_nExtraCreditsFromBeltKills;                     		// 0x0134 (0x0004) [0x0000000000000000]              
	float                                              m_fBackstabMeleeDamagePctBuff;                    		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              m_fAcquireTimeByEnemyTurretPctBuff;               		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              m_fSensorDistancePctBuff;                         		// 0x0140 (0x0004) [0x0000000000000000]              
	float                                              m_fWhiteOutInterpSpeedPctBuff;                    		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              m_fJammerPackRadiusPctBuff;                       		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              m_fEnergyDrainPctBuff;                            		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              m_fWeaponSwitchPctBuff;                           		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              m_fGroundSpeedPctBuff;                            		// 0x0154 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxStoppingDistancePctBuff;                    		// 0x0158 (0x0004) [0x0000000000000000]              
	float                                              m_fMassPctBuff;                                   		// 0x015C (0x0004) [0x0000000000000000]              
	float                                              m_fPrimaryWeaponEnergyCostPctBuff;                		// 0x0160 (0x0004) [0x0000000000000000]              
	float                                              m_fPotentialEnergyDamageTransferPct;              		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                m_nFlagReachTier;                                 		// 0x0168 (0x0004) [0x0000000000000000]              
	float                                              m_fFasterThrowBeltBuffPct;                        		// 0x016C (0x0004) [0x0000000000000000]              
	float                                              m_fSonicPunchDistance;                            		// 0x0170 (0x0004) [0x0000000000000000]              
	float                                              m_fSonicPunchKnockback;                           		// 0x0174 (0x0004) [0x0000000000000000]              
	float                                              m_fRageEnergyRegenRateBuffPct;                    		// 0x0178 (0x0004) [0x0000000000000000]              
	float                                              m_fRageLength;                                    		// 0x017C (0x0004) [0x0000000000000000]              
	float                                              m_fRageHealthRestorationPct;                      		// 0x0180 (0x0004) [0x0000000000000000]              
	float                                              m_fRageMassPctBuff;                               		// 0x0184 (0x0004) [0x0000000000000000]              
	float                                              m_fIgnorePulseTime;                               		// 0x0188 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67006 ];

		return pClassPointer;
	};

	void LogModifiedValues ( );
	void MergeModification ( int ModType, float Value );
	void MergeClass ( class UClass* ModifierClassToMerge );
	void Merge ( class UTrValueModifier* ModifierToMerge );
	void Reset ( );
};

UClass* UTrValueModifier::pClassPointer = NULL;

// Class TribesGame.TrInventoryManager
// 0x0010 (0x0224 - 0x0214)
class ATrInventoryManager : public AUTInventoryManager
{
public:
	class ATrDevice*                                   m_RealLastDevice;                                 		// 0x0214 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_PreviousDeviceEquipPoint;                       		// 0x0218 (0x0001) [0x0000000000000000]              
	class UTrStatsInterface*                           Stats;                                            		// 0x021C (0x0004) [0x0000000000000000]              
	unsigned long                                      c_bRetryEquippingPrimaryWeapon : 1;               		// 0x0220 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67015 ];

		return pClassPointer;
	};

	void ServerAutoFireWeapon ( unsigned char EquipPoint );
	void SwitchToPreviousWeapon ( );
	void SwitchWeaponByEquipPoint ( unsigned char EquipPoint );
	void AutoFireWeapon ( unsigned char EquipPoint );
	void RemoveFromInventory ( class AInventory* ItemToRemove );
	bool AddInventory ( class AInventory* NewItem, unsigned long bDoNotActivate );
	void SetPendingWeapon ( class AWeapon* DesiredWeapon );
	void AdjustWeapon ( int NewOffset );
	void DiscardEquippedDeployable ( );
	void TrGetWeaponList ( unsigned long bInhandOnly, TArray< class ATrDevice* >* WeaponList );
	class ATrDevice* GetDeviceByWeaponId ( int WeaponId );
	class ATrDevice* GetDeviceByWeaponClass ( class UClass* DeviceClass );
	class ATrDevice* GetDeviceByEquipPoint ( unsigned char EquipPoint );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* ATrInventoryManager::pClassPointer = NULL;

// Class TribesGame.TrProj_Tracer
// 0x003C (0x0368 - 0x032C)
class ATrProj_Tracer : public ATrProjectile
{
public:
	class UParticleSystemComponent*                    m_TracerPSC;                                      		// 0x032C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_fAccelRate;                                     		// 0x0330 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vTracerDrawScale3D;                             		// 0x0334 (0x000C) [0x0000000000000000]              
	float                                              m_fMeshScaleUpTime;                               		// 0x0340 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bScaledUp : 1;                                  		// 0x0344 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bScalingDown : 1;                               		// 0x0344 (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              m_fCurScale;                                      		// 0x0348 (0x0004) [0x0000000000000000]              
	float                                              m_fMeshScaleDownTime;                             		// 0x034C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vDestinationLoc;                                		// 0x0350 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vInitialFrameOfRefVelocity;                     		// 0x035C (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67048 ];

		return pClassPointer;
	};

	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void WakeProjectile ( );
	void Reset ( );
	void Recycle ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void Tick ( float DeltaTime );
	void eventOutsideWorldBounds ( );
	void ScaleUpFinishedNotify ( );
	void ScaleDownFinishedNotify ( );
	void KillProjectile ( );
	void InitTracer ( struct FVector Start, struct FVector End );
	void CalcTracerAccel ( );
	void eventReplicatedEvent ( struct FName VarName );
	void PostBeginPlay ( );
};

UClass* ATrProj_Tracer::pClassPointer = NULL;

// Class TribesGame.TrObjectPool
// 0x00B8 (0x0294 - 0x01DC)
class ATrObjectPool : public AActor
{
public:
	struct FTracerCacheInfo                            m_TracerCache[ 0x2 ];                             		// 0x01DC (0x00B8) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67057 ];

		return pClassPointer;
	};

	class ATrProj_Tracer* GetTracer ( unsigned char TracerType, unsigned char ActiveReloadTier, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	void CreateTracer ( unsigned char TracerType, class UClass* TracerClass, int Idx, unsigned long bForceCreate );
	void CreateTracers ( );
	void CleanupTracers ( );
	void CleanUpPools ( );
	void CreatePools ( );
	void eventDestroyed ( );
	void eventPreBeginPlay ( );
};

UClass* ATrObjectPool::pClassPointer = NULL;

// Class TribesGame.TrProj_ClientTracer
// 0x0004 (0x0330 - 0x032C)
class ATrProj_ClientTracer : public ATrProjectile
{
public:
	class UClass*                                      m_InheritedClass;                                 		// 0x032C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67211 ];

		return pClassPointer;
	};

	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	class USoundCue* GetExplosionSound ( class UPhysicalMaterial* HitMaterial, class AActor* HitActor );
	void InitProjectile ( struct FVector Direction, class UClass* ClassToInherit );
};

UClass* ATrProj_ClientTracer::pClassPointer = NULL;

// Class TribesGame.TrHelpTextManager
// 0x0314 (0x04F0 - 0x01DC)
class ATrHelpTextManager : public AActor
{
public:
	unsigned long                                      m_bShowHelpTexts : 1;                             		// 0x01DC (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressSkiingHowTo : 1;                       		// 0x01DC (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressGeneratorDescriptionLevel1 : 1;        		// 0x01DC (0x0004) [0x0000000000044000] [0x00000004] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressGeneratorDescriptionLevel2 : 1;        		// 0x01DC (0x0004) [0x0000000000044000] [0x00000008] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressGeneratorDescriptionLevel3 : 1;        		// 0x01DC (0x0004) [0x0000000000044000] [0x00000010] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressGeneratorDescriptionLevel4 : 1;        		// 0x01DC (0x0004) [0x0000000000044000] [0x00000020] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressJetpackHowTo : 1;                      		// 0x01DC (0x0004) [0x0000000000044000] [0x00000040] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressOutOfAmmoNotifier : 1;                 		// 0x01DC (0x0004) [0x0000000000044000] [0x00000080] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressOffhandReminder : 1;                   		// 0x01DC (0x0004) [0x0000000000044000] [0x00000100] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressCTFFlagDescription : 1;                		// 0x01DC (0x0004) [0x0000000000044000] [0x00000200] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressHoldingEnemyFlagDescription : 1;       		// 0x01DC (0x0004) [0x0000000000044000] [0x00000400] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressRabbitFlagDescription : 1;             		// 0x01DC (0x0004) [0x0000000000044000] [0x00000800] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressHoldingRabbitFlagDescription : 1;      		// 0x01DC (0x0004) [0x0000000000044000] [0x00001000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressInventoryStationDescription : 1;       		// 0x01DC (0x0004) [0x0000000000044000] [0x00002000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressVehicleStationDescription : 1;         		// 0x01DC (0x0004) [0x0000000000044000] [0x00004000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressBaseTurretDescriptionLevel1 : 1;       		// 0x01DC (0x0004) [0x0000000000044000] [0x00008000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressBaseTurretDescriptionLevel2 : 1;       		// 0x01DC (0x0004) [0x0000000000044000] [0x00010000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressBaseTurretDescriptionLevel3 : 1;       		// 0x01DC (0x0004) [0x0000000000044000] [0x00020000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressBaseTurretDescriptionLevel4 : 1;       		// 0x01DC (0x0004) [0x0000000000044000] [0x00040000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressRadarSensorDescriptionLevel1 : 1;      		// 0x01DC (0x0004) [0x0000000000044000] [0x00080000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressRadarSensorDescriptionLevel2 : 1;      		// 0x01DC (0x0004) [0x0000000000044000] [0x00100000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressRadarSensorDescriptionLevel3 : 1;      		// 0x01DC (0x0004) [0x0000000000044000] [0x00200000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressRadarSensorDescriptionLevel4 : 1;      		// 0x01DC (0x0004) [0x0000000000044000] [0x00400000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressRepairStationDescription : 1;          		// 0x01DC (0x0004) [0x0000000000044000] [0x00800000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressArmoredTargetDescription : 1;          		// 0x01DC (0x0004) [0x0000000000044000] [0x01000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressCreditsDescription : 1;                		// 0x01DC (0x0004) [0x0000000000044000] [0x02000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressYouCanPickupPassengerReminder : 1;     		// 0x01DC (0x0004) [0x0000000000044000] [0x04000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressConduitDescription : 1;                		// 0x01DC (0x0004) [0x0000000000044000] [0x08000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressSpotTargetReminder : 1;                		// 0x01DC (0x0004) [0x0000000000044000] [0x10000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressChangingClassDescription : 1;          		// 0x01DC (0x0004) [0x0000000000044000] [0x20000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bSuppressChangingClassHowTo : 1;                		// 0x01DC (0x0004) [0x0000000000044000] [0x40000000] ( CPF_Config | CPF_GlobalConfig )
	struct FString                                     m_HelpTextSkiingHowTo;                            		// 0x01E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextGeneratorDescriptionLevel1;             		// 0x01EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextGeneratorDescriptionLevel2;             		// 0x01F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextGeneratorDescriptionLevel3;             		// 0x0204 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextGeneratorDescriptionLevel4;             		// 0x0210 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextJetpackHowTo;                           		// 0x021C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextOutOfAmmoNotifier;                      		// 0x0228 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextOffhandReminder;                        		// 0x0234 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextCTFFlagDescription;                     		// 0x0240 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextHoldingEnemyFlagDescription;            		// 0x024C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextRabbitFlagDescription;                  		// 0x0258 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextHoldingRabbitFlagDescription;           		// 0x0264 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextInventoryStationDescription;            		// 0x0270 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextVehicleStationDescription;              		// 0x027C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextBaseTurretDescriptionLevel1;            		// 0x0288 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextBaseTurretDescriptionLevel2;            		// 0x0294 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextBaseTurretDescriptionLevel3;            		// 0x02A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextBaseTurretDescriptionLevel4;            		// 0x02AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextRadarSensorDescriptionLevel1;           		// 0x02B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextRadarSensorDescriptionLevel2;           		// 0x02C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextRadarSensorDescriptionLevel3;           		// 0x02D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextRadarSensorDescriptionLevel4;           		// 0x02DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextRepairStationDescription;               		// 0x02E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextArmoredTargetDescription;               		// 0x02F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextCreditsDescription;                     		// 0x0300 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextYouCanPickupPassengerReminder;          		// 0x030C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextConduitDescription;                     		// 0x0318 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextSpotTargetReminder;                     		// 0x0324 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextChangingClassDescription;               		// 0x0330 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextChangingClassHowTo;                     		// 0x033C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextSkiingHowToMenuTitle;                   		// 0x0348 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextGeneratorDescriptionMenuTitleLevel1;    		// 0x0354 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextGeneratorDescriptionMenuTitleLevel2;    		// 0x0360 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextGeneratorDescriptionMenuTitleLevel3;    		// 0x036C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextGeneratorDescriptionMenuTitleLevel4;    		// 0x0378 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextJetpackHowToMenuTitle;                  		// 0x0384 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextOutOfAmmoNotifierMenuTitle;             		// 0x0390 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextOffhandReminderMenuTitle;               		// 0x039C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextCTFFlagDescriptionMenuTitle;            		// 0x03A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextHoldingEnemyFlagDescriptionMenuTitle;   		// 0x03B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextRabbitFlagDescriptionMenuTitle;         		// 0x03C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextHoldingRabbitFlagDescriptionMenuTitle;  		// 0x03CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextInventoryStationDescriptionMenuTitle;   		// 0x03D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextVehicleStationDescriptionMenuTitle;     		// 0x03E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextBaseTurretDescriptionMenuTitleLevel1;   		// 0x03F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextBaseTurretDescriptionMenuTitleLevel2;   		// 0x03FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextBaseTurretDescriptionMenuTitleLevel3;   		// 0x0408 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextBaseTurretDescriptionMenuTitleLevel4;   		// 0x0414 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextRadarSensorDescriptionMenuTitleLevel1;  		// 0x0420 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextRadarSensorDescriptionMenuTitleLevel2;  		// 0x042C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextRadarSensorDescriptionMenuTitleLevel3;  		// 0x0438 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextRadarSensorDescriptionMenuTitleLevel4;  		// 0x0444 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextRepairStationDescriptionMenuTitle;      		// 0x0450 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextArmoredTargetDescriptionMenuTitle;      		// 0x045C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextCreditsDescriptionMenuTitle;            		// 0x0468 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextYouCanPickupPassengerReminderMenuTitle; 		// 0x0474 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextConduitDescriptionMenuTitle;            		// 0x0480 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextSpotTargetReminderMenuTitle;            		// 0x048C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextChangingClassDescriptionMenuTitle;      		// 0x0498 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_HelpTextChangingClassHowToMenuTitle;            		// 0x04A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_LocalizedSuppressString;                        		// 0x04B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              m_OffhandReminderInitialTime;                     		// 0x04BC (0x0004) [0x0000000000000000]              
	float                                              m_OffhandReminderRecursiveTime;                   		// 0x04C0 (0x0004) [0x0000000000000000]              
	float                                              m_SpotTargetReminderInitialTime;                  		// 0x04C4 (0x0004) [0x0000000000000000]              
	float                                              m_SpotTargetReminderRecursiveTime;                		// 0x04C8 (0x0004) [0x0000000000000000]              
	TArray< struct FHelpTextInfo >                     m_HelpTextConfig;                                 		// 0x04CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            m_HelpTextQueue;                                  		// 0x04D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FHelpTextTypeRemovalTimerInfo >     m_HelpTextTypesToRemoveOnTimers;                  		// 0x04E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67292 ];

		return pClassPointer;
	};

	void EnableHelpText ( unsigned long bEnabled );
	void ResetConfig ( );
	void UpdateTypesToRemoveOnTimers ( float DeltaTime );
	void ClearSpotTargetReminderTimer ( );
	void SpotTargetReminderTimer ( );
	void ClearOffhandReminderTimer ( );
	void OffhandReminderTimer ( );
	bool UnsuppressedHelpTextsExist ( );
	int HelpTextQueueSort ( unsigned char A, unsigned char B );
	struct FString FormatText ( struct FString InString );
	void UpdateHUD ( );
	void SuppressHelpText ( unsigned char TypeToSuppress );
	void RemoveHelpText ( unsigned char TypeToRemove, float Time, unsigned long bDoNotSuppress );
	bool RequestHelpText ( unsigned char RequestedType );
	bool IsSuppressed ( unsigned char RequestedType );
	bool CheckDestroy ( );
	void eventTick ( float DeltaTime );
	void LevelLoadCompleted ( );
	void InitHelpTextManager ( );
	void PostBeginPlay ( );
};

UClass* ATrHelpTextManager::pClassPointer = NULL;

// Class TribesGame.TrDeviceAttachment
// 0x0053 (0x0310 - 0x02BD)
class ATrDeviceAttachment : public AUTWeaponAttachment
{
public:
	struct FName                                       m_nmLightMedAimProfileName;                       		// 0x02C0 (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmHeavyAimProfileName;                          		// 0x02C8 (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bSpawnTracers : 1;                              		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bSpawnTracerBeams : 1;                          		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bScaleFireAnimRate : 1;                         		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class UParticleSystem*                             m_TracerBeamTemplate;                             		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_TracerType;                                     		// 0x02D8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fShowTracerDistance;                            		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          m_LightMed3pPawnAnimSets;                         		// 0x02E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          m_Heavy3pPawnAnimSets;                            		// 0x02EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FEffectFormOverwrite >              m_EffectFormOverwrite;                            		// 0x02F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       m_nmRidingAsPassengerFireAnimName;                		// 0x0304 (0x0008) [0x0000000000000000]              
	class UAudioComponent*                             m_AudioComponentWeaponLoop;                       		// 0x030C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67353 ];

		return pClassPointer;
	};

	struct FMaterialImpactEffect GetImpactEffect ( class UPhysicalMaterial* HitMaterial );
	void PlayImpactSound ( class AActor* HitActor, class USoundCue* SoundToPlay, struct FVector FireDir, struct FVector HitLocation );
	void PlayImpactEffects ( struct FVector HitLocation );
	void PlayReload ( );
	class ATrProj_Tracer* GetTracer ( struct FVector SpawnLocation, struct FRotator SpawnRotation );
	class ATrProj_Tracer* SpawnTracerEffect ( struct FVector HitLocation, float HitDistance );
	void SpawnTracerBeam ( struct FVector Start, struct FVector End );
	void FirstPersonFireEffects ( class AWeapon* PawnWeapon, struct FVector HitLocation );
	void eventStopThirdPersonFireEffects ( );
	void ThirdPersonFireEffects ( struct FVector HitLocation );
	bool ShouldFireTracerBeam ( );
	bool ShouldFireTracer ( );
	void SetPuttingDownWeapon ( unsigned long bNowPuttingDown );
	void DetachFrom ( class USkeletalMeshComponent* MeshCpnt );
	void InitAnims ( class ATrPawn* TRP );
	void AttachTo ( class AUTPawn* OwnerPawn );
};

UClass* ATrDeviceAttachment::pClassPointer = NULL;

// Class TribesGame.TrNeutralMuzzleFlashLight
// 0x0000 (0x0270 - 0x0270)
class UTrNeutralMuzzleFlashLight : public UUDKExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67555 ];

		return pClassPointer;
	};

};

UClass* UTrNeutralMuzzleFlashLight::pClassPointer = NULL;

// Class TribesGame.TrDroppedPickup
// 0x0030 (0x0230 - 0x0200)
class ATrDroppedPickup : public AUTDroppedPickup
{
public:
	class USoundCue*                                   m_AmmoPickupSound;                                		// 0x0200 (0x0004) [0x0000000000000000]              
	float                                              m_PctAmmoToRefill;                                		// 0x0204 (0x0004) [0x0000000000000000]              
	float                                              m_fMarkerZOffset;                                 		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMarkerScale;                                   		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMarkerBlinkSpeed;                              		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    m_rMarkerRot;                                     		// 0x0214 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCurrentMarkerTime;                             		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMarkerOpacity;                                 		// 0x0224 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ATrCollisionProxy*                           m_CollisionProxy;                                 		// 0x0228 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bHasHitObjective : 1;                           		// 0x022C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67556 ];

		return pClassPointer;
	};

	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void eventTick ( float DeltaTime );
	void OnCollisionProxyTouched ( class ATrPawn* TRP );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void DoBounce ( class AActor* Other, struct FVector HitNormal );
	void PostBeginPlay ( );
	void GiveTo ( class APawn* P );
	void eventDestroyed ( );
};

UClass* ATrDroppedPickup::pClassPointer = NULL;

// Class TribesGame.TrArmorMod_Brute
// 0x0000 (0x0864 - 0x0864)
class ATrArmorMod_Brute : public ATrArmorMod
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67565 ];

		return pClassPointer;
	};

};

UClass* ATrArmorMod_Brute::pClassPointer = NULL;

// Class TribesGame.TrArmorMod_Doombringer
// 0x0000 (0x0864 - 0x0864)
class ATrArmorMod_Doombringer : public ATrArmorMod
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67571 ];

		return pClassPointer;
	};

};

UClass* ATrArmorMod_Doombringer::pClassPointer = NULL;

// Class TribesGame.TrArmorMod_Infiltrator
// 0x0000 (0x0864 - 0x0864)
class ATrArmorMod_Infiltrator : public ATrArmorMod
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67577 ];

		return pClassPointer;
	};

};

UClass* ATrArmorMod_Infiltrator::pClassPointer = NULL;

// Class TribesGame.TrArmorMod_Juggernaut
// 0x0000 (0x0864 - 0x0864)
class ATrArmorMod_Juggernaut : public ATrArmorMod
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67583 ];

		return pClassPointer;
	};

};

UClass* ATrArmorMod_Juggernaut::pClassPointer = NULL;

// Class TribesGame.TrArmorMod_Pathfinder
// 0x0000 (0x0864 - 0x0864)
class ATrArmorMod_Pathfinder : public ATrArmorMod
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67589 ];

		return pClassPointer;
	};

};

UClass* ATrArmorMod_Pathfinder::pClassPointer = NULL;

// Class TribesGame.TrArmorMod_Raider
// 0x0000 (0x0864 - 0x0864)
class ATrArmorMod_Raider : public ATrArmorMod
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67595 ];

		return pClassPointer;
	};

};

UClass* ATrArmorMod_Raider::pClassPointer = NULL;

// Class TribesGame.TrArmorMod_Sentinel
// 0x0000 (0x0864 - 0x0864)
class ATrArmorMod_Sentinel : public ATrArmorMod
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67601 ];

		return pClassPointer;
	};

};

UClass* ATrArmorMod_Sentinel::pClassPointer = NULL;

// Class TribesGame.TrArmorMod_Soldier
// 0x0000 (0x0864 - 0x0864)
class ATrArmorMod_Soldier : public ATrArmorMod
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67607 ];

		return pClassPointer;
	};

};

UClass* ATrArmorMod_Soldier::pClassPointer = NULL;

// Class TribesGame.TrArmorMod_Technician
// 0x0000 (0x0864 - 0x0864)
class ATrArmorMod_Technician : public ATrArmorMod
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67613 ];

		return pClassPointer;
	};

};

UClass* ATrArmorMod_Technician::pClassPointer = NULL;

// Class TribesGame.TrDevice_NinjaSmoke
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_NinjaSmoke : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67645 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_NinjaSmoke::pClassPointer = NULL;

// Class TribesGame.TrAttachment_AccurizedShotgun
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_AccurizedShotgun : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67740 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_AccurizedShotgun::pClassPointer = NULL;

// Class TribesGame.TrDevice_AccurizedShotgun
// 0x0000 (0x0880 - 0x0880)
class ATrDevice_AccurizedShotgun : public ATrDevice_Shotgun
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67777 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_AccurizedShotgun::pClassPointer = NULL;

// Class TribesGame.TrAttachment_APGrenade
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_APGrenade : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67778 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_APGrenade::pClassPointer = NULL;

// Class TribesGame.TrDevice_APGrenade
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_APGrenade : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67784 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_APGrenade::pClassPointer = NULL;

// Class TribesGame.TrAttachment_ARC8
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_ARC8 : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67785 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_ARC8::pClassPointer = NULL;

// Class TribesGame.TrDevice_ARC8
// 0x0000 (0x087C - 0x087C)
class ATrDevice_ARC8 : public ATrDevice_ConstantFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67793 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_ARC8::pClassPointer = NULL;

// Class TribesGame.TrAttachment_ArmoredClaymore
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_ArmoredClaymore : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67794 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_ArmoredClaymore::pClassPointer = NULL;

// Class TribesGame.TrDevice_Claymore
// 0x0004 (0x0878 - 0x0874)
class ATrDevice_Claymore : public ATrDevice_AutoFire
{
public:
	float                                              m_fWorldZPlacementOffset;                         		// 0x0874 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67800 ];

		return pClassPointer;
	};

	class AProjectile* ProjectileFire ( );
	struct FVector GetPhysicalFireStartLoc ( struct FVector AimDir );
};

UClass* ATrDevice_Claymore::pClassPointer = NULL;

// Class TribesGame.TrDevice_ArmoredClaymore
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_ArmoredClaymore : public ATrDevice_Claymore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67799 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_ArmoredClaymore::pClassPointer = NULL;

// Class TribesGame.TrAttachment_ArxBuster
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_ArxBuster : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67801 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_ArxBuster::pClassPointer = NULL;

// Class TribesGame.TrDevice_ArxBuster
// 0x0000 (0x087C - 0x087C)
class ATrDevice_ArxBuster : public ATrDevice_ConstantFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67807 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_ArxBuster::pClassPointer = NULL;

// Class TribesGame.TrAttachment_ArxBuster_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_ArxBuster_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67808 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_ArxBuster_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_ArxBuster_MKD
// 0x0000 (0x087C - 0x087C)
class ATrDevice_ArxBuster_MKD : public ATrDevice_ArxBuster
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67812 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_ArxBuster_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_ArxShotgun
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_ArxShotgun : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67813 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_ArxShotgun::pClassPointer = NULL;

// Class TribesGame.TrDevice_ArxShotgun
// 0x0000 (0x0880 - 0x0880)
class ATrDevice_ArxShotgun : public ATrDevice_Shotgun
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67817 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_ArxShotgun::pClassPointer = NULL;

// Class TribesGame.TrAttachment_AssaultRifle
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_AssaultRifle : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67818 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_AssaultRifle::pClassPointer = NULL;

// Class TribesGame.TrMuzzleFlashLight_AssaultRifle
// 0x0000 (0x0270 - 0x0270)
class UTrMuzzleFlashLight_AssaultRifle : public UUDKExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67825 ];

		return pClassPointer;
	};

};

UClass* UTrMuzzleFlashLight_AssaultRifle::pClassPointer = NULL;

// Class TribesGame.TrDevice_AssaultRifle
// 0x0000 (0x087C - 0x087C)
class ATrDevice_AssaultRifle : public ATrDevice_ConstantFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67826 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_AssaultRifle::pClassPointer = NULL;

// Class TribesGame.TrAttachment_AssaultRifle_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_AssaultRifle_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67827 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_AssaultRifle_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_AssaultRifle_MKD
// 0x0000 (0x087C - 0x087C)
class ATrDevice_AssaultRifle_MKD : public ATrDevice_AssaultRifle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67831 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_AssaultRifle_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_AutoShotgun
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_AutoShotgun : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67832 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_AutoShotgun::pClassPointer = NULL;

// Class TribesGame.TrDevice_AutoShotgun
// 0x0000 (0x0880 - 0x0880)
class ATrDevice_AutoShotgun : public ATrDevice_Shotgun
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67836 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_AutoShotgun::pClassPointer = NULL;

// Class TribesGame.TrAttachment_AutoShotgun_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_AutoShotgun_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67837 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_AutoShotgun_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_AutoShotgun_MKD
// 0x0000 (0x0880 - 0x0880)
class ATrDevice_AutoShotgun_MKD : public ATrDevice_AutoShotgun
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67841 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_AutoShotgun_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_AVMine
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_AVMine : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67842 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_AVMine::pClassPointer = NULL;

// Class TribesGame.TrDevice_AVMine
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_AVMine : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67848 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_AVMine::pClassPointer = NULL;

// Class TribesGame.TrAttachment_BoltLauncher
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_BoltLauncher : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67849 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_BoltLauncher::pClassPointer = NULL;

// Class TribesGame.TrDevice_BoltLauncher
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_BoltLauncher : public ATrDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67857 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_BoltLauncher::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Buckler
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Buckler : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67858 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Buckler::pClassPointer = NULL;

// Class TribesGame.TrSpinfusorMuzzleFlashLight
// 0x0000 (0x0270 - 0x0270)
class UTrSpinfusorMuzzleFlashLight : public UUDKExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67862 ];

		return pClassPointer;
	};

};

UClass* UTrSpinfusorMuzzleFlashLight::pClassPointer = NULL;

// Class TribesGame.TrDevice_Buckler
// 0x0000 (0x087C - 0x087C)
class ATrDevice_Buckler : public ATrDevice_ConstantFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67863 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_Buckler::pClassPointer = NULL;

// Class TribesGame.TrAttachment_ChainGun
// 0x0010 (0x0320 - 0x0310)
class ATrAttachment_ChainGun : public ATrDeviceAttachment
{
public:
	unsigned long                                      m_bIsFiring : 1;                                  		// 0x0310 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bSpinningUp : 1;                                		// 0x0310 (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              m_fCurrSpinTime;                                  		// 0x0314 (0x0004) [0x0000000000000000]              
	float                                              m_fLastFireTime;                                  		// 0x0318 (0x0004) [0x0000000000000000]              
	class UTrSkelControl_SpinControl*                  m_BarrelSpinControl;                              		// 0x031C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67864 ];

		return pClassPointer;
	};

	void ThirdPersonFireEffects ( struct FVector HitLocation );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
};

UClass* ATrAttachment_ChainGun::pClassPointer = NULL;

// Class TribesGame.TrDevice_ChainGun
// 0x0018 (0x0894 - 0x087C)
class ATrDevice_ChainGun : public ATrDevice_ConstantFire
{
public:
	float                                              m_fBuildupTime;                                   		// 0x087C (0x0004) [0x0000000000000000]              
	float                                              m_fCurrSpinTime;                                  		// 0x0880 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             m_AudioComponentWeaponSpin;                       		// 0x0884 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UTrSkelControl_SpinControl*                  m_BarrelSpinControl;                              		// 0x0888 (0x0004) [0x0000000000000000]              
	int                                                r_BuffedMaxAmmo;                                  		// 0x088C (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      m_bHasClip : 1;                                   		// 0x0890 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67873 ];

		return pClassPointer;
	};

	int GetBasePickupAmmoAmount ( );
	int AddCarriedAmmo ( int Amount );
	void BuffMaxCarriedAmmo ( int Amount );
	void PlayWeaponPutDown ( );
	void OnSwitchToWeapon ( );
	void PlayBuildupAnimation ( );
	float GetBuildUpTime ( class APlayerReplicationInfo* PRI, unsigned long bForInterpSpeed );
	void UpdateSoundModulation ( );
	void eventTick ( float DeltaTime );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ATrDevice_ChainGun::pClassPointer = NULL;

// Class TribesGame.TrAttachment_ChainGun_MKD
// 0x0010 (0x0320 - 0x0310)
class ATrAttachment_ChainGun_MKD : public ATrDeviceAttachment
{
public:
	unsigned long                                      m_bIsFiring : 1;                                  		// 0x0310 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bSpinningUp : 1;                                		// 0x0310 (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              m_fCurrSpinTime;                                  		// 0x0314 (0x0004) [0x0000000000000000]              
	float                                              m_fLastFireTime;                                  		// 0x0318 (0x0004) [0x0000000000000000]              
	class UTrSkelControl_SpinControl*                  m_BarrelSpinControl;                              		// 0x031C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67890 ];

		return pClassPointer;
	};

	void ThirdPersonFireEffects ( struct FVector HitLocation );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
};

UClass* ATrAttachment_ChainGun_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_ChainGun_MKD
// 0x0000 (0x0894 - 0x0894)
class ATrDevice_ChainGun_MKD : public ATrDevice_ChainGun
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67907 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_ChainGun_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Claymore
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Claymore : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67908 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Claymore::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Claymore_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Claymore_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67912 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Claymore_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_Claymore_MKD
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_Claymore_MKD : public ATrDevice_Claymore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67916 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_Claymore_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_ConcussionGrenade_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_ConcussionGrenade_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67917 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_ConcussionGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_Grenade
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_Grenade : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67922 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_Grenade::pClassPointer = NULL;

// Class TribesGame.TrDevice_Grenade_MKD
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_Grenade_MKD : public ATrDevice_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67921 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_Grenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_CustomEagle
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_CustomEagle : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67923 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_CustomEagle::pClassPointer = NULL;

// Class TribesGame.TrDevice_CustomEagle
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_CustomEagle : public ATrDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67933 ];

		return pClassPointer;
	};

	void InstantFire ( );
};

UClass* ATrDevice_CustomEagle::pClassPointer = NULL;

// Class TribesGame.TrAttachment_DiskToss
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_DiskToss : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67934 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_DiskToss::pClassPointer = NULL;

// Class TribesGame.TrDevice_DiskToss
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_DiskToss : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67938 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_DiskToss::pClassPointer = NULL;

// Class TribesGame.TrAttachment_DualRhinos
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_DualRhinos : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67939 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_DualRhinos::pClassPointer = NULL;

// Class TribesGame.TrDevice_DualRhinos
// 0x0000 (0x087C - 0x087C)
class ATrDevice_DualRhinos : public ATrDevice_ConstantFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67945 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_DualRhinos::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Eagle
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Eagle : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67946 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Eagle::pClassPointer = NULL;

// Class TribesGame.TrDevice_Eagle
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_Eagle : public ATrDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67950 ];

		return pClassPointer;
	};

	void InstantFire ( );
};

UClass* ATrDevice_Eagle::pClassPointer = NULL;

// Class TribesGame.TrAttachment_EMPGrenade
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_EMPGrenade : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67951 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_EMPGrenade::pClassPointer = NULL;

// Class TribesGame.TrDevice_EMPGrenade
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_EMPGrenade : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67955 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_EMPGrenade::pClassPointer = NULL;

// Class TribesGame.TrAttachment_EMPGrenade_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_EMPGrenade_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67956 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_EMPGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_EMPGrenade_MKD
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_EMPGrenade_MKD : public ATrDevice_EMPGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67960 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_EMPGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Falcon
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Falcon : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67961 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Falcon::pClassPointer = NULL;

// Class TribesGame.TrDevice_Falcon
// 0x0000 (0x087C - 0x087C)
class ATrDevice_Falcon : public ATrDevice_ConstantFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67966 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_Falcon::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Grenade
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Grenade : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67967 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Grenade::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Grenade_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Grenade_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67971 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Grenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_GrenadeLauncher
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_GrenadeLauncher : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67975 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_GrenadeLauncher::pClassPointer = NULL;

// Class TribesGame.TrDevice_GrenadeLauncher
// 0x0000 (0x087C - 0x087C)
class ATrDevice_GrenadeLauncher : public ATrDevice_ConstantFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67981 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_GrenadeLauncher::pClassPointer = NULL;

// Class TribesGame.TrAttachment_GrenadeXL
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_GrenadeXL : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67982 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_GrenadeXL::pClassPointer = NULL;

// Class TribesGame.TrDevice_GrenadeXL
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_GrenadeXL : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67986 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_GrenadeXL::pClassPointer = NULL;

// Class TribesGame.TrAttachment_GrenadeXL_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_GrenadeXL_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67987 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_GrenadeXL_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_GrenadeXL_MKD
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_GrenadeXL_MKD : public ATrDevice_GrenadeXL
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67991 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_GrenadeXL_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_H1
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_H1 : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67992 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_H1::pClassPointer = NULL;

// Class TribesGame.TrDevice_H1
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_H1 : public ATrDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67996 ];

		return pClassPointer;
	};

	void InstantFire ( );
};

UClass* ATrDevice_H1::pClassPointer = NULL;

// Class TribesGame.TrAttachment_HeavyAPGrenade
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_HeavyAPGrenade : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67997 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_HeavyAPGrenade::pClassPointer = NULL;

// Class TribesGame.TrDevice_HeavyAPGrenade
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_HeavyAPGrenade : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68001 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_HeavyAPGrenade::pClassPointer = NULL;

// Class TribesGame.TrAttachment_HeavyAPGrenade_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_HeavyAPGrenade_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68002 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_HeavyAPGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_HeavyAPGrenade_MKD
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_HeavyAPGrenade_MKD : public ATrDevice_HeavyAPGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68006 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_HeavyAPGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_HeavyBoltLauncher
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_HeavyBoltLauncher : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68007 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_HeavyBoltLauncher::pClassPointer = NULL;

// Class TribesGame.TrDevice_HeavyBoltLauncher
// 0x0004 (0x0868 - 0x0864)
class ATrDevice_HeavyBoltLauncher : public ATrDevice
{
public:
	class USoundCue*                                   m_BoltIdleSound;                                  		// 0x0864 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68011 ];

		return pClassPointer;
	};

	void OnSwitchAwayFromWeapon ( );
	void PutDownFast ( );
	void PlayWeaponPutDown ( );
	void PlayWeaponEquip ( );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void eventOnAnimPlay ( class UAnimNodeSequence* SeqNode );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void SetBoltIdle ( unsigned long bEnabled );
};

UClass* ATrDevice_HeavyBoltLauncher::pClassPointer = NULL;

// Class TribesGame.TrAttachment_HeavySpinfusor
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_HeavySpinfusor : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68012 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_HeavySpinfusor::pClassPointer = NULL;

// Class TribesGame.TrDevice_Spinfusor
// 0x000C (0x0870 - 0x0864)
class ATrDevice_Spinfusor : public ATrDevice
{
public:
	class UTrSkelControl_SpinControl*                  m_DiscSpinControl;                                		// 0x0864 (0x0004) [0x0000000000000000]              
	class USkelControlSingleBone*                      m_DiscVisibilityControl;                          		// 0x0868 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_SpinfusorIdleSound;                             		// 0x086C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68017 ];

		return pClassPointer;
	};

	void OnSwitchAwayFromWeapon ( );
	void PutDownFast ( );
	void PlayWeaponPutDown ( );
	void SetDiscSpinning ( unsigned long bEnabled );
	void SetDiscVisibility ( unsigned long bVisible );
	void PlayWeaponEquip ( );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void eventOnAnimPlay ( class UAnimNodeSequence* SeqNode );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void UpdateReplicatedCarriedAmmo ( );
};

UClass* ATrDevice_Spinfusor::pClassPointer = NULL;

// Class TribesGame.TrDevice_HeavySpinfusor
// 0x0000 (0x0870 - 0x0870)
class ATrDevice_HeavySpinfusor : public ATrDevice_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68016 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_HeavySpinfusor::pClassPointer = NULL;

// Class TribesGame.TrAttachment_HeavySpinfusor_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_HeavySpinfusor_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68018 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_HeavySpinfusor_MKD::pClassPointer = NULL;

// Class TribesGame.TrMuzzleFlashLight_Gold
// 0x0000 (0x0270 - 0x0270)
class UTrMuzzleFlashLight_Gold : public UUDKExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68022 ];

		return pClassPointer;
	};

};

UClass* UTrMuzzleFlashLight_Gold::pClassPointer = NULL;

// Class TribesGame.TrDevice_HeavySpinfusor_MKD
// 0x0000 (0x0870 - 0x0870)
class ATrDevice_HeavySpinfusor_MKD : public ATrDevice_HeavySpinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68023 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_HeavySpinfusor_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_HeavyTwinfusor
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_HeavyTwinfusor : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68024 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_HeavyTwinfusor::pClassPointer = NULL;

// Class TribesGame.TrDevice_Twinfusor
// 0x0004 (0x0868 - 0x0864)
class ATrDevice_Twinfusor : public ATrDevice
{
public:
	class USoundCue*                                   m_SpinfusorIdleSound;                             		// 0x0864 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68029 ];

		return pClassPointer;
	};

	void OnSwitchAwayFromWeapon ( );
	void PutDownFast ( );
	void PlayWeaponPutDown ( );
	void PlayWeaponEquip ( );
	void SetDiscSpinning ( unsigned long bEnabled );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void eventOnAnimPlay ( class UAnimNodeSequence* SeqNode );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
};

UClass* ATrDevice_Twinfusor::pClassPointer = NULL;

// Class TribesGame.TrDevice_HeavyTwinfusor
// 0x0000 (0x0868 - 0x0868)
class ATrDevice_HeavyTwinfusor : public ATrDevice_Twinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68028 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_HeavyTwinfusor::pClassPointer = NULL;

// Class TribesGame.TrAttachment_ImpactBomblets
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_ImpactBomblets : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68030 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_ImpactBomblets::pClassPointer = NULL;

// Class TribesGame.TrDevice_ImpactBomblets
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_ImpactBomblets : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68034 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_ImpactBomblets::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Lacerator
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Lacerator : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68035 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Lacerator::pClassPointer = NULL;

// Class TribesGame.TrDevice_Lacerator
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_Lacerator : public ATrDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68039 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_Lacerator::pClassPointer = NULL;

// Class TribesGame.TrAttachment_LaserTargeter
// 0x0008 (0x0318 - 0x0310)
class ATrAttachment_LaserTargeter : public ATrDeviceAttachment
{
public:
	unsigned long                                      m_bIsTracerActive : 1;                            		// 0x0310 (0x0004) [0x0000000000000000] [0x00000001] 
	class UParticleSystemComponent*                    m_pscLaserEffect;                                 		// 0x0314 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68040 ];

		return pClassPointer;
	};

	void eventStopThirdPersonFireEffects ( );
	void ThirdPersonFireEffects ( struct FVector HitLocation );
	void UpdateLaserEffect ( struct FVector HitLocation );
	void SpawnLaserEffect ( struct FVector HitLocation );
	void KillLaserEffect ( );
};

UClass* ATrAttachment_LaserTargeter::pClassPointer = NULL;

// Class TribesGame.TrAttachment_LightAssaultRifle
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_LightAssaultRifle : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68058 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_LightAssaultRifle::pClassPointer = NULL;

// Class TribesGame.TrDevice_LightAssaultRifle
// 0x0010 (0x088C - 0x087C)
class ATrDevice_LightAssaultRifle : public ATrDevice_AssaultRifle
{
public:
	int                                                m_nShotBurstCount;                                		// 0x087C (0x0004) [0x0000000000000000]              
	int                                                m_nShotsSoFar;                                    		// 0x0880 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bHoldingFire : 1;                               		// 0x0884 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              m_fBurtShotRefireTime;                            		// 0x0888 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68062 ];

		return pClassPointer;
	};

	void ServerStopFire ( unsigned char FireModeNum );
	void PlayFiringSound ( );
	void FireAmmunition ( );
	void EndFire ( unsigned char FireModeNum );
	void RefireTimer ( );
	void StartFire ( unsigned char FireModeNum );
	void StopFire ( unsigned char FireModeNum );
	void OnReloadComplete ( );
};

UClass* ATrDevice_LightAssaultRifle::pClassPointer = NULL;

// Class TribesGame.TrAttachment_LightSpinfusor
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_LightSpinfusor : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68063 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_LightSpinfusor::pClassPointer = NULL;

// Class TribesGame.TrDevice_LightSpinfusor
// 0x0000 (0x0870 - 0x0870)
class ATrDevice_LightSpinfusor : public ATrDevice_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68068 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_LightSpinfusor::pClassPointer = NULL;

// Class TribesGame.TrAttachment_LightSpinfusor_100X
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_LightSpinfusor_100X : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68069 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_LightSpinfusor_100X::pClassPointer = NULL;

// Class TribesGame.TrDevice_LightSpinfusor_100X
// 0x0000 (0x0870 - 0x0870)
class ATrDevice_LightSpinfusor_100X : public ATrDevice_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68073 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_LightSpinfusor_100X::pClassPointer = NULL;

// Class TribesGame.TrAttachment_LightSpinfusor_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_LightSpinfusor_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68074 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_LightSpinfusor_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_LightSpinfusor_MKD
// 0x0000 (0x0870 - 0x0870)
class ATrDevice_LightSpinfusor_MKD : public ATrDevice_LightSpinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68078 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_LightSpinfusor_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_LightStickyGrenade
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_LightStickyGrenade : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68079 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_LightStickyGrenade::pClassPointer = NULL;

// Class TribesGame.TrDevice_LightStickyGrenade
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_LightStickyGrenade : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68083 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_LightStickyGrenade::pClassPointer = NULL;

// Class TribesGame.TrAttachment_LightTwinfusor
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_LightTwinfusor : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68084 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_LightTwinfusor::pClassPointer = NULL;

// Class TribesGame.TrDevice_LightTwinfusor
// 0x0000 (0x0868 - 0x0868)
class ATrDevice_LightTwinfusor : public ATrDevice_Twinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68088 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_LightTwinfusor::pClassPointer = NULL;

// Class TribesGame.TrAttachment_LR1Mortar
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_LR1Mortar : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68089 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_LR1Mortar::pClassPointer = NULL;

// Class TribesGame.TrMortarMuzzleFlashLight
// 0x0000 (0x0270 - 0x0270)
class UTrMortarMuzzleFlashLight : public UUDKExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68094 ];

		return pClassPointer;
	};

};

UClass* UTrMortarMuzzleFlashLight::pClassPointer = NULL;

// Class TribesGame.TrDevice_LR1Mortar
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_LR1Mortar : public ATrDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68095 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_LR1Mortar::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Melee
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Melee : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68096 ];

		return pClassPointer;
	};

	void PlayImpactEffects ( struct FVector HitLocation );
	void PlayImpactSound ( class AActor* HitActor, class USoundCue* SoundToPlay, struct FVector FireDir, struct FVector HitLocation );
};

UClass* ATrAttachment_Melee::pClassPointer = NULL;

// Class TribesGame.TrDevice_Melee
// 0x001C (0x0890 - 0x0874)
class ATrDevice_Melee : public ATrDevice_AutoFire
{
public:
	TArray< struct FImpactInfo >                       PendingImpactList;                                		// 0x0874 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	TArray< struct FMeleeRandomAnimation >             FiringAnimRandomList;                             		// 0x0880 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UAnimNodeSequence*                           FiringAnimSeqNode;                                		// 0x088C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68116 ];

		return pClassPointer;
	};

	void AttemptFlagFumble ( class ATrPawn* Victim );
	float ModifyInstantHitDamage ( unsigned char FiringMode, struct FImpactInfo Impact, float Damage );
	void FireAmmunition ( );
	float GetBuildUpTime ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	int CalcAmountToLoad ( );
	void PlayFireAnimation ( unsigned char FireModeNum );
	void OwningClientPlayHit ( struct FVector HitLocation );
};

UClass* ATrDevice_Melee::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Melee_BE
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Melee_BE : public ATrAttachment_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68118 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Melee_BE::pClassPointer = NULL;

// Class TribesGame.TrDevice_Melee_BE
// 0x0000 (0x0890 - 0x0890)
class ATrDevice_Melee_BE : public ATrDevice_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68124 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_Melee_BE::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Melee_DS
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Melee_DS : public ATrAttachment_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68125 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Melee_DS::pClassPointer = NULL;

// Class TribesGame.TrDevice_Melee_DS
// 0x0000 (0x0890 - 0x0890)
class ATrDevice_Melee_DS : public ATrDevice_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68129 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_Melee_DS::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Melee_MC
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Melee_MC : public ATrAttachment_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68130 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Melee_MC::pClassPointer = NULL;

// Class TribesGame.TrDevice_Melee_MC
// 0x000C (0x089C - 0x0890)
class ATrDevice_Melee_MC : public ATrDevice_Melee
{
public:
	struct FString                                     ContentDeviceClassString;                         		// 0x0890 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68138 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_Melee_MC::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Mine
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Mine : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68139 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Mine::pClassPointer = NULL;

// Class TribesGame.TrDevice_Mine
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_Mine : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68143 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_Mine::pClassPointer = NULL;

// Class TribesGame.TrAttachment_MIRVGrenade
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_MIRVGrenade : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68144 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_MIRVGrenade::pClassPointer = NULL;

// Class TribesGame.TrDevice_MIRVGrenade
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_MIRVGrenade : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68148 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_MIRVGrenade::pClassPointer = NULL;

// Class TribesGame.TrAttachment_MIRVLauncher
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_MIRVLauncher : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68149 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_MIRVLauncher::pClassPointer = NULL;

// Class TribesGame.TrDevice_MIRVLauncher
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_MIRVLauncher : public ATrDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68153 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_MIRVLauncher::pClassPointer = NULL;

// Class TribesGame.TrAttachment_MortarLauncher
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_MortarLauncher : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68154 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_MortarLauncher::pClassPointer = NULL;

// Class TribesGame.TrDevice_MortarLauncher
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_MortarLauncher : public ATrDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68158 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_MortarLauncher::pClassPointer = NULL;

// Class TribesGame.TrAttachment_MortarLauncher_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_MortarLauncher_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68159 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_MortarLauncher_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_MortarLauncher_MKD
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_MortarLauncher_MKD : public ATrDevice_MortarLauncher
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68163 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_MortarLauncher_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_MotionSensor
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_MotionSensor : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68164 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_MotionSensor::pClassPointer = NULL;

// Class TribesGame.TrAttachment_NinjaSmoke
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_NinjaSmoke : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68168 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_NinjaSmoke::pClassPointer = NULL;

// Class TribesGame.TrAttachment_NJ4SMG
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_NJ4SMG : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68173 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_NJ4SMG::pClassPointer = NULL;

// Class TribesGame.TrDevice_NJ4SMG
// 0x0000 (0x087C - 0x087C)
class ATrDevice_NJ4SMG : public ATrDevice_ConstantFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68177 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_NJ4SMG::pClassPointer = NULL;

// Class TribesGame.TrAttachment_NJ4SMG_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_NJ4SMG_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68178 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_NJ4SMG_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_NJ4SMG_MKD
// 0x0000 (0x087C - 0x087C)
class ATrDevice_NJ4SMG_MKD : public ATrDevice_NJ4SMG
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68182 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_NJ4SMG_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_NJ5SMG
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_NJ5SMG : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68183 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_NJ5SMG::pClassPointer = NULL;

// Class TribesGame.TrDevice_NJ5SMG
// 0x0000 (0x087C - 0x087C)
class ATrDevice_NJ5SMG : public ATrDevice_ConstantFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68189 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_NJ5SMG::pClassPointer = NULL;

// Class TribesGame.TrAttachment_NovaColt
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_NovaColt : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68190 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_NovaColt::pClassPointer = NULL;

// Class TribesGame.TrMuzzleFlashLight_NovaColt
// 0x0000 (0x0270 - 0x0270)
class UTrMuzzleFlashLight_NovaColt : public UUDKExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68196 ];

		return pClassPointer;
	};

};

UClass* UTrMuzzleFlashLight_NovaColt::pClassPointer = NULL;

// Class TribesGame.TrDevice_NovaColt
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_NovaColt : public ATrDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68197 ];

		return pClassPointer;
	};

	void StartFire ( unsigned char FireModeNum );
	void FireAmmunition ( );
	bool ShouldRefire ( );
};

UClass* ATrDevice_NovaColt::pClassPointer = NULL;

// Class TribesGame.TrAttachment_NovaColt_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_NovaColt_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68198 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_NovaColt_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_NovaColt_MKD
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_NovaColt_MKD : public ATrDevice_NovaColt
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68202 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_NovaColt_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_NovaSlug
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_NovaSlug : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68203 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_NovaSlug::pClassPointer = NULL;

// Class TribesGame.TrDevice_NovaSlug
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_NovaSlug : public ATrDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68210 ];

		return pClassPointer;
	};

	void StartFire ( unsigned char FireModeNum );
	void FireAmmunition ( );
	void InstantFire ( );
};

UClass* ATrDevice_NovaSlug::pClassPointer = NULL;

// Class TribesGame.TrAttachment_PhaseRifle
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_PhaseRifle : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68211 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_PhaseRifle::pClassPointer = NULL;

// Class TribesGame.TrDevice_PhaseRifle
// 0x0008 (0x086C - 0x0864)
class ATrDevice_PhaseRifle : public ATrDevice
{
public:
	float                                              m_DamagePerEnergy;                                		// 0x0864 (0x0004) [0x0000000000000000]              
	float                                              m_MaxEnergyConsumed;                              		// 0x0868 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68227 ];

		return pClassPointer;
	};

	float ModifyInstantHitDamage ( unsigned char FiringMode, struct FImpactInfo Impact, float Damage );
	void InstantFire ( );
};

UClass* ATrDevice_PhaseRifle::pClassPointer = NULL;

// Class TribesGame.TrAttachment_PlasmaCannon
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_PlasmaCannon : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68228 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_PlasmaCannon::pClassPointer = NULL;

// Class TribesGame.TrDevice_PlasmaCannon
// 0x0000 (0x087C - 0x087C)
class ATrDevice_PlasmaCannon : public ATrDevice_ConstantFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68235 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_PlasmaCannon::pClassPointer = NULL;

// Class TribesGame.TrAttachment_PlasmaGun
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_PlasmaGun : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68236 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_PlasmaGun::pClassPointer = NULL;

// Class TribesGame.TrDevice_PlasmaGun
// 0x0000 (0x087C - 0x087C)
class ATrDevice_PlasmaGun : public ATrDevice_ConstantFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68245 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_PlasmaGun::pClassPointer = NULL;

// Class TribesGame.TrAttachment_PrismMine
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_PrismMine : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68246 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_PrismMine::pClassPointer = NULL;

// Class TribesGame.TrAttachment_ProximityGrenade
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_ProximityGrenade : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68250 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_ProximityGrenade::pClassPointer = NULL;

// Class TribesGame.TrDevice_ProximityGrenade
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_ProximityGrenade : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68254 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_ProximityGrenade::pClassPointer = NULL;

// Class TribesGame.TrAttachment_RemoteArxBuster
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_RemoteArxBuster : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68255 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_RemoteArxBuster::pClassPointer = NULL;

// Class TribesGame.TrDevice_RemoteArxBuster
// 0x0020 (0x0884 - 0x0864)
class ATrDevice_RemoteArxBuster : public ATrDevice
{
public:
	class USkelControlSingleBone*                      DetonatorControl;                                 		// 0x0864 (0x0004) [0x0000000000000000]              
	class USkelControlSingleBone*                      DetonatorChild;                                   		// 0x0868 (0x0004) [0x0000000000000000]              
	unsigned long                                      r_bIsLeftArmVisible : 1;                          		// 0x086C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	TArray< class ATrProj_RemoteArxBuster* >           RemoteArxRounds;                                  		// 0x0870 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UAnimNodeAdditiveBlending*                   DetReadyAdditiveAnimNode;                         		// 0x087C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_ArxIdleSound;                                   		// 0x0880 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68260 ];

		return pClassPointer;
	};

	void OnSwitchAwayFromWeapon ( );
	void PutDownFast ( );
	void PlayWeaponPutDown ( );
	void PlayWeaponEquip ( );
	void OnPlayRetrieveAnim ( );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void eventOnAnimPlay ( class UAnimNodeSequence* SeqNode );
	void OnRemoteProjectileDestroyedByOther ( class ATrProjectile* DestroyedProjectile );
	void eventDestroyed ( );
	void HideArmTimer ( );
	void ActivateRemoteRounds ( unsigned long bDoNoDamage );
	class AProjectile* ProjectileFire ( );
	void FireAmmunition ( );
	void StartFire ( unsigned char FireModeNum );
	bool CanClientRequestReloadNow ( );
	void RequestReload ( );
	void PerformInactiveReload ( );
	int AddAmmo ( int Amount );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void DetPoseActive ( unsigned long bActive );
	void SetLeftArmVisible ( unsigned long bVisible );
	void eventReplicatedEvent ( struct FName VarName );
	void SetArxIdle ( unsigned long bEnabled );
};

UClass* ATrDevice_RemoteArxBuster::pClassPointer = NULL;

// Class TribesGame.TrAttachment_RepairDeployable
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_RepairDeployable : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68261 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_RepairDeployable::pClassPointer = NULL;

// Class TribesGame.TrDevice_RepairDeployable
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_RepairDeployable : public ATrDevice_Mine
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68265 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_RepairDeployable::pClassPointer = NULL;

// Class TribesGame.TrAttachment_RepairTool
// 0x0020 (0x0330 - 0x0310)
class ATrAttachment_RepairTool : public ATrDeviceAttachment
{
public:
	unsigned long                                      m_bIsTracerActive : 1;                            		// 0x0310 (0x0004) [0x0000000000000000] [0x00000001] 
	class UParticleSystemComponent*                    m_pscRepairEffect;                                		// 0x0314 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     m_Location;                                       		// 0x0318 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_Tangent;                                        		// 0x0324 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68266 ];

		return pClassPointer;
	};

	void eventStopThirdPersonFireEffects ( );
	void ThirdPersonFireEffects ( struct FVector HitLocation );
	void PlayImpactEffects ( struct FVector HitLocation );
	void UpdateRepairEffect ( float DeltaTime, struct FVector HitLocation, struct FVector HitNormal );
	void SpawnRepairEffect ( struct FVector HitLocation, struct FVector HitNormal );
	void KillRepairEffect ( );
};

UClass* ATrAttachment_RepairTool::pClassPointer = NULL;

// Class TribesGame.TrDevice_RepairTool
// 0x0034 (0x08B0 - 0x087C)
class ATrDevice_RepairTool : public ATrDevice_ConstantFire
{
public:
	float                                              m_fRepairPercentage;                              		// 0x087C (0x0004) [0x0000000000000000]              
	float                                              m_fPawnRepairPercentage;                          		// 0x0880 (0x0004) [0x0000000000000000]              
	float                                              m_fVehicleRepairPercentage;                       		// 0x0884 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    m_pscRepairEffect;                                		// 0x0888 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      m_bIsBehindView : 1;                              		// 0x088C (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              m_fDisplayOn;                                     		// 0x0890 (0x0004) [0x0000000000000000]              
	float                                              m_fTargetHealth;                                  		// 0x0894 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_Tangent;                                        		// 0x0898 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_Location;                                       		// 0x08A4 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68282 ];

		return pClassPointer;
	};

	bool HasAnyAmmo ( );
	float ModifyInstantHitDamage ( unsigned char FiringMode, struct FImpactInfo Impact, float Damage );
	void UpdateDamageMaterial ( );
	void UpdateRepairEffect ( float DeltaTime );
	void SpawnRepairEffect ( );
	bool HasViewModeSwitched ( );
	void KillRepairEffect ( );
	bool GetRepairEndAndTangent ( struct FVector* EndLocation, struct FVector* Tangent, class AActor** HitActor );
	void ProcessInstantHit_Internal ( unsigned char FiringMode, struct FImpactInfo Impact, unsigned long bHeadShot );
	void InstantFire ( );
	void OnStartConstantFire ( );
	void OnEndConstantFire ( );
	int GetAmmoCount ( );
	float GetActorHealth ( class AActor* HitActor );
	bool CanActorBeRepaired ( class AActor* HitActor );
};

UClass* ATrDevice_RepairTool::pClassPointer = NULL;

// Class TribesGame.TrMuzzleFlashLight_RepairTool
// 0x0000 (0x0270 - 0x0270)
class UTrMuzzleFlashLight_RepairTool : public UUDKExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68297 ];

		return pClassPointer;
	};

};

UClass* UTrMuzzleFlashLight_RepairTool::pClassPointer = NULL;

// Class TribesGame.TrAttachment_RepairToolAX
// 0x0000 (0x0330 - 0x0330)
class ATrAttachment_RepairToolAX : public ATrAttachment_RepairTool
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68304 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_RepairToolAX::pClassPointer = NULL;

// Class TribesGame.TrMuzzleFlashLight_RepairToolSD
// 0x0000 (0x0270 - 0x0270)
class UTrMuzzleFlashLight_RepairToolSD : public UUDKExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68311 ];

		return pClassPointer;
	};

};

UClass* UTrMuzzleFlashLight_RepairToolSD::pClassPointer = NULL;

// Class TribesGame.TrDevice_RepairToolAX
// 0x0000 (0x08B0 - 0x08B0)
class ATrDevice_RepairToolAX : public ATrDevice_RepairTool
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68313 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_RepairToolAX::pClassPointer = NULL;

// Class TribesGame.TrAttachment_RepairToolEG
// 0x0000 (0x0330 - 0x0330)
class ATrAttachment_RepairToolEG : public ATrAttachment_RepairTool
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68314 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_RepairToolEG::pClassPointer = NULL;

// Class TribesGame.TrDevice_RepairToolEG
// 0x0000 (0x08B0 - 0x08B0)
class ATrDevice_RepairToolEG : public ATrDevice_RepairTool
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68318 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_RepairToolEG::pClassPointer = NULL;

// Class TribesGame.TrAttachment_RepairToolSD
// 0x0000 (0x0330 - 0x0330)
class ATrAttachment_RepairToolSD : public ATrAttachment_RepairTool
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68319 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_RepairToolSD::pClassPointer = NULL;

// Class TribesGame.TrDevice_RepairToolSD
// 0x0000 (0x08B0 - 0x08B0)
class ATrDevice_RepairToolSD : public ATrDevice_RepairTool
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68323 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_RepairToolSD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_RepairToolSD_MKD
// 0x0000 (0x0330 - 0x0330)
class ATrAttachment_RepairToolSD_MKD : public ATrAttachment_RepairTool
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68324 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_RepairToolSD_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_RepairToolSD_MKD
// 0x0000 (0x08B0 - 0x08B0)
class ATrDevice_RepairToolSD_MKD : public ATrDevice_RepairToolSD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68332 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_RepairToolSD_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_RhinoSMG
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_RhinoSMG : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68333 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_RhinoSMG::pClassPointer = NULL;

// Class TribesGame.TrDevice_RhinoSMG
// 0x0000 (0x087C - 0x087C)
class ATrDevice_RhinoSMG : public ATrDevice_ConstantFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68339 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_RhinoSMG::pClassPointer = NULL;

// Class TribesGame.TrAttachment_RhinoSMG_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_RhinoSMG_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68340 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_RhinoSMG_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_RhinoSMG_MKD
// 0x0000 (0x087C - 0x087C)
class ATrDevice_RhinoSMG_MKD : public ATrDevice_RhinoSMG
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68344 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_RhinoSMG_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_RocketLauncher
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_RocketLauncher : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68345 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_RocketLauncher::pClassPointer = NULL;

// Class TribesGame.TrDevice_RocketLauncher
// 0x0000 (0x087C - 0x087C)
class ATrDevice_RocketLauncher : public ATrDevice_ConstantFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68349 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_RocketLauncher::pClassPointer = NULL;

// Class TribesGame.TrAttachment_S22Rifle
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_S22Rifle : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68350 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_S22Rifle::pClassPointer = NULL;

// Class TribesGame.TrDevice_S22Rifle
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_S22Rifle : public ATrDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68354 ];

		return pClassPointer;
	};

	void InstantFire ( );
};

UClass* ATrDevice_S22Rifle::pClassPointer = NULL;

// Class TribesGame.TrAttachment_SaberLauncher
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_SaberLauncher : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68355 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_SaberLauncher::pClassPointer = NULL;

// Class TribesGame.TrDevice_SaberLauncher
// 0x0044 (0x08A8 - 0x0864)
class ATrDevice_SaberLauncher : public ATrDevice
{
public:
	float                                              m_fTargetSightTime;                               		// 0x0864 (0x0004) [0x0000000000000000]              
	float                                              m_fPreLockTime;                                   		// 0x0868 (0x0004) [0x0000000000000000]              
	class AActor*                                      m_Target;                                         		// 0x086C (0x0004) [0x0000000000000000]              
	unsigned long                                      r_bTargetLocked : 1;                              		// 0x0870 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      m_bRestoreAimingHelp : 1;                         		// 0x0870 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bDebugMode : 1;                                 		// 0x0870 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              m_fMinCosineRetainTarget;                         		// 0x0874 (0x0004) [0x0000000000000000]              
	float                                              m_fRetainTargetMaxAngle;                          		// 0x0878 (0x0004) [0x0000000000000000]              
	float                                              m_fAcquireTargetMaxAngle;                         		// 0x087C (0x0004) [0x0000000000000000]              
	float                                              m_fMinCosineAcquireTarget;                        		// 0x0880 (0x0004) [0x0000000000000000]              
	float                                              m_fRestoreAimHelpRadius;                          		// 0x0884 (0x0004) [0x0000000000000000]              
	float                                              m_fLockRetainSeconds;                             		// 0x0888 (0x0004) [0x0000000000000000]              
	float                                              m_fReticuleLockOnDist;                            		// 0x088C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPotentialTargetLockOnDist;                     		// 0x0890 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fGroundCheckDistance;                           		// 0x0894 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTimeBeforeVictimKnowsMissileIsTargeting;       		// 0x0898 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLockingTargetTimestamp;                        		// 0x089C (0x0004) [0x0000000000000000]              
	unsigned char                                      r_nFired;                                         		// 0x08A0 (0x0001) [0x0000000000000020]              ( CPF_Net )
	class ATrPlayerController*                         m_TargetController;                               		// 0x08A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68362 ];

		return pClassPointer;
	};

	class ATrSeekingMissileManager* GetSeekingMissileManager ( );
	void StartFire ( unsigned char FireModeNum );
	void BeginFire ( unsigned char FireModeNum );
	void ServerTryNewPossibleTarget ( );
	class AProjectile* ProjectileFire ( );
	void HolderExitedVehicle ( );
	void HolderEnteredVehicle ( );
	void OnSwitchToWeapon ( );
	void OnSwitchAwayFromWeapon ( );
	void PerformTargeting ( );
	void FireAmmunition ( );
	void eventTick ( float DeltaTime );
	void TargetLockAcquired ( );
	void SetNewTrackingTarget ( class AActor* Target );
	void SetTargetActorMissileLockState ( class AActor* Target, unsigned char lockValue );
	bool ValidateTrackingTarget ( class AActor* Target, unsigned long initialAcquire );
	bool IsActorInLOS ( class AActor* A );
	bool TargetInsideReticle ( class AActor* Target, unsigned long initialAcquire );
	void Destroyed ( );
	void SuspendTargeting ( );
	void ResumeTargeting ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ATrDevice_SaberLauncher::pClassPointer = NULL;

// Class TribesGame.TrAttachment_SaberLauncher_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_SaberLauncher_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68363 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_SaberLauncher_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_SaberLauncher_MKD
// 0x0000 (0x087C - 0x087C)
class ATrDevice_SaberLauncher_MKD : public ATrDevice_ConstantFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68367 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_SaberLauncher_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_SAP20
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_SAP20 : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68368 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_SAP20::pClassPointer = NULL;

// Class TribesGame.TrDevice_SniperRifle
// 0x0018 (0x087C - 0x0864)
class ATrDevice_SniperRifle : public ATrDevice
{
public:
	float                                              m_fMaxAimedDamage;                                		// 0x0864 (0x0004) [0x0000000000000000]              
	float                                              m_fAimChargeDeltaTime;                            		// 0x0868 (0x0004) [0x0000000000000000]              
	float                                              r_fAimChargeTime;                                 		// 0x086C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fMultCoeff;                                     		// 0x0870 (0x0004) [0x0000000000000000]              
	float                                              m_fDivCoeff;                                      		// 0x0874 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             m_ScopeChargeSound;                               		// 0x0878 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68373 ];

		return pClassPointer;
	};

	void StopScopeRechargeSound ( );
	void PlayScopeRechargeSound ( );
	void eventTick ( float DeltaTime );
	float CalcHUDAimChargePercent ( );
	void StartFire ( unsigned char FireModeNum );
	float ModifyInstantHitDamage ( unsigned char FiringMode, struct FImpactInfo Impact, float Damage );
	void InstantFire ( );
	void OnSwitchAwayFromWeapon ( );
	void OnSwitchToWeapon ( );
};

UClass* ATrDevice_SniperRifle::pClassPointer = NULL;

// Class TribesGame.TrDevice_SAP20
// 0x0000 (0x087C - 0x087C)
class ATrDevice_SAP20 : public ATrDevice_SniperRifle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68372 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_SAP20::pClassPointer = NULL;

// Class TribesGame.TrAttachment_SawedOffShotgun
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_SawedOffShotgun : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68374 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_SawedOffShotgun::pClassPointer = NULL;

// Class TribesGame.TrDevice_SawedOffShotgun
// 0x0000 (0x0880 - 0x0880)
class ATrDevice_SawedOffShotgun : public ATrDevice_Shotgun
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68379 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_SawedOffShotgun::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Shotgun
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Shotgun : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68380 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Shotgun::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Shotgun_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Shotgun_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68384 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Shotgun_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_Shotgun_MKD
// 0x0000 (0x0880 - 0x0880)
class ATrDevice_Shotgun_MKD : public ATrDevice_Shotgun
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68388 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_Shotgun_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_SN7
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_SN7 : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68389 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_SN7::pClassPointer = NULL;

// Class TribesGame.TrDevice_SN7
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_SN7 : public ATrDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68395 ];

		return pClassPointer;
	};

	class AProjectile* ProjectileFire ( );
};

UClass* ATrDevice_SN7::pClassPointer = NULL;

// Class TribesGame.TrAttachment_SN7_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_SN7_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68396 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_SN7_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_SN7_MKD
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_SN7_MKD : public ATrDevice_SN7
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68400 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_SN7_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_SniperRifle
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_SniperRifle : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68401 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_SniperRifle::pClassPointer = NULL;

// Class TribesGame.TrAttachment_SniperRifle_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_SniperRifle_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68409 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_SniperRifle_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_SniperRifle_MKD
// 0x0000 (0x087C - 0x087C)
class ATrDevice_SniperRifle_MKD : public ATrDevice_SniperRifle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68413 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_SniperRifle_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Sparrow
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Sparrow : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68414 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Sparrow::pClassPointer = NULL;

// Class TribesGame.TrDevice_Sparrow
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_Sparrow : public ATrDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68418 ];

		return pClassPointer;
	};

	void InstantFire ( );
};

UClass* ATrDevice_Sparrow::pClassPointer = NULL;

// Class TribesGame.TrAttachment_SpikeGrenade
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_SpikeGrenade : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68419 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_SpikeGrenade::pClassPointer = NULL;

// Class TribesGame.TrDevice_SpikeGrenade
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_SpikeGrenade : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68423 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_SpikeGrenade::pClassPointer = NULL;

// Class TribesGame.TrAttachment_SpikeGrenade_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_SpikeGrenade_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68424 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_SpikeGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_SpikeGrenade_MKD
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_SpikeGrenade_MKD : public ATrDevice_SpikeGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68428 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_SpikeGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_SpikeLauncher
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_SpikeLauncher : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68429 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_SpikeLauncher::pClassPointer = NULL;

// Class TribesGame.TrDevice_SpikeLauncher
// 0x0004 (0x0868 - 0x0864)
class ATrDevice_SpikeLauncher : public ATrDevice
{
public:
	class USoundCue*                                   m_SpikeIdleSound;                                 		// 0x0864 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68434 ];

		return pClassPointer;
	};

	void OnSwitchAwayFromWeapon ( );
	void PutDownFast ( );
	void PlayWeaponPutDown ( );
	void PlayWeaponEquip ( );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void eventOnAnimPlay ( class UAnimNodeSequence* SeqNode );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void SetSpikeIdle ( unsigned long bEnabled );
};

UClass* ATrDevice_SpikeLauncher::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Spinfusor
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Spinfusor : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68435 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Spinfusor::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Spinfusor_100X
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Spinfusor_100X : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68439 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Spinfusor_100X::pClassPointer = NULL;

// Class TribesGame.TrDevice_Spinfusor_100X
// 0x0000 (0x0870 - 0x0870)
class ATrDevice_Spinfusor_100X : public ATrDevice_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68443 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_Spinfusor_100X::pClassPointer = NULL;

// Class TribesGame.TrAttachment_SpinfusorD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_SpinfusorD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68444 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_SpinfusorD::pClassPointer = NULL;

// Class TribesGame.TrDevice_SpinfusorD
// 0x0000 (0x0870 - 0x0870)
class ATrDevice_SpinfusorD : public ATrDevice_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68448 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_SpinfusorD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_SpinfusorD_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_SpinfusorD_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68449 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_SpinfusorD_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_SpinfusorD_MKD
// 0x0000 (0x0870 - 0x0870)
class ATrDevice_SpinfusorD_MKD : public ATrDevice_SpinfusorD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68453 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_SpinfusorD_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_STGrenade
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_STGrenade : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68454 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_STGrenade::pClassPointer = NULL;

// Class TribesGame.TrDevice_STGrenade
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_STGrenade : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68458 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_STGrenade::pClassPointer = NULL;

// Class TribesGame.TrAttachment_StickyGrenade
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_StickyGrenade : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68459 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_StickyGrenade::pClassPointer = NULL;

// Class TribesGame.TrDevice_StickyGrenade
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_StickyGrenade : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68463 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_StickyGrenade::pClassPointer = NULL;

// Class TribesGame.TrAttachment_StickyGrenade_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_StickyGrenade_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68464 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_StickyGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_StickyGrenade_MKD
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_StickyGrenade_MKD : public ATrDevice_StickyGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68468 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_StickyGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_TargetingBeacon
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_TargetingBeacon : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68469 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_TargetingBeacon::pClassPointer = NULL;

// Class TribesGame.TrDevice_TargetingBeacon
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_TargetingBeacon : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68473 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_TargetingBeacon::pClassPointer = NULL;

// Class TribesGame.TrAttachment_TC24
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_TC24 : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68474 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_TC24::pClassPointer = NULL;

// Class TribesGame.TrDevice_TC24
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_TC24 : public ATrDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68481 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_TC24::pClassPointer = NULL;

// Class TribesGame.TrAttachment_TCN4SMG
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_TCN4SMG : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68482 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_TCN4SMG::pClassPointer = NULL;

// Class TribesGame.TrMuzzleFlashLight_TCN4SMG
// 0x0000 (0x0270 - 0x0270)
class UTrMuzzleFlashLight_TCN4SMG : public UUDKExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68488 ];

		return pClassPointer;
	};

};

UClass* UTrMuzzleFlashLight_TCN4SMG::pClassPointer = NULL;

// Class TribesGame.TrDevice_TCN4SMG
// 0x0000 (0x087C - 0x087C)
class ATrDevice_TCN4SMG : public ATrDevice_ConstantFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68489 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_TCN4SMG::pClassPointer = NULL;

// Class TribesGame.TrAttachment_TCN4SMG_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_TCN4SMG_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68490 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_TCN4SMG_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_TCN4SMG_MKD
// 0x0000 (0x087C - 0x087C)
class ATrDevice_TCN4SMG_MKD : public ATrDevice_TCN4SMG
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68494 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_TCN4SMG_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_TCNG
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_TCNG : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68495 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_TCNG::pClassPointer = NULL;

// Class TribesGame.TrDevice_TCNG
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_TCNG : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68499 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_TCNG::pClassPointer = NULL;

// Class TribesGame.TrAttachment_TCNG_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_TCNG_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68500 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_TCNG_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_TCNG_MKD
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_TCNG_MKD : public ATrDevice_TCNG
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68504 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_TCNG_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_ThrowingKnives
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_ThrowingKnives : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68505 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_ThrowingKnives::pClassPointer = NULL;

// Class TribesGame.TrDevice_ThrowingKnives
// 0x0008 (0x086C - 0x0864)
class ATrDevice_ThrowingKnives : public ATrDevice
{
public:
	class USkelControlSingleBone*                      m_KnifeVisibilityTopControl;                      		// 0x0864 (0x0004) [0x0000000000000000]              
	class USkelControlSingleBone*                      m_KnifeVisibilityBottomControl;                   		// 0x0868 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68510 ];

		return pClassPointer;
	};

	void StartFire ( unsigned char FireModeNum );
	void FireAmmunition ( );
	class AProjectile* ProjectileFire ( );
	void PlayWeaponEquip ( );
	void OnSkelControlKnivesAnimNotify ( );
	void OnFireSkelControlKnivesAnimNotify ( );
	void UpdateSkelControlKnives ( unsigned long bForceFullAmmo );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
};

UClass* ATrDevice_ThrowingKnives::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Thumper
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Thumper : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68511 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Thumper::pClassPointer = NULL;

// Class TribesGame.TrDevice_Thumper
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_Thumper : public ATrDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68517 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_Thumper::pClassPointer = NULL;

// Class TribesGame.TrAttachment_ThumperD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_ThumperD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68518 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_ThumperD::pClassPointer = NULL;

// Class TribesGame.TrDevice_ThumperD
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_ThumperD : public ATrDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68523 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_ThumperD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_ThumperD_MKD
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_ThumperD_MKD : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68524 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_ThumperD_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_ThumperD_MKD
// 0x0000 (0x0864 - 0x0864)
class ATrDevice_ThumperD_MKD : public ATrDevice_ThumperD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68528 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_ThumperD_MKD::pClassPointer = NULL;

// Class TribesGame.TrAttachment_Twinfusor
// 0x0000 (0x0310 - 0x0310)
class ATrAttachment_Twinfusor : public ATrDeviceAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68529 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_Twinfusor::pClassPointer = NULL;

// Class TribesGame.TrAttachment_X1Rifle
// 0x0000 (0x0320 - 0x0320)
class ATrAttachment_X1Rifle : public ATrAttachment_ChainGun
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68538 ];

		return pClassPointer;
	};

};

UClass* ATrAttachment_X1Rifle::pClassPointer = NULL;

// Class TribesGame.TrDevice_X1Rifle
// 0x0000 (0x0894 - 0x0894)
class ATrDevice_X1Rifle : public ATrDevice_ChainGun
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68545 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_X1Rifle::pClassPointer = NULL;

// Class TribesGame.TrAutoBalanceMessage
// 0x0024 (0x0088 - 0x0064)
class UTrAutoBalanceMessage : public UUTLocalMessage
{
public:
	struct FString                                     AutoBalanceInTwenty;                              		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AutoBalanceInFive;                                		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TeamsAutoBalanced;                                		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68612 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrAutoBalanceMessage::pClassPointer = NULL;

// Class TribesGame.TrAward_Credits_Earned
// 0x0000 (0x0080 - 0x0080)
class UTrAward_Credits_Earned : public UTrAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69391 ];

		return pClassPointer;
	};

};

UClass* UTrAward_Credits_Earned::pClassPointer = NULL;

// Class TribesGame.TrAward_Credits_Spent
// 0x0000 (0x0080 - 0x0080)
class UTrAward_Credits_Spent : public UTrAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69393 ];

		return pClassPointer;
	};

};

UClass* UTrAward_Credits_Spent::pClassPointer = NULL;

// Class TribesGame.TrAward_Deaths
// 0x0000 (0x0080 - 0x0080)
class UTrAward_Deaths : public UTrAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69395 ];

		return pClassPointer;
	};

};

UClass* UTrAward_Deaths::pClassPointer = NULL;

// Class TribesGame.TrAward_Destruction_Deployable
// 0x0000 (0x0080 - 0x0080)
class UTrAward_Destruction_Deployable : public UTrAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69397 ];

		return pClassPointer;
	};

};

UClass* UTrAward_Destruction_Deployable::pClassPointer = NULL;

// Class TribesGame.TrAward_Destruction_Vehicle
// 0x0000 (0x0080 - 0x0080)
class UTrAward_Destruction_Vehicle : public UTrAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69399 ];

		return pClassPointer;
	};

};

UClass* UTrAward_Destruction_Vehicle::pClassPointer = NULL;

// Class TribesGame.TrAward_Distance_Headshot
// 0x0000 (0x0080 - 0x0080)
class UTrAward_Distance_Headshot : public UTrAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69401 ];

		return pClassPointer;
	};

};

UClass* UTrAward_Distance_Headshot::pClassPointer = NULL;

// Class TribesGame.TrAward_Distance_Kill
// 0x0000 (0x0080 - 0x0080)
class UTrAward_Distance_Kill : public UTrAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69403 ];

		return pClassPointer;
	};

};

UClass* UTrAward_Distance_Kill::pClassPointer = NULL;

// Class TribesGame.TrAward_Distance_Skied
// 0x0000 (0x0080 - 0x0080)
class UTrAward_Distance_Skied : public UTrAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69405 ];

		return pClassPointer;
	};

};

UClass* UTrAward_Distance_Skied::pClassPointer = NULL;

// Class TribesGame.TrAward_Flag_Returns
// 0x0000 (0x0080 - 0x0080)
class UTrAward_Flag_Returns : public UTrAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69407 ];

		return pClassPointer;
	};

};

UClass* UTrAward_Flag_Returns::pClassPointer = NULL;

// Class TribesGame.TrAward_Kills
// 0x0000 (0x0080 - 0x0080)
class UTrAward_Kills : public UTrAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69409 ];

		return pClassPointer;
	};

};

UClass* UTrAward_Kills::pClassPointer = NULL;

// Class TribesGame.TrAward_Kills_Deployable
// 0x0000 (0x0080 - 0x0080)
class UTrAward_Kills_Deployable : public UTrAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69411 ];

		return pClassPointer;
	};

};

UClass* UTrAward_Kills_Deployable::pClassPointer = NULL;

// Class TribesGame.TrAward_Kills_Midair
// 0x0000 (0x0080 - 0x0080)
class UTrAward_Kills_Midair : public UTrAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69413 ];

		return pClassPointer;
	};

};

UClass* UTrAward_Kills_Midair::pClassPointer = NULL;

// Class TribesGame.TrAward_Kills_Vehicle
// 0x0000 (0x0080 - 0x0080)
class UTrAward_Kills_Vehicle : public UTrAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69415 ];

		return pClassPointer;
	};

};

UClass* UTrAward_Kills_Vehicle::pClassPointer = NULL;

// Class TribesGame.TrAward_Repairs
// 0x0000 (0x0080 - 0x0080)
class UTrAward_Repairs : public UTrAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69417 ];

		return pClassPointer;
	};

};

UClass* UTrAward_Repairs::pClassPointer = NULL;

// Class TribesGame.TrAward_Speed_FlagCap
// 0x0000 (0x0080 - 0x0080)
class UTrAward_Speed_FlagCap : public UTrAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69419 ];

		return pClassPointer;
	};

};

UClass* UTrAward_Speed_FlagCap::pClassPointer = NULL;

// Class TribesGame.TrAward_Speed_FlagGrab
// 0x0000 (0x0080 - 0x0080)
class UTrAward_Speed_FlagGrab : public UTrAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69421 ];

		return pClassPointer;
	};

};

UClass* UTrAward_Speed_FlagGrab::pClassPointer = NULL;

// Class TribesGame.TrAward_Speed_Skied
// 0x0000 (0x0080 - 0x0080)
class UTrAward_Speed_Skied : public UTrAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69423 ];

		return pClassPointer;
	};

};

UClass* UTrAward_Speed_Skied::pClassPointer = NULL;

// Class TribesGame.TrDeployable_RadarSensor
// 0x0004 (0x0608 - 0x0604)
class ATrDeployable_RadarSensor : public ATrDeployable_Sensor
{
public:
	float                                              m_fBlipIntervalTime;                              		// 0x0604 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69441 ];

		return pClassPointer;
	};

	void AwardUpgradeAssists ( );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void ReleaseOutOfSightEnemies ( );
	void GiveDestroyAccolade ( class ATrPlayerController* TrPC );
	bool IsDeployed ( );
	void RadarBlip ( );
	void SetPowered ( unsigned long bEnabled );
	class UTexture2D* GetMarker ( );
	bool ShouldShowHelpText ( unsigned char HelpTextType );
	void SpawnHelpTextCollisionProxy ( unsigned char HelpTextType );
	bool ReceivesPowerFromGenerator ( );
	void ApplyServerSettings ( );
};

UClass* ATrDeployable_RadarSensor::pClassPointer = NULL;

// Class TribesGame.TrDeployable_Turret
// 0x0068 (0x065C - 0x05F4)
class ATrDeployable_Turret : public ATrDeployable
{
public:
	unsigned long                                      m_bEnabled : 1;                                   		// 0x05F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bCanTargetVehicles : 1;                         		// 0x05F4 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< class USkelControlLookAt* >                m_LookAtSkelControls;                             		// 0x05F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             m_LookAtSkelControlNames;                         		// 0x0604 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UGameSkelCtrl_Recoil* >              m_RecoilSkelControls;                             		// 0x0610 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             m_RecoilSkelControlNames;                         		// 0x061C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUDKExplosionLight*                          m_MuzzleFlashLight;                               		// 0x0628 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UClass*                                      m_MuzzleFlashLightClass;                          		// 0x062C (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    m_MuzzleFlashPSC;                                 		// 0x0630 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_fDeltaFireInterval;                             		// 0x0634 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_TargetAcquiredSoundCue;                         		// 0x0638 (0x0004) [0x0000000000000000]              
	float                                              m_fTargetAcquiredTime;                            		// 0x063C (0x0004) [0x0000000000000000]              
	float                                              m_fTimeToAcquireTarget;                           		// 0x0640 (0x0004) [0x0000000000000000]              
	TArray< struct FIgnorePawn >                       m_IgnorePawnList;                                 		// 0x0644 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fTimeToIgnoreInvulnerable;                      		// 0x0650 (0x0004) [0x0000000000000000]              
	float                                              m_fFireStallRestoreTime;                          		// 0x0654 (0x0004) [0x0000000000000000]              
	float                                              m_fLastStallTime;                                 		// 0x0658 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69444 ];

		return pClassPointer;
	};

	void AwardKillAssists ( );
	class UTexture2D* GetMarker ( );
	struct FVector GetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	void SetMuzzleFlashParams ( class UParticleSystemComponent* PSC, struct FColor MuzzleFlashColor );
	void MuzzleFlashTimer ( );
	void CauseMuzzleFlash ( );
	void PlayFireEffects ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation );
	void UpdateAim ( float DeltaTime );
	void eventTick ( float DeltaTime );
	class APawn* GetTargetPawn ( );
	bool CanTargetPawn ( class APawn* aPawn );
	void CleanupIgnoreList ( );
	float GetAcquireDelayTime ( );
	void AcquireTarget ( );
	void DeployComplete ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventPostBeginPlay ( );
};

UClass* ATrDeployable_Turret::pClassPointer = NULL;

// Class TribesGame.TrDeployable_BaseTurret
// 0x0000 (0x065C - 0x065C)
class ATrDeployable_BaseTurret : public ATrDeployable_Turret
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69443 ];

		return pClassPointer;
	};

	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void GiveDestroyAccolade ( class ATrPlayerController* TrPC );
	class UTexture2D* GetMarker ( );
	void SpawnHelpTextCollisionProxy ( unsigned char HelpTextType );
	bool ShouldShowHelpText ( unsigned char HelpTextType );
	bool ReceivesPowerFromGenerator ( );
	void ApplyServerSettings ( );
};

UClass* ATrDeployable_BaseTurret::pClassPointer = NULL;

// Class TribesGame.TrPowerGenerator
// 0x0038 (0x0588 - 0x0550)
class ATrPowerGenerator : public ATrGameObjective
{
public:
	float                                              m_fMaxMorphDamage;                                		// 0x0550 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fAutoRestoreHealthTime;                         		// 0x0554 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bAutoRestoreHealthEnabled : 1;                  		// 0x0558 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bFullyRestoringHealthEffects : 1;               		// 0x0558 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	int                                                r_nDowntimeRemaining;                             		// 0x055C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fAutoRestoreHealthTimeStamp;                    		// 0x0560 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fAutoRestoreHealthEffectsInterpSpeed;           		// 0x0564 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ATrGameObjective* >                  m_PoweredObjectives;                              		// 0x0568 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UAnimNodeScalePlayRate*                      m_AnimNodeScale;                                  		// 0x0574 (0x0004) [0x0000000000000000]              
	float                                              m_fAnimInterpSpeed;                               		// 0x0578 (0x0004) [0x0000000000000000]              
	TArray< class ATrTeamBlockerStaticMeshActor* >     m_PoweredTeamBlockers;                            		// 0x057C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69446 ];

		return pClassPointer;
	};

	void AwardUpgradeAssists ( );
	void GiveDestroyAccolade ( class ATrPlayerController* TrPC );
	class UTexture2D* GetMarker ( );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void AddToPoweredObjectives ( class ATrDeployable* dep );
	bool IsGeneratingPower ( );
	void AutoRestoreHealth ( unsigned long bFullyRestore );
	void UpdateGeneratorPower ( unsigned long bPowered );
	void UpdateGeneratorDowntime ( );
	void PlayRestoreHealthEffects ( float DeltaTime );
	void DamageAllMorphs ( float DamageAmount );
	void DoRepairs ( int HealAmount, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void PlayDamageHealthEffects ( int DamageAmount, int HitBoneIndex );
	void eventTick ( float DeltaTime );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventPostBeginPlay ( );
	bool ShouldShowHelpText ( unsigned char HelpTextType );
	void eventReplicatedEvent ( struct FName VarName );
	void ApplyServerSettings ( );
};

UClass* ATrPowerGenerator::pClassPointer = NULL;

// Class TribesGame.TrCTFBase
// 0x0014 (0x046C - 0x0458)
class ATrCTFBase : public AUTCTFBase
{
public:
	class USkeletalMeshComponent*                      m_FlagStandMesh;                                  		// 0x0458 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UTrAnimNodeBlendList*                        m_OpenCloseBlendList;                             		// 0x045C (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_MarkerMIC;                                      		// 0x0460 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CTFBlitzIndex;                                    		// 0x0464 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      r_bIsActive : 1;                                  		// 0x0468 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69453 ];

		return pClassPointer;
	};

	void SpawnHelpTextCollisionProxy ( unsigned char HelpTextType );
	void OnFlagTaken ( );
	void OnFlagComesHome ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void PostBeginPlay ( );
	void SetBlitzStandActive ( unsigned long bActive );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ATrCTFBase::pClassPointer = NULL;

// Class TribesGame.TrRabbitBase
// 0x0058 (0x045C - 0x0404)
class ATrRabbitBase : public AUTGameObjective
{
public:
	class UAudioComponent*                             TakenSound;                                       		// 0x0404 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ATrFlagRabbit*                               myFlag;                                           		// 0x0408 (0x0004) [0x0000000000000000]              
	float                                              MidFieldHighZOffset;                              		// 0x040C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MidFieldLowZOffset;                               		// 0x0410 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NearBaseRadius;                                   		// 0x0414 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseExitTime;                                     		// 0x0418 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    FlagEmptyParticles;                               		// 0x041C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   FlagBaseMaterial;                                 		// 0x0420 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   MIC_FlagBaseColor;                                		// 0x0424 (0x0004) [0x0000000000000000]              
	class UStaticMeshComponent*                        FlagBaseMesh;                                     		// 0x0428 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UClass*                                      CTFAnnouncerMessagesClass;                        		// 0x042C (0x0004) [0x0000000000000000]              
	TArray< class USoundNodeWave* >                    NearLocationSpeech;                               		// 0x0430 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USoundNodeWave* >                    MidfieldHighSpeech;                               		// 0x043C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USoundNodeWave* >                    MidfieldLowSpeech;                                		// 0x0448 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      m_FlagStandMesh;                                  		// 0x0454 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UTrAnimNodeBlendList*                        m_OpenCloseBlendList;                             		// 0x0458 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69455 ];

		return pClassPointer;
	};

	void SpawnHelpTextCollisionProxy ( unsigned char HelpTextType );
	void OnFlagTaken ( );
	void OnFlagComesHome ( );
	bool eventIsActive ( );
	class AUTCarriedObject* GetFlag ( );
	void ObjectiveChanged ( );
	class USoundNodeWave* GetLocationSpeechFor ( class APlayerController* PC, int LocationSpeechOffset, int MessageIndex );
	int GetLocationMessageIndex ( class AUTBot* B, class APawn* StatusPawn );
	class AActor* eventGetBestViewTarget ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void PostBeginPlay ( );
};

UClass* ATrRabbitBase::pClassPointer = NULL;

// Class TribesGame.TrVehicleStation
// 0x00CC (0x0640 - 0x0574)
class ATrVehicleStation : public ATrStation
{
public:
	struct FVehicleSpawnInfo                           m_SpawnList[ 0x5 ];                               		// 0x0574 (0x00A0) [0x0000000000000001]              ( CPF_Edit )
	class ATrVehiclePad*                               m_VehiclePad;                                     		// 0x0614 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                r_nSpawnedVehicles;                               		// 0x0618 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      r_bIsLocked : 1;                                  		// 0x061C (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      r_bSpawnSequenceStarted : 1;                      		// 0x061C (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned char                                      r_nSpawnSequenceEnded;                            		// 0x0620 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      m_LastRequestedVehicleType;                       		// 0x0621 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPostSpawnLockoutTime;                          		// 0x0624 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSpawnTimeStamp;                                		// 0x0628 (0x0004) [0x0000000000000000]              
	class ATrVehicle*                                  m_LastSpawnedVehicle;                             		// 0x062C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ATrPawn*                                     m_PawnRequestingVehicle;                          		// 0x0630 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fInstigatorTeleportTime;                        		// 0x0634 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTimeToSpawnVehicleAfterRequest;                		// 0x0638 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTrAnimNodeBlendList*                        m_VehicleStationBlendNode;                        		// 0x063C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69458 ];

		return pClassPointer;
	};

	bool ShouldPostRenderForCaH ( );
	class UTexture2D* GetMarker ( );
	void AddVehicleToPackedList ( unsigned char VehicleType, int Num );
	int GetNumVehiclesSpawnedByType ( unsigned char VehicleType );
	int GetMaxVehicleCountAllowed ( unsigned char VehicleType );
	bool AbleToSpawnVehicleType ( unsigned char VehicleType );
	void Unlock ( );
	void TeleportDriverToVehicle ( );
	void SpawnVehicle ( );
	bool RequestSpawnVehicle ( unsigned char VehicleType );
	void PlayVehiclePadCollapseAnim ( );
	void PlayVehiclePadDeployAnim ( );
	void PlayRetractAnim ( );
	void PlayStationLeftEffects ( );
	void PlayStationEnteredEffects ( );
	void PawnLeftStation ( class ATrPawn* P );
	void PawnEnteredStation ( class ATrPawn* P );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ATrVehicleStation::pClassPointer = NULL;

// Class TribesGame.TrRepairStation
// 0x0010 (0x0584 - 0x0574)
class ATrRepairStation : public ATrStation
{
public:
	unsigned long                                      m_bIsStationOpen : 1;                             		// 0x0574 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              m_fStationOpenDelay;                              		// 0x0578 (0x0004) [0x0000000000000000]              
	class UTrAnimNodeBlendList*                        m_RepairStationBlendList;                         		// 0x057C (0x0004) [0x0000000000000000]              
	class USkelControlSingleBone*                      m_RepairGunControl;                               		// 0x0580 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69468 ];

		return pClassPointer;
	};

	class UTexture2D* GetMarker ( );
	void CloseStation ( );
	void PawnGrabbedRepairTool ( );
	void PlayStationLeftEffects ( );
	void PlayStationEnteredEffects ( );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventPostBeginPlay ( );
};

UClass* ATrRepairStation::pClassPointer = NULL;

// Class TribesGame.TrGame_TRRabbit
// 0x0010 (0x05C0 - 0x05B0)
class ATrGame_TRRabbit : public ATrGame
{
public:
	class ATrFlagRabbit*                               m_Flag;                                           		// 0x05B0 (0x0004) [0x0000000000000000]              
	float                                              m_fScoreInterval;                                 		// 0x05B4 (0x0004) [0x0000000000000000]              
	class APlayerReplicationInfo*                      m_HolderPRI;                                      		// 0x05B8 (0x0004) [0x0000000000000000]              
	class APlayerReplicationInfo*                      m_Leader;                                         		// 0x05BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69594 ];

		return pClassPointer;
	};

	int GetGameTypeId ( );
	float RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player );
	void DiscardInventory ( class APawn* Other, class AController* Killer );
	void PlayEndOfMatchMessage ( );
	unsigned char PickTeamForMigration ( class AController* C );
	unsigned char PickTeam ( unsigned char Num, class AController* C );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	bool SortPlayerScores ( class APlayerReplicationInfo* Scorer );
	struct FScoreStruct MakeScoreStruct ( class ATrPlayerController* C, float Score );
	void ChangePreviousRabbitTeam ( );
	void ScoreKill ( class AController* Killer, class AController* Other );
	void ScoreFlagHold ( unsigned long firstPass );
	void ScoreFlagTimer ( );
	void SetTeam ( class AController* Other, class AUTTeamInfo* NewTeam, unsigned long bNewTeam );
	void DroppedFlag ( );
	void PickedUpFlag ( class AController* Holder );
	void RegisterFlag ( class ATrFlagRabbit* F );
	void ApplyServerSettings ( );
};

UClass* ATrGame_TRRabbit::pClassPointer = NULL;

// Class TribesGame.TrCollisionProxy_PromptText
// 0x0020 (0x020C - 0x01EC)
class ATrCollisionProxy_PromptText : public ATrCollisionProxy
{
public:
	class UCylinderComponent*                          m_CylinderComponent;                              		// 0x01EC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_fPromptTextRemovalTime;                         		// 0x01F0 (0x0004) [0x0000000000000000]              
	int                                                m_nPromptMessageIndex;                            		// 0x01F4 (0x0004) [0x0000000000000000]              
	int                                                m_nLastUpgradeLevel;                              		// 0x01F8 (0x0004) [0x0000000000000000]              
	struct FString                                     m_LastUpgradeMsg;                                 		// 0x01FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class APawn*                                       m_LocalPawn;                                      		// 0x0208 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71107 ];

		return pClassPointer;
	};

	void OnPawnRemoved ( class APawn* aPawn );
	void TryTraceAgainTimer ( );
	void CheckForUpgradeLevel ( );
	void RequestPromptText ( );
	void OnPawnAdded ( class APawn* aPawn );
};

UClass* ATrCollisionProxy_PromptText::pClassPointer = NULL;

// Class TribesGame.TrGame_TrCaH
// 0x0024 (0x05D4 - 0x05B0)
class ATrGame_TrCaH : public ATrGame
{
public:
	TArray< class ATrCaHCapturePoint* >                m_CapturePoints;                                  		// 0x05B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nRemainingTicketTime;                           		// 0x05BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nTicketCountTime;                               		// 0x05C0 (0x0004) [0x0000000000000000]              
	int                                                m_nPostCapturePointTime;                          		// 0x05C4 (0x0004) [0x0000000000000000]              
	int                                                m_3PointGoalScore;                                		// 0x05C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_4PointGoalScore;                                		// 0x05CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_5PointGoalScore;                                		// 0x05D0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71208 ];

		return pClassPointer;
	};

	class APlayerStart* ChoosePlayerStart ( class AController* Player, unsigned char InTeam );
	float RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player );
	void OnCapturePointOwnershipChanged ( class ATrCaHCapturePoint* PointThatChanged, class ATrPawn* TRP );
	void OnCapturePointHeld ( class ATrCaHCapturePoint* HeldPoint );
	int GetGameTypeId ( );
	void RestartPlayer ( class AController* NewPlayer );
	void AwardPoint ( unsigned char TeamIndex );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void GotoPendingRoundStartTimer ( );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void ScoreKill ( class AController* Killer, class AController* Other );
	void ResetLevel ( );
	void PostBeginPlay ( );
	void Logout ( class AController* Exiting );
	void SetTeam ( class AController* Other, class AUTTeamInfo* NewTeam, unsigned long bNewTeam );
	void ApplyServerSettings ( );
	void PreBeginPlay ( );
};

UClass* ATrGame_TrCaH::pClassPointer = NULL;

// Class TribesGame.TrDeployable_BackupGenerator
// 0x0004 (0x05F8 - 0x05F4)
class ATrDeployable_BackupGenerator : public ATrDeployable
{
public:
	class ATrGameObjective*                            m_PoweredFriend;                                  		// 0x05F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71223 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
	void Destroyed ( );
	void DoPowerUpdate ( class ATrDeployable* dep );
	void OnPowerStatusChanged ( );
	void DoPowerCheck ( );
	void AsynchPowerCheck ( );
	void PulseBackupGenerators ( );
	void ReleasePoweredFriend ( );
	void PowerNearestFriend ( );
	bool MainGeneratorIsOnline ( );
	void DeployComplete ( );
};

UClass* ATrDeployable_BackupGenerator::pClassPointer = NULL;

// Class TribesGame.TrCollisionProxy_HelpText
// 0x001C (0x0208 - 0x01EC)
class ATrCollisionProxy_HelpText : public ATrCollisionProxy
{
public:
	class UCylinderComponent*                          m_CylinderComponent;                              		// 0x01EC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      m_HelpTextType;                                   		// 0x01F0 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fHelpTextRemovalTime;                           		// 0x01F4 (0x0004) [0x0000000000000000]              
	class APawn*                                       m_LocalPawn;                                      		// 0x01F8 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __ShouldShowHelpText_Delegate__Delegate;          		// 0x01FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71240 ];

		return pClassPointer;
	};

	void OnPawnRemoved ( class APawn* aPawn );
	void TryTraceAgainTimer ( );
	void RequestHelpText ( );
	void OnPawnAdded ( class APawn* aPawn );
	bool ShouldShowHelpText_Delegate ( unsigned char HelpTextType );
};

UClass* ATrCollisionProxy_HelpText::pClassPointer = NULL;

// Class TribesGame.TrPromptMessage
// 0x0058 (0x00BC - 0x0064)
class UTrPromptMessage : public UUTLocalMessage
{
public:
	class USoundCue*                                   UpgradeDeniedSound;                               		// 0x0064 (0x0004) [0x0000000000000000]              
	struct FString                                     EquipRepairGun;                                   		// 0x0068 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UpgradeObjective;                                 		// 0x0074 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KickWarning;                                      		// 0x0080 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ObjectiveUpgradeDeniedNoCredits;                  		// 0x008C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ObjectiveUpgradeDeniedMaxLevel;                   		// 0x0098 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnterVehicle;                                     		// 0x00A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     YourJackalGrenadesHaveBeenDestroyed;              		// 0x00B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71259 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString FormatText ( struct FString InString, class ATrPlayerController* TrPC );
};

UClass* UTrPromptMessage::pClassPointer = NULL;

// Class TribesGame.TrUpgradeMessage
// 0x0010 (0x0074 - 0x0064)
class UTrUpgradeMessage : public UUTLocalMessage
{
public:
	class USoundCue*                                   UpgradeSound;                                     		// 0x0064 (0x0004) [0x0000000000000000]              
	struct FString                                     ObjectiveUpgraded;                                		// 0x0068 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71262 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrUpgradeMessage::pClassPointer = NULL;

// Class TribesGame.TrGeneratorExplosionLight
// 0x0000 (0x0270 - 0x0270)
class UTrGeneratorExplosionLight : public UUDKExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71314 ];

		return pClassPointer;
	};

};

UClass* UTrGeneratorExplosionLight::pClassPointer = NULL;

// Class TribesGame.TrSubDevice
// 0x0000 (0x0864 - 0x0864)
class ATrSubDevice : public ATrDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71334 ];

		return pClassPointer;
	};

	struct FImpactInfo CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, TArray< struct FImpactInfo >* ImpactList );
	void Reset ( );
};

UClass* ATrSubDevice::pClassPointer = NULL;

// Class TribesGame.TrDeployableCollisionProxy
// 0x0000 (0x01EC - 0x01EC)
class ATrDeployableCollisionProxy : public ATrCollisionProxy
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71341 ];

		return pClassPointer;
	};

	void OnPawnRemoved ( class APawn* aPawn );
	void OnPawnAdded ( class APawn* aPawn );
};

UClass* ATrDeployableCollisionProxy::pClassPointer = NULL;

// Class TribesGame.TrDeployableController
// 0x0004 (0x03A0 - 0x039C)
class ATrDeployableController : public AAIController
{
public:
	class ATrPlayerController*                         m_SpawnedFromController;                          		// 0x039C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71440 ];

		return pClassPointer;
	};

	unsigned char eventScriptGetTeamNum ( );
	bool CanFireWeapon ( class AWeapon* Wpn, unsigned char FireModeNum );
};

UClass* ATrDeployableController::pClassPointer = NULL;

// Class TribesGame.TrMuzzleFlashLight_BaseTurretProjectile
// 0x0000 (0x0270 - 0x0270)
class UTrMuzzleFlashLight_BaseTurretProjectile : public UUDKExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71703 ];

		return pClassPointer;
	};

};

UClass* UTrMuzzleFlashLight_BaseTurretProjectile::pClassPointer = NULL;

// Class TribesGame.TrSubDevice_Turret
// 0x0000 (0x0864 - 0x0864)
class ATrSubDevice_Turret : public ATrSubDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71707 ];

		return pClassPointer;
	};

	float GetFireInterval ( unsigned char FireModeNum );
	struct FVector GetPhysicalFireStartLoc ( struct FVector AimDir );
};

UClass* ATrSubDevice_Turret::pClassPointer = NULL;

// Class TribesGame.TrSubDevice_BaseTurret
// 0x0000 (0x0864 - 0x0864)
class ATrSubDevice_BaseTurret : public ATrSubDevice_Turret
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71706 ];

		return pClassPointer;
	};

};

UClass* ATrSubDevice_BaseTurret::pClassPointer = NULL;

// Class TribesGame.TrBaseTurret_BloodEagle
// 0x0000 (0x065C - 0x065C)
class ATrBaseTurret_BloodEagle : public ATrDeployable_BaseTurret
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71725 ];

		return pClassPointer;
	};

};

UClass* ATrBaseTurret_BloodEagle::pClassPointer = NULL;

// Class TribesGame.TrBaseTurret_DiamondSword
// 0x0000 (0x065C - 0x065C)
class ATrBaseTurret_DiamondSword : public ATrDeployable_BaseTurret
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71737 ];

		return pClassPointer;
	};

};

UClass* ATrBaseTurret_DiamondSword::pClassPointer = NULL;

// Class TribesGame.TrBaseTurret_Neutral
// 0x0000 (0x065C - 0x065C)
class ATrBaseTurret_Neutral : public ATrDeployable_BaseTurret
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71749 ];

		return pClassPointer;
	};

	class UTexture2D* GetMarker ( );
	bool ShouldShowHelpText ( unsigned char HelpTextType );
};

UClass* ATrBaseTurret_Neutral::pClassPointer = NULL;

// Class TribesGame.TrBaseTurret_TargetPractice
// 0x0000 (0x065C - 0x065C)
class ATrBaseTurret_TargetPractice : public ATrDeployable_BaseTurret
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71766 ];

		return pClassPointer;
	};

};

UClass* ATrBaseTurret_TargetPractice::pClassPointer = NULL;

// Class TribesGame.TrSeqAct_AIStartJetting
// 0x0014 (0x00FC - 0x00E8)
class UTrSeqAct_AIStartJetting : public USequenceAction
{
public:
	float                                              Magnitude;                                        		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Direction;                                        		// 0x00EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bResetVelocity : 1;                             		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71785 ];

		return pClassPointer;
	};

};

UClass* UTrSeqAct_AIStartJetting::pClassPointer = NULL;

// Class TribesGame.TrSeqAct_AIStopJetting
// 0x0004 (0x00EC - 0x00E8)
class UTrSeqAct_AIStopJetting : public USequenceAction
{
public:
	unsigned long                                      m_bResetVelocity : 1;                             		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71791 ];

		return pClassPointer;
	};

};

UClass* UTrSeqAct_AIStopJetting::pClassPointer = NULL;

// Class TribesGame.TrSeqAct_AIStartSkiing
// 0x0000 (0x00E8 - 0x00E8)
class UTrSeqAct_AIStartSkiing : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71796 ];

		return pClassPointer;
	};

};

UClass* UTrSeqAct_AIStartSkiing::pClassPointer = NULL;

// Class TribesGame.TrSeqAct_AIStopSkiing
// 0x0000 (0x00E8 - 0x00E8)
class UTrSeqAct_AIStopSkiing : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71801 ];

		return pClassPointer;
	};

};

UClass* UTrSeqAct_AIStopSkiing::pClassPointer = NULL;

// Class TribesGame.TrDeployable_DropJammer
// 0x0000 (0x0604 - 0x0604)
class ATrDeployable_DropJammer : public ATrDeployable_Sensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71833 ];

		return pClassPointer;
	};

	class UTexture2D* GetMarker ( );
	void RemoveDetectedPawn ( class APawn* DetectedPawn );
	void AddDetectedPawn ( class APawn* DetectedPawn );
	void OnPowerStatusChanged ( );
	bool ShouldDetectPawn ( class APawn* P );
};

UClass* ATrDeployable_DropJammer::pClassPointer = NULL;

// Class TribesGame.TrPawnCollisionProxy
// 0x0000 (0x01EC - 0x01EC)
class ATrPawnCollisionProxy : public ATrCollisionProxy
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71917 ];

		return pClassPointer;
	};

	void OnPawnRemoved ( class APawn* aPawn );
	void OnPawnAdded ( class APawn* aPawn );
};

UClass* ATrPawnCollisionProxy::pClassPointer = NULL;

// Class TribesGame.TrDevice_AmmoPack
// 0x000C (0x0884 - 0x0878)
class ATrDevice_AmmoPack : public ATrDevice_Pack
{
public:
	int                                                m_nAmmoPackMultPrimary;                           		// 0x0878 (0x0004) [0x0000000000000000]              
	int                                                m_nAmmoPackMultSecondary;                         		// 0x087C (0x0004) [0x0000000000000000]              
	int                                                m_nAmmoPackMultBelt;                              		// 0x0880 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72198 ];

		return pClassPointer;
	};

	void ApplyAmmoBuff ( );
	void AddAmmoBuff ( class ATrDevice* Dev, float Mult );
};

UClass* ATrDevice_AmmoPack::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Fell
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Fell : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72393 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Fell::pClassPointer = NULL;

// Class TribesGame.TrDmgType_WhiteOut
// 0x0008 (0x01B0 - 0x01A8)
class UTrDmgType_WhiteOut : public UTrDmgType_Explosive
{
public:
	float                                              m_fWhiteoutInterpSpeed;                           		// 0x01A8 (0x0004) [0x0000000000000000]              
	float                                              m_fWhiteoutTargetValue;                           		// 0x01AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72401 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_WhiteOut::pClassPointer = NULL;

// Class TribesGame.TrDmgType_NinjaSmoke
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_NinjaSmoke : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72436 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_NinjaSmoke::pClassPointer = NULL;

// Class TribesGame.TrDmgType_ConcussionGrenade
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_ConcussionGrenade : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72441 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_ConcussionGrenade::pClassPointer = NULL;

// Class TribesGame.TrDmgType_FellOutOfWorld
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_FellOutOfWorld : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72614 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_FellOutOfWorld::pClassPointer = NULL;

// Class TribesGame.TrDevice_RegenPack
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_RegenPack : public ATrDevice_Pack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72670 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_RegenPack::pClassPointer = NULL;

// Class TribesGame.TrPawnSoundGroup
// 0x0088 (0x0130 - 0x00A8)
class UTrPawnSoundGroup : public UUTPawnSoundGroup
{
public:
	class USoundCue*                                   m_JetpackLoopSound;                               		// 0x00A8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_JetpackCooldownSound;                           		// 0x00AC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_LowHealthSound;                                 		// 0x00B0 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_RechargeHealthSound;                            		// 0x00B4 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_RechargeHealthSound3p;                          		// 0x00B8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_ShieldPackActivateSound1p;                      		// 0x00BC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_ShieldPackActivateSound3p;                      		// 0x00C0 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_ShieldPackDeactivateSound1p;                    		// 0x00C4 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_ShieldPackDeactivateSound3p;                    		// 0x00C8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_ShieldPackLoopSound1p;                          		// 0x00CC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_ShieldPackLoopSound3p;                          		// 0x00D0 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_StealthPackActivateSound1p;                     		// 0x00D4 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_StealthPackActivateSound3p;                     		// 0x00D8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_StealthPackDeactivateSound1p;                   		// 0x00DC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_StealthPackDeactivateSound3p;                   		// 0x00E0 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_StealthPackLoopSound1p;                         		// 0x00E4 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_StealthPackLoopSound3p;                         		// 0x00E8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_JammerPackActivateSound1p;                      		// 0x00EC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_JammerPackActivateSound3p;                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_JammerPackDeactivateSound1p;                    		// 0x00F4 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_JammerPackDeactivateSound3p;                    		// 0x00F8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_JammerPackLoopSound1p;                          		// 0x00FC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_JammerPackLoopSound3p;                          		// 0x0100 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_RageActivateSound1p;                            		// 0x0104 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_RageActivateSound3p;                            		// 0x0108 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_RageDeactivateSound1p;                          		// 0x010C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_RageDeactivateSound3p;                          		// 0x0110 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_RageLoopSound1p;                                		// 0x0114 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_RageLoopSound3p;                                		// 0x0118 (0x0004) [0x0000000000000000]              
	TArray< class USoundCue* >                         m_DyingSounds;                                    		// 0x011C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USoundCue*                                   m_BlinkPackSound1p;                               		// 0x0128 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_BlinkPackSound3p;                               		// 0x012C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72671 ];

		return pClassPointer;
	};

	void PlayBlinkPackSound ( class APawn* P );
	void PlayDyingSound ( class APawn* P );
	void PlayRageDeactivateSound ( class APawn* P );
	void PlayRageActivateSound ( class APawn* P );
	void PlayJammerPackDeactivateSound ( class APawn* P );
	void PlayJammerPackActivateSound ( class APawn* P );
	void PlayStealthPackDeactivateSound ( class APawn* P );
	void PlayStealthPackActivateSound ( class APawn* P );
	void PlayShieldPackDeactivateSound ( class APawn* P );
	void PlayShieldPackActivateSound ( class APawn* P );
};

UClass* UTrPawnSoundGroup::pClassPointer = NULL;

// Class TribesGame.TrJammerMessage
// 0x003C (0x00A0 - 0x0064)
class UTrJammerMessage : public UUTLocalMessage
{
public:
	struct FString                                     JammingViaOther;                                  		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     JammingForOther;                                  		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     JammedByEnemyDropJammer;                          		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     JammingViaOtherDropJammer;                        		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     JammedByEnemyJammerPack;                          		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72747 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrJammerMessage::pClassPointer = NULL;

// Class TribesGame.TrFlagCTF
// 0x000C (0x03B0 - 0x03A4)
class ATrFlagCTF : public ATrFlagBase
{
public:
	int                                                m_LastReturnedTime;                               		// 0x03A4 (0x0004) [0x0000000000000000]              
	int                                                m_ReturnedTimeLimit;                              		// 0x03A8 (0x0004) [0x0000000000000000]              
	float                                              m_YouHaveTheFlagReminderTime;                     		// 0x03AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72835 ];

		return pClassPointer;
	};

	void BroadcastDroppedMessage ( class AController* EventInstigator );
	void BroadcastReturnedMessage ( );
	void BroadcastCapturedMessage ( class AController* EventInstigator );
	void BroadcastTakenDroppedMessage ( class AController* EventInstigator );
	void BroadcastTakenFromBaseMessage ( class AController* EventInstigator );
	void RemindPlayerAboutFlagTimer ( );
	void SendHome ( class AController* Returner );
	void ClearHolder ( );
	void LogDropped ( class AController* EventInstigator );
	void LogTaken ( class AController* EventInstigator );
};

UClass* ATrFlagCTF::pClassPointer = NULL;

// Class TribesGame.TrGame_TrArena
// 0x0010 (0x05C0 - 0x05B0)
class ATrGame_TrArena : public ATrGame
{
public:
	int                                                m_nNumEnemiesAliveAtLastManStanding[ 0x2 ];       		// 0x05B0 (0x0008) [0x0000000000000000]              
	unsigned char                                      m_bHasTeamBenchedAPlayer[ 0x2 ];                  		// 0x05B8 (0x0002) [0x0000000000000000]              
	int                                                m_nGoalWonRounds;                                 		// 0x05BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72847 ];

		return pClassPointer;
	};

	void SendMatchOver ( );
	int GetGameTypeId ( );
	void OnServerSpawnedPlayer ( class ATrPlayerController* TrPC );
	bool AllowRespawn ( class ATrPlayerController* TrPC );
	void SendMatchCountdown ( int Seconds );
	void CheckForAutoBalance ( );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	bool IsDiamondSwordOutOfLives ( );
	bool IsBloodEagleOutOfLives ( );
	int GetNumRemainingAlivePlayers ( int TeamIndex );
	void GotoPendingRoundStartTimer ( );
	void EndTheRound ( class APlayerReplicationInfo* RoundWinner );
	int GetRoundWinningTeam ( );
	int DetermineWinningTeam ( );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void ScoreKill ( class AController* Killer, class AController* Other );
	void ResetRound ( );
	void RespawnPlayers ( );
	void ResetLevel ( );
	void PostBeginPlay ( );
	void Logout ( class AController* Exiting );
	void SetTeam ( class AController* Other, class AUTTeamInfo* NewTeam, unsigned long bNewTeam );
	void RepopulatePlayerLists ( );
	void ResetScores ( );
	void ApplyServerSettings ( );
};

UClass* ATrGame_TrArena::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Clothesline
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Clothesline : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72898 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Clothesline::pClassPointer = NULL;

// Class TribesGame.TrClientSideWeaponPawn
// 0x0000 (0x0618 - 0x0618)
class ATrClientSideWeaponPawn : public AUTClientSideWeaponPawn
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72983 ];

		return pClassPointer;
	};

	void DetachDriver ( class APawn* P );
};

UClass* ATrClientSideWeaponPawn::pClassPointer = NULL;

// Class TribesGame.TrBroadcastHandler
// 0x0010 (0x01F4 - 0x01E4)
class ATrBroadcastHandler : public ABroadcastHandler
{
public:
	TArray< class ATrSpottedTarget* >                  m_SpottedTargets;                                 		// 0x01E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              m_fSpottedActorsUpdateFrequency;                  		// 0x01F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73267 ];

		return pClassPointer;
	};

	void UpdateSpottedActorsTimer ( );
	void OnActorSpotted ( class AActor* SpottedActor, class UClass* SpottedTargetClass );
	void TeamBroadcastVGSContextCommand ( class APlayerReplicationInfo* SenderPRI, unsigned char ContextActor, unsigned char ContextLocation, unsigned long bEnemyLocation );
	void GlobalBroadcastVGSCommand ( class APlayerReplicationInfo* SenderPRI, unsigned char VGSCommandIndex );
	void TeamBroadcastVGSCommand ( class APlayerReplicationInfo* SenderPRI, unsigned char VGSCommandIndex );
};

UClass* ATrBroadcastHandler::pClassPointer = NULL;

// Class TribesGame.TrRadarStation_Neutral
// 0x0000 (0x0608 - 0x0608)
class ATrRadarStation_Neutral : public ATrDeployable_RadarSensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73336 ];

		return pClassPointer;
	};

	class UTexture2D* GetMarker ( );
	bool ShouldShowHelpText ( unsigned char HelpTextType );
};

UClass* ATrRadarStation_Neutral::pClassPointer = NULL;

// Class TribesGame.TrInventoryStation_Neutral
// 0x0000 (0x0590 - 0x0590)
class ATrInventoryStation_Neutral : public ATrInventoryStation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73339 ];

		return pClassPointer;
	};

};

UClass* ATrInventoryStation_Neutral::pClassPointer = NULL;

// Class TribesGame.TrRepairStation_Neutral
// 0x0000 (0x0584 - 0x0584)
class ATrRepairStation_Neutral : public ATrRepairStation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73342 ];

		return pClassPointer;
	};

};

UClass* ATrRepairStation_Neutral::pClassPointer = NULL;

// Class TribesGame.TrCaHMessage
// 0x0060 (0x00C4 - 0x0064)
class UTrCaHMessage : public UUTLocalMessage
{
public:
	struct FString                                     CaptureAndHoldTheControlPoints;                   		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ControlPointCaptured;                             		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TheEnemyNeeds;                                    		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeNeed;                                           		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MorePointsToWin;                                  		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TheEnemyHas;                                      		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeHave;                                           		// 0x00AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Points;                                           		// 0x00B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73451 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrCaHMessage::pClassPointer = NULL;

// Class TribesGame.TrCaHStats
// 0x0048 (0x0084 - 0x003C)
class UTrCaHStats : public UObject
{
public:
	int                                                MyTeam;                                           		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                RemainingTime;                                    		// 0x0040 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsActive : 1;                                    		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bForcingUpdate : 1;                               		// 0x0044 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bForceUpdateNextTick : 1;                         		// 0x0044 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                TeamScore[ 0x2 ];                                 		// 0x0048 (0x0008) [0x0000000000000000]              
	int                                                RoundScore[ 0x2 ];                                		// 0x0050 (0x0008) [0x0000000000000000]              
	int                                                NumCapturePointsHeld[ 0x2 ];                      		// 0x0058 (0x0008) [0x0000000000000000]              
	int                                                RoundNum;                                         		// 0x0060 (0x0004) [0x0000000000000000]              
	class UGfxTrHud*                                   m_MoviePlayer;                                    		// 0x0064 (0x0004) [0x0000000000000000]              
	class ATrPlayerController*                         TrPC;                                             		// 0x0068 (0x0004) [0x0000000000000000]              
	TArray< struct FCapturePointInfo >                 m_CapturePointData;                               		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ATrCaHCapturePoint* >                m_CapturePoints;                                  		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73481 ];

		return pClassPointer;
	};

	void ForceUpdate ( );
	struct FString FormatTime ( int Seconds );
	void UpdateTeamScore ( class ATrGameReplicationInfo* GRI );
	void UpdateCapturePointData ( class ATrGameReplicationInfo* GRI );
	void UpdateTeam ( );
	void Tick ( );
	void Hide ( );
	void Show ( );
	void Initialize ( class ATrPlayerController* PC, class UGfxTrHud* MP );
	void ReadyToPlay ( );
};

UClass* UTrCaHStats::pClassPointer = NULL;

// Class TribesGame.TrCallInMessage
// 0x0024 (0x0088 - 0x0064)
class UTrCallInMessage : public UUTLocalMessage
{
public:
	struct FString                                     PlayerCalledInSupportInventory;                   		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerCalledInOrbitalStrike;                      		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerCalledInTacticalStrike;                     		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73572 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrCallInMessage::pClassPointer = NULL;

// Class TribesGame.TrCallIn_CrashLandInfo
// 0x0038 (0x0214 - 0x01DC)
class ATrCallIn_CrashLandInfo : public AInfo
{
public:
	class UClass*                                      m_ItemToDeploy;                                   		// 0x01DC (0x0004) [0x0000000000000000]              
	class AController*                                 m_Owner;                                          		// 0x01E0 (0x0004) [0x0000000000000000]              
	unsigned long                                      r_bPodLanded : 1;                                 		// 0x01E4 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	float                                              r_fCrashLandTime;                                 		// 0x01E8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     r_CrashLandPoint;                                 		// 0x01EC (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     r_CrashLandNormal;                                		// 0x01F8 (0x000C) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      DamageTypeClass;                                  		// 0x0204 (0x0004) [0x0000000000000000]              
	float                                              DamageRadius;                                     		// 0x0208 (0x0004) [0x0000000000000000]              
	float                                              Damage;                                           		// 0x020C (0x0004) [0x0000000000000000]              
	float                                              MomentumTransfer;                                 		// 0x0210 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73576 ];

		return pClassPointer;
	};

	void PerformLandingDamage ( );
	void MoveSameTeamPawn ( class ATrPawn* PawnToMove );
	void DeliveryPodLanded ( );
	void InitTimer ( );
	void PostBeginPlay ( );
	bool SpawnCrashLandInfo ( class AController* Initializer, float CrashLandTime, struct FVector CrashLandPoint, struct FVector CrashLandNormal, class UClass* ItemInDeliveryPod );
};

UClass* ATrCallIn_CrashLandInfo::pClassPointer = NULL;

// Class TribesGame.TrCallIn_OpenDeliveryPod
// 0x0010 (0x01EC - 0x01DC)
class ATrCallIn_OpenDeliveryPod : public AActor
{
public:
	float                                              TimeToDelete;                                     		// 0x01DC (0x0004) [0x0000000000000000]              
	float                                              TimeToFade;                                       		// 0x01E0 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceTimeVarying*                PodFadeMaterial;                                  		// 0x01E4 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      m_Mesh;                                           		// 0x01E8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73636 ];

		return pClassPointer;
	};

	void RemovePod ( );
	void PostBeginPlay ( );
};

UClass* ATrCallIn_OpenDeliveryPod::pClassPointer = NULL;

// Class TribesGame.TrCallIn_Projectile
// 0x0038 (0x0258 - 0x0220)
class ATrCallIn_Projectile : public ATrCallIn
{
public:
	class UClass*                                      ProjectileFireClass;                              		// 0x0220 (0x0004) [0x0000000000000000]              
	float                                              CallRadius;                                       		// 0x0224 (0x0004) [0x0000000000000000]              
	float                                              FireTimeLength;                                   		// 0x0228 (0x0004) [0x0000000000000000]              
	int                                                NumberOfProjectiles;                              		// 0x022C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   AreaWarningSound;                                 		// 0x0230 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   TargetParticleSound;                              		// 0x0234 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             TargetParticleSystem;                             		// 0x0238 (0x0004) [0x0000000000000000]              
	int                                                m_FiredProjectiles;                               		// 0x023C (0x0004) [0x0000000000000000]              
	struct FVector                                     m_SavedTargetLocation;                            		// 0x0240 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_SavedTargetNormal;                              		// 0x024C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73664 ];

		return pClassPointer;
	};

	void FireProjectile ( );
	bool FireCompletedCallIn ( int CallInOffs, struct FVector TargetLocation, struct FVector TargetNormal );
};

UClass* ATrCallIn_Projectile::pClassPointer = NULL;

// Class TribesGame.TrProj_CallInBase
// 0x000C (0x0338 - 0x032C)
class ATrProj_CallInBase : public ATrProjectile
{
public:
	struct FVector                                     r_TargetLocation;                                 		// 0x032C (0x000C) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73675 ];

		return pClassPointer;
	};

	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float VisibleCullDistance, float HiddenCullDistance );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ATrProj_CallInBase::pClassPointer = NULL;

// Class TribesGame.TrEmitterSpawnable
// 0x0000 (0x01EC - 0x01EC)
class ATrEmitterSpawnable : public AEmitterSpawnable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73678 ];

		return pClassPointer;
	};

};

UClass* ATrEmitterSpawnable::pClassPointer = NULL;

// Class TribesGame.TrCallIn_OrbitalStrike
// 0x0000 (0x0258 - 0x0258)
class ATrCallIn_OrbitalStrike : public ATrCallIn_Projectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73697 ];

		return pClassPointer;
	};

};

UClass* ATrCallIn_OrbitalStrike::pClassPointer = NULL;

// Class TribesGame.TrProj_OrbitalStrike
// 0x0000 (0x0338 - 0x0338)
class ATrProj_OrbitalStrike : public ATrProj_CallInBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73699 ];

		return pClassPointer;
	};

	void SpawnFlightEffects ( );
};

UClass* ATrProj_OrbitalStrike::pClassPointer = NULL;

// Class TribesGame.TrCallIn_Support
// 0x0008 (0x0228 - 0x0220)
class ATrCallIn_Support : public ATrCallIn
{
public:
	class UClass*                                      ItemInDeliveryPod;                                		// 0x0220 (0x0004) [0x0000000000000000]              
	int                                                MaxDeployedLimit;                                 		// 0x0224 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73707 ];

		return pClassPointer;
	};

	void DestroyOverLimit ( );
	bool FireCompletedCallIn ( int CallInOffs, struct FVector TargetLocation, struct FVector TargetNormal );
};

UClass* ATrCallIn_Support::pClassPointer = NULL;

// Class TribesGame.TrCallIn_SupportInventory
// 0x0000 (0x0228 - 0x0228)
class ATrCallIn_SupportInventory : public ATrCallIn_Support
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73722 ];

		return pClassPointer;
	};

};

UClass* ATrCallIn_SupportInventory::pClassPointer = NULL;

// Class TribesGame.TrCallIn_TacticalStrike
// 0x0000 (0x0258 - 0x0258)
class ATrCallIn_TacticalStrike : public ATrCallIn_Projectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73743 ];

		return pClassPointer;
	};

};

UClass* ATrCallIn_TacticalStrike::pClassPointer = NULL;

// Class TribesGame.TrProj_TacticalStrike
// 0x0000 (0x0338 - 0x0338)
class ATrProj_TacticalStrike : public ATrProj_CallInBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73745 ];

		return pClassPointer;
	};

};

UClass* ATrProj_TacticalStrike::pClassPointer = NULL;

// Class TribesGame.TrCamera_BloodEagle
// 0x0000 (0x0589 - 0x0589)
class ATrCamera_BloodEagle : public ATrCamera_SpectatorBookmark
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73824 ];

		return pClassPointer;
	};

};

UClass* ATrCamera_BloodEagle::pClassPointer = NULL;

// Class TribesGame.TrCamera_DiamondSword
// 0x0000 (0x0589 - 0x0589)
class ATrCamera_DiamondSword : public ATrCamera_SpectatorBookmark
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73826 ];

		return pClassPointer;
	};

};

UClass* ATrCamera_DiamondSword::pClassPointer = NULL;

// Class TribesGame.TrCamera_Neutral
// 0x0000 (0x02D0 - 0x02D0)
class ATrCamera_Neutral : public ACameraActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73828 ];

		return pClassPointer;
	};

};

UClass* ATrCamera_Neutral::pClassPointer = NULL;

// Class TribesGame.TrCamera_Rabbit
// 0x0000 (0x02D0 - 0x02D0)
class ATrCamera_Rabbit : public ACameraActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73830 ];

		return pClassPointer;
	};

};

UClass* ATrCamera_Rabbit::pClassPointer = NULL;

// Class TribesGame.TrCamera_Spectator
// 0x0028 (0x0468 - 0x0440)
class ATrCamera_Spectator : public ACamera
{
public:
	float                                              m_fInterpedCameraDistance;                        		// 0x0440 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCameraDistanceInterpSpeed;                     		// 0x0444 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPawnZOffset;                                   		// 0x0448 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMaxSpeed;                                      		// 0x044C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_MaxCamDistance;                                 		// 0x0450 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_MinCamDistance;                                 		// 0x0454 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMaxFixedViewCamDistance;                       		// 0x0458 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bViewCameraBookmarks : 1;                       		// 0x045C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bViewGenerators : 1;                            		// 0x045C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bViewFlagStands : 1;                            		// 0x045C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bViewFlags : 1;                                 		// 0x045C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bViewVehicles : 1;                              		// 0x045C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bFastestPlayer : 1;                             		// 0x045C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bViewTargetEyes : 1;                            		// 0x045C (0x0004) [0x0000000000002001] [0x00000040] ( CPF_Edit | CPF_Transient )
	unsigned long                                      m_bViewFixed3p : 1;                               		// 0x045C (0x0004) [0x0000000000002001] [0x00000080] ( CPF_Edit | CPF_Transient )
	class ATrPawn*                                     m_HiddenViewTargetPawn;                           		// 0x0460 (0x0004) [0x0000000000000000]              
	class ATrFlagBase*                                 m_HiddenFlag;                                     		// 0x0464 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73832 ];

		return pClassPointer;
	};

	void SetFOV ( float NewFOV );
	void ShowHiddenPawn ( );
	void UpdateViewTarget ( float DeltaTime, struct FTViewTarget* OutVT );
	void eventUpdateCamera ( float DeltaTime );
	void InitializeFor ( class APlayerController* PC );
};

UClass* ATrCamera_Spectator::pClassPointer = NULL;

// Class TribesGame.TrChatConsole
// 0x0054 (0x021C - 0x01C8)
class UTrChatConsole : public UUTConsole
{
public:
	struct FString                                     ChannelStr;                                       		// 0x01C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FAutoCompleteCommand >              TribesAutoCompleteList;                           		// 0x01D4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                LastFriendCount;                                  		// 0x01E0 (0x0004) [0x0000000000000000]              
	struct FString                                     SlashHelp;                                        		// 0x01E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TellHelp;                                         		// 0x01F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TabHelp;                                          		// 0x01FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EscHelp;                                          		// 0x0208 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              m_fTypingTime;                                    		// 0x0214 (0x0004) [0x0000000000000000]              
	class ATrPlayerController*                         m_TrPC;                                           		// 0x0218 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73878 ];

		return pClassPointer;
	};

	void AddOnlineFriendHelp ( );
	bool InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	void PostRender_Console ( class UCanvas* Canvas );
	bool IsPlayerTell ( );
	bool IsSlashCommand ( );
	void StartTyping ( struct FString Text );
	void StartTypingChat ( struct FString Text, unsigned long bFullConsole, struct FString startText );
	void ConsoleCommand ( struct FString Command );
	void GetPlayerController ( );
	void Initialized ( );
};

UClass* UTrChatConsole::pClassPointer = NULL;

// Class TribesGame.TrGameViewportClient
// 0x0004 (0x019C - 0x0198)
class UTrGameViewportClient : public UUTGameViewportClient
{
public:
	class UTrChatConsole*                              ChatConsole;                                      		// 0x0198 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73970 ];

		return pClassPointer;
	};

	void eventPostRender ( class UCanvas* Canvas );
	bool eventInit ( struct FString* OutError );
};

UClass* UTrGameViewportClient::pClassPointer = NULL;

// Class TribesGame.TrChatInput
// 0x002C (0x0098 - 0x006C)
class UTrChatInput : public UInteraction
{
public:
	class ULocalPlayer*                                ConsoleTargetPlayer;                              		// 0x006C (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture_Black;                             		// 0x0070 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture_White;                             		// 0x0074 (0x0004) [0x0000000000000000]              
	struct FString                                     TypedStr;                                         		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TypedStrPos;                                      		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FString                                     ChannelStr;                                       		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bCaptureKeyInput : 1;                             		// 0x0094 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCtrl : 1;                                        		// 0x0094 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bEnableUI : 1;                                    		// 0x0094 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74004 ];

		return pClassPointer;
	};

	void AppendInputText ( struct FString Text );
	bool ProcessControlKey ( struct FName Key, unsigned char Event );
	void FlushPlayerInput ( );
	bool InputChar ( int ControllerId, struct FString Unicode );
	bool InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	void PostRender_Console ( class UCanvas* Canvas );
	void StartTyping ( struct FString Text );
	void ConsoleCommand ( struct FString Command );
	void SetCursorPos ( int Position );
	void SetInputText ( struct FString Text );
	void Initialized ( );
};

UClass* UTrChatInput::pClassPointer = NULL;

// Class TribesGame.TrCheatManager
// 0x0000 (0x0064 - 0x0064)
class UTrCheatManager : public UUTCheatManager
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74074 ];

		return pClassPointer;
	};

	class AWeapon* GiveWeapon ( struct FString WeaponClassStr );
};

UClass* UTrCheatManager::pClassPointer = NULL;

// Class TribesGame.TrCollisionProxy_Flag
// 0x0004 (0x01F0 - 0x01EC)
class ATrCollisionProxy_Flag : public ATrCollisionProxy
{
public:
	int                                                m_nFlagReachLevel;                                		// 0x01EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74135 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ATrCollisionProxy_Flag::pClassPointer = NULL;

// Class TribesGame.TrCollisionProxy_FlagLevel1
// 0x0000 (0x01F0 - 0x01F0)
class ATrCollisionProxy_FlagLevel1 : public ATrCollisionProxy_Flag
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74150 ];

		return pClassPointer;
	};

};

UClass* ATrCollisionProxy_FlagLevel1::pClassPointer = NULL;

// Class TribesGame.TrCollisionProxy_FlagLevel2
// 0x0000 (0x01F0 - 0x01F0)
class ATrCollisionProxy_FlagLevel2 : public ATrCollisionProxy_Flag
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74153 ];

		return pClassPointer;
	};

};

UClass* ATrCollisionProxy_FlagLevel2::pClassPointer = NULL;

// Class TribesGame.TrCollisionProxy_FlagLevel3
// 0x0000 (0x01F0 - 0x01F0)
class ATrCollisionProxy_FlagLevel3 : public ATrCollisionProxy_Flag
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74156 ];

		return pClassPointer;
	};

};

UClass* ATrCollisionProxy_FlagLevel3::pClassPointer = NULL;

// Class TribesGame.TrCollisionProxy_Pickup
// 0x0000 (0x01EC - 0x01EC)
class ATrCollisionProxy_Pickup : public ATrCollisionProxy
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74175 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ATrCollisionProxy_Pickup::pClassPointer = NULL;

// Class TribesGame.TrCollisionProxy_Rage
// 0x0000 (0x01EC - 0x01EC)
class ATrCollisionProxy_Rage : public ATrCollisionProxy
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74205 ];

		return pClassPointer;
	};

	void ForceProximityScan ( float Radius );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ATrCollisionProxy_Rage::pClassPointer = NULL;

// Class TribesGame.TrConduitVolume
// 0x0000 (0x024A - 0x024A)
class ATrConduitVolume : public ATrPhysicsVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74221 ];

		return pClassPointer;
	};

	void eventPawnLeavingVolume ( class APawn* Other );
	void eventPawnEnteredVolume ( class APawn* Other );
};

UClass* ATrConduitVolume::pClassPointer = NULL;

// Class TribesGame.TrWeatherVolume
// 0x0010 (0x0218 - 0x0208)
class ATrWeatherVolume : public AVolume
{
public:
	TArray< class AEmitter* >                          m_WeatherEmitters;                                		// 0x0208 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_DeactivatePawnCentricWeatherOnEnter : 1;        		// 0x0214 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74239 ];

		return pClassPointer;
	};

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ATrWeatherVolume::pClassPointer = NULL;

// Class TribesGame.TrMusicManager
// 0x0040 (0x021C - 0x01DC)
class ATrMusicManager : public AInfo
{
public:
	class ATrPlayerController*                         m_PlayerOwner;                                    		// 0x01DC (0x0004) [0x0000000000000000]              
	float                                              m_fMusicVolume;                                   		// 0x01E0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              m_fStingerVolumeMultiplier;                       		// 0x01E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      m_CurrentState;                                   		// 0x01E8 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_PendingState;                                   		// 0x01E9 (0x0001) [0x0000000000000000]              
	class UAudioComponent*                             m_CurrentTrack;                                   		// 0x01EC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_MusicTracks[ 0x9 ];                             		// 0x01F0 (0x0024) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_CTFTeamScores[ 0x2 ];                           		// 0x0214 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75719 ];

		return pClassPointer;
	};

	void PlayerScoredFlag ( );
	void SetCurrentState ( unsigned char NewState );
	void SetPendingState ( unsigned char NewState );
	void MusicEvent ( int NewEventIndex );
	void Tick ( float DeltaTime );
	void SetStateBasedOnGameState ( );
	void StartMusic ( );
	class UAudioComponent* CreateNewTrack ( class USoundCue* MusicCue );
	void eventPostBeginPlay ( );
};

UClass* ATrMusicManager::pClassPointer = NULL;

// Class TribesGame.TrGame_TrTraining
// 0x0000 (0x05B0 - 0x05B0)
class ATrGame_TrTraining : public ATrGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75896 ];

		return pClassPointer;
	};

	void PlayEndOfMatchMessage ( );
	void AutoEndGame ( );
	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	unsigned char PickTeamForMigration ( class AController* C );
	unsigned char PickTeam ( unsigned char Num, class AController* C );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
};

UClass* ATrGame_TrTraining::pClassPointer = NULL;

// Class TribesGame.TrWarningMessage
// 0x0060 (0x00C4 - 0x0064)
class UTrWarningMessage : public UUTLocalMessage
{
public:
	struct FString                                     FumbledFlag;                                      		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SaberLauncherNeedsTargetToFire;                   		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissileLockedOnToYou;                             		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissileTargetingYou;                              		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissileIntercepted;                               		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SuicidePenalty;                                   		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RequiresCreditsToFire;                            		// 0x00AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RequiresPowerToFire;                              		// 0x00B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75918 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrWarningMessage::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_Sentinel
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_Sentinel : public UTrFamilyInfo_Light
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76014 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_Sentinel::pClassPointer = NULL;

// Class TribesGame.TrDeployableMessage
// 0x0048 (0x00AC - 0x0064)
class UTrDeployableMessage : public UUTLocalMessage
{
public:
	struct FString                                     DeployableHologramTooCloseToEnemyBase;            		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeployableHologramTooCloseToAnotherDeployable;    		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeployableHologramOnlyOutside;                    		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeployableHologramInvalidDeploySpot;              		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeployableAmmoRemaining;                          		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeployableAmmoDepleted;                           		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76032 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrDeployableMessage::pClassPointer = NULL;

// Class TribesGame.TrGameMessage
// 0x0038 (0x009C - 0x0064)
class UTrGameMessage : public UUTLocalMessage
{
public:
	struct FString                                     YouAreOnBloodEagleMessage;                        		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     YouAreOnDiamondSwordMessage;                      		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OvertimeNotification;                             		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WaitingForPlayers;                                		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class USoundCue*                                   m_sMatchStartBloodEagle;                          		// 0x0094 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_sMatchStartDiamondSword;                        		// 0x0098 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76067 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrGameMessage::pClassPointer = NULL;

// Class TribesGame.TrEmitCameraEffect_Snow
// 0x0000 (0x0204 - 0x0204)
class ATrEmitCameraEffect_Snow : public ATrEmitCameraEffect_Speed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76132 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};

UClass* ATrEmitCameraEffect_Snow::pClassPointer = NULL;

// Class TribesGame.TrDevice_Blink
// 0x0028 (0x08A0 - 0x0878)
class ATrDevice_Blink : public ATrDevice_Pack
{
public:
	struct FVector                                     m_vBlinkImpulse;                                  		// 0x0878 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMinZImpulse;                                   		// 0x0884 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPowerPoolCost;                                 		// 0x0888 (0x0004) [0x0000000000000000]              
	float                                              m_fCooldownTime;                                  		// 0x088C (0x0004) [0x0000000000000000]              
	float                                              m_fLastActivationTimestamp;                       		// 0x0890 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSpeedCapThreshold;                             		// 0x0894 (0x0004) [0x0000000000000000]              
	float                                              m_fSpeedCapThresholdStart;                        		// 0x0898 (0x0004) [0x0000000000000000]              
	float                                              m_fSpeedCapPct;                                   		// 0x089C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76167 ];

		return pClassPointer;
	};

	struct FVector GetBlinkImpulse ( );
	void OnBlink ( float PercentEffectiveness );
	void ToggleActivate ( );
};

UClass* ATrDevice_Blink::pClassPointer = NULL;

// Class TribesGame.TrPaperDollTransient
// 0x000C (0x0398 - 0x038C)
class ATrPaperDollTransient : public ATrPaperDoll
{
public:
	class UMaterialInstanceConstant*                   m_BackdropMIC;                                    		// 0x038C (0x0004) [0x0000000000000000]              
	float                                              m_fBackdropFadeTime;                              		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fBackdropFadeRemainingTime;                     		// 0x0394 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76434 ];

		return pClassPointer;
	};

	void SetPosition ( struct FVector ViewPos, struct FRotator ViewRot );
	void eventTick ( float DeltaTime );
	void FadeInBackdrop ( );
	void eventPostBeginPlay ( );
};

UClass* ATrPaperDollTransient::pClassPointer = NULL;

// Class TribesGame.TrRabbitScoreMessage
// 0x0070 (0x00D4 - 0x0064)
class UTrRabbitScoreMessage : public UUTLocalMessage
{
public:
	struct FString                                     YouScoreFlagTouch;                                		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OtherScoreFlagTouch;                              		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     YouAreNewLeader;                                  		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OtherIsNewLeader;                                 		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     YouDroppedFlag;                                   		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OtherDroppedFlag;                                 		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KillTheRabbit;                                    		// 0x00AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GetToTheFlag;                                     		// 0x00B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class USoundCue*                                   m_sYouAreNewLeadeCue;                             		// 0x00C4 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_sOtherIsNewLeadeCue;                            		// 0x00C8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_sYouPickedUpFlag;                               		// 0x00CC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_sFlagReturnedToStand;                           		// 0x00D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76603 ];

		return pClassPointer;
	};

	unsigned char AnnouncementLevel ( unsigned char MessageIndex );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrRabbitScoreMessage::pClassPointer = NULL;

// Class TribesGame.TrDeployable_MotionSensor
// 0x0050 (0x0654 - 0x0604)
class ATrDeployable_MotionSensor : public ATrDeployable_Sensor
{
public:
	TArray< struct FMotionSensorEnemyInfo >            m_EnemyPawnsInRange;                              		// 0x0604 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UAudioComponent*                             m_AlarmSound;                                     		// 0x0610 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_fMotionSenseExpireTime;                         		// 0x0614 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeBetweenAlarms;                             		// 0x0618 (0x0004) [0x0000000000000000]              
	float                                              m_fLastAlarmTimestamp;                            		// 0x061C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDrawHUDAlarm : 1;                              		// 0x0620 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              m_fHUDAlarmTime;                                  		// 0x0624 (0x0004) [0x0000000000000000]              
	float                                              m_IconAlpha;                                      		// 0x0628 (0x0004) [0x0000000000000000]              
	struct FVector                                     LastScreenLoc;                                    		// 0x062C (0x000C) [0x0000000000000000]              
	struct FVector                                     LastCameraDir;                                    		// 0x0638 (0x000C) [0x0000000000000000]              
	struct FVector                                     LastCameraPos;                                    		// 0x0644 (0x000C) [0x0000000000000000]              
	class UTexture2D*                                  m_AlarmIcon;                                      		// 0x0650 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76739 ];

		return pClassPointer;
	};

	class UTexture2D* GetMarker ( );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void HideHUDAlarm ( );
	void TriggerHUDAlarm ( );
	void PlayAlarm ( );
	void ModifyDetectedPawn ( class APawn* DetectedPawn, unsigned long detected );
	bool CanSetOffAlarm ( class ATrPawn* P );
	void UpdateInRangeEnemyPawns ( );
	void OnPawnExitedCollisionProxy ( class APawn* P );
	void OnPawnDetectedByCollisionProxy ( class APawn* P );
	void DeployComplete ( );
};

UClass* ATrDeployable_MotionSensor::pClassPointer = NULL;

// Class TribesGame.TrSensorMessage
// 0x0010 (0x0074 - 0x0064)
class UTrSensorMessage : public UUTLocalMessage
{
public:
	struct FString                                     MotionSensorDetectedEnemy;                        		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class USoundCue*                                   MotionSensorAlarmSound;                           		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76740 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrSensorMessage::pClassPointer = NULL;

// Class TribesGame.TrGame_TrDaD
// 0x0000 (0x05B0 - 0x05B0)
class ATrGame_TrDaD : public ATrGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77115 ];

		return pClassPointer;
	};

	void OnGeneratorPowerChange ( class ATrPowerGenerator* G );
	int GetGameTypeId ( );
	void RestartPlayer ( class AController* NewPlayer );
	void SendMatchCountdown ( int Seconds );
	void OnCoreBlownUp ( unsigned char Team );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void GotoPendingRoundStartTimer ( );
	int DetermineWinningTeam ( );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void ScoreKill ( class AController* Killer, class AController* Other );
	void ResetRound ( );
	void RespawnPlayers ( );
	void ResetLevel ( );
	void PostBeginPlay ( );
	void Logout ( class AController* Exiting );
	void SetTeam ( class AController* Other, class AUTTeamInfo* NewTeam, unsigned long bNewTeam );
	void ResetScores ( );
};

UClass* ATrGame_TrDaD::pClassPointer = NULL;

// Class TribesGame.TrSeqAct_GiveCredits
// 0x0004 (0x00EC - 0x00E8)
class UTrSeqAct_GiveCredits : public USequenceAction
{
public:
	int                                                Amount;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77308 ];

		return pClassPointer;
	};

};

UClass* UTrSeqAct_GiveCredits::pClassPointer = NULL;

// Class TribesGame.TrSeqAct_GiveAccolade
// 0x0004 (0x00EC - 0x00E8)
class UTrSeqAct_GiveAccolade : public USequenceAction
{
public:
	class UClass*                                      AccoladeType;                                     		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77312 ];

		return pClassPointer;
	};

};

UClass* UTrSeqAct_GiveAccolade::pClassPointer = NULL;

// Class TribesGame.TrSeqAct_PlayVGSCommand
// 0x0010 (0x00F8 - 0x00E8)
class UTrSeqAct_PlayVGSCommand : public USequenceAction
{
public:
	unsigned char                                      VGSCommand;                                       		// 0x00E8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     CommandInstigatorName;                            		// 0x00EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77317 ];

		return pClassPointer;
	};

};

UClass* UTrSeqAct_PlayVGSCommand::pClassPointer = NULL;

// Class TribesGame.TrSeqAct_RefreshInventory
// 0x0000 (0x00E8 - 0x00E8)
class UTrSeqAct_RefreshInventory : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77323 ];

		return pClassPointer;
	};

};

UClass* UTrSeqAct_RefreshInventory::pClassPointer = NULL;

// Class TribesGame.TrSavedMove
// 0x0005 (0x00ED - 0x00E8)
class UTrSavedMove : public USavedMove
{
public:
	unsigned long                                      m_bAirSpeedBoundToGroundSpeed : 1;                		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bPressingJetpack : 1;                           		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bJumpJet : 1;                                   		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bBlink : 1;                                     		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned char                                      m_CurrentDecelerationFactor;                      		// 0x00EC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77455 ];

		return pClassPointer;
	};

	struct FString GetDebugString ( );
	unsigned char SetFlags ( unsigned char Flags, class APlayerController* PC );
	unsigned char CompressedFlags ( );
	void SetMoveFor ( class APlayerController* P, float DeltaTime, struct FVector newAccel, unsigned char InDoubleClick );
	bool CanCombineWith ( class USavedMove* NewMove, class APawn* inPawn, float MaxDelta );
	void PostUpdate ( class APlayerController* P );
	void Clear ( );
};

UClass* UTrSavedMove::pClassPointer = NULL;

// Class TribesGame.TrConsolePlayerController
// 0x001C (0x0D84 - 0x0D68)
class ATrConsolePlayerController : public ATrPlayerController
{
public:
	unsigned long                                      bTargetAdhesionEnabled : 1;                       		// 0x0D68 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDebugTargetAdhesion : 1;                         		// 0x0D68 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	TArray< struct ATrConsolePlayerController_FProfileSettingToUE3BindingDatum > ProfileSettingToUE3BindingMapping360;             		// 0x0D6C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct ATrConsolePlayerController_FProfileSettingToUE3BindingDatum > ProfileSettingToUE3BindingMappingPS3;             		// 0x0D78 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77458 ];

		return pClassPointer;
	};

	void ResetPlayerMovementInput ( );
	void NextWeapon ( );
	void PrevWeapon ( );
	void ClientRestart ( class APawn* NewPawn );
	void ClientSmartUse ( );
	bool PerformedUseAction ( );
	float AimHelpModifier ( );
	bool AimingHelp ( unsigned long bInstantHit );
	void UpdateRotation ( float DeltaTime );
};

UClass* ATrConsolePlayerController::pClassPointer = NULL;

// Class TribesGame.TrConsolePlayerInput
// 0x00C4 (0x028C - 0x01C8)
class UTrConsolePlayerInput : public UTrPlayerInput
{
public:
	float                                              SensitivityMultiplier;                            		// 0x01C8 (0x0004) [0x0000000000000000]              
	float                                              TurningAccelerationMultiplier;                    		// 0x01CC (0x0004) [0x0000000000000000]              
	unsigned long                                      bAutoCenterPitch : 1;                             		// 0x01D0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bAutoCenterVehiclePitch : 1;                      		// 0x01D0 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bViewAccelerationEnabled : 1;                     		// 0x01D0 (0x0004) [0x0000000000004001] [0x00000004] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDebugViewAcceleration : 1;                       		// 0x01D0 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bTargetFrictionEnabled : 1;                       		// 0x01D0 (0x0004) [0x0000000000004001] [0x00000010] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDebugTargetFriction : 1;                         		// 0x01D0 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bAppliedTargetFriction : 1;                       		// 0x01D0 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bIsLookingUp : 1;                                 		// 0x01D0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bIsLookingDown : 1;                               		// 0x01D0 (0x0004) [0x0000000000000000] [0x00000100] 
	float                                              LastTurnTime;                                     		// 0x01D4 (0x0004) [0x0000000000000000]              
	float                                              AutoCenterDelay;                                  		// 0x01D8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              AutoVehicleCenterSpeed;                           		// 0x01DC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              SlowTurnScaling;                                  		// 0x01E0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              ViewAccel_YawThreshold;                           		// 0x01E4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ViewAccel_DiagonalThreshold;                      		// 0x01E8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ViewAccel_BaseMultiplier;                         		// 0x01EC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ViewAccel_CurrMutliplier;                         		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ViewAccel_TimeToHoldBeforeFastAcceleration;       		// 0x01F4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ViewAccel_TimeHeld;                               		// 0x01F8 (0x0004) [0x0000000000000000]              
	float                                              ViewAccel_Twitchy;                                		// 0x01FC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Dodge_Threshold;                                  		// 0x0200 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class APawn*                                       LastFrictionTarget;                               		// 0x0204 (0x0004) [0x0000000000000000]              
	float                                              LastFrictionTargetTime;                           		// 0x0208 (0x0004) [0x0000000000000000]              
	float                                              LastDistToTarget;                                 		// 0x020C (0x0004) [0x0000000000000000]              
	float                                              LastDistMultiplier;                               		// 0x0210 (0x0004) [0x0000000000000000]              
	float                                              LastDistFromAimZ;                                 		// 0x0214 (0x0004) [0x0000000000000000]              
	float                                              LastDistFromAimY;                                 		// 0x0218 (0x0004) [0x0000000000000000]              
	float                                              LastFrictionMultiplier;                           		// 0x021C (0x0004) [0x0000000000000000]              
	float                                              LastAdhesionAmtY;                                 		// 0x0220 (0x0004) [0x0000000000000000]              
	float                                              LastAdhesionAmtZ;                                 		// 0x0224 (0x0004) [0x0000000000000000]              
	float                                              LastTargetRadius;                                 		// 0x0228 (0x0004) [0x0000000000000000]              
	float                                              LastTargetHeight;                                 		// 0x022C (0x0004) [0x0000000000000000]              
	float                                              LastDistFromAimYa;                                		// 0x0230 (0x0004) [0x0000000000000000]              
	float                                              LastDistFromAimZa;                                		// 0x0234 (0x0004) [0x0000000000000000]              
	float                                              LastAdjustY;                                      		// 0x0238 (0x0004) [0x0000000000000000]              
	float                                              LastAdjustZ;                                      		// 0x023C (0x0004) [0x0000000000000000]              
	struct FVector                                     LastCamLoc;                                       		// 0x0240 (0x000C) [0x0000000000000000]              
	struct FRotator                                    LastDeltaRot;                                     		// 0x024C (0x000C) [0x0000000000000000]              
	float                                              LeftThumbStickDeadZoneThreshold;                  		// 0x0258 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RightThumbStickDeadZoneThreshold;                 		// 0x025C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MagicScaleForSensitivityMiddle;                   		// 0x0260 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MagicScaleForSensitivityEdge;                     		// 0x0264 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ViewAccel_RampSpeed;                              		// 0x0268 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ViewAccel_MaxTurnSpeed;                           		// 0x026C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ViewAccel_PitchThreshold;                         		// 0x0270 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ViewAccel_LookingUpOrDownBoundary;                		// 0x0274 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ViewAccel_BackToCenterBoundary;                   		// 0x0278 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ViewAccel_BackToCenterSpeed;                      		// 0x027C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AutoPitchCenterSpeed;                             		// 0x0280 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AutoPitchStopAdjustingValue;                      		// 0x0284 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              HoverBoardPitchMultiplier;                        		// 0x0288 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77473 ];

		return pClassPointer;
	};

	unsigned char CheckForDoubleClickMove ( float DeltaTime );
	void ApplyTargetFriction ( float DeltaTime, class AUTWeapon* W );
	void AdjustMouseSensitivity ( float FOVScale );
	void ApplyTargetAdhesion ( float DeltaTime, class AUTWeapon* W, int* out_YawRot, int* out_PitchRot );
	void ApplyViewAcceleration ( float DeltaTime );
	void ApplyViewAutoVehiclePitchCentering ( float DeltaTime );
	void ApplyViewAutoPitchCentering ( float DeltaTime );
	void PreProcessInput ( float DeltaTime );
	void eventPostBeginPlay ( );
};

UClass* UTrConsolePlayerInput::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_Root
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_Root : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77580 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_Root::pClassPointer = NULL;

// Class TribesGame.TrGame_TrCTFBlitz
// 0x002C (0x05E8 - 0x05BC)
class ATrGame_TrCTFBlitz : public ATrGame_TRCTF
{
public:
	class ATrCTFBase_BloodEagle*                       BloodEagleFlagStands[ 0x5 ];                      		// 0x05BC (0x0014) [0x0000000000000000]              
	class ATrCTFBase_DiamondSword*                     DiamondSwordFlagStands[ 0x5 ];                    		// 0x05D0 (0x0014) [0x0000000000000000]              
	unsigned long                                      m_bRotateBothFlagsOnCapture : 1;                  		// 0x05E4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77829 ];

		return pClassPointer;
	};

	void RotateFlag ( class ATrFlagBase* theFlag );
	void ScoreFlag ( class AController* Scorer, class ATrFlagBase* theFlag );
	void RegisterFlagBase ( class ATrCTFBase* FlagBase );
	void ApplyServerSettings ( );
};

UClass* ATrGame_TrCTFBlitz::pClassPointer = NULL;

// Class TribesGame.TrCTFBase_BloodEagle
// 0x0000 (0x046C - 0x046C)
class ATrCTFBase_BloodEagle : public ATrCTFBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77851 ];

		return pClassPointer;
	};

	struct FString GetSpectatorName ( );
};

UClass* ATrCTFBase_BloodEagle::pClassPointer = NULL;

// Class TribesGame.TrFlagCTF_BloodEagle
// 0x0000 (0x03B0 - 0x03B0)
class ATrFlagCTF_BloodEagle : public ATrFlagCTF
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77858 ];

		return pClassPointer;
	};

	struct FString GetSpectatorName ( );
};

UClass* ATrFlagCTF_BloodEagle::pClassPointer = NULL;

// Class TribesGame.TrCTFBase_DiamondSword
// 0x0000 (0x046C - 0x046C)
class ATrCTFBase_DiamondSword : public ATrCTFBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77859 ];

		return pClassPointer;
	};

	struct FString GetSpectatorName ( );
};

UClass* ATrCTFBase_DiamondSword::pClassPointer = NULL;

// Class TribesGame.TrFlagCTF_DiamondSword
// 0x0000 (0x03B0 - 0x03B0)
class ATrFlagCTF_DiamondSword : public ATrFlagCTF
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77866 ];

		return pClassPointer;
	};

	struct FString GetSpectatorName ( );
};

UClass* ATrFlagCTF_DiamondSword::pClassPointer = NULL;

// Class TribesGame.TrCTFHUDMessage
// 0x0038 (0x009C - 0x0064)
class UTrCTFHUDMessage : public UUTLocalMessage
{
public:
	struct FString                                     YouHaveFlagString;                                		// 0x0064 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnemyHasFlagString;                               		// 0x0070 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BothFlagsString;                                  		// 0x007C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     YouHaveFlagReminderString;                        		// 0x0088 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      RedColor;                                         		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      YellowColor;                                      		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77867 ];

		return pClassPointer;
	};

	bool AddAnnouncement ( class AUTAnnouncer* Announcer, int MessageIndex, class APlayerReplicationInfo* PRI, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FColor GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrCTFHUDMessage::pClassPointer = NULL;

// Class TribesGame.TrCTFMessage
// 0x0180 (0x01E4 - 0x0064)
class UTrCTFMessage : public UUTLocalMessage
{
public:
	class USoundNodeWave*                              m_ReturnSounds[ 0x3 ];                            		// 0x0064 (0x000C) [0x0000000000000000]              
	class USoundNodeWave*                              m_DroppedSounds[ 0x3 ];                           		// 0x0070 (0x000C) [0x0000000000000000]              
	class USoundNodeWave*                              m_TakenSounds[ 0x3 ];                             		// 0x007C (0x000C) [0x0000000000000000]              
	class USoundNodeWave*                              m_CapturedSounds[ 0x3 ];                          		// 0x0088 (0x000C) [0x0000000000000000]              
	class USoundCue*                                   m_sBEFlagTaken;                                   		// 0x0094 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_sBEFlagCaptured;                                		// 0x0098 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_sDSFlagTaken;                                   		// 0x009C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_sDSFlagCaptured;                                		// 0x00A0 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_sDSLostBEFlag;                                  		// 0x00A4 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_sBELostDSFlag;                                  		// 0x00A8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_sDSFlagSecured;                                 		// 0x00AC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_sBEFlagSecured;                                 		// 0x00B0 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_sDSTookBEFlag;                                  		// 0x00B4 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_sBETookDSFlag;                                  		// 0x00B8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_sDSCapturedBEFlag;                              		// 0x00BC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_sBECapturedDSFlag;                              		// 0x00C0 (0x0004) [0x0000000000000000]              
	struct FString                                     EnemyFlagTaken;                                   		// 0x00C4 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyFlagTaken;                                		// 0x00D0 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnemyFlagPickupAwayFromBase;                      		// 0x00DC (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyFlagPickupAwayFromBase;                   		// 0x00E8 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnemyFlagCaptured;                                		// 0x00F4 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyFlagCaptured;                             		// 0x0100 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnemyFlagReturned;                                		// 0x010C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyFlagReturned;                             		// 0x0118 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnemyFlagDropped;                                 		// 0x0124 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyFlagDropped;                              		// 0x0130 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnemyFlagAbandoned;                               		// 0x013C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyFlagAbandoned;                            		// 0x0148 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BloodEagleFlagTaken;                              		// 0x0154 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DiamondSwordFlagTaken;                            		// 0x0160 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BloodEagleFlagPickupAwayFromBase;                 		// 0x016C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DiamondSwordFlagPickupAwayFromBase;               		// 0x0178 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BloodEagleFlagCaptured;                           		// 0x0184 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DiamondSwordFlagCaptured;                         		// 0x0190 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BloodEagleFlagReturned;                           		// 0x019C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DiamondSwordFlagReturned;                         		// 0x01A8 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BloodEagleFlagDropped;                            		// 0x01B4 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DiamondSwordFlagDropped;                          		// 0x01C0 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BloodEagleFlagAbandoned;                          		// 0x01CC (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DiamondSwordFlagAbandoned;                        		// 0x01D8 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77901 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrCTFMessage::pClassPointer = NULL;

// Class TribesGame.TrCTFScoreMessage
// 0x00C8 (0x012C - 0x0064)
class UTrCTFScoreMessage : public UUTLocalMessage
{
public:
	class USoundNodeWave*                              TeamScoreSounds[ 0x8 ];                           		// 0x0064 (0x0020) [0x0000000000000000]              
	struct FString                                     PreScoreRed;                                      		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ScoreRed;                                         		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PreScoreBlue;                                     		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ScoreBlue;                                        		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PreScoreNone;                                     		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ScoreNone;                                        		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Team0Scored;                                      		// 0x00CC (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Team1Scored;                                      		// 0x00D8 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Team0LeadingBy2;                                  		// 0x00E4 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Team1LeadingBy2;                                  		// 0x00F0 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Team0JustGotAhead;                                		// 0x00FC (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Team1JustGotAhead;                                		// 0x0108 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerHattrick;                                   		// 0x0114 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TeamHigherScore;                                  		// 0x0120 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78488 ];

		return pClassPointer;
	};

	struct FColor GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	class USoundNodeWave* AnnouncementSound ( int MessageIndex, class UObject* OptionalObject, class APlayerController* PC );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	unsigned char AnnouncementLevel ( unsigned char MessageIndex );
};

UClass* UTrCTFScoreMessage::pClassPointer = NULL;

// Class TribesGame.TrDaDCapacitor
// 0x0038 (0x0588 - 0x0550)
class ATrDaDCapacitor : public ATrGameObjective
{
public:
	class UMaterialInstanceConstant*                   m_ShieldBarMIC;                                   		// 0x0550 (0x0004) [0x0000000000000000]              
	float                                              m_fShieldBarPlacementY;                           		// 0x0554 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ATrDaDCore*                                  m_Core;                                           		// 0x0558 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_CapacitorIndex;                                 		// 0x055C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0560 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FString                                     StringA;                                          		// 0x0564 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StringB;                                          		// 0x0570 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StringC;                                          		// 0x057C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79033 ];

		return pClassPointer;
	};

	class UTexture2D* GetMarker ( );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	struct FString GetScreenName ( class APlayerController* PC );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void Init ( class ATrDaDCore* Core, int Index );
};

UClass* ATrDaDCapacitor::pClassPointer = NULL;

// Class TribesGame.TrDaDCore
// 0x0028 (0x0578 - 0x0550)
class ATrDaDCore : public ATrGameObjective
{
public:
	class UMaterialInstanceConstant*                   m_ShieldBarMIC;                                   		// 0x0550 (0x0004) [0x0000000000000000]              
	float                                              m_fShieldBarPlacementY;                           		// 0x0554 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ATrDaDCapacitor*                             m_Capacitors[ 0x3 ];                              		// 0x0558 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class ATrDaDCoreShield*                            m_Shields[ 0x3 ];                                 		// 0x0564 (0x000C) [0x0000000004002000]              ( CPF_Transient | CPF_EditInline )
	class ATrDaDShell*                                 m_Shell;                                          		// 0x0570 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0574 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79040 ];

		return pClassPointer;
	};

	int GetCeilPctScore ( );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void OnCoreDestroyed ( );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void OnCapacitorRestored ( int CapacitorIndex );
	void OnCapacitorBlownUp ( int CapacitorIndex );
	void SpawnShield ( int ShieldIndex );
	void eventPostBeginPlay ( );
};

UClass* ATrDaDCore::pClassPointer = NULL;

// Class TribesGame.TrDaDCapacitor_BE
// 0x0000 (0x0588 - 0x0588)
class ATrDaDCapacitor_BE : public ATrDaDCapacitor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79101 ];

		return pClassPointer;
	};

};

UClass* ATrDaDCapacitor_BE::pClassPointer = NULL;

// Class TribesGame.TrDaDCapacitor_DS
// 0x0000 (0x0588 - 0x0588)
class ATrDaDCapacitor_DS : public ATrDaDCapacitor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79113 ];

		return pClassPointer;
	};

};

UClass* ATrDaDCapacitor_DS::pClassPointer = NULL;

// Class TribesGame.TrDaDShell
// 0x0010 (0x0250 - 0x0240)
class ATrDaDShell : public AInterpActor
{
public:
	class UStaticMeshComponent*                        c_ShieldMesh0;                                    		// 0x0240 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        c_ShieldMesh1;                                    		// 0x0244 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        c_ShieldMesh2;                                    		// 0x0248 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      r_bShield0Up : 1;                                 		// 0x024C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      r_bShield1Up : 1;                                 		// 0x024C (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      r_bShield2Up : 1;                                 		// 0x024C (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      r_bIsRotating : 1;                                		// 0x024C (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79127 ];

		return pClassPointer;
	};

	void StopRotation ( );
	void StartRotation ( );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ATrDaDShell::pClassPointer = NULL;

// Class TribesGame.TrDaDCoreShield
// 0x0020 (0x0234 - 0x0214)
class ATrDaDCoreShield : public ADynamicSMActor
{
public:
	unsigned char                                      m_DefenderTeamIndex;                              		// 0x0214 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMaterialInstanceConstant* >         m_MICs;                                           		// 0x0218 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UMaterial*                                   m_BaseMaterial;                                   		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ATrDaDCore*                                  m_Core;                                           		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nShieldIndex;                                   		// 0x022C (0x0004) [0x0000000000000000]              
	class ATrDaDShell*                                 m_Shell;                                          		// 0x0230 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79129 ];

		return pClassPointer;
	};

	void CreateMICs ( );
	void UpdateMaterialForPawn ( class ATrPawn* P );
	void EnableBlocking ( );
	void DisableBlocking ( );
	void eventPostBeginPlay ( );
	void Init ( int ShieldIndex, class ATrDaDCore* Core, class ATrDaDShell* Shell );
};

UClass* ATrDaDCoreShield::pClassPointer = NULL;

// Class TribesGame.TrDaDCore_BE
// 0x0000 (0x0578 - 0x0578)
class ATrDaDCore_BE : public ATrDaDCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79198 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};

UClass* ATrDaDCore_BE::pClassPointer = NULL;

// Class TribesGame.TrDaDCore_DS
// 0x0000 (0x0578 - 0x0578)
class ATrDaDCore_DS : public ATrDaDCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79213 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};

UClass* ATrDaDCore_DS::pClassPointer = NULL;

// Class TribesGame.TrDaDMessage
// 0x0054 (0x00B8 - 0x0064)
class UTrDaDMessage : public UUTLocalMessage
{
public:
	struct FString                                     TenTeamRespawnsRemain;                            		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FiveTeamRespawnsRemain;                           		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TeamRespawnsDepleted;                             		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     YouAreLastManStanding;                            		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Fight;                                            		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoRespawnsRemain;                                 		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CannotSwitchTeam;                                 		// 0x00AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79255 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrDaDMessage::pClassPointer = NULL;

// Class TribesGame.TrDaDStats
// 0x0048 (0x0084 - 0x003C)
class UTrDaDStats : public UObject
{
public:
	int                                                MyTeam;                                           		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                RemainingTime;                                    		// 0x0040 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsActive : 1;                                    		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bForcingUpdate : 1;                               		// 0x0044 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                TeamScore[ 0x2 ];                                 		// 0x0048 (0x0008) [0x0000000000000000]              
	int                                                RoundScore[ 0x2 ];                                		// 0x0050 (0x0008) [0x0000000000000000]              
	int                                                RoundNum;                                         		// 0x0058 (0x0004) [0x0000000000000000]              
	class UGfxTrHud*                                   m_MoviePlayer;                                    		// 0x005C (0x0004) [0x0000000000000000]              
	class ATrPlayerController*                         TrPC;                                             		// 0x0060 (0x0004) [0x0000000000000000]              
	struct FDaDScoreInfo                               FriendlyDaDScore;                                 		// 0x0064 (0x0010) [0x0000000000000000]              
	struct FDaDScoreInfo                               EnemyDaDScore;                                    		// 0x0074 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79293 ];

		return pClassPointer;
	};

	void ForceUpdate ( );
	struct FString FormatTime ( int Seconds );
	void UpdateTime ( class ATrGameReplicationInfo* GRI );
	void UpdateTeamScore ( class ATrGameReplicationInfo* GRI );
	void UpdateTeam ( );
	void Tick ( );
	void Hide ( );
	void Show ( );
	void Initialize ( class ATrPlayerController* PC, class UGfxTrHud* MP );
};

UClass* UTrDaDStats::pClassPointer = NULL;

// Class TribesGame.TrDataStore_GameSearch
// 0x0000 (0x00C0 - 0x00C0)
class UTrDataStore_GameSearch : public UUTDataStore_GameSearchDM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79339 ];

		return pClassPointer;
	};

};

UClass* UTrDataStore_GameSearch::pClassPointer = NULL;

// Class TribesGame.TrGameSearchCommon
// 0x0000 (0x00EC - 0x00EC)
class UTrGameSearchCommon : public UOnlineGameSearch
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79342 ];

		return pClassPointer;
	};

};

UClass* UTrGameSearchCommon::pClassPointer = NULL;

// Class TribesGame.TrGameSearchTrCTF
// 0x0000 (0x00EC - 0x00EC)
class UTrGameSearchTrCTF : public UTrGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79341 ];

		return pClassPointer;
	};

};

UClass* UTrGameSearchTrCTF::pClassPointer = NULL;

// Class TribesGame.TrGameSettingsCommon
// 0x001C (0x00D0 - 0x00B4)
class UTrGameSettingsCommon : public UUTGameSettingsCommon
{
public:
	unsigned long                                      Console : 1;                                      		// 0x00B4 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	struct FString                                     GameMode;                                         		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MapName;                                          		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79344 ];

		return pClassPointer;
	};

};

UClass* UTrGameSettingsCommon::pClassPointer = NULL;

// Class TribesGame.TrGameSettingsTrCTF
// 0x0000 (0x00D0 - 0x00D0)
class UTrGameSettingsTrCTF : public UTrGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79343 ];

		return pClassPointer;
	};

};

UClass* UTrGameSettingsTrCTF::pClassPointer = NULL;

// Class TribesGame.TrGameSearchTrTDM
// 0x0000 (0x00EC - 0x00EC)
class UTrGameSearchTrTDM : public UTrGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79345 ];

		return pClassPointer;
	};

};

UClass* UTrGameSearchTrTDM::pClassPointer = NULL;

// Class TribesGame.TrGameSettingsTrTDM
// 0x0000 (0x00D0 - 0x00D0)
class UTrGameSettingsTrTDM : public UTrGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79346 ];

		return pClassPointer;
	};

};

UClass* UTrGameSettingsTrTDM::pClassPointer = NULL;

// Class TribesGame.TrGameSearchTrRabbit
// 0x0000 (0x00EC - 0x00EC)
class UTrGameSearchTrRabbit : public UTrGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79347 ];

		return pClassPointer;
	};

};

UClass* UTrGameSearchTrRabbit::pClassPointer = NULL;

// Class TribesGame.TrGameSettingsTrRabbit
// 0x0000 (0x00D0 - 0x00D0)
class UTrGameSettingsTrRabbit : public UTrGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79348 ];

		return pClassPointer;
	};

};

UClass* UTrGameSettingsTrRabbit::pClassPointer = NULL;

// Class TribesGame.TrDataStore_GameSettings
// 0x0000 (0x008C - 0x008C)
class UTrDataStore_GameSettings : public UUIDataStore_OnlineGameSettings
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79349 ];

		return pClassPointer;
	};

};

UClass* UTrDataStore_GameSettings::pClassPointer = NULL;

// Class TribesGame.TrGameSettingsTrCTFConsole
// 0x0000 (0x00D0 - 0x00D0)
class UTrGameSettingsTrCTFConsole : public UTrGameSettingsTrCTF
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79351 ];

		return pClassPointer;
	};

};

UClass* UTrGameSettingsTrCTFConsole::pClassPointer = NULL;

// Class TribesGame.TrGameSettingsTrTDMConsole
// 0x0000 (0x00D0 - 0x00D0)
class UTrGameSettingsTrTDMConsole : public UTrGameSettingsTrTDM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79352 ];

		return pClassPointer;
	};

};

UClass* UTrGameSettingsTrTDMConsole::pClassPointer = NULL;

// Class TribesGame.TrGameSettingsTrRabbitConsole
// 0x0000 (0x00D0 - 0x00D0)
class UTrGameSettingsTrRabbitConsole : public UTrGameSettingsTrRabbit
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79353 ];

		return pClassPointer;
	};

};

UClass* UTrGameSettingsTrRabbitConsole::pClassPointer = NULL;

// Class TribesGame.TrDataStore_OnlineGameSearch
// 0x0004 (0x00AC - 0x00A8)
class UTrDataStore_OnlineGameSearch : public UUIDataStore_OnlineGameSearch
{
public:
	class UUDKUIDataProvider_ServerDetails*            ServerDetailsProvider;                            		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79354 ];

		return pClassPointer;
	};

	bool HasExistingSearchResults ( );
	bool HasOutstandingQueries ( unsigned long bRestrictCheckToSelf );
	void OnSearchComplete ( unsigned long bWasSuccessful );
	bool eventSubmitGameSearch ( unsigned char ControllerIndex, unsigned long bInvalidateExistingSearchResults );
	void eventInit ( );
};

UClass* UTrDataStore_OnlineGameSearch::pClassPointer = NULL;

// Class TribesGame.TrDeathMessage
// 0x001C (0x0080 - 0x0064)
class UTrDeathMessage : public UUTLocalMessage
{
public:
	struct FString                                     KilledString;                                     		// 0x0064 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SomeoneString;                                    		// 0x0070 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bNoConsoleDeathMessages : 1;                      		// 0x007C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79373 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FColor GetConsoleColor ( class APlayerReplicationInfo* RelatedPRI );
};

UClass* UTrDeathMessage::pClassPointer = NULL;

// Class TribesGame.TrKillerMessage
// 0x0018 (0x007C - 0x0064)
class UTrKillerMessage : public UUTLocalMessage
{
public:
	struct FString                                     YouKilled;                                        		// 0x0064 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KillCreditFor;                                    		// 0x0070 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79395 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrKillerMessage::pClassPointer = NULL;

// Class TribesGame.TrVictimMessage
// 0x000C (0x0070 - 0x0064)
class UTrVictimMessage : public UUTLocalMessage
{
public:
	struct FString                                     YouWereKilledBy;                                  		// 0x0064 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79398 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrVictimMessage::pClassPointer = NULL;

// Class TribesGame.TrDemoRecSpectator
// 0x000C (0x0D74 - 0x0D68)
class ATrDemoRecSpectator : public ATrPlayerController
{
public:
	unsigned long                                      bFindPlayer : 1;                                  		// 0x0D68 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLockRotationToViewTarget : 1;                    		// 0x0D68 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bAutoSwitchPlayers : 1;                           		// 0x0D68 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	class APlayerReplicationInfo*                      MyRealViewTarget;                                 		// 0x0D6C (0x0004) [0x0000000000000000]              
	float                                              AutoSwitchPlayerInterval;                         		// 0x0D70 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79402 ];

		return pClassPointer;
	};

	void UpdateRotation ( float DeltaTime );
	void eventGetPlayerViewPoint ( struct FVector* CameraLocation, struct FRotator* CameraRotation );
	void Pause ( );
	bool SetPause ( unsigned long bPause, struct FScriptDelegate CanUnpauseDelegate );
	void ClientSetRealViewTarget ( class APlayerReplicationInfo* NewTarget );
	void ServerViewSelf ( struct FViewTargetTransitionParams TransitionParams );
	void SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams );
	void DemoViewNextPlayer ( );
	void ViewClass ( class UClass* aClass, unsigned long bQuiet, unsigned long bCheat );
	void Slomo ( float NewTimeDilation );
	void InitPlayerReplicationInfo ( );
	void eventReceivedPlayer ( );
	void eventPostBeginPlay ( );
};

UClass* ATrDemoRecSpectator::pClassPointer = NULL;

// Class TribesGame.TrDeployable_AntiAirTurret
// 0x0000 (0x065C - 0x065C)
class ATrDeployable_AntiAirTurret : public ATrDeployable_Turret
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79458 ];

		return pClassPointer;
	};

};

UClass* ATrDeployable_AntiAirTurret::pClassPointer = NULL;

// Class TribesGame.TrMuzzleFlashLight_LightTurretProjectile
// 0x0000 (0x0270 - 0x0270)
class UTrMuzzleFlashLight_LightTurretProjectile : public UUDKExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79470 ];

		return pClassPointer;
	};

};

UClass* UTrMuzzleFlashLight_LightTurretProjectile::pClassPointer = NULL;

// Class TribesGame.TrSubDevice_AntiAirTurret
// 0x0000 (0x0864 - 0x0864)
class ATrSubDevice_AntiAirTurret : public ATrSubDevice_Turret
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79473 ];

		return pClassPointer;
	};

};

UClass* ATrSubDevice_AntiAirTurret::pClassPointer = NULL;

// Class TribesGame.TrDeployable_ForceField
// 0x002C (0x0620 - 0x05F4)
class ATrDeployable_ForceField : public ATrDeployable
{
public:
	float                                              m_fInTakeHitFlashTimeLength;                      		// 0x05F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fOutTakeHitFlashTimeLength;                     		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInTakeHitFlashRemainingTime;                   		// 0x05FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fOutTakeHitFlashRemainingTime;                  		// 0x0600 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fInHitOtherFlashTimeLength;                     		// 0x0604 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fOutHitOtherFlashTimeLength;                    		// 0x0608 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInHitOtherFlashRemainingTime;                  		// 0x060C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fOutHitOtherFlashRemainingTime;                 		// 0x0610 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPointLightComponent*                        m_Light;                                          		// 0x0614 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FColor                                      m_LightFlashColor;                                		// 0x0618 (0x0004) [0x0000000000000000]              
	float                                              m_LightFlashBrightness;                           		// 0x061C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79623 ];

		return pClassPointer;
	};

	class UTexture2D* GetMarker ( );
	void eventTick ( float DeltaTime );
	void PlayHitOtherEffects ( class AActor* Other );
	void PlayDamageHealthEffects ( int DamageAmount, int HitBoneIndex );
	void OnHealthChanged ( unsigned long wasDamage );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ATrDeployable_ForceField::pClassPointer = NULL;

// Class TribesGame.TrSubDevice_ForceField
// 0x0010 (0x0874 - 0x0864)
class ATrSubDevice_ForceField : public ATrSubDevice
{
public:
	float                                              m_MaxDamage;                                      		// 0x0864 (0x0004) [0x0000000000000000]              
	float                                              m_MinDamage;                                      		// 0x0868 (0x0004) [0x0000000000000000]              
	float                                              m_MaxSpeed;                                       		// 0x086C (0x0004) [0x0000000000000000]              
	float                                              m_MinSpeed;                                       		// 0x0870 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79665 ];

		return pClassPointer;
	};

	float ModifyInstantHitDamage ( unsigned char FiringMode, struct FImpactInfo Impact, float Damage );
	void InstantFire ( );
};

UClass* ATrSubDevice_ForceField::pClassPointer = NULL;

// Class TribesGame.TrDeployable_LightTurret
// 0x0000 (0x065C - 0x065C)
class ATrDeployable_LightTurret : public ATrDeployable_Turret
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79673 ];

		return pClassPointer;
	};

};

UClass* ATrDeployable_LightTurret::pClassPointer = NULL;

// Class TribesGame.TrSubDevice_LightTurret
// 0x0000 (0x0864 - 0x0864)
class ATrSubDevice_LightTurret : public ATrSubDevice_Turret
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79687 ];

		return pClassPointer;
	};

};

UClass* ATrSubDevice_LightTurret::pClassPointer = NULL;

// Class TribesGame.TrDeployable_OmniSensor
// 0x0000 (0x0604 - 0x0604)
class ATrDeployable_OmniSensor : public ATrDeployable_Sensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79762 ];

		return pClassPointer;
	};

};

UClass* ATrDeployable_OmniSensor::pClassPointer = NULL;

// Class TribesGame.TrDeployable_PersonalForceField
// 0x0000 (0x0620 - 0x0620)
class ATrDeployable_PersonalForceField : public ATrDeployable_ForceField
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79787 ];

		return pClassPointer;
	};

};

UClass* ATrDeployable_PersonalForceField::pClassPointer = NULL;

// Class TribesGame.TrSubDevice_PersonalForceField
// 0x0000 (0x0874 - 0x0874)
class ATrSubDevice_PersonalForceField : public ATrSubDevice_ForceField
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79799 ];

		return pClassPointer;
	};

};

UClass* ATrSubDevice_PersonalForceField::pClassPointer = NULL;

// Class TribesGame.TrDmgType_PrismMine
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_PrismMine : public UTrDmgType_Mine
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79867 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_PrismMine::pClassPointer = NULL;

// Class TribesGame.TrDeployable_RepairDeployable
// 0x0000 (0x0604 - 0x0604)
class ATrDeployable_RepairDeployable : public ATrDeployable_Sensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79947 ];

		return pClassPointer;
	};

};

UClass* ATrDeployable_RepairDeployable::pClassPointer = NULL;

// Class TribesGame.TrDeployable_TargetingBeacon
// 0x0000 (0x0608 - 0x0608)
class ATrDeployable_TargetingBeacon : public ATrDeployable_RadarSensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79970 ];

		return pClassPointer;
	};

	class UTexture2D* GetMarker ( );
	void RenderForTeammate ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir, float Distance );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
};

UClass* ATrDeployable_TargetingBeacon::pClassPointer = NULL;

// Class TribesGame.TrDeployable_WallTurret
// 0x0000 (0x065C - 0x065C)
class ATrDeployable_WallTurret : public ATrDeployable_Turret
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80040 ];

		return pClassPointer;
	};

};

UClass* ATrDeployable_WallTurret::pClassPointer = NULL;

// Class TribesGame.TrSubDevice_WallTurret
// 0x0000 (0x0864 - 0x0864)
class ATrSubDevice_WallTurret : public ATrSubDevice_Turret
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80052 ];

		return pClassPointer;
	};

};

UClass* ATrSubDevice_WallTurret::pClassPointer = NULL;

// Class TribesGame.TrDeployableHologram_AntiAirTurret
// 0x0000 (0x0224 - 0x0224)
class ATrDeployableHologram_AntiAirTurret : public ATrDeployableHologram
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80085 ];

		return pClassPointer;
	};

};

UClass* ATrDeployableHologram_AntiAirTurret::pClassPointer = NULL;

// Class TribesGame.TrDeployableHologram_BackupGenerator
// 0x0000 (0x0224 - 0x0224)
class ATrDeployableHologram_BackupGenerator : public ATrDeployableHologram
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80091 ];

		return pClassPointer;
	};

};

UClass* ATrDeployableHologram_BackupGenerator::pClassPointer = NULL;

// Class TribesGame.TrDeployableHologram_BaseTurret
// 0x0000 (0x0224 - 0x0224)
class ATrDeployableHologram_BaseTurret : public ATrDeployableHologram
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80097 ];

		return pClassPointer;
	};

};

UClass* ATrDeployableHologram_BaseTurret::pClassPointer = NULL;

// Class TribesGame.TrDeployableHologram_DropJammer
// 0x0000 (0x0224 - 0x0224)
class ATrDeployableHologram_DropJammer : public ATrDeployableHologram
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80103 ];

		return pClassPointer;
	};

};

UClass* ATrDeployableHologram_DropJammer::pClassPointer = NULL;

// Class TribesGame.TrDeployableHologram_ForceField
// 0x0000 (0x0224 - 0x0224)
class ATrDeployableHologram_ForceField : public ATrDeployableHologram
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80109 ];

		return pClassPointer;
	};

};

UClass* ATrDeployableHologram_ForceField::pClassPointer = NULL;

// Class TribesGame.TrDeployableHologram_LightTurret
// 0x0000 (0x0224 - 0x0224)
class ATrDeployableHologram_LightTurret : public ATrDeployableHologram
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80115 ];

		return pClassPointer;
	};

};

UClass* ATrDeployableHologram_LightTurret::pClassPointer = NULL;

// Class TribesGame.TrDeployableHologram_MotionSensor
// 0x0000 (0x0224 - 0x0224)
class ATrDeployableHologram_MotionSensor : public ATrDeployableHologram
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80120 ];

		return pClassPointer;
	};

};

UClass* ATrDeployableHologram_MotionSensor::pClassPointer = NULL;

// Class TribesGame.TrDeployableHologram_OmniSensor
// 0x0000 (0x0224 - 0x0224)
class ATrDeployableHologram_OmniSensor : public ATrDeployableHologram
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80126 ];

		return pClassPointer;
	};

};

UClass* ATrDeployableHologram_OmniSensor::pClassPointer = NULL;

// Class TribesGame.TrDeployableHologram_PersonalForceField
// 0x0000 (0x0224 - 0x0224)
class ATrDeployableHologram_PersonalForceField : public ATrDeployableHologram
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80131 ];

		return pClassPointer;
	};

};

UClass* ATrDeployableHologram_PersonalForceField::pClassPointer = NULL;

// Class TribesGame.TrDeployableHologram_PrismMine
// 0x0000 (0x0224 - 0x0224)
class ATrDeployableHologram_PrismMine : public ATrDeployableHologram
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80136 ];

		return pClassPointer;
	};

};

UClass* ATrDeployableHologram_PrismMine::pClassPointer = NULL;

// Class TribesGame.TrDeployableHologram_RadarSensor
// 0x0000 (0x0224 - 0x0224)
class ATrDeployableHologram_RadarSensor : public ATrDeployableHologram
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80141 ];

		return pClassPointer;
	};

};

UClass* ATrDeployableHologram_RadarSensor::pClassPointer = NULL;

// Class TribesGame.TrDeployableHologram_TripSensor
// 0x0000 (0x0224 - 0x0224)
class ATrDeployableHologram_TripSensor : public ATrDeployableHologram
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80147 ];

		return pClassPointer;
	};

};

UClass* ATrDeployableHologram_TripSensor::pClassPointer = NULL;

// Class TribesGame.TrDeployableHologram_WallTurret
// 0x0000 (0x0224 - 0x0224)
class ATrDeployableHologram_WallTurret : public ATrDeployableHologram
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80152 ];

		return pClassPointer;
	};

};

UClass* ATrDeployableHologram_WallTurret::pClassPointer = NULL;

// Class TribesGame.TrDestroyableTarget
// 0x0000 (0x0250 - 0x0250)
class ATrDestroyableTarget : public AUTSimpleDestroyable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80169 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void TakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
};

UClass* ATrDestroyableTarget::pClassPointer = NULL;

// Class TribesGame.TrSeqEvent_TakeDamage
// 0x0000 (0x0128 - 0x0128)
class UTrSeqEvent_TakeDamage : public USeqEvent_TakeDamage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80172 ];

		return pClassPointer;
	};

	void HandleDamage ( class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, int inAmount );
	int eventGetObjClassVersion ( );
};

UClass* UTrSeqEvent_TakeDamage::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Shotgun
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Shotgun : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80233 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Shotgun::pClassPointer = NULL;

// Class TribesGame.TrDmgType_AccurizedShotgun
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_AccurizedShotgun : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80239 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_AccurizedShotgun::pClassPointer = NULL;

// Class TribesGame.TrEffect_Managed
// 0x0008 (0x0058 - 0x0050)
class UTrEffect_Managed : public UTrEffect
{
public:
	class ATrPawn*                                     m_PawnTarget;                                     		// 0x0050 (0x0004) [0x0000000000000000]              
	float                                              m_fLifeTime;                                      		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80301 ];

		return pClassPointer;
	};

	void Remove ( class AActor* Target );
	void RemoveEffect ( );
	void Apply ( class AActor* Target, struct FImpactInfo Impact );
};

UClass* UTrEffect_Managed::pClassPointer = NULL;

// Class TribesGame.TrEffect_AmmoPoolBuff
// 0x0000 (0x0058 - 0x0058)
class UTrEffect_AmmoPoolBuff : public UTrEffect_Managed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80300 ];

		return pClassPointer;
	};

	void Remove ( class AActor* Target );
	void Apply ( class AActor* Target, struct FImpactInfo Impact );
};

UClass* UTrEffect_AmmoPoolBuff::pClassPointer = NULL;

// Class TribesGame.TrDevice_AntiAirTurretDeployable
// 0x0000 (0x08B0 - 0x08B0)
class ATrDevice_AntiAirTurretDeployable : public ATrDevice_Deployable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80423 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_AntiAirTurretDeployable::pClassPointer = NULL;

// Class TribesGame.TrProj_APGrenade
// 0x0000 (0x0370 - 0x0370)
class ATrProj_APGrenade : public ATrProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80536 ];

		return pClassPointer;
	};

};

UClass* ATrProj_APGrenade::pClassPointer = NULL;

// Class TribesGame.TrProj_ARC8
// 0x0000 (0x032C - 0x032C)
class ATrProj_ARC8 : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80586 ];

		return pClassPointer;
	};

};

UClass* ATrProj_ARC8::pClassPointer = NULL;

// Class TribesGame.TrProj_ArmoredClaymore
// 0x0004 (0x038C - 0x0388)
class ATrProj_ArmoredClaymore : public ATrProj_Claymore
{
public:
	float                                              m_fDistanceThreshold;                             		// 0x0388 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80603 ];

		return pClassPointer;
	};

	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
};

UClass* ATrProj_ArmoredClaymore::pClassPointer = NULL;

// Class TribesGame.TrProj_ArxBuster
// 0x0000 (0x0378 - 0x0378)
class ATrProj_ArxBuster : public ATrProj_StickyGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80609 ];

		return pClassPointer;
	};

};

UClass* ATrProj_ArxBuster::pClassPointer = NULL;

// Class TribesGame.TrProj_ArxBuster_MKD
// 0x0000 (0x0378 - 0x0378)
class ATrProj_ArxBuster_MKD : public ATrProj_ArxBuster
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80615 ];

		return pClassPointer;
	};

};

UClass* ATrProj_ArxBuster_MKD::pClassPointer = NULL;

// Class TribesGame.TrProj_ArxShotgun
// 0x0000 (0x032C - 0x032C)
class ATrProj_ArxShotgun : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80621 ];

		return pClassPointer;
	};

};

UClass* ATrProj_ArxShotgun::pClassPointer = NULL;

// Class TribesGame.TrProj_AssaultRifle
// 0x0000 (0x032C - 0x032C)
class ATrProj_AssaultRifle : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80633 ];

		return pClassPointer;
	};

};

UClass* ATrProj_AssaultRifle::pClassPointer = NULL;

// Class TribesGame.TrProj_AssaultRifle_MKD
// 0x0000 (0x032C - 0x032C)
class ATrProj_AssaultRifle_MKD : public ATrProj_AssaultRifle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80641 ];

		return pClassPointer;
	};

};

UClass* ATrProj_AssaultRifle_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_AutoShotgun
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_AutoShotgun : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80649 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_AutoShotgun::pClassPointer = NULL;

// Class TribesGame.TrDmgType_AutoShotgun_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_AutoShotgun_MKD : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80655 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_AutoShotgun_MKD::pClassPointer = NULL;

// Class TribesGame.TrProj_AVMine
// 0x0000 (0x0380 - 0x0380)
class ATrProj_AVMine : public ATrProj_Mine
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80659 ];

		return pClassPointer;
	};

};

UClass* ATrProj_AVMine::pClassPointer = NULL;

// Class TribesGame.TrDevice_BackupGeneratorDeployable
// 0x0000 (0x08B0 - 0x08B0)
class ATrDevice_BackupGeneratorDeployable : public ATrDevice_Deployable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80660 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_BackupGeneratorDeployable::pClassPointer = NULL;

// Class TribesGame.TrDevice_BaseTurretDeployable
// 0x0000 (0x08B0 - 0x08B0)
class ATrDevice_BaseTurretDeployable : public ATrDevice_Deployable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80665 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_BaseTurretDeployable::pClassPointer = NULL;

// Class TribesGame.TrProj_BoltLauncher
// 0x0000 (0x032C - 0x032C)
class ATrProj_BoltLauncher : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80700 ];

		return pClassPointer;
	};

};

UClass* ATrProj_BoltLauncher::pClassPointer = NULL;

// Class TribesGame.TrProj_Buckler
// 0x0000 (0x032C - 0x032C)
class ATrProj_Buckler : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80706 ];

		return pClassPointer;
	};

	void SpawnFlightEffects ( );
};

UClass* ATrProj_Buckler::pClassPointer = NULL;

// Class TribesGame.TrProj_Chaingun
// 0x0000 (0x032C - 0x032C)
class ATrProj_Chaingun : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80779 ];

		return pClassPointer;
	};

};

UClass* ATrProj_Chaingun::pClassPointer = NULL;

// Class TribesGame.TrProj_Chaingun_MKD
// 0x0000 (0x032C - 0x032C)
class ATrProj_Chaingun_MKD : public ATrProj_Chaingun
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80790 ];

		return pClassPointer;
	};

};

UClass* ATrProj_Chaingun_MKD::pClassPointer = NULL;

// Class TribesGame.TrProj_Claymore_MKD
// 0x0000 (0x0388 - 0x0388)
class ATrProj_Claymore_MKD : public ATrProj_Claymore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80794 ];

		return pClassPointer;
	};

};

UClass* ATrProj_Claymore_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_ConcussionGrenade
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_ConcussionGrenade : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80795 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_ConcussionGrenade::pClassPointer = NULL;

// Class TribesGame.TrProj_ConcussionGrenade
// 0x0000 (0x032C - 0x032C)
class ATrProj_ConcussionGrenade : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80799 ];

		return pClassPointer;
	};

};

UClass* ATrProj_ConcussionGrenade::pClassPointer = NULL;

// Class TribesGame.TrDevice_ConcussionGrenade_Blank
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_ConcussionGrenade_Blank : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80800 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_ConcussionGrenade_Blank::pClassPointer = NULL;

// Class TribesGame.TrDevice_ConcussionGrenade_MKD
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_ConcussionGrenade_MKD : public ATrDevice_ConcussionGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80804 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_ConcussionGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrProj_ConcussionGrenade_MKD
// 0x0000 (0x032C - 0x032C)
class ATrProj_ConcussionGrenade_MKD : public ATrProj_ConcussionGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80808 ];

		return pClassPointer;
	};

};

UClass* ATrProj_ConcussionGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_CustomEagle
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_CustomEagle : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80820 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_CustomEagle::pClassPointer = NULL;

// Class TribesGame.TrDevice_DamagePack
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_DamagePack : public ATrDevice_Pack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80821 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_DamagePack::pClassPointer = NULL;

// Class TribesGame.TrEffect_DamageBuff
// 0x0000 (0x0058 - 0x0058)
class UTrEffect_DamageBuff : public UTrEffect_Managed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80825 ];

		return pClassPointer;
	};

	void Remove ( class AActor* Target );
	void Apply ( class AActor* Target, struct FImpactInfo Impact );
};

UClass* UTrEffect_DamageBuff::pClassPointer = NULL;

// Class TribesGame.TrProj_Spinfusor
// 0x0000 (0x032C - 0x032C)
class ATrProj_Spinfusor : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80831 ];

		return pClassPointer;
	};

	void SpawnFlightEffects ( );
};

UClass* ATrProj_Spinfusor::pClassPointer = NULL;

// Class TribesGame.TrProj_DiskToss
// 0x0000 (0x032C - 0x032C)
class ATrProj_DiskToss : public ATrProj_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80830 ];

		return pClassPointer;
	};

};

UClass* ATrProj_DiskToss::pClassPointer = NULL;

// Class TribesGame.TrDevice_DropJammerDeployable
// 0x0000 (0x08B0 - 0x08B0)
class ATrDevice_DropJammerDeployable : public ATrDevice_Deployable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80832 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_DropJammerDeployable::pClassPointer = NULL;

// Class TribesGame.TrDevice_DropJammerDeployable_MKD
// 0x0000 (0x08B0 - 0x08B0)
class ATrDevice_DropJammerDeployable_MKD : public ATrDevice_DropJammerDeployable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80837 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_DropJammerDeployable_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Eagle
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Eagle : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80855 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Eagle::pClassPointer = NULL;

// Class TribesGame.TrProj_EMPGrenade
// 0x0000 (0x0370 - 0x0370)
class ATrProj_EMPGrenade : public ATrProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80859 ];

		return pClassPointer;
	};

};

UClass* ATrProj_EMPGrenade::pClassPointer = NULL;

// Class TribesGame.TrProj_EMPGrenade_MKD
// 0x0000 (0x0370 - 0x0370)
class ATrProj_EMPGrenade_MKD : public ATrProj_EMPGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80863 ];

		return pClassPointer;
	};

};

UClass* ATrProj_EMPGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_EnergyPack
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_EnergyPack : public ATrDevice_Pack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80864 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_EnergyPack::pClassPointer = NULL;

// Class TribesGame.TrEffect_MaxPowerPoolBuff
// 0x0000 (0x0058 - 0x0058)
class UTrEffect_MaxPowerPoolBuff : public UTrEffect_Managed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80868 ];

		return pClassPointer;
	};

	void Remove ( class AActor* Target );
	void Apply ( class AActor* Target, struct FImpactInfo Impact );
};

UClass* UTrEffect_MaxPowerPoolBuff::pClassPointer = NULL;

// Class TribesGame.TrDevice_EnergyPack_Brute
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_EnergyPack_Brute : public ATrDevice_EnergyPack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80870 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_EnergyPack_Brute::pClassPointer = NULL;

// Class TribesGame.TrDevice_EnergyPack_Juggernaut
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_EnergyPack_Juggernaut : public ATrDevice_EnergyPack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80875 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_EnergyPack_Juggernaut::pClassPointer = NULL;

// Class TribesGame.TrDevice_EnergyPack_Soldier
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_EnergyPack_Soldier : public ATrDevice_EnergyPack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80880 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_EnergyPack_Soldier::pClassPointer = NULL;

// Class TribesGame.TrDevice_ERechargePack
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_ERechargePack : public ATrDevice_Pack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80885 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_ERechargePack::pClassPointer = NULL;

// Class TribesGame.TrEffect_PowerPoolBuff
// 0x0000 (0x0058 - 0x0058)
class UTrEffect_PowerPoolBuff : public UTrEffect_Managed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80889 ];

		return pClassPointer;
	};

	void Remove ( class AActor* Target );
	void Apply ( class AActor* Target, struct FImpactInfo Impact );
};

UClass* UTrEffect_PowerPoolBuff::pClassPointer = NULL;

// Class TribesGame.TrDevice_ERechargePack_Pathfinder
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_ERechargePack_Pathfinder : public ATrDevice_ERechargePack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80891 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_ERechargePack_Pathfinder::pClassPointer = NULL;

// Class TribesGame.TrDevice_ERechargePack_Sentinel
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_ERechargePack_Sentinel : public ATrDevice_ERechargePack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80896 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_ERechargePack_Sentinel::pClassPointer = NULL;

// Class TribesGame.TrProj_Falcon
// 0x0000 (0x032C - 0x032C)
class ATrProj_Falcon : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80908 ];

		return pClassPointer;
	};

};

UClass* ATrProj_Falcon::pClassPointer = NULL;

// Class TribesGame.TrDevice_FlareGrenade
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_FlareGrenade : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80909 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_FlareGrenade::pClassPointer = NULL;

// Class TribesGame.TrProj_FlareGrenade
// 0x0000 (0x0370 - 0x0370)
class ATrProj_FlareGrenade : public ATrProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80913 ];

		return pClassPointer;
	};

	void Destroyed ( );
	void HijackMissileGuidance ( );
	void PostBeginPlay ( );
	float CalculateHijackMetric ( class ATrProj_TrackingMissile* Missile );
};

UClass* ATrProj_FlareGrenade::pClassPointer = NULL;

// Class TribesGame.TrDevice_ForceFieldDeployable
// 0x0000 (0x08B0 - 0x08B0)
class ATrDevice_ForceFieldDeployable : public ATrDevice_Deployable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80914 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_ForceFieldDeployable::pClassPointer = NULL;

// Class TribesGame.TrProj_Grenade_MKD
// 0x0000 (0x0370 - 0x0370)
class ATrProj_Grenade_MKD : public ATrProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80925 ];

		return pClassPointer;
	};

};

UClass* ATrProj_Grenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrProj_GrenadeLauncher
// 0x0000 (0x0370 - 0x0370)
class ATrProj_GrenadeLauncher : public ATrProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80935 ];

		return pClassPointer;
	};

};

UClass* ATrProj_GrenadeLauncher::pClassPointer = NULL;

// Class TribesGame.TrDevice_GrenadeT5
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_GrenadeT5 : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80936 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_GrenadeT5::pClassPointer = NULL;

// Class TribesGame.TrProj_GrenadeT5
// 0x0000 (0x0370 - 0x0370)
class ATrProj_GrenadeT5 : public ATrProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80940 ];

		return pClassPointer;
	};

};

UClass* ATrProj_GrenadeT5::pClassPointer = NULL;

// Class TribesGame.TrProj_GrenadeXL
// 0x0000 (0x0370 - 0x0370)
class ATrProj_GrenadeXL : public ATrProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80944 ];

		return pClassPointer;
	};

};

UClass* ATrProj_GrenadeXL::pClassPointer = NULL;

// Class TribesGame.TrProj_GrenadeXL_MKD
// 0x0000 (0x0370 - 0x0370)
class ATrProj_GrenadeXL_MKD : public ATrProj_GrenadeXL
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80948 ];

		return pClassPointer;
	};

};

UClass* ATrProj_GrenadeXL_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_H1
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_H1 : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80957 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_H1::pClassPointer = NULL;

// Class TribesGame.TrProj_HeavyAPGrenade
// 0x0000 (0x0370 - 0x0370)
class ATrProj_HeavyAPGrenade : public ATrProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80961 ];

		return pClassPointer;
	};

};

UClass* ATrProj_HeavyAPGrenade::pClassPointer = NULL;

// Class TribesGame.TrProj_HeavyAPGrenade_MKD
// 0x0000 (0x0370 - 0x0370)
class ATrProj_HeavyAPGrenade_MKD : public ATrProj_HeavyAPGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80965 ];

		return pClassPointer;
	};

};

UClass* ATrProj_HeavyAPGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrProj_HeavyBoltLauncher
// 0x0000 (0x032C - 0x032C)
class ATrProj_HeavyBoltLauncher : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80993 ];

		return pClassPointer;
	};

};

UClass* ATrProj_HeavyBoltLauncher::pClassPointer = NULL;

// Class TribesGame.TrDevice_HeavyImpactNitron
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_HeavyImpactNitron : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80994 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_HeavyImpactNitron::pClassPointer = NULL;

// Class TribesGame.TrProj_HeavyImpactNitron
// 0x0000 (0x032C - 0x032C)
class ATrProj_HeavyImpactNitron : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80998 ];

		return pClassPointer;
	};

};

UClass* ATrProj_HeavyImpactNitron::pClassPointer = NULL;

// Class TribesGame.TrDevice_HeavyShieldPack
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_HeavyShieldPack : public ATrDevice_Pack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80999 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_HeavyShieldPack::pClassPointer = NULL;

// Class TribesGame.TrEffect_HeavyShield
// 0x0000 (0x0058 - 0x0058)
class UTrEffect_HeavyShield : public UTrEffect_Managed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81003 ];

		return pClassPointer;
	};

	void Remove ( class AActor* Target );
	void Apply ( class AActor* Target, struct FImpactInfo Impact );
};

UClass* UTrEffect_HeavyShield::pClassPointer = NULL;

// Class TribesGame.TrProj_HeavySpinfusor
// 0x0000 (0x032C - 0x032C)
class ATrProj_HeavySpinfusor : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81051 ];

		return pClassPointer;
	};

	void SpawnFlightEffects ( );
};

UClass* ATrProj_HeavySpinfusor::pClassPointer = NULL;

// Class TribesGame.TrProj_HeavySpinfusor_MKD
// 0x0000 (0x032C - 0x032C)
class ATrProj_HeavySpinfusor_MKD : public ATrProj_HeavySpinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81057 ];

		return pClassPointer;
	};

};

UClass* ATrProj_HeavySpinfusor_MKD::pClassPointer = NULL;

// Class TribesGame.TrProj_Twinfusor
// 0x0000 (0x032C - 0x032C)
class ATrProj_Twinfusor : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81083 ];

		return pClassPointer;
	};

	void SpawnFlightEffects ( );
};

UClass* ATrProj_Twinfusor::pClassPointer = NULL;

// Class TribesGame.TrProj_HeavyTwinfusor
// 0x0000 (0x032C - 0x032C)
class ATrProj_HeavyTwinfusor : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81091 ];

		return pClassPointer;
	};

	void SpawnFlightEffects ( );
};

UClass* ATrProj_HeavyTwinfusor::pClassPointer = NULL;

// Class TribesGame.TrDevice_Stealth
// 0x0004 (0x087C - 0x0878)
class ATrDevice_Stealth : public ATrDevice_Pack
{
public:
	float                                              m_fPulseSpeedThreshold;                           		// 0x0878 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81092 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
};

UClass* ATrDevice_Stealth::pClassPointer = NULL;

// Class TribesGame.TrEffect_Stealth
// 0x0000 (0x0058 - 0x0058)
class UTrEffect_Stealth : public UTrEffect_Managed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81099 ];

		return pClassPointer;
	};

	void Remove ( class AActor* Target );
	void Apply ( class AActor* Target, struct FImpactInfo Impact );
};

UClass* UTrEffect_Stealth::pClassPointer = NULL;

// Class TribesGame.TrDevice_HighSpeedStealth
// 0x0000 (0x087C - 0x087C)
class ATrDevice_HighSpeedStealth : public ATrDevice_Stealth
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81101 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_HighSpeedStealth::pClassPointer = NULL;

// Class TribesGame.TrProj_ImpactBomblets
// 0x0000 (0x032C - 0x032C)
class ATrProj_ImpactBomblets : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81109 ];

		return pClassPointer;
	};

};

UClass* ATrProj_ImpactBomblets::pClassPointer = NULL;

// Class TribesGame.TrDevice_JammerPack
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_JammerPack : public ATrDevice_Pack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81110 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_JammerPack::pClassPointer = NULL;

// Class TribesGame.TrEffect_Jammer
// 0x0000 (0x0058 - 0x0058)
class UTrEffect_Jammer : public UTrEffect_Managed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81114 ];

		return pClassPointer;
	};

	void Remove ( class AActor* Target );
	void Apply ( class AActor* Target, struct FImpactInfo Impact );
};

UClass* UTrEffect_Jammer::pClassPointer = NULL;

// Class TribesGame.TrDmgType_LaserTargeter
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_LaserTargeter : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82588 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_LaserTargeter::pClassPointer = NULL;

// Class TribesGame.TrProj_LightAssaultRifle
// 0x0000 (0x032C - 0x032C)
class ATrProj_LightAssaultRifle : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82612 ];

		return pClassPointer;
	};

};

UClass* ATrProj_LightAssaultRifle::pClassPointer = NULL;

// Class TribesGame.TrDevice_LightRegenPack
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_LightRegenPack : public ATrDevice_Pack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82613 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_LightRegenPack::pClassPointer = NULL;

// Class TribesGame.TrEffect_RegenBuff
// 0x0000 (0x0058 - 0x0058)
class UTrEffect_RegenBuff : public UTrEffect_Managed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82618 ];

		return pClassPointer;
	};

	void Remove ( class AActor* Target );
	void Apply ( class AActor* Target, struct FImpactInfo Impact );
};

UClass* UTrEffect_RegenBuff::pClassPointer = NULL;

// Class TribesGame.TrEffect_LightRegenBuff
// 0x0000 (0x0058 - 0x0058)
class UTrEffect_LightRegenBuff : public UTrEffect_RegenBuff
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82617 ];

		return pClassPointer;
	};

};

UClass* UTrEffect_LightRegenBuff::pClassPointer = NULL;

// Class TribesGame.TrProj_LightSpinfusor
// 0x0000 (0x032C - 0x032C)
class ATrProj_LightSpinfusor : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82629 ];

		return pClassPointer;
	};

	void SpawnFlightEffects ( );
};

UClass* ATrProj_LightSpinfusor::pClassPointer = NULL;

// Class TribesGame.TrProj_LightSpinfusor_100X
// 0x0000 (0x032C - 0x032C)
class ATrProj_LightSpinfusor_100X : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82635 ];

		return pClassPointer;
	};

	void SpawnFlightEffects ( );
};

UClass* ATrProj_LightSpinfusor_100X::pClassPointer = NULL;

// Class TribesGame.TrProj_LightSpinfusor_MKD
// 0x0000 (0x032C - 0x032C)
class ATrProj_LightSpinfusor_MKD : public ATrProj_LightSpinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82641 ];

		return pClassPointer;
	};

};

UClass* ATrProj_LightSpinfusor_MKD::pClassPointer = NULL;

// Class TribesGame.TrProj_LightStickyGrenade
// 0x0000 (0x0370 - 0x0370)
class ATrProj_LightStickyGrenade : public ATrProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82645 ];

		return pClassPointer;
	};

	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void PostBeginPlay ( );
};

UClass* ATrProj_LightStickyGrenade::pClassPointer = NULL;

// Class TribesGame.TrDevice_LightTurretDeployable
// 0x0000 (0x08B0 - 0x08B0)
class ATrDevice_LightTurretDeployable : public ATrDevice_Deployable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82646 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_LightTurretDeployable::pClassPointer = NULL;

// Class TribesGame.TrProj_LightTwinfusor
// 0x0000 (0x032C - 0x032C)
class ATrProj_LightTwinfusor : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82658 ];

		return pClassPointer;
	};

	void SpawnFlightEffects ( );
};

UClass* ATrProj_LightTwinfusor::pClassPointer = NULL;

// Class TribesGame.TrProj_LR1Mortar
// 0x0000 (0x0370 - 0x0370)
class ATrProj_LR1Mortar : public ATrProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82670 ];

		return pClassPointer;
	};

};

UClass* ATrProj_LR1Mortar::pClassPointer = NULL;

// Class TribesGame.TrDevice_MaxPowerPoolPack
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_MaxPowerPoolPack : public ATrDevice_Pack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82671 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_MaxPowerPoolPack::pClassPointer = NULL;

// Class TribesGame.TrDmgType_SonicPunch
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_SonicPunch : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82718 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_SonicPunch::pClassPointer = NULL;

// Class TribesGame.TrDevice_MinorEnergyPack
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_MinorEnergyPack : public ATrDevice_Pack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82754 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_MinorEnergyPack::pClassPointer = NULL;

// Class TribesGame.TrEffect_MinorPowerPoolBuff
// 0x0000 (0x0058 - 0x0058)
class UTrEffect_MinorPowerPoolBuff : public UTrEffect_Managed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82758 ];

		return pClassPointer;
	};

	void Remove ( class AActor* Target );
	void Apply ( class AActor* Target, struct FImpactInfo Impact );
};

UClass* UTrEffect_MinorPowerPoolBuff::pClassPointer = NULL;

// Class TribesGame.TrProj_MIRVLauncher
// 0x0008 (0x0378 - 0x0370)
class ATrProj_MIRVLauncher : public ATrProj_Grenade
{
public:
	class UClass*                                      m_SecondaryProjectile;                            		// 0x0370 (0x0004) [0x0000000000000000]              
	int                                                m_nSecondaryExplosions;                           		// 0x0374 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82764 ];

		return pClassPointer;
	};

	void Bounce ( class AActor* Other, struct FVector WallNormal );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void SpawnSecondaryProjectile ( struct FVector Direction );
	struct FRotator GetRandomSpread ( struct FRotator BaseDirection );
};

UClass* ATrProj_MIRVLauncher::pClassPointer = NULL;

// Class TribesGame.TrProj_MIRVGrenade
// 0x0000 (0x0378 - 0x0378)
class ATrProj_MIRVGrenade : public ATrProj_MIRVLauncher
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82763 ];

		return pClassPointer;
	};

};

UClass* ATrProj_MIRVGrenade::pClassPointer = NULL;

// Class TribesGame.TrProj_MortarLauncher
// 0x0000 (0x0370 - 0x0370)
class ATrProj_MortarLauncher : public ATrProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82782 ];

		return pClassPointer;
	};

};

UClass* ATrProj_MortarLauncher::pClassPointer = NULL;

// Class TribesGame.TrProj_MortarLauncher_MKD
// 0x0000 (0x0370 - 0x0370)
class ATrProj_MortarLauncher_MKD : public ATrProj_MortarLauncher
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82788 ];

		return pClassPointer;
	};

};

UClass* ATrProj_MortarLauncher_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_MotionSensorDeployable
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_MotionSensorDeployable : public ATrDevice_Mine
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82789 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_MotionSensorDeployable::pClassPointer = NULL;

// Class TribesGame.TrProj_MotionSensor
// 0x0000 (0x0380 - 0x0380)
class ATrProj_MotionSensor : public ATrProj_Mine
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82795 ];

		return pClassPointer;
	};

	void DetonateObsolete ( unsigned long bDetonateFromDamage );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ATrProj_MotionSensor::pClassPointer = NULL;

// Class TribesGame.TrProj_NinjaSmoke
// 0x0000 (0x0370 - 0x0370)
class ATrProj_NinjaSmoke : public ATrProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82799 ];

		return pClassPointer;
	};

};

UClass* ATrProj_NinjaSmoke::pClassPointer = NULL;

// Class TribesGame.TrProj_NJ4SMG
// 0x0000 (0x032C - 0x032C)
class ATrProj_NJ4SMG : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82812 ];

		return pClassPointer;
	};

};

UClass* ATrProj_NJ4SMG::pClassPointer = NULL;

// Class TribesGame.TrProj_NJ4SMG_MKD
// 0x0000 (0x032C - 0x032C)
class ATrProj_NJ4SMG_MKD : public ATrProj_NJ4SMG
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82820 ];

		return pClassPointer;
	};

};

UClass* ATrProj_NJ4SMG_MKD::pClassPointer = NULL;

// Class TribesGame.TrProj_NJ5SMG
// 0x0000 (0x032C - 0x032C)
class ATrProj_NJ5SMG : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82830 ];

		return pClassPointer;
	};

};

UClass* ATrProj_NJ5SMG::pClassPointer = NULL;

// Class TribesGame.TrProj_NovaColt
// 0x0008 (0x0334 - 0x032C)
class ATrProj_NovaColt : public ATrProjectile
{
public:
	int                                                m_nBouncesAllowed;                                		// 0x032C (0x0004) [0x0000000000000000]              
	int                                                m_nNumberBounces;                                 		// 0x0330 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82845 ];

		return pClassPointer;
	};

	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
};

UClass* ATrProj_NovaColt::pClassPointer = NULL;

// Class TribesGame.TrProj_NovaColt_MKD
// 0x0000 (0x0334 - 0x0334)
class ATrProj_NovaColt_MKD : public ATrProj_NovaColt
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82853 ];

		return pClassPointer;
	};

};

UClass* ATrProj_NovaColt_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_NovaSlug
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_NovaSlug : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82865 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_NovaSlug::pClassPointer = NULL;

// Class TribesGame.TrDevice_OmniSensorDeployable
// 0x0000 (0x08B0 - 0x08B0)
class ATrDevice_OmniSensorDeployable : public ATrDevice_Deployable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82866 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_OmniSensorDeployable::pClassPointer = NULL;

// Class TribesGame.TrDevice_PersonalForceFieldDeployable
// 0x0000 (0x08B0 - 0x08B0)
class ATrDevice_PersonalForceFieldDeployable : public ATrDevice_Deployable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82871 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_PersonalForceFieldDeployable::pClassPointer = NULL;

// Class TribesGame.TrProj_PlasmaCannon
// 0x0000 (0x032C - 0x032C)
class ATrProj_PlasmaCannon : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82904 ];

		return pClassPointer;
	};

	void SpawnFlightEffects ( );
};

UClass* ATrProj_PlasmaCannon::pClassPointer = NULL;

// Class TribesGame.TrProj_PlasmaGun
// 0x0000 (0x032C - 0x032C)
class ATrProj_PlasmaGun : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82912 ];

		return pClassPointer;
	};

	void SpawnFlightEffects ( );
};

UClass* ATrProj_PlasmaGun::pClassPointer = NULL;

// Class TribesGame.TrDevice_PrismMineDeployable
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_PrismMineDeployable : public ATrDevice_Claymore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82913 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_PrismMineDeployable::pClassPointer = NULL;

// Class TribesGame.TrProj_ProximityGrenade
// 0x0000 (0x0370 - 0x0370)
class ATrProj_ProximityGrenade : public ATrProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82920 ];

		return pClassPointer;
	};

};

UClass* ATrProj_ProximityGrenade::pClassPointer = NULL;

// Class TribesGame.TrDevice_RadarSensorDeployable
// 0x0000 (0x08B0 - 0x08B0)
class ATrDevice_RadarSensorDeployable : public ATrDevice_Deployable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82921 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_RadarSensorDeployable::pClassPointer = NULL;

// Class TribesGame.TrProj_RemoteArxBuster
// 0x0004 (0x037C - 0x0378)
class ATrProj_RemoteArxBuster : public ATrProj_StickyGrenade
{
public:
	unsigned long                                      m_bIsDetonating : 1;                              		// 0x0378 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82932 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	bool StickToTarget ( class AActor* Target, struct FVector HitLocation, struct FVector HitNormal );
	void ReportDestroyedByOtherToParentDevice ( );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void TakeRadiusDamage ( class AController* EventInstigator, float BaseDamage, float InDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	void PreBeginPlay ( );
};

UClass* ATrProj_RemoteArxBuster::pClassPointer = NULL;

// Class TribesGame.TrDmgType_RepairTool
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_RepairTool : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83108 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_RepairTool::pClassPointer = NULL;

// Class TribesGame.TrDmgType_RepairToolAX
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_RepairToolAX : public UTrDmgType_RepairTool
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83124 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_RepairToolAX::pClassPointer = NULL;

// Class TribesGame.TrDmgType_RepairToolEG
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_RepairToolEG : public UTrDmgType_RepairTool
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83130 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_RepairToolEG::pClassPointer = NULL;

// Class TribesGame.TrDmgType_RepairToolSD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_RepairToolSD : public UTrDmgType_RepairTool
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83136 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_RepairToolSD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_RepairToolSD_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_RepairToolSD_MKD : public UTrDmgType_RepairTool
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83142 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_RepairToolSD_MKD::pClassPointer = NULL;

// Class TribesGame.TrProj_RhinoSMG
// 0x0000 (0x032C - 0x032C)
class ATrProj_RhinoSMG : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83150 ];

		return pClassPointer;
	};

};

UClass* ATrProj_RhinoSMG::pClassPointer = NULL;

// Class TribesGame.TrProj_RhinoSMG_MKD
// 0x0000 (0x032C - 0x032C)
class ATrProj_RhinoSMG_MKD : public ATrProj_RhinoSMG
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83158 ];

		return pClassPointer;
	};

};

UClass* ATrProj_RhinoSMG_MKD::pClassPointer = NULL;

// Class TribesGame.TrProj_RocketLauncher
// 0x0000 (0x032C - 0x032C)
class ATrProj_RocketLauncher : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83164 ];

		return pClassPointer;
	};

	void SpawnFlightEffects ( );
};

UClass* ATrProj_RocketLauncher::pClassPointer = NULL;

// Class TribesGame.TrDmgType_S22Rifle
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_S22Rifle : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83171 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_S22Rifle::pClassPointer = NULL;

// Class TribesGame.TrSeekingMissileManager
// 0x001C (0x01F8 - 0x01DC)
class ATrSeekingMissileManager : public AInfo
{
public:
	TArray< struct FSeekingMissileInfo >               ActiveSeekingMissiles;                            		// 0x01DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FTargetingSaberLauncherInfo >       ActiveTargetingSaberLaunchers;                    		// 0x01E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RepCounter;                                       		// 0x01F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83202 ];

		return pClassPointer;
	};

	void PawnEnteredVehicle ( class APawn* EnteringPawn, class ATrVehicle* Vehicle, int SeatIndex );
	void PawnLeftVehicle ( class APawn* LeavingPawn, class ATrVehicle* Vehicle );
	void StopMissileTracking ( class ATrPlayerController* VictimController );
	void BeginMissileTracking ( class ATrPlayerController* VictimController );
	void StopSaberLauncherTargeting ( class ATrPlayerController* VictimController );
	void BeginSaberLauncherTargeting ( class ATrPlayerController* VictimController );
	void TargetVehicleUpdated ( class ATrVehicle* targetVehicle, unsigned char MissileEvent );
	void VictimControllerUpdated ( class ATrPlayerController* VictimController, unsigned char MissileEvent );
	int GetNumMissilesTrackingVehicle ( class ATrVehicle* targetVehicle );
	int GetNumMissilesTrackingController ( class ATrPlayerController* Controller );
	void RemoveMissile ( class ATrProj_TrackingMissile* MissileToRemove );
	void AddMissile ( class ATrProj_TrackingMissile* MissileToAdd );
	int GetNumSaberLaunchersTargetingVehicle ( class ATrVehicle* targetVehicle, unsigned long bOnlyClientNotified );
	int GetNumSaberLaunchersTargetingController ( class ATrPlayerController* Controller, unsigned long bOnlyClientNotified );
	void RemoveSaberLauncher ( class ATrDevice_SaberLauncher* SaberLauncherToRemove );
	void AddSaberLauncher ( class ATrDevice_SaberLauncher* SaberLauncherToAdd, unsigned char MissileLockValue );
	void eventTick ( float DeltaTime );
};

UClass* ATrSeekingMissileManager::pClassPointer = NULL;

// Class TribesGame.TrProj_TrackingMissile_MKD
// 0x0000 (0x032C - 0x032C)
class ATrProj_TrackingMissile_MKD : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85194 ];

		return pClassPointer;
	};

	void Destroyed ( );
};

UClass* ATrProj_TrackingMissile_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_SAP20
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_SAP20 : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85242 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_SAP20::pClassPointer = NULL;

// Class TribesGame.TrDmgType_SawedOffShotgun
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_SawedOffShotgun : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85251 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_SawedOffShotgun::pClassPointer = NULL;

// Class TribesGame.TrDevice_ShieldPack
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_ShieldPack : public ATrDevice_Pack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85252 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_ShieldPack::pClassPointer = NULL;

// Class TribesGame.TrEffect_Shield
// 0x0000 (0x0058 - 0x0058)
class UTrEffect_Shield : public UTrEffect_Managed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85256 ];

		return pClassPointer;
	};

	void Remove ( class AActor* Target );
	void Apply ( class AActor* Target, struct FImpactInfo Impact );
};

UClass* UTrEffect_Shield::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Shotgun_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Shotgun_MKD : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85263 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Shotgun_MKD::pClassPointer = NULL;

// Class TribesGame.TrProj_SN7
// 0x0000 (0x032C - 0x032C)
class ATrProj_SN7 : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85275 ];

		return pClassPointer;
	};

};

UClass* ATrProj_SN7::pClassPointer = NULL;

// Class TribesGame.TrProj_SN7_MKD
// 0x0000 (0x032C - 0x032C)
class ATrProj_SN7_MKD : public ATrProj_SN7
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85281 ];

		return pClassPointer;
	};

};

UClass* ATrProj_SN7_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_SniperRifle_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_SniperRifle_MKD : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85287 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_SniperRifle_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Sparrow
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Sparrow : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85297 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Sparrow::pClassPointer = NULL;

// Class TribesGame.TrProj_SpikeGrenade
// 0x005C (0x03CC - 0x0370)
class ATrProj_SpikeGrenade : public ATrProj_Grenade
{
public:
	unsigned long                                      m_bStartedFractal : 1;                            		// 0x0370 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              m_fRemainingFractalTime;                          		// 0x0374 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fFractalTime;                                   		// 0x0378 (0x0004) [0x0000000000000000]              
	float                                              m_fFractalInterval;                               		// 0x037C (0x0004) [0x0000000000000000]              
	float                                              m_fAscentTime;                                    		// 0x0380 (0x0004) [0x0000000000000000]              
	float                                              m_fAscentHeight;                                  		// 0x0384 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_CachedHitNormal;                                		// 0x0388 (0x000C) [0x0000000000000000]              
	class USkelControlSingleBone*                      m_AscendControl;                                  		// 0x0394 (0x0004) [0x0000000000000000]              
	float                                              m_fFractalShotDistance;                           		// 0x0398 (0x0004) [0x0000000000000000]              
	float                                              m_fZFractalShotDistance;                          		// 0x039C (0x0004) [0x0000000000000000]              
	struct FVector                                     m_vAscentLocation;                                		// 0x03A0 (0x000C) [0x0000000000000000]              
	struct FVector                                     r_vFlashExplosionLocation;                        		// 0x03AC (0x000C) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nFractalDamage;                                 		// 0x03B8 (0x0004) [0x0000000000000000]              
	float                                              m_fFractalDamageRadius;                           		// 0x03BC (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             m_FractalExplosionTemplate;                       		// 0x03C0 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             m_FractalBeamTemplate;                            		// 0x03C4 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_FractalExplosionSound;                          		// 0x03C8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85301 ];

		return pClassPointer;
	};

	void SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal );
	void EndFractal ( );
	void SpawnFractalExplosionEffects ( struct FVector ShotLocation );
	void ShootFractalShot ( );
	void StartFractalShots ( );
	bool IsFractalActive ( );
	void ClientReceivedExplosionLocation ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void InitProjectile ( struct FVector Direction, class UClass* ClassToInherit );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ATrProj_SpikeGrenade::pClassPointer = NULL;

// Class TribesGame.TrProj_SpikeGrenade_MKD
// 0x0000 (0x03CC - 0x03CC)
class ATrProj_SpikeGrenade_MKD : public ATrProj_SpikeGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85305 ];

		return pClassPointer;
	};

};

UClass* ATrProj_SpikeGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrProj_SpikeLauncher
// 0x0010 (0x0388 - 0x0378)
class ATrProj_SpikeLauncher : public ATrProj_StickyGrenade
{
public:
	class UClass*                                      m_SecondProjectile;                               		// 0x0378 (0x0004) [0x0000000000000000]              
	class UClass*                                      m_ThirdProjectile;                                		// 0x037C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bInAirHit : 1;                                  		// 0x0380 (0x0004) [0x0000000000000000] [0x00000001] 
	class UParticleSystem*                             ProjExplosionTemplateAir;                         		// 0x0384 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85333 ];

		return pClassPointer;
	};

	void SpawnSecondaryProjectile ( struct FVector Direction );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	bool StickToTarget ( class AActor* Target, struct FVector HitLocation, struct FVector HitNormal );
	void PreBeginPlay ( );
};

UClass* ATrProj_SpikeLauncher::pClassPointer = NULL;

// Class TribesGame.TrProj_Spinfusor_100X
// 0x0000 (0x032C - 0x032C)
class ATrProj_Spinfusor_100X : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85344 ];

		return pClassPointer;
	};

	void SpawnFlightEffects ( );
};

UClass* ATrProj_Spinfusor_100X::pClassPointer = NULL;

// Class TribesGame.TrProj_SpinfusorD
// 0x0000 (0x032C - 0x032C)
class ATrProj_SpinfusorD : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85350 ];

		return pClassPointer;
	};

	void SpawnFlightEffects ( );
};

UClass* ATrProj_SpinfusorD::pClassPointer = NULL;

// Class TribesGame.TrProj_SpinfusorD_MKD
// 0x0000 (0x032C - 0x032C)
class ATrProj_SpinfusorD_MKD : public ATrProj_SpinfusorD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85356 ];

		return pClassPointer;
	};

};

UClass* ATrProj_SpinfusorD_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_StealthLightSpinfusor
// 0x0000 (0x0870 - 0x0870)
class ATrDevice_StealthLightSpinfusor : public ATrDevice_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85357 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_StealthLightSpinfusor::pClassPointer = NULL;

// Class TribesGame.TrMuzzleFlashLight_StealthSpinfusor
// 0x0000 (0x0270 - 0x0270)
class UTrMuzzleFlashLight_StealthSpinfusor : public UUDKExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85368 ];

		return pClassPointer;
	};

};

UClass* UTrMuzzleFlashLight_StealthSpinfusor::pClassPointer = NULL;

// Class TribesGame.TrProj_StealthSpinfusor
// 0x0000 (0x032C - 0x032C)
class ATrProj_StealthSpinfusor : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85369 ];

		return pClassPointer;
	};

	void SpawnFlightEffects ( );
};

UClass* ATrProj_StealthSpinfusor::pClassPointer = NULL;

// Class TribesGame.TrProj_STGrenade
// 0x0000 (0x032C - 0x032C)
class ATrProj_STGrenade : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85373 ];

		return pClassPointer;
	};

};

UClass* ATrProj_STGrenade::pClassPointer = NULL;

// Class TribesGame.TrProj_StickyGrenade_MKD
// 0x0000 (0x0378 - 0x0378)
class ATrProj_StickyGrenade_MKD : public ATrProj_StickyGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85380 ];

		return pClassPointer;
	};

};

UClass* ATrProj_StickyGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_SurvivalPack
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_SurvivalPack : public ATrDevice_EnergyPack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85381 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_SurvivalPack::pClassPointer = NULL;

// Class TribesGame.TrProj_TargetingBeacon
// 0x0000 (0x0384 - 0x0384)
class ATrProj_TargetingBeacon : public ATrProj_ThrowDeployable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85389 ];

		return pClassPointer;
	};

};

UClass* ATrProj_TargetingBeacon::pClassPointer = NULL;

// Class TribesGame.TrProj_TC24
// 0x0000 (0x032C - 0x032C)
class ATrProj_TC24 : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85398 ];

		return pClassPointer;
	};

	void Destroyed ( );
};

UClass* ATrProj_TC24::pClassPointer = NULL;

// Class TribesGame.TrProj_TCN4SMG
// 0x0000 (0x032C - 0x032C)
class ATrProj_TCN4SMG : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85406 ];

		return pClassPointer;
	};

};

UClass* ATrProj_TCN4SMG::pClassPointer = NULL;

// Class TribesGame.TrProj_TCN4SMG_MKD
// 0x0000 (0x032C - 0x032C)
class ATrProj_TCN4SMG_MKD : public ATrProj_TCN4SMG
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85414 ];

		return pClassPointer;
	};

};

UClass* ATrProj_TCN4SMG_MKD::pClassPointer = NULL;

// Class TribesGame.TrProj_TCNG
// 0x0000 (0x0370 - 0x0370)
class ATrProj_TCNG : public ATrProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85418 ];

		return pClassPointer;
	};

};

UClass* ATrProj_TCNG::pClassPointer = NULL;

// Class TribesGame.TrProj_TCNG_MKD
// 0x0000 (0x0370 - 0x0370)
class ATrProj_TCNG_MKD : public ATrProj_TCNG
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85422 ];

		return pClassPointer;
	};

};

UClass* ATrProj_TCNG_MKD::pClassPointer = NULL;

// Class TribesGame.TrProj_ThrowingKnives
// 0x0000 (0x032C - 0x032C)
class ATrProj_ThrowingKnives : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85449 ];

		return pClassPointer;
	};

};

UClass* ATrProj_ThrowingKnives::pClassPointer = NULL;

// Class TribesGame.TrProj_Thumper
// 0x0000 (0x032C - 0x032C)
class ATrProj_Thumper : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85458 ];

		return pClassPointer;
	};

	void Destroyed ( );
};

UClass* ATrProj_Thumper::pClassPointer = NULL;

// Class TribesGame.TrProj_ThumperD
// 0x0000 (0x032C - 0x032C)
class ATrProj_ThumperD : public ATrProj_Thumper
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85467 ];

		return pClassPointer;
	};

};

UClass* ATrProj_ThumperD::pClassPointer = NULL;

// Class TribesGame.TrProj_ThumperD_MKD
// 0x0000 (0x032C - 0x032C)
class ATrProj_ThumperD_MKD : public ATrProj_ThumperD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85473 ];

		return pClassPointer;
	};

};

UClass* ATrProj_ThumperD_MKD::pClassPointer = NULL;

// Class TribesGame.TrDevice_TripSensorDeployable
// 0x0000 (0x08B0 - 0x08B0)
class ATrDevice_TripSensorDeployable : public ATrDevice_Deployable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85474 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_TripSensorDeployable::pClassPointer = NULL;

// Class TribesGame.TrDevice_UtilityPack_Soldier
// 0x0000 (0x0878 - 0x0878)
class ATrDevice_UtilityPack_Soldier : public ATrDevice_EnergyPack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85479 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_UtilityPack_Soldier::pClassPointer = NULL;

// Class TribesGame.TrEffect_UtilityPackBuff
// 0x0000 (0x0058 - 0x0058)
class UTrEffect_UtilityPackBuff : public UTrEffect_MaxPowerPoolBuff
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85483 ];

		return pClassPointer;
	};

};

UClass* UTrEffect_UtilityPackBuff::pClassPointer = NULL;

// Class TribesGame.TrDevice_WhiteOut
// 0x0000 (0x0874 - 0x0874)
class ATrDevice_WhiteOut : public ATrDevice_AutoFire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85488 ];

		return pClassPointer;
	};

};

UClass* ATrDevice_WhiteOut::pClassPointer = NULL;

// Class TribesGame.TrProj_WhiteOut
// 0x0000 (0x0370 - 0x0370)
class ATrProj_WhiteOut : public ATrProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85492 ];

		return pClassPointer;
	};

};

UClass* ATrProj_WhiteOut::pClassPointer = NULL;

// Class TribesGame.TrProj_X1Rifle
// 0x0000 (0x032C - 0x032C)
class ATrProj_X1Rifle : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85502 ];

		return pClassPointer;
	};

};

UClass* ATrProj_X1Rifle::pClassPointer = NULL;

// Class TribesGame.TrDeviceContentData_Perk
// 0x0004 (0x0060 - 0x005C)
class UTrDeviceContentData_Perk : public UTrDeviceContentData
{
public:
	class UMaterialInstanceConstant*                   m_PerkMaterial;                                   		// 0x005C (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85509 ];

		return pClassPointer;
	};

};

UClass* UTrDeviceContentData_Perk::pClassPointer = NULL;

// Class TribesGame.TrDmgType_AntiAirTurret
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_AntiAirTurret : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85574 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_AntiAirTurret::pClassPointer = NULL;

// Class TribesGame.TrDmgType_APGrenade
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_APGrenade : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85581 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_APGrenade::pClassPointer = NULL;

// Class TribesGame.TrDmgType_ARC8
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_ARC8 : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85585 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_ARC8::pClassPointer = NULL;

// Class TribesGame.TrDmgType_ArmoredClaymore
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_ArmoredClaymore : public UTrDmgType_Mine
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85592 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_ArmoredClaymore::pClassPointer = NULL;

// Class TribesGame.TrDmgType_ArxBuster_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_ArxBuster_MKD : public UTrDmgType_ArxBuster
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85599 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_ArxBuster_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_ArxShotgun
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_ArxShotgun : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85603 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_ArxShotgun::pClassPointer = NULL;

// Class TribesGame.TrDmgType_AssaultRifle
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_AssaultRifle : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85607 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_AssaultRifle::pClassPointer = NULL;

// Class TribesGame.TrDmgType_AssaultRifle_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_AssaultRifle_MKD : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85611 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_AssaultRifle_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_AVMine
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_AVMine : public UTrDmgType_Mine
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85621 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_AVMine::pClassPointer = NULL;

// Class TribesGame.TrVehicleWeapon_FullAuto
// 0x0018 (0x070C - 0x06F4)
class ATrVehicleWeapon_FullAuto : public ATrVehicleWeapon
{
public:
	TArray< class USoundCue* >                         WeaponFireFullAutoSnd;                            		// 0x06F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   m_FireTail;                                       		// 0x0700 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_PostFireState;                                  		// 0x0704 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85630 ];

		return pClassPointer;
	};

	void RefireCheckTimer ( );
};

UClass* ATrVehicleWeapon_FullAuto::pClassPointer = NULL;

// Class TribesGame.TrVehicleWeapon_BeowulfGunner
// 0x0004 (0x0710 - 0x070C)
class ATrVehicleWeapon_BeowulfGunner : public ATrVehicleWeapon_FullAuto
{
public:
	class UTrSkelControl_SpinControl*                  m_BarrelSpinControl;                              		// 0x070C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85629 ];

		return pClassPointer;
	};

	void Activate ( );
	void InitVehicleGun ( );
};

UClass* ATrVehicleWeapon_BeowulfGunner::pClassPointer = NULL;

// Class TribesGame.TrVehicleWeapon_BeowulfPilot
// 0x0000 (0x06F4 - 0x06F4)
class ATrVehicleWeapon_BeowulfPilot : public ATrVehicleWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85634 ];

		return pClassPointer;
	};

};

UClass* ATrVehicleWeapon_BeowulfPilot::pClassPointer = NULL;

// Class TribesGame.TrDmgType_BoltLauncher
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_BoltLauncher : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85637 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_BoltLauncher::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Buckler
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Buckler : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85641 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Buckler::pClassPointer = NULL;

// Class TribesGame.TrDmgType_ChainGun
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_ChainGun : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85645 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_ChainGun::pClassPointer = NULL;

// Class TribesGame.TrDmgType_ChainGun_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_ChainGun_MKD : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85649 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_ChainGun_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Claymore
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Claymore : public UTrDmgType_Mine
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85653 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Claymore::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Claymore_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Claymore_MKD : public UTrDmgType_Mine
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85657 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Claymore_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Collision
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Collision : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85664 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Collision::pClassPointer = NULL;

// Class TribesGame.TrDmgType_ConcussionGrenade_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_ConcussionGrenade_MKD : public UTrDmgType_ConcussionGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85674 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_ConcussionGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_DiskToss
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_DiskToss : public UTrDmgType_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85687 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_DiskToss::pClassPointer = NULL;

// Class TribesGame.TrDmgType_EMPGrenade
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_EMPGrenade : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85694 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_EMPGrenade::pClassPointer = NULL;

// Class TribesGame.TrDmgType_EMPGrenade_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_EMPGrenade_MKD : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85698 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_EMPGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Falcon
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Falcon : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85702 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Falcon::pClassPointer = NULL;

// Class TribesGame.TrDmgType_ForceField
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_ForceField : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85712 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_ForceField::pClassPointer = NULL;

// Class TribesGame.TrVehicleWeapon_GravCyclePilot
// 0x0000 (0x06F4 - 0x06F4)
class ATrVehicleWeapon_GravCyclePilot : public ATrVehicleWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85717 ];

		return pClassPointer;
	};

};

UClass* ATrVehicleWeapon_GravCyclePilot::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Grenade
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Grenade : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85720 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Grenade::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Grenade_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Grenade_MKD : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85724 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Grenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_GrenadeLauncher
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_GrenadeLauncher : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85728 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_GrenadeLauncher::pClassPointer = NULL;

// Class TribesGame.TrDmgType_GrenadeT5
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_GrenadeT5 : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85732 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_GrenadeT5::pClassPointer = NULL;

// Class TribesGame.TrDmgType_GrenadeXL
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_GrenadeXL : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85736 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_GrenadeXL::pClassPointer = NULL;

// Class TribesGame.TrDmgType_GrenadeXL_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_GrenadeXL_MKD : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85740 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_GrenadeXL_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_HavocPilot
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_HavocPilot : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85747 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_HavocPilot::pClassPointer = NULL;

// Class TribesGame.TrVehicleWeapon_BurstShot
// 0x0010 (0x0704 - 0x06F4)
class ATrVehicleWeapon_BurstShot : public ATrVehicleWeapon
{
public:
	int                                                m_nCurrBurstShotCount;                            		// 0x06F4 (0x0004) [0x0000000000000000]              
	int                                                m_nBurstShotCount;                                		// 0x06F8 (0x0004) [0x0000000000000000]              
	struct FName                                       m_PostFireState;                                  		// 0x06FC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85750 ];

		return pClassPointer;
	};

};

UClass* ATrVehicleWeapon_BurstShot::pClassPointer = NULL;

// Class TribesGame.TrVehicleWeapon_HavocPilot
// 0x000C (0x0710 - 0x0704)
class ATrVehicleWeapon_HavocPilot : public ATrVehicleWeapon_BurstShot
{
public:
	class UMaterialInstanceConstant*                   m_BombMarkerTemplate;                             		// 0x0704 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_BombMarkerMIC;                                  		// 0x0708 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ATrEffect_MovableDecal*                      m_BombMarkerDecal;                                		// 0x070C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85749 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	void eventDestroyed ( );
	void PostBeginPlay ( );
};

UClass* ATrVehicleWeapon_HavocPilot::pClassPointer = NULL;

// Class TribesGame.TrDmgType_HeavyAPGrenade
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_HeavyAPGrenade : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85753 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_HeavyAPGrenade::pClassPointer = NULL;

// Class TribesGame.TrDmgType_HeavyAPGrenade_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_HeavyAPGrenade_MKD : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85757 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_HeavyAPGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_HeavyBoltLauncher
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_HeavyBoltLauncher : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85761 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_HeavyBoltLauncher::pClassPointer = NULL;

// Class TribesGame.TrDmgType_HeavyImpactNitron
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_HeavyImpactNitron : public UTrDmgType_ConcussionGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85765 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_HeavyImpactNitron::pClassPointer = NULL;

// Class TribesGame.TrDmgType_HeavySpinfusor
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_HeavySpinfusor : public UTrDmgType_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85772 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_HeavySpinfusor::pClassPointer = NULL;

// Class TribesGame.TrDmgType_HeavySpinfusor_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_HeavySpinfusor_MKD : public UTrDmgType_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85776 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_HeavySpinfusor_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_HeavyTwinfusor
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_HeavyTwinfusor : public UTrDmgType_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85780 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_HeavyTwinfusor::pClassPointer = NULL;

// Class TribesGame.TrDmgType_HERCGunner
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_HERCGunner : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85784 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_HERCGunner::pClassPointer = NULL;

// Class TribesGame.TrVehicleWeapon_HERCGunner
// 0x0000 (0x06F4 - 0x06F4)
class ATrVehicleWeapon_HERCGunner : public ATrVehicleWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85786 ];

		return pClassPointer;
	};

};

UClass* ATrVehicleWeapon_HERCGunner::pClassPointer = NULL;

// Class TribesGame.TrDmgType_HERCPilot
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_HERCPilot : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85789 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_HERCPilot::pClassPointer = NULL;

// Class TribesGame.TrVehicleWeapon_HERCPilot
// 0x0000 (0x06F4 - 0x06F4)
class ATrVehicleWeapon_HERCPilot : public ATrVehicleWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85791 ];

		return pClassPointer;
	};

};

UClass* ATrVehicleWeapon_HERCPilot::pClassPointer = NULL;

// Class TribesGame.TrDmgType_ImpactBomblets
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_ImpactBomblets : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85794 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_ImpactBomblets::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Lacerator
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Lacerator : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85798 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Lacerator::pClassPointer = NULL;

// Class TribesGame.TrDmgType_LightAssaultRifle
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_LightAssaultRifle : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85805 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_LightAssaultRifle::pClassPointer = NULL;

// Class TribesGame.TrDmgType_LightSpinfusor
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_LightSpinfusor : public UTrDmgType_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85809 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_LightSpinfusor::pClassPointer = NULL;

// Class TribesGame.TrDmgType_LightSpinfusor_100X
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_LightSpinfusor_100X : public UTrDmgType_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85813 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_LightSpinfusor_100X::pClassPointer = NULL;

// Class TribesGame.TrDmgType_LightSpinfusor_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_LightSpinfusor_MKD : public UTrDmgType_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85817 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_LightSpinfusor_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_LightTurret
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_LightTurret : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85824 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_LightTurret::pClassPointer = NULL;

// Class TribesGame.TrDmgType_LightTwinfusor
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_LightTwinfusor : public UTrDmgType_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85828 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_LightTwinfusor::pClassPointer = NULL;

// Class TribesGame.TrDmgType_LR1Mortar
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_LR1Mortar : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85832 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_LR1Mortar::pClassPointer = NULL;

// Class TribesGame.TrDmgType_MIRVGrenade
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_MIRVGrenade : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85839 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_MIRVGrenade::pClassPointer = NULL;

// Class TribesGame.TrDmgType_MIRVLauncher
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_MIRVLauncher : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85843 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_MIRVLauncher::pClassPointer = NULL;

// Class TribesGame.TrDmgType_MortarLauncher_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_MortarLauncher_MKD : public UTrDmgType_MortarLauncher
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85850 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_MortarLauncher_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_MotionSensor
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_MotionSensor : public UTrDmgType_Mine
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85854 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_MotionSensor::pClassPointer = NULL;

// Class TribesGame.TrDmgType_NJ4SMG
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_NJ4SMG : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85861 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_NJ4SMG::pClassPointer = NULL;

// Class TribesGame.TrDmgType_NJ4SMG_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_NJ4SMG_MKD : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85865 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_NJ4SMG_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_NJ5SMG
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_NJ5SMG : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85869 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_NJ5SMG::pClassPointer = NULL;

// Class TribesGame.TrDmgType_NovaColt
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_NovaColt : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85873 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_NovaColt::pClassPointer = NULL;

// Class TribesGame.TrDmgType_NovaColt_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_NovaColt_MKD : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85877 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_NovaColt_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_PersonalForceField
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_PersonalForceField : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85887 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_PersonalForceField::pClassPointer = NULL;

// Class TribesGame.TrDmgType_ProximityGrenade
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_ProximityGrenade : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85903 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_ProximityGrenade::pClassPointer = NULL;

// Class TribesGame.TrDmgType_RemoteArxBuster
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_RemoteArxBuster : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85910 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_RemoteArxBuster::pClassPointer = NULL;

// Class TribesGame.TrDmgType_RhinoSMG
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_RhinoSMG : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85931 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_RhinoSMG::pClassPointer = NULL;

// Class TribesGame.TrDmgType_RhinoSMG_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_RhinoSMG_MKD : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85935 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_RhinoSMG_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_RocketLauncher
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_RocketLauncher : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85939 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_RocketLauncher::pClassPointer = NULL;

// Class TribesGame.TrVehicleWeapon_ShrikePilot
// 0x0000 (0x0704 - 0x0704)
class ATrVehicleWeapon_ShrikePilot : public ATrVehicleWeapon_BurstShot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85959 ];

		return pClassPointer;
	};

};

UClass* ATrVehicleWeapon_ShrikePilot::pClassPointer = NULL;

// Class TribesGame.TrDmgType_SN7
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_SN7 : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85962 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_SN7::pClassPointer = NULL;

// Class TribesGame.TrDmgType_SN7_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_SN7_MKD : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85966 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_SN7_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_SpikeGrenade
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_SpikeGrenade : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85982 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_SpikeGrenade::pClassPointer = NULL;

// Class TribesGame.TrDmgType_SpikeGrenade_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_SpikeGrenade_MKD : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85986 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_SpikeGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_SpikeLauncher
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_SpikeLauncher : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85990 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_SpikeLauncher::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Spinfusor_100X
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Spinfusor_100X : public UTrDmgType_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85994 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Spinfusor_100X::pClassPointer = NULL;

// Class TribesGame.TrDmgType_SpinfusorD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_SpinfusorD : public UTrDmgType_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85998 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_SpinfusorD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_SpinfusorD_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_SpinfusorD_MKD : public UTrDmgType_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86002 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_SpinfusorD_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_SpinfusorM
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_SpinfusorM : public UTrDmgType_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86006 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_SpinfusorM::pClassPointer = NULL;

// Class TribesGame.TrDmgType_StealthSpinfusor
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_StealthSpinfusor : public UTrDmgType_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86010 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_StealthSpinfusor::pClassPointer = NULL;

// Class TribesGame.TrDmgType_STGrenade
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_STGrenade : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86014 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_STGrenade::pClassPointer = NULL;

// Class TribesGame.TrDmgType_StickyGrenade_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_StickyGrenade_MKD : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86021 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_StickyGrenade_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_StormShield
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_StormShield : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86025 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_StormShield::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Suicide
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Suicide : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86029 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Suicide::pClassPointer = NULL;

// Class TribesGame.TrDmgType_TC24
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_TC24 : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86036 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_TC24::pClassPointer = NULL;

// Class TribesGame.TrDmgType_TCN4SMG
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_TCN4SMG : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86040 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_TCN4SMG::pClassPointer = NULL;

// Class TribesGame.TrDmgType_TCN4SMG_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_TCN4SMG_MKD : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86044 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_TCN4SMG_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_TCNG
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_TCNG : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86048 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_TCNG::pClassPointer = NULL;

// Class TribesGame.TrDmgType_TCNG_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_TCNG_MKD : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86052 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_TCNG_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_ThrowingKnives
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_ThrowingKnives : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86056 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_ThrowingKnives::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Thumper
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Thumper : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86060 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Thumper::pClassPointer = NULL;

// Class TribesGame.TrDmgType_ThumperD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_ThumperD : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86064 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_ThumperD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_ThumperD_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_ThumperD_MKD : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86068 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_ThumperD_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_TrackingMissile_MKD
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_TrackingMissile_MKD : public UTrDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86075 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_TrackingMissile_MKD::pClassPointer = NULL;

// Class TribesGame.TrDmgType_Twinfusor
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_Twinfusor : public UTrDmgType_Spinfusor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86079 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_Twinfusor::pClassPointer = NULL;

// Class TribesGame.TrDmgType_VehicleExplosion
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_VehicleExplosion : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86083 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_VehicleExplosion::pClassPointer = NULL;

// Class TribesGame.TrDmgType_WallTurret
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_WallTurret : public UTrDmgType_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86087 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_WallTurret::pClassPointer = NULL;

// Class TribesGame.TrDmgType_X1Rifle
// 0x0000 (0x01A8 - 0x01A8)
class UTrDmgType_X1Rifle : public UTrDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86097 ];

		return pClassPointer;
	};

};

UClass* UTrDmgType_X1Rifle::pClassPointer = NULL;

// Class TribesGame.TrEffect_Blink
// 0x0000 (0x0058 - 0x0058)
class UTrEffect_Blink : public UTrEffect_Managed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86195 ];

		return pClassPointer;
	};

	void Apply ( class AActor* Target, struct FImpactInfo Impact );
};

UClass* UTrEffect_Blink::pClassPointer = NULL;

// Class TribesGame.TrEffect_GroundSpeed
// 0x0000 (0x0058 - 0x0058)
class UTrEffect_GroundSpeed : public UTrEffect_Managed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86210 ];

		return pClassPointer;
	};

	void Remove ( class AActor* Target );
	void Apply ( class AActor* Target, struct FImpactInfo Impact );
};

UClass* UTrEffect_GroundSpeed::pClassPointer = NULL;

// Class TribesGame.TrEffectForm_Shield
// 0x0000 (0x0058 - 0x0058)
class UTrEffectForm_Shield : public UTrEffectForm
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86227 ];

		return pClassPointer;
	};

};

UClass* UTrEffectForm_Shield::pClassPointer = NULL;

// Class TribesGame.TrEffect_MovableDecal
// 0x0000 (0x01E0 - 0x01E0)
class ATrEffect_MovableDecal : public ADecalActorMovable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86263 ];

		return pClassPointer;
	};

};

UClass* ATrEffect_MovableDecal::pClassPointer = NULL;

// Class TribesGame.TrEffect_Sensor
// 0x000C (0x0064 - 0x0058)
class UTrEffect_Sensor : public UTrEffect_Managed
{
public:
	float                                              m_fScannerFOV;                                    		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              m_fScannerRange;                                  		// 0x005C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bRequiresLOS : 1;                               		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDisplayInGame : 1;                             		// 0x0060 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bDisplayForeground : 1;                         		// 0x0060 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bSeeNormalEnemy : 1;                            		// 0x0060 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bSeeStealthedEnemy : 1;                         		// 0x0060 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bSeeLowHealthEnemy : 1;                         		// 0x0060 (0x0004) [0x0000000000000000] [0x00000020] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86276 ];

		return pClassPointer;
	};

	void Remove ( class AActor* Target );
	void Apply ( class AActor* Target, struct FImpactInfo Impact );
};

UClass* UTrEffect_Sensor::pClassPointer = NULL;

// Class TribesGame.TrEmitCameraEffect_Ashes
// 0x0000 (0x0204 - 0x0204)
class ATrEmitCameraEffect_Ashes : public ATrEmitCameraEffect_Speed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86345 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};

UClass* ATrEmitCameraEffect_Ashes::pClassPointer = NULL;

// Class TribesGame.TrEmitCameraEffect_Leaves
// 0x0000 (0x0204 - 0x0204)
class ATrEmitCameraEffect_Leaves : public ATrEmitCameraEffect_Speed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86349 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};

UClass* ATrEmitCameraEffect_Leaves::pClassPointer = NULL;

// Class TribesGame.TrEmitCameraEffect_Rain
// 0x0000 (0x0204 - 0x0204)
class ATrEmitCameraEffect_Rain : public ATrEmitCameraEffect_Speed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86353 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};

UClass* ATrEmitCameraEffect_Rain::pClassPointer = NULL;

// Class TribesGame.TrEmitCameraEffect_Tutorial
// 0x0000 (0x0204 - 0x0204)
class ATrEmitCameraEffect_Tutorial : public ATrEmitCameraEffect_Speed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86360 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};

UClass* ATrEmitCameraEffect_Tutorial::pClassPointer = NULL;

// Class TribesGame.TrPaperDollMainMenu
// 0x0021 (0x03AD - 0x038C)
class ATrPaperDollMainMenu : public ATrPaperDoll
{
public:
	unsigned long                                      m_bEditorMode : 1;                                		// 0x038C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bWasLastMeshSwapRequestMainMenuContentScene : 1;		// 0x038C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              m_fFullCharacterLightingContrastFactor;           		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUDKSkeletalMeshComponent* >         m_ChildSkeletalMeshComponents;                    		// 0x0394 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRotator                                    m_rZeroedRotation;                                		// 0x03A0 (0x000C) [0x0000000000000000]              
	unsigned char                                      m_OldContentDataType;                             		// 0x03AC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86387 ];

		return pClassPointer;
	};

	void AddChildrenMeshes ( class UTrMainMenuMeshInfo* Parent );
	void EmptyChildrenMeshes ( );
	void SetSpinning ( unsigned long bShouldSpin, unsigned long bReset );
	void DetachAndDestroyMeshAttachments ( class USkeletalMeshComponent* MeshComponent );
	void CreateAndAttachParticleSystems ( class USkeletalMeshComponent* MeshComponent, TArray< struct FParticleSystemInfo > ParticleSystems );
	void SetMainMeshInfo ( class UTrMainMenuMeshInfo* NewMainMeshInfo, unsigned char ContentDataType );
	void SetFamilyInfo ( class UClass* NewFamilyInfoClass, class UClass* DeviceClass, class UClass* skinClass, int TeamNum );
	void SetWeaponOnlyMesh ( class UClass* WeaponClass );
	void TryUpdatingPaperDoll ( );
	void OnDeviceContentDataClassLoaded ( class UClass* DeviceContentDataClass );
	void OnCharacterMeshContentDataClassLoaded ( class UClass* Skin3PDataClass );
	void SetMainMesh ( struct FPaperDollInfo NewInfo );
	struct FPaperDollInfo GetDevicePaperDollInfo ( class UClass* WeaponClass );
	void eventTick ( float DeltaTime );
	void eventPostBeginPlay ( );
};

UClass* ATrPaperDollMainMenu::pClassPointer = NULL;

// Class TribesGame.TrMainMenuContentData
// 0x000C (0x0048 - 0x003C)
class UTrMainMenuContentData : public UObject
{
public:
	TArray< struct FMeshData >                         m_MeshData;                                       		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86390 ];

		return pClassPointer;
	};

	void PreloadTextures ( float ForceDuration );
	void SendPaperDollANewMesh ( class ATrPaperDollMainMenu* MainMenuPaperDoll, unsigned char ContentDataType );
};

UClass* UTrMainMenuContentData::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_Infiltrator
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_Infiltrator : public UTrFamilyInfo_Light
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86473 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_Infiltrator::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_Pathfinder
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_Pathfinder : public UTrFamilyInfo_Light
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86474 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_Pathfinder::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Raider
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Raider : public UTrFamilyInfo_Medium
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86475 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Raider::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Technician
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Technician : public UTrFamilyInfo_Medium
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86476 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Technician::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Heavy_Brute
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Heavy_Brute : public UTrFamilyInfo_Heavy
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86477 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Heavy_Brute::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Heavy_Doombringer
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Heavy_Doombringer : public UTrFamilyInfo_Heavy
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86478 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Heavy_Doombringer::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Heavy_Juggernaught
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Heavy_Juggernaught : public UTrFamilyInfo_Heavy
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86479 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Heavy_Juggernaught::pClassPointer = NULL;

// Class TribesGame.TrExplosionLight_BaseTurretProjectile
// 0x0000 (0x0270 - 0x0270)
class UTrExplosionLight_BaseTurretProjectile : public UUDKExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86673 ];

		return pClassPointer;
	};

};

UClass* UTrExplosionLight_BaseTurretProjectile::pClassPointer = NULL;

// Class TribesGame.TrExplosionLight_LightTurretProjectile
// 0x0000 (0x0270 - 0x0270)
class UTrExplosionLight_LightTurretProjectile : public UUDKExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86675 ];

		return pClassPointer;
	};

};

UClass* UTrExplosionLight_LightTurretProjectile::pClassPointer = NULL;

// Class TribesGame.TrExplosionLight_Spinfusor
// 0x0000 (0x0270 - 0x0270)
class UTrExplosionLight_Spinfusor : public UUDKExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86677 ];

		return pClassPointer;
	};

};

UClass* UTrExplosionLight_Spinfusor::pClassPointer = NULL;

// Class TribesGame.TrExplosionLight_SpinfusorD
// 0x0000 (0x0270 - 0x0270)
class UTrExplosionLight_SpinfusorD : public UUDKExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86679 ];

		return pClassPointer;
	};

};

UClass* UTrExplosionLight_SpinfusorD::pClassPointer = NULL;

// Class TribesGame.TrExplosionLight_StealthSpinfusor
// 0x0000 (0x0270 - 0x0270)
class UTrExplosionLight_StealthSpinfusor : public UUDKExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86681 ];

		return pClassPointer;
	};

};

UClass* UTrExplosionLight_StealthSpinfusor::pClassPointer = NULL;

// Class TribesGame.TrExplosiveSpreeMessage
// 0x00BC (0x0120 - 0x0064)
class UTrExplosiveSpreeMessage : public UUTLocalMessage
{
public:
	struct FString                                     EndSpreeNote;                                     		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EndSelfSpree;                                     		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MultiKillString;                                  		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SpreeNote[ 0x5 ];                                 		// 0x0088 (0x003C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SelfSpreeNote[ 0x5 ];                             		// 0x00C4 (0x003C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class USoundNodeWave*                              SpreeSound[ 0x5 ];                                		// 0x0100 (0x0014) [0x0000000000000000]              
	struct FString                                     EndSpreeNoteTrailer;                              		// 0x0114 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86683 ];

		return pClassPointer;
	};

	class USoundNodeWave* AnnouncementSound ( int MessageIndex, class UObject* OptionalObject, class APlayerController* PC );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	int GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer );
};

UClass* UTrExplosiveSpreeMessage::pClassPointer = NULL;

// Class TribesGame.TrVehicle_GravCycle
// 0x0000 (0x0C8C - 0x0C8C)
class ATrVehicle_GravCycle : public ATrVehicle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86778 ];

		return pClassPointer;
	};

};

UClass* ATrVehicle_GravCycle::pClassPointer = NULL;

// Class TribesGame.TrVehicle_Beowulf
// 0x0000 (0x0CB0 - 0x0CB0)
class ATrVehicle_Beowulf : public ATrVehicle_Tank
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86779 ];

		return pClassPointer;
	};

};

UClass* ATrVehicle_Beowulf::pClassPointer = NULL;

// Class TribesGame.TrPerk
// 0x0004 (0x0868 - 0x0864)
class ATrPerk : public ATrDevice
{
public:
	unsigned long                                      bFree : 1;                                        		// 0x0864 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86796 ];

		return pClassPointer;
	};

};

UClass* ATrPerk::pClassPointer = NULL;

// Class TribesGame.TrPerk_SuperCapacitor
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_SuperCapacitor : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86795 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_SuperCapacitor::pClassPointer = NULL;

// Class TribesGame.TrPerk_Determination
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_Determination : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86797 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_Determination::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_Heavy
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_Heavy : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86798 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_Heavy::pClassPointer = NULL;

// Class TribesGame.TrSkin_Brute
// 0x0000 (0x0078 - 0x0078)
class UTrSkin_Brute : public UTrSkin
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86799 ];

		return pClassPointer;
	};

};

UClass* UTrSkin_Brute::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Heavy_Brute_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Heavy_Brute_BE : public UTrFamilyInfo_Heavy_Brute
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86800 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Heavy_Brute_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Heavy_Brute_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Heavy_Brute_DS : public UTrFamilyInfo_Heavy_Brute
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86804 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Heavy_Brute_DS::pClassPointer = NULL;

// Class TribesGame.TrSkin_Doombringer
// 0x0000 (0x0078 - 0x0078)
class UTrSkin_Doombringer : public UTrSkin
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86814 ];

		return pClassPointer;
	};

};

UClass* UTrSkin_Doombringer::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Heavy_Doombringer_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Heavy_Doombringer_BE : public UTrFamilyInfo_Heavy_Doombringer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86815 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Heavy_Doombringer_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Heavy_Doombringer_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Heavy_Doombringer_DS : public UTrFamilyInfo_Heavy_Doombringer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86817 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Heavy_Doombringer_DS::pClassPointer = NULL;

// Class TribesGame.TrSkin_Juggernaut
// 0x0000 (0x0078 - 0x0078)
class UTrSkin_Juggernaut : public UTrSkin
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86820 ];

		return pClassPointer;
	};

};

UClass* UTrSkin_Juggernaut::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Heavy_Juggernaught_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Heavy_Juggernaught_BE : public UTrFamilyInfo_Heavy_Juggernaught
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86821 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Heavy_Juggernaught_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Heavy_Juggernaught_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Heavy_Juggernaught_DS : public UTrFamilyInfo_Heavy_Juggernaught
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86823 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Heavy_Juggernaught_DS::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Heavy_Marauder
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Heavy_Marauder : public UTrFamilyInfo_Heavy
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86825 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Heavy_Marauder::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Heavy_Marauder_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Heavy_Marauder_BE : public UTrFamilyInfo_Heavy_Marauder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86827 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Heavy_Marauder_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Heavy_Marauder_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Heavy_Marauder_DS : public UTrFamilyInfo_Heavy_Marauder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86829 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Heavy_Marauder_DS::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Heavy_Rook
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Heavy_Rook : public UTrFamilyInfo_Heavy
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86831 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Heavy_Rook::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Heavy_Rook_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Heavy_Rook_BE : public UTrFamilyInfo_Heavy_Rook
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86833 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Heavy_Rook_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Heavy_Rook_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Heavy_Rook_DS : public UTrFamilyInfo_Heavy_Rook
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86835 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Heavy_Rook_DS::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_HeavyBloodEagle
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_HeavyBloodEagle : public UTrFamilyInfo_Heavy
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86837 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_HeavyBloodEagle::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_HeavyDiamondSword
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_HeavyDiamondSword : public UTrFamilyInfo_Heavy
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86839 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_HeavyDiamondSword::pClassPointer = NULL;

// Class TribesGame.TrVehicle_Shrike
// 0x0000 (0x0CDC - 0x0CDC)
class ATrVehicle_Shrike : public ATrVehicle_BaseFlying
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86845 ];

		return pClassPointer;
	};

	void SitDriver ( class AUTPawn* UTP, int SeatIndex );
};

UClass* ATrVehicle_Shrike::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_Architect
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_Architect : public UTrFamilyInfo_Light
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86853 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_Architect::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_Architect_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_Architect_BE : public UTrFamilyInfo_Light_Architect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86855 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_Architect_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_Architect_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_Architect_DS : public UTrFamilyInfo_Light_Architect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86857 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_Architect_DS::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_Light
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_Light : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86863 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_Light::pClassPointer = NULL;

// Class TribesGame.TrSkin_Infiltrator
// 0x0000 (0x0078 - 0x0078)
class UTrSkin_Infiltrator : public UTrSkin
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86864 ];

		return pClassPointer;
	};

};

UClass* UTrSkin_Infiltrator::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_Infiltrator_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_Infiltrator_BE : public UTrFamilyInfo_Light_Infiltrator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86865 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_Infiltrator_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_Infiltrator_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_Infiltrator_DS : public UTrFamilyInfo_Light_Infiltrator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86867 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_Infiltrator_DS::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_Jumper
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_Jumper : public UTrFamilyInfo_Light
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86869 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_Jumper::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_Jumper_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_Jumper_BE : public UTrFamilyInfo_Light_Jumper
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86871 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_Jumper_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_Jumper_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_Jumper_DS : public UTrFamilyInfo_Light_Jumper
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86873 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_Jumper_DS::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_NakedPathfinder
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_NakedPathfinder : public UTrFamilyInfo_Light
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86875 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_NakedPathfinder::pClassPointer = NULL;

// Class TribesGame.TrSkin_Pathfinder
// 0x0000 (0x0078 - 0x0078)
class UTrSkin_Pathfinder : public UTrSkin
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86877 ];

		return pClassPointer;
	};

};

UClass* UTrSkin_Pathfinder::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_NakedPathfinder_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_NakedPathfinder_BE : public UTrFamilyInfo_Light_NakedPathfinder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86878 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_NakedPathfinder_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_NakedPathfinder_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_NakedPathfinder_DS : public UTrFamilyInfo_Light_NakedPathfinder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86880 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_NakedPathfinder_DS::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_Pathfinder_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_Pathfinder_BE : public UTrFamilyInfo_Light_Pathfinder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86883 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_Pathfinder_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_Pathfinder_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_Pathfinder_DS : public UTrFamilyInfo_Light_Pathfinder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86885 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_Pathfinder_DS::pClassPointer = NULL;

// Class TribesGame.TrSkin_Sentinel
// 0x0000 (0x0078 - 0x0078)
class UTrSkin_Sentinel : public UTrSkin
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86888 ];

		return pClassPointer;
	};

};

UClass* UTrSkin_Sentinel::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_Sentinel_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_Sentinel_BE : public UTrFamilyInfo_Light_Sentinel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86889 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_Sentinel_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_Sentinel_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_Sentinel_DS : public UTrFamilyInfo_Light_Sentinel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86891 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_Sentinel_DS::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_Wraith
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_Wraith : public UTrFamilyInfo_Light
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86893 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_Wraith::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_Wraith_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_Wraith_BE : public UTrFamilyInfo_Light_Wraith
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86895 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_Wraith_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Light_Wraith_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Light_Wraith_DS : public UTrFamilyInfo_Light_Wraith
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86897 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Light_Wraith_DS::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_LightBloodEagle
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_LightBloodEagle : public UTrFamilyInfo_Light
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86899 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_LightBloodEagle::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_LightDiamondSword
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_LightDiamondSword : public UTrFamilyInfo_Light
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86901 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_LightDiamondSword::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Engineer
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Engineer : public UTrFamilyInfo_Medium
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86910 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Engineer::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Engineer_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Engineer_BE : public UTrFamilyInfo_Medium_Engineer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86912 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Engineer_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Engineer_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Engineer_DS : public UTrFamilyInfo_Medium_Engineer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86916 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Engineer_DS::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_Medium
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_Medium : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86925 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_Medium::pClassPointer = NULL;

// Class TribesGame.TrSkin_Raider
// 0x0000 (0x0078 - 0x0078)
class UTrSkin_Raider : public UTrSkin
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86926 ];

		return pClassPointer;
	};

};

UClass* UTrSkin_Raider::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Raider_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Raider_BE : public UTrFamilyInfo_Medium_Raider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86927 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Raider_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Raider_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Raider_DS : public UTrFamilyInfo_Medium_Raider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86929 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Raider_DS::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Ranger
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Ranger : public UTrFamilyInfo_Medium
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86931 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Ranger::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Ranger_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Ranger_BE : public UTrFamilyInfo_Medium_Ranger
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86933 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Ranger_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Ranger_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Ranger_DS : public UTrFamilyInfo_Medium_Ranger
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86935 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Ranger_DS::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Scrambler
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Scrambler : public UTrFamilyInfo_Medium
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86937 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Scrambler::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Scrambler_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Scrambler_BE : public UTrFamilyInfo_Medium_Scrambler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86939 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Scrambler_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Scrambler_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Scrambler_DS : public UTrFamilyInfo_Medium_Scrambler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86941 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Scrambler_DS::pClassPointer = NULL;

// Class TribesGame.TrSkin_Soldier
// 0x0000 (0x0078 - 0x0078)
class UTrSkin_Soldier : public UTrSkin
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86944 ];

		return pClassPointer;
	};

};

UClass* UTrSkin_Soldier::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Soldier_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Soldier_BE : public UTrFamilyInfo_Medium_Soldier
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86945 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Soldier_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Soldier_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Soldier_DS : public UTrFamilyInfo_Medium_Soldier
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86947 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Soldier_DS::pClassPointer = NULL;

// Class TribesGame.TrSkin_Technician
// 0x0000 (0x0078 - 0x0078)
class UTrSkin_Technician : public UTrSkin
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86950 ];

		return pClassPointer;
	};

};

UClass* UTrSkin_Technician::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Technician_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Technician_BE : public UTrFamilyInfo_Medium_Technician
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86960 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Technician_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Technician_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Technician_DS : public UTrFamilyInfo_Medium_Technician
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86962 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Technician_DS::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Warder
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Warder : public UTrFamilyInfo_Medium
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86964 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Warder::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Warder_BE
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Warder_BE : public UTrFamilyInfo_Medium_Warder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86966 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Warder_BE::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_Medium_Warder_DS
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_Medium_Warder_DS : public UTrFamilyInfo_Medium_Warder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86968 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_Medium_Warder_DS::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_MediumBloodEagle
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_MediumBloodEagle : public UTrFamilyInfo_Medium
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86970 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_MediumBloodEagle::pClassPointer = NULL;

// Class TribesGame.TrFamilyInfo_MediumDiamondSword
// 0x0000 (0x070C - 0x070C)
class UTrFamilyInfo_MediumDiamondSword : public UTrFamilyInfo_Medium
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86972 ];

		return pClassPointer;
	};

};

UClass* UTrFamilyInfo_MediumDiamondSword::pClassPointer = NULL;

// Class TribesGame.TrFirstBloodMessage
// 0x000C (0x0070 - 0x0064)
class UTrFirstBloodMessage : public UUTLocalMessage
{
public:
	struct FString                                     FirstBlood;                                       		// 0x0064 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86976 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrFirstBloodMessage::pClassPointer = NULL;

// Class TribesGame.TrFlagRabbit
// 0x0000 (0x03A4 - 0x03A4)
class ATrFlagRabbit : public ATrFlagBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87711 ];

		return pClassPointer;
	};

	void BroadcastReturnedMessage ( );
	void SendHome ( class AController* Returner );
	void ClearHolder ( );
	void SetHolder ( class AController* C );
};

UClass* ATrFlagRabbit::pClassPointer = NULL;

// Class TribesGame.TrFlagTeamRabbit
// 0x0000 (0x03A4 - 0x03A4)
class ATrFlagTeamRabbit : public ATrFlagBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87727 ];

		return pClassPointer;
	};

	void ClientReturnedHome ( );
	void BroadcastReturnedMessage ( );
	void SendHome ( class AController* Returner );
	void ClearHolder ( );
	void SetHolder ( class AController* C );
};

UClass* ATrFlagTeamRabbit::pClassPointer = NULL;

// Class TribesGame.TrMiscellaneousMessage
// 0x0038 (0x009C - 0x0064)
class UTrMiscellaneousMessage : public UUTLocalMessage
{
public:
	class USoundCue*                                   EnemyBloodEagleBoughtHerc;                        		// 0x0064 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   EnemyDiamondSwordBoughtHerc;                      		// 0x0068 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   FriendBloodEagleBoughtHerc;                       		// 0x006C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   FriendDiamondSwordBoughtHerc;                     		// 0x0070 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   BloodEagleCloseToWin;                             		// 0x0074 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   BloodEagleCloseToLoss;                            		// 0x0078 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   DiamondSwordCloseToWin;                           		// 0x007C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   DiamondSwordCloseToLoss;                          		// 0x0080 (0x0004) [0x0000000000000000]              
	struct FString                                     OurTeamBoughtHerc;                                		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnemyTeamBoughtHerc;                              		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89223 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrMiscellaneousMessage::pClassPointer = NULL;

// Class TribesGame.TrKillingSpreeMessage
// 0x00BC (0x0120 - 0x0064)
class UTrKillingSpreeMessage : public UUTLocalMessage
{
public:
	struct FString                                     EndSpreeNote;                                     		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EndSelfSpree;                                     		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MultiKillString;                                  		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SpreeNote[ 0x5 ];                                 		// 0x0088 (0x003C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SelfSpreeNote[ 0x5 ];                             		// 0x00C4 (0x003C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class USoundNodeWave*                              SpreeSound[ 0x5 ];                                		// 0x0100 (0x0014) [0x0000000000000000]              
	struct FString                                     EndSpreeNoteTrailer;                              		// 0x0114 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89268 ];

		return pClassPointer;
	};

	class USoundNodeWave* AnnouncementSound ( int MessageIndex, class UObject* OptionalObject, class APlayerController* PC );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	int GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer );
};

UClass* UTrKillingSpreeMessage::pClassPointer = NULL;

// Class TribesGame.TrGame_TRTDM
// 0x0000 (0x05B0 - 0x05B0)
class ATrGame_TRTDM : public ATrGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89282 ];

		return pClassPointer;
	};

	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void ScoreKill ( class AController* Killer, class AController* Other );
};

UClass* ATrGame_TRTDM::pClassPointer = NULL;

// Class TribesGame.TrVictoryMessage
// 0x008C (0x00F0 - 0x0064)
class UTrVictoryMessage : public UUTLocalMessage
{
public:
	class USoundCue*                                   DiamondSwordSounds[ 0x4 ];                        		// 0x0064 (0x0010) [0x0000000000000000]              
	class USoundCue*                                   BloodEagleSounds[ 0x4 ];                          		// 0x0074 (0x0010) [0x0000000000000000]              
	struct FString                                     DominantVictory;                                  		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DominantDefeat;                                   		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NormalVictory;                                    		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NormalDefeat;                                     		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BloodEagleVictory;                                		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DiamondSwordVictory;                              		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerWonRound;                                   		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DrawGame;                                         		// 0x00D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrainingComplete;                                 		// 0x00E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89284 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrVictoryMessage::pClassPointer = NULL;

// Class TribesGame.TrGameStartMessage
// 0x000C (0x0070 - 0x0064)
class UTrGameStartMessage : public UUTLocalMessage
{
public:
	struct FString                                     MatchAboutToStart;                                		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89295 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrGameStartMessage::pClassPointer = NULL;

// Class TribesGame.TrGameNextRoundMessage
// 0x0018 (0x007C - 0x0064)
class UTrGameNextRoundMessage : public UUTLocalMessage
{
public:
	struct FString                                     Round;                                            		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BeginsIn;                                         		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89596 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrGameNextRoundMessage::pClassPointer = NULL;

// Class TribesGame.TrHUDTeam
// 0x0004 (0x09C0 - 0x09BC)
class ATrHUDTeam : public ATrHUD
{
public:
	int                                                m_nLastMessageCode;                               		// 0x09BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89615 ];

		return pClassPointer;
	};

	void Timer ( );
};

UClass* ATrHUDTeam::pClassPointer = NULL;

// Class TribesGame.TrGameSettingsTrArena
// 0x0000 (0x00D0 - 0x00D0)
class UTrGameSettingsTrArena : public UTrGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89616 ];

		return pClassPointer;
	};

};

UClass* UTrGameSettingsTrArena::pClassPointer = NULL;

// Class TribesGame.TrPlayerStart
// 0x0004 (0x02D0 - 0x02CC)
class ATrPlayerStart : public AUDKTeamPlayerStart
{
public:
	class ATrCaHCapturePoint*                          CaHCapturePoint;                                  		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89671 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerStart::pClassPointer = NULL;

// Class TribesGame.TrGameSettingsTrCaH
// 0x0000 (0x00D0 - 0x00D0)
class UTrGameSettingsTrCaH : public UTrGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89693 ];

		return pClassPointer;
	};

};

UClass* UTrGameSettingsTrCaH::pClassPointer = NULL;

// Class TribesGame.TrGameSettingsTrCTFBlitz
// 0x0000 (0x00D0 - 0x00D0)
class UTrGameSettingsTrCTFBlitz : public UTrGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89783 ];

		return pClassPointer;
	};

};

UClass* UTrGameSettingsTrCTFBlitz::pClassPointer = NULL;

// Class TribesGame.TrGameSettingsTrDaD
// 0x0000 (0x00D0 - 0x00D0)
class UTrGameSettingsTrDaD : public UTrGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89849 ];

		return pClassPointer;
	};

};

UClass* UTrGameSettingsTrDaD::pClassPointer = NULL;

// Class TribesGame.TrGame_TrSiege
// 0x0018 (0x05C8 - 0x05B0)
class ATrGame_TrSiege : public ATrGame
{
public:
	TArray< class ATrPowerGenerator_Siege* >           m_Phase1OnlineGenerators;                         		// 0x05B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              m_bRoundOneTimeSecs;                              		// 0x05BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bWasCoreDestroyedInRoundOne : 1;                		// 0x05C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                m_CurrentPhase;                                   		// 0x05C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89935 ];

		return pClassPointer;
	};

	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void SwapTeams ( );
	void SetPhase ( int PhaseNumber );
	void ResetGame ( );
	void RoundOneOver ( unsigned long bDestroyedCore );
	bool IsInRoundOne ( );
	void OnCoreBlownUp ( );
	void OnGeneratorBlownUp ( class ATrPowerGenerator_Siege* G );
	void PostBeginPlay ( );
};

UClass* ATrGame_TrSiege::pClassPointer = NULL;

// Class TribesGame.TrPowerGenerator_Siege
// 0x0000 (0x0588 - 0x0588)
class ATrPowerGenerator_Siege : public ATrPowerGenerator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89938 ];

		return pClassPointer;
	};

};

UClass* ATrPowerGenerator_Siege::pClassPointer = NULL;

// Class TribesGame.TrSiegeCore
// 0x0000 (0x0550 - 0x0550)
class ATrSiegeCore : public ATrGameObjective
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89951 ];

		return pClassPointer;
	};

};

UClass* ATrSiegeCore::pClassPointer = NULL;

// Class TribesGame.TrGameSettingsTrSiege
// 0x0000 (0x00D0 - 0x00D0)
class UTrGameSettingsTrSiege : public UTrGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89969 ];

		return pClassPointer;
	};

};

UClass* UTrGameSettingsTrSiege::pClassPointer = NULL;

// Class TribesGame.TrGame_TrStorm
// 0x0044 (0x05F4 - 0x05B0)
class ATrGame_TrStorm : public ATrGame
{
public:
	struct FCarrier                                    m_Carriers[ 0x2 ];                                		// 0x05B0 (0x0018) [0x0000000000000000]              
	TArray< struct FMissile >                          m_fActiveMissiles;                                		// 0x05C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              m_fMissileDamageAmount;                           		// 0x05D4 (0x0004) [0x0000000000000000]              
	class ATrStormCarrierShield*                       m_CarrierShields[ 0x2 ];                          		// 0x05D8 (0x0008) [0x0000000000000000]              
	class ATrStormCore*                                m_CarrierCore[ 0x2 ];                             		// 0x05E0 (0x0008) [0x0000000000000000]              
	int                                                m_nMaxShieldHealth;                               		// 0x05E8 (0x0004) [0x0000000000000000]              
	int                                                m_nMaxCoreHealth;                                 		// 0x05EC (0x0004) [0x0000000000000000]              
	float                                              MatchEndingTime;                                  		// 0x05F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89970 ];

		return pClassPointer;
	};

	int DetermineWinningTeam ( );
	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void TakeDamageFromCore ( unsigned char TeamNum, int DamageAmount );
	void CarrierDestroyed ( unsigned char TeamNum );
	void TakeHealthDamage ( unsigned char TeamNum, int DamageAmount );
	void ExplodeMissile ( unsigned char TeamNum );
	void eventTick ( float DeltaTime );
	void MissileFired ( class ATrStormControlPoint* FiredFrom, float TimeTillExplosion, unsigned char TargetTeam );
	void PostBeginPlay ( );
};

UClass* ATrGame_TrStorm::pClassPointer = NULL;

// Class TribesGame.TrStormCore
// 0x0008 (0x0558 - 0x0550)
class ATrStormCore : public ATrGameObjective
{
public:
	class UMaterialInstanceConstant*                   m_ShieldBarMIC;                                   		// 0x0550 (0x0004) [0x0000000000000000]              
	float                                              m_fShieldBarPlacementY;                           		// 0x0554 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89982 ];

		return pClassPointer;
	};

	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void OnCoreDestroyed ( );
	float GetShieldAmount ( );
	float GetHealthAmount ( );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
};

UClass* ATrStormCore::pClassPointer = NULL;

// Class TribesGame.TrStormCarrierShield
// 0x0008 (0x021C - 0x0214)
class ATrStormCarrierShield : public ADynamicSMActor
{
public:
	unsigned long                                      m_bAreShieldsUp : 1;                              		// 0x0214 (0x0004) [0x0000000000000000] [0x00000001] 
	class ATrStormCore*                                m_AssociatedCarrierCore;                          		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89984 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void OnShieldsDestroyed ( );
};

UClass* ATrStormCarrierShield::pClassPointer = NULL;

// Class TribesGame.TrStormControlPoint
// 0x0038 (0x0588 - 0x0550)
class ATrStormControlPoint : public ATrGameObjective
{
public:
	unsigned char                                      r_CurrentControlPointState;                       		// 0x0550 (0x0001) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fTransitionSpeed;                               		// 0x0554 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCurrentTransitionAmount;                       		// 0x0558 (0x0004) [0x0000000000000000]              
	float                                              m_fMissileLaunchTracker;                          		// 0x055C (0x0004) [0x0000000000000000]              
	float                                              m_fMissileLaunchTrackerSpeed;                     		// 0x0560 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMissileFlightTime;                             		// 0x0564 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fControlDescriptionPlacementY;                  		// 0x0568 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLaunchTimeDescriptionPlacementY;               		// 0x056C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ATrInventoryStation_Storm* >         m_InventoryStations;                              		// 0x0570 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     m_sControlPointName;                              		// 0x057C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89990 ];

		return pClassPointer;
	};

	struct FString GetScreenName ( class APlayerController* PC );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	unsigned char GetControlPointState ( );
	void SetControlPointState ( unsigned char NewControlPointState );
	void BeginTransition ( unsigned char TeamNum );
	void FireMissile ( unsigned char TeamNum );
	void eventTick ( float DeltaTime );
	void OnPawnTouched ( class ATrPawn* TRP );
};

UClass* ATrStormControlPoint::pClassPointer = NULL;

// Class TribesGame.TrStormMessage
// 0x00B4 (0x0118 - 0x0064)
class UTrStormMessage : public UUTLocalMessage
{
public:
	struct FString                                     ControlPointWon;                                  		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ControlPointLost;                                 		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ControlPointTransitioning;                        		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyCarrierShields50Percent;                  		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnemyCarrierShields50Percent;                     		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyCarrierShieldsDown;                       		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnemyCarrierShieldsDown;                          		// 0x00AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnemyCore75Percent;                               		// 0x00B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnemyCore50Percent;                               		// 0x00C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnemyCore25Percent;                               		// 0x00D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnemyCoreDestroyed;                               		// 0x00DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyCore75Percent;                            		// 0x00E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyCore50Percent;                            		// 0x00F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyCore25Percent;                            		// 0x0100 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyCoreDestroyed;                            		// 0x010C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90013 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrStormMessage::pClassPointer = NULL;

// Class TribesGame.TrGameSettingsTrStorm
// 0x0000 (0x00D0 - 0x00D0)
class UTrGameSettingsTrStorm : public UTrGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90053 ];

		return pClassPointer;
	};

};

UClass* UTrGameSettingsTrStorm::pClassPointer = NULL;

// Class TribesGame.TrTeamRabbitMessage
// 0x0060 (0x00C4 - 0x0064)
class UTrTeamRabbitMessage : public UUTLocalMessage
{
public:
	struct FString                                     YouHaveTheFlag;                                   		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TheEnemyHasTheFlag;                               		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     YourTeamHasTheFlag;                               		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KillBonus;                                        		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DroppedTheFlag;                                   		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     YourTeamHas;                                      		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnemyTeamHas;                                     		// 0x00AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LivesLeft;                                        		// 0x00B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90096 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrTeamRabbitMessage::pClassPointer = NULL;

// Class TribesGame.TrGameSettingsTrTeamRabbit
// 0x0000 (0x00D0 - 0x00D0)
class UTrGameSettingsTrTeamRabbit : public UTrGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90137 ];

		return pClassPointer;
	};

};

UClass* UTrGameSettingsTrTeamRabbit::pClassPointer = NULL;

// Class TribesGame.TrPlayerController_Training
// 0x0000 (0x0D68 - 0x0D68)
class ATrPlayerController_Training : public ATrPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90159 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerController_Training::pClassPointer = NULL;

// Class TribesGame.TrTimerMessage
// 0x0034 (0x0098 - 0x0064)
class UTrTimerMessage : public UUTLocalMessage
{
public:
	class USoundCue*                                   m_sFiveMinuteWarningDS;                           		// 0x0064 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_sOneMinuteWarningDS;                            		// 0x0068 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_sFiveMinuteWarningBE;                           		// 0x006C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_sOneMinuteWarningBE;                            		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FString                                     TimerMessage[ 0x3 ];                              		// 0x0074 (0x0024) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91621 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrTimerMessage::pClassPointer = NULL;

// Class TribesGame.TrGameSearchTrArena
// 0x0000 (0x00EC - 0x00EC)
class UTrGameSearchTrArena : public UTrGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93022 ];

		return pClassPointer;
	};

};

UClass* UTrGameSearchTrArena::pClassPointer = NULL;

// Class TribesGame.TrGameSearchTrCaH
// 0x0000 (0x00EC - 0x00EC)
class UTrGameSearchTrCaH : public UTrGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93024 ];

		return pClassPointer;
	};

};

UClass* UTrGameSearchTrCaH::pClassPointer = NULL;

// Class TribesGame.TrGameSearchTrCTFBlitz
// 0x0000 (0x00EC - 0x00EC)
class UTrGameSearchTrCTFBlitz : public UTrGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93027 ];

		return pClassPointer;
	};

};

UClass* UTrGameSearchTrCTFBlitz::pClassPointer = NULL;

// Class TribesGame.TrGameSearchTrDaD
// 0x0000 (0x00EC - 0x00EC)
class UTrGameSearchTrDaD : public UTrGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93029 ];

		return pClassPointer;
	};

};

UClass* UTrGameSearchTrDaD::pClassPointer = NULL;

// Class TribesGame.TrGameSearchTrSiege
// 0x0000 (0x00EC - 0x00EC)
class UTrGameSearchTrSiege : public UTrGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93032 ];

		return pClassPointer;
	};

};

UClass* UTrGameSearchTrSiege::pClassPointer = NULL;

// Class TribesGame.TrGameSearchTrStorm
// 0x0000 (0x00EC - 0x00EC)
class UTrGameSearchTrStorm : public UTrGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93034 ];

		return pClassPointer;
	};

};

UClass* UTrGameSearchTrStorm::pClassPointer = NULL;

// Class TribesGame.TrGameSearchTrTeamRabbit
// 0x0000 (0x00EC - 0x00EC)
class UTrGameSearchTrTeamRabbit : public UTrGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93037 ];

		return pClassPointer;
	};

};

UClass* UTrGameSearchTrTeamRabbit::pClassPointer = NULL;

// Class TribesGame.TrGameSearchTrTraining
// 0x0000 (0x00EC - 0x00EC)
class UTrGameSearchTrTraining : public UTrGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93039 ];

		return pClassPointer;
	};

};

UClass* UTrGameSearchTrTraining::pClassPointer = NULL;

// Class TribesGame.TrGameSettingsTrTraining
// 0x0000 (0x00D0 - 0x00D0)
class UTrGameSettingsTrTraining : public UTrGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 94424 ];

		return pClassPointer;
	};

};

UClass* UTrGameSettingsTrTraining::pClassPointer = NULL;

// Class TribesGame.TrGeneratorMessage
// 0x003C (0x00A0 - 0x0064)
class UTrGeneratorMessage : public UUTLocalMessage
{
public:
	class USoundCue*                                   BloodEagleSounds[ 0x3 ];                          		// 0x0064 (0x000C) [0x0000000000000000]              
	class USoundCue*                                   DiamondSwordSounds[ 0x3 ];                        		// 0x0070 (0x000C) [0x0000000000000000]              
	struct FString                                     OurGeneratorDestroyed;                            		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnemyGeneratorDestroyed;                          		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OurGeneratorRestored;                             		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 94451 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrGeneratorMessage::pClassPointer = NULL;

// Class TribesGame.TrHelpTextManager_Training
// 0x0121 (0x0611 - 0x04F0)
class ATrHelpTextManager_Training : public ATrHelpTextManager
{
public:
	struct FString                                     m_TrainingHelpTextExample1;                       		// 0x04F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextExample2;                       		// 0x04FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSkiMessage1;                    		// 0x0508 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSkiMessage2;                    		// 0x0514 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSkiMessage3;                    		// 0x0520 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSkiMessage4;                    		// 0x052C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSkiMessage5;                    		// 0x0538 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSkiAdvMessage1;                 		// 0x0544 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSkiAdvMessage2;                 		// 0x0550 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSkiAdvMessage3;                 		// 0x055C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSkiAdvMessage4;                 		// 0x0568 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSkiAdvMessage5;                 		// 0x0574 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextExample1MenuTitle;              		// 0x0580 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextExample2MenuTitle;              		// 0x058C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSki1MenuTitle;                  		// 0x0598 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSki2MenuTitle;                  		// 0x05A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSki3MenuTitle;                  		// 0x05B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSki4MenuTitle;                  		// 0x05BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSki5MenuTitle;                  		// 0x05C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSkiAdv1MenuTitle;               		// 0x05D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSkiAdv2MenuTitle;               		// 0x05E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSkiAdv3MenuTitle;               		// 0x05EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSkiAdv4MenuTitle;               		// 0x05F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_TrainingHelpTextSkiAdv5MenuTitle;               		// 0x0604 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned char                                      m_CurrentHelpTextTrainingType;                    		// 0x0610 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 94479 ];

		return pClassPointer;
	};

	void UpdateHUD ( );
	void RequestHelpText_Training ( unsigned char RequestedType );
	void RemoveHelpText ( unsigned char TypeToRemove, float Time, unsigned long bDoNotSuppress );
	bool RequestHelpText ( unsigned char RequestedType );
	bool CheckDestroy ( );
	void UpdateTypesToRemoveOnTimers ( float DeltaTime );
	void InitHelpTextManager ( );
};

UClass* ATrHelpTextManager_Training::pClassPointer = NULL;

// Class TribesGame.TrTeamRabbitStats
// 0x0020 (0x005C - 0x003C)
class UTrTeamRabbitStats : public UObject
{
public:
	int                                                MyTeam;                                           		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                RemainingTime;                                    		// 0x0040 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsActive : 1;                                    		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bForcingUpdate : 1;                               		// 0x0044 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                TeamScore[ 0x2 ];                                 		// 0x0048 (0x0008) [0x0000000000000000]              
	int                                                TeamHoldingFlag;                                  		// 0x0050 (0x0004) [0x0000000000000000]              
	class UGfxTrHud*                                   m_MoviePlayer;                                    		// 0x0054 (0x0004) [0x0000000000000000]              
	class ATrPlayerController*                         TrPC;                                             		// 0x0058 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 95103 ];

		return pClassPointer;
	};

	void ForceUpdate ( );
	struct FString FormatTime ( int Seconds );
	void UpdateTime ( class ATrGameReplicationInfo* GRI );
	void UpdateTeamScore ( class ATrGameReplicationInfo* GRI );
	void UpdateFlagStatus ( class ATrGameReplicationInfo* GRI );
	void UpdateTeam ( );
	void Tick ( );
	void Hide ( );
	void Show ( );
	void Initialize ( class ATrPlayerController* PC, class UGfxTrHud* MP );
};

UClass* UTrTeamRabbitStats::pClassPointer = NULL;

// Class TribesGame.TrHUDTeamCTFStats
// 0x0040 (0x007C - 0x003C)
class UTrHUDTeamCTFStats : public UObject
{
public:
	int                                                MyTeam;                                           		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                RemainingTime;                                    		// 0x0040 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsActive : 1;                                    		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                FlagReturnTime[ 0x2 ];                            		// 0x0048 (0x0008) [0x0000000000000000]              
	int                                                TeamScore[ 0x2 ];                                 		// 0x0050 (0x0008) [0x0000000000000000]              
	int                                                GeneratorPower[ 0x2 ];                            		// 0x0058 (0x0008) [0x0000000000000000]              
	int                                                GeneratorDowntime[ 0x2 ];                         		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned char                                      FlagState[ 0x2 ];                                 		// 0x0068 (0x0002) [0x0000000000000000]              
	unsigned char                                      bEmptyFlagStatus[ 0x2 ];                          		// 0x006A (0x0002) [0x0000000000000000]              
	class APlayerReplicationInfo*                      FlagHolderPRI[ 0x2 ];                             		// 0x006C (0x0008) [0x0000000000000000]              
	class UGfxTrHud*                                   m_MoviePlayer;                                    		// 0x0074 (0x0004) [0x0000000000000000]              
	class ATrPlayerController*                         TrPC;                                             		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 95105 ];

		return pClassPointer;
	};

	void ForceUpdate ( );
	struct FString FormatTime ( int Seconds );
	void UpdateTime ( class ATrGameReplicationInfo* GRI );
	void UpdateTeamScore ( class ATrGameReplicationInfo* GRI );
	void UpdateGeneratorStatus ( class ATrGameReplicationInfo* GRI );
	void UpdateFlagStatus ( class ATrGameReplicationInfo* GRI );
	int GetTeamIndex ( int I );
	void UpdateTeam ( );
	void Tick ( );
	void Hide ( );
	void Show ( );
	void Initialize ( class ATrPlayerController* PC, class UGfxTrHud* MP );
};

UClass* UTrHUDTeamCTFStats::pClassPointer = NULL;

// Class TribesGame.TrRabbitLeaderboard
// 0x0038 (0x0074 - 0x003C)
class UTrRabbitLeaderboard : public UObject
{
public:
	int                                                PrevSlots;                                        		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                RemainingTime;                                    		// 0x0040 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUpdated : 1;                                     		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bInitialized : 1;                                 		// 0x0044 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsActive : 1;                                    		// 0x0044 (0x0004) [0x0000000000000000] [0x00000004] 
	class UGfxTrHud*                                   m_MoviePlayer;                                    		// 0x0048 (0x0004) [0x0000000000000000]              
	class ATrPlayerController*                         TrPC;                                             		// 0x004C (0x0004) [0x0000000000000000]              
	struct FLeaderboardSlot                            LeaderboardSlots[ 0x3 ];                          		// 0x0050 (0x0024) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 95107 ];

		return pClassPointer;
	};

	void ForceUpdate ( );
	struct FString FormatTime ( int Seconds );
	void UpdateTime ( class ATrGameReplicationInfo* GRI );
	bool UpdateLeaderboard ( int Index, struct FName PRIName, struct FString PlayerName, int Score );
	void UpdatePlayers ( class ATrGameReplicationInfo* GRI );
	void Tick ( );
	void Hide ( );
	void Show ( );
	void Initialize ( class ATrPlayerController* PC, class UGfxTrHud* MP );
};

UClass* UTrRabbitLeaderboard::pClassPointer = NULL;

// Class TribesGame.TrScoreboard
// 0x0660 (0x069C - 0x003C)
class UTrScoreboard : public UObject
{
public:
	int                                                MAX_PLAYER_INDEX;                                 		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                BESlots;                                          		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                DSSlots;                                          		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                PrevBESlots;                                      		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                PrevDSSLots;                                      		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                PrevActiveSlot;                                   		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                DSOffset;                                         		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                BEIndex;                                          		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                DSIndex;                                          		// 0x005C (0x0004) [0x0000000000000000]              
	unsigned long                                      bTeamGame : 1;                                    		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUpdated : 1;                                     		// 0x0060 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bInitialized : 1;                                 		// 0x0060 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsActive : 1;                                    		// 0x0060 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bCheckPing : 1;                                   		// 0x0060 (0x0004) [0x0000000000000000] [0x00000010] 
	class UGfxTrHud*                                   m_MoviePlayer;                                    		// 0x0064 (0x0004) [0x0000000000000000]              
	struct FTrScoreSlot                                ScoreboardSlots[ 0x20 ];                          		// 0x0068 (0x0600) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FTrScoreboardState                          PreviousState;                                    		// 0x0668 (0x000C) [0x0000000000000000]              
	class ATrPlayerController*                         TrPC;                                             		// 0x0674 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __KillsSort__Delegate;                            		// 0x0678 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __AssistsSort__Delegate;                          		// 0x0684 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CreditsSort__Delegate;                          		// 0x0690 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 95109 ];

		return pClassPointer;
	};

	bool IsValidScoreboardPlayer ( class ATrPlayerReplicationInfo* PRI );
	void UpdateHeaders ( class ATrGameReplicationInfo* GRI );
	struct FString FormatTime ( int Seconds );
	bool UpdateSlot ( int Index, class ATrPlayerReplicationInfo* PRI );
	bool ClearSlot ( int Index );
	int CreditsSort ( class ATrPlayerReplicationInfo* A, class ATrPlayerReplicationInfo* B );
	int AssistsSort ( class ATrPlayerReplicationInfo* A, class ATrPlayerReplicationInfo* B );
	int KillsSort ( class ATrPlayerReplicationInfo* A, class ATrPlayerReplicationInfo* B );
	int GetRank ( TArray< class APlayerReplicationInfo* > PRIArray );
	TArray< class APlayerReplicationInfo* > GetBestSortArray ( TArray< class APlayerReplicationInfo* > PRIArray );
	void UpdatePRILists ( class ATrGameReplicationInfo* TrGRI );
	void Tick ( float DeltaTime );
	void ConfigScoreboard ( );
	void Hide ( );
	void Show ( unsigned long bIsTeamGame );
	void Initialize ( class ATrPlayerController* PC, class UGfxTrHud* MP );
};

UClass* UTrScoreboard::pClassPointer = NULL;

// Class TribesGame.TrInventory
// 0x0004 (0x0230 - 0x022C)
class ATrInventory : public AUTInventory
{
public:
	float                                              m_fMaxPickupSpeed;                                		// 0x022C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 95728 ];

		return pClassPointer;
	};

	void DropFrom ( struct FVector StartLocation, struct FVector StartVelocity );
};

UClass* ATrInventory::pClassPointer = NULL;

// Class TribesGame.TrPerk_BountyHunter
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_BountyHunter : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97102 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_BountyHunter::pClassPointer = NULL;

// Class TribesGame.TrPerk_CloseCombat
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_CloseCombat : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97103 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_CloseCombat::pClassPointer = NULL;

// Class TribesGame.TrPerk_Egocentric
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_Egocentric : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97104 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_Egocentric::pClassPointer = NULL;

// Class TribesGame.TrPerk_Looter
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_Looter : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97105 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_Looter::pClassPointer = NULL;

// Class TribesGame.TrPerk_Mechanic
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_Mechanic : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97106 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_Mechanic::pClassPointer = NULL;

// Class TribesGame.TrPerk_Pilot
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_Pilot : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97107 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_Pilot::pClassPointer = NULL;

// Class TribesGame.TrPerk_PotentialEnergy
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_PotentialEnergy : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97108 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_PotentialEnergy::pClassPointer = NULL;

// Class TribesGame.TrPerk_QuickDraw
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_QuickDraw : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97109 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_QuickDraw::pClassPointer = NULL;

// Class TribesGame.TrPerk_Reach
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_Reach : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97110 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_Reach::pClassPointer = NULL;

// Class TribesGame.TrPerk_SafeFall
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_SafeFall : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97111 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_SafeFall::pClassPointer = NULL;

// Class TribesGame.TrPerk_SafetyThird
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_SafetyThird : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97112 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_SafetyThird::pClassPointer = NULL;

// Class TribesGame.TrPerk_Stealthy
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_Stealthy : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97113 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_Stealthy::pClassPointer = NULL;

// Class TribesGame.TrPerk_SuperHeavy
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_SuperHeavy : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97114 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_SuperHeavy::pClassPointer = NULL;

// Class TribesGame.TrPerk_Survivalist
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_Survivalist : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97115 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_Survivalist::pClassPointer = NULL;

// Class TribesGame.TrPerk_UltraCapacitor
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_UltraCapacitor : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97116 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_UltraCapacitor::pClassPointer = NULL;

// Class TribesGame.TrPerk_WheelDeal
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_WheelDeal : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97117 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_WheelDeal::pClassPointer = NULL;

// Class TribesGame.TrPerk_Rage
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_Rage : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97118 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_Rage::pClassPointer = NULL;

// Class TribesGame.TrPerk_SonicPunch
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_SonicPunch : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97119 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_SonicPunch::pClassPointer = NULL;

// Class TribesGame.TrPerk_Lightweight
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_Lightweight : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97120 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_Lightweight::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_Dark
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_Dark : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97121 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_Dark::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_Fem1
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_Fem1 : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97122 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_Fem1::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_Fem2
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_Fem2 : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97123 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_Fem2::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_Aus
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_Aus : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97124 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_Aus::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_T2_Fem01
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_T2_Fem01 : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97125 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_T2_Fem01::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_T2_Fem02
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_T2_Fem02 : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97126 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_T2_Fem02::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_T2_Fem03
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_T2_Fem03 : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97127 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_T2_Fem03::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_T2_Fem04
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_T2_Fem04 : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97128 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_T2_Fem04::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_T2_Fem05
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_T2_Fem05 : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97129 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_T2_Fem05::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_T2_Male01
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_T2_Male01 : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97130 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_T2_Male01::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_T2_Male02
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_T2_Male02 : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97131 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_T2_Male02::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_T2_Male03
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_T2_Male03 : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97132 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_T2_Male03::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_T2_Male04
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_T2_Male04 : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97133 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_T2_Male04::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_T2_Male05
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_T2_Male05 : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97134 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_T2_Male05::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_T2_BioDerm01
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_T2_BioDerm01 : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97135 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_T2_BioDerm01::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_T2_BioDerm02
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_T2_BioDerm02 : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97136 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_T2_BioDerm02::pClassPointer = NULL;

// Class TribesGame.TrPlayerVoice_T2_BioDerm03
// 0x0000 (0x0888 - 0x0888)
class ATrPlayerVoice_T2_BioDerm03 : public ATrPlayerVoice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97137 ];

		return pClassPointer;
	};

};

UClass* ATrPlayerVoice_T2_BioDerm03::pClassPointer = NULL;

// Class TribesGame.TrSkin_Pathfinder_Merc
// 0x0000 (0x0078 - 0x0078)
class UTrSkin_Pathfinder_Merc : public UTrSkin
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97139 ];

		return pClassPointer;
	};

};

UClass* UTrSkin_Pathfinder_Merc::pClassPointer = NULL;

// Class TribesGame.TrSkin_Infiltrator_Assassin
// 0x0000 (0x0078 - 0x0078)
class UTrSkin_Infiltrator_Assassin : public UTrSkin
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97140 ];

		return pClassPointer;
	};

};

UClass* UTrSkin_Infiltrator_Assassin::pClassPointer = NULL;

// Class TribesGame.TrSkin_Infiltrator_Merc
// 0x0000 (0x0078 - 0x0078)
class UTrSkin_Infiltrator_Merc : public UTrSkin
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97141 ];

		return pClassPointer;
	};

};

UClass* UTrSkin_Infiltrator_Merc::pClassPointer = NULL;

// Class TribesGame.TrSkin_Sentinel_Merc
// 0x0000 (0x0078 - 0x0078)
class UTrSkin_Sentinel_Merc : public UTrSkin
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97142 ];

		return pClassPointer;
	};

};

UClass* UTrSkin_Sentinel_Merc::pClassPointer = NULL;

// Class TribesGame.TrSkin_Technician_Merc
// 0x0000 (0x0078 - 0x0078)
class UTrSkin_Technician_Merc : public UTrSkin
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97143 ];

		return pClassPointer;
	};

};

UClass* UTrSkin_Technician_Merc::pClassPointer = NULL;

// Class TribesGame.TrSkin_Raider_Griever
// 0x0000 (0x0078 - 0x0078)
class UTrSkin_Raider_Griever : public UTrSkin
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97144 ];

		return pClassPointer;
	};

};

UClass* UTrSkin_Raider_Griever::pClassPointer = NULL;

// Class TribesGame.TrSkin_Raider_Merc
// 0x0000 (0x0078 - 0x0078)
class UTrSkin_Raider_Merc : public UTrSkin
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97145 ];

		return pClassPointer;
	};

};

UClass* UTrSkin_Raider_Merc::pClassPointer = NULL;

// Class TribesGame.TrSkin_Brute_Merc
// 0x0000 (0x0078 - 0x0078)
class UTrSkin_Brute_Merc : public UTrSkin
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97146 ];

		return pClassPointer;
	};

};

UClass* UTrSkin_Brute_Merc::pClassPointer = NULL;

// Class TribesGame.TrStationCollision
// 0x0008 (0x01E4 - 0x01DC)
class ATrStationCollision : public AActor
{
public:
	unsigned long                                      m_bOccupied : 1;                                  		// 0x01DC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bCanBeUsedDuringWarmupRound : 1;                		// 0x01DC (0x0004) [0x0000000000000000] [0x00000002] 
	class ATrPawn*                                     m_OccupiedPawn;                                   		// 0x01E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97217 ];

		return pClassPointer;
	};

	bool CheckCanPawnUseStationNow ( class ATrPawn* P );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	int GetPawnsInStation ( );
};

UClass* ATrStationCollision::pClassPointer = NULL;

// Class TribesGame.TrInventoryStationCollision
// 0x0000 (0x01E4 - 0x01E4)
class ATrInventoryStationCollision : public ATrStationCollision
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97280 ];

		return pClassPointer;
	};

	bool CheckCanPawnUseStationNow ( class ATrPawn* P );
};

UClass* ATrInventoryStationCollision::pClassPointer = NULL;

// Class TribesGame.TrInventoryStation_BloodEagle
// 0x0000 (0x0590 - 0x0590)
class ATrInventoryStation_BloodEagle : public ATrInventoryStation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97291 ];

		return pClassPointer;
	};

};

UClass* ATrInventoryStation_BloodEagle::pClassPointer = NULL;

// Class TribesGame.TrInventoryStation_DiamondSword
// 0x0000 (0x0590 - 0x0590)
class ATrInventoryStation_DiamondSword : public ATrInventoryStation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97303 ];

		return pClassPointer;
	};

};

UClass* ATrInventoryStation_DiamondSword::pClassPointer = NULL;

// Class TribesGame.TrInventoryStation_Storm
// 0x0000 (0x0590 - 0x0590)
class ATrInventoryStation_Storm : public ATrInventoryStation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97355 ];

		return pClassPointer;
	};

};

UClass* ATrInventoryStation_Storm::pClassPointer = NULL;

// Class TribesGame.TrStationMessage
// 0x0044 (0x00A8 - 0x0064)
class UTrStationMessage : public UUTLocalMessage
{
public:
	struct FString                                     StationNotPowered;                                		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnemyStation;                                     		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NeutralStation;                                   		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ControlPoint;                                     		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MustBeHeld;                                       		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class USoundCue*                                   StationNotPoweredSound;                           		// 0x00A0 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   EnemyStationSound;                                		// 0x00A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97381 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrStationMessage::pClassPointer = NULL;

// Class TribesGame.TrLockedStationMessage
// 0x0028 (0x008C - 0x0064)
class UTrLockedStationMessage : public UUTLocalMessage
{
public:
	struct FString                                     StationLocked;                                    		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Seconds;                                          		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Second;                                           		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class USoundCue*                                   DeniedSound;                                      		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97399 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrLockedStationMessage::pClassPointer = NULL;

// Class TribesGame.TrLightTurret_BloodEagle
// 0x0000 (0x065C - 0x065C)
class ATrLightTurret_BloodEagle : public ATrDeployable_LightTurret
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97610 ];

		return pClassPointer;
	};

};

UClass* ATrLightTurret_BloodEagle::pClassPointer = NULL;

// Class TribesGame.TrLightTurret_DiamondSword
// 0x0000 (0x065C - 0x065C)
class ATrLightTurret_DiamondSword : public ATrDeployable_LightTurret
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97622 ];

		return pClassPointer;
	};

};

UClass* ATrLightTurret_DiamondSword::pClassPointer = NULL;

// Class TribesGame.TrLockWarningMessage
// 0x0020 (0x0084 - 0x0064)
class UTrLockWarningMessage : public UUTLocalMessage
{
public:
	struct FString                                     MissileLockOnString;                              		// 0x0064 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RadarLockString;                                  		// 0x0070 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      RedColor;                                         		// 0x007C (0x0004) [0x0000000000000000]              
	struct FColor                                      YellowColor;                                      		// 0x0080 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97688 ];

		return pClassPointer;
	};

	struct FColor GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	unsigned char AnnouncementLevel ( unsigned char MessageIndex );
};

UClass* UTrLockWarningMessage::pClassPointer = NULL;

// Class TribesGame.TrMainMenuMeshInfo
// 0x0058 (0x0094 - 0x003C)
class UTrMainMenuMeshInfo : public UObject
{
public:
	struct FPaperDollInfo                              MeshInfo;                                         		// 0x003C (0x0038) [0x0000000000000000]              
	TArray< class UTrMainMenuMeshInfo* >               Children;                                         		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       ParentSocketName;                                 		// 0x0080 (0x0008) [0x0000000000000000]              
	TArray< struct FParticleSystemInfo >               AttachedParticleSystems;                          		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97734 ];

		return pClassPointer;
	};

	void PreloadTextures ( float ForceDuration );
};

UClass* UTrMainMenuMeshInfo::pClassPointer = NULL;

// Class TribesGame.TrMakeQuickMatch
// 0x0020 (0x005C - 0x003C)
class UTrMakeQuickMatch : public UObject
{
public:
	unsigned char                                      ControllerId;                                     		// 0x003C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              SearchStarted;                                    		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x0048 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x004C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UTrGameSearchCommon*                         SearchSettings;                                   		// 0x0050 (0x0004) [0x0000000000000000]              
	class UTrGameSettingsCommon*                       GameSettings;                                     		// 0x0054 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIssuedInitialQuery : 1;                          		// 0x0058 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bProcessingJoin : 1;                              		// 0x0058 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97758 ];

		return pClassPointer;
	};

	void OnJoinGameComplete ( struct FName SessionName, unsigned long bSuccessful );
	void OnSearchComplete ( unsigned long bWasSuccessful );
	bool RequestJoin ( struct FOnlineGameSearchResult GameToJoin );
	struct FString BuildJoinURL ( struct FString ResolvedConnectionURL );
	void ConsoleCommand ( struct FString Cmd, unsigned long bWriteToLog );
	class APlayerController* GetPC ( );
	class ULocalPlayer* GetLP ( );
	bool SubmitGameSearch ( );
	void Cleanup ( );
	void Launch ( );
	bool Init ( unsigned char ControllerIndex, int GameMode );
};

UClass* UTrMakeQuickMatch::pClassPointer = NULL;

// Class TribesGame.TrMapMusicInfo
// 0x0058 (0x0134 - 0x00DC)
class UTrMapMusicInfo : public UUDKMapMusicInfo
{
public:
	struct FTrMapMusic                                 m_MapMusic;                                       		// 0x00DC (0x0020) [0x0000000000000001]              ( CPF_Edit )
	struct FTrMapStingers                              m_MapStingers;                                    		// 0x00FC (0x0038) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99174 ];

		return pClassPointer;
	};

};

UClass* UTrMapMusicInfo::pClassPointer = NULL;

// Class TribesGame.TrMultiKillMessage
// 0x0050 (0x00B4 - 0x0064)
class UTrMultiKillMessage : public UUTLocalMessage
{
public:
	struct FString                                     KillString[ 0x5 ];                                		// 0x0064 (0x003C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class USoundNodeWave*                              KillSound[ 0x5 ];                                 		// 0x00A0 (0x0014) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99255 ];

		return pClassPointer;
	};

	bool AddAnnouncement ( class AUTAnnouncer* Announcer, int MessageIndex, class APlayerReplicationInfo* PRI, class UObject* OptionalObject );
	bool ShouldBeRemoved ( class AUTQueuedAnnouncement* MyAnnouncement, class UClass* NewAnnouncementClass, int NewMessageIndex );
	int GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer );
	class USoundNodeWave* AnnouncementSound ( int MessageIndex, class UObject* OptionalObject, class APlayerController* PC );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrMultiKillMessage::pClassPointer = NULL;

// Class TribesGame.TrPartySettings
// 0x0018 (0x00C4 - 0x00AC)
class UTrPartySettings : public UOnlineGameSettings
{
public:
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlinePlayerInterface*                      PlayerInterface;                                  		// 0x00B0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00B4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< struct FOnlinePartyMember >                MemberList;                                       		// 0x00B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99646 ];

		return pClassPointer;
	};

	void RefreshMembersList ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void Close ( );
	void Init ( class ULocalPlayer* InPlayer );
};

UClass* UTrPartySettings::pClassPointer = NULL;

// Class TribesGame.TrPerk_Blank
// 0x0000 (0x0868 - 0x0868)
class ATrPerk_Blank : public ATrPerk
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99789 ];

		return pClassPointer;
	};

};

UClass* ATrPerk_Blank::pClassPointer = NULL;

// Class TribesGame.TrPerkList
// 0x0018 (0x0054 - 0x003C)
class UTrPerkList : public UObject
{
public:
	TArray< struct FString >                           PerkListA;                                        		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           PerkListB;                                        		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99900 ];

		return pClassPointer;
	};

};

UClass* UTrPerkList::pClassPointer = NULL;

// Class TribesGame.TrSeqEvent_Generator
// 0x0000 (0x0100 - 0x0100)
class UTrSeqEvent_Generator : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 106557 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UTrSeqEvent_Generator::pClassPointer = NULL;

// Class TribesGame.TrPowerGenerator_BloodEagle
// 0x0000 (0x0588 - 0x0588)
class ATrPowerGenerator_BloodEagle : public ATrPowerGenerator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 106621 ];

		return pClassPointer;
	};

};

UClass* ATrPowerGenerator_BloodEagle::pClassPointer = NULL;

// Class TribesGame.TrPowerGenerator_DiamondSword
// 0x0000 (0x0588 - 0x0588)
class ATrPowerGenerator_DiamondSword : public ATrPowerGenerator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 106633 ];

		return pClassPointer;
	};

};

UClass* ATrPowerGenerator_DiamondSword::pClassPointer = NULL;

// Class TribesGame.TrProj_AntiAirTurret
// 0x0000 (0x032C - 0x032C)
class ATrProj_AntiAirTurret : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 106831 ];

		return pClassPointer;
	};

	void Destroyed ( );
};

UClass* ATrProj_AntiAirTurret::pClassPointer = NULL;

// Class TribesGame.TrProj_BaseTurret
// 0x0000 (0x032C - 0x032C)
class ATrProj_BaseTurret : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 107189 ];

		return pClassPointer;
	};

};

UClass* ATrProj_BaseTurret::pClassPointer = NULL;

// Class TribesGame.TrProj_BeowulfGunner
// 0x0000 (0x032C - 0x032C)
class ATrProj_BeowulfGunner : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 107202 ];

		return pClassPointer;
	};

};

UClass* ATrProj_BeowulfGunner::pClassPointer = NULL;

// Class TribesGame.TrProj_BeowulfPilot
// 0x0000 (0x032C - 0x032C)
class ATrProj_BeowulfPilot : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 107210 ];

		return pClassPointer;
	};

};

UClass* ATrProj_BeowulfPilot::pClassPointer = NULL;

// Class TribesGame.TrProj_ChaingunBulletTracer
// 0x0000 (0x0368 - 0x0368)
class ATrProj_ChaingunBulletTracer : public ATrProj_Tracer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 107316 ];

		return pClassPointer;
	};

};

UClass* ATrProj_ChaingunBulletTracer::pClassPointer = NULL;

// Class TribesGame.TrProj_GravCyclePilot
// 0x0000 (0x032C - 0x032C)
class ATrProj_GravCyclePilot : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 107436 ];

		return pClassPointer;
	};

};

UClass* ATrProj_GravCyclePilot::pClassPointer = NULL;

// Class TribesGame.TrProj_HavocPilot
// 0x0000 (0x032C - 0x032C)
class ATrProj_HavocPilot : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 107481 ];

		return pClassPointer;
	};

	void Destroyed ( );
	void HijackMissileGuidance ( );
	void PostBeginPlay ( );
	float CalculateHijackMetric ( class ATrProj_TrackingMissile* Tracker );
};

UClass* ATrProj_HavocPilot::pClassPointer = NULL;

// Class TribesGame.TrProj_HERCGunner
// 0x0000 (0x032C - 0x032C)
class ATrProj_HERCGunner : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 107567 ];

		return pClassPointer;
	};

};

UClass* ATrProj_HERCGunner::pClassPointer = NULL;

// Class TribesGame.TrProj_HERCPilot
// 0x0000 (0x032C - 0x032C)
class ATrProj_HERCPilot : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 107576 ];

		return pClassPointer;
	};

};

UClass* ATrProj_HERCPilot::pClassPointer = NULL;

// Class TribesGame.TrProj_LightTurret
// 0x0000 (0x032C - 0x032C)
class ATrProj_LightTurret : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 107693 ];

		return pClassPointer;
	};

};

UClass* ATrProj_LightTurret::pClassPointer = NULL;

// Class TribesGame.TrProj_MIRVLauncherSecondary
// 0x0000 (0x032C - 0x032C)
class ATrProj_MIRVLauncherSecondary : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 107753 ];

		return pClassPointer;
	};

};

UClass* ATrProj_MIRVLauncherSecondary::pClassPointer = NULL;

// Class TribesGame.TrProj_MIRVGrenadeSecondary
// 0x0000 (0x0370 - 0x0370)
class ATrProj_MIRVGrenadeSecondary : public ATrProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 107767 ];

		return pClassPointer;
	};

};

UClass* ATrProj_MIRVGrenadeSecondary::pClassPointer = NULL;

// Class TribesGame.TrProj_PistolBulletTracer
// 0x0000 (0x0368 - 0x0368)
class ATrProj_PistolBulletTracer : public ATrProj_Tracer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 107883 ];

		return pClassPointer;
	};

};

UClass* ATrProj_PistolBulletTracer::pClassPointer = NULL;

// Class TribesGame.TrProj_SAP20
// 0x0000 (0x032C - 0x032C)
class ATrProj_SAP20 : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 108076 ];

		return pClassPointer;
	};

};

UClass* ATrProj_SAP20::pClassPointer = NULL;

// Class TribesGame.TrProj_ShrikePilot
// 0x0000 (0x032C - 0x032C)
class ATrProj_ShrikePilot : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 108082 ];

		return pClassPointer;
	};

};

UClass* ATrProj_ShrikePilot::pClassPointer = NULL;

// Class TribesGame.TrProj_SpikeLauncherSecondary
// 0x0000 (0x0370 - 0x0370)
class ATrProj_SpikeLauncherSecondary : public ATrProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 108209 ];

		return pClassPointer;
	};

};

UClass* ATrProj_SpikeLauncherSecondary::pClassPointer = NULL;

// Class TribesGame.TrProj_SpikeLauncherThird
// 0x0000 (0x0370 - 0x0370)
class ATrProj_SpikeLauncherThird : public ATrProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 108210 ];

		return pClassPointer;
	};

};

UClass* ATrProj_SpikeLauncherThird::pClassPointer = NULL;

// Class TribesGame.TrProj_WallTurret
// 0x0000 (0x032C - 0x032C)
class ATrProj_WallTurret : public ATrProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 108482 ];

		return pClassPointer;
	};

};

UClass* ATrProj_WallTurret::pClassPointer = NULL;

// Class TribesGame.TrRadarStation_BloodEagle
// 0x0000 (0x0608 - 0x0608)
class ATrRadarStation_BloodEagle : public ATrDeployable_RadarSensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 109399 ];

		return pClassPointer;
	};

};

UClass* ATrRadarStation_BloodEagle::pClassPointer = NULL;

// Class TribesGame.TrRadarStation_DiamondSword
// 0x0000 (0x0608 - 0x0608)
class ATrRadarStation_DiamondSword : public ATrDeployable_RadarSensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 109411 ];

		return pClassPointer;
	};

};

UClass* ATrRadarStation_DiamondSword::pClassPointer = NULL;

// Class TribesGame.TrRepairStationCollision
// 0x000C (0x01F0 - 0x01E4)
class ATrRepairStationCollision : public ATrStationCollision
{
public:
	TArray< class APawn* >                             m_NearByPawns;                                    		// 0x01E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 109594 ];

		return pClassPointer;
	};

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void CheckNearByPawns ( class ATrPawn* aPawn, unsigned long bAdd );
	int GetPawnsInStation ( );
};

UClass* ATrRepairStationCollision::pClassPointer = NULL;

// Class TribesGame.TrRepairStation_BloodEagle
// 0x0000 (0x0584 - 0x0584)
class ATrRepairStation_BloodEagle : public ATrRepairStation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 109603 ];

		return pClassPointer;
	};

};

UClass* ATrRepairStation_BloodEagle::pClassPointer = NULL;

// Class TribesGame.TrRepairStation_DiamondSword
// 0x0000 (0x0584 - 0x0584)
class ATrRepairStation_DiamondSword : public ATrRepairStation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 109615 ];

		return pClassPointer;
	};

};

UClass* ATrRepairStation_DiamondSword::pClassPointer = NULL;

// Class TribesGame.TrSeqAct_EndMatch
// 0x0000 (0x00E8 - 0x00E8)
class UTrSeqAct_EndMatch : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 109957 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UTrSeqAct_EndMatch::pClassPointer = NULL;

// Class TribesGame.TrSeqAct_TrainingMessage
// 0x0001 (0x00E9 - 0x00E8)
class UTrSeqAct_TrainingMessage : public USequenceAction
{
public:
	unsigned char                                      m_MessageType;                                    		// 0x00E8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 109964 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UTrSeqAct_TrainingMessage::pClassPointer = NULL;

// Class TribesGame.TrSeqEvent_StormControlPoint
// 0x0000 (0x0100 - 0x0100)
class UTrSeqEvent_StormControlPoint : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 109973 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UTrSeqEvent_StormControlPoint::pClassPointer = NULL;

// Class TribesGame.TrSeqEvent_StormCore
// 0x0000 (0x0100 - 0x0100)
class UTrSeqEvent_StormCore : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 109977 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UTrSeqEvent_StormCore::pClassPointer = NULL;

// Class TribesGame.TrSeqEvent_StormShield
// 0x0000 (0x0100 - 0x0100)
class UTrSeqEvent_StormShield : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 109981 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UTrSeqEvent_StormShield::pClassPointer = NULL;

// Class TribesGame.TrSnipingSpreeMessage
// 0x00BC (0x0120 - 0x0064)
class UTrSnipingSpreeMessage : public UUTLocalMessage
{
public:
	struct FString                                     EndSpreeNote;                                     		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EndSelfSpree;                                     		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MultiKillString;                                  		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SpreeNote[ 0x5 ];                                 		// 0x0088 (0x003C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SelfSpreeNote[ 0x5 ];                             		// 0x00C4 (0x003C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class USoundNodeWave*                              SpreeSound[ 0x5 ];                                		// 0x0100 (0x0014) [0x0000000000000000]              
	struct FString                                     EndSpreeNoteTrailer;                              		// 0x0114 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 111519 ];

		return pClassPointer;
	};

	class USoundNodeWave* AnnouncementSound ( int MessageIndex, class UObject* OptionalObject, class APlayerController* PC );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	int GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer );
};

UClass* UTrSnipingSpreeMessage::pClassPointer = NULL;

// Class TribesGame.TrSpinfusorSpreeMessage
// 0x00BC (0x0120 - 0x0064)
class UTrSpinfusorSpreeMessage : public UUTLocalMessage
{
public:
	struct FString                                     EndSpreeNote;                                     		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EndSelfSpree;                                     		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MultiKillString;                                  		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SpreeNote[ 0x5 ];                                 		// 0x0088 (0x003C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SelfSpreeNote[ 0x5 ];                             		// 0x00C4 (0x003C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class USoundNodeWave*                              SpreeSound[ 0x5 ];                                		// 0x0100 (0x0014) [0x0000000000000000]              
	struct FString                                     EndSpreeNoteTrailer;                              		// 0x0114 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 111557 ];

		return pClassPointer;
	};

	class USoundNodeWave* AnnouncementSound ( int MessageIndex, class UObject* OptionalObject, class APlayerController* PC );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	int GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer );
};

UClass* UTrSpinfusorSpreeMessage::pClassPointer = NULL;

// Class TribesGame.TrStealthResidue
// 0x0008 (0x01E4 - 0x01DC)
class ATrStealthResidue : public AActor
{
public:
	class UUDKSkeletalMeshComponent*                   m_Mesh;                                           		// 0x01DC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   m_MeshMaterial;                                   		// 0x01E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 111769 ];

		return pClassPointer;
	};

	void eventPreBeginPlay ( );
};

UClass* ATrStealthResidue::pClassPointer = NULL;

// Class TribesGame.TrStormControlPointGate
// 0x0004 (0x0554 - 0x0550)
class ATrStormControlPointGate : public ATrGameObjective
{
public:
	class ATrStormControlPoint*                        m_ControlPoint;                                   		// 0x0550 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 111843 ];

		return pClassPointer;
	};

	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ATrStormControlPointGate::pClassPointer = NULL;

// Class TribesGame.TrStormCore_BloodEagle
// 0x0000 (0x0558 - 0x0558)
class ATrStormCore_BloodEagle : public ATrStormCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 111918 ];

		return pClassPointer;
	};

};

UClass* ATrStormCore_BloodEagle::pClassPointer = NULL;

// Class TribesGame.TrStormCore_DiamondSword
// 0x0000 (0x0558 - 0x0558)
class ATrStormCore_DiamondSword : public ATrStormCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 111930 ];

		return pClassPointer;
	};

};

UClass* ATrStormCore_DiamondSword::pClassPointer = NULL;

// Class TribesGame.TrTDMScoreMessage
// 0x0000 (0x0064 - 0x0064)
class UTrTDMScoreMessage : public UUTLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 112135 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	unsigned char AnnouncementLevel ( unsigned char MessageIndex );
};

UClass* UTrTDMScoreMessage::pClassPointer = NULL;

// Class TribesGame.TrTimedPowerup
// 0x0040 (0x0270 - 0x0230)
class ATrTimedPowerup : public ATrInventory
{
public:
	float                                              TimeRemaining;                                    		// 0x0230 (0x0004) [0x0000000000000000]              
	int                                                HudIndex;                                         		// 0x0234 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   PowerupOverSound;                                 		// 0x0238 (0x0004) [0x0000000000000000]              
	struct FName                                       PowerupStatName;                                  		// 0x023C (0x0008) [0x0000000000000000]              
	struct FTextureCoordinates                         IconCoords;                                       		// 0x0244 (0x0010) [0x0000000000000000]              
	float                                              TransitionTime;                                   		// 0x0254 (0x0004) [0x0000000000000000]              
	float                                              TransitionDuration;                               		// 0x0258 (0x0004) [0x0000000000000000]              
	float                                              WarningTime;                                      		// 0x025C (0x0004) [0x0000000000000000]              
	struct FVector                                     PP_Scene_HighLights;                              		// 0x0260 (0x000C) [0x0000000000000000]              
	float                                              PP_Scene_Desaturation;                            		// 0x026C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 112213 ];

		return pClassPointer;
	};

	struct FName GetPowerupStatName ( );
	float DetourWeight ( class APawn* Other, float PathWeight );
	float BotDesireability ( class AActor* PickupHolder, class APawn* P, class AController* C );
	void TimeExpired ( );
	bool DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup );
	void DisplayPowerup ( class UCanvas* Canvas, class AHUD* HUD, float ResolutionScale, float* YPos );
	void TimeRemaingUpdated ( );
	void ClientSetTimeRemaining ( float NewTimeRemaining );
	void ClientLostItem ( );
	void AdjustPPEffects ( class APawn* P, unsigned long bRemove );
	void ClientGivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate );
	void GivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate );
	void eventTick ( float DeltaTime );
};

UClass* ATrTimedPowerup::pClassPointer = NULL;

// Class TribesGame.TrUIDataProvider_MapInfo
// 0x0000 (0x00CC - 0x00CC)
class UTrUIDataProvider_MapInfo : public UUDKUIDataProvider_MapInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 112420 ];

		return pClassPointer;
	};

	bool eventShouldBeFiltered ( );
};

UClass* UTrUIDataProvider_MapInfo::pClassPointer = NULL;

// Class TribesGame.TrVehicleMessage
// 0x0018 (0x007C - 0x0064)
class UTrVehicleMessage : public UUTLocalMessage
{
public:
	struct FString                                     ArmorClassRestricted;                             		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VehicleLocked;                                    		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113229 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTrVehicleMessage::pClassPointer = NULL;

// Class TribesGame.TrVehicle_Havoc
// 0x0008 (0x0CE4 - 0x0CDC)
class ATrVehicle_Havoc : public ATrVehicle_BaseFlying
{
public:
	float                                              m_fPitchAimAngle;                                 		// 0x0CDC (0x0004) [0x0000000000000000]              
	float                                              m_fPitchAimAngleRotation;                         		// 0x0CE0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113871 ];

		return pClassPointer;
	};

	struct FRotator GetWeaponAim ( class AUTVehicleWeapon* VWeapon );
	void PostBeginPlay ( );
};

UClass* ATrVehicle_Havoc::pClassPointer = NULL;

// Class TribesGame.TrVehicle_HERC
// 0x0000 (0x0CB0 - 0x0CB0)
class ATrVehicle_HERC : public ATrVehicle_Tank
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113921 ];

		return pClassPointer;
	};

};

UClass* ATrVehicle_HERC::pClassPointer = NULL;

// Class TribesGame.TrVehicleFactory_Beowulf
// 0x0000 (0x02F8 - 0x02F8)
class ATrVehicleFactory_Beowulf : public AUTVehicleFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113980 ];

		return pClassPointer;
	};

};

UClass* ATrVehicleFactory_Beowulf::pClassPointer = NULL;

// Class TribesGame.TrVehicleFactory_GravCycle
// 0x0000 (0x02F8 - 0x02F8)
class ATrVehicleFactory_GravCycle : public AUTVehicleFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113984 ];

		return pClassPointer;
	};

};

UClass* ATrVehicleFactory_GravCycle::pClassPointer = NULL;

// Class TribesGame.TrVehicleInput_Flying
// 0x0000 (0x017C - 0x017C)
class UTrVehicleInput_Flying : public UPlayerInput
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113988 ];

		return pClassPointer;
	};

	void AdjustMouseSensitivity ( float FOVScale );
};

UClass* UTrVehicleInput_Flying::pClassPointer = NULL;

// Class TribesGame.TrVehiclePad
// 0x0008 (0x0220 - 0x0218)
class ATrVehiclePad : public ASkeletalMeshActor
{
public:
	class UTrAnimNodeBlendList*                        m_VehiclePadBlendNode;                            		// 0x0218 (0x0004) [0x0000000000000000]              
	class UTrSkelControl_SpinControl*                  m_SpinControl;                                    		// 0x021C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114002 ];

		return pClassPointer;
	};

	void PlayCollapseAnim ( );
	void PlayDeployAnim ( );
	void PlayIdleAnim ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventPostBeginPlay ( );
};

UClass* ATrVehiclePad::pClassPointer = NULL;

// Class TribesGame.TrVehicleStation_BloodEagle
// 0x0000 (0x0640 - 0x0640)
class ATrVehicleStation_BloodEagle : public ATrVehicleStation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114092 ];

		return pClassPointer;
	};

};

UClass* ATrVehicleStation_BloodEagle::pClassPointer = NULL;

// Class TribesGame.TrVehicleStation_DiamondSword
// 0x0000 (0x0640 - 0x0640)
class ATrVehicleStation_DiamondSword : public ATrVehicleStation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114104 ];

		return pClassPointer;
	};

};

UClass* ATrVehicleStation_DiamondSword::pClassPointer = NULL;

// Class TribesGame.TrVehicleStation_Neutral
// 0x0000 (0x0640 - 0x0640)
class ATrVehicleStation_Neutral : public ATrVehicleStation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114116 ];

		return pClassPointer;
	};

};

UClass* ATrVehicleStation_Neutral::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_Attack
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_Attack : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114482 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_Attack::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_Base
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_Base : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114484 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_Base::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_Command
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_Command : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114486 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_Command::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_Compliment
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_Compliment : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114488 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_Compliment::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_Defend
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_Defend : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114490 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_Defend::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_Enemy
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_Enemy : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114492 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_Enemy::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_Flag
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_Flag : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114494 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_Flag::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_Global
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_Global : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114496 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_Global::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_Respond
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_Respond : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114498 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_Respond::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_Taunt
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_Taunt : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114499 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_Taunt::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_Need
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_Need : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114500 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_Need::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_Repair
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_Repair : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114502 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_Repair::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_Self
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_Self : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114506 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_Self::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_Target
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_Target : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114507 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_Target::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_Upgrade
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_Upgrade : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114508 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_Upgrade::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_Warning
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_Warning : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114509 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_Warning::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_VeryQuick
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_VeryQuick : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114510 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_VeryQuick::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_SelfAttack
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_SelfAttack : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114512 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_SelfAttack::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_SelfDefend
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_SelfDefend : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114513 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_SelfDefend::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_SelfRepair
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_SelfRepair : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114514 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_SelfRepair::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_SelfTask
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_SelfTask : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114515 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_SelfTask::pClassPointer = NULL;

// Class TribesGame.TrVGSNode_SelfUpgrade
// 0x0000 (0x009C - 0x009C)
class UTrVGSNode_SelfUpgrade : public UTrVGSNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114516 ];

		return pClassPointer;
	};

};

UClass* UTrVGSNode_SelfUpgrade::pClassPointer = NULL;


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif