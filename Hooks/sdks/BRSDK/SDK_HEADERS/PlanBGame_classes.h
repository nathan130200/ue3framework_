/*
#############################################################################################
# Bullet Run (Unknown) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: PlanBGame_classes.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_ACHIEVEMENT_SEPARATOR                              2880154539
#define CONST_MAX_MOD_TYPE_COUNT                                 7
#define CONST_MAX_PARTS                                          13
#define CONST_MAX_TEX_SCHEMES                                    5
#define CONST_MAX_ATTACHMENTS                                    4
#define CONST_MAX_COLOR_SCHEMES                                  2
#define CONST_MAX_MODS                                           7
#define CONST_INVALID_BASE_WEAPON                                255
#define CONST_MAX_MOD_CODE                                       15
#define CONST_fMaxSprintStamina                                  100.f
#define CONST_iMaxSprintRecheckCounter                           3
#define CONST_MinTimeBetweenPainSounds                           0.35
#define CONST_MaxMessageHistory                                  50
#define CONST_DeathInfoXSpacing                                  5
#define CONST_DeathInfoYSpacing                                  5
#define CONST_GS_USERNAME_MAXLENGTH                              25
#define CONST_GS_PASSWORD_MAXLENGTH                              10
#define CONST_GS_MESSAGE_MAXLENGTH                               255
#define CONST_GS_EMAIL_MAXLENGTH                                 50
#define CONST_GS_CDKEY_PART_MAXLENGTH                            4
#define CONST_CONTEXT_PRESENCE_MENUPRESENCE                      0
#define CONST_CONTEXT_GAME_MODE                                  0x0000800B
#define CONST_CONTEXT_GAME_MODE_DM                               0
#define CONST_CONTEXT_GAME_MODE_CTF                              1
#define CONST_CONTEXT_GAME_MODE_WAR                              2
#define CONST_CONTEXT_GAME_MODE_VCTF                             3
#define CONST_CONTEXT_GAME_MODE_TDM                              4
#define CONST_CONTEXT_GAME_MODE_DUEL                             5
#define CONST_CONTEXT_GAME_MODE_CUSTOM                           6
#define CONST_CONTEXT_GAME_MODE_CAMPAIGN                         7
#define CONST_CONTEXT_GAME_MODE_LTS                              8
#define CONST_CONTEXT_BOTSKILL                                   0
#define CONST_CONTEXT_MAPNAME                                    1
#define CONST_CONTEXT_PURESERVER                                 6
#define CONST_CONTEXT_LOCKEDSERVER                               7
#define CONST_CONTEXT_VSBOTS                                     8
#define CONST_CONTEXT_CAMPAIGN                                   9
#define CONST_CONTEXT_FORCERESPAWN                               10
#define CONST_CONTEXT_ALLOWKEYBOARD                              11
#define CONST_CONTEXT_FULLSERVER                                 12
#define CONST_CONTEXT_EMPTYSERVER                                13
#define CONST_CONTEXT_DEDICATEDSERVER                            14
#define CONST_CONTEXT_INLOBBY                                    15
#define CONST_CONTEXT_FRIENDLYFIRE                               16
#define CONST_CONTEXT_BOOST                                      17
#define CONST_CONTEXT_MAPNAME_CUSTOM                             0
#define CONST_CONTEXT_BOTSKILL_AUTOADJUSTSKILL                   0
#define CONST_CONTEXT_BOTSKILL_NOVICE                            1
#define CONST_CONTEXT_BOTSKILL_AVERAGE                           2
#define CONST_CONTEXT_BOTSKILL_EXPERIENCED                       3
#define CONST_CONTEXT_BOTSKILL_SKILLED                           4
#define CONST_CONTEXT_BOTSKILL_ADEPT                             5
#define CONST_CONTEXT_BOTSKILL_MASTERFUL                         6
#define CONST_CONTEXT_BOTSKILL_INHUMAN                           7
#define CONST_CONTEXT_BOTSKILL_GODLIKE                           8
#define CONST_CONTEXT_GOALSCORE                                  0
#define CONST_CONTEXT_GOALSCORE01                                1
#define CONST_CONTEXT_GOALSCORE02                                2
#define CONST_CONTEXT_GOALSCORE03                                3
#define CONST_CONTEXT_GOALSCORE04                                4
#define CONST_CONTEXT_NUMBOTS                                    0
#define CONST_CONTEXT_NUMBOTS01                                  1
#define CONST_CONTEXT_NUMBOTS02                                  2
#define CONST_CONTEXT_NUMBOTS03                                  3
#define CONST_CONTEXT_NUMBOTS04                                  4
#define CONST_CONTEXT_NUMBOTS05                                  5
#define CONST_CONTEXT_NUMBOTS06                                  6
#define CONST_CONTEXT_NUMBOTS07                                  7
#define CONST_CONTEXT_NUMBOTS08                                  8
#define CONST_CONTEXT_TIMELIMIT                                  0
#define CONST_CONTEXT_TIMELIMIT01                                1
#define CONST_CONTEXT_TIMELIMIT02                                2
#define CONST_CONTEXT_TIMELIMIT03                                3
#define CONST_CONTEXT_TIMELIMIT04                                4
#define CONST_CONTEXT_PURESERVER_NO                              0
#define CONST_CONTEXT_PURESERVER_YES                             1
#define CONST_CONTEXT_PURESERVER_ANY                             2
#define CONST_CONTEXT_INLOBBY_NO                                 0
#define CONST_CONTEXT_INLOBBY_YES                                1
#define CONST_CONTEXT_INLOBBY_ANY                                2
#define CONST_CONTEXT_FRIENDLYFIRE_NO                            0
#define CONST_CONTEXT_FRIENDLYFIRE_YES                           1
#define CONST_CONTEXT_FRIENDLYFIRE_ANY                           2
#define CONST_CONTEXT_BOOST_NO                                   1
#define CONST_CONTEXT_BOOST_ANY                                  0
#define CONST_CONTEXT_LOCKEDSERVER_NO                            0
#define CONST_CONTEXT_LOCKEDSERVER_YES                           1
#define CONST_CONTEXT_CAMPAIGN_NO                                0
#define CONST_CONTEXT_CAMPAIGN_YES                               1
#define CONST_CONTEXT_FORCERESPAWN_NO                            0
#define CONST_CONTEXT_FORCERESPAWN_YES                           1
#define CONST_CONTEXT_ALLOWKEYBOARD_NO                           0
#define CONST_CONTEXT_ALLOWKEYBOARD_YES                          1
#define CONST_CONTEXT_ALLOWKEYBOARD_ANY                          2
#define CONST_CONTEXT_FULLSERVER_NO                              0
#define CONST_CONTEXT_FULLSERVER_YES                             1
#define CONST_CONTEXT_EMPTYSERVER_NO                             0
#define CONST_CONTEXT_EMPTYSERVER_YES                            1
#define CONST_CONTEXT_DEDICATEDSERVER_NO                         0
#define CONST_CONTEXT_DEDICATEDSERVER_YES                        1
#define CONST_CONTEXT_VSBOTS_NONE                                0
#define CONST_CONTEXT_VSBOTS_1_TO                                1
#define CONST_CONTEXT_VSBOTS_1_TO01                              2
#define CONST_CONTEXT_VSBOTS_3_TO                                3
#define CONST_CONTEXT_VSBOTS_2_TO                                4
#define CONST_CONTEXT_VSBOTS_3_TO01                              5
#define CONST_CONTEXT_VSBOTS_4_TO                                6
#define CONST_PROPERTY_NUMBOTS                                   0x100000F7
#define CONST_PROPERTY_GOALSCORE                                 0x100000F8
#define CONST_PROPERTY_TIMELIMIT                                 0x100000F9
#define CONST_PROPERTY_LEADERBOARDRATING                         0x20000004
#define CONST_PROPERTY_EPICMUTATORS                              0x10000105
#define CONST_PROPERTY_RESPAWNTIME                               0x10000106
#define CONST_PROPERTY_CAMPAIGNTIMER                             0x10000107
#define CONST_PROPERTY_PLAYSTYLE                                 0x10000108
#define CONST_PROPERTY_GAMEVERSION                               0x10000109
#define CONST_PROPERTY_NUMSPECTATORS                             0x1000010A
#define CONST_PROPERTY_MAXSPECTATORS                             0x1000010B
#define CONST_PROPERTY_REGION                                    0x1000010C
#define CONST_PROPERTY_SPECIAL                                   0x1000010D
#define CONST_PROPERTY_ACCOUNTTYPE                               0x1000010E
#define CONST_PROPERTY_GAMERANK                                  0x1000010F
#define CONST_PROPERTY_CUSTOMMAPNAME                             0x40000001
#define CONST_PROPERTY_CUSTOMGAMEMODE                            0x40000002
#define CONST_PROPERTY_SERVERDESCRIPTION                         0x40000003
#define CONST_PROPERTY_CUSTOMMUTATORS                            0x40000004
#define CONST_PROPERTY_BANNEDPLAYERS                             0x40000005
#define CONST_PROPERTY_SERVERTAGS                                0x40000006
#define CONST_QUERY_DM                                           0
#define CONST_QUERY_TDM                                          1
#define CONST_QUERY_CTF                                          2
#define CONST_QUERY_VCTF                                         3
#define CONST_QUERY_WAR                                          4
#define CONST_QUERY_DUEL                                         5
#define CONST_QUERY_CAMPAIGN                                     6
#define CONST_STATS_VIEW_DM_PLAYER_ALLTIME                       1
#define CONST_STATS_VIEW_DM_RANKED_ALLTIME                       2
#define CONST_STATS_VIEW_DM_WEAPONS_ALLTIME                      3
#define CONST_STATS_VIEW_DM_VEHICLES_ALLTIME                     4
#define CONST_STATS_VIEW_DM_VEHICLEWEAPONS_ALLTIME               5
#define CONST_STATS_VIEW_DM_VEHICLES_RANKED_ALLTIME              6
#define CONST_STATS_VIEW_DM_VEHICLEWEAPONS_RANKED_ALLTIME        7
#define CONST_STATS_VIEW_DM_WEAPONS_RANKED_ALLTIME               8
#define CONST_m_sMessage_IAmOnline                               "\`systemmessage:iamonline\`"
#define CONST_FIXED_FORWARD                                      0
#define CONST_FIXED_BACKWARD                                     1
#define CONST_FIXED_RIGHT                                        2
#define CONST_FIXED_LEFT                                         3
#define CONST_FIXED_UP                                           4
#define CONST_FIXED_DOWN                                         5
#define CONST_FiringCountInfo_STILL_FIRING                       128
#define CONST_FiringCountInfo_MAX_COUNT                          50
#define CONST_maxPawnShots                                       6
#define CONST_maxWorldShots                                      6
#define CONST_MAXSTAKEOUTDIST                                    2000
#define CONST_ENEMYLOCATIONFUZZ                                  1200
#define CONST_TACTICALHEIGHTADVANTAGE                            320
#define CONST_MINSTRAFEDIST                                      200
#define CONST_MINVIEWDIST                                        200
#define CONST_AngleConvert                                       0.0000958738
#define CONST_maxPECounter                                       16
#define CONST_maxAwards                                          4
#define CONST_maxAwardItems                                      4
#define CONST_MaxTiers                                           4
#define CONST_PBCC_CACHESIZE_PERPLAYER                           6
#define CONST_PBCC_CACHESIZE_PERLOCALPLAYER                      15
#define CONST_PBCC_CACHESIZE_DROPPEDWEAPONS                      30
#define CONST_PBCC_MAXPLAYERS                                    20
#define CONST_defaultLifeSpan                                    4
#define CONST_Threshold                                          10
#define CONST_PresetBitsCount                                    4
#define CONST_MAX_ITEMS_IN_BASKET                                40
#define CONST_FansAndIGCStartX                                   512.f
#define CONST_FansAndIGCStartZ                                   -80.f
#define CONST_PBManagerErrorStart                                100
#define CONST_InvalidPrimaryIndex                                0xFF
#define CONST_PrimaryMask                                        0x000000FF
#define CONST_BonusMask                                          0xFFFFFFFF
#define CONST_NUM_WEAPONS_IN_PRESET                              4
#define CONST_iMaxRunningRequests                                1
#define CONST_bLogOutput                                         true
#define CONST_bUseKostasLog                                      false
#define CONST_MaxGameSetupOptions                                8
#define CONST_MaxNextMapVoteOptions                              100
#define CONST_PSI_CustomCharData                                 200
#define CONST_PSI_PlayStyle                                      201
#define CONST_PSI_AvatarPictureIndex                             202
#define CONST_PSI_XPPoints                                       203
#define CONST_PSI_Rank                                           204
#define CONST_PSI_WeaponPresets                                  205
#define CONST_PSI_WeaponConditions                               206
#define CONST_PSI_Country                                        207
#define CONST_PSI_Credits                                        208
#define CONST_PSI_Boosters                                       209
#define CONST_PSI_Coolness                                       210
#define CONST_PBPID_TextToSpeechMode                             367
#define CONST_PBPID_AllowCustomCharacters                        410
#define CONST_PBPID_MouseSmoothing                               420
#define CONST_PBPID_MouseSensitivityGame                         421
#define CONST_PBPID_MouseSensitivityMenus                        422
#define CONST_PBID_PlayerOnlineStatus                            423
#define CONST_PBID_PlayerOnlineStatusForced                      424
#define CONST_PBID_InputInvertMouse                              600
#define CONST_PBID_InputSmoothMouse                              601
#define CONST_PBID_InputAccelerateMouse                          602
#define CONST_PBID_InputMouseSensitivity                         603
#define CONST_PBID_InputToggleAimInput                           604
#define CONST_PBID_InputProfanityFilter                          605
#define CONST_MaxRanks                                           3
#define CONST_NEAROBJECTIVEDIST                                  500.0
#define CONST_TIME_DIFFERENCE                                    0.2f
#define CONST_INVALIDFIELD                                       -1

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum PlanBGame.PBAchievement.EAchievementCategory
/*enum EAchievementCategory
{
	EAC_MyAchievements                                 = 0,
	EAC_General                                        = 1,
	EAC_Community                                      = 2,
	EAC_Combat                                         = 3,
	EAC_CloseCombat                                    = 4,
	EAC_Pistols                                        = 5,
	EAC_Submachineguns                                 = 6,
	EAC_Shotguns                                       = 7,
	EAC_AssaultRifles                                  = 8,
	EAC_SniperRifles                                   = 9,
	EAC_SupportWeapons                                 = 10,
	EAC_Teamdeathmatch                                 = 11,
	EAC_SearchAndDestroy                               = 12,
	EAC_Campaign                                       = 13,
	EAC_MAX                                            = 14
};*/

// Enum PlanBGame.PBAchievementManager.EAchievementEvent
/*enum EAchievementEvent
{
	EAE_KILL                                           = 0,
	EAE_WIN_ROUND                                      = 1,
	EAE_LOOSE_ROUND                                    = 2,
	EAE_WEAPON_RELOAD                                  = 3,
	EAE_ADD_BUDDY                                      = 4,
	EAE_SEND_BUDDY_MESSAGE                             = 5,
	EAE_KILLED                                         = 6,
	EAE_WIDE_MESSAGE_KILLED                            = 7,
	EAE_MORTAR_STARTED                                 = 8,
	EAE_TEAM_CHANGED                                   = 9,
	EAE_MATCH_ENDS                                     = 10,
	EAE_MAX                                            = 11
};*/

// Enum PlanBGame.PBNWeapon.EWeaponConditionEvent
/*enum EWeaponConditionEvent
{
	TWCE_WeaponEquipping                               = 0,
	TWCE_WeaponUnEquipping                             = 1,
	TWCE_MAX                                           = 2
};*/

// Enum PlanBGame.PBImpactData.IMPACT_TYPE
/*enum IMPACT_TYPE
{
	IMPACT_DEFAULT                                     = 0,
	IMPACT_BAREHANDS                                   = 1,
	IMPACT_KNIFE                                       = 2,
	IMPACT_PISTOL                                      = 3,
	IMPACT_SMG                                         = 4,
	IMPACT_RIFLE                                       = 5,
	IMPACT_SHOTGUN                                     = 6,
	IMPACT_EXPLOSION                                   = 7,
	IMPACT_FOOT_LEFT                                   = 8,
	IMPACT_FOOT_LEFT_CROUCH                            = 9,
	IMPACT_FOOT_LEFT_WALK                              = 10,
	IMPACT_FOOT_RIGHT                                  = 11,
	IMPACT_FOOT_RIGHT_CROUCH                           = 12,
	IMPACT_FOOT_RIGHT_WALK                             = 13,
	IMPACT_SHELL_AP                                    = 14,
	IMPACT_SHELL_HE                                    = 15,
	IMPACT_COLLISION                                   = 16,
	IMPACT_BERSERK                                     = 17,
	IMPACT_MAX                                         = 18
};*/

// Enum PlanBGame.PBPhysicalMaterialProperty.EHitZoneType
/*enum EHitZoneType
{
	EHZT_Invalid                                       = 0,
	EHZT_Head                                          = 1,
	EHZT_Body                                          = 2,
	EHZT_Legs                                          = 3,
	EHZT_MAX                                           = 4
};*/

// Enum PlanBGame.PBKWeapon.EWAHSIAmmoState
/*enum EWAHSIAmmoState
{
	WAHSI_Critical                                     = 0,
	WAHSI_Low                                          = 1,
	WAHSI_Normal                                       = 2,
	WAHSI_MAX                                          = 3
};*/

// Enum PlanBGame.PBKWeapon.EWRLMiniGameResult
/*enum EWRLMiniGameResult
{
	WRL_NONE                                           = 0,
	WRL_PLAYING                                        = 1,
	WRL_NORMAL                                         = 2,
	WRL_SUCCESS                                        = 3,
	WRL_FAILURE                                        = 4,
	WRL_MAX                                            = 5
};*/

// Enum PlanBGame.PBHeatSystemArc.EPrimaryHeatEventType
/*enum EPrimaryHeatEventType
{
	PHE_Kill                                           = 0,
	PHE_TurretKill                                     = 1,
	PHE_Death                                          = 2,
	PHE_HeadCrabExplosion                              = 3,
	PHE_PerfectReloader                                = 4,
	PHE_Assist                                         = 5,
	PHE_HeatCollector1                                 = 6,
	PHE_HeatCollector2                                 = 7,
	PHE_HeatCollector3                                 = 8,
	PHE_Suicide                                        = 9,
	PHE_TeamKill                                       = 10,
	PHE_Sharpshooter                                   = 11,
	PHE_DestroyedTurret                                = 12,
	PHE_DestroyedHeadCrab                              = 13,
	PHE_HeadCrabSuccess                                = 14,
	PHE_SurviveHeadcrab                                = 15,
	PHE_PlacedObjective                                = 16,
	PHE_TeamMatePlacedObjective                        = 17,
	PHE_DestroyedPaperPlane                            = 18,
	PHE_HeadcrabAssist                                 = 19,
	PHE_HeadcrabTurret                                 = 20,
	PHE_ScoreAPoint_Sirius                             = 21,
	PHE_ScoreAPoint_Polaris                            = 22,
	PHE_GreatDefence                                   = 23,
	PHE_Style                                          = 24,
	PHE_TeamPlaceC4                                    = 25,
	PHE_PlaceC4                                        = 26,
	PHE_TeamDefuseC4                                   = 27,
	PHE_DefuseC4                                       = 28,
	PHE_SNDWin                                         = 29,
	PHE_SNDLose                                        = 30,
	PHE_MAX                                            = 31
};*/

// Enum PlanBGame.PBHeatSystemArc.EBonusHeatEventType
/*enum EBonusHeatEventType
{
	BHE_CombatSlide                                    = 0,
	BHE_KillWithOwnWeapon                              = 1,
	BHE_BecomeNemesis                                  = 2,
	BHE_KilledNemesis                                  = 3,
	BHE_Payback                                        = 4,
	BHE_Comeback                                       = 5,
	BHE_FirstBlood                                     = 6,
	BHE_DoubleKill                                     = 7,
	BHE_TripleKill                                     = 8,
	BHE_MultiKill                                      = 9,
	BHE_CloseCombatKill                                = 10,
	BHE_AmmunitionEfficiency                           = 11,
	BHE_NiceShot                                       = 12,
	BHE_PerfectShot                                    = 13,
	BHE_KillWhileFlashed                               = 14,
	BHE_KillWhileFalling                               = 15,
	BHE_Headshot                                       = 16,
	BHE_KillTheLeader                                  = 17,
	BHE_BeingLast                                      = 18,
	BHE_ChargeKill                                     = 19,
	BHE_KillBerserk                                    = 20,
	BHE_KillWhileHealing                               = 21,
	BHE_BeyondTheGrave                                 = 22,
	BHE_HeadcrabHumiliation                            = 23,
	BHE_HeadcrabRevenge                                = 24,
	BHE_HeadcrabKiller                                 = 25,
	BHE_KillTaunting                                   = 26,
	BHE_KillWithPaperPlane                             = 27,
	BHE_KillInTheZone                                  = 28,
	BHE_KillHoldTheLine                                = 29,
	BHE_MAX                                            = 30
};*/

// Enum PlanBGame.PBCommentatorSystem.ECommentatorGlobalEvt
/*enum ECommentatorGlobalEvt
{
	CGE_ResultScreen_Draw                              = 0,
	CGE_ResultScreen_Loss_Large                        = 1,
	CGE_ResultScreen_Loss_Medium                       = 2,
	CGE_ResultScreen_Loss_Small                        = 3,
	CGE_ResultScreen_Win_Large                         = 4,
	CGE_ResultScreen_Win_Medium                        = 5,
	CGE_ResultScreen_Win_Small                         = 6,
	CGE_SafetyBuy_End                                  = 7,
	CGE_DVN_Close_Score_Polaris                        = 8,
	CGE_DVN_ResultScreen_Polaris_Win                   = 9,
	CGE_DVN_ResultScreen_Sirius_Win                    = 10,
	CGE_DVN_Safety_Start_Second                        = 11,
	CGE_DVN_SafetyBuy_1stSafetyBuyStart                = 12,
	CGE_DVN_Tied_Score_Polaris                         = 13,
	CGE_DVN_Time_1st_Half_2min                         = 14,
	CGE_DVN_Time_1st_Half_30sec                        = 15,
	CGE_DVN_Time_1st_Half_Mid                          = 16,
	CGE_DVN_Time_2nd_Half_2min                         = 17,
	CGE_DVN_Time_2nd_Half_30sec                        = 18,
	CGE_DVN_Time_2nd_Half_Mid                          = 19,
	CGE_DVN_Time_HalfTime                              = 20,
	CGE_GDR_Capture_Polaris                            = 21,
	CGE_GDR_Capture_Sirius                             = 22,
	CGE_GDR_Defend_Polaris                             = 23,
	CGE_GDR_Defend_Sirius                              = 24,
	CGE_GDR_Score_Polaris                              = 25,
	CGE_GDR_Score_Sirius                               = 26,
	CGE_SND_AllPolarisDead_WinSirius                   = 27,
	CGE_SND_AllSiriusDead_WinPolaris                   = 28,
	CGE_SND_C4Defused                                  = 29,
	CGE_SND_C4Dropped                                  = 30,
	CGE_SND_C4Explodes                                 = 31,
	CGE_SND_C4PickUp                                   = 32,
	CGE_SND_C4Placed                                   = 33,
	CGE_SND_RoundTimerOver_WinPolaris                  = 34,
	CGE_SND_RoundTimerOver_WinSirius                   = 35,
	CGE_SND_SafetyBuy                                  = 36,
	CGE_SND_Time_HalfTime                              = 37,
	CGE_TDM_Lead_Polaris                               = 38,
	CGE_TDM_Lead_Sirius                                = 39,
	CGE_TDM_SafetyBuy_Start                            = 40,
	CGE_TDM_Time_Midpoint                              = 41,
	CGE_TDM_Time_OneMin                                = 42,
	CGE_MAX                                            = 43
};*/

// Enum PlanBGame.PBCommentatorSystem.ECommentatorLayer
/*enum ECommentatorLayer
{
	ECL_FillIn                                         = 0,
	ECL_Heat                                           = 1,
	ECL_Global                                         = 2,
	ECL_MAX                                            = 3
};*/

// Enum PlanBGame.PBKWeapon.EAimingStatus
/*enum EAimingStatus
{
	EAS_NoAimingStatus                                 = 0,
	EAS_StartAimingIn                                  = 1,
	EAS_StartAimingOut                                 = 2,
	EAS_MAX                                            = 3
};*/

// Enum PlanBGame.PBKWeapon.ECharStance
/*enum ECharStance
{
	CSE_INVALID                                        = 0,
	CSE_StandingStill                                  = 1,
	CSE_Running                                        = 2,
	CSE_Jumping                                        = 3,
	CSE_AimingStill                                    = 4,
	CSE_AimingMoving                                   = 5,
	CSE_CrouchingStill                                 = 6,
	CSE_CrouchingMoving                                = 7,
	CSE_MAX                                            = 8
};*/

// Enum PlanBGame.PBKWeaponParams.EFireType
/*enum EFireType
{
	EAGFT_InstantHit                                   = 0,
	EAGFT_MeleeHit                                     = 1,
	EAGFT_Projectile                                   = 2,
	EAGFT_Custom                                       = 3,
	EAGFT_None                                         = 4,
	EAGFT_MAX                                          = 5
};*/

// Enum PlanBGame.PBKWeaponParams.EFireMode
/*enum EFireMode
{
	EFM_FullAuto                                       = 0,
	EFM_SemiAuto                                       = 1,
	EFM_MAX                                            = 2
};*/

// Enum PlanBGame.PBKWeaponParams.EHUDBulletSize
/*enum EHUDBulletSize
{
	EHBS_BigBullet                                     = 0,
	EHBS_MediumBullet                                  = 1,
	EHBS_SmallBullet                                   = 2,
	EHBS_TotalBulletsCount                             = 3,
	EHBS_MAX                                           = 4
};*/

// Enum PlanBGame.PBKWeaponParams.EWeaponCatType
/*enum EWeaponCatType
{
	EWCT_Invalid                                       = 0,
	EWCT_Hands                                         = 1,
	EWCT_Knife                                         = 2,
	EWCT_Pistol                                        = 3,
	EWCT_SMG                                           = 4,
	EWCT_Shotgun                                       = 5,
	EWCT_AssaultRifle                                  = 6,
	EWCT_Sniper                                        = 7,
	EWCT_Grenade                                       = 8,
	EWCT_SpecialWeapon                                 = 9,
	EWCT_MAX                                           = 10
};*/

// Enum PlanBGame.PBNWeaponObject.EWeaponCategory
/*enum EWeaponCategory
{
	EWC_PrimaryWeapon                                  = 0,
	EWC_SecondaryWeapon                                = 1,
	EWC_GrenadeWeapon                                  = 2,
	EWC_MeleeWeapon                                    = 3,
	EWC_PDAWeapon                                      = 4,
	EWC_SpecialWeapon                                  = 5,
	EWC_DefuseKitWeapon                                = 6,
	EWC_Tier1                                          = 7,
	EWC_Tier2                                          = 8,
	EWC_Tier3                                          = 9,
	EWC_Tier4                                          = 10,
	PBWEWC_ThisIsACrappyEngineSoINeedThisEnumHere_ThankYou = 11,
	EWeaponCategory_MAX                                = 12
};*/

// Enum PlanBGame.PBNWeaponObject.EWeaponModType
/*enum EWeaponModType
{
	WEMT_AIM                                           = 0,
	WEMT_MUZZLE                                        = 1,
	WEMT_LASERPOINTER                                  = 2,
	WEMT_STOCK                                         = 3,
	WEMT_BARREL                                        = 4,
	WEMT_TRIGGER                                       = 5,
	WEMT_MAGAZINE                                      = 6,
	WEMT_SLIDER                                        = 7,
	WEMT_MAX                                           = 8
};*/

// Enum PlanBGame.PBKWeaponParams.InterpolationMethod
/*enum InterpolationMethod
{
	IPM_Linear                                         = 0,
	IPM_EaseOut                                        = 1,
	IPM_EaseIn                                         = 2,
	IPM_EasyInOut                                      = 3,
	IPM_MAX                                            = 4
};*/

// Enum PlanBGame.PBSkelControl_Recoil.ERecoilStart
/*enum ERecoilStart
{
	ERS_Zero                                           = 0,
	ERS_Random                                         = 1,
	ERS_MAX                                            = 2
};*/

// Enum PlanBGame.PBAchievement_KillerQueen.eGameMode
/*enum eGameMode
{
	GAMEMODE_ANY                                       = 0,
	GAMEMODE_TDM                                       = 1,
	GAMEMODE_CAMPAIGN                                  = 2,
	GAMEMODE_REINFORCEMENT                             = 3,
	GAMEMODE_MAX                                       = 4
};*/

// Enum PlanBGame.PBSkill.EPBTier
/*enum EPBTier
{
	EPB_Tier1                                          = 0,
	EPB_Tier2                                          = 1,
	EPB_Tier3                                          = 2,
	EPB_Tier4                                          = 3,
	EPB_MAX                                            = 4
};*/

// Enum PlanBGame.PBSkill.SkillEnergyStatus
/*enum SkillEnergyStatus
{
	SES_NormalEnergy                                   = 0,
	SES_LowEnergy                                      = 1,
	SES_CriticalEnergy                                 = 2,
	SES_MAX                                            = 3
};*/

// Enum PlanBGame.PBActorController.CAMovementMode
/*enum CAMovementMode
{
	CAMM_Auto                                          = 0,
	CAMM_User                                          = 1,
	CAMM_MAX                                           = 2
};*/

// Enum PlanBGame.PBPawn.EPawnShadowMode
/*enum EPawnShadowMode
{
	SHADOW_None                                        = 0,
	SHADOW_LOD                                         = 1,
	SHADOW_All                                         = 2,
	SHADOW_MAX                                         = 3
};*/

// Enum PlanBGame.PBPawn.ViewShakePhase
/*enum ViewShakePhase
{
	VSP_Inactive                                       = 0,
	VSP_In                                             = 1,
	VSP_Out                                            = 2,
	VSP_MAX                                            = 3
};*/

// Enum PlanBGame.PBPawn.EBodyStance
/*enum EBodyStance
{
	BS_FullBody                                        = 0,
	BS_Head                                            = 1,
	BS_Std_Up                                          = 2,
	BS_PreAim_Std_Up                                   = 3,
	BS_Std_Upper_Harsh                                 = 4,
	BS_Std_Upper_NoAim                                 = 5,
	BS_Std_Idle_Lower                                  = 6,
	BS_Std_Idle_Upper                                  = 7,
	BS_Std_Trans_Upper                                 = 8,
	BS_Std_Walk_Upper                                  = 9,
	BS_Std_Run_Upper                                   = 10,
	BS_MAX                                             = 11
};*/

// Enum PlanBGame.PBMapList.EGameSetupOptionType
/*enum EGameSetupOptionType
{
	EGSOT_TDMMatchTime                                 = 0,
	EGSOT_FriendlyFire                                 = 1,
	EGSOT_EndMatchWin                                  = 2,
	EGSOT_TDMMatchRounds                               = 3,
	EGSOT_MAX                                          = 4
};*/

// Enum PlanBGame.PBMapList.ESubscriptionType
/*enum ESubscriptionType
{
	ESUT_VOID                                          = 0,
	ESUT_GOLD                                          = 1,
	ESUT_MAX                                           = 2
};*/

// Enum PlanBGame.PBMapList.EGameModeType
/*enum EGameModeType
{
	EGT_TeamDeathmatch                                 = 0,
	EGT_Lobby                                          = 1,
	EGT_GiantDeathRobot                                = 2,
	EGT_DefendBase                                     = 3,
	EGT_SearchAndDestroy                               = 4,
	EGT_Invalid                                        = 5,
	EGT_MAX                                            = 6
};*/

// Enum PlanBGame.PBVoteList.EPBVoteUserLevel
/*enum EPBVoteUserLevel
{
	EPBVote_AvailableForAll                            = 0,
	EPBVote_AvailableForAdmin                          = 1,
	EPBVote_MAX                                        = 2
};*/

// Enum PlanBGame.PBVoteList.EPBVoteCancelledReason
/*enum EPBVoteCancelledReason
{
	EPBVoteCancelledReason_Default                     = 0,
	EPBVoteCancelledReason_PlayerLeft                  = 1,
	EPBVoteCancelledReason_EndOfRound                  = 2,
	EPBVoteCancelledReason_MAX                         = 3
};*/

// Enum PlanBGame.PBVoteList.EPBNextMatchVoteOption
/*enum EPBNextMatchVoteOption
{
	EPBNextMatch_Default                               = 0,
	EPBNextMatch_Repeat                                = 1,
	EPBNextMatch_ChangeMap                             = 2,
	EPBNextMatch_ChangeMode                            = 3,
	EPBNextMatch_MAX                                   = 4
};*/

// Enum PlanBGame.PBVoteList.EPBVoteType
/*enum EPBVoteType
{
	EPBVote_KickVote                                   = 0,
	EPBVote_MapVote                                    = 1,
	EPBVote_RestartMatch                               = 2,
	EPBVote_TeamSwitch                                 = 3,
	EPBVote_BackToLobby                                = 4,
	EPBVote_NextMap                                    = 5,
	EPBVote_BestLookingPlayer                          = 6,
	EPBVote_NextMatch                                  = 7,
	EPBVote_MAX                                        = 8
};*/

// Enum PlanBGame.PBHUD.ELobbyScreenState
/*enum ELobbyScreenState
{
	ELSS_Closed                                        = 0,
	ELSS_Victory                                       = 1,
	ELSS_MapVote                                       = 2,
	ELSS_Reward                                        = 3,
	ELSS_Lobby                                         = 4,
	ELSS_MAX                                           = 5
};*/

// Enum PlanBGame.PBHUD.ChatMessageType
/*enum ChatMessageType
{
	ECP_Player                                         = 0,
	ECP_DeadPlayer                                     = 1,
	ECP_Team                                           = 2,
	ECP_DeadTeam                                       = 3,
	ECP_Opponent                                       = 4,
	ECP_DeadOpponent                                   = 5,
	ECP_GM                                             = 6,
	ECP_DedicatedSpectator                             = 7,
	ECP_DEFAULT                                        = 8,
	ECP_MAX                                            = 9
};*/

// Enum PlanBGame.PBHUD.EEORScreenType
/*enum EEORScreenType
{
	EORScreenType_None                                 = 0,
	EORScreenType_ResultScreen                         = 1,
	EORScreenType_End                                  = 2,
	EORScreenType_MAX                                  = 3
};*/

// Enum PlanBGame.PBRoundHUD.EHudGameMode
/*enum EHudGameMode
{
	EHGM_TDM                                           = 0,
	EHGM_GDR                                           = 1,
	EHGM_DTB                                           = 2,
	EHGM_SND                                           = 3,
	EHGM_NONE                                          = 4,
	EHGM_MAX                                           = 5
};*/

// Enum PlanBGame.PBRoundHUD.EHudState
/*enum EHudState
{
	EHS_Normal                                         = 0,
	EHS_ChatAndKill                                    = 1,
	EHS_KillOnly                                       = 2,
	EHS_MAX                                            = 3
};*/

// Enum PlanBGame.PBRoundHUD.EWeaponChangeFailureStatus
/*enum EWeaponChangeFailureStatus
{
	EWCFS_PlayerInteracting                            = 0,
	EWCFS_WeaponChangeNotAllowed                       = 1,
	EWCFS_WeaponSkillLocked                            = 2,
	EWCFS_NotEnoughEnergy                              = 3,
	EWCFS_MAX                                          = 4
};*/

// Enum PlanBGame.PBRoundHUD.PBInstructionVideoType
/*enum PBInstructionVideoType
{
	PBInstructionVideo_None                            = 0,
	PBInstructionVideo_CampaignStarts                  = 1,
	PBInstructionVideo_EnterMortarZone_Friendly        = 2,
	PBInstructionVideo_EnterMortarZone_Enemy           = 3,
	PBInstructionVideo_EnterFinalCampaignMap           = 4,
	PBInstructionVideo_MAX                             = 5
};*/

// Enum PlanBGame.PBTauntCamera.TauntBlendType
/*enum TauntBlendType
{
	TauntBlendType_Linear                              = 0,
	TauntBlendType_Sin                                 = 1,
	TauntBlendType_Square                              = 2,
	TauntBlendType_Sqrt                                = 3,
	TauntBlendType_MAX                                 = 4
};*/

// Enum PlanBGame.PBFlashBangLogic.FlashbangBlendType
/*enum FlashbangBlendType
{
	FB_Latest                                          = 0,
	FB_Additive                                        = 1,
	FB_Max                                             = 2
};*/

// Enum PlanBGame.PBCustomChar_AssetStore.PBTextureSchemeType
/*enum PBTextureSchemeType
{
	PBTST_Undefined                                    = 0,
	PBTST_SkinTone                                     = 1,
	PBTST_FaceHair                                     = 2,
	PBTST_FacePaint                                    = 3,
	PBTST_ClanTag                                      = 4,
	PBTST_SkimaskCamo                                  = 5,
	PBTST_HairColor                                    = 6,
	PBTST_MAX                                          = 7
};*/

// Enum PlanBGame.PBCustomChar_AssetStore.PBGameItemType
/*enum PBGameItemType
{
	MPT_Undefined                                      = 0,
	MPT_Head                                           = 1,
	MPT_Haircut                                        = 2,
	MPT_Upperbody                                      = 3,
	MPT_Vest                                           = 4,
	MPT_Hands                                          = 5,
	MPT_ArmArmour                                      = 6,
	MPT_Legs                                           = 7,
	MPT_LegArmour                                      = 8,
	MPT_Boots                                          = 9,
	MPT_HeadGear                                       = 10,
	MPT_SkiMask                                        = 11,
	MPT_Mask                                           = 12,
	MPT_Beard                                          = 13,
	MPT_MAX                                            = 14
};*/

// Enum PlanBGame.PBCustomChar_AssetStore.PBItemType
/*enum PBItemType
{
	PBIT_Unknown                                       = 0,
	PBIT_CharPart                                      = 1,
	PBIT_CharAttachment                                = 2,
	PBIT_CharColorScheme                               = 3,
	PBIT_Weapon                                        = 4,
	PBIT_WeaponMod                                     = 5,
	PBIT_WeaponMaterial                                = 6,
	PBIT_WeaponRepair                                  = 7,
	PBIT_WeaponDecal                                   = 8,
	PBIT_Service                                       = 9,
	PBIT_Taunt                                         = 10,
	PBIT_AvatarIcon                                    = 11,
	PBIT_MAX                                           = 12
};*/

// Enum PlanBGame.PBCustomChar_AssetStore.DependentMeshType
/*enum DependentMeshType
{
	DMT_NormalMesh                                     = 0,
	DMT_AltMesh1                                       = 1,
	DMT_AltMesh2                                       = 2,
	DMT_MAX                                            = 3
};*/

// Enum PlanBGame.PBCustomChar_AssetStore.PBGenderType
/*enum PBGenderType
{
	PBGT_Male                                          = 0,
	PBGT_Female                                        = 1,
	PBGT_MAX                                           = 2
};*/

// Enum PlanBGame.PBAnim_BlendPerBone.EPBBlendType
/*enum EPBBlendType
{
	EPBBT_ParentBoneSpace                              = 0,
	EPBBT_MeshSpace                                    = 1,
	EPBBT_MAX                                          = 2
};*/

// Enum PlanBGame.PBAnim_BlendPerBone.EPBWeightCheck
/*enum EPBWeightCheck
{
	EPBWC_ChildIndexFullWeight                         = 0,
	EPBWC_ChildIndexNotFullWeight                      = 1,
	EPBWC_ChildIndexRelevant                           = 2,
	EPBWC_ChildIndexNotRelevant                        = 3,
	EPBWC_MAX                                          = 4
};*/

// Enum PlanBGame.PBAnim_MovementNode.ESpeedType
/*enum ESpeedType
{
	EST_Velocity                                       = 0,
	EST_AccelAndMaxSpeed                               = 1,
	EST_MAX                                            = 2
};*/

// Enum PlanBGame.PBAnim_MovementNode.EMoveTransChannel
/*enum EMoveTransChannel
{
	EMTC_Idle                                          = 0,
	EMTC_Walk                                          = 1,
	EMTC_Run                                           = 2,
	EMTC_Transition                                    = 3,
	EMTC_MAX                                           = 4
};*/

// Enum PlanBGame.PBAnim_TurnInPlace.EPawnCurrentPosture
/*enum EPawnCurrentPosture
{
	PCP_Standing                                       = 0,
	PCP_Crouching                                      = 1,
	PCP_MAX                                            = 2
};*/

// Enum PlanBGame.PBAnimBlendByDirection.EBlendDirTypes
/*enum EBlendDirTypes
{
	FBDir_Forward                                      = 0,
	FBDir_Back                                         = 1,
	FBDir_Left                                         = 2,
	FBDir_Right                                        = 3,
	FBDir_None                                         = 4,
	FBDir_MAX                                          = 5
};*/

// Enum PlanBGame.PBAnimBlendByFall.EBlendFallTypes
/*enum EBlendFallTypes
{
	FBT_Up                                             = 0,
	FBT_Down                                           = 1,
	FBT_PreLand                                        = 2,
	FBT_Land                                           = 3,
	FBT_DblJumpUp                                      = 4,
	FBT_DblJumpDown                                    = 5,
	FBT_DblJumpPreLand                                 = 6,
	FBT_DblJumpLand                                    = 7,
	FBT_None                                           = 8,
	FBT_MAX                                            = 9
};*/

// Enum PlanBGame.PBAnimBlendByGroundDodge.EDirTypes
/*enum EDirTypes
{
	Dir_None                                           = 0,
	Dir_Forward                                        = 1,
	Dir_Back                                           = 2,
	Dir_Left                                           = 3,
	Dir_Right                                          = 4,
	Dir_MAX                                            = 5
};*/

// Enum PlanBGame.PBAnimBlendByReloadMinigame.EReloadMinigameAnimation
/*enum EReloadMinigameAnimation
{
	RMA_ReloadStand                                    = 0,
	RMA_Start                                          = 1,
	RMA_Middle                                         = 2,
	RMA_Failure                                        = 3,
	RMA_End                                            = 4,
	RMA_MAX                                            = 5
};*/

// Enum PlanBGame.PBGameInfo.EServerShutdownReason
/*enum EServerShutdownReason
{
	ESSR_LobbyClosed                                   = 0,
	ESSR_LobbyInactivity                               = 1,
	ESSR_ServerFailure                                 = 2,
	ESSR_ShutdownEvent                                 = 3,
	ESSR_UnknownReason                                 = 4,
	ESSR_MAX                                           = 5
};*/

// Enum PlanBGame.PBGameInfo.EVoiceChannel
/*enum EVoiceChannel
{
	VC_Spectators                                      = 0,
	VC_Team1                                           = 1,
	VC_Team2                                           = 2,
	VC_MAX                                             = 3
};*/

// Enum PlanBGame.PBGameInfo.EPBGameType
/*enum EPBGameType
{
	EPBGT_TeamDeathmatch                               = 0,
	EPBGT_LastTeamStanding                             = 1,
	EPBGT_Warfare                                      = 2,
	EPBGT_MAX                                          = 3
};*/

// Enum PlanBGame.PBCharacter.BerserkChargeState
/*enum BerserkChargeState
{
	BCHS_None                                          = 0,
	BCHS_Charging                                      = 1,
	BCHS_ChargeHitObstacle                             = 2,
	BCHS_MAX                                           = 3
};*/

// Enum PlanBGame.PBDefensePoint.EDefensePriority
/*enum EDefensePriority
{
	DEFPRI_Low                                         = 0,
	DEFPRI_High                                        = 1,
	DEFPRI_MAX                                         = 2
};*/

// Enum PlanBGame.PBDamageType.DmgSoundType
/*enum DmgSoundType
{
	DMGSOUND_NONE                                      = 0,
	DMGSOUND_NORMAL_HIT                                = 1,
	DMGSOUND_SNIPER_HIT                                = 2,
	DMGSOUND_FELL_HIT                                  = 3,
	DMGSOUND_MAX                                       = 4
};*/

// Enum PlanBGame.PBCamMod_ScreenShake.EShakeParam
/*enum EShakeParam
{
	ESP_OffsetRandom                                   = 0,
	ESP_OffsetZero                                     = 1,
	ESP_MAX                                            = 2
};*/

// Enum PlanBGame.PBPlayerStatistics.EPlayerObjectiveEvent
/*enum EPlayerObjectiveEvent
{
	EPOE_ObjectivePlaced                               = 0,
	EPOE_ObjectiveDefused                              = 1,
	EPOE_ObjectiveDone                                 = 2,
	EPOE_MAX                                           = 3
};*/

// Enum PlanBGame.PBPlayerStatistics.EPlayerEvent
/*enum EPlayerEvent
{
	EPE_Suicide                                        = 0,
	EPE_TeamKill                                       = 1,
	EPE_KillFromTheZone                                = 2,
	EPE_KillInTheZone                                  = 3,
	EPE_SkillTier1                                     = 4,
	EPE_SkillTier2                                     = 5,
	EPE_SkillTier3                                     = 6,
	EPE_SkillTier4                                     = 7,
	EPE_MAX                                            = 8
};*/

// Enum PlanBGame.PBProfileSettings.EPBBindableKeys
/*enum EPBBindableKeys
{
	PBBND_Unbound                                      = 0,
	PBBND_MouseX                                       = 1,
	PBBND_MouseY                                       = 2,
	PBBND_MouseScrollUp                                = 3,
	PBBND_MouseScrollDown                              = 4,
	PBBND_LeftMouseButton                              = 5,
	PBBND_RightMouseButton                             = 6,
	PBBND_MiddleMouseButton                            = 7,
	PBBND_ThumbMouseButton                             = 8,
	PBBND_ThumbMouseButton2                            = 9,
	PBBND_BackSpace                                    = 10,
	PBBND_Tab                                          = 11,
	PBBND_Enter                                        = 12,
	PBBND_Pause                                        = 13,
	PBBND_CapsLock                                     = 14,
	PBBND_Escape                                       = 15,
	PBBND_SpaceBar                                     = 16,
	PBBND_PageUp                                       = 17,
	PBBND_PageDown                                     = 18,
	PBBND_End                                          = 19,
	PBBND_Home                                         = 20,
	PBBND_Left                                         = 21,
	PBBND_Up                                           = 22,
	PBBND_Right                                        = 23,
	PBBND_Down                                         = 24,
	PBBND_Insert                                       = 25,
	PBBND_Delete                                       = 26,
	PBBND_Zero                                         = 27,
	PBBND_One                                          = 28,
	PBBND_Two                                          = 29,
	PBBND_Three                                        = 30,
	PBBND_Four                                         = 31,
	PBBND_Five                                         = 32,
	PBBND_Six                                          = 33,
	PBBND_Seven                                        = 34,
	PBBND_Eight                                        = 35,
	PBBND_Nine                                         = 36,
	PBBND_A                                            = 37,
	PBBND_B                                            = 38,
	PBBND_C                                            = 39,
	PBBND_D                                            = 40,
	PBBND_E                                            = 41,
	PBBND_F                                            = 42,
	PBBND_G                                            = 43,
	PBBND_H                                            = 44,
	PBBND_I                                            = 45,
	PBBND_J                                            = 46,
	PBBND_K                                            = 47,
	PBBND_L                                            = 48,
	PBBND_M                                            = 49,
	PBBND_N                                            = 50,
	PBBND_O                                            = 51,
	PBBND_P                                            = 52,
	PBBND_Q                                            = 53,
	PBBND_R                                            = 54,
	PBBND_S                                            = 55,
	PBBND_T                                            = 56,
	PBBND_U                                            = 57,
	PBBND_V                                            = 58,
	PBBND_W                                            = 59,
	PBBND_X                                            = 60,
	PBBND_Y                                            = 61,
	PBBND_Z                                            = 62,
	PBBND_NumPadZero                                   = 63,
	PBBND_NumPadOne                                    = 64,
	PBBND_NumPadTwo                                    = 65,
	PBBND_NumPadThree                                  = 66,
	PBBND_NumPadFour                                   = 67,
	PBBND_NumPadFive                                   = 68,
	PBBND_NumPadSix                                    = 69,
	PBBND_NumPadSeven                                  = 70,
	PBBND_NumPadEight                                  = 71,
	PBBND_NumPadNine                                   = 72,
	PBBND_Multiply                                     = 73,
	PBBND_Add                                          = 74,
	PBBND_Subtract                                     = 75,
	PBBND_Decimal                                      = 76,
	PBBND_Divide                                       = 77,
	PBBND_F1                                           = 78,
	PBBND_F2                                           = 79,
	PBBND_F3                                           = 80,
	PBBND_F4                                           = 81,
	PBBND_F5                                           = 82,
	PBBND_F6                                           = 83,
	PBBND_F7                                           = 84,
	PBBND_F8                                           = 85,
	PBBND_F9                                           = 86,
	PBBND_F10                                          = 87,
	PBBND_F11                                          = 88,
	PBBND_F12                                          = 89,
	PBBND_NumLock                                      = 90,
	PBBND_ScrollLock                                   = 91,
	PBBND_LeftShift                                    = 92,
	PBBND_RightShift                                   = 93,
	PBBND_LeftControl                                  = 94,
	PBBND_RightControl                                 = 95,
	PBBND_LeftAlt                                      = 96,
	PBBND_RightAlt                                     = 97,
	PBBND_Semicolon                                    = 98,
	PBBND_Equals                                       = 99,
	PBBND_Comma                                        = 100,
	PBBND_Underscore                                   = 101,
	PBBND_Period                                       = 102,
	PBBND_Slash                                        = 103,
	PBBND_Tilde                                        = 104,
	PBBND_LeftBracket                                  = 105,
	PBBND_Backslash                                    = 106,
	PBBND_RightBracket                                 = 107,
	PBBND_Quote                                        = 108,
	PBBND_LeftStickX                                   = 109,
	PBBND_LeftStickY                                   = 110,
	PBBND_LeftStick_Click                              = 111,
	PBBND_RightStick_X                                 = 112,
	PBBND_RightStick_Y                                 = 113,
	PBBND_RightStick_Click                             = 114,
	PBBND_ButtonA                                      = 115,
	PBBND_ButtonB                                      = 116,
	PBBND_ButtonX                                      = 117,
	PBBND_ButtonY                                      = 118,
	PBBND_LeftShoulder                                 = 119,
	PBBND_RightShoulder                                = 120,
	PBBND_LeftTrigger                                  = 121,
	PBBND_RightTrigger                                 = 122,
	PBBND_Start                                        = 123,
	PBBND_Select                                       = 124,
	PBBND_DPad_Up                                      = 125,
	PBBND_DPad_Down                                    = 126,
	PBBND_DPad_Left                                    = 127,
	PBBND_DPad_Right                                   = 128,
	PBBND_SpecialX                                     = 129,
	PBBND_SpecialY                                     = 130,
	PBBND_SpecialZ                                     = 131,
	PBBND_SpecialW                                     = 132,
	PBBND_Count                                        = 133,
	PBBND_MAX                                          = 134
};*/

// Enum PlanBGame.PBProfileSettings.EGenericYesNo
/*enum EGenericYesNo
{
	PBPID_VALUE_NO                                     = 0,
	PBPID_VALUE_YES                                    = 1,
	PBPID_VALUE_MAX                                    = 2
};*/

// Enum PlanBGame.PBProfileSettings.EDigitalButtonActions
/*enum EDigitalButtonActions
{
	DBA_None                                           = 0,
	DBA_Fire                                           = 1,
	DBA_AltFire                                        = 2,
	DBA_Jump                                           = 3,
	DBA_Use                                            = 4,
	DBA_ToggleMelee                                    = 5,
	DBA_ShowScores                                     = 6,
	DBA_ShowMap                                        = 7,
	DBA_FeignDeath                                     = 8,
	DBA_ToggleSpeaking                                 = 9,
	DBA_ToggleMinimap                                  = 10,
	DBA_WeaponPicker                                   = 11,
	DBA_NextWeapon                                     = 12,
	DBA_BestWeapon                                     = 13,
	DBA_PrevWeapon                                     = 14,
	DBA_Duck                                           = 15,
	DBA_MoveForward                                    = 16,
	DBA_MoveBackward                                   = 17,
	DBA_StrafeLeft                                     = 18,
	DBA_StrafeRight                                    = 19,
	DBA_TurnLeft                                       = 20,
	DBA_TurnRight                                      = 21,
	DBA_SwitchWeapon1                                  = 22,
	DBA_SwitchWeapon2                                  = 23,
	DBA_SwitchWeapon3                                  = 24,
	DBA_SwitchWeapon4                                  = 25,
	DBA_SwitchWeapon5                                  = 26,
	DBA_SwitchWeapon6                                  = 27,
	DBA_SwitchWeapon7                                  = 28,
	DBA_SwitchWeapon8                                  = 29,
	DBA_SwitchWeapon9                                  = 30,
	DBA_SwitchWeapon10                                 = 31,
	DBA_ShrinkHUD                                      = 32,
	DBA_GrowHUD                                        = 33,
	DBA_Taunt                                          = 34,
	DBA_Taunt2                                         = 35,
	DBA_Talk                                           = 36,
	DBA_TeamTalk                                       = 37,
	DBA_ShowCommandMenu                                = 38,
	DBA_ShowMenu                                       = 39,
	DBA_ToggleTranslocator                             = 40,
	DBA_JumpPC                                         = 41,
	DBA_BestWeaponPC                                   = 42,
	DBA_Horn                                           = 43,
	DBA_MAX                                            = 44
};*/

// Enum PlanBGame.PBServicesStorage.EPBServiceCategory
/*enum EPBServiceCategory
{
	EPBServiceCategory_Boosters                        = 0,
	EPBServiceCategory_Character                       = 1,
	EPBServiceCategory_Interface                       = 2,
	EPBServiceCategory_Inventory                       = 3,
	EPBServiceCategory_Premium                         = 4,
	EPBServiceCategory_MAX                             = 5
};*/

// Enum PlanBGame.PBCustomChar_MenuData.PBItemShopRequestType
/*enum PBItemShopRequestType
{
	PBISRT_SetPresetItem                               = 0,
	PBISRT_FindOffers                                  = 1,
	PBISRT_FindUniqueOffers                            = 2,
	PBISRT_FindItemOffers                              = 3,
	PBISRT_GetOfferDetails                             = 4,
	PBISRT_GetInventoryItemDetailsDone                 = 5,
	PBISRT_RepairInventoryItem                         = 6,
	PBISRT_MAX                                         = 7
};*/

// Enum PlanBGame.PBCustomChar_MenuData.PBCurrencyType
/*enum PBCurrencyType
{
	PBCT_CREDITS                                       = 0,
	PBCT_COINS                                         = 1,
	PBCT_MAX                                           = 2
};*/

// Enum PlanBGame.PBCustomChar_Preview.EPBCustomizationMode
/*enum EPBCustomizationMode
{
	PBCM_Character                                     = 0,
	PBCM_Weapon                                        = 1,
	PBCM_MAX                                           = 2
};*/

// Enum PlanBGame.PBCustomSkeletalMesh.PBCustomMeshType
/*enum PBCustomMeshType
{
	PBM_Undefined                                      = 0,
	PBM_Character                                      = 1,
	PBM_Weapon                                         = 2,
	PBM_MAX                                            = 3
};*/

// Enum PlanBGame.PBNotificationSystem.NotificationType
/*enum NotificationType
{
	NT_Session_Soon                                    = 0,
	NT_Session_Renew                                   = 1,
	NT_Session_Ends                                    = 2,
	NT_Procode_Accept                                  = 3,
	NT_New_Message                                     = 4,
	NT_Kicked_Others                                   = 5,
	NT_Item_Unusable                                   = 6,
	NT_Item_Removed                                    = 7,
	NT_Item_Add                                        = 8,
	NT_GM_Mute                                         = 9,
	NT_GM_Message                                      = 10,
	NT_GM_Kicked                                       = 11,
	NT_GM_Banned                                       = 12,
	NT_Credit_Add                                      = 13,
	NT_Buddy_Online                                    = 14,
	NT_Buddy_Offline                                   = 15,
	NT_Buddy_Add                                       = 16,
	NT_Maintenance_Announcement                        = 17,
	NT_Connection_Lost                                 = 18,
	NT_Connection_Recovered                            = 19,
	NT_DEFAULT                                         = 20,
	NT_MAX                                             = 21
};*/

// Enum PlanBGame.PBMatchStatistics.ELevelEvent
/*enum ELevelEvent
{
	ELE_TeamAConquer1                                  = 0,
	ELE_TeamAConquer2                                  = 1,
	ELE_TeamBConquer1                                  = 2,
	ELE_TeamBConquer2                                  = 3,
	ELE_MAX                                            = 4
};*/

// Enum PlanBGame.PBGameRules_DTB.EDTBRoundState
/*enum EDTBRoundState
{
	EDTBCapturePhase                                   = 0,
	EDTBHalfTime                                       = 1,
	EDTBSwapingTeams                                   = 2,
	EDTBRoundState_MAX                                 = 3
};*/

// Enum PlanBGame.PBGameRules_GDR.EGDRRoundState
/*enum EGDRRoundState
{
	EGDRCapturePhase                                   = 0,
	EGDRRobotActivating                                = 1,
	EGDRAttackDefendPhase                              = 2,
	EGDRBaseDestroyed                                  = 3,
	EGDRRoundState_MAX                                 = 4
};*/

// Enum PlanBGame.PBGameRules_SND.ESNDWinReason
/*enum ESNDWinReason
{
	ESNDWR_NoWin                                       = 0,
	ESNDWR_Defused                                     = 1,
	ESNDWR_Detonated                                   = 2,
	ESNDWR_Timeout                                     = 3,
	ESNDWR_AttackersDead                               = 4,
	ESNDWR_DefendersDead                               = 5,
	ESNDWR_MAX                                         = 6
};*/

// Enum PlanBGame.PBGameRules_SND.ESNDRoundState
/*enum ESNDRoundState
{
	ESNDPlay                                           = 0,
	ESNDRoundEnd                                       = 1,
	ESNDHalfTime                                       = 2,
	ESNDSwapingTeams                                   = 3,
	ESNDRoundState_MAX                                 = 4
};*/

// Enum PlanBGame.PBGlobalBasket.EGBWeaponTypes
/*enum EGBWeaponTypes
{
	GB_WT_NONE                                         = 0,
	GB_WT_SMG                                          = 1,
	GB_WT_ASSAULT                                      = 2,
	GB_WT_SHOTGUN                                      = 3,
	GB_WT_SNIPER                                       = 4,
	GB_WT_SECONDARY                                    = 5,
	GB_WT_GRENADE                                      = 6,
	GB_WT_MAX                                          = 7
};*/

// Enum PlanBGame.PBGlobalBasket.EGBItemCategory
/*enum EGBItemCategory
{
	GB_IC_Booster                                      = 0,
	GB_IC_Service                                      = 1,
	GB_IC_Weapon                                       = 2,
	GB_IC_WeaponMod                                    = 3,
	GB_IC_Skill                                        = 4,
	GB_IC_Taunt                                        = 5,
	GB_IC_Vanity                                       = 6,
	GB_IC_MAX                                          = 7
};*/

// Enum PlanBGame.PBGFxObject_CharacterShop.ECharacterShopCategory
/*enum ECharacterShopCategory
{
	ECSC_UNKNOWN                                       = 0,
	ECSC_HEAD                                          = 1,
	ECSC_UPPERBODY                                     = 2,
	ECSC_LOWERBODY                                     = 3,
	ECSC_MAX                                           = 4
};*/

// Enum PlanBGame.PBGFxObject_CommCenter.EJoinServerMode
/*enum EJoinServerMode
{
	EJSM_Password                                      = 0,
	EJSM_Full                                          = 1,
	EJSM_MAX                                           = 2
};*/

// Enum PlanBGame.PBGFxObject_CommCenter.EModificationStatus
/*enum EModificationStatus
{
	EMS_Disabled                                       = 0,
	EMS_Modifying                                      = 1,
	EMS_Success                                        = 2,
	EMS_Failure                                        = 3,
	EMS_MAX                                            = 4
};*/

// Enum PlanBGame.PBShop_Appearance.ECharacterShopCategory
/*enum ECharacterShopCategory
{
	ECSC_UNKNOWN                                       = 0,
	ECSC_HEAD                                          = 1,
	ECSC_UPPERBODY                                     = 2,
	ECSC_LOWERBODY                                     = 3,
	ECSC_MAX                                           = 4
};*/

// Enum PlanBGame.PBGFxObject_ConsolidatedLobby.ELobbyFlowState
/*enum ELobbyFlowState
{
	ELFS_Initial                                       = 0,
	ELFS_VictoryStart                                  = 1,
	ELFS_MapVoteStart                                  = 2,
	ELFS_RewardStart                                   = 3,
	ELFS_RewardBasicDisplayed                          = 4,
	ELFS_RewardBoostIn                                 = 5,
	ELFS_NoBoostStarsIn                                = 6,
	ELFS_PauseBeforeHeatCountdown                      = 7,
	ELFS_HeatCountdown                                 = 8,
	ELFS_NotificationsUp                               = 9,
	ELFS_LobbyInRewardScreen                           = 10,
	ELFS_LobbyInLobby                                  = 11,
	ELFS_LobbyInScoreboard                             = 12,
	ELFS_MAX                                           = 13
};*/

// Enum PlanBGame.PBGFxObject_ConsolidatedLobby.ECLSelectedTab
/*enum ECLSelectedTab
{
	ECLST_Reward                                       = 0,
	ECLST_Lobby                                        = 1,
	ECLST_Scoreboard                                   = 2,
	ECLST_MAX                                          = 3
};*/

// Enum PlanBGame.PBGFxObject_ConsolidatedLobby.ECCBottomRightInfoState
/*enum ECCBottomRightInfoState
{
	ECCBRIS_Initial                                    = 0,
	ECCBRIS_WaitingForRoomMaster                       = 1,
	ECCBRIS_Loading                                    = 2,
	ECCBRIS_Countdown                                  = 3,
	ECCBRIS_MAX                                        = 4
};*/

// Enum PlanBGame.PBGFxObject_HUD.EHud_GDR_State
/*enum EHud_GDR_State
{
	EHGDRS_CaptureObjective                            = 0,
	EHGDRS_RobotActivate                               = 1,
	EHGDRS_RobotControl                                = 2,
	EHGDRS_RobotAttackingBase                          = 3,
	EHGDRS_RobotVictory                                = 4,
	EHGDRS_MAX                                         = 5
};*/

// Enum PlanBGame.PBGFxObject_HUD.EHud_Timer_Colour
/*enum EHud_Timer_Colour
{
	EHTC_Normal                                        = 0,
	EHTC_Warning                                       = 1,
	EHTC_Critical                                      = 2,
	EHTC_MAX                                           = 3
};*/

// Enum PlanBGame.PBGFxObject_HUD.EHud_GDR_Marker_State
/*enum EHud_GDR_Marker_State
{
	EHGDRMS_Objective                                  = 0,
	EHGDRMS_Robot                                      = 1,
	EHGDRMS_Base                                       = 2,
	EHGDRMS_MAX                                        = 3
};*/

// Enum PlanBGame.PBGFxObject_PlayerSettings.EPBPlayerSettings_SceneType
/*enum EPBPlayerSettings_SceneType
{
	EPBPlayerSettings_Main                             = 0,
	EPBPlayerSettings_Voting                           = 1,
	EPBPlayerSettings_PassiveVoting                    = 2,
	EPBPlayerSettings_Faction                          = 3,
	EPBPlayerSettings_Class                            = 4,
	EPBPlayerSettings_Options                          = 5,
	EPBPlayerSettings_None                             = 6,
	EPBPlayerSettings_MAX                              = 7
};*/

// Enum PlanBGame.PBGFxObject_ServerBrowser.ERequestStatus
/*enum ERequestStatus
{
	RS_Pending                                         = 0,
	RS_Assigned                                        = 1,
	RS_Launching                                       = 2,
	RS_Open                                            = 3,
	RS_Reserved1                                       = 4,
	RS_Reserved2                                       = 5,
	RS_Reserved3                                       = 6,
	RS_Reserved4                                       = 7,
	RS_Reserved5                                       = 8,
	RS_Cancel                                          = 9,
	RS_Unhandled                                       = 10,
	RS_Closed                                          = 11,
	RS_Failed                                          = 12,
	RS_Crashed                                         = 13,
	RS_AcceptedClose                                   = 14,
	RS_NoFreeInstance                                  = 15,
	RS_MAX                                             = 16
};*/

// Enum PlanBGame.PBGFxObject_ServerBrowser.ESververCreateState
/*enum ESververCreateState
{
	EServerNone                                        = 0,
	EServerAssigningId                                 = 1,
	EServerLaunching                                   = 2,
	EServerRunning                                     = 3,
	EServerCancelRequest                               = 4,
	ESververCreateState_MAX                            = 5
};*/

// Enum PlanBGame.PBLadderVolume.PBLadderClimbType
/*enum PBLadderClimbType
{
	LC_Cant                                            = 0,
	LC_Normal                                          = 1,
	LC_Reverse                                         = 2,
	LC_MAX                                             = 3
};*/

// Enum PlanBGame.PBMapSpot.EMapSpecialSpot
/*enum EMapSpecialSpot
{
	MPS_MAX_EXTENT                                     = 0,
	MPS_MIN_EXTENT                                     = 1,
	MPS_SIEGE_VOLUME                                   = 2,
	MPS_MAX                                            = 3
};*/

// Enum PlanBGame.PBNWebViewObject.EWebViewMouseButton
/*enum EWebViewMouseButton
{
	WVMB_LeftMouseButton                               = 0,
	WVMB_MiddleMouseButton                             = 1,
	WVMB_RightMouseButton                              = 2,
	WVMB_MAX                                           = 3
};*/

// Enum PlanBGame.PBOperatorServerRequestHandler.PBItemShopServerRequestType
/*enum PBItemShopServerRequestType
{
	PBISSRT_PingServer                                 = 0,
	PBISSRT_LoginServer                                = 1,
	PBISSRT_GetProfileDetailsServer                    = 2,
	PBISSRT_LogoutServer                               = 3,
	PBISSRT_UpdateProfileDetailsServer                 = 4,
	PBISSRT_UpdateItemDetailsServer                    = 5,
	PBISSRT_GetPresetsServer                           = 6,
	PBISSRT_GetSubscriptionModeServer                  = 7,
	PBISSRT_SendPlayerStatusServer                     = 8,
	PBISSRT_IncrementCoolnessServer                    = 9,
	PBISSRT_GetProgression                             = 10,
	PBISSRT_SubmitProgressionServer                    = 11,
	PBISSRT_DeleteEventByBackend                       = 12,
	PBISSRT_GetBoostersServer                          = 13,
	PBISSRT_MAX                                        = 14
};*/

// Enum PlanBGame.PBProfileSettings.EPBTextToSpeechMode
/*enum EPBTextToSpeechMode
{
	TTSM_None                                          = 0,
	TTSM_TeamOnly                                      = 1,
	TTSM_All                                           = 2,
	TTSM_MAX                                           = 3
};*/

// Enum PlanBGame.PBProfileSettings.ENetworkType
/*enum ENetworkType
{
	NETWORKTYPE_Unknown                                = 0,
	NETWORKTYPE_Modem                                  = 1,
	NETWORKTYPE_ISDN                                   = 2,
	NETWORKTYPE_Cable                                  = 3,
	NETWORKTYPE_LAN                                    = 4,
	NETWORKTYPE_MAX                                    = 5
};*/

// Enum PlanBGame.PBProfileSettings.PBPlayStyle
/*enum PBPlayStyle
{
	PBPS_Fun                                           = 0,
	PBPS_Competitive                                   = 1,
	PBPS_Chaos                                         = 2,
	PBPS_MAX                                           = 3
};*/

// Enum PlanBGame.PBSkill_HeadCrabActor.CrabAnim
/*enum CrabAnim
{
	CA_Idle                                            = 0,
	CA_Walk                                            = 1,
	CA_Jump                                            = 2,
	CA_Grab                                            = 3,
	CA_MAX                                             = 4
};*/

// Enum PlanBGame.PBSwearFilter.ESwearMaskMode
/*enum ESwearMaskMode
{
	ESMM_Astrix                                        = 0,
	ESMM_Hash                                          = 1,
	ESMM_Random                                        = 2,
	ESMM_Erase                                         = 3,
	ESMM_User                                          = 4,
	ESMM_MAX                                           = 5
};*/

// Enum PlanBGame.PlanBTypes.ESpecialZoneEnum
/*enum ESpecialZoneEnum
{
	ESZONE_NOT_SPECIAL                                 = 0,
	ESZONE_VIP                                         = 1,
	ESZONE_HELICOPTER_SUPPORT                          = 2,
	ESZONE_SUBWAY                                      = 3,
	ESZONE_EXTRALIFE                                   = 4,
	ESZONE_MAX                                         = 5
};*/

// Enum PlanBGame.PlanBTypes.EDirection
/*enum EDirection
{
	E_IGNORE                                           = 0,
	E_NORTH                                            = 1,
	E_SOUTH                                            = 2,
	E_WEST                                             = 3,
	E_EAST                                             = 4,
	E_MAX                                              = 5
};*/

// Enum PlanBGame.PBVoiceOverList.PBVoiceOverType
/*enum PBVoiceOverType
{
	PBVoiceOver_Ignore                                 = 0,
	PBVoiceOver_EnemyDown                              = 1,
	PBVoiceOver_Reloading                              = 2,
	PBVoiceOver_OutOfAmmo                              = 3,
	PBVoiceOver_ThrowingFrag                           = 4,
	PBVoiceOver_ThrowingSmoke                          = 5,
	PBVoiceOver_ThrowingFlash                          = 6,
	PBVoiceOver_CallingMortar                          = 7,
	PBVoiceOver_MAX                                    = 8
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class PlanBGame.AGBakeMapsCommandlet
// 0x0000 (0x007C - 0x007C)
class UAGBakeMapsCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1359 ];

		return pClassPointer;
	};

	int eventMain ( struct FString Params );
};

UClass* UAGBakeMapsCommandlet::pClassPointer = NULL;

// Class PlanBGame.PBAccountLevelCommand
// 0x0014 (0x0050 - 0x003C)
class UPBAccountLevelCommand : public UObject
{
public:
	class UPBAccountLevelCommand*                      pPB_ALC_Instance;                                 		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FAccountCanCommand >                permissionList;                                   		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                accountLevel;                                     		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1360 ];

		return pClassPointer;
	};

	void SetPermission ( class APlayerController* PC, struct FString Command, unsigned long allowed );
	class UPBAccountLevelCommand* GetInstance ( );
	bool hasPermission ( struct FString Command, int pAccountLevel );
	void RefreshAccountLevel ( class APlayerController* PC );
	void SetAccountLevel ( class APlayerController* PC, int Level );
};

UClass* UPBAccountLevelCommand::pClassPointer = NULL;

// Class PlanBGame.PBAccountTypeList
// 0x0010 (0x004C - 0x003C)
class UPBAccountTypeList : public UObject
{
public:
	class UPBAccountTypeList*                          pAccountTypeListArchetype;                        		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPBAccountTypeContainer >           AccountTypeList;                                  		// 0x0040 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1361 ];

		return pClassPointer;
	};

	class UPBAccountTypeList* GetInstance ( );
	struct FString eventGetStringByAccountTypeCode ( int AccountTypeCode );
};

UClass* UPBAccountTypeList::pClassPointer = NULL;

// Class PlanBGame.PBAchievement
// 0x0070 (0x00AC - 0x003C)
class UPBAchievement : public UObject
{
public:
	class APlayerController*                           m_Owner;                                          		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nID;                                            		// 0x0040 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	TArray< struct FTAchievementSupportedEvent >       m_Events;                                         		// 0x0044 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      m_bHidden : 1;                                    		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bLocked : 1;                                    		// 0x0050 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bCompleted : 1;                                 		// 0x0050 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bValuesStored : 1;                              		// 0x0050 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bAnnounced : 1;                                 		// 0x0050 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bClosed : 1;                                    		// 0x0050 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bHasLockEvents : 1;                             		// 0x0050 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bBeingUnlocked : 1;                             		// 0x0050 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	int                                                m_nClosedID;                                      		// 0x0054 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             m_sUnlockAchievementNames;                        		// 0x0058 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UPBAchievement* >                    m_UnlockAchievementsArray;                        		// 0x0064 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPBAchievement*                              m_InitialAchievement;                             		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     m_sAchievementCaption;                            		// 0x0074 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     m_sAchievementDescription;                        		// 0x0080 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                m_nIconColumn;                                    		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nIconRow;                                       		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_AchievementSet;                                 		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nSetID;                                         		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            m_Categories;                                     		// 0x00A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1362 ];

		return pClassPointer;
	};

	int GetClosedID ( );
	void RecoverValues ( );
	void StoreValues ( );
	void LogAchievement ( );
	void ExportData ( TArray< unsigned char >* Data );
	void _ExportData ( class UPBAchievement* export_from, TArray< unsigned char >* Data );
	void _ExportBaseData ( class UPBAchievement* export_from, TArray< unsigned char >* Data );
	bool _ImportBaseData ( TArray< unsigned char >* Data );
	bool IsInitialAchievementChanged ( );
	bool _IsEqual ( class UPBAchievement* pSource, class UPBAchievement* pTarget );
	class UPBAchievement* GetArchetype ( );
	bool _ImportData ( TArray< unsigned char >* Data );
	bool ImportData ( TArray< unsigned char >* Data );
	bool OnMatchEnds ( struct FTAchievementEventParams* Params );
	void _InternalInitialize ( );
	void _InternalOnAchievementComplete ( );
	bool IsAchievementBeingCompleted ( );
	void AnnouceAchievement ( );
	bool IsValuesStored ( );
	bool IsHasLockEvents ( );
	bool IsAnnounced ( );
	bool IsBeingUnlocked ( );
	bool IsClosed ( );
	bool IsCompleted ( );
	bool IsLocked ( );
	bool IsHidden ( );
	void ExportString ( struct FString* sString, TArray< unsigned char >* Data );
	void ExportByte ( unsigned char nByte, TArray< unsigned char >* Data );
	bool ImportByte ( TArray< unsigned char >* Data, unsigned char* nByte );
	bool ImportInt ( TArray< unsigned char >* Data, int* nInt );
	void ExportInt ( int nInt, TArray< unsigned char >* Data );
	bool ByteArrayToInt ( TArray< unsigned char >* byteArray, int* nInt );
	void IntToByteArray ( int nInt, TArray< unsigned char >* byteArray );
	struct FUIRangeData GetProgressData ( );
	void ShowAchievement ( unsigned long bShow );
	void CloseAchievement ( int nClosedID );
	void LockAchievement ( unsigned long bLock );
	void AddPostUnlockRequest ( );
	void OnAchievementComplete ( );
	void CompleteAchievement ( );
	bool Processvent ( unsigned char event_type, struct FTAchievementEventParams Params );
	int _FindEvent ( unsigned char event_type );
	bool IsSupportEvent ( unsigned char event_type );
	void AddAchievementToUnlock ( class UPBAchievement* unlock_achievement );
	class AController* GetOwner ( );
	void Initialize ( class APlayerController* Owner );
	void GetDescription ( struct FString* sDescription );
	struct FString _IntFillDescription ( struct FString sDesc );
	void GetCaption ( struct FString* sCaption );
	int GetID ( );
	int GetAchievementSetID ( );
	struct FName GetAchievementSet ( );
	struct FName GetCategoryName ( int nCategory );
	bool IsInCategory ( int eCategory );
};

UClass* UPBAchievement::pClassPointer = NULL;

// Class PlanBGame.PBAchievementList
// 0x0070 (0x0248 - 0x01D8)
class APBAchievementList : public AActor
{
public:
	TArray< class UPBAchievement* >                    m_Achievements;                                   		// 0x01D8 (0x000C) [0x0000000014402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineUse )
	int                                                m_nMaxID;                                         		// 0x01E4 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	TArray< unsigned char >                            m_DisplayedCategories;                            		// 0x01E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  m_AchievementsIcons;                              		// 0x01F4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              m_nIconWidth;                                     		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_nIconHeight;                                    		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nOngoingCol;                                    		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nOngoingRow;                                    		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nLockedCol;                                     		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nLockedRow;                                     		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nHiddenCol;                                     		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nHiddenRow;                                     		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nCompleteCol;                                   		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nCompleteRow;                                   		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     m_SecretAchievementCaption;                       		// 0x0220 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     m_SecretAchievementDescription;                   		// 0x022C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   m_CompleteSoundCue;                               		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_AccomplishedSoundCue;                           		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_UnlockedSoundCue;                               		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBAchievementList*                          Archetype;                                        		// 0x0244 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1363 ];

		return pClassPointer;
	};

	void _GetTextureCoordinates ( class UTexture2D* tIcon, int nCol, int nRow, int nWidth, int nHeight, struct FTextureCoordinates* iconCoords );
	int GetAchievementIndex ( int nAchievementID );
	class UPBAchievement* GetAchievement ( int nAchievementID );
	void GetUnlockedSound ( class USoundCue** pSound );
	void GetAccomplishedSound ( class USoundCue** pSound );
	void GetCompletedSound ( class USoundCue** pSound );
	void GetAchievementIcon ( class UPBAchievement* pAchievement, class UTexture2D** tIcon, struct FTextureCoordinates* iconCoords );
	void GetCompleteIcon ( class UTexture2D** tIcon, struct FTextureCoordinates* iconCoords );
	void GetLockedIcon ( class UTexture2D** tIcon, struct FTextureCoordinates* iconCoords );
	void GetOngoingIcon ( class UTexture2D** tIcon, struct FTextureCoordinates* iconCoords );
	void GetHiddenIcon ( class UTexture2D** tIcon, struct FTextureCoordinates* iconCoords );
	bool IsValidID ( int nID );
};

UClass* APBAchievementList::pClassPointer = NULL;

// Class PlanBGame.PBActorController
// 0x003C (0x04E0 - 0x04A4)
class APBActorController : public APawn
{
public:
	int                                                MovingTicks;                                      		// 0x04A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MovingTicksMinMove;                               		// 0x04A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MovingTicksToMoveAnim;                            		// 0x04AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      MovementMode;                                     		// 0x04B0 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      sEnergyStatus;                                    		// 0x04B1 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class APBCharacter*                                PreviousCharacter;                                		// 0x04B4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     PawnAcceleration;                                 		// 0x04B8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     SkillIconName;                                    		// 0x04C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              fEnergyRemaining;                                 		// 0x04D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CustomActionName;                                 		// 0x04D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1364 ];

		return pClassPointer;
	};

	float GetHUDHealth ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void ReceivedPreviousCharacter ( );
	void ReleaseControl ( );
	void KillImmediately ( );
	bool IsAlive ( );
	struct FString GetSkillIcon ( );
	void SetEnergyStatus ( unsigned char NewStatus );
	unsigned char GetEnergyStatus ( );
	void SetEnergyLeft ( float fEnergy );
	float GetEnergyLeft ( );
	void eventBaseChange ( );
	bool CanMove ( );
	void NotifyJumpPressed ( );
	bool WantsSpecialControl ( );
	struct FVector GetAccelFromInput ( float aForward, float aStrafe );
	void PostProcessViewRotation ( struct FRotator* ViewRotation );
	void eventTick ( float DeltaTime );
	void ServerStartFire ( unsigned char FireModeNum );
	void GetCameraView ( float fDeltaTime, struct FVector* _location, struct FRotator* _rotation );
};

UClass* APBActorController::pClassPointer = NULL;

// Class PlanBGame.PBPaperPlanePawn
// 0x0138 (0x0618 - 0x04E0)
class APBPaperPlanePawn : public APBActorController
{
public:
	float                                              fHeatUpPercent;                                   		// 0x04E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAutoAccending : 1;                               		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCanSpeedBoost : 1;                               		// 0x04E4 (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned long                                      bSpeedBoostUsed : 1;                              		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bSpeedBoostActive : 1;                            		// 0x04E4 (0x0004) [0x0000000000002020] [0x00000008] ( CPF_Net | CPF_Transient )
	unsigned long                                      bShieldsUp : 1;                                   		// 0x04E4 (0x0004) [0x0000000000002020] [0x00000010] ( CPF_Net | CPF_Transient )
	unsigned long                                      bShouldDecend : 1;                                		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bShouldAccend : 1;                                		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bAligningToCamera : 1;                            		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bAligningToCameraLocation : 1;                    		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bFirstCameraView : 1;                             		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bDontAutoExplode : 1;                             		// 0x04E4 (0x0004) [0x0000000000002020] [0x00000400] ( CPF_Net | CPF_Transient )
	unsigned long                                      bSwitchToPDAPending : 1;                          		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      PlayingSmoke : 1;                                 		// 0x04E4 (0x0004) [0x0000000000002020] [0x00001000] ( CPF_Net | CPF_Transient )
	unsigned long                                      PlayingFire : 1;                                  		// 0x04E4 (0x0004) [0x0000000000002020] [0x00002000] ( CPF_Net | CPF_Transient )
	unsigned long                                      PlayingSparks : 1;                                		// 0x04E4 (0x0004) [0x0000000000002020] [0x00004000] ( CPF_Net | CPF_Transient )
	struct FName                                       CurrentState;                                     		// 0x04E8 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                TargetTeam;                                       		// 0x04F0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fAccumulatedHeat;                                 		// 0x04F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                OldYaw;                                           		// 0x04F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentYaw;                                       		// 0x04FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MovingUp;                                         		// 0x0500 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     CameraStartLocation;                              		// 0x0504 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    CameraStartRotation;                              		// 0x0510 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              AlignTimeLeft;                                    		// 0x051C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AlignTimeMax;                                     		// 0x0520 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      ownerTeam;                                        		// 0x0524 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              EnvironmentalDamageTaken;                         		// 0x0528 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                EnvironmentalDamagePerSecond;                     		// 0x052C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinimumDamageForSmoke;                            		// 0x0530 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinimumDamageForFire;                             		// 0x0534 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinimumEnvironmentalDamageForExplode;             		// 0x0538 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FloorDistanceFromPlaneForDamage;                  		// 0x053C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BaseTrailEffectVelocity;                          		// 0x0540 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BoostTrailEffectVelocity;                         		// 0x054C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      pShieldMeshComp;                                  		// 0x0558 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      pSkelMesh;                                        		// 0x055C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             pFlyingLoopAC;                                    		// 0x0560 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    pSparksComponent;                                 		// 0x0564 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    pSmokeComponent;                                  		// 0x0568 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    pFireComponent;                                   		// 0x056C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    TrailEffectComponentLeft;                         		// 0x0570 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    TrailEffectComponentRight;                        		// 0x0574 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             BoostStartSoundComponent;                         		// 0x0578 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             BoostSoundComponent;                              		// 0x057C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             OverheatSoundComponent;                           		// 0x0580 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             GrindingSoundComponent;                           		// 0x0584 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             FireSoundComponent;                               		// 0x0588 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              BoostStartFadeinDuration;                         		// 0x058C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostEndFadeoutDuration;                          		// 0x0590 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverheatFadeInDuration;                           		// 0x0594 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverheatFadeOutDuration;                          		// 0x0598 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BostLoopingSoundDelay;                            		// 0x059C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             BreakingPS;                                       		// 0x05A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDynamicLightEnvironmentComponent*           pLightEnv;                                        		// 0x05A4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInterface*                          pFriendlyMaterialInstance;                        		// 0x05A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          pEnemyMaterialInstance;                           		// 0x05AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          pFriendlyShieldMaterialInstance;                  		// 0x05B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          pEnemyShieldMaterialInstance;                     		// 0x05B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCameraHeightFromLocation;                        		// 0x05B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCameraDistanceFromLocation;                      		// 0x05BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HitLife;                                          		// 0x05C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fHeatPerSecondWhileBoosting;                      		// 0x05C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxBoostingHeat;                                 		// 0x05C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBoostingHeatDecay;                               		// 0x05CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AirSpeedBoost;                                    		// 0x05D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeUntilDestroyAfterDeath;                      		// 0x05D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeUntilReleaseControlAfterDeath;               		// 0x05D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeUntilAutoAccendEnd;                          		// 0x05DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeBoostLasts;                                  		// 0x05E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackDistance;                                   		// 0x05E4 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              ExplodingDamage;                                  		// 0x05E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplodingRadiusMax;                               		// 0x05EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplodingRadiusEffective;                         		// 0x05F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAccendZ;                                         		// 0x05F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDecayZ;                                          		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDecayZInAutoMode;                                		// 0x05FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fManualAccend;                                    		// 0x0600 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fManualDecend;                                    		// 0x0604 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMinPitchAngle;                                   		// 0x0608 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxPitchAngle;                                   		// 0x060C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   NormalFlyingLoopingSound;                         		// 0x0610 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BlowupOneShotSound;                               		// 0x0614 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1365 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void UpdateHUDStateChanged ( );
	void OnEnergyDepletedDuringUse ( );
	void UpdateStateAndReport ( struct FName StateName );
	bool IsAlive ( );
	void KillImmediately ( );
	void AutoMovePlane ( float DeltaTime );
	void DisableAutoAccend ( );
	void ReleaseControl ( );
	void ReceivedPreviousCharacter ( );
	struct FVector GetAccelFromInput ( float aForward, float aStrafe );
	float GetDecendSpeed ( );
	void ServerStartSpeedBoost ( );
	void StopSpeedBoost ( );
	void StartBoostLoopingSound ( );
	void StartSpeedBoost ( );
	float ModifyRadiusDamage ( class AActor* Victim, struct FVector HurtOrigin, float fEffectiveRadius, float fRadius, float fBaseDamage );
	bool DoExplodingDamage ( float BaseDamage, float DamageRadiusMax, float DamageRadiusEffective, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	void SetPlayerController ( class APBPlayerController* PC );
	struct FString GetHumanReadableName ( );
	unsigned char GetTeamNum ( );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	bool IsEnemyInExplosionRange ( );
	void eventTick ( float DeltaTime );
	bool CanMove ( );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void GetCameraView ( float fDeltaTime, struct FVector* OutLocation, struct FRotator* OutRotation );
	void SetOriginalCameraOrientation ( struct FVector origLocation, struct FRotator origRotation );
	void SetEnemyMaterialColor ( );
	void SetFriendlyMaterialColor ( );
	void SetupTeamMarker ( );
	void NotifyLocalPlayerTeamReceived ( );
	void ServerStartFire ( unsigned char FireModeNum );
	class APBPlayerController* GetOwnerController ( );
	void GotoControlMode ( );
	void GotoAutoMode ( );
	void SetControlMode ( unsigned long bControlMode, class APBPlayerController* PC );
	void SetupPlane ( class APBSkill_PPlane* pResponsibleSkill, class APBPlayerController* PC, unsigned long bControlMode );
	void SetShields ( unsigned long bShields );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
};

UClass* APBPaperPlanePawn::pClassPointer = NULL;

// Class PlanBGame.PBActorFactoryAI
// 0x0008 (0x008C - 0x0084)
class UPBActorFactoryAI : public UActorFactoryAI
{
public:
	class APBCharacter*                                PawnArchetype;                                    		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Health;                                           		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1366 ];

		return pClassPointer;
	};

};

UClass* UPBActorFactoryAI::pClassPointer = NULL;

// Class PlanBGame.PBAnalyzeCookedContentCommandlet
// 0x0018 (0x0094 - 0x007C)
class UPBAnalyzeCookedContentCommandlet : public UCommandlet
{
public:
	unsigned char                                      UnknownData00[ 0x18 ];                            		// 0x007C (0x0018) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1367 ];

		return pClassPointer;
	};

};

UClass* UPBAnalyzeCookedContentCommandlet::pClassPointer = NULL;

// Class PlanBGame.PBAnalyzeCookedPackagesCommandlet
// 0x0000 (0x007C - 0x007C)
class UPBAnalyzeCookedPackagesCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1368 ];

		return pClassPointer;
	};

};

UClass* UPBAnalyzeCookedPackagesCommandlet::pClassPointer = NULL;

// Class PlanBGame.PBAnim_AimOffset
// 0x001C (0x0158 - 0x013C)
class UPBAnim_AimOffset : public UAnimNodeAimOffset
{
public:
	class APBPawn*                                     WarPawnOwner;                                     		// 0x013C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              TurnInPlaceOffset;                                		// 0x0140 (0x0004) [0x0000000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )
	float                                              LastAimX;                                         		// 0x0144 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bInterpolating : 1;                               		// 0x0148 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	float                                              InterpSpeed;                                      		// 0x014C (0x0004) [0x0000000000000000]              
	struct FName                                       CurProfileName;                                   		// 0x0150 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1369 ];

		return pClassPointer;
	};

};

UClass* UPBAnim_AimOffset::pClassPointer = NULL;

// Class PlanBGame.PBAnim_BlendAnimsByAim
// 0x0004 (0x01C0 - 0x01BC)
class UPBAnim_BlendAnimsByAim : public UAnimNodeSequenceBlendByAim
{
public:
	class APBPawn*                                     WarPawnOwner;                                     		// 0x01BC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1370 ];

		return pClassPointer;
	};

};

UClass* UPBAnim_BlendAnimsByAim::pClassPointer = NULL;

// Class PlanBGame.PBAnim_BlendByDirection
// 0x0010 (0x015C - 0x014C)
class UPBAnim_BlendByDirection : public UAnimNodeSequenceBlendBase
{
public:
	float                                              BlendSpeed;                                       		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DirAngle;                                         		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              LastRelevantTime;                                 		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bInterpolateWeights : 1;                          		// 0x0158 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1371 ];

		return pClassPointer;
	};

};

UClass* UPBAnim_BlendByDirection::pClassPointer = NULL;

// Class PlanBGame.PBAnim_DirectionalMove2Idle
// 0x000C (0x0168 - 0x015C)
class UPBAnim_DirectionalMove2Idle : public UPBAnim_BlendByDirection
{
public:
	TArray< struct FDTransInfo >                       DTransList;                                       		// 0x015C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1372 ];

		return pClassPointer;
	};

};

UClass* UPBAnim_DirectionalMove2Idle::pClassPointer = NULL;

// Class PlanBGame.PBAnim_BlendList
// 0x000C (0x0120 - 0x0114)
class UPBAnim_BlendList : public UAnimNodeBlendList
{
public:
	TArray< float >                                    ChildBlendInTime;                                 		// 0x0114 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1373 ];

		return pClassPointer;
	};

};

UClass* UPBAnim_BlendList::pClassPointer = NULL;

// Class PlanBGame.PBAnim_BlendByFire
// 0x0004 (0x0124 - 0x0120)
class UPBAnim_BlendByFire : public UPBAnim_BlendList
{
public:
	class APBPawn*                                     PBPawnOwner;                                      		// 0x0120 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1374 ];

		return pClassPointer;
	};

};

UClass* UPBAnim_BlendByFire::pClassPointer = NULL;

// Class PlanBGame.PBAnim_BlendByTargeting
// 0x000C (0x012C - 0x0120)
class UPBAnim_BlendByTargeting : public UPBAnim_BlendList
{
public:
	class APBPawn*                                     PBPawnOwner;                                      		// 0x0120 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bMergeAimFiringIntoIdle : 1;                      		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bMergeAimIdleIntoIdleReady : 1;                   		// 0x0124 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bMergeDownSightsIntoAim : 1;                      		// 0x0124 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bMergeDownSightsFireIntoIdle : 1;                 		// 0x0124 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              Aim2IdleBlendOutTime;                             		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1375 ];

		return pClassPointer;
	};

};

UClass* UPBAnim_BlendByTargeting::pClassPointer = NULL;

// Class PlanBGame.PBAnim_BlendListByConsoleCommand
// 0x0000 (0x0120 - 0x0120)
class UPBAnim_BlendListByConsoleCommand : public UPBAnim_BlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1376 ];

		return pClassPointer;
	};

};

UClass* UPBAnim_BlendListByConsoleCommand::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByHolster
// 0x0000 (0x0120 - 0x0120)
class UPBAnimBlendByHolster : public UPBAnim_BlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1377 ];

		return pClassPointer;
	};

};

UClass* UPBAnimBlendByHolster::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByLadderPosition
// 0x0004 (0x0124 - 0x0120)
class UPBAnimBlendByLadderPosition : public UPBAnim_BlendList
{
public:
	class APBPawn*                                     PBPawnOwner;                                      		// 0x0120 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1378 ];

		return pClassPointer;
	};

};

UClass* UPBAnimBlendByLadderPosition::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByVelocityZ
// 0x000C (0x012C - 0x0120)
class UPBAnimBlendByVelocityZ : public UPBAnim_BlendList
{
public:
	class APBPawn*                                     PBPawnOwner;                                      		// 0x0120 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              VelocityIdleThreshold;                            		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Move2IdleBlendOutTime;                            		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1379 ];

		return pClassPointer;
	};

};

UClass* UPBAnimBlendByVelocityZ::pClassPointer = NULL;

// Class PlanBGame.PBAnimNodeSlot
// 0x0010 (0x0130 - 0x0120)
class UPBAnimNodeSlot : public UPBAnim_BlendList
{
public:
	float                                              BlendTime;                                        		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DefaultChannel;                                   		// 0x0124 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFilterAnimEndEvents : 1;                         		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPlaySourceIfSlotNotFound : 1;                    		// 0x012C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDoNotRestartSequences : 1;                       		// 0x012C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bActiveChannelLooping : 1;                        		// 0x012C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bActivePauseAtEnd : 1;                            		// 0x012C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIsPlayingChannel : 1;                            		// 0x012C (0x0004) [0x0000000000002002] [0x00000020] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1380 ];

		return pClassPointer;
	};

	void StopChannel ( );
	float PlayChannel ( struct FName Sequence, float AnimRate, unsigned long bLooping, unsigned long bPauseAtEnd );
};

UClass* UPBAnimNodeSlot::pClassPointer = NULL;

// Class PlanBGame.PBAnim_BlendPerBone
// 0x003B (0x012C - 0x00F1)
class UPBAnim_BlendPerBone : public UAnimNodeBlendBase
{
public:
	class APBPawn*                                     WarPawnOwner;                                     		// 0x00F4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FPBPerBoneMaskInfo >                MaskList;                                         		// 0x00F8 (0x000C) [0x0000000004400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )
	unsigned char                                      RotationBlendType;                                		// 0x0104 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FBoneAtom >                         SourceAtoms;                                      		// 0x0108 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMatrix >                           SourceMeshSpaceTM;                                		// 0x0114 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMatrix >                           ResultMeshSpaceTM;                                		// 0x0120 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1381 ];

		return pClassPointer;
	};

	void SetMaskWeight ( int MaskIndex, float DesiredWeight, float BlendTime );
};

UClass* UPBAnim_BlendPerBone::pClassPointer = NULL;

// Class PlanBGame.PBAnim_MovementNode
// 0x0064 (0x0178 - 0x0114)
class UPBAnim_MovementNode : public UAnimNodeBlendList
{
public:
	unsigned char                                      SpeedType;                                        		// 0x0114 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bScaleAnimationsPlayRateBySpeed : 1;              		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bScaleConstraintsByBaseSpeed : 1;                 		// 0x0118 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bShouldHandleTransitions : 1;                     		// 0x0118 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPlayingTransitionToIdle : 1;                     		// 0x0118 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bTransitionFinished : 1;                          		// 0x0118 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	class APBPawn*                                     WarPawnOwner;                                     		// 0x011C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              Speed;                                            		// 0x0120 (0x0004) [0x0000000000000000]              
	float                                              IdleBlendOutTime;                                 		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendUpTime;                                      		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDownTime;                                    		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDownPerc;                                    		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MoveCycleFirstStepStartPosition;                  		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeSynch*                              SynchNode;                                        		// 0x0138 (0x0004) [0x0000000000000000]              
	struct FName                                       Name_SynchNode;                                   		// 0x013C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       Name_SynchGroupName;                              		// 0x0144 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TransitionBlendOutTime;                           		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimNode* >                         TransitionNodes;                                  		// 0x0150 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              PrevGroupRelPos;                                  		// 0x015C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              GroupRelPos;                                      		// 0x0160 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FMovementDef >                      Movements;                                        		// 0x0164 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FPointer                                    LastTransInfo;                                    		// 0x0170 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              TransWeightResumeTheshold;                        		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1382 ];

		return pClassPointer;
	};

};

UClass* UPBAnim_MovementNode::pClassPointer = NULL;

// Class PlanBGame.PBAnim_Offset
// 0x002B (0x011C - 0x00F1)
class UPBAnim_Offset : public UAnimNodeBlendBase
{
public:
	TArray< struct FOffsetComponent >                  Offsets;                                          		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                PassThroughAtOrAboveLOD;                          		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            RequiredBones;                                    		// 0x0104 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      BoneToOfstCpnt;                                   		// 0x0110 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1383 ];

		return pClassPointer;
	};

};

UClass* UPBAnim_Offset::pClassPointer = NULL;

// Class PlanBGame.PBAnim_TurnInPlace
// 0x004C (0x0150 - 0x0104)
class UPBAnim_TurnInPlace : public UAnimNodeBlend
{
public:
	unsigned long                                      bInitialized : 1;                                 		// 0x0104 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bRootRotInitialized : 1;                          		// 0x0104 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDelayBlendOutToPlayAnim : 1;                     		// 0x0104 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPlayingTurnTransition : 1;                       		// 0x0104 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	int                                                LastPawnYaw;                                      		// 0x0108 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              PawnRotationRate;                                 		// 0x010C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                LastRootBoneYaw;                                  		// 0x0110 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                YawOffset;                                        		// 0x0114 (0x0004) [0x0000000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )
	float                                              RelativeOffset;                                   		// 0x0118 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class APBPawn*                                     WarPawnOwner;                                     		// 0x011C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class UPBAnim_AimOffset* >                 OffsetNodes;                                      		// 0x0120 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRotTransitionInfo >                RotTransitions;                                   		// 0x012C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              TransitionBlendTime;                              		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentTransitionIndex;                           		// 0x013C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TransitionThresholdAngle;                         		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UPBAnim_TurnInPlace_Player* >        PlayerNodes;                                      		// 0x0144 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1384 ];

		return pClassPointer;
	};

};

UClass* UPBAnim_TurnInPlace::pClassPointer = NULL;

// Class PlanBGame.PBAnim_TurnInPlace_Player
// 0x000C (0x014C - 0x0140)
class UPBAnim_TurnInPlace_Player : public UAnimNodeSequence
{
public:
	TArray< struct FTIP_Transition >                   TIP_Transitions;                                  		// 0x0140 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1385 ];

		return pClassPointer;
	};

};

UClass* UPBAnim_TurnInPlace_Player::pClassPointer = NULL;

// Class PlanBGame.PBAnim_TurnInPlace_Rotator
// 0x0007 (0x00F8 - 0x00F1)
class UPBAnim_TurnInPlace_Rotator : public UAnimNodeBlendBase
{
public:
	class UPBAnim_TurnInPlace*                         TurnInPlaceNode;                                  		// 0x00F4 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1386 ];

		return pClassPointer;
	};

};

UClass* UPBAnim_TurnInPlace_Rotator::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendBase
// 0x0010 (0x0124 - 0x0114)
class UPBAnimBlendBase : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    ChildBlendTimes;                                  		// 0x0118 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1387 ];

		return pClassPointer;
	};

	float GetAnimDuration ( int ChildIndex );
	float GetBlendTime ( int ChildIndex, unsigned long bGetDefault );
};

UClass* UPBAnimBlendBase::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByDirection
// 0x0005 (0x0129 - 0x0124)
class UPBAnimBlendByDirection : public UPBAnimBlendBase
{
public:
	unsigned long                                      bAdjustRateByVelocity : 1;                        		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      LastDirection;                                    		// 0x0128 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1388 ];

		return pClassPointer;
	};

};

UClass* UPBAnimBlendByDirection::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByDodge
// 0x0003 (0x012C - 0x0129)
class UPBAnimBlendByDodge : public UPBAnimBlendByDirection
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1389 ];

		return pClassPointer;
	};

};

UClass* UPBAnimBlendByDodge::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByFall
// 0x0020 (0x0144 - 0x0124)
class UPBAnimBlendByFall : public UPBAnimBlendBase
{
public:
	unsigned long                                      bIgnoreDoubleJumps : 1;                           		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDidDoubleJump : 1;                               		// 0x0124 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bDodgeFall : 1;                                   		// 0x0124 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDidLongFallJump : 1;                             		// 0x0124 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	float                                              PreLandTime;                                      		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreLandStartUprightTime;                          		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToDblJumpUprightTime;                             		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FallState;                                        		// 0x0134 (0x0001) [0x0000000000000002]              ( CPF_Const )
	float                                              LastFallingVelocity;                              		// 0x0138 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              PlayDoubleFallWhenHigherThen;                     		// 0x013C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPBAnimNodeJumpLeanOffset*                   CachedLeanNode;                                   		// 0x0140 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1390 ];

		return pClassPointer;
	};

};

UClass* UPBAnimBlendByFall::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByGender
// 0x0000 (0x0124 - 0x0124)
class UPBAnimBlendByGender : public UPBAnimBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1391 ];

		return pClassPointer;
	};

	class UAnimNode* GetActiveChild ( );
};

UClass* UPBAnimBlendByGender::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByIdle
// 0x001C (0x0140 - 0x0124)
class UPBAnimBlendByIdle : public UPBAnimBlendBase
{
public:
	class UPBSkelControl_Twist*                        TwistControl;                                     		// 0x0124 (0x0004) [0x0000000020002000]              ( CPF_Transient | CPF_Deprecated )
	struct FName                                       TwistControlName;                                 		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TurnAnimNames[ 0x2 ];                             		// 0x0130 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1392 ];

		return pClassPointer;
	};

	void eventOnInit ( );
};

UClass* UPBAnimBlendByIdle::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByPhysics
// 0x0040 (0x0164 - 0x0124)
class UPBAnimBlendByPhysics : public UPBAnimBlendBase
{
public:
	int                                                PhysicsMap[ 0xC ];                                		// 0x0124 (0x0030) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastPhysics;                                      		// 0x0154 (0x0004) [0x0000000000000000]              
	float                                              LandBlendDelay;                                   		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PendingChildIndex;                                		// 0x015C (0x0004) [0x0000000000000000]              
	float                                              PendingTimeToGo;                                  		// 0x0160 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1393 ];

		return pClassPointer;
	};

};

UClass* UPBAnimBlendByPhysics::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByPosture
// 0x0000 (0x0124 - 0x0124)
class UPBAnimBlendByPosture : public UPBAnimBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1394 ];

		return pClassPointer;
	};

};

UClass* UPBAnimBlendByPosture::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByPostureTransition
// 0x0004 (0x0128 - 0x0124)
class UPBAnimBlendByPostureTransition : public UPBAnimBlendBase
{
public:
	unsigned long                                      bCrouching : 1;                                   		// 0x0124 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPlayingTransition : 1;                           		// 0x0124 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1395 ];

		return pClassPointer;
	};

};

UClass* UPBAnimBlendByPostureTransition::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendBySurface
// 0x0000 (0x0124 - 0x0124)
class UPBAnimBlendBySurface : public UPBAnimBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1396 ];

		return pClassPointer;
	};

};

UClass* UPBAnimBlendBySurface::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByWeaponType
// 0x0000 (0x0124 - 0x0124)
class UPBAnimBlendByWeaponType : public UPBAnimBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1397 ];

		return pClassPointer;
	};

	class UAnimNode* GetActiveChild ( );
};

UClass* UPBAnimBlendByWeaponType::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendRagdoll
// 0x0000 (0x0124 - 0x0124)
class UPBAnimBlendRagdoll : public UPBAnimBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1398 ];

		return pClassPointer;
	};

};

UClass* UPBAnimBlendRagdoll::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByDriving
// 0x0000 (0x012C - 0x012C)
class UPBAnimBlendByDriving : public UAnimNodeBlendPerBone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1399 ];

		return pClassPointer;
	};

};

UClass* UPBAnimBlendByDriving::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByGroundDodge
// 0x0081 (0x0195 - 0x0114)
class UPBAnimBlendByGroundDodge : public UAnimNodeBlendList
{
public:
	struct FName                                       DodgeAnims[ 0x10 ];                               		// 0x0114 (0x0080) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LastDodgeDir;                                     		// 0x0194 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1400 ];

		return pClassPointer;
	};

	void eventAnimStopGroundDodge ( float SpecialBlendTime );
	void StartDodgeAnimation ( int ChildIndex, float SpecialBlendTime );
	void SelectDodgeAnimation ( float SpecialBlendTime );
};

UClass* UPBAnimBlendByGroundDodge::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendBySpeed
// 0x0008 (0x010C - 0x0104)
class UPBAnimBlendBySpeed : public UAnimNodeBlend
{
public:
	float                                              MinSpeed;                                         		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSpeed;                                         		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1401 ];

		return pClassPointer;
	};

};

UClass* UPBAnimBlendBySpeed::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByWeapon
// 0x0010 (0x013C - 0x012C)
class UPBAnimBlendByWeapon : public UAnimNodeBlendPerBone
{
public:
	unsigned long                                      bLooping : 1;                                     		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bReloading : 1;                                   		// 0x012C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bPrevReloadingState : 1;                          		// 0x012C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	struct FName                                       LoopingAnim;                                      		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTime;                                        		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1402 ];

		return pClassPointer;
	};

	void eventAnimStopReload ( );
	void eventAnimReload ( struct FName ReloadSequence, float AnimRate, float SpecialBlendTime );
	void eventAnimStopFire ( float SpecialBlendTime );
};

UClass* UPBAnimBlendByWeapon::pClassPointer = NULL;

// Class PlanBGame.PBAnimNode_BlendAnimsByDirection
// 0x0024 (0x0170 - 0x014C)
class UPBAnimNode_BlendAnimsByDirection : public UAnimNodeSequenceBlendBase
{
public:
	unsigned long                                      bAddRotationRate : 1;                             		// 0x014C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              BlendSpeed;                                       		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DirAngle;                                         		// 0x0154 (0x0004) [0x0000000000000000]              
	struct FVector                                     MoveDir;                                          		// 0x0158 (0x000C) [0x0000000000000000]              
	int                                                LastYaw;                                          		// 0x0164 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              YawRotationRate;                                  		// 0x0168 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBPawn*                                     pPBPawn;                                          		// 0x016C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1403 ];

		return pClassPointer;
	};

};

UClass* UPBAnimNode_BlendAnimsByDirection::pClassPointer = NULL;

// Class PlanBGame.PBAnimNodeJumpLeanOffset
// 0x002C (0x0168 - 0x013C)
class UPBAnimNodeJumpLeanOffset : public UAnimNodeAimOffset
{
public:
	float                                              JumpLeanStrength;                                 		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxLeanChangeSpeed;                               		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMultiplyByZVelocity : 1;                         		// 0x0144 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDodging : 1;                                     		// 0x0144 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOldDodging : 1;                                  		// 0x0144 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDoubleJumping : 1;                               		// 0x0144 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bOldDoubleJumping : 1;                            		// 0x0144 (0x0004) [0x0000000000000000] [0x00000010] 
	class UAnimNodeAimOffset*                          CachedAimNode;                                    		// 0x0148 (0x0004) [0x0000000000000000]              
	struct FName                                       OldAimProfileName;                                		// 0x014C (0x0008) [0x0000000000000000]              
	struct FVector2D                                   PreBlendAim;                                      		// 0x0154 (0x0008) [0x0000000000000000]              
	float                                              LeanWeight;                                       		// 0x015C (0x0004) [0x0000000000000000]              
	float                                              LeanWeightTarget;                                 		// 0x0160 (0x0004) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x0164 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1404 ];

		return pClassPointer;
	};

	void SetLeanWeight ( float WeightTarget, float BlendTime );
};

UClass* UPBAnimNodeJumpLeanOffset::pClassPointer = NULL;

// Class PlanBGame.PBAnimNodeSequence
// 0x0010 (0x0150 - 0x0140)
class UPBAnimNodeSequence : public UAnimNodeSequence
{
public:
	unsigned long                                      bAutoStart : 1;                                   		// 0x0140 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLoopLastSequence : 1;                            		// 0x0140 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FName >                             SeqStack;                                         		// 0x0144 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1405 ];

		return pClassPointer;
	};

	void eventOnInit ( );
	void PlayAnimationSet ( TArray< struct FName > Sequences, float SeqRate, unsigned long bLoopLast );
	void PlayAnimation ( struct FName Sequence, float SeqRate, unsigned long bSeqLoop );
};

UClass* UPBAnimNodeSequence::pClassPointer = NULL;

// Class PlanBGame.PBAvoidMarker
// 0x0008 (0x01E0 - 0x01D8)
class APBAvoidMarker : public AActor
{
public:
	unsigned char                                      TeamNum;                                          		// 0x01D8 (0x0001) [0x0000000000000000]              
	float                                              FearFactor;                                       		// 0x01DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1406 ];

		return pClassPointer;
	};

	void StartleBots ( );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	unsigned char GetTeamNum ( );
};

UClass* APBAvoidMarker::pClassPointer = NULL;

// Class PlanBGame.PBBasicSteam
// 0x0028 (0x0064 - 0x003C)
class UPBBasicSteam : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FScriptDelegate                             __delegateOnSteamShutdown__Delegate;              		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __delegateOnSteamGameOverlayActivated__Delegate;  		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __delegateOnSteamMicroTxAuthorizationResponse__Delegate;		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1407 ];

		return pClassPointer;
	};

	void eventOnSteamMicroTxAuthorizationResponse ( struct FString orderId, unsigned long bAuthorized );
	void eventOnSteamGameOverlayActivated ( unsigned long bActivated );
	void eventOnSteamShutdown ( );
	void delegateOnSteamMicroTxAuthorizationResponse ( struct FString orderId, unsigned long bAuthorize );
	void delegateOnSteamGameOverlayActivated ( unsigned long bActivated );
	void delegateOnSteamShutdown ( );
	struct FString GetSteamID ( );
	bool ShowSteamPaymentMethod ( );
	void InitSteamObject ( );
	class UPBBasicSteam* GetInstance ( );
};

UClass* UPBBasicSteam::pClassPointer = NULL;

// Class PlanBGame.PBBot
// 0x0228 (0x05E0 - 0x03B8)
class APBBot : public AAIController
{
public:
	struct FVector                                     Destination;                                      		// 0x03B8 (0x000C) [0x0000000000000000]              
	float                                              WarningDelay;                                     		// 0x03C4 (0x0004) [0x0000000000000000]              
	class AProjectile*                                 WarningProjectile;                                		// 0x03C8 (0x0004) [0x0000000000000000]              
	struct FVector                                     MonitorStartLoc;                                  		// 0x03CC (0x000C) [0x0000000000000000]              
	class APawn*                                       MonitoredPawn;                                    		// 0x03D8 (0x0004) [0x0000000000000000]              
	float                                              MonitorMaxDistSq;                                 		// 0x03DC (0x0004) [0x0000000000000000]              
	struct FVector                                     LastSeenPos;                                      		// 0x03E0 (0x000C) [0x0000000000000000]              
	struct FVector                                     LastSeeingPos;                                    		// 0x03EC (0x000C) [0x0000000000000000]              
	float                                              LastSeenTime;                                     		// 0x03F8 (0x0004) [0x0000000000000000]              
	float                                              LastWarningTime;                                  		// 0x03FC (0x0004) [0x0000000000000000]              
	unsigned long                                      bHuntPlayer : 1;                                  		// 0x0400 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bEnemyInfoValid : 1;                              		// 0x0400 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCanFire : 1;                                     		// 0x0400 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bStrafeDir : 1;                                   		// 0x0400 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bLeadTarget : 1;                                  		// 0x0400 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bChangeDir : 1;                                   		// 0x0400 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bFrustrated : 1;                                  		// 0x0400 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bInitLifeMessage : 1;                             		// 0x0400 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bReachedGatherPoint : 1;                          		// 0x0400 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bWasNearObjective : 1;                            		// 0x0400 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bHasFired : 1;                                    		// 0x0400 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bForcedDirection : 1;                             		// 0x0400 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bFireSuccess : 1;                                 		// 0x0400 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bStoppedFiring : 1;                               		// 0x0400 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bEnemyIsVisible : 1;                              		// 0x0400 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bEnemyEngaged : 1;                                		// 0x0400 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bMustCharge : 1;                                  		// 0x0400 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bJustLanded : 1;                                  		// 0x0400 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bRecommendFastMove : 1;                           		// 0x0400 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bIgnoreEnemyChange : 1;                           		// 0x0400 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bPlannedJump : 1;                                 		// 0x0400 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bEnemyAcquired : 1;                               		// 0x0400 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bScriptedFrozen : 1;                              		// 0x0400 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bSpawnedByKismet : 1;                             		// 0x0400 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bUsingSquadRoute : 1;                             		// 0x0400 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bUsePreviousSquadRoute : 1;                       		// 0x0400 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bExecutingWhatToDoNext : 1;                       		// 0x0400 (0x0004) [0x0000000000000000] [0x04000000] 
	int                                                AcquisitionYawRate;                               		// 0x0404 (0x0004) [0x0000000000000000]              
	struct FName                                       OldMessageType;                                   		// 0x0408 (0x0008) [0x0000000000000000]              
	int                                                OldMessageID;                                     		// 0x0410 (0x0004) [0x0000000000000000]              
	struct FVector                                     HidingSpot;                                       		// 0x0414 (0x000C) [0x0000000000000000]              
	float                                              Aggressiveness;                                   		// 0x0420 (0x0004) [0x0000000000000000]              
	float                                              LastAttractCheck;                                 		// 0x0424 (0x0004) [0x0000000000000000]              
	class ANavigationPoint*                            BlockedPath;                                      		// 0x0428 (0x0004) [0x0000000000000000]              
	float                                              AcquireTime;                                      		// 0x042C (0x0004) [0x0000000000000000]              
	float                                              Aggression;                                       		// 0x0430 (0x0004) [0x0000000000000000]              
	float                                              LoseEnemyCheckTime;                               		// 0x0434 (0x0004) [0x0000000000000000]              
	class AActor*                                      StartleActor;                                     		// 0x0438 (0x0004) [0x0000000000000000]              
	float                                              StartTacticalTime;                                		// 0x043C (0x0004) [0x0000000000000000]              
	float                                              LastUnderFire;                                    		// 0x0440 (0x0004) [0x0000000000000000]              
	float                                              BaseAlertness;                                    		// 0x0444 (0x0004) [0x0000000000000000]              
	float                                              Accuracy;                                         		// 0x0448 (0x0004) [0x0000000000000000]              
	float                                              BaseAggressiveness;                               		// 0x044C (0x0004) [0x0000000000000000]              
	float                                              StrafingAbility;                                  		// 0x0450 (0x0004) [0x0000000000000000]              
	float                                              CombatStyle;                                      		// 0x0454 (0x0004) [0x0000000000000000]              
	float                                              Tactics;                                          		// 0x0458 (0x0004) [0x0000000000000000]              
	float                                              ReactionTime;                                     		// 0x045C (0x0004) [0x0000000000000000]              
	float                                              Jumpiness;                                        		// 0x0460 (0x0004) [0x0000000000000000]              
	class UClass*                                      FavoriteWeapon;                                   		// 0x0464 (0x0004) [0x0000000000000000]              
	float                                              OldMessageTime;                                   		// 0x0468 (0x0004) [0x0000000000000000]              
	struct FString                                     GoalString;                                       		// 0x046C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SoakString;                                       		// 0x0478 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class APBSquadAI*                                  Squad;                                            		// 0x0484 (0x0004) [0x0000000000000000]              
	class APBBot*                                      NextSquadMember;                                  		// 0x0488 (0x0004) [0x0000000000000000]              
	class ANavigationPoint*                            SquadRouteGoal;                                   		// 0x048C (0x0004) [0x0000000000000000]              
	float                                              ReTaskTime;                                       		// 0x0490 (0x0004) [0x0000000000000000]              
	class APBDefensePoint*                             DefensePoint;                                     		// 0x0494 (0x0004) [0x0000000000000000]              
	class ANavigationPoint*                            DefensivePosition;                                		// 0x0498 (0x0004) [0x0000000000000000]              
	struct FVector                                     DirectionHint;                                    		// 0x049C (0x000C) [0x0000000000000000]              
	float                                              StopStartTime;                                    		// 0x04A8 (0x0004) [0x0000000000000000]              
	float                                              LastRespawnTime;                                  		// 0x04AC (0x0004) [0x0000000000000000]              
	float                                              FailedHuntTime;                                   		// 0x04B0 (0x0004) [0x0000000000000000]              
	class APawn*                                       FailedHuntEnemy;                                  		// 0x04B4 (0x0004) [0x0000000000000000]              
	float                                              EnemyVisibilityTime;                              		// 0x04B8 (0x0004) [0x0000000000000000]              
	class APawn*                                       VisibleEnemy;                                     		// 0x04BC (0x0004) [0x0000000000000000]              
	float                                              LastSearchTime;                                   		// 0x04C0 (0x0004) [0x0000000000000000]              
	float                                              LastSearchWeight;                                 		// 0x04C4 (0x0004) [0x0000000000000000]              
	float                                              CampTime;                                         		// 0x04C8 (0x0004) [0x0000000000000000]              
	int                                                NumRandomJumps;                                   		// 0x04CC (0x0004) [0x0000000000000000]              
	float                                              LastFireAttempt;                                  		// 0x04D0 (0x0004) [0x0000000000000000]              
	float                                              GatherTime;                                       		// 0x04D4 (0x0004) [0x0000000000000000]              
	struct FName                                       OrderNames[ 0x10 ];                               		// 0x04D8 (0x0080) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       OldOrders;                                        		// 0x0558 (0x0008) [0x0000000000000000]              
	class AController*                                 OldOrderGiver;                                    		// 0x0560 (0x0004) [0x0000000000000000]              
	float                                              TrackingReactionTime;                             		// 0x0564 (0x0004) [0x0000000000000000]              
	float                                              BaseTrackingReactionTime;                         		// 0x0568 (0x0004) [0x0000000000000000]              
	class APawn*                                       CurrentlyTrackedEnemy;                            		// 0x056C (0x0004) [0x0000000000000000]              
	struct FVector                                     TrackedVelocity;                                  		// 0x0570 (0x000C) [0x0000000000000000]              
	TArray< struct FEnemyPosition >                    SavedPositions;                                   		// 0x057C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     LastKnownPosition;                                		// 0x0588 (0x000C) [0x0000000000000000]              
	struct FVector                                     LastKillerPosition;                               		// 0x0594 (0x000C) [0x0000000000000000]              
	class APBAvoidMarker*                              FearSpots[ 0x2 ];                                 		// 0x05A0 (0x0008) [0x0000000000000000]              
	struct FVector                                     ImpactVelocity;                                   		// 0x05A8 (0x000C) [0x0000000000000000]              
	float                                              AimUpdateFrequency;                               		// 0x05B4 (0x0004) [0x0000000000000000]              
	float                                              LastAimUpdateTime;                                		// 0x05B8 (0x0004) [0x0000000000000000]              
	float                                              ErrorUpdateFrequency;                             		// 0x05BC (0x0004) [0x0000000000000000]              
	float                                              LastErrorUpdateTime;                              		// 0x05C0 (0x0004) [0x0000000000000000]              
	float                                              CurrentAimError;                                  		// 0x05C4 (0x0004) [0x0000000000000000]              
	class AActor*                                      ScriptedTarget;                                   		// 0x05C8 (0x0004) [0x0000000000000000]              
	unsigned char                                      ScriptedFireMode;                                 		// 0x05CC (0x0001) [0x0000000000000000]              
	class UPBBotDecisionComponent*                     DecisionComponent;                                		// 0x05D0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FScriptDelegate                             __CustomActionFunc__Delegate;                     		// 0x05D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1408 ];

		return pClassPointer;
	};

	bool eventHandlePathObstruction ( class AActor* BlockedBy );
	void UnderLift ( class ALiftCenter* M );
	void PerformCustomAction ( struct FScriptDelegate ActionFunc );
	bool CustomActionFunc ( class APBBot* B );
	void SetEnemyReaction ( int AlertnessLevel );
	void StopMovement ( );
	bool FocusOnLeader ( unsigned long bLeaderFiring );
	bool IsShootingObjective ( );
	bool Stopped ( );
	bool FindViewSpot ( );
	bool IsHunting ( );
	bool EngageDirection ( struct FVector StrafeDir, unsigned long bForced );
	bool IsStrafing ( );
	bool DefendMelee ( float Dist );
	void DoRetreat ( );
	void DoTacticalMove ( );
	void DoCharge ( );
	void DoStakeOut ( );
	bool LoseEnemy ( );
	bool LostContact ( float MaxTime );
	float GetDesiredOffset ( );
	void ForceCelebrate ( );
	void ForceGiveWeapon ( );
	void Celebrate ( );
	void eventRecoverFromBadStateCode ( );
	void EnableBumps ( );
	void WanderOrCamp ( );
	void MoveAwayFrom ( class AController* C );
	void MoveToDefensePoint ( );
	bool ShouldDefendPosition ( );
	bool IsDefending ( );
	void FreezeAI ( );
	void OnAIFreeze ( class UPBSeqAct_AIFreeze* FreezeAction );
	bool IsRetreating ( );
	void DamageAttitudeTo ( class AController* Other, float Damage );
	float eventSuperDesireability ( class APickupFactory* P );
	float eventRatePickup ( class AActor* PickupHolder, class UClass* InvClass );
	bool NeedWeapon ( );
	class AActor* FaceActor ( float StrafingModifier );
	bool ShouldStrafeTo ( class AActor* WayPoint );
	class AActor* FaceMoveTarget ( );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* damageTyp );
	bool TryToDuck ( struct FVector duckDir, unsigned long bReversed );
	void ChangeStrafe ( );
	bool TryWallDodge ( struct FVector HitNormal, class AActor* HitActor );
	void eventMissedDodge ( );
	void eventNotifyFallingHitWall ( struct FVector HitNormal, class AActor* HitActor );
	void eventReceiveWarning ( class APawn* shooter, float projSpeed, struct FVector FireDir );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void ReceiveProjectileWarning ( class AProjectile* Proj );
	void eventDelayedWarning ( );
	int SetFireYaw ( int FireYaw );
	struct FRotator GetAdjustedAimFor ( class AWeapon* InWeapon, struct FVector projStart );
	float eventAdjustAimError ( float TargetDist, unsigned long bInstantProj );
	bool CheckFutureSight ( float DeltaTime );
	struct FVector GetDirectionHint ( );
	bool FindBestPathToward ( class AActor* A, unsigned long bCheckedReach, unsigned long bAllowDetour );
	bool eventAllowDetourTo ( class ANavigationPoint* N );
	bool SetRouteToGoal ( class AActor* A );
	bool StartMoveToward ( class AActor* O );
	void eventNotifyPostLanded ( );
	bool eventNotifyLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void SetFall ( );
	bool PriorityObjective ( );
	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	bool AdjustAround ( class APawn* Other );
	void ClearPathFor ( class AController* C );
	bool CheckPathToGoalAround ( class APawn* P );
	void Restart ( unsigned long bVehicleTransition );
	bool FindRoamDest ( );
	void eventSoakStop ( struct FString problem );
	bool PickRetreatDestination ( );
	bool FindInventoryGoal ( float BestWeight );
	class AActor* FindBestSuperPickup ( float MaxDist );
	void ChooseAttackMode ( );
	void DoProccessObjective ( class AActor* A );
	void DoRangedAttackOn ( class AActor* A );
	void FightEnemy ( unsigned long bCanCharge, float EnemyStrength );
	bool DoWaitForLanding ( );
	void eventExecuteWhatToDoNext ( );
	struct FString GetEnemyName ( );
	void eventWhatToDoNext ( );
	void SetAlertness ( float NewAlertness );
	void SetPeripheralVision ( );
	void SetMaxDesiredSpeed ( );
	void ResetSkill ( );
	void InitializeSkill ( float InSkill );
	void Possess ( class APawn* aPawn, unsigned long bVehicleTransition );
	void Reset ( );
	void eventSpecialJumpTo ( class AActor* DestinationActor, float RequiredJumpZ );
	void eventNotifyMissedJump ( );
	void eventNotifyJumpApex ( );
	void eventMayDodgeToMoveTarget ( );
	void eventNotifyPhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	bool StrafeFromDamage ( float Damage, class UClass* DamageType, unsigned long bFindDest );
	void BotVoiceMessage ( struct FName MessageType, unsigned char MessageID, class AController* Sender );
	void EnemyChanged ( unsigned long bNewEnemyVisible );
	void SetEnemyInfo ( unsigned long bNewEnemyVisible );
	float RelativeStrength ( class APawn* Other );
	bool AssignSquadResponsibility ( );
	void FreePoint ( );
	bool IsSniping ( );
	void CheckIfShouldCrouch ( struct FVector StartPosition, struct FVector TargetPosition, float probability );
	bool CanStakeOut ( );
	bool ClearShot ( struct FVector TargetLoc, unsigned long bImmediateFire );
	void SetAttractionState ( );
	void eventSeePlayer ( class APawn* SeenPlayer );
	void HearNoise ( float Loudness, class AActor* NoiseMaker, struct FName NoiseType );
	void ClearTemporaryOrders ( );
	void SetTemporaryOrders ( struct FName NewOrders, class AController* OrderGiver );
	void SetOrders ( struct FName NewOrders, class AController* OrderGiver );
	void SendMessage ( class APlayerReplicationInfo* Recipient, struct FName MessageType, float Wait, class UClass* DamageType );
	unsigned char GetMessageIndex ( struct FName PhraseName );
	void YellAt ( class APawn* Moron );
	class AActor* GetOrderObject ( );
	struct FName GetOrders ( );
	void DisplayDebug ( class AHUD* HUD, float* YL, float* YPos );
	bool CanCombo ( );
	bool CanComboMoving ( );
	bool ProficientWithWeapon ( );
	float WeaponPreference ( class AWeapon* W );
	float RateWeapon ( class AWeapon* W );
	void OnAIStopFire ( class UPBSeqAct_AIStopFire* FireAction );
	void StopFiring ( );
	void TimedFireWeaponAtScriptedTarget ( );
	void OnAIStartFireAt ( class UPBSeqAct_AIStartFireAt* FireAction );
	bool CanAttack ( class AActor* Other );
	bool FireWeaponAt ( class AActor* A );
	void TimedFireWeaponAtEnemy ( );
	bool ShouldFireAgain ( float RefireRate );
	bool WeaponFireAgain ( float RefireRate, unsigned long bFinishedFire );
	void WaitForMover ( class AInterpActor* M );
	void SetCombatTimer ( );
	void Startle ( class AActor* Feared );
	void FearThisSpot ( class APBAvoidMarker* aSpot );
	bool eventNotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	void eventSetupSpecialPathAbilities ( );
	void NotifyAddInventory ( class AInventory* NewItem );
	bool LandingShake ( );
	void AdjustView ( float DeltaTime );
	void eventSpawnedByKismet ( );
	void PostBeginPlay ( );
	void Destroyed ( );
	void PawnDied ( class APawn* P );
	void StartMonitoring ( class APawn* P, float MaxDist );
	void eventMonitoredPawnAlert ( );
	void WasKilledBy ( class AController* Other );
	void BuildSquadRoute ( int Iterations );
	class AActor* FindPathToSquadRoute ( unsigned long bWeightDetours );
	class AActor* FindBestInventoryPath ( float* MinWeight );
	bool CanMakePathTo ( class AActor* A );
	void LatentWhatToDoNext ( );
	void WaitToSeeEnemy ( );
};

UClass* APBBot::pClassPointer = NULL;

// Class PlanBGame.PBBotDecisionComponent
// 0x0007 (0x005C - 0x0055)
class UPBBotDecisionComponent : public UActorComponent
{
public:
	unsigned long                                      bTriggered : 1;                                   		// 0x0058 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1409 ];

		return pClassPointer;
	};

};

UClass* UPBBotDecisionComponent::pClassPointer = NULL;

// Class PlanBGame.PBBreakableActor
// 0x0000 (0x0240 - 0x0240)
class APBBreakableActor : public AInterpActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1410 ];

		return pClassPointer;
	};

};

UClass* APBBreakableActor::pClassPointer = NULL;

// Class PlanBGame.PBCamMod_ScreenShake
// 0x0074 (0x00CC - 0x0058)
class UPBCamMod_ScreenShake : public UCameraModifier
{
public:
	TArray< struct FScreenShakeStruct >                Shakes;                                           		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScreenShakeStruct                          TestShake;                                        		// 0x0064 (0x0068) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1411 ];

		return pClassPointer;
	};

	bool ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV );
	void UpdateScreenShake ( float DeltaTime, struct FScreenShakeStruct* Shake, struct FTPOV* OutPOV );
	void DumpShakeInfo ( struct FScreenShakeStruct Shake );
	void StartNewShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency );
	struct FScreenShakeStruct ComposeNewShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency );
	float InitializeOffset ( unsigned char Param );
	struct FScreenShakeStruct InitializeShake ( struct FScreenShakeStruct NewShake );
	void AddScreenShake ( struct FScreenShakeStruct NewShake );
};

UClass* UPBCamMod_ScreenShake::pClassPointer = NULL;

// Class PlanBGame.PBCheatManager
// 0x0004 (0x0060 - 0x005C)
class UPBCheatManager : public UCheatManager
{
public:
	unsigned long                                      bIsSlomoOn : 1;                                   		// 0x005C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1412 ];

		return pClassPointer;
	};

	void Restart ( );
	void KillGoodGuys ( );
	void KillBadGuys ( );
	void ViewBot ( );
	void ToggleSlomo ( );
};

UClass* UPBCheatManager::pClassPointer = NULL;

// Class PlanBGame.PBCheckMapsLightingCommandlet
// 0x0000 (0x007C - 0x007C)
class UPBCheckMapsLightingCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1413 ];

		return pClassPointer;
	};

};

UClass* UPBCheckMapsLightingCommandlet::pClassPointer = NULL;

// Class PlanBGame.PBChoiseLimiter
// 0x0000 (0x003C - 0x003C)
class UPBChoiseLimiter : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1414 ];

		return pClassPointer;
	};

	bool IsValidElement ( int nIndex );
	int GetLimit ( );
	void Init ( );
};

UClass* UPBChoiseLimiter::pClassPointer = NULL;

// Class PlanBGame.PBCommCenter
// 0x0158 (0x0194 - 0x003C)
class UPBCommCenter : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FString >                           SystemMessages;                                   		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           SystemNotificationsLog;                           		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     StationHandle;                                    		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FTBuddy >                           BuddyList;                                        		// 0x0064 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTBuddyMessages >                   BuddiesMessageList;                               		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BuddyRequestNick;                                 		// 0x007C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     BuddyRequestMessage;                              		// 0x0088 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSearchAccountProfile >             SearchResults;                                    		// 0x0094 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPBCommCenter*                               pCommCenter;                                      		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Counter;                                          		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_GetFriendsStatus;                               		// 0x00A8 (0x0001) [0x0000000000000000]              
	class ULocalPlayer*                                OnlinePlayer;                                     		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APlayerController*                           PC;                                               		// 0x00B0 (0x0004) [0x0000000000000000]              
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineSubsystemGameSpy*                     PlayerInterface;                                  		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ServerPassword;                                   		// 0x00BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FOnlineFriend >                     FriendsList;                                      		// 0x00C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           AuthorizationList;                                		// 0x00D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPBProfileSettings*                          Profile;                                          		// 0x00E0 (0x0004) [0x0000000000000000]              
	struct FString                                     AddFriendMessage;                                 		// 0x00E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              LastMsgNotified;                                  		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              InGameNotificationTime;                           		// 0x00F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bIsUpdatingFriendList : 1;                        		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPendingFriendUpdate : 1;                         		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bForcedStatus : 1;                                		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bConnectionLost : 1;                              		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bFinishReadingFriendship : 1;                     		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000010] 
	float                                              LastUpdateListTime;                               		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              IgnoreUpdateListTimeout;                          		// 0x0100 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           FriendStatusChangedList;                          		// 0x0104 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUpdateCompleted__Delegate;                    		// 0x0110 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSearchCompleted__Delegate;                    		// 0x011C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRequestAddSent__Delegate;                     		// 0x0128 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRequestIgnored__Delegate;                     		// 0x0134 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMessageReceived__Delegate;                    		// 0x0140 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMessageSent__Delegate;                        		// 0x014C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnStatusChanged__Delegate;                      		// 0x0158 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGameJoinCompleted__Delegate;                  		// 0x0164 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnBuddyRemoved__Delegate;                       		// 0x0170 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLogoutCompleted__Delegate;                    		// 0x017C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSystemAvailable__Delegate;                    		// 0x0188 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1415 ];

		return pClassPointer;
	};

	void UpdateVideoProfile ( struct FVideoSettingsStruct NewSettings );
	void UpdateInputProfile ( class UPlayerInput* pbinput );
	void NotifyFriendAdded ( struct FString AccountName, struct FString CharacterName );
	struct FString GetStationHandle ( );
	void SetStationHandleName ( struct FString AccountName );
	void RefreshStatus ( );
	void OnGetClientProfileDetails ( int requestId, int ErrorCode, int AmoutClientProfileDetails, TArray< struct FPbmnClientProfileDetail > ClientProfileDetails );
	void SetStatusNotificationList ( );
	void UpdateBuddyDetails ( );
	void OnReadBuddyAuthorizationListComplete ( unsigned long bWasSuccessful );
	void UpdateAuthorizeBuddyList ( );
	void OnFriendsReadComplete ( unsigned long bWasSuccessful );
	void UpdateBuddyList ( );
	void OnGetFriendshipListComplete ( unsigned long bWasSuccessful );
	void OnUpdateBuddyFriendshipComplete ( unsigned long bWasSuccessful, int RecordId, struct FString nick, int Status );
	void _UpdateBuddyFriendship ( );
	void UpdateBuddyFriendship ( struct FString nick, int Status );
	void OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message );
	void removeBuddy ( struct FString nick );
	void OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message );
	void OnCreateBuddyAuthorizationComplete ( unsigned long bWasSuccessful, int RecordId, struct FString NickName );
	void OnAddFriendByNameComplete ( unsigned long bWasSuccessful, struct FString nick );
	void AddBuddy ( struct FString nick );
	void addSystemMessage ( struct FString Message );
	void DebugUnFriendBuddy ( struct FString nick );
	void DebugPrintSearchResults ( );
	void DebugPrintBuddyList ( );
	float getCurrTime ( );
	void Initialize ( );
	class UPBCommCenter* GetInstance ( );
	void SortBuddyList ( );
	void OnLogoutFinished ( unsigned long bWasSuccessful );
	bool IsInternalMessage ( struct FString Message, struct FString* Command );
	struct FString GetPlayerName ( );
	int GetBuddyIndexById ( struct FUniqueNetId Id );
	bool GetBuddyId ( struct FString nick, struct FUniqueNetId* Id );
	bool CheckOnlineSubsystem ( );
	struct FString BuildJoinURL ( struct FString ResolvedConnectionURL );
	void ListMessages ( );
	void removeIndividualChat ( struct FString nick );
	bool getOrCreateChat ( struct FString nick, int* Idx );
	void AddMessage ( struct FString nick, struct FString Text );
	void NotifyMessageReceived ( struct FString nick, struct FString Text );
	void OnFriendMessageSent ( unsigned char LocalUserNum, struct FUniqueNetId RecievedPlayer, struct FString Message );
	void SendMessage ( class UPlayer* Player, struct FString nick, struct FString Message );
	void NotifyJoinError ( );
	void OnGameInviteReceived ( unsigned char LocalUserNum, struct FString InviterName );
	unsigned char GetStatus ( );
	void ChangeStatus ( class UPlayer* Player, unsigned char NewStatus, unsigned long bForce );
	bool IsPasswordProtected ( struct FString nick );
	void OnJoinFriendGameComplete ( unsigned long bWasSuccessful );
	void JoinGame ( class UPlayer* Player, struct FString nick, struct FString Password );
	void ListUpdateCompleted ( unsigned long bWasSuccessful );
	void UpdateServerJoined ( );
	void UpdateSearchFriendship ( );
	void OnGetAccountAndProfilesForName ( int requestId, int ErrorCode, int AmountAccountProfiles, TArray< struct FPbmnAccountProfile > AccountProfiles );
	void SearchBuddy ( class UPlayer* Player, struct FString SearchString );
	void OnFriendsChange ( );
	void ReadProfileSettings ( );
	void OnReadProfileComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void ClearDelegates ( class UPlayer* Player );
	void OnConnectionStatusChange ( unsigned char ConnectionStatus );
	void OnGetFriendshipListFinished ( unsigned long bWasSuccessful );
	void setDelegates ( );
	void Init ( class APlayerController* pPC );
	void OnSystemAvailable ( unsigned long bAvailable );
	void OnLogoutCompleted ( unsigned long bWasSuccessful );
	void OnBuddyRemoved ( unsigned long bWasSuccessful );
	void OnGameJoinCompleted ( unsigned long bWasSuccessful );
	void OnStatusChanged ( struct FString nick, struct FString AccountName, unsigned char NewStatus );
	void OnMessageSent ( );
	void OnMessageReceived ( );
	void OnRequestIgnored ( unsigned long bWasSuccessful );
	void OnRequestAddSent ( unsigned long bWasSuccessful, struct FString NickName );
	void OnSearchCompleted ( unsigned long bWasSuccessful );
	void OnUpdateCompleted ( unsigned long bWasSuccessful );
};

UClass* UPBCommCenter::pClassPointer = NULL;

// Class PlanBGame.PBCommentatorSystem
// 0x0070 (0x0248 - 0x01D8)
class APBCommentatorSystem : public AActor
{
public:
	class APBCommentatorSystem*                        pCommentatorSystem;                               		// 0x01D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FVOLayer >                          AudioLayers;                                      		// 0x01DC (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	class UAudioComponent*                             CrowdAudio;                                       		// 0x01E8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	unsigned char                                      CurrentAudioLayer;                                		// 0x01EC (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FCommentatorTrackInfo                       CurrentTrack;                                     		// 0x01F0 (0x002C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPBCommentatorSystemArc*                     CommentatorArch;                                  		// 0x021C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FadeOutDuration;                                  		// 0x0220 (0x0004) [0x0000000000000000]              
	float                                              AudioLoadTimeout;                                 		// 0x0224 (0x0004) [0x0000000000000000]              
	float                                              AudioResetTime;                                   		// 0x0228 (0x0004) [0x0000000000000000]              
	float                                              AudioLastLoaded;                                  		// 0x022C (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __AsyncObjectLoadCallback__Delegate;              		// 0x0230 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAudioFinished__Delegate;                      		// 0x023C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1416 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void eventInit ( );
	class APBCommentatorSystem* GetInstance ( );
	void ResetLayers ( );
	void PlaySafetyBuy ( int WhichSecond );
	void PlayGlobalEvent ( unsigned char EventName, unsigned long bPlayFemale );
	void PlayFiller ( int Index );
	void CrowdAudioFinished ( class UAudioComponent* AC );
	void SecondGlobalAudioFinished ( class UAudioComponent* AC );
	void SecondHeatAudioFinished ( class UAudioComponent* AC );
	void SecondFillAudioFinished ( class UAudioComponent* AC );
	void clearVOTimer ( struct FName functionName );
	void SetVOTimer ( float VODelay, struct FName functionName );
	void FirstGlobalAudioDelay ( );
	void FirstGlobalAudioFinished ( class UAudioComponent* AC );
	void FirstHeatAudioDelay ( );
	void FirstHeatAudioFinished ( class UAudioComponent* AC );
	void FirstFillAudioDelay ( );
	void FirstFillAudioFinished ( class UAudioComponent* AC );
	void FirstAudioFinished ( unsigned char CommentatorLayer );
	struct FCommentatorTrackInfo GetBestTrack ( TArray< struct FCommentatorTrackInfo > CommentatorTracks );
	void StopPlayingLayer ( unsigned char CommentatorLayer );
	bool playCommentator ( unsigned char CommentatorLayer, TArray< struct FCommentatorTrackInfo > CommentatorTracks, class USoundCue* CrowdSound );
	void PlaySecondCommentatorAsync ( struct FString ObjectName, unsigned char CommentatorLayer );
	void OnSecondCommentatorLoaded ( class UObject* LoadedObject, int CommentatorLayer );
	void PlayCommentatorAsync ( struct FString ObjectName, unsigned char CommentatorLayer );
	void OnCommentatorLoaded ( class UObject* LoadedObject, int CommentatorLayer );
	float GetAppSeconds ( );
	void LoadObjectAsync ( struct FString ObjectName, class UClass* ObjectClass, class UClass* ObjectClassAlt, struct FScriptDelegate Callback, int UserData );
	void OnAudioFinished ( class UAudioComponent* Component );
	void AsyncObjectLoadCallback ( class UObject* LoadedObject, int UserData );
};

UClass* APBCommentatorSystem::pClassPointer = NULL;

// Class PlanBGame.PBCustomChar_ItemSearchCache
// 0x0010 (0x004C - 0x003C)
class UPBCustomChar_ItemSearchCache : public UObject
{
public:
	TArray< struct FPBItemGenderCache >                ItemSearchCache;                                  		// 0x003C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bItemSearchCacheValid : 1;                        		// 0x0048 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1417 ];

		return pClassPointer;
	};

	bool GetItemTagData ( struct FGuid ItemGuid, int GenderID, struct FPBItemTagData* TagData );
	bool GetItemInfo ( struct FPBItemLocator* ItemLocator, struct FPBItemInfo* ItemInfo );
	void ConvertAvatarInfoToItem ( int AvatarIndex, struct FavatarPicture* AvatarItem, struct FPBItemInfo* ItemInfo );
	void ConvertTauntInfoToItem ( struct FPBTaunt* TauntItem, struct FPBItemInfo* ItemInfo );
	void ConvertServiceInfoToItem ( struct FTPBServiceItem* ServiceItem, struct FPBItemInfo* ItemInfo );
	void ConvertWeaponDecalInfoToItem ( struct FPBNWeaponDecalInfo* DecalItem, struct FPBItemInfo* ItemInfo );
	void ConvertWeaponMaterialInfoToItem ( struct FPBNWeaponMaterialInfo* MaterialItem, struct FPBItemInfo* ItemInfo );
	void ConvertWeaponModInfoToItem ( struct FPBNWeaponModInfo* ModItem, struct FPBItemInfo* ItemInfo );
	void ConvertWeaponInfoToItem ( class APBNWeaponParams* WeaponParams, struct FPBWeaponItemInfo* WeaponItem, struct FPBItemInfo* ItemInfo );
	void ConvertColorSchemeInfoToItem ( struct FCustomColorScheme* InInfo, struct FPBItemInfo* ItemInfo );
	void ConvertAttachmentInfoToItem ( struct FCharAttachment* InInfo, struct FPBItemInfo* ItemInfo );
	void ConvertMeshPartToItem ( struct FMeshPart* InInfo, struct FPBItemInfo* ItemInfo );
	bool FindItem ( struct FGuid ItemGuid, int GenderID, struct FPBItemLocator* Locator );
};

UClass* UPBCustomChar_ItemSearchCache::pClassPointer = NULL;

// Class PlanBGame.PBCustomChar_MenuDataBase
// 0x000C (0x0048 - 0x003C)
class UPBCustomChar_MenuDataBase : public UObject
{
public:
	struct FScriptDelegate                             __OnAllRequestsAreDone__Delegate;                 		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1418 ];

		return pClassPointer;
	};

	void OnAllRequestsAreDone ( );
};

UClass* UPBCustomChar_MenuDataBase::pClassPointer = NULL;

// Class PlanBGame.PBCustomChar_MenuData
// 0x02BC (0x0304 - 0x0048)
class UPBCustomChar_MenuData : public UPBCustomChar_MenuDataBase
{
public:
	struct FGuid                                       mLastSelectedCharacterGuid;                       		// 0x0048 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	int                                                mnLastSelectedCharacterIndex;                     		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FTPBShopNavigationInfo                      NavigationInfo;                                   		// 0x005C (0x002C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bProfileIDValid : 1;                              		// 0x0088 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bProfileCacheValid : 1;                           		// 0x0088 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bNavigateToTab : 1;                               		// 0x0088 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsPremium : 1;                                   		// 0x0088 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bNullShopActive : 1;                              		// 0x0088 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      isGameMaster : 1;                                 		// 0x0088 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	struct FGuid                                       ActiveProfileID;                                  		// 0x008C (0x0010) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPBExtendedProfile >                ProfileList;                                      		// 0x009C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      mCharacterActorIDs;                               		// 0x00A8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                m_nMaxProfilesCount;                              		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FCustomCharData                             ActiveCharData;                                   		// 0x00B8 (0x010C) [0x0000000000002000]              ( CPF_Transient )
	int                                                ActiveCharPart;                                   		// 0x01C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ActiveSlotIndex;                                  		// 0x01C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ActiveSchemeIndex;                                		// 0x01CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ActiveWeaponPresetIndex;                          		// 0x01D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ActiveSkillTierIndex;                             		// 0x01D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     sNavigateToCategory;                              		// 0x01D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      ActiveWeaponCategory;                             		// 0x01E4 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      accountLevel;                                     		// 0x01E5 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ActiveGameSpyToken;                               		// 0x01E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     ActiveGameSpyChallenge;                           		// 0x01F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                Head_StoreID;                                     		// 0x0200 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SkinTone_StoreID;                                 		// 0x0204 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SkinTone_SchemeID;                                		// 0x0208 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CharacterName;                                    		// 0x020C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FGuid                                       characterGender;                                  		// 0x0218 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FGuid                                       characterHead;                                    		// 0x0228 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FGuid                                       characterSkin;                                    		// 0x0238 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	int                                                avatarPicture;                                    		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Rank;                                             		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                xp;                                               		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              xpPercentage;                                     		// 0x0254 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                credits;                                          		// 0x0258 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                coins;                                            		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                coolness;                                         		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                lastDisplayedCoolness;                            		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPBItem >                           InventoryItemCache;                               		// 0x0268 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPBItemLocator >                    InventoryItemLocatorCache;                        		// 0x0274 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBBoosterInfo >                   BoostersInfoCache;                                		// 0x0280 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                FirstNonFakeItemIndex;                            		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPBItem >                           NewItemsCache;                                    		// 0x0290 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPBItem >                           ItemsToPurchase;                                  		// 0x029C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           weaponPresetNames;                                		// 0x02A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FGuid                                       subscriptionId;                                   		// 0x02B4 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	int                                                subscriptionCreditsBoost;                         		// 0x02C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                subscriptionXpBoost;                              		// 0x02C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                subscriptionSlowWeaponDamage;                     		// 0x02CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                subscriptionSlowStyleLoss;                        		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                subscriptionGroupXpBoost;                         		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                subscriptionGroupCreditsBoost;                    		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                subscriptionItemShopRankBonus;                    		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                subscriptionDuration;                             		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                subscriptionDiscount;                             		// 0x02E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCustomChar_ItemSearchCache*               ItemCache;                                        		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FGuid                                       LastBoughtItemId;                                 		// 0x02EC (0x0010) [0x0000000000002000]              ( CPF_Transient )
	int                                                iLastBoughtItemOwnerGender;                       		// 0x02FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBItemShopClient*                           ItemShop;                                         		// 0x0300 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1419 ];

		return pClassPointer;
	};

	void UpdateNewItems ( class UPBCustomChar_MenuData** pCharData );
	void CommitPurchasedItems ( );
	void AddItemToPurchase ( struct FGuid itemId, struct FGuid colorId );
	void ClearItemsToPurchase ( );
	void ResetNewItems ( );
	class UOnlinePlayerInterface* GetPlayerInterface ( );
	void ProcessCreditsAmount ( int pCredits, class UPBCustomChar_MenuData** pCharData );
	void ProcessCoinsAmount ( int pCoins, class UPBCustomChar_MenuData** pCharData );
	void ProcessSubscriptionMode ( class UPBCustomChar_MenuData** pCharData, struct FTPBItemShopResult_OnGetSubscriptionModeDone* Result );
	void ProcessWeaponPresetNames ( TArray< struct FString > weapPresetNames, class UPBCustomChar_MenuData** pCharData );
	void ProcessLatestInventoryEntries ( TArray< struct FPBItem > items, class UPBCustomChar_MenuData** pCharData );
	void ProcessProfileDetails ( struct FString charName, struct FGuid charGender, struct FGuid charHead, struct FGuid charSkin, int charPicture, int charRank, int charXp, float charXpPercentage, int charCredits, int charCoolness, int charLastDisplayedCoolness, int profileReputation, unsigned long bIsGameMaster, unsigned char charAccountLevel, class UPBCustomChar_MenuData** pCharData );
	class APBCustomChar_AssetStore* GetDefaultStore ( );
	void ProcessInventoryResults ( TArray< struct FPBItem > items, class UPBCustomChar_MenuData** pCharData );
	void ReassembleCharacter ( class UPBCustomChar_MenuData** pMenuCharData );
	void RefreshInventoryItemLocatorCache ( class UPBCustomChar_MenuData** pCharData );
	void SortDefaultItems ( TArray< struct FPBItem >* items, class UPBCustomChar_MenuData** pCharData );
	class APBCustomChar_Preview* GetPreviewActor ( int nIndex );
	void ReadAllWeaponPresets ( TArray< class UPBWeaponPreset* >* PresetList );
	struct FSWeaponCode ReassembleWeaponCode ( int iBaseWeaponCode, int presetIndex );
	void ReassemblePreset ( class UPBNWeaponPreset* InCurrentPreset, int presetIndex );
	void SetWeaponDecalCode ( class UPBNWeaponPreset* InCurrentPreset, unsigned char WeaponCategory, struct FPBItemLocator ItemLocator );
	void SetWeaponMaterialCode ( class UPBNWeaponPreset* InCurrentPreset, unsigned char WeaponCategory, struct FPBItemLocator ItemLocator );
	void SetWeaponModCode ( class UPBNWeaponPreset* InCurrentPreset, unsigned char WeaponCategory, struct FPBItemLocator ItemLocator );
	void SetWeaponCode ( class UPBNWeaponPreset* InCurrentPreset, unsigned char WeaponCategory, int WeaponCode, struct FGuid serialNumber, int iCurCondition, int iCurMaxCondition );
	void RemoveInventoryItemFromCache ( struct FGuid ItemSerialNumber );
	int FindInventoryItemBySerialNumber ( struct FGuid ItemSerialNumber, struct FPBItem* Item );
	int GetInventoryItemPreset ( struct FGuid itemId, struct FGuid colorId, struct FGuid* serialNumber );
	bool IsInventoryItemInUse ( struct FGuid ItemSerialNumber );
	bool IsEmptyInventoryItem ( struct FGuid ItemSerialNumber );
	int IsItemInInventory ( struct FGuid ItemGuid );
	bool IsFakeInventoryItem ( struct FGuid ItemSerialNumber );
	bool IsDefaultInventoryItem ( struct FGuid ItemSerialNumber );
	void RemoveAllDelegatesForObject ( class UObject* Obj );
	void InitItemShopReference ( );
	void Initialize ( );
};

UClass* UPBCustomChar_MenuData::pClassPointer = NULL;

// Class PlanBGame.PBCustomSkeletalMesh
// 0x000C (0x03D8 - 0x03CC)
class UPBCustomSkeletalMesh : public USkeletalMesh
{
public:
	unsigned char                                      MeshType;                                         		// 0x03CC (0x0001) [0x0000000000000000]              
	unsigned long                                      bFirstPerson : 1;                                 		// 0x03D0 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bAttachmentsMesh : 1;                             		// 0x03D0 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	int                                                Category;                                         		// 0x03D4 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1420 ];

		return pClassPointer;
	};

	int GetWeaponMeshCount ( );
	int GetCharacterMeshCount ( );
};

UClass* UPBCustomSkeletalMesh::pClassPointer = NULL;

// Class PlanBGame.PBDefensePoint
// 0x0028 (0x02D8 - 0x02B0)
class APBDefensePoint : public ANavigationPoint
{
public:
	class AController*                                 CurrentUser;                                      		// 0x02B0 (0x0004) [0x0000000000000000]              
	class APBDefensePoint*                             NextDefensePoint;                                 		// 0x02B4 (0x0004) [0x0000000000000000]              
	class APBGameObjective*                            DefendedObjective;                                		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFirstScript : 1;                                 		// 0x02BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSniping : 1;                                     		// 0x02BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FName                                       DefenseGroup;                                     		// 0x02C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DefensePriority;                                  		// 0x02C8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UTexture2D* >                        TeamSprites;                                      		// 0x02CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1421 ];

		return pClassPointer;
	};

	class AActor* GetMoveTarget ( );
	bool HigherPriorityThan ( class APBDefensePoint* S, class APBBot* B, unsigned long bAutoPointsInUse, unsigned long bPrioritizeSameGroup, int* NumChecked );
	void PreBeginPlay ( );
	bool CheckForErrors ( );
	void FreePoint ( );
	void Reset ( );
};

UClass* APBDefensePoint::pClassPointer = NULL;

// Class PlanBGame.PBDestroyableActor
// 0x0000 (0x01D8 - 0x01D8)
class APBDestroyableActor : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1422 ];

		return pClassPointer;
	};

};

UClass* APBDestroyableActor::pClassPointer = NULL;

// Class PlanBGame.PBDestructibleStaticActor
// 0x0074 (0x0254 - 0x01E0)
class APBDestructibleStaticActor : public AStaticMeshActor
{
public:
	int                                                iCurrHealth;                                      		// 0x01E0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iCurMeshIndex;                                    		// 0x01E4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iCurMeshIndexEffects;                             		// 0x01E8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              CurMeshIndexEffectsTimeout;                       		// 0x01EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bPhysicsOff : 1;                                  		// 0x01F0 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bCollisionEnabled : 1;                            		// 0x01F0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHideObjectWhenDead : 1;                          		// 0x01F0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIntegerRandom : 1;                               		// 0x01F0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAnimationEnabled : 1;                            		// 0x01F0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	class UMaterialInstanceConstant*                   pGlobalMatInstance;                               		// 0x01F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStaticMesh*                                 pBaseStaticMesh;                                  		// 0x01F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInterface*                          pBaseStaticMeshMaterial;                          		// 0x01FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0200 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	int                                                iStartingHealth;                                  		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iDamageThreshold;                                 		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRandomMin;                                       		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRandomMax;                                       		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MaterialHealthScalarParamName;                    		// 0x0214 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MaterialStateScalarParamName;                     		// 0x021C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MaterialRandomNumberParamName;                    		// 0x0224 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vExplosionPositionOffset;                         		// 0x022C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FDestructibleMeshInfo >             MeshInfo;                                         		// 0x0238 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UAudioComponent* >                   rPlayingAudioComponents;                          		// 0x0244 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                iLastDamagerPlayerId;                             		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1423 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void NotifyParticleSystemFinished ( class UParticleSystemComponent* PSystem );
	void eventPreBeginPlay ( );
	void ShiftToStaticMesh ( class UStaticMesh* NewMesh, class UMaterialInterface* NewMaterial, class UParticleSystem* NewParticleSystem, unsigned long bKillPreviousParticleSystems, unsigned long bKillPreviousSounds );
	void ShiftStaticMeshEffects ( int iShiftToIndex, unsigned long bDisableEffects );
	void ShiftStaticMesh ( int iShiftToIndex, unsigned long bDisableEffects );
	bool AGHurtRadius ( float BaseDamage, float DamageRadius, float EffectiveRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	void DoRadiusDamage ( struct FDestructibleMeshDamageInfo pDamageInfo );
	float ModifyRadiusDamage ( class AActor* Victim, struct FVector HurtOrigin, float fRadius, float fBaseDamage, float fEffectiveRadius );
	void AutomaticMeshShift ( );
	bool IsCollisionEnabled ( );
	void EnablePhysics ( unsigned long bEnable );
	void ObjectDied ( );
	void OnTriggerDestructible ( class UPBSeqAct_TriggerDestructible* seqAction );
	void ClientTakeDamage ( );
	void ReliableHit ( class AController* EventInstigator, struct FVector Position, struct FVector Momentum, class UClass* DamageType );
	void NonReliableHit ( class AController* EventInstigator, struct FVector Position, struct FVector Momentum, class UClass* DamageType );
	void TakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void SetCustomRandomOnMaterial ( );
	void SetStateOnMaterial ( int iState );
	void SetHealthOnMaterial ( );
	bool IsDamageTypeIgnored ( class UClass* DamageType );
	void ResetAudio ( );
	void Reset ( );
	void SetupMaterialInstance ( class UMaterialInterface* NewMaterial );
	void eventPostBeginPlay ( );
};

UClass* APBDestructibleStaticActor::pClassPointer = NULL;

// Class PlanBGame.PBDumpItemListCommandlet
// 0x0000 (0x007C - 0x007C)
class UPBDumpItemListCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1424 ];

		return pClassPointer;
	};

	int eventMain ( struct FString Params );
};

UClass* UPBDumpItemListCommandlet::pClassPointer = NULL;

// Class PlanBGame.PBDynamicPhysicsAsset
// 0x0000 (0x01E8 - 0x01E8)
class APBDynamicPhysicsAsset : public AKAsset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1425 ];

		return pClassPointer;
	};

};

UClass* APBDynamicPhysicsAsset::pClassPointer = NULL;

// Class PlanBGame.PBEmitterPool
// 0x000C (0x023C - 0x0230)
class APBEmitterPool : public AEmitterPool
{
public:
	TArray< struct FAttachedExplosionLight >           RelativeExplosionLights;                          		// 0x0230 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1426 ];

		return pClassPointer;
	};

	class UPointLightComponent* SpawnExplosionLight ( class UClass* LightClass, struct FVector SpawnLocation, class AActor* AttachToActor );
	void OnExplosionLightFinished ( class UPointLightComponent* Light );
	void OnParticleSystemFinished ( class UParticleSystemComponent* PSC );
	class UParticleSystemComponent* SpawnEmitterAttached ( class UParticleSystem* EmitterTemplate, class USkeletalMeshComponent* SkComponent, struct FName SocketName, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	class UParticleSystemComponent* SpawnEmitter ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* AttachToActor, class AActor* InInstigator, int MaxDLEPooledReuses, unsigned long bInheritScaleFromBase );
};

UClass* APBEmitterPool::pClassPointer = NULL;

// Class PlanBGame.PBEventSystem
// 0x0000 (0x003C - 0x003C)
class UPBEventSystem : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1427 ];

		return pClassPointer;
	};

};

UClass* UPBEventSystem::pClassPointer = NULL;

// Class PlanBGame.PBEventSystem_BaseStorage
// 0x0000 (0x003C - 0x003C)
class UPBEventSystem_BaseStorage : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1428 ];

		return pClassPointer;
	};

};

UClass* UPBEventSystem_BaseStorage::pClassPointer = NULL;

// Class PlanBGame.PBEventSystem_Event
// 0x0000 (0x003C - 0x003C)
class UPBEventSystem_Event : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1429 ];

		return pClassPointer;
	};

};

UClass* UPBEventSystem_Event::pClassPointer = NULL;

// Class PlanBGame.PBFindReplaceCommandlet
// 0x0000 (0x007C - 0x007C)
class UPBFindReplaceCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1430 ];

		return pClassPointer;
	};

};

UClass* UPBFindReplaceCommandlet::pClassPointer = NULL;

// Class PlanBGame.PBFollowSplineActor
// 0x0070 (0x0298 - 0x0228)
class APBFollowSplineActor : public ASplineActor
{
public:
	struct FName                                       animation;                                        		// 0x0228 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              PauseTime;                                        		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       PauseAnimation;                                   		// 0x0234 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      StartNode;                                        		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MoveSpeed;                                        		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollSpeed;                                        		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollMultiplier;                                   		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationSpeed;                                    		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLoop : 1;                                        		// 0x0250 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIgnoreRotation : 1;                              		// 0x0250 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      StartNode_bAnimNodeSlotInitialized : 1;           		// 0x0250 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              EaseInOutDistance;                                		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PlaySound;                                        		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USplineComponent*                            NextSplineComponent;                              		// 0x025C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ASplineActor*                                NextSplineActor;                                  		// 0x0260 (0x0004) [0x0000000000000000]              
	class ASkeletalMeshActor*                          StartNode_SkMesh;                                 		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBAnimNodeSlot*                             StartNode_AnimNodeSlot;                           		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBFollowSplineActor*                        CurNode;                                          		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurDistance;                                      		// 0x0270 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurPauseTime;                                     		// 0x0274 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    PrevRotation;                                     		// 0x0278 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USplineComponent*                            CurSplineComponent;                               		// 0x0284 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USplineComponent*                            PrevSplineComponent;                              		// 0x0288 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       CurAnimation;                                     		// 0x028C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UAudioComponent*                             SoundComponent;                                   		// 0x0294 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1431 ];

		return pClassPointer;
	};

};

UClass* APBFollowSplineActor::pClassPointer = NULL;

// Class PlanBGame.PBGameInfo
// 0x00E4 (0x0468 - 0x0384)
class APBGameInfo : public AGameInfo
{
public:
	unsigned long                                      bIgnoreTeamForVoiceChat : 1;                      		// 0x0384 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCanRestartPlayer : 1;                            		// 0x0384 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bTutorialMode : 1;                                		// 0x0384 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      iTeamAutoSelection : 1;                           		// 0x0384 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bStatisticsLog : 1;                               		// 0x0384 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bShutdownIssued : 1;                              		// 0x0384 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bServerLocked : 1;                                		// 0x0384 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bTDMSpawnSystem : 1;                              		// 0x0384 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bDebugTDMSpawnSystem : 1;                         		// 0x0384 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      bDebugTDMLineOfSight : 1;                         		// 0x0384 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bDebugTDMDistance : 1;                            		// 0x0384 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bSkipOnlineSubsystem : 1;                         		// 0x0384 (0x0004) [0x0000000000004000] [0x00000800] ( CPF_Config )
	unsigned long                                      bCheckCamping : 1;                                		// 0x0384 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	int                                                iTeams;                                           		// 0x0388 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                iSpottedDuration;                                 		// 0x038C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iElapsedTime;                                     		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ANavigationPoint*                            LastPlayerStartSpot;                              		// 0x0394 (0x0004) [0x0000000000000000]              
	class ANavigationPoint*                            LastStartSpot;                                    		// 0x0398 (0x0004) [0x0000000000000000]              
	class UPBGameStatisticsLog*                        PlayerStatisticsLog;                              		// 0x039C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBTeamInfo*                                 EnemyRoster;                                      		// 0x03A0 (0x0004) [0x0000000000000000]              
	struct FString                                     EnemyRosterName;                                  		// 0x03A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultEnemyRosterClass;                          		// 0x03B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           GameSpyPublishedMaps;                             		// 0x03BC (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	TArray< struct FLocalizedCountryData >             LocalizedCountryMappings;                         		// 0x03C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DefaultLobbyLevel;                                		// 0x03D4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      CurrentGameType;                                  		// 0x03E0 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     strShutdownReason;                                		// 0x03E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPBOperatorServerRequestHandler*             pRequestHandler;                                  		// 0x03F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fPingInterval;                                    		// 0x03F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iMaxPingFailuresAllowed;                          		// 0x03F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPingFailures;                                    		// 0x03FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBGameReplicationInfo*                      pGameInfo;                                        		// 0x0400 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCustomChar_ItemSearchCache*               pItemCache;                                       		// 0x0404 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fGameSetupUnbalanceTime;                          		// 0x0408 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fLastPlayerConnectedTime;                         		// 0x040C (0x0004) [0x0000000000000000]              
	float                                              fTimeToDisconnectWhenEmpty;                       		// 0x0410 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fShutdownTime;                                    		// 0x0414 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fStartEPOverride;                                 		// 0x0418 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Region;                                           		// 0x041C (0x0004) [0x0000000000000000]              
	int                                                iTeamLimit;                                       		// 0x0420 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nMaxProgressionSubmitCount;                       		// 0x0424 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FBoostersAvailable                          mAllBoosters;                                     		// 0x0428 (0x0014) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UPBPlayerStatistics* >               mStoredStatistics;                                		// 0x043C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FGuid                                       mCurrentMatchGuid;                                		// 0x0448 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	int                                                AverageRank;                                      		// 0x0458 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnSubmitProgressionServerDoneDelegate__Delegate;		// 0x045C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1432 ];

		return pClassPointer;
	};

	struct FString GetAGEngineVer ( );
	bool ShouldSpawnAtStartSpot ( class AController* Player );
	class APlayerController* ProcessClientTravel ( struct FGuid NextMapGuid, unsigned long bSeamless, unsigned long bAbsolute, struct FString* URL );
	void UpdateGameplayMuteList ( class APlayerController* PC );
	void ResetAllPlayerMuteListsToSpectatorChannel ( );
	void RemovePlayerFromMuteLists ( class APBPlayerController* PC );
	void SetupPlayerMuteList ( class APBPlayerController* PC, unsigned long bForceSpectatorChannel );
	void _OnSubmitMatchStatsDone ( int requestId, int errocode );
	void WriteOnlineStats ( );
	void EndHeatmapLog ( );
	void StartHeatmapLog ( );
	class APBGameStatCollector_Rules* GetStatCollector ( );
	void RoundHasEnded ( );
	void OnConnectionStatusChange ( unsigned char ConnectionStatus );
	void OnItemShopDisconnect ( );
	void OnGetEventsByBackendServerDone ( int ErrorCode, TArray< int > eventCodes, TArray< struct FPBCriticalEvent > criticalEvents );
	void GoDownForMaitenance ( );
	void OnShutDownEventProcessed ( int ErrorCode, int EventCode );
	void DestroyRequestHandler ( );
	void eventGameEnding ( );
	void eventPreExit ( );
	void OnEndOnlineGame ( struct FName SessionName, unsigned long bWasSuccessful );
	void ClearGameConnectionDelegates ( );
	void UpdateGameRanking ( class APlayerController* PCLogout );
	void UpdateGameSettings ( );
	struct FString GetGametypeName ( );
	void UpdateGameSettingsCounts ( );
	int GetNumGroupWiseBoosts ( );
	void ScoreKill ( class AController* Killer, class AController* Other );
	void eventPostVerifyPlayer ( class APBPlayerReplicationInfo* pPlayerInfo );
	void eventPostLogin ( class APlayerController* NewPlayer );
	class APlayerController* eventLogin ( struct FString Portal, struct FString Options, struct FString* ErrorMessage );
	void eventPreLogin ( struct FString Options, struct FString Address, struct FString* ErrorMessage );
	unsigned char GetPlayerLoginTeam ( struct FString Options );
	void NotifyClientsVoteChanged ( class APBPlayerReplicationInfo* Voter, unsigned char VoteType, int Option );
	unsigned char PickTeamByName ( unsigned char iCurrent, struct FString PlayerName );
	void KillBot ( class APBBot* B );
	void ChooseTDMPlayerStart ( class AController* Player, class APlayerStart** start_point );
	void ChooseTDMPlayerStartIgnore ( class AController* Player, TArray< class APBSpawnPointTDM* > ignore, unsigned long Rate, TArray< class APBSpawnPointTDM* >* pointsArray2 );
	float RatePlayerStart ( class APlayerStart* PN, unsigned char Team, class AController* Player );
	void PlayStartupMessage ( );
	void PrecacheGameAnnouncements ( class APBAnnouncer* Announcer );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	void GameEvent ( struct FString GEvent, struct FString Desc, class APlayerReplicationInfo* Who );
	void GotoLobby ( );
	void RestartPlayer ( class AController* tController );
	void CheckCamping ( );
	void eventTimer ( );
	bool IsReadyToPlay ( class APlayerController* PC );
	void ResetLevel ( );
	int GetTotalPlayers ( );
	bool ShouldReset ( class AActor* ActorToReset );
	bool GetBoolOption ( struct FString sOptions, struct FString sName, unsigned long bValue );
	void RemovePlayersFromBanList ( );
	void KickPlayer ( class APBPlayerReplicationInfo* kicker, struct FString PlayerName, int banTime );
	class UClass* eventSetGameType ( struct FString sMapName, struct FString sOptions, struct FString Portal );
	void QuitServer ( struct FString Reason );
	void Logout ( class AController* Exiting );
	void DecrementIndividualRespawnTimer ( );
	void ConstructPresets ( class APBPlayerReplicationInfo* pPlayerInfo, TArray< struct FPBItemServer >* items );
	void GiveSkillsFromItemShop ( class APBPlayerReplicationInfo* pPlayerInfo, TArray< struct FPBItemServer >* items );
	void GiveTauntsFromItemShop ( class APBPlayerReplicationInfo* pPlayerInfo, TArray< struct FPBItemServer >* items );
	void FillMenuCharacterData ( TArray< struct FPBItemServer > pInventoryItemsCache, class UPBCustomChar_ItemSearchCache* pSearchItemCache, class UPBCustomChar_MenuData** pMenuCharData );
	void NotifyTeamSizeChanged ( class ATeamInfo* teamChanged );
	bool CalculatePlayerProgression ( class APBPlayerController* PC, unsigned long bLeavingEarly, struct FPBSubmitProgressionProfileData* BackEndProgressionData );
	void PrepareWeaponConditionSubmition ( class APBPlayerController* PC, struct FPBSubmitProgressionProfileData* BackEndProgressionData );
	void SubmitPlayersProgression ( unsigned long bLeavingEarly, class APBPlayerController* OnlyForSpecificPlayer );
	bool ShouldSavePlayerProgression ( );
	void NotifyPlayerLeavingGame ( class APBPlayerController* PC );
	int GetEndOfMatchHeatBonus ( class APBPlayerReplicationInfo* pPlayerInfo );
	void SetBoosters ( class APBPlayerReplicationInfo* pPlayerInfo, TArray< struct FPBItemServer > items );
	void LogItem ( struct FPBItemServer Item );
	void ReloadBoosters ( class APBPlayerReplicationInfo* pPlayerInfo );
	void OnGetSubscriptionModeServerDone ( int ErrorCode, struct FGuid ProfileId, struct FGuid subscriptionId, int subscriptionCreditsBoost, int subscriptionXpBoost, int slowWeaponDamage, int groupIgcBoost, int groupXpBoost );
	void OnGetPresetsServerDone ( int ErrorCode, struct FGuid ProfileId, TArray< struct FPBItemServer > items );
	void OnGetPresetsForBoostersDone ( int ErrorCode, struct FGuid ProfileId, TArray< struct FPBItemServer > items );
	bool ShouldGetPresetFromServer ( );
	bool ShouldConstructPresets ( );
	void OnSubmitProgressionServerDoneDelegate ( int ErrorCode );
	void SubmitProgressionServer ( TArray< struct FPBSubmitProgressionProfileData > Profiles );
	void OnGetProfileDetailsServerDone ( int ErrorCode, struct FGuid ProfileId, struct FString CharacterName, struct FString UserId, struct FString SessionId, struct FGuid characterGender, struct FGuid characterHead, struct FGuid characterSkin, int avatarPicture, int Rank, int xp, float xpPercentage, int credits, int coolness, int profileReputation, unsigned char accountLevel, int ProgressionSubmitCount );
	class APBPlayerReplicationInfo* FindPRIFromProfileId ( struct FGuid ProfileId );
	void OnGetProgressionServerDone ( int ErrorCode, float Heat2Fans, float Heat2IGC, float FormulaPower, int FormulaA, int FormulaB, int FormulaC, int MaxNumCreditBoost, int MaxNumXpBoost, int MaxPercentageCreditBoost, int MaxPercentageXpBoost );
	void OnGetBoostersServerDone ( int ErrorCode, int subscriptionIgc, int subscriptionXp, TArray< struct FPBOfferServer > offers );
	void OnLoginServerDone ( int ErrorCode, struct FString gameSpyToken, struct FString gameSpyChallenge );
	void KickPlayerPRI ( class APlayerReplicationInfo* pPlayerInfo, struct FString Reason );
	void VerifyProfileId ( class APBPlayerReplicationInfo* pPlayerInfo, struct FGuid ProfileId );
	void ServerShutdown ( );
	bool IsServerLocked ( );
	void InitiateServerShutdown ( struct FString Reason, unsigned char shutdownReason, float fOverrideShutdownTime );
	void UpdateLastConnectionTime ( );
	void KickAll ( struct FString Reason );
	void eventOrchestratorShutdown ( );
	bool ProcessServerLogin ( );
	void UpdateURL ( struct FString NewOption, struct FString NewValue );
	bool GetAutoLoginDetails ( struct FString* UserName, struct FString* Password, struct FGuid* gameRequestId );
	void SendOrchestratorShutdown ( );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	bool IsWeaponListValid ( );
	bool IsMapsListsValid ( );
	struct FString eventGetBeaconText ( );
	struct FString GetServerTags ( );
	struct FGuid GetOrchestratorId ( );
	int GetRegionCode ( );
	void InitGameReplicationInfo ( );
	void WriteLevelStats ( struct FName Camera );
	void BlockTillAllRequestsFinished ( );
	void ExecCommand ( struct FString Cmd );
	TArray< struct FString > GetMapPackageNames ( );
	bool IsAutoLevelCheckEnabled ( );
	bool IsHeatmapdataCollectingEnabled ( );
	void DisableHeatmapDataCollecting ( );
	void EnableHeatmapDataCollecting ( );
	void IncrementRound ( );
	void IncrementMatch ( );
	int GetCurrentRound ( );
	int GetCurrentMatch ( );
	struct FGuid GetServerID ( );
	struct FString GetAppTimeString ( );
	bool UnbanPlayerName ( struct FString PlayerName );
	bool IsPlayerBanned ( struct FString PlayerName, int* UnbanTime );
	bool BanId ( struct FString PlayerName, struct FUniqueNetId NetId, int banTime );
	bool UnbanId ( struct FUniqueNetId NetId );
	bool IsIDBanned ( struct FUniqueNetId NetId, int* UnbanTime );
	float GetAppSeconds ( );
};

UClass* APBGameInfo::pClassPointer = NULL;

// Class PlanBGame.PBMenuGame
// 0x0000 (0x0468 - 0x0468)
class APBMenuGame : public APBGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1433 ];

		return pClassPointer;
	};

	class APlayerController* eventLogin ( struct FString Portal, struct FString Options, struct FString* ErrorMessage );
	void eventPostSeamlessTravel ( );
	void UpdateGameSettings ( );
	void UpdateGameSettingsCounts ( );
	void Logout ( class AController* Exiting );
	void eventPostLogin ( class APlayerController* NewPlayer );
	void eventHandleSeamlessTravelPlayer ( class AController** C );
	void StartMatch ( );
};

UClass* APBMenuGame::pClassPointer = NULL;

// Class PlanBGame.PBItemComparisonGame
// 0x0288 (0x06F0 - 0x0468)
class APBItemComparisonGame : public APBMenuGame
{
public:
	TArray< struct FCustomCharData >                   CharacterDataArray;                               		// 0x0468 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FCustomCharData >                   FetchedCharacterDataArray;                        		// 0x0474 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FCustomWeaponDataEx >               WeaponDataArray;                                  		// 0x0480 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FCustomWeaponDataEx >               FetchedWeaponDataArray;                           		// 0x048C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FCustomWeaponDataEx                         CurrentWeaponData;                                		// 0x0498 (0x0010) [0x0000000000000000]              
	int                                                MAX_CHARACTERS;                                   		// 0x04A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MAX_EXTRACHARACTERS;                              		// 0x04AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                Iteration;                                        		// 0x04B0 (0x0004) [0x0000000000000000]              
	int                                                IterationExtra;                                   		// 0x04B4 (0x0004) [0x0000000000000000]              
	struct FCustomCharData                             CurrentCharacterData;                             		// 0x04B8 (0x010C) [0x0000000000000000]              
	struct FCustomCharData                             MutableCharacterData;                             		// 0x05C4 (0x010C) [0x0000000000000000]              
	int                                                NewItemsCount;                                    		// 0x06D0 (0x0004) [0x0000000000000000]              
	int                                                ScreenShotProgress;                               		// 0x06D4 (0x0004) [0x0000000000000000]              
	int                                                TotalItemsCount;                                  		// 0x06D8 (0x0004) [0x0000000000000000]              
	struct FString                                     ScreenShotName;                                   		// 0x06DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      CurrentGender;                                    		// 0x06E8 (0x0001) [0x0000000000000000]              
	unsigned long                                      UseOnlyFetched : 1;                               		// 0x06EC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      SkipCurrent : 1;                                  		// 0x06EC (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1434 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
	bool CreateWeapon ( );
	bool CreateCharacter ( );
	bool SelectRandomWeaponData ( struct FCustomWeaponDataEx* WeaponData );
	bool SelectRandomCharacterData ( struct FCustomCharData* CharacterData );
	int GetNewItemsInWeapon ( struct FCustomWeaponDataEx Data );
	int GetNewItemsIn ( struct FCustomCharData CharacterData );
	bool CheckIfItemIsThere ( struct FCustomCharData A, unsigned char Type );
	void CreateRandomCharacterData ( unsigned char GenderType, struct FCustomCharData* Data );
	void CreateRandomWeaponData ( struct FCustomWeaponDataEx* Data );
	class APBCustomChar_Preview* GetPreviewActor ( int nActorID );
	void HideStats ( );
	struct FString MakeScreenshot ( );
	void eventTick ( float DeltaTime );
	class APBItemComparisonReplicationInfo* GetPlayerReplicationInfo ( );
	void StartedNewCharacter ( );
	bool IsWeaponModeEnabled ( );
	int GetItemLimitFromCmdLine ( );
	int GetLodFromCmdLine ( );
	void CheckWeaponScreenshotAndUpload ( struct FString combination, struct FCustomWeaponDataEx Weapon );
	void CheckScreenshotAndUpload ( struct FString combination, struct FCustomCharData Character );
	bool GetExistingCustomWeaponData ( TArray< struct FCustomWeaponDataEx >* Weapons );
	bool GetExistingCustomCharData ( TArray< struct FCustomCharData >* Characters );
};

UClass* APBItemComparisonGame::pClassPointer = NULL;

// Class PlanBGame.PBRoundGame
// 0x0000 (0x0468 - 0x0468)
class APBRoundGame : public APBGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1435 ];

		return pClassPointer;
	};

};

UClass* APBRoundGame::pClassPointer = NULL;

// Class PlanBGame.PBGameMapInfo
// 0x003C (0x0078 - 0x003C)
class UPBGameMapInfo : public UMapInfo
{
public:
	class ACameraActor*                                pCameraForEndOfRound;                             		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ACameraActor* >                      pCamerasForSpectator;                             		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture*                                    MapTexture;                                       		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    MapOverlayTexture;                                		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mBoundTop;                                        		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mBoundLeft;                                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mBoundBottom;                                     		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mBoundRight;                                      		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBDTB_SiegeZone*                            pCaptureObjective1;                               		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBDTB_SiegeZone*                            pCaptureObjective2;                               		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBAAMTerminal*                              pSNDObjective1;                                   		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBAAMTerminal*                              pSNDObjective2;                                   		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACameraActor*                                pOverviewCamera;                                  		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1436 ];

		return pClassPointer;
	};

	class APBAAMTerminal* GetSNDObjective ( int iObjectiveIndex );
	class APBDTB_SiegeZone* GetDominionObjective ( int iObjectiveIndex );
};

UClass* UPBGameMapInfo::pClassPointer = NULL;

// Class PlanBGame.PBGameObjective
// 0x003C (0x02EC - 0x02B0)
class APBGameObjective : public ANavigationPoint
{
public:
	class UPBMinimapDrawer_Objective*                  mMinimapDrawer;                                   		// 0x02B0 (0x0004) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bFirstObjective : 1;                              		// 0x02B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAddToObjectiveArray : 1;                         		// 0x02B4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bAllowOnlyShootable : 1;                          		// 0x02B4 (0x0004) [0x0000000000000000] [0x00000004] 
	class APBGameObjective*                            NextObjective;                                    		// 0x02B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      DefensePriority;                                  		// 0x02BC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DefenderTeamIndex;                                		// 0x02BD (0x0001) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	unsigned char                                      StartTeam;                                        		// 0x02BE (0x0001) [0x0000000000000000]              
	unsigned char                                      replicateStateId;                                 		// 0x02BF (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class APBSquadAI*                                  DefenseSquad;                                     		// 0x02C0 (0x0004) [0x0000000000000000]              
	class APBDefensePoint*                             DefensePoints;                                    		// 0x02C4 (0x0004) [0x0000000000000000]              
	TArray< class ANavigationPoint* >                  ShootSpots;                                       		// 0x02C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ObjectiveName;                                    		// 0x02D4 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FName >                             stateNames;                                       		// 0x02E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1437 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	struct FName GetStateNameFromId ( unsigned char StateId );
	void SetStateId ( struct FName StateName );
	void ReplState ( );
	bool IsOfInterest ( unsigned char TeamIndex );
	void AddToObjectiveArray ( );
	bool IsInObjectiveArray ( );
	bool TellBotHowToDealWith ( class APBBot* B );
	void MarkShootSpotsFor ( class APawn* P );
	void TriggerFlagEvent ( struct FName EventType, class AController* EventInstigator );
	bool PoweredBy ( unsigned char Team );
	void ObjectiveChanged ( struct FName How );
	class AActor* eventGetBestViewTarget ( );
	int GetNumDefenders ( );
	bool TellBotHowToDisable ( class APBBot* B );
	bool IsDisabled ( );
	void Reset ( );
	class APBGameObjective* FindNearestFriendlyNode ( int TeamIndex );
	struct FString GetHumanReadableName ( );
	unsigned char GetTeamNum ( );
	bool Shootable ( );
	void DisableObjective ( );
	void EnableObjective ( );
	void UpdateLightEnvironment ( );
	void PostBeginPlay ( );
	void PreCommitMapChange ( );
};

UClass* APBGameObjective::pClassPointer = NULL;

// Class PlanBGame.PBGameObjectiveByVolume
// 0x0010 (0x02FC - 0x02EC)
class APBGameObjectiveByVolume : public APBGameObjective
{
public:
	unsigned long                                      bAchieved : 1;                                    		// 0x02EC (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	TArray< class APBObjectiveVolume* >                ObjectiveVolumes;                                 		// 0x02F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1438 ];

		return pClassPointer;
	};

	void Reset ( );
	void NotifyTouchingPawnDied ( class AActor* Other );
	void VolumeUnTouch ( class AActor* Other, class APBObjectiveVolume* TriggerVolume );
	void VolumeTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void PostBeginPlay ( );
};

UClass* APBGameObjectiveByVolume::pClassPointer = NULL;

// Class PlanBGame.PBInteractiveObjective
// 0x0065 (0x0351 - 0x02EC)
class APBInteractiveObjective : public APBGameObjective
{
public:
	int                                                iStartingTeam;                                    		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fInteractDistance;                                		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fObjectSize;                                      		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      pRenderingActor;                                  		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFreezePlayerMove : 1;                            		// 0x02FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFreezePlayerLook : 1;                            		// 0x02FC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBeingInteractedWith : 1;                         		// 0x02FC (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	unsigned long                                      bUsed : 1;                                        		// 0x02FC (0x0004) [0x0000000000002020] [0x00000008] ( CPF_Net | CPF_Transient )
	unsigned long                                      bVolumeInteraction : 1;                           		// 0x02FC (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	struct FVector                                     vObjectiveIconOffset;                             		// 0x0300 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UDynamicLightEnvironmentComponent*           pLightEnv;                                        		// 0x030C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              fInteractTime;                                    		// 0x0310 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fIMG_Duration;                                    		// 0x0314 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fIMG_MinTimePerc;                                 		// 0x0318 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fIMG_TargerZoneSize;                              		// 0x031C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fIMG_TargetZoneNum;                               		// 0x0320 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fIMG_FailAddDuration;                             		// 0x0324 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fIMG_FailNum;                                     		// 0x0328 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iObjectiveTeam;                                   		// 0x032C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fLastTitleHideTime;                               		// 0x0330 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fLastLevelImageHideTime;                          		// 0x0334 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStaticMeshComponent*                        pMeshComponent;                                   		// 0x0338 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AController*                                 InteractiveController;                            		// 0x033C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AController*                                 PlacedController;                                 		// 0x0340 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   StartInteractSoundCue;                            		// 0x0344 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CantInteractSoundCue;                             		// 0x0348 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        pInteractionVolume;                               		// 0x034C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      myPhysics;                                        		// 0x0350 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1439 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void UpdateLightEnvironment ( );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool IsVolumeInteractible ( );
	void EnableInteractionVolume ( unsigned long bEnable );
	class AActor* GetInteractibleActor ( );
	void DrawInteractionInfo ( class AHUD* H, class AController* User );
	float GetInteractDistance ( float* objectSize );
	float GetInteractTime ( );
	class UMaterial* GetObjectiveIconMaterial ( class AController* pPlayer );
	struct FString GetCurrentActionString ( class APBPlayerController* User );
	void SetInteractionInfo ( class AController* User );
	void EndInteract ( class AController* User, unsigned long bInteractionSuccessful );
	bool CanEndInteract ( class AController* User );
	void InteractionSuccessfulMG ( );
	void InteractionSuccessful ( );
	void NotifyInteractionEnded ( );
	void NotifyInteractionStarted ( );
	bool OnInteract ( class AController* User );
	void SetInteractedWith ( unsigned long bNewInteractedWith );
	void ClientCantInteract ( class AController* User );
	void ClientInteractionStarted ( class AController* User );
	bool CanInteract ( class AController* User );
	void ToggleObjective ( );
	void Reset ( );
	void SetTeam ( int TeamNum );
	void OnToggle ( class USeqAct_Toggle* Action );
	struct FVector GetHudIndicatorOffset ( );
	void PostBeginPlay ( );
};

UClass* APBInteractiveObjective::pClassPointer = NULL;

// Class PlanBGame.PBWeaponPickup
// 0x0093 (0x03E4 - 0x0351)
class APBWeaponPickup : public APBInteractiveObjective
{
public:
	struct FSDroppedWeaponData                         WeaponData;                                       		// 0x0354 (0x001C) [0x0000000000000020]              ( CPF_Net )
	struct FweaponRB                                   serverRB;                                         		// 0x0370 (0x0030) [0x0000000000000020]              ( CPF_Net )
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x03A0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x03A4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bUsing3PWeaponMesh : 1;                           		// 0x03A8 (0x0004) [0x0000000000000000] [0x00000001] 
	class USkeletalMesh*                               PreparedSkeletalMesh1P;                           		// 0x03AC (0x0004) [0x0000000000000000]              
	class UMaterialInstance*                           WeapMatInstMesh;                                  		// 0x03B0 (0x0004) [0x0000000000000000]              
	int                                                OwningPlayerId;                                   		// 0x03B4 (0x0004) [0x0000000000000000]              
	float                                              fWeaponLifetime;                                  		// 0x03B8 (0x0004) [0x0000000000000000]              
	struct FVector                                     lastSecondLocation;                               		// 0x03BC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              lastSecondVelocity;                               		// 0x03C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct APBWeaponPickup_FTInteractStruct >  m_Controllers;                                    		// 0x03CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AController* >                       m_SuccessfulControllers;                          		// 0x03D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1440 ];

		return pClassPointer;
	};

	void EndInteract ( class AController* User, unsigned long bInteractionSuccessful );
	void ClientInteractionStarted ( class AController* User );
	void StoreOldPreset ( class APBPlayerController* PC );
	class UPBWeaponPreset* GetWeaponPickupPreset ( class APBPlayerController* PC, int* PresetId );
	void ServerPickUpWeapon ( class AController* User );
	void eventDestroyed ( );
	void InteractionSuccessful ( );
	bool CanInteract ( class AController* User );
	class AActor* GetInteractibleActor ( );
	void SetInteractionInfo ( class AController* User );
	void DrawInteractionInfo ( class AHUD* H, class AController* User );
	float GetInteractDistance ( float* objectSize );
	void DeleteOldWeaponPickups ( );
	void eventOnSleepRBPhysics ( );
	void EnableObjective ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventTick ( float DeltaTime );
	void updateOneSecondVelocity ( );
	void UpdateWeaponMesh ( );
	void GRIWait ( );
	void SetWeaponData ( struct FSDroppedWeaponData* weaponDataParam );
	void SetSkeletalMesh ( class USkeletalMesh* Mesh, unsigned long b3PWeaponMesh, unsigned long bForceSet );
};

UClass* APBWeaponPickup::pClassPointer = NULL;

// Class PlanBGame.PBGameReplicationInfo
// 0x0140 (0x0374 - 0x0234)
class APBGameReplicationInfo : public APBBaseGameReplicationInfo
{
public:
	int                                                iRoundTimeLimit;                                  		// 0x0234 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                iVictoriousTeam;                                  		// 0x0238 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bForceDefaultCharacter : 1;                       		// 0x023C (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bRoundPlaying : 1;                                		// 0x023C (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned long                                      bRoundTimerPaused : 1;                            		// 0x023C (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsBuySafety : 1;                                 		// 0x023C (0x0004) [0x0000000000002020] [0x00000008] ( CPF_Net | CPF_Transient )
	unsigned long                                      bFriendlyFire : 1;                                		// 0x023C (0x0004) [0x0000000000002020] [0x00000010] ( CPF_Net | CPF_Transient )
	unsigned long                                      bForceSincronizeRound : 1;                        		// 0x023C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bVotingHasStarted : 1;                            		// 0x023C (0x0004) [0x0000000000000020] [0x00000040] ( CPF_Net )
	unsigned long                                      bVotingHasFinished : 1;                           		// 0x023C (0x0004) [0x0000000000000020] [0x00000080] ( CPF_Net )
	unsigned long                                      bGotoLobby : 1;                                   		// 0x023C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bGotoVotedMap : 1;                                		// 0x023C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bRepeatMatch : 1;                                 		// 0x023C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bRenderServerBoneInfo : 1;                        		// 0x023C (0x0004) [0x0000000000002020] [0x00000800] ( CPF_Net | CPF_Transient )
	unsigned long                                      bProcessedInitialCharacters : 1;                  		// 0x023C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bCharacterProcessingRequested : 1;                		// 0x023C (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bGameStatCollectorLoggingEnabled : 1;             		// 0x023C (0x0004) [0x0000000000002020] [0x00004000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bDisableCharacterMerging : 1;                     		// 0x023C (0x0004) [0x0000000000044001] [0x00008000] ( CPF_Edit | CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bDisableWeaponMerging : 1;                        		// 0x023C (0x0004) [0x0000000000044001] [0x00010000] ( CPF_Edit | CPF_Config | CPF_GlobalConfig )
	int                                                iRound;                                           		// 0x0240 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iLastNotifiedSafetyBuyTimer;                      		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fBuySafetyTimer;                                  		// 0x0248 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FName                                       GameState;                                        		// 0x024C (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iRoundRemainingTime;                              		// 0x0254 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                iInitialRoundTime;                                		// 0x0258 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      iRoundTimeSwitcher;                               		// 0x025C (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      VoteType;                                         		// 0x025D (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      ePlayingGamemode;                                 		// 0x025E (0x0001) [0x0000000000000020]              ( CPF_Net )
	int                                                iAlphaVotes;                                      		// 0x0260 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                iBetaVotes;                                       		// 0x0264 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     sVoteTarget;                                      		// 0x0268 (0x000C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	int                                                iVotingTeam;                                      		// 0x0274 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iVoteTimer;                                       		// 0x0278 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     sVoteStarter;                                     		// 0x027C (0x000C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      MapVotes;                                         		// 0x0288 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     NextMap;                                          		// 0x0294 (0x000C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	int                                                MaxTeamSize;                                      		// 0x02A0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iAttackingTeam;                                   		// 0x02A4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class APBCharacter*                                MaleArchetype;                                    		// 0x02A8 (0x0004) [0x0000000000000000]              
	class APBCharacter*                                FemaleArchetype;                                  		// 0x02AC (0x0004) [0x0000000000000000]              
	class APBGameObjective*                            ObjectiveList;                                    		// 0x02B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartCreateCharTime;                              		// 0x02B4 (0x0004) [0x0000000000000000]              
	TArray< struct FCreateCharStatus >                 CharStatus;                                       		// 0x02B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              StartCreateWeaponTime;                            		// 0x02C4 (0x0004) [0x0000000000000000]              
	TArray< struct FCreateWeaponStatus >               WeaponStatus;                                     		// 0x02C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPropertyWindows >                  rPropertyWindows;                                 		// 0x02D4 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	class UPBCustomizationCache*                       CustomizationCache;                               		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class APBWeaponPickup* >                   rAllWeaponPickups;                                		// 0x02E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class APBAugmentedRealityAdvert* >         rAllAugmentedRealityAdverts;                      		// 0x02F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class APBAmmunitionCrate* >                rAllAmmoCrates;                                   		// 0x02FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                MaxSpectators;                                    		// 0x0308 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                NumSpectators;                                    		// 0x030C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                MaxPlayers;                                       		// 0x0310 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                NumPlayers;                                       		// 0x0314 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Region;                                           		// 0x0318 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Special;                                          		// 0x031C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fRoundStartTime;                                  		// 0x0320 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTotalMatchTime;                                  		// 0x0324 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBKWeaponSettings*                          pWeaponSettings;                                  		// 0x0328 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< class APBSkill_TurretWeapon* >             skillTurrets;                                     		// 0x032C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class APBSpawnVolumeTDM* >                 spawnVolumes;                                     		// 0x0338 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class APBHeatSystemHandler*                        heatHandler;                                      		// 0x0344 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumPlayersAtMatchStart;                           		// 0x0348 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< unsigned long >                            VotesHistory;                                     		// 0x034C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTRankFormulaValues                         rankFormulaValues;                                		// 0x0358 (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FTConversionFormulaValues                   conversionFormulaValues;                          		// 0x0368 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class APlayerReplicationInfo*                      LastKiller;                                       		// 0x0370 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1441 ];

		return pClassPointer;
	};

	void SortPRIArrayPrevHeat ( );
	void SortPRIArray ( );
	bool InOrderPrevHeat ( class APBPlayerReplicationInfo* P1, class APBPlayerReplicationInfo* P2 );
	void SetLastKiller ( class APlayerReplicationInfo* Killer, int VictimTeamNum );
	void RemoveSpawnVolumeTDM ( class APBSpawnVolumeTDM* Volume );
	void AddSpawnVolumeTDM ( class APBSpawnVolumeTDM* Volume );
	void RemoveSkillTurret ( class APBSkill_TurretWeapon* turret );
	void AddSkillTurret ( class APBSkill_TurretWeapon* turret );
	bool VerifyMapName ( unsigned char gameMode, struct FString MapFileName );
	void eventDestroyed ( );
	void PrepareForWorldCleanup ( );
	void eventCleanupBeforeLevelTransition ( );
	void CleanupWeaponMeshCreation ( );
	void CleanupCharacterMeshCreation ( );
	void CheckWeaponProcessingDone ( unsigned long bMergeWasPending );
	void TickWeaponMeshCreation ( );
	void SetNewWeaponMesh ( struct FCreateWeaponStatus InWeaponStatus, class USkeletalMesh* NewMesh );
	void CheckCharacterProcessingDone ( unsigned long bMergeWasPending );
	void TickCharacterMeshCreation ( );
	void InitializeCustomizationCache ( );
	void ProcessWeaponData ( class APBPlayerReplicationInfo* PRI, class APBKWeaponParams* pWeaponParams, class APBNWeaponCustomParams* pWeaponCustomParams, unsigned long bUpdateMeshWhenDone, class APBWeaponPickup* WeaponPickup, unsigned long bInFirstPerson, unsigned long bForceSync, struct FCustomWeaponData* WeaponData );
	void ProcessWeaponDataByCode ( class APBPlayerReplicationInfo* PRI, struct FSWeaponCode WeaponCode, unsigned long bUpdateMeshWhenDone );
	void ProcessAllWeaponData ( class APBPawn* Pawn );
	bool WeaponDataProcessing ( class APBPlayerReplicationInfo* PRI );
	bool CharacterDataProcessing ( class APBPlayerReplicationInfo* PRI );
	void ProcessCharacterData ( class APBPlayerReplicationInfo* PRI, unsigned long bForceProcessing, unsigned long bForceSyncMerging );
	bool IsCharacterProcessingAllowed ( );
	void FinishWeaponMerge ( int StatusIndex, class USkeletalMesh** Mesh3P );
	void FinishCharMerge ( int StatusIndex, class USkeletalMesh** Mesh3P, class USkeletalMesh** Mesh1P );
	void ResetWeaponMerge ( int StatusIndex );
	void ResetCharMerge ( int StatusIndex );
	void ProcessPendingCharacterData ( unsigned long bForceSyncMerging );
	void StartProcessingWeaponData ( );
	void StartProcessingCharacterData ( );
	void SendWeaponProcessingNotification ( unsigned long bNowProcessing );
	void SendCharacterProcessingNotification ( unsigned long bNowProcessing );
	bool SkipAllProcessing ( unsigned long bIsWeaponProcessing );
	bool IsProcessingWeaponData ( );
	bool IsProcessingCharacterData ( );
	class APBCharacter* GetCharacterArchetype ( unsigned long bFemale );
	void eventTimer ( );
	bool InOrder ( class APlayerReplicationInfo* P1, class APlayerReplicationInfo* P2 );
	void NotifyClientsWinningScreen ( int iWinTeamIndex );
	void PrepareGame ( );
	void eventReplicatedEvent ( struct FName VarName );
	void UpdateSafetyBuyTimer ( );
	void SetSafetybuyMode ( unsigned long bValue );
	void NotifyRoundRemainingTimeChanged ( int iRemainingTime );
	void ResetRoundTimer ( int roundTime );
	void ReinitRoundTimer ( );
	int GetAttackingTeamIndex ( );
	int GetDefendingTeamIndex ( );
	void eventReset ( );
	void GetAllPawns ( unsigned long bHideDeadPawns, TArray< class APBPawn* >* rPawns );
	void ResetVoting ( );
	void RegisterObjectives ( );
	float GetTotalMatchPlayTime ( );
	void NotifyRoundEnd ( );
	void NotifyRoundStart ( );
	void StartMatch ( );
	void DoGenerateEvent ( class UClass* cEventClass );
	void CloseAllPropertyWindows ( );
	void ClosePropertyWindow ( class UObject* pObject );
	void OpenPropertyWindow ( class UObject* pObject );
	bool ShouldDisplayRoundTimerWidget ( );
	int GetFameLevelFromFans ( int iFanCount, int startingFameLevel );
	int GetFansForFameLevel ( int iCurrentFameLevel );
	float GetPercentageForRank ( int Rank, int fans );
	int GetFansForRankPercentage ( int Rank, float fansPercentage, int oldFans );
	void GetFansForFameLevelStartEnd ( int iCurrentFameLevel, int* iStartFans, int* iEndFans );
	void PauseRoundTimer ( unsigned long bPause );
	void UpdateCharacterProcessingStatus ( );
	bool IsFriendlyFire ( );
	bool IsVictoryDecided ( );
	void eventPostBeginPlay ( );
};

UClass* APBGameReplicationInfo::pClassPointer = NULL;

// Class PlanBGame.PBGameSettingsCommon
// 0x0014 (0x00E4 - 0x00D0)
class UPBGameSettingsCommon : public UOnlineGameSettings
{
public:
	int                                                MaxPlayers;                                       		// 0x00D0 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                MinNetPlayers;                                    		// 0x00D4 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	TArray< struct FBannedPlayer >                     BannedPlayerList;                                 		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1442 ];

		return pClassPointer;
	};

	void UpdateFromURL ( class AGameInfo* Game, struct FString* URL );
	void BuildURL ( struct FString* OutURL );
	void SetOfficialMutatorBitmask ( int MutatorBitmask );
	void SetCustomSpecial ( int Special );
	void SetCustomRegion ( int Region );
	void SetCustomMaxSpectators ( int MaxSpectators );
	void SetCustomNumSpectators ( int NumSpectators );
	void SetCustomMapName ( struct FString MapName );
	void CheckToRemovePlayers ( );
	void AddBannedPlayerList ( struct FString _bannedPlayer, int _bantime );
	void SetServerTags ( struct FString Tag );
	void SetServerDescription ( struct FString ServerDesc );
	void SetFriendlyFire ( unsigned long bFriendlyFire );
	void SetGameRank ( int Rank );
	void SetInLobby ( unsigned long bIsInLobby );
	void SetPasswordProtected ( unsigned long bPasswordProt );
	void SetGameVer ( struct FString _GameVer );
	void SetGameType ( struct FString _GameType );
	struct FString BlobToString ( struct FString* InBlob );
	bool StringToBlob ( struct FString* InString, struct FString* OutBlob );
};

UClass* UPBGameSettingsCommon::pClassPointer = NULL;

// Class PlanBGame.PBGameStat
// 0x0000 (0x003C - 0x003C)
class UPBGameStat : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1443 ];

		return pClassPointer;
	};

};

UClass* UPBGameStat::pClassPointer = NULL;

// Class PlanBGame.PBGameStatRead
// 0x0008 (0x00A4 - 0x009C)
class UPBGameStatRead : public UOnlineStatsRead
{
public:
	unsigned long                                      m_bReadingFinished : 1;                           		// 0x009C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bCalculated : 1;                                		// 0x009C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class UPBStatisticsStats*                          StatisticsStats;                                  		// 0x00A0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1444 ];

		return pClassPointer;
	};

	void InitReaderFromStatsArray ( TArray< struct FStatisticsStat > StatsArray );
	void StartReading ( );
	void FinishReading ( );
	void ResetReader ( );
	bool IsCalculated ( );
	bool IsReadingFinished ( );
	void InitReader ( );
	void Calculate ( );
};

UClass* UPBGameStatRead::pClassPointer = NULL;

// Class PlanBGame.PBGameComplexStatRead
// 0x000C (0x00B0 - 0x00A4)
class UPBGameComplexStatRead : public UPBGameStatRead
{
public:
	TArray< class UPBGameStatRead* >                   m_ReadArray;                                      		// 0x00A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1445 ];

		return pClassPointer;
	};

	void StartReading ( );
	void FinishReading ( );
	void AddReader ( class UPBGameStatRead* pReader );
};

UClass* UPBGameComplexStatRead::pClassPointer = NULL;

// Class PlanBGame.PBGamePlayerStatRead
// 0x003C (0x00E0 - 0x00A4)
class UPBGamePlayerStatRead : public UPBGameStatRead
{
public:
	struct FTCalculatedPlayerStatistics                CalculatedPlayerStatsData;                        		// 0x00A4 (0x0030) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             CalculatedPlayerStats;                            		// 0x00D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1446 ];

		return pClassPointer;
	};

	void InitReader ( );
};

UClass* UPBGamePlayerStatRead::pClassPointer = NULL;

// Class PlanBGame.PBGameWeaponStatRead
// 0x003C (0x00E0 - 0x00A4)
class UPBGameWeaponStatRead : public UPBGameStatRead
{
public:
	TArray< struct FString >                           CalculatedWeaponStats;                            		// 0x00A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTCalculatedWeaponStatistics                CalculatedWeaponStatsValues;                      		// 0x00B0 (0x001C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FString >                           m_EachWeaponStat;                                 		// 0x00CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m_nWeaponIndex;                                   		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                m_nMapIndex;                                      		// 0x00DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1447 ];

		return pClassPointer;
	};

	void InitReader ( );
	void SetMapIndex ( int nIndex );
	void SetWeaponIndex ( int nIndex );
};

UClass* UPBGameWeaponStatRead::pClassPointer = NULL;

// Class PlanBGame.PBHeatEvent
// 0x0000 (0x003C - 0x003C)
class UPBHeatEvent : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1448 ];

		return pClassPointer;
	};

};

UClass* UPBHeatEvent::pClassPointer = NULL;

// Class PlanBGame.PBHeatEventManager
// 0x0090 (0x0268 - 0x01D8)
class APBHeatEventManager : public AReplicationInfo
{
public:
	float                                              fDelayUntilDisplayEventQueue;                     		// 0x01D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iCrosshairValue;                                  		// 0x01DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fLastCrosshairDisplayTime;                        		// 0x01E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bHeatBufferCountDown : 1;                         		// 0x01E4 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bTauntIsEnabled : 1;                              		// 0x01E4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      FillersEnabled : 1;                               		// 0x01E4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsFemale : 1;                                    		// 0x01E4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      onHold : 1;                                       		// 0x01E4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	int                                                iHeatBuffer;                                      		// 0x01E8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iHeatBufferDisplay;                               		// 0x01EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fHeatBufferTimeLeft;                              		// 0x01F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FEventQueueItem >                   rEventQueueDesc;                                  		// 0x01F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPBHeatSystemArc*                            pHeatSystemArc;                                   		// 0x0200 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      iUnsubmittedPrimaryEventCode;                     		// 0x0204 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      iScheduledPrimaryEventCode;                       		// 0x0205 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                iUnsubmittedBonusEventCode;                       		// 0x0208 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              iUnsubmittedPrimaryEventMultiplyer;               		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTauntStartTime;                                  		// 0x0210 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTauntStopTime;                                   		// 0x0214 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTauntMultipier;                                  		// 0x0218 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iStartedTauntIndex;                               		// 0x021C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPreviousHeat;                                    		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iUnlockedHeatTier;                                		// 0x0224 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fUnlockedHeatTierTime;                            		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CommentatorTrackPlaying;                          		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fFillerTimeLeft;                                  		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FCommentatorTrackInfo >             QueuedHeatEventTracks;                            		// 0x0234 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                HeatEventPriority[ 0x2 ];                         		// 0x0240 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   QueuedCrowdSound;                                 		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DebugFillerCatergory;                             		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< unsigned char >                            onHoldPrimary;                                    		// 0x0250 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      onHoldBonus;                                      		// 0x025C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1449 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void ClientNotifyTauntMultiplier ( float fMultiplier, int iAddedHeat );
	void SubmitScheduledPrimaryEvent ( );
	void SubmitLastEvent ( );
	void SubmitOnHoldEvents ( );
	void AddBonusEvent ( unsigned char BonusEvent );
	void SetNextPrimaryEvent ( unsigned char primaryEvent, float multiplyer );
	void SchedulePrimaryEvent ( unsigned char primaryEvent, float fTimeFromNow );
	void GetTracksForDescription ( TArray< struct FCommentatorTrackInfo > Source, struct FString Desc, TArray< struct FCommentatorTrackInfo >* tracks );
	void ClientPlayRandomFiller ( );
	void ResestFillerTimer ( );
	void eventTick ( float DeltaTime );
	void ClearBuffer ( );
	void PrepareForSubmitProgression ( );
	void DrawTextOutline ( class UCanvas* Canvas, struct FString Text, int X, int Y, struct FColor whichColor );
	void DrawHeatSystem ( class UCanvas* Canvas );
	void AddHeatToBuffer ( int iAmount, int PenaltyPercentage );
	void HeatBufferTimeout ( );
	void PlayLocalSound ( class APBPlayerController* PC, class USoundCue* pSoundCue );
	void UnlockedHeatTier ( int iHeatTier );
	void HandlePossibleTierUnlock ( int iPrevHeat, int iNewHeat );
	void CheckForHeatTierUnlock ( int iCurHeat );
	void ShowValueOnCrosshair ( int iValue );
	void AddEventDescription ( struct FString EventDesc, struct FString IconName, int iHeatFromEvent, unsigned long bPenalty );
	void PlayHeatEventSounds ( TArray< struct FCommentatorTrackInfo > HeatEventTracks, class USoundCue* CrowdSound );
	void ClientRaiseHeatEvent ( unsigned char iPrimaryEvent, int iBonusEvents, float fPrimaryEventMultiplyer );
	void RaiseHeatEvent ( unsigned char iPrimaryEvent, int iBonusEvents, float fPrimaryEventMultiplyer );
	void EndTaunt ( unsigned long bSuccessfulTaunt );
	float GetTauntMultiplierClient ( float fTime );
	float GetTauntMultiplier ( int iTauntIndex );
	float GetTauntTimeElapsed ( );
	void StartTaunt ( int iTauntIndex );
	void eventPostBeginPlay ( );
};

UClass* APBHeatEventManager::pClassPointer = NULL;

// Class PlanBGame.PBHeatSystemArc
// 0x0088 (0x00C4 - 0x003C)
class UPBHeatSystemArc : public UObject
{
public:
	TArray< struct FHeatCollectorInfo >                rHeatCollectors;                                  		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FPrimaryEventInfo >                 rPrimaryEvents;                                   		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FBonusEventInfo >                   rBonusEvents;                                     		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                iShotsForSharpshooter;                            		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLongRangeDistance;                               		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fShortRangeDistance;                              		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bQueueSecondBonusEvent : 1;                       		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRandomizeWithoutReplacement : 1;                 		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                iMaxStyleBonus;                                   		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fUnlockHeatTierTextTime;                          		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fHeatBufferTimeout;                               		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fHeatBufferDisplayIncSpeed;                       		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iHeatBufferMinimumTransfer;                       		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWaitTimeUntilFirstEventDesc;                     		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEventDescLifeTime;                               		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEventDescFadeupTime;                             		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEventDescFadeStartPerc;                          		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCrosshairTimeToMergeHeatValue;                   		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCrosshairDisplayTime;                            		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCrosshairStartFadingAfter;                       		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCrosshairTimeToFadeUp;                           		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeUntilMultiKillExpires;                       		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxHeatDisplayed;                                 		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTauntTimeToMultiplier;                           		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEventTransitionStartOffset;                      		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEventTransitionMidpointOffset;                   		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEventDescriptionStartOffset;                     		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEventDescriptionEndOffset;                       		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              heatBufferTransitionStartZ;                       		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1450 ];

		return pClassPointer;
	};

};

UClass* UPBHeatSystemArc::pClassPointer = NULL;

// Class PlanBGame.PBHUD
// 0x0045 (0x04A5 - 0x0460)
class APBHUD : public AHUD
{
public:
	unsigned long                                      bDrawCrossHair : 1;                               		// 0x0460 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDrawHud : 1;                                     		// 0x0460 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bShowMap : 1;                                     		// 0x0460 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bShowWiningScreen : 1;                            		// 0x0460 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bHudHealthGroup : 1;                              		// 0x0460 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bHudWeaponGroup : 1;                              		// 0x0460 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bIsInMenu : 1;                                    		// 0x0460 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bShowNewScoreboard : 1;                           		// 0x0460 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bPlayerSettingsOpen : 1;                          		// 0x0460 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bSNDMinigameArming : 1;                           		// 0x0460 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bConsolidatedLobbyUnlocked : 1;                   		// 0x0460 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bShowMapVoting : 1;                               		// 0x0460 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bShowVictoryScreen : 1;                           		// 0x0460 (0x0004) [0x0000000000000000] [0x00001000] 
	float                                              LastPickupTime;                                   		// 0x0464 (0x0004) [0x0000000000000000]              
	float                                              LastAmmoPickupTime;                               		// 0x0468 (0x0004) [0x0000000000000000]              
	float                                              LastWeaponPickupTime;                             		// 0x046C (0x0004) [0x0000000000000000]              
	struct FColor                                      cMMFriendColor;                                   		// 0x0470 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      cMMEnemyColor;                                    		// 0x0474 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMMPlayerSize;                                    		// 0x0478 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BlueColor;                                        		// 0x047C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTextureRenderTarget2D*                      pRenderTargetForSNDMinigame;                      		// 0x0480 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBGFxMoviePlayer_SNDMinigame*               pCurrentSNDMinigame;                              		// 0x0484 (0x0004) [0x0000000000000000]              
	class APBInteractiveObjective*                     minigameObjective;                                		// 0x0488 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBAvatarData*                               AvatarData;                                       		// 0x048C (0x0004) [0x0000000000000000]              
	class UPBGFxMoviePlayer_NextMapVote*               pNextMapVoteMovie;                                		// 0x0490 (0x0004) [0x0000000000000000]              
	class APBPlayerController*                         PBPlayerOwner;                                    		// 0x0494 (0x0004) [0x0000000000000000]              
	TArray< struct FChatMessage >                      rChatMessages;                                    		// 0x0498 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      InitialLobbyScreen;                               		// 0x04A4 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1451 ];

		return pClassPointer;
	};

	void LocalizedMessageRemove ( class UClass* InMsgClass );
	void eventPostRender ( );
	void UpdateState ( unsigned long bIsVisible );
	void SetPlayerSettingScreenOpen ( unsigned long bSetAsOpen );
	void ClosePlayerSettings ( );
	void OpenPlayerSettings ( );
	bool IsInConsolidatedLobby ( );
	void NotifyRoundEnded ( );
	void SetNextMapVoteWinner ( int Winner );
	void ShowNextMapVoteScreen ( unsigned long bShow );
	class UUIInteraction* GetUIController ( class ULocalPlayer** LP );
	void DrawHUD ( );
	void ShowHUD ( );
	void HideScoreboard ( );
	void ToggleMap ( );
	void ShowScoreboard ( );
	void ShowScores ( );
	void DrawEngineHUD ( );
	void eventDestroyed ( );
	void ClearChat ( );
	void CloseSNDMinigame ( );
	void OpenSNDMinigame ( unsigned long bArming, class APBInteractiveObjective* objective );
	void PostBeginPlay ( );
};

UClass* APBHUD::pClassPointer = NULL;

// Class PlanBGame.PBImpactData
// 0x0048 (0x0084 - 0x003C)
class UPBImpactData : public UObject
{
public:
	unsigned char                                      Type;                                             		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          DecalMaterial;                                    		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalWidth;                                       		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalHeight;                                      		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalThickness;                                   		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      DecalNoClip : 1;                                  		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProjectOnTerrain : 1;                            		// 0x0050 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bProjectOnSkeletalMeshes : 1;                     		// 0x0050 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	int                                                DecalRandomRotationRange;                         		// 0x0054 (0x0004) [0x0000000020000001]              ( CPF_Edit | CPF_Deprecated )
	float                                              DecalRandomSizeFactor;                            		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalLifeSpan;                                    		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ImpactParticleSystem;                             		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ImpactSound;                                      		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ImpactSoundAlternative;                           		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ImpactSoundLand;                                  		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ImpactSoundTakeoff;                               		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ExitParticleSystem;                               		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             WakeupParticleSystem;                             		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             RestOnGroundParticleSystem;                       		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              damageFactor;                                     		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1452 ];

		return pClassPointer;
	};

	class UPhysicalMaterial* GetPhysicalMaterialFromContact ( class AActor* Instigator, struct FRigidBodyContactInfo ContactInfo );
	class UPhysicalMaterial* TraceForPhysicalMaterial ( class AActor* Instigator, struct FVector TraceEnd, struct FVector TraceStart );
	class UPBPhysicalMaterialProperty* TraceForPBPhysicalMaterialProperty ( class AActor* Instigator, struct FVector TraceEnd, struct FVector TraceStart );
	class UPBImpactData* SpawnHitDecal ( struct FImpactInfo impact );
	void QualifyEffectLocationRelevancy ( class AActor* Instigator, struct FVector vLocation, float* fEffectDistance, float* fEffectObstacleDistance, float* fViewRayDot );
	void QualifyHitRelevancy ( class AActor* Instigator, struct FVector HitLocation, struct FVector HitNormal, float* fViewRelative_BackFace, float* fEffectDistance, float* fEffectObstacleDistance );
	bool PlayImpactSoundAlternative ( class AActor* Instigator, struct FVector vLocation, float fVolumeMultiplier, unsigned long bTurnOffSpatialization );
	bool SimpleOcclusionCheck ( class AActor* pInstigator, struct FVector vLocation );
	bool PlaySound ( class USoundCue* sndCue, class AActor* Instigator, struct FVector vLocation, float fVolumeMultiplier, unsigned long bTurnOffSpatialization );
	bool PlayImpactSoundTakeoff ( class AActor* Instigator, struct FVector vLocation, float fVolumeMultiplier, unsigned long bTurnOffSpatialization );
	bool PlayImpactSoundLand ( class AActor* Instigator, struct FVector vLocation, float fVolumeMultiplier, unsigned long bTurnOffSpatialization );
	bool PlayImpactSound ( class AActor* Instigator, struct FVector vLocation, float fVolumeMultiplier, unsigned long bTurnOffSpatialization );
	class UParticleSystemComponent* PlayCollisionImpactEffects ( class AActor* Instigator, struct FImpactInfo impact, unsigned long bPlaySound, unsigned long bAddDecal );
	void PlayEffectAtPawnBone ( class APBPawn* Instigator, struct FName BoneName, unsigned long bAddDecal );
	class UParticleSystemComponent* PlayImpactEffects ( class AActor* Instigator, struct FImpactInfo impact, unsigned long bPlaySound );
	class UParticleSystemComponent* PlayRestOnGroundEffect ( class AActor* Instigator );
	class UParticleSystemComponent* PlayWakeupEffect ( class AActor* Instigator );
	class UPBPhysicalMaterialProperty* GetPBPhysicalMaterialPropertyFromHitInfo ( struct FTraceHitInfo* HitInfo );
	class UPBPhysicalMaterialProperty* GetPBPhysicalMaterialPropertyFromImpact ( struct FImpactInfo* impact );
};

UClass* UPBImpactData::pClassPointer = NULL;

// Class PlanBGame.PBKActorClientOnly
// 0x0004 (0x02CC - 0x02C8)
class APBKActorClientOnly : public AKActor
{
public:
	unsigned long                                      bDirty : 1;                                       		// 0x02C8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1453 ];

		return pClassPointer;
	};

	void eventFallToSleep ( );
	void eventWakeUp ( );
	void AddRadialImpulse ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff, unsigned long bVelChange );
	void UpdateClientKActorState ( );
	void ResetClientKActorState ( );
	void eventPreBeginPlay ( );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void ReliableHit ( class AController* EventInstigator, struct FVector Position, struct FVector Momentum, class UClass* DamageType );
	void NonReliableHit ( class AController* EventInstigator, struct FVector Position, struct FVector Momentum, class UClass* DamageType );
};

UClass* APBKActorClientOnly::pClassPointer = NULL;

// Class PlanBGame.PBKWeaponGlobals
// 0x0114 (0x02EC - 0x01D8)
class APBKWeaponGlobals : public AActor
{
public:
	float                                              fRecoilNodeStrengthModifier;                      		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseCameraSocket : 1;                             		// 0x01DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysUseWeaponMeshAim : 1;                      		// 0x01DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDebugShowSphereOnLightPos : 1;                   		// 0x01DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAlwaysUseUIDot : 1;                              		// 0x01DC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bUsePointLight : 1;                               		// 0x01DC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bEnableWorldDOF : 1;                              		// 0x01DC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bDisplayCenterDot : 1;                            		// 0x01DC (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bShowDamageNumbers : 1;                           		// 0x01DC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bWeaponConditionTrackingEnabled : 1;              		// 0x01DC (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDBG_DisplayHUDWeaponInfo : 1;                    		// 0x01DC (0x0004) [0x0000000000002001] [0x00000200] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bDBG_RenderBulletTrace : 1;                       		// 0x01DC (0x0004) [0x0000000000002001] [0x00000400] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bDBG_MaxRadiusSpread : 1;                         		// 0x01DC (0x0004) [0x0000000000002001] [0x00000800] ( CPF_Edit | CPF_Transient )
	struct FName                                       EyeRotationSocketName;                            		// 0x01E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    EyeOffsetRotation;                                		// 0x01E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFireBlendTime;                                   		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAimFireBlendTime;                                		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEyeRotBlendFactor;                               		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMovingSpeedPct;                                  		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLaserDotScale;                                   		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLaserDotSizeModifier1P;                          		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLaserDotSizeModifier3P;                          		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFarDistanceToUpscale;                            		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFarScaleModifier;                                		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fNearDistanceToStartScaling;                      		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fNearScaleModifier;                               		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    rOffsetRotation;                                  		// 0x0220 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLightRadiusMin;                                  		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLightRadiusMax;                                  		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDistanceToPullBackLaserLight;                    		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLaserMinDist;                                    		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLaserMaxDist;                                    		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fScaleAtMax;                                      		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fScaleAtMin;                                      		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADecalActorMovable*                          pMovableDecal;                                    		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSmoothedRotSpeed;                                		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWorldDOFFocusInnerRadius;                        		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWorldDOFDistance;                                		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSprintOffsetExponent;                            		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iMaxImpactSoundsPerFrame;                         		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  EnemyHitIndicatorTexture;                         		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstance*                           CrosshairEnemyHitIndicator;                       		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      cNormalCrosshairColor;                            		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      cEnemyAimCrosshairColor;                          		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      cFriendlyAimCrosshairColor;                       		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEnemyHitCrosshairDisplayTime;                    		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  CrosshairTexture;                                 		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  CrosshairDotTexture;                              		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstance*                           CrosshairMaterialInstance;                        		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstance*                           CrosshairCenterMatInstance;                       		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fGlobalDamageModifier;                            		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMuzzleTimer;                                     		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      cMuzzleLightColor;                                		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CharacterHitSoundCue;                             		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fForceOutOfAimUpVelocity;                         		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fForceOutOfAimDownVelocity;                       		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ZoomCaptureOffsetRotation;                        		// 0x02A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UTextureRenderTarget2D*                      SniperZoomTextureRT;                              		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstance*                           SniperZoomMaterial;                               		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMeleeGap;                                        		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fNonAimForcedWorldFOV;                            		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTextureRenderTarget2D*                      FlashBangRenderTexture;                           		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBrokenWeaponDmgModifier;                         		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCPModifier;                                      		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCPMax;                                           		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRepairCrFactor;                                  		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRepairCOFactor;                                  		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMinCPMaxCondition;                               		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxCPModifier;                                   		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   pCrosshairMI;                                     		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   pCrosshairCenterMI;                               		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   pCrosshairEnemyHitMI;                             		// 0x02E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBKWeaponGlobals*                           pCurrentWeaponGlobals;                            		// 0x02E8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1454 ];

		return pClassPointer;
	};

	float GetCoinsRepairPrice ( float fCurCond );
	float GetCreditsRepairPrice ( float fCurCond, float fMaxCond );
	float GetWeaponMaxCondition ( );
	float CalculateNewCondition ( float fCurrentCondition, float fEquipTime );
	void CreateCrosshairMI ( class AActor* MIOwner );
	class APBKWeaponGlobals* GetInstance ( );
};

UClass* APBKWeaponGlobals::pClassPointer = NULL;

// Class PlanBGame.PBKWeaponInfo
// 0x00A4 (0x027C - 0x01D8)
class APBKWeaponInfo : public AActor
{
public:
	struct FSWeaponCode                                CurrentWeaponCode;                                		// 0x01D8 (0x000C) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	class APBKWeaponParams*                            WeaponParams;                                     		// 0x01E4 (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	class APBNWeaponCustomParams*                      WeaponCustomParams;                               		// 0x01E8 (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	TArray< class UPBKWeaponMod* >                     CurrentWeaponMods;                                		// 0x01EC (0x000C) [0x0000000000422001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_NeedCtorLink )
	unsigned long                                      bAttached1P : 1;                                  		// 0x01F8 (0x0004) [0x0000000000022001] [0x00000001] ( CPF_Edit | CPF_Transient | CPF_EditConst )
	unsigned long                                      bAttached3P : 1;                                  		// 0x01F8 (0x0004) [0x0000000000022001] [0x00000002] ( CPF_Edit | CPF_Transient | CPF_EditConst )
	unsigned long                                      bFiringSoundPlaying : 1;                          		// 0x01F8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEquipUnequip : 1;                                		// 0x01F8 (0x0004) [0x0000000000002001] [0x00000008] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bVisibilityInitialized : 1;                       		// 0x01F8 (0x0004) [0x0000000000002001] [0x00000010] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bCachedFirstPerson : 1;                           		// 0x01F8 (0x0004) [0x0000000000002001] [0x00000020] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bCachedCurrentlyEquipped : 1;                     		// 0x01F8 (0x0004) [0x0000000000002001] [0x00000040] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bCachedInAimMode : 1;                             		// 0x01F8 (0x0004) [0x0000000000002001] [0x00000080] ( CPF_Edit | CPF_Transient )
	class APBKWeaponGlobals*                           pGlobals;                                         		// 0x01FC (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	class USkeletalMesh*                               pWeaponMesh1P;                                    		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               pWeaponMesh3P;                                    		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPBKWeaponMod_AimMod*                        pAimMod;                                          		// 0x0208 (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	class UPBKWeaponMod_Barrel*                        pBarrelMod;                                       		// 0x020C (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	class UPBKWeaponMod_LaserPointer*                  pLaserMod;                                        		// 0x0210 (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	class UPBKWeaponMod_Magazine*                      pMagazineMod;                                     		// 0x0214 (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	class UPBKWeaponMod_Muzzle*                        pMuzzleMod;                                       		// 0x0218 (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	class UPBKWeaponMod_Stock*                         pStockMod;                                        		// 0x021C (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	class UPBKWeaponMod_Trigger*                       pTriggerMod;                                      		// 0x0220 (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	unsigned char                                      curTriggerMode;                                   		// 0x0224 (0x0001) [0x0000000000022000]              ( CPF_Transient | CPF_EditConst )
	unsigned char                                      iCurFlashCount;                                   		// 0x0225 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class APBKWeapon*                                  pCachedWeapon;                                    		// 0x0228 (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	class APBKWeaponSettings*                          pWeaponSettings;                                  		// 0x022C (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	class USkeletalMeshComponent*                      HandMeshComponent;                                		// 0x0230 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< struct FTWeaponMeshComp >                  rWeaponVisualsComp1P;                             		// 0x0234 (0x000C) [0x0000000004482001]              ( CPF_Edit | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FTWeaponMeshComp >                  rWeaponVisualsComp3P;                             		// 0x0240 (0x000C) [0x0000000004482001]              ( CPF_Edit | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class UPhysicsAsset*                               HandsPhysicsAsset;                                		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStaticMeshComponent*                        pWeaponBulletMeshComponent;                       		// 0x0250 (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UPointLightComponent*                        MuzzleFlashLight3P;                               		// 0x0254 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                iTracerBulletCount;                               		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iPreviousBulletsLeft;                             		// 0x025C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              fLastImpactSound;                                 		// 0x0260 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                iImpactSoundsPlayed;                              		// 0x0264 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                iFirePattern;                                     		// 0x0268 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                iFireEffectsIndex;                                		// 0x026C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              fMaxTraceRange;                                   		// 0x0270 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class USoundCue*                                   NoGoSoundCue;                                     		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBSkill*                                    pOwningSkill;                                     		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1455 ];

		return pClassPointer;
	};

	void SetOwningSkill ( class APBSkill* Skill );
	void eventSetPosition ( class APBPawn* holder, class APBKWeapon* pWeapon, struct FVector vLocation, struct FRotator rRotation );
	float GetGroundSpeedModifier ( unsigned long bIsAiming );
	bool ShouldSetFiringFlag ( );
	bool eventShouldHideMeshWhenAiming ( );
	class UMaterialInterface* GetAimSceneMaterial ( );
	class UAnimSet* GetCharacterAnimSet3P ( unsigned long bFemale );
	class UAnimSet* GetDefaultCharacterAnimSet3P ( unsigned long bFemale );
	void PlayIdleBreak ( int iIndexOfIdle );
	void PlayInteractionSuccessfulAnim ( );
	void PlayInteractionAnim ( float fDesiredDuration );
	void PlayActiveAnim ( );
	float GetWeaponAnimLength ( struct FName AnimName );
	void SetAnimToPerc ( struct FName AnimName, float fTimePerc, unsigned long bIncWeapons );
	float PlaySkMeshAnimation ( class USkeletalMeshComponent* SkelMesh, struct FName Sequence, float fDesiredDuration, unsigned long bLoop );
	float PlayAnimation ( struct FName Sequence, float fDesiredDuration, unsigned long bLoop, struct FName SeparateWeaponAnim, unsigned long bPlayOnAllWeapons );
	float PlayScaledAnimation ( struct FName Sequence, float fScaleAmount );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void SetAnimSpeedForHandsComp ( float fNewRate );
	void UpdateInteractionMaterial ( int iCurrentInteractionProgress );
	struct FVector GetEffectLocation ( unsigned long bFirstPerson, struct FRotator* outRot );
	void PlayDrySound ( );
	void PlayFailedReloadSound ( );
	void PlayPerfectReloadSound ( );
	void WeaponNexGenPlaySound ( class USoundCue* WpnSound1P, class USoundCue* WpnSound3P );
	void PlayFiringSound ( int iFireSound );
	void GetFiringSoundCue ( int FireMode, class USoundCue** Firing1P, class USoundCue** Firing3P );
	bool IsSilenced ( );
	bool ShouldMarkOnMinimapWhenFiring ( );
	float GetSecondaryZoomFOVFactor ( );
	bool SupportsSecondaryZoom ( );
	int GetStartingTotalAmmo ( );
	int GetMagazineAmmoSize ( );
	float GetMaxSpreadModifier ( );
	bool ShouldDrawLaserDot ( unsigned long bLocalController );
	void eventSetWeaponTranslation ( struct FVector vOffset );
	void NotifyBulletsLeft ( int iBulletsLeft );
	void CacheAnimNodes ( class USkeletalMeshComponent* CharacterMesh );
	void CleanupAnimNodeCache ( );
	void DetachWeapon ( );
	void SelectFirstPersonMesh ( class APBCharacter* pbChar );
	void ReattachParticleSystems ( unsigned long bFirstPerson );
	void CreateVisualComponents ( unsigned long bFirstPerson, class USkeletalMeshComponent* BaseForWeapon );
	void TurnBarrelSmokeOff ( );
	void SetBarrelSmoke ( unsigned long bEnable, float fTimeToKeepOn );
	void SetMuzzleFire ( unsigned long bFirstPerson, unsigned long bEnable );
	struct FName GetAimOffsetProfileName ( );
	bool IsPlayingAnimation ( );
	void eventSetHandsOffset ( struct FVector vOffset, struct FRotator rOffset );
	void SetWeaponMeshDPG ( unsigned char DPG );
	void SetNewWeaponMesh ( class USkeletalMesh* InMesh, unsigned long bFirstPerson );
	void SetDefaultParticleSystemComponentProperties ( float fMaxDrawDistance, class UParticleSystemComponent** PSystem );
	class UParticleSystemComponent* CreateMuzzleFlash ( unsigned long bFirstPerson, int iCompIndex, class USkeletalMeshComponent* ForWhichWeapon );
	void AttachMuzzleLight ( );
	void SetupMesh3P ( unsigned long bCurrentlyEquipping );
	class ULightEnvironmentComponent* GetLightEnvironment ( );
	void UnHolsterWeapon ( );
	void HolsterWeapon ( );
	bool ShouldHolster ( );
	void NotifyAnimEvent ( struct FName EventName );
	bool ShouldShowMesh ( );
	void SetWeaponVisibility ( unsigned long bFirstPerson, unsigned long bCurrentlyEquipped );
	void ChangeWeaponVisibility ( unsigned long bFirstPerson, unsigned long bCurrentlyEquipped );
	void NotifyWeaponFinishedEquipping ( );
	void NotifyWeaponFinishedPutdown ( );
	void SetEnableWeaponAnim1P ( unsigned long bEnableAnims );
	void EquipWeapon ( );
	void PutWeaponDown ( unsigned long bSkip1PAnim );
	void AttachWeaponToPawn ( class USkeletalMeshComponent* PawnMesh );
	class UPBKWeaponMod* GetWeaponModByType ( unsigned char ModType );
	class UParticleSystem* GetShellEjectPSTemplate ( unsigned long bFirstPerson );
	class UParticleSystem* GetMuzzleFlashPSTemplate ( unsigned long bFirstPerson );
	void TurnMuzzleFlashOff ( );
	void SpawnShellEject ( unsigned long bFirstPerson );
	void TurnMuzzleLightOff ( );
	void CauseMuzzleLight ( unsigned long bFirstPerson );
	void PlayBulletWhizSound ( struct FVector vStartPos, struct FVector vEndPos );
	int GetWeaponComponentIndex ( );
	bool GetFireEffectsInfo ( struct FTFireEffectsInfo* pInfo );
	void PlayFireEffects ( int FiringMode, unsigned long bFirstPerson );
	bool IsAimed ( );
	float GetAimPerc ( );
	bool ConsideredAimedIn ( );
	void IncLocalFlashCount ( );
	void RemoteClientTurnOffMuzzle ( );
	void StartLocalFlashCountTimer ( unsigned char FireModeNum );
	void HandleUpdateFlashCount ( );
	void StopFiringSequence ( );
	float GetFireRate ( unsigned char FireModeNum );
	void PlayNoGoSound ( );
	void StartFiringSound ( unsigned long bFirstPerson, unsigned long bStartingToFire, int FiringMode );
	void ApplyImpulseToKActorClientSideOnly ( struct FVector Start, struct FVector End );
	bool AllowImpactEffects ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal );
	void PlayImpactEffectStartEnd ( struct FVector vStart, struct FVector vEnd, struct FVector vWeaponStartTracePos, unsigned long bPawnHit );
	void PlayImpactEffects ( struct FVector HitLocation, unsigned long bPawnHit );
	void SpawnTracer ( struct FVector HitLocation );
	void UpdateTeamColor ( );
	class USkeletalMeshComponent* CreateWeaponComponent ( unsigned long bFirstPerson, int iComponentIndex, class USkeletalMeshComponent* AttachToWhichSkelComponent );
	class UParticleSystemComponent* CreateParticleSystemComponent ( unsigned long bFirstPerson, int iComponentIndex, class UParticleSystem* PSTemplate );
	class UPBKWeaponMod_Stock* GetStockMod ( );
	class UPBKWeaponMod_Muzzle* GetMuzzleMod ( );
	class UPBKWeaponMod_Magazine* GetMagazineMod ( );
	class UPBKWeaponMod_LaserPointer* GetLaserMod ( );
	class UPBKWeaponMod_Barrel* GetBarrelMod ( );
	void InstallAllMods ( TArray< class UPBKWeaponMod* > rMods );
	class APBNWeaponCustomParams* GetWeaponCustomizationParams ( );
	void UpdateSkillWeaponInfos ( class APBPlayerReplicationInfo* pPRI );
	void SetWeaponParams ( struct FSWeaponCode WeaponCode );
	void IncrementFireEffects ( );
	void eventDestroyed ( );
	void eventPreBeginPlay ( );
	void eventPostBeginPlay ( );
};

UClass* APBKWeaponInfo::pClassPointer = NULL;

// Class PlanBGame.PBKWeaponSettings
// 0x0010 (0x01E8 - 0x01D8)
class APBKWeaponSettings : public AActor
{
public:
	unsigned long                                      bAlwaysDoTracers : 1;                             		// 0x01D8 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bShowHitSpheres : 1;                              		// 0x01D8 (0x0004) [0x0000000000000021] [0x00000002] ( CPF_Edit | CPF_Net )
	unsigned long                                      bGivePresetsInstantly : 1;                        		// 0x01D8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRecoilActive : 1;                                		// 0x01D8 (0x0004) [0x0000000000000021] [0x00000008] ( CPF_Edit | CPF_Net )
	unsigned long                                      bAllowFiring : 1;                                 		// 0x01D8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSpreadActive : 1;                                		// 0x01D8 (0x0004) [0x0000000000000021] [0x00000020] ( CPF_Edit | CPF_Net )
	unsigned long                                      bDebugLaserPointer : 1;                           		// 0x01D8 (0x0004) [0x0000000000000021] [0x00000040] ( CPF_Edit | CPF_Net )
	unsigned long                                      bDebugFreezeLaserPointer : 1;                     		// 0x01D8 (0x0004) [0x0000000000000021] [0x00000080] ( CPF_Edit | CPF_Net )
	unsigned long                                      bFastSkillRecharge : 1;                           		// 0x01D8 (0x0004) [0x0000000000000021] [0x00000100] ( CPF_Edit | CPF_Net )
	unsigned long                                      bAlwaysShowCrosshair : 1;                         		// 0x01D8 (0x0004) [0x0000000000000021] [0x00000200] ( CPF_Edit | CPF_Net )
	unsigned long                                      bInfiniteStamina : 1;                             		// 0x01D8 (0x0004) [0x0000000000000021] [0x00000400] ( CPF_Edit | CPF_Net )
	unsigned long                                      bOldMeleeSystem : 1;                              		// 0x01D8 (0x0004) [0x0000000000000021] [0x00000800] ( CPF_Edit | CPF_Net )
	unsigned long                                      bSyncMoreSingleShot : 1;                          		// 0x01D8 (0x0004) [0x0000000000000021] [0x00001000] ( CPF_Edit | CPF_Net )
	unsigned long                                      bDisableMuzzleFlash : 1;                          		// 0x01D8 (0x0004) [0x0000000000000021] [0x00002000] ( CPF_Edit | CPF_Net )
	unsigned long                                      bCompensateLagForGrenadeThrow : 1;                		// 0x01D8 (0x0004) [0x0000000000000021] [0x00004000] ( CPF_Edit | CPF_Net )
	unsigned long                                      bRenderShotText : 1;                              		// 0x01D8 (0x0004) [0x0000000000000021] [0x00008000] ( CPF_Edit | CPF_Net )
	TArray< struct FWeaponSettingInfo >                rSettings;                                        		// 0x01DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1456 ];

		return pClassPointer;
	};

	void ToggleRenderShotText ( );
	void ToggleGrenadeLagCompensation ( );
	void ToggleDisableMuzzleFlash ( );
	void ToggleSyncMoreSingleShot ( );
	void ToggleMeleeSystem ( );
	void ToggleInfiniteStamina ( );
	void ToggleAlwaysShowCrosshair ( );
	void ToggleFastSkillRecharge ( );
	void ToggleFreezeLaserPointer ( );
	void ToggleLaserPointerDebug ( );
	void ToggleBulletFire ( );
	void ToggleSpread ( );
	void ToggleRecoil ( );
	void GivePresetsInstantly ( );
	void ToggleAlwaysDoTracers ( );
	void ToggleShowHitSpheres ( );
	void SendClientsMessage ( struct FString Message );
	void ListAllWeaponSettings ( );
	void DisplayDebugLine ( struct FString Text );
	void ToggleWeaponSetting ( struct FName Setting );
	void CallToggleFunction ( struct FName DebugFunctionName );
};

UClass* APBKWeaponSettings::pClassPointer = NULL;

// Class PlanBGame.PBMapList
// 0x0050 (0x008C - 0x003C)
class UPBMapList : public UObject
{
public:
	TArray< struct FGameSetupOption >                  rAllSetupOptions;                                 		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FMapElementInfo >                   rMapList;                                         		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGameModeInfo >                     rGameModeList;                                    		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UPBMapList*                                  pMapListArchetype;                                		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      DefaultGameMode;                                  		// 0x0064 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DefaultMapName;                                   		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              fResultScreenTimeToShow;                          		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fScoreboardScreenTimeToShow;                      		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fProgressionScreenTimeToShow;                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FScriptDelegate                             __MapSort__Delegate;                              		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1457 ];

		return pClassPointer;
	};

	class UClass* GetGameRulesClass ( unsigned char GameType );
	struct FString GetGameModePrefix ( unsigned char GameType );
	unsigned char GetGameModeEnumFromLocalizedGameType ( struct FString LocalizedGameType );
	struct FString GetLocalizedGameModeNameFromEnum ( unsigned char GameType );
	unsigned char GetGameModeEnumFromIndex ( int iLookingIndex, unsigned long bListForLobby );
	int GetIndexFromGameModeEnum ( unsigned char GameType, unsigned long bListForLobby );
	struct FString GetMapNameFromIndex ( unsigned char GameType, int iMapIndex );
	int GetIndexFromMapName ( unsigned char GameType, struct FString MapFileName );
	void GetGameModes ( unsigned long bListForLobby, TArray< struct FGameModeInfo >* rGameModes );
	struct FString eventGetLocalizedMapNameFromMapFilename ( struct FString MapFileName );
	struct FString GetMapFilenameFromLocalizedString ( struct FString LocalizedMapName );
	void GetAllMaps ( TArray< struct FMapElementInfo >* rMaps );
	int MapSort ( struct FMapElementInfo A, struct FMapElementInfo B );
	void GetAllMapsFromGameType ( unsigned char GameType, TArray< struct FMapElementInfo >* rMaps );
	bool IsMapInList ( struct FString MapFileName );
	struct FString GetNextMapInCycleFromCurrentMap ( unsigned char gameMode, struct FString currentMap );
	bool GetOptionByEnum ( unsigned char OptionType, struct FGameSetupOption* Option );
	TArray< struct FGameSetupOption > GetOptionsByGameType ( unsigned char GameType );
	class UPBMapList* GetInstance ( );
};

UClass* UPBMapList::pClassPointer = NULL;

// Class PlanBGame.PBMoveMapAndContentCommandlet
// 0x0000 (0x007C - 0x007C)
class UPBMoveMapAndContentCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1458 ];

		return pClassPointer;
	};

	int eventMain ( struct FString Params );
};

UClass* UPBMoveMapAndContentCommandlet::pClassPointer = NULL;

// Class PlanBGame.PBNotificationSystem
// 0x0344 (0x0380 - 0x003C)
class UPBNotificationSystem : public UObject
{
public:
	float                                              mNotificationPopupDisplayTime;                    		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              mNotificationPopupFadeTime;                       		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              mPopupNotificationTimer;                          		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      mPopupNotificationVisible : 1;                    		// 0x0048 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      mDetailNotificationVisible : 1;                   		// 0x0048 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      mDetailNotificationOpening : 1;                   		// 0x0048 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      mProfileSelected : 1;                             		// 0x0048 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      mProfileCreation : 1;                             		// 0x0048 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      mInitialized2 : 1;                                		// 0x0048 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bSwallowNotification : 1;                         		// 0x0048 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	int                                                mDetailedNotificationsPending;                    		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FSubscriptionData >                 PBN_LastSubscriptionDuration;                     		// 0x0050 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                PBN_SubscriptionAboutToExpireTime;                		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PBN_CurrentAccountLastSubscriptionDuration;       		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FBuddyNotification >                PBN_BuddyNotificationList;                        		// 0x0064 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NS_NotificationExpired;                           		// 0x0070 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_NotificationExpired_Title;                     		// 0x007C (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_PendingBuddyRequests;                          		// 0x0088 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_PendingBuddyRequests_title;                    		// 0x0094 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_PendingBuddyRequests_popup;                    		// 0x00A0 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_PendingBuddyRequests_popupTitle;               		// 0x00AC (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_IngameServiceExpired;                          		// 0x00B8 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_IngameServiceExpired_Title;                    		// 0x00C4 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_ServiceWillExpire;                             		// 0x00D0 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_ServiceWillExpire_Title;                       		// 0x00DC (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_ItemAdded;                                     		// 0x00E8 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_ItemAdded_Title;                               		// 0x00F4 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_CreditAdded;                                   		// 0x0100 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_CreditAdded_Title;                             		// 0x010C (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_AchievementComplete_title;                     		// 0x0118 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_AchievementComplete;                           		// 0x0124 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_AchievementAccomplished_Title;                 		// 0x0130 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_AchievementAccomplished;                       		// 0x013C (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_BannedByGM_Title;                              		// 0x0148 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_BannedByGM;                                    		// 0x0154 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_Kicked_Title;                                  		// 0x0160 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_KickedByGM;                                    		// 0x016C (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_Muted_Title;                                   		// 0x0178 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_MutedByGM;                                     		// 0x0184 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_CSIntervention_Title;                          		// 0x0190 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_Kicked;                                        		// 0x019C (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_Muted;                                         		// 0x01A8 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_ItemAddedDtl;                                  		// 0x01B4 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_ItemRemoved_Title;                             		// 0x01C0 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_ItemRemoved;                                   		// 0x01CC (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_ItemUnusable_Title;                            		// 0x01D8 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_ItemUnusable;                                  		// 0x01E4 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_PromotionCode_Title;                           		// 0x01F0 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_PromotionCode;                                 		// 0x01FC (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_ServiceExpired_Title;                          		// 0x0208 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_ServiceExpired;                                		// 0x0214 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_Rankup_Title;                                  		// 0x0220 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_Rankup;                                        		// 0x022C (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_ServerShutdown_Title;                          		// 0x0238 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_ServerAnnouncement_Title;                      		// 0x0244 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_MaintenanceAnnouncement_Title;                 		// 0x0250 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_MaintenanceAnnouncement;                       		// 0x025C (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_BuddyAdded_title;                              		// 0x0268 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NS_BuddyAdded_Detail;                             		// 0x0274 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PremiumSubscriptionTitle;                         		// 0x0280 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PremiumExpired;                                   		// 0x028C (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PremiumDuration;                                  		// 0x0298 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PremiumBought;                                    		// 0x02A4 (0x000C) [0x000000000040A002]              ( CPF_Const | CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           testGMEvents;                                     		// 0x02B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPBShopEvent >                      testPBManagerEvents_eventCodes;                   		// 0x02BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPBShopEvent >                      testPBManagerEvents_criticalEvents;               		// 0x02C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class APlayerController*                           mPC;                                              		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mLocalPlayerOwnerIndex;                           		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mPendingEvents;                                   		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mPendingEventsGM;                                 		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mPendingEventsPBM;                                		// 0x02E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mPendingEventsGS;                                 		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      mRequestPBMEvents;                                		// 0x02EC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      mPendingPBMEvents;                                		// 0x02F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           rNotificationPictures;                            		// 0x0304 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FdateStruct                                 NotificationSystemStartDate;                      		// 0x0310 (0x0018) [0x0000000000002000]              ( CPF_Transient )
	int                                                NotificationSystemElapsedSeconds;                 		// 0x0328 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              mNotificationElapsedTimeFreq;                     		// 0x032C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mSheduledNotificationAheadTime;                   		// 0x0330 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FNotification >                     popupNotificationList;                            		// 0x0334 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FsheduledNotification >             sheduledNotificationList;                         		// 0x0340 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FsheduledNotification >             sheduledNotificationListAllChar;                  		// 0x034C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FNotification                               currPopupNotification;                            		// 0x0358 (0x0024) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPBNotificationSystem*                       pPBNotInstance;                                   		// 0x037C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1459 ];

		return pClassPointer;
	};

	class UPBNotificationSystem* GetInstance ( );
	void abort ( );
	void closeAll ( );
	void getNextDetailNotification ( );
	void addPopupNotification ( struct FString Title, struct FString Text, unsigned char Type );
	void addPopupChestTimedOutNotification ( );
	void addPopupPickedChestNotification ( );
	void addPopupChestNotification ( );
	void updateNotificationClock ( );
	void Update ( );
	void RecoverNotifications ( );
	int GetNotificationSystemElapsedSeconds ( );
	void calcElapsedSeconds ( );
	int getDaysFromStartYear ( int Year );
	int getDaysTillMonth ( int Month, int Year );
	void Release ( );
	void Initialize ( class APlayerController* PC );
	void UpdateNotificationCount ( );
	void ProfileCharacterFetched ( int requestId, int ErrorCode, struct FPBCharacterProfile CharacterProfile );
	void InitializeProfileCreated ( int requestId, int ErrorCode, struct FGuid ProfileId );
	void InitializeProfileDeselected ( int requestId, int ErrorCode, struct FGuid ProfileId );
	void SubscriptionFetched ( struct FTPBItemShopResult_OnGetSubscriptionModeDone* Result );
	void SetLastSubscriptionDuration ( struct FGuid subscriptionId, int Duration );
	void GetLastSubscriptionDuration ( struct FGuid subscriptionId );
	void resetSubscriptionCheckTimer ( int Duration );
	void SubscriptionCheck ( );
	void InitializeProfileSelected ( int requestId, int ErrorCode, struct FGuid ProfileId, struct FString gameSpyToken, struct FString gameSpyChallenge );
	void AdGSDetailedNotification ( struct FString BuddyDetails );
	void InitializeLoged ( struct FTPBItemShopResult_OnLoginDone* Result );
	void getGSEvent ( );
	void getPBMEvent ( );
	struct FString getGMEvent ( );
	void deleteAllPBMEvents ( );
	void deleteAllGMEvents ( );
	void addGamespyBuddyRequestEvent ( );
	void test_AddPBManagerEventsPopup ( struct FString E );
	void test_AddPBManagerEvents ( struct FString E );
	void test_AddGMEvents ( struct FString E );
	void handleGamespyEvents ( int pendingEventsNumber );
	void handlePBManagerEvents ( int requestId, int ErrorCode, TArray< int > eventCodes, TArray< struct FPBShopEvent > criticalEvents );
	void handlePBManagerEventRequest ( int requestId, int ErrorCode, struct FPBShopEvent eventDetails );
	void transformPBMEventToIngame ( struct FPBShopEvent* eventDetails );
	unsigned char getPBManagerEventType ( int PBMType );
	void handleGMEvents ( int pendingEventsNumber );
	void updatePendingEventCount ( );
};

UClass* UPBNotificationSystem::pClassPointer = NULL;

// Class PlanBGame.PBNWeapon
// 0x0004 (0x02CC - 0x02C8)
class APBNWeapon : public AWeapon
{
public:
	int                                                m_RandSeed;                                       		// 0x02C8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1460 ];

		return pClassPointer;
	};

	void SetWeaponModStaticMeshProperties ( class UStaticMeshComponent* StaticMeshComponent, class UStaticMesh* StaticMesh );
	class AActor* SimpleBulletTrace ( class AActor* IgnoreActor, struct FVector Start, struct FVector End, struct FVector* HitLocation, struct FVector* HitNormal );
	void BulletBallisticTrace ( struct FVector Start, struct FVector End, struct FVector ExtendVector, unsigned long bIgnoreClientOnlyActors, TArray< struct FImpactInfo >* ImpactList );
};

UClass* APBNWeapon::pClassPointer = NULL;

// Class PlanBGame.PBKWeapon
// 0x02EC (0x05B8 - 0x02CC)
class APBKWeapon : public APBNWeapon
{
public:
	class AActor*                                      DDDProjectile;                                    		// 0x02CC (0x0004) [0x0000000000000000]              
	struct FVector                                     DDDProjectileL;                                   		// 0x02D0 (0x000C) [0x0000000000000000]              
	TArray< struct FDebugHitInfo >                     rDebugHitInfo;                                    		// 0x02DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FTWeaponInitParams                          m_InitParams;                                     		// 0x02E8 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FDebugWeaponInfo >                  rDebugFunctions;                                  		// 0x02F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FWRLMiniGameResult                          MiniGameData;                                     		// 0x0304 (0x0008) [0x0000000000000000]              
	unsigned char                                      MiniGameLastResult;                               		// 0x030C (0x0001) [0x0000000000000000]              
	unsigned char                                      eCurrentAimInterpMode;                            		// 0x030D (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CurrentCharStance;                                		// 0x030E (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentTriggerMode;                               		// 0x030F (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPingStartTime;                                   		// 0x0310 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowFullClip : 1;                                		// 0x0314 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bRenderShotInfo : 1;                              		// 0x0314 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bTickEnabled : 1;                                 		// 0x0314 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bShowOnlyCenterDot : 1;                           		// 0x0314 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bIsLocalPlayer : 1;                               		// 0x0314 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bReloadRequested : 1;                             		// 0x0314 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bInterruptReloadAllowed : 1;                      		// 0x0314 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bInterruptReload : 1;                             		// 0x0314 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bScheduleBurstRetrigger : 1;                      		// 0x0314 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bCurrentlyFalling : 1;                            		// 0x0314 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bNewAimingAimIn : 1;                              		// 0x0314 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bInSecondaryZoom : 1;                             		// 0x0314 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bRequestedAimIn : 1;                              		// 0x0314 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bReadyToThrow : 1;                                		// 0x0314 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bThrowIncreasing : 1;                             		// 0x0314 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bFlashActive : 1;                                 		// 0x0314 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bGoSprint : 1;                                    		// 0x0314 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bLaserDotVisible : 1;                             		// 0x0314 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bPreventSelect : 1;                               		// 0x0314 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bHasBeenReplaced : 1;                             		// 0x0314 (0x0004) [0x0000000000000020] [0x00080000] ( CPF_Net )
	unsigned long                                      bReloadInPerfectPos : 1;                          		// 0x0314 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bSkipEquip1PAnim : 1;                             		// 0x0314 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bSkipPutdown1PAnim : 1;                           		// 0x0314 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      bWeaponBroken : 1;                                		// 0x0314 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bSplashJump : 1;                                  		// 0x0314 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bSplashDamage : 1;                                		// 0x0314 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bRecommendSplashDamage : 1;                       		// 0x0314 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bSniping : 1;                                     		// 0x0314 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bShouldReplicateBulletCounts : 1;                 		// 0x0314 (0x0004) [0x0000000000002001] [0x10000000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bPauseBobbing : 1;                                		// 0x0314 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	class APBKWeaponGlobals*                           pGlobals;                                         		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBKWeaponSettings*                          pWeaponSettings;                                  		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FSWeaponCode                                CompleteWeaponCode;                               		// 0x0320 (0x000C) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	struct FGuid                                       WeaponSerialNumber;                               		// 0x032C (0x0010) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              fSpreadToDistance;                                		// 0x033C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    rEyeRot;                                          		// 0x0340 (0x000C) [0x0000000000000000]              
	float                                              fEyeRotFactor;                                    		// 0x034C (0x0004) [0x0000000000000000]              
	float                                              fBlendFactor;                                     		// 0x0350 (0x0004) [0x0000000000000000]              
	float                                              fLastShotHitEnemyTime;                            		// 0x0354 (0x0004) [0x0000000000000000]              
	float                                              fCurrentSpreadRadius;                             		// 0x0358 (0x0004) [0x0000000000000000]              
	float                                              fCurMinimumSpreadRadius;                          		// 0x035C (0x0004) [0x0000000000000000]              
	float                                              fTargetMinimumSpreadRadius;                       		// 0x0360 (0x0004) [0x0000000000000000]              
	float                                              fCurMinimumChangeSpeed;                           		// 0x0364 (0x0004) [0x0000000000000000]              
	float                                              fLastActivityTime;                                		// 0x0368 (0x0004) [0x0000000000000000]              
	struct FVector                                     vWeaponOffset;                                    		// 0x036C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCurPushBack;                                     		// 0x0378 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fCurrentFiringOffsetValue;                        		// 0x037C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     vCurrentWeaponFiringOffset;                       		// 0x0380 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              fLastSpreadFireTime;                              		// 0x038C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBobTime;                                         		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fViewBobPitch;                                    		// 0x0394 (0x0004) [0x0000000000000000]              
	float                                              fViewBobYaw;                                      		// 0x0398 (0x0004) [0x0000000000000000]              
	struct FRotator                                    rCurrentViewOffset;                               		// 0x039C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLastBurstFiringTime;                             		// 0x03A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fThrowStrength;                                   		// 0x03AC (0x0004) [0x0000000000000000]              
	float                                              fCurrentThrowPause;                               		// 0x03B0 (0x0004) [0x0000000000000000]              
	float                                              fLastRollTime;                                    		// 0x03B4 (0x0004) [0x0000000000000000]              
	struct FRotator                                    BobTurningCurrentRot;                             		// 0x03B8 (0x000C) [0x0000000000000000]              
	float                                              fTurnBobCurPitch;                                 		// 0x03C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTurnBobCurYaw;                                   		// 0x03C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fRecoilBulletCount;                               		// 0x03CC (0x0004) [0x0000000000000000]              
	float                                              fLastRecoilBulletCount;                           		// 0x03D0 (0x0004) [0x0000000000000000]              
	struct FVector                                     vLastRecoil;                                      		// 0x03D4 (0x000C) [0x0000000000000000]              
	float                                              fRequiredBullets;                                 		// 0x03E0 (0x0004) [0x0000000000000000]              
	struct FVector                                     vCurrentRecoil;                                   		// 0x03E4 (0x000C) [0x0000000000000000]              
	struct FVector                                     vRemainingRecoil;                                 		// 0x03F0 (0x000C) [0x0000000000000000]              
	float                                              fFlashStartTime;                                  		// 0x03FC (0x0004) [0x0000000000000000]              
	class AActor*                                      CookedProjectile;                                 		// 0x0400 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              fSprintPerc;                                      		// 0x0404 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     vLaserLastPosition;                               		// 0x0408 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              fLaserPointDistance;                              		// 0x0414 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    recoilForBot;                                     		// 0x0418 (0x000C) [0x0000000000000000]              
	class APBKWeaponInfo*                              WeaponInfo;                                       		// 0x0424 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class APBKWeaponParams*                            pWeaponParams;                                    		// 0x0428 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBKWeaponMod_LaserPointer*                  pLaserMod;                                        		// 0x042C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBKWeaponMod_Stock*                         pStockMod;                                        		// 0x0430 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBKWeaponMod_Barrel*                        pBarrelMod;                                       		// 0x0434 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBKWeaponMod_Magazine*                      pMagazineMod;                                     		// 0x0438 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBKWeaponMod_Trigger*                       pTriggerMod;                                      		// 0x043C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBKWeaponMod_Muzzle*                        pMuzzleMod;                                       		// 0x0440 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBKWeaponMod_AimMod*                        pAimMod;                                          		// 0x0444 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FTWeaponCondition                           WeaponCondition;                                  		// 0x0448 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	int                                                curSemiModeShotCount;                             		// 0x046C (0x0004) [0x0000000000000000]              
	int                                                PBfireMode;                                       		// 0x0470 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             PBFireModeNames;                                  		// 0x0474 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      ShotCost;                                         		// 0x0480 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    MinReloadPct;                                     		// 0x048C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UDOFEffect*                                  pBackgroundDOF;                                   		// 0x0498 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fMaxTraceRange;                                   		// 0x049C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iWeaponStatsIdx;                                  		// 0x04A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FRangeDmgInfo >                     rCachedRangeDmg;                                  		// 0x04A4 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct FGeneralCache                               CachedGeneral;                                    		// 0x04B0 (0x0084) [0x0000000000000001]              ( CPF_Edit )
	struct FSpreadCache                                CachedSpread;                                     		// 0x0534 (0x005C) [0x0000000000000001]              ( CPF_Edit )
	struct FRecoilCache                                CachedRecoil;                                     		// 0x0590 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentRating;                                    		// 0x059C (0x0004) [0x0000000000000000]              
	int                                                ClientCurrentAmmo;                                		// 0x05A0 (0x0004) [0x0000000000000000]              
	int                                                MagazineAmmoSize;                                 		// 0x05A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentAmmo;                                      		// 0x05A8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                TotalAmmoLeft;                                    		// 0x05AC (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                iTimesFiredBeforeSmoke;                           		// 0x05B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                previousWeaponOwnerId;                            		// 0x05B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1461 ];

		return pClassPointer;
	};

	struct FRotator GetClampedRotation ( struct FRotator DeltaRot );
	void NotifyTauntEnded ( );
	void NotifyTauntStarted ( );
	void eventReplicatedEvent ( struct FName VarName );
	void SetWeaponParamsAndCode ( struct FSWeaponCode WeaponCode );
	struct FRotator GetProjectileSpawnRotation ( );
	void DropCookedProjectile ( );
	void ClearPendingFire ( int FireMode );
	void SetPendingFire ( int FireMode );
	bool PendingFire ( int FireMode );
	void eventDestroyed ( );
	void ThrottleLook ( float* aTurn, float* aLookUp );
	class AActor* ProjectileFire ( );
	void rainRB ( float rbc, float rb );
	void rainRBStop2 ( );
	void rainRBStop ( );
	void rainGrenadesC ( float F );
	void rainGrenades ( float F );
	void rainGrenadesClient ( float F );
	void dropAc4rb ( );
	void dropAc4 ( );
	void rainGrenadesT ( float F );
	void persistentGrenade ( );
	void persistentGrenadeTick ( );
	class AActor* ProjectileHoldFire ( );
	float GetGrenadeThrowStregth ( unsigned char FireModeNum );
	void InitProjectile ( class AActor* SpawnedActor, struct FVector AimDir );
	class APBProjectile* GetProjectileArchetype ( );
	bool ShowInMenu ( );
	struct FVector GetWeaponStartTraceLocation ( unsigned char Mode );
	void Activate ( );
	bool SwitchWeaponIfEmpty ( );
	bool ShouldPreventWeaponChange ( );
	bool IsSelectable ( );
	void GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate );
	float PlayPBWeaponAnimation ( struct FName Sequence, float fDesiredDuration, unsigned long bLoop, struct FName SeparateWeaponAnim );
	void ServerNotifyCancelingSprintDueToJump ( );
	void SyncSprintState ( unsigned long bGoToSprint );
	void SetGoSprint ( unsigned long bNewGoSprint );
	void ServerSetGoSprint ( unsigned long bNewGoSprint );
	void EndSprint ( );
	void StartSprint ( );
	bool ExpendStamina ( );
	void ClearPendingSprint ( );
	bool PendingSprint ( );
	bool CanSprint ( );
	bool CanStartSprint ( );
	float GetNormalReloadTime ( );
	bool IsLocalPlayer ( );
	void NotifyOwnerFalling ( );
	void NotifyOwnerLanded ( );
	void NotifyPawnCrouched ( unsigned long bCrouched );
	void NotifyPendingAimChanged ( );
	void ClearPendingAim ( );
	bool PendingAim ( );
	void SetPendingAim ( );
	bool IsToggleAimMode ( );
	void TrackWeaponCondition ( unsigned char wcEvent );
	bool eventIsFiring ( );
	bool IsJumping ( );
	void ServerGotoFire ( );
	float GetWeaponRotationFactor ( );
	float GetZoomedFOV ( );
	float AdjustFOVAngle ( float FOVAngle );
	float AdjustFOVWeaponAngle ( float FOVAngle );
	void ToggleSecondaryZoom ( );
	void SetSecondaryZoom ( unsigned long bNewZoom );
	void GetZoomNames ( TArray< struct FString >* whichZoomNames );
	bool HasSecondaryZoom ( );
	bool GetSecondaryZoom ( );
	bool IsSilenced ( );
	float GetFireInterval ( unsigned char FireModeNum );
	struct FRotator GetCameraRotation ( );
	void SetTurningDelta ( struct FRotator rDeltaRot, float fDeltaTime );
	struct FRotator GetAdjustedAim ( struct FVector StartFireLoc );
	struct FRotator GetWeaponAim ( unsigned long bApplyRecoil );
	struct FRotator GetRecoilRot ( );
	void ApplyRecoil ( );
	float GetWrapAroundBulletCount ( float fBulletCount );
	void TickRecoil ( float DeltaTime );
	void TransferRecoil ( float DeltaTime );
	struct FVector GetAddRecoil ( );
	float GetRecoilStrength ( );
	float GetSpreadShakeRadius ( );
	void IncreaseSpreadRadius ( float fAmount );
	void TickSpread ( float DeltaTime );
	void TickAimingPercentage ( float fDeltaTime );
	void eventTickBobbing ( float DeltaTime );
	void eventTickWeaponMovement ( float DeltaTime );
	void CalcWeaponAimFiringPushback ( float fDeltaTime );
	void GetNormalBobbingValues ( float fTimeScale, float* X, float* Y );
	bool UseFiringDecay ( );
	bool eventShouldPlayIdle ( );
	void PlayIdleBreak ( );
	void eventTickEnd ( );
	struct FVector GetTargetWeaponPosition ( );
	void DropFrom ( struct FVector StartLocation, struct FVector StartVelocity );
	void ClientWeaponThrown ( );
	void ItemRemovedFromInvManager ( );
	void EndClimbingLadder ( );
	void ClimbingLadder ( );
	int GetAmmoCountForBulletMesh ( );
	void ServerNotifyInterruptReload ( );
	void ServerNotifyFinishedReload ( );
	int GetAmountOfNeededAmmo ( int iSpecificAmount );
	void ServerSetReloadStatus ( unsigned char Result );
	void UpdateMinigameReloadStatus ( unsigned char Result );
	void DrawAllSockets ( unsigned long bFirstPerson, struct FName SocketName );
	void WeaponIsDown ( );
	void TimeWeaponPutDown ( );
	struct FVector GetEffectLocation ( );
	struct FVector GetPhysicalFireStartLoc ( struct FVector AimDir, unsigned char FireMode );
	bool TryPutDown ( );
	bool IsSingleBulletReloadWeapon ( );
	void WeaponEquipped ( );
	void SetEnableTick ( unsigned long bNewTickEnabled );
	float GetThrowMinigameValue ( );
	bool UseThrowMinigame ( );
	void SetReadyToThrow ( );
	void TurnOff ( );
	float GetDamageByDistance ( float fBulletDistance, int iCurrentFireMode );
	void ProcessClientFire ( );
	void SendToFiringState ( unsigned char FireModeNum );
	void SetFiringFlagOff ( );
	void SetFiringFlagOffInstant ( );
	void SetFiringFlagOn ( );
	void IncrementBulletsFired ( );
	void ClientWeaponEmpty ( );
	void WeaponEmpty ( );
	void StopFire ( unsigned char FireModeNum );
	void ServerSyncBobViewOffset ( unsigned char pitchHigh, unsigned char pitchLow, unsigned char yawHigh, unsigned char yawLow );
	void SyncBobViewOffset ( );
	struct FRotator GetCurrentViewOffset ( );
	void ServerSetNewAiming ( unsigned long bNewAimIn );
	void eventSetNewAiming ( unsigned long bNewAimIn );
	void eventPlayAimingSound ( unsigned long bAimIn );
	void eventNotifyAimingComplete ( unsigned long bFinishedAimingIn );
	float GetScopeEffectAlpha ( );
	void StartFire ( unsigned char FireModeNum );
	bool IsCategory ( unsigned char WeaponCat );
	unsigned char GetWeaponCategory ( );
	bool ShouldAutoReload ( );
	void ServerSetupFire ( unsigned char FireModeNum, unsigned char compressedRecoilBulletCount );
	void SyncViewRecoilRot ( unsigned char FireModeNum, unsigned char compressedRecoilBulletCount, int curCompressView, int curCompressedRecoil );
	void UncompressFromInt ( int inputValue, float fMaxA, float fMaxB, float* outA, float* outB );
	int CompressToInt ( float fInputA, float fInputB, float fMaxA, float fMaxB );
	float UncompressFromByte ( unsigned char byteInput, float FMax, unsigned long bCanBeNegative );
	unsigned char CompressToByte ( float fInput, float FMax, unsigned long bCanBeNegative );
	int GetCompressedViewRot ( );
	void SetupFire ( unsigned char FireModeNum );
	bool HasAnyAmmo ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	void ServerReloadWeapon ( );
	void ReloadWeapon ( );
	float GetReloadPreventionTime ( );
	bool CanReload ( );
	void ConsumeAmmo ( unsigned char FireModeNum );
	bool ShouldDisplayTotalBulletCount ( );
	bool IsInfiniteAmmoWeapon ( );
	bool ReadyToFire ( unsigned long bFinished );
	unsigned char BestMode ( );
	bool ShouldFireWithoutTarget ( );
	bool SplashJump ( );
	bool FireOnRelease ( );
	float BotDesireability ( class AActor* PickupHolder, class APawn* P, class AController* C );
	bool CanAttack ( class AActor* Other );
	float GetWeaponRating ( );
	void UpdateWeapon ( );
	void PawnLanded ( class APBPawn* holder );
	struct FRotator eventCalcEyeRotationOffset ( float fDeltaTime );
	void ApplyBobbing ( float fAimSmooth, struct FVector* WeaponLoc, struct FRotator* WeaponRot );
	void ApplyViewBob ( );
	void NativeWeaponCalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot );
	void ForceUpdateWeaponPosition ( );
	void ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate );
	void DetachWeapon ( );
	void AttachWeaponToPawn ( class USkeletalMeshComponent* MeshCpnt );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void ReplenishTotalAmmo ( );
	int GetTotalAmmoCount ( );
	int GetAmmoCount ( );
	void DrawHitIndicator ( class UCanvas* Canvas, int CenterX, int CenterY );
	void DrawCrosshair ( class AHUD* HUD );
	struct FVector GetDamageDealingLocation ( );
	float GetCrosshairAlpha ( );
	void DrawCrosshairLine ( class UCanvas* Canvas, int startX, int startY, int yawRot );
	void ResetDOF ( );
	void PrepareDOFPostProcess ( );
	void ActiveRenderOverlays ( class AHUD* H );
	bool ShouldDrawLaserDot ( );
	bool ShouldDrawCrosshair ( );
	bool ShouldUseWeaponAimForLaser ( );
	void RenderWeaponInfoHUD ( class UCanvas* Canvas );
	float DrawOutlinedText ( class UCanvas* Canvas, int X, int Y, struct FString Text, int iAlign );
	float DrawCenteredOutlinedText ( class UCanvas* Canvas, int Y, struct FString Text );
	void SetRemoteWeaponFiring ( unsigned long bIsFiring );
	void IncWeaponFiringSequence ( );
	void StartBarrelSmoke ( );
	void HandleWeaponFinishedFiring ( );
	void HandleWeaponFired ( );
	void NotifyAnimEnd1P ( struct FName AnimSeqName, float PlayedTime );
	void PlayFireAnim1P ( );
	void FireAmmunition ( );
	bool PBProcessInstantHit ( struct FImpactInfo impact, unsigned char CharacterHitZone );
	void CustomFire ( );
	void NotifyRecoilInfo ( struct FVector pos, int frameCount, int BulletCount );
	void ReliableClientDrawSphere ( struct FVector pos, int Size, struct FColor SphereColor );
	void ReliableClientDrawLine ( struct FVector Start, struct FVector End, struct FColor LineColor );
	void DrawRangeDmgLine ( struct FVector Start, struct FVector End );
	void ProcessMissedShot ( );
	void InstantFire ( );
	void DebugDrawHitInfos ( class UCanvas* C );
	void MeleeHit ( );
	void ServerSendCharMeleeHit ( class AActor* HitActor, struct FName BoneName, struct FVector VDir );
	void ServerSendMeleeHit ( class AActor* HitActor, struct FVector vHitLoc );
	void ClientSideMeleeHit ( );
	struct FVector GetMeleeRay ( struct FVector StartTrace, float fRayAngle, int iStep, int iMaxStepCount );
	float GetMeleeRayAngle ( int* MaxStepCount );
	unsigned char GetTeamNum ( );
	class UPBPhysicalMaterialProperty* RetrievePhysicalMaterialFromImpact ( struct FImpactInfo* pImpactData );
	float GetGroundSpeedFactor ( );
	void SetFlashLocation ( struct FVector HitLocation );
	void ClearFlashCount ( );
	void IncrementFlashCount ( );
	class AActor* GetAimedActor ( struct FVector StartTrace, float fTraceDistance, float* fDistance );
	class AActor* GetAnyActorOnCrosshair ( );
	struct FString GetWeaponMenuName ( );
	struct FVector GetSpreadEndTrace ( struct FVector StartTrace, unsigned long bMaxRandomRadius, float fRandomAngleMin, float fRandomAngleMax, float fRandomRadiusMin, float fRandomRadiusMax );
	void ResetRecoil ( );
	void ResetSpread ( );
	void DumpImpactInfo ( struct FImpactInfo impact );
	void DebugWeaponSaveWeaponParams ( );
	void DebugWeaponShowWeaponGlobals ( );
	void DebugWeaponShowProjectileParams ( );
	void DebugWeaponShowWeaponParams ( );
	void DebugWeaponShowWeaponInfo ( );
	void ClientSpawnDamageIndicator ( struct FVector Position, int Damage );
	int GetBaseWeaponCode ( );
	void UpdateWeaponCondition ( );
	bool InitializeWeaponFromParams ( class APBKWeaponParams* pNewParams, struct FSWeaponCode WeaponCode, struct FGuid WeaponSerial );
	void RetryInitialization ( );
	bool CanWeaponBeInitialized ( );
	void StartProcessingWeaponData ( );
	bool ApplyWeaponParams ( );
	unsigned char GetAmmoState ( );
	float GetSpreadRadius ( );
	float GetMaxSpreadRadius ( );
	void DetermineCharStance ( );
	void RecalculateSpread ( );
	bool IsBurstMode ( );
	bool IsFullAuto ( );
	int GetSemiAutoBulletCount ( );
	bool GiveHeatEventForKiller ( class APBPlayerController* Killer, unsigned char* whichBonus );
	void CacheRangeDmg ( );
	void CacheValuesFromWeaponParams ( );
	void DisplayDebugLine ( struct FString Text );
	void DisplayDebugInfo ( struct FString Text, struct FString Value );
	void CallDebugFunction ( struct FName DebugFunctionName );
	void DebugWeapon ( struct FName DebugValue );
	void DebugWeaponMagazineMod ( );
	void DebugWeaponStockMod ( );
	void DebugWeaponTriggerMod ( );
	void DebugWeaponMuzzleMod ( );
	void DebugWeaponBarrelMod ( );
	void DebugWeaponLaserMod ( );
	void DebugWeaponAimMod ( );
	void DebugWeaponLethalWeapons ( );
	void DebugWeaponDisplayWeaponHUD ( );
	void DebugWeaponDoDistanceTrace ( );
	void DebugWeaponGimeMagazines ( );
	void DebugWeaponToggleUltraFast ( );
	void DebugWeaponToggleUltraSlow ( );
	void DebugWeaponMakeFullAuto ( );
	void DebugWeaponGimeAmmo ( );
	void DebugWeaponMaxRadiusSpread ( );
	void DebugWeaponRenderBulletTrace ( );
	void ServerSendPongBack ( );
	void ClientReceivePong ( );
	void ServerStartPing ( );
	void DebugWeaponSendPing ( );
	void LogState ( );
	unsigned char GetWeaponType ( );
	struct FSWeaponCode GetWeaponCode ( );
	bool CanJump ( );
	bool CanInteract ( struct FName ClassName );
	bool CanClimbLadder ( );
	bool CanTaunt ( );
	unsigned char GetHUDBulletSize ( );
	void eventPreBeginPlay ( );
	void PostBeginPlay ( );
};

UClass* APBKWeapon::pClassPointer = NULL;

// Class PlanBGame.PBNWeaponCustomParams
// 0x0100 (0x02D8 - 0x01D8)
class APBNWeaponCustomParams : public AActor
{
public:
	struct FPBNWeaponCustomization                     CustomizationInfo;                                		// 0x01D8 (0x00CC) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     WeaponMenuName;                                   		// 0x02A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     WeaponMenuDescription;                            		// 0x02B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     WeaponMenuCategory;                               		// 0x02BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                AvailableModSlots;                                		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Price;                                            		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RealMoneyPrice;                                   		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                requiredRank;                                     		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1462 ];

		return pClassPointer;
	};

	int GetMaxMods ( );
	int GetMaterialCodeByGuid ( struct FGuid MaterialGuid );
	void GetWeaponModMesh ( class APBNWeaponParams* pWeaponParams, int ModTypeIdx, unsigned long ThirdPerson, struct FCustomWeaponData* Data, class USkeletalMesh** SkMesh, class UStaticMesh** StMesh );
	struct FString GetWeaponModMeshRef ( class APBNWeaponParams* pWeaponParams, int ModTypeIdx, unsigned long ThirdPerson, struct FCustomWeaponData* Data );
};

UClass* APBNWeaponCustomParams::pClassPointer = NULL;

// Class PlanBGame.PBNWeaponGlowColorList
// 0x000C (0x01E4 - 0x01D8)
class APBNWeaponGlowColorList : public AActor
{
public:
	TArray< struct FPBNWeaponGlowColorInfo >           Colors;                                           		// 0x01D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1463 ];

		return pClassPointer;
	};

};

UClass* APBNWeaponGlowColorList::pClassPointer = NULL;

// Class PlanBGame.PBNWeaponObject
// 0x0000 (0x003C - 0x003C)
class UPBNWeaponObject : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1464 ];

		return pClassPointer;
	};

	int GetTierFromCategory ( unsigned char eCategory );
	int GetMaxMods ( );
	void UpdateMaterialsOverride_StMesh ( class UStaticMeshComponent* StMesh );
	int GetWeaponModCode ( int ModTypeIdx, struct FSWeaponCode* WeaponCode );
	void SetWeaponModCode ( int ModTypeIdx, int ModCode, struct FSWeaponCode* WeaponCode );
	class AWorldInfo* GetWorldInfo ( );
	void ConvertFromWeaponData ( struct FCustomWeaponData* WeaponData, struct FSWeaponCode* WeaponCode );
	void ConvertToWeaponData ( struct FSWeaponCode* WeaponCode, struct FCustomWeaponData* WeaponData );
	void UpdateEquippedWeaponCaches ( );
};

UClass* UPBNWeaponObject::pClassPointer = NULL;

// Class PlanBGame.PBNWeaponList
// 0x00B0 (0x00EC - 0x003C)
class UPBNWeaponList : public UPBNWeaponObject
{
public:
	TArray< struct FPBWeaponItemInfo >                 rAllWeaponsList;                                  		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                m_nMaxStatisticalIndex;                           		// 0x0048 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FPBNWeaponGlobalCustomizationInfo           GlobalInfo;                                       		// 0x004C (0x004C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              CustomWeaponTextureStreamTimeout;                 		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FSWeaponModTypeDesc >               ModeTypesDescriptions;                            		// 0x009C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSWeaponCategoryDesc >              WeaponCategoriesDescriptions;                     		// 0x00A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UPBNWeaponList*                              pWeaponListArcNative;                             		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      WeaponPresetClass;                                		// 0x00B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     ItemShopModsCategory;                             		// 0x00BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ItemShopMaterialsCategory;                        		// 0x00C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ItemShopDecalsCategory;                           		// 0x00D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ItemShopRepairCategory;                           		// 0x00E0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1465 ];

		return pClassPointer;
	};

	struct FString GetModTypeName ( unsigned char ModType );
	struct FName GetModSocketByType ( unsigned char ModType );
	int GetWeaponIndexByStatisticalIndex ( int nStatisticalIndex );
	class APBKWeaponParams* GetWeaponParamsFromCode ( struct FSWeaponCode WeaponCode );
	class APBNWeaponParams* GetWeaponParamsFromBaseCode ( int iBaseWeaponCode );
	class UClass* eventGetWeaponPresetClass ( );
};

UClass* UPBNWeaponList::pClassPointer = NULL;

// Class PlanBGame.PBWeaponList
// 0x0004 (0x00F0 - 0x00EC)
class UPBWeaponList : public UPBNWeaponList
{
public:
	class UPBWeaponList*                               pWeaponListArc;                                   		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1466 ];

		return pClassPointer;
	};

	struct FString GetModMenuNameByType ( unsigned char ModType );
	class UPBWeaponList* GetInstance ( );
	struct FString DebugGetWeaponModTypeAsString ( unsigned char WeaponModType );
	class UPBKWeaponMod* GetWeaponModFromCodeAndIndex ( int iModTypeIndex, int iModIndex, struct FSWeaponCode* WeaponCode );
	class APBKWeaponParams* GetWeaponParamAndModsFromCode ( struct FSWeaponCode WeaponCode, int iIgnoreModTypeIndex, TArray< class UPBKWeaponMod* >* rMods );
	bool GetWeaponParamAndModsItemGuidsFromCode ( struct FSWeaponCode WeaponCode, struct FGuid* weaponItemGuid, TArray< struct FGuid >* rModItemGuids );
	class APBNWeaponCustomParams* GetWeaponCustomParamsFromCode ( struct FSWeaponCode WeaponCode );
	class APBKWeaponInfo* CreateWeaponInfo ( struct FSWeaponCode WeaponCode, class AActor* ForOwner, struct FName WeaponInfoTag );
	struct FSWeaponCode GetInvalidWeaponCode ( );
	bool IsWeaponCodeValid ( struct FSWeaponCode WeaponCode );
	struct FString GetWeaponNameFromCode ( struct FSWeaponCode InWeaponCode );
	bool GetWeaponCodeFromParams ( class APBKWeaponParams* pParams, struct FSWeaponCode* outWeaponCode );
	bool GetWeaponCodeFromName ( struct FString WeaponParamName, struct FSWeaponCode* outWeaponCode );
	struct FString GetFullWeaponName ( struct FString strPartOfName );
	void eventPostEditChange ( class UProperty* ChangedProperty );
};

UClass* UPBWeaponList::pClassPointer = NULL;

// Class PlanBGame.PBNWeaponMod
// 0x0000 (0x003C - 0x003C)
class UPBNWeaponMod : public UPBNWeaponObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1467 ];

		return pClassPointer;
	};

	void eventOnPostEditChange ( class UProperty* PropertyThatChanged );
};

UClass* UPBNWeaponMod::pClassPointer = NULL;

// Class PlanBGame.PBKWeaponMod
// 0x001C (0x0058 - 0x003C)
class UPBKWeaponMod : public UPBNWeaponMod
{
public:
	unsigned char                                      WeaponModType;                                    		// 0x003C (0x0001) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                iRequiredSlots;                                   		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RangeInfoMod;                                     		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AccuracyInfoMod;                                  		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageInfoMod;                                    		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedInfoMod;                                     		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RateOfFireInfoMod;                                		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1468 ];

		return pClassPointer;
	};

	void eventOnPostEditChange ( class UProperty* PropertyThatChanged );
};

UClass* UPBKWeaponMod::pClassPointer = NULL;

// Class PlanBGame.PBKWeaponMod_AimMod
// 0x0070 (0x00C8 - 0x0058)
class UPBKWeaponMod_AimMod : public UPBKWeaponMod
{
public:
	struct FRotator                                    rAimOffsetRotation;                               		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vAimOffsetPosition;                               		// 0x0064 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAimingFOVFactor;                                 		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAimingWeaponFOVFactor;                           		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFOVSmoothTransition : 1;                         		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHasSecondaryZoom : 1;                            		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bHideWeaponOnAim : 1;                             		// 0x0078 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bNoMuzzleEffectsOnAim : 1;                        		// 0x0078 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bEnableAimFiringPushback : 1;                     		// 0x0078 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	float                                              fAimingSecondaryFOVFactor;                        		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          AimSceneMaterial;                                 		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTurnBobAimingDamping;                            		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTurnBobAimingFadeSpeed;                          		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTurnBobAimingMinFadeSpeed;                       		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vTurnBobAimingCenter;                             		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    rTurnBobAimingMinRotation;                        		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    rTurnBobAimingMaxRotation;                        		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPushbackPerBullet;                               		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPushbackForcedWhenFiring;                        		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPushBackMaxLimit;                                		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPushBackDecay;                                   		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAimFiringOffsetDecay;                            		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1469 ];

		return pClassPointer;
	};

	void eventOnPostEditChange ( class UProperty* PropertyThatChanged );
};

UClass* UPBKWeaponMod_AimMod::pClassPointer = NULL;

// Class PlanBGame.PBKWeaponMod_Barrel
// 0x0018 (0x0070 - 0x0058)
class UPBKWeaponMod_Barrel : public UPBKWeaponMod
{
public:
	TArray< struct FRangeDmgInfo >                     rAddRangeDmg;                                     		// 0x0058 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              fSpreadChangeTimeModifier;                        		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadAllMovementModifier;                       		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAimInTimeModifier;                               		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1470 ];

		return pClassPointer;
	};

	void eventOnPostEditChange ( class UProperty* PropertyThatChanged );
};

UClass* UPBKWeaponMod_Barrel::pClassPointer = NULL;

// Class PlanBGame.PBKWeaponMod_LaserPointer
// 0x001C (0x0074 - 0x0058)
class UPBKWeaponMod_LaserPointer : public UPBKWeaponMod
{
public:
	unsigned long                                      bUseLaserDot : 1;                                 		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              fMinSpreadModifier;                               		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxSpreadModifier;                               		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadPerBulletModifier;                         		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRangeDmgInfo >                     rAddRangeDmg;                                     		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1471 ];

		return pClassPointer;
	};

	void eventOnPostEditChange ( class UProperty* PropertyThatChanged );
};

UClass* UPBKWeaponMod_LaserPointer::pClassPointer = NULL;

// Class PlanBGame.PBKWeaponMod_Magazine
// 0x0024 (0x007C - 0x0058)
class UPBKWeaponMod_Magazine : public UPBKWeaponMod
{
public:
	float                                              fBaseDamageModifier;                              		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRangeDmgInfo >                     rAddRangeDmg;                                     		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                iAdditionalMagazineCapacity;                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iAdditionalStartingAmmo;                          		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadPerBulletModifier;                         		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRecoilStrengthModifier;                          		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBProjectile*                               ProjectileArchetype;                              		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1472 ];

		return pClassPointer;
	};

	void eventOnPostEditChange ( class UProperty* PropertyThatChanged );
};

UClass* UPBKWeaponMod_Magazine::pClassPointer = NULL;

// Class PlanBGame.PBKWeaponMod_Muzzle
// 0x0048 (0x00A0 - 0x0058)
class UPBKWeaponMod_Muzzle : public UPBKWeaponMod
{
public:
	float                                              fMaxSpreadRadiusModifier;                         		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fNormalDamageModifer;                             		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadAimMinModifer;                             		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadStandMinModifer;                           		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadCrouchMinModifer;                          		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             MuzzleFlashPSCTemplate1P;                         		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             MuzzleFlashPSCTemplate3P;                         		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MuzzleFlashOffset;                                		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      EnableMuzzleLight : 1;                            		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSilencer : 1;                                    		// 0x0080 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class UParticleSystem*                             MuzzleFireStopFX1P;                               		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRecoilStrengthModifier;                          		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   WeaponFiringSound1P;                              		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   WeaponFiringSound3P;                              		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRangeDmgInfo >                     rAddRangeDmg;                                     		// 0x0094 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1473 ];

		return pClassPointer;
	};

	void eventOnPostEditChange ( class UProperty* PropertyThatChanged );
};

UClass* UPBKWeaponMod_Muzzle::pClassPointer = NULL;

// Class PlanBGame.PBKWeaponMod_Stock
// 0x0024 (0x007C - 0x0058)
class UPBKWeaponMod_Stock : public UPBKWeaponMod
{
public:
	float                                              fMinSpreadModifier;                               		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadPerBulletModifier;                         		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxSpreadModifier;                               		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRecoilStrengthModifier;                          		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxYawPitchModifier;                             		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fGroundSpeedModifier;                             		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadChangeTimeModifier;                        		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadAllMovementModifier;                       		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAimInTimeModifier;                               		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1474 ];

		return pClassPointer;
	};

	void eventOnPostEditChange ( class UProperty* PropertyThatChanged );
};

UClass* UPBKWeaponMod_Stock::pClassPointer = NULL;

// Class PlanBGame.PBKWeaponMod_Trigger
// 0x0050 (0x00A8 - 0x0058)
class UPBKWeaponMod_Trigger : public UPBKWeaponMod
{
public:
	unsigned char                                      TriggerMode;                                      		// 0x0058 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                SemiModeShotCount;                                		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFireRateModifier;                                		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableAutoRetrigger : 1;                         		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              fAddFiringDecay;                                  		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAddNormalDecay;                                  		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRecoilStrengthModifier;                          		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRecoilStrengthModifierAim;                       		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBurstTriggerPause;                               		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadPerBulletModifier;                         		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadDecaySpeedModifer;                         		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadFastMoveModifier;                          		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxSpreadRadiusModifier;                         		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fNormalDamageModifer;                             		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadAimMinModifer;                             		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadStandMinModifer;                           		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadCrouchMinModifer;                          		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRangeDmgInfo >                     rAddRangeDmg;                                     		// 0x009C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1475 ];

		return pClassPointer;
	};

	void eventOnPostEditChange ( class UProperty* PropertyThatChanged );
};

UClass* UPBKWeaponMod_Trigger::pClassPointer = NULL;

// Class PlanBGame.PBNWeaponModParam
// 0x0018 (0x0054 - 0x003C)
class UPBNWeaponModParam : public UPBNWeaponObject
{
public:
	struct FString                                     Mesh1P_Ref;                                       		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Mesh3P_Ref;                                       		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1476 ];

		return pClassPointer;
	};

};

UClass* UPBNWeaponModParam::pClassPointer = NULL;

// Class PlanBGame.PBNWeaponPreset
// 0x0130 (0x016C - 0x003C)
class UPBNWeaponPreset : public UPBNWeaponObject
{
public:
	struct FString                                     PresetGivenName;                                  		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bDisabledPreset : 1;                              		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FString                                     PrimaryWeaponParamName;                           		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           PrimaryMods;                                      		// 0x0058 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     PrimaryMaterialName;                              		// 0x0064 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SecondaryWeaponParamName;                         		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           SecondaryMods;                                    		// 0x007C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SecondaryMaterialName;                            		// 0x0088 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     GrenadesParamName;                                		// 0x0094 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     MeleeParamName;                                   		// 0x00A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FSWeaponCode                                iPrimaryWeaponCode;                               		// 0x00AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FSWeaponCode                                iSecondaryWeaponCode;                             		// 0x00B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FSWeaponCode                                iGrenadeWeaponCode;                               		// 0x00C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FSWeaponCode                                iMeleeWeaponCode;                                 		// 0x00D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FSWeaponPresetCodes                         sWeaponCodes;                                     		// 0x00DC (0x0030) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       PrimaryWeaponSerialNumber;                        		// 0x010C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       SecondaryWeaponSerialNumber;                      		// 0x011C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       GrenadeWeaponSerialNumber;                        		// 0x012C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       MeleeWeaponSerialNumber;                          		// 0x013C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                iPrimaryWeaponCurCondition;                       		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iSecondaryWeaponCurCondition;                     		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iGrenadeWeaponCurCondition;                       		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iMeleeWeaponCurCondition;                         		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iPrimaryWeaponCurMaxCondition;                    		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iSecondaryWeaponCurMaxCondition;                  		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iGrenadeWeaponCurMaxCondition;                    		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iMeleeWeaponCurMaxCondition;                      		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1477 ];

		return pClassPointer;
	};

};

UClass* UPBNWeaponPreset::pClassPointer = NULL;

// Class PlanBGame.PBNWeaponParams
// 0x0048 (0x0220 - 0x01D8)
class APBNWeaponParams : public AActor
{
public:
	unsigned char                                      WeaponCategory;                                   		// 0x01D8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ItemShopSubCategory;                              		// 0x01DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FPBNWeaponModType >                 ModTypes;                                         		// 0x01E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     WeaponMenuName;                                   		// 0x01F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bWeaponDisabledInMenu : 1;                        		// 0x0200 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FPBGameItem_IconCoordsInfo                  WeaponMenuIcon;                                   		// 0x0204 (0x001C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1478 ];

		return pClassPointer;
	};

	int GetWeaponModCodeByGuid ( int ModTypeIdx, struct FGuid ModGuid );
	void GenerateRandomModIDs ( TArray< int >* rRandomMods );
	void eventOnPostEditChange ( class UProperty* PropertyThatChanged );
};

UClass* APBNWeaponParams::pClassPointer = NULL;

// Class PlanBGame.PBKWeaponParams
// 0x05A8 (0x07C8 - 0x0220)
class APBKWeaponParams : public APBNWeaponParams
{
public:
	float                                              fZoneDmgModifier_Head;                            		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fZoneDmgModifier_Body;                            		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fZoneDmgModifier_Legs;                            		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bGivesKillerHeat : 1;                             		// 0x022C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSelectableWhenEmpty : 1;                         		// 0x022C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bNotUserSelectable : 1;                           		// 0x022C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPreventWeaponChange : 1;                         		// 0x022C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bTrackWeaponCondition : 1;                        		// 0x022C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bApplyWeaponMaterialFor3P : 1;                    		// 0x022C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bCreateBulletComponent : 1;                       		// 0x022C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bKeepCrosshairOnAim : 1;                          		// 0x022C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bEnableSprintBobbing : 1;                         		// 0x022C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bEnableSprintViewBobbing : 1;                     		// 0x022C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bSprintAllowed : 1;                               		// 0x022C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bSpreadEnabled : 1;                               		// 0x022C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bDisableFor3rdPerson : 1;                         		// 0x022C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bEnableRecoil : 1;                                		// 0x022C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bSkipBulletCountDecay : 1;                        		// 0x022C (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bClampMaxBulletCount : 1;                         		// 0x022C (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bEnableBobbing : 1;                               		// 0x022C (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bBobViewOnAim : 1;                                		// 0x022C (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bEnableTurnBobbing : 1;                           		// 0x022C (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bAutoReload : 1;                                  		// 0x022C (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bReloadsSingleBullets : 1;                        		// 0x022C (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bHasSecondaryFire : 1;                            		// 0x022C (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bMarkOnMinimapWhenFiring : 1;                     		// 0x022C (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bHasHoldState : 1;                                		// 0x022C (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bThrowMinigameAlt : 1;                            		// 0x022C (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bPlayEquipAnimAfterFire : 1;                      		// 0x022C (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bUseAimFireAnim : 1;                              		// 0x022C (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bHideCrosshair : 1;                               		// 0x022C (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bShowOnlyCenterDot : 1;                           		// 0x022C (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bConsumeNoAmmo : 1;                               		// 0x022C (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      bDisplayTotalBulletCount : 1;                     		// 0x022C (0x0004) [0x0000000000000001] [0x40000000] ( CPF_Edit )
	unsigned long                                      bHasLightEffect : 1;                              		// 0x022C (0x0004) [0x0000000000000001] [0x80000000] ( CPF_Edit )
	unsigned long                                      bUseHandsIK : 1;                                  		// 0x0230 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      KillerBonusHeatEventForWeapon;                    		// 0x0234 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WeaponType;                                       		// 0x0235 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eWeaponAimInInterpolationMethod;                  		// 0x0236 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eWeaponAimOutInterpolationMethod;                 		// 0x0237 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DefaultTriggerMode;                               		// 0x0238 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      impacttype;                                       		// 0x0239 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WeaponFireType;                                   		// 0x023A (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      HUDBulletSize;                                    		// 0x023B (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      WeaponClass;                                      		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      WeaponInfoClass;                                  		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fGroundSpeedModifier;                             		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          WeaponMaterialForFriendly;                        		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          WeaponMaterialForEnemy;                           		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTWeaponComponents >                rWeaponComponentInfo1P;                           		// 0x0250 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FTWeaponComponents >                rWeaponComponentInfo3P;                           		// 0x025C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UStaticMesh*                                 BulletsStaticMesh;                                		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BulletSocketName;                                 		// 0x026C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fOffsetWhenFull;                                  		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fOffsetWhenEmpty;                                 		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxAmmoBulletsAtMinigamePct;                     		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ClientSideDmg;                                    		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fInterpExponent;                                  		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAimGroundSpeedFactor;                            		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAimPctForRecoilAndSpread;                        		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vNormalPosOffset;                                 		// 0x0290 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    vNormalRotOffset;                                 		// 0x029C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSprintBobVertAmount;                             		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSprintBobHorizAmount;                            		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSprintBobLeftAmount;                             		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSprintBobRightAmount;                            		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBobSprintSpeedModifier;                          		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSprintBobViewHorizModifier;                      		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSprintBobViewVertModifier;                       		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSprintBobViewSpeedModifier;                      		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vSprintPosOffset;                                 		// 0x02C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    vSprintRotOffset;                                 		// 0x02D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSprintSpeedModifier;                             		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SprintTransitionAnimName;                         		// 0x02E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SprintLoopingAnimName;                            		// 0x02EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fInSprintTime;                                    		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fOutSprintTime;                                   		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxSpreadRadius;                                 		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadPerBullet;                                 		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadDecaySpeed;                                		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadMinChangeTime;                             		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadMinChangeTimeAimModifier;                  		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadCenterZone;                                		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadHitsOnCenterZone;                          		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadNumberOfZones;                             		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadStandMin;                                  		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadCrouchMin;                                 		// 0x0320 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadAimMin;                                    		// 0x0324 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadCrouchMaxModifier;                         		// 0x0328 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadMaxJumpModifier;                           		// 0x032C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadAimMoveModifier;                           		// 0x0330 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadSlowMoveModifier;                          		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadFastMoveModifier;                          		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadJumpModifier;                              		// 0x033C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iShouldDrawTracerAfter;                           		// 0x0340 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             pTracerParticleSystem;                            		// 0x0344 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             pTracerParticleSystem3P;                          		// 0x0348 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRecoilMaxPitch;                                  		// 0x034C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRecoilMaxYaw;                                    		// 0x0350 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRecoilMaxRoll;                                   		// 0x0354 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMinRollStep;                                     		// 0x0358 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxRollStep;                                     		// 0x035C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRecoilFiringDecay;                               		// 0x0360 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRecoilDecay;                                     		// 0x0364 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRecoilElasticDecay;                              		// 0x0368 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRecoilElasticFiringDecay;                        		// 0x036C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRecoilNode >                       rRecoilNodes;                                     		// 0x0370 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              fRecoilSpeed;                                     		// 0x037C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRecoilElasticTransferSpeed;                      		// 0x0380 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRecoilNodesStrength;                             		// 0x0384 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRecoilStrengthModifierAim;                       		// 0x0388 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRecoilSpeedModifierAim;                          		// 0x038C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRecoilDecayModifierAim;                          		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPositionChangeSpeed;                             		// 0x0394 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vCrouchPosition;                                  		// 0x0398 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vStandMovePosition;                               		// 0x03A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeaponPosCrouchMoveModifier;                     		// 0x03B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBaseBobSpeed;                                    		// 0x03B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBobVertAmount;                                   		// 0x03B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBobHorizAmount;                                  		// 0x03BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBobLeftAmount;                                   		// 0x03C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBobRightAmount;                                  		// 0x03C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBobAmountAimModifier;                            		// 0x03C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBobSpeedAddPerVelocity;                          		// 0x03CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBobOnAirSpeedModifier;                           		// 0x03D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBobViewVertModifier;                             		// 0x03D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBobViewHorizModifier;                            		// 0x03D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBobViewSpeedModifier;                            		// 0x03DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTurnBobDamping;                                  		// 0x03E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTurnBobFadeSpeed;                                		// 0x03E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMinBobFadeSpeed;                                 		// 0x03E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vTurningBobCenter;                                		// 0x03EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    vTurningBobMinRotation;                           		// 0x03F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    vTurningBobMaxRotation;                           		// 0x0404 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMeleeAngle;                                      		// 0x0410 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMeleeHitTime;                                    		// 0x0414 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMeleeHitAltTime;                                 		// 0x0418 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vMeleeRayExtends;                                 		// 0x041C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMeleeMaxRange;                                   		// 0x0428 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMeleeMinRange;                                   		// 0x042C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRangeExponent;                                   		// 0x0430 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRangeDmgInfo >                     rRangeDmg;                                        		// 0x0434 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              FireRate;                                         		// 0x0440 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AltFireRate;                                      		// 0x0444 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DamageType;                                       		// 0x0448 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSingleShotReinitPct;                             		// 0x044C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MomentumTransfer;                                 		// 0x0450 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iBulletsPerShot;                                  		// 0x0454 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SemiModeShotCount;                                		// 0x0458 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTFireEffectsPattern >              FirePatterns;                                     		// 0x045C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FTFireEffectsInfo >                 FireEffectsInfoArray;                             		// 0x0468 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              fSpawnProjectileTime;                             		// 0x0474 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpawnProjectileTimeAlt;                          		// 0x0478 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fProjThrowStrength;                               		// 0x047C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fProjThrowStrengthAlt;                            		// 0x0480 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vProjSpawnOffset;                                 		// 0x0484 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vProjSpawnOffsetAlt;                              		// 0x0490 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class APBProjectile*                               ProjectileArchetype;                              		// 0x049C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GrenadeThrowStart;                                		// 0x04A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GrenadeThrowHigh;                                 		// 0x04A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GrenadeThrowLow;                                  		// 0x04B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fGrenadeThrowStartTime;                           		// 0x04B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fStrengthForHighThrow;                            		// 0x04BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxPauseTime;                                    		// 0x04C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fIncreaseSpeed;                                   		// 0x04C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDecreaseSpeed;                                   		// 0x04C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fNormalThrowPerc;                                 		// 0x04CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMinThrowVelocity;                                		// 0x04D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxThrowVelocity;                                		// 0x04D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fIdleBreakTimeout;                                		// 0x04D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FIdleBreak >                        rIdleBreaks;                                      		// 0x04DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAnimSet*                                    Anim3PMale;                                       		// 0x04E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    Anim3PFemale;                                     		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    Anim3PBaseMale;                                   		// 0x04F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    Anim3PBaseFemale;                                 		// 0x04F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimTree*                                   AnimWeaponTreeTemplate3P;                         		// 0x04F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    AnimWeapon3P;                                     		// 0x04FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    AnimWeapon3PFemale;                               		// 0x0500 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFireToIdleTime;                                  		// 0x0504 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    AnimHands1P;                                      		// 0x0508 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    AnimWeapon1P;                                     		// 0x050C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       IdlePoseAnimName;                                 		// 0x0510 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EquipAnim3P;                                      		// 0x0518 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       PutDownAnim3P;                                    		// 0x0520 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ActiveLoopingAnimation;                           		// 0x0528 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       InteractionAnimation;                             		// 0x0530 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LastBulletFireAnim1P;                             		// 0x0538 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EquipAnim1P;                                      		// 0x0540 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       PutDownAnim1P;                                    		// 0x0548 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       InteractionSuccessfulAnim;                        		// 0x0550 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AimingFire1P;                                     		// 0x0558 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AimOffsetProfile;                                 		// 0x0560 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       WeaponMenuOffsetProfile;                          		// 0x0568 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCrosshairShakeAmount;                            		// 0x0570 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LowOnBulletsThreshold;                            		// 0x0574 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CriticalBulletThreshhold;                         		// 0x0578 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MagazineAmmoSize;                                 		// 0x057C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                StartingTotalAmmo;                                		// 0x0580 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 MagazineMesh;                                     		// 0x0584 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MagazineAttachBone;                               		// 0x0588 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               WeaponMesh;                                       		// 0x0590 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ForcedLOD1P;                                      		// 0x0594 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ForcedLOD3P;                                      		// 0x0598 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     InteractionBoundsScale;                           		// 0x059C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     InteractionBoundsOrigin;                          		// 0x05A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxImpactEffectDistance;                          		// 0x05B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFireEffectDistance;                            		// 0x05B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BulletWhizSoundDistance;                          		// 0x05BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AttachHolsterSocketName3P;                        		// 0x05C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponScale3P;                                    		// 0x05C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponScaleFrontEnd3P;                            		// 0x05CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             MuzzleFlashPSCTemplate1P;                         		// 0x05D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             MuzzleFlashPSCTemplate3P;                         		// 0x05D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ShellEjectPSCTemplate1P;                          		// 0x05D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ShellEjectPSCTemplate3P;                          		// 0x05DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MuzzleFlashDurationNonAutoTrigger;                		// 0x05E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fShellEjectDuration;                              		// 0x05E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fShellEjectDelayTime;                             		// 0x05E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLightRadius;                                     		// 0x05EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MuzzleFlashLightBrightnessMin;                    		// 0x05F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MuzzleFlashLightBrightnessMax;                    		// 0x05F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EquipTime;                                        		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InteractionSuccessfulTime;                        		// 0x05FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PutDownTime;                                      		// 0x0600 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              equipAttachPhase;                                 		// 0x0604 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              putDownDetachPhase;                               		// 0x0608 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAimInTime;                                       		// 0x060C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAimOutTime;                                      		// 0x0610 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRecoilDef                                  Recoil_Hand;                                      		// 0x0614 (0x0070) [0x0000000000000001]              ( CPF_Edit )
	struct FRecoilDef                                  Recoil_Spine;                                     		// 0x0684 (0x0070) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       WeaponReloadStart;                                		// 0x06F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       WeaponReloadMiddle;                               		// 0x06FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       WeaponReloadEnd;                                  		// 0x0704 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       WeaponReloadSuccess;                              		// 0x070C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       WeaponReloadFailure;                              		// 0x0714 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fReloadPerfectLength;                             		// 0x071C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimReloadStartLength;                           		// 0x0720 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimReloadMiddleLength;                          		// 0x0724 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimReloadEndLength;                             		// 0x0728 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimReloadSuccessLength;                         		// 0x072C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimReloadFailureLength;                         		// 0x0730 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimReloadMiddleSuccessModifier;                 		// 0x0734 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimReloadMiddleFailureModifier;                 		// 0x0738 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAmmoRefreshNormalPct;                            		// 0x073C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAmmoRefreshSuccessPct;                           		// 0x0740 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAmmoRefreshFailPct;                              		// 0x0744 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FireLoop1PCue;                                    		// 0x0748 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FireEnd1PCue;                                     		// 0x074C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FireLoop3PCue;                                    		// 0x0750 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FireEnd3PCue;                                     		// 0x0754 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FireLoopSilenced1PCue;                            		// 0x0758 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FireLoopSilenced3PCue;                            		// 0x075C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FireEndSilenced1PCue;                             		// 0x0760 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FireEndSilenced3PCue;                             		// 0x0764 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLoopFadeOutTimeOnStopFire;                       		// 0x0768 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   AimInSound1P;                                     		// 0x076C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   AimOutSound1P;                                    		// 0x0770 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   WeaponDrySnd1P;                                   		// 0x0774 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   WeaponReloadSuccess1P;                            		// 0x0778 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   WeaponReloadFailure1P;                            		// 0x077C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SndBulletWhizCue;                                 		// 0x0780 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RangeInfo;                                        		// 0x0784 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AccuracyInfo;                                     		// 0x0788 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageInfo;                                       		// 0x078C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedInfo;                                        		// 0x0790 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RateOfFireInfo;                                   		// 0x0794 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CustomAnimation1;                                 		// 0x0798 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomAnimation1Length;                           		// 0x07A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CustomAnimation2;                                 		// 0x07A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomAnimation2Length;                           		// 0x07AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CustomAnimation3;                                 		// 0x07B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomAnimation3Length;                           		// 0x07B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CustomAnimation4;                                 		// 0x07BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomAnimation4Length;                           		// 0x07C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1479 ];

		return pClassPointer;
	};

	void GetModParamNamesByModTypeIndex ( int iModTypeIdx, TArray< struct FString >* rModParamNames, TArray< struct FString >* rModMenuNames );
	bool GetModTypeIndexByModType ( unsigned char ModType, int* iModTypeIdx );
	void DoSanityCheck ( );
	void eventOnPostEditChange ( class UProperty* PropertyThatChanged );
};

UClass* APBKWeaponParams::pClassPointer = NULL;

// Class PlanBGame.PBNWebViewObject
// 0x0080 (0x00BC - 0x003C)
class UPBNWebViewObject : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    WebViewPtr;                                       		// 0x0040 (0x0004) [0x0000000000021002]              ( CPF_Const | CPF_Native | CPF_EditConst )
	unsigned long                                      m_bLoadingPage : 1;                               		// 0x0044 (0x0004) [0x0000000000001002] [0x00000001] ( CPF_Const | CPF_Native )
	unsigned long                                      m_bSimulatingDropDown : 1;                        		// 0x0044 (0x0004) [0x0000000000021002] [0x00000002] ( CPF_Const | CPF_Native | CPF_EditConst )
	class UTexture2DDynamic*                           pTexture;                                         		// 0x0048 (0x0004) [0x0000000000021002]              ( CPF_Const | CPF_Native | CPF_EditConst )
	int                                                WebViewWidth;                                     		// 0x004C (0x0004) [0x0000000000021002]              ( CPF_Const | CPF_Native | CPF_EditConst )
	int                                                WebViewHeight;                                    		// 0x0050 (0x0004) [0x0000000000021002]              ( CPF_Const | CPF_Native | CPF_EditConst )
	int                                                m_lastMouseX;                                     		// 0x0054 (0x0004) [0x0000000000021002]              ( CPF_Const | CPF_Native | CPF_EditConst )
	int                                                m_lastMouseY;                                     		// 0x0058 (0x0004) [0x0000000000021002]              ( CPF_Const | CPF_Native | CPF_EditConst )
	struct FScriptDelegate                             __OnDynamicTextureChanged__Delegate;              		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnURLChanged__Delegate;                         		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnTitleChanged__Delegate;                       		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDocumentReady__Delegate;                      		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnHoverLink__Delegate;                          		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLoadingBegun__Delegate;                       		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLoadingFinished__Delegate;                    		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPopupOpen__Delegate;                          		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1480 ];

		return pClassPointer;
	};

	class UTexture2DDynamic* GetDynamicTexture ( );
	void OnPopupOpen ( int X, int Y, int Width, int Height, TArray< struct FString > AllOptions );
	void OnLoadingFinished ( );
	void OnLoadingBegun ( );
	void OnHoverLink ( unsigned long bHoveringOnLink );
	void OnDocumentReady ( struct FString docURL );
	void OnTitleChanged ( struct FString newTitle );
	void OnURLChanged ( struct FString newURL );
	void OnDynamicTextureChanged ( class UTexture2DDynamic* pDynamicTexture );
	void DestroyWebView ( );
	void DoClosePopup ( int SelectedDropDownOption );
	void DoOpenPopup ( );
	void SendMouseWheel ( int vertWheel, int horizWheel );
	void SendMouseButton ( unsigned char iWhichButton, unsigned long bDown );
	void SendMouseMove ( int X, int Y );
	void KillFocus ( );
	void SetFocus ( );
	void ResizeWebView ( int newWidth, int NewHeight );
	void OpenURL ( struct FString URL );
	class UPBNWebViewObject* CreateWebView ( int Width, int Height, struct FString URL );
};

UClass* UPBNWebViewObject::pClassPointer = NULL;

// Class PlanBGame.PBPawn
// 0x02D4 (0x08D8 - 0x0604)
class APBPawn : public APBBasePawn
{
public:
	TArray< struct FDamageIndicator >                  DamageList;                                       		// 0x0604 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FAttentionIndicator >               AttentionList;                                    		// 0x0610 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UMaterialInstanceConstant*                   GMaterialDamageInd;                               		// 0x061C (0x0004) [0x0000000000000000]              
	float                                              DMI_Duration;                                     		// 0x0620 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   DMI_Material;                                     		// 0x0624 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DMI_Height;                                       		// 0x0628 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DMI_Width;                                        		// 0x062C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DMI_HeightPerHitPoint;                            		// 0x0630 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DMI_WidthPerHitPoint;                             		// 0x0634 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DMI_Radius;                                       		// 0x0638 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ATI_Duration;                                     		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ATI_FadeoutDuration;                              		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ATI_HealthBlinkThreshhold;                        		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ATI_MinAlphaAtZeroDmg;                            		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ATI_MinDamageForFullAlpha;                        		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ATI_BlinkSpeedFactor;                             		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ATI_BlinkMinAlpha;                                		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ATI_BlinkMaxAlpha;                                		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAttentionIndicator : 1;                          		// 0x065C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShakeWeaponOnDamage : 1;                         		// 0x065C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFlashed : 1;                                     		// 0x065C (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	unsigned long                                      bBerserkActive : 1;                               		// 0x065C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bPauseOnDamage : 1;                               		// 0x065C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bJustLanded : 1;                                  		// 0x065C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bLandRecovery : 1;                                		// 0x065C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bShadowLOD : 1;                                   		// 0x065C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bFixedView : 1;                                   		// 0x065C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bComponentDebug : 1;                              		// 0x065C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bWantsToSprint : 1;                               		// 0x065C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bKeepSprintFlag : 1;                              		// 0x065C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bWasSprintingBeforeJump : 1;                      		// 0x065C (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bIsSprinting : 1;                                 		// 0x065C (0x0004) [0x0000000000002020] [0x00002000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsInvulnerable : 1;                              		// 0x065C (0x0004) [0x0000000000002020] [0x00004000] ( CPF_Net | CPF_Transient )
	unsigned long                                      JumpingFromLadder : 1;                            		// 0x065C (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bEnableFootPlacement : 1;                         		// 0x065C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bStealthAmmo : 1;                                 		// 0x065C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bIsDeaf_ : 1;                                     		// 0x065C (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bIsTargeting : 1;                                 		// 0x065C (0x0004) [0x0000000000002020] [0x00080000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bCustomUpStandPlaying : 1;                        		// 0x065C (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bWeaponActivatePlaying : 1;                       		// 0x065C (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bCanDoTurnInPlaceAnim : 1;                        		// 0x065C (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bIsFiring : 1;                                    		// 0x065C (0x0004) [0x0000000000002020] [0x00800000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bReloading : 1;                                   		// 0x065C (0x0004) [0x0000000000002020] [0x01000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bReloadingActive : 1;                             		// 0x065C (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bPlayEndReload : 1;                               		// 0x065C (0x0004) [0x0000000000002020] [0x04000000] ( CPF_Net | CPF_Transient )
	float                                              LastFallHeight;                                   		// 0x0660 (0x0004) [0x0000000000000000]              
	float                                              MinHeight;                                        		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxHeight;                                        		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FallDamageExpModifier;                            		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PickupSound;                                      		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFootsteps1PAmplitudeModifier;                    		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAcceptInputChangesTime;                          		// 0x0678 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fBeginStrifeValue;                                		// 0x067C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fBeginForwardValue;                               		// 0x0680 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fWeaponShakePower;                                		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FViewShakeInfo                              BaseDamageShake;                                  		// 0x0688 (0x0040) [0x0000000000000001]              ( CPF_Edit )
	struct FViewShakeInfo                              CurrentViewShake;                                 		// 0x06C8 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CurrentViewShakePhase;                            		// 0x0708 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      PawnShadowMode;                                   		// 0x0709 (0x0001) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	unsigned char                                      replSprintStamina;                                		// 0x070A (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      iSprintMinStaminaRequired;                        		// 0x070B (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      minimapRevealRefresh;                             		// 0x070C (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      CurrentTauntIndex;                                		// 0x070D (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UMaterialInterface*                          CharInGame_Default;                               		// 0x0710 (0x0004) [0x0000000000000000]              
	float                                              NoGlowDistance;                                   		// 0x0714 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FullGlowDistance;                                 		// 0x0718 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UAudioComponent*                             PlayerGlidingAudioComponent;                      		// 0x071C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    PlayerGlidingParticleComponent;                   		// 0x0720 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    InvulnerabilityPSC;                               		// 0x0724 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              fFlashBangDuration;                               		// 0x0728 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              Anim3PWeaponActivateBlendOutTime;                 		// 0x072C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Anim3PWeaponDeactivateBlendInTime;                		// 0x0730 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              lastHitTime;                                      		// 0x0734 (0x0004) [0x0000000000000000]              
	float                                              MaxShadowDistSq;                                  		// 0x0738 (0x0004) [0x0000000000000000]              
	float                                              ForceShadowDistSq;                                		// 0x073C (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  DMG_IndTex;                                       		// 0x0740 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              nextPlayTime;                                     		// 0x0744 (0x0004) [0x0000000000000000]              
	struct FVector                                     debugHitLocation;                                 		// 0x0748 (0x000C) [0x0000000000000000]              
	float                                              fSpectatingCameraDistance;                        		// 0x0754 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpectatingCameraHeightOffset;                    		// 0x0758 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FixedViewLoc;                                     		// 0x075C (0x000C) [0x0000000000000000]              
	struct FRotator                                    FixedViewRot;                                     		// 0x0768 (0x000C) [0x0000000000000000]              
	float                                              CameraScale;                                      		// 0x0774 (0x0004) [0x0000000000000000]              
	float                                              CurrentCameraScale;                               		// 0x0778 (0x0004) [0x0000000000000000]              
	float                                              CameraScaleMin;                                   		// 0x077C (0x0004) [0x0000000000000000]              
	float                                              CameraScaleMax;                                   		// 0x0780 (0x0004) [0x0000000000000000]              
	int                                                MaxLeanRoll;                                      		// 0x0784 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fNormalStrafeAccelModifier;                       		// 0x0788 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iSprintRecheckCounter;                            		// 0x078C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fStaminaStartRegenTime;                           		// 0x0790 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fSprintStamina;                                   		// 0x0794 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fSprintRegenWaitTime;                             		// 0x0798 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSprintRegenJumpWaitTime;                         		// 0x079C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSprintStrafeAccelModifier;                       		// 0x07A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSprintStaminaCost;                               		// 0x07A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSprintStaminaCostWhenJumping;                    		// 0x07A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSprintStaminaRecovery;                           		// 0x07AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_trans;                                          		// 0x07B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_worldBackup;                                    		// 0x07B4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      SoundGroupClass;                                  		// 0x07C0 (0x0004) [0x0000000000000000]              
	struct FName                                       CurrentAimOffsetProfileName;                      		// 0x07C4 (0x0008) [0x0000000000000000]              
	class USkeletalMesh*                               CharacterMesh1P;                                  		// 0x07CC (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               WeaponMesh3P;                                     		// 0x07D0 (0x0004) [0x0000000000000000]              
	float                                              landingSpeedFactor;                               		// 0x07D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimationCycleLadderHeight;                       		// 0x07D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             PawnAmbientSound;                                 		// 0x07DC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   AmbientSoundCue;                                  		// 0x07E0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              TeamBeaconMaxDist;                                		// 0x07E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TeamBeaconPlayerInfoMaxDist;                      		// 0x07E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    SpeakingBeaconTexture;                            		// 0x07EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastPainSound;                                    		// 0x07F0 (0x0004) [0x0000000000000000]              
	float                                              RagdollLifespan;                                  		// 0x07F4 (0x0004) [0x0000000000000000]              
	int                                                LookYaw;                                          		// 0x07F8 (0x0004) [0x0000000000000000]              
	struct FName                                       LeftFootControlName;                              		// 0x07FC (0x0008) [0x0000000000000000]              
	struct FName                                       RightFootControlName;                             		// 0x0804 (0x0008) [0x0000000000000000]              
	float                                              BaseTranslationOffset;                            		// 0x080C (0x0004) [0x0000000000000000]              
	float                                              CrouchTranslationOffset;                          		// 0x0810 (0x0004) [0x0000000000000000]              
	float                                              OldLocationZ;                                     		// 0x0814 (0x0004) [0x0000000000000000]              
	float                                              ZSmoothingRate;                                   		// 0x0818 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxFootPlacementDistSquared;                      		// 0x081C (0x0004) [0x0000000000000000]              
	class USkelControlFootPlacement*                   LeftLegControl;                                   		// 0x0820 (0x0004) [0x0000000000000000]              
	class USkelControlFootPlacement*                   RightLegControl;                                  		// 0x0824 (0x0004) [0x0000000000000000]              
	float                                              interact_distance;                                		// 0x0828 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   deafSound;                                        		// 0x082C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDeafStart_;                                      		// 0x0830 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fDeafFull_;                                       		// 0x0834 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fDeafOut_;                                        		// 0x0838 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fDeafFactor;                                      		// 0x083C (0x0004) [0x0000000000000000]              
	TArray< class UPBSkelControl_Recoil* >             RecoilNodes;                                      		// 0x0840 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       PawnBodyNodeName;                                 		// 0x084C (0x0008) [0x0000000000000000]              
	class UAnimNodeSlot*                               PawnBodyNode;                                     		// 0x0854 (0x0004) [0x0000000000000000]              
	TArray< class UAnimNodeAimOffset* >                AimOffsetNodes;                                   		// 0x0858 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UAnimNodeSlot* >                     BodyStanceNodes;                                  		// 0x0864 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UPBAnimNodeSlot* >                   CustomBodyAnimNodes;                              		// 0x0870 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                RootYaw;                                          		// 0x087C (0x0004) [0x0000000000000000]              
	float                                              RootYawSpeed;                                     		// 0x0880 (0x0004) [0x0000000000000000]              
	int                                                MaxYawAim;                                        		// 0x0884 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   CurrentSkelAim;                                   		// 0x0888 (0x0008) [0x0000000000000000]              
	class USkelControlSingleBone*                      RootRotControl;                                   		// 0x0890 (0x0004) [0x0000000000000000]              
	struct FCustomWeaponData                           WeaponData;                                       		// 0x0894 (0x0010) [0x0000000000000020]              ( CPF_Net )
	struct FName                                       TauntingViewMode;                                 		// 0x08A4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                TurnInPlaceYawOffest;                             		// 0x08AC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x08B0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class APlayerController*                           SpectatedByLocalPlayer;                           		// 0x08B4 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      CurrentCustomWeapon;                              		// 0x08B8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< struct FPBDamagePerPlayer >                DamageTakenPerPlayer;                             		// 0x08BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MiniGameLastResult;                               		// 0x08C8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AActor*                                      pCurrentAimedActor;                               		// 0x08CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentScopeAlpha;                                		// 0x08D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBKWeaponGlobals*                           pGlobals;                                         		// 0x08D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1481 ];

		return pClassPointer;
	};

	void CheckInvulnerability ( );
	void SwitchAnim ( int AnimIndex );
	void StopGlidingEffects ( );
	void StartGlidingEffects ( );
	bool CanGrabLadder ( );
	void ClientNotifyClimbLadder ( class APBLadderVolume* L, unsigned long bClimbing, unsigned long bTurnAround );
	void ServerNotifyClimbLadder ( class APBLadderVolume* L, unsigned long bClimbing, unsigned long bTurnAround );
	void eventJumpFromLadder ( float sideMovement, float forwardMovement );
	void ServerJumpFromLadder ( float sideMovement, float forwardMovement );
	bool IsVolumeInteractible ( );
	class AActor* GetInteractibleActor ( );
	bool IsTaunting ( );
	void SetRimLighting ( unsigned long bIsAnEnemy );
	void DoMeshChange ( );
	unsigned char ScriptGetTeamNum ( );
	void NotifyMeshChanged ( );
	void Suicide ( );
	void eventCustomUpStandAnimationFinished ( );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	bool DoJump ( unsigned long bUpdating );
	float CalcFinalZ ( float CurZ, float VelocityZ );
	void SetAimOffsetNodesProfile ( TArray< struct FName > NewProfileName );
	void SetTargetingMode ( unsigned long bNewTargetingMode );
	float eventGetAimBlendingTime ( int iTargetChannel );
	float eventGetFireBlendTime ( int iTargetChannel );
	void StartFire ( unsigned char FireModeNum );
	void TogglePlayerNoiseSounds ( );
	void SoundStep ( );
	bool HealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void eventTick ( float Delta );
	void TickDebug ( );
	void ShowPawnDebug ( float Time );
	float GetJumpStamina ( );
	void SetJumpStamina ( float fNewJumpStamina );
	void NotifyNewStaminaValue ( unsigned char newStamina );
	bool IsSprinting ( );
	void SetSprinting ( unsigned long bNewSprinting );
	void ClearPendingSprint ( );
	bool PendingSprint ( );
	bool CanStartSprint ( );
	bool HasEnoughSprintStamina ( );
	float GetSprintStamina ( );
	void SetSprintStamina ( float newStamina );
	void SprintJumpedInitiated ( );
	void DoSprint ( unsigned long bNewSprint );
	void RecheckSprint ( );
	float GetStrafeAccelModifier ( );
	void SetMaxFallSpeed ( float _factor );
	void SetGroundSpeed ( float factor );
	bool EffectIsRelevantFor ( class APlayerController* P, struct FVector SpawnLocation, float CullDistance );
	bool CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation, float CullDistance );
	void Bleed ( struct FTakeHitInfo* HitInfo );
	void PauseOnDamage ( );
	void TakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void OnInvulnerabilityFlagChanged ( );
	void StopInvulnerability ( );
	void StartInvulnerability ( float fTime );
	class AController* SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType );
	TArray< class AController* > GetAllKillAssistControllers ( );
	bool IsPlayerKillAssistant ( class AController* pPlayer );
	void ResetKillAssistsForPlayer ( class AController* pPlayer );
	void CountPerPlayerDamage ( int DamageAmount, class AController* EventInstigator );
	void DeleteAnimationTree ( );
	void eventDestroyed ( );
	void ReloadWeapon ( );
	void AdjustCameraScale ( unsigned long bMoveCameraIn );
	void TakeDrowningDamage ( );
	void SwitchWeapon ( unsigned char NewGroup );
	void UpdateVisibility ( );
	void eventSetReloadFinished ( );
	void eventSetHandIK ( unsigned long bEnabled );
	void PlayWeaponDeactivate ( struct FName AnimName, float AnimTime );
	void PlayWeaponActivate ( struct FName AnimName, float AnimTime );
	void UpdateMeshVisibility ( );
	bool IsSpectatedByLocalPlayer ( );
	void eventReplicatedEvent ( struct FName VarName );
	void UpdateTauntingPawnState ( );
	void ForceStopTaunt ( );
	class USoundCue* GetAmbientSound ( );
	void SetAmbientSound ( class USoundCue* NewAmbientSound );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void GetPawnDebug ( TArray< struct FString >* DebugInfo );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void AccelerationClampingOver ( );
	void SpeedClampingOver ( );
	struct FVector GetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	bool CalcThirdPersonCamFixedDir ( float fDeltaTime, struct FVector VDir, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool CalcThirdPersonCam ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void eventGetCollisionRadiusAndHeight ( float* CollisionRadius, float* CollisionHeight );
	struct FRotator GetCameraRotation ( );
	bool CalcSpectatorCamera ( unsigned long bFirstPerson, float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool NativeCalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void TimedDestroy ( );
	void CheckSelfDestroy ( );
	void TurnOff ( );
	int FixYawValue ( int Yaw );
	void eventPlayFootStepSound ( int FootDown );
	void PlayJumpSound ( unsigned long bJump );
	class UPBPhysicalMaterialProperty* TraceForPhysicalMaterialProperty ( struct FVector TraceStart );
	struct FString GetDebugName ( );
	bool GiveHealth ( int HealAmount, int HealMax );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, int* InDamage, struct FVector* Momentum );
	void FixedView ( struct FString VisibleMeshes, struct FString MoveCamera );
	void SetMeshVisibility ( unsigned long bThirdPerson );
	void eventEndViewTarget ( class APlayerController* PC );
	void eventBecomeViewTarget ( class APlayerController* PC );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	void PostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void PlayTakeHit ( struct FVector HitLoc, int Damage, class UClass* DamageType );
	void PawnPlayAudioMessage ( class UClass* msg, int Idx );
	void TeamPlaySound ( class USoundCue* sndCue, unsigned long bTimeControl );
	void StopPlayFiring ( );
	void PlayVictoryAnimation ( );
	float RangedAttackTime ( );
	bool RecommendLongRangedAttack ( );
	unsigned char ChooseFireMode ( );
	void StopHoldAim ( );
	void StartHoldAim ( );
	bool StopWeaponFiring ( );
	bool BotFire ( unsigned long bFinished );
	bool StopFiring ( );
	void SpawnDefaultController ( );
	void GetInstallPositionAndRotation ( unsigned long bAttachToObject, struct FVector* vPosition, struct FRotator* rRotation );
	void DropDevicesOnDeath ( class APBPlayerController* pbCtrl, struct FVector DeathLocation );
	bool GetObjectiveAttachPosition ( struct FVector vTargetPosition, struct FVector* vPosition, struct FRotator* rRotator );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void TossWeapon ( struct FVector TossVel );
	void eventSoakStop ( struct FString problem );
	void TakeFallingDamage ( );
	void eventFalling ( );
	void JumpOffPawn ( );
	void PreRender ( class UCanvas* Canvas );
	void eventBaseChange ( );
	bool eventEncroachingOn ( class AActor* Other );
	void PostBeginPlay ( );
	void ShowCompDebug ( );
	void togglefeet ( );
	void eventOnPhysicsChanged ( unsigned char oldPhysics );
	bool IsInSameTeam ( class APawn* Pawn );
	bool CanApplyDamageTo ( class APawn* Pawn );
	bool IsLocalClientPawn ( );
	void GetNameTagScreenLocation ( class UCanvas* Canvas, struct FVector* vScreenLocation );
	void GetNameTagLocation ( struct FVector* vLocation );
	void GetDamageIndicatorParams ( TArray< int >* YawAngleArray, TArray< float >* OpacityArray );
	struct FRotator eventGetWeaponEffectRotation ( );
	void NotifyRoundEnded ( );
	void DrawHUD ( class AHUD* H );
	void SetInteractionInfo ( class AController* User );
	void DrawInteractionInfo ( class AHUD* H, class AController* User );
	float GetInteractDistance ( float* objectSize );
	float GetInteractTime ( );
	void EndInteract ( class AController* User, unsigned long bInteractionSuccessful );
	bool OnInteract ( class AController* User );
	class UClass* GetSoundGroupClass ( );
	class APBPlayerController* GetPlayerController ( );
	class APBPlayerReplicationInfo* GetPBPlayerReplicationInfo ( );
	void PlayerChangedTeam ( );
	void eventEndCrouch ( float HeightAdjust );
	void eventStartCrouch ( float HeightAdjust );
	void StopDeafeningEffect ( );
	void StartDeafeningEffect ( float fDeafFull, float fDeafOut );
	void ServerSetFlashed ( unsigned long bNewFlashed, float fNewFlashBangDuration );
	void StopFlashBang3P ( );
	void StartFlashBang3P ( float fDuration );
	void StartFlashBangEffect ( float fFadeIn, float fFull, float fFadeOut, float fSuperFull, float fSuperOut, float fIntensity, struct FVector fOrigin );
	void UpdateGroundSpeed ( );
	void NotifyRevealedOnMinimap ( );
	void PlayReloadEndAnim ( unsigned long bShouldPlayEnd );
	void RevealOnMinimap ( );
	void UpdateAimedActor ( );
};

UClass* APBPawn::pClassPointer = NULL;

// Class PlanBGame.PBCharacter
// 0x0300 (0x0BD8 - 0x08D8)
class APBCharacter : public APBPawn
{
public:
	class USkeletalMesh*                               FirstPersonMesh;                                  		// 0x08D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fHideInSmokeTime;                                 		// 0x08DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                GrenadeAmmo;                                      		// 0x08E0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bWasPlayerPawn : 1;                               		// 0x08E4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bUsedSpecialWeapon : 1;                           		// 0x08E4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bSetUpdateSkelWhenNotRendered : 1;                		// 0x08E4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bLaserPointerEnabled : 1;                         		// 0x08E4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bIsInteracting : 1;                               		// 0x08E4 (0x0004) [0x0000000000002020] [0x00000010] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsBerserk : 1;                                   		// 0x08E4 (0x0004) [0x0000000000002020] [0x00000020] ( CPF_Net | CPF_Transient )
	unsigned long                                      bHandIKEnabled : 1;                               		// 0x08E4 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      PlayHolsterWeaponAnimation : 1;                   		// 0x08E4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      PlayUnholsterWeaponAnimation : 1;                 		// 0x08E4 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      IsTurningOnLadder : 1;                            		// 0x08E4 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      IsHeadCrabbed : 1;                                		// 0x08E4 (0x0004) [0x0000000000002020] [0x00000400] ( CPF_Net | CPF_Transient )
	unsigned long                                      IsUsingSkill : 1;                                 		// 0x08E4 (0x0004) [0x0000000000002020] [0x00000800] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsHealingCharacter : 1;                          		// 0x08E4 (0x0004) [0x0000000000000020] [0x00001000] ( CPF_Net )
	unsigned long                                      bIsThrowingPaperPlane : 1;                        		// 0x08E4 (0x0004) [0x0000000000000020] [0x00002000] ( CPF_Net )
	unsigned long                                      bIsThrowingHeadCrab : 1;                          		// 0x08E4 (0x0004) [0x0000000000000020] [0x00004000] ( CPF_Net )
	float                                              fLastTimeInSmoke;                                 		// 0x08E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     vSmoothedLaserPos;                                		// 0x08EC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     vSmoothedLaserDir;                                		// 0x08F8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              fLaserPosSmoothSpeed;                             		// 0x0904 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             pTauntSoundAC;                                    		// 0x0908 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< struct FTHealOverTime >                    rHOTs;                                            		// 0x090C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              FiringCountInfoLastUpdateTime;                    		// 0x0918 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FiringCountInfoClearTimer;                        		// 0x091C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      FiringCountInfo;                                  		// 0x0920 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      repShotCount;                                     		// 0x0921 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      iCurShotCount;                                    		// 0x0922 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      iWorldShotIndex;                                  		// 0x0923 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      iPawnShotIndex;                                   		// 0x0924 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      BerserkCharging;                                  		// 0x0925 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FTWorldShotInfo                             allWorldShots[ 0x6 ];                             		// 0x0928 (0x0060) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FTPawnShotInfo                              allPawnShots[ 0x6 ];                              		// 0x0988 (0x0048) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              allWorldShotsUpdateTime[ 0x6 ];                   		// 0x09D0 (0x0018) [0x0000000000002000]              ( CPF_Transient )
	float                                              allPawnShotsUpdateTime[ 0x6 ];                    		// 0x09E8 (0x0018) [0x0000000000002000]              ( CPF_Transient )
	float                                              fBoneInfoLastSendTime;                            		// 0x0A00 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FDebugBoneInfo >                    rDebugBoneInfo;                                   		// 0x0A04 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              HandsIKBlendTime;                                 		// 0x0A10 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeSynch*                              SynchNode;                                        		// 0x0A14 (0x0004) [0x0000000000000000]              
	class UPBSkelControl_Recoil*                       GunRecoilNode;                                    		// 0x0A18 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       WeaponInHandBoneName;                             		// 0x0A1C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FTWeaponPresetCodes                         AllWeaponInfoCodes;                               		// 0x0A24 (0x0084) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	struct FSWeaponCode                                PendingWeaponInfoCode;                            		// 0x0AA8 (0x000C) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	struct FSWeaponCode                                CurrentWeaponInfoCode;                            		// 0x0AB4 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class APBKWeaponInfo*                              pCurrentWeaponInfo;                               		// 0x0AC0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class APBKWeaponInfo*                              pPendingWeaponInfo;                               		// 0x0AC4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	TArray< class APBKWeaponInfo* >                    rAllWeaponInfo;                                   		// 0x0AC8 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       Recoil_SpineControlName;                          		// 0x0AD4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       Recoil_GunRecoilName;                             		// 0x0ADC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       Recoil_SecondaryGunRecoilName;                    		// 0x0AE4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    pBerserkPSLeftHand;                               		// 0x0AEC (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    pBerserkPSRightHand;                              		// 0x0AF0 (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             pWeaponFireLoop;                                  		// 0x0AF4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             pWeaponFireTail;                                  		// 0x0AF8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             pBerserkLoopComp;                                 		// 0x0AFC (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             pBerserkChargeLoopComp;                           		// 0x0B00 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   BerserkHitWallSound1P;                            		// 0x0B04 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BerserkHitWallSound3P;                            		// 0x0B08 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             BerserkHitWallSound;                              		// 0x0B0C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   BerserkInjectPain1PSoundCue;                      		// 0x0B10 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BerserkInjectPain3PSoundCue;                      		// 0x0B14 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BerserkLoop1PSoundCue;                            		// 0x0B18 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BerserkLoop3PSoundCue;                            		// 0x0B1C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BerserkChargeLoop1PSoundCue;                      		// 0x0B20 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BerserkChargeLoop3PSoundCue;                      		// 0x0B24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBerserkLoopFadeIn;                               		// 0x0B28 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBerserkLoopFadeOut;                              		// 0x0B2C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBerserkChargeLoopFadeIn;                         		// 0x0B30 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBerserkChargeLoopFadeOut;                        		// 0x0B34 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BerserkParticleSystemLeftHandName;                		// 0x0B38 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BerserkParticleSystemRightHandName;               		// 0x0B40 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             BerserkHandsPS3P;                                 		// 0x0B48 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             BerserkHandsPS1P;                                 		// 0x0B4C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   pGettingHitSoundCue;                              		// 0x0B50 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fGettingHitRetriggerTime;                         		// 0x0B54 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLastGettingHitSoundPlayedTime;                   		// 0x0B58 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPrimitiveComponent*                         LaserDotMesh;                                     		// 0x0B5C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     smoothedViewRotation;                             		// 0x0B60 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CachedLaserHitPosition;                           		// 0x0B6C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class APBLadderVolume*                             atLadder;                                         		// 0x0B78 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ManualTurnTimerInterval;                          		// 0x0B7C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManualTurnStepValue;                              		// 0x0B80 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LadderViewAngleClamp;                             		// 0x0B84 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBLadderVolume*                             RotateTowardsLadder;                              		// 0x0B88 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GlidingViewAngleClamp;                            		// 0x0B8C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlidingSlopeThreshold;                            		// 0x0B90 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlidingHitWallThreshold;                          		// 0x0B94 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             CharacterHitSound;                                		// 0x0B98 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class APBSkill_HeadCrabActor*                      pWhichHeadcrab;                                   		// 0x0B9C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    HealEffectParticleSystem3P;                       		// 0x0BA0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    BerserkChargingPS;                                		// 0x0BA4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             HeadCrabEffectParticleSystem3PTemplate;           		// 0x0BA8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    HeadCrabEffectParticleSystem3P;                   		// 0x0BAC (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              PlaneThrowHideMesh3PDelay;                        		// 0x0BB0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeadCrabThrowHideMesh3PDelay;                     		// 0x0BB4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CageDiffuseColorFriendly;                         		// 0x0BB8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CageDiffuseColorEnemy;                            		// 0x0BC4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               LowDetailCharacter;                               		// 0x0BD0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        pMagazineComponent;                               		// 0x0BD4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1482 ];

		return pClassPointer;
	};

	void eventHideGrenade ( );
	void eventShowGrenade ( );
	void eventDetachMagazine ( );
	void eventAttachMagazine ( );
	void ClientNotifyHeadCrabbed ( unsigned long bEnable );
	void HeadCrabCharacter ( unsigned long newIsHeadCrabber, class APBSkill_HeadCrabActor* newHeadcrabActor );
	void NotifyClientThrowingHeadCrab ( );
	void NotifyThrowingHeadCrab ( unsigned long bThrowing );
	void ClientNotifyThrowingPaperPlane ( );
	void NotifyThrowingPaperPlane ( unsigned long bThrowing );
	void SwitchToPDA ( );
	void ShowHealEffects ( unsigned long bShow );
	void SetEnableHealingEffect ( unsigned long bEnabled );
	void DoHOTHeal ( int Amount );
	void DoInstantHeal ( int Amount );
	void StopHOT ( );
	void StartHOT ( );
	void HandleHOTs ( );
	void RemoveHOT ( struct FName uniqueName );
	void AddHOT ( struct FName uniqueName, int iAmount, int iInterval, int iDuration );
	void ShowNemesisEffectMesh ( unsigned long bEnable, struct FVector LocationOffset );
	void ClientSwitchingToPBActorController ( unsigned long bSwitch );
	void SwitchingToPBActorController ( unsigned long bSwitch );
	void OnTauntAnimEnded ( );
	void OnTauntAnimStarted ( );
	void UpdateTauntingPawnState ( );
	void StopEnergyDrain ( );
	void DrainSkills ( unsigned long bDrain );
	void DelayedUnHolsterWeapon ( );
	void PlayLadderEndClimbEffects ( );
	void ManualTurnAroundTimed ( );
	void BaseManualTurnAround ( );
	void DelayedHolsterWeapon ( );
	void PlayLadderClimbEffects ( );
	void BaseEndClimbLadder ( );
	void BaseClimbLadder ( class APBLadderVolume* L, unsigned long bTurnAround );
	void ClientNotifyClimbLadder ( class APBLadderVolume* L, unsigned long bClimbing, unsigned long bTurnAround );
	void ServerNotifyClimbLadder ( class APBLadderVolume* L, unsigned long bClimbing, unsigned long bTurnAround );
	int GetMaxWeaponCodes ( );
	void DoMeshChange ( );
	void RenderLaser ( float Delta );
	struct FRotator eventGetWeaponEffectRotation ( );
	void SmoothViewRotation ( float Delta );
	void SetLaserEnabled ( unsigned long bEnableLaser );
	void eventTick ( float Delta );
	float DrawOutlinedText ( class UCanvas* Canvas, int X, int Y, struct FString Text, int iAlign );
	void ClientReplicateBoneInfo ( struct FName BoneName, struct FVector BonePos );
	void ReplicateToAllClients ( struct FName BoneName, struct FVector BonePos );
	void ReplicateBonesInfo ( );
	void DebugDrawBoneInfos ( class UCanvas* C );
	void ToggleDebugServerBoneInfo ( );
	struct FRotator eventGetBaseAimRotation ( );
	void ProcessWeaponDataIfNot ( );
	void SetWeaponMesh ( class USkeletalMesh* InMesh, unsigned long bFirstPerson, class APBKWeaponParams* WeaponParams );
	void SetWeaponMeshDPG ( unsigned char DPG );
	void SetHandIKEnabled ( unsigned long bEnabled );
	void CacheAnimNodes ( );
	void eventCustomUpStandAnimationFinished ( );
	void StopFullBodyAnim ( );
	bool IsFullBodyAnimPlaying ( );
	float PlayFullBodyAnim ( struct FName AnimName, unsigned long Cycle, float AnimRate, unsigned long bPauseAtEnd );
	void PlayCustomUpStandAnim ( struct FName AnimName );
	void eventStartCrouch ( float HeightAdjust );
	void eventEndCrouch ( float HeightAdjust );
	void FlashLocationUpdated ( class AWeapon* InWeapon, struct FVector InFlashLocation, unsigned long bViaReplication );
	void FlashCountUpdated ( class AWeapon* InWeapon, unsigned char InFlashCount, unsigned long bViaReplication );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void eventDestroyed ( );
	void SetUpdateSkelWhenNotRendered ( unsigned long bValue );
	class UPBAnimBlendByWeapon* SetBlendDirRoot ( struct FName NodeName );
	class USkeletalMesh* GetFirstPersonMesh ( );
	void SetCharacterReloading ( unsigned long bStartReloading );
	void OnReloadAnimEnded ( );
	void eventReplicatedEvent ( struct FName VarName );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void SetMeshVisibility ( unsigned long bThirdPerson );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, int* InDamage, struct FVector* Momentum );
	void CleanupAllWeaponInfo ( );
	void SetWeaponAnimationSet3P ( class APBKWeaponInfo* pWeaponInfo );
	void SetCurrentWeaponInfo ( class APBKWeaponInfo* pWeaponInfo );
	void NotifyWeaponFinishedEquipping ( );
	void NotifyWeaponFinishedPutdown ( );
	void SetPendingWeaponInfo ( class APBKWeaponInfo* pNewWeaponInfo, struct FSWeaponCode WeaponCode );
	class APBKWeaponInfo_Grenade* FindGrenadeWeaponInfo ( );
	class APBKWeaponInfo* FindAttachedWeaponInfoCode ( struct FSWeaponCode WeaponCode );
	class APBKWeaponInfo* PrepareWeaponInfoFromCode ( struct FSWeaponCode WeaponCode );
	void ProcessAllWeaponData ( );
	void AddDefaultInventory ( );
	bool WasPlayerPawn ( );
	void PrepareWeaponInfoCodes ( );
	class AWeapon* GiveKWeapon ( struct FString WeaponParams );
	class AWeapon* GiveKWeaponFromCode ( struct FSWeaponCode WeaponCode, struct FGuid WeaponSerialNumber );
	class AWeapon* GiveSkillWeaponFromCode ( struct FSWeaponCode WeaponCode, class APBSkill* pSkill, struct FGuid WeaponSerialNumber );
	void SetWeaponInfoCodes ( class UPBWeaponPreset* pPreset );
	void ClearWeaponInfoCodes ( );
	void ClientClearAllWeapons ( );
	void ClearAllWeapons ( );
	void NewWeaponStoppedFiring ( );
	void SetRemoteWeaponFiring ( unsigned long bFiring );
	void IncWeaponFiringSequence ( );
	void ResetFiringSequence ( );
	void NewWeaponFired ( unsigned long bFiringEnded );
	float eventGetFireBlendTime ( int iTargetChannel );
	struct FName GetWeaponAttachBoneName1P ( );
	bool IsPlayerInteracting ( );
	void NotifyGlidingChanged ( );
	bool IsInSmoke ( );
	void DisplayXYZPawnHit ( unsigned char X, unsigned char Y, unsigned char Z, struct FVector vHit );
	void eventGetAllVisibilityCheckPoints ( TArray< struct FVector >* rAllPoints );
	void UpdateClientPawnShots ( );
	void UpdateClientWorldShots ( );
	void UpdateShotInfo ( );
	void AddPawnShot ( class APBPawn* whichPawn, struct FVector vLoc );
	void AddWorldShot ( struct FVector vLoc );
	void AddJustShot ( );
	void Bleed ( struct FTakeHitInfo* HitInfo );
	void PlayGettingHitSound ( );
	void BerserkStateUpdated ( );
	void SetBerserkActive ( unsigned long bActive );
	void BerserkChargeStateUpdated ( );
	void SetBerserkChargeState ( unsigned char NewState );
	void ShouldCrouch ( unsigned long bCrouch );
	bool DoJump ( unsigned long bUpdating );
	class APBSkill_HeadCrabActor* GetHeadcrab ( );
	void NotifyLocalPlayerTeamReceived ( );
	void eventPostBeginPlay ( );
};

UClass* APBCharacter::pClassPointer = NULL;

// Class PlanBGame.PBPhysicalMaterialProperty
// 0x0030 (0x006C - 0x003C)
class UPBPhysicalMaterialProperty : public UPhysicalMaterialPropertyBase
{
public:
	struct FName                                       MaterialType;                                     		// 0x003C (0x0008) [0x0000000000000000]              
	unsigned char                                      HitZoneType;                                      		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UPBImpactData* >                     impact;                                           		// 0x0048 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UPBImpactData* >                     RuntimeImpactDataDA;                              		// 0x0054 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x0060 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bRuntimeImpactDataInitialized : 1;                		// 0x0064 (0x0004) [0x0000000000003002] [0x00000001] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bInsideRuntimeImpactDataInitialization : 1;       		// 0x0064 (0x0004) [0x0000000000003002] [0x00000002] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bEditorDontWarnAgain : 1;                         		// 0x0064 (0x0004) [0x0000000000001000] [0x00000004] ( CPF_Native )
	unsigned long                                      bMirrorCollisionEvent : 1;                        		// 0x0064 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              DampSpeedPercent;                                 		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1483 ];

		return pClassPointer;
	};

	class UPBImpactData* GetImpactData ( unsigned char Type );
	void InitializeRuntimeImpactData ( unsigned long bWarnUser );
	struct FString eventGetImpactTypeDesc ( unsigned char impacttype );
	class UPBPhysicalMaterialProperty* eventGetPBPhysicalMaterialProperty ( struct FImpactInfo* _Impact );
};

UClass* UPBPhysicalMaterialProperty::pClassPointer = NULL;

// Class PlanBGame.PBPlayerController
// 0x0248 (0x08B4 - 0x066C)
class APBPlayerController : public APBBasePlayerController
{
public:
	unsigned long                                      bMute : 1;                                        		// 0x066C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bQuittingToMainMenu : 1;                          		// 0x066C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bShowEmitters : 1;                                		// 0x066C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bInvalidateCameraCache : 1;                       		// 0x066C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bRetrievedWeaponPresets : 1;                      		// 0x066C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bRetrievedSkills : 1;                             		// 0x066C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bRetrievedTaunts : 1;                             		// 0x066C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      skipScreenshot : 1;                               		// 0x066C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      _surveyPanelOpen : 1;                             		// 0x066C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      _ignoreLastState : 1;                             		// 0x066C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bLandingShake : 1;                                		// 0x066C (0x0004) [0x0000000000044000] [0x00000400] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bRetrieveSettingsFromProfileOnNextTick : 1;       		// 0x066C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      m_bComCenterEnabled : 1;                          		// 0x066C (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bProcessItemInteraction : 1;                      		// 0x066C (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      ActorInViewThisTickIsDirty : 1;                   		// 0x066C (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bChangedWeaponPreset : 1;                         		// 0x066C (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bAlreadySavedProgression : 1;                     		// 0x066C (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bGlidingBackwards : 1;                            		// 0x066C (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bCanSuicide : 1;                                  		// 0x066C (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bInitialProcessingComplete : 1;                   		// 0x066C (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bFriendOrFoe : 1;                                 		// 0x066C (0x0004) [0x0000000000004000] [0x00100000] ( CPF_Config )
	unsigned long                                      bDisplayEnemyHealth : 1;                          		// 0x066C (0x0004) [0x0000000000004000] [0x00200000] ( CPF_Config )
	unsigned long                                      bOnlyShowEnemyInsideCrosshair : 1;                		// 0x066C (0x0004) [0x0000000000004000] [0x00400000] ( CPF_Config )
	unsigned long                                      bDisplayTeamatesThroughWalls : 1;                 		// 0x066C (0x0004) [0x0000000000004000] [0x00800000] ( CPF_Config )
	unsigned long                                      bPlayPromotionMusic : 1;                          		// 0x066C (0x0004) [0x0000000000044000] [0x01000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bEnableProgressionScreen : 1;                     		// 0x066C (0x0004) [0x0000000000004000] [0x02000000] ( CPF_Config )
	unsigned long                                      bWeaponPresetSceneOpen : 1;                       		// 0x066C (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      bEMPEffectPlaying : 1;                            		// 0x066C (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned long                                      bDebugFootstepOcclusion : 1;                      		// 0x066C (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      DisplayPlayerNames : 1;                           		// 0x066C (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      bPickingUpWeapon : 1;                             		// 0x066C (0x0004) [0x0000000000000020] [0x40000000] ( CPF_Net )
	unsigned long                                      bAllowRotationClamping : 1;                       		// 0x066C (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bMinimapCameraActive : 1;                         		// 0x0670 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bOnTeamtalk : 1;                                  		// 0x0670 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bBerserkHitWall : 1;                              		// 0x0670 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bAkimboCheckingPawnFalling : 1;                   		// 0x0670 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bBerserkEffectEnabled : 1;                        		// 0x0670 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bBerserkEffectChargeEnabled : 1;                  		// 0x0670 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bNoTextToSpeechVoiceMessages : 1;                 		// 0x0670 (0x0004) [0x0000000000044000] [0x00000040] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bTextToSpeechTeamMessagesOnly : 1;                		// 0x0670 (0x0004) [0x0000000000044000] [0x00000080] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bDynamicNetSpeed : 1;                             		// 0x0670 (0x0004) [0x0000000000044000] [0x00000100] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bIsChangingWeapon : 1;                            		// 0x0670 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bCanChangeTeam : 1;                               		// 0x0670 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bAutoMoving : 1;                                  		// 0x0670 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bAutoStrafing : 1;                                		// 0x0670 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bAutoStrafingLeft : 1;                            		// 0x0670 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bAutoMoveForward : 1;                             		// 0x0670 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bHitIndicatorVisible : 1;                         		// 0x0670 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bLeftServer : 1;                                  		// 0x0670 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bIgnoreErrors : 1;                                		// 0x0670 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bShouldAwardStyleBonus : 1;                       		// 0x0670 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	class UPBUIDataStore_OnlineStats*                  OnlinePlayerStatistics;                           		// 0x0674 (0x0004) [0x0000000000000000]              
	int                                                nSpawnedTimes;                                    		// 0x0678 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                nLastSpectatorCameraIndex;                        		// 0x067C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< float >                                    rSentRadioMessages;                               		// 0x0680 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                iPendingRadioMessage;                             		// 0x068C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fixedViewSpeedFactor;                             		// 0x0690 (0x0004) [0x0000000000000000]              
	class UPBCustomChar_MenuData*                      TransientCustomCharacterData;                     		// 0x0694 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBAnnouncer*                                Announcer;                                        		// 0x0698 (0x0004) [0x0000000000000000]              
	float                                              LastKickWarningTime;                              		// 0x069C (0x0004) [0x0000000000000000]              
	class USceneCapture2DComponent*                    SceneCapture;                                     		// 0x06A0 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	unsigned char                                      iSelectedTaunt;                                   		// 0x06A4 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      iOverrideSelectedTaunt;                           		// 0x06A5 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      iHitIndicator;                                    		// 0x06A6 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                _surveyId;                                        		// 0x06A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBCameraAction*                             DeathCameraArchetype;                             		// 0x06AC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   pSoundDeathCameraWhoosh;                          		// 0x06B0 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   pSoundDeathCameraBang;                            		// 0x06B4 (0x0004) [0x0000000000000000]              
	int                                                interact_distance;                                		// 0x06B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                iCurrentInteractionProgress;                      		// 0x06BC (0x0004) [0x0000000000000000]              
	class UIPBInteractible*                            currentHoldUseInteractible;                       		// 0x06C0 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x06C4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UIPBInteractible*                            CurrentInteractible;                              		// 0x06C8 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x06CC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UIPBInteractible*                            PreviousInteractibleInView;                       		// 0x06D0 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x06D4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UIPBInteractible*                            CurrentInteractionVolume;                         		// 0x06D8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x06DC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	float                                              fCameraShakeRemainTime;                           		// 0x06E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fCameraShakeInitialTime;                          		// 0x06E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fCameraShakeMaxIntensity;                         		// 0x06E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      ActorInViewThisTick;                              		// 0x06EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OldMessageTime;                                   		// 0x06F0 (0x0004) [0x0000000000000000]              
	int                                                iCurrentWeaponPreset;                             		// 0x06F4 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                m_nNextWeaponPreset;                              		// 0x06F8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iOldWeaponPreset;                                 		// 0x06FC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AActor*                                      OldViewTarget;                                    		// 0x0700 (0x0004) [0x0000000000000000]              
	struct FRotator                                    VTP_OldCamRot;                                    		// 0x0704 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    VTP_OldRawRot;                                    		// 0x0710 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              VTP_OldRawRotAge;                                 		// 0x071C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    VTP_ExtrapolatedRawRot;                           		// 0x0720 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    VTP_RotVelocity;                                  		// 0x072C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    GlidingRotation;                                  		// 0x0738 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastGlidePosition;                                		// 0x0744 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    RealGlidingDirection;                             		// 0x0750 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              fLastGlidePositionUpdate;                         		// 0x075C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fGlidingStartTime;                                		// 0x0760 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SLOW_WEAPON_CONDITION;                            		// 0x0764 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FRotator                                    ChargeDirection;                                  		// 0x0768 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastDeathLocation;                                		// 0x0774 (0x000C) [0x0000000000000000]              
	struct FString                                     ProgressMessageSceneClassName;                    		// 0x0780 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USoundCue*                                   pSoundLostTheLead;                                		// 0x078C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   pSoundTakenTheLead;                               		// 0x0790 (0x0004) [0x0000000000000000]              
	int                                                iCurrentWinningTeam;                              		// 0x0794 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   pSoundUnavaliableAction;                          		// 0x0798 (0x0004) [0x0000000000000000]              
	int                                                iLengthOfCharNamesOnHUD;                          		// 0x079C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< class UPBWeaponPreset* >                   rWeaponPresets;                                   		// 0x07A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                iPendingWeaponPresetId;                           		// 0x07AC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FTWeaponCondition >                 rWeaponConditions;                                		// 0x07B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPBAchievementManager*                       m_AchievementManager;                             		// 0x07BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FUniqueNetId >                      InterfaceVoiceMuteList;                           		// 0x07C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     HSReply;                                          		// 0x07CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                HSSendNum;                                        		// 0x07D8 (0x0004) [0x0000000000000000]              
	int                                                HSSent;                                           		// 0x07DC (0x0004) [0x0000000000000000]              
	int                                                HSHandle;                                         		// 0x07E0 (0x0004) [0x0000000000000000]              
	float                                              fCampingCheckInterval;                            		// 0x07E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iCampingReferenceCount;                           		// 0x07E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fCampWarningDistance;                             		// 0x07EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fLastFpsUpdate;                                   		// 0x07F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fLastCampingCheckTime;                            		// 0x07F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FVector >                           rCampingReferencePoints;                          		// 0x07F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              fTauntAllowedMovementEndTime;                     		// 0x0804 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBCameraAction*                             TauntCameraArchetype;                             		// 0x0808 (0x0004) [0x0000000000000000]              
	float                                              aForwardCachedValue;                              		// 0x080C (0x0004) [0x0000000000000000]              
	float                                              aStrafeCachedValue;                               		// 0x0810 (0x0004) [0x0000000000000000]              
	class APBActorController*                          ControllingActor;                                 		// 0x0814 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialEffect*                             ControllingActorHUDEffect;                        		// 0x0818 (0x0004) [0x0000000000000000]              
	float                                              HUDMaterialFadeInTimeElapsed;                     		// 0x081C (0x0004) [0x0000000000000000]              
	float                                              HUDMaterialFadeInTime;                            		// 0x0820 (0x0004) [0x0000000000000000]              
	struct FName                                       ControllingActorHUDOpacityParamName;              		// 0x0824 (0x0008) [0x0000000000000000]              
	class UAudioComponent*                             pSafetyBuyCrowdAC;                                		// 0x082C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              bAkimboCheckingPawnFallingDelay;                  		// 0x0830 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fBerserkEffectSaturation;                         		// 0x0834 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fBerserkEffectBlur;                               		// 0x0838 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fBerserkEffectMaxBlur;                            		// 0x083C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fBerserkEffectSaturationSpeed;                    		// 0x0840 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fBerserkEffectBlurSpeed;                          		// 0x0844 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       BerserkEffectSaturationParamName;                 		// 0x0848 (0x0008) [0x0000000000000000]              
	struct FName                                       BerserkEffectBlurParamName;                       		// 0x0850 (0x0008) [0x0000000000000000]              
	class APBSpawnPointTDM*                            AssociatedSpawnPoint;                             		// 0x0858 (0x0004) [0x0000000000000000]              
	float                                              fDeathTime;                                       		// 0x085C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxActiveClientKActors;                           		// 0x0860 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                currentActiveClientKActors;                       		// 0x0864 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DistToActivateClientKActors;                      		// 0x0868 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxActiveClientKActorsPerImpulse;                 		// 0x086C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                currentImpulseActiveClientKActors;                		// 0x0870 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBFlashBangLogic*                           FlashBangArchetype;                               		// 0x0874 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBFlashBangLogic*                           FlashBangLogic;                                   		// 0x0878 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fChangeTeamCheckTime;                             		// 0x087C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   pDenyChangeTeam;                                  		// 0x0880 (0x0004) [0x0000000000000000]              
	float                                              fTimeToAutoMove;                                  		// 0x0884 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fLastPlayHitIndicationTime;                       		// 0x0888 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBKWeaponGlobals*                           pGlobals;                                         		// 0x088C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __UseCallback__Delegate;                          		// 0x0890 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __EndUseCallback__Delegate;                       		// 0x089C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnTeamMessageReceived__Delegate;                		// 0x08A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1484 ];

		return pClassPointer;
	};

	void DebugShowAllHudElements ( );
	void GetUnlockedItems ( int nPreviousRank, int nNewRank );
	class APlayerController* _GetPlayerByName ( struct FString PlayerName );
	void ListGMCommands ( );
	void GM ( struct FString Command );
	void ServerGMKickBanPlayer ( struct FString PlayerName, int banTime );
	void GMKickBanPlayer ( struct FString PlayerName, int banTime );
	void ServerGMKickPlayer ( struct FString PlayerName, int banTime );
	void GMKickPlayer ( struct FString PlayerName );
	void GMKickAll ( );
	void GMServerKickTeam ( int TM );
	void GMKickTeam ( int TM );
	void ServerGMSetPlayerName ( struct FString Command );
	void GMSetPlayerName ( struct FString Command );
	void GMPlayerList ( );
	void ServerGMWhisperPlayer ( struct FString PlayerName, struct FString Message );
	void GMWhisperPlayer ( struct FString PlayerName, struct FString Message );
	void ClientGMIsPlayerBanned ( struct FString PlayerName, int UnbanTime );
	void ServerGMIsPlayerBanned ( struct FString PlayerName );
	void GMIsPlayerBanned ( struct FString PlayerName );
	void ServerGMUnban ( struct FString PlayerName );
	void GMUnBan ( struct FString PlayerName );
	void ServerGMKickBan ( struct FString S, int Time );
	void GMKickBan ( struct FString S, int Time );
	void ServerGMAll ( );
	void GMAll ( );
	void ServerGMGhost ( );
	void GMGhost ( );
	void ServerGMKillViewedActor ( );
	void GMKillViewedActor ( );
	void ServerGMShowDebug ( );
	void GMShowDebug ( );
	void ServerGMWalk ( );
	void GMWalk ( );
	void ServerGMFly ( );
	void GMFly ( );
	void ServerGMGoTo ( struct FString TheLocation );
	void GMGoTo ( struct FString TheLocation );
	void ServerGMTeleportToPlayerByName ( struct FString PlayerName );
	void GMTeleportToPlayerByName ( struct FString PlayerName );
	void ServerGMTeleportPlayerByName ( struct FString PlayerName );
	void GMTeleportPlayerByName ( struct FString PlayerName );
	void ServerGMSetAirSpeed ( float F );
	void GMSetAirSpeed ( float F );
	void ServerGMFreezePlayerByName ( struct FString PlayerName );
	void GMFreezePlayerByName ( struct FString PlayerName );
	void ServerGMUnfreezePlayerByName ( struct FString PlayerName );
	void GMUnfreezePlayerByName ( struct FString PlayerName );
	void ServerGMGod ( );
	void GMGod ( );
	void ServerGMSetSpeed ( float K );
	void GMSetSpeed ( float K );
	void ReplicateJump ( class APBPawn* _pawn, unsigned long bJump );
	void testHealHOTEnd ( );
	void testHealHOTStart ( );
	void testHealHOT4 ( );
	void testHealI20 ( );
	void SetBasePopulation ( int BasePopulation );
	void eventReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void SetClosedBetaTextVisible ( unsigned long bVisible );
	void SetHTVVisible ( unsigned long bVisible );
	void PlayTestGlobal ( struct FString EventName );
	void PlayTestHeat ( unsigned char iPrimaryEvent, int iBonusEvent );
	void PlayTestFiller ( );
	void CloseMovie ( int nLayer );
	void OpenMovie ( struct FString Movie, int nLayer );
	void GetServerDetails ( );
	void ServerMemLeakCheckSrv ( float InTimeBetweenMemLeakChecks );
	void DoMemLeakCheckingSrv ( float InTimeBetweenMemLeakChecks );
	void CallMemLeakCheck ( );
	void StopMemLeakChecking ( );
	void DoMemLeakChecking ( float InTimeBetweenMemLeakChecks );
	void eventPreCommitMapChange ( struct FString PreviousMapName, struct FString NextMapName );
	void UpdateFlashBangEffect ( );
	void UpdateScopeEffect ( );
	void OnInviteJoinComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void SaveCharacterDataToFile ( struct FCustomCharData CharData );
	void SaveCharacterData ( );
	void GetDamageIndicatorParams ( TArray< int >* YawAngle, TArray< float >* Opacity );
	void ServerSuicidePlane ( unsigned long bSuicidePawn );
	void UpdateHUDEffects ( float inDeltaTime );
	void ReleaseControl ( );
	void EnterStartState ( );
	void SetControllerActor ( class APBActorController* whichActor );
	void ServerSetSkillLevel ( int skillIndex, int NewLevel );
	void ServerSetHeat ( int NewHeat, struct FString PlayerName );
	float GetSideMove ( );
	float GetForwardMove ( );
	void ClientDisplayDebugLine ( struct FString Text );
	void TestAddMapIndex ( struct FString sFieldName, int nMapIndex );
	void UpdateSex ( );
	unsigned char ScriptGetTeamNum ( );
	unsigned char GetTeamNum ( );
	void PrepareForWorldCleanup ( );
	void PreControllerIdChange ( );
	void FindOnlineFriends ( );
	int FindPlayerInInterfaceMuteList ( struct FUniqueNetId PlayerNetId );
	void ClientUnmutePlayerFromInterface ( struct FUniqueNetId PlayerNetId );
	void ServerUnmutePlayerFromInterface ( struct FUniqueNetId PlayerNetId );
	void UnmutePlayerFromInterface ( struct FUniqueNetId PlayerNetId );
	void ClientMutePlayerFromInterface ( struct FUniqueNetId PlayerNetId );
	void ServerMutePlayerFromInterface ( struct FUniqueNetId PlayerNetId );
	void MutePlayerFromInterface ( struct FUniqueNetId PlayerNetId );
	void ServerSay ( struct FString msg );
	void SayFromLobby ( struct FString msg );
	void eventTeamMessage ( class APlayerReplicationInfo* PRI, struct FString S, struct FName Type, float MsgLifeTime );
	bool CanCommunicate ( );
	void OnTeamMessageReceived ( struct FString S );
	bool AllowTTSMessageFrom ( class APlayerReplicationInfo* PRI );
	void SetName ( struct FString S );
	void LoadSettingsFromProfile ( unsigned long bLoadCharacter );
	void ServerSetNetSpeed ( int NewSpeed );
	void ClientGotoTauntState ( unsigned char selectedTaunt );
	void ServerDoTaunt ( unsigned char tauntID );
	void Taunt ( );
	void ExecTaunt ( unsigned char tauntIndex );
	void ReloadProfileSettings ( );
	void ResetProfileToDefault ( class UOnlineProfileSettings* Profile );
	int GetUIPlayerIndex ( );
	void eventReplicatedEvent ( struct FName VarName );
	void InvalidateProfileCache ( );
	void eventReceivedPlayer ( );
	void RetrieveAvatarPictureIndex ( );
	void PreparePresets ( );
	void RetrieveWeaponPresets ( );
	void DrainSkills ( unsigned long bDrain );
	void AddDefaultTaunts ( );
	void AddDefaultSkills ( );
	void StartWeaponPresetsProcessing ( );
	void RetrieveCharacterData ( );
	class UPBProfileSettings* GetPlayerProfile ( );
	void SetCharacterData ( struct FCustomCharData CharData, unsigned long bForceSyncMerging );
	void eventNotifyLoadedWorld ( struct FName WorldPackageName, unsigned long bFinalDest );
	void ClientSetProcessingComplete ( );
	void ServerSetProcessingComplete ( );
	void UpdateLoadingScreenVisibility ( );
	void CharacterProcessingComplete ( unsigned long bProcessedInitialCharacters );
	void CharacterProcessingStart ( unsigned long bProcessedInitialCharacters );
	void eventRemoveLocalizedMessage ( class UClass* Message );
	void ClientShowWinningScreen ( int iWinTeamIndex );
	void ShakeMe ( float HowLong, float MaxIntensity );
	void eventApplyCameraShake ( float fDeltaTime, struct FVector* POVLocation, struct FRotator* POVRotation );
	void GetPlayerViewPoint ( struct FVector* POVLocation, struct FRotator* POVRotation );
	void NotifyCameraActionUninstalled ( );
	void CalcCameraForViewTarget ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool IsSpectatingMode ( );
	float eventGetWeaponFOVAngle ( );
	void eventPreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	void LoadingComplete ( );
	void GotoLoadingState ( );
	void NotifyJoinedSpectatorsOnly ( );
	void ExitLobbyState ( );
	void EnterLobbyState ( );
	void ServerEndTaunt ( );
	void ServerLeaveTauntState ( );
	void OnTauntEnd ( );
	void EndTauntDueToMovementInput ( );
	void EndTaunt ( );
	void TauntCameraTransitionEnded ( );
	bool CanTaunt ( );
	void ExitGameSetupPhase ( );
	void EnterGameSetupPhase ( );
	int ClientAddDefaultWeaponPreset ( class UPBWeaponPreset* newPreset );
	void AddDefaultWeaponPreset ( class UPBWeaponPreset* newPreset );
	void PrintCharPreviewStatus ( );
	void CharPreviewMode ( );
	void eventClientHearSound ( class USoundCue* ASound, class AActor* SourceActor, struct FVector SourceLocation, unsigned long bStopWhenOwnerDestroyed, unsigned long bIsOccluded );
	void Mute ( );
	void DropWeapon ( );
	void DoDropWeapon ( );
	void ServerDropWeapon ( struct FSDroppedWeaponData Weapon, class APBPawn* User );
	void SwitchToBestWeapon ( unsigned long bForceNewWeapon );
	void BugItWorker ( struct FVector TheLocation, struct FRotator TheRotation );
	struct FRotator ClampRotationYaw ( struct FRotator RotatorToClamp, int BaseYaw, float ClampAngleFromBase );
	void UpdateWeaponRotation ( float DeltaTime );
	void ChangeName ( struct FString S );
	float DistSquared ( struct FVector v1, struct FVector v2 );
	void ReloadWeapon ( unsigned char FireModeNum );
	void ClientPawnDied ( );
	void ShowHOT ( int iAmount );
	void ShowInstantHeal ( int iAmount );
	void PawnDied ( class APawn* P );
	bool OnReleasedUse ( );
	void ServerReleasedUse ( );
	void ReleasedUse ( );
	void MyServerUse ( struct FVector eyePos );
	void Use ( );
	void OnCameraModeChanged ( struct FName NewCamMode );
	void UpdateViewTargetVisibility ( );
	void OnInteractionCounterChanged ( );
	void IncInteractCounter ( );
	void CancelInteraction ( );
	void ServerCancelInteraction ( class APBPlayerController* User, class APBWeaponPickup* WeaponPickup );
	void InteractionEnded ( class AActor* Object, unsigned long bInteractionSuccessful );
	void ClientInteractionEnded ( class AActor* Object, unsigned long bInteractionSuccessful );
	void InteractionFails ( int failNum );
	void ClientInteractionStarted ( class AActor* Object );
	void ClientEndTaunt ( );
	bool IsPlayerInteracting ( );
	void SelectInteractionWeapon ( class AActor* Object );
	void DropDevicesOnInteraction ( class AActor* Object );
	void InteractionStarted ( class AActor* Object );
	bool ProcessItemInteraction ( );
	bool PerformedUseAction ( );
	void DrawHUD ( class AHUD* H );
	void DrawHitIndicator ( class APBRoundHUD* pHud, class UCanvas* Canvas, int CenterX, int CenterY );
	void PlayHitIndication ( );
	void DoHitIndicator ( class AActor* HitActor, class AActor* DamageCauser );
	void DrawEmitterDebug ( class AHUD* H );
	void ShowEmitters ( );
	void ClientGameEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void ClientPickingUpWeapon ( unsigned long bPickingUp );
	void ServerPickingUpWeapon ( unsigned long bPickingUp );
	void ProcessInteractible ( );
	void ClearInteractionVolume ( );
	void ExitInteractionVolume ( class UIPBInteractible* whichVolume );
	void EnterInteractionVolume ( class UIPBInteractible* whichVolume );
	class AActor* GetActorInView ( );
	void UpdatePlayer ( );
	void GenerateClientSideEvent ( class UClass* cEventClass );
	bool CanInteract ( class AActor* Other, float* MinDist );
	void ClientSetCtrlRotation ( struct FRotator Rot );
	void FeedbackTalk ( );
	void TeamTalk ( );
	void Talk ( );
	void SetCurrentlyWinningTeam ( int iMyTeam, int iWinTeam );
	void DetermineVoiceMessage ( );
	void ServerSwitchCamera ( );
	void SwitchCamera ( );
	void ShowSpectatorScene ( unsigned long bOpenScene );
	void eventCallIgnoreMoveAndLookInput ( );
	void ToggleZoomMode ( );
	void StopAltFire ( unsigned char FireModeNum );
	void StartAltFire ( unsigned char FireModeNum );
	void StopFire ( unsigned char FireModeNum );
	void InteractiveWeaponIsDown ( );
	void StartFire ( unsigned char FireModeNum );
	void AdjustCameraScale ( unsigned long bIn );
	void ServerViewPlayerByName ( struct FString PlayerName );
	void ViewPlayerByName ( struct FString PlayerName );
	void eventClientSetViewTarget ( class AActor* A, struct FViewTargetTransitionParams TransitionParams );
	void eventNotifyViewTargetChanged ( );
	void ServerViewAPlayer ( int Dir, unsigned long bSwitchCamera );
	void ServerViewCurPlayer ( );
	void ServerViewPrevPlayer ( );
	void ServerViewNextPlayer ( );
	void ResetViewTargetPrediction ( );
	float eventGetFOVAngle ( );
	void SwitchWeapon ( unsigned char T );
	void CallDownMortarFromMap ( );
	void Broadcast ( class UClass* pMessage, int MessageID );
	void ViewNextBot ( );
	bool eventGetMinimapCameraParameters ( float* MinX, float* MaxX, float* MinY, float* MaxY );
	float GetViewportAspectRatio ( );
	float eventGetVerticalAspectRatio ( );
	bool eventConstrainVerticalAspect ( );
	void ClientSetCameraActorView ( class ACameraActor* pCameraActor );
	void OnSetCameraActorView ( class UPBSeqAct_SetCameraActorView* inAction );
	void ClientRoundEnded ( class AActor* EndRoundFocus, int iVictoriousTeam );
	void CampaignHasEnded ( );
	void ClientMatchEnded ( class AActor* EndRoundFocus, int iVictoriousTeam );
	void MatchHasEnded ( class AActor* EndRoundFocus );
	void RoundHasEnded ( class AActor* EndRoundFocus );
	void ResetLoadBoostersTimer ( );
	void ReloadBoosters ( );
	void ShortServerMove ( float TimeStamp, struct FVector ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, int View );
	void CallServerMove ( class USavedMove* NewMove, struct FVector ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove );
	void ViewShake ( float DeltaTime );
	bool UpdateShakeRotComponent ( float Max, float Rate, float DeltaTime, int* Current );
	bool UpdateShakeOffsetComponent ( float MaxOffset, float Rate, float DeltaTime, float* Offset );
	void StopViewShaking ( );
	void ShakeView ( struct FViewShakeInfo NewViewShake );
	void OnRemoveCameraAction ( class UPBSeqAct_RemoveCameraAction* pRemoveAction );
	void OnSetCameraAction ( class UPBSeqAct_SetCameraAction* pCameraActionSA );
	void OnToggleHUDScene ( class UPBSeqAct_ToggleHUDScene* inAction );
	void DamageShake ( int Damage );
	bool AllowVoiceMessage ( unsigned long bAutoMessage );
	void PlayAudioMessage ( class UClass* PBMsg, int Index );
	void BroadcastAudioMessage ( class UClass* MsgClass, int Index );
	void PlayAnnouncement ( class UClass* InMessageClass, unsigned char MessageIndex, class APBPlayerReplicationInfo* SenderPRI );
	void ClientPlayAnnouncement ( class UClass* InMessageClass, unsigned char MessageIndex );
	void ClientSetHUD ( class UClass* newHUDType );
	void ClearAnnouncements ( );
	void ServerChangeTeam ( int N, unsigned long bIgnoreTeamSize );
	void PERemoveAllCounters ( );
	void NotifyClientChangeTeam ( int NewTeam );
	void NotifyChangeTeam ( int NewTeam );
	void ChangeTeam ( struct FString TeamName );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void ServerLocalMessage ( class UClass* pbMessageClass, int MessageID );
	void SwitchCameraMode ( );
	void ResetClientKActors ( );
	void eventClientReset ( );
	void ClientDrawDebugLine ( struct FVector Position, struct FVector HitLocation, unsigned char Red, unsigned char Green, unsigned char Blue, unsigned long bPersistent );
	void Reset ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void HideDamageIndicatorEffect ( );
	void SetDamageAttentionOpacity ( float fOpacity );
	void EndBerserkCharge ( );
	void StartBerserkCharge ( );
	bool CanStartBerserkCharge ( );
	void SetBerserkEffectValues ( float fSaturation, float fBlur );
	void ActivateBerserkEffect ( unsigned long bEnable, unsigned long bCharging );
	bool IsCharacterDead ( );
	bool IsCharging ( );
	void LogStateInfo ( struct FName PrevStateName );
	bool IsGliding ( );
	void StartGliding ( );
	void ServerStopGliding ( );
	void StopGliding ( );
	bool CanStartGlide ( );
	void ServerSpectate ( );
	void StartSpectate ( );
	void SetSelectedWeapon ( unsigned long bApplyChange );
	void ShowEquipment ( unsigned long Direction );
	void NotifyPawnUnderControl ( class APawn* pPawn );
	void PlayStartupMessage ( unsigned char StartupStage );
	void FixedCamDown ( );
	void FixedCamUp ( );
	void FixedCamRight ( );
	void FixedCamLeft ( );
	void FixedCamBackward ( );
	void FixedCamForward ( );
	void FixedCamMove ( int Type );
	void MoveFixedCam ( int Type, struct FVector* pos, struct FRotator* Rot );
	void NotifyChangedWeapon ( class AWeapon* PreviousWeapon, class AWeapon* NewWeapon );
	void eventPostRender ( class UCanvas* Canvas );
	void eventPreRender ( class UCanvas* Canvas );
	void DisplayActor ( class UCanvas* Canvas, class AActor* Actor );
	void ClientRestart ( class APawn* NewPawn );
	void CheckJumpOrDuck ( );
	bool IsMovementAllowed ( );
	bool IsFiringAllowed ( );
	void eventKickWarning ( );
	void OnControllerChanged ( int ControllerId, unsigned long bIsConnected );
	void SoakPause ( class APawn* P );
	void CleanupPRI ( );
	void eventDestroyed ( );
	void NotifyLocalPlayerTeamReceived ( );
	void Restart ( unsigned long bVehicleTransition );
	void ClientPlaySound ( class USoundCue* ASound );
	bool LandingShake ( );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void ServerNotifyMapReady ( );
	void eventClientPrepareMapChange ( struct FName LevelName, unsigned long bFirst, unsigned long bLast );
	void NotifyClientRoundStarted ( );
	void ServerRoundStarted ( );
	void CloseScoreboard ( );
	void OpenScoreboard ( );
	void ServerStartVote ( unsigned char VoteType, struct FString sObject1 );
	void ClientCancelVote ( unsigned char CancelReason );
	void StartVote ( unsigned char VoteType, struct FString sObject1 );
	void StartReturnToLobbyVote ( );
	void StartRestartMatchVote ( );
	void StartKickVote ( struct FString sPlayerName );
	void PostNotifyClientVoteStarted ( );
	void DelayedNotifyClientVoteStarted ( );
	void NotifyClientVoteStarted ( unsigned char VoteType, struct FString sObject1, struct FString sVoteStarter, float fVoteTime );
	void CleanupDeadPawns ( );
	void NotifyClientsHideVoteInfo ( );
	void NotifyClientPassiveVoting ( struct FString SubjectString );
	void NotifyClientVoteEnded ( unsigned long bVotePassed );
	void SetWeaponPreset4 ( );
	void SetWeaponPreset3 ( );
	void SetWeaponPreset2 ( );
	void SetWeaponPreset1 ( );
	void VoteForBeta ( );
	void VoteForAlpha ( );
	void ServerRequestPresetChange ( );
	void RequestPresetChange ( int PresetId );
	bool CanDropMortarAt ( struct FVector vPos );
	void CallDownMortarAt ( struct FVector vPos );
	void MortarMinimapClosed ( );
	void StartChangeTeamPreventionTimer ( );
	void FinishChangeTeamPreventionTimer ( );
	void SwitchTeamIgnorePreventionTimer ( );
	void DoSwitchTeam ( unsigned long ignoreTimer );
	void SwitchTeam ( );
	void SuicidePlane ( unsigned long bSuicidePawn );
	void Suicide ( );
	void ServerSuicide ( );
	void NotifyClientVoteChanged ( class APlayerReplicationInfo* Voter, unsigned char VoteType, int Option );
	void ServerSetNextMatchVote ( int VoteOption );
	void SetNextMatchVote ( int VoteOption );
	void ClientNotifyNextMapVoteEnded ( int Winner );
	void ClientNotifyStartNextMapVote ( );
	void ClientOpenNewLobby ( unsigned char initialScreen, unsigned long bSkipMapVoting );
	void ClientShowLoadingMovie ( unsigned long bShow );
	void ServerRem ( struct FString txt );
	void Rem ( struct FString txt );
	void ClientMakeHimFireOnce ( );
	void ClientMakeHimFire ( unsigned long bStart );
	void TestDeathMsg ( struct FString Weapon );
	void TestDeathCamera ( int inPECount );
	void AddDeathMessage ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim, int iPersonalKills, unsigned char SpecialDeath, unsigned char WeaponCode, struct FString sSkillWeaponCode, class UClass* dmgType );
	void OnDeathCameraDeactivate ( );
	void BlockRespawn ( unsigned long bBlock );
	void PlayDeathCameraBang ( );
	void InstallDeathCamera ( class APBPawn* inKilledPawn, class APawn* inKillerPawn, class APBPlayerReplicationInfo* inKillerPRI, unsigned char inSpecialDeath, unsigned char inBaseWeaponCode, class UClass* inDmgType, class AActor* inDamageCauser, int inPECount );
	void ToggleSpeaking ( unsigned long bNowOn );
	void SpeechRecognitionComplete ( );
	void ClientSetSpeechRecognitionObject ( class USpeechRecognition* NewRecognitionData );
	void OnDestroyOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnEndOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool CleanupOnlineSubsystemSession ( unsigned long bWasFromMenu );
	void FinishQuitToMainMenu ( );
	void ClearWeaponDOF ( );
	void QuitToMainMenu ( );
	void Disconnect ( );
	void ForceQuit ( );
	void ClientLeaveGameServer ( );
	void LeaveGameServer ( );
	void ServerLeaveGame ( );
	class UPBWeaponPreset* GetWeaponPickupPreset ( int* PresetId );
	void ServerSelectPickupPreset ( int iPickupPreset );
	int BaseCreatePickupPreset ( struct FSWeaponCode newPrimaryWeaponCode );
	void ClientSetPickupPreset ( struct FSWeaponCode newPrimaryWeaponCode );
	int ServerSetPickupPreset ( struct FSWeaponCode newPrimaryWeaponCode );
	void AnnouncePickup ( );
	void GivePawnWeaponPreset ( class APBPawn* pPawn );
	bool CanChangeWeaponPreset ( );
	void AddWeaponPreset ( class UPBWeaponPreset* pNewPreset );
	int CheckPresetChoise ( int nPresetID );
	void ServerSelectPreset ( int PresetId, unsigned long bForceGivePreset );
	void PrepareNextWeaponPreset ( int iNextPresetId );
	void CommitPresetSelection ( );
	void ServerSetNextPreset ( int PresetId );
	void SelectPreset ( int PresetId );
	void ClientDebugWeapon ( class APlayerReplicationInfo* pIssuer, struct FName DebugValue );
	void ClientWeaponSettingMessage ( struct FString msg );
	void ServerToggleWeaponSetting ( struct FName Setting );
	void TranslateItemshopError ( int ErrorCode );
	void ServerDebugWeapon ( struct FName DebugValue );
	class UPBWeaponPreset* CreateNewPreset ( class UPBWeaponPreset* pArchetype );
	void EasyAddWeaponPreset ( struct FString PresetName, struct FString Primary, struct FString Secondary, struct FString Support, struct FString Melee );
	void LoadDefaultPresetsData ( TArray< class UPBWeaponPreset* >* rPresetList );
	void DisplayMaintenanceMessage ( struct FString Minutes );
	void DisplayImportantMessage ( struct FString Message );
	void NotifyConnectionError ( struct FString Message, struct FString Title );
	void SetFrontEndErrorMessage ( struct FString Title, struct FString Message );
	void ClientWasKicked ( struct FString Message );
	void ClientSetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title, unsigned long bIgnoreFutureNetworkMessages );
	void NotifyInviteFailed ( );
	class UOnlinePlayerInterface* GetOnlinePlayerInterface ( );
	void RetrieveSettingsFromProfile ( );
	void OnLinkStatusChanged ( unsigned long bConnected );
	void OnConnectionStatusChange ( unsigned char ConnectionStatus );
	void InitVOIP ( );
	void ClientSetOnlineStatus ( );
	void eventClearOnlineDelegates ( );
	void RegisterOnlineDelegates ( );
	void OnLogoutItemshopCompleted ( struct FTPBItemShopResult_OnLogoutDone* Result );
	void LogOutItemshop ( );
	void OnLogoutCompleted ( unsigned long bWasSuccessful );
	void HideEMPEffect ( );
	void OnSessionEnded ( struct FTPBItemShopResult_OnSessionEnded* Result );
	void OnShopDisconnect ( struct FTPBItemShopResult_OnDisconnect* Result );
	void AddOnlineDelegates ( unsigned long bRegisterVoice );
	void CloseOnError ( struct FString ErrorDescription );
	void OnLogError ( int requestId, int ErrorCode );
	struct FString GetLocalizedItemshopErrorDescription ( int ErrorCode );
	struct FString GetLocalizedItemshopErrorTitle ( int ErrorCode );
	void AddRadialImpulseToClientKActors ( struct FVector Loc, float fMaxRadius, float fMaxImpulseForKActorsClientSideOnly );
	void StopFlashBang ( );
	bool StartFlashBang ( float fFadeIn, float fFull, float fFadeOut, float fSuperFull, float fSuperOut, float fIntensity, struct FVector fOrigin );
	void DetachCaptureScene ( );
	void ToggleCameraSmoothing ( );
	void InitHud ( );
	void ChangePresetMod ( int iPresetIndex, int ModTypeIdx, int ModIdx );
	void ServerPresetMod ( int ModTypeIdx, int ModIdx );
	void SetModByName ( unsigned char eModType, struct FString ModParamName );
	void PrintWeaponCodeInfo ( struct FString startText, struct FSWeaponCode* WeaponCode );
	void DoPrintPresetInfo ( int iWhichPreset );
	void ServerPrintPresetInfo ( int iWhichPreset );
	struct FString GetRoleString ( unsigned char theRole );
	bool EndUseCallback ( float fUseTime );
	bool UseCallback ( float fUseTime );
	void PESetStatus ( unsigned long ImKiller, unsigned long Status );
	void PEExpireStatus ( );
	void CloseCommcenter ( );
	void ToggleComCenter ( );
	void UnregisterPlayerDataStores ( );
	void RegisterPlayerDataStores ( );
	void RemoveLocalMessage ( class UClass* LocalMessageClass );
	bool TraceOcclusion ( struct FVector StartLocation, struct FVector EndLocation );
	void CleanupRoundAwardStatistics ( );
	void CleanupAwardStatistics ( );
	void ClearAllAwards ( );
	void OutputLog ( struct FString Output );
	void OutputConsole ( struct FString Output );
	class UConsole* GetPlayerConsole ( );
	void CheckCamping ( );
	void UpdateStatFPS ( float fps );
	float GetAverageFPS ( );
	void eventPlayerTick ( float DeltaTime );
	void SetStaticView ( float z_shift );
	void CacheNeededUserInput ( float Forward, float Strafe );
	void eventUpdatePostprocess ( class AWorldInfo* newWorldInfo );
	void eventPostCommitMapChange ( class AWorldInfo* newWorldInfo );
	void UpdateStreamingProgress ( );
	void ServerNotifyStreamingProgress ( float Progress );
	void ClientPlayTakeHit ( struct FVector HitLoc, unsigned char Damage, class UClass* DamageType );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void eventUnPossess ( );
	void Possess ( class APawn* aPawn, unsigned long bVehicleTransition );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* damageTyp );
	void GenerateEvent ( class UClass* cEventClass );
	void PostBeginPlay ( );
	bool GetWeaponConditionInfo ( struct FGuid WeaponSerialNumber, float* fCurCond, float* fCurMaxCond );
	int FindWeaponCondIndex ( struct FGuid WeaponSerialNumber );
	void WeaponConditionUnequipped ( struct FGuid WeaponSerialNumber );
	void WeaponConditionEquipped ( struct FGuid WeaponSerialNumber );
	void AddNewWeaponCondition ( struct FGuid WeaponSerialNumber, int iCurCond, int iCurMaxCond );
	void AccumulateWeaponEquipTimes ( );
	void CalculateNewWeaponConditions ( );
	void UpdatePresetCondition ( );
	void ClientUpdateWeaponConditions ( struct FGuid Serial, int iNewCondition );
	void NotifyPawnDestroyed ( );
	void eventInitInputSystem ( );
	bool CallHS_ValidateAnswer ( struct FString Answer );
	void CallHS_AnswerRequest ( struct FString Request, struct FString* Answer );
	void HSMakeRequest ( struct FString* Request );
	bool DidGameCrashLastRun ( );
	bool HS_ESSDEnabled ( );
	void HSFree ( );
	void HSInit ( );
	void HSValidateAnswer ( int Seq, struct FString Segment );
	void HSSendSegment ( );
	void HSAnswerRequest ( struct FString Request );
	void ClearHSTimer ( );
	void SetupHSTimer ( );
	void HSDoValidation ( );
	void NotifySkillUnlockStatusUpdated ( class APBSkill* pWhichSkill );
	void NotifySkillEnergyUpdated ( class APBSkill* pWhichSkill, unsigned char NewEnergyValue );
	void NotifyMinimapSweepPerformed ( struct FVector fromWhichLocation );
	void NotifyRevealedOnMinimap ( );
	void RevealPawnOnMinimap ( class APBPawn* pPawn );
	void NotifySafetyBuyTimerChanged ( int iValue );
	void NotifySafetyBuyChanged ( unsigned long bInSafetyBuy );
	void UpdateHUDState ( );
	void NotifySNDNextRoundTimeChanged ( int iRemainingTime );
	void NotifyHalfTimeRemainTime ( int iRemainHalfTime );
	void NotifyHalfTimeSceneSND ( unsigned long bShow );
	void AsyncOpenHalfTimeSceneSND ( );
	void NotifyHalfTimeScene ( unsigned long bShow );
	void NotifyRoundEndReason ( unsigned long bShow );
	void AsyncHideRoundEndReason ( );
	void AsyncOpenRoundEndReason ( );
	void DisplayConsoleLine ( struct FString Text );
	void SetRegion ( struct FString strNewRegion );
	void SetPBManagerDelay ( int milliseconds );
	void ToggleMainUIScene ( );
	void ShowLoadingScreen ( unsigned long bShow );
	void DoSprint ( unsigned long bNewSprint );
	void ReleaseSprint ( );
	void PressSprint ( );
	void ServerSetLevelToStream ( struct FName LevelName );
	void SetLevelToStream ( struct FName LevelName );
	void UnaccociateFromSpawnPointTDM ( );
	void StartUnaccociationTimer ( class APBSpawnPointTDM* pSpawnPoint );
};

UClass* APBPlayerController::pClassPointer = NULL;

// Class PlanBGame.PBEntryPlayerController
// 0x0040 (0x08F4 - 0x08B4)
class APBEntryPlayerController : public APBPlayerController
{
public:
	class UPostProcessChain*                           EntryPostProcessChain;                            		// 0x08B4 (0x0004) [0x0000000000000000]              
	TArray< class UPostProcessChain* >                 OldPostProcessChain;                              		// 0x08B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ULocalPlayer*                                OldPlayer;                                        		// 0x08C4 (0x0004) [0x0000000000000000]              
	struct FString                                     strCasTicket;                                     		// 0x08C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bDoMoreSteps : 1;                                 		// 0x08D4 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     strSteamId;                                       		// 0x08D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                iSteamPaymentSourceId;                            		// 0x08E4 (0x0004) [0x0000000000000000]              
	struct FString                                     strSteamCurrency;                                 		// 0x08E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1485 ];

		return pClassPointer;
	};

	void PrevWeapon ( );
	void NextWeapon ( );
	void StopAltFire ( unsigned char FireModeNum );
	void SwitchScoreboardInteractionMode ( );
	void StartAltFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void ViewAllServers ( unsigned long bEnable );
	void eventReceivedPlayer ( );
	void AddDefaultSkills ( );
	void ShowCommandMenu ( );
	bool CanCommunicate ( );
	void ShowScoreboard ( );
	void SetPawnConstructionScene ( unsigned long bShow );
	void LoadCharacterFromProfile ( class UPBProfileSettings* Profile );
	void OnLinkStatusChanged ( unsigned long bConnected );
	void InitVOIP ( );
	void TeamTalk ( );
	void RefreshServerBrowser ( );
	void OnGetCasTicketDone ( int requestId, int ErrorCode, struct FString casTicket, struct FString subscriptionURL );
	void CheckGetCasTicket ( );
	void OnNewGetAmountDone ( int requestId, int ErrorCode, int Amount );
	void OnFinalizeSteamTransactionDone ( int requestId, int ErrorCode, struct FString ErrorMessage );
	void CheckFinalizeSteamTransaction ( struct FString orderId, unsigned long bAuthorize );
	void OnSteamAuthorizationDone ( struct FString orderId, unsigned long bAuthorize );
	void OnFundWalletDone ( int requestId, int ErrorCode, struct FString ErrorMessage, int newRmtcAmount, struct FString orderId, struct FString tax, struct FString VATTax, struct FString orderTotal, struct FSOEStationCashProductFundWallet fundWalletProduct );
	void CheckFundWallet ( int paymentSourceId, struct FString currency, struct FString fullSku, struct FString steamId );
	void OnGetStationCashProductDone ( int requestId, int ErrorCode, struct FString ErrorMessage, TArray< struct FSOEStationCashProduct > StationCashProducts );
	void CheckGetStationCashProducts ( struct FString currency );
	void OnGetPaymentSourcesDone ( int requestId, int ErrorCode, struct FString ErrorMessage, struct FString defaultcurrency, unsigned long parentPasswordRequired, int walletPaymentSourceID );
	void CheckGetPaymentSources ( );
	void OnIsSteamCustomerDone ( int requestId, int ErrorCode, struct FString ErrorMessage, unsigned long IsSteamCustomer );
	void CheckSteamCustomer ( );
	void PrintSOEProductFundWallet ( struct FSOEStationCashProductFundWallet fundWalletProduct );
	void PrintSOEProduct ( struct FSOEStationCashProduct Product );
	void PrintSOEPrice ( struct FSOEPrice Price );
	void OnCheckCasWebFlowDone ( int requestId, int ErrorCode, struct FString casTicket, struct FString subscriptionURL );
	void CheckCasWebFlow ( );
	void CheckSteam ( );
	void DoSteamFundWallet ( );
	void OnControllerChanged ( int ControllerId, unsigned long bIsConnected );
	void eventDestroyed ( );
	void RestorePostProcessing ( );
	void eventInitInputSystem ( );
	void ServerSetProcessingComplete ( );
	void PostBeginPlay ( );
	struct FString GetAutoJoinCommand ( );
	bool IsAutoCharacterSelectEnabled ( );
};

UClass* APBEntryPlayerController::pClassPointer = NULL;

// Class PlanBGame.PBPlayerReplicationInfo
// 0x0558 (0x07F8 - 0x02A0)
class APBPlayerReplicationInfo : public APlayerReplicationInfo
{
public:
	class APBSquadAI*                                  Squad;                                            		// 0x02A0 (0x0004) [0x0000000000000000]              
	float                                              fSpeakDuration;                                   		// 0x02A4 (0x0004) [0x0000000000000000]              
	float                                              fSpeakingTime;                                    		// 0x02A8 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsDead : 1;                                       		// 0x02AC (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bBlockRespawn : 1;                                		// 0x02AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bHasFlag : 1;                                     		// 0x02AC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bPlayerReady : 1;                                 		// 0x02AC (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      bQuittingToMainMenu : 1;                          		// 0x02AC (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      bHasMadeDamageToEnemy : 1;                        		// 0x02AC (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bHasCompletedObjective : 1;                       		// 0x02AC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bIsSuperMaster : 1;                               		// 0x02AC (0x0004) [0x0000000000002020] [0x00000080] ( CPF_Net | CPF_Transient )
	unsigned long                                      bInReinforcementZone : 1;                         		// 0x02AC (0x0004) [0x0000000000002020] [0x00000100] ( CPF_Net | CPF_Transient )
	unsigned long                                      isGameMaster : 1;                                 		// 0x02AC (0x0004) [0x0000000000000020] [0x00000200] ( CPF_Net )
	unsigned long                                      isUnverifiedGameMaster : 1;                       		// 0x02AC (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bCanSelectPreset : 1;                             		// 0x02AC (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bCharDataProcessingRequested : 1;                 		// 0x02AC (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bPresetsReceived : 1;                             		// 0x02AC (0x0004) [0x0000000000000020] [0x00002000] ( CPF_Net )
	unsigned long                                      bVIP : 1;                                         		// 0x02AC (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bPreventTeamSpectating : 1;                       		// 0x02AC (0x0004) [0x0000000000002020] [0x00008000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsCamping : 1;                                   		// 0x02AC (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bHeatSubmitted : 1;                               		// 0x02AC (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	float                                              fCombatSlide_Duration;                            		// 0x02B0 (0x0004) [0x0000000000000000]              
	int                                                iCombatSlide_Kills;                               		// 0x02B4 (0x0004) [0x0000000000000000]              
	int                                                iMyVote;                                          		// 0x02B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iStartVoteTimeout;                                		// 0x02BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPartVoteTimeout;                                 		// 0x02C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FParticipationInfo                          Participation;                                    		// 0x02C4 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	int                                                iRespawnTimeLeft;                                 		// 0x02D4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FString                                     gameSessionId;                                    		// 0x02D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FGuid                                       guidProfileId;                                    		// 0x02E4 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     strSessionId;                                     		// 0x02F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     strSessionHash;                                   		// 0x0300 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FGuid                                       guidSubscriptionId;                               		// 0x030C (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      SubscriptionType;                                 		// 0x031C (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      PEKillCount[ 0x10 ];                              		// 0x031D (0x0010) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      CharacterDataChangeCount;                         		// 0x032D (0x0001) [0x0000000000000000]              
	unsigned char                                      rTaunts[ 0x4 ];                                   		// 0x032E (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FString                                     CharacterName;                                    		// 0x0334 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     GSPlayerName;                                     		// 0x0340 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                iCurrentRank;                                     		// 0x034C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iCurrentFans;                                     		// 0x0350 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                iCurrentIGC;                                      		// 0x0354 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                iGroupFansBoost;                                  		// 0x0358 (0x0004) [0x0000000000000000]              
	int                                                iGroupIGCBoost;                                   		// 0x035C (0x0004) [0x0000000000000000]              
	int                                                iPremiumSelfIGCBoost;                             		// 0x0360 (0x0004) [0x0000000000000000]              
	int                                                iPremiumSelfFansBoost;                            		// 0x0364 (0x0004) [0x0000000000000000]              
	int                                                iPremiumGroupIGCBoost;                            		// 0x0368 (0x0004) [0x0000000000000000]              
	int                                                iPremiumGroupFansBoost;                           		// 0x036C (0x0004) [0x0000000000000000]              
	TArray< struct FServiceBoostInfo >                 rServicesBoost;                                   		// 0x0370 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                iStyle;                                           		// 0x037C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FPEInfo                                     PECounter[ 0x10 ];                                		// 0x0380 (0x00C0) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PEID[ 0x10 ];                                     		// 0x0440 (0x0040) [0x0000000000000020]              ( CPF_Net )
	int                                                nPENumCounters;                                   		// 0x0480 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class APBGameObjective*                            pCarryingDevice;                                  		// 0x0484 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              fTimeOfLastRZMsg;                                 		// 0x0488 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PlayerAccountLevel;                               		// 0x048C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     EnteredGamePassword;                              		// 0x0490 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              fSlowWeaponDamageBooster;                         		// 0x049C (0x0004) [0x0000000000000000]              
	struct FAwardInfo                                  Awards[ 0x4 ];                                    		// 0x04A0 (0x0150) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UPBPlayerStatistics*                         PlayerStatistics;                                 		// 0x05F0 (0x0004) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	int                                                iAvatarPicture;                                   		// 0x05F4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FCustomCharData                             CharacterData;                                    		// 0x05F8 (0x010C) [0x0000000000000020]              ( CPF_Net )
	class USkeletalMesh*                               CharacterMesh3P;                                  		// 0x0704 (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               CharacterMesh1P;                                  		// 0x0708 (0x0004) [0x0000000000000000]              
	float                                              LastReceivedCharacterDataTime;                    		// 0x070C (0x0004) [0x0000000000000000]              
	class APBCharacterProgression*                     CharacterProgression;                             		// 0x0710 (0x0004) [0x0000000000000000]              
	float                                              fJoinedTime;                                      		// 0x0714 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iAssists;                                         		// 0x0718 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                iLastAchievementIndex;                            		// 0x071C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FGuid                                       LastBoughtItemId;                                 		// 0x0720 (0x0010) [0x0000000000000020]              ( CPF_Net )
	int                                                iLastBoughtItemOwnerGender;                       		// 0x0730 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FTWeaponPresetCodesPRI                      NextWeaponInfoCodes;                              		// 0x0734 (0x0084) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	struct FString                                     StartPortal;                                      		// 0x07B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class APBSkill*                                    rTiers[ 0x4 ];                                    		// 0x07C4 (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fPrevHeat;                                        		// 0x07D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPrevMatchHeat;                                   		// 0x07D8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              iCurHeat;                                         		// 0x07DC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iStoredHeat;                                      		// 0x07E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBHeatEventManager*                         heatManager;                                      		// 0x07E4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fWeaponEquipTimeModifier;                         		// 0x07E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnIncrementCoolnessServerDone__Delegate;        		// 0x07EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1486 ];

		return pClassPointer;
	};

	void SetStyle ( int newStyle );
	void SetSkillLevel ( int skillIndex, int NewLevel );
	int GetHeatTierLevel ( int heatValue );
	void BlockTeamSpectating ( unsigned long bUnblock );
	void CopyProperties ( class APlayerReplicationInfo* PRI );
	void Reset ( );
	void ClientSetCharacterData ( struct FCustomCharData newData );
	void SetCharacterData ( unsigned long bForceSyncMerging, struct FCustomCharData* newData );
	void SetCharacterMesh ( class USkeletalMesh* Mesh3P, class USkeletalMesh* Mesh1P );
	void UpdateFemaleFlag ( );
	void ServerChangeAvatarPicture ( int N );
	void eventReplicatedEvent ( struct FName VarName );
	void NotifyCurrentRankUpdated ( );
	void NotifyPreviousMatchHeatUpdated ( );
	void CheckSkillUnlocks ( );
	void SetHeat ( int iSetHeat );
	void AddHeat ( int iNewHeat );
	void ReceiveSkill ( class APBSkill* pNewSkill );
	void NotifyNewSkillReceived ( );
	void PrecacheWeaponCustomizations ( );
	unsigned char eventGetTeamNum ( );
	void SetAsReady ( );
	void ResetScore ( );
	void VoteForOption ( int iVote );
	void UpdateVotingHud ( unsigned long bHasVoted );
	int GetMaxAwardItems ( );
	void ClearAward ( unsigned char AwardType );
	void ClearAllAwards ( );
	void ClearAwardItem ( unsigned char AwardType, int Index );
	void SetAward ( TArray< class APlayerReplicationInfo* > PRIList, unsigned char AwardType, unsigned long bIsEndOfRound );
	int GetAwardValue ( class APlayerReplicationInfo* PRI, unsigned char AwardType, unsigned long bIsEndOfRound );
	void SetAwardClient ( unsigned char AwardType, struct FAwardInfo pAward );
	float GetParticipatedTime ( int TeamIndex );
	void ResetParticipationTimes ( );
	void UpdateParticipation ( unsigned long bStartCounting, int iOldTeam );
	void IncrementDamageScore ( int Damage );
	void PEIntroducePE ( class APlayerReplicationInfo* Killer );
	void PEExpireStatus ( );
	unsigned char PEAccountKill ( class APlayerReplicationInfo* Killer, int* iPEStatus );
	int PEGetCounterIndex ( int Id );
	unsigned char ServerPEPersonalKills ( class APlayerReplicationInfo* Who );
	unsigned char eventPEPersonalKills ( class APlayerReplicationInfo* Who );
	void SetPersonalEnemy ( class APlayerReplicationInfo* Who, unsigned long Status );
	void PEGarbageCollect ( );
	void PEResetCounter ( int I );
	void PERemoveCounterFromIndex ( int I );
	void PERemoveCounterFromID ( int Id );
	void PERemoveAllCounters ( );
	void PERemoveOldKills ( int CounterIdx, int Round, int RoundLimit );
	class APBPlaceableDevice* GetCarryingDevice ( );
	int GetPing ( );
	bool IsInvalidName ( );
	bool IsParticipating ( );
	void SetSubscriptionId ( struct FGuid subscriptionId );
	bool HasGroupwiseBoost ( );
	void ClientReset ( );
	void ResetCampaign ( );
	void ServerNotifyCloseWeaponPresetMenu ( );
	void ServerNotifyOpenWeaponPresetMenu ( );
	void SetUserVerified ( unsigned long bVerified );
	void UpdateLastBoughtItem ( struct FGuid NewLastBoughtItemId, int iNewLastBoughtItemOwnerGender );
	void UpdateLastAchievement ( int iNewLastAchievement );
	void ClientNotifyProgressionValues ( int iFinalHeat, int iBaseHeat, int iMatchBonusHeat, float fStyleMod, int iMaxPossibleHeat, int iFansUnboosted, int iFansBoosted, int iFansGroup, int iFansTotal, int iIGCUnboosted, int iIGCBoosted, int iIGCGroup, int iIGCTotal, int iCurFameLevel, int iNewFameLevel, unsigned long bHavePremium, int iPremiumFans, int iPremiumIGC );
	void ClientReceiveServiceBoostInfo ( int iBoosterIndex, unsigned long bHaveThisService, int iIGC, int iFans );
	void ServerIncrementCoolness ( struct FGuid ProfileId, int Value );
	void OnIncrementCoolnessServerDone ( int ErrorCode );
	void UserAuthenticationTimedOut ( );
	void StartUserAuthenticationTimeout ( );
	bool IsAllowedToPartVote ( );
	bool IsAllowedToStartVote ( );
	void PreventVotePartForDuration ( int iSeconds );
	void PreventVoteStartForDuration ( int iSeconds );
	void ClientInitialize ( class AController* C );
	void CheckCustomCharacterAndWeaponData ( );
	void PrepareForSubmitProgression ( );
	void ClearBoost ( );
	void eventDestroyed ( );
	void SetCarryingDevice ( class APBGameObjective* newDevice );
	void PostBeginPlay ( );
};

UClass* APBPlayerReplicationInfo::pClassPointer = NULL;

// Class PlanBGame.PBPlayerStart
// 0x0002 (0x02C2 - 0x02C0)
class APBPlayerStart : public APlayerStart
{
public:
	unsigned char                                      teamNumber;                                       		// 0x02C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      nPriorityRate;                                    		// 0x02C1 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1487 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	unsigned char eventGetTeamNum ( );
	void PostBeginPlay ( );
};

UClass* APBPlayerStart::pClassPointer = NULL;

// Class PlanBGame.PBSpawnPointTDM
// 0x001E (0x02E0 - 0x02C2)
class APBSpawnPointTDM : public APBPlayerStart
{
public:
	TArray< struct FWeightedSpawnVolume >              spawnVolumes;                                     		// 0x02C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              fSpawnScore;                                      		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAssociatedPlayer : 1;                            		// 0x02D4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bTextExist : 1;                                   		// 0x02D4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              fGrenades;                                        		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fMortars;                                         		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1488 ];

		return pClassPointer;
	};

	float CalculateDistancePenalty ( class AController* Player );
	float RateSpawnPoint ( class AController* Player );
	void TDMLog ( struct FString log_string );
	void UnregisterPlayer ( );
	void AssociatePlayer ( class AController* Player );
	bool IsLocked ( );
};

UClass* APBSpawnPointTDM::pClassPointer = NULL;

// Class PlanBGame.PBPlaystyleList
// 0x0000 (0x003C - 0x003C)
class UPBPlaystyleList : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1489 ];

		return pClassPointer;
	};

};

UClass* UPBPlaystyleList::pClassPointer = NULL;

// Class PlanBGame.PBProfileSettings
// 0x0018 (0x00E4 - 0x00CC)
class UPBProfileSettings : public UOnlineProfileSettings
{
public:
	TArray< struct FString >                           KeyCommandArray;                                  		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             KeyMappingArray;                                  		// 0x00D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1490 ];

		return pClassPointer;
	};

	void GetVideoSettings ( struct FVideoSettingsStruct* VideoSettings );
	void SetVideoSettings ( struct FVideoSettingsStruct VideoSettings );
	bool GetKeyBindings ( TArray< struct FKeyBind >* InputBindings );
	void SetKeyBindings ( TArray< struct FKeyBind > InputBindings );
	bool GetInputProfanityFilter ( );
	void SetInputProfanityFilter ( unsigned long Index );
	bool GetInputToggleAimInput ( );
	void SetInputToggleAimInput ( unsigned long Index );
	float GetInputMouseSensitivity ( );
	void SetInputMouseSensitivity ( float Index );
	bool GetInputAccelerateMouse ( );
	void SetInputAccelerateMouse ( unsigned long Index );
	bool GetInputSmoothMouse ( );
	void SetInputSmoothMouse ( unsigned long Index );
	bool GetInputInvertMouse ( );
	void SetInputInvertMouse ( unsigned long Index );
	float GetProfileSettingValueFloat2 ( int Id );
	void SetProfileSettingValueFloat2 ( int Id, float Value );
	bool GetProfileSettingValueBool ( int Id );
	void SetProfileSettingValueBool ( int Id, unsigned long Value );
	bool GetProfileSettingValueIdByName ( struct FName SettingName, int* OutValue );
	bool GetProfileSettingValueStringByName ( struct FName SettingName, struct FString* OutValue );
	bool GetProfileSettingValueFloatByName ( struct FName SettingName, float* OutValue );
	bool GetProfileSettingValueIntByName ( struct FName SettingName, int* OutValue );
	int GetRank ( );
	void SetRank ( int Rank );
	int GetXPPoints ( );
	int GetCredits ( );
	struct FString GetBoosters ( );
	void SetBoosters ( struct FString StringData );
	struct FString GetCountry ( );
	void SetCountry ( struct FString StringData );
	void SetCoolnessPoints ( struct FString Value );
	struct FString GetCoolnessPoints ( );
	struct FString GetWeaponConditions ( );
	void SetWeaponConditions ( struct FString StringData );
	struct FString GetWeaponPresets ( );
	void SetWeaponPresets ( struct FString StringData );
	void SetXPPoints ( int XPPoints );
	void SetCredits ( int XPPoints );
	int GetAvatarPictureIndex ( );
	void SetAvatarPictureIndex ( int Index );
	struct FString GetCustomCharacterData ( );
	bool GetPlayerOnlineStatusForced ( );
	int GetPlayerOnlineStatus ( );
	void SetPlayerOnlineStatus ( int Status, unsigned long bForced );
	void SetCustomCharacterData ( struct FString StringData );
};

UClass* UPBProfileSettings::pClassPointer = NULL;

// Class PlanBGame.PBProjectileNoPhysic
// 0x008C (0x02A0 - 0x0214)
class APBProjectileNoPhysic : public AProjectile
{
public:
	class AActor*                                      NotifyActorWhenExploded;                          		// 0x0214 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FExplosionInfo                              ExplosionFX;                                      		// 0x0218 (0x0020) [0x0000000000080001]              ( CPF_Edit | CPF_Component )
	class UPBPhysicsEffectGenerator*                   PhysicsEffectGenerator;                           		// 0x0238 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     LastLocation;                                     		// 0x023C (0x000C) [0x0000000000000000]              
	unsigned long                                      bInitialized : 1;                                 		// 0x0248 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWaitForEffects : 1;                              		// 0x0248 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCreateProjectileLight : 1;                       		// 0x0248 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FVector                                     InitialLocation;                                  		// 0x024C (0x000C) [0x0000000000000000]              
	float                                              AccelRate;                                        		// 0x0258 (0x0004) [0x0000000000000000]              
	float                                              TossZ;                                            		// 0x025C (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    ProjEffects;                                      		// 0x0260 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             ProjFlightTemplate;                               		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0268 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             Ambient;                                          		// 0x026C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UClass*                                      ProjectileLightClass;                             		// 0x0270 (0x0004) [0x0000000000000000]              
	class UPBExplosionLight*                           ProjectileLight;                                  		// 0x0274 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< struct FLightValues >                      LightTimeShift;                                   		// 0x0278 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LightBrightness;                                  		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightRadius;                                      		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      LightColor;                                       		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FSWeaponCode                                iFiredFromWeaponCode;                             		// 0x0290 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AEmitter*                                    projExplosion;                                    		// 0x029C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1491 ];

		return pClassPointer;
	};

	void StopFallingSound ( );
	void DeleteFx ( );
	struct FVector GetReflexion ( struct FVector I, struct FVector N );
	void HitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void Tick ( float dt );
	void MyOnParticleSystemFinished ( class UParticleSystemComponent* PSC );
	void Destroyed ( );
	void HideProjectile ( );
	void eventTornOff ( );
	void ShutDown ( );
	void SpawnFlightEffects ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void SetAcceleration ( );
	void Init ( struct FVector Direction );
	void eventSetInitialState ( );
	void PostBeginPlay ( );
	void eventCreateProjectileLight ( );
};

UClass* APBProjectileNoPhysic::pClassPointer = NULL;

// Class PlanBGame.PBRegionList
// 0x0010 (0x004C - 0x003C)
class UPBRegionList : public UObject
{
public:
	class UPBRegionList*                               pRegionListArchetype;                             		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPBRegionsContainer >               RegionList;                                       		// 0x0040 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1492 ];

		return pClassPointer;
	};

	void GetRegionList ( unsigned long bDevMode, TArray< struct FPBRegionsContainer >* rResultRegionList );
	class UPBRegionList* GetInstance ( );
	struct FString GetRegionInfo ( int iRegionCode );
	struct FString GetRegionInfoByIndex ( int iRegionIndex, int iCurrentRegion );
	int GetRegionNum ( );
	struct FString eventGetStringByRegionCode ( int regioncode );
};

UClass* UPBRegionList::pClassPointer = NULL;

// Class PlanBGame.PBReNamePackageCommandlet
// 0x0000 (0x007C - 0x007C)
class UPBReNamePackageCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1493 ];

		return pClassPointer;
	};

};

UClass* UPBReNamePackageCommandlet::pClassPointer = NULL;

// Class PlanBGame.PBScout
// 0x0004 (0x0534 - 0x0530)
class APBScout : public AScout
{
public:
	class UClass*                                      PrototypePawnClass;                               		// 0x0530 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1494 ];

		return pClassPointer;
	};

	bool SuggestJumpVelocity ( struct FVector Destination, struct FVector Start, unsigned long bRequireFallLanding, struct FVector* JumpVelocity );
};

UClass* APBScout::pClassPointer = NULL;

// Class PlanBGame.PBServerCheckCommandlet
// 0x0000 (0x007C - 0x007C)
class UPBServerCheckCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1495 ];

		return pClassPointer;
	};

};

UClass* UPBServerCheckCommandlet::pClassPointer = NULL;

// Class PlanBGame.PBServerRequestHandlerParent
// 0x009C (0x00D8 - 0x003C)
class UPBServerRequestHandlerParent : public UObject
{
public:
	struct FScriptDelegate                             __tmpOnPingServerDone__Delegate;                  		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __tmpOnLoginServerDone__Delegate;                 		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __tmpOnGetProfileDetailsServerDone__Delegate;     		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __tmpOnLogoutServerDone__Delegate;                		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __tmpOnUpdateProfileDetailsServerDone__Delegate;  		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __tmpOnGetPresetsServerDone__Delegate;            		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __tmpOnGetSubscriptionModeServerDone__Delegate;   		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __tmpOnSendPlayerStatusServerDone__Delegate;      		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __tmpOnIncrementCoolnessServerDone__Delegate;     		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __tmpOnGetProgressionDone__Delegate;              		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __tmpOnSubmitProgressionServerDone__Delegate;     		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __tmpOnDeleteEventByBackendDone__Delegate;        		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __tmpOnGetBoostersServerDone__Delegate;           		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1496 ];

		return pClassPointer;
	};

	void tmpOnGetBoostersServerDone ( int errocode, int subscriptionIgc, int subscriptionXp, TArray< struct FPBOfferServer > offers );
	void tmpOnDeleteEventByBackendDone ( int ErrorCode, int event_code );
	void tmpOnSubmitProgressionServerDone ( int ErrorCode );
	void tmpOnGetProgressionDone ( int ErrorCode, float Heat2Fans, float Heat2IGC, float FormulaPower, int FormulaA, int FormulaB, int FormulaC, int MaxNumCreditBoost, int MaxNumXpBoost, int MaxPercentageCreditBoost, int MaxPercentageXpBoost );
	void tmpOnIncrementCoolnessServerDone ( int ErrorCode );
	void tmpOnSendPlayerStatusServerDone ( int ErrorCode, struct FGuid UserId );
	void tmpOnGetSubscriptionModeServerDone ( int ErrorCode, struct FGuid UserId, struct FGuid subscriptionId, int subscriptionCreditsBoost, int subscriptionXpBoost, int slowWeaponDamage, int groupIgcBoost, int groupXpBoost );
	void tmpOnGetPresetsServerDone ( int ErrorCode, struct FGuid UserId, TArray< struct FPBItemServer > items );
	void tmpOnUpdateProfileDetailsServerDone ( int ErrorCode, struct FGuid UserId );
	void tmpOnLogoutServerDone ( int ErrorCode );
	void tmpOnGetProfileDetailsServerDone ( int ErrorCode, struct FGuid ProfileId, struct FString CharacterName, struct FString UserId, struct FString SessionId, struct FGuid characterGender, struct FGuid characterHead, struct FGuid characterSkin, int avatarPicture, int Rank, int xp, float xpPercentage, int credits, int coolness, int profileReputation, unsigned char accountLevel, int ProgressionSubmitCount );
	void tmpOnLoginServerDone ( int ErrorCode, struct FString gameSpyToken, struct FString gameSpyChallenge );
	void tmpOnPingServerDone ( int ErrorCode );
	float GetTimeSeconds ( );
};

UClass* UPBServerRequestHandlerParent::pClassPointer = NULL;

// Class PlanBGame.PBServicesStorage
// 0x001C (0x0058 - 0x003C)
class UPBServicesStorage : public UObject
{
public:
	TArray< struct FTPBServiceCategory >               m_ServiceCategoriesArray;                         		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FTPBSubscriptionMode >              m_SubscriptionModesArray;                         		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UPBServicesStorage*                          m_pServicesStorageArchetype;                      		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1497 ];

		return pClassPointer;
	};

	class UPBServicesStorage* GetArchetype ( );
	bool CanSetServerName ( unsigned char subType );
	bool CanSetServerPassword ( unsigned char subType );
	bool FindSubscriptionDetails ( struct FGuid subscriptionId, int* XpBoost, int* creditsBoost );
	struct FGuid GetSubscriptionGuidFromType ( unsigned char subType );
	unsigned char FindSubscriptionType ( struct FGuid subscriptionId );
	struct FString FindItemShopCategory ( unsigned char eCategory );
};

UClass* UPBServicesStorage::pClassPointer = NULL;

// Class PlanBGame.PBSingleton
// 0x0004 (0x0040 - 0x003C)
class UPBSingleton : public UObject
{
public:
	struct FPointer                                    mInstance;                                        		// 0x003C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1498 ];

		return pClassPointer;
	};

	class UPBSingleton* GetInstance ( );
};

UClass* UPBSingleton::pClassPointer = NULL;

// Class PlanBGame.PBSkelControl_Recoil
// 0x0080 (0x013C - 0x00BC)
class UPBSkelControl_Recoil : public USkelControlBase
{
public:
	class APBPawn*                                     WarPawnOwner;                                     		// 0x00BC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FRecoilDef                                  SkelRecoil;                                       		// 0x00C0 (0x0070) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   Aim;                                              		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlayRecoil : 1;                                  		// 0x0138 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bOldPlayRecoil : 1;                               		// 0x0138 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bApplyControl : 1;                                		// 0x0138 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1499 ];

		return pClassPointer;
	};

};

UClass* UPBSkelControl_Recoil::pClassPointer = NULL;

// Class PlanBGame.PBSkelControl_Twist
// 0x0050 (0x010C - 0x00BC)
class UPBSkelControl_Twist : public USkelControlBase
{
public:
	TArray< struct FTwistBoneData >                    TwistData;                                        		// 0x00BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FLeanBoneData >                     LeanData;                                         		// 0x00C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                HeadYaw;                                          		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastHeadYaw;                                      		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastZeroed;                                       		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bInitialized : 1;                                 		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDormant : 1;                                     		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bForcedLookAt : 1;                                		// 0x00E0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bRecentering : 1;                                 		// 0x00E0 (0x0004) [0x0000000000000000] [0x00000008] 
	struct FVector                                     ForceFocalPoint;                                  		// 0x00E4 (0x000C) [0x0000000000000000]              
	class AActor*                                      ForceFocalActor;                                  		// 0x00F0 (0x0004) [0x0000000000000000]              
	struct FString                                     debugstr;                                         		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OwnerNotification__Delegate;                    		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1500 ];

		return pClassPointer;
	};

	void UnlockLook ( );
	void ForceLookAt ( class AActor* FocalActor, struct FVector FocalPoint );
	void TwistDisplayDebug ( class AHUD* HUD, class APBCharacter* PawnOwner, float* out_YL, float* out_YPos );
	int Fix ( int Num );
	void ResetAbove ( struct FName BoneName, int NewYaw );
	void Reset ( int NewYaw );
	void OwnerNotification ( struct FName BoneName, int Offset );
};

UClass* UPBSkelControl_Twist::pClassPointer = NULL;

// Class PlanBGame.PBSkelControlSingleBoneByWeapon
// 0x0028 (0x00E4 - 0x00BC)
class UPBSkelControlSingleBoneByWeapon : public USkelControlBase
{
public:
	TArray< struct FPBWeaponAdjustments >              Adjustments;                                      		// 0x00BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       PreviewProfileName;                               		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPreviewAim : 1;                                  		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class APBPawn*                                     PBPawnOwner;                                      		// 0x00D4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FName                                       CurProfileName;                                   		// 0x00D8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurProfileIndex;                                  		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1501 ];

		return pClassPointer;
	};

};

UClass* UPBSkelControlSingleBoneByWeapon::pClassPointer = NULL;

// Class PlanBGame.PBSkeletalMeshComponent
// 0x000F (0x0614 - 0x0605)
class UPBSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	float                                              FOV;                                              		// 0x0608 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bForceLoadTextures : 1;                           		// 0x060C (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              ClearStreamingTime;                               		// 0x0610 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1502 ];

		return pClassPointer;
	};

	void SetFOV ( float NewFOV );
	void eventPreloadTextures ( unsigned long bForcePreload, float ClearTime );
};

UClass* UPBSkeletalMeshComponent::pClassPointer = NULL;

// Class PlanBGame.PBSkill
// 0x00C4 (0x029C - 0x01D8)
class APBSkill : public AActor
{
public:
	struct FGuid                                       ItemShopGuid;                                     		// 0x01D8 (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     ItemShopGuidStr;                                  		// 0x01E8 (0x000C) [0x0000000000402003]              ( CPF_Edit | CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                iDefaultSkillLevel;                               		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Tier;                                             		// 0x01F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      iLowEnergyValue;                                  		// 0x01F9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      iCriticalEnergyValue;                             		// 0x01FA (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      replEnergy;                                       		// 0x01FB (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fMinimumEnergyRequiredPerUse;                     		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMinimumEnergyRequiredToSelect;                   		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEnergyCostPerUse;                                		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEnergyBaseRefreshRate;                           		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxEnergy;                                       		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCostWhileActive;                                 		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fInitialEnergy;                                   		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAlwaysAtFullEnergy : 1;                          		// 0x0218 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNotifiedOfEnergyDepletion : 1;                   		// 0x0218 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsDrainingEnergy : 1;                            		// 0x0218 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsUnlocked : 1;                                  		// 0x0218 (0x0004) [0x0000000000002020] [0x00000008] ( CPF_Net | CPF_Transient )
	struct FString                                     sInternalName;                                    		// 0x021C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     sLocalizedSkillName;                              		// 0x0228 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     sIconName;                                        		// 0x0234 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FPBGameItem_IconCoordsInfo                  Icon;                                             		// 0x0240 (0x001C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FPBSkillImprovementInfo >           rImprovements;                                    		// 0x025C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillWeaponParamName;                             		// 0x0268 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class APBKWeapon_Skill*                            pWeapon;                                          		// 0x0274 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FSWeaponCode                                SkillWeaponCode;                                  		// 0x0278 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class APawn*                                       pOwningPawn;                                      		// 0x0284 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iSkillLevel;                                      		// 0x0288 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iMasterLevel;                                     		// 0x028C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fEnergy;                                          		// 0x0290 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBKWeaponInfo*                              pLinkedWeaponInfo;                                		// 0x0294 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iHeatToUnlock;                                    		// 0x0298 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1503 ];

		return pClassPointer;
	};

	unsigned char GetEnergyStatus ( );
	void DrawSkillHUD ( class UCanvas* Canvas );
	class UTexture* ResolveTextureRef ( struct FString Ref );
	void eventReplicatedEvent ( struct FName VarName );
	class APBKWeaponInfo* FindWeaponInfoForSkill ( class APBCharacter* pChar );
	void UpdateSkillWeaponInfoLinks ( );
	void LockStatusUpdated ( );
	void OnSkillLevelChanged ( );
	void OnEnergyDepletedDuringUse ( );
	void CheckForUnlock ( int iNewHeat );
	void eventTick ( float fDelta );
	void ClientOnUse ( unsigned char UsageMode );
	void OnUse ( unsigned char UsageMode );
	void GatherStats ( );
	bool CheckEnergyRequirement ( );
	bool IsSelectable ( );
	bool HasEnoughEnergyToSelect ( );
	bool IsUnlocked ( );
	bool IsLocked ( );
	int GetTier ( );
	bool GetSkillWeaponCode ( int iIndex, struct FSWeaponCode* outWeaponCode );
	void UpdateEnergy ( float DeltaTime );
	float GetCurrentEnergyCost ( );
	void Died ( class AController* Killer );
	int GetMaxSkillLevel ( );
	void SetSkillLevel ( int iNewSkillLevel );
	void InitSkill ( int iNewSkillLevel, unsigned long bDoNotEnforceDefaultLevel );
	void AttachWeapon ( class APBKWeapon_Skill* pNewWeapon );
	void DetachWeapon ( class APBKWeapon_Skill* pNewWeapon );
	void NotifyDraining ( );
	void DrainSkill ( unsigned long bDraining );
	void AddEnergy ( float fAdditional );
	void DecEnergy ( float fAmount );
	void SetEnergy ( float fNewEnergy );
	float GetEnergyPerc ( );
	float GetCurrentEnergy ( );
	void OnRoundStart ( );
};

UClass* APBSkill::pClassPointer = NULL;

// Class PlanBGame.PBSoeMon
// 0x0028 (0x0064 - 0x003C)
class UPBSoeMon : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bInitialized : 1;                                 		// 0x0040 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              CycleUpdateFrequency;                             		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              currUpdateFrequency;                              		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FString >                           MonitorElements;                                  		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           MonitorElementDescriptions;                       		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1504 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	void SoeMonUpdateValueP ( struct FString ElementName, int Value );
	void SoeMonUpdateValue ( struct FString ElementName, int Value );
	void SoeMonAddElement ( struct FString ElementName, struct FString Description );
	class UPBSoeMon* GetInstance ( );
};

UClass* UPBSoeMon::pClassPointer = NULL;

// Class PlanBGame.PBSoundOcclusionVolume
// 0x0000 (0x0214 - 0x0214)
class APBSoundOcclusionVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1505 ];

		return pClassPointer;
	};

};

UClass* APBSoundOcclusionVolume::pClassPointer = NULL;

// Class PlanBGame.PBSpawnVolumeTDM
// 0x0020 (0x0234 - 0x0214)
class APBSpawnVolumeTDM : public AVolume
{
public:
	TArray< class AActor* >                            ActorsInside;                                     		// 0x0214 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                MortarsInside;                                    		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                GrenadesInside;                                   		// 0x0224 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fEnemiesAspect;                                   		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fGrenadesAspect;                                  		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fMortarsAspect;                                   		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1506 ];

		return pClassPointer;
	};

	void DecGrenadesCount ( );
	void IncGrenadesCount ( );
	void DecMortarsCount ( );
	void IncMortarsCount ( );
	void Reset ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	float CalculatePenalty ( int Team );
	bool UnlistActor ( class AActor* Other );
	void ListActor ( class AActor* Other );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* APBSpawnVolumeTDM::pClassPointer = NULL;

// Class PlanBGame.PBSpecialList
// 0x0010 (0x004C - 0x003C)
class UPBSpecialList : public UObject
{
public:
	class UPBSpecialList*                              pSpecialListArchetype;                            		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPBSpecialContainer >               SpecialList;                                      		// 0x0040 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1507 ];

		return pClassPointer;
	};

	class UPBSpecialList* GetInstance ( );
	struct FString eventGetStringBySpecialCode ( int SpecialCode );
};

UClass* UPBSpecialList::pClassPointer = NULL;

// Class PlanBGame.PBSpecialMove
// 0x0000 (0x003C - 0x003C)
class UPBSpecialMove : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1508 ];

		return pClassPointer;
	};

};

UClass* UPBSpecialMove::pClassPointer = NULL;

// Class PlanBGame.PBSpecialMove_BaseVariableFall
// 0x0000 (0x003C - 0x003C)
class UPBSpecialMove_BaseVariableFall : public UPBSpecialMove
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1509 ];

		return pClassPointer;
	};

};

UClass* UPBSpecialMove_BaseVariableFall::pClassPointer = NULL;

// Class PlanBGame.PBSquadAI
// 0x00BC (0x0294 - 0x01D8)
class APBSquadAI : public AReplicationInfo
{
public:
	class APBTeamInfo*                                 Team;                                             		// 0x01D8 (0x0004) [0x0000000000000000]              
	class AController*                                 SquadLeader;                                      		// 0x01DC (0x0004) [0x0000000000000000]              
	class APBPlayerReplicationInfo*                    LeaderPRI;                                        		// 0x01E0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class APBSquadAI*                                  NextSquad;                                        		// 0x01E4 (0x0004) [0x0000000000000000]              
	class APBGameObjective*                            SquadObjective;                                   		// 0x01E8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                Size;                                             		// 0x01EC (0x0004) [0x0000000000000000]              
	class APBBot*                                      SquadMembers;                                     		// 0x01F0 (0x0004) [0x0000000000000000]              
	struct FString                                     SupportString;                                    		// 0x01F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DefendString;                                     		// 0x0200 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AttackString;                                     		// 0x020C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HoldString;                                       		// 0x0218 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FreelanceString;                                  		// 0x0224 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SupportStringTrailer;                             		// 0x0230 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FName                                       CurrentOrders;                                    		// 0x023C (0x0008) [0x0000000000000020]              ( CPF_Net )
	class APawn*                                       Enemies[ 0x8 ];                                   		// 0x0244 (0x0020) [0x0000000000000000]              
	int                                                MaxSquadSize;                                     		// 0x0264 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFreelance : 1;                                   		// 0x0268 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bFreelanceAttack : 1;                             		// 0x0268 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFreelanceDefend : 1;                             		// 0x0268 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bRoamingSquad : 1;                                		// 0x0268 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bAddTransientCosts : 1;                           		// 0x0268 (0x0004) [0x0000000000000000] [0x00000010] 
	float                                              FormationSize;                                    		// 0x026C (0x0004) [0x0000000000000000]              
	float                                              GatherThreshold;                                  		// 0x0270 (0x0004) [0x0000000000000000]              
	class ANavigationPoint*                            RouteObjective;                                   		// 0x0274 (0x0004) [0x0000000000000000]              
	TArray< class ANavigationPoint* >                  ObjectiveRouteCache;                              		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ANavigationPoint* >                  PreviousObjectiveRouteCache;                      		// 0x0284 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class APBBot*                                      PendingSquadRouteMaker;                           		// 0x0290 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1510 ];

		return pClassPointer;
	};

	bool HandlePathObstruction ( class APBBot* B, class AActor* BlockedBy );
	class APBGameObjective* GetStartObjective ( class APBBot* B );
	bool AcceptableDefensivePosition ( class ANavigationPoint* N, class APBBot* B );
	float RateDefensivePosition ( class ANavigationPoint* N, class APBBot* CurrentBot, class AActor* Center );
	class ANavigationPoint* FindDefensivePositionFor ( class APBBot* B );
	float GetMaxDefenseDistanceFrom ( class AActor* Center );
	bool FriendlyToward ( class APawn* Other );
	bool IsDefending ( class APBBot* B );
	bool ClearPathFor ( class AController* C );
	bool PickRetreatDestination ( class APBBot* B );
	bool BeDevious ( );
	void DisplayDebug ( class AHUD* HUD, float* YL, float* YPos );
	class APBBot* PickBotToReassign ( );
	float BotSuitability ( class APBBot* B );
	bool CheckSquadObjectives ( class APBBot* B );
	bool OverrideFollowPlayer ( class APBBot* B );
	bool IsOnPathToSquadObjective ( class AActor* Goal );
	bool NeverBail ( class APawn* P );
	bool AssignSquadResponsibility ( class APBBot* B );
	void AddTransientCosts ( class APBBot* B, float F );
	bool AllowTaunt ( class APBBot* B );
	bool TellBotToFollow ( class APBBot* B, class AController* C );
	void PickNewLeader ( );
	int GetSize ( );
	struct FString GetShortOrderStringFor ( class APBPlayerReplicationInfo* PRI );
	struct FString GetOrderStringFor ( class APBPlayerReplicationInfo* PRI );
	struct FName GetOrders ( );
	void Retask ( class APBBot* B );
	void SetObjective ( class APBGameObjective* O, unsigned long bForceUpdate );
	void SetDefenseScriptFor ( class APBBot* B );
	void AddBot ( class APBBot* B );
	void RemoveBot ( class APBBot* B );
	void RemovePlayer ( class APlayerController* P );
	void eventSetLeader ( class AController* C );
	bool FindPathToObjective ( class APBBot* B, class AActor* O );
	bool MustCompleteOnFoot ( class AActor* O );
	bool TryToIntercept ( class APBBot* B, class APawn* P, class AActor* RouteGoal );
	void SetAlternatePathTo ( class ANavigationPoint* NewRouteObjective, class APBBot* RouteMaker );
	bool ShouldUseAlternatePaths ( );
	void Initialize ( class APBTeamInfo* T, class APBGameObjective* O, class AController* C );
	void MergeWith ( class APBSquadAI* S );
	bool CloseToLeader ( class APawn* P );
	bool NearFormationCenter ( class APawn* P );
	bool WanderNearLeader ( class APBBot* B );
	bool WaitAtThisPosition ( class APawn* P );
	bool ShouldDeferTo ( class AController* C );
	float AssessThreat ( class APBBot* B, class APawn* NewThreat, unsigned long bThreatVisible );
	bool UnderFire ( class APawn* NewThreat, class APBBot* Ignored );
	float ModifyThreat ( float Current, class APawn* NewThreat, unsigned long bThreatVisible, class APBBot* B );
	bool FindNewEnemyFor ( class APBBot* B, unsigned long bSeeEnemy );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* damageTyp );
	void RemoveEnemy ( class APawn* E );
	bool IsOnSquad ( class AController* C );
	unsigned char PriorityObjective ( class APBBot* B );
	bool SetEnemy ( class APBBot* B, class APawn* NewEnemy );
	bool ValidEnemy ( class APawn* NewEnemy );
	bool AddEnemy ( class APawn* NewEnemy );
	bool MustKeepEnemy ( class APawn* E );
	bool LostEnemy ( class APBBot* B );
	class AActor* FormationCenter ( );
	struct FRotator GetFacingRotation ( );
	class AActor* SetFacingActor ( class APBBot* B );
	bool AllowImpactJumpBy ( class APBBot* B );
	bool AllowTranslocationBy ( class APBBot* B );
	void Destroyed ( );
	bool AllowDetourTo ( class APBBot* B, class ANavigationPoint* N );
	bool ShouldSuppressEnemy ( class APBBot* B );
	void CriticalObjectiveWarning ( class APawn* NewEnemy );
	void Reset ( );
	unsigned char GetTeamNum ( );
};

UClass* APBSquadAI::pClassPointer = NULL;

// Class PlanBGame.PBSynchronizeItemsCommandlet
// 0x0000 (0x007C - 0x007C)
class UPBSynchronizeItemsCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1511 ];

		return pClassPointer;
	};

};

UClass* UPBSynchronizeItemsCommandlet::pClassPointer = NULL;

// Class PlanBGame.PBTaunts
// 0x0018 (0x0054 - 0x003C)
class UPBTaunts : public UObject
{
public:
	TArray< struct FPBTaunt >                          rTaunts;                                          		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UPBTaunts*                                   pTauntsArchetype;                                 		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      FemaleDefaultTaunts[ 0x4 ];                       		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MaleDefaultTaunts[ 0x4 ];                         		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1512 ];

		return pClassPointer;
	};

	int GetTauntIndexFromGuid ( struct FGuid tauntGuid );
	class USoundCue* GetTauntSound ( unsigned char tauntIndex );
	struct FString GetTauntLocalizedName ( unsigned char tauntIndex );
	int GetTauntCount ( );
	class UPBTaunts* GetInstance ( );
	float GetTauntDuration ( unsigned char tauntIndex );
};

UClass* UPBTaunts::pClassPointer = NULL;

// Class PlanBGame.PBTeamInfo
// 0x004C (0x0240 - 0x01F4)
class APBTeamInfo : public ATeamInfo
{
public:
	int                                                DesiredTeamSize;                                  		// 0x01F4 (0x0004) [0x0000000000000000]              
	class APBTeamAI*                                   TAI;                                              		// 0x01F8 (0x0004) [0x0000000000000000]              
	class UMaterial*                                   TeamIcon;                                         		// 0x01FC (0x0004) [0x0000000000000000]              
	class APBGameObjective*                            HomeBase;                                         		// 0x0200 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     tTeamNames[ 0x3 ];                                		// 0x0204 (0x0024) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      BaseTeamColor[ 0x2 ];                             		// 0x0228 (0x0008) [0x0000000000000000]              
	struct FColor                                      TextColor[ 0x2 ];                                 		// 0x0230 (0x0008) [0x0000000000000000]              
	int                                                iStartingTeamPlayers;                             		// 0x0238 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPendingPerfectVictory : 1;                       		// 0x023C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1513 ];

		return pClassPointer;
	};

	int GetNumberOfPlayerInTeam ( int iTeamIndex );
	int GetNumberOfHumanPlayer ( int iTeamIndex );
	void eventDestroyed ( );
	void SetBotOrders ( class APBBot* NewBot );
	struct FColor GetTextColor ( );
	int GetTeamPRIs ( unsigned long bOnlyReadyToPlay, TArray< class APlayerReplicationInfo* >* outTeamPlayers );
	struct FColor GetHUDColor ( );
	void RemoveFromTeam ( class AController* Other );
	bool AddToTeam ( class AController* Other );
	float GetTeamScore ( );
	void AddTeamScore ( int iAmount );
	void ResetScore ( );
	void PostBeginPlay ( );
	struct FString GetHumanReadableName ( );
};

UClass* APBTeamInfo::pClassPointer = NULL;

// Class PlanBGame.PBTexture2DComposite
// 0x001C (0x010C - 0x00F0)
class UPBTexture2DComposite : public UTexture
{
public:
	int                                                SizeX;                                            		// 0x00F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SizeY;                                            		// 0x00F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FPBSourceTexture2DRegion >          SourceRegions;                                    		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CurrentFinishStep;                                		// 0x0104 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    ValidRegions;                                     		// 0x0108 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1514 ];

		return pClassPointer;
	};

	void CalculateForcedResidentMipCounts ( );
	void ResetSourceRegions ( );
	bool FinishCreateCompositeTexture ( );
	void CreateCompositeTexture ( );
	bool SourceTexturesFullyStreamedIn ( );
};

UClass* UPBTexture2DComposite::pClassPointer = NULL;

// Class PlanBGame.PBUIDataStore_OnlineBuddies
// 0x0030 (0x0098 - 0x0068)
class UPBUIDataStore_OnlineBuddies : public UUIDataStore
{
public:
	TArray< struct FBuddyEntry >                       BuddyList;                                        		// 0x0068 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FBuddyEntry                                 TempBuddyEntry;                                   		// 0x0074 (0x0024) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1515 ];

		return pClassPointer;
	};

	int eventNum ( );
	void Empty ( );
	void RemoveRecord ( struct FString NickName );
	void UpdateRecord ( struct FString NickName, struct FName CellTag, struct FString Value );
	void AddRecord ( struct FString OnlineStatus, struct FString NickName, struct FString MessageStatus );
};

UClass* UPBUIDataStore_OnlineBuddies::pClassPointer = NULL;

// Class PlanBGame.PBUIDataStore_OnlineStats
// 0x00D4 (0x01A4 - 0x00D0)
class UPBUIDataStore_OnlineStats : public UUIDataStore_OnlineStats
{
public:
	unsigned long                                      bInRead : 1;                                      		// 0x00D0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bStatisticsChanged : 1;                           		// 0x00D0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bInQueuePump : 1;                                 		// 0x00D0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	TArray< class UOnlineStatsRead* >                  ReadQueue;                                        		// 0x00D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UOnlineStatsRead*                            PlayerStats;                                      		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FStatsArray                                 WeaponStats;                                      		// 0x00E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FStatsArray >                       MapStats;                                         		// 0x00F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FUniqueNetId                                DetailsPlayerNetId;                               		// 0x00FC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     DetailsPlayerNick;                                		// 0x0104 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                GameModeId;                                       		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MatchTypeId;                                      		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                StatsReadObjectStartIndex;                        		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FScriptDelegate >                   TempStatsReadDelegateArray;                       		// 0x011C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             CalculatedOverallWeaponStats;                     		// 0x0128 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTCalculatedOverallWeaponStatistics > CalculatedOverallWeaponStatsStruct;               		// 0x0134 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTCalculatedOverallWeaponStatistics         CalculatedStatsForAllMaps;                        		// 0x0140 (0x0034) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             CalculatedOverallPerWeaponStats;                  		// 0x0174 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTCalculatedOverallWeaponStatistics > CalculatedOverallPerWeaponStatsStruct;            		// 0x0180 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UPBGameComplexStatRead* >            m_ComplexReaders;                                 		// 0x018C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnStatsReadComplete__Delegate;                  		// 0x0198 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1516 ];

		return pClassPointer;
	};

	void OnReadComplete ( unsigned long bWasSuccessful );
	void FillCalculatedParameters ( );
	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventInit ( );
	void OnLoginChanged ( unsigned char LocalUserNum );
	void Read_WeaponStats ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate );
	void Read_PlayerStats ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate );
	void _IntRead_Stats ( class UClass* StatClass, struct FScriptDelegate ReadOnlineStatsCompleteDelegate );
	void AddStatsReadDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate );
	void LogCalculatedStruct ( int nMapIndex, struct FTCalculatedOverallWeaponStatistics* CalcStat );
	bool TryPumpingQueue ( );
	bool FindOrCreateComplexReader ( class UOnlineStatsRead* ReadObj );
	void AddToReadQueue ( class UOnlineStatsRead* ReadObj );
	void CalculateOverallStats ( );
	void OnStatsReadComplete ( unsigned long bWasSuccessful );
};

UClass* UPBUIDataStore_OnlineStats::pClassPointer = NULL;

// Class PlanBGame.PBViewportClient
// 0x005C (0x0184 - 0x0128)
class UPBViewportClient : public UGameViewportClient
{
public:
	class UTexture2D*                                  LoadBackground;                                   		// 0x0128 (0x0004) [0x0000000000000000]              
	struct FString                                     LevelActionMessages[ 0x6 ];                       		// 0x012C (0x0048) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              LastTimeIdle;                                     		// 0x0174 (0x0004) [0x0000000000000000]              
	float                                              IdleTimeToKick;                                   		// 0x0178 (0x0004) [0x0000000000000000]              
	float                                              IdleWarningTime;                                  		// 0x017C (0x0004) [0x0000000000000000]              
	unsigned long                                      bLoadingMovieShown : 1;                           		// 0x0180 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bKickNotified : 1;                                		// 0x0180 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1517 ];

		return pClassPointer;
	};

	void GetBackBufferSize ( struct FVector2D* Size );
	void NotifyConnectionError ( unsigned char MessageType, struct FString Message, struct FString Title );
	void RenderHeader ( class UCanvas* Canvas );
	void DrawTransition ( class UCanvas* Canvas );
	void eventTick ( float DeltaTime );
	void eventShowLoadingMovie ( unsigned long bShow );
	void HideLoadingMovie ( unsigned long bForceClose );
};

UClass* UPBViewportClient::pClassPointer = NULL;

// Class PlanBGame.PBWeapon
// 0x0000 (0x02C8 - 0x02C8)
class APBWeapon : public AWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1518 ];

		return pClassPointer;
	};

};

UClass* APBWeapon::pClassPointer = NULL;

// Class PlanBGame.PBWeaponAttachment
// 0x0000 (0x01D8 - 0x01D8)
class APBWeaponAttachment : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1519 ];

		return pClassPointer;
	};

};

UClass* APBWeaponAttachment::pClassPointer = NULL;

// Class PlanBGame.PBWeaponAttachmentComponent
// 0x0007 (0x060C - 0x0605)
class UPBWeaponAttachmentComponent : public USkeletalMeshComponent
{
public:
	class APBWeaponAttachment*                         WeaponAttachment;                                 		// 0x0608 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1520 ];

		return pClassPointer;
	};

};

UClass* UPBWeaponAttachmentComponent::pClassPointer = NULL;

// Class PlanBGame.PlanBTypes
// 0x0000 (0x003C - 0x003C)
class UPlanBTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1521 ];

		return pClassPointer;
	};

	unsigned char OppositeDirection ( unsigned char normSide );
	unsigned char GetNextDirection ( unsigned char normSide );
};

UClass* UPlanBTypes::pClassPointer = NULL;

// Class PlanBGame.PBActorFactoryPhysicsAssetDestructible
// 0x0000 (0x0080 - 0x0080)
class UPBActorFactoryPhysicsAssetDestructible : public UActorFactoryPhysicsAsset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1522 ];

		return pClassPointer;
	};

};

UClass* UPBActorFactoryPhysicsAssetDestructible::pClassPointer = NULL;

// Class PlanBGame.PBPhysicsAssetDestructible
// 0x0000 (0x01E8 - 0x01E8)
class APBPhysicsAssetDestructible : public APBPhysicsAssetSynchronized
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1523 ];

		return pClassPointer;
	};

};

UClass* APBPhysicsAssetDestructible::pClassPointer = NULL;

// Class PlanBGame.PBSkeletalBoneStates
// 0x0000 (0x005C - 0x005C)
class UPBSkeletalBoneStates : public UPBSkeletalBoneStatesBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1524 ];

		return pClassPointer;
	};

};

UClass* UPBSkeletalBoneStates::pClassPointer = NULL;

// Class PlanBGame.PBSeqAct_Base
// 0x0000 (0x00FC - 0x00FC)
class UPBSeqAct_Base : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1525 ];

		return pClassPointer;
	};

	bool eventUpdate ( float DeltaTime );
};

UClass* UPBSeqAct_Base::pClassPointer = NULL;

// Class PlanBGame.PBSeqAct_SetVelocity
// 0x0018 (0x0114 - 0x00FC)
class UPBSeqAct_SetVelocity : public USequenceAction
{
public:
	struct FVector                                     MinVelocity;                                      		// 0x00FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxVelocity;                                      		// 0x0108 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1526 ];

		return pClassPointer;
	};

};

UClass* UPBSeqAct_SetVelocity::pClassPointer = NULL;

// Class PlanBGame.PBSeqCond_IsExternalBuild
// 0x0000 (0x00E4 - 0x00E4)
class UPBSeqCond_IsExternalBuild : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1527 ];

		return pClassPointer;
	};

};

UClass* UPBSeqCond_IsExternalBuild::pClassPointer = NULL;

// Class PlanBGame.PBSeqCond_IsTeam
// 0x0004 (0x00E8 - 0x00E4)
class UPBSeqCond_IsTeam : public USequenceCondition
{
public:
	float                                              teamNumber;                                       		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1528 ];

		return pClassPointer;
	};

};

UClass* UPBSeqCond_IsTeam::pClassPointer = NULL;

// Class PlanBGame.PBAnimNodeBlendHeadCrab
// 0x0004 (0x0124 - 0x0120)
class UPBAnimNodeBlendHeadCrab : public UPBAnim_BlendList
{
public:
	class APBActorController*                          HeadCrabPawn;                                     		// 0x0120 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1529 ];

		return pClassPointer;
	};

};

UClass* UPBAnimNodeBlendHeadCrab::pClassPointer = NULL;

// Class PlanBGame.PBAnim_BlendBySprint
// 0x0004 (0x0128 - 0x0124)
class UPBAnim_BlendBySprint : public UPBAnimBlendBase
{
public:
	class APBPawn*                                     pCachedPawn;                                      		// 0x0124 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1530 ];

		return pClassPointer;
	};

};

UClass* UPBAnim_BlendBySprint::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByTurnInPlace
// 0x0008 (0x012C - 0x0124)
class UPBAnimBlendByTurnInPlace : public UPBAnimBlendBase
{
public:
	float                                              RootYawSpeedThresh;                               		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnInPlaceBlendSpeed;                            		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1531 ];

		return pClassPointer;
	};

};

UClass* UPBAnimBlendByTurnInPlace::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByGliding
// 0x0000 (0x0114 - 0x0114)
class UPBAnimBlendByGliding : public UAnimNodeBlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1532 ];

		return pClassPointer;
	};

};

UClass* UPBAnimBlendByGliding::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByProfile
// 0x001C (0x0130 - 0x0114)
class UPBAnimBlendByProfile : public UAnimNodeBlendList
{
public:
	TArray< struct FName >                             ProfileNames;                                     		// 0x0114 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              BlendTime;                                        		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBPawn*                                     WarPawnOwner;                                     		// 0x0124 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FName                                       CurProfileName;                                   		// 0x0128 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1533 ];

		return pClassPointer;
	};

	void ChangeProfile ( struct FName InProfileName );
};

UClass* UPBAnimBlendByProfile::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByReloadMinigame
// 0x0008 (0x011C - 0x0114)
class UPBAnimBlendByReloadMinigame : public UAnimNodeBlendList
{
public:
	class APBPawn*                                     WarPawnOwner;                                     		// 0x0114 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bReadyForNewMinigame : 1;                         		// 0x0118 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bAlreadyInterruptedReload : 1;                    		// 0x0118 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1534 ];

		return pClassPointer;
	};

	void SetActiveChild ( int ChildIndex, float BlendTime );
};

UClass* UPBAnimBlendByReloadMinigame::pClassPointer = NULL;

// Class PlanBGame.PBAnimBlendByTaunt
// 0x0009 (0x011D - 0x0114)
class UPBAnimBlendByTaunt : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBPawn*                                     WarPawnOwner;                                     		// 0x0118 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      CurrentTauntIndex;                                		// 0x011C (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1535 ];

		return pClassPointer;
	};

	void eventAnimStartTaunt ( );
	void eventAnimStopTaunt ( );
	void ChangeTaunt ( unsigned char InTauntIndex );
};

UClass* UPBAnimBlendByTaunt::pClassPointer = NULL;

// Class PlanBGame.PBAnimNodeBlendDirectional
// 0x0013 (0x0104 - 0x00F1)
class UPBAnimNodeBlendDirectional : public UAnimNodeBlendBase
{
public:
	float                                              BlendSpeed;                                       		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInterpolateWeights : 1;                          		// 0x00F8 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	float                                              DirAngle;                                         		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                SingleAnimAtOrAboveLOD;                           		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1536 ];

		return pClassPointer;
	};

};

UClass* UPBAnimNodeBlendDirectional::pClassPointer = NULL;

// Class PlanBGame.PBAnimNodeBlendGliding
// 0x0003 (0x00F4 - 0x00F1)
class UPBAnimNodeBlendGliding : public UAnimNodeBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1537 ];

		return pClassPointer;
	};

};

UClass* UPBAnimNodeBlendGliding::pClassPointer = NULL;

// Class PlanBGame.PBAnimNodeBlendPaperPlane
// 0x0037 (0x0128 - 0x00F1)
class UPBAnimNodeBlendPaperPlane : public UAnimNodeBlendBase
{
public:
	class APBPaperPlanePawn*                           PaperPlanePawn;                                   		// 0x00F4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                DirectionState;                                   		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentWeightIdle;                                		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetWeightIdle;                                 		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentWeightUp;                                  		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetWeightUp;                                   		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentWeightRight;                               		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetWeightRight;                                		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentWeightDown;                                		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetWeightDown;                                 		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentWeightLeft;                                		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetWeightLeft;                                 		// 0x0120 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendSpeed;                                       		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1538 ];

		return pClassPointer;
	};

};

UClass* UPBAnimNodeBlendPaperPlane::pClassPointer = NULL;

// Class PlanBGame.PBAnimNodeBlendSkillUsage
// 0x0010 (0x0124 - 0x0114)
class UPBAnimNodeBlendSkillUsage : public UAnimNodeBlendList
{
public:
	unsigned long                                      bBlendToIdleOnlyAfterUseFinishes : 1;             		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      PlayingUseOnce : 1;                               		// 0x0114 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              fBlendToIdleTime;                                 		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBlendToUseTime;                                  		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBCharacter*                                PBCharacterCached;                                		// 0x0120 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1539 ];

		return pClassPointer;
	};

};

UClass* UPBAnimNodeBlendSkillUsage::pClassPointer = NULL;

// Class PlanBGame.PBAnimNodeRandom
// 0x001C (0x0130 - 0x0114)
class UPBAnimNodeRandom : public UAnimNodeBlendList
{
public:
	TArray< struct FRandomAnimInfo >                   RandomInfo;                                       		// 0x0114 (0x000C) [0x0000000004400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )
	class UAnimNodeSequence*                           PlayingSeqNode;                                   		// 0x0120 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PendingChildIndex;                                		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RandomSeed;                                       		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      RandomSeedValid : 1;                              		// 0x012C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1540 ];

		return pClassPointer;
	};

	void InitializeSeed ( int Seed );
	void SynchronizeWith ( class UPBAnimNodeRandom* OtherNode );
};

UClass* UPBAnimNodeRandom::pClassPointer = NULL;

// Class PlanBGame.PBAnimNotify_SetBoneScale
// 0x000C (0x004C - 0x0040)
class UPBAnimNotify_SetBoneScale : public UAnimNotify
{
public:
	struct FName                                       BoneName;                                         		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              NewScale;                                         		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1541 ];

		return pClassPointer;
	};

};

UClass* UPBAnimNotify_SetBoneScale::pClassPointer = NULL;

// Class PlanBGame.PBAnimNotify_Sound
// 0x0004 (0x0060 - 0x005C)
class UPBAnimNotify_Sound : public UAnimNotify_Sound
{
public:
	unsigned long                                      PlayOnAllButOwningClient : 1;                     		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      PlayOnOwningClientOnly : 1;                       		// 0x005C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1542 ];

		return pClassPointer;
	};

};

UClass* UPBAnimNotify_Sound::pClassPointer = NULL;

// Class PlanBGame.PBAnimNotify_SoundEx
// 0x0004 (0x0064 - 0x0060)
class UPBAnimNotify_SoundEx : public UPBAnimNotify_Sound
{
public:
	unsigned long                                      NotifyOnReversePlay : 1;                          		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1543 ];

		return pClassPointer;
	};

};

UClass* UPBAnimNotify_SoundEx::pClassPointer = NULL;

// Class PlanBGame.PBSkelControl_AddRotation
// 0x0030 (0x00EC - 0x00BC)
class UPBSkelControl_AddRotation : public USkelControlBase
{
public:
	unsigned long                                      bApplyTranslation : 1;                            		// 0x00BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAddTranslation : 1;                              		// 0x00BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bApplyRotation : 1;                               		// 0x00BC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAddRotation : 1;                                 		// 0x00BC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FVector                                     BoneTranslation;                                  		// 0x00C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneTranslationSpace;                             		// 0x00CC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TranslationSpaceBoneName;                         		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    BoneRotation;                                     		// 0x00D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RotationSpaceBoneName;                            		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1544 ];

		return pClassPointer;
	};

};

UClass* UPBSkelControl_AddRotation::pClassPointer = NULL;

// Class PlanBGame.PBSkelControl_LookAt
// 0x0010 (0x0168 - 0x0158)
class UPBSkelControl_LookAt : public USkelControlLookAt
{
public:
	unsigned long                                      bLimitYaw : 1;                                    		// 0x0158 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLimitPitch : 1;                                  		// 0x0158 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLimitRoll : 1;                                   		// 0x0158 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bShowPerAxisLimits : 1;                           		// 0x0158 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              YawLimit;                                         		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchLimit;                                       		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollLimit;                                        		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1545 ];

		return pClassPointer;
	};

};

UClass* UPBSkelControl_LookAt::pClassPointer = NULL;

// Class PlanBGame.PBCameraMover
// 0x0038 (0x0074 - 0x003C)
class UPBCameraMover : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AActor*                                      mCamera;                                          		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      mbMove : 1;                                       		// 0x0044 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FTMoverStruct                               mMover;                                           		// 0x0048 (0x002C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1546 ];

		return pClassPointer;
	};

	void eventTick ( float fDelta );
	void Release ( );
	void Stop ( );
	void _Move ( float fDelta );
	void Move ( unsigned long bMoveImmediately, struct FTMoverStruct* Mover );
	void SetCamera ( class AActor* Cam );
};

UClass* UPBCameraMover::pClassPointer = NULL;

// Class PlanBGame.PBCharacterNamesPrinterScaleform
// 0x00D8 (0x0114 - 0x003C)
class UPBCharacterNamesPrinterScaleform : public UObject
{
public:
	class UPBGFxObject_HUD*                            m_Owner;                                          		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FTCharPrinterInfoScaleform >        m_InfoArray;                                      		// 0x0040 (0x000C) [0x0000000000502000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTCharPrinterInfoScannedScaleform > m_InfoArrayScanned;                               		// 0x004C (0x000C) [0x0000000000502000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTCharPrinterInfoScaleform >        m_InfoArrayTurrets;                               		// 0x0058 (0x000C) [0x0000000000502000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTCharPrinterBasicScaleform >       m_BasicInfo;                                      		// 0x0064 (0x000C) [0x0000000000502000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTCharPrinterMinimapInfoScaleform > m_MinimapArray;                                   		// 0x0070 (0x000C) [0x0000000000502000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTCharPrinterMinimapInfoScaleform > m_MinimapArrayScanned;                            		// 0x007C (0x000C) [0x0000000000502000]              ( CPF_Transient | CPF_NeedCtorLink )
	class APBPlayerController*                         m_playerController;                               		// 0x0088 (0x0004) [0x0000000000102000]              ( CPF_Transient )
	TArray< struct FTReveal >                          m_RevealBuffer;                                   		// 0x008C (0x000C) [0x0000000000502000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m_PlayerTeam;                                     		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      m_PlayerIndicatorWidgets;                         		// 0x009C (0x000C) [0x0000000000502000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m_NextWidget;                                     		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fZOffset;                                         		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxAlpha;                                        		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTransparentColorAlpha;                           		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTeamNameFadeoutTime;                             		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCrosshairArea;                                   		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEnemyNameFadeoutTime;                            		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEnemyNameFadeinTime;                             		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                cDamageColor;                                     		// 0x00C8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                cObjectiveColor;                                  		// 0x00D8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                cObjectiveDamageColor;                            		// 0x00E8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDamageStateFlickTime;                            		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDamageStateDuration;                             		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fScannedInfoTime;                                 		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fScannedMinimapTime;                              		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fScannedFadeoutTime;                              		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                initialTickValue;                                 		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iMaxPlayerIndications;                            		// 0x0110 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1547 ];

		return pClassPointer;
	};

	void RemovePawnFromRevealBuffer ( class APBPawn* pPawn );
	void AddScannedPawn ( class AActor* pPawn, unsigned long showOnHUD );
	void UpdateScreenSpacePositionForOneActorCanBeOffscreen ( class AActor* OutActor, struct FVector CameraLoc, struct FRotator CameraRot, struct FVector positionOffset, unsigned long checkVisible, float Radius );
	void UpdateScreenSpacePositionForOneActor ( class AActor* OutActor, struct FVector CameraLoc, struct FRotator CameraRot, struct FVector positionOffset, unsigned long checkVisible, float Radius );
	void UpdateMinimapPositions ( struct FVector playerLocation, float rotationAngle, float minimapSizeX, float minimapSizeY );
	void UpdateMinimapTeam ( class APBPawn* Pawn, struct FTCharPrinterMinimapInfoScaleform* Info );
	void CreateMinimapTeam ( class APBPawn* Pawn, struct FTCharPrinterMinimapInfoScaleform* Info );
	void DeleteUnticked ( );
	void UpdateAlphasMinimap ( );
	void UpdateAlphas ( );
	void Tick ( float DeltaTime, class APBPlayerController* pPlayerController );
	void ResetMinimapWidgets ( );
	void resetWidgets ( );
	struct FLinearColor eventDetermineTeamColor ( unsigned long showingAlternateDamageColour, class APBPawn* OtherPawn, int* carryingC4 );
};

UClass* UPBCharacterNamesPrinterScaleform::pClassPointer = NULL;

// Class PlanBGame.PBCharacterRotator
// 0x003C (0x0078 - 0x003C)
class UPBCharacterRotator : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FTCharacterRotator >                mCharacters;                                      		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTCharacterRotator                          mBase;                                            		// 0x004C (0x0024) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      mCamera;                                          		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      mbRotate : 1;                                     		// 0x0074 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1548 ];

		return pClassPointer;
	};

	void stopRotation ( );
	void eventTick ( float fDelta );
	void rotateTo ( int nIndex, float fVelocity, float fCharacterVelocity );
	void rotateCharacter ( int nIndex, struct FRotator rGoal, float fVelocity, unsigned long bNormalize );
	void rotateCharacterWithDelta ( int nIndex, struct FRotator rDelta, float fVelocity, unsigned long bNormalize );
	void setCameraActor ( class AActor* Camera );
	void setBaseActor ( class AActor* Base );
	void addCharacterActor ( class AActor* Character );
	void Release ( );
};

UClass* UPBCharacterRotator::pClassPointer = NULL;

// Class PlanBGame.PBCharacterSelector
// 0x006C (0x00A8 - 0x003C)
class UPBCharacterSelector : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              PositionPercent;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              MaxSpeed;                                         		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              FadeInPerc;                                       		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              FadeOutPerc;                                      		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              MinSpeed;                                         		// 0x0050 (0x0004) [0x0000000000000000]              
	TArray< struct FTCharacterSelector >               mCharacters;                                      		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ASplineActor* >                      SplineTargetList;                                 		// 0x0060 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTCharacterPath >                   PathList;                                         		// 0x006C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTCharacterRotator                          mBase;                                            		// 0x0078 (0x0024) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      mCamera;                                          		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrPosition;                                     		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                TargetPosition;                                   		// 0x00A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1549 ];

		return pClassPointer;
	};

	void updatePath ( float fDelta, int Idx );
	void eventTick ( float fDelta );
	void MoveCharacters ( int nextIndex, int currIndex );
	void resetCharacterLocation ( );
	void AddPath ( class AActor* SplineSource, class AActor* SplineTarget );
	void setCameraActor ( class AActor* Camera );
	void setBaseActor ( class AActor* Base );
	void addCharacterActor ( class AActor* Character );
	void Release ( );
};

UClass* UPBCharacterSelector::pClassPointer = NULL;

// Class PlanBGame.PBEquipmentMap
// 0x003C (0x0078 - 0x003C)
class UPBEquipmentMap : public UObject
{
public:
	struct FMap_Mirror                                 EquipmentMap;                                     		// 0x003C (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1550 ];

		return pClassPointer;
	};

	bool GetEquipment ( int CurrentIteratorIndex, struct FTGlobalBasketEquipment* EQ );
	void SetEquipment ( struct FName Category, struct FTGlobalBasketEquipment* EQ );
	bool FindEquipment ( struct FName Category, struct FTGlobalBasketEquipment* EQ );
};

UClass* UPBEquipmentMap::pClassPointer = NULL;

// Class PlanBGame.PBGameInteraction
// 0x0004 (0x016C - 0x0168)
class UPBGameInteraction : public UUIInteraction
{
public:
	int                                                BlockUIInputSemaphore;                            		// 0x0168 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1551 ];

		return pClassPointer;
	};

	void NotifyGameSessionEnded ( );
	void eventBlockUIInput ( unsigned long bBlock );
	void eventClearUIInputBlocks ( );
	bool ShouldProcessUIInput ( );
};

UClass* UPBGameInteraction::pClassPointer = NULL;

// Class PlanBGame.PBGameUISceneClient
// 0x0000 (0x015C - 0x015C)
class UPBGameUISceneClient : public UGameUISceneClient
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1552 ];

		return pClassPointer;
	};

	void PrepareForWorldCleanup ( );
	void NotifyGameSessionEnded ( );
	bool IsInSeamlessTravel ( );
	class AWorldInfo* GetWorldInfo ( );
};

UClass* UPBGameUISceneClient::pClassPointer = NULL;

// Class PlanBGame.PBGFxGameUISceneClient
// 0x0004 (0x0160 - 0x015C)
class UPBGFxGameUISceneClient : public UPBGameUISceneClient
{
public:
	class UPBGFxMovie_Main*                            mMainMovie;                                       		// 0x015C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1553 ];

		return pClassPointer;
	};

	void NotifyGameSessionEnded ( );
	class UPBGFxMovie_Background* getBackgroundMovie ( );
	class UPBGFxMovie_Main* getMainMovie ( );
	void eventInitializeSceneClient ( );
};

UClass* UPBGFxGameUISceneClient::pClassPointer = NULL;

// Class PlanBGame.PBGenericDataStore
// 0x0000 (0x0068 - 0x0068)
class UPBGenericDataStore : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1554 ];

		return pClassPointer;
	};

	class UUIDataProvider* GetProvider ( struct FString FieldName );
	void RemoveProvider ( struct FString FieldName );
	void AddProvider ( struct FString FieldName, class UUIDataProvider* Provider );
};

UClass* UPBGenericDataStore::pClassPointer = NULL;

// Class PlanBGame.PBGFxMoviePlayer_Tickable
// 0x0004 (0x0184 - 0x0180)
class UPBGFxMoviePlayer_Tickable : public UGFxMoviePlayer
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x0180 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1555 ];

		return pClassPointer;
	};

	void eventTickNoPlayer ( float fDelta );
	void eventTick ( float fDelta );
};

UClass* UPBGFxMoviePlayer_Tickable::pClassPointer = NULL;

// Class PlanBGame.PBGFxMovie_Layered
// 0x0070 (0x01F4 - 0x0184)
class UPBGFxMovie_Layered : public UPBGFxMoviePlayer_Tickable
{
public:
	TArray< struct FTGFxLayer >                        mLayers;                                          		// 0x0184 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTGFxClasses >                      mClasses;                                         		// 0x0190 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UGFxObject*                                  mMainScene;                                       		// 0x019C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FTGFxLayer >                        mDeletedMovies;                                   		// 0x01A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           mDeletedMovieNames;                               		// 0x01AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_commandToKey__Delegate;                  		// 0x01B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifyResolutionChanged__Delegate;              		// 0x01C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __onMovieOpened__Delegate;                        		// 0x01D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __onMovieClosed__Delegate;                        		// 0x01DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __onMovieDeleted__Delegate;                       		// 0x01E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1556 ];

		return pClassPointer;
	};

	void ShowMovie ( unsigned long bShow );
	bool ProjectScreenPosToWorld ( class AActor* CameraActor, struct FVector vScreenPos, float fPlaneDistance, struct FVector* vWorldPos );
	void OnResolutionChanged ( struct FVector2D* NewViewportSize );
	class UGFxObject* FindObjectByClass ( class UClass* ObjectClass );
	void ReleaseLayers ( );
	void eventOnClose ( );
	bool Start ( unsigned long StartPaused );
	void setCommandToKeyDelegate ( struct FScriptDelegate F );
	void setOnMovieDeletedDelegate ( struct FScriptDelegate F );
	void setOnMovieClosedDelegate ( struct FScriptDelegate F );
	void setOnMovieOpenedDelegate ( struct FScriptDelegate F );
	void eventTick ( float fDelta );
	void onMovieDeleted ( struct FString sMovieName );
	void onMovieClosed ( struct FString sMovieName );
	void onMovieOpened ( struct FString sMovieName, struct FString sMovieFileName, int Layer );
	void NotifyResolutionChanged ( struct FVector2D* NewViewportSize );
	struct FString Unreal_commandToKey ( struct FString sCommand );
};

UClass* UPBGFxMovie_Layered::pClassPointer = NULL;

// Class PlanBGame.PBGFxMovie_Main
// 0x0104 (0x02F8 - 0x01F4)
class UPBGFxMovie_Main : public UPBGFxMovie_Layered
{
public:
	class UPBGFxMovie_Background*                      mBackground;                                      		// 0x01F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      mbCriticalError : 1;                              		// 0x01F8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      mbAsyncCriticalError : 1;                         		// 0x01F8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      mbAsyncPopupError : 1;                            		// 0x01F8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      mbAsyncModalError : 1;                            		// 0x01F8 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      mbLogoutPlayer : 1;                               		// 0x01F8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      mbAttempReconnect : 1;                            		// 0x01F8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      mbIgnoreNextInvalidSession : 1;                   		// 0x01F8 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      mbLoadingScreenVisible : 1;                       		// 0x01F8 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      mbVisible : 1;                                    		// 0x01F8 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      mbWrongVersion : 1;                               		// 0x01F8 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bWasLoadingScreenVisible : 1;                     		// 0x01F8 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      mbSecurityCamera : 1;                             		// 0x01F8 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      SkipToServerBrowser : 1;                          		// 0x01F8 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      SkipToQuickPlay : 1;                              		// 0x01F8 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      AttemptedAutoLogin : 1;                           		// 0x01F8 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bAttemptedPreAuthedLogin : 1;                     		// 0x01F8 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bAttemptedAutoCharSelection : 1;                  		// 0x01F8 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bAttemptedAutoOpenCmd : 1;                        		// 0x01F8 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      mbLoginOpened : 1;                                		// 0x01F8 (0x0004) [0x0000000000000000] [0x00040000] 
	struct FString                                     mbAsyncCriticalErrorStr;                          		// 0x01FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     mbAsyncPopupErrorStr;                             		// 0x0208 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     mbAsyncModalErrorStr;                             		// 0x0214 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     notificationDetail_title;                         		// 0x0220 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     notificationDetail_text;                          		// 0x022C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     notificationDetail_iconPath;                      		// 0x0238 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     notificationMessage_text;                         		// 0x0244 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              notificationMessage_duration;                     		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mErrorCode;                                       		// 0x0254 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       mPlayerControllerName;                            		// 0x0258 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              _3dMenuMovement;                                  		// 0x0260 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              _3dHUDMovement;                                   		// 0x0264 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fLoadingMovieTimeOut;                             		// 0x0268 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fTimeLoadingMovieOpened;                          		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReconnectTimeout;                                 		// 0x0270 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                mEULAIndex;                                       		// 0x0274 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mDelayedPopupErrorMovie;                          		// 0x0278 (0x0004) [0x0000000000000000]              
	struct FString                                     mDelayedPopupErrorMovieReason;                    		// 0x027C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UPBUICache*                                  m_UICacheReference;                               		// 0x0288 (0x0004) [0x0000000000000000]              
	TArray< struct FScriptDelegate >                   mForegroundDelegates;                             		// 0x028C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __onForegroundChanged__Delegate;                  		// 0x0298 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_IgnorePlayerInput__Delegate;             		// 0x02A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onSetMouseVisibility__Delegate;          		// 0x02B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onTextInputFocused__Delegate;            		// 0x02BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_playSound__Delegate;                     		// 0x02C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __PostInitialize__Delegate;                       		// 0x02D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __openBackground__Delegate;                       		// 0x02E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __closeBackground__Delegate;                      		// 0x02EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1557 ];

		return pClassPointer;
	};

	void ShowAllHudElements ( );
	void UpdateCurrentRank ( class APBPlayerReplicationInfo* PRI );
	void UpdatingAmmountPostPurchase ( );
	void Call_setFinalRelease ( unsigned long bFianlRelease );
	void Call_setSteamClient ( unsigned long bSteam );
	void C4Pulse ( );
	void updateSNDNextRoundTimer ( int Time );
	void showRoundEndReason ( unsigned long bShow );
	void renewMinimapImage ( );
	void resetMinimapImage ( );
	void SetClosedBetaTextVisible ( unsigned long bVisible );
	void SetHTVVisible ( unsigned long bVisible );
	void ToolSetMouseVisibility ( unsigned long bVisible );
	void CloseMovie ( int nLayer );
	void OpenMovie ( struct FString Movie, int nLayer );
	void NotifyRobotOwningTeamChanged ( unsigned char OwningTeam );
	void SetHUDGameMode ( unsigned char gameMode );
	void SkillsHaveChanged ( );
	void CallDownMortarFromMap ( );
	void DebugPlayerMarkers ( );
	void PrintHUDStats ( );
	int SetSelectedWeapon ( unsigned long bApplyChange );
	void ShowEquipmentByIndex ( unsigned char T );
	void ShowEquipment ( unsigned long Direction );
	bool ChangeHUDState ( unsigned char NewState );
	void UpdateServerDisplay ( unsigned long bChangedLobbySettingsLock );
	void SetGlobalChatChanel ( unsigned long globalChat );
	void SetScaleformHUDVisible ( unsigned long isVisible );
	void RefreshServerBrowser ( );
	void ShowPassiveVoteNotification ( struct FString Title, struct FString Message );
	void ShowVoteResult ( struct FString Title, struct FString Message );
	void TriggerHideVoteInfo ( );
	void ShowVotedOption ( unsigned long bVotedYes );
	void UpdateVoteCount ( int YesVoteCount, int NoVoteCount );
	void SetupNewVoting ( struct FString Message, struct FString EventDescription, int YesVoteCount, int NoVoteCount );
	void HandleLostFocus ( );
	void EndBerserkEffect ( );
	void StartBerserkEffect ( );
	void RemovePawnFromRevealBuffer ( class APBPawn* pPawn );
	void removeChests ( );
	void addChest ( class APBChest* chest );
	void EndControlHeadCrab ( );
	void StartControlHeadCrab ( );
	void EndControlPlane ( );
	void StartControlPlane ( );
	void LockHeatBuffer ( );
	void TauntEnd ( );
	void TauntStart ( );
	void NotifyRevealedOnMinimap ( );
	void NotifyMinimapSweepPerformed ( );
	void AddPlayerToMinimap ( class AActor* pPawn, unsigned long bScanned );
	void callAddDetailNotificationCount ( int NewE );
	void callShowDetailNotification ( );
	void AddNotificationDetail ( struct FString Title, struct FString Text, struct FString iconPath );
	void AsyncAddNotificationDetail ( );
	bool FadeNotificationPopUp ( float Time );
	void callCloseNotification ( );
	void callShowNotification ( );
	void AddNotificationMessageLoad ( );
	bool AddNotificationMessage ( struct FString Text, float Duration );
	bool AddNotificationPopUp ( struct FString Title, struct FString Text, struct FString iconPath );
	bool isShowingNotifications ( );
	void ShowMessageAboveCrosshair ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void AddChatMessage ( struct FString PlayerName, struct FString msg, unsigned char pType, unsigned long IsGlobal );
	void AddDeathMessage ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim, int iPersonalKills, unsigned char SpecialDeath, int WeaponCode, struct FString sSkillWeaponCode, class UClass* dmgType );
	void OnResolutionChanged ( struct FVector2D* NewViewportSize );
	void showShopScene ( struct FString sSceneName );
	void StopNavigation ( );
	void eventTick ( float fDelta );
	void NavigateToItem ( struct FTPBShopNavigationInfo* Info );
	void NotifyOnlineServiceStatusChanged ( unsigned char NewConnectionStatus );
	void NotifyLoginStatusChanged ( unsigned char Status );
	void NotifyGameSessionEnded ( );
	void NotifyCameraModeChanged ( unsigned long bSecurityCamera );
	void setCloseBackgroundDelegate ( struct FScriptDelegate F );
	void setOpenBackgroundDelegate ( struct FScriptDelegate F );
	void setPostInitializeDelegate ( struct FScriptDelegate F );
	void closeAllMovies ( );
	void showQuickPlay ( unsigned long bShow );
	void showServerBrowser ( unsigned long bShow );
	void showHUDSafetybuy ( unsigned long bShow );
	void updateHalfTimeMovieTimer ( int nTimeRemains );
	void showCreditsMovie ( unsigned long bShow );
	void showHalfTimeMovieSND ( unsigned long bShow );
	void showHalfTimeMovie ( unsigned long bShow );
	void getHUDDeathCamData ( );
	void setHUDDeathCamData ( class APawn* inKillerPawn, class APBPlayerReplicationInfo* inKillerPRI );
	void showHUDDeathCam ( unsigned long bShow );
	void showHUDScoreboard ( unsigned long bShow );
	void showPromotionCodeUI ( unsigned long bShow );
	void ShowHUD ( unsigned long bShow );
	void showMainMenu ( unsigned long bShow );
	void setGameModeString ( struct FString sGameMode );
	void ShowLoadingMovie ( unsigned long bShow );
	void showLogin ( unsigned long bShow );
	void ShowMortarMinimap ( unsigned long bShow );
	void showPlayerSettings ( unsigned long bShow );
	void ShowConsolidatedLobby ( unsigned long bShow );
	bool IsInConsolidatedLobby ( );
	void SetHudAlpha ( float fAlpha );
	void NotifyHeatReset ( );
	void showModalPopup ( unsigned long bShow );
	void openPopupErrorMovieDelayed ( struct FString sReason );
	void openPopupErrorMovie ( struct FString sReason );
	void asyncopenModalErrorMovie ( struct FString sReason );
	void asyncopenPopupErrorMovie ( struct FString sReason );
	bool IsMainSceneInitialized ( );
	void openModalErrorMovie ( struct FString sReason );
	void ASOpenCriticalErrorMovie ( struct FString sReason, float reconnectTime );
	void openCriticalErrorMovie ( int ErrorCode, struct FString sReason, unsigned long bLogoutPlayer, unsigned long bAttempReconnect );
	void asyncOpenCriticalErrorMovie ( int ErrorCode, struct FString sReason, unsigned long bLogoutPlayer );
	void closeCriticalErrorMovie ( );
	void callSet3dStrength ( float menu, float HUD );
	void set3dStrength ( );
	bool isLoginIn ( );
	void _releaseBackground ( );
	void _createBackground ( unsigned long bApplyMaterial );
	void releaseBackground ( );
	void createBackground ( unsigned long bApplyMaterial );
	void eventOnClose ( );
	bool isFinalRelease ( );
	bool Start ( unsigned long StartPaused );
	void closeBackground ( );
	void openBackground ( struct FString sMovieName );
	void PostInitialize ( );
	class USoundCue* PlaySound ( struct FString sSoundPath );
	void Set_playSound_Delegate ( struct FScriptDelegate F );
	void Unreal_playSound ( struct FString sSoundPath );
	void _onTextInputFocused ( unsigned long bFocused );
	void Set_onTextInputFocused_Delegate ( struct FScriptDelegate F );
	void Unreal_onTextInputFocused ( unsigned long bFocused );
	void _onSetMouseVisibility ( unsigned long bShow );
	void Set_onSetMouseVisibility_Delegate ( struct FScriptDelegate F );
	void Unreal_onSetMouseVisibility ( unsigned long bShow );
	void _IgnorePlayerInput ( unsigned long bIgnore );
	void Set_IgnorePlayerInput_Delegate ( struct FScriptDelegate F );
	void Unreal_IgnorePlayerInput ( unsigned long bIgnore );
	unsigned char GetDetailMode ( );
	void ToggleUI ( );
	void RemoveForegroundDelegate ( struct FScriptDelegate func );
	void AddForegroundDelegate ( struct FScriptDelegate func );
	void onForegroundChanged ( unsigned long bShow );
};

UClass* UPBGFxMovie_Main::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_Tickable
// 0x000C (0x0090 - 0x0084)
class UPBGFxObject_Tickable : public UGFxObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x0084 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bRequiresTick : 1;                                		// 0x0088 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      mbInitialized : 1;                                		// 0x0088 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      mbReleased : 1;                                   		// 0x0088 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class UPBGFxMovie_Main*                            mMainMovie;                                       		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1558 ];

		return pClassPointer;
	};

	struct FString getErrorText ( int LoginErrorCode );
	class AActor* findActorByName ( struct FName actorName );
	int operatorErrorToOnlineSystemError ( int nOperatorError );
	class UOnlinePlayerInterface* GetPlayerInterface ( );
	int GetBestControllerId ( );
	void _Release ( );
	void Release ( );
	bool _Initialize ( );
	bool Initialize ( );
	void eventTick ( float fDelta );
};

UClass* UPBGFxObject_Tickable::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_ContainerBased
// 0x0010 (0x00A0 - 0x0090)
class UPBGFxObject_ContainerBased : public UPBGFxObject_Tickable
{
public:
	class UGFxObject*                                  mContainer;                                       		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_playSound__Delegate;                     		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1559 ];

		return pClassPointer;
	};

	void _Release ( );
	bool _Initialize ( );
	bool Initialize ( );
	void onForegroundChanged ( unsigned long bShow );
	void Set_playSound_Delegate ( struct FScriptDelegate F );
	void Unreal_playSound ( struct FString sSoundPath );
};

UClass* UPBGFxObject_ContainerBased::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_MusicContainer
// 0x005C (0x00FC - 0x00A0)
class UPBGFxObject_MusicContainer : public UPBGFxObject_ContainerBased
{
public:
	struct FMusicTrackStruct                           mMusicTrack;                                      		// 0x00A0 (0x0024) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           mActiveMusicTracks;                               		// 0x00C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class USoundNodeWave* >                    mActivate;                                        		// 0x00D0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class USoundNodeWave* >                    mDeactivate;                                      		// 0x00DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              mfFadeIn;                                         		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              mfFadeOut;                                        		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      mShopRequests;                                    		// 0x00F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1560 ];

		return pClassPointer;
	};

	void NotifyConnectionError ( struct FString Message, struct FString Title );
	void eventTick ( float fDelta );
	void _UpdateVolumes ( float fValue, TArray< class USoundNodeWave* >* Nodes );
	void _ProcessSoundNode ( class USoundNode** pNode, TArray< struct FString >* ActiveTracks );
	void SetupMusicComponent ( class UAudioComponent** Comp, TArray< struct FString >* ActiveTracks );
	void _Release ( );
	bool _Initialize ( );
	void AddRequest ( int nRequest );
};

UClass* UPBGFxObject_MusicContainer::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_Login
// 0x0050 (0x014C - 0x00FC)
class UPBGFxObject_Login : public UPBGFxObject_MusicContainer
{
public:
	unsigned long                                      bSaveAccountName : 1;                             		// 0x00FC (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bDoingPreloggedInSessionValidation : 1;           		// 0x00FC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      mbHasStationHandle : 1;                           		// 0x00FC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	struct FString                                     msLastLoginName;                                  		// 0x0100 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class USoundCue*                                   mSound_LoginSound;                                		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_onOpenAnimationComplete__Delegate;       		// 0x0110 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onHideForeground__Delegate;              		// 0x011C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onfocusIn__Delegate;                     		// 0x0128 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onfocusOut__Delegate;                    		// 0x0134 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Login__Delegate;                                		// 0x0140 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1561 ];

		return pClassPointer;
	};

	void Call_showStationHandleWindow ( );
	void setPopupError ( struct FString Error );
	void OnGenerateGameSpyTokenDone ( int requestId, int ErrorCode, struct FGuid ProfileId, struct FString gameSpyToken, struct FString gameSpyChallenge );
	void StartGenerateGameSpyToken ( );
	void OnGetGameRegionsDone ( int requestId, int ErrorCode );
	void OnLoginChange ( unsigned char LocalUserNum );
	void OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode );
	void OnLoginCancelled ( );
	void LoginToGamespy ( struct FString gameSpyToken, struct FString gameSpyChallenge );
	void StartLoginToGamespy ( );
	void _Release ( );
	void ShowConnectionError ( struct FString LocalizedMessage );
	void OnPBManagerLoginFinished ( struct FTPBItemShopResult_OnLoginDone* Result );
	void SetLoginDelegate ( struct FScriptDelegate F );
	void Login ( struct FString UserName, struct FString Password, unsigned long bRemember );
	void _OnPBManagerLogoutFinished ( struct FTPBItemShopResult_OnLogoutDone* Result );
	void _OnGetMinimumClientVersionDone ( int requestId, int ErrorCode, struct FString versionId );
	void _OnLogError ( int requestId, int ErrorCode );
	bool _Initialize ( );
	void _OnGetProgressionDone ( struct FTPBItemShopResult_OnGetProgressionDone* Result );
	void _onOpenAnimationComplete ( );
	void _onHideForeground ( );
	void Set_onfocusOut_Delegate ( struct FScriptDelegate F );
	void Unreal_onfocusOut ( );
	void Set_onfocusIn_Delegate ( struct FScriptDelegate F );
	void Unreal_onfocusIn ( );
	void Set_onHideForeground_Delegate ( struct FScriptDelegate F );
	void Unreal_onHideForeground ( );
	void Set_onOpenAnimationComplete_Delegate ( struct FScriptDelegate F );
	void Unreal_onOpenAnimationComplete ( );
	void InitCharData ( );
	void flashStartLogin ( struct FString sUsername, struct FString sPassword, unsigned long bRemember, unsigned long bFillTextDetails );
	void LoadConfig ( );
	bool GetPreLoggedinSessionId ( struct FString* LogInSessionId );
	bool GetAutoLogin ( struct FString* Login, struct FString* Password );
};

UClass* UPBGFxObject_Login::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_Options
// 0x0114 (0x01B4 - 0x00A0)
class UPBGFxObject_Options : public UPBGFxObject_ContainerBased
{
public:
	unsigned long                                      bCustomVideoSettings : 1;                         		// 0x00A0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      mbloodEffects : 1;                                		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      mbInvertMouse : 1;                                		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      mbSmoothMouse : 1;                                		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      mbAccelerateMouse : 1;                            		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      mProfanityFilter : 1;                             		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      keyHolding : 1;                                   		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	TArray< struct FString >                           languages;                                        		// 0x00A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UGFxObject*                                  mControlsContainer;                               		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mControlsContainerMove;                           		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mControlsContainerCombat;                         		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mControlsContainerMisc;                           		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mGeneralContainer;                                		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mVideoContainer;                                  		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mAudioContainer;                                  		// 0x00C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     mLanguage;                                        		// 0x00CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m3dMenu;                                          		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m3dHUD;                                           		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              mMouseSensivity;                                  		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mAimMode;                                         		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AnisotropicArray[ 0x5 ];                          		// 0x00E8 (0x0014) [0x0000000000002000]              ( CPF_Transient )
	int                                                ShadowResolutionArray[ 0x4 ];                     		// 0x00FC (0x0010) [0x0000000000002000]              ( CPF_Transient )
	int                                                MultisamplingArray[ 0x2 ];                        		// 0x010C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxDecalsArray[ 0x5 ];                            		// 0x0114 (0x0014) [0x0000000000002000]              ( CPF_Transient )
	int                                                DecalsLifeArray[ 0x5 ];                           		// 0x0128 (0x0014) [0x0000000000002000]              ( CPF_Transient )
	float                                              keyHoldEventTime;                                 		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       lastKeyPressed;                                   		// 0x0140 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_setGeneralValues__Delegate;              		// 0x0148 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_setValues__Delegate;                     		// 0x0154 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_setKeybind__Delegate;                    		// 0x0160 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_setVideoValues__Delegate;                		// 0x016C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_setAudioValues__Delegate;                		// 0x0178 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_saveAudioValues__Delegate;               		// 0x0184 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_restartNow__Delegate;                    		// 0x0190 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_setEULAIndex__Delegate;                  		// 0x019C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMousePressed__Delegate;                       		// 0x01A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1562 ];

		return pClassPointer;
	};

	bool HandleInputKeyF ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
	void keyHoldComplete ( );
	void callUnrealKeyHold ( struct FString KeyName );
	void callUnrealKeyPressed ( struct FString KeyName );
	void OnMousePressed ( );
	void SetupAudioOptions ( );
	void GetCurrentSystemAudioValues ( struct FAudioSettingsStruct* Settings );
	void SetupVideoOptions ( );
	void SetupKeyBindings ( );
	void SetupGeneralOptions ( );
	void SaveAudioOptionsConfigFile ( );
	void SaveAudioOptions ( float Master, float music, float voice, float Effects, float heat, unsigned long hardware );
	void ApplyVideoSettings ( struct FVideoSettingsStruct Settings );
	void SaveVideoOptions ( struct FString res, int Quality, unsigned long Fullscreen, int textureQ, int Detail, int maxAnisotropic, int MaxMultisamples, int shadowmap, int DynamicDecals, unsigned long DynamicLights, unsigned long DynamicShadows, unsigned long MotionBlur, unsigned long DepthOfField, unsigned long HighpolyChar, unsigned long Bloom, unsigned long Distortion, unsigned long FogVolumes, unsigned long VSync );
	void GetSpeedTreeSettings ( int nQuality, float* fNear, float* fFar );
	void GetWorkspaceResolutionValue ( struct FString WorkspaceResolutionStr, int* Width, int* Height );
	void GetResolutionValue ( struct FString ResolutionStr, struct FVideoSettingsStruct* Settings );
	void SaveBindings ( );
	void SaveGeneralOptions ( );
	void BindActionToKey ( struct FString Command, struct FName Key );
	void ClearAllBindingsCommandAndKey ( struct FString Command, struct FName Key );
	void _Release ( );
	void initDelayed ( );
	bool _Initialize ( );
	void setAudioErrorMsg ( struct FString msg );
	void setAudioOptions ( TArray< struct FString > Data );
	void setVideoOptions ( TArray< struct FString > possibleResolutions, TArray< struct FString > Data );
	void setKeybindMisc ( TArray< struct FString > sKeys );
	void setKeybindCombat ( TArray< struct FString > sKeys );
	void setAimMode ( int Mode );
	void setMouseData ( unsigned long invert, unsigned long smooth, unsigned long accelerate, float sensivity );
	void setKeybindMove ( TArray< struct FString > sKeys );
	void setGeneralOptions ( TArray< struct FString > avaliableLanguages, TArray< struct FString > avaliableLanguagesExt, struct FString lang, int menu3d, int hud3d, unsigned long blood, unsigned long profanity );
	bool GetPromotionMusic ( );
	void SetPromotionMusic ( unsigned long bPlayMusic );
	void SetAudioDeviceToUse ( struct FString DeviceName );
	struct FString GetCurrentAudioDevice ( );
	void GetSystemWindowBorders ( struct FString* OutResults );
	void GetSystemWorkArea ( struct FString* OutResults );
	void GetCurrentSystemResolution ( struct FString* OutResults );
	void GetPossibleScreenResolutions ( TArray< struct FString >* OutResults );
	void SetScreenResolution ( int ResX, int ResY, unsigned long bFullscreen );
	void AGSetPCCompatibilityLevelInfo ( int iVal );
	int AGGetPCCompatibilityLevelInfo ( );
	void LoadConfig ( );
	void NativeApplyVideoSettings ( struct FVideoSettingsStruct* Settings );
	void GetQualitySettings ( int nQuality, struct FVideoSettingsStruct* videostruct );
	void ConvertSystemSettingsToVideo ( struct FVideoSettingsStruct* videostruct );
	void _setEULAIndex ( int NewIndex );
	void Set_setEULAIndex_Delegate ( struct FScriptDelegate F );
	void Unreal_setEULAIndex ( int NewIndex );
	void Set_restartNow_Delegate ( struct FScriptDelegate F );
	void Unreal_restartNow ( );
	void Set_saveAudioValues_Delegate ( struct FScriptDelegate F );
	void Unreal_saveAudioValues ( );
	void Set_setAudioValues_Delegate ( struct FScriptDelegate F );
	void Unreal_setAudioValues ( float Master, float music, float voice, float Effects, float heat, unsigned long hardware );
	void Set_setVideoValues_Delegate ( struct FScriptDelegate F );
	void Unreal_setVideoValues ( struct FString res, int Quality, unsigned long Fullscreen, int textureQ, int Detail, int maxAnisotropic, int MaxMultisamples, int shadowmap, int DynamicDecals, unsigned long DynamicLights, unsigned long DynamicShadows, unsigned long MotionBlur, unsigned long DepthOfField, unsigned long HighpolyChar, unsigned long Bloom, unsigned long Distortion, unsigned long FogVolumes, unsigned long VSync );
	void Set_setKeybind_Delegate ( struct FScriptDelegate F );
	void Unreal_setKeybind ( struct FString Command, struct FString Key );
	void Set_setValues_Delegate ( struct FScriptDelegate F );
	void Unreal_setValues ( unsigned long invert, unsigned long smooth, unsigned long accelerate, float mouseSen, int aimMode );
	void Set_setGeneralValues_Delegate ( struct FScriptDelegate F );
	void Unreal_setGeneralValues ( struct FString lang, int menu3d, int hud3d, unsigned long blood, unsigned long profanityFilter );
};

UClass* UPBGFxObject_Options::pClassPointer = NULL;

// Class PlanBGame.PBGlobalBasket
// 0x0228 (0x0264 - 0x003C)
class UPBGlobalBasket : public UObject
{
public:
	unsigned long                                      m_bRemoveRequiredItems : 1;                       		// 0x003C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bNameReserved : 1;                              		// 0x003C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bCharDataSaved : 1;                             		// 0x003C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bEquipAllOffers : 1;                            		// 0x003C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bGettingMarketingCategories : 1;                		// 0x003C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bFinishedGettingMarketingCategories : 1;        		// 0x003C (0x0004) [0x0000000000000000] [0x00000020] 
	struct FString                                     m_ReservedName;                                   		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           mWeaponCategories;                                		// 0x004C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FCustomCharData                             m_InitialCharacterData;                           		// 0x005C (0x010C) [0x0000000000002000]              ( CPF_Transient )
	struct FPBPendingSetCustomWeaponData               m_InitialWeaponData;                              		// 0x0168 (0x001C) [0x0000000000002000]              ( CPF_Transient )
	class UPBGlobalBasket*                             m_Instance;                                       		// 0x0184 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBEquipmentMap*                             m_EquipmentMap;                                   		// 0x0188 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPBBasketItem >                     m_BasketItems;                                    		// 0x018C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FGuid >                             m_RemoveItems;                                    		// 0x0198 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBCharacterShopOffer >            m_UIOffers;                                       		// 0x01A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBCharacterShopOffer >            mTempUIOffersArray;                               		// 0x01B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBUIFilter >                      m_UIFilters;                                      		// 0x01BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBLocalizedFilter >               m_LocalizedFilters;                               		// 0x01C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   m_ErrorDelegates;                                 		// 0x01D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FGuid >                             m_TemporaryCheckoutArray;                         		// 0x01E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      m_MarketCategoryRequests;                         		// 0x01EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nCoinsRequest;                                  		// 0x01F8 (0x0004) [0x0000000000000000]              
	int                                                m_nCreditsRequest;                                		// 0x01FC (0x0004) [0x0000000000000000]              
	struct FString                                     m_NullSubscriptionString;                         		// 0x0200 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FGuid                                       m_NullSubscription;                               		// 0x020C (0x0010) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FTColorGuid >                       m_ColorSortingArray;                              		// 0x021C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTColorGuid >                       m_HairColorSortingArray;                          		// 0x0228 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTColorGuid >                       m_SynthTypesSortingArray;                         		// 0x0234 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FGuid >                             m_AddingOfferGuidArray;                           		// 0x0240 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGetMarketCategoryOffersDone__Delegate;        		// 0x024C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnBasketError__Delegate;                        		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1563 ];

		return pClassPointer;
	};

	void NativeRelease ( );
	void Release ( );
	void ChangeCurrency ( TArray< struct FGuid > offerguids, TArray< unsigned char > paymentArray );
	bool ReserveName ( struct FString new_name );
	void eventScriptInitialize ( );
	void InitializeCharacter ( );
	class UPBGlobalBasket* GetInstance ( );
	void _OnGetSubscriptionModeDone ( struct FTPBItemShopResult_OnGetSubscriptionModeDone* Result );
	struct FGuid GetNullSubscription ( );
	void _InitializeEquipmentArray ( );
	int _GetIndexInCheckoutArray ( struct FGuid checkoutGuid );
	void EquipAllOffers ( );
	bool IsTagDatasInConflict ( struct FPBItemTagData* Data1, struct FPBItemTagData* Data2 );
	bool IsTagDataInEquipmentConflictWithItem ( struct FGuid Item2, struct FPBItemTagData* Data1 );
	bool IsInEquipmentConflict ( struct FGuid Item1, struct FGuid Item2 );
	void _OnCheckoutBasketDone ( int requestId, int ErrorCode );
	void Purchase ( TArray< struct FGuid > items );
	void _OnSetPaymentForBasketItemDone ( int requestId, int ErrorCode );
	void _OnAddItemToBasketDone ( int requestId, int ErrorCode, struct FPBBasketItem basketItem );
	void AddItemInCorrectOrder ( struct FPBBasketItem basketItem, struct FTPBCharacterShopOffer* uioffer );
	bool AddItem ( unsigned char payment, int Preset, struct FTPBCharacterShopOffer* uioffer );
	void _UnequipOffer ( struct FGuid OfferGuid );
	void UnequipItem ( struct FGuid ItemGuid, struct FGuid ColorGuid, int Preset );
	void UnequipItems ( int Preset, TArray< struct FGuid >* itemguids, TArray< struct FGuid >* colorGuids );
	void FixEmptySkills ( );
	bool FindEquipmentCategory ( struct FString sCategory, struct FTGlobalBasketEquipment* EQ );
	void _EquipItem ( struct FGuid ItemGuid, struct FGuid ItemSerialNumber, struct FString sCategory, int Preset, TArray< struct FGuid >* outSerialNumbers, TArray< int >* outNewPresets );
	void FillHeadsInfo ( struct FTHeadInfo* heads );
	bool CutWeaponCategory ( struct FString* sCategory );
	struct FString GetWeaponName ( struct FGuid WeaponID );
	void GetUnequippedWeaponItems ( struct FString weaponName, int Preset, TArray< struct FGuid >* outSerialNumbers, TArray< int >* outNewPresets );
	void EquipUIOffer ( int Preset, struct FTPBCharacterShopOffer* uioffer );
	void _UpdateEquipmentCategory ( struct FTGlobalBasketEquipment* equipment );
	void UnequipConflictingItems ( struct FGuid ItemGuid, struct FString Category, int Preset, unsigned long bUnequipSameCategoryItems );
	void ProcessConflictingItemsArray ( TArray< struct FTConflictingItem > ConflictingItems, unsigned long bChangeEquipmentMap, unsigned long bUnequipSameCategoryItems, struct FString Category, int Preset, TArray< struct FTCurrentlyEquipped >* previewArray, TArray< struct FGuid >* itemsArray, TArray< int >* presetsArray );
	void GetConflictingItemsList ( struct FGuid ItemGuid, int Preset, TArray< struct FTConflictingItem >* items );
	void GetCurrentlyEquippedItem ( struct FString Category, int Preset, struct FTPBCharacterShopOffer* itemuioffer );
	bool GetEmptyUIOffer ( struct FGuid CategoryItemGuid, struct FString sCategory, struct FTPBCharacterShopOffer* uioffer );
	void _ConstructWeaponData ( int nPresetIndex, struct FPBItemLocator* Locator, struct FPBPendingSetCustomWeaponData* Data, TArray< struct FTPBCharacterShopOffer >* Mods );
	bool PreviewItem ( struct FGuid ItemGuid, struct FGuid ItemColor, unsigned long bEquipItem, int Preset );
	bool PreviewItems ( unsigned long bEquipItem, int nPreset, TArray< struct FTCurrentlyEquipped >* items );
	void GetEquippedWeaponMods ( struct FGuid WeaponGuid, int nPreset, TArray< struct FTPBCharacterShopOffer >* Mods );
	void SavePreview ( );
	void UndoPreview ( );
	void _OnReserveNameDone ( int requestId, int ErrorCode );
	struct FString GetReservedName ( );
	bool IsNameReserved ( );
	void _OnGetBasketDone ( int requestId, int ErrorCode, int amountBasketItems, TArray< struct FPBBasketItem > basketItems );
	void _OnGetAmountDone ( int requestId, int ErrorCode, int Amount );
	void UpdateAmount ( struct FString currency );
	void UpdateBasket ( );
	void _OnGetCharacterProfileDone ( int requestId, int ErrorCode, struct FPBCharacterProfile CharacterProfile );
	void _OnGetOfferDetailsDone ( int requestId, int ErrorCode, struct FGuid OfferId, struct FString offerDescription, struct FGuid itemId, struct FString itemDescription, int XpBoost, int creditBoost, int groupXpBoost, int groupIgcBoost );
	void _onGetUniqueOffersDone ( struct FTPBItemShopResult_OnGetOffersDone* Result );
	void UpdateBoosters ( );
	void UpdateCharacter ( );
	int GetItemsCount ( );
	TArray< struct FPBBasketItem > GetItems ( );
	void GetUIFilters ( TArray< struct FTPBUIFilter >* filters );
	void UpdateActiveUIFilters ( TArray< struct FString >* filters );
	int _GetCorrespondingUIFilterIndex ( struct FString offerType );
	void GetUIOffers ( unsigned long bUseUIFilters, TArray< struct FTPBCharacterShopOffer >* offers );
	void RemoveErrorDelegate ( struct FScriptDelegate func );
	void AddErrorDelegate ( struct FScriptDelegate func );
	int GetItemEquippmentMask ( struct FGuid itemId );
	bool FindEquippedUIOfferByItemGuid ( struct FGuid itemId, struct FTPBCharacterShopOffer* uioffer );
	bool IsItemBeingEquipped ( struct FGuid itemId, int Preset );
	bool IsOfferBeingEquipped ( struct FGuid OfferId, int Preset );
	void FixWeaponPreset ( int presetIndex, class UPBNWeaponPreset** Preset );
	bool IsCategoryBeingEquipped ( struct FString sCategory, int Preset );
	int IsOfferInBasket ( struct FGuid OfferId );
	int IsItemInBasket ( struct FGuid itemId );
	void _OnDeleteAllItemsFromBasketDone ( int requestId, int ErrorCode );
	void EmptyBasket ( );
	int RemoveItemsInRemovingArray ( );
	void _OnDeleteItemFromBasketDone ( int requestId, int ErrorCode );
	int RemoveItem ( struct FGuid OfferId );
	TArray< struct FGuid > CreateRemovingArray ( struct FGuid OfferId );
	void _ProcessRemovingArray ( TArray< struct FGuid >* removingArray );
	TArray< struct FGuid > CreateRemovingArrayForItem ( struct FGuid ItemGuid );
	TArray< struct FGuid > CreateRemovingArrayForCategory ( struct FString sCategory );
	void _RemoveUIOffer ( struct FGuid OfferId );
	void OnBasketError ( int ErrorCode, struct FString sErrorMessage );
	struct FString GetItemDescription ( struct FString item_type, struct FString itemguidstring );
	struct FString GetColorName ( struct FString colorguidstring );
	struct FString GetItemName ( struct FString item_type, struct FString itemguidstring );
	struct FTPBCharacterShopOffer ItemToUIOffer ( struct FPBItem* Item );
	void Static_ItemToUIOffer ( class UPBCustomChar_MenuData** CharData, struct FPBItem* Item, struct FTPBCharacterShopOffer* uioffer );
	void Static_UniqueOfferToUIOffer ( class UPBCustomChar_MenuData** CharData, struct FPBUniqueOffer* Offer, struct FTPBCharacterShopOffer* uioffer );
	struct FTPBCharacterShopOffer UniqueOfferToUIOffer ( struct FPBUniqueOffer* Offer );
	struct FTPBCharacterShopOffer OfferToUIOffer ( struct FPBOffer* Offer );
	void Static_OfferToUIOffer ( class UPBCustomChar_MenuData** CharData, struct FPBOffer* Offer, struct FTPBCharacterShopOffer* uioffer );
	void UpdateUIOffer ( int nCurrentPresetMask, struct FTPBCharacterShopOffer* uioffer );
	int GetRepairPriceInVirtualCoins ( float fCondition, float fCurMaxCondition );
	int GetRepairPriceInRealCoins ( float fCondition );
	float GetMaxVirtualRepairCondition ( float fCondition, float fCurMaxCondition );
	bool GetWeaponCondition ( struct FGuid WeaponItemId, float* fCondition, float* fCurMaxCondition );
	struct FString _ItemTypeToStr ( unsigned char Type );
	struct FTPBCharacterShopOffer LocatorToUIOffer ( struct FString Category, struct FPBItemLocator* Locator );
	void PreviewHeadAndColor ( struct FGuid headGuid, struct FGuid ColorGuid );
	void PreviewBasketHeadAndColor ( struct FGuid* outHeadGuid, struct FGuid* outColorGuid );
	void GetItemNames ( TArray< struct FGuid >* itemguids, TArray< struct FString >* itemnames );
	void _onGetOffersDone ( struct FTPBItemShopResult_OnGetOffersDone* Result );
	void GetMarketCategoryOffers ( );
	void SortUIOffers_Skills ( TArray< struct FTPBCharacterShopOffer >* offers );
	bool SortUIOffers_Ethnicities ( TArray< struct FTPBCharacterShopOffer >* offers );
	void SortUIOffers_Boosters ( TArray< struct FTPBCharacterShopOffer >* offers );
	bool SortUIOffers_HairColors ( TArray< struct FTPBCharacterShopOffer >* offers );
	bool SortUIOffers_Colors ( TArray< struct FTPBCharacterShopOffer >* offers );
	void SortUIOffers_Taunt ( TArray< struct FTPBTauntOffer >* offers );
	void SortUIOffers ( TArray< struct FTPBCharacterShopOffer >* offers );
	void OnGetMarketCategoryOffersDone ( TArray< struct FPBOffer >* offers );
};

UClass* UPBGlobalBasket::pClassPointer = NULL;

// Class PlanBGame.PBUIDataProvider_SimpleElementProvider
// 0x0000 (0x0048 - 0x0048)
class UPBUIDataProvider_SimpleElementProvider : public UUIDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1564 ];

		return pClassPointer;
	};

	int GetElementCount ( );
};

UClass* UPBUIDataProvider_SimpleElementProvider::pClassPointer = NULL;

// Class PlanBGame.PBUIDataProvider_StringArray
// 0x000C (0x0054 - 0x0048)
class UPBUIDataProvider_StringArray : public UPBUIDataProvider_SimpleElementProvider
{
public:
	TArray< struct FString >                           Strings;                                          		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1565 ];

		return pClassPointer;
	};

	int GetElementCount ( );
};

UClass* UPBUIDataProvider_StringArray::pClassPointer = NULL;

// Class PlanBGame.PBUIDataStore_StringList
// 0x000C (0x0074 - 0x0068)
class UPBUIDataStore_StringList : public UUIDataStore
{
public:
	TArray< struct FEStringListData >                  StringData;                                       		// 0x0068 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1566 ];

		return pClassPointer;
	};

	int eventNum ( struct FName FieldName );
	int eventSetCurrentValueIndex ( struct FName FieldName, int NewValueIndex );
	int eventGetCurrentValueIndex ( struct FName FieldName );
	bool eventGetCurrentValue ( struct FName FieldName, struct FString* out_Value );
	TArray< struct FString > GetList ( struct FName FieldName );
	struct FString GetStr ( struct FName FieldName, int StrIndex );
	int FindStr ( struct FName FieldName, struct FString SearchString );
	void Empty ( struct FName FieldName, unsigned long bBatchOp );
	void RemoveStrByIndex ( struct FName FieldName, int Index, int Count, unsigned long bBatchOp );
	void RemoveStr ( struct FName FieldName, struct FString StringToRemove, unsigned long bBatchOp );
	void InsertStr ( struct FName FieldName, struct FString NewString, int InsertIndex, unsigned long bBatchOp );
	void AddStr ( struct FName FieldName, struct FString NewString, unsigned long bBatchOp );
	int GetFieldIndex ( struct FName FieldName );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
};

UClass* UPBUIDataStore_StringList::pClassPointer = NULL;

// Class PlanBGame.PBAvatarData
// 0x0020 (0x01F8 - 0x01D8)
class APBAvatarData : public AActor
{
public:
	TArray< class UTexture2D* >                        rAvatarPictures;                                  		// 0x01D8 (0x000C) [0x0000000020400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_Deprecated )
	class UTexture2D*                                  NoAvatarTexture;                                  		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBAvatarData*                               Archetype;                                        		// 0x01E8 (0x0004) [0x0000000000000000]              
	TArray< struct FavatarPicture >                    AvatarPictures;                                   		// 0x01EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1567 ];

		return pClassPointer;
	};

	int FindAvatarPictureIndex ( struct FGuid pictureGuid );
	class UTexture2D* GetAvatarPicture ( int iIndex );
	class APBAvatarData* GetArchetype ( );
};

UClass* APBAvatarData::pClassPointer = NULL;

// Class PlanBGame.PBCharacterProgression
// 0x0040 (0x0218 - 0x01D8)
class APBCharacterProgression : public AActor
{
public:
	TArray< struct FPBRankInfo >                       RankList;                                         		// 0x01D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                Rank_Initial;                                     		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Rank_Max;                                         		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWinWeight;                                       		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLoseWeight;                                      		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableGameWeight : 1;                            		// 0x01F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDebug_DisableGamemodeWeight : 1;                 		// 0x01F4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              fWinBonus;                                        		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLoseBonus;                                       		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iStylePointsPerPercent;                           		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxStyleBonus;                                   		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBPlayerController*                         pDebuggingController;                             		// 0x0208 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FDebugProgressionInfo >             rDebugFunctions;                                  		// 0x020C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1568 ];

		return pClassPointer;
	};

	float GetStylePointsToBoostPercentage ( int iPoints );
	float GetMaxStylePercentage ( );
	unsigned char GetGameMode ( class AGameReplicationInfo* GRI );
	class UTexture* ResolveTextureRef ( struct FString Ref );
	void DisplayDebugLine ( class APBPlayerController* PC, struct FString Text );
	void DebugProgression ( class APBPlayerController* PC, struct FName DebugValue );
	void CallDebugFunction ( class APBPlayerController* PC, struct FName DebugFunctionName );
	void DebugPrintRanks ( );
	int GetMaxFameLevel ( );
	void DebugPrintDebugInfo ( );
};

UClass* APBCharacterProgression::pClassPointer = NULL;

// Class PlanBGame.PBCustomChar_AssetStore
// 0x009C (0x0274 - 0x01D8)
class APBCustomChar_AssetStore : public AActor
{
public:
	unsigned char                                      DefaultGender;                                    		// 0x01D8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FGenderStore >                      GenderStores;                                     		// 0x01DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USkeletalMesh*                               DefaultSkMesh;                                    		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FCustomTextureSchemeSlot >          GenericTextureSchemeSlots;                        		// 0x01EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UMaterial*                                   FinalMaterial;                                    		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FMergeableTextureInfo >             MergeableTextures;                                		// 0x01FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FCharLOD_Info >                     LODsOptionsOverride;                              		// 0x0208 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMaterial* >                         MergeableMaterials;                               		// 0x0214 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                DropAttachmentsStartingFromLODNumber;             		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomCharTextureStreamTimeout;                   		// 0x0224 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FPBGameItem_IconLayout                      IconLayout;                                       		// 0x0228 (0x0020) [0x0000000000000001]              ( CPF_Edit )
	struct FPBIconInfo                                 Icon_SelectedItem;                                		// 0x0248 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	struct FPBIconInfo                                 Icon_UnavailableItem;                             		// 0x025C (0x0014) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      Color_UnavailableItem;                            		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1569 ];

		return pClassPointer;
	};

	void RandomizeDefaultItemsEquip ( class UPBCustomChar_ItemSearchCache* ItemCache, int GenderID, TArray< struct FPBItem >* DefaultItems, TArray< int >* NewItemPresets );
	void CreateCustomCharData ( struct FGuid GenderGuid, struct FGuid headGuid, struct FGuid skinGuid, struct FCustomCharData* Data );
	bool FindMeshPartIDByGuid ( int GenderID, int StoreID, struct FGuid PartGuid, int* PartID );
	bool FindTextureSchemeSlotByType ( unsigned char Type, int GenderID, int* StoreID, int* SchemeIndex );
	bool FindMeshPartStoreByType ( unsigned char Type, int GenderID, int* StoreID );
	int GenderIDFromGuid ( struct FGuid GenderGuid );
	struct FGuid GenderIDToGuid ( int GenderID );
	class UStaticMesh* GetAttachmentMesh ( int PartID, int SlotIndex, int SocketIndex, struct FCustomCharData* Data );
	struct FString GetAttachmentMeshRef ( int PartID, int SlotIndex, int SocketIndex, struct FCustomCharData* Data );
	bool IsEmptyAttachment ( int PartID, int SlotIndex, struct FCustomCharData* Data );
	bool IsEmptyMeshPart ( int StoreID, int PartID, unsigned long IgnoreDependencies, struct FCustomCharData* Data );
	void GetBothMeshParts ( int StoreID, int PartID, unsigned long ThirdPerson, struct FCustomCharData* Data, class USkeletalMesh** MeshLeft, class USkeletalMesh** MeshRight );
	class USkeletalMesh* GetMeshPart1P ( int StoreID, int PartID, int Side, struct FCustomCharData* Data );
	class USkeletalMesh* GetMeshPart3P ( int StoreID, int PartID, int Side, struct FCustomCharData* Data );
	struct FString GetMeshPart1PRef ( int StoreID, int PartID, int Side, unsigned long IgnoreDependencies, struct FCustomCharData* Data );
	struct FString GetMeshPart3PRef ( int StoreID, int PartID, int Side, unsigned long IgnoreDependencies, struct FCustomCharData* Data );
	void ApplyTextureScheme ( class UMaterialInstance* Mat, struct FTextureSchemeInfo* SchemeInfo );
	class APBCustomChar_ColorSchemeList* GetTextureSchemeList ( int GenderID, int StoreID, int PartID, int SlotIndex );
	bool GetTextureScheme ( int StoreID, int SlotIndex, struct FTextureSchemeInfo* SchemeInfo, struct FCustomCharData* Data );
	struct FString GetTextureSchemeRef ( int StoreID, int SlotIndex, struct FCustomCharData* Data );
	void CollectMaterialSchemeTextureRefs ( int StoreID, struct FCustomCharData* Data, TArray< struct FString >* TextureRefArray );
	void SetupMaterialSchemes ( class UMaterialInstanceConstant* MIC, int StoreID, struct FCustomCharData* Data );
	void CreateRandomCharacterData ( unsigned char GenderType, struct FCustomCharData* Data );
	int GetGenderIDByType ( unsigned char gender );
	void ValidateCharacterData ( struct FCustomCharData* Data );
	void eventCreateDefaultCharData ( class APBCustomChar_AssetStore* AssetStore, int InGender, struct FCustomCharData* Data );
	class APBCustomChar_MeshPartList* FindPartList ( int GenderID, unsigned char CharPartType, int* MeshPartIndex );
	bool FindPartIndex ( int GenderID, unsigned char CharPartType, int* MeshPartIndex );
	int GetTextureSchemeSlotID ( int GenderID, int MeshPartID, struct FName SlotName );
	class APBCustomChar_ColorSchemeList* GetTextureSchemeItemList ( int MeshPartID, int SlotID, struct FCustomCharData* Data );
	void GetTextureSchemeSlot ( int GenderID, int MeshPartID, int SlotID, struct FCustomTextureSchemeSlot* Slot );
	int GetTextureSchemeSlotCount ( int GenderID, int MeshPartID );
	int GetDefaultAttachmentID ( struct FAttachmentSlot* Slot );
	int GetDefaultTextureSchemeID ( struct FCustomTextureSchemeSlot* Slot );
	bool IsNonColorCustomizable ( int GenderID, int PartStoreID, int PartID );
	bool IsNonColorCustomizablePart ( struct FMeshPartStore* InMeshPartStore, struct FMeshPart* InMeshPart );
	int GetDefaultMeshPartID ( struct FMeshPartStore* Store );
	int GetMeshPartID ( struct FGuid PartGuid, struct FMeshPartStore* Store );
	int GetPartStoreID ( int GenderID, struct FName StoreName );
	void MakeCoordinates ( struct FPBGameItem_IconLayout InIconLayout, int RowIndex, int ColumnIndex, struct FTextureCoordinates* Coordinates );
};

UClass* APBCustomChar_AssetStore::pClassPointer = NULL;

// Class PlanBGame.PBCustomChar_AttachmentList
// 0x000C (0x01E4 - 0x01D8)
class APBCustomChar_AttachmentList : public AActor
{
public:
	TArray< struct FCharAttachment >                   Attachments;                                      		// 0x01D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1570 ];

		return pClassPointer;
	};

};

UClass* APBCustomChar_AttachmentList::pClassPointer = NULL;

// Class PlanBGame.PBCustomChar_ColorSchemeList
// 0x000C (0x01E4 - 0x01D8)
class APBCustomChar_ColorSchemeList : public AActor
{
public:
	TArray< struct FCustomColorScheme >                AvailableSchemes;                                 		// 0x01D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1571 ];

		return pClassPointer;
	};

	bool FindSchemeByGuid ( struct FGuid SchemeGuid, int* SchemeID );
	class UTexture* GetSchemeTexture ( int SchemeIndex );
};

UClass* APBCustomChar_ColorSchemeList::pClassPointer = NULL;

// Class PlanBGame.PBCustomChar_Data
// 0x0000 (0x003C - 0x003C)
class UPBCustomChar_Data : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1572 ];

		return pClassPointer;
	};

	int GetMaxAttachmentsCount ( );
	int GetMaxTextureSchemeCount ( );
	int GetMaxPartsCount ( );
	struct FPBCustomChar_MeshPartData GetMeshPart ( int I, struct FCustomCharData* Data );
	void SetMeshPart ( int I, struct FPBCustomChar_MeshPartData PartData, struct FCustomCharData* Data );
};

UClass* UPBCustomChar_Data::pClassPointer = NULL;

// Class PlanBGame.PBCustomChar_Dummy
// 0x0164 (0x033C - 0x01D8)
class APBCustomChar_Dummy : public AActor
{
public:
	struct FString                                     CharacterDataString;                              		// 0x01D8 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct FCustomCharData                             CharacterData;                                    		// 0x01E4 (0x010C) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    AnimSet;                                          		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName;                                         		// 0x02F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPauseAnimation : 1;                              		// 0x02FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bMeshUpToDate : 1;                                		// 0x02FC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              AnimPhase;                                        		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxParts;                                         		// 0x0304 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxAttachments;                                   		// 0x0308 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBCustomChar_AssetStore*                    DataStore;                                        		// 0x030C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      MeshTemplate;                                     		// 0x0310 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0314 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      WeaponLeftHand;                                   		// 0x0318 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       WeaponLeftBone;                                   		// 0x031C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      WeaponRightHand;                                  		// 0x0324 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       WeaponRightBone;                                  		// 0x0328 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FCustomPartData2 >                  CharParts;                                        		// 0x0330 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1573 ];

		return pClassPointer;
	};

	class USkeletalMeshComponent* GetMeshForWeaponAttach ( unsigned long bSearchForSocket, struct FName SocketName );
	void UpdateMesh ( );
	void UpdateAnimSet ( );
	void HideAttachments ( class USkeletalMeshComponent* SkMesh );
	bool SetupAttachments ( class USkeletalMeshComponent* SkMesh, int PartIndex, int CheckAttachmentIndex, struct FCustomCharData* Data );
	bool SetupAttachment ( class USkeletalMeshComponent* SkMesh, int PartIndex, int SlotIndex, struct FCustomCharData* Data, struct FAttachmentSlot* Slot );
	void ResolveMaterialRef ( struct FString Ref, class UMaterialInstanceConstant** Material );
	void ResolveMeshRef ( struct FString Ref, class USkeletalMesh** SkMesh, class UStaticMesh** StMesh );
	void UpdateMaterialsOverride ( class USkeletalMeshComponent* SkMesh );
	void SetupAttachmentMaterials ( class UStaticMeshComponent* StaticMesh, int PartIndex, struct FCustomCharData* Data );
	void SetupMaterial ( class UMaterialInstanceConstant* MIC, int PartIndex, struct FCustomCharData* Data );
	void SetupMaterials ( class USkeletalMeshComponent* SkMesh, int PartIndex, struct FCustomCharData* Data );
	void InitializeCharacter ( );
	void PostBeginPlay ( );
};

UClass* APBCustomChar_Dummy::pClassPointer = NULL;

// Class PlanBGame.PBCustomChar_Merge
// 0x0024 (0x01FC - 0x01D8)
class APBCustomChar_Merge : public AActor
{
public:
	class APBCustomChar_AssetStore*                    DefaultStore;                                     		// 0x01D8 (0x0004) [0x0000000000000000]              
	int                                                ActiveMergeJobCount;                              		// 0x01DC (0x0004) [0x0000000000000000]              
	TArray< struct FPBCharAsyncTaskInfo >              AsyncTasks;                                       		// 0x01E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NextTaskID;                                       		// 0x01EC (0x0004) [0x0000000000000000]              
	int                                                CompletedTaskCount;                               		// 0x01F0 (0x0004) [0x0000000000000000]              
	int                                                ActiveTaskCount;                                  		// 0x01F4 (0x0004) [0x0000000000000000]              
	float                                              RemainTickTime;                                   		// 0x01F8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1574 ];

		return pClassPointer;
	};

	void FinishedCreatingCustomChars ( );
	void ResetCustomCharMerge ( struct FCustomCharMergeState* MergeState );
	bool FinishCustomCharMerge ( unsigned long bAsyncMerging, struct FCustomCharMergeState* MergeState, class USkeletalMesh** Mesh3P, class USkeletalMesh** Mesh1P );
	struct FCustomCharMergeState StartCustomCharMerge ( unsigned long bInMerge1P, unsigned long bInMerge3P, struct FCustomCharData* InCharData );
};

UClass* APBCustomChar_Merge::pClassPointer = NULL;

// Class PlanBGame.PBCustomChar_MeshPartList
// 0x000C (0x01E4 - 0x01D8)
class APBCustomChar_MeshPartList : public AActor
{
public:
	TArray< struct FMeshPart >                         MeshParts;                                        		// 0x01D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1575 ];

		return pClassPointer;
	};

};

UClass* APBCustomChar_MeshPartList::pClassPointer = NULL;

// Class PlanBGame.PBCustomChar_Preview
// 0x0408 (0x05E0 - 0x01D8)
class APBCustomChar_Preview : public AActor
{
public:
	int                                                ActorID;                                          		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned long >                            mProcessedFootSteps;                              		// 0x01DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      CustomizationMode;                                		// 0x01E8 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class APBCustomChar_AssetStore*                    DataStore;                                        		// 0x01EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FCustomCharData                             CurCharData;                                      		// 0x01F0 (0x010C) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxParts;                                         		// 0x02FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxAttachments;                                   		// 0x0300 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      PreviewMode3P : 1;                                		// 0x0304 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bWeaponMode : 1;                                  		// 0x0304 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bRecievedAnimEndEvent : 1;                        		// 0x0304 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bHasPrimaryWeapon : 1;                            		// 0x0304 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bPlayingCustomAnimation : 1;                      		// 0x0304 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bPendingCustomAnimation : 1;                      		// 0x0304 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      AsyncLoadingEnabled : 1;                          		// 0x0304 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bPaused : 1;                                      		// 0x0304 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	struct FName                                       PendingWeaponAnimationSlot;                       		// 0x0308 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ULightEnvironmentComponent*                  LightEnvironmentChar;                             		// 0x0310 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      SkMeshTemplate;                                   		// 0x0314 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FString                                     mFootstepSoundCuePath;                            		// 0x0318 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FPBWeaponAttachmentPreviewInfo >    WeaponPreviewInfo;                                		// 0x0324 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FCustomPartData >                   CharParts;                                        		// 0x0330 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FAnimSetPerGender >                 AnimSets;                                         		// 0x033C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAnimSet*                                    AnimSet1P;                                        		// 0x0348 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendInTime;                                      		// 0x034C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTime;                                     		// 0x0350 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CustomWeaponTranslation;                          		// 0x0354 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    CustomWeaponRotation;                             		// 0x0360 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomWeaponScale;                                		// 0x036C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     CustomWeaponRootBoneName;                         		// 0x0370 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAnimSet*                                    CurrentAnimSet;                                   		// 0x037C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentAnimSetIndex;                              		// 0x0380 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UAnimNodeSlot* >                     CurrentIdleBreakSlots;                            		// 0x0384 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UAnimNodeSlot* >                     CurrentCustomAnimSlots;                           		// 0x0390 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UPBAnimNodeSlot* >                   CurrentWeaponAnimSlots;                           		// 0x039C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UPBAnimNodeRandom* >                 CurrentRandomIdleSlots;                           		// 0x03A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              IdleBreakDelayMin;                                		// 0x03B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              IdleBreakDelayMax;                                		// 0x03B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastIdleBreakIndex;                               		// 0x03BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RandomIdleBreakSlotName;                          		// 0x03C0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       PendingCustomAnimation;                           		// 0x03C8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     PendingWeapon;                                    		// 0x03D0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      CustomWeaponMeshComponent;                        		// 0x03DC (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class APBKWeaponParams*                            WeaponParams;                                     		// 0x03E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBNWeaponCustomParams*                      WeaponCustomParams;                               		// 0x03E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FBox                                        CustomWeaponMeshBounds;                           		// 0x03E8 (0x001C) [0x0000000000002000]              ( CPF_Transient )
	class UAnimTree*                                   AnimTreeReference;                                		// 0x0404 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterial*                                   InvisibleMaterial;                                		// 0x0408 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPBObjectCacheItem >                CachedObjects;                                    		// 0x040C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CurrentLoadRequestId;                             		// 0x0418 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PendingLoadRequestCount;                          		// 0x041C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPBPendingSetCharData                       PendingSetCharData;                               		// 0x0420 (0x0120) [0x0000000000002000]              ( CPF_Transient )
	struct FPBPendingSetWeapon                         PendingSetWeapon[ 0x4 ];                          		// 0x0540 (0x0070) [0x0000000000002000]              ( CPF_Transient )
	struct FPBPendingSetCustomWeaponData               PendingSetCustomWeaponData;                       		// 0x05B0 (0x001C) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInterface*                          PendingMaterialOverride;                          		// 0x05CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTextureRenderTarget2D*                      BackgroundTexture;                                		// 0x05D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __AsyncObjectLoadCallback__Delegate;              		// 0x05D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1576 ];

		return pClassPointer;
	};

	void eventPlayFootStepSound ( int FootDown );
	bool GetDynamicLightsEnabled ( );
	void eventTick ( float DeltaTime );
	void SetPaused ( unsigned long InPaused );
	void OnActivate ( );
	void HandleAnimEnd ( );
	void PrintCharPreviewStatus ( );
	void CheckIdleAnimations ( );
	void SwitchPreviewMode ( );
	void RealignWeaponMesh ( );
	void UpdateBoundingBox ( class USkeletalMeshComponent* smComp, struct FBox* fullBB );
	struct FBox CalculateFullBoundingBox ( );
	void ApplySetCustomWeaponData ( class APBKWeaponParams* InWeaponParams, class APBNWeaponCustomParams* InWeaponCustomParams, struct FCustomWeaponData* WeaponData );
	void SetCustomWeaponData ( class APBKWeaponParams* InWeaponParams, class APBNWeaponCustomParams* InWeaponCustomParams, struct FCustomWeaponData* WeaponData );
	bool CreateCustomWeaponMesh ( class APBKWeaponParams* InWeaponParams, class APBNWeaponCustomParams* InWeaponCustomParams, unsigned long bSilentMode, struct FCustomWeaponData* WeaponData );
	void AttachMeshToSocket ( class UStaticMeshComponent* StMesh, struct FName SocketName, TArray< class USkeletalMeshComponent* >* SkMeshList );
	void ResolveCustomMaterial ( class APBNWeaponCustomParams* InWeaponCustomParams, struct FCustomWeaponData* WeaponData, class UMaterialInstanceConstant** Material );
	void SetupWeaponMaterials ( class UMeshComponent* SkMesh, class UMaterialInstanceConstant* CustomMaterial, class APBNWeaponCustomParams* InWeaponCustomParams, unsigned long bEnableDecalSystem, struct FCustomWeaponData* WeaponData );
	void SetupWeaponMaterial ( class UPBWeaponList* WeaponList, class UMaterialInterface* SrcMat, class UMaterialInstanceConstant* MIC, class APBNWeaponCustomParams* InWeaponCustomParams, struct FCustomWeaponData* WeaponData );
	void ResolveTextureRef ( struct FString Ref, class UTexture** Tex );
	void ResolveMaterialRef ( struct FString Ref, class UMaterialInstanceConstant** Material );
	void ResolveMeshRef ( struct FString Ref, class USkeletalMesh** SkMesh, class UStaticMesh** StMesh );
	void RemoveWeapon ( );
	void ApplySetupWeapon ( int iBaseWeaponCode, unsigned long bItemEquipped, unsigned long bPrimaryWeapon, struct FCustomWeaponData* WeaponData );
	void SetupWeapon ( int iBaseWeaponCode, unsigned long bItemEquipped, unsigned long bPrimaryWeapon, struct FCustomWeaponData* WeaponData );
	int PrepareWeaponChange ( unsigned char WeaponCategory );
	class USkeletalMeshComponent* GetMeshForWeaponAttach ( unsigned long bSearchForSocket, struct FName SocketName );
	void ActivatePendingCharData ( unsigned long bItemEquipped, int ChangedPartIndex, unsigned long bAttachmentChanged, int ChangedAttachmentIndex, struct FCustomCharData* Data );
	struct FCustomCharData GetCharData ( );
	void SetCharData ( unsigned long bItemEquipped, int ChangedPartIndex, unsigned long bAttachmentChanged, int ChangedAttachmentIndex, struct FCustomCharData* Data );
	void PlayItemRemoveAnimation ( );
	void PlayItemEquipAnimation ( unsigned char ItemType );
	void SelectBlendByWeaponAnimationSlot ( struct FName AnimationSlot );
	void StopCustomAnimation ( );
	void PlayCustomAnimation ( struct FName AnimationName, unsigned long bForcePlay, unsigned long bLooping );
	bool IsPlayingCustomAnimation ( );
	bool IsIdleBreakActive ( );
	void ResetIdleNodes ( );
	void SynchronizeIdleNodes ( );
	void UpdateAnimSet ( unsigned long bForceUpdate );
	void ChangeAnimSet ( unsigned long bForceUpdate, struct FAnimSetPerGender* NewAnimSet );
	void ChangeMeshAnimSet ( class USkeletalMeshComponent* Mesh, int Seed, unsigned long bFirstMesh, struct FAnimSetPerGender* NewAnimSet );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float playTime, float ExcessTime );
	void HideAttachments ( class USkeletalMeshComponent* SkMesh );
	bool SetupAttachments ( class USkeletalMeshComponent* SkMesh, int PartIndex, int CheckAttachmentIndex, struct FCustomCharData* Data );
	bool SetupAttachment ( class USkeletalMeshComponent* SkMesh, int PartIndex, int SlotIndex, struct FCustomCharData* Data, struct FAttachmentSlot* Slot );
	void UpdateMaterialsOverride ( class USkeletalMeshComponent* SkMesh );
	void SetupAttachmentMaterials ( class UStaticMeshComponent* StaticMesh, int PartIndex, struct FCustomCharData* Data );
	void SetupMaterials ( class USkeletalMeshComponent* SkMesh, int PartIndex, struct FCustomCharData* Data );
	void ApplyMaterialOverride ( class UMaterialInterface* pMaterial );
	void OverrideMaterial ( class UMaterialInterface* pMaterial );
	void SetupMaterial ( class UMaterialInstanceConstant* MIC, int PartIndex, struct FCustomCharData* Data );
	void ChangeMode ( unsigned char NewMode );
	void CreateCustomWeaponMeshComponent ( );
	void HideAll ( );
	void PostBeginPlay ( );
	struct FBox CalculateBoundingBoxStaticMesh ( class UStaticMesh* StMesh );
	struct FBox CalculateBoundingBox ( class USkeletalMesh* SkMesh );
	void LoadObjectAsync ( struct FString ObjectName, class UClass* ObjectClass, class UClass* ObjectClassAlt, struct FScriptDelegate Callback, int UserData );
	void AsyncObjectLoadCallback ( class UObject* LoadedObject, int UserData );
	void CleanObjectCache ( );
	void AddLoadObjectAsyncRequest ( struct FString ObjectName, class UClass* ObjectClass, class UClass* ObjectClassAlt );
	void OnObjectLoaded ( class UObject* LoadedObject, int UserData );
	void SetBackgroundTexture ( class UTextureRenderTarget2D* InBackgroundTexture );
};

UClass* APBCustomChar_Preview::pClassPointer = NULL;

// Class PlanBGame.PBNWeapon_Merge
// 0x0020 (0x01F8 - 0x01D8)
class APBNWeapon_Merge : public AActor
{
public:
	int                                                ActiveMergeJobCount;                              		// 0x01D8 (0x0004) [0x0000000000000000]              
	TArray< struct FAsyncTaskInfo >                    AsyncTasks;                                       		// 0x01DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NextTaskID;                                       		// 0x01E8 (0x0004) [0x0000000000000000]              
	int                                                CompletedTaskCount;                               		// 0x01EC (0x0004) [0x0000000000000000]              
	int                                                ActiveTaskCount;                                  		// 0x01F0 (0x0004) [0x0000000000000000]              
	float                                              RemainTickTime;                                   		// 0x01F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1577 ];

		return pClassPointer;
	};

	void FinishedCreatingCustomWeapons ( );
	bool IsMergeableMaterial ( class UPBNWeaponList* WeaponList, class UMaterialInterface* Material );
	void ResetCustomWeaponMerge ( struct FCustomWeaponMergeState* MergeState );
	bool FinishCustomWeaponMerge ( unsigned long bAsyncMerging, struct FCustomWeaponMergeState* MergeState, class USkeletalMesh** Mesh );
	struct FCustomWeaponMergeState StartCustomWeaponMerge ( unsigned long bFirstPerson, class APBNWeaponParams* WeaponParams, class APBNWeaponCustomParams* WeaponCustomParams, class UPBNWeaponList* WeaponList, struct FCustomWeaponData* InWeaponData );
};

UClass* APBNWeapon_Merge::pClassPointer = NULL;

// Class PlanBGame.IPBDrawableOnMinimap
// 0x0000 (0x003C - 0x003C)
class UIPBDrawableOnMinimap : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38031 ];

		return pClassPointer;
	};

};

UClass* UIPBDrawableOnMinimap::pClassPointer = NULL;

// Class PlanBGame.IPBEventSystemStorage
// 0x0000 (0x003C - 0x003C)
class UIPBEventSystemStorage : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38033 ];

		return pClassPointer;
	};

};

UClass* UIPBEventSystemStorage::pClassPointer = NULL;

// Class PlanBGame.IPBEventSystemViewer
// 0x0000 (0x003C - 0x003C)
class UIPBEventSystemViewer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38035 ];

		return pClassPointer;
	};

};

UClass* UIPBEventSystemViewer::pClassPointer = NULL;

// Class PlanBGame.IPBInteractible
// 0x0000 (0x003C - 0x003C)
class UIPBInteractible : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38037 ];

		return pClassPointer;
	};

	class AActor* GetInteractibleActor ( );
	bool IsVolumeInteractible ( );
	void SetInteractionInfo ( class AController* User );
	void DrawInteractionInfo ( class AHUD* H, class AController* User );
	float GetInteractTime ( );
	float GetInteractDistance ( float* objectSize );
	void EndInteract ( class AController* User, unsigned long bInteractionSuccessful );
	bool OnInteract ( class AController* User );
};

UClass* UIPBInteractible::pClassPointer = NULL;

// Class PlanBGame.PBMinimapDrawer
// 0x0000 (0x003C - 0x003C)
class UPBMinimapDrawer : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38076 ];

		return pClassPointer;
	};

};

UClass* UPBMinimapDrawer::pClassPointer = NULL;

// Class PlanBGame.PBMinimapDrawer_Objective
// 0x0000 (0x003C - 0x003C)
class UPBMinimapDrawer_Objective : public UPBMinimapDrawer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38075 ];

		return pClassPointer;
	};

};

UClass* UPBMinimapDrawer_Objective::pClassPointer = NULL;

// Class PlanBGame.PBPersistentLobby
// 0x00DC (0x0544 - 0x0468)
class APBPersistentLobby : public APBGameInfo
{
public:
	class APBGameRules*                                pCurrentRules;                                    		// 0x0468 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBPersistentGameReplicationInfo*            pPersistentGameInfo;                              		// 0x046C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       NextLevelPackageName;                             		// 0x0470 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       CurrentLevelPackageName;                          		// 0x0478 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTimeSinceMapLoadingFinished;                     		// 0x0480 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fLobbyInactivityShutdownTime;                     		// 0x0484 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bLobbyLocked : 1;                                 		// 0x0488 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bForceGotoLobbyAfterMatchEnd : 1;                 		// 0x0488 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bSkipMapCycling : 1;                              		// 0x0488 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bDisableEOR : 1;                                  		// 0x0488 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bAllowEmptyTeams : 1;                             		// 0x0488 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bForceClientCommitMap : 1;                        		// 0x0488 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bFinalizeVotePaused : 1;                          		// 0x0488 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bVotingPaused : 1;                                		// 0x0488 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bPlayersVsBots : 1;                               		// 0x0488 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      bAutoNumBots : 1;                                 		// 0x0488 (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	unsigned long                                      bAllowAI : 1;                                     		// 0x0488 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bForceAllRed : 1;                                 		// 0x0488 (0x0004) [0x0000000000004000] [0x00000800] ( CPF_Config )
	unsigned long                                      bRoundTimerExpired : 1;                           		// 0x0488 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned char                                      CurrentEORScreen;                                 		// 0x048C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      StandAloneGameMode;                               		// 0x048D (0x0001) [0x0000000000000000]              
	class UClass*                                      clVictoryMessage[ 0x2 ];                          		// 0x0490 (0x0008) [0x0000000000000000]              
	int                                                iKismetVictoriousTeam;                            		// 0x0498 (0x0004) [0x0000000000000000]              
	class UClass*                                      cKismetVictoryMessage;                            		// 0x049C (0x0004) [0x0000000000000000]              
	int                                                iStateTimeout;                                    		// 0x04A0 (0x0004) [0x0000000000000000]              
	float                                              fSafetyBuyInterval;                               		// 0x04A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NewMatchDelay;                                    		// 0x04A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iNextMapVoteEndDelay;                             		// 0x04AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iNextMapVoteTime;                                 		// 0x04B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iSpawnTimeout;                                    		// 0x04B4 (0x0004) [0x0000000000000000]              
	int                                                iTeamsNotReadyTimeout;                            		// 0x04B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fFinishedPlayerPercentageBeforeCommit;            		// 0x04BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxTeamSize;                                      		// 0x04C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fVoteTime;                                        		// 0x04C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fRequiredVotePercent;                             		// 0x04C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fEndVoteDelay;                                    		// 0x04CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fResetVoteDelay;                                  		// 0x04D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fPassiveVotingTimeout;                            		// 0x04D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fPassiveVotingAnnouncement;                       		// 0x04D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iKickVote_DefaultBanTime;                         		// 0x04DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iStartVotePreventTime_JoinGame;                   		// 0x04E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iStartVotePreventTime_StartVote;                  		// 0x04E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           BotBackupNames;                                   		// 0x04E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                BotBackupNameOffset;                              		// 0x04F4 (0x0004) [0x0000000000000000]              
	int                                                ServerSkillLevel;                                 		// 0x04F8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                DesiredPlayerCount;                               		// 0x04FC (0x0004) [0x0000000000000000]              
	class APBTeamInfo*                                 Teams[ 0x2 ];                                     		// 0x0500 (0x0008) [0x0000000000000000]              
	struct FString                                     ServerName;                                       		// 0x0508 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class APBPlayerController* >               toRespawnPC;                                      		// 0x0514 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class APBPlayerController* >               toAnouncePC;                                      		// 0x0520 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __GetAwardParameter__Delegate;                    		// 0x052C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GetAwardTimeChanged__Delegate;                  		// 0x0538 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38095 ];

		return pClassPointer;
	};

	void SetGameInLobby ( unsigned long bInLobby );
	void SetNextMatchVote ( class APBPlayerController* Voter, int VoteOption );
	void SubmitVotingResults ( int nWinner );
	void EndNextMapVote ( );
	void StartNextMapVote ( );
	void PrepareNextMapVote ( );
	void FinalizePassiveVoting ( );
	unsigned char GetPassiveVotingLeader ( );
	void RegisterServer ( );
	void ShowLobbySceneToPlayer ( class APBPlayerController* PC, unsigned char initialScreen, unsigned long bSkipMapVoting );
	void NotifyPlayerFinishedInitialProcessing ( class APBPlayerController* PC );
	struct FName GetAfterLoadingState ( );
	void ShowLobbyScene ( unsigned char initialScreen, unsigned long bSkipMapVoting );
	void CreateGameRules ( unsigned char GameType );
	void PreparePresets ( );
	void ClearGameRules ( );
	void CommitMapChange ( struct FName LevelName, unsigned long bForceClientCommit );
	void PrepareMapChange ( struct FName LevelName, unsigned long bReplicateToClients );
	unsigned char PickTeamForBalance ( unsigned char iCurrentTeam );
	void SetInactivityShutdown ( unsigned long bEnabled );
	void CleanPawns ( unsigned long bMarkAsNotReadyToPlay );
	void ShutdownDueToInactivity ( );
	void ConstructPresets ( class APBPlayerReplicationInfo* pPlayerInfo, TArray< struct FPBItemServer >* items );
	void GotoLobby ( );
	unsigned char GetPlayerLoginTeam ( struct FString Options );
	void ReplicateStreamingStatus ( class APlayerController* PC );
	class APlayerStart* ChoosePlayerStart ( class AController* Player, unsigned char InTeam );
	void LobbyStartGame ( unsigned long bForceStart );
	void ProcessSpeechRecognition ( class APBPlayerController* Speaker, TArray< struct FSpeechRecognizedWord >* Words );
	bool CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget );
	void ResetAITeams ( );
	void FindNewObjectives ( class APBGameObjective* DisabledObjective );
	class APawn* SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot );
	void DiscardInventory ( class APawn* Other, class AController* Killer );
	void ChangeName ( class AController* Other, struct FString S, unsigned long bNameChange );
	void KillBot ( class APBBot* B );
	void Logout ( class AController* Exiting );
	void Respawn ( );
	bool HasMatchEnded ( );
	void NotifyControllersRoundEnded ( );
	void ResetOngoingAchievements ( );
	void CheckVictory ( );
	void NotifyRoundEnded ( );
	void SafetyTimeFinished ( );
	void SafetyTimeStart ( float fTimeInSafety );
	void NotifyPlayerFinishedStreaming ( class APBPlayerController* PC, struct FName MapName );
	void DestroyPlayerOwnedTurrets ( class AController* Exiting );
	void DestroyAllTurrets ( );
	void eventPostVerifyPlayer ( class APBPlayerReplicationInfo* pPlayerInfo );
	void eventPreCommitMapChange ( struct FString PreviousMapName, struct FString NextMapName );
	void ResetAllRespawnTimes ( );
	void eventPostLogin ( class APlayerController* NewPlayer );
	void ResetRespawnTime ( class APlayerReplicationInfo* PRI );
	void resetVoteTimer ( );
	void CleanUpObjects ( );
	void PrepareObjectives ( );
	float GetInteractiveButtonTime ( class APBInteractiveButton* pButtonObj );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void DeclareRoundWinner ( int iTeam );
	void DeclareMatchWinner ( int iTeam );
	void NotifyRoundIsEnding ( );
	void EndTheRound ( );
	void SpawnIfAllowed ( class APlayerController* tController );
	void PauseRoundTimer ( unsigned long bPause );
	bool IsVictoryDecided ( );
	void CleanupAwardStatistics ( unsigned long bCleanOnlyRoundStats );
	void CalculateAwards ( unsigned long bIsEndOfRound );
	void CalculateAward ( struct FScriptDelegate GetParameter, struct FScriptDelegate GetTimeChanged, unsigned char AwardType, unsigned long bIsEndOfRound );
	void SortAwardList ( struct FScriptDelegate GetParameter, struct FScriptDelegate GetTimeChanged, unsigned long bIsEndOfRound, TArray< class APlayerReplicationInfo* >* PRIArray );
	bool InOrderAward ( struct FScriptDelegate GetParameter, struct FScriptDelegate GetTimeChanged, class APlayerReplicationInfo* PRI, class APlayerReplicationInfo* PRI01, unsigned long bIsEndOfRound );
	int GetAccuracyRatio ( class AController* PC, unsigned long bIsEndOfRound );
	int GetObjectiveCount ( class AController* PC, unsigned long bIsEndOfRound );
	int GetBulletsCatched ( class AController* PC, unsigned long bIsEndOfRound );
	int GetHeadshotCount ( class AController* PC, unsigned long bIsEndOfRound );
	int GetAccuracyRatioTimeChanged ( class AController* PC );
	int GetObjectiveCountTimeChanged ( class AController* PC );
	int GetBulletsCatchedTimeChanged ( class AController* PC );
	int GetHeadshotCountTimeChanged ( class AController* PC );
	int GetAwardTimeChanged ( class AController* PC );
	int GetAwardParameter ( class AController* PC, unsigned long bIsEndOfRound );
	void DeviceDefused ( class APBInteractiveObjective* pDevice, class AController* DefusedBy );
	void DeviceFinished ( class APBInteractiveObjective* pDevice );
	void DevicePlaced ( class APBInteractiveObjective* pDevice );
	bool StartVote ( unsigned char VoteType, struct FString sObject1, class APBPlayerController* VoteStarter, struct FString* ResultMessage );
	bool VotingIsEnabled ( );
	bool AcceptVoteType ( unsigned char VoteType );
	bool IsAMap ( struct FString MapName );
	bool CheckVoteTarget ( unsigned char VoteType, class APlayerReplicationInfo* VoteStarter, class APlayerReplicationInfo* VoteTarget, struct FString* ResultMessage );
	void SetPauseVoting ( unsigned long bPause );
	void ResetVoting ( );
	void EndVote ( );
	void UpdateRunningVote ( class AController* Exiting );
	void CancelVote ( unsigned char CancelReason, unsigned long bNotifyClients );
	void SwitchAllPlayers ( );
	void SetBestLookingPlayer ( struct FString TargetPlayer );
	void FinalizeVote ( );
	void ProcessServerTravel ( struct FString URL, unsigned long bAbsolute );
	void CheckEndVote ( );
	void SetActiveVotingAllowed ( unsigned long bNewAllowed );
	void ClearAllVotes ( );
	void RoundHasEnded ( );
	void AssignTeamPoints ( int iWinningTeam, int iPoints );
	void OnSetTeamVictory ( class UPBSeqAct_SetTeamVictory* TeamVictory );
	bool IsRoundTimedOut ( );
	void Reset ( );
	void SpawnAIPlayers ( );
	bool TooManyBots ( class AController* botToRemove );
	void RemoveBot ( class APBBot* pBot );
	bool GetTeamsReady ( );
	class APBTeamInfo* GetBotTeam ( int TeamBots, unsigned long bUseTeamIndex, int TeamIndex );
	void InitializeBot ( class APBBot* NewBot, class APBTeamInfo* BotTeam );
	class APBBot* SpawnBot ( struct FString BotName, unsigned long bUseTeamIndex, int TeamIndex );
	class APBBot* AddBot ( struct FString BotName, unsigned long bUseTeamIndex, int TeamIndex );
	void ServerAddBots ( int Num );
	bool NeedPlayers ( );
	void GenerateEventOnClients ( class UClass* cEventClass );
	void GenerateEvent ( class UClass* cEventClass, class AActor* pInstigator );
	void GenerateCustomEvent ( class UClass* cEventClass );
	void GenerateRoundEndEvent ( );
	void GenerateRoundStartEvent ( );
	bool IsReadyToPlay ( class APlayerController* PC );
	void ResetKismetActions ( );
	void NotifyRoundRemainingTimeChanged ( int iRemainingTime );
	void RestartGame ( );
	void ResetPlayerScores ( );
	void ResetTeamScores ( );
	bool ArePlayersReady ( int* iReadyToPlay );
	void ReduceDamage ( class AActor* injured, class AController* InstigatorController, struct FVector vHitLocation, class UClass* tDamageType, class AActor* DamageCauser, int* iDamage, struct FVector* vMomentum );
	void ScoreKill ( class AController* cKiller, class AController* cVictim );
	void NotifyAfterKilled ( class AController* Killer, class AController* KilledPlayer );
	class AController* ChangeKillerIfNeeded ( class AController* Killer, class AController* KilledPlayer, class UClass* DamageType );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType );
	void SpawnReinforcements ( );
	void NotifyKilled ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* damageTyp );
	float GetRoundTimeElapsedPerc ( );
	bool PlayerCanRestart ( class APlayerController* aPlayer );
	void RemoveWeaponPickups ( );
	void RestartPlayer ( class AController* tController );
	void AddDefaultInventory ( class APawn* PlayerPawn );
	unsigned char PickTeam ( unsigned char iCurrent, class AController* tController );
	unsigned char PickTeamByName ( unsigned char iCurrent, struct FString PlayerName );
	unsigned char GetTeamNumber ( struct FString TeamName );
	struct FString GetTeamName ( struct FString PlayerName );
	bool ChangeTeam ( class AController* tController, int iTeam, unsigned long bNewTeam );
	int GetEndOfMatchHeatBonus ( class APBPlayerReplicationInfo* pPlayerInfo );
	bool CanPlayerEnterTeam ( int iTeamNum, unsigned long bIgnoreTeamSize );
	bool CanPlayerLeaveTeam ( int iTeamNum, unsigned long bIgnoreTeamSize );
	bool ShouldBroadcastTeamChangeMessage ( );
	bool BalancedTeams ( );
	void ResetLevel ( );
	void SendDeathMessage ( struct FTDeathMessageStruct death_struct );
	void ResetSpawnPoints ( );
	void PrepareStartPoints ( int AttackingTeamIndex, int DefendingTeamIndex );
	void StartCountingParticipation ( );
	void StopCountingParticipation ( );
	void ResetParticipationTimes ( );
	bool ShouldSavePlayerProgression ( );
	void DecrementIndividualRespawnTimer ( );
	void NotifyPlayerLeavingGame ( class APBPlayerController* PC );
	void BroadcastPlayerJoiningGame ( );
	void NotifyPlayerJoiningGame ( class APBPlayerController* PC );
	void NotifyRoomMasterLeft ( class APBPlayerReplicationInfo* pOldRoomMaster );
	bool FindNewRoomMaster ( class APBPlayerReplicationInfo* pSkipPlayer );
	void MatchStarting ( );
	void InitGameReplicationInfo ( );
	void CreateTeam ( int TeamIndex );
	void eventInitGame ( struct FString sOptions, struct FString* sError );
	void LogStateInfo ( struct FName PrevStateName );
	void PreBeginPlay ( );
};

UClass* APBPersistentLobby::pClassPointer = NULL;

// Class PlanBGame.PBGameRules
// 0x0090 (0x027C - 0x01EC)
class APBGameRules : public AMutator
{
public:
	int                                                iPlayerCountCap;                                  		// 0x01EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fGameWeightOptimalMatchLength;                    		// 0x01F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fGameWeightConstantValue;                         		// 0x01F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fGameWeightValuePerPlayer;                        		// 0x01F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class APBPersistentLobby*                          pLobby;                                           		// 0x01FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBPersistentGameReplicationInfo*            pLobbyInfo;                                       		// 0x0200 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBMatchStatistics*                          mMatchStatistics;                                 		// 0x0204 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      OnlineGameSettingsClass;                          		// 0x0208 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                iWinningTeam;                                     		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bJoinOnGoingGame : 1;                             		// 0x0210 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bFriendlyFire : 1;                                		// 0x0210 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bDropWeaponsOnDeath : 1;                          		// 0x0210 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bShowHalfTimeScene : 1;                           		// 0x0210 (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      bPEAllowRevengeReset : 1;                         		// 0x0210 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	int                                                iRoundEndDelay;                                   		// 0x0214 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iRoundTime;                                       		// 0x0218 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iSafetyTime;                                      		// 0x021C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iGoalScore;                                       		// 0x0220 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iEndingStateDelay;                                		// 0x0224 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iSpawnTime;                                       		// 0x0228 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iRespawnWaveTime;                                 		// 0x022C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iInvulnerableTime;                                		// 0x0230 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iTeamScorePerKill;                                		// 0x0234 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iPenaltyPerTeamKill;                              		// 0x0238 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iScorePerKill;                                    		// 0x023C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FStructCommentator                          CommentatorEvent;                                 		// 0x0240 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iPERoundLimit;                                    		// 0x024C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fPETimeLimit;                                     		// 0x0250 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iPEKillReq;                                       		// 0x0254 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< class APBChest* >                          ChestList;                                        		// 0x0258 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                ChestRandomMax;                                   		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ChestNumber0;                                     		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ChestThreshold1;                                  		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ChestNumber1;                                     		// 0x0270 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ChestThreshold2;                                  		// 0x0274 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ChestNumber2;                                     		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38097 ];

		return pClassPointer;
	};

	void SetCommentatorEvent ( unsigned char EventName, unsigned long bIsFemale );
	int GetTeamHighestScore ( );
	void Logout ( class APlayerController* Player );
	void PostLogin ( class APlayerController* NewPlayer );
	bool IsLastRound ( );
	struct FString GetSafetyBuyComments ( int WhichSecond );
	void ShowEndMatchComments ( int PlayerTeamIndex );
	float RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player );
	class APlayerStart* ChoosePlayerStart ( class AController* Player, unsigned char InTeam );
	bool IsObjectiveEnabled ( class UClass* pObjectiveClass );
	int GetRoundDisplayTime ( );
	bool IsVotingEnabled ( );
	bool CanJoinOngoingGame ( );
	int GetInvulnerableTime ( );
	bool GetDropWeaponsOnDeath ( );
	int GetSpawnTime ( );
	int GetRespawnWaveTime ( );
	bool IsFriendlyFire ( );
	int GetGoalScore ( );
	int GetEndingStateDelay ( );
	int GetRoundEndDelay ( );
	int GetMatchTime ( );
	int GetRoundTime ( );
	float GetSafetyStartTime ( );
	bool GetPEAllowRevengeReset ( );
	int GetPEKillReq ( );
	float GetPETimeLimit ( );
	int GetPERoundLimit ( );
	int GetRoundWinningTeam ( );
	int GetMatchWinningTeam ( );
	void CheckVictory ( unsigned long bForce );
	void PreparePresets ( class APBPlayerController* PC );
	void DestroyAllTurrets ( );
	void OnSendDeathMessage ( struct FTDeathMessageStruct death_struct );
	void OnRoundEnd ( );
	void OnMatchEnd ( );
	void OnEnding ( );
	void OnMatchStart ( );
	void OnMatchTimeOut ( );
	void OnRoundTimeOut ( );
	void OnRoundWinnerDeclared ( int iDeclaredWinner );
	void OnMatchWinnerDeclared ( int iDeclaredMatchWinner );
	void NotifyRoundRemainingTimeChanged ( int iRemainingTime );
	void OnRoundStart ( );
	bool IsSpawningAllowed ( );
	void OnDeviceFinished ( class APBInteractiveObjective* pObjective );
	void OnDeviceDefused ( class APBInteractiveObjective* pObjective, class AController* DefusedBy );
	void OnDevicePlaced ( class APBInteractiveObjective* pObjective );
	void eventReplicatedEvent ( struct FName VarName );
	void NotifyKillEvent ( class AController* Killer, class AController* KilledPlayer );
	class AController* ChangeKillerIfNeeded ( class AController* Killer, class AController* KilledPlayer, class UClass* DamageType );
	void NotifyTeamScored ( int TeamIndex );
	void ScoreKill ( class AController* cKiller, class AController* cVictim );
	float GetGameWeight ( );
	void SetWeaponInfoCodes ( class APBCharacter* pChar, class UPBWeaponPreset* pPreset, int* iNextIndex );
	void StorePlayersHeat ( );
	void BankPlayersHeat ( );
	void Reset ( );
	void ResetDestructables ( );
	void RemoveWeaponPickups ( );
	void OnDisabled ( );
	bool IsPassiveVotingActive ( );
	void InitGameOptions ( );
	void ActivateRandomChest ( );
	void InitGameRules ( );
};

UClass* APBGameRules::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_FlagEvent
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_FlagEvent : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38122 ];

		return pClassPointer;
	};

	void Trigger ( struct FName EventType, class AController* EventInstigator );
};

UClass* UPBSeqEvent_FlagEvent::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_ObjectiveCompleted
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_ObjectiveCompleted : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38288 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_ObjectiveCompleted::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_ObjectiveSet
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_ObjectiveSet : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38289 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_ObjectiveSet::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_ObjectiveDefused
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_ObjectiveDefused : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38290 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_ObjectiveDefused::pClassPointer = NULL;

// Class PlanBGame.PBAAMTerminal
// 0x004F (0x03A0 - 0x0351)
class APBAAMTerminal : public APBInteractiveObjective
{
public:
	class UStaticMeshComponent*                        pStMesh;                                          		// 0x0354 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        pBrokenMesh;                                      		// 0x0358 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class APBAAMTerminal_WC*                           pMyWC;                                            		// 0x035C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    pExplosionParticleSystem;                         		// 0x0360 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    pBrokenParticleSystem;                            		// 0x0364 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    pTeamLogoPSC;                                     		// 0x0368 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInterface*                          SmileyFaceParentMaterial;                         		// 0x036C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SmileyFaceMaterialIndex;                          		// 0x0370 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TeamLogoColorParamName;                           		// 0x0374 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                cAngryColor;                                      		// 0x037C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                cPacifiedColor;                                   		// 0x038C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   pSmileyFace;                                      		// 0x039C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38296 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void OnExplode ( );
	bool CanInteract ( class AController* User );
	bool OnInteract ( class AController* User );
	void PreCommitMapChange ( );
	void Pause ( );
	void EnableObjective ( );
	void DisableObjective ( );
	void Reset ( );
	bool IsVolumeInteractible ( );
	void SetSmileyFace ( unsigned long bVisible, unsigned long bAngry );
	void SetupVisuals ( );
	void PostBeginPlay ( );
};

UClass* APBAAMTerminal::pClassPointer = NULL;

// Class PlanBGame.PBAAMTerminal_WC
// 0x0008 (0x01E0 - 0x01D8)
class APBAAMTerminal_WC : public AActor
{
public:
	class UStaticMeshComponent*                        pStMesh;                                          		// 0x01D8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        pBrokenMesh;                                      		// 0x01DC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38307 ];

		return pClassPointer;
	};

	void Reset ( );
	void PostBeginPlay ( );
};

UClass* APBAAMTerminal_WC::pClassPointer = NULL;

// Class PlanBGame.PBPlaceableDevice
// 0x006B (0x03BC - 0x0351)
class APBPlaceableDevice : public APBInteractiveObjective
{
public:
	class UMaterialInstance*                           pIconItemPickupMaterial;                          		// 0x0354 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCorrectiveYawRotation;                           		// 0x0358 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      cZoneIconColor;                                   		// 0x035C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpeedModifier;                                   		// 0x0360 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAttachToObject : 1;                              		// 0x0364 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHasArmingTime : 1;                               		// 0x0364 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHasPulseTime : 1;                                		// 0x0364 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bDroppedWhenKilled : 1;                           		// 0x0364 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	float                                              fDisableInteractTime;                             		// 0x0368 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fPickupInteractTime;                              		// 0x036C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fArmingTime;                                      		// 0x0370 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fPulseTime0;                                      		// 0x0374 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fPulseTimeV;                                      		// 0x0378 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fPulseTime;                                       		// 0x037C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fArmingTimeElapsed;                               		// 0x0380 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      pAffectsActor;                                    		// 0x0384 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     vStartingLocation;                                		// 0x0388 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    rStartingRotation;                                		// 0x0394 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class APBPawn*                                     pPickedupByPawn;                                  		// 0x03A0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     vPlacementPosition;                               		// 0x03A4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    rPlacementRotation;                               		// 0x03B0 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38340 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void NotifyAffectsActorChanged ( class AActor* whichActor );
	void SetAffectsActor ( class AActor* whichActor );
	void PulseTimer ( );
	void ShowDevice ( );
	void HideDevice ( );
	void DeviceDefused ( class APBPlayerController* Defuser );
	void DeviceAccomplished ( );
	void PickupDevice ( class APBPawn* pPawn );
	float GetInteractTime ( );
	struct FString GetCurrentActionString ( class APBPlayerController* User );
	void DeviceArmedSuccessfully ( );
	void InstallDevice ( struct FVector NewLocation, struct FRotator NewRotation, class AActor* affectsWhichActor, class APBPlayerController* PC );
	void DroppedByPlayer ( struct FVector StartLocation, class AController* playerWhoDroppedIt );
	void DisableObjective ( );
	void InstallDeviceViaKismet ( struct FVector NewLocation, struct FRotator NewRotation, class AActor* affectsWhichActor );
	void Reset ( );
	unsigned char GetTeamNum ( );
	void PostBeginPlay ( );
};

UClass* APBPlaceableDevice::pClassPointer = NULL;

// Class PlanBGame.PBC4
// 0x0048 (0x0404 - 0x03BC)
class APBC4 : public APBPlaceableDevice
{
public:
	class UStaticMeshComponent*                        pDeviceMesh;                                      		// 0x03BC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   ExplosionSound;                                   		// 0x03C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             pExplosionParticleSystemTemplate;                 		// 0x03C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    pExplosionParticleSystem;                         		// 0x03C8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    pPickupParticleSystemComp;                        		// 0x03CC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    pLinkParticleSystemComp;                          		// 0x03D0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       LinkActorParamName;                               		// 0x03D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 pDeactivatedMesh;                                 		// 0x03DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 pActivatedMesh;                                   		// 0x03E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBPawn*                                     pCarriedByPawn;                                   		// 0x03E4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AController*                                 pPlacedByController;                              		// 0x03E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      DamageType;                                       		// 0x03EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Momentum;                                         		// 0x03F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageAmount;                                     		// 0x03F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageRadius;                                     		// 0x03F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDamageFalloff : 1;                               		// 0x03FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              fShowMeshAfterInteractionOverTime;                		// 0x0400 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38339 ];

		return pClassPointer;
	};

	bool IsVolumeInteractible ( );
	void Explode ( );
	void SendMsgDeviceDropped ( );
	void SendMsgDevicePickedUp ( );
	void SendMsgDevicePlaced ( );
	void SetMeshVisibility ( unsigned long bVisible, unsigned long bUseOpenedMesh );
	void EnableLinkParticleSystem ( unsigned long bVisible, class AActor* linkToWhichActor );
	void EnablePickupParticleSystem ( unsigned long bVisible );
	void NotifyAffectsActorChanged ( class AActor* whichActor );
	void Pause ( );
	bool IsActive ( );
	void Reset ( );
	void SwitchToC4 ( class APBPawn* pPawn );
	struct FString GetCurrentActionString ( class APBPlayerController* User );
	void ShowDevice ( );
	void HideDevice ( );
	void EnableObjective ( );
	unsigned char GetTeamNum ( );
	void PostBeginPlay ( );
	bool CanInteract ( class AController* User );
};

UClass* APBC4::pClassPointer = NULL;

// Class PlanBGame.PBPersistentGameReplicationInfo
// 0x052C (0x08A0 - 0x0374)
class APBPersistentGameReplicationInfo : public APBGameReplicationInfo
{
public:
	unsigned long                                      bLobbyLocked : 1;                                 		// 0x0374 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bPassiveVotingAllowed : 1;                        		// 0x0374 (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned long                                      bPassiveVotingAnnounced : 1;                      		// 0x0374 (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	unsigned long                                      bActiveVotingAllowed : 1;                         		// 0x0374 (0x0004) [0x0000000000002020] [0x00000008] ( CPF_Net | CPF_Transient )
	unsigned long                                      bCanLaunchGame : 1;                               		// 0x0374 (0x0004) [0x0000000000002020] [0x00000010] ( CPF_Net | CPF_Transient )
	unsigned long                                      bCanChangeLobbySetting : 1;                       		// 0x0374 (0x0004) [0x0000000000002020] [0x00000020] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsPasswordProtected : 1;                         		// 0x0374 (0x0004) [0x0000000000002020] [0x00000040] ( CPF_Net | CPF_Transient )
	unsigned long                                      bNextMapVoteRequired : 1;                         		// 0x0374 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	class APBPlayerReplicationInfo*                    pRoomMasterPRI;                                   		// 0x0378 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      eGameMode;                                        		// 0x037C (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FString                                     strGameMode;                                      		// 0x0380 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     strMapName;                                       		// 0x038C (0x000C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	int                                                iMaxPlayers;                                      		// 0x0398 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FName                                       nServerCurrentMapToLoad;                          		// 0x039C (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FName                                       nCurrentMapLoading;                               		// 0x03A4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTimeToWaitBeforeCommitSameMap;                   		// 0x03AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fTimeToWaitBeforeCommit;                          		// 0x03B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iNextRoundStartTimeRemain;                        		// 0x03B4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iMatchWinner;                                     		// 0x03B8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iInitialMatchRounds;                              		// 0x03BC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                iCurMatchRounds;                                  		// 0x03C0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class APBGameRules*                                pCurrentRules;                                    		// 0x03C4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iTeamsNotReadyTimer;                              		// 0x03C8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                rGameSetupOptionIndex[ 0x8 ];                     		// 0x03CC (0x0020) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FString                                     rNextMapVoteOptions[ 0x64 ];                      		// 0x03EC (0x04B0) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	int                                                iNextMapVoteTimeRemaining;                        		// 0x089C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38376 ];

		return pClassPointer;
	};

	int GetTopNextMapVoteResult ( );
	void ResetNextMapVote ( );
	void PrepareNextMapVote ( );
	bool TeamsNotReadyTimeoutStarted ( );
	void PrepareGame ( );
	void eventReplicatedEvent ( struct FName VarName );
	void NotifyRoomMasterChanged ( );
	void SetRoomMaster ( class APBPlayerReplicationInfo* pPRI );
	void NotifyGameRulesChanged ( );
	bool CancelLevelStreaming ( class APBPersistentPlayerReplicationInfo* pPRI );
	void NotifyFinishedStreaming ( );
	void NotifyReceivedNewMapToLoad ( );
	void SetMapToStream ( struct FName MapName );
	void SetGRIGameMode ( unsigned char NewGameMode, class APBGameRules* pNewRules );
	void SetMapNameLobby ( struct FString MapName );
	void SetMapName ( class APBPersistentPlayerReplicationInfo* pPlayerInfo, struct FString MapName );
	void SetGameMode ( class APBPersistentPlayerReplicationInfo* pPlayerInfo, unsigned char eNewGameMode );
	bool InOrder ( class APlayerReplicationInfo* P1, class APlayerReplicationInfo* P2 );
	void AdminKickPlayer ( class APlayerReplicationInfo* Admin, class APlayerReplicationInfo* pPlayerToKick );
	bool IsLobbyAdmin ( class APlayerReplicationInfo* pPlayer );
	bool RoomMasterExists ( );
	bool SkipAllProcessing ( unsigned long bIsWeaponProcessing );
	bool GetGameOptionValue ( unsigned char GameSetupOptionType, struct FString* optionValue );
	void SetGameSetupOption ( unsigned char GameSetupOptionType, int iValueIndex );
	void DebugPrintCurrentSetupOptions ( );
	void SetActiveVotingAllowed ( unsigned long bNewAllowed );
	void ResetAllOptions ( );
	bool IsLobbyActionAllowed ( unsigned long bShow );
	void PostBeginPlay ( );
};

UClass* APBPersistentGameReplicationInfo::pClassPointer = NULL;

// Class PlanBGame.PBKWeapon_Skill
// 0x0008 (0x05C0 - 0x05B8)
class APBKWeapon_Skill : public APBKWeapon
{
public:
	class APBSkill*                                    Skill;                                            		// 0x05B8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bSchedulePutDown : 1;                             		// 0x05BC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38385 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void ExitSuspend ( unsigned long bSkipEquip );
	bool CanSkillRegenerate ( );
	bool HasEnergyCost ( );
	void ReloadWeapon ( );
	bool IsUsable ( );
	bool OnUseSkill ( unsigned char FireModeNum );
	void BeginFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	bool InitializeWeaponSkill ( class APBKWeaponParams* pNewParams, struct FSWeaponCode WeaponCode, class APBSkill* pSkill, struct FGuid WeaponSerial );
	unsigned char GetWeaponCategoryFromTier ( unsigned char Tier );
	bool IsSelectable ( );
	void NotifyClientSkillDrainStarted ( );
	void NotifySkillDrainStarted ( );
	bool HasEnoughEnergyToSelect ( );
	bool IsUnlocked ( );
	bool IsLocked ( );
	unsigned char GetWeaponCategory ( );
};

UClass* APBKWeapon_Skill::pClassPointer = NULL;

// Class PlanBGame.PBAccessControl
// 0x0000 (0x02AC - 0x02AC)
class APBAccessControl : public AAccessControl
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38407 ];

		return pClassPointer;
	};

	bool IsIDBanned ( struct FUniqueNetId* NetId );
	bool UnBan ( struct FString Target, unsigned long ForceUnBan );
	bool UnbanId ( struct FUniqueNetId* NetId );
	void KickBan ( struct FString Target, int KickTime );
	bool KickPlayer ( class APlayerController* C, struct FString KickReason, int KickTime, unsigned long bForceKickAdmins );
};

UClass* APBAccessControl::pClassPointer = NULL;

// Class PlanBGame.PBAchievementManager
// 0x00C4 (0x0100 - 0x003C)
class UPBAchievementManager : public UObject
{
public:
	class APlayerController*                           m_Owner;                                          		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bCreateAchievementsRecord : 1;                  		// 0x0040 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bInReading : 1;                                 		// 0x0040 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bInWriting : 1;                                 		// 0x0040 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bLog : 1;                                       		// 0x0040 (0x0004) [0x0000000000006000] [0x00000008] ( CPF_Transient | CPF_Config )
	TArray< class UPBAchievement* >                    m_Achievements;                                   		// 0x0044 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTAchievementEventArray                     m_AchievementEvents[ 0xB ];                       		// 0x0050 (0x0084) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class APBAchievementList*                          m_AchievementListArchetype;                       		// 0x00D4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FString >                           m_SaveLoadCommands;                               		// 0x00D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            m_Data;                                           		// 0x00E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m_nMaxClosedID;                                   		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnAchievementEvent__Delegate;                   		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38482 ];

		return pClassPointer;
	};

	void SetMaxClosedID ( int Id );
	void IncreaseMaxClosedID ( );
	int GetMaxClosedID ( );
	bool AcceptLoadedData ( TArray< unsigned char >* Data );
	bool _IsIntData ( int nInt, TArray< unsigned char >* Data );
	void _LinkUnlocks ( );
	void _RegisterAchievementEvents ( class UPBAchievement* pAchievement );
	void _UnregisterAchievementEvents ( class UPBAchievement* pAchievement );
	void _UnregisterClosedAndLocked ( );
	void _RegisterAchievements ( );
	void _InitAchievements ( );
	void ProcessSavingLoading ( );
	class UOnlinePlayerInterface* GetPlayerInterface ( );
	void _DefineMaxClosedID ( );
	void OnReadingCompleted ( unsigned long bSuccess );
	void OnWritingCompleted ( unsigned long bSuccess );
	void ReadAchievements ( );
	class UPBAchievement* GetLastFinishedAchievement ( int* nAchievementID );
	void LogByteData ( TArray< unsigned char >* Data );
	void WriteAchievements ( unsigned long bCreateNew );
	bool _PostUnlockAchievements ( );
	bool _SaveCompletedAchievements ( );
	void SendEvent ( unsigned char event_type, struct FTAchievementEventParams Params );
	void AchLog ( struct FString sLog );
	bool IsValidAchievementEvent ( unsigned char event_type );
	int _FindAchievementIndex ( class UPBAchievement* achievement );
	bool _RegisterAchievement ( class UPBAchievement* pAchievement );
	int _FindAchievementByName ( struct FName AchievementName );
	void OnLoginChange ( unsigned char LocalUserNum );
	void Release ( );
	void ResetAchievements ( );
	void Initialize ( class APlayerController* Player );
	void EnableLog ( unsigned long bLog );
	bool OnAchievementEvent ( struct FTAchievementEventParams* Params );
};

UClass* UPBAchievementManager::pClassPointer = NULL;

// Class PlanBGame.PBAchievementWinRound
// 0x0000 (0x00AC - 0x00AC)
class UPBAchievementWinRound : public UPBAchievement
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38704 ];

		return pClassPointer;
	};

	bool OnTeamChanged ( struct FTAchievementEventParams* Params );
	bool OnLooseRound ( struct FTAchievementEventParams* Params );
	void _InternalInitialize ( );
};

UClass* UPBAchievementWinRound::pClassPointer = NULL;

// Class PlanBGame.PBAchievement_DontContribute
// 0x0008 (0x00B4 - 0x00AC)
class UPBAchievement_DontContribute : public UPBAchievementWinRound
{
public:
	int                                                m_nKillsMax;                                      		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nKillsDid;                                      		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38713 ];

		return pClassPointer;
	};

	void LogAchievement ( );
	void RecoverValues ( );
	bool IsAchievementBeingCompleted ( );
	void _InternalInitialize ( );
	bool OnWinRound ( struct FTAchievementEventParams* Params );
	bool OnKillEvent ( struct FTAchievementEventParams* Params );
};

UClass* UPBAchievement_DontContribute::pClassPointer = NULL;

// Class PlanBGame.PBDamageType
// 0x0028 (0x0100 - 0x00D8)
class UPBDamageType : public UPBBaseDamageType
{
public:
	unsigned long                                      bThrowRagdoll : 1;                                		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAlwaysSevers : 1;                                		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bBloodWithCustomHit : 1;                          		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      SoundToPlay;                                      		// 0x00DC (0x0001) [0x0000000000000000]              
	float                                              GibPerterbation;                                  		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDeathIconU;                                      		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              fDeathIconV;                                      		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              fDeathIconUL;                                     		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              fDeathIconVL;                                     		// 0x00F0 (0x0004) [0x0000000000000000]              
	class UClass*                                      HeadShotDmgType;                                  		// 0x00F4 (0x0004) [0x0000000000000000]              
	class UClass*                                      CustomHitEffect;                                  		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              CustomHitDamageThreshold;                         		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38756 ];

		return pClassPointer;
	};

	void PawnTornOff ( class APBPawn* DeadPawn );
	void PlayDeathSound ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UPBDamageType::pClassPointer = NULL;

// Class PlanBGame.PBCommentatorSystemArc
// 0x0064 (0x00A0 - 0x003C)
class UPBCommentatorSystemArc : public UObject
{
public:
	TArray< struct FGlobalTrackStruct >                GlobalEvents;                                     		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSafetyBuyTrackStruct >             SafetyBuyEvents;                                  		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGameModeTrackStruct >              GameModes;                                        		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FLevelTrackStruct >                 Level;                                            		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FCommentatorTrackInfo >             Advertising;                                      		// 0x006C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FCommentatorTrackInfo >             Story;                                            		// 0x0078 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FCommentatorTrackInfo >             Humor;                                            		// 0x0084 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              fFillerTimePeriod;                                		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFillerTriggerPercent;                            		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eDefaultGameModeForSinglePlayer;                  		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalVODelay;                                    		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39015 ];

		return pClassPointer;
	};

};

UClass* UPBCommentatorSystemArc::pClassPointer = NULL;

// Class PlanBGame.PBInventoryManager
// 0x000C (0x0200 - 0x01F4)
class APBInventoryManager : public AInventoryManager
{
public:
	unsigned long                                      bPendingAim : 1;                                  		// 0x01F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class AWeapon*                                     PrevCurrentWeapon;                                		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AWeapon*                                     pEquipFirstWeapon;                                		// 0x01FC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39511 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void RemoveFromInventory ( class AInventory* ItemToRemove );
	void DrawHUD ( class AHUD* H );
	void SetGroundSpeed ( class AWeapon* CurWeapon );
	void DiscardInventory ( );
	void TossWeapon ( class AInventory* Inv );
	void ServerSetCurrentWeapon ( class AWeapon* DesiredWeapon );
	struct FString GetInstigatorName ( );
	void PrevWeapon ( );
	void NextWeapon ( );
	bool IsWeaponSelectable ( class AWeapon* W );
	void DropWeapon ( );
	void ServerDropWeapon ( );
	void SwitchToBestWeapon ( unsigned long bForceADifferentWeapon );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void SetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void ServerAutoSetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void AutoSetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void OwnerEvent ( struct FName EventName );
	bool CancelWeaponChange ( );
	class AInventory* CreateInventory ( class UClass* NewInventoryItemClass, unsigned long bDoNotActivate );
	void ChangedWeapon ( );
	void SwitchToPrevWeapon ( );
	void SwitchWeapon ( unsigned char Key );
	void SwitchWeaponCategory ( unsigned char eCategory, unsigned long bForceSelection );
	void SwitchToWeaponParam ( struct FSWeaponCode WeaponCode );
	void SetPreviousWeapon ( class AWeapon* pPrevWeapon );
	void NotifyWeaponDropped ( class AWeapon* pWeapon );
	bool AddInventory ( class AInventory* NewItem, unsigned long bDoNotActivate );
	void RemoveWeaponByCategory ( unsigned char WhichCategory );
	class AInventory* GetWeaponOfCategory ( unsigned char WhichCategory );
	bool HasWeaponOfCategory ( unsigned char WhichCategory );
	class AInventory* HasInventoryOfClass ( class UClass* InvClass );
	class APBKWeaponInfo* GetWeaponInfoFromWeaponParams ( class APBKWeaponParams* WeaponParams );
	void WeaponInitializationComplete ( class APBKWeapon* pWhichWeapon );
	void NotifyEquipFirstWeaponArrived ( );
	void SetFirstEquippedWeapon ( class AWeapon* equipThis );
	void TurnOff ( );
	class APBKWeaponInfo* GetWeaponInfoFromWeaponCode ( struct FSWeaponCode WeaponCode );
	void UpdateWeaponCaches ( );
	void eventPostBeginPlay ( );
};

UClass* APBInventoryManager::pClassPointer = NULL;

// Class PlanBGame.PBDamageIndicator
// 0x0020 (0x01F8 - 0x01D8)
class APBDamageIndicator : public AActor
{
public:
	float                                              Damage;                                           		// 0x01D8 (0x0004) [0x0000000000000000]              
	struct FVector                                     repulsion;                                        		// 0x01DC (0x000C) [0x0000000000000000]              
	struct FVector                                     ScreenPos;                                        		// 0x01E8 (0x000C) [0x0000000000000000]              
	unsigned long                                      bOnScreen : 1;                                    		// 0x01F4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39541 ];

		return pClassPointer;
	};

	void Init ( float _damage, struct FVector weaponPos );
	void eventTick ( float DeltaTime );
	void RenderOverlay ( class UCanvas* Canvas );
};

UClass* APBDamageIndicator::pClassPointer = NULL;

// Class PlanBGame.PBHeatSystemHandler
// 0x0014 (0x01EC - 0x01D8)
class APBHeatSystemHandler : public AReplicationInfo
{
public:
	TArray< struct FPlayerEventInfo >                  rPlayerEventInfo;                                 		// 0x01D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bAllowFirstKill : 1;                              		// 0x01E4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class UPBHeatSystemArc*                            pHeatSystemArc;                                   		// 0x01E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39656 ];

		return pClassPointer;
	};

	void GetBonusTypesFromCode ( int iBonusEventCode, TArray< int >* iBonusEventIndeces );
	unsigned char GetInvalidPrimaryEventCode ( );
	bool IsPrimaryEventCodeValid ( unsigned char iEventCode );
	int AddBonusEvent ( int iBonusCode, unsigned char bonusType );
	unsigned char GetEventCodeFromPrimaryEvent ( unsigned char whichEvent );
	int GetPlayerEventInfoIndex ( class APBPlayerController* PC );
	bool IsPlayerLastInTeam ( class APlayerReplicationInfo* pPlayerInfo );
	bool IsPlayerTeamLeader ( class APlayerReplicationInfo* pPlayerInfo );
	void eventNotifySNDLose ( class APBPlayerController* PC );
	void eventNotifySNDWin ( class APBPlayerController* PC );
	void eventNotifyDefuseC4 ( class APBPlayerController* PC );
	void eventNotifyTeamDefuseC4 ( class APBPlayerController* PC );
	void eventNotifyPlaceC4 ( class APBPlayerController* PC );
	void eventNotifyTeamPlaceC4 ( class APBPlayerController* PC );
	bool eventNotifyStyle ( class APBPlayerController* PC );
	void eventNotifyGreatDefence ( class APBPlayerController* PC );
	void eventNotifyScoreAPoint ( class APBPlayerController* PC );
	void eventNotifyDeathInBerserk ( class APBPlayerController* PC );
	void eventNotifyPlayerSpawned ( class APBPlayerController* PC );
	void eventNotifyOtherKill ( class AActor* ActorThatDidTheDmg, class APBPlayerController* Killer );
	void eventNotifyKill ( class APBPlayerController* Killer, TArray< class AController* > rKillAssistants, class APBPlayerController* Victim, int iPEStatus, class UClass* DamageType, class AActor* DamageCauser, unsigned char SpecialDeath, struct FSWeaponCode WeaponCode, class APBKWeaponParams* pVictimWeaponParams, unsigned long bWasTaunting, class APBCharacter* pVictimPawn );
	void eventNotifyAssistants ( class APBPlayerController* Killer, class APBPlayerController* Victim, TArray< class AController* > rKillAssistants );
	void eventNotifySuicide ( class APBPlayerController* Suicider, TArray< class AController* > rKillAssistants );
	void eventNotifySwitchWeapon ( class APBPlayerController* PC );
	void eventNotifyReloadStatus ( class APBPlayerController* PC, int iMinigameStatus );
	void eventNotifyHeadCrabCompleted ( class APBPlayerController* PC, class UClass* victimActorClass );
	void eventNotifySurvivedHeadcrab ( class APBPlayerController* PC );
	void TrackHit ( class APBPlayerController* Player, unsigned long bCountShotAsHit );
	void TrackKill ( class APBKWeaponParams* pWeaponParams, class APBPlayerController* Killer, class APBPlayerController* Victim );
	class APlayerReplicationInfo* FindPlayerByPlayerID ( int iPlayerID );
	void eventNotifyMatchEnded ( class APBPlayerController* PC );
	void eventNotifyPlayerLeftServer ( class APBPlayerController* PC );
	void Reset ( );
	void eventPostBeginPlay ( );
};

UClass* APBHeatSystemHandler::pClassPointer = NULL;

// Class PlanBGame.PBWeaponStatistics
// 0x0010 (0x004C - 0x003C)
class UPBWeaponStatistics : public UObject
{
public:
	TArray< struct FTPBWeaponStat >                    WeaponStatistics;                                 		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class APBPlayerReplicationInfo*                    PlayerInfo;                                       		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39705 ];

		return pClassPointer;
	};

	int GetWeaponStatIndex ( class APBKWeapon* Weapon, struct FSWeaponCode WeaponCode );
	void ClearStatistics ( );
	void Hits ( struct FTPBWeaponHitStruct hit_struct );
	void EquipWeapon ( class APBKWeapon* Weapon );
	void UnequipWeapon ( class APBKWeapon* Weapon );
	void _IntUnequipWeapon ( int nIndex );
	void UnequipAllWeapons ( );
	void LogRoundStatistics ( );
	void SetPlayerInfo ( class APBPlayerReplicationInfo* Info );
};

UClass* UPBWeaponStatistics::pClassPointer = NULL;

// Class PlanBGame.PBPlayerStatistics
// 0x0110 (0x014C - 0x003C)
class UPBPlayerStatistics : public UObject
{
public:
	class UPBWeaponStatistics*                         WeaponStatistics;                                 		// 0x003C (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class APBPlayerReplicationInfo*                    PlayerInfo;                                       		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FString >                           PlayerEventStrings;                               		// 0x0044 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           ObjectiveEventStrings;                            		// 0x0050 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                PlayerEvents[ 0x8 ];                              		// 0x005C (0x0020) [0x0000000000002000]              ( CPF_Transient )
	int                                                Objectives[ 0x3 ];                                		// 0x007C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlayTime;                                      		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nStartTime;                                     		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPBMatchProfileStatData                     mProgression;                                     		// 0x0090 (0x00BC) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39708 ];

		return pClassPointer;
	};

	int GetObjectiveEvent ( unsigned char objective_event );
	int GetPlayerEvent ( unsigned char player_event );
	void IncreasePlayerEvent ( unsigned char player_event );
	void ClearStatistics ( );
	void UseSkillEvent ( class APBSkill* Skill );
	void HeatEvent ( unsigned char HeatEvent );
	void FixDeathEvent ( class AController* Killer, class APawn* VictimPawn );
	void FixKillEvent ( class AController* Victim );
	void SetPlayerInfo ( class APBPlayerReplicationInfo* Info );
	void OnRoundStarted ( );
	void CalculatePlayingTime ( );
	void FixRoundEndEvent ( int nWinnerTeam, class AGameInfo* Game );
	void SendObjectiveEvent ( unsigned char objective_event );
	void LogRoundStatistics ( );
	void UpdateProgression ( struct FPBMatchProfileStatData* deltaProgression );
};

UClass* UPBPlayerStatistics::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_HeadShot
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_HeadShot : public UPBDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39791 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_HeadShot::pClassPointer = NULL;

// Class PlanBGame.PBWeaponTarget
// 0x0020 (0x01F8 - 0x01D8)
class APBWeaponTarget : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x01D8 (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              fTargetSize;                                      		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iLastDamage;                                      		// 0x01E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bShowDebugHud : 1;                                		// 0x01E4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              fLastDistance;                                    		// 0x01E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastTraceLoc;                                     		// 0x01EC (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39794 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void ToggleDebugHUD ( );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	float DrawOutlinedText ( class UCanvas* Canvas, int X, int Y, struct FString Text, int iAlign );
	float DrawCenteredOutlinedText ( class UCanvas* Canvas, int Y, struct FString Text );
	void PBTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, struct FVector HitNormal, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void PlayEffect ( struct FName TriggerName );
	void ReliableHit ( class AController* EventInstigator, struct FVector Position, struct FVector Momentum, class UClass* DamageType );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float VisibleCullDistance, float HiddenCullDistance );
	void ResetWeaponTarget ( );
	void PostBeginPlay ( );
};

UClass* APBWeaponTarget::pClassPointer = NULL;

// Class PlanBGame.PBRoundHUD
// 0x0193 (0x0638 - 0x04A5)
class APBRoundHUD : public APBHUD
{
public:
	TArray< struct FHUDIcon >                          rHudIcons;                                        		// 0x04A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              fChatMsgLifeTime;                                 		// 0x04B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              UnitsPerPixel;                                    		// 0x04B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bShowRole : 1;                                    		// 0x04BC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bHudVisible : 1;                                		// 0x04BC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bPrevHeatUpdated : 1;                           		// 0x04BC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bToggleStaminaDebugHud : 1;                       		// 0x04BC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bRenderSaturateEffect : 1;                        		// 0x04BC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bSaturatePostProcessEnabled : 1;                  		// 0x04BC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bShowNukeVideo : 1;                               		// 0x04BC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bEnableInstructionVideo_CampaignStarts : 1;       		// 0x04BC (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bEnableInstructionVideo_EnterMortarZone : 1;      		// 0x04BC (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      bEnableInstructionVideo_EnterFinalCampaignMap : 1;		// 0x04BC (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	unsigned long                                      bShowSkillSelectionMenu : 1;                      		// 0x04BC (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bShowTauntSelectionMenu : 1;                      		// 0x04BC (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bPrevShowScoreboard : 1;                          		// 0x04BC (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bShowingCommcenter : 1;                           		// 0x04BC (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bShowingSNDMinigame : 1;                          		// 0x04BC (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bConsolidatedLobbyShown : 1;                      		// 0x04BC (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bRewardStatsReady : 1;                            		// 0x04BC (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bShowMortarMinimap : 1;                           		// 0x04BC (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bRightClickToCloseMortar : 1;                     		// 0x04BC (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bHasPremium : 1;                                  		// 0x04BC (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	TArray< struct FIconInfo >                         IconInfoTable;                                    		// 0x04C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USwfMovie*                                   HudSwfMovie;                                      		// 0x04CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USwfMovie*                                   LobbySwfMovie;                                    		// 0x04D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USwfMovie*                                   TVTransitionMovie;                                		// 0x04D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USwfMovie*                                   SafetyBuyMovie;                                   		// 0x04D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USwfMovie*                                   DeathCameraMovie;                                 		// 0x04DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FMsgHudInfo                                 DeathHudInfoTable;                                		// 0x04E0 (0x0010) [0x0000000000000000]              
	float                                              DeathInfoScreenSize;                              		// 0x04F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      cDefaultWarningColor;                             		// 0x04F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      cDefaultBlinkColor;                               		// 0x04F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      cHealthDecreaseColor;                             		// 0x04FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBlinkSpeed;                                      		// 0x0500 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCurBlinkPercent;                                 		// 0x0504 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      cCheatColor;                                      		// 0x0508 (0x0004) [0x0000000000000000]              
	struct FColor                                      cDefaultColor;                                    		// 0x050C (0x0004) [0x0000000000000000]              
	struct FColor                                      cRadioColor;                                      		// 0x0510 (0x0004) [0x0000000000000000]              
	struct FColor                                      cFrameColor;                                      		// 0x0514 (0x0004) [0x0000000000000000]              
	float                                              fMapAlpha;                                        		// 0x0518 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMapMaxAlpha;                                     		// 0x051C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMapSize;                                         		// 0x0520 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRedMarkerAlphaModifier;                          		// 0x0524 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   WeaponChangeFailedSoundCue;                       		// 0x0528 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RefreshScannerTime;                               		// 0x052C (0x0004) [0x0000000000000000]              
	float                                              DotSize;                                          		// 0x0530 (0x0004) [0x0000000000000000]              
	TArray< struct FObjectivesHUDInfo >                ObjectivesTable;                                  		// 0x0534 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UMaterial*                                   SaturateMaterial;                                 		// 0x0540 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   GMaterialRadar;                                   		// 0x0544 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   HUDSliderMatInstance;                             		// 0x0548 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   GMaterialPointer;                                 		// 0x054C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   HelicoButton;                                     		// 0x0550 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBGFxMoviePlayer_ProgressionScene*          sfProgressionScene;                               		// 0x0554 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   vSkillSelection;                                  		// 0x0558 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                iSkillSelection;                                  		// 0x0560 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iInitialSkillSelection;                           		// 0x0564 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fSkillSelectionSensitivity;                       		// 0x0568 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fSkillNoSelectionSize;                            		// 0x056C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   vTauntSelection;                                  		// 0x0570 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                iTauntSelection;                                  		// 0x0578 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iInitialTauntSelection;                           		// 0x057C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTauntSelectionSensitivity;                       		// 0x0580 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fTauntNoSelectionSize;                            		// 0x0584 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FTHChatMessage >                    chatMessageHist;                                  		// 0x0588 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                lastChatMessageHistID;                            		// 0x0594 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iFinalHeat;                                       		// 0x0598 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iBaseHeat;                                        		// 0x059C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iMatchBonusHeat;                                  		// 0x05A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fStyleMod;                                        		// 0x05A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iMaxPossibleHeat;                                 		// 0x05A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iFansUnboosted;                                   		// 0x05AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iFansBoosted;                                     		// 0x05B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iFansTotal;                                       		// 0x05B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iFansGroup;                                       		// 0x05B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iIGCUnboosted;                                    		// 0x05BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iIGCBoosted;                                      		// 0x05C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iIGCTotal;                                        		// 0x05C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iIGCGroup;                                        		// 0x05C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iCurFameLevel;                                    		// 0x05CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iNewFameLevel;                                    		// 0x05D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iMortarMasterLevel;                               		// 0x05D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      eVoteType;                                        		// 0x05D8 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      storedHudState;                                   		// 0x05D9 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      storedHudGameMode;                                		// 0x05DA (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     sVoteTarget;                                      		// 0x05DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                mBoosterSubscriptionsXP;                          		// 0x05E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mBoosterSubscriptionsIGC;                         		// 0x05EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FHUDBoosterInfo >                   boostersData;                                     		// 0x05F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPBOffer >                          m_UnlockedItems;                                  		// 0x05FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UMaterialInstanceConstant*                   pRefFlashBangMaterial;                            		// 0x0608 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialEffect*                             pFlashBangMatEffect;                              		// 0x060C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   pRefScopeMaterial;                                		// 0x0610 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialEffect*                             pScopeMatEffect;                                  		// 0x0614 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   pRefDamageIndicatorMaterial;                      		// 0x0618 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialEffect*                             pDamageIndMatEffect;                              		// 0x061C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   pRefBerserkMaterial;                              		// 0x0620 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialEffect*                             pBerserkMatEffect;                                		// 0x0624 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   pCrosshairMI;                                     		// 0x0628 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   pCrosshairCenterMI;                               		// 0x062C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   pCrosshairEnemyHitMI;                             		// 0x0630 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              lastWarningPlayed;                                		// 0x0634 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39911 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void ShowAllHudElements ( );
	void playErrorSound ( );
	void SetPreviousMatchHeatUpdated ( );
	void UpdateCurrentRank ( class APBPlayerReplicationInfo* PRI );
	void SetHUDGameMode ( unsigned char gameMode );
	void CallDownMortarFromMap ( );
	void ShowMortarMinimap ( unsigned long bShow, int masterLevel );
	void ChangeHUDState ( unsigned char NewState );
	void UpdateConsolidatedLobbyGameSettings ( unsigned long bChangedLobbySettingsLock );
	void SetGlobalChatChanel ( unsigned long globalChat );
	void SetScaleformHUDVisible ( unsigned long isVisible );
	void eventOnLostFocusPause ( unsigned long Enable );
	void RemovePawnFromRevealBuffer ( class APBPawn* pPawn );
	void EndBerserkEffect ( );
	void StartBerserkEffect ( );
	void DisplayHOT ( int iAmount );
	void SetEnableHOTEffect ( unsigned long bEnable );
	void ShowInstantHeal ( int iAmount );
	class UPBGFxObject_HUD* GetHUDObj ( );
	void EndControlHeadCrab ( );
	void StartControlHeadCrab ( );
	void EndControlPlane ( );
	void StartControlPlane ( );
	void LockHeatBuffer ( );
	void NotifyCameraModeChanged ( class AActor* NewViewTarget );
	void C4Pulse ( );
	void HandleSNDClick ( );
	void EndInteractMiniGame ( );
	void StartInteractMiniGame ( class AActor* Object );
	void TauntEnd ( );
	void TauntStart ( );
	void NotifyRevealedOnMinimap ( );
	void NotifyMinimapSweepPerformed ( );
	void AddPlayerToMinimap ( class AActor* pPawn, unsigned long bScanned );
	void UpdateVotingSystem ( unsigned long bHasVoted );
	void CancelVote ( unsigned char CancelReason );
	void ShowPassiveVotingNotification ( struct FString sMessage );
	void EndVote ( unsigned long bVotePassed );
	void NotifyClientsHideVoteInfo ( );
	void ShowVotingSystemHUD ( class UPBGFxObject_HUD* hudObj, unsigned char VoteType, struct FString VoteTarget, struct FString sVoteStarter );
	void ShowVotingSystem ( unsigned char VoteType, struct FString VoteTarget, struct FString sVoteStarter );
	struct FString GetLocalizedVotingString ( unsigned char EventType, struct FString ObjectName, struct FString sObject1 );
	void OpenPlayerSettings ( );
	void ShowSkillSelection ( unsigned long bShow, unsigned long bCancelSelection );
	void UpdateSkillSelectionVisibility ( );
	bool CanShowSkillSelection ( );
	void CancelSkillAndTauntSelection ( );
	void ShowTauntSelection ( unsigned long bShow, unsigned long bCancelSelection );
	void UpdateTauntSelectionVisibility ( );
	bool CanShowTauntSelection ( );
	struct FString FormatTime ( int iTime );
	void NotifyWeaponChangeFailed ( unsigned char Reason );
	void AddChatMessage ( struct FString msg, unsigned char MsgType, unsigned long IsGlobal );
	void LocalMasterMessage ( class APlayerReplicationInfo* PRI, struct FString msg, float Lifetime );
	void Message ( class APlayerReplicationInfo* PRI, struct FString msg, struct FName MsgType, float Lifetime );
	void AddToMsgHistory ( struct FString PlayerName, struct FString msg, unsigned long IsGlobal, unsigned char pType );
	int FixYawValue ( int Yaw );
	float VSizeVect2D ( struct FVector2D In );
	struct FVector2D SubVect2d ( struct FVector2D first, struct FVector2D second );
	struct FVector2D AddVect2d ( struct FVector2D first, struct FVector2D second );
	void DrawShadowedText ( struct FString Text, int X, int Y, struct FColor TextColor );
	void DebugDrawObjectives ( );
	void DrawSprintStamina ( );
	void DrawHUD ( );
	void ShowRole ( );
	void ToggleStaminaDebug ( );
	void DisplayLocalMessages ( );
	void NotifyRoundEnded ( );
	void NotifyBaseDestroyed ( class APBGDR_TeamBase* pBaseInstance );
	void NotifyRobotOwningTeamChanged ( unsigned char OwningTeam );
	void RemoveLocalMessage ( class UClass* LocalMessageClass );
	void AddDeathMessage ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim, int iPersonalKills, unsigned char SpecialDeath, int WeaponCode, struct FString sSkillWeaponCode, class UClass* dmgType );
	void StopFlashBang ( );
	bool StartFlashBang ( float fFadeIn, float fFull, float fFadeOut, float fSuperFull, float fSuperOut, float fIntensity, struct FVector fOrigin );
	struct FColor GetTeamColor ( int TeamIndex, int myTeamIndex );
	void eventTick ( float DeltaTime );
	void UpdateTauntSelection ( float aMouseX, float aMouseY );
	void UpdateSkillSelection ( float aMouseX, float aMouseY );
	void ShowProgressionScreen ( );
	void ShowLoadingMovie ( unsigned long bShow );
	void ShowConsolidatedLobby ( unsigned char initialScreen, unsigned long bSkipMapVoting, unsigned long bForceOperation );
	class UUIInteraction* GetUIController ( class ULocalPlayer** LP );
	void ShowHUDScene ( unsigned long bShow );
	void TryToShowHudSceneAgain ( );
	void ToggleHUDSceneVisibility ( );
	void ShowInstructionVideo ( unsigned char eType, int TeamIndex );
	void NotifyHeatValueUpdated ( int iHeatValue );
	void HeatReset ( );
	void Initialize ( );
	void PostBeginPlay ( );
	void _OnGetUnlockedOffersAtRankDone ( int requestId, int ErrorCode, TArray< struct FPBOffer > offers );
	void StartGettingUnlockedItems ( int nOldRank, int nNewRank );
	void GetUnlockedItems ( TArray< struct FPBOffer >* offers );
	int GetUnlockedItemsCount ( );
	void CreateNewMIForPostProcessEffectMaterial ( struct FName PostProcessName, class UMaterialInstanceConstant** pMI, class UMaterialEffect** WhichMatEffect );
	void NotifyBindPostProcessEffects ( );
};

UClass* APBRoundHUD::pClassPointer = NULL;

// Class PlanBGame.PBKActorDestructible
// 0x0074 (0x0388 - 0x0314)
class APBKActorDestructible : public APBKActor
{
public:
	unsigned char                                      impacttype;                                       		// 0x0314 (0x0001) [0x0000000000000000]              
	unsigned char                                      ImpactType_RigidBodyCollision;                    		// 0x0315 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      nExplosionEffectsTrigger;                         		// 0x0316 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      nExplosionEffectsTrigger_Local;                   		// 0x0317 (0x0001) [0x0000000000000000]              
	float                                              LastCollisionEffectTime;                          		// 0x0318 (0x0004) [0x0000000000000000]              
	float                                              LastAudioEffectTime;                              		// 0x031C (0x0004) [0x0000000000000000]              
	float                                              CollisionParticleEffectIntervalSecs;              		// 0x0320 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UEngine*                                     TheEngine;                                        		// 0x0324 (0x0004) [0x0000000000000000]              
	class UPhysicalMaterial*                           forceLoadMaterial0;                               		// 0x0328 (0x0004) [0x0000000000000000]              
	class UPhysicalMaterial*                           forceLoadMaterial1;                               		// 0x032C (0x0004) [0x0000000000000000]              
	class UPhysicalMaterial*                           forceLoadMaterial2;                               		// 0x0330 (0x0004) [0x0000000000000000]              
	class UPhysicalMaterial*                           forceLoadMaterial3;                               		// 0x0334 (0x0004) [0x0000000000000000]              
	int                                                ExplodesOnDamage;                                 		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Damage;                                           		// 0x033C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageRadius;                                     		// 0x0340 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MomentumTransfer;                                 		// 0x0344 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MyDamageType;                                     		// 0x0348 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExplosionInfo                              ExplosionFX;                                      		// 0x034C (0x0020) [0x0000000000080001]              ( CPF_Edit | CPF_Component )
	class AEmitter*                                    ExplosionEffect;                                  		// 0x036C (0x0004) [0x0000000000000000]              
	struct FSWeaponCode                                iWeaponCode;                                      		// 0x0370 (0x000C) [0x0000000000000000]              
	class AController*                                 InstigatorController;                             		// 0x037C (0x0004) [0x0000000000000000]              
	class AActor*                                      ImpactedActor;                                    		// 0x0380 (0x0004) [0x0000000000000000]              
	unsigned long                                      bHasBeenBlownup : 1;                              		// 0x0384 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTimedExplosionEffect : 1;                        		// 0x0384 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40201 ];

		return pClassPointer;
	};

	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float _DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	void TakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void PlayContactEffect ( struct FImpactInfo impact, class UPBImpactData* impactData, float fVelocityKmh );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void Reset ( );
	class UParticleSystemComponent* PlayWakeupEffect ( );
	class UParticleSystemComponent* PlayRestOnGroundEffect ( );
	class UEngine* GetEngine ( );
	class UPBImpactData* GetImpactDataFromImpact ( struct FImpactInfo impact, unsigned char preferedImpactType, unsigned char alternateImpactType );
	class UPBPhysicalMaterialProperty* GetPBPhysicalMaterialProperty ( class UPhysicalMaterial* PhysMaterial );
	void CreateExplosionEffect ( );
	void OnTimer_CreateExplosionEffect ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	bool HurtRadius ( float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	void BlowUp ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* APBKActorDestructible::pClassPointer = NULL;

// Class PlanBGame.PBProjectile
// 0x003C (0x03C4 - 0x0388)
class APBProjectile : public APBKActorDestructible
{
public:
	unsigned long                                      bBegunPlay : 1;                                   		// 0x0388 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWaitForEffects : 1;                              		// 0x0388 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCreateProjectileLight : 1;                       		// 0x0388 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class UParticleSystemComponent*                    ProjEffects;                                      		// 0x038C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             ProjFlightTemplate;                               		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             Ambient;                                          		// 0x0394 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UClass*                                      ProjectileLightClass;                             		// 0x0398 (0x0004) [0x0000000000000000]              
	class UPBExplosionLight*                           ProjectileLight;                                  		// 0x039C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< struct FLightValues >                      LightTimeShift;                                   		// 0x03A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LightBrightness;                                  		// 0x03AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightRadius;                                      		// 0x03B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      LightColor;                                       		// 0x03B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FSWeaponCode                                iFiredFromWeaponCode;                             		// 0x03B8 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40200 ];

		return pClassPointer;
	};

	bool CanSplash ( );
	void MyOnParticleSystemFinished ( class UParticleSystemComponent* PSC );
	void HideProjectile ( );
	void eventTornOff ( );
	void ShutDown ( );
	void SpawnFlightEffects ( );
	void SetRBLinearVelocity ( struct FVector rbvelocity );
	void Init ( struct FVector Direction );
	bool AGHurtRadius ( float BaseDamage, float Radius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	void PostBeginPlay ( );
	void eventCreateProjectileLight ( );
};

UClass* APBProjectile::pClassPointer = NULL;

// Class PlanBGame.PBProj_Explosive
// 0x0004 (0x03C8 - 0x03C4)
class APBProj_Explosive : public APBProjectile
{
public:
	unsigned long                                      bSuppressExplosionFX : 1;                         		// 0x03C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40199 ];

		return pClassPointer;
	};

	void DeleteFx ( );
	void eventTornOff ( );
	void ShutDown ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
};

UClass* APBProj_Explosive::pClassPointer = NULL;

// Class PlanBGame.PBProj_Grenade
// 0x00A4 (0x046C - 0x03C8)
class APBProj_Grenade : public APBProj_Explosive
{
public:
	class APBKWeaponGlobals*                           pGlobals;                                         		// 0x03C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fEffectiveRadius;                                 		// 0x03CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxRadius;                                       		// 0x03D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEffectiveDamage;                                 		// 0x03D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisablePhysicsWhenStationary : 1;                		// 0x03D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisablePhysicsWhenBlowup : 1;                    		// 0x03D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bHideModelAfterExplosion : 1;                     		// 0x03D8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDestroyAfterParticleSystemFinish : 1;            		// 0x03D8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bBlowupWhenStationary : 1;                        		// 0x03D8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bBlowupOnImpact : 1;                              		// 0x03D8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNotifyExplosion : 1;                             		// 0x03D8 (0x0004) [0x0000000000002020] [0x00000040] ( CPF_Net | CPF_Transient )
	unsigned long                                      bInWater : 1;                                     		// 0x03D8 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bWantsToExplode : 1;                              		// 0x03D8 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bCanExplode : 1;                                  		// 0x03D8 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bActivated : 1;                                   		// 0x03D8 (0x0004) [0x0000000000002020] [0x00000400] ( CPF_Net | CPF_Transient )
	unsigned long                                      bUntouchedSpawnVolumes : 1;                       		// 0x03D8 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bExploded : 1;                                    		// 0x03D8 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bThrown : 1;                                      		// 0x03D8 (0x0004) [0x0000000000002020] [0x00002000] ( CPF_Net | CPF_Transient )
	struct FVector                                     vInitialAngularVel;                               		// 0x03DC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fActivationTimer;                                 		// 0x03E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 pSwitchToMeshAfterExplosion;                      		// 0x03EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          pSwitchToMatAfterExplosion;                       		// 0x03F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    GrenadeTrail;                                     		// 0x03F4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             AfterBurnPariclesTemplate;                        		// 0x03F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxTimeBeforeBlowup;                             		// 0x03FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMinTimeBeforeBlowup;                             		// 0x0400 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDestroyAfterBlowTime;                            		// 0x0404 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fNumPulsesBeforeBlowup;                           		// 0x0408 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExplosionInfo                              ExplosionNormalFx;                                		// 0x040C (0x0020) [0x0000000000080001]              ( CPF_Edit | CPF_Component )
	struct FExplosionInfo                              ExplosionInWaterFx;                               		// 0x042C (0x0020) [0x0000000000080001]              ( CPF_Edit | CPF_Component )
	class UStaticMeshComponent*                        pProjMeshComp;                                    		// 0x044C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              EnterWaterLocationZ;                              		// 0x0450 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AEmitter*                                    projExplosion;                                    		// 0x0454 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class APBSpawnVolumeTDM* >                 spawnVolumes;                                     		// 0x0458 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UPBMinimapDrawer_Grenade*                    mMinimapDrawer;                                   		// 0x0464 (0x0004) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	class AActor*                                      lastHit;                                          		// 0x0468 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40198 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void Thrown ( );
	void Init ( struct FVector Direction );
	class UParticleSystemComponent* PlayRestOnGroundEffect ( );
	class UParticleSystemComponent* eventPlayWakeupEffect ( );
	void eventOnBecomeStationary ( );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	float ModifyRadiusDamage ( class AActor* Victim, struct FVector HurtOrigin, float fRadius, float fBaseDamage );
	void DoExplodeDmg ( struct FVector HitLocation, struct FVector HitNormal );
	void TimedDestroy ( );
	void DoExplode ( );
	void OnParticleSystemFinish ( class UParticleSystemComponent* PSystem );
	void BlowUp ( );
	void ForceExplosion ( );
	void EnableExplosion ( );
	void UntouchSpawnVolumes ( );
	void TouchSpawnVolumes ( );
	void ActivateGrenade ( );
	void PostBeginPlay ( );
	bool bCooks ( );
};

UClass* APBProj_Grenade::pClassPointer = NULL;

// Class PlanBGame.PBPlayerInput
// 0x0010 (0x0268 - 0x0258)
class UPBPlayerInput : public UPlayerInput
{
public:
	float                                              LastDuckTime;                                     		// 0x0258 (0x0004) [0x0000000000000000]              
	unsigned long                                      bHoldDuck : 1;                                    		// 0x025C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHoldJump : 1;                                    		// 0x025C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bProfanityFilter : 1;                             		// 0x025C (0x0004) [0x0000000000044000] [0x00000004] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bToggleAimInput : 1;                              		// 0x025C (0x0004) [0x0000000000044000] [0x00000008] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bViewAccelEnabled : 1;                            		// 0x025C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	float                                              YawAccelThreshold;                                		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastTurnTime;                                     		// 0x0264 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40687 ];

		return pClassPointer;
	};

	void eventPlayerInput ( float DeltaTime );
	void PostProcessInput ( float DeltaTime );
	void PreProcessInput ( float DeltaTime );
	float SmoothMouseMovement ( float fDeltaTime, float fMouse, unsigned long bIsXAxis );
	void DrawHUD ( class AHUD* H );
	void Jump ( );
	void JumpReleased ( );
	void UnDuck ( );
	void Duck ( );
	void ToggleDuck ( );
	void ViewAcceleration ( float DeltaTime );
};

UClass* UPBPlayerInput::pClassPointer = NULL;

// Class PlanBGame.PBBulletDamageType
// 0x0000 (0x0100 - 0x0100)
class UPBBulletDamageType : public UPBDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41167 ];

		return pClassPointer;
	};

};

UClass* UPBBulletDamageType::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_M4A1
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_M4A1 : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41166 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_M4A1::pClassPointer = NULL;

// Class PlanBGame.PBAchievement_FastReloader
// 0x000C (0x00B8 - 0x00AC)
class UPBAchievement_FastReloader : public UPBAchievementWinRound
{
public:
	int                                                m_nReloadsCount;                                  		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nReloadsDone;                                   		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bWon : 1;                                       		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bFail : 1;                                      		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41187 ];

		return pClassPointer;
	};

	struct FString _IntFillDescription ( struct FString sDesc );
	void RecoverValues ( );
	bool IsAchievementBeingCompleted ( );
	void _InternalInitialize ( );
	bool OnLooseRound ( struct FTAchievementEventParams* Params );
	bool OnWinRound ( struct FTAchievementEventParams* Params );
	bool OnReloadWeapon ( struct FTAchievementEventParams* Params );
};

UClass* UPBAchievement_FastReloader::pClassPointer = NULL;

// Class PlanBGame.PBAchievement_GloriousReturn
// 0x0010 (0x00BC - 0x00AC)
class UPBAchievement_GloriousReturn : public UPBAchievementWinRound
{
public:
	int                                                m_nLooseCount;                                    		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nWinCount;                                      		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nLooseLeft;                                     		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nWinLeft;                                       		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41211 ];

		return pClassPointer;
	};

	struct FString _IntFillDescription ( struct FString sDesc );
	void RecoverValues ( );
	bool IsAchievementBeingCompleted ( );
	void _InternalInitialize ( );
	bool OnLooseRound ( struct FTAchievementEventParams* Params );
	bool OnWinRound ( struct FTAchievementEventParams* Params );
};

UClass* UPBAchievement_GloriousReturn::pClassPointer = NULL;

// Class PlanBGame.PBCGGameReplicationInfo
// 0x0000 (0x0374 - 0x0374)
class APBCGGameReplicationInfo : public APBGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41218 ];

		return pClassPointer;
	};

};

UClass* APBCGGameReplicationInfo::pClassPointer = NULL;

// Class PlanBGame.PBAchievement_InvincibleBunch
// 0x0008 (0x00B4 - 0x00AC)
class UPBAchievement_InvincibleBunch : public UPBAchievementWinRound
{
public:
	int                                                m_nMaxTeammatesKilled;                            		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nTeammatesKilled;                               		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41233 ];

		return pClassPointer;
	};

	void RecoverValues ( );
	void LogAchievement ( );
	bool IsAchievementBeingCompleted ( );
	void _InternalInitialize ( );
	bool OnWinRound ( struct FTAchievementEventParams* Params );
	bool OnWideKilledEvent ( struct FTAchievementEventParams* Params );
};

UClass* UPBAchievement_InvincibleBunch::pClassPointer = NULL;

// Class PlanBGame.PBAchievementKilledByWeapon
// 0x0014 (0x00C0 - 0x00AC)
class UPBAchievementKilledByWeapon : public UPBAchievementWinRound
{
public:
	struct FString                                     m_sWeaponName;                                    		// 0x00AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                m_nKillsToComplete;                               		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nKillsDone;                                     		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41248 ];

		return pClassPointer;
	};

	struct FString _IntFillDescription ( struct FString sDesc );
	bool _IsEqual ( class UPBAchievement* pSource, class UPBAchievement* pTarget );
	void RecoverValues ( );
	void StoreValues ( );
	void _ExportData ( class UPBAchievement* export_from, TArray< unsigned char >* Data );
	void _InternalOnAchievementComplete ( );
	void LogAchievement ( );
	bool _ImportData ( TArray< unsigned char >* Data );
	bool IsAchievementBeingCompleted ( );
	void _InternalInitialize ( );
	struct FUIRangeData GetProgressData ( );
	bool OnWinRound ( struct FTAchievementEventParams* Params );
	bool OnKillEvent ( struct FTAchievementEventParams* Params );
};

UClass* UPBAchievementKilledByWeapon::pClassPointer = NULL;

// Class PlanBGame.PBAchievement_KillerQueen
// 0x0001 (0x00C1 - 0x00C0)
class UPBAchievement_KillerQueen : public UPBAchievementKilledByWeapon
{
public:
	unsigned char                                      m_eGameMode;                                      		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41284 ];

		return pClassPointer;
	};

	bool OnKillEvent ( struct FTAchievementEventParams* Params );
	bool IsAppropriateGame ( class AGameReplicationInfo* game_info );
	bool OnWinRound ( struct FTAchievementEventParams* Params );
};

UClass* UPBAchievement_KillerQueen::pClassPointer = NULL;

// Class PlanBGame.PBAchievement_LastSecond
// 0x0008 (0x00B4 - 0x00AC)
class UPBAchievement_LastSecond : public UPBAchievementWinRound
{
public:
	unsigned long                                      m_bFinished : 1;                                  		// 0x00AC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bFailed : 1;                                    		// 0x00AC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	int                                                m_nLastSeconds;                                   		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41297 ];

		return pClassPointer;
	};

	bool IsAchievementBeingCompleted ( );
	void _InternalInitialize ( );
	bool OnTeamChanged ( struct FTAchievementEventParams* Params );
	bool OnLooseRound ( struct FTAchievementEventParams* Params );
	void RecoverValues ( );
	bool OnWinRound ( struct FTAchievementEventParams* Params );
};

UClass* UPBAchievement_LastSecond::pClassPointer = NULL;

// Class PlanBGame.PBAchievement_MeanFreak
// 0x0010 (0x00BC - 0x00AC)
class UPBAchievement_MeanFreak : public UPBAchievementWinRound
{
public:
	struct FString                                     m_sWeaponName;                                    		// 0x00AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bFinished : 1;                                  		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41315 ];

		return pClassPointer;
	};

	void LogAchievement ( );
	bool IsAchievementBeingCompleted ( );
	void _InternalInitialize ( );
	bool OnWinRound ( struct FTAchievementEventParams* Params );
	bool OnKillEvent ( struct FTAchievementEventParams* Params );
};

UClass* UPBAchievement_MeanFreak::pClassPointer = NULL;

// Class PlanBGame.PBAchievement_MortalMortar
// 0x0000 (0x00C0 - 0x00C0)
class UPBAchievement_MortalMortar : public UPBAchievementKilledByWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41332 ];

		return pClassPointer;
	};

	void _InternalInitialize ( );
	bool OnWinRound ( struct FTAchievementEventParams* Params );
	struct FUIRangeData GetProgressData ( );
	bool OnMortarStartedEvent ( struct FTAchievementEventParams* Params );
};

UClass* UPBAchievement_MortalMortar::pClassPointer = NULL;

// Class PlanBGame.PBAchievement_MrNiceGuy
// 0x0008 (0x00B4 - 0x00AC)
class UPBAchievement_MrNiceGuy : public UPBAchievement
{
public:
	int                                                m_nBuddyCount;                                    		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nBuddyAdded;                                    		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41344 ];

		return pClassPointer;
	};

	struct FString _IntFillDescription ( struct FString sDesc );
	bool _IsEqual ( class UPBAchievement* pSource, class UPBAchievement* pTarget );
	void _ExportData ( class UPBAchievement* export_from, TArray< unsigned char >* Data );
	void LogAchievement ( );
	void RecoverValues ( );
	void StoreValues ( );
	bool _ImportData ( TArray< unsigned char >* Data );
	bool IsAchievementBeingCompleted ( );
	void _InternalInitialize ( );
	bool OnAddBuddy ( struct FTAchievementEventParams* Params );
	void _InternalOnAchievementComplete ( );
	struct FUIRangeData GetProgressData ( );
};

UClass* UPBAchievement_MrNiceGuy::pClassPointer = NULL;

// Class PlanBGame.PBAchievement_MrPostman
// 0x0008 (0x00B4 - 0x00AC)
class UPBAchievement_MrPostman : public UPBAchievement
{
public:
	int                                                m_nBuddyMessageCount;                             		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nBuddyMessageSent;                              		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41376 ];

		return pClassPointer;
	};

	struct FString _IntFillDescription ( struct FString sDesc );
	bool _IsEqual ( class UPBAchievement* pSource, class UPBAchievement* pTarget );
	void _ExportData ( class UPBAchievement* export_from, TArray< unsigned char >* Data );
	void LogAchievement ( );
	void RecoverValues ( );
	void StoreValues ( );
	bool _ImportData ( TArray< unsigned char >* Data );
	bool IsAchievementBeingCompleted ( );
	void _InternalInitialize ( );
	bool OnSendBuddyMessage ( struct FTAchievementEventParams* Params );
	void _InternalOnAchievementComplete ( );
	struct FUIRangeData GetProgressData ( );
};

UClass* UPBAchievement_MrPostman::pClassPointer = NULL;

// Class PlanBGame.PBAchievement_ReloadPunisher
// 0x0000 (0x00C0 - 0x00C0)
class UPBAchievement_ReloadPunisher : public UPBAchievementKilledByWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41408 ];

		return pClassPointer;
	};

	bool OnKillEvent ( struct FTAchievementEventParams* Params );
};

UClass* UPBAchievement_ReloadPunisher::pClassPointer = NULL;

// Class PlanBGame.PBAchievement_TerroristDomination
// 0x0004 (0x00B0 - 0x00AC)
class UPBAchievement_TerroristDomination : public UPBAchievementWinRound
{
public:
	unsigned long                                      m_bFinished : 1;                                  		// 0x00AC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41413 ];

		return pClassPointer;
	};

	bool IsAchievementBeingCompleted ( );
	void _InternalInitialize ( );
	bool OnWinRound ( struct FTAchievementEventParams* Params );
};

UClass* UPBAchievement_TerroristDomination::pClassPointer = NULL;

// Class PlanBGame.PBAchievement_Unscathed
// 0x000C (0x00B8 - 0x00AC)
class UPBAchievement_Unscathed : public UPBAchievementWinRound
{
public:
	int                                                m_nMaxKilled;                                     		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nKilled;                                        		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bFinished : 1;                                  		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41422 ];

		return pClassPointer;
	};

	void RecoverValues ( );
	void LogAchievement ( );
	bool IsAchievementBeingCompleted ( );
	void _InternalInitialize ( );
	bool OnWinRound ( struct FTAchievementEventParams* Params );
	bool OnKilledEvent ( struct FTAchievementEventParams* Params );
};

UClass* UPBAchievement_Unscathed::pClassPointer = NULL;

// Class PlanBGame.PBAchievement_Variete
// 0x0010 (0x00BC - 0x00AC)
class UPBAchievement_Variete : public UPBAchievementWinRound
{
public:
	int                                                m_nWeaponsCount;                                  		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           m_sWeapons;                                       		// 0x00B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41438 ];

		return pClassPointer;
	};

	struct FString _IntFillDescription ( struct FString sDesc );
	void RecoverValues ( );
	void LogAchievement ( );
	bool IsAchievementBeingCompleted ( );
	void _InternalInitialize ( );
	bool OnWinRound ( struct FTAchievementEventParams* Params );
	bool OnKillEvent ( struct FTAchievementEventParams* Params );
};

UClass* UPBAchievement_Variete::pClassPointer = NULL;

// Class PlanBGame.PBAchievementListLimiter
// 0x0018 (0x0054 - 0x003C)
class UPBAchievementListLimiter : public UPBChoiseLimiter
{
public:
	int                                                m_nCategory;                                      		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBPlayerController*                         m_pOwner;                                         		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCount;                                         		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UPBAchievement* >                    m_Achievements;                                   		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41521 ];

		return pClassPointer;
	};

	void SetOwner ( class APBPlayerController* pOwner );
	int _FindAchievementBySet ( struct FName SetName );
	void SetCategory ( int nCategory );
	TArray< class UPBAchievement* > GetAchievementsList ( );
	int GetLimit ( );
};

UClass* UPBAchievementListLimiter::pClassPointer = NULL;

// Class PlanBGame.PBSkillsList
// 0x0030 (0x006C - 0x003C)
class UPBSkillsList : public UObject
{
public:
	class UPBSkillsList*                               pSkillsListArchetype;                             		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class APBSkill* >                          rSkills;                                          		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class APBSkill* >                          rDirectDefaultSkills;                             		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FPBTierInfo >                       rTiers;                                           		// 0x0058 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              fEnergyDrainRate;                                 		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEnergyDrainTimeOut;                              		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41736 ];

		return pClassPointer;
	};

	float GetHeatRequirement ( int iTier );
	bool SpawnSkillFromArchetype ( struct FGuid fromGuid, int skillLevel, class AController* Owner, unsigned long bDoNotEnforceDefaultLevel, class APBSkill** pSkillOut );
	float GetDrainTimeOut ( );
	float GetDrainCost ( );
	int GetTierCount ( );
	class UPBSkillsList* GetInstance ( );
};

UClass* UPBSkillsList::pClassPointer = NULL;

// Class PlanBGame.PBDamagerDevice
// 0x000C (0x01E4 - 0x01D8)
class APBDamagerDevice : public AActor
{
public:
	class APBPlayerController*                         DeviceOwnerController;                            		// 0x01D8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class APBCharacter*                                DeviceOwnerCharacter;                             		// 0x01DC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              DeathCameraHeightFromCenter;                      		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41845 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	float GetDeathCameraHeightOffset ( );
};

UClass* APBDamagerDevice::pClassPointer = NULL;

// Class PlanBGame.PBSkill_TurretWeapon
// 0x01A4 (0x0388 - 0x01E4)
class APBSkill_TurretWeapon : public APBDamagerDevice
{
public:
	class USkeletalMeshComponent*                      pBaseTurret;                                      		// 0x01E4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      pTopTurret;                                       		// 0x01E8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           pLightEnv;                                        		// 0x01EC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             pCommonSoundComp;                                 		// 0x01F0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             pAlwaysOnSoundComp;                               		// 0x01F4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             pFiringSoundComp;                                 		// 0x01F8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    pLaserComp;                                       		// 0x01FC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    pMuzzleFlashComp;                                 		// 0x0200 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    pHealingParticleComp;                             		// 0x0204 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        AutoRepairMeshComp;                               		// 0x0208 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        ScannerBaseMeshComp;                              		// 0x020C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        ScannerTopMeshComp;                               		// 0x0210 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              fInitializingSoundFadeIn;                         		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fInitializingSoundFadeOut;                        		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   pInitializingSoundLoop;                           		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   pWarmupSoundCue;                                  		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   pIdleSoundCue;                                    		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   pFiringSoundCue;                                  		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   pEndFiringCue;                                    		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          pFriendlyMaterialInstance;                        		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          pEnemyMaterialInstance;                           		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTracerSpawnTimer;                                		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fScannerRotateYawSpeed;                           		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             pTracerParticleSystem;                            		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             pMuzzleFlashPS;                                   		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             BreakingPS;                                       		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             LaserPS;                                          		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BaseTurretAttachBoneName;                         		// 0x0250 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MuzzleFlashSocketName;                            		// 0x0258 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LaserSocketName;                                  		// 0x0260 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AutoRepairSocketName;                             		// 0x0268 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ScannerStaticSocketName;                          		// 0x0270 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ScannerDynamicSocketName;                         		// 0x0278 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShootSocketName;                                  		// 0x0280 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fStartTraceHeight;                                		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRegenHealthPerSecond;                            		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxBulletRange;                                  		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fUpFOV;                                           		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDownFOV;                                         		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCharacterHeightCompensation;                     		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTurretHeightCompensation;                        		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bShouldDestroyAllPreviouslyPlacedTurrets : 1;     		// 0x02A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCanTargetTurrets : 1;                            		// 0x02A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLaserActive : 1;                                 		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bInitialized : 1;                                 		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bRegenEffectsActive : 1;                          		// 0x02A4 (0x0004) [0x0000000000002020] [0x00000010] ( CPF_Net | CPF_Transient )
	unsigned long                                      bScanActive : 1;                                  		// 0x02A4 (0x0004) [0x0000000000002020] [0x00000020] ( CPF_Net | CPF_Transient )
	unsigned long                                      bRegenImprovement : 1;                            		// 0x02A4 (0x0004) [0x0000000000002020] [0x00000040] ( CPF_Net | CPF_Transient )
	unsigned long                                      bScanImprovement : 1;                             		// 0x02A4 (0x0004) [0x0000000000002020] [0x00000080] ( CPF_Net | CPF_Transient )
	unsigned long                                      bHeadcrabbed : 1;                                 		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	float                                              fScanTimer;                                       		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fScanRange;                                       		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFireRate;                                        		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTurretRotSpeed;                                  		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CharacterShootAtBoneName;                         		// 0x02B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRangeDmgInfo >                     rRangeDmg;                                        		// 0x02C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       InitializingAnimName;                             		// 0x02CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FiringAnimName;                                   		// 0x02D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       IdleAnimName;                                     		// 0x02DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DestroyedAnimName;                                		// 0x02E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDestroyTimer;                                    		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeUntilTurretStopsFiring;                      		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRegenStartAfterActivityTime;                     		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWarmupTime;                                      		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTrackingTimer;                                   		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iDamagePerBullet;                                 		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fYawFOV;                                          		// 0x0304 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              fInitializingTime;                                		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTargetTurretYaw;                                 		// 0x030C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTargetTurretPitch;                               		// 0x0310 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fCurrentTurretYaw;                                		// 0x0314 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fCurrentTurretPitch;                              		// 0x0318 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fAggressionRange;                                 		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAttackRange;                                     		// 0x0320 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEffectiveRange;                                  		// 0x0324 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iTargetTeam;                                      		// 0x0328 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fLifeTime;                                        		// 0x032C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLifeTimeDefault;                                 		// 0x0330 (0x0004) [0x0000000000000000]              
	float                                              fHitPoints;                                       		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCurrentHitPoints;                                		// 0x0338 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iReplicatedHealth;                                		// 0x033C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iReplicatedHitPoints;                             		// 0x0340 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              ScanRadius;                                       		// 0x0344 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iMasterLevel;                                     		// 0x0348 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      TargetActor;                                      		// 0x034C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fLastActivityTime;                                		// 0x0350 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       targetStateName;                                  		// 0x0354 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class APlayerReplicationInfo*                      OwnerPRI;                                         		// 0x035C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     vHitLocation;                                     		// 0x0360 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FSWeaponCode                                SkillWeaponCode;                                  		// 0x036C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              fInteractTime;                                    		// 0x0378 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     indicatorOffset;                                  		// 0x037C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41844 ];

		return pClassPointer;
	};

	bool OnInteract ( class AController* User );
	void EndInteract ( class AController* User, unsigned long bInteractionSuccessful );
	float GetInteractDistance ( float* objectSize );
	float GetInteractTime ( );
	void DrawInteractionInfo ( class AHUD* H, class AController* User );
	void SetInteractionInfo ( class AController* User );
	bool IsVolumeInteractible ( );
	class AActor* GetInteractibleActor ( );
	void eventReplicatedEvent ( struct FName VarName );
	void AttachScanMeshes ( );
	void AttachAutoRepairMesh ( );
	bool AllowImpactEffects ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal );
	void PlayImpactEffects ( struct FVector vHit );
	unsigned char GetTeamNum ( );
	void SwitchTargetTeam ( int NewTeam );
	void StartScanTimer ( );
	void StopScanTimer ( );
	void SetNewOwner ( class APBPlayerController* NewOwner );
	bool IsAlive ( );
	void ProcessMissedShot ( );
	void ProcessHit ( class AActor* Victim, unsigned long bKill, int iDamage, float fDistance );
	void SpawnTracer ( );
	void StopFiringEffects ( );
	void StartFiringEffects ( );
	void TurnScanner ( float fDeltaTime );
	void eventTick ( float DeltaTime );
	void FaceLocation ( float fDeltaTime, struct FVector vLocation );
	float GetPitchAngle ( struct FVector vLocation );
	float GetYawAngle ( struct FVector vLocation );
	int GetHealth ( );
	float GetHealthRatio ( );
	struct FVector GetTraceStartLoc ( );
	bool CanShootAt ( class AActor* pShootAtActor, float fUseRange );
	bool IsTargetAlive ( class AActor* pShootAtActor );
	bool InFOV ( struct FVector vLoc );
	struct FVector GetToShootLocation ( class AActor* pShootAtActor );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void PlayAnim ( struct FName AnimName, float fDuration );
	void AdjustLaserLength ( );
	struct FVector GetShootDir ( );
	void SetTargetState ( struct FName StateName );
	void SetupVisuals ( );
	void NotifyLocalPlayerTeamReceived ( );
	void SetupTurretParts ( );
	void PlayRegenEffects ( );
	void StartRegeneration ( unsigned long bEnable );
	void SweepScan ( );
	void InitFromSkill ( class APBSkill_Turret* pSkill, class AController* Placer );
	void DestroyPreviouslyPlacedTurret ( class APBPlayerController* pPlayer );
	void SetHealth ( float fNewHealth );
	void DestroyBecauseOfBlockVolume ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
};

UClass* APBSkill_TurretWeapon::pClassPointer = NULL;

// Class PlanBGame.PBActorFactoryDestructibleStaticActor
// 0x0000 (0x006C - 0x006C)
class UPBActorFactoryDestructibleStaticActor : public UActorFactoryStaticMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41876 ];

		return pClassPointer;
	};

};

UClass* UPBActorFactoryDestructibleStaticActor::pClassPointer = NULL;

// Class PlanBGame.PBActorFactoryDynamicSkeletalMeshActor
// 0x0000 (0x006C - 0x006C)
class UPBActorFactoryDynamicSkeletalMeshActor : public UActorFactorySkeletalMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41878 ];

		return pClassPointer;
	};

};

UClass* UPBActorFactoryDynamicSkeletalMeshActor::pClassPointer = NULL;

// Class PlanBGame.PBDynamicSkeletalMeshActor
// 0x0000 (0x0218 - 0x0218)
class APBDynamicSkeletalMeshActor : public ASkeletalMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41880 ];

		return pClassPointer;
	};

};

UClass* APBDynamicSkeletalMeshActor::pClassPointer = NULL;

// Class PlanBGame.PBActorFactoryDynamicSMActor
// 0x0000 (0x006C - 0x006C)
class UPBActorFactoryDynamicSMActor : public UActorFactoryStaticMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41881 ];

		return pClassPointer;
	};

};

UClass* UPBActorFactoryDynamicSMActor::pClassPointer = NULL;

// Class PlanBGame.PBDynamicSMActor
// 0x0000 (0x01E0 - 0x01E0)
class APBDynamicSMActor : public AStaticMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41883 ];

		return pClassPointer;
	};

};

UClass* APBDynamicSMActor::pClassPointer = NULL;

// Class PlanBGame.PBActorFactoryRigidBodyDestructible
// 0x0000 (0x0098 - 0x0098)
class UPBActorFactoryRigidBodyDestructible : public UActorFactoryRigidBody
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41884 ];

		return pClassPointer;
	};

};

UClass* UPBActorFactoryRigidBodyDestructible::pClassPointer = NULL;

// Class PlanBGame.PBActorFactoryStaticMeshDestructible
// 0x0000 (0x006C - 0x006C)
class UPBActorFactoryStaticMeshDestructible : public UActorFactoryStaticMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41886 ];

		return pClassPointer;
	};

};

UClass* UPBActorFactoryStaticMeshDestructible::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_ChangeTeam
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_ChangeTeam : public UPBDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41945 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_ChangeTeam::pClassPointer = NULL;

// Class PlanBGame.PBPawnSoundGroup
// 0x0040 (0x007C - 0x003C)
class UPBPawnSoundGroup : public UObject
{
public:
	class USoundCue*                                   DodgeSound;                                       		// 0x003C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   DoubleJumpSound;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   JumpSound;                                        		// 0x0044 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   LandSound;                                        		// 0x0048 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   DoubleLandSound;                                  		// 0x004C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   DyingSound;                                       		// 0x0050 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   IAmHitSound;                                      		// 0x0054 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   SniperHitSound;                                   		// 0x0058 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   ReloadSound;                                      		// 0x005C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   KillSound;                                        		// 0x0060 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   SpotSound;                                        		// 0x0064 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   ThrowGrenadeSound;                                		// 0x0068 (0x0004) [0x0000000000000000]              
	TArray< struct FFootstepSoundInfo >                FootstepSounds;                                   		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USoundCue*                                   DefaultFootstepSound;                             		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41952 ];

		return pClassPointer;
	};

	void PlayDyingSound ( class APawn* P );
	void PlayFootStepSound ( class APawn* P, int FootDown, struct FName MaterialType );
	void PlayDoubleLandSound ( class APawn* P );
	void PlayLandSound ( class APawn* P );
	void PlayJumpSound ( class APawn* P );
	void PlayDoubleJumpSound ( class APawn* P );
	void PlayDodgeSound ( class APawn* P );
	class USoundCue* GetGrenadeThrowSound ( );
	class USoundCue* GetSpotSound ( );
	class USoundCue* GetKillSound ( );
	class USoundCue* GetReloadSound ( );
	class USoundCue* GetSniperHitSound ( );
	class USoundCue* GetIAmHitSound ( );
	class USoundCue* PrepareAudibleDistance ( class USoundCue* sndCue );
	void TryPlay ( class APawn* P, class USoundCue* Sound );
};

UClass* UPBPawnSoundGroup::pClassPointer = NULL;

// Class PlanBGame.PBLocalMessage
// 0x0010 (0x0060 - 0x0050)
class UPBLocalMessage : public ULocalMessage
{
public:
	TArray< struct FTextVoiceMsg >                     AMsg;                                             		// 0x0050 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bTeamMessage : 1;                                 		// 0x005C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAutoVoiceMessage : 1;                            		// 0x005C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42142 ];

		return pClassPointer;
	};

	void PrecacheGameAnnouncements ( class APBAnnouncer* Announcer, class UClass* GameClass );
	bool AddAnnouncement ( class APBAnnouncer* Announcer, unsigned char MessageIndex );
	class USoundCue* LoadSoundCue ( class APlayerController* pCntrl, unsigned char MessageIndex );
	bool IsRewardAnnouncement ( unsigned char MessageIndex );
	unsigned char AnnouncementLevel ( unsigned char MessageIndex );
	struct FString GetFullSoundName ( class APlayerController* Player, unsigned char MessageIndex );
	void ClientRemove ( class APlayerController* P );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventStartedPlaying ( class APlayerController* P, int MessageID, class APBPlayerReplicationInfo* SenderPRI );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UPBLocalMessage::pClassPointer = NULL;

// Class PlanBGame.PBVoiceOverList
// 0x0078 (0x00B4 - 0x003C)
class UPBVoiceOverList : public UObject
{
public:
	float                                              fRadioMessageDelay;                               		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRadioMessageBatchDelay;                          		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iRadioMessageBatchMaxAmount;                      		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     sRadioPrefix;                                     		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FPBVoiceOverInfo >                  rAutomaticVoiceOvers;                             		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FPBVoiceOverInfo >                  rRadioMessages;                                   		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FPBRadioCommandGroup >              rRadioCommands;                                   		// 0x006C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   pReceiver1PSoundCue;                              		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   pReceiver3PSoundCue;                              		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   pSender1PSoundCue;                                		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSafetyBuyCrowdFadeInTime;                        		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSafetyBuyCrowdFadeOutTime;                       		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SafetyBuyCrowdLoop;                               		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iStartingSecondForTickVolumeIncrease;             		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMinimumTickVolumeMultiplier;                     		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SafetyBuyCrowdExcitedOneShot;                     		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   TickingSoundCue;                                  		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FinalTickingSoundCue;                             		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPBTakeHitSoundInfo >               rPainSounds;                                      		// 0x00A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UPBVoiceOverList*                            pVoiceoverListArchetype;                          		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42148 ];

		return pClassPointer;
	};

	class USoundCue* GetPainSound ( unsigned char DamageType, unsigned long bIsFemale );
	int GetRadioGroupsCount ( );
	struct FString GetRadioCommandMessage ( int CommandID );
	struct FString _LocalizeCommand ( struct FString SourceString );
	struct FString GetRadioGroupName ( int GroupID );
	void GetAllCommands ( int GroupID, TArray< int >* rCommands );
	TArray< float > ClearOldMessages ( TArray< float > rSentVoiceovers, float fCurrentTime );
	bool IsLimitingRadioMessageCount ( );
	bool IsAllowedToTransmit ( float fTimeSinceLastMessage, int iMessagesSent );
	bool _GetAutomaticVoiceOverInfo ( int eType, struct FPBVoiceOverInfo* pInfo );
	bool _GetRadioMessageInfo ( int iIndex, struct FPBVoiceOverInfo* pInfo );
	bool IsAutomaticVoiceOverAllowed ( int eIndex, class AGameReplicationInfo* GRI );
	bool IsRadioMessageAllowed ( int iIndex, class AGameReplicationInfo* GRI );
	bool _IsMessageAllowed ( int iIndex, class AGameReplicationInfo* GRI, unsigned long bIsRadioMessage );
	bool _GetMessageInfo ( int iIndex, unsigned long bIsRadioMessage, struct FPBVoiceOverInfo* pInfo );
	class USoundCue* GetTransmitCue ( unsigned long bIsSender, unsigned long bIs3P );
	bool _GetMessage ( int iIndex, unsigned long bIsMale, unsigned long bIsRadioMessage, unsigned long bIsSender, int iVariationIndex, struct FPBVoiceOver* pInfo );
	int GetRandomVoiceoverMessageIndex ( int iIndex, unsigned long bIsMale, unsigned long bIsRadioMessage );
	bool GetAutomaticVoiceOverMessage ( int iIndex, unsigned long bIsMale, unsigned long bIsSender, int iVariationIndex, struct FPBVoiceOver* pInfo );
	bool GetRadioMessage ( int iIndex, unsigned long bIsMale, unsigned long bIsSender, int iVariationIndex, struct FPBVoiceOver* pInfo );
	class UPBVoiceOverList* GetInstance ( );
};

UClass* UPBVoiceOverList::pClassPointer = NULL;

// Class PlanBGame.PBImpactFootstepData
// 0x0006 (0x0042 - 0x003C)
class UPBImpactFootstepData : public UObject
{
public:
	unsigned char                                      FootstepArray[ 0x6 ];                             		// 0x003C (0x0006) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42217 ];

		return pClassPointer;
	};

	unsigned char GetCorrespondingImpactType ( int nFootDown );
};

UClass* UPBImpactFootstepData::pClassPointer = NULL;

// Class PlanBGame.PBObjectiveVolume
// 0x0004 (0x0218 - 0x0214)
class APBObjectiveVolume : public AVolume
{
public:
	class APBGameObjectiveByVolume*                    ObjectiveOwner;                                   		// 0x0214 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42263 ];

		return pClassPointer;
	};

	void SetObjectiveOwner ( class APBGameObjectiveByVolume* ObjOwner );
	void NotifyTouchingPawnDied ( class AActor* Other );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* APBObjectiveVolume::pClassPointer = NULL;

// Class PlanBGame.PBKWeapon_Akimbo
// 0x0010 (0x05D0 - 0x05C0)
class APBKWeapon_Akimbo : public APBKWeapon_Skill
{
public:
	float                                              currentFOVAlpha;                                  		// 0x05C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SlideFOV;                                         		// 0x05C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SlideWeaponFOV;                                   		// 0x05C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SlideFOVChangeSpeed;                              		// 0x05CC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42454 ];

		return pClassPointer;
	};

	void eventTick ( float Delta );
	float AdjustFOVAngle ( float fWeaponFOV );
	float AdjustFOVWeaponAngle ( float fWeaponFOV );
	bool ShouldRefire ( );
	void FireAmmunition ( );
	void OnGlideEnded ( );
	void OnGlideStarted ( );
	void EndGlide ( );
	void SetupTargetFOV ( );
	void StartGlide ( );
	void ToggleGlide ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	bool ShouldPreventWeaponChange ( );
	bool OnUseSkill ( unsigned char FireModeNum );
};

UClass* APBKWeapon_Akimbo::pClassPointer = NULL;

// Class PlanBGame.PBKWeapon_Berserk
// 0x0014 (0x05D4 - 0x05C0)
class APBKWeapon_Berserk : public APBKWeapon_Skill
{
public:
	unsigned long                                      bEffectCancelled : 1;                             		// 0x05C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      b1PBerserkEffectActive : 1;                       		// 0x05C0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              currentFOVAlpha;                                  		// 0x05C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ChargeFOV;                                        		// 0x05C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ChargeWeaponFOV;                                  		// 0x05CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ChargeFOVChangeSpeed;                             		// 0x05D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42455 ];

		return pClassPointer;
	};

	void eventTick ( float Delta );
	float AdjustFOVAngle ( float fWeaponFOV );
	float AdjustFOVWeaponAngle ( float fWeaponFOV );
	void SetupTargetFOV ( );
	void SetBerserkCharging ( unsigned long bCharging );
	void ClientCancelCharge ( );
	void CancelCharge ( );
	void ActivateBerserkEffects ( unsigned long bEnable );
	void ServerStartBerserkCharge ( );
	void StartBerserkCharge ( );
	void ClientEndActiveState ( );
	void EndActiveState ( );
	void CancelSkill ( );
	float GetGroundSpeedFactor ( );
	void UpdateGroundSpeedFactor ( );
	bool CanInteract ( struct FName ClassName );
	void ReloadWeapon ( );
	bool OnUseSkill ( unsigned char FireModeNum );
};

UClass* APBKWeapon_Berserk::pClassPointer = NULL;

// Class PlanBGame.PBKWeapon_GattlingGun
// 0x0008 (0x05C8 - 0x05C0)
class APBKWeapon_GattlingGun : public APBKWeapon_Skill
{
public:
	unsigned long                                      bWeaponChangePending : 1;                         		// 0x05C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsSpinning : 1;                                  		// 0x05C0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bFirePending : 1;                                 		// 0x05C0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              fSpinPerc;                                        		// 0x05C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42456 ];

		return pClassPointer;
	};

	float ModifyRadiusDamage ( class AActor* Victim, struct FVector HurtOrigin, float fEffectiveRadius, float fRadius, float fBaseDamage );
	bool DoExplodingDamage ( float BaseDamage, float DamageRadiusMax, float DamageRadiusEffective, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	void ProcessClientFire ( );
	void InstantFire ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	bool ShouldFire ( );
	bool TryPutDown ( );
	void CheckFire ( );
	void CheckSpinning ( );
	void ServerSetFirePending ( unsigned long bNewFirePending );
	void SetFirePending ( unsigned long bNewFirePending );
	void ServerSetSpinning ( unsigned long bSpin );
	void SetSpinning ( unsigned long bSpin );
	bool CanStartSpinning ( );
	void EndFire ( unsigned char FireModeNum );
	void BeginFire ( unsigned char FireModeNum );
	void StopHOT ( );
	void StartHOT ( );
	void NotifyFullSpinDownAchieved ( );
	void NotifyFullSpinUpAchieved ( );
	void NotifySpinDownStarted ( );
	void NotifySpinUpStarted ( );
	void NotifySpinPercChanged ( );
	void Tick ( float fDeltaTime );
	float GetSpinSpeed ( );
	bool CanTaunt ( );
	void NotifyTauntEnded ( );
	void NotifyTauntStarted ( );
	void OutOfEnergy ( );
	bool CanJump ( );
	bool CanInteract ( struct FName ClassName );
	void UpdateGroundSpeedFactor ( );
	void NotifyPawnCrouched ( unsigned long bCrouched );
	float GetGroundSpeedFactor ( );
	bool PendingOnUseSkill ( unsigned char FireModeNum );
	bool OnUseSkill ( unsigned char FireModeNum );
};

UClass* APBKWeapon_GattlingGun::pClassPointer = NULL;

// Class PlanBGame.PBKWeapon_HeadCrab
// 0x0001 (0x05C1 - 0x05C0)
class APBKWeapon_HeadCrab : public APBKWeapon_Skill
{
public:
	unsigned char                                      DeployMode;                                       		// 0x05C0 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42457 ];

		return pClassPointer;
	};

	void ShowHeadCrabMesh ( unsigned long bShow );
	void PlayThrowAnimation ( );
	void ServerDeployHeadcrab ( unsigned char FireModeNum );
	bool CanTaunt ( );
	bool OnUseSkill ( unsigned char FireModeNum );
	void BeginFire ( unsigned char FireModeNum );
};

UClass* APBKWeapon_HeadCrab::pClassPointer = NULL;

// Class PlanBGame.PBKWeapon_PPlane
// 0x0000 (0x05C0 - 0x05C0)
class APBKWeapon_PPlane : public APBKWeapon_Skill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42458 ];

		return pClassPointer;
	};

	void ShowPlaneMesh ( unsigned long bShow );
	void PlayThrowAnimation ( );
	bool CanTaunt ( );
	void BeginFire ( unsigned char FireModeNum );
};

UClass* APBKWeapon_PPlane::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_Suicided
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_Suicided : public UPBDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42459 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_Suicided::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_Fell
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_Fell : public UPBDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42460 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_Fell::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_Mortar
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_Mortar : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42461 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_Mortar::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_Turret
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_Turret : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42462 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_Turret::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_Explosion
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_Explosion : public UPBDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42463 ];

		return pClassPointer;
	};

	struct FName GetCorrectDeathAnimationFromHitLoc ( struct FName BoneName, unsigned long bBehind );
};

UClass* UPBDmgType_Explosion::pClassPointer = NULL;

// Class PlanBGame.PBSkill_HeadCrabActor
// 0x00DC (0x05BC - 0x04E0)
class APBSkill_HeadCrabActor : public APBActorController
{
public:
	float                                              AttackDistance;                                   		// 0x04E0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              ActivatedLifeTime;                                		// 0x04E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CurAnim;                                          		// 0x04E8 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       CurrentState;                                     		// 0x04EC (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bJumpEnabled : 1;                                 		// 0x04F4 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bCanAttachToTurrets : 1;                          		// 0x04F4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bDelayReleaseControl : 1;                         		// 0x04F4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bAligningToCamera : 1;                            		// 0x04F4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bFirstCameraView : 1;                             		// 0x04F4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bSwitchToPDAPending : 1;                          		// 0x04F4 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bSkipExplosionEffect : 1;                         		// 0x04F4 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bStopAutoMovement : 1;                            		// 0x04F4 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	class APBSkill_HeadCrab*                           SkillArchetype;                                   		// 0x04F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TargetTeam;                                       		// 0x04FC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AActor*                                      TargetEnemyActor;                                 		// 0x0500 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     CameraStartLocation;                              		// 0x0504 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    CameraStartRotation;                              		// 0x0510 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              AlignTimeLeft;                                    		// 0x051C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AlignTimeMax;                                     		// 0x0520 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StopAutoMovementAngle;                            		// 0x0524 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class APBCharacter* >                      MakeInvisible;                                    		// 0x0528 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     vCameraPosAtJump;                                 		// 0x0534 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class APBPlayerController*                         TargetEnemyController;                            		// 0x0540 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     vStartJumpPosition;                               		// 0x0544 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              fCurrentJumpTime;                                 		// 0x0550 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      pSkelMesh;                                        		// 0x0554 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             pHeadCrabLoopAC;                                  		// 0x0558 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             pHeadCrabAttackAC;                                		// 0x055C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             BreakingPS;                                       		// 0x0560 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBreakingPSScale;                                 		// 0x0564 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDynamicLightEnvironmentComponent*           pLightEnv;                                        		// 0x0568 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInterface*                          pFriendlyMaterialInstance;                        		// 0x056C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          pEnemyMaterialInstance;                           		// 0x0570 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vCameraFocusOffset;                               		// 0x0574 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCameraDistanceFromLocation;                      		// 0x0580 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMinPitchAngle;                                   		// 0x0584 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxPitchAngle;                                   		// 0x0588 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCameraBackwardSpeed;                             		// 0x058C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTargetCamDistance;                               		// 0x0590 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fCurrentCamDistance;                              		// 0x0594 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fMinCamDistance;                                  		// 0x0598 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fJumpToEnemyTime;                                 		// 0x059C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FinalAttachedScale;                               		// 0x05A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeToReleaseControlWhenGrab;                    		// 0x05A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeUntilDestroyAfterDeath;                      		// 0x05A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeUntilReleaseControlAfterDeath;               		// 0x05AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   WalkingLoopingSound;                              		// 0x05B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   Attack1pSound;                                    		// 0x05B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   Attack3pSound;                                    		// 0x05B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42464 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void eventReplicatedEvent ( struct FName VarName );
	void UpdateHUDStateChanged ( );
	void OnEnergyDepletedDuringUse ( );
	void ReleaseControl ( );
	void ReceivedPreviousCharacter ( );
	void UpdateAttachedToEnemy ( );
	bool IsTargetHeadCrabbed ( );
	bool IsAlive ( );
	struct FVector GetTargetAttachLocation ( class AActor* EnemyActor );
	void SetHeadCrabController ( class APBPlayerController* PC );
	struct FString GetHumanReadableName ( );
	unsigned char GetTeamNum ( );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void AttackClosestEnemy ( );
	void PlayWalkingSound ( unsigned long bPlay );
	void SetCrabAnim ( unsigned char newAnim );
	void UpdateAnims ( );
	void eventTick ( float DeltaTime );
	void AutoMoveCrab ( float DeltaTime );
	bool CanMove ( );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void KillImmediately ( );
	void PostProcessViewRotation ( struct FRotator* ViewRotation );
	void GetCameraView ( float fDeltaTime, struct FVector* OutLocation, struct FRotator* OutRotation );
	void SetOriginalCameraOrientation ( struct FVector origLocation, struct FRotator origRotation );
	void SetEnemyMaterialColor ( );
	void SetFriendlyMaterialColor ( );
	void SetupTeamMarker ( );
	void NotifyLocalPlayerTeamReceived ( );
	void ServerStartFire ( unsigned char FireModeNum );
	void TurnOff ( );
	void eventShutDown ( );
	class APBPlayerController* GetOwnerController ( );
	class APBPlayerController* GetTargetEnemyController ( );
	void SetControlMode ( unsigned long bControlMode, class APBPlayerController* PC, unsigned long bDelayedControlMode );
	void SetupHeadCrab ( int dataIndex, int masterLevel, class APBPlayerController* PC );
	void SwitchHeadCrabTeam ( );
	bool DoJump ( unsigned long bUpdating );
	void eventPostBeginPlay ( );
};

UClass* APBSkill_HeadCrabActor::pClassPointer = NULL;

// Class PlanBGame.PBLadderVolume
// 0x0008 (0x02BC - 0x02B4)
class APBLadderVolume : public ALadderVolume
{
public:
	float                                              JumpStrength;                                     		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              JumpSideStrength;                                 		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42615 ];

		return pClassPointer;
	};

	void eventPhysicsChangedFor ( class AActor* Other );
	void eventPawnLeavingVolume ( class APawn* P );
	void eventPawnEnteredVolume ( class APawn* P );
	unsigned char AttemptClimbLadder ( class APawn* P, float forwardMotion );
	void eventPostBeginPlay ( );
};

UClass* APBLadderVolume::pClassPointer = NULL;

// Class PlanBGame.PBGameRules_TDM
// 0x0028 (0x02A4 - 0x027C)
class APBGameRules_TDM : public APBGameRules
{
public:
	float                                              WinPctSmall;                                      		// 0x027C (0x0004) [0x0000000000000000]              
	float                                              WinPctMed;                                        		// 0x0280 (0x0004) [0x0000000000000000]              
	int                                                iChestSpawnTDMFrequency;                          		// 0x0284 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iChestSpawnTDMChance;                             		// 0x0288 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      ChestSpawnTDMDone : 1;                            		// 0x028C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                TDMChestNumber0;                                  		// 0x0290 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TDMChestThreshold1;                               		// 0x0294 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TDMChestNumber1;                                  		// 0x0298 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TDMChestThreshold2;                               		// 0x029C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TDMChestNumber2;                                  		// 0x02A0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42865 ];

		return pClassPointer;
	};

	struct FString GetSafetyBuyComments ( int WhichSecond );
	void OnRoundStart ( );
	void ShowEndMatchComments ( int PlayerTeamIndex );
	void NotifyTeamScored ( int TeamIndex );
	void NotifyRoundRemainingTimeChanged ( int iRemainingTime );
	void PostLogin ( class APlayerController* NewPlayer );
	class APlayerStart* ChoosePlayerStart ( class AController* Player, unsigned char InTeam );
	bool IsObjectiveEnabled ( class UClass* pObjectiveClass );
	void ChestSpawnTDM ( );
	void Reset ( );
	void InitGameOptions ( );
};

UClass* APBGameRules_TDM::pClassPointer = NULL;

// Class PlanBGame.PBVoteList
// 0x0010 (0x004C - 0x003C)
class UPBVoteList : public UObject
{
public:
	class UPBVoteList*                                 pVoteListArchetype;                               		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPBVoteEvent >                      VoteEvents;                                       		// 0x0040 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42867 ];

		return pClassPointer;
	};

	class UPBVoteList* GetInstance ( );
	struct FString GetEventTitle ( int Id );
	bool HasOptions ( int Id );
	struct FString GetLocalizedNextMatchOption ( int Option );
	struct FString GetVoteChangedMessage ( unsigned char VoteType, int Option );
	int GetVotingTeam ( unsigned char Id, class APlayerReplicationInfo* PRI );
	struct FName GetVoteId ( unsigned char Id );
	bool GetTargetInfo ( unsigned char Id, struct FPBVoteTargetInfo* pVoteInfo );
	struct FString GetLocalizedVoteName ( unsigned char Id );
	TArray< unsigned char > GetAllAvailableVoteEvents ( unsigned char gameMode, unsigned long bIsInGameSetup );
	bool _IsAvailableForUser ( int voteIndex, class APBPlayerReplicationInfo* PRI );
	bool _IsAvailableInGameMode ( int voteIndex, unsigned char gameMode, unsigned long bIsInGameSetup );
	bool IsAvailableInGameMode ( unsigned char Id, unsigned char gameMode, unsigned long bIsInGameSetup );
	bool CanUserStartVote ( unsigned char Id, class APBPlayerReplicationInfo* PRI, unsigned char gameMode, unsigned long bIsInGameSetup );
	int _GetVoteIndex ( int Id );
};

UClass* UPBVoteList::pClassPointer = NULL;

// Class PlanBGame.PBGFxMoviePlayer_SNDMinigame
// 0x003C (0x01C0 - 0x0184)
class UPBGFxMoviePlayer_SNDMinigame : public UPBGFxMoviePlayer_Tickable
{
public:
	class UGFxObject*                                  mMinigame;                                        		// 0x0184 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fMinigameTime;                                    		// 0x0188 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fHitZoneDuration;                                 		// 0x018C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fWinBonusInterval;                                		// 0x0190 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                numHitZones;                                      		// 0x0194 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FhitZoneInfo >                      fHitZoneTimes;                                    		// 0x0198 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                numAttempts;                                      		// 0x01A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                numFailures;                                      		// 0x01A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                numSuccesses;                                     		// 0x01AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              minigameStartTime;                                		// 0x01B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bMinigameResultsSent : 1;                         		// 0x01B4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bMouseButtonVisible : 1;                          		// 0x01B4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class USoundCue*                                   soundSuccess;                                     		// 0x01B8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   soundFail;                                        		// 0x01BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43012 ];

		return pClassPointer;
	};

	void CallSetYellowMouseButtonVisible ( unsigned long bVisible );
	void SetWinZoneEliminated ( int iZoneIdx );
	void SetAttemptUsed ( int iAttemptIdx );
	void SetZoneMissed ( int iZoneIdx, unsigned long bSuccessful );
	void CallSetSNDMinigamePointerPosition ( float fElapsedTime, float fMinigameDuration );
	void CallShowHideSNDMinigame ( unsigned long bShow, float fMinigameDuration, float fHitZoneSize, float fWinBonusTime, int iNumZones, TArray< struct FhitZoneInfo > aZonePositions );
	void HandleSNDMinigameClick ( );
	void EndSNDMinigame ( );
	void SortHitZones ( );
	void StartSNDMinigame ( unsigned long arming );
	void HandleSNDMinigame ( );
	void eventTick ( float fDelta );
	void Initialize ( );
	bool Start ( unsigned long StartPaused );
};

UClass* UPBGFxMoviePlayer_SNDMinigame::pClassPointer = NULL;

// Class PlanBGame.PBGFxMoviePlayer_NextMapVote
// 0x002C (0x01B0 - 0x0184)
class UPBGFxMoviePlayer_NextMapVote : public UPBGFxMoviePlayer_Tickable
{
public:
	class UGFxObject*                                  mOptionsContainer;                                		// 0x0184 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UGFxObject* >                        mOptions;                                         		// 0x0188 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      rCurrentVotes;                                    		// 0x0194 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bIsDirty : 1;                                     		// 0x01A0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      mbFirstUpdate : 1;                                		// 0x01A0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FScriptDelegate                             __OnOptionSelected__Delegate;                     		// 0x01A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43042 ];

		return pClassPointer;
	};

	void OnVoteFinished ( int WinningOption );
	void RefreshVoteOptions ( );
	void SetTimeRemaining ( int TimeRemaining );
	void SetTotalVotes ( int Votes );
	void SetMapVotes ( class UGFxObject* pObject, int Votes );
	void SetMapTitle ( class UGFxObject* pObject, struct FString Title );
	void SetUVCoordinates ( class UGFxObject* pObject, float U, float V, float UL, float VL );
	void SetOnSelectOptionDelegate ( struct FScriptDelegate F );
	void flash_OnOptionSelected ( int OptionId );
	void OnEndVote ( int Winner );
	void eventTick ( float fDelta );
	void UpdateOptions ( );
	void GetVoteNumbers ( int* iMaximumValue, int* iCurrentVotes );
	bool AllowChangingVote ( );
	void UpdateCurrentVotes ( );
	void UpdateVoteContainer ( );
	struct FString GetLocalizedMapName ( struct FString MapName );
	void InitVoteOption ( int Id, class UGFxObject* pObject );
	void InitialUpdate ( );
	void eventPostWidgetInit ( );
	void OnOptionSelected ( int OptionId );
};

UClass* UPBGFxMoviePlayer_NextMapVote::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_HalfTime_Base
// 0x0000 (0x00A0 - 0x00A0)
class UPBGFxObject_HalfTime_Base : public UPBGFxObject_ContainerBased
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43152 ];

		return pClassPointer;
	};

	void eventTick ( float fDelta );
	void NotifyHeatValueUpdated ( int newHeatValue );
	void _Release ( );
	bool _Initialize ( );
};

UClass* UPBGFxObject_HalfTime_Base::pClassPointer = NULL;

// Class PlanBGame.PBGDR_TeamBase
// 0x0044 (0x021C - 0x01D8)
class APBGDR_TeamBase : public AActor
{
public:
	class USpriteComponent*                            GoodSprite;                                       		// 0x01D8 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                ownerTeam;                                        		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultHP;                                        		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HPIncrease;                                       		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      BaseSkeletalMesh;                                 		// 0x01E8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMesh*                               BaseDefaultMesh;                                  		// 0x01EC (0x0004) [0x0000000000000000]              
	TArray< struct FBaseStage >                        Stages;                                           		// 0x01F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      BaseHealthPercent;                                		// 0x01FC (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      replicateStateId;                                 		// 0x01FD (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                NumTimesBaseDestroyed;                            		// 0x0200 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             stateNames;                                       		// 0x0204 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                startingHealth;                                   		// 0x0210 (0x0004) [0x0000000000000000]              
	int                                                currentHealth;                                    		// 0x0214 (0x0004) [0x0000000000000000]              
	int                                                actualStage;                                      		// 0x0218 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43244 ];

		return pClassPointer;
	};

	void SetSkeletalMesh ( int StageIndex );
	void CheckBaseStage ( );
	void eventReplicatedEvent ( struct FName VarName );
	struct FName GetStateNameFromId ( unsigned char StateId );
	void SetStateId ( struct FName StateName );
	void Reset ( );
	class APBGameRules_GDR* GetGameRules ( );
	void NotifyHUDBaseDestroyed ( );
	bool IsDestroyed ( );
	void SetDamage ( int DamageAmount );
	void DeactivateBase ( );
	void ActivateBase ( );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void SetHP ( );
	void PostBeginPlay ( );
};

UClass* APBGDR_TeamBase::pClassPointer = NULL;

// Class PlanBGame.PBGameRules_GDR
// 0x0025 (0x02A1 - 0x027C)
class APBGameRules_GDR : public APBGameRules
{
public:
	class UClass*                                      GiantRobotClass;                                  		// 0x027C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBGDR_GiantRobot*                           pCurrentRobot;                                    		// 0x0280 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class APBGDR_TeamBase*                             TeamABase;                                        		// 0x0284 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class APBGDR_TeamBase*                             TeamBBase;                                        		// 0x0288 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< class APBGDR_BlockingGateActor* >          rAllBlockingGates;                                		// 0x028C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class APBGDR_TeamBase*                             DefendingBase;                                    		// 0x0298 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class APBGDR_CaptureObjective*                     CaptureObjective;                                 		// 0x029C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      RoundState;                                       		// 0x02A0 (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43268 ];

		return pClassPointer;
	};

	struct FString GetSafetyBuyComments ( int WhichSecond );
	bool IsValidInGates ( class APBGDR_PlayerStart* P );
	class APlayerStart* ChoosePlayerStart ( class AController* Player, unsigned char InTeam );
	void OnDisabled ( );
	void OnRoundStart ( );
	void OnMatchEnd ( );
	void Reset ( );
	void NotifyActivationFinished ( );
	void StartCapturePhase ( );
	void StartAttackDefendPhase ( int ControllerTeam );
	bool IsObjectiveEnabled ( class UClass* pObjectiveClass );
	void SpawnNewRobot ( );
	void NotifyRobotPassedWaypoint ( class APBGDR_RobotWaypoint* pWaypoint );
	void NotifyRobotStunned ( );
	void NotifyTeamBaseDestroyed ( class APBGDR_TeamBase* pTeamBase );
	void RobotWasDestroyed ( );
	void InitGameOptions ( );
};

UClass* APBGameRules_GDR::pClassPointer = NULL;

// Class PlanBGame.PBGDR_CaptureObjective
// 0x0038 (0x0334 - 0x02FC)
class APBGDR_CaptureObjective : public APBGameObjectiveByVolume
{
public:
	float                                              ControlObjective;                                 		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecaySpeed;                                       		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      PointsPerPlayers;                                 		// 0x0304 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class APBPawn* >                           TeamAPlayers;                                     		// 0x0310 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class APBPawn* >                           TeamBPlayers;                                     		// 0x031C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              ControlAmt;                                       		// 0x0328 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      TeamA;                                            		// 0x032C (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      TeamB;                                            		// 0x032D (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      RepControlPercent;                                		// 0x032E (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsLocalPlayerInside : 1;                         		// 0x0330 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43274 ];

		return pClassPointer;
	};

	void Reset ( );
	void NotifyTouchingPawnDied ( class AActor* Other );
	void AddPlayerToList ( class AActor* Other );
	void VolumeUnTouch ( class AActor* Other, class APBObjectiveVolume* TriggerVolume );
	void VolumeTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void SetObjectiveAchieved ( int ControllerTeam );
	int GetNumPoints ( int NumPlayers );
	void ShowDebug ( );
	void PostBeginPlay ( );
};

UClass* APBGDR_CaptureObjective::pClassPointer = NULL;

// Class PlanBGame.PBGDR_GiantRobot
// 0x0130 (0x0308 - 0x01D8)
class APBGDR_GiantRobot : public AActor
{
public:
	class USkeletalMeshComponent*                      pRobotRightTread;                                 		// 0x01D8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      pRobotLeftTread;                                  		// 0x01DC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      pRobotHeadPart;                                   		// 0x01E0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      pRobotBodyPart;                                   		// 0x01E4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             pTreadSoundComp;                                  		// 0x01E8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           pLightEnv;                                        		// 0x01EC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       HeadSocket;                                       		// 0x01F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LeftTreadSocket;                                  		// 0x01F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RightTreadSocket;                                 		// 0x0200 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   BaseTreadsMaterial;                               		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TreadsMaterialPosParameterName;                   		// 0x020C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTreadMaterialSpeedPerVelocity;                   		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTreadMaterialSpeedPerYaw;                        		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ActivatingOneShotSound;                           		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BFGFiringWeaponSoundCue;                          		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   pTreadStartSoundCue;                              		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   pTreadStopSoundCue;                               		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTreadLoopFadeInTime;                             		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTreadLoopFadeOutTime;                            		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   TreadsMaterialLeft;                               		// 0x0234 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   TreadsMaterialRight;                              		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fCurTreadPosLeft;                                 		// 0x023C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fCurTreadPosRight;                                		// 0x0240 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBGDR_RobotWaypoint*                        pCurrentWaypoint;                                 		// 0x0244 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bSmoothTurnToWaypoint : 1;                        		// 0x0248 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bTreadSoundPlaying : 1;                           		// 0x0248 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bCanTurnWhileMoving : 1;                          		// 0x0248 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableEscort : 1;                                		// 0x0248 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              fOriginalDotToTarget;                             		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      iOwningTeam;                                      		// 0x0250 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      iBFGShootCounter;                                 		// 0x0251 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      replicateStateId;                                 		// 0x0252 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      repCurrentHealth;                                 		// 0x0253 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fCurrentSpeed;                                    		// 0x0254 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTargetSpeed;                                     		// 0x0258 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTimeToUntilActivationComplete;                   		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeToUntilReactivationComplete;                 		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAngleDegreeDiffToIgnore;                         		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWaypointReachedDistanceThreshhold;               		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class APBGDR_HitZoneActor* >               hitZones;                                         		// 0x026C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                lives;                                            		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fStunnedTime;                                     		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDestroyedTime;                                   		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iFireAtBaseDamage;                                		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFireAtBaseRate;                                  		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscortSquaredRadius;                              		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PlayersInEscortArea;                              		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTurnSpeedYawMin;                                 		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTurnSpeedYawMinAngle;                            		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTurnSpeedYawMax;                                 		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTurnSpeedYawMaxAngle;                            		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDeceleration;                                    		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAcceleration;                                    		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxSpeed;                                        		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxSpeedWhileTurn;                               		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             stateNames;                                       		// 0x02B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             socketAttachNames;                                		// 0x02C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class APBGDR_RobotWeaponTurret*                    turret1;                                          		// 0x02CC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class APBGDR_RobotWeaponTurret*                    turret2;                                          		// 0x02D0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class APBGDR_RobotWeaponTurret*                    turret3;                                          		// 0x02D4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class APBGDR_RobotWeaponTurret*                    turret4;                                          		// 0x02D8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FRotator                                    serverRot;                                        		// 0x02DC (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     serverLocation;                                   		// 0x02E8 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              clientLocationSnapLimit;                          		// 0x02F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              clientAngleSnapLimit;                             		// 0x02F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              clientSmothMovement;                              		// 0x02FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                currHits;                                         		// 0x0300 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                currLives;                                        		// 0x0304 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43279 ];

		return pClassPointer;
	};

	void NotifyHitZoneDestroyed ( class APBGDR_HitZoneActor* pWhichHitZone );
	struct FName GetStateNameFromId ( unsigned char StateId );
	void SetStateId ( struct FName StateName );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventRanInto ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void SetTreadTurningPos ( float fDeltaTime, float fLeftDelta, float fRightDelta );
	float GetTurnSpeedMapped ( float fMinAngle, float fMaxAngle, float fMinTurnSpeed, float fMaxTurnSpeed, float fInputValue );
	void PlayTreadSound ( unsigned long bPlayTreadSound );
	void TickMovement ( float fDeltaTime );
	void TickMovement_old ( float fDeltaTime );
	bool ShouldMove ( );
	bool ReachedWaypoint ( struct FVector vPrevPos );
	void SetWaypoint ( class APBGDR_RobotWaypoint* pWhichWaypoint );
	void SelectNextWaypoint ( );
	void AcquiredByTeam ( int iTeamIndex );
	void ResetRobot ( class APBGDR_RobotWaypoint* SpawnWaypoint );
	void NotifyTeamBaseDestroyed ( class APBGDR_TeamBase* pWhichBase );
	void PlayBFGFiringEffects ( );
	class APBGameRules_GDR* GetGameRules ( );
	void ResetHitZones ( );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsAlive ( );
	struct FString GetHumanReadableName ( );
	unsigned char GetTeamNum ( );
	void eventTick ( float DeltaTime );
	bool CanMove ( );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void hitZoneDestroyed ( );
	void SetHitZonesStatus ( unsigned long bOpen );
	void ReplicateCurrentHealth ( );
	void NotifyZoneHealthUpdated ( );
	unsigned char GetCurrentHealth ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
};

UClass* APBGDR_GiantRobot::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_ConsolidatedLobby
// 0x09F4 (0x0A94 - 0x00A0)
class UPBGFxObject_ConsolidatedLobby : public UPBGFxObject_ContainerBased
{
public:
	TArray< struct FPlayerInfo >                       mPlayers;                                         		// 0x00A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTLobbyScoreboardInfo                       friendlyInfo[ 0xB ];                              		// 0x00AC (0x0294) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTLobbyScoreboardInfo                       enemyInfo[ 0xB ];                                 		// 0x0340 (0x0294) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                iNumOnFriendlyTeam;                               		// 0x05D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iNumOnEnemyTeam;                                  		// 0x05D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                totalFriendlyHeat;                                		// 0x05DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                totalFriendlyKills;                               		// 0x05E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                totalFriendlyDeaths;                              		// 0x05E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                totalFriendlyAssists;                             		// 0x05E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                totalEnemyHeat;                                   		// 0x05EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                totalEnemyKills;                                  		// 0x05F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                totalEnemyDeaths;                                 		// 0x05F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                totalEnemyAssists;                                		// 0x05F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mLocalPlayersTeam;                                		// 0x05FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mCurrentTickValue;                                		// 0x0600 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      mGameStartClicked : 1;                            		// 0x0604 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bSwapTeamsButtonEnabled : 1;                    		// 0x0604 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      isRoomMaster : 1;                                 		// 0x0604 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      hasSetBackground : 1;                             		// 0x0604 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      isInitialised : 1;                                		// 0x0604 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bLeaveServerRewardScreen : 1;                     		// 0x0604 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      prevLaunchValid : 1;                              		// 0x0604 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      rewardDataReady : 1;                              		// 0x0604 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      firstPass1 : 1;                                   		// 0x0604 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      firstPass2 : 1;                                   		// 0x0604 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      isConfirmationVisible : 1;                        		// 0x0604 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      mbUpdateShopButtons : 1;                          		// 0x0604 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      mbRepairWeapon : 1;                               		// 0x0604 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned char                                      mbMatchStartingTimerVisible;                      		// 0x0608 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      InitialState;                                     		// 0x0609 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CurrentState;                                     		// 0x060A (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      flowState;                                        		// 0x060B (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     prevMapName;                                      		// 0x060C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              stateInitTime;                                    		// 0x0618 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              flowStateInitTime;                                		// 0x061C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeInVictory;                                    		// 0x0620 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeInMapVote;                                    		// 0x0624 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeInReward;                                     		// 0x0628 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                friendlyColour;                                   		// 0x062C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                enemyColour;                                      		// 0x0630 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                playerColour;                                     		// 0x0634 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_finalHeat;                                      		// 0x0638 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                unboostedHeat;                                    		// 0x063C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                matchBonus;                                       		// 0x0640 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                percentageStyleStars;                             		// 0x0644 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                unboostedIGC;                                     		// 0x0648 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                boostedIGC;                                       		// 0x064C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                percentageIGCStars;                               		// 0x0650 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                unboostedFans;                                    		// 0x0654 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                boostedFans;                                      		// 0x0658 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                percentageFansStars;                              		// 0x065C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                currentIGC;                                       		// 0x0660 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                currentFans;                                      		// 0x0664 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                currentFameLevel;                                 		// 0x0668 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                newFameLevel;                                     		// 0x066C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FFameLevelData >                    fameLevelArray;                                   		// 0x0670 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                currentFameLevelData;                             		// 0x067C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                heatDelta;                                        		// 0x0680 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeToStartHeatCountUp;                           		// 0x0684 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeToStartIGCAppear;                             		// 0x0688 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeToStartFansAppear;                            		// 0x068C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeToFinishFansAppear;                           		// 0x0690 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeToFinishHeatCountUp;                          		// 0x0694 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeToGoToBoostedDisplay;                         		// 0x0698 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeToFinishNoIGCStars;                           		// 0x069C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeToFinishNoFansStars;                          		// 0x06A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeToGoToPause;                                  		// 0x06A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeToFinishHeatStars;                            		// 0x06A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeToFinishIGCStars;                             		// 0x06AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeToFinishFansStars;                            		// 0x06B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeToFinishCountingBoostUp;                      		// 0x06B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeToStartFadingFansBarUp;                       		// 0x06B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeToFinishHoldingBeforeCountdown;               		// 0x06BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeToFinishCountingDown;                         		// 0x06C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeToFadeUpButtons;                              		// 0x06C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                numHeatStarsDisplayed;                            		// 0x06C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                numIGCStarsDisplayed;                             		// 0x06CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                numFansStarsDisplayed;                            		// 0x06D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                numHeatStarsToDisplay;                            		// 0x06D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                numIGCStarsToDisplay;                             		// 0x06D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                numFansStarsToDisplay;                            		// 0x06DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                lastTimeTick;                                     		// 0x06E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   m_YouDraw;                                        		// 0x06E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_YouWin;                                         		// 0x06E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_YouLose;                                        		// 0x06EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_RewardNumbersCalculating2sec;                   		// 0x06F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_RewardNumbersCalculating3sec;                   		// 0x06F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_RewardFansIGCMoving;                            		// 0x06F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_RewardFansIGCImpact;                            		// 0x06FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_RewardHeatBoosterStars;                         		// 0x0700 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_RewardFansIGCBoosterStars;                      		// 0x0704 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_RewardProgressBarCountup;                       		// 0x0708 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             RSLoopAC;                                         		// 0x070C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FString                                     nPlayersString;                                   		// 0x0710 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     rewardString;                                     		// 0x071C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     scoreboardString;                                 		// 0x0728 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     lobbyString;                                      		// 0x0734 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     quitServerString;                                 		// 0x0740 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     okString;                                         		// 0x074C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     cancelString;                                     		// 0x0758 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     nToLevelXString;                                  		// 0x0764 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     nToMaxFansString;                                 		// 0x0770 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     maxFansAchievedString;                            		// 0x077C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TooltipBaseFans;                                  		// 0x0788 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TooltipBaseHeat;                                  		// 0x0794 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TooltipBaseIGC;                                   		// 0x07A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TooltipFansEarned;                                		// 0x07AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TooltipFullFansBoosters;                          		// 0x07B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TooltipFullIGCBoosters;                           		// 0x07C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TooltipHeatTotal;                                 		// 0x07D0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TooltipIGCReward;                                 		// 0x07DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TooltipMatchBonus;                                		// 0x07E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TooltipOtherPlayers;                              		// 0x07F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TooltipStyle;                                     		// 0x0800 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TooltipTotal;                                     		// 0x080C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     QuitString;                                       		// 0x0818 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     SwitchTeamString;                                 		// 0x0824 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     GameModeString;                                   		// 0x0830 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     MapString;                                        		// 0x083C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     MatchTimeString;                                  		// 0x0848 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     FriendlyFireString;                               		// 0x0854 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     EndMatchWinString;                                		// 0x0860 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     MatchWillStartInString;                           		// 0x086C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     WaitingForRoomMasterString;                       		// 0x0878 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     LoadingString;                                    		// 0x0884 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     HeatLabelString;                                  		// 0x0890 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     FansLabelString;                                  		// 0x089C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     IGCLabelString;                                   		// 0x08A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TotalIGCString;                                   		// 0x08B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     RepairWeaponsString;                              		// 0x08C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     UnlockedItemsString;                              		// 0x08CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TeamEmptyString;                                  		// 0x08D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     LaunchGameString;                                 		// 0x08E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     PersonalEnemyString;                              		// 0x08F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     PersonalVictimString;                             		// 0x08FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     PremiumDescriptionString;                         		// 0x0908 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UGFxObject*                                  mLobbyHolder;                                     		// 0x0914 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mSwapTeamsButton;                                 		// 0x0918 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mTeamsHolder;                                     		// 0x091C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mChatHolder;                                      		// 0x0920 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mChatHolder1;                                     		// 0x0924 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mTeamEmptyMessage;                                		// 0x0928 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                lastProcessedMsgId;                               		// 0x092C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                msgColorGameMaster;                               		// 0x0930 (0x0004) [0x0000000000000000]              
	int                                                msgColorSameTeam;                                 		// 0x0934 (0x0004) [0x0000000000000000]              
	int                                                msgColorOposingTeam;                              		// 0x0938 (0x0004) [0x0000000000000000]              
	int                                                msgColorSelf;                                     		// 0x093C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  mScoreboardHolder;                                		// 0x0940 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mRewardScreenHolder;                              		// 0x0944 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mMapVoteHolder;                                   		// 0x0948 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mVictoryScreenHolder;                             		// 0x094C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mVictoryResultMessage;                            		// 0x0950 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mVictoryTeam0Icon;                                		// 0x0954 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mVictoryTeam1Icon;                                		// 0x0958 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mVictoryTeam1Score;                               		// 0x095C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mVictoryTeam2Score;                               		// 0x0960 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mVictoryTeam1Name;                                		// 0x0964 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mVictoryTeam2Name;                                		// 0x0968 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mVictoryAwards[ 0x4 ];                            		// 0x096C (0x0010) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mTopNavigation;                                   		// 0x097C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mBottomNavigation;                                		// 0x0980 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mRoomMasterHolder;                                		// 0x0984 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mGameModeDropdown;                                		// 0x0988 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mMapDropdown;                                     		// 0x098C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mMatchLengthDropdown;                             		// 0x0990 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mFriendlyFireDropdown;                            		// 0x0994 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mEndMatchWinDropdown;                             		// 0x0998 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mLaunchGameButton;                                		// 0x099C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mRMGameModeHeader;                                		// 0x09A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mRMMapHeader;                                     		// 0x09A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mRMMatchLengthHeader;                             		// 0x09A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mRMFriendlyFireHeader;                            		// 0x09AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mRMEndMatchWinHeader;                             		// 0x09B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mNormalPlayerHolder;                              		// 0x09B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mGameModeValue;                                   		// 0x09B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mMapValue;                                        		// 0x09BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mMatchLengthValue;                                		// 0x09C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mFriendlyFireValue;                               		// 0x09C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mEndMatchWinValue;                                		// 0x09C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mNPGameModeHeader;                                		// 0x09CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mNPMapHeader;                                     		// 0x09D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mNPMatchLengthHeader;                             		// 0x09D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mNPFriendlyFireHeader;                            		// 0x09D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mNPEndMatchWinHeader;                             		// 0x09DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mStartTimerLabel;                                 		// 0x09E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mStartTimerValue;                                 		// 0x09E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mLoadingSpinner;                                  		// 0x09E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mRewardScreenButton;                              		// 0x09EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mLobbyButton;                                     		// 0x09F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mScoreboardButton;                                		// 0x09F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mQuitButton;                                      		// 0x09F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mControlBarContainer;                             		// 0x09FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mChatHolder0;                                     		// 0x0A00 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                testStart;                                        		// 0x0A04 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                testFinish;                                       		// 0x0A08 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              testDuration;                                     		// 0x0A0C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnMapVoteClick__Delegate;                       		// 0x0A10 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMapVoteSendChatMsgClick__Delegate;            		// 0x0A1C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSendMsg__Delegate;                            		// 0x0A28 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_setNavigationInfo__Delegate;             		// 0x0A34 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_disconnect__Delegate;                    		// 0x0A40 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onfocusIn__Delegate;                     		// 0x0A4C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onfocusOut__Delegate;                    		// 0x0A58 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_showNavigation__Delegate;                		// 0x0A64 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_playOneShot__Delegate;                   		// 0x0A70 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_playLoop__Delegate;                      		// 0x0A7C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_stopLoop__Delegate;                      		// 0x0A88 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43360 ];

		return pClassPointer;
	};

	void CallShowRoomMasterIconInControlBar ( unsigned long bShow, unsigned long bShowInLaunch );
	void CallSetSelected ( int Idx );
	void CallSetRewardScreenTooltipStrings ( struct FString HeatTotalTooltip, struct FString HeatBaseTooltip, struct FString MatchBonusTooltip, struct FString StyleTooltip, struct FString BaseIGCTooltip, struct FString TotalIGCTooltip, TArray< struct FDetailedBoosterInfo > IGCDetails, int otherPlayersIGC, struct FString IGCCouldHave, struct FString OtherPlayersTooltip, struct FString TotalTooltip, struct FString BaseFansTooltip, struct FString TotalFansTooltip, TArray< struct FDetailedBoosterInfo > FansDetails, int otherPlayersFans, struct FString FansCouldHave );
	void CallSetRewardScreenTimings ( float HeatDisplayTime, float OtherDisplayTime, float LineDisplayTime, float ProgressionTime, float ButtonsFadeupTime, float NavigationDelayTime );
	void CallSetRewardScreenValues ( TArray< struct FFameLevelData > newProgressLevels, float initialFans, float baseFans, float fansBoostedBonus, float baseHeat, float newMatchBonus, float styleBonus, float finalHeat, float baseIGC, float IGCBoostedBonus, float initialIGC, unsigned long bLeavingMatchEarly );
	void CallStartRewardScreen ( );
	void CallCheckLevelStringClipping ( );
	void CallSetFriendlyTeam ( int FriendlyTeam );
	void CallSetTeamNames ( struct FString FriendlyName, struct FString EnemyName );
	void CallSetLevelBackgroundImage ( struct FString newImage );
	void CallSetTotals ( int intotalFriendlyHeat, int intotalFriendlyKills, int intotalFriendlyDeaths, int intotalFriendlyAssists, int intotalEnemyHeat, int intotalEnemyKills, int intotalEnemyDeaths, int intotalEnemyAssists );
	void CallSwapTeamLogos ( int FriendlyTeam );
	void CallSetTeamScores ( int friendlyScore, int enemyScore );
	void CallSetVisibility ( unsigned long IsFriend, int Index, unsigned long isVisible );
	void CallAddPlayerToScoreboard ( unsigned long IsFriend, int Index, struct FString PlayerName, struct FString extraDetails, struct FString playerAvatar, int heat, int Kills, int Damage, int Deaths, int assists, unsigned long isPlayer );
	void CallUpdateIGCStarsPosition ( float Progress );
	void CallUpdateFansStarsPosition ( float Progress );
	void CallUpdateIGCPosition ( float Progress );
	void CallUpdateFansPosition ( float Progress );
	void CallSetAbsoluteSpinnerPosition ( struct FString spinnerName, float Position );
	void CallRemoveAllPlayers ( );
	void CallRemovePlayer ( unsigned long isFriendly, int PlayerID );
	void CallAddMsg1 ( struct FString PlayerName, int PlayerColor, struct FString msg );
	void CallAddMsg ( struct FString PlayerName, int PlayerColor, struct FString msg );
	void CallSetTeamTitle ( unsigned long isFriendly, struct FString newTitle, struct FString NumPlayers );
	void CallSetPlayerSuperMaster ( unsigned long isFriendly, int PlayerID, unsigned long isSuperMaster );
	void CallSetPlayerPremium ( unsigned long isFriendly, int PlayerID, unsigned long isPremium );
	void CallSetPlayerRoomMaster ( unsigned long isFriendly, int PlayerID, unsigned long iAmRoomMaster );
	void CallSetPlayerAvatar ( unsigned long isFriendly, int PlayerID, struct FString newAvatarPath );
	void CallSetPlayerName ( unsigned long isFriendly, int PlayerID, struct FString NewName );
	void CallSetPlayerProgress ( unsigned long isFriendly, int PlayerID, float Progress );
	void CallAddPlayer ( unsigned long isFriendly, struct FString avatarPath, struct FString PlayerName, int PlayerID, float PlayerTime, unsigned long isPremium, unsigned long isSuperMaster, unsigned long isPlayer );
	void CallShowHideEndMatchWinDropdown ( unsigned long bVisible );
	void CallUpdateEndMatchWinDropdown ( TArray< struct FDropDownValue > inArray, int iDefaultValueIndex );
	void CallUpdateFriendlyFireDropdown ( TArray< struct FDropDownValue > inArray, int iDefaultValueIndex );
	void CallUpdateMatchTimeDropdown ( TArray< struct FDropDownValue > inArray, int iDefaultValueIndex );
	void CallUpdateMapDropdown ( TArray< struct FDropDownValue > inArray );
	void CallUpdateGameModeDropdown ( TArray< struct FDropDownValue > inArray );
	void UpdatePlayerRank ( class APBPlayerReplicationInfo* PRI );
	void UpdateScoreboard ( );
	void UpdateServerSettings ( class APBPersistentGameReplicationInfo** pLobbyInfo );
	void UpdateServerDisplay ( class APBPersistentGameReplicationInfo* pLobbyInfo );
	void UpdateGameSettings ( class APBPersistentGameReplicationInfo* pLobbyInfo, unsigned char gameMode );
	void HandleRoomMasterChange ( unsigned long RoomMaster, class APBPersistentGameReplicationInfo* pLobbyInfo );
	void updateRoomMaster ( );
	void UpdateTrophy ( int trophyIndex, struct FString TrophyName, struct FString avatarPath, struct FString PlayerName, int PlayerID, float PlayerTime, int TextColor );
	void UpdateTrophies ( );
	void flashOnMapVoteClick ( int myVote );
	void SetOnMapVoteClick ( struct FScriptDelegate F );
	void flashOnMapVoteSendChatMsgClick ( );
	void SetOnSendMsg ( struct FScriptDelegate F );
	void SetOnMapVoteSendChatMsgClick ( struct FScriptDelegate F );
	void SetTimeLeft ( int Seconds );
	void SetMapVoteCount ( int voteCount, int Index );
	void SetMapName ( struct FString MapName, struct FString ScreenShotName, int Index );
	void InitialUpdate ( );
	void _onGetOffersDone ( int requestId, int ErrorCode, TArray< struct FPBOffer > offers );
	void StartGettingUnlockedItems ( );
	void SearchBrokenWeapons ( );
	void _updateShopButtons ( unsigned long bHasUnlockedItems, unsigned long bHasBrokenWeapons );
	void UpdatePlayers ( unsigned long addAll );
	int GetLocalPlayerTeam ( );
	void SetFlowState ( unsigned char NewState );
	void SetState ( unsigned char NewState );
	void UpdateGameTypeSettings ( class APBPersistentGameReplicationInfo* pLobbyInfo );
	void HandleScoreboardTick ( );
	void HandleLobbyTick ( );
	void HandleRewardScreenTick ( );
	void HandleMapVoteTick ( );
	struct FString GetMapName ( int Index );
	void GetMaxVotedMaps ( int* max1, int* max2, int* max3 );
	void HandleVictoryScreenTick ( );
	void CheckState ( );
	void eventTick ( float fDelta );
	void UpdateShopButtons ( );
	void _Release ( );
	bool _Initialize ( );
	void _stopLoop ( struct FString soundName );
	void Set_stopLoop_Delegate ( struct FScriptDelegate F );
	void Unreal_stopLoop ( struct FString soundName );
	void _playLoop ( struct FString soundName );
	void Set_playLoop_Delegate ( struct FScriptDelegate F );
	void Unreal_playLoop ( struct FString soundName );
	void _playOneShot ( struct FString soundName );
	void Set_playOneShot_Delegate ( struct FScriptDelegate F );
	void Unreal_playOneShot ( struct FString soundName );
	void _showNavigation ( );
	void Set_showNavigation_Delegate ( struct FScriptDelegate F );
	void Unreal_showNavigation ( );
	void flashOnSendMsg ( );
	void Set_onfocusOut_Delegate ( struct FScriptDelegate F );
	void Unreal_onfocusOut ( );
	void Set_onfocusIn_Delegate ( struct FScriptDelegate F );
	void Unreal_onfocusIn ( );
	void _disconnect ( );
	void Set_disconnect_Delegate ( struct FScriptDelegate F );
	void Unreal_disconnect ( );
	void _setNavigationInfo ( struct FGuid ItemGuid, struct FGuid ColorGuid, struct FString Category );
	void Set_setNavigationInfo_Delegate ( struct FScriptDelegate F );
	void Unreal_setNavigationInfo ( struct FString itemguidstring, struct FString colorguidstring, struct FString Category );
	void OnSendMsg ( );
	void OnMapVoteSendChatMsgClick ( );
	void OnMapVoteClick ( int Id );
};

UClass* UPBGFxObject_ConsolidatedLobby::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_CommCenter
// 0x0150 (0x01F0 - 0x00A0)
class UPBGFxObject_CommCenter : public UPBGFxObject_ContainerBased
{
public:
	unsigned long                                      updateBuddies : 1;                                		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      updateSearch : 1;                                 		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      messageReceived : 1;                              		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bSystemBusy : 1;                                  		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bBusyOnPreRequest : 1;                            		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bAdding : 1;                                      		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bLastOperationSuccessful : 1;                     		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	int                                                lastMessageNotificationTime;                      		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FbuddyItem >                        buddies;                                          		// 0x00A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FChatButtonItem >                   openedChats;                                      		// 0x00B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSearchResultItem >                 SearchResults;                                    		// 0x00C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                iPrevNotificationsPending;                        		// 0x00CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mBuddiesListObject;                               		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      myStatus;                                         		// 0x00D4 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     sModifiedBINick;                                  		// 0x00D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sModifiedSRNick;                                  		// 0x00E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sCurrentCharacterName;                            		// 0x00F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              fSystemResultTime;                                		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fSystemResultTimeToDisplay;                       		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     sJoinGameNick;                                    		// 0x0104 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USoundCue*                                   soundMessageReceived;                             		// 0x0110 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   soundFriendRequest;                               		// 0x0114 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __Unreal_getBasketQuantity__Delegate;             		// 0x0118 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_openNotifications__Delegate;             		// 0x0124 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_openChat__Delegate;                      		// 0x0130 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_sendChatMsg__Delegate;                   		// 0x013C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_changeActiveChat__Delegate;              		// 0x0148 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_closeIndividualChat__Delegate;           		// 0x0154 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onPlayerStatusChanged__Delegate;         		// 0x0160 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_SearchForBuddies__Delegate;              		// 0x016C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_AddBuddy__Delegate;                      		// 0x0178 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_RemoveBuddy__Delegate;                   		// 0x0184 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_joinBuddy__Delegate;                     		// 0x0190 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_submitGamePassword__Delegate;            		// 0x019C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_notifyJoinServerClose__Delegate;         		// 0x01A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_handleCloseSelf__Delegate;               		// 0x01B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onfocusIn__Delegate;                     		// 0x01C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onfocusOut__Delegate;                    		// 0x01CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_CallCloseCommcenter__Delegate;           		// 0x01D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_OpenCommcenter__Delegate;                		// 0x01E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43381 ];

		return pClassPointer;
	};

	void CallSetMouseVisibility ( unsigned long bVisible );
	void CallResetSearchTextToBlank ( );
	bool getCommcenterVisible ( );
	void CloseCommcenter ( );
	void toggleCommcenterVisible ( );
	void _OpenCommcenter ( );
	void Set_OpenCommcenter_Delegate ( struct FScriptDelegate F );
	void Unreal_OpenCommcenter ( );
	void CallResetChatToBlank ( );
	void CallSetClosedBetaTextVisible ( unsigned long bVisible );
	void CallSetHTVVisible ( unsigned long bVisible );
	void CallSetJoinServerMessageText ( struct FString newText );
	void CallSetJoinServerMode ( unsigned char Mode );
	void CallShowHideJoinServer ( unsigned long bShow );
	void CallSetOwnName ( struct FString NewName );
	void CallSetNumPendingNotifications ( int numPending );
	void Call_showJustInItems ( unsigned long bShow );
	void CallShowHideNotificationButton ( unsigned long bOpenable );
	void CallSetChatButtonPulsing ( unsigned long bPulsing );
	void CallSetChatWindowOpenable ( unsigned long bOpenable );
	int CallGetChatWindowVisible ( );
	struct FString CallGetActiveChatButton ( );
	void CallSetChatWindowVisible ( unsigned long bVisible );
	void CallSetChatWindowContents ( struct FString nick, TArray< struct FTMessage > Messages );
	void CallSetActiveChatButton ( struct FString nick );
	void CallSetChatButtonsDataProvider ( TArray< struct FChatButtonItem > newData );
	void CallUpdateSearchResults ( TArray< struct FSearchResultItem > newResults );
	void CallUpdateBuddyList ( TArray< struct FbuddyItem > newList );
	void CallSetMyStatus ( struct FString NewStatus );
	void CallSetNumOnlineBuddies ( int newNum );
	void OnStatusChanged ( struct FString nick, struct FString AccountName, unsigned char NewStatus );
	void OnLogoutCompleted ( unsigned long bWasSuccessful );
	void OnMessageReceived ( );
	void OnBuddyRemoved ( unsigned long bWasSuccessful );
	void OnRequestIgnored ( unsigned long bWasSuccessful );
	void OnRequestAddSent ( unsigned long bWasSuccessful, struct FString NickName );
	void OnSearchCompleted ( unsigned long bWasSuccessful );
	void OnUpdateCompleted ( unsigned long bWasSuccessful );
	void UpdateBuddiesForFlash ( );
	void SetSystemResult ( unsigned long bWasSuccessful );
	void ClearSystemBusy ( );
	void SetSystemBusy ( unsigned long bIsBuddyList, struct FString nick );
	void OnSystemAvailable ( unsigned long bAvailable );
	void _Release ( );
	bool _Initialize ( );
	void eventTick ( float fDelta );
	void Set_CallCloseCommcenter_Delegate ( struct FScriptDelegate F );
	void Unreal_CallCloseCommcenter ( );
	void Set_onfocusOut_Delegate ( struct FScriptDelegate F );
	void Unreal_onfocusOut ( );
	void Set_onfocusIn_Delegate ( struct FScriptDelegate F );
	void Unreal_onfocusIn ( );
	void _handleCloseSelf ( );
	void Set_handleCloseSelf_Delegate ( struct FScriptDelegate F );
	void Unreal_handleCloseSelf ( );
	void _handleJoinServerClose ( );
	void Set_notifyJoinServerClose_Delegate ( struct FScriptDelegate F );
	void Unreal_notifyJoinServerClose ( );
	void _submitGamePassword ( struct FString Password );
	void Set_submitGamePassword_Delegate ( struct FScriptDelegate F );
	void Unreal_submitGamePassword ( struct FString Password );
	void _joinBuddy ( struct FString nick );
	void Set_joinBuddy_Delegate ( struct FScriptDelegate F );
	void Unreal_joinBuddy ( struct FString nick );
	void _RemoveBuddy ( struct FString pbNick );
	void Set_RemoveBuddy_Delegate ( struct FScriptDelegate F );
	void Unreal_RemoveBuddy ( struct FString pbNick );
	void _AddBuddy ( struct FString pbNick );
	void Set_AddBuddy_Delegate ( struct FScriptDelegate F );
	void Unreal_AddBuddy ( struct FString pbNick );
	void searchForBuddies ( struct FString SearchName );
	void Set_SearchForBuddies_Delegate ( struct FScriptDelegate F );
	void Unreal_SearchForBuddies ( struct FString SearchName );
	void setMyOwnStatus ( struct FString NewStatus );
	void Set_onPlayerStatusChanged_Delegate ( struct FScriptDelegate F );
	void Unreal_onPlayerStatusChanged ( struct FString NewStatus );
	void _closeIndividualChat ( struct FString nick );
	void Set_closeIndividualChat_Delegate ( struct FScriptDelegate F );
	void Unreal_closeIndividualChat ( struct FString nick );
	void _changeActiveChat ( struct FString nick );
	void Set_changeActiveChat_Delegate ( struct FScriptDelegate F );
	void Unreal_changeActiveChat ( struct FString nick );
	void _sendChatMsg ( struct FString nick );
	void Set_sendChatMsg_Delegate ( struct FScriptDelegate F );
	void Unreal_sendChatMsg ( struct FString nick );
	void _openChat ( struct FString nick );
	void Set_openChat_Delegate ( struct FScriptDelegate F );
	void Unreal_openChat ( struct FString nick );
	void _openNotifications ( );
	void Set_openNotifications_Delegate ( struct FScriptDelegate F );
	void Unreal_openNotifications ( );
	int _getBasketQuantity ( );
	void Set_getBasketQuantity_Delegate ( struct FScriptDelegate F );
	int Unreal_getBasketQuantity ( );
};

UClass* UPBGFxObject_CommCenter::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_HUD
// 0x0608 (0x06A8 - 0x00A0)
class UPBGFxObject_HUD : public UPBGFxObject_ContainerBased
{
public:
	TArray< class APBChest* >                          rActiveChests;                                    		// 0x00A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                iCurrentHealth;                                   		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fCurrentHeat;                                     		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iCurrentSkillTier;                                		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsShowingSkillInAmmo : 1;                        		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsCooking : 1;                                   		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bweaponHasSecondaryZoom : 1;                      		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bweaponInSecondaryZoom : 1;                       		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bVotedForSomething : 1;                           		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bSNDBombCarryingIconVisible : 1;                  		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      isFadingOut : 1;                                  		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bIsScrolling : 1;                                 		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      isInReloadState : 1;                              		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bReloadColourSet : 1;                             		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bReloadGameFinished : 1;                          		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      isInGrenadeState : 1;                             		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      mDefinitelyDisplayScores : 1;                     		// 0x00B8 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      prevACaptured : 1;                                		// 0x00B8 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      prevAInactive : 1;                                		// 0x00B8 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      prevAMinimapMarkerCreated : 1;                    		// 0x00B8 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      prevBCaptured : 1;                                		// 0x00B8 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      prevBInactive : 1;                                		// 0x00B8 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      prevBMinimapMarkerCreated : 1;                    		// 0x00B8 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      prevADisabled : 1;                                		// 0x00B8 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      prevBDisabled : 1;                                		// 0x00B8 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      prevSNDC4Visible : 1;                             		// 0x00B8 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      prevSNDC4Active : 1;                              		// 0x00B8 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      prevSNDObjectivesVisible : 1;                     		// 0x00B8 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bSNDRoundEndScreenShown : 1;                      		// 0x00B8 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      bVoteShown : 1;                                   		// 0x00B8 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bIsSkillSelectVisible : 1;                        		// 0x00B8 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      bIsTauntSelectVisible : 1;                        		// 0x00B8 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned long                                      isChatFadingOut : 1;                              		// 0x00B8 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      bIsChatScrolling : 1;                             		// 0x00B8 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      renew : 1;                                        		// 0x00B8 (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      killMinimap : 1;                                  		// 0x00B8 (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	unsigned long                                      IsTaunting : 1;                                   		// 0x00BC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      wasTaunting : 1;                                  		// 0x00BC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bGlobalChat : 1;                                  		// 0x00BC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      mSurpressChatInput : 1;                           		// 0x00BC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      mSurpressSkillRadial : 1;                         		// 0x00BC (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      isControllingPlane : 1;                           		// 0x00BC (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      wasControllingPlane : 1;                          		// 0x00BC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      isControllingHeadCrab : 1;                        		// 0x00BC (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      wasControllingHeadCrab : 1;                       		// 0x00BC (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      isHeatBufferTransitioning : 1;                    		// 0x00BC (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      heatBufferTransitionMovementFinished : 1;         		// 0x00BC (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      heatUnitsAdded : 1;                               		// 0x00BC (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      heatTensAdded : 1;                                		// 0x00BC (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      heatHundredsAdded : 1;                            		// 0x00BC (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      heatThousandsAdded : 1;                           		// 0x00BC (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bHeatBufferLocked : 1;                            		// 0x00BC (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      isHeatEventTransitioning : 1;                     		// 0x00BC (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      hasHeatEventTransitioned : 1;                     		// 0x00BC (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      hasEventZoomedUp : 1;                             		// 0x00BC (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      isEventZooming : 1;                               		// 0x00BC (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bTurretHealthVisible : 1;                         		// 0x00BC (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bShowingNotificationMessage : 1;                  		// 0x00BC (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      canShowNotificationMessage : 1;                   		// 0x00BC (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      bVictoryScreenVisible : 1;                        		// 0x00BC (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bWasAllowedToStartVote : 1;                       		// 0x00BC (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	struct FString                                     currentSkillName;                                 		// 0x00C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     timeLeftString;                                   		// 0x00CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UGFxObject*                                  m_minimapImage;                                   		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  m_dynamicImage;                                   		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  m_mMinimapContainer;                              		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  m_mSkillsContainer;                               		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  m_pnl_chatContainer;                              		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  m_GameInformationContainer;                       		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  m_KillMessagesContainer;                          		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  m_SNDEndRoundPanel;                               		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              _3dHUDMovement;                                   		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       m_storedWeaponName;                               		// 0x00FC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              fzoomDisplayAlpha;                                		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FString >                           rZoomStrings;                                     		// 0x0108 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                iCurrentTeam;                                     		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPrevTeam;                                        		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBSkill*                                    rTiers[ 0x4 ];                                    		// 0x011C (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FEnergyTrack                                rEnergy[ 0x4 ];                                   		// 0x012C (0x0040) [0x0000000000002000]              ( CPF_Transient )
	int                                                iMaxDeathMessages;                                		// 0x016C (0x0004) [0x0000000000000000]              
	struct FLinearColor                                EnemyColor;                                       		// 0x0170 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                FriendlyColor;                                    		// 0x0180 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                YouColor;                                         		// 0x0190 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTDeathMessage >                    rDeathMessage;                                    		// 0x01A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                iPersonalEnemyX;                                  		// 0x01AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPersonalEnemyW;                                  		// 0x01B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iHeadshotSizeX;                                   		// 0x01B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpecialIconPadding;                               		// 0x01B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iHMessage;                                        		// 0x01BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iVerticalSpacing;                                 		// 0x01C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fKillMessageDisplayTime;                          		// 0x01C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fKillMessageFadeOut;                              		// 0x01C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fKillMessageMoveTime;                             		// 0x01CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fKillMessageFadeIn;                               		// 0x01D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iYTop;                                            		// 0x01D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fScrollRefTime;                                   		// 0x01D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                cFailure;                                         		// 0x01DC (0x0010) [0x0000000000000000]              
	struct FLinearColor                                cSuccess;                                         		// 0x01EC (0x0010) [0x0000000000000000]              
	float                                              fArrowStartDegrees;                               		// 0x01FC (0x0004) [0x0000000000000000]              
	float                                              fArrowEndDegrees;                                 		// 0x0200 (0x0004) [0x0000000000000000]              
	int                                                iCurrentTime;                                     		// 0x0204 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     TimerPausedString;                                		// 0x0208 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                iPrevTeam1Points;                                 		// 0x0214 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPrevTeam2Points;                                 		// 0x0218 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                prevAControlPercentage;                           		// 0x021C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                prevANumFriendly;                                 		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                prevANumEnemy;                                    		// 0x0224 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      prevATimer;                                       		// 0x0228 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      prevBTimer;                                       		// 0x0229 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      currentGDRState;                                  		// 0x022A (0x0001) [0x0000000000000000]              
	unsigned char                                      currentHUDGameMode;                               		// 0x022B (0x0001) [0x0000000000000000]              
	unsigned char                                      currentRoundState;                                		// 0x022C (0x0001) [0x0000000000000000]              
	unsigned char                                      iPrevRobotControlTeam;                            		// 0x022D (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      iRobotControlTeam;                                		// 0x022E (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                prevA10Percents;                                  		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                prevBControlPercentage;                           		// 0x0234 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                prevBNumFriendly;                                 		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                prevBNumEnemy;                                    		// 0x023C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                prevB10Percents;                                  		// 0x0240 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                prevAttackingTeam;                                		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                prevSNDAttackingTeam;                             		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                prevCurrentRounds;                                		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                prevTotalRounds;                                  		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              prevTeamMateStatusScan;                           		// 0x0254 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   soundGDRFriendlyScore;                            		// 0x0258 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   soundGDREnemyScore;                               		// 0x025C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   soundC4Beep;                                      		// 0x0260 (0x0004) [0x0000000000000000]              
	struct FString                                     sGDRCaptureObjective;                             		// 0x0264 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sGDRFriendlyCaptured;                             		// 0x0270 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sGDREnemyCaptured;                                		// 0x027C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sGDRFriendlyControl;                              		// 0x0288 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sGDREnemyControl;                                 		// 0x0294 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sGDRSuccessfulDefend;                             		// 0x02A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sGDRSuccessfulScore;                              		// 0x02AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sGDRRobotNeutral;                                 		// 0x02B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sDominionTimer;                                   		// 0x02C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sIndicatorDisabled;                               		// 0x02D0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sIndicatorAttack;                                 		// 0x02DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sIndicatorDefend;                                 		// 0x02E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sAdvertString;                                    		// 0x02F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sTeamEmptyString;                                 		// 0x0300 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sSNDBombDefuse;                                   		// 0x030C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sSNDBombPickup;                                   		// 0x0318 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sSNDBombProtect;                                  		// 0x0324 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sSNDBonusHeat;                                    		// 0x0330 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sSNDEndOfMatchIn;                                 		// 0x033C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sSNDNextRoundIn;                                  		// 0x0348 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sSNDHalfTimeIn;                                   		// 0x0354 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sSNDWinAnnounce;                                  		// 0x0360 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sSNDWinByC4;                                      		// 0x036C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sSNDWinByC4Neutral;                               		// 0x0378 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sSNDWinByDefuse;                                  		// 0x0384 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sSNDWinByDefuseNeutral;                           		// 0x0390 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sSNDWinByTimer;                                   		// 0x039C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sSNDWinByDefault;                                 		// 0x03A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sSNDWinByWipeoutAttacker;                         		// 0x03B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sSNDWinByWipeoutDefender;                         		// 0x03C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                iPrevGDRControlPercentage;                        		// 0x03CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPrevGDRControlTeamA;                             		// 0x03D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPrevGDRControlTeamB;                             		// 0x03D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPrevGDRBarDirection;                             		// 0x03D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPrevGDRRobotHealth;                              		// 0x03DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPrevGDRRobotLives;                               		// 0x03E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fSkillArrowMaxPos;                                		// 0x03E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPrevSkillIndex;                                  		// 0x03E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                cSelectable;                                      		// 0x03EC (0x0010) [0x0000000000000000]              
	struct FLinearColor                                cUnSelectable;                                    		// 0x03FC (0x0010) [0x0000000000000000]              
	class USoundCue*                                   m_SkillSelected0;                                 		// 0x040C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_SkillSelected1;                                 		// 0x0410 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_SkillSelected2;                                 		// 0x0414 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_SkillSelected3;                                 		// 0x0418 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iPrevTauntIndex;                                  		// 0x041C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iMaxChatMessages;                                 		// 0x0420 (0x0004) [0x0000000000000000]              
	TArray< struct FTChatMessage >                     rChatMessage;                                     		// 0x0424 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              fChatMessageDisplayTime;                          		// 0x0430 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fChatMessageFadeOut;                              		// 0x0434 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fChatMessageMoveTime;                             		// 0x0438 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fChatMessageFadeIn;                               		// 0x043C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iChatYTop;                                        		// 0x0440 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fChatScrollRefTime;                               		// 0x0444 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                pixelsToLineBreak;                                		// 0x0448 (0x0004) [0x0000000000000000]              
	struct FString                                     sGlobalChannel;                                   		// 0x044C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     sTeamChannel;                                     		// 0x0458 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FLinearColor                                cGlobalColor;                                     		// 0x0464 (0x0010) [0x0000000000000000]              
	struct FLinearColor                                cGMColor;                                         		// 0x0474 (0x0010) [0x0000000000000000]              
	class UPBCharacterNamesPrinterScaleform*           pCharPrinter;                                     		// 0x0484 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       minimapTextureName;                               		// 0x0488 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              mapOffsetX;                                       		// 0x0490 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mapOffsetY;                                       		// 0x0494 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              map_scale;                                        		// 0x0498 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              scaleScene;                                       		// 0x049C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              map_display_width;                                		// 0x04A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              map_display_height;                               		// 0x04A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              map_display_unrealunits;                          		// 0x04A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              map_display_scale;                                		// 0x04AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     mapWorld;                                         		// 0x04B0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              ms[ 0x9 ];                                        		// 0x04BC (0x0024) [0x0000000000002000]              ( CPF_Transient )
	float                                              mt[ 0x9 ];                                        		// 0x04E0 (0x0024) [0x0000000000002000]              ( CPF_Transient )
	float                                              mr[ 0x9 ];                                        		// 0x0504 (0x0024) [0x0000000000002000]              ( CPF_Transient )
	float                                              map_width;                                        		// 0x0528 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              map_height;                                       		// 0x052C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   map_topL;                                         		// 0x0530 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   map_bottomR;                                      		// 0x0538 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   map_midpoint;                                     		// 0x0540 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                iCurrentMarkerIndex;                              		// 0x0548 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              tauntStartTime;                                   		// 0x054C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPrevDamageIndicators;                            		// 0x0550 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              damageOverlayDisplayTime;                         		// 0x0554 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              damageOverlayDisplayDuration;                     		// 0x0558 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iDamageOverlayMaxDisplacement0;                   		// 0x055C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iDamageOverlayMaxDisplacement1;                   		// 0x0560 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iDamageOverlayMaxOffset0;                         		// 0x0564 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iDamageOverlayMaxOffset1;                         		// 0x0568 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              damageOverlayTargetX0;                            		// 0x056C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              damageOverlayTargetY0;                            		// 0x0570 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              damageOverlayTargetX1;                            		// 0x0574 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              damageOverlayTargetY1;                            		// 0x0578 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       mKiller;                                          		// 0x057C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBPlayerReplicationInfo*                    mKillerPRI;                                       		// 0x0580 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mHeatBufferContainerMoveable;                     		// 0x0584 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mHeatBufferUnitsMoveable;                         		// 0x0588 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mHeatBufferTensMoveable;                          		// 0x058C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mHeatBufferHundredsMoveable;                      		// 0x0590 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mVotingContainer;                                 		// 0x0594 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              heatBufferTransitionStartTime;                    		// 0x0598 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              heatBufferTransitionDuration;                     		// 0x059C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              heatBufferTransitionMotionDuration;               		// 0x05A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPrevHeatBuffer;                                  		// 0x05A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iHeldBufferProgressBar;                           		// 0x05A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iHeldBufferNumStars;                              		// 0x05AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPrevHeatEvent;                                   		// 0x05B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              heatEventTransitionStartTime;                     		// 0x05B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              heatEventTransitionDuration;                      		// 0x05B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              heatEventTransitionMotionDuration;                		// 0x05BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     prevHeatEventID;                                  		// 0x05C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              zoomStartTime;                                    		// 0x05CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPrevHeatBufferLength;                            		// 0x05D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                weaponSelectTimeout;                              		// 0x05D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WeaponSelectEndTime;                              		// 0x05D8 (0x0004) [0x0000000000000000]              
	TArray< struct FSkillUnlockData >                  skillUnlocks;                                     		// 0x05DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     newSkillMessageID;                                		// 0x05E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              fTimeToFadeUpSkillUnlock;                         		// 0x05F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTimeToHoldUpSkillUnlock;                         		// 0x05F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTimeToFadeDownSkillUnlock;                       		// 0x05FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FWeaponPickupDisplayed >            rDisplayedWeaponPickups;                          		// 0x0600 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              weaponPickupMaxRadius;                            		// 0x060C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              weaponPickupFullAlphaRadius;                      		// 0x0610 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              weaponPickupMaxRadiusSquared;                     		// 0x0614 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              weaponPickupFullAlphaRadiusSquared;               		// 0x0618 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              weaponPickupAlphaFadeInSpeed;                     		// 0x061C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              weaponPickupAlphaFadeOutSpeed;                    		// 0x0620 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FAdvertAugmentedRealityDisplayed >  rDisplayedAugmentedAdverts;                       		// 0x0624 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              augmentedAdvertMaxRadius;                         		// 0x0630 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              augmentedAdvertFullAlphaRadius;                   		// 0x0634 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              augmentedAdvertMaxRadiusSquared;                  		// 0x0638 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              augmentedAdvertFullAlphaRadiusSquared;            		// 0x063C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FAmmoCrateDisplayed >               rDisplayedAmmoCrates;                             		// 0x0640 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              ammoCrateMaxRadius;                               		// 0x064C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ammoCrateFullAlphaRadius;                         		// 0x0650 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ammoCrateMaxRadiusSquared;                        		// 0x0654 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ammoCrateFullAlphaRadiusSquared;                  		// 0x0658 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ammoCrateName;                                    		// 0x065C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTurretDisplayed >                  rDisplayedTurrets;                                		// 0x0668 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USoundCue*                                   m_HeatBufferEventPopup;                           		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SndTier1;                                         		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SndTier2;                                         		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SndTier3;                                         		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SndTier4;                                         		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              notificationShowTime;                             		// 0x0688 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                previTeamsNotReadyTimer;                          		// 0x068C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_sendChatMsg__Delegate;                   		// 0x0690 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __onFadeOut__Delegate;                            		// 0x069C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43405 ];

		return pClassPointer;
	};

	void ShowAllHudElements ( );
	void CallSetNewRoundIn ( struct FString Message );
	void updateSNDNextRoundTimer ( int Time );
	void CallTriggerSNDPulse ( );
	void CallSetCarryingMessage ( struct FString Message );
	void CallSetSNDNewRoundIn ( struct FString roundInMessage );
	void CallSetSNDBonusHeat ( struct FString bonusMessage );
	void CallSetSNDPlayersTeam ( int teamNumber );
	void CallSetSNDResultEnemyScore ( struct FString Score );
	void CallSetSNDResultFriendlyScore ( struct FString Score );
	void CallSetSNDResultReason ( struct FString Reason );
	void CallSetSNDResultMessage ( struct FString Message, int MessageColour );
	void CallShowHideSNDRoundEndScreen ( unsigned long bVisible );
	void CallSwitchNotificatonMessage ( struct FString newMessage );
	void CallSetTeamEmptyMessage ( struct FString newMessage );
	void CallShowHideTeamEmptyMessage ( unsigned long bShow );
	void CallSetZoomIndicatorZoomLevel ( unsigned long SecondaryZoom );
	void CallSetZoomIndicatorAlpha ( float newAlpha );
	void CallShowHideZoomIndicator ( unsigned long bVisible, struct FString basicZoom, struct FString SecondaryZoom );
	void CallSetTurretARPosition ( float XPos, float YPos );
	void CallSetTurretARHealth ( int newHealth );
	void CallShowHideTurretAR ( unsigned long bShow );
	void CallShowHideGrenadeCookEffect ( unsigned long bShow, float cookingTime, float numPulses );
	void CallDeleteMinimapBombMarker ( );
	void CallUpdateMinimapBombMarkerPosition ( float XPos, float YPos, unsigned long isOffMap, float Rotation, float Alpha );
	void CallCreateBombMarker ( );
	void CallUpdateMinimapObjectiveMarkerPosition ( int Index, float XPos, float YPos, unsigned long isOffMap, float Rotation, float Alpha );
	void CallCreateMinimapObjectiveMarker ( int Index );
	void CallSetSNDIndicatorsInstructions ( unsigned long setA, struct FString instruction );
	void CallSetSNDInstructionText ( struct FString friendlyInstructions, struct FString enemyInstructions );
	void CallSetSNDIndicatorPositionOffscreen ( int marker, float XPos, float YPos, float rotationAngle );
	void CallSetSNDIndicatorPositionOnscreen ( int marker, float XPos, float YPos );
	void CallSetSNDObjectivesVisible ( unsigned long bVisible );
	void CallSetSNDC4MarkerPlaced ( unsigned long bPlaced, struct FString Message );
	void CallSetSNDC4MarkerVisible ( unsigned long bVisible );
	void CallSetSNDTeamsAliveCount ( int numOnFriendly, int numAliveOnFriendly, int numOnEnemy, int numAliveOnEnemy );
	void CallSetSNDRoundsCounter ( struct FString roundsCounterText );
	void CallTriggerBPulse ( );
	void CallTriggerAPulse ( );
	void CallDisplayDTBScoreFlash ( unsigned long bFriendly );
	void CallSetDTBIndicatorEnabled ( unsigned long setA, unsigned long Enabled );
	void CallSetDTBIndicatorsInstructions ( unsigned long setA, struct FString instruction );
	void CallSetDTBIndicatorPositionOffscreen ( unsigned long setA, float XPos, float YPos, float rotationAngle );
	void CallSetDTBIndicatorPositionOnscreen ( unsigned long setA, float XPos, float YPos );
	void CallSetDTBInstructionText ( struct FString friendlyInstructions, struct FString enemyInstructions );
	void CallSetBActive ( unsigned long bActive );
	void CallSetBStatusText ( struct FString NewStatus );
	void CallShowBArrows ( unsigned long bShow );
	void CallSetPlayersInBControlArea ( int friendlyPlayers, int enemyPlayers, unsigned long playerInArea );
	void CallSetBControlPercentage ( int percentage );
	void CallSetAActive ( unsigned long bActive );
	void CallSetAStatusText ( struct FString NewStatus );
	void CallShowAArrows ( unsigned long bShow );
	void CallSetPlayersInAControlArea ( int friendlyPlayers, int enemyPlayers, unsigned long playerInArea );
	void CallSetAControlPercentage ( int percentage );
	void CallSetGDRIndicatorDisplayMode ( int Mode );
	void CallSetGDRIndicatorPositionOffscreen ( float XPos, float YPos, float rotationAngle );
	void CallSetGDRIndicatorPositionOnscreen ( float XPos, float YPos );
	void HandleNotifyRobotControlChanged ( unsigned char NewTeam );
	void CallSetGDRActivateText ( struct FString newText );
	void CallSetGDRInstructionText ( struct FString newText );
	void CallSetGDRRobotLives ( int NumLives );
	void CallSetGDRRobotHealth ( int percentage );
	void CallSetGDRDeltaArrows ( int barDelta );
	void CallSetGDRNumPlayersInControlZone ( int friendlyPlayers, int enemyPlayers, unsigned long playerInArea );
	void CallSetGDRControlPercentage ( int controlPercentage );
	void CallSetGDRHudState ( unsigned char NewState );
	void CallSetScoreGameMode ( int gameMode );
	void CallSetTurretIndicatorPositionEdgeRadians ( struct FString turretName, float radians );
	void CallSetTurretIndicatorPositionOffscreen ( struct FString turretName, float XPos, float YPos, float Angle );
	void CallSetTurretIndicatorPosition ( struct FString turretName, float XPos, float YPos );
	void CallSetTurretIndicatorColor ( struct FString turretName, float redMultiplier, float greenMultiplier, float blueMultiplier );
	void CallDeleteTurretIndicator ( struct FString turretName );
	void CallSetTurretIndicatorPlayerName ( struct FString turretName, struct FString PlayerName );
	void CallAddTurretIndicator ( struct FString turretName, float redMultiplier, float greenMultiplier, float blueMultiplier, struct FString PlayerName );
	void CallDeleteAllTurretIndicators ( );
	void CallSetupSkillIcons ( TArray< struct FString > icons, TArray< int > unlockedValues );
	void DebugPlayerMarkers ( );
	void CallResetHeat ( );
	void CallPrintHUDStats ( );
	void CallSetSkillLevelUpAlpha ( float newAlpha );
	void CallShowHideSkillLevelUp ( unsigned long bShow, struct FString newSkillMessage, struct FString skillName, struct FString skillIcon );
	void CallHideVoteContainer ( );
	bool CallIsBlurring ( );
	void EndBerserkEffect ( );
	void StartBerserkEffect ( );
	void CallShowHideBerserkEffect ( unsigned long bShow );
	void CallSetDamageLayerPositionAndAlpha ( unsigned long bShow, float layer0X, float layer0Y, float layer0Alpha, float layer1X, float layer1Y, float layer1Alpha );
	void CallRemoveAllAugmentedRealityAdverts ( );
	void CallRemoveAugmentedRealityAdvert ( struct FString Id );
	void CallSetAugmentedRealityAdvertPosition ( struct FString Id, float XPos, float YPos );
	void CallSetAugmentedRealityAdvertAlpha ( struct FString Id, float newAlpha );
	void CallAddAugmentedRealityAdvert ( struct FString Id, struct FString Description );
	void CallRemoveAllWeaponPickups ( );
	void CallRemoveWeaponPickup ( struct FString Id );
	void CallSetWeaponPickupPosition ( struct FString Id, float XPos, float YPos );
	void CallSetWeaponPickupAlpha ( struct FString Id, float newAlpha );
	void CallSetWeaponPickupInteractible ( struct FString Id, unsigned long bInteractible );
	void CallAddWeaponPickup ( struct FString Id, struct FString weaponName );
	void CallResetHeatEventMoveable ( );
	void CallSetupHeatEventTransition ( );
	void CallResetHeatBufferMoveable ( );
	void CallSetupHeatBufferTransition ( );
	void CallSetHeatBufferEventDescriptionAlpha ( float newAlpha );
	void CallSetHeatBufferEventDescriptionZ ( float newZ );
	void CallSetHeatBufferEventDescription ( struct FString newDescription, int RGB, struct FString newMovie );
	int CallSetSelectedWeapon ( unsigned long bApplyChange );
	int SetSelectedWeapon ( unsigned long bApplyChange );
	void CallShowEquipment ( TArray< struct FString > weaponCodes, TArray< unsigned long > weaponStates, int activeWeaponIndex, unsigned long Direction, unsigned long bKeyBinding );
	void ShowEquipmentDetails ( int weaponIndex, unsigned long Direction, unsigned long bKeyBinding );
	void ShowEquipmentByIndex ( unsigned char T );
	void ShowEquipment ( unsigned long Direction );
	void CallSetHeatBufferValue ( struct FString NewValue, unsigned long isRed, int RGB, int percentageToNextAward, int numStars, int textColour );
	void CallSetHeatBufferAlpha ( float newAlpha );
	void CallShowHideHeatBuffer ( unsigned long bShow, unsigned long bTaunting, struct FString tauntKey );
	void CallSetHeatEventDescriptionContainerVisible ( unsigned long bShow );
	void CallSetHeatEventDescription ( struct FString newDescription );
	void CallSetHeatEventValue ( struct FString NewValue );
	void CallSetHeatEventZValue ( float newZ, float NewScale );
	void CallSetHeatEventAlpha ( float newAlpha );
	void CallShowHideHeatEvent ( unsigned long bShow );
	void CallHideVolumeInteraction ( );
	void CallShowVolumeInteraction ( struct FString interactName );
	void CallSetHeadCrabHealthValue ( int NewValue );
	void CallSetHeadCrabARPosition ( float newX, float newY );
	void CallShowHideHeadCrabAR ( unsigned long bShow, struct FString dispString );
	void HandleHeadCrabHUD ( class APawn* pPawn, struct FVector CameraLoc, struct FRotator CameraRot );
	void EndControlHeadCrab ( );
	void StartControlHeadCrab ( );
	void SetEnableHOTEffect ( unsigned long bEnable );
	void ShowInstantHeal ( int iAmount );
	void DisplayHOT ( int iAmount );
	void CallHealEffect_DisplayHOT ( int heal );
	void CallHealEffect_StopHOT ( );
	void CallHealEffect_StartHOT ( );
	void CallHealEffect_InstantHeal ( int heal );
	void HandlePaperPlaneHUD ( class APawn* pPawn, struct FVector CameraLoc, struct FRotator CameraRot );
	void EndControlPlane ( );
	void StartControlPlane ( );
	void CallSetPaperplaneHeatValue ( float NewValue );
	void CallSetPaperplaneOverheatPosition ( float newX, float newY );
	void CallShowHidePaperplaneOverheat ( unsigned long bShow, struct FString dispString );
	void ShowPassiveVoteNotification ( struct FString Title, struct FString Message );
	void TriggerHideVoteInfo ( );
	void ShowVoteResult ( struct FString Title, struct FString Message );
	void ShowVotedOption ( unsigned long bVotedYes );
	void UpdateVoteCount ( int YesVoteCount, int NoVoteCount );
	void AShideVoteTimer ( );
	void ASshowVoteTimer ( );
	void ASSetupNewVoting ( struct FString Message, struct FString EventDescription, int YesVoteCount, int NoVoteCount, struct FString KeyNo, struct FString KeyYes, unsigned long CanVote );
	void SetupNewVoting ( struct FString Message, struct FString EventDescription, int YesVoteCount, int NoVoteCount );
	bool CallChangeHudState ( unsigned long Normal, unsigned long showChat, unsigned long showScore );
	void CallAddDamageIndicator ( int Index, int Angle, float Opacity );
	void CallClearAllDamageIndicators ( );
	void CallUpdateTauntCounterPercentage ( int NewValue );
	void CallUpdateTauntCounterProgress ( float percentage );
	void CallUpdateTauntCounterCounter ( float percentage );
	void CallUpdateTauntCounterRotation ( float Rotation );
	void CallShowHideTauntCounter ( unsigned long bShow );
	void CallShowScannedOnMinimap ( );
	void CallShowMinimapSweep ( );
	void CallDeleteMinimapMarker ( int Index );
	void CallCreateMinimapMarker ( int Index, unsigned long isEnemy, unsigned long isNemesis, float XPos, float YPos, unsigned long isOffMap, float Rotation, float Alpha );
	void CallSetMinimapMarkerColour ( int Index, float rMult, float gMult, float bMult );
	void CallUpdateMinimapMarkerPosition ( int Index, float XPos, float YPos, unsigned long isOffMap, float Rotation, float Alpha );
	void CallUpdateMinimapPositionAndRotation ( float newX, float newY, float Rotation );
	void CallSetMinimapScale ( float mapScale );
	void CallDeleteMinimapImage ( );
	void CallInitialiseMinimap ( );
	void CallSetPlayerIndicationCarryingBomb ( int Index, unsigned long bCarrying );
	void CallSetPlayerIndicationColour ( int Index, float rMult, float gMult, float bMult );
	void CallSetPlayerIndicationAlpha ( int Index, float Alpha, float nameAlpha );
	void CallSetPlayerIndicationPosition ( int Index, float XPos, float YPos );
	void CallRemovePlayerIndication ( int Index );
	void CallAddPlayerIndication ( int Index, struct FString PlayerName, int colour, unsigned long onTeam, unsigned long isNemesis );
	void CallRemoveAllPlayerIndications ( );
	void CallDeleteChatMessage ( int Index );
	void CallSetChatMessageYPos ( int Index, float YPos, int clipToFollow );
	void CallSetChatMessageAlpha ( int Index, float Alpha );
	void CallCreateChatMessage ( int Index, struct FString Channel, int ChannelColour, struct FString Player, int playerColour, struct FString Message, int MessageColour, int numPixelsToLineBreak, int prevClip );
	float _Call_SetChatMessageChanel ( unsigned long GlobalChanel );
	void CallSetChatMessageChanel ( unsigned long GlobalChanel );
	void CallUpdateUnlockProgressSelection ( int skillId, int percentageUnlocked, unsigned long toShow );
	void CallUpdateSkillSelectionEnergy ( int skillId, int percentageEnergy, unsigned long isReady, unsigned long isVisible, unsigned long isOverMinimumEnergy );
	void CallSetTauntSelectable ( int tauntID, unsigned long selectable );
	void CallUpdateTauntSelectSelectionAndArrow ( int selectedTaunt, float arrowX, float arrowY, unsigned long selectable, unsigned long showArrow, int selectableColor, int unSelectableColor, float arrowDegrees );
	void CallShowHideTauntSelect ( unsigned long Visible, TArray< struct FString > Taunts );
	void CallUpdateSkillSelectSelectionAndArrow ( int selectedSkill, float arrowX, float arrowY, unsigned long selectable, unsigned long showArrow, int selectableColor, int unSelectableColor, float arrowDegrees );
	void CallShowHideSkillSelect ( unsigned long Visible );
	void CallSetInGameScoreText ( struct FString team1Name, int team1Color, struct FString team2Name, int team2Color );
	void CallSetInGameScore ( struct FString team1Score, int team1Color, struct FString team2Score, int team2Color );
	void CallSetRoundTimerValue ( struct FString NewValue, unsigned char colour );
	void CallSetRoundTimerVisible ( unsigned long Visible );
	void CallSetGrenadeArrowProgress ( float Progress, unsigned long bShow );
	void CallShowHideGrenadeMinigame ( unsigned long show );
	void CallSetHudAlphaWhilstReloading ( float percentage );
	void CallSetReloadColour ( int RGB );
	void CallSetReloadArrowProgress ( float Progress, unsigned long show );
	void CallSetupReloadMinigameMask ( float perfectStartPoint, float perfectEndPoint );
	void CallShowHideReloadMinigame ( unsigned long show, float perfectStartPoint, float perfectEndPoint );
	void CallDeleteKillMessage ( int Index );
	void CallSetKillMessageYPos ( int Index, float YPos, int clipToFollow );
	void CallSetKillMessageAlpha ( int Index, float Alpha );
	void CallCreateKillMessage ( int Index, struct FString KillerName, int KillerColor, struct FString VictimName, int VictimColor, struct FString Weapon, struct FString SpecialDeath, unsigned long isSuicide, unsigned long isNemesis, int prevClipIndex );
	void CallUnlockLevel ( int Level );
	void CallUpdateEnergy ( int skillId, int percentageEnergy, unsigned long isReady, unsigned long fullyUnlocked, unsigned long isOverMinimumEnergy );
	void CallUpdateHeatValue ( int NewValue, int percentageToNextUnlock );
	void CallShowSkillIconInAmmo ( unsigned long bShow, struct FString skillIcon );
	void CallUpdateAmmoNoAmmo ( struct FString NewValue );
	void CallUpdateAmmoInClips ( struct FString NewValue );
	void CallUpdateAmmoInGun ( struct FString NewValue, unsigned long lowOnAmmo, unsigned long criticalAmmo );
	void CallUpdateHealth ( int NewValue );
	void CallSetVisible ( unsigned long isVisible );
	void LockHeatBuffer ( );
	void HandleLostFocus ( );
	struct FLinearColor eventDetermineTeamColor ( unsigned long showingAlternateDamageColour, class APBPawn* OtherPawn, int* carryingC4 );
	void HandleDTBHud ( struct FVector CameraLoc, struct FRotator CameraRot );
	void HandleGDRHud ( struct FVector CameraLoc, struct FRotator CameraRot );
	void HandleSNDHud ( struct FVector CameraLoc, struct FRotator CameraRot );
	void UpdateSNDTeamsAliveCount ( );
	void showSNDRoundEndReason ( unsigned long bShow );
	void refreshSNDRoundEndReason ( );
	void HandleKillMessages ( );
	void HandleReloadMinigame ( class APBKWeapon* pWeapon );
	void HandleRoundTimer ( );
	void HandleInGameScore ( struct FVector CameraLoc, struct FRotator CameraRot );
	void HandleSkillSelectMinigame ( );
	void HandleTauntSelectMinigame ( );
	void HandleChatMessages ( );
	void HandlePlayerIndications ( float fDelta );
	bool WorldToMap ( struct FVector Location, float playerX, float playerY, float Angle, float* deltaXrot, float* deltaYrot, float* rotationAngle );
	void UpdateMinimap ( float playerX, float playerY, float Angle );
	void ClearMinimapImage ( );
	void HandleMinimap ( float fDelta );
	void HandleTauntCounter ( );
	void HandleDamageIndicators ( );
	void HandleHeatSystem ( );
	void HandleWeaponPickups ( float fDelta, struct FVector CameraLoc, struct FRotator CameraRot );
	void HandleSkillUnlocks ( );
	void HandleAmmoCrates ( struct FVector CameraLoc, struct FRotator CameraRot );
	void HandleTurretIndicators ( struct FVector CameraLoc, struct FRotator CameraRot );
	void eventTick ( float fDelta );
	void TauntEnd ( );
	void TauntStart ( );
	void SetHudAlpha ( float Alpha );
	void NotifyRevealedOnMinimap ( );
	void NotifyMinimapSweepPerformed ( );
	void ShowMessageAboveCrosshair ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void AddChatMessage ( struct FString PlayerName, struct FString Message, unsigned char pType, unsigned long IsGlobal );
	void AddDeathMessage ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim, int iPersonalKills, unsigned char SpecialDeath, int iWeaponCode, struct FString sSkillWeaponCode, class UClass* dmgType );
	void SetHUDVisible ( unsigned long isVisible );
	void _Release ( );
	void UpdateGameModeInfo ( );
	void SetGameMode ( unsigned char gameMode );
	bool _Initialize ( );
	void ChangeHUDState ( unsigned char NewState );
	void SetOnFadeOutDelegate ( struct FScriptDelegate F );
	void onFadeOut ( int Index );
	float VSizeVect2D ( struct FVector2D In );
	struct FString FormatTime ( int iTime );
	struct FString colourStringFromHEX ( int Col );
	int colorToHEX ( struct FLinearColor Col );
	struct FVector multMatrix ( float* M, struct FVector V );
	void SkillsHaveChanged ( );
	void NotifyHeatReset ( );
	void removeChests ( );
	void addChest ( class APBChest* chest );
	void CancelChatMsg ( );
	void sendMsg ( );
	void Set_sendChatMsg_Delegate ( struct FScriptDelegate F );
	void Unreal_sendChatMsg ( );
};

UClass* UPBGFxObject_HUD::pClassPointer = NULL;

// Class PlanBGame.PBGFxMoviePlayer_ProgressionScene
// 0x0014 (0x0198 - 0x0184)
class UPBGFxMoviePlayer_ProgressionScene : public UPBGFxMoviePlayer_Tickable
{
public:
	unsigned long                                      mbFirstUpdate : 1;                                		// 0x0184 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class UGFxObject*                                  mSceneContainer;                                  		// 0x0188 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnSceneClosed__Delegate;                        		// 0x018C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43578 ];

		return pClassPointer;
	};

	void SetOnSceneClosedDelegate ( struct FScriptDelegate F );
	void flashOnSceneClosed ( );
	void eventTick ( float fDelta );
	void InitialUpdate ( );
	void OnSceneClosed ( );
};

UClass* UPBGFxMoviePlayer_ProgressionScene::pClassPointer = NULL;

// Class PlanBGame.PBDeathCamera
// 0x0130 (0x033C - 0x020C)
class APBDeathCamera : public APBCameraAction
{
public:
	unsigned long                                      bZoomToTarget : 1;                                		// 0x020C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableSmartZoom : 1;                             		// 0x020C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bWaitForRotationStability : 1;                    		// 0x020C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bFollowKiller : 1;                                		// 0x020C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bFollowFlyingSuicide : 1;                         		// 0x020C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      zoomToPlayerReached : 1;                          		// 0x020C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bTauntDelay : 1;                                  		// 0x020C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bRotationComplete : 1;                            		// 0x020C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bCameraPullBackComplete : 1;                      		// 0x020C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bTauntedOnce : 1;                                 		// 0x020C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bDrawNemesisEffects : 1;                          		// 0x020C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bDebugKeepAlive : 1;                              		// 0x020C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	float                                              fDeactivationProtectTime;                         		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSuicideCameraDistance;                           		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRotateSpeed;                                     		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRotateToKillerMaxTime;                           		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPullBackDistance;                                		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPullBackSpeed;                                   		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRotationFinishDelayTime;                         		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPullBackDelayTime;                               		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fZoomToDeviceFinishDelayTime;                     		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fZoomToTargetSpeed;                               		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDistanceFromObstacle;                            		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPEOptimalDistance;                               		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTauntFinishDelayTime;                            		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLookAtEyeRatio;                                  		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLookAtKillerRotateSpeed;                         		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLookAtKillerRotateMoveSpeed;                     		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLookAtInterpSpeed;                               		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPersonalEnemyStartFOV;                           		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPersonalEnemyFinalFOV;                           		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPersonalEnemyFOVBlendSpeed;                      		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     NemesisMeshPosition;                              		// 0x0260 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              NemesisMaterialFadeInDelayTime;                   		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NemesisMaterialFadeInTime;                        		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       NemesisMaterialOpacityParamName;                  		// 0x0274 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              NemesisEffectScale;                               		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageIndicatorOpacity;                           		// 0x0280 (0x0004) [0x0000000000000000]              
	class UMaterialEffect*                             NemesisEffect;                                    		// 0x0284 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   NemesisMaterial;                                  		// 0x0288 (0x0004) [0x0000000000000000]              
	float                                              fActivateTime;                                    		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     vViewPos;                                         		// 0x0290 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    rViewRot;                                         		// 0x029C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     vStartPos;                                        		// 0x02A8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     vEndPos;                                          		// 0x02B4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    rStartRot;                                        		// 0x02C0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              fRotationDelayTimeLeft;                           		// 0x02CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fPullBackDelayTimeLeft;                           		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fPullBackTimeElapsed;                             		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       pKilledPawn;                                      		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       pKillerPawn;                                      		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBPlayerReplicationInfo*                    pKilledPRI;                                       		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBPlayerReplicationInfo*                    pKillerPRI;                                       		// 0x02E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTauntFinishedTime;                               		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      DamageCauser;                                     		// 0x02EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              delayAfterZoomToDeviceTimeLeft;                   		// 0x02F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              currentFOV;                                       		// 0x02F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NemesisMaterialFadeInTimeElapsed;                 		// 0x02F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    KillerRotationLastStable;                         		// 0x02FC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FRotator >                          KillerRotationPrevious;                           		// 0x0308 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                KillerRotationPreviousMaxCount;                   		// 0x0314 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                KillerRotationPreviousYawTHreshold;               		// 0x0318 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     vLookAt;                                          		// 0x031C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              fLookAtKillerCharacterOffset;                     		// 0x0328 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     vBackDirectionMoveBehindPlayer;                   		// 0x032C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      PreviousLookAtActor;                              		// 0x0338 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43608 ];

		return pClassPointer;
	};

	struct FVector GetPhysAssetRootLocation ( class APawn* inPawn );
	bool UpdateCamera ( float inDeltaTime, class AActor* InTarget, struct FVector* OutCamLoc, struct FRotator* OutCamRot, float* OutFOV );
	struct FVector GetCameraLookAtFrom ( unsigned long bForcePlayerView, unsigned long bWaitForRotation );
	struct FVector GetCameraLookAt ( class AActor* Target, float inDeltaTime, unsigned long bForcePlayerView );
	void UpdateNemesisEffects ( float inDeltaTime, float* OutFOV );
	void LookAtKiller ( float inDeltaTime );
	bool ZoomToTarget ( struct FVector Target, float inDeltaTime );
	void RotateCameraToTarget ( float inDeltaTime, struct FVector Target );
	void MoveCameraBehindPlayer ( float inDeltaTime );
	bool WaitingForDelay ( float inDeltaTime, float* DelayTimeLeft, struct FVector* outCamLocation, struct FRotator* outCamRotation );
	void DeactivateAction ( );
	void DrawHUD ( class UCanvas* Canvas );
	bool IsDeactivationPossible ( );
	void Configure ( class APBPawn* inVictim, class APawn* inKiller, unsigned long inFollowFlying, class AActor* inDamageCauser );
	void ActivateAction ( class APBCameraActionManager* manager );
};

UClass* APBDeathCamera::pClassPointer = NULL;

// Class PlanBGame.PBTauntCamera
// 0x008C (0x0298 - 0x020C)
class APBTauntCamera : public APBCameraAction
{
public:
	struct FRotator                                    vInitialCamRot;                                   		// 0x020C (0x000C) [0x0000000000000000]              
	struct FVector                                     vInitialCamPos;                                   		// 0x0218 (0x000C) [0x0000000000000000]              
	TArray< class APBCharacter* >                      MakeInvisible;                                    		// 0x0224 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bDeactivating : 1;                                		// 0x0230 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bActivating : 1;                                  		// 0x0230 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      DeactivationForceInitialRotation : 1;             		// 0x0230 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FRotator                                    vTargetRotation;                                  		// 0x0234 (0x000C) [0x0000000000000000]              
	struct FVector                                     vTargetPosition;                                  		// 0x0240 (0x000C) [0x0000000000000000]              
	float                                              fPlayTime;                                        		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    rCurrentRotation;                                 		// 0x0250 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     vCurrentPosition;                                 		// 0x025C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              ActivationRotationTime;                           		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivationTranslationTime;                        		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Activation3PTime;                                 		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                StartRotationOffset;                              		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivationStartPositionOffset;                    		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ActivationRotationInterpolation;                  		// 0x027C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ActivationTranslationInterpolation;               		// 0x027D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DeactivationRotationInterpolation;                		// 0x027E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DeactivationTranslationInterpolation;             		// 0x027F (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeactivationRotationTime;                         		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeactivationTranslationTime;                      		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Deactivation1PTime;                               		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeactivationFinalPositionOffset;                  		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxCameraScale;                                   		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PitchLimitation;                                  		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43770 ];

		return pClassPointer;
	};

	bool UpdateCamera ( float fDeltaTime, class AActor* Target, struct FVector* OutCamLoc, struct FRotator* OutCamRot, float* OutFOV );
	float GetInterpolatedBlend ( float Value, unsigned char BlendType );
	void CalculateFinal ( class APBPlayerController* PC, struct FRotator* targetRotation, struct FVector* TargetPosition );
	void CalculateTarget ( class APBPlayerController* PC, struct FRotator* targetRotation, struct FVector* TargetPosition );
	void Deactivate ( );
	struct FVector InterpLoc ( struct FVector In, struct FVector Target, float Blend );
	struct FRotator InterpRot ( struct FRotator In, struct FRotator Target, float Blend );
	void DeactivateAction ( );
	void SetViewMode ( class APBPawn* pPawn, unsigned long bThirdPerson );
	void ActivateAction ( class APBCameraActionManager* pManager );
};

UClass* APBTauntCamera::pClassPointer = NULL;

// Class PlanBGame.PBFlashBangLogic
// 0x0047 (0x021F - 0x01D8)
class APBFlashBangLogic : public AActor
{
public:
	struct FName                                       BlankParam;                                       		// 0x01D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SuperimposeParam;                                 		// 0x01E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FadingOutParam;                                   		// 0x01E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GrenadePosParam;                                  		// 0x01F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEffectSpeed;                                     		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEffectActive_ : 1;                               		// 0x01FC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FLinearColor                                fOrigin_;                                         		// 0x0200 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FFlashBangInfo >                    rFlashBangs;                                      		// 0x0210 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      FadingBlendType;                                  		// 0x021C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SuperimposeBlendType;                             		// 0x021D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BlankBlendType;                                   		// 0x021E (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43861 ];

		return pClassPointer;
	};

	bool UpdateEffect ( class UMaterialInstance* pEffectMat, float* fAlpha );
	float GetBlendedValue ( float CurrentVal, float NewVal, unsigned char BlendType );
	bool GetIntensities ( struct FFlashBangInfo pInfo, float* fBlank, float* fSuperImpose, float* fFadingOut );
	void StopFlashBang ( );
	bool StartFlashBang ( float fFadeIn, float fFull, float fFadeOut, float fSuperFull, float fSuperOut, float fIntensity, struct FVector fOrigin );
};

UClass* APBFlashBangLogic::pClassPointer = NULL;

// Class PlanBGame.PBWeaponPreset
// 0x0008 (0x0174 - 0x016C)
class UPBWeaponPreset : public UPBNWeaponPreset
{
public:
	float                                              fPresetEP;                                        		// 0x016C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      isHiddenPreset : 1;                               		// 0x0170 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTemporaryPreset : 1;                             		// 0x0170 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43925 ];

		return pClassPointer;
	};

	void SetHiddenPreset ( unsigned long bHidden );
	bool GetHiddenPreset ( );
	void UpdateWeaponCondFromSerial ( struct FGuid WeaponSerial, int iCond, int iMaxCond );
	class APBKWeaponParams* GetWeaponParamsFromSerialNum ( struct FGuid serialNum );
	void RefreshWeaponCodes ( );
	void UpdateWeaponDecalCode ( int iBaseWeaponCode, int MaterialIndex );
	void UpdateWeaponMaterialCode ( int iBaseWeaponCode, int MaterialIndex );
	void UpdateWeaponModCode ( int iBaseWeaponCode, int ModTypeIdx, int ModIdx );
	void SetWeaponCode ( struct FGuid NewSerialGuid, int iCurCondition, int iCurMaxCondition, struct FSWeaponCode* NewWeaponCode );
	void SetWeaponCodeByCategory ( unsigned char WeaponCat, struct FSWeaponCode* NewWeaponCode );
	bool GetWeaponCodeByCategory ( unsigned char WeaponCat, struct FSWeaponCode* RetreivedWeaponCode );
	void PreparePresetCodes ( );
	void UpdateWeaponPresetFromCodes ( struct FSWeaponPresetCodes* InWeaponCodes );
	bool SetWeaponByParams ( class APBKWeaponParams* pNewParam );
	void RetrieveWeaponCodes ( TArray< struct FSWeaponCode >* rPresetCodes );
	void PresetError ( struct FString Error );
};

UClass* UPBWeaponPreset::pClassPointer = NULL;

// Class PlanBGame.PBAnnouncer
// 0x001C (0x01F4 - 0x01D8)
class APBAnnouncer : public AInfo
{
public:
	unsigned char                                      AnnouncerLevel;                                   		// 0x01D8 (0x0001) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	unsigned char                                      PlayingAnnouncementIndex;                         		// 0x01D9 (0x0001) [0x0000000000000000]              
	class UClass*                                      PlayingAnnouncementClass;                         		// 0x01DC (0x0004) [0x0000000000000000]              
	class APBQueuedAnnouncement*                       Queue;                                            		// 0x01E0 (0x0004) [0x0000000000000000]              
	float                                              GapTime;                                          		// 0x01E4 (0x0004) [0x0000000000000000]              
	class APBPlayerController*                         PlayerOwner;                                      		// 0x01E8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   AnnouncerSoundCue;                                		// 0x01EC (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             CurrentAnnouncementComponent;                     		// 0x01F0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44150 ];

		return pClassPointer;
	};

	void PrecacheAnnouncements ( );
	class USoundNodeWave* GetSound ( struct FString FullName );
	void PlayAnnouncement ( class UClass* InMessageClass, unsigned char MessageIndex );
	void RemoveAnnouncement ( class UClass* InMessageClass );
	void AnnouncementFinished ( class UAudioComponent* AC );
	void PlayAnnouncementNow ( class UClass* InMessageClass, unsigned char MessageIndex );
	void PlayNextAnnouncement ( );
	void PostBeginPlay ( );
	void Destroyed ( );
};

UClass* APBAnnouncer::pClassPointer = NULL;

// Class PlanBGame.PBLocalPlayer
// 0x0020 (0x04B0 - 0x0490)
class UPBLocalPlayer : public ULocalPlayer
{
public:
	class UPBCustomChar_MenuData*                      CustomCharMenuData;                               		// 0x0490 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCustomizationCache*                       CustomizationCache;                               		// 0x0494 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FTRankFormulaValues                         rankFormulaValues;                                		// 0x0498 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	class UPBChatMessageData*                          ChatMessages;                                     		// 0x04A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iRegionCode;                                      		// 0x04AC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44233 ];

		return pClassPointer;
	};

	struct FString eventGetSessionHash ( struct FString Challenge );
	struct FString eventGetLoginSessionId ( );
	struct FString eventGetUserId ( );
	struct FString eventGetProfileId ( );
	struct FString eventGetNickname ( );
	void InitChatMessages ( );
};

UClass* UPBLocalPlayer::pClassPointer = NULL;

// Class PlanBGame.PBPersistentPlayerReplicationInfo
// 0x0018 (0x0810 - 0x07F8)
class APBPersistentPlayerReplicationInfo : public APBPlayerReplicationInfo
{
public:
	struct FName                                       nCurrentlyLoadedMap;                              		// 0x07F8 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bFinishedStreaming : 1;                           		// 0x0800 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	float                                              streamingProgress;                                		// 0x0804 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                iVotedForOption;                                  		// 0x0808 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iNextMatchVote;                                   		// 0x080C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44411 ];

		return pClassPointer;
	};

	float GetParticipationPerc ( int iTeamIndex );
	void ServerSetNextMatchVote ( int VoteOption );
	void ServerSetNextmapVote ( int VoteOption );
	void ServerSetGameSetupOption ( int optionIndex, int ValueIndex );
	void ServerSetMapName ( struct FString MapName );
	void ServerSetGameMode ( unsigned char eGameMode );
	void LobbyStartGame ( );
	bool ShouldBroadCastWelcomeMessage ( unsigned long bExiting );
	void PostBeginPlay ( );
	void ServerSetStreamingProgress ( float fProgress );
	void NotifyServerStreamingBegun ( );
	void NotifyServerFinishedStreaming ( struct FName MapName );
	void NotifyFinishedStreaming ( struct FName MapName );
	bool HasFinishedStreaming ( );
};

UClass* APBPersistentPlayerReplicationInfo::pClassPointer = NULL;

// Class PlanBGame.PBGameStatCollector_Rules
// 0x0058 (0x0244 - 0x01EC)
class APBGameStatCollector_Rules : public AMutator
{
public:
	class AFileWriter*                                 LogFile;                                          		// 0x01EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FString >                           logData;                                          		// 0x01F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bLogComplete : 1;                                 		// 0x01FC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bLogPosition : 1;                                 		// 0x01FC (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bLogFPS : 1;                                      		// 0x01FC (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bLogCamping : 1;                                  		// 0x01FC (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bLogDeath : 1;                                    		// 0x01FC (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bLogSpawn : 1;                                    		// 0x01FC (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bIncludeInGameRules : 1;                          		// 0x01FC (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bStartAutomatically : 1;                          		// 0x01FC (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bLogging : 1;                                     		// 0x01FC (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	struct FString                                     LogFileExtension;                                 		// 0x0200 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FileName;                                         		// 0x020C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              fCampWarningTime;                                 		// 0x0218 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fLogPositionInterval;                             		// 0x021C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fFpsUpdateFrequency;                              		// 0x0220 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CurrentMatch;                                     		// 0x0224 (0x0004) [0x0000000000000000]              
	int                                                CurrentRound;                                     		// 0x0228 (0x0004) [0x0000000000000000]              
	struct FString                                     SessionDesc;                                      		// 0x022C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MapDesc;                                          		// 0x0238 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44445 ];

		return pClassPointer;
	};

	void ScoreKill ( class AController* Killer, class AController* Killed );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void LogSpawn ( class APBPawn* Pawn, class APBPlayerReplicationInfo* PRI, class ANavigationPoint* SpawnPoint );
	struct FString LogActorTDM ( class AActor* Actor );
	void LogPosition ( class APBPawn* Pawn, class APBPlayerReplicationInfo* PRI );
	void LogDeath ( class APBPawn* Pawn, class APBPlayerReplicationInfo* PRI, class AController* Killer );
	void LogFPS ( class APBPawn* Pawn, class APBPlayerReplicationInfo* PRI, float fps );
	void Timer ( );
	void eventDestroyed ( );
	struct FString GetDate ( );
	struct FString GetTime ( );
	struct FString RotatorToString ( struct FRotator Rot );
	void FinalizeLogFile ( );
	void PostBeginPlay ( );
	void EndLog ( );
	void AddSpawnpoints ( );
	void StartLog ( );
	void EnableLogging ( );
	void DisableLogging ( );
	void AddLog ( struct FString LogEntry );
	struct FString GetLogFileName ( );
	struct FString GetMapInfo ( );
	class APBGameInfo* GetPBGameInfo ( );
	struct FString GetMapName ( class APBGameInfo* pGameInfo );
	struct FString GetExtraInfo ( );
};

UClass* APBGameStatCollector_Rules::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_StationHandleInput
// 0x005C (0x00FC - 0x00A0)
class UPBGFxObject_StationHandleInput : public UPBGFxObject_ContainerBased
{
public:
	TArray< int >                                      m_ShopRequests;                                   		// 0x00A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              lastCharacterRecievedTime;                        		// 0x00AC (0x0004) [0x0000000000000000]              
	struct FString                                     stringToCheck;                                    		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     stringChecking;                                   		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIsChecking : 1;                                  		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FScriptDelegate                             __Unreal_onInputChanged__Delegate;                		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_handleOkClick__Delegate;                 		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_handleCancelClicked__Delegate;           		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __unrealLogout__Delegate;                         		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44575 ];

		return pClassPointer;
	};

	void OnPBManagerLogoutFinished ( struct FTPBItemShopResult_OnLogoutDone* Result );
	void LogoutFromPBManager ( );
	void OnLogoutFromGamespyCompleted ( unsigned long bWasSuccessful );
	void LogoutFromGamespy ( );
	void _ClearDelegates ( );
	void _ClearTimers ( );
	void unrealLogout ( );
	void Call_SetNameValid ( unsigned long bValid, struct FString ErrorMessage );
	void _removeShopRequest ( int Request );
	void _addShopRequest ( int Request );
	void _cancelShopRequests ( );
	void _OnCreateStationHandleDone ( int requestId, int ErrorCode );
	void _OnCheckStationHandleAvailabilityDone ( int requestId, int ErrorCode, unsigned long available );
	void eventTick ( float fDelta );
	bool _Initialize ( );
	void _handleCancelClicked ( );
	void Set_handleCancelClicked_Delegate ( struct FScriptDelegate F );
	void Unreal_handleCancelClicked ( );
	void _handleOkClick ( struct FString newHandle );
	void Set_handleOkClick_Delegate ( struct FScriptDelegate F );
	void Unreal_handleOkClick ( struct FString newHandle );
	void _onInputChanged ( struct FString newHandle );
	void Set_onInputChanged_Delegate ( struct FScriptDelegate F );
	void Unreal_onInputChanged ( struct FString newHandle );
};

UClass* UPBGFxObject_StationHandleInput::pClassPointer = NULL;

// Class PlanBGame.PBEMPEffect
// 0x0020 (0x005C - 0x003C)
class UPBEMPEffect : public UObject
{
public:
	class UPBEMPEffect*                                pEMPEffectArchetype;                              		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MatineeTotalTime;                                 		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MatineeWarmupTime;                                		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EffectPostEffectName;                             		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPBEMPEffect_MaterialParm >         EffectPostEffectDefaults;                         		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44596 ];

		return pClassPointer;
	};

	int GetCampaignEndDelay ( );
	class UPBEMPEffect* GetInstance ( );
	void SetDefaultEMPEffectValues ( class UMaterialInstanceConstant* pPostEffectMaterial );
};

UClass* UPBEMPEffect::pClassPointer = NULL;

// Class PlanBGame.PBKWeapon_Mortar
// 0x0004 (0x05C4 - 0x05C0)
class APBKWeapon_Mortar : public APBKWeapon_Skill
{
public:
	unsigned long                                      bFiredMortar : 1;                                 		// 0x05C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsMortarMinimapOpen : 1;                         		// 0x05C0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44854 ];

		return pClassPointer;
	};

	bool CalculateMortarPositionFromMinimapPosition ( struct FVector* vPosition, struct FVector* vNormal );
	void ServerMortarFiredFromMinimap ( struct FVector vPos );
	void MortarFiredFromMinimap ( struct FVector vMinimapLocation );
	bool IsSilenced ( );
	void ShowMortarMinimap ( unsigned long bShow );
	void ShowMortarDesignator ( unsigned long bShow );
	bool DetermineMortarPosition ( struct FVector* vPosition, struct FVector* vNormal );
	void StopFire ( unsigned char FireModeNum );
	void ActivateMortar ( struct FVector vPos, struct FVector vNorm );
	void ServerDoSweep ( );
	bool OnUseSkill ( unsigned char FireModeNum );
	void FireAmmunition ( );
	void InstantFire ( );
	void PostBeginPlay ( );
};

UClass* APBKWeapon_Mortar::pClassPointer = NULL;

// Class PlanBGame.PBSkill_Berserk
// 0x0064 (0x0300 - 0x029C)
class APBSkill_Berserk : public APBSkill
{
public:
	class APBKWeaponParams*                            SyringeBerserkWeapon;                             		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimNameInject1P;                                 		// 0x02A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimDurationInject1P;                             		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimNamePostInject1P;                             		// 0x02AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimDurationPostInject1P;                         		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimNameHandsUpAnim1P;                            		// 0x02B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimDurationHandsUpAnim1P;                        		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fInjectTiming;                                    		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HitWallDamage;                                    		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fChargeEnergyCostMultiplier;                      		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fChargeTime;                                      		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fChargeAccel;                                     		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChargeFOV;                                        		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChargeWeaponFOV;                                  		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iRequiredMasterLevelForCharge;                    		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAllowedSlidingAnglePct;                          		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fChargeRadiusOfKill;                              		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fChargeAngleOfKill;                               		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstance*                           MatTest;                                          		// 0x02F0 (0x0004) [0x0000000000000000]              
	TArray< struct FBerserkImprovementInfo >           rBerserkerImprovements;                           		// 0x02F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45163 ];

		return pClassPointer;
	};

	void DrawSkillHUD ( class UCanvas* Canvas );
	bool GetSkillWeaponCode ( int iIndex, struct FSWeaponCode* outWeaponCode );
	float GetChargeMovementModifier ( );
	float GetMovementModifier ( );
	float GetDmgAbsorption ( );
	bool CanActivateCharge ( );
	void OnUse ( unsigned char UsageMode );
	void NotifyClientOutOfEnergy ( );
	void OnEnergyDepletedDuringUse ( );
	float GetCurrentEnergyCost ( );
	void eventTick ( float fDelta );
	int RestoreHealth ( class APawn* pWhichPawn );
	void InitSkill ( int iNewSkillLevel, unsigned long bDoNotEnforceDefaultLevel );
	void PostBeginPlay ( );
};

UClass* APBSkill_Berserk::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_Burning
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_Burning : public UPBDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45187 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_Burning::pClassPointer = NULL;

// Class PlanBGame.PBMsgTurretDropped
// 0x0000 (0x0060 - 0x0060)
class UPBMsgTurretDropped : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45346 ];

		return pClassPointer;
	};

};

UClass* UPBMsgTurretDropped::pClassPointer = NULL;

// Class PlanBGame.PBMsgTurretPickedUp
// 0x0000 (0x0060 - 0x0060)
class UPBMsgTurretPickedUp : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45347 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UPBMsgTurretPickedUp::pClassPointer = NULL;

// Class PlanBGame.PBSeqAct_SetCameraAction
// 0x0004 (0x0100 - 0x00FC)
class UPBSeqAct_SetCameraAction : public USequenceAction
{
public:
	class APBCameraAction*                             pCameraActionArchetype;                           		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45379 ];

		return pClassPointer;
	};

};

UClass* UPBSeqAct_SetCameraAction::pClassPointer = NULL;

// Class PlanBGame.PBSeqAct_RemoveCameraAction
// 0x0004 (0x0100 - 0x00FC)
class UPBSeqAct_RemoveCameraAction : public USequenceAction
{
public:
	class APBCameraAction*                             pCameraActionObject;                              		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45384 ];

		return pClassPointer;
	};

};

UClass* UPBSeqAct_RemoveCameraAction::pClassPointer = NULL;

// Class PlanBGame.PBSeqAct_SetCameraActorView
// 0x0000 (0x00FC - 0x00FC)
class UPBSeqAct_SetCameraActorView : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45444 ];

		return pClassPointer;
	};

};

UClass* UPBSeqAct_SetCameraActorView::pClassPointer = NULL;

// Class PlanBGame.PBMinimapBoundary
// 0x0000 (0x01D8 - 0x01D8)
class APBMinimapBoundary : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45535 ];

		return pClassPointer;
	};

};

UClass* APBMinimapBoundary::pClassPointer = NULL;

// Class PlanBGame.PBSecurityCameraActor
// 0x0028 (0x0304 - 0x02DC)
class APBSecurityCameraActor : public ACameraActor
{
public:
	int                                                ForwardMaxRotation;                               		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BackwardMaxRotation;                              		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LeftMaxRotation;                                  		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RightMaxRotation;                                 		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    OldRotation;                                      		// 0x02EC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    rPlacedRot;                                       		// 0x02F8 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45586 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
};

UClass* APBSecurityCameraActor::pClassPointer = NULL;

// Class PlanBGame.PBGameRules_DTB
// 0x0020 (0x029C - 0x027C)
class APBGameRules_DTB : public APBGameRules
{
public:
	float                                              fGreatDefenceTimeLapse;                           		// 0x027C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< class APBDTB_SiegeZone* >                  CaptureObjectives;                                		// 0x0280 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      attackingTeamNumber;                              		// 0x028C (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      iRemainHalfTime;                                  		// 0x028D (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      RoundState;                                       		// 0x028E (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bHalfTimeDone : 1;                                		// 0x0290 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	float                                              fSecondSafetyTime;                                		// 0x0294 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fHalfTimeTimer;                                   		// 0x0298 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45630 ];

		return pClassPointer;
	};

	bool IsLastRound ( );
	struct FString GetSafetyBuyComments ( int WhichSecond );
	void ShowEndMatchComments ( int PlayerTeamIndex );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsPlayerInActiveZone ( class APawn* P );
	bool IsPlayerInZone ( class APawn* P );
	class APBDTB_SiegeZone* GetPlayerZone ( class APawn* P );
	float RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player );
	class APlayerStart* ChoosePlayerStart ( class AController* Player, unsigned char InTeam );
	void OnEnding ( );
	void OnDisabled ( );
	void OnRoundStart ( );
	void OnMatchEnd ( );
	void Reset ( );
	void OnMatchWinnerDeclared ( int iDeclaredMatchWinner );
	class APBDTB_SiegeZone* GetDominionObjective ( int iIndex );
	bool IsHalfTimeFinished ( );
	int GetRoundDisplayTime ( );
	void NotifyRoundRemainingTimeChanged ( int iRemainingTime );
	bool IsObjectiveEnabled ( class UClass* pObjectiveClass );
	void StartCapturePhase ( );
	void DoHalfTime ( );
	void ResetCaptureObjectives ( );
	void GreatDefenseTimer ( );
	void ObjectiveCaptured ( class APBDTB_SiegeZone* zone );
	void InitGameOptions ( );
};

UClass* APBGameRules_DTB::pClassPointer = NULL;

// Class PlanBGame.PBTurret
// 0x0000 (0x03BC - 0x03BC)
class APBTurret : public APBPlaceableDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45766 ];

		return pClassPointer;
	};

};

UClass* APBTurret::pClassPointer = NULL;

// Class PlanBGame.PBSplitTeamMessage
// 0x0018 (0x0078 - 0x0060)
class UPBSplitTeamMessage : public UPBLocalMessage
{
public:
	TArray< struct FTextVoiceMsg >                     PoliceMessage;                                    		// 0x0060 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FTextVoiceMsg >                     CriminalMessage;                                  		// 0x006C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45779 ];

		return pClassPointer;
	};

	struct FString GetFullSoundName ( class APlayerController* Player, unsigned char MessageIndex );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UPBSplitTeamMessage::pClassPointer = NULL;

// Class PlanBGame.PBEnteredNukeZone
// 0x0000 (0x0078 - 0x0078)
class UPBEnteredNukeZone : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45778 ];

		return pClassPointer;
	};

};

UClass* UPBEnteredNukeZone::pClassPointer = NULL;

// Class PlanBGame.PBMsgEnteredOfficeZone
// 0x0000 (0x0078 - 0x0078)
class UPBMsgEnteredOfficeZone : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45780 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UPBMsgEnteredOfficeZone::pClassPointer = NULL;

// Class PlanBGame.PBMsgEnteredReinforcementZone
// 0x0000 (0x0060 - 0x0060)
class UPBMsgEnteredReinforcementZone : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45781 ];

		return pClassPointer;
	};

};

UClass* UPBMsgEnteredReinforcementZone::pClassPointer = NULL;

// Class PlanBGame.PBEquipmentPointSettings
// 0x0018 (0x0054 - 0x003C)
class UPBEquipmentPointSettings : public UObject
{
public:
	float                                              StartEP;                                          		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WinEP;                                            		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LooseEP;                                          		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultWeaponPresetEP;                            		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponPresetEP;                                   		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPBEquipmentPointSettings*                   Archetype;                                        		// 0x0050 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45901 ];

		return pClassPointer;
	};

};

UClass* UPBEquipmentPointSettings::pClassPointer = NULL;

// Class PlanBGame.PBSwearFilter
// 0x0030 (0x006C - 0x003C)
class UPBSwearFilter : public UObject
{
public:
	unsigned long                                      bFilterEnabled : 1;                               		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      inGameChatMode;                                   		// 0x0040 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           swearWordsList;                                   		// 0x0044 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           randomCharacters;                                 		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           serviceWords;                                     		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UPBSwearFilter*                              Archetype;                                        		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46173 ];

		return pClassPointer;
	};

	bool IsValidName ( struct FString InName );
	struct FString GetMaskedString ( struct FString inText, unsigned char Mode );
	bool IsEnabled ( );
	void EnableSwearFilter ( unsigned long bEnable );
	struct FString Filter ( unsigned long inPlace, unsigned char maskMode, struct FString* inText );
};

UClass* UPBSwearFilter::pClassPointer = NULL;

// Class PlanBGame.PBOnlineStatsWrite
// 0x0030 (0x00B8 - 0x0088)
class UPBOnlineStatsWrite : public UOnlineStatsWrite
{
public:
	class UPBStatisticsKeys*                           StatisticsKeys;                                   		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FSettingsProperty                           StringProperty;                                   		// 0x008C (0x0014) [0x0000000000002000]              ( CPF_Transient )
	struct FSettingsProperty                           IntegerProperty;                                  		// 0x00A0 (0x0014) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bGlobalGameStatsSaved : 1;                      		// 0x00B4 (0x0004) [0x0000000000006000] [0x00000001] ( CPF_Transient | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46210 ];

		return pClassPointer;
	};

	void AddKey ( struct FStatisticsKey Key );
	void InitPropertiesMapping ( );
	void AddStats ( class UPBPlayerStatistics** PlayerStatistics, struct FPBMatchStatsData* outData );
	void AddGlobalStats ( class APBGameInfo* Game, struct FPBMatchStatsData* outData );
	struct FString _AddMapIndexToFieldName ( struct FString sFieldName, int nMapIndex );
	void TestAddMapIndex ( struct FString sFieldName, int nMapIndex );
	bool CopyGlobalGameStats ( class APBPlayerReplicationInfo* PRI, int nMapIndex );
	bool CopyAllStats ( class APBPlayerReplicationInfo* PRI );
	void SetStringKey ( struct FStatisticsKey Key, struct FString sValue, unsigned long bForceSet );
	void SetIntKey ( struct FStatisticsKey Key, int nValue, unsigned long bForceSet );
	void SetStringStatByName ( struct FName KeyName, struct FString sValue, struct FTKeySet KeySet, int ObjectID, unsigned long bForceSet );
	void SetIntStatByName ( struct FName KeyName, int nValue, struct FTKeySet KeySet, int ObjectID, unsigned long bForceSet );
	bool GetKeyByName ( struct FName KeyName, struct FTKeySet KeySet, int ObjectID, struct FStatisticsKey* Key );
	void ResetGlobalGameStats ( );
};

UClass* UPBOnlineStatsWrite::pClassPointer = NULL;

// Class PlanBGame.PBGameMessage
// 0x0198 (0x02FC - 0x0164)
class UPBGameMessage : public UGameMessage
{
public:
	struct FString                                     WaitingForAllReadyMessage;                        		// 0x0164 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WaitingForAdminsToReady;                          		// 0x0170 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WaitingForGameHost;                               		// 0x017C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PersonalEnemy1;                                   		// 0x0188 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PersonalEnemy2Part1;                              		// 0x0194 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PersonalEnemy2Part2;                              		// 0x01A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PersonalEnemy3;                                   		// 0x01AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BecamePersonalEnemy;                              		// 0x01B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MoneyLooted;                                      		// 0x01C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XP_PlacedRD;                                      		// 0x01D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XP_DefusedFinalBomb;                              		// 0x01DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XP_DefusedBomb;                                   		// 0x01E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XP_PlacedBomb;                                    		// 0x01F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XP_DisabledRD;                                    		// 0x0200 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XP_RoundWining;                                   		// 0x020C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XP_CampaignWining;                                		// 0x0218 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerWasKicked;                                  		// 0x0224 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KickedPlayer;                                     		// 0x0230 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     YouWereKicked;                                    		// 0x023C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerWasBanned;                                  		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BannedPlayer;                                     		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     YouWereBanned;                                    		// 0x0260 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerWasKickedHeader;                            		// 0x026C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ServerShuttingDown;                               		// 0x0278 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BestLookingPlayer;                                		// 0x0284 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XP_RankUp;                                        		// 0x0290 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XP_RankUpHeader;                                  		// 0x029C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerSwitchTeam;                                 		// 0x02A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerPickedUpC4;                                 		// 0x02B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerDroppedC4;                                  		// 0x02C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerPlacedC4;                                   		// 0x02CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerDefusedC4;                                  		// 0x02D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnterGameMessage;                                 		// 0x02E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewRoomMaster;                                    		// 0x02F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46344 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	bool TriggersHUDMessage ( int Switch );
	bool TriggersChatMessage ( int Switch );
	bool TriggersNotification ( int Switch );
	unsigned char GetStringIcon ( int Switch );
	struct FString GetStringHeader ( int Switch );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString colourStringFromHEX ( int Col );
};

UClass* UPBGameMessage::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_ShopClass
// 0x0004 (0x0100 - 0x00FC)
class UPBGFxObject_ShopClass : public UPBGFxObject_MusicContainer
{
public:
	float                                              NameSearchDelay;                                  		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46353 ];

		return pClassPointer;
	};

	void MoveCamera ( class UPBCustomChar_MenuData** CharData );
	float Call_GetCharacterXPosition ( );
};

UClass* UPBGFxObject_ShopClass::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_QuickPlay
// 0x00D8 (0x01D8 - 0x0100)
class UPBGFxObject_QuickPlay : public UPBGFxObject_ShopClass
{
public:
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x0100 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0104 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_errorcode;                                      		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FGuid                                       m_gameServerId;                                   		// 0x0110 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     m_reason;                                         		// 0x0120 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_url;                                            		// 0x012C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPBCharacterRotator*                         mRotator;                                         		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCameraMover*                              mMover;                                           		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxPing;                                          		// 0x0144 (0x0004) [0x0000000000000000]              
	int                                                BaseMaxPopulation;                                		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              MinPopulation;                                    		// 0x014C (0x0004) [0x0000000000000000]              
	class UOnlineGameSearch*                           GameSearch;                                       		// 0x0150 (0x0004) [0x0000000000000000]              
	int                                                GameSearchStep;                                   		// 0x0154 (0x0004) [0x0000000000000000]              
	unsigned long                                      bServerFound : 1;                                 		// 0x0158 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSearchInProgress : 1;                            		// 0x0158 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                ServerIndex;                                      		// 0x015C (0x0004) [0x0000000000000000]              
	struct FString                                     SearchTypeInProgress;                             		// 0x0160 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                regionId;                                         		// 0x016C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                AutoRegionId;                                     		// 0x0170 (0x0004) [0x0000000000000000]              
	int                                                QuickSearchTimeout;                               		// 0x0174 (0x0004) [0x0000000000000000]              
	int                                                SearchStartTime;                                  		// 0x0178 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              IdleSearchSeconds;                                		// 0x017C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NextSearchSeconds;                                		// 0x0180 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_onOpenAnimationComplete__Delegate;       		// 0x0184 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Refresh__Delegate;                              		// 0x0190 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __QuitQuickPlay__Delegate;                        		// 0x019C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SetNewRegion__Delegate;                         		// 0x01A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ApplySearchFilter__Delegate;                    		// 0x01B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __cancelSearch__Delegate;                         		// 0x01C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __cancelJoinGame__Delegate;                       		// 0x01CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46352 ];

		return pClassPointer;
	};

	void _Release ( );
	void _SetupCharacter ( int nPreset );
	struct FString GetPlayerName ( );
	struct FString BuildJoinURL ( struct FString ResolvedConnectionURL );
	void ASsetJoinServer ( unsigned long Result );
	void NotifyConnectionError ( struct FString Message, struct FString Title );
	void OnJoinGameComplete ( struct FName SessionName, unsigned long bSuccessful );
	void JoinServerGame ( );
	void ProcessJoin ( int SelectedIndex );
	void SetCancelJoinDelegate ( struct FScriptDelegate F );
	void finishCancelJoin ( );
	void cancelJoinGame ( );
	void ConnectToGame ( );
	void eventTick ( float fDelta );
	void FinishCancelSearch ( unsigned long bCancelByTimeout );
	void OnCancelSearchComplete ( unsigned long bWasSuccessful );
	void SetCancelSearchDelegate ( struct FScriptDelegate F );
	void cancelSearch ( );
	void finishSearchUI ( );
	void updateItemList ( unsigned long bWasSuccessful );
	void OnFindOnlineGamesCompleteDelegate ( unsigned long bWasSuccessful );
	void OnUpdateServerItemComplete ( unsigned long bWasSuccessful );
	void RefreshServerList ( int InPlayerIndex, int MaxResults );
	void SetSearchFilterDelegate ( struct FScriptDelegate F );
	void UpdateFilter ( );
	void StartSearch ( );
	void ApplySearchFilter ( struct FString SearchType );
	void SetNewRegionDelegate ( struct FScriptDelegate F );
	void SetNewRegion ( int SelectedRegionId );
	void SetQuitQuickPlayDelegate ( struct FScriptDelegate F );
	void QuitQuickPlay ( );
	void SetRefreshDelegate ( struct FScriptDelegate F );
	void InitialRefresh ( );
	void Refresh ( );
	void ASSetRegionList ( TArray< struct FPBRegionsContainer > RegionList, struct FString DefaultRegion, int SelectedRegion );
	void SetRegionList ( );
	void ForceQuit ( );
	void OnConnectionStatusChange ( unsigned char ConnectionStatus );
	bool _Initialize ( );
	void _onOpenAnimationComplete ( );
	void Set_onOpenAnimationComplete_Delegate ( struct FScriptDelegate F );
	void Unreal_onOpenAnimationComplete ( );
};

UClass* UPBGFxObject_QuickPlay::pClassPointer = NULL;

// Class PlanBGame.PBAdmin
// 0x000C (0x08C0 - 0x08B4)
class APBAdmin : public APBPlayerController
{
public:
	struct FString                                     ccTimerCmd;                                       		// 0x08B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46890 ];

		return pClassPointer;
	};

	void ServerGiveSkill ( struct FGuid skillId, int iSkillLevel );
	void GiveSkill ( struct FString skillName, int skillLevel );
	void ServerGiveTaunt ( int iTauntIndex, int iSlot );
	void GiveTaunt ( struct FString strTauntIndex, int iSlot );
	void SetSkillLevel ( int skillIndex, int NewLevel );
	void SetHeat ( int NewHeat, struct FString PlayerName );
	void RestartLevel ( );
	void ToggleMap ( );
	void ServerToggleDebugBoneInfo ( );
	void ToggleDebugBoneInfo ( );
	void ShowTargetActorHUD ( );
	void PrintPresetInfo ( );
	void ResetWeaponTarget ( );
	void ServerPrintObjectiveArray ( );
	void PrintObjectiveArray ( );
	void CheckOcclusion ( class AAmbientSound* pTarget );
	void ShowOcclusion ( unsigned long bShow, class AAmbientSound* pTarget );
	void ToggleDebugFootstepsOcclusion ( );
	void TestSkipToServerBrowser ( );
	void DumpAwardLogServer ( );
	void DumpAwardLog ( );
	void DebugShowCredits ( );
	void TogglePlayerNames ( );
	void ToggleRenderHud ( );
	void TriggerSafetyBuy ( unsigned long bValue );
	void ServerToggleServerDebugBoneInfo ( class APBCharacter* pWhichChar );
	void ToggleServerDebugBoneInfo ( struct FString PlayerName );
	void DebugTriggerFiller ( int CategoryNum );
	void DebugKillEventByNum ( int iEventNum );
	void ServerDebugKillEvent ( int iEventNum );
	void DebugKillEvent ( int iEventNum );
	void CauseDmg ( float fMomentum );
	void ToggleAllowSoundInBg ( );
	void ToggleMuteSounds ( );
	void ToggleSound ( struct FString toggleOption );
	void ServerRobotGoTeam ( int iTeamIndex );
	void RobotCapture ( int iTeamIndex );
	void RobotGoTeam ( int iTeamIndex );
	void ServerCaptureObjective ( int iTeamIndex );
	void CaptureObjective ( int iTeamIndex );
	void DebugPlayerMarkers ( );
	void PrintHUDStats ( );
	void SetScaleformHUDVisible ( unsigned long isVisible );
	void DebugShowLobby ( struct FString initialScreenState, unsigned long bSkipMapVoting );
	void ShowHUD ( );
	void HideHUD ( );
	void SwitchTutorialMode ( );
	void AddBots ( int Num );
	void FreezeBots ( );
	void KillBots ( );
	void PrintShippingStatus ( );
	void VoteTestResult ( );
	void VoteTestNo ( );
	void VoteTestYes ( );
	void VoteTestCounts ( );
	void VoteTestStart ( );
	void ServerSetFullEnergy ( unsigned long bSet );
	void SetFullEnergy ( unsigned long bSet );
	void DamageSelf ( int Damage );
	void PresetMod ( struct FString ModType, struct FString ParamName );
	void ChangePresetByParams ( class APBKWeaponParams* pWeaponParam );
	void ServerChangePresetByParams ( class APBKWeaponParams* pWeaponParam );
	void PresetWeapon ( struct FString weaponName );
	void ServerDebugProgression ( struct FName DebugValue );
	void DebugProgression ( struct FName DebugValue );
	void ServerKillBots ( );
	void KillAllBots ( );
	class APlayerController* _GetPlayerByName ( struct FString PlayerName );
	void _SwitchPlayerTeam ( class APlayerController* PC );
	void ServerSwitchTeams ( );
	void SwitchTeams ( );
	void ServerSwitchPlayer ( struct FString PlayerName );
	void SwitchPlayer ( struct FString PlayerName );
	void ServerSwitch ( struct FString URL );
	void Switch ( struct FString URL );
	void ServerRestartMap ( );
	void RestartMap ( );
	void ServerKick ( struct FString S );
	void Kick ( struct FString S );
	void ServerKickBan ( struct FString S );
	void KickBan ( struct FString S );
	class APBKWeaponParams* GetWeaponParamsFromSerialNum ( struct FGuid serialNum );
	void ServerListWeaponConditions ( );
	void ListWeaponConditions ( );
	void ServerSetWeaponCondition ( int cond );
	void SetWeaponCondition ( int cond );
	void ServerRestartGame ( );
	void RestartGame ( );
	void ServerSetMaxPlayers ( int Number );
	void ServerPauseRoundTimer ( unsigned long bPause );
	void PauseRoundTimer ( unsigned long bPause );
	void SetMaxPlayers ( int Number );
	void ServerAdmin ( struct FString CommandLine );
	void Admin ( struct FString CommandLine );
	void ToggleWeaponSetting ( struct FName WeaponSetting );
	void DebugWeapon ( struct FName DebugValue );
	void ServerGiveMeWeapon ( struct FString WeaponParam );
	void ServerExtendRoundTime ( int Seconds );
	void ExtendRoundTime ( int nSeconds );
	void ServerThereCanBeOnlyOne ( float fTime );
	void ThereCanBeOnlyOne ( float fTime );
	void InstallDebugCamera ( );
	void UninstallMinimapCamera ( );
	void TakeMinimapScreenshot ( );
	void MakeMinimapScreenshot ( );
	void OutputMinimapScreenshot ( );
	void UninstallOverviewCamera ( );
	void InstallOverviewCamera ( );
	void ServerStartHeatmapDataCollection ( );
	void StartHeatmapDataCollection ( );
	void ServerEndHeatmapDataCollection ( );
	void EndHeatmapDataCollection ( );
	void ServerSetMapDescription ( struct FString Desc );
	void SetMapDescription ( struct FString Desc );
	class APBGameStatCollector_Rules* GetStatCollector ( );
	void ServerSetSessionDescription ( struct FString Desc );
	void SetSessionDescription ( struct FString Desc );
	void RetProfile ( );
	void TriggerCharacterCreation ( struct FString GenderString );
	void ServerWinMatch ( int nTeam );
	void LoseMatch ( );
	void WinMatch ( );
	void ServerWinRound ( int iTeam );
	void LoseRound ( );
	void WinRound ( );
	void GiveMeWeapon ( struct FString WeaponParam );
	void ServerForceStartLobby ( );
	void ForceLobbyStart ( );
	void LobbyForceStart ( );
	void ForceStartLobby ( );
	void eventPostBeginPlay ( );
	void ServerPrint ( struct FString Text );
	void Print ( struct FString Text );
	void UpdateWeaponFromParams ( );
	void ServerGodMode ( );
	void GodMode ( );
	void ServerSubmitProgression ( unsigned long bSkipEndOfMatchReward );
	void SubmitProgression ( unsigned long bSkipEndOfMatchReward );
	void ServerTestProgression ( );
	void TestProgression ( );
	void ServerEndSafetyBuy ( );
	void EndSafetyBuy ( );
	void ServerSetStreamTimeLimit ( float fTime );
	void SetServerStreamTimeLimit ( float fTime );
	void SetGameSetupOption ( int optionIndex, int ValueIndex );
	void PrintGameSetupOptions ( );
	void ServerDoHalfTime ( );
	void DoHalfTime ( );
	void SetStreamTimeLimit ( float fTime );
	void SetAsyncPause ( float fAsyncPause );
	void SetIdleKickTimer ( int iTimer );
	void ListDTBObjectives ( );
	void ServerHonorPlayer ( struct FString PlayerName );
	void HonorPlayer ( struct FString PlayerName );
	void RunCCTimerCmd ( );
};

UClass* APBAdmin::pClassPointer = NULL;

// Class PlanBGame.PBAugmentedReality_CharManager
// 0x0010 (0x01EC - 0x01DC)
class APBAugmentedReality_CharManager : public AKeypoint
{
public:
	TArray< class APBAugmentedReality_Character* >     rAugChars;                                        		// 0x01DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class APBPlayerReplicationInfo*                    pHonoringPRI;                                     		// 0x01E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46897 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	void HonorPlayer ( class APBPlayerReplicationInfo* pPRI );
	void DoHonors ( );
	void Reset ( );
	void eventPostBeginPlay ( );
};

UClass* APBAugmentedReality_CharManager::pClassPointer = NULL;

// Class PlanBGame.PBDTB_SiegeZone
// 0x0070 (0x036C - 0x02FC)
class APBDTB_SiegeZone : public APBGameObjectiveByVolume
{
public:
	float                                              ControlObjective;                                 		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      PointsPerPlayers;                                 		// 0x0300 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              DisabledTime;                                     		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AEmitter* >                          EmitterList;                                      		// 0x0310 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     IndicatorActiveColor;                             		// 0x031C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     IndicatorInactiveColor;                           		// 0x0328 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DefendingTeam;                                    		// 0x0334 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      RepReenableTimer;                                 		// 0x0335 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      TeamA;                                            		// 0x0336 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      TeamB;                                            		// 0x0337 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      RepControlPercent;                                		// 0x0338 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< class APBPawn* >                           TeamAPlayers;                                     		// 0x033C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class APBPawn* >                           TeamBPlayers;                                     		// 0x0348 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              fTimeSecondsObjectiveAchieved;                    		// 0x0354 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ControlAmt;                                       		// 0x0358 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsLocalPlayerInside : 1;                         		// 0x035C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bEnabled : 1;                                     		// 0x035C (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	TArray< class APBPawn* >                           PlayersToDelete;                                  		// 0x0360 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46905 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void Reset ( );
	void CleanUpPawnList ( );
	void UpdatePlayerList ( );
	void UpdateZoneIndicators ( );
	void ShowEmitters ( unsigned long bVisible );
	void DisableObjective ( );
	void EnableObjective ( );
	int GetReenableTimeLeft ( );
	void NotifyTouchingPawnDied ( class AActor* Other );
	void VolumeUnTouch ( class AActor* Other, class APBObjectiveVolume* TriggerVolume );
	void VolumeTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void AddPlayerToList ( class AActor* Other );
	void SetEnabled ( unsigned long bNewEnabled );
	void SetObjectiveAchieved ( );
	int GetNumPoints ( int NumPlayers );
	void CalculateControlPercent ( float DeltaTime );
	void ShowDebug ( );
	void PostBeginPlay ( );
};

UClass* APBDTB_SiegeZone::pClassPointer = NULL;

// Class PlanBGame.PBGameRules_SND
// 0x007C (0x02F8 - 0x027C)
class APBGameRules_SND : public APBGameRules
{
public:
	float                                              fTimeUntilNextRoundStarts;                        		// 0x027C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fNextRoundCountdownStartedTime;                   		// 0x0280 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTimeRemainNextRoundStarts;                       		// 0x0284 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      uiNextRoundIn;                                    		// 0x0288 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      attackingTeamNumber;                              		// 0x0289 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      iRemainHalfTime;                                  		// 0x028A (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      RoundState;                                       		// 0x028B (0x0001) [0x0000000000000020]              ( CPF_Net )
	int                                                iMatchCount;                                      		// 0x028C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                iMatchDuration;                                   		// 0x0290 (0x0004) [0x0000000000000000]              
	TArray< class APBAAMTerminal* >                    BlowUpObjectives;                                 		// 0x0294 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class APBC4*                                       c4;                                               		// 0x02A0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bHalfTimeDone : 1;                                		// 0x02A4 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bEarlyWin : 1;                                    		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHasArmingTime : 1;                               		// 0x02A4 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	float                                              fSecondSafetyTime;                                		// 0x02A8 (0x0004) [0x0000000000000000]              
	float                                              fHalfTimeTimer;                                   		// 0x02AC (0x0004) [0x0000000000000000]              
	float                                              fPickupInteractTime;                              		// 0x02B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fArmingTime;                                      		// 0x02B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fIMG_Terminal_Duration;                           		// 0x02B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fIMG_Terminal_MinTimePerc;                        		// 0x02BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fIMG_Terminal_TargerZoneSize;                     		// 0x02C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fIMG_Terminal_TargetZoneNum;                      		// 0x02C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fIMG_Terminal_FailAddDuration;                    		// 0x02C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fIMG_C4_Duration;                                 		// 0x02CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fIMG_C4_MinTimePerc;                              		// 0x02D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fIMG_C4_TargerZoneSize;                           		// 0x02D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fIMG_C4_TargetZoneNum;                            		// 0x02D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fIMG_C4_FailAddDuration;                          		// 0x02DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FRoundWinInfo                               roundVictoryReason;                               		// 0x02E0 (0x0018) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46922 ];

		return pClassPointer;
	};

	bool IsLastRound ( );
	struct FString GetSafetyBuyComments ( int WhichSecond );
	int GetLoseHeat ( );
	int GetWinHeat ( );
	class APBAAMTerminal* GetSNDObjective ( int iIndex );
	void NotifyHalfTimerChanged ( );
	void UpdateTimeRemainUntilNextRound ( float fNewNextRoundTimeRemain );
	void PauseObjectives ( );
	bool IsC4Active ( );
	void eventReplicatedEvent ( struct FName VarName );
	unsigned char GetNextRoundTimeRemain ( );
	void NotifyNextRoundTimeChanged ( );
	void NotifyWinReasonChanged ( );
	void ShowSNDEndRoundMessage ( unsigned long bShow );
	void SetWeaponInfoCodes ( class APBCharacter* pChar, class UPBWeaponPreset* pPreset, int* iNextIndex );
	float RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player );
	class APlayerStart* ChoosePlayerStart ( class AController* Player, unsigned char InTeam );
	void DoHalfTime ( );
	void OnDeviceDefused ( class APBInteractiveObjective* pObjective, class AController* DefusedBy );
	void OnDevicePlaced ( class APBInteractiveObjective* pObjective );
	void OnDeviceFinished ( class APBInteractiveObjective* pObjective );
	class AController* ChangeKillerIfNeeded ( class AController* Killer, class AController* KilledPlayer, class UClass* DamageType );
	void NotifyKillEvent ( class AController* Killer, class AController* KilledPlayer );
	void CountAliveTeamPlayers ( int* iAttackersLeft, int* iDefendersLeft );
	bool IsVictoryDecided ( );
	int GetRoundWinningTeam ( );
	void CheckVictory ( unsigned long bForce );
	void StartRound ( );
	void SetRoundWinner ( int iWinner, unsigned char whatReason, class APlayerReplicationInfo* whoWinInstigator, class APlayerReplicationInfo* whoWinVictim, unsigned long bFromAdminCommand );
	void ClearOutWinReason ( );
	void Reset ( );
	void ResetObjectives ( );
	bool IsObjectiveEnabled ( class UClass* pObjectiveClass );
	void OnMatchEnd ( );
	void OnMatchStart ( );
	void InitGameOptions ( );
	bool IsPassiveVotingActive ( );
};

UClass* APBGameRules_SND::pClassPointer = NULL;

// Class PlanBGame.PBMinimapCamera
// 0x0088 (0x0294 - 0x020C)
class APBMinimapCamera : public APBCameraAction
{
public:
	unsigned long                                      bFirstUpdate : 1;                                 		// 0x020C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUpdateRefPoints : 1;                             		// 0x020C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      LockCameraRot : 1;                                		// 0x020C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      LockToCamera : 1;                                 		// 0x020C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FVector                                     vCamLoc;                                          		// 0x0210 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    vCamRot;                                          		// 0x021C (0x000C) [0x0000000000000000]              
	float                                              fFOV;                                             		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Initial_fov;                                      		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWeapon*                                     Initial_Weapon;                                   		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPBMinimapCamera_ReferencePoint             rReferencePoints[ 0x4 ];                          		// 0x0234 (0x0060) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47002 ];

		return pClassPointer;
	};

	bool UpdateReferencePoints ( );
	bool UpdateCamera ( float fDeltaTime, class AActor* Target, struct FVector* OutCamLoc, struct FRotator* OutCamRot, float* OutFOV );
	void DrawHUD ( class UCanvas* Canvas );
	void DeactivateAction ( );
	void ActivateAction ( class APBCameraActionManager* pManager );
	void ShowHUD ( unsigned long bShow );
};

UClass* APBMinimapCamera::pClassPointer = NULL;

// Class PlanBGame.PBTopdownCameraAction
// 0x0030 (0x023C - 0x020C)
class APBTopdownCameraAction : public APBCameraAction
{
public:
	float                                              fBlendFactor;                                     		// 0x020C (0x0004) [0x0000000000000000]              
	float                                              OldZ;                                             		// 0x0210 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFirstUpdate : 1;                                 		// 0x0214 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FVector                                     vPrevCamLoc;                                      		// 0x0218 (0x000C) [0x0000000000000000]              
	struct FRotator                                    vPrevCamRot;                                      		// 0x0224 (0x000C) [0x0000000000000000]              
	struct FRotator                                    rCamRot;                                          		// 0x0230 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47024 ];

		return pClassPointer;
	};

	bool UpdateCamera ( float fDeltaTime, class AActor* Target, struct FVector* OutCamLoc, struct FRotator* OutCamRot, float* OutFOV );
	void DrawHUD ( class UCanvas* Canvas );
	void DeactivateAction ( );
	void ActivateAction ( class APBCameraActionManager* pManager );
};

UClass* APBTopdownCameraAction::pClassPointer = NULL;

// Class PlanBGame.SoundOcclusionMarker
// 0x0000 (0x01DC - 0x01DC)
class ASoundOcclusionMarker : public AKeypoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47253 ];

		return pClassPointer;
	};

};

UClass* ASoundOcclusionMarker::pClassPointer = NULL;

// Class PlanBGame.PBQueuedAnnouncement
// 0x0010 (0x01E8 - 0x01D8)
class APBQueuedAnnouncement : public AInfo
{
public:
	class APBQueuedAnnouncement*                       nextAnnouncement;                                 		// 0x01D8 (0x0004) [0x0000000000000000]              
	class UClass*                                      AnnouncementClass;                                		// 0x01DC (0x0004) [0x0000000000000000]              
	unsigned char                                      MessageIndex;                                     		// 0x01E0 (0x0001) [0x0000000000000000]              
	class APBPlayerReplicationInfo*                    SenderPRI;                                        		// 0x01E4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47378 ];

		return pClassPointer;
	};

};

UClass* APBQueuedAnnouncement::pClassPointer = NULL;

// Class PlanBGame.PBAirSurveillanceCalled
// 0x0000 (0x0060 - 0x0060)
class UPBAirSurveillanceCalled : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47391 ];

		return pClassPointer;
	};

};

UClass* UPBAirSurveillanceCalled::pClassPointer = NULL;

// Class PlanBGame.PBAllBombsDefusedMessage
// 0x0000 (0x0060 - 0x0060)
class UPBAllBombsDefusedMessage : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47393 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UPBAllBombsDefusedMessage::pClassPointer = NULL;

// Class PlanBGame.PBAllBombsDetonatedMessage
// 0x0000 (0x0060 - 0x0060)
class UPBAllBombsDetonatedMessage : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47403 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UPBAllBombsDetonatedMessage::pClassPointer = NULL;

// Class PlanBGame.PBAmmunitionCrate
// 0x002F (0x0380 - 0x0351)
class APBAmmunitionCrate : public APBInteractiveObjective
{
public:
	class USoundCue*                                   m_ReloadSound;                                    		// 0x0354 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_FailedSound;                                    		// 0x0358 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct APBAmmunitionCrate_FTInteractStruct > m_Controllers;                                    		// 0x035C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AController* >                       m_SuccessfulControllers;                          		// 0x0368 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     indicatorOffset;                                  		// 0x0374 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47413 ];

		return pClassPointer;
	};

	void MakeAction ( class AController* User );
	void FailAction ( class AController* User );
	void Tick ( float DeltaTime );
	void UpdatePlayers ( int nCurrTime, TArray< class AController* >* SuccessfulControllers );
	void EndInteract ( class AController* User, unsigned long bInteractionSuccessful );
	bool OnInteract ( class AController* User );
	bool AddPlayer ( class AController* User, int CurrTime );
	void RemovePlayer ( class AController* User );
	int FindPlayer ( class AController* User );
	bool IsPlayerExist ( class AController* User );
	bool CanEndInteract ( class AController* User );
	bool CanReloadWeapon ( class AController* User );
	bool CanInteract ( class AController* User );
	void PostBeginPlay ( );
};

UClass* APBAmmunitionCrate::pClassPointer = NULL;

// Class PlanBGame.PBAnim_Slot
// 0x0000 (0x0114 - 0x0114)
class UPBAnim_Slot : public UAnimNodeSlot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47616 ];

		return pClassPointer;
	};

};

UClass* UPBAnim_Slot::pClassPointer = NULL;

// Class PlanBGame.PBAnimNodeSequenceByBoneRotation
// 0x0018 (0x0158 - 0x0140)
class UPBAnimNodeSequenceByBoneRotation : public UAnimNodeSequence
{
public:
	struct FName                                       BoneName;                                         		// 0x0140 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneAxis;                                         		// 0x0148 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FAnimByRotation >                   AnimList;                                         		// 0x014C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47809 ];

		return pClassPointer;
	};

	void eventOnBecomeRelevant ( );
};

UClass* UPBAnimNodeSequenceByBoneRotation::pClassPointer = NULL;

// Class PlanBGame.PBAntiAirTurret
// 0x0000 (0x02EC - 0x02EC)
class APBAntiAirTurret : public APBGameObjective
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47877 ];

		return pClassPointer;
	};

};

UClass* APBAntiAirTurret::pClassPointer = NULL;

// Class PlanBGame.PBAttackingTeam
// 0x0000 (0x0060 - 0x0060)
class UPBAttackingTeam : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47880 ];

		return pClassPointer;
	};

};

UClass* UPBAttackingTeam::pClassPointer = NULL;

// Class PlanBGame.PBAugmentedReality_Character
// 0x0018 (0x01F4 - 0x01DC)
class APBAugmentedReality_Character : public AKeypoint
{
public:
	class USkeletalMeshComponent*                      pCharSkMeshComp;                                  		// 0x01DC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x01E0 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bHonoringInProgress : 1;                          		// 0x01E4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class APBPlayerReplicationInfo*                    pHonoringPRI;                                     		// 0x01E8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                iRepAnimIndex;                                    		// 0x01EC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fFadePerc;                                        		// 0x01F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47882 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void CheckHonor ( );
	void eventTick ( float DeltaTime );
	void UpdateVisibilityPerc ( float fNewPerc );
	void eventDestroyed ( );
	void FinishHonoring ( );
	void CreateMaterialInstances ( );
	void PlayParticleSystem ( unsigned long bPlayStartEffect );
	void StopHonoring ( );
	void StartHonoring ( );
	void HonorPlayer ( class APBPlayerReplicationInfo* pPRI, int iAnimIndex );
	void eventPostBeginPlay ( );
};

UClass* APBAugmentedReality_Character::pClassPointer = NULL;

// Class PlanBGame.PBAugmentedRealityArch
// 0x0048 (0x0084 - 0x003C)
class UPBAugmentedRealityArch : public UObject
{
public:
	float                                              fHonorPlayersTimeInterval;                        		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    MaleAnimSet;                                      		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    FemaleAnimSet;                                    		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTAnimInfo >                        rMaleAnimInfo;                                    		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FTAnimInfo >                        rFemaleAnimInfo;                                  		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              fGlobalAnimRateModifier;                          		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ARSwitchParamName;                                		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAppearTime;                                      		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDisappearTime;                                   		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDisappearBeforeAnimEndSeconds;                   		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             pPSTemplateFadeIn;                                		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             pPSTemplateFadeOut;                               		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPBAugmentedRealityArch*                     pAugRealityArch;                                  		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47894 ];

		return pClassPointer;
	};

	bool GetAnimInfo ( unsigned long bFemale, int iRandIndex, struct FName* AnimName, float* fTimeOverride );
	int PickRandomIndex ( unsigned long bFemale );
	class UPBAugmentedRealityArch* GetInstance ( );
};

UClass* UPBAugmentedRealityArch::pClassPointer = NULL;

// Class PlanBGame.PBAugmentedRealityAdvert
// 0x0000 (0x01DC - 0x01DC)
class APBAugmentedRealityAdvert : public AKeypoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47969 ];

		return pClassPointer;
	};

};

UClass* APBAugmentedRealityAdvert::pClassPointer = NULL;

// Class PlanBGame.PBAugmentedRealityVolume
// 0x0000 (0x0214 - 0x0214)
class APBAugmentedRealityVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47989 ];

		return pClassPointer;
	};

};

UClass* APBAugmentedRealityVolume::pClassPointer = NULL;

// Class PlanBGame.PBBaseHUD
// 0x0004 (0x0464 - 0x0460)
class APBBaseHUD : public AHUD
{
public:
	class APBPlayerController*                         PBPlayerOwner;                                    		// 0x0460 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48004 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
};

UClass* APBBaseHUD::pClassPointer = NULL;

// Class PlanBGame.PBGameStatisticsLog
// 0x000C (0x0048 - 0x003C)
class UPBGameStatisticsLog : public UObject
{
public:
	TArray< struct FStatFileLogStruct >                log_array;                                        		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48032 ];

		return pClassPointer;
	};

	void CreateLogFile ( struct FString file_name, class APBPlayerController* Player, class AFileLog** Log );
	void StatLog ( class APBPlayerController* Player, struct FString Param, unsigned long bDetailedStat );
	void _FindOrCreateLog ( class APBPlayerController* Player, struct FString FileName, class AFileLog** Log );
	void StatLogByName ( class APBPlayerController* Player, struct FString FileName, struct FString NewString );
};

UClass* UPBGameStatisticsLog::pClassPointer = NULL;

// Class PlanBGame.PBOperatorServerRequestHandler
// 0x00C8 (0x01A0 - 0x00D8)
class UPBOperatorServerRequestHandler : public UPBServerRequestHandlerParent
{
public:
	TArray< struct FPBRequestTypePriority >            rRequestTypePriority;                             		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                iRequestsRunning;                                 		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPBItemShopServerRequest >          ItemShopRequestQueue;                             		// 0x00E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPBItemShopServer*                           pItemShop;                                        		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnAllRequestsAreDone__Delegate;                 		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __delegateOnPingServerDone__Delegate;             		// 0x0104 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __delegateOnLoginServerDone__Delegate;            		// 0x0110 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __delegateOnGetProfileDetailsServerDone__Delegate;		// 0x011C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __delegateOnLogoutServerDone__Delegate;           		// 0x0128 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __delegateOnUpdateProfileDetailsServerDone__Delegate;		// 0x0134 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __delegateOnGetPresetsServerDone__Delegate;       		// 0x0140 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __delegateOnGetSubscriptionModeServerDone__Delegate;		// 0x014C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __delegateOnSendPlayerStatusServerDone__Delegate; 		// 0x0158 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __delegateOnIncrementCoolnessServerDone__Delegate;		// 0x0164 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __delegateOnGetProgressionDone__Delegate;         		// 0x0170 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __delegateOnGetBoostersServerDone__Delegate;      		// 0x017C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __delegateOnSubmitProgressionServerDone__Delegate;		// 0x0188 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __delegateOnDeleteEventByBackendDone__Delegate;   		// 0x0194 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48087 ];

		return pClassPointer;
	};

	void HandlerLog ( struct FString LogOutput );
	void delegateOnDeleteEventByBackendDone ( int requestId, int ErrorCode, int event_code );
	void delegateOnSubmitProgressionServerDone ( int requestId, int ErrorCode );
	void delegateOnGetBoostersServerDone ( int requestId, int errocode, int subscriptionIgc, int subscriptionXp, TArray< struct FPBOfferServer > offers );
	void delegateOnGetProgressionDone ( int requestId, int ErrorCode, float Heat2Fans, float Heat2IGC, float FormulaPower, int FormulaA, int FormulaB, int FormulaC, int MaxNumCreditBoost, int MaxNumXpBoost, int MaxPercentageCreditBoost, int MaxPercentageXpBoost );
	void delegateOnIncrementCoolnessServerDone ( int requestId, int ErrorCode );
	void delegateOnSendPlayerStatusServerDone ( int requestId, int ErrorCode, struct FGuid ProfileId );
	void delegateOnGetSubscriptionModeServerDone ( int requestId, int ErrorCode, struct FGuid ProfileId, struct FGuid subscriptionId, int subscriptionCreditsBoost, int subscriptionXpBoost, int slowWeaponDamage, int groupIgcBoost, int groupXpBoost );
	void delegateOnGetPresetsServerDone ( int requestId, int ErrorCode, struct FGuid ProfileId, TArray< struct FPBItemServer > items );
	void delegateOnUpdateProfileDetailsServerDone ( int requestId, int ErrorCode, struct FGuid ProfileId );
	void delegateOnLogoutServerDone ( int requestId, int ErrorCode );
	void delegateOnGetProfileDetailsServerDone ( int requestId, int ErrorCode, struct FGuid ProfileId, struct FString CharacterName, struct FString UserId, struct FString SessionId, struct FGuid characterGender, struct FGuid characterHead, struct FGuid characterSkin, int avatarPicture, int Rank, int xp, float xpPercentage, int credits, int coolness, int profileReputation, unsigned char accountLevel, int ProgressionSubmitCount );
	void delegateOnLoginServerDone ( int requestId, int ErrorCode, struct FString gameSpyToken, struct FString gameSpyChallenge );
	void delegateOnPingServerDone ( int requestId, int ErrorCode );
	void OSR_IncrementCoolnessServer ( struct FGuid ProfileId, int incrementValue, struct FScriptDelegate pIncrementCoolnessDelegate );
	void OSR_SendPlayerStatusServer ( struct FGuid ProfileId, int Status, struct FGuid orchestratorId, struct FScriptDelegate pSendPlayerStatusDelegate );
	void OSR_GetBoostersServer ( struct FScriptDelegate pGetBoostersServerDelegate );
	void OSR_UpdateProfileDetailsServer ( struct FGuid ProfileId, struct FString FieldName, int Value, struct FScriptDelegate pUpdateProfileDetailsDelegate );
	void OSR_SubmitProgressionServer ( TArray< struct FPBSubmitProgressionProfileData > Profiles, struct FScriptDelegate pSubmitProgressionDelegate );
	void OSR_GetProgression ( struct FScriptDelegate pGetProgressionDelegate );
	void OSR_GetSubscriptionModeServer ( struct FGuid ProfileId, struct FScriptDelegate pGetSubscriptionModeServerDelegate );
	void OSR_GetPresetsServer ( struct FGuid ProfileId, struct FScriptDelegate pGetPresetsDelegate );
	void OSR_GetProfileDetailsServer ( struct FGuid ProfileId, struct FScriptDelegate pProfileDetailsDelegate );
	void OSR_DeleteEventByBackend ( int event_code, struct FScriptDelegate pDeleteEventByBackendDelegate );
	void OSR_LogoutServer ( struct FScriptDelegate pLogoutDelegate );
	void OSR_LoginServer ( struct FString UserName, struct FString Password, struct FGuid gameRequestId, struct FScriptDelegate pLoginDelegate );
	void OSR_PingServer ( struct FScriptDelegate pPingDelegate );
	bool GetRequestFromID ( int requestId, struct FPBItemShopServerRequest* pRequest );
	int GetRequestTypePriority ( unsigned char ERequestType );
	void CallDelegateWithError ( struct FPBItemShopServerRequest* pRequest );
	bool ProcessRequest ( int iRequestIndex );
	void StartNextItemShopRequest ( );
	void OnRequestCompleted ( );
	int GetQueueIndexForInsertion ( unsigned char ERequestType );
	void AddRequestToQueue ( struct FPBItemShopServerRequest pNewRequest );
	void SetServerShopDelegates ( unsigned long bSet );
	void ClearAllRequests ( );
	void Initialize ( class UPBItemShopServer* pNewItemShop );
	void OnAllRequestsAreDone ( );
};

UClass* UPBOperatorServerRequestHandler::pClassPointer = NULL;

// Class PlanBGame.PBBoostersList
// 0x0010 (0x004C - 0x003C)
class UPBBoostersList : public UObject
{
public:
	TArray< struct FString >                           rOffersGuidStr;                                   		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UPBBoostersList*                             pBoostersListArchetype;                           		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48375 ];

		return pClassPointer;
	};

	int GetBoostersCount ( );
	struct FString GetBoosterGUID ( int I );
	int GetBoosterID ( struct FString guidStr );
	class UPBBoostersList* GetInstance ( );
};

UClass* UPBBoostersList::pClassPointer = NULL;

// Class PlanBGame.PBBenchmarkGame
// 0x0014 (0x047C - 0x0468)
class APBBenchmarkGame : public APBGameInfo
{
public:
	float                                              TickCount;                                        		// 0x0468 (0x0004) [0x0000000000000000]              
	int                                                nWaitForFrame;                                    		// 0x046C (0x0004) [0x0000000000000000]              
	TArray< class APBLevelCheckCamera* >               Cameras;                                          		// 0x0470 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48493 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
	class APlayerController* eventLogin ( struct FString Portal, struct FString Options, struct FString* ErrorMessage );
	void eventTick ( float DeltaTime );
};

UClass* APBBenchmarkGame::pClassPointer = NULL;

// Class PlanBGame.PBTDMSpawnPoint
// 0x0086 (0x0348 - 0x02C2)
class APBTDMSpawnPoint : public APBPlayerStart
{
public:
	class AFileLog*                                    log_file;                                         		// 0x02C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fSpawnScore;                                      		// 0x02C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AController*                                 AssociatedPlayer;                                 		// 0x02CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bTextExist : 1;                                   		// 0x02D0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              fLineOfSightVisibleDistance;                      		// 0x02D4 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fLineOfSightPunishmentValue;                      		// 0x02D8 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fLineOfSightBackPunishmentValue;                  		// 0x02DC (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fLineOfSightOffsetTop;                            		// 0x02E0 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fLineOfSightOffsetBottom;                         		// 0x02E4 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fLineOfSightOffsetLeft;                           		// 0x02E8 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fLineOfSightOffsetRight;                          		// 0x02EC (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fLineOfSightViewConeAngle;                        		// 0x02F0 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fLineOfSightViewConeStartRadius;                  		// 0x02F4 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fDistance_SpawnDistance;                          		// 0x02F8 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fDistance_SpawnPunishment;                        		// 0x02FC (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fDistance_SafeDistance;                           		// 0x0300 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fDistance_OpponentValue;                          		// 0x0304 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fDistance_TeammateValue;                          		// 0x0308 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fGrenade_SafeDistance;                            		// 0x030C (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fGrenade_GrenadePunishment;                       		// 0x0310 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fMortar_SafeDistance;                             		// 0x0314 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fMortar_MortarPunishment;                         		// 0x0318 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fDeath_DeathDistance;                             		// 0x031C (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fDeath_DeathPunishment;                           		// 0x0320 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fTurret_TurretDistance;                           		// 0x0324 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	float                                              fTurret_TurretPunishment;                         		// 0x0328 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	TArray< struct FTPenaltyStruct >                   mPenaltyArray;                                    		// 0x032C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              mLastCalculatedTime;                              		// 0x0338 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class APBTDMSpawnPoint* >                  mNearestPoints;                                   		// 0x033C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48568 ];

		return pClassPointer;
	};

	float CalculateTurretPenalty ( class AController* Player );
	float CalculateDeathPenalty ( class AController* Player );
	float CalculateMortarPenalty ( class AController* Player );
	float CalculateGrenadePenalty ( class AController* Player );
	float CalculateDistancePenalty ( class AController* Player );
	float CalculateLineOfSightPenalty ( class AController* Player );
	bool _CalculateLineOfSightPenaltyFromPawn ( class AActor* LocalActor, unsigned long bUseRotation, float* pawnDistance, float* pawnPenalty );
	bool _IsPointVisible ( struct FVector Start, struct FRotator ActorRotation, unsigned long bUseRotation, unsigned char* bBackSide );
	float RateSpawnPoint ( class AController* Player );
	void TDMLog ( struct FString log_string );
	void Timer ( );
	void AssociatePlayer ( class AController* Player );
	void PostBeginPlay ( );
	bool IsLocked ( );
};

UClass* APBTDMSpawnPoint::pClassPointer = NULL;

// Class PlanBGame.PBBroadcastHandler
// 0x0000 (0x01E0 - 0x01E0)
class APBBroadcastHandler : public ABroadcastHandler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48759 ];

		return pClassPointer;
	};

	void BroadcastTeam ( class AController* Sender, struct FString msg, struct FName Type );
	void Broadcast ( class AActor* Sender, struct FString msg, struct FName Type );
};

UClass* APBBroadcastHandler::pClassPointer = NULL;

// Class PlanBGame.PBLevelCheckCamera
// 0x0008 (0x02E4 - 0x02DC)
class APBLevelCheckCamera : public ACameraActor
{
public:
	struct FName                                       CameraName;                                       		// 0x02DC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48762 ];

		return pClassPointer;
	};

};

UClass* APBLevelCheckCamera::pClassPointer = NULL;

// Class PlanBGame.PBBenchmarkReplicationInfo
// 0x0000 (0x0374 - 0x0374)
class APBBenchmarkReplicationInfo : public APBGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48786 ];

		return pClassPointer;
	};

	bool IsCharacterProcessingAllowed ( );
	bool SkipAllProcessing ( unsigned long bIsWeaponProcessing );
};

UClass* APBBenchmarkReplicationInfo::pClassPointer = NULL;

// Class PlanBGame.PBKWeaponInfo_Grenade
// 0x0008 (0x0284 - 0x027C)
class APBKWeaponInfo_Grenade : public APBKWeaponInfo
{
public:
	unsigned long                                      bThrown : 1;                                      		// 0x027C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                GrenadeAmmo;                                      		// 0x0280 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48998 ];

		return pClassPointer;
	};

	void NotifyAnimEvent ( struct FName EventName );
	void Reload ( int Ammo );
	bool ShouldShowMesh ( );
};

UClass* APBKWeaponInfo_Grenade::pClassPointer = NULL;

// Class PlanBGame.PBKWeaponInfo_PPlane
// 0x0000 (0x027C - 0x027C)
class APBKWeaponInfo_PPlane : public APBKWeaponInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49304 ];

		return pClassPointer;
	};

	void ShowPlaneMesh ( unsigned long bShow );
	void HidePlaneMeshOnThrowTimer ( );
	void HidePlaneMeshOnThrow ( float DelayTime );
	void PlayThrowAnimation ( );
};

UClass* APBKWeaponInfo_PPlane::pClassPointer = NULL;

// Class PlanBGame.PBKWeaponInfo_HeadCrab
// 0x0000 (0x027C - 0x027C)
class APBKWeaponInfo_HeadCrab : public APBKWeaponInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49311 ];

		return pClassPointer;
	};

	void ShowHeadCrabMesh ( unsigned long bShow );
	void HideHeadCrabMeshOnThrowTimer ( );
	void HideHeadCrabMeshOnThrow ( float DelayTime );
	void PlayThrowAnimation ( );
};

UClass* APBKWeaponInfo_HeadCrab::pClassPointer = NULL;

// Class PlanBGame.PBCustomizationCache
// 0x000C (0x0048 - 0x003C)
class UPBCustomizationCache : public UObject
{
public:
	TArray< struct FPBWCC_PlayerCache >                PlayerCaches;                                     		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49393 ];

		return pClassPointer;
	};

	void PrepareForWorldCleanup ( );
	void AddCharacterMeshToCache ( class APlayerReplicationInfo* PRI, class USkeletalMesh* CharacterMesh1P, class USkeletalMesh* CharacterMesh3P, struct FCustomCharData* CharacterData );
	bool GetCachedCharacterMesh ( class APlayerReplicationInfo* PRI, struct FCustomCharData* CharacterData, class USkeletalMesh** CharacterMesh1P, class USkeletalMesh** CharacterMesh3P );
	void AddWeaponMeshToCache ( class APlayerReplicationInfo* PRI, class APBNWeaponParams* WeaponParam, class USkeletalMesh* WeaponSkMesh, struct FCustomWeaponData* WeaponData );
	bool GetCachedWeaponMesh ( class APlayerReplicationInfo* PRI, class APBNWeaponParams* WeaponParam, struct FCustomWeaponData* WeaponData, class USkeletalMesh** SkMesh );
	int CreatePlayerCache ( class APlayerReplicationInfo* PRI );
	void SetMRUCache ( int CacheIndex );
	int GetOldestPlayerCacheIndex ( );
	int FindPlayerCacheIndex ( class APlayerReplicationInfo* PRI );
	bool IsLocallyControlled ( class APlayerReplicationInfo* PRI );
};

UClass* UPBCustomizationCache::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_ObjectivePickedup
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_ObjectivePickedup : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49884 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_ObjectivePickedup::pClassPointer = NULL;

// Class PlanBGame.PBBioBomb
// 0x0000 (0x03BC - 0x03BC)
class APBBioBomb : public APBPlaceableDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49937 ];

		return pClassPointer;
	};

};

UClass* APBBioBomb::pClassPointer = NULL;

// Class PlanBGame.PBBird
// 0x0020 (0x01F8 - 0x01D8)
class APBBird : public APBFlockable
{
public:
	class UPBAnim_BlendList*                           AnimBlender;                                      		// 0x01D8 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      SKM;                                              		// 0x01DC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              avoidanceRadius;                                  		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBFlock*                                    flock;                                            		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     avoidanceVector;                                  		// 0x01E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x01F4 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49944 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	struct FVector GetAvoidance ( );
	void AddAvoidance ( struct FVector V );
	void ResetAvoidance ( );
	void Reset ( );
	void SetVelocity ( float _speed );
	void SetVelocityRange ( struct FRange* _range );
	void SetScale ( struct FRange* _range );
	void SetFlock ( class AActor* _flock );
	void SetAvoidanceRadius ( float _radius );
	float GetAvoidanceRadius ( );
	void Animate ( struct FName movementType );
	void PostBeginPlay ( );
};

UClass* APBBird::pClassPointer = NULL;

// Class PlanBGame.PBFlock
// 0x0020 (0x0260 - 0x0240)
class APBFlock : public APBBaseFlock
{
public:
	class UClass*                                      critterClass;                                     		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class APBFlockable* >                      critters;                                         		// 0x0244 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                numCritters;                                      		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              spawnRadius;                                      		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRange                                      critterScaleRange;                                		// 0x0258 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49948 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
	int SpawnCritters ( );
	void AddCritter ( int Idx, class APBFlockable* critter );
	struct FVector GetCurrentTargetLocation ( );
	class APBFlockable* SpawnCritter ( );
	void OnSpawnCritter ( class APBFlockable* critter );
};

UClass* APBFlock::pClassPointer = NULL;

// Class PlanBGame.PBBlueTeamDefensePoint
// 0x0000 (0x02D8 - 0x02D8)
class APBBlueTeamDefensePoint : public APBDefensePoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50005 ];

		return pClassPointer;
	};

};

UClass* APBBlueTeamDefensePoint::pClassPointer = NULL;

// Class PlanBGame.PBBlueTeamStart
// 0x0002 (0x02C4 - 0x02C2)
class APBBlueTeamStart : public APBPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50015 ];

		return pClassPointer;
	};

};

UClass* APBBlueTeamStart::pClassPointer = NULL;

// Class PlanBGame.PBBombMusic
// 0x0000 (0x01D8 - 0x01D8)
class APBBombMusic : public AInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50018 ];

		return pClassPointer;
	};

};

UClass* APBBombMusic::pClassPointer = NULL;

// Class PlanBGame.PBHoldSpot
// 0x0000 (0x02D8 - 0x02D8)
class APBHoldSpot : public APBDefensePoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50231 ];

		return pClassPointer;
	};

	void FreePoint ( );
	class AActor* GetMoveTarget ( );
	void PreBeginPlay ( );
};

UClass* APBHoldSpot::pClassPointer = NULL;

// Class PlanBGame.PBBotBarrikade
// 0x0000 (0x02EC - 0x02EC)
class APBBotBarrikade : public APBGameObjective
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51136 ];

		return pClassPointer;
	};

};

UClass* APBBotBarrikade::pClassPointer = NULL;

// Class PlanBGame.PBEmitter
// 0x0020 (0x0204 - 0x01E4)
class APBEmitter : public AEmitter
{
public:
	unsigned long                                      bCreateLightComponent : 1;                        		// 0x01E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FLightValues >                      LightTimeShift;                                   		// 0x01E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LightBrightness;                                  		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightRadius;                                      		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      LightColor;                                       		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      ExplosionLightClass;                              		// 0x0200 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51158 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void ActivateEmitter ( );
	void Reset ( );
	class UPBExplosionLight* CreateExplosionLight ( );
};

UClass* APBEmitter::pClassPointer = NULL;

// Class PlanBGame.PBReplicatedEmitter
// 0x0020 (0x0224 - 0x0204)
class APBReplicatedEmitter : public APBEmitter
{
public:
	class UParticleSystem*                             EmitterTemplate;                                  		// 0x0204 (0x0004) [0x0000000000000000]              
	float                                              DedicatedServerLifeSpan;                          		// 0x0208 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   Sound_Effect;                                     		// 0x020C (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             Sound_Component;                                  		// 0x0210 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              fFadeOutTime;                                     		// 0x0214 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             FadeOutParameters;                                		// 0x0218 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51157 ];

		return pClassPointer;
	};

	void Destroyed ( );
	void PostBeginPlay ( );
	void PlayEffectSound ( class AActor* A );
};

UClass* APBReplicatedEmitter::pClassPointer = NULL;

// Class PlanBGame.PBEmit_HitEffect
// 0x0008 (0x022C - 0x0224)
class APBEmit_HitEffect : public APBReplicatedEmitter
{
public:
	struct FName                                       BoneName;                                         		// 0x0224 (0x0008) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51156 ];

		return pClassPointer;
	};

	void attachTo ( class APawn* P, struct FName NewBoneName );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* APBEmit_HitEffect::pClassPointer = NULL;

// Class PlanBGame.PBMsgC4Placed
// 0x0000 (0x02FC - 0x02FC)
class UPBMsgC4Placed : public UPBGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51279 ];

		return pClassPointer;
	};

};

UClass* UPBMsgC4Placed::pClassPointer = NULL;

// Class PlanBGame.PBMsgC4PickedUp
// 0x0000 (0x02FC - 0x02FC)
class UPBMsgC4PickedUp : public UPBGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51281 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UPBMsgC4PickedUp::pClassPointer = NULL;

// Class PlanBGame.PBMsgC4Dropped
// 0x0000 (0x02FC - 0x02FC)
class UPBMsgC4Dropped : public UPBGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51283 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UPBMsgC4Dropped::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_C4
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_C4 : public UPBDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51302 ];

		return pClassPointer;
	};

	struct FName GetCorrectDeathAnimationFromHitLoc ( struct FName BoneName, unsigned long bBehind );
};

UClass* UPBDmgType_C4::pClassPointer = NULL;

// Class PlanBGame.PBCampaign
// 0x0000 (0x0468 - 0x0468)
class APBCampaign : public APBRoundGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51394 ];

		return pClassPointer;
	};

};

UClass* APBCampaign::pClassPointer = NULL;

// Class PlanBGame.PBCampaignMap
// 0x0000 (0x01D8 - 0x01D8)
class APBCampaignMap : public APBNCampaignMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51397 ];

		return pClassPointer;
	};

};

UClass* APBCampaignMap::pClassPointer = NULL;

// Class PlanBGame.PBCampaignMap_Node
// 0x0000 (0x01D8 - 0x01D8)
class APBCampaignMap_Node : public APBNCampaignMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51399 ];

		return pClassPointer;
	};

};

UClass* APBCampaignMap_Node::pClassPointer = NULL;

// Class PlanBGame.PBCampaignMap_ConnectionNode
// 0x0000 (0x01D8 - 0x01D8)
class APBCampaignMap_ConnectionNode : public APBCampaignMap_Node
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51401 ];

		return pClassPointer;
	};

};

UClass* APBCampaignMap_ConnectionNode::pClassPointer = NULL;

// Class PlanBGame.PBCampaignMap_LevelNode
// 0x0000 (0x01D8 - 0x01D8)
class APBCampaignMap_LevelNode : public APBCampaignMap_Node
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51403 ];

		return pClassPointer;
	};

};

UClass* APBCampaignMap_LevelNode::pClassPointer = NULL;

// Class PlanBGame.PBCampaignMapArc
// 0x0000 (0x003C - 0x003C)
class UPBCampaignMapArc : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51405 ];

		return pClassPointer;
	};

};

UClass* UPBCampaignMapArc::pClassPointer = NULL;

// Class PlanBGame.PBCGPlayerReplicationInfo
// 0x0000 (0x07F8 - 0x07F8)
class APBCGPlayerReplicationInfo : public APBPlayerReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51842 ];

		return pClassPointer;
	};

};

UClass* APBCGPlayerReplicationInfo::pClassPointer = NULL;

// Class PlanBGame.PBChangeClassMessage
// 0x0000 (0x0060 - 0x0060)
class UPBChangeClassMessage : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51845 ];

		return pClassPointer;
	};

};

UClass* UPBChangeClassMessage::pClassPointer = NULL;

// Class PlanBGame.PBChatMessageData
// 0x0040 (0x007C - 0x003C)
class UPBChatMessageData : public UObject
{
public:
	struct FString                                     IRCServer;                                        		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     IRCGroup;                                         		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                maxMessages;                                      		// 0x0054 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FPBChatMessage >                    ChatMessages;                                     		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   ChatMessageReceivedDelegates;                     		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnChatMessageReceived__Delegate;                		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52130 ];

		return pClassPointer;
	};

	TArray< struct FPBChatMessage > GetMessages ( struct FString Channel );
	void ClearOnChatMessageReceivedDelegate ( struct FScriptDelegate ChatMessageReceivedDelegate );
	void CallOnChatMessageReceivedDelegates ( struct FPBChatMessage msg );
	void AddOnChatMessageReceivedDelegate ( struct FScriptDelegate ChatMessageReceivedDelegate );
	void AddMessage ( struct FPBChatMessage Message );
	void OnChatMessageReceivedImpl ( struct FString Channel, struct FString NickName, struct FString Message );
	void OnChatMessageReceived ( struct FString Channel, struct FString NickName, struct FString Message );
};

UClass* UPBChatMessageData::pClassPointer = NULL;

// Class PlanBGame.PBChest
// 0x000F (0x0360 - 0x0351)
class APBChest : public APBInteractiveObjective
{
public:
	int                                                SpawnChance;                                      		// 0x0354 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      TDM : 1;                                          		// 0x0358 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      DVN : 1;                                          		// 0x0358 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      SND : 1;                                          		// 0x0358 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      activatable : 1;                                  		// 0x0358 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	int                                                ActiveDuration;                                   		// 0x035C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52184 ];

		return pClassPointer;
	};

	void PickupChest ( class APBPawn* pPawn );
	int GetRemainingTime ( );
	void PostBeginPlay ( );
	void SpawnChest ( );
	bool isActivatable ( );
	void Reset ( );
};

UClass* APBChest::pClassPointer = NULL;

// Class PlanBGame.PBCivilianGetDownMessage
// 0x0000 (0x0078 - 0x0078)
class UPBCivilianGetDownMessage : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52265 ];

		return pClassPointer;
	};

};

UClass* UPBCivilianGetDownMessage::pClassPointer = NULL;

// Class PlanBGame.PBCivilianStart
// 0x0002 (0x02C4 - 0x02C2)
class APBCivilianStart : public APBPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52267 ];

		return pClassPointer;
	};

};

UClass* APBCivilianStart::pClassPointer = NULL;

// Class PlanBGame.PBCLGameReplicationInfo
// 0x0000 (0x0374 - 0x0374)
class APBCLGameReplicationInfo : public APBGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52270 ];

		return pClassPointer;
	};

};

UClass* APBCLGameReplicationInfo::pClassPointer = NULL;

// Class PlanBGame.PBClientEmitter
// 0x0000 (0x01E4 - 0x01E4)
class APBClientEmitter : public AEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52272 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* APBClientEmitter::pClassPointer = NULL;

// Class PlanBGame.PBCLPlayerReplicationInfo
// 0x0000 (0x07F8 - 0x07F8)
class APBCLPlayerReplicationInfo : public APBPlayerReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52277 ];

		return pClassPointer;
	};

};

UClass* APBCLPlayerReplicationInfo::pClassPointer = NULL;

// Class PlanBGame.PBCLPlayerStart
// 0x0002 (0x02C4 - 0x02C2)
class APBCLPlayerStart : public APBPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52280 ];

		return pClassPointer;
	};

};

UClass* APBCLPlayerStart::pClassPointer = NULL;

// Class PlanBGame.PBConsole
// 0x0004 (0x01D8 - 0x01D4)
class UPBConsole : public UConsole
{
public:
	unsigned long                                      m_bBlockConsole : 1;                              		// 0x01D4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52954 ];

		return pClassPointer;
	};

	void UpdateCompleteIndices ( );
	void BlockConsole ( unsigned long bBlock );
	bool InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
};

UClass* UPBConsole::pClassPointer = NULL;

// Class PlanBGame.PBConstantLimiter
// 0x0004 (0x0040 - 0x003C)
class UPBConstantLimiter : public UPBChoiseLimiter
{
public:
	int                                                m_nLimitation;                                    		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52968 ];

		return pClassPointer;
	};

	int GetLimit ( );
};

UClass* UPBConstantLimiter::pClassPointer = NULL;

// Class PlanBGame.PBCreditsList
// 0x0018 (0x0054 - 0x003C)
class UPBCreditsList : public UObject
{
public:
	struct FString                                     CreditsList;                                      		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              CreditsMovementDelay;                             		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CreditsMovementTime;                              		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPBCreditsList*                              Archetype;                                        		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52973 ];

		return pClassPointer;
	};

	float GetDelay ( );
	float GetDuration ( );
	struct FString GetCredits ( );
};

UClass* UPBCreditsList::pClassPointer = NULL;

// Class PlanBGame.PBCriminalsEscapedMessage
// 0x0000 (0x0060 - 0x0060)
class UPBCriminalsEscapedMessage : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52986 ];

		return pClassPointer;
	};

};

UClass* UPBCriminalsEscapedMessage::pClassPointer = NULL;

// Class PlanBGame.PBItemShopHelper
// 0x000C (0x004C - 0x0040)
class UPBItemShopHelper : public UPBSingleton
{
public:
	TArray< struct FString >                           SystemReservedNames;                              		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53373 ];

		return pClassPointer;
	};

	bool IsNameValid ( struct FString sName );
	void GetItemColorTexture ( class UPBCustomChar_MenuData* CharData, struct FGuid ItemGuid, struct FGuid ColorGuid, struct FString* sTexturePath, struct FTextureCoordinates* Coordinates );
	int FindSelectedColorSchemeID ( class UPBCustomChar_MenuData* CharData, int ColorSchemeIndex, struct FGuid ColorSchemeGuid, struct FPBItemLocator* pLocator );
	int GetItemSchemeIndex ( struct FPBItemLocator* ItemLocator );
	int GetSkillTierIndex ( struct FGuid ItemGuid );
};

UClass* UPBItemShopHelper::pClassPointer = NULL;

// Class PlanBGame.PBCustomWeapon_Preview
// 0x0000 (0x01D8 - 0x01D8)
class APBCustomWeapon_Preview : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53986 ];

		return pClassPointer;
	};

};

UClass* APBCustomWeapon_Preview::pClassPointer = NULL;

// Class PlanBGame.PBDataStore_GameSettings
// 0x0000 (0x007C - 0x007C)
class UPBDataStore_GameSettings : public UUIDataStore_OnlineGameSettings
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54015 ];

		return pClassPointer;
	};

};

UClass* UPBDataStore_GameSettings::pClassPointer = NULL;

// Class PlanBGame.PBGameSettingsTDM
// 0x0000 (0x00E4 - 0x00E4)
class UPBGameSettingsTDM : public UPBGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54017 ];

		return pClassPointer;
	};

};

UClass* UPBGameSettingsTDM::pClassPointer = NULL;

// Class PlanBGame.PBDeathMessage
// 0x001C (0x007C - 0x0060)
class UPBDeathMessage : public UPBLocalMessage
{
public:
	struct FString                                     KilledString;                                     		// 0x0060 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SomeoneString;                                    		// 0x006C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bNoConsoleDeathMessages : 1;                      		// 0x0078 (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54018 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FColor GetConsoleColor ( class APlayerReplicationInfo* RelatedPRI );
};

UClass* UPBDeathMessage::pClassPointer = NULL;

// Class PlanBGame.PBDefendingTeam
// 0x0000 (0x0060 - 0x0060)
class UPBDefendingTeam : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54040 ];

		return pClassPointer;
	};

};

UClass* UPBDefendingTeam::pClassPointer = NULL;

// Class PlanBGame.PBDefuseKit
// 0x0000 (0x03BC - 0x03BC)
class APBDefuseKit : public APBPlaceableDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54042 ];

		return pClassPointer;
	};

};

UClass* APBDefuseKit::pClassPointer = NULL;

// Class PlanBGame.PBDemoRecSpectator
// 0x0014 (0x08C8 - 0x08B4)
class APBDemoRecSpectator : public APBPlayerController
{
public:
	unsigned long                                      bTempBehindView : 1;                              		// 0x08B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bFoundPlayer : 1;                                 		// 0x08B4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bLockRotationToViewTarget : 1;                    		// 0x08B4 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bAutoSwitchPlayers : 1;                           		// 0x08B4 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	struct FString                                     RemoteViewTarget;                                 		// 0x08B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              AutoSwitchPlayerInterval;                         		// 0x08C4 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54049 ];

		return pClassPointer;
	};

	void UpdateRotation ( float DeltaTime );
	void DemoViewNextPlayer ( );
	void ViewClass ( class UClass* aClass, unsigned long bQuiet, unsigned long bCheat );
	void InitPlayerReplicationInfo ( );
	void eventReceivedPlayer ( );
	void eventPostBeginPlay ( );
};

UClass* APBDemoRecSpectator::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_AK47
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_AK47 : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54243 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_AK47::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_ALR3000
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_ALR3000 : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54247 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_ALR3000::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_AS50
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_AS50 : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54251 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_AS50::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_AWM
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_AWM : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54255 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_AWM::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_BareHands
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_BareHands : public UPBDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54259 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_BareHands::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_Beretta_9mm
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_Beretta_9mm : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54263 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_Beretta_9mm::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_DSR1
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_DSR1 : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54280 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_DSR1::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_Encroached
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_Encroached : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54284 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_Encroached::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_Grenade
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_Grenade : public UPBDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54298 ];

		return pClassPointer;
	};

	struct FName GetCorrectDeathAnimationFromHitLoc ( struct FName BoneName, unsigned long bBehind );
};

UClass* UPBDmgType_Grenade::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_Lupara
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_Lupara : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54309 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_Lupara::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_Mac
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_Mac : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54316 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_Mac::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_Mossberg
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_Mossberg : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54323 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_Mossberg::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_MP9
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_MP9 : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54327 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_MP9::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_Nova
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_Nova : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54331 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_Nova::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_PKnife
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_PKnife : public UPBDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54335 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_PKnife::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_PSG1
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_PSG1 : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54339 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_PSG1::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_R870
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_R870 : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54343 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_R870::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_RocketLauncher
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_RocketLauncher : public UPBDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54347 ];

		return pClassPointer;
	};

	struct FName GetCorrectDeathAnimationFromHitLoc ( struct FName BoneName, unsigned long bBehind );
};

UClass* UPBDmgType_RocketLauncher::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_SigP226
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_SigP226 : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54355 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_SigP226::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_SmokeGrenade
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_SmokeGrenade : public UPBDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54359 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_SmokeGrenade::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_TankShell
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_TankShell : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54366 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_TankShell::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_UMP
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_UMP : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54373 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_UMP::pClassPointer = NULL;

// Class PlanBGame.PBDmgType_USP
// 0x0000 (0x0100 - 0x0100)
class UPBDmgType_USP : public UPBBulletDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54377 ];

		return pClassPointer;
	};

};

UClass* UPBDmgType_USP::pClassPointer = NULL;

// Class PlanBGame.PBInteractiveObstacle
// 0x0000 (0x02EC - 0x02EC)
class APBInteractiveObstacle : public APBGameObjective
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54381 ];

		return pClassPointer;
	};

};

UClass* APBInteractiveObstacle::pClassPointer = NULL;

// Class PlanBGame.PBDoorObstacle
// 0x0000 (0x02EC - 0x02EC)
class APBDoorObstacle : public APBInteractiveObstacle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54384 ];

		return pClassPointer;
	};

};

UClass* APBDoorObstacle::pClassPointer = NULL;

// Class PlanBGame.PBDrillerRestartedMessage
// 0x0000 (0x0078 - 0x0078)
class UPBDrillerRestartedMessage : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54387 ];

		return pClassPointer;
	};

};

UClass* UPBDrillerRestartedMessage::pClassPointer = NULL;

// Class PlanBGame.PBDrillerStoppedMessage
// 0x0000 (0x0078 - 0x0078)
class UPBDrillerStoppedMessage : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54389 ];

		return pClassPointer;
	};

};

UClass* UPBDrillerStoppedMessage::pClassPointer = NULL;

// Class PlanBGame.PBDTB_PlayerStart
// 0x0006 (0x02C8 - 0x02C2)
class APBDTB_PlayerStart : public APBPlayerStart
{
public:
	unsigned long                                      bDefendingStart : 1;                              		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54391 ];

		return pClassPointer;
	};

};

UClass* APBDTB_PlayerStart::pClassPointer = NULL;

// Class PlanBGame.PBEmit_BloodSpray
// 0x0000 (0x022C - 0x022C)
class APBEmit_BloodSpray : public APBEmit_HitEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54547 ];

		return pClassPointer;
	};

};

UClass* APBEmit_BloodSpray::pClassPointer = NULL;

// Class PlanBGame.PBEmitter_VehicleDead
// 0x0000 (0x0224 - 0x0224)
class APBEmitter_VehicleDead : public APBReplicatedEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54550 ];

		return pClassPointer;
	};

};

UClass* APBEmitter_VehicleDead::pClassPointer = NULL;

// Class PlanBGame.PBEmitter_VehicleDestruction
// 0x0000 (0x0224 - 0x0224)
class APBEmitter_VehicleDestruction : public APBReplicatedEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54553 ];

		return pClassPointer;
	};

};

UClass* APBEmitter_VehicleDestruction::pClassPointer = NULL;

// Class PlanBGame.PBEnemyCapturedHQMessage
// 0x0000 (0x0060 - 0x0060)
class UPBEnemyCapturedHQMessage : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54608 ];

		return pClassPointer;
	};

};

UClass* UPBEnemyCapturedHQMessage::pClassPointer = NULL;

// Class PlanBGame.PBEnemyDownMsg
// 0x0000 (0x0060 - 0x0060)
class UPBEnemyDownMsg : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54610 ];

		return pClassPointer;
	};

};

UClass* UPBEnemyDownMsg::pClassPointer = NULL;

// Class PlanBGame.PBEnemySpottedMsg
// 0x0000 (0x0060 - 0x0060)
class UPBEnemySpottedMsg : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54612 ];

		return pClassPointer;
	};

};

UClass* UPBEnemySpottedMsg::pClassPointer = NULL;

// Class PlanBGame.PBEventList
// 0x0000 (0x003C - 0x003C)
class UPBEventList : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54789 ];

		return pClassPointer;
	};

};

UClass* UPBEventList::pClassPointer = NULL;

// Class PlanBGame.PBEventSystem_BaseViewer
// 0x0000 (0x003C - 0x003C)
class UPBEventSystem_BaseViewer : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54791 ];

		return pClassPointer;
	};

};

UClass* UPBEventSystem_BaseViewer::pClassPointer = NULL;

// Class PlanBGame.PBEventSystem_ConsoleViewer
// 0x0000 (0x003C - 0x003C)
class UPBEventSystem_ConsoleViewer : public UPBEventSystem_BaseViewer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54793 ];

		return pClassPointer;
	};

};

UClass* UPBEventSystem_ConsoleViewer::pClassPointer = NULL;

// Class PlanBGame.PBEventSystem_KOGSStorage
// 0x0000 (0x003C - 0x003C)
class UPBEventSystem_KOGSStorage : public UPBEventSystem_BaseStorage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54795 ];

		return pClassPointer;
	};

};

UClass* UPBEventSystem_KOGSStorage::pClassPointer = NULL;

// Class PlanBGame.PBEventSystem_KOGSStorageExpiredItems
// 0x0000 (0x003C - 0x003C)
class UPBEventSystem_KOGSStorageExpiredItems : public UPBEventSystem_KOGSStorage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54797 ];

		return pClassPointer;
	};

};

UClass* UPBEventSystem_KOGSStorageExpiredItems::pClassPointer = NULL;

// Class PlanBGame.PBEventSystem_TestStorage
// 0x0000 (0x003C - 0x003C)
class UPBEventSystem_TestStorage : public UPBEventSystem_BaseStorage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54799 ];

		return pClassPointer;
	};

};

UClass* UPBEventSystem_TestStorage::pClassPointer = NULL;

// Class PlanBGame.PBEventSystem_UIViewer
// 0x0000 (0x003C - 0x003C)
class UPBEventSystem_UIViewer : public UPBEventSystem_BaseViewer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54801 ];

		return pClassPointer;
	};

};

UClass* UPBEventSystem_UIViewer::pClassPointer = NULL;

// Class PlanBGame.PBEventSystem_UIGameViewer
// 0x0000 (0x003C - 0x003C)
class UPBEventSystem_UIGameViewer : public UPBEventSystem_UIViewer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54803 ];

		return pClassPointer;
	};

};

UClass* UPBEventSystem_UIGameViewer::pClassPointer = NULL;

// Class PlanBGame.PBEventSystem_UIMenuViewer
// 0x0000 (0x003C - 0x003C)
class UPBEventSystem_UIMenuViewer : public UPBEventSystem_UIViewer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54805 ];

		return pClassPointer;
	};

};

UClass* UPBEventSystem_UIMenuViewer::pClassPointer = NULL;

// Class PlanBGame.PBEvidenceDestroyed
// 0x0000 (0x0060 - 0x0060)
class UPBEvidenceDestroyed : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54807 ];

		return pClassPointer;
	};

};

UClass* UPBEvidenceDestroyed::pClassPointer = NULL;

// Class PlanBGame.PBEvidenceSecured
// 0x0000 (0x0060 - 0x0060)
class UPBEvidenceSecured : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54809 ];

		return pClassPointer;
	};

};

UClass* UPBEvidenceSecured::pClassPointer = NULL;

// Class PlanBGame.PBExcluded
// 0x0000 (0x01D8 - 0x01D8)
class APBExcluded : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54811 ];

		return pClassPointer;
	};

};

UClass* APBExcluded::pClassPointer = NULL;

// Class PlanBGame.PBFinalMap_StateChanged
// 0x0000 (0x0078 - 0x0078)
class UPBFinalMap_StateChanged : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54813 ];

		return pClassPointer;
	};

};

UClass* UPBFinalMap_StateChanged::pClassPointer = NULL;

// Class PlanBGame.PBInteractiveButton
// 0x0013 (0x0364 - 0x0351)
class APBInteractiveButton : public APBInteractiveObjective
{
public:
	float                                              fTimeToFireEvent;                                 		// 0x0354 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FScriptDelegate                             __OnInteractionSuccessful__Delegate;              		// 0x0358 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54815 ];

		return pClassPointer;
	};

	void InteractionSuccessful ( );
	bool IsVolumeInteractible ( );
	unsigned char GetTeamNum ( );
	bool CanInteract ( class AController* User );
	void PostBeginPlay ( );
	void OnInteractionSuccessful ( class APBInteractiveButton* pButton, class AController* User );
};

UClass* APBInteractiveButton::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_InteractiveButtonPressed
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_InteractiveButtonPressed : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54830 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_InteractiveButtonPressed::pClassPointer = NULL;

// Class PlanBGame.PBFinalObjectiveButton
// 0x0000 (0x0364 - 0x0364)
class APBFinalObjectiveButton : public APBInteractiveButton
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54837 ];

		return pClassPointer;
	};

};

UClass* APBFinalObjectiveButton::pClassPointer = NULL;

// Class PlanBGame.PBFriendlyCapturedHQMessage
// 0x0000 (0x0060 - 0x0060)
class UPBFriendlyCapturedHQMessage : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54893 ];

		return pClassPointer;
	};

};

UClass* UPBFriendlyCapturedHQMessage::pClassPointer = NULL;

// Class PlanBGame.PBStatisticsStats
// 0x0060 (0x009C - 0x003C)
class UPBStatisticsStats : public UObject
{
public:
	struct FTStatsSet                                  PlayerStats;                                      		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTStatsSet                                  WeaponStats;                                      		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTStatsSet                                  MapStats;                                         		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTStatsSet >                        WeaponPerMapStats;                                		// 0x0060 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTStatsSet                                  GameMapRFGStats;                                  		// 0x006C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTStatsSet                                  GameMapTDMStats;                                  		// 0x0078 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTStatsSet                                  GameMapCMPStats;                                  		// 0x0084 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTStatsSet                                  GameCampaignStats;                                		// 0x0090 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54896 ];

		return pClassPointer;
	};

};

UClass* UPBStatisticsStats::pClassPointer = NULL;

// Class PlanBGame.PBGameLobby
// 0x0000 (0x0468 - 0x0468)
class APBGameLobby : public APBRoundGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54929 ];

		return pClassPointer;
	};

};

UClass* APBGameLobby::pClassPointer = NULL;

// Class PlanBGame.PBGamePrototypeCL
// 0x0000 (0x0468 - 0x0468)
class APBGamePrototypeCL : public APBRoundGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55340 ];

		return pClassPointer;
	};

};

UClass* APBGamePrototypeCL::pClassPointer = NULL;

// Class PlanBGame.PBMatchStatistics
// 0x0010 (0x004C - 0x003C)
class UPBMatchStatistics : public UObject
{
public:
	int                                                LevelEvents[ 0x4 ];                               		// 0x003C (0x0010) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55343 ];

		return pClassPointer;
	};

	int GetLevelEvent ( unsigned char level_event );
	void IncreaseLevelEvent ( unsigned char level_event );
	void DTBObjectiveCaptured ( unsigned char teamNumber, int capturePoint );
	void ClearStatistics ( );
};

UClass* UPBMatchStatistics::pClassPointer = NULL;

// Class PlanBGame.PBUWPlayerStart
// 0x0007 (0x02C9 - 0x02C2)
class APBUWPlayerStart : public APBPlayerStart
{
public:
	unsigned long                                      bAutomaticSetup : 1;                              		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      ePointDirection;                                  		// 0x02C8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55541 ];

		return pClassPointer;
	};

};

UClass* APBUWPlayerStart::pClassPointer = NULL;

// Class PlanBGame.PBGDR_BlockingGateActor
// 0x008C (0x0264 - 0x01D8)
class APBGDR_BlockingGateActor : public AActor
{
public:
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x01D8 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        GateMesh;                                         		// 0x01DC (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	struct FVector                                     closeTranslation;                                 		// 0x01E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              closeTime;                                        		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBGDR_RobotWaypoint*                        blocksNavigationPoint;                            		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartLocation;                                    		// 0x01F4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     openMovementSpeed;                                		// 0x0200 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     MovementSpeed;                                    		// 0x020C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              Hits;                                             		// 0x0218 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class APBGDR_HitZoneActor* >               hitZones;                                         		// 0x021C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class APBInteractiveButton*                        gateSwitch;                                       		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      startClosed : 1;                                  		// 0x022C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      canBeClosed : 1;                                  		// 0x022C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class APBInteractiveButton*                        gateDestroySwitch;                                		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class APBPlayerStart* >                    DisabledSpwanWhenDestroyed;                       		// 0x0234 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class APBPlayerStart* >                    EnabledSpwanWhenDestroyed;                        		// 0x0240 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USpriteComponent*                            GoodSprite;                                       		// 0x024C (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< struct FName >                             stateNames;                                       		// 0x0250 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      GateClosePercent;                                 		// 0x025C (0x0001) [0x0000000000000020]              ( CPF_Net )
	float                                              SrvClosePercent;                                  		// 0x0260 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55688 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	void SetBlockingState ( unsigned long bBlocksRobot );
	void gateSwitched ( class APBInteractiveButton* pButton, class AController* User );
	void gateDestroySwitched ( class APBInteractiveButton* pButton, class AController* User );
	void NotifyHitZoneDestroyed ( class APBGDR_HitZoneActor* pWhichHitZone );
	void SetHitZonesStatus ( unsigned long bOpen );
	void Reset ( );
	struct FName GetStateNameFromId ( unsigned char StateId );
	void SetStateId ( struct FName StateName );
	void eventPostBeginPlay ( );
};

UClass* APBGDR_BlockingGateActor::pClassPointer = NULL;

// Class PlanBGame.PBGDR_RobotWaypoint
// 0x001C (0x01F4 - 0x01D8)
class APBGDR_RobotWaypoint : public AActor
{
public:
	class USpriteComponent*                            GoodSprite;                                       		// 0x01D8 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class APBGDR_RobotWaypoint*                        NextRobotPathNode[ 0x2 ];                         		// 0x01DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSmoothlyTurnToThisWaypoint : 1;                  		// 0x01E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bGivePointsToAttackersWhenRobotPassesThis : 1;    		// 0x01E4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlocked : 1;                                     		// 0x01E4 (0x0004) [0x0000000000000021] [0x00000004] ( CPF_Edit | CPF_Net )
	float                                              fRobotMaxSpeedModifier;                           		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBGDR_BlockingGateActor*                    pWhichBlockingGate;                               		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fHeightZUpToSpawnRobot;                           		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55702 ];

		return pClassPointer;
	};

};

UClass* APBGDR_RobotWaypoint::pClassPointer = NULL;

// Class PlanBGame.PBGDR_MapInfo
// 0x0010 (0x0088 - 0x0078)
class UPBGDR_MapInfo : public UPBGameMapInfo
{
public:
	class APBGDR_RobotWaypoint*                        FirstWaypoint;                                    		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBGDR_GiantRobot*                           pRobotArchetypeToSpawn;                           		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      GiantRobotClass;                                  		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBGDR_GiantRobot*                           pCurrentRobot;                                    		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55706 ];

		return pClassPointer;
	};

};

UClass* UPBGDR_MapInfo::pClassPointer = NULL;

// Class PlanBGame.PBGDR_PlayerStart
// 0x0006 (0x02C8 - 0x02C2)
class APBGDR_PlayerStart : public APBPlayerStart
{
public:
	unsigned long                                      bCapturePhase : 1;                                		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDefendPhase : 1;                                 		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAttackPhase : 1;                                 		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55755 ];

		return pClassPointer;
	};

};

UClass* APBGDR_PlayerStart::pClassPointer = NULL;

// Class PlanBGame.PBGameSearchCommon
// 0x0000 (0x00F4 - 0x00F4)
class UPBGameSearchCommon : public UOnlineGameSearch
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56039 ];

		return pClassPointer;
	};

};

UClass* UPBGameSearchCommon::pClassPointer = NULL;

// Class PlanBGame.PBGameSearchTDM
// 0x0000 (0x00F4 - 0x00F4)
class UPBGameSearchTDM : public UPBGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56169 ];

		return pClassPointer;
	};

};

UClass* UPBGameSearchTDM::pClassPointer = NULL;

// Class PlanBGame.PBGameStatCollector
// 0x0000 (0x01EC - 0x01EC)
class APBGameStatCollector : public AMutator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56365 ];

		return pClassPointer;
	};

	void InitMutator ( struct FString Options, struct FString* ErrorMessage );
};

UClass* APBGameStatCollector::pClassPointer = NULL;

// Class PlanBGame.PBSkill_AllClients
// 0x0000 (0x029C - 0x029C)
class APBSkill_AllClients : public APBSkill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56448 ];

		return pClassPointer;
	};

};

UClass* APBSkill_AllClients::pClassPointer = NULL;

// Class PlanBGame.PBSkill_Mortar
// 0x0078 (0x0314 - 0x029C)
class APBSkill_Mortar : public APBSkill_AllClients
{
public:
	TArray< struct FMortarImprovementInfo >            rMortarImprovements;                              		// 0x029C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class APBProjectileNoPhysic*                       pMortarProjectileTemplate;                        		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFixedSpawnHeight;                                		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDelayBetweenStrikes;                             		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMinVariation;                                    		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxVariation;                                    		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fInitialDelay;                                    		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTooFarHigh;                                      		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   pUnusableSound;                                   		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBProjectileNoPhysic*                       pLastMortarProjectile;                            		// 0x02C8 (0x0004) [0x0000000000000000]              
	class UStaticMeshComponent*                        pMortarMesh;                                      		// 0x02CC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    pPlacementMarker;                                 		// 0x02D0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                iCurrentMortarCount;                              		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fMarkerYaw;                                       		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fYawRotSpeed;                                     		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bActivated : 1;                                   		// 0x02E0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FVector                                     vActivatedPosition;                               		// 0x02E4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     vActivatedNormal;                                 		// 0x02F0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class APBSpawnVolumeTDM* >                 spawnVolumes;                                     		// 0x02FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     vFinalActivatedPosition;                          		// 0x0308 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56447 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void eventTick ( float fDelta );
	void NotifyClientOutOfEnergy ( );
	void SetPositionAndNormal ( struct FVector vPosition, struct FVector vNormal );
	void ActivateMortar ( class AController* ActivatingPlayer, struct FVector vPosition, struct FVector vNormal );
	void StopMortarFire ( );
	void eventNotifyProjectileExploded ( class AProjectile* pWhichProjectile );
	struct FVector GenerateRandomPosition ( struct FVector vPos );
	void MortarFire ( );
	void eventReplicatedEvent ( struct FName VarName );
	void ShowFinalActivatedPosition ( unsigned long bShow );
	void ShowMortarDesignator ( unsigned long bShow );
	bool OnSameTeam ( );
	float GetMortarRadius ( );
	void UntouchSpawnVolumes ( );
	void TouchSpawnVolumes ( );
	void StartMortarFire ( );
	void SetDesignatorPosition ( struct FVector vLocation, unsigned long bCanPlaceMortar );
	bool CanPlayerActivateMortar ( );
};

UClass* APBSkill_Mortar::pClassPointer = NULL;

// Class PlanBGame.PBGasBombExploded
// 0x0000 (0x0078 - 0x0078)
class UPBGasBombExploded : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56503 ];

		return pClassPointer;
	};

};

UClass* UPBGasBombExploded::pClassPointer = NULL;

// Class PlanBGame.PBGDR_HitZoneActor
// 0x0098 (0x0270 - 0x01D8)
class APBGDR_HitZoneActor : public AActor
{
public:
	class USkeletalMeshComponent*                      pHitZoneSkeletalMesh;                             		// 0x01D8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           pLightEnv;                                        		// 0x01DC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterial*                                   BaseHitZoneMaterial;                              		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HitZoneMaterialParamName;                         		// 0x01E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                cFullHealth;                                      		// 0x01EC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                cZeroHealth;                                      		// 0x01FC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                cDestroyedHealth;                                 		// 0x020C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       OpeningAnimName;                                  		// 0x021C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ClosingAnimname;                                  		// 0x0224 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       OpenedIdleAnimName;                               		// 0x022C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ClosedIdleAnimName;                               		// 0x0234 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HitAreaBoneName;                                  		// 0x023C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fHealth;                                          		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fClosingDuration;                                 		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fOpeningDuration;                                 		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      AssociatedActor;                                  		// 0x0250 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      HitZone;                                          		// 0x0254 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      byteHealthPerc;                                   		// 0x0255 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      RepStateId;                                       		// 0x0256 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FName >                             PossibleStates;                                   		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UMaterialInstanceConstant*                   HitZoneMaterial;                                  		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fCurrentHealth;                                   		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bWantsToOpen : 1;                                 		// 0x026C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bWantsToClose : 1;                                		// 0x026C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56507 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	struct FName GetStateNameFromId ( unsigned char StateId );
	void RepState ( struct FName StateName );
	bool CanBeDamaged ( );
	void eventTick ( float DeltaTime );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	struct FLinearColor InterpolateColors ( struct FLinearColor A, struct FLinearColor B, float Alpha );
	void SetHitZoneVisualHealth ( unsigned char healthPerc );
	unsigned char GetHealthPerc ( );
	void UpdateHealthRep ( );
	void Reset ( );
	void DoIt ( );
	bool IsClosed ( );
	bool IsOpen ( );
	void SetHitZoneStatus ( unsigned long bOpen );
	void eventPostBeginPlay ( );
};

UClass* APBGDR_HitZoneActor::pClassPointer = NULL;

// Class PlanBGame.PBGDR_RobotWeaponTurret
// 0x00E8 (0x02CC - 0x01E4)
class APBGDR_RobotWeaponTurret : public APBDamagerDevice
{
public:
	class USkeletalMeshComponent*                      pTopTurret;                                       		// 0x01E4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           pLightEnv;                                        		// 0x01E8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    pLaserComp;                                       		// 0x01EC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             pFiringSoundComp;                                 		// 0x01F0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    pMuzzleFlashComp;                                 		// 0x01F4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInterface*                          pFriendlyMaterialInstance;                        		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          pEnemyMaterialInstance;                           		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MuzzleFlashSocketName;                            		// 0x0200 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LaserSocketName;                                  		// 0x0208 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTracerSpawnTimer;                                		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             pTracerParticleSystem;                            		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             pMuzzleFlashPS;                                   		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             LaserPS;                                          		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       IdleAnimName;                                     		// 0x0220 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DestroyedAnimName;                                		// 0x0228 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTrackingTimer;                                   		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeUntilTurretStopsFiring;                      		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWarmupTime;                                      		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   pFiringSingleSoundCue;                            		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   pWarmupSoundCue;                                  		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   pFiringSoundCue;                                  		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   pEndFiringCue;                                    		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadDegrees;                                   		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iDamagePerBullet;                                 		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShootSocketName;                                  		// 0x0254 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTurretRotSpeed;                                  		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CharacterShootAtBoneName;                         		// 0x0260 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fStartTraceHeight;                                		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFireRate;                                        		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fUpFOV;                                           		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDownFOV;                                         		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fYawFOV;                                          		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAggressionRange;                                 		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAttackRange;                                     		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEffectiveRange;                                  		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxBulletRange;                                  		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCanTargetTurrets : 1;                            		// 0x028C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLaserActive : 1;                                 		// 0x028C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              fCharacterHeightCompensation;                     		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTurretHeightCompensation;                        		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iAttackWhichTeam;                                 		// 0x0298 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     vHitLocation;                                     		// 0x029C (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      replicateStateId;                                 		// 0x02A8 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FName >                             stateNames;                                       		// 0x02AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AActor*                                      TargetActor;                                      		// 0x02B8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fTargetTurretYaw;                                 		// 0x02BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTargetTurretPitch;                               		// 0x02C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fCurrentTurretYaw;                                		// 0x02C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fCurrentTurretPitch;                              		// 0x02C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56655 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	bool AllowImpactEffects ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal );
	void PlayImpactEffects ( struct FVector vHit );
	unsigned char GetTeamNum ( );
	void SpawnTracer ( struct FVector vEndHitLoc );
	void StopFiringEffects ( );
	void StartFiringEffects ( );
	void eventTick ( float DeltaTime );
	void FaceLocation ( float fDeltaTime, struct FVector vLocation );
	float GetPitchAngle ( struct FVector vLocation );
	float GetYawAngle ( struct FVector vLocation );
	struct FVector GetTraceStartLoc ( );
	bool CanShootAt ( class AActor* pShootAtActor, float fUseRange );
	bool IsTargetAlive ( class AActor* pShootAtActor );
	bool InFOV ( struct FVector vLoc );
	struct FVector GetToShootLocation ( class AActor* pShootAtActor );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void PlayAnim ( struct FName AnimName, float fDuration );
	void AdjustLaserLength ( );
	struct FVector GetShootDir ( );
	void ChangeFriendlyTeam ( int iFriendlyTeamIndex );
	void SetupVisuals ( );
	void eventDestroyed ( );
	struct FName GetStateNameFromId ( unsigned char StateId );
	void SetStateId ( struct FName StateName );
	void eventPostBeginPlay ( );
};

UClass* APBGDR_RobotWeaponTurret::pClassPointer = NULL;

// Class PlanBGame.PBGDR_GiantRobot_test
// 0x0004 (0x030C - 0x0308)
class APBGDR_GiantRobot_test : public APBGDR_GiantRobot
{
public:
	class APBGDR_RobotWaypoint*                        SpawnWaypoint;                                    		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56934 ];

		return pClassPointer;
	};

	void repairBot ( );
	void respawnBot ( );
	void startMovetoBase ( );
	void eventPostBeginPlay ( );
};

UClass* APBGDR_GiantRobot_test::pClassPointer = NULL;

// Class PlanBGame.PBGDR_HitZone_test
// 0x0018 (0x01F8 - 0x01E0)
class APBGDR_HitZone_test : public APBDynamicSMActor
{
public:
	float                                              Hits;                                             		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              currHits;                                         		// 0x01E4 (0x0004) [0x0000000000000000]              
	unsigned long                                      Destroyed : 1;                                    		// 0x01E8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      indestructable : 1;                               		// 0x01E8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      ReplicatedDestructable : 1;                       		// 0x01E8 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      ReplicatedDestroyed : 1;                          		// 0x01E8 (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	struct FScriptDelegate                             __onDestroyed__Delegate;                          		// 0x01EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56955 ];

		return pClassPointer;
	};

	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void resetHZ ( );
	void setDestructable ( unsigned long destructable );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void onDestroyed ( );
};

UClass* APBGDR_HitZone_test::pClassPointer = NULL;

// Class PlanBGame.PBGDR_SpawnCoverPoint
// 0x0020 (0x01F8 - 0x01D8)
class APBGDR_SpawnCoverPoint : public AActor
{
public:
	TArray< class UStaticMesh* >                       SpawnList;                                        		// 0x01D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class APBGDR_SpawnCoverPoint*                      useOtherSpawnList;                                		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpawnChance;                                      		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        SpawnedMesh;                                      		// 0x01EC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                StaticMeshID;                                     		// 0x01F0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class USpriteComponent*                            GoodSprite;                                       		// 0x01F4 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57312 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* APBGDR_SpawnCoverPoint::pClassPointer = NULL;

// Class PlanBGame.PBGFxBackground
// 0x000C (0x00AC - 0x00A0)
class UPBGFxBackground : public UPBGFxObject_ContainerBased
{
public:
	struct FString                                     msMoviePath;                                      		// 0x00A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57459 ];

		return pClassPointer;
	};

	bool _Initialize ( );
};

UClass* UPBGFxBackground::pClassPointer = NULL;

// Class PlanBGame.PBGFxBackground_CharacterCreation
// 0x0000 (0x00AC - 0x00AC)
class UPBGFxBackground_CharacterCreation : public UPBGFxBackground
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57464 ];

		return pClassPointer;
	};

};

UClass* UPBGFxBackground_CharacterCreation::pClassPointer = NULL;

// Class PlanBGame.PBGFxBackground_CharacterSelection
// 0x0000 (0x00AC - 0x00AC)
class UPBGFxBackground_CharacterSelection : public UPBGFxBackground
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57466 ];

		return pClassPointer;
	};

};

UClass* UPBGFxBackground_CharacterSelection::pClassPointer = NULL;

// Class PlanBGame.PBGFxBackground_CharacterShop
// 0x0000 (0x00AC - 0x00AC)
class UPBGFxBackground_CharacterShop : public UPBGFxBackground
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57468 ];

		return pClassPointer;
	};

};

UClass* UPBGFxBackground_CharacterShop::pClassPointer = NULL;

// Class PlanBGame.PBGFxBackground_Login
// 0x0000 (0x00AC - 0x00AC)
class UPBGFxBackground_Login : public UPBGFxBackground
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57470 ];

		return pClassPointer;
	};

};

UClass* UPBGFxBackground_Login::pClassPointer = NULL;

// Class PlanBGame.PBGFxBackground_MainMenu
// 0x0000 (0x00AC - 0x00AC)
class UPBGFxBackground_MainMenu : public UPBGFxBackground
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57472 ];

		return pClassPointer;
	};

};

UClass* UPBGFxBackground_MainMenu::pClassPointer = NULL;

// Class PlanBGame.PBGFxBackground_ServiceShop
// 0x0000 (0x00AC - 0x00AC)
class UPBGFxBackground_ServiceShop : public UPBGFxBackground
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57474 ];

		return pClassPointer;
	};

};

UClass* UPBGFxBackground_ServiceShop::pClassPointer = NULL;

// Class PlanBGame.PBGFxBackground_WeaponShop
// 0x0000 (0x00AC - 0x00AC)
class UPBGFxBackground_WeaponShop : public UPBGFxBackground
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57476 ];

		return pClassPointer;
	};

};

UClass* UPBGFxBackground_WeaponShop::pClassPointer = NULL;

// Class PlanBGame.PBGFxMovie_Background
// 0x000C (0x0200 - 0x01F4)
class UPBGFxMovie_Background : public UPBGFxMovie_Layered
{
public:
	class UMaterialInstance*                           mBackgroundMaterial;                              		// 0x01F4 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   mBackgroundMaterialInstance;                      		// 0x01F8 (0x0004) [0x0000000000000000]              
	unsigned long                                      mApplyMaterial : 1;                               		// 0x01FC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57482 ];

		return pClassPointer;
	};

	void UpdatePreviewActorsMaterial ( class UTextureRenderTarget2D* BackgroundTexture );
	class AActor* findActorByName ( struct FName actorName );
	void _CreateRenderTarget ( struct FVector2D* ViewportSize );
	void eventTick ( float fDelta );
	void OnClose ( );
	bool Start ( unsigned long StartPaused );
};

UClass* UPBGFxMovie_Background::pClassPointer = NULL;

// Class PlanBGame.PBUICache
// 0x000C (0x0048 - 0x003C)
class UPBUICache : public UObject
{
public:
	TArray< class UObject* >                           m_UICache;                                        		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57596 ];

		return pClassPointer;
	};

};

UClass* UPBUICache::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_HUD_DeathCam
// 0x0038 (0x00D8 - 0x00A0)
class UPBGFxObject_HUD_DeathCam : public UPBGFxObject_ContainerBased
{
public:
	struct FString                                     mAvatarImage;                                     		// 0x00A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     mOpponentName;                                    		// 0x00AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     mRank;                                            		// 0x00B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      mShowNemesis : 1;                                 		// 0x00C4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      mShowNewNemesis : 1;                              		// 0x00C4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	int                                                mHealth;                                          		// 0x00C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       mKiller;                                          		// 0x00CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBPlayerReplicationInfo*                    mKillerPRI;                                       		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   m_NemesisSoundCue;                                		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57771 ];

		return pClassPointer;
	};

	void _Release ( );
	void CallSetOpponentData ( struct FString AvatarImage, struct FString oppName, struct FString Rank, unsigned long showNemesis, unsigned long showNewNemesis, int Health );
	void eventTick ( float fDelta );
	void updateData ( );
	void Configure ( );
	bool _Initialize ( );
};

UClass* UPBGFxObject_HUD_DeathCam::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_HalfTime
// 0x004C (0x00EC - 0x00A0)
class UPBGFxObject_HalfTime : public UPBGFxObject_HalfTime_Base
{
public:
	class UGFxObject*                                  mChatHolder;                                      		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mChatHolderText;                                  		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                lastProcessedMsgId;                               		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                msgColorGameMaster;                               		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                msgColorSameTeam;                                 		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                msgColorOposingTeam;                              		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                msgColorSelf;                                     		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                friendlyColour;                                   		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                enemyColour;                                      		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                playerColour;                                     		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_sendChatMsg__Delegate;                   		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onfocusIn__Delegate;                     		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onfocusOut__Delegate;                    		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57776 ];

		return pClassPointer;
	};

	void eventTick ( float fDelta );
	void CallAddMsg ( struct FString PlayerName, int PlayerColor, struct FString msg );
	void Call_CloseMovie ( );
	void Call_UpdateTimer ( int nTimer );
	void Call_SetupScene ( struct FTHalfTimeStruct structure );
	void _Release ( );
	bool _Initialize ( );
	void sendMsg ( );
	void Set_onfocusOut_Delegate ( struct FScriptDelegate F );
	void Unreal_onfocusOut ( );
	void Set_onfocusIn_Delegate ( struct FScriptDelegate F );
	void Unreal_onfocusIn ( );
	void Set_sendChatMsg_Delegate ( struct FScriptDelegate F );
	void Unreal_sendChatMsg ( );
};

UClass* UPBGFxObject_HalfTime::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_HalfTime_SND
// 0x0064 (0x0104 - 0x00A0)
class UPBGFxObject_HalfTime_SND : public UPBGFxObject_HalfTime_Base
{
public:
	class UGFxObject*                                  mChatHolder;                                      		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mChatHolderText;                                  		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                lastProcessedMsgId;                               		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                msgColorGameMaster;                               		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                msgColorSameTeam;                                 		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                msgColorOposingTeam;                              		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                msgColorSelf;                                     		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                friendlyColour;                                   		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                enemyColour;                                      		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                playerColour;                                     		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     sIndicatorAttack;                                 		// 0x00C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sIndicatorDefend;                                 		// 0x00D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_sendChatMsg__Delegate;                   		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onfocusIn__Delegate;                     		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onfocusOut__Delegate;                    		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57781 ];

		return pClassPointer;
	};

	void eventTick ( float fDelta );
	void CallAddMsg ( struct FString PlayerName, int PlayerColor, struct FString msg );
	void Call_CloseMovie ( );
	void Call_UpdateTimer ( int nTimer );
	void Call_SetupScene ( struct FTHalfTimeStructSND structure );
	void _Release ( );
	bool _Initialize ( );
	void sendMsg ( );
	void Set_onfocusOut_Delegate ( struct FScriptDelegate F );
	void Unreal_onfocusOut ( );
	void Set_onfocusIn_Delegate ( struct FScriptDelegate F );
	void Unreal_onfocusIn ( );
	void Set_sendChatMsg_Delegate ( struct FScriptDelegate F );
	void Unreal_sendChatMsg ( );
};

UClass* UPBGFxObject_HalfTime_SND::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_Foreground
// 0x0010 (0x00B0 - 0x00A0)
class UPBGFxObject_Foreground : public UPBGFxObject_ContainerBased
{
public:
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_show__Delegate;                          		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57836 ];

		return pClassPointer;
	};

	void _show ( unsigned long bShow );
	void Set_show_Delegate ( struct FScriptDelegate F );
	void Unreal_show ( unsigned long bShow );
	bool _Initialize ( );
};

UClass* UPBGFxObject_Foreground::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_Notifications
// 0x0024 (0x00C4 - 0x00A0)
class UPBGFxObject_Notifications : public UPBGFxObject_ContainerBased
{
public:
	struct FScriptDelegate                             __Unreal_onNextClick__Delegate;                   		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onCloseAllClick__Delegate;               		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onAbortClick__Delegate;                  		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57863 ];

		return pClassPointer;
	};

	void CallSetNotificationDetailData ( struct FString Headline, struct FString eventText, struct FString iconPath );
	void callAddDetailNotificationCount ( int NewE );
	void callShowDetailNotification ( int Count );
	void CallFadeOut ( float Time );
	void CallSetNotificationMessage ( struct FString Text );
	void CallSetNotificationData ( struct FString Headline, struct FString eventText, struct FString iconPath );
	void _Release ( );
	bool _Initialize ( );
	void Set_onAbortClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onAbortClick ( );
	void Set_onCloseAllClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onCloseAllClick ( );
	void Set_onNextClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onNextClick ( );
};

UClass* UPBGFxObject_Notifications::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_ServerBrowser
// 0x0154 (0x0254 - 0x0100)
class UPBGFxObject_ServerBrowser : public UPBGFxObject_ShopClass
{
public:
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x0100 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0104 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_errorcode;                                      		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_CurrentRequestId;                               		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_laststatus;                                     		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_lastseconds;                                    		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FGuid                                       m_gameServerId;                                   		// 0x011C (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     m_reason;                                         		// 0x012C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_url;                                            		// 0x0138 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPBMapList*                                  pMapList;                                         		// 0x0144 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCharacterRotator*                         mRotator;                                         		// 0x0148 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x014C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fNextServerStatusUpdateTime;                      		// 0x0150 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fSecondsBetweenServerStatusUpdates;               		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_MaxPing;                                        		// 0x0158 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      mbOpenAnimationFinished : 1;                      		// 0x015C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      ShowFullServerCfg : 1;                            		// 0x015C (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      PasswordServersCfg : 1;                           		// 0x015C (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	struct FString                                     ServerPassword;                                   		// 0x0160 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UOnlineGameSearch*                           GameSearch;                                       		// 0x016C (0x0004) [0x0000000000000000]              
	struct FString                                     ServerNameCheck;                                  		// 0x0170 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                mnAvailabilityRequestId;                          		// 0x017C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ServerStatus;                                     		// 0x0180 (0x0001) [0x0000000000000000]              
	struct FString                                     MaxPingCfg;                                       		// 0x0184 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                boostedServersCfg;                                		// 0x0190 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                friendlyFireServersCfg;                           		// 0x0194 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                lobbyServersCfg;                                  		// 0x0198 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     MapNameCfg;                                       		// 0x019C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ServerRegionCfg;                                  		// 0x01A8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                RegionIdCfg;                                      		// 0x01B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                RegionCreateCfg;                                  		// 0x01B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                AutoRegionId;                                     		// 0x01BC (0x0004) [0x0000000000000000]              
	TArray< struct FTPBServerDetail >                  ServerList;                                       		// 0x01C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UGFxObject*                                  mCreateServerPanel;                               		// 0x01CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_onOpenAnimationComplete__Delegate;       		// 0x01D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onHideForeground__Delegate;              		// 0x01DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_serverNameUpdated__Delegate;             		// 0x01E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __quitServerBrowser__Delegate;                    		// 0x01F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SetNewRegionCreate__Delegate;                   		// 0x0200 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Refresh__Delegate;                              		// 0x020C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ApplySearchFilter__Delegate;                    		// 0x0218 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __cancelSearch__Delegate;                         		// 0x0224 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ServerCreate__Delegate;                         		// 0x0230 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __JoinServer__Delegate;                           		// 0x023C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __cancelJoinGame__Delegate;                       		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57980 ];

		return pClassPointer;
	};

	int CloseActiveWindow ( );
	bool HandleInputKeyF ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
	struct FString removeSpecialChar ( struct FString Str );
	struct FString GetPlayerName ( );
	struct FString getGameType ( struct FString GameType );
	void ASSetRegionList ( TArray< struct FPBRegionsContainer > RegionList, struct FString DefaultRegion, int SelectedRegionId, int AutoRegion );
	void SetRegionList ( );
	void ASsetJoinServer ( unsigned long Result );
	void NotifyConnectionError ( struct FString Message, struct FString Title );
	struct FString BuildJoinURL ( struct FString ResolvedConnectionURL );
	void OnJoinGameComplete ( struct FName SessionName, unsigned long bSuccessful );
	void ProcessJoin ( int SelectedIndex );
	void SetJoinServerDelegate ( struct FScriptDelegate F );
	void SetCancelJoinDelegate ( struct FScriptDelegate F );
	void finishCancelJoin ( );
	void cancelJoinGame ( );
	void JoinServer ( int SelectedIndex, struct FString GamePassword );
	void ConnectToGame ( );
	void ASsetCreateServerResult ( unsigned long Result );
	void setCreateServerResult ( unsigned long Result, struct FString Message );
	void eventTick ( float fDelta );
	void OnCancelGameServerRequestDone ( int requestId, int ErrorCode );
	void OnGetGameServerStatusDone ( int requestId, int ErrorCode, struct FGuid gameServerId, struct FString URL, int Status );
	void UpdateGameServerStatus ( );
	void OnRequestGameServerDone ( int requestId, int ErrorCode, struct FGuid gameServerId );
	void SetServerCreateDelegate ( struct FScriptDelegate F );
	void ServerCreate ( struct FString Server, struct FString Password, int MaxPlayers, int SelectedRegion );
	void CreateOnlineGame ( int PlayerIndex, struct FString ServerName, struct FString Password, int MaxPlayers, int SelectedRegion );
	void FinishCancelSearch ( );
	void OnCancelSearchComplete ( unsigned long bWasSuccessful );
	void SetCancelSearchDelegate ( struct FScriptDelegate F );
	void cancelSearch ( );
	void finishSearchUI ( );
	void SetItems ( TArray< struct FTPBServerDetail > items );
	void updateItemList ( unsigned long bWasSuccessful );
	void OnFindOnlineGamesCompleteDelegate ( unsigned long bWasSuccessful );
	void OnUpdateServerItemComplete ( unsigned long bWasSuccessful );
	void RefreshServerList ( int InPlayerIndex, int MaxResults );
	void SetSearchFilterDelegate ( struct FScriptDelegate F );
	void UpdateFilter ( struct FString MaxPing, unsigned long showFullServer, unsigned long passwordServers, int boostedServers, int friendlyFireServers, int lobbyServers, struct FString MapName, int ServerRegion );
	struct FString GetLocalizedMapName ( struct FString MapName );
	struct FString GetMapFromLocal ( struct FString LocalizedMapName );
	void ApplySearchFilter ( struct FString MaxPing, unsigned long showFullServer, unsigned long passwordServers, int boostedServers, int friendlyFireServers, int lobbyServers, struct FString LocalizedMapName, int ServerRegion );
	void PopulateFilter ( struct FString MaxPing, unsigned long showFullServer, unsigned long passwordServers, int boostedServers, int friendlyFireServers, int lobbyServers, struct FString MapName, int ServerRegion );
	void LoadFilters ( );
	void SetRefreshDelegate ( struct FScriptDelegate F );
	void InitialRefresh ( );
	void RefreshServerBrowser ( );
	void Refresh ( );
	void SetMapList ( TArray< struct FString > maps );
	void SetGameTypeList ( TArray< struct FString > GameTypes );
	void _Release ( );
	void _SetupCharacter ( int nPreset );
	void setDefaultPasswordText ( struct FString txt );
	void setDefaultSearchText ( struct FString txt );
	void SetNewRegionCreateDelegate ( struct FScriptDelegate F );
	void SetNewRegionCreate ( int SelectedRegionId );
	void SetQuitBrowserDelegate ( struct FScriptDelegate F );
	void quitServerBrowser ( );
	void ForceQuit ( );
	void OnConnectionStatusChange ( unsigned char ConnectionStatus );
	bool _Initialize ( );
	void OnIsValidNameDone ( int requestId, int ErrorCode, unsigned long Valid );
	bool startCheckingServerName ( struct FString sName );
	void _checkServerName ( );
	void _serverNameUpdated ( struct FString ServerName );
	void Set_serverNameUpdated_Delegate ( struct FScriptDelegate F );
	void Unreal_serverNameUpdated ( struct FString ServerName );
	void _onHideForeground ( );
	void Set_onHideForeground_Delegate ( struct FScriptDelegate F );
	void Unreal_onHideForeground ( );
	void _onOpenAnimationComplete ( );
	void Set_onOpenAnimationComplete_Delegate ( struct FScriptDelegate F );
	void Unreal_onOpenAnimationComplete ( );
};

UClass* UPBGFxObject_ServerBrowser::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_MortarMinimap
// 0x0038 (0x00D8 - 0x00A0)
class UPBGFxObject_MortarMinimap : public UPBGFxObject_ContainerBased
{
public:
	struct FVector2D                                   map_topL;                                         		// 0x00A0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   map_bottomR;                                      		// 0x00A8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              initTime;                                         		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      alphaSetToZero : 1;                               		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              enemyDisplayTime;                                 		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              enemyFadeoutTime;                                 		// 0x00BC (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __Unreal_CanDropMortarHere__Delegate;             		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_DropMortarAt__Delegate;                  		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58010 ];

		return pClassPointer;
	};

	void CallSetEnemyAlpha ( float newAlpha );
	void CallDownMortarFromMap ( );
	void CallUpdateCoordinates ( struct FString newCoordinates );
	void CallUpdatePlayerMarker ( int Id, float XPos, float YPos );
	void CallRemovePlayerMarker ( int Id );
	void CallAddPlayerMarker ( int Id, unsigned long bFriendly, unsigned long bPlayer, unsigned long bNemesis, float XPos, float YPos );
	void _Release ( );
	bool _Initialize ( );
	void eventTick ( float fDelta );
	void DropMortarAt ( float XPos, float YPos );
	void Set_DropMortarAt_Delegate ( struct FScriptDelegate F );
	void Unreal_DropMortarAt ( float XPos, float YPos );
	bool _CanDropMortarHere ( float XPos, float YPos );
	void Set_CanDropMortarHere_Delegate ( struct FScriptDelegate F );
	bool Unreal_CanDropMortarHere ( float XPos, float YPos );
};

UClass* UPBGFxObject_MortarMinimap::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_GlobalBasket
// 0x006C (0x010C - 0x00A0)
class UPBGFxObject_GlobalBasket : public UPBGFxObject_ContainerBased
{
public:
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCoinsRequest;                                  		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCreditsRequest;                                		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCoins;                                         		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCredits;                                       		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bPurchaseFinished : 1;                          		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bGotoInventory : 1;                             		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bRefreshMoneyCounts : 1;                        		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_onPurchase__Delegate;                    		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onClickRemove__Delegate;                 		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_updateBasket__Delegate;                  		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onFilterClick__Delegate;                 		// 0x00DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_changeCurrency__Delegate;                		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_changeCurrencyForItems__Delegate;        		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_getPremiumDiscount__Delegate;            		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58051 ];

		return pClassPointer;
	};

	void Call_clearSelected ( );
	void Call_showProcessing ( unsigned long bShow );
	void Call_setReservedName ( struct FString NewName );
	void Call_showRemoveItemsPopup ( );
	class UPBGlobalBasket* _GetGlobalBasket ( );
	int SortSkills ( struct FTPBCharacterShopOffer A, struct FTPBCharacterShopOffer B );
	int SortWeaponMods ( struct FTPBCharacterShopOffer A, struct FTPBCharacterShopOffer B );
	int SortWeapons ( struct FTPBCharacterShopOffer A, struct FTPBCharacterShopOffer B );
	int SortServices ( struct FTPBCharacterShopOffer A, struct FTPBCharacterShopOffer B );
	int compareOffers ( struct FTPBCharacterShopOffer A, struct FTPBCharacterShopOffer B );
	void sortOffers ( TArray< struct FTPBCharacterShopOffer >* offers );
	void _Release ( );
	void _OnDeleteItemFromBasketDone ( int requestId, int ErrorCode );
	void _OnCheckoutBasketDone ( int requestId, int ErrorCode );
	void _OnGetBasketDone ( int requestId, int ErrorCode, int amountBasketItems, TArray< struct FPBBasketItem > basketItems );
	void _OnGetAmountDone ( int requestId, int ErrorCode, int Amount );
	void UpdateBalance ( );
	void eventTick ( float fDelta );
	bool _Initialize ( );
	void SetBalance ( int real, int Virtual, int style );
	void SetPurchaseFinished ( struct FString sError, unsigned long bPartialPurchase, unsigned long bGotoInventory );
	void SetItems ( TArray< struct FTPBCharacterShopOffer > items );
	void _changeCurrencyForItems ( TArray< struct FString > offerguidstrings, TArray< unsigned long > offercurrencies );
	int _getPremiumDiscount ( );
	void Set_getPremiumDiscount_Delegate ( struct FScriptDelegate F );
	int Unreal_getPremiumDiscount ( );
	void Set_changeCurrencyForItems_Delegate ( struct FScriptDelegate F );
	void Unreal_changeCurrencyForItems ( TArray< struct FString > offerguids, TArray< unsigned long > offercurrencies );
	void Set_changeCurrency_Delegate ( struct FScriptDelegate F );
	void Unreal_changeCurrency ( struct FString OfferGuid, unsigned long credits );
	void Set_onFilterClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onFilterClick ( TArray< struct FString > filters );
	void Set_updateBasket_Delegate ( struct FScriptDelegate F );
	void Unreal_updateBasket ( );
	void Set_onClickRemove_Delegate ( struct FScriptDelegate F );
	void Unreal_onClickRemove ( struct FString OfferGuid );
	void Set_onPurchase_Delegate ( struct FScriptDelegate F );
	void Unreal_onPurchase ( TArray< struct FString > items, unsigned long gotoInventory );
};

UClass* UPBGFxObject_GlobalBasket::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_CharacterSelection
// 0x0088 (0x0184 - 0x00FC)
class UPBGFxObject_CharacterSelection : public UPBGFxObject_MusicContainer
{
public:
	class UMaterialInterface*                          mNewCharacterMaterial;                            		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastSelectedCharacterIndex;                       		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FGuid                                       LastSelectedCharacterGuid;                        		// 0x0104 (0x0010) [0x0000000000004000]              ( CPF_Config )
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     msCurrentArea;                                    		// 0x0118 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      m_bOpenAnimationHasBeenPlayed : 1;                		// 0x0124 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bProfilesHaveBeenLoaded : 1;                    		// 0x0124 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class UPBCharacterRotator*                         mRotator;                                         		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCameraMover*                              mMover;                                           		// 0x012C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct UPBGFxObject_CharacterSelection_FTCharacterProfileInfo > mCharacterProfileInfoArray;                       		// 0x0130 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onOpenAnimationComplete__Delegate;       		// 0x013C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __unrealOnDeleteClick__Delegate;                  		// 0x0148 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __unrealOnEnterClick__Delegate;                   		// 0x0154 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __unrealLogout__Delegate;                         		// 0x0160 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __unrealOnAreaClick__Delegate;                    		// 0x016C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __unrealOnAreaRollOver__Delegate;                 		// 0x0178 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58058 ];

		return pClassPointer;
	};

	void _Release ( );
	void _ClearDelegates ( );
	void _ClearTimers ( );
	void OnPBManagerLogoutFinished ( struct FTPBItemShopResult_OnLogoutDone* Result );
	void _OnGetSubscriptionModeDone ( struct FTPBItemShopResult_OnGetSubscriptionModeDone* Result );
	void LogoutFromPBManager ( );
	void OnLogoutFromGamespyCompleted ( unsigned long bWasSuccessful );
	void LogoutFromGamespy ( );
	bool _CreateCharacter ( );
	bool _DeleteCharacter ( );
	void ControlBar_showCharacterParams ( unsigned long bShow );
	void ControlBar_updateCharacterDetails ( class UPBCustomChar_MenuData* CharData );
	void _updateStates ( );
	bool _SelectCharacter ( int nIndex, unsigned long bSkipAnimation );
	void FillCharacterProfileInfoArray ( );
	void OnGetCharacterProfileDone ( int requestId, int ErrorCode, struct FPBCharacterProfile CharacterProfile );
	bool _LoadCharacter ( int nIndex );
	void _LoadNextCharacter ( );
	void _StartLoadingCharacters ( );
	void _CreateDefaultCharacters ( );
	void OnGettingMaxNumberProfilesDone ( int requestId, int ErrorCode, int maxNumberProfiles );
	void StartGettingMaxNumberOfProfiles ( );
	void OnGetProfilesDone ( int requestId, int ErrorCode, TArray< struct FPBProfile > Profiles );
	bool LoadPBManagerProfiles ( );
	void SetLoginError ( struct FString Error );
	void setCriticalError ( int ErrorCode, struct FString Error );
	bool _Initialize ( );
	void _OnGetAmountDone ( int requestId, int ErrorCode, int Amount );
	int _GetCharacterIndexByGuid ( struct FGuid CharGuid );
	void SetOnAreaClickDelegate ( struct FScriptDelegate F );
	void SetOnAreaRollOverDelegate ( struct FScriptDelegate F );
	void SetLogoutDelegate ( struct FScriptDelegate F );
	void SetOnEnterClickDelegate ( struct FScriptDelegate F );
	void SetOnDeleteClickDelegate ( struct FScriptDelegate F );
	void SwitchState ( struct FString sState );
	void EnableMainPlayerScreen ( );
	void OnSelectProfileDone ( int requestId, int ErrorCode, struct FGuid ProfileId, struct FString gameSpyToken, struct FString gameSpyChallenge );
	bool StartSelectProfile ( );
	void Call_updateStates ( TArray< struct UPBGFxObject_CharacterSelection_FTPBCharacterSelection_State > states );
	void Call_updateLastRollover ( );
	void OnDeletionProfileDone ( int requestId, int ErrorCode, struct FGuid ProfileId );
	void unrealOnAreaRollOver ( struct FString sArea );
	void unrealOnAreaClick ( struct FString sArea );
	void unrealLogout ( );
	void unrealOnEnterClick ( );
	void unrealOnDeleteClick ( );
	void _onOpenAnimationComplete ( );
	void Set_onOpenAnimationComplete_Delegate ( struct FScriptDelegate F );
	void Unreal_onOpenAnimationComplete ( );
};

UClass* UPBGFxObject_CharacterSelection::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_CharacterCreation
// 0x0190 (0x0290 - 0x0100)
class UPBGFxObject_CharacterCreation : public UPBGFxObject_ShopClass
{
public:
	class UMaterialInterface*                          mNewCharacterMaterial;                            		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct UPBGFxObject_CharacterCreation_FTCharacterProfileInfo mCharacterProfileInfoArray[ 0x2 ];                		// 0x0108 (0x0050) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                mnAvatarIndex;                                    		// 0x0158 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCharacterRotator*                         mRotator;                                         		// 0x015C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mnAvailabilityRequestId;                          		// 0x0160 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      mbProfileSelected : 1;                            		// 0x0164 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      mbValidName : 1;                                  		// 0x0164 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      mbCharactersInited : 1;                           		// 0x0164 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bTimerExpired : 1;                                		// 0x0164 (0x0004) [0x0000000000000000] [0x00000008] 
	struct FString                                     m_CurrentGender;                                  		// 0x0168 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CharNameCheck;                                    		// 0x0174 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTCharInfo                                  mCharInfo;                                        		// 0x0180 (0x001C) [0x0000000000002000]              ( CPF_Transient )
	struct FTItems                                     mItems[ 0x2 ];                                    		// 0x019C (0x0028) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTHeadInfo                                  mHeads[ 0x2 ];                                    		// 0x01C4 (0x0078) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_updateCharacterRotation__Delegate;       		// 0x023C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onOpenAnimationComplete__Delegate;       		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __unrealOnNameChanged__Delegate;                  		// 0x0254 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __unrealOnRaceChanged__Delegate;                  		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __unrealOnCreateClick__Delegate;                  		// 0x026C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __unrealOnColorChanged__Delegate;                 		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onSetCharacter__Delegate;                		// 0x0284 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58059 ];

		return pClassPointer;
	};

	void OnGetDefaultInventoryDone ( int requestId, int ErrorCode, TArray< struct FPBItem > items );
	void _startDefaultItemsUpdate ( );
	void _updateAvatar ( );
	void OnIsCharacterNameAvailableDone ( int requestId, int ErrorCode, unsigned long available );
	bool startCheckingCharacterName ( struct FString sName );
	void eventTick ( float fDelta );
	void _Release ( );
	class APBCustomChar_Preview* GetPreviewActor ( int nActorID );
	void _initCharacterData ( );
	void _fillHeadList ( );
	bool _Initialize ( );
	void setUnrealOnNameChangedDelegate ( struct FScriptDelegate F );
	void setUnrealOnRaceChangedDelegate ( struct FScriptDelegate F );
	void setUnrealOnCreateClickDelegate ( struct FScriptDelegate F );
	void setUnrealOnColorChangedDelegate ( struct FScriptDelegate F );
	void _onSetCharacter ( struct FString Char );
	void Set_onSetCharacter_Delegate ( struct FScriptDelegate F );
	void Unreal_onSetCharacter ( struct FString sChar );
	void unrealOnColorChanged ( int Index );
	void onItemPresetChangeDone ( int requestId, int ErrorCode );
	void _doItemPresetChange ( );
	void OnGetCharacterProfileDone ( int requestId, int ErrorCode, struct FPBCharacterProfile CharacterProfile );
	bool _startGetCharacterProfile ( );
	void OnSelectProfileDone ( int requestId, int ErrorCode, struct FGuid ProfileId, struct FString gameSpyToken, struct FString gameSpyChallenge );
	bool _startSelectProfile ( );
	void _setCharacterCreated ( );
	void OnCreateProfileDone ( int requestId, int ErrorCode, struct FGuid InProfileId );
	void unrealOnCreateClick ( );
	void unrealOnRaceChanged ( int Index );
	void _checkCharName ( );
	void _CharNameUpdated ( struct FString charName );
	void unrealOnNameChanged ( );
	void Set_onOpenAnimationComplete_Delegate ( struct FScriptDelegate F );
	void Unreal_onOpenAnimationComplete ( );
	void Set_updateCharacterRotation_Delegate ( struct FScriptDelegate F );
	void Unreal_updateCharacterRotation ( float deltaX, float deltaY );
};

UClass* UPBGFxObject_CharacterCreation::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_AvatarSelection
// 0x0010 (0x00B0 - 0x00A0)
class UPBGFxObject_AvatarSelection : public UPBGFxObject_ContainerBased
{
public:
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __onClickItem__Delegate;                          		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58060 ];

		return pClassPointer;
	};

	void _Release ( );
	void UpdateList ( );
	bool _Initialize ( );
	void setOnClickItemDelegate ( struct FScriptDelegate F );
	void onClickItem ( int nIndex );
};

UClass* UPBGFxObject_AvatarSelection::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_MainMenu
// 0x0074 (0x0170 - 0x00FC)
class UPBGFxObject_MainMenu : public UPBGFxObject_MusicContainer
{
public:
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCharacterRotator*                         mRotator;                                         		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCameraMover*                              mMover;                                           		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      mbAnimationFinished : 1;                          		// 0x0108 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                maxHeatBonusAllowed;                              		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_onOpenAnimationComplete__Delegate;       		// 0x0110 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onSkillSelect__Delegate;                 		// 0x011C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_updateCharacterRotation__Delegate;       		// 0x0128 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onPresetClick__Delegate;                 		// 0x0134 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onShopClick__Delegate;                   		// 0x0140 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onHideForeground__Delegate;              		// 0x014C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_getStyleBonusBoost__Delegate;            		// 0x0158 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_getStyleStartHeat__Delegate;             		// 0x0164 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58061 ];

		return pClassPointer;
	};

	void UpdateStyleInfo ( int inCoolness );
	void Call_UpdateStyleValues ( int newStyle, int newEndOfMatchBonus, int newBonusHeat );
	void Call_setPresets ( TArray< struct FTPBPreset > Presets );
	void Call_setCharacterInfo ( struct FTPBCharacterInfo Info );
	void _OnGetLatestNewsDone ( int requestId, int ErrorCode, TArray< struct FPBNews > News );
	void _Release ( );
	void _SetupCharacter ( int nPreset );
	void updateCharacterDetails ( );
	void _OnGetCharacterProfileDone ( int requestId, int ErrorCode, struct FPBCharacterProfile CharacterProfile );
	void EnableGSServices ( unsigned long bEnable );
	void OnConnectionStatusChange ( unsigned char ConnectionStatus );
	void _onGetMarketCategoryOffersDone ( TArray< struct FPBOffer >* offers );
	bool _Initialize ( );
	struct FString _getStyleStartHeat ( );
	void Set_getStyleStartHeat_Delegate ( struct FScriptDelegate F );
	struct FString Unreal_getStyleStartHeat ( );
	struct FString _getStyleBonusBoost ( );
	void Set_getStyleBonusBoost_Delegate ( struct FScriptDelegate F );
	struct FString Unreal_getStyleBonusBoost ( );
	void _onHideForeground ( );
	void Set_onHideForeground_Delegate ( struct FScriptDelegate F );
	void Unreal_onHideForeground ( );
	void updatePresets ( );
	void setPresetFocus ( int nIndex );
	void _onPresetClick ( struct FString sButtonName );
	void Set_onShopClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onShopClick ( struct FString sButtonName );
	void _onOpenAnimationComplete ( );
	void Set_onPresetClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onPresetClick ( struct FString sButtonName );
	void Set_updateCharacterRotation_Delegate ( struct FScriptDelegate F );
	void Unreal_updateCharacterRotation ( float deltaX, float deltaY );
	void _onSkillSelect ( int nIndex );
	void Set_onSkillSelect_Delegate ( struct FScriptDelegate F );
	void Unreal_onSkillSelect ( int nIndex );
	void Set_onOpenAnimationComplete_Delegate ( struct FScriptDelegate F );
	void Unreal_onOpenAnimationComplete ( );
};

UClass* UPBGFxObject_MainMenu::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_CharacterDeletion
// 0x0010 (0x00B0 - 0x00A0)
class UPBGFxObject_CharacterDeletion : public UPBGFxObject_ContainerBased
{
public:
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __onOKClick__Delegate;                            		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58062 ];

		return pClassPointer;
	};

	void _Release ( );
	void OnDeletionProfileDone ( int requestId, int ErrorCode, struct FGuid ProfileId );
	void StartDeleteCharacter ( struct FGuid nProfileID );
	bool _Initialize ( );
	void Call_setSelectedCharacterName ( struct FString sName );
	void SetOnOKClickDelegate ( struct FScriptDelegate F );
	void onOKClick ( class UGFxObject* Object );
};

UClass* UPBGFxObject_CharacterDeletion::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_CriticalError
// 0x0018 (0x00B8 - 0x00A0)
class UPBGFxObject_CriticalError : public UPBGFxObject_ContainerBased
{
public:
	struct FString                                     ErrorMessage;                                     		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __unrealOnCloseClick__Delegate;                   		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58063 ];

		return pClassPointer;
	};

	void _Release ( );
	void OnPingDone ( struct FTPBItemShopResult_OnPingDone* Result );
	bool _Initialize ( );
	void callUnrealLoadLogin ( );
	void setUnrealOnCloseClickDelegate ( struct FScriptDelegate F );
	void unrealOnCloseClick ( int nIndex );
};

UClass* UPBGFxObject_CriticalError::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_Start
// 0x0000 (0x00A0 - 0x00A0)
class UPBGFxObject_Start : public UPBGFxObject_ContainerBased
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58064 ];

		return pClassPointer;
	};

	bool _Initialize ( );
};

UClass* UPBGFxObject_Start::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_Lobby
// 0x0024 (0x00C4 - 0x00A0)
class UPBGFxObject_Lobby : public UPBGFxObject_ContainerBased
{
public:
	int                                                mnPrevTeamIndex;                                  		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      mbIsLobbyAdmin : 1;                               		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      mbConsolidatedLobby : 1;                          		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class UGFxObject*                                  mSharedServerContainer;                           		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mSetupContainer;                                  		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mSharedContainer;                                 		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mTeamsPanel;                                      		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mFaction0;                                        		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mFaction1;                                        		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mTempFaction;                                     		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58065 ];

		return pClassPointer;
	};

	void UpdateServerContainer ( class APBPersistentGameReplicationInfo** pLobbyInfo );
	void UpdatePlayerList ( class APBPersistentGameReplicationInfo* pLobbyInfo );
	void asShowAllPlayers ( unsigned long bShow );
	void asAddPlayer ( struct FString sPlayerName, float fLoadingProgress );
	void asUpdateControls ( );
	void asInitArrays ( );
	void asShowTabButtons ( unsigned long bShow );
	void InitialUpdate ( );
	void eventTick ( float fDelta );
	void _Release ( );
	bool _Initialize ( );
};

UClass* UPBGFxObject_Lobby::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_PlayerSettings
// 0x00E8 (0x0178 - 0x0090)
class UPBGFxObject_PlayerSettings : public UPBGFxObject_Tickable
{
public:
	TArray< struct FPBSubmenuInfo >                    rSubMenus;                                        		// 0x0090 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UPBGFxObject_Tickable*                       mCurrentScene;                                    		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      eCurrentSceneType;                                		// 0x00A0 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  mSceneContainer;                                  		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsDirty : 1;                                     		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCanStartVote : 1;                                		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bCanSwitchTeam : 1;                               		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class UGFxObject*                                  mBackgroundContainer;                             		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iRepeatMap;                                       		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iNewMap;                                          		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iNewSettings;                                     		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPlayerVote;                                      		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iDisplayedTeam;                                   		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     SubMenuPath;                                      		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SceneContainerPath;                               		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FactionIconPath;                                  		// 0x00DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FactionIconResource;                              		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     NextMatchVotePanelName;                           		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture*                                    factionTexture;                                   		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              factionTextureHeight;                             		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              factionTextureWidth;                              		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FTextureCoordinates                         CTFCoordinates;                                   		// 0x010C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FTextureCoordinates                         SyndicateCoordinates;                             		// 0x011C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FTextureCoordinates                         SpectatorCoordinates;                             		// 0x012C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     prevMapName;                                      		// 0x013C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSceneClosed__Delegate;                        		// 0x0148 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __PreStateChanged__Delegate;                      		// 0x0154 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __PostStateChanged__Delegate;                     		// 0x0160 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnNextMatchVoteChanged__Delegate;               		// 0x016C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58066 ];

		return pClassPointer;
	};

	void _Release ( );
	void flashPostStateChanged ( struct FString NewState );
	void flashPreStateChanged ( struct FString NewState );
	void flashOnSceneClosed ( );
	void flashOnNextMatchVoteChanged ( int myVote );
	void InitSubMenu ( );
	void SetPostStateChangedDelegate ( struct FScriptDelegate F );
	void SetPreStateChangedDelegate ( struct FScriptDelegate F );
	void SetOnNextMatchVoteChanged ( struct FScriptDelegate F );
	void SetOnSceneClosed ( struct FScriptDelegate F );
	void ChangeState ( struct FString NewState );
	void CallSetLevelBackgroundImage ( struct FString newImage );
	void UpdateNextMatchVotePanel ( );
	void SetCanSwitchTeam ( unsigned long CanSwitchTeam );
	bool CanSwitchTeam ( );
	void SetCanStartPassiveVote ( unsigned long bCanStart );
	void SetCanStartVote ( unsigned long CanStartVote );
	bool CanStartVote ( );
	void UpdateNextMatchVotes ( );
	void Disconnect ( );
	bool GetTeamTextureCoordinates ( int iTeam, struct FTextureCoordinates* pCoords );
	void UpdateTeam ( );
	void giveFocus ( );
	void eventTick ( float fDelta );
	bool GetSubMenuInfoFromStateName ( struct FString StateName, struct FPBSubmenuInfo* pMenuInfo );
	bool GetSubMenuInfo ( unsigned char SceneType, struct FPBSubmenuInfo* pMenuInfo );
	void SetScene ( unsigned char SceneType );
	void SetServerName ( struct FString ServerName );
	bool _Initialize ( );
	void OnNextMatchVoteChanged ( int myVote );
	void PostStateChanged ( struct FString NewState );
	void PreStateChanged ( struct FString NewState );
	void OnSceneClosed ( );
};

UClass* UPBGFxObject_PlayerSettings::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_CharacterShop
// 0x01D4 (0x02D0 - 0x00FC)
class UPBGFxObject_CharacterShop : public UPBGFxObject_MusicContainer
{
public:
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FString >                           m_headCategories;                                 		// 0x0100 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            m_headItemTypes;                                  		// 0x010C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           m_upperbodyCategories;                            		// 0x0118 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            m_upperbodyItemTypes;                             		// 0x0124 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           m_lowerbodyCategories;                            		// 0x0130 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            m_lowerbodyItemTypes;                             		// 0x013C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            m_headTypes;                                      		// 0x0148 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            m_upperbodyTypes;                                 		// 0x0154 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            m_lowerbodyTypes;                                 		// 0x0160 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sCurrentCategory;                               		// 0x016C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      m_RequestIDs;                                     		// 0x0178 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBCharacterShopOffer >            m_Items;                                          		// 0x0184 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBCharacterShopOffer >            m_TemporaryItemsArray;                            		// 0x0190 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBCharacterShopOffer >            m_Colors;                                         		// 0x019C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBCharacterShopOffer >            m_TempColors;                                     		// 0x01A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBCharacterShopOffer >            m_ColorGroups;                                    		// 0x01B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBCharacterShopOffer >            m_Inventory;                                      		// 0x01C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FGuid                                       m_CurrentItem;                                    		// 0x01CC (0x0010) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nItemInfoRequest;                               		// 0x01DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_CurrentColorGroup;                              		// 0x01E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nArmAccessoriesPreset;                          		// 0x01E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nLegAccessoriesPreset;                          		// 0x01E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCharacterRotator*                         mRotator;                                         		// 0x01EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCameraMover*                              mMover;                                           		// 0x01F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bIgnoreConflicts : 1;                           		// 0x01F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      mbOpenAnimationComplete : 1;                      		// 0x01F4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      mbReadyForNavigation : 1;                         		// 0x01F4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	struct FTPBPotentialItem                           m_PotentialItem;                                  		// 0x01F8 (0x0024) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBCharacterShopOfferCache >       mItemsCache;                                      		// 0x021C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onHideForeground__Delegate;              		// 0x0228 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onPositionClick__Delegate;               		// 0x0234 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onOpenAnimationComplete__Delegate;       		// 0x0240 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_updateCharacterRotation__Delegate;       		// 0x024C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onItemRollOut__Delegate;                 		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onItemRemoved__Delegate;                 		// 0x0264 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onItemColorsRemoved__Delegate;           		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onCategorySelected__Delegate;            		// 0x027C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onfocusOut__Delegate;                    		// 0x0288 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onItemSelected__Delegate;                		// 0x0294 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onItemRollOver__Delegate;                		// 0x02A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onGroupRollOver__Delegate;               		// 0x02AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onGroupSelected__Delegate;               		// 0x02B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onItemEquipped__Delegate;                		// 0x02C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58067 ];

		return pClassPointer;
	};

	void Call_onRightClick ( );
	void Call_showRemoveItemsPopup ( );
	void Call_showUnequipItemsPopup ( );
	void _GetCategories ( unsigned char eCategory, TArray< struct FString >* categories, TArray< unsigned char >* itemTypes );
	unsigned char _ConvertCategory ( unsigned char eType );
	void OnBasketError ( int ErrorCode, struct FString sErrorMessage );
	class UPBGlobalBasket* _GetGlobalBasket ( );
	void _Release ( );
	void Call_setInitialCategory ( struct FString sCategory, struct FString sButtonName );
	bool _Initialize ( );
	void SetItemInfo ( struct FTPBUIItemInfo Info );
	void SetBasketQuantity ( int nQuantity );
	void SetColors ( TArray< struct FTPBCharacterShopOffer > Colors );
	void SetGroups ( TArray< struct FTPBCharacterShopOffer > Groups );
	void SetItems ( TArray< struct FTPBCharacterShopOffer > items );
	void SetLowerbodyCategories ( TArray< struct FString > sCategory );
	void SetUpperbodyCategories ( TArray< struct FString > sCategory );
	void SetHeadCategories ( TArray< struct FString > sCategory );
	void _TransferColors ( struct FGuid validItemId, TArray< struct FTPBCharacterShopOffer >* Colors );
	void Call_selectItem ( struct FString itemguidstring, struct FString colorguidstring );
	void Call_selectColor ( struct FString itemguidstring, struct FString colorguidstring );
	void _onGetItemOffersDone ( int requestId, int ErrorCode, TArray< struct FPBOffer > offers );
	void _SetActiveBodyPart ( struct FString sCategory );
	void _OnGetBasketDone ( int requestId, int ErrorCode, int amountBasketItems, TArray< struct FPBBasketItem > basketItems );
	void _OnGetCharacterProfileDone ( int requestId, int ErrorCode, struct FPBCharacterProfile CharacterProfile );
	void _NavigateToItem ( struct FGuid ItemGuid );
	void _onGetUniqueOffersDone ( int requestId, int ErrorCode, TArray< struct FPBOffer > offers );
	void _AddEmptyItem ( struct FGuid CategoryItemGuid, unsigned long bEquip, TArray< struct FTPBCharacterShopOffer >* items );
	void _ClearRequest ( int nRequest );
	void _ClearRequests ( );
	void _ImportCategoryItems ( struct FString sCategory );
	void _ImportColors ( struct FGuid itemId );
	void _UpdateItemsFlags ( );
	void _FilterColors ( int selectedGroup, TArray< struct FTPBCharacterShopOffer >* Colors, TArray< struct FTPBCharacterShopOffer >* filteredcolors );
	void _UpdateColorsFlags ( );
	int _SearchForTheCheapestItem ( TArray< struct FTPBCharacterShopOffer >* items );
	void _OnDeleteItemFromBasketDone ( int requestId, int ErrorCode );
	void _OnAddItemToBasketDone ( int requestId, int ErrorCode, struct FPBBasketItem basketItem );
	void _OnGetOfferDetailsDone ( int requestId, int ErrorCode, struct FGuid OfferId, struct FString offerDescription, struct FGuid itemId, struct FString itemDescription, int XpBoost, int creditBoost, int groupXpBoost, int groupIgcBoost );
	void _OnGetInventoryItemDetailsDone ( int requestId, int ErrorCode, struct FGuid itemId, struct FString itemDescription, int XpBoost, int creditBoost, int groupXpBoost, int groupIgcBoost, struct FGuid serialNumber, struct FPBDate purchaseDate, int condition, int maxCondition, int idealCondition, int timeInUse, int repairCostsCoins, int repairCostsCredits );
	void _AddConflictingInfo ( struct FGuid ItemGuid, struct FTPBUIItemInfo* Info );
	void _RequestItemInfo ( struct FGuid ItemGuid, struct FGuid ColorGuid );
	void _onOpenAnimationComplete ( );
	void _onItemEquipped ( struct FString offerstring, struct FString itemguidstring, struct FString colorguidstring );
	void ResolveConflicts ( );
	void Set_onItemEquipped_Delegate ( struct FScriptDelegate F );
	void Unreal_onItemEquipped ( struct FString offerstring, struct FString itemguidstring, struct FString colorguidstring );
	void _onGroupSelected ( int nIndex );
	void Set_onGroupSelected_Delegate ( struct FScriptDelegate F );
	void Unreal_onGroupSelected ( int nIndex );
	int _GetPreviewPreset ( struct FString sCategory );
	void _AssignNewLastSelected ( struct FString sCategory, int nGroup, struct FGuid ItemGuid, struct FGuid ColorGuid );
	void _onItemRollOver ( struct FString ItemGuidStr, struct FString colorguidstr );
	void _onGroupRollOver ( int nIndex, struct FString ItemGuidStr, struct FString colorguidstr );
	void Set_onGroupRollOver_Delegate ( struct FScriptDelegate F );
	void Unreal_onGroupRollOver ( int nIndex, struct FString ItemGuidStr, struct FString colorguidstr );
	void Set_onItemRollOver_Delegate ( struct FScriptDelegate F );
	void Unreal_onItemRollOver ( struct FString ItemGuidStr, struct FString colorguidstr );
	void _onItemSelected ( struct FString sItemGuid );
	void Set_onItemSelected_Delegate ( struct FScriptDelegate F );
	void Unreal_onItemSelected ( struct FString sItemGuid );
	void _ZoomCamera ( struct FString sGroup, int Speed );
	void _onFocusOut ( );
	void Set_onfocusOut_Delegate ( struct FScriptDelegate F );
	void Unreal_onfocusOut ( );
	void _onCategorySelected ( struct FString sGroup, struct FString sCategory );
	void Set_onCategorySelected_Delegate ( struct FScriptDelegate F );
	void Unreal_onCategorySelected ( struct FString sGroup, struct FString sCategory );
	void _onItemColorsRemoved ( struct FString sItemGuid );
	void Set_onItemColorsRemoved_Delegate ( struct FScriptDelegate F );
	void Unreal_onItemColorsRemoved ( struct FString sItemGuid );
	void _onItemRemoved ( struct FString sOfferGuid );
	void Set_onItemRemoved_Delegate ( struct FScriptDelegate F );
	void Unreal_onItemRemoved ( struct FString sOfferGuid );
	void _onItemRollOut ( );
	void Set_onItemRollOut_Delegate ( struct FScriptDelegate F );
	void Unreal_onItemRollOut ( );
	void Set_updateCharacterRotation_Delegate ( struct FScriptDelegate F );
	void Unreal_updateCharacterRotation ( float deltaX, float deltaY );
	void Set_onOpenAnimationComplete_Delegate ( struct FScriptDelegate F );
	void Unreal_onOpenAnimationComplete ( );
	void _onPositionClick ( struct FString buttonState );
	void Set_onPositionClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onPositionClick ( struct FString buttonState );
	void _onHideForeground ( );
	void Set_onHideForeground_Delegate ( struct FScriptDelegate F );
	void Unreal_onHideForeground ( );
};

UClass* UPBGFxObject_CharacterShop::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_WeaponShop
// 0x01CC (0x02C8 - 0x00FC)
class UPBGFxObject_WeaponShop : public UPBGFxObject_MusicContainer
{
public:
	TArray< struct FTPBWeaponShopOfferCache >          mItemsCache;                                      		// 0x00FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPBUIEquipModStruct                         m_TempEquipModStructure;                          		// 0x010C (0x0048) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UGFxObject*                                  m_RenameContainer;                                		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBNWeaponPreset*                            m_CurrentPreset;                                  		// 0x0158 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_CurrentPresetIndex;                             		// 0x015C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_LastPresetIndex;                                		// 0x0160 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FSWeaponCode                                m_CurrentWeaponCode;                              		// 0x0164 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     m_CurrentCategory;                                		// 0x0170 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_CurrentSubCategory;                             		// 0x017C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBCharacterShopOffer >            m_Items;                                          		// 0x0188 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBCharacterShopOffer >            m_RepairItems;                                    		// 0x0194 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBCharacterShopOffer >            m_TemporaryItemsArray;                            		// 0x01A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBCharacterShopOffer >            m_Inventory;                                      		// 0x01AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           m_PrimaryWeaponCategories;                        		// 0x01B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           m_PrimaryWeaponCategoriesTextures;                		// 0x01C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      m_GetOfferRequests;                               		// 0x01D0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_SelectedGroup;                                  		// 0x01DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPBCharacterRotator*                         mRotator;                                         		// 0x01E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCameraMover*                              mMover;                                           		// 0x01EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FTPBCharacterShopOffer >            m_Groups;                                         		// 0x01F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBCharacterShopOffer >            m_TemporaryGroupsArray;                           		// 0x01FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPBUILoadoutInfo >                  m_PresetNames;                                    		// 0x0208 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m_nItemInfoRequest;                               		// 0x0214 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nRenamePresetRequest;                           		// 0x0218 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FGuid                                       mNavigationWeaponGuid;                            		// 0x021C (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_renameLoadout__Delegate;                 		// 0x022C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_startRename__Delegate;                   		// 0x0238 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onCancelRenaming__Delegate;              		// 0x0244 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onOpenAnimationComplete__Delegate;       		// 0x0250 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onItemRollOver__Delegate;                		// 0x025C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onItemRollOut__Delegate;                 		// 0x0268 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onGroupClick__Delegate;                  		// 0x0274 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_updateCharacterRotation__Delegate;       		// 0x0280 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onLoadoutSelected__Delegate;             		// 0x028C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onCategorySelected__Delegate;            		// 0x0298 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onItemEquipped__Delegate;                		// 0x02A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onItemRemoved__Delegate;                 		// 0x02B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onGroupRemoved__Delegate;                		// 0x02BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58068 ];

		return pClassPointer;
	};

	void Call_showRemoveItemsPopup ( );
	void SetItems ( TArray< struct FTPBCharacterShopOffer > items );
	void SetGroups ( TArray< struct FTPBCharacterShopOffer > Groups );
	void SetCurrentWeapons ( TArray< struct FPBUIWeaponInfo > Weapons, int nPresetIndex );
	void SetLoadouts ( TArray< struct FPBUILoadoutInfo > loadouts );
	void _Release ( );
	class UPBGlobalBasket* _GetGlobalBasket ( );
	bool _isValidItem ( struct FGuid ItemGuid );
	void _AddEmptyItem ( struct FGuid CategoryItemGuid, unsigned long bEquip, TArray< struct FTPBCharacterShopOffer >* items );
	void Call_selectItem ( struct FString itemguidstring );
	void Call_EmulateParameterSelection ( struct FString Category, struct FString subcategory );
	void _ContinueItemNavigation ( );
	void _onGetOffersDone ( struct FTPBItemShopResult_OnGetOffersDone* Result );
	void _GetRepairOffers ( );
	void _OnSetPaymentForBasketItemDone ( int requestId, int ErrorCode );
	void _StartItemNavigation ( );
	bool _Initialize ( );
	void _OnGetOfferDetailsDone ( int requestId, int ErrorCode, struct FGuid OfferId, struct FString offerDescription, struct FGuid itemId, struct FString itemDescription, int XpBoost, int creditBoost, int groupXpBoost, int groupIgcBoost );
	void _OnGetInventoryItemDetailsDone ( int requestId, int ErrorCode, struct FGuid itemId, struct FString itemDescription, int XpBoost, int creditBoost, int groupXpBoost, int groupIgcBoost, struct FGuid serialNumber, struct FPBDate purchaseDate, int condition, int maxCondition, int idealCondition, int timeInUse, int repairCostsCoins, int repairCostsCredits );
	void Call_ShowRepair ( float fCondition, unsigned long bShow, unsigned long bDisabled, unsigned long bInBasket );
	void Call_ShowParametersButtons ( unsigned long bShow, unsigned long bEnable );
	void SetWeaponParamsInfo ( TArray< struct UPBGFxObject_WeaponShop_FPBWeaponParamsInfo > Info );
	void SetItemInfo ( struct FString sItemName, struct FString sItemDescription );
	void GetEquippingModStructure ( struct FPBUIEquipModStruct* Str );
	void _FilterItems ( struct FString Group, TArray< struct FTPBCharacterShopOffer >* Source, TArray< struct FTPBCharacterShopOffer >* Dest );
	struct FSWeaponCode _GetWeaponCodeByCategory ( struct FString sCategory );
	struct FGuid _CategoryToWeaponGuid ( struct FString sCategory );
	void _UpdateParametersButtons ( struct FGuid currentWeaponGuid );
	void _PreviewCategory ( struct FString sCategory );
	void _InitPresetNames ( );
	void _callRenamingFinished ( struct FString sError );
	void _GetWeaponPresetNamesDone ( int requestId, int ErrorCode, TArray< struct FString > weaponPresetNames );
	void _OnUpdateWeaponPresetNameDone ( int requestId, int ErrorCode );
	void Update ( );
	void _OnDeleteItemFromBasketDone ( int requestId, int ErrorCode );
	void _OnAddItemToBasketDone ( int requestId, int ErrorCode, struct FPBBasketItem basketItem );
	void SetBasketQuantity ( int nQuantity );
	void _OnGetBasketDone ( int requestId, int ErrorCode, int amountBasketItems, TArray< struct FPBBasketItem > basketItems );
	void _OnGetCharacterProfileDone ( int requestId, int ErrorCode, struct FPBCharacterProfile CharacterProfile );
	void _UpdateItemsFlags ( );
	void _UpdateGroupsFlags ( );
	void _onItemEquipped ( struct FString offerstring, struct FString itemguidstring, struct FString colorguidstring );
	void _showRemoveModMovie ( );
	void _ClearEquippingModStruct ( struct FPBUIEquipModStruct* Str );
	void Call_setEquipmentStructure ( struct FPBUIEquipModStruct Str );
	void Call_selectLoadout ( int Index, struct FString selected_category, struct FString selected_subcategory );
	void Call_onRightClick ( );
	void _FilterEmptyGroups ( TArray< struct FTPBCharacterShopOffer >* Groups, TArray< struct FTPBCharacterShopOffer >* newGroups );
	void _onCategorySelected ( struct FString Category, struct FString subcategory );
	void _updateEquippedMods ( struct FSWeaponCode Code, int nPreset, struct FGuid* WeaponGuid );
	void _updateCurrentPreset ( int nIndex );
	void _updateWeaponParams ( struct FSWeaponCode Code, struct FPBUIEquipModStruct* modStruct );
	void _onLoadoutSelected ( int nIndex );
	void _updateCharacterRotation ( float deltaX, float deltaY );
	void _onGroupClick ( struct FString Group );
	void _onItemRollOut ( );
	void _RequestItemInfo ( struct FGuid ItemGuid );
	void _onItemRollOver ( struct FString ItemGuidStr );
	void _onGroupRemoved ( struct FString sCategory );
	void Set_onGroupRemoved_Delegate ( struct FScriptDelegate F );
	void Unreal_onGroupRemoved ( struct FString sCategory );
	void _onItemRemoved ( struct FString sOfferGuid );
	void _onOpenAnimationComplete ( );
	bool _renameLoadout ( int nIndex, struct FString sName );
	void _onCancelRenaming ( );
	void Set_onItemRemoved_Delegate ( struct FScriptDelegate F );
	void Unreal_onItemRemoved ( struct FString sOfferGuid );
	void Set_onItemEquipped_Delegate ( struct FScriptDelegate F );
	void Unreal_onItemEquipped ( struct FString offerstring, struct FString itemguidstring, struct FString colorguidstring );
	void Set_onCategorySelected_Delegate ( struct FScriptDelegate F );
	void Unreal_onCategorySelected ( struct FString Category, struct FString subcategory );
	void Set_onLoadoutSelected_Delegate ( struct FScriptDelegate F );
	void Unreal_onLoadoutSelected ( int nIndex );
	void Set_updateCharacterRotation_Delegate ( struct FScriptDelegate F );
	void Unreal_updateCharacterRotation ( float deltaX, float deltaY );
	void Set_onGroupClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onGroupClick ( struct FString Group );
	void Set_onItemRollOut_Delegate ( struct FScriptDelegate F );
	void Unreal_onItemRollOut ( );
	void Set_onItemRollOver_Delegate ( struct FScriptDelegate F );
	void Unreal_onItemRollOver ( struct FString ItemGuidStr );
	void Set_onOpenAnimationComplete_Delegate ( struct FScriptDelegate F );
	void Unreal_onOpenAnimationComplete ( );
	void Set_onCancelRenaming_Delegate ( struct FScriptDelegate F );
	void Unreal_onCancelRenaming ( );
	void Set_startRename_Delegate ( struct FScriptDelegate F );
	void Unreal_startRename ( );
	void Set_renameLoadout_Delegate ( struct FScriptDelegate F );
	bool Unreal_renameLoadout ( int nIndex, struct FString sName );
};

UClass* UPBGFxObject_WeaponShop::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_ServiceShop
// 0x0200 (0x0300 - 0x0100)
class UPBGFxObject_ServiceShop : public UPBGFxObject_ShopClass
{
public:
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCharacterRotator*                         mRotator;                                         		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     msCurrentCategoryButton;                          		// 0x0108 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                mnAvailabilityRequestId;                          		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     msNewName;                                        		// 0x0118 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     msOldName;                                        		// 0x0124 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      mbNameAvailable : 1;                              		// 0x0130 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      mbChangingAvatar : 1;                             		// 0x0130 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      mbChangingRace : 1;                               		// 0x0130 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      mbOpenAnimationFinished : 1;                      		// 0x0130 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      mbGetAdditionalInfo : 1;                          		// 0x0130 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	struct FGuid                                       mOldAvatarGuid;                                   		// 0x0134 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FGuid                                       mNewAvatarGuid;                                   		// 0x0144 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FGuid                                       mAddAvatarGuid;                                   		// 0x0154 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FGuid                                       mAddSkinGuid;                                     		// 0x0164 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	int                                                mNewRaceIndex;                                    		// 0x0174 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mOldRaceIndex;                                    		// 0x0178 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mNewColorIndex;                                   		// 0x017C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mOldColorIndex;                                   		// 0x0180 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mInBasketRaceIndex;                               		// 0x0184 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mInBasketColorIndex;                              		// 0x0188 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FTHeadInfo                                  mHeads[ 0x2 ];                                    		// 0x018C (0x0078) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct UPBGFxObject_ServiceShop_FTServiceCategory > mItems;                                           		// 0x0204 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBServiceOffer >                  mTemporaryItems;                                  		// 0x0210 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onHideForeground__Delegate;              		// 0x021C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onListClickChangeSkin_Add__Delegate;     		// 0x0228 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onListClickChangeSkin_Cancel__Delegate;  		// 0x0234 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onListClickChangeSkin_Accept__Delegate;  		// 0x0240 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onListClickChangeSkin_Change__Delegate;  		// 0x024C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onListClickChangeAvatar_Add__Delegate;   		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onListClickChangeAvatar_Accept__Delegate;		// 0x0264 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onListClickChangeAvatar_Cancel__Delegate;		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onListClickChangeAvatar_Select__Delegate;		// 0x027C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onOpenAnimationComplete__Delegate;       		// 0x0288 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onCategorySelected__Delegate;            		// 0x0294 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onListClickChangeName_Add__Delegate;     		// 0x02A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onListClickChangeName_Accept__Delegate;  		// 0x02AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onListClickChangeName_Cancel__Delegate;  		// 0x02B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onChangeNameText__Delegate;              		// 0x02C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onListClickAdd__Delegate;                		// 0x02D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onListClickRemove__Delegate;             		// 0x02DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onListClickPeriodRemove__Delegate;       		// 0x02E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onListClickPeriod__Delegate;             		// 0x02F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58069 ];

		return pClassPointer;
	};

	void Call_setCategoryNum ( struct FString Category, int Num );
	void Call_setItems ( struct FString Category, TArray< struct FTPBServiceOffer > items );
	void SetBasketQuantity ( int nQuantity );
	void OnBasketError ( int ErrorCode, struct FString sErrorMessage );
	class UPBGlobalBasket* _GetGlobalBasket ( );
	void _onCategorySelected ( struct FString Category );
	void _onOpenAnimationComplete ( );
	void _Release ( );
	void _ConvertServices ( TArray< struct FTPBCharacterShopOffer >* uiOffers, TArray< struct FTPBServiceOffer >* uiServiceOffers );
	void _onGetOffersDone ( struct FTPBItemShopResult_OnGetOffersDone* Result );
	void _OnReserveNameDone ( int requestId, int ErrorCode );
	void _OnGetBasketDone ( int requestId, int ErrorCode, int amountBasketItems, TArray< struct FPBBasketItem > basketItems );
	void _OnGetOfferDetailsDone ( int requestId, int ErrorCode, struct FGuid OfferId, struct FString offerDescription, struct FGuid itemId, struct FString itemDescription, int XpBoost, int creditBoost, int groupXpBoost, int groupIgcBoost );
	struct FString _GetItemDescription ( struct FGuid ItemGuid );
	void _OnGetCharacterProfileDone ( int requestId, int ErrorCode, struct FPBCharacterProfile CharacterProfile );
	void _OnDeleteItemFromBasketDone ( int requestId, int ErrorCode );
	void _OnAddItemToBasketDone ( int requestId, int ErrorCode, struct FPBBasketItem basketItem );
	void _OnIsCharacterNameAvailableDone ( int requestId, int ErrorCode, unsigned long available );
	void _SetupCharacter ( );
	bool _Initialize ( );
	struct FString _GetHeadName ( int nGenderId, struct FGuid headGuid );
	void _UpdateItemsFlags ( );
	void _onListClickPeriod ( struct FString offerguidstring, int nPeriodIndex );
	void Set_onListClickPeriod_Delegate ( struct FScriptDelegate F );
	void Unreal_onListClickPeriod ( struct FString offerguidstring, int nPeriodIndex );
	void _onListClickPeriodRemove ( struct FString offerguidstring, int nPeriodIndex );
	void Set_onListClickPeriodRemove_Delegate ( struct FScriptDelegate F );
	void Unreal_onListClickPeriodRemove ( struct FString offerguidstring, int nPeriodIndex );
	void _onListClickRemove ( struct FString offerguidstring );
	void Set_onListClickRemove_Delegate ( struct FScriptDelegate F );
	void Unreal_onListClickRemove ( struct FString offerguidstring );
	void _onListClickAdd ( struct FString offerguidstring );
	void Set_onListClickAdd_Delegate ( struct FScriptDelegate F );
	void Unreal_onListClickAdd ( struct FString offerguidstring );
	void _onChangeNameText ( struct FString offerguidstring, struct FString new_name );
	void Set_onChangeNameText_Delegate ( struct FScriptDelegate F );
	void Unreal_onChangeNameText ( struct FString offerguidstring, struct FString new_name );
	void _onListClickChangeName_Cancel ( struct FString offerguidstring );
	void Set_onListClickChangeName_Cancel_Delegate ( struct FScriptDelegate F );
	void Unreal_onListClickChangeName_Cancel ( struct FString offerguidstring );
	void _onListClickChangeName_Accept ( struct FString offerguidstring, struct FString new_name );
	void Set_onListClickChangeName_Accept_Delegate ( struct FScriptDelegate F );
	void Unreal_onListClickChangeName_Accept ( struct FString offerguidstring, struct FString new_name );
	void _onListClickChangeName_Add ( struct FString offerguidstring, struct FString new_name );
	void Set_onListClickChangeName_Add_Delegate ( struct FScriptDelegate F );
	void Unreal_onListClickChangeName_Add ( struct FString offerguidstring, struct FString new_name );
	void Set_onCategorySelected_Delegate ( struct FScriptDelegate F );
	void Unreal_onCategorySelected ( struct FString Category );
	void Set_onOpenAnimationComplete_Delegate ( struct FScriptDelegate F );
	void Unreal_onOpenAnimationComplete ( );
	void _onListClickChangeAvatar_Select ( struct FString offerguidstring );
	void Set_onListClickChangeAvatar_Select_Delegate ( struct FScriptDelegate F );
	void Unreal_onListClickChangeAvatar_Select ( struct FString offerguidstring );
	void _onListClickChangeAvatar_Cancel ( );
	void Set_onListClickChangeAvatar_Cancel_Delegate ( struct FScriptDelegate F );
	void Unreal_onListClickChangeAvatar_Cancel ( );
	void _onListClickChangeAvatar_Accept ( struct FString offerguidstring );
	void Set_onListClickChangeAvatar_Accept_Delegate ( struct FScriptDelegate F );
	void Unreal_onListClickChangeAvatar_Accept ( struct FString offerguidstring );
	void _onListClickChangeAvatar_Add ( struct FString offerguidstring );
	void Set_onListClickChangeAvatar_Add_Delegate ( struct FScriptDelegate F );
	void Unreal_onListClickChangeAvatar_Add ( struct FString offerguidstring );
	void _onListClickChangeSkin_Change ( int raceIndex, int colorIndex );
	void Set_onListClickChangeSkin_Change_Delegate ( struct FScriptDelegate F );
	void Unreal_onListClickChangeSkin_Change ( int raceIndex, int colorIndex );
	void _onListClickChangeSkin_Accept ( int raceIndex, int colorIndex );
	void Set_onListClickChangeSkin_Accept_Delegate ( struct FScriptDelegate F );
	void Unreal_onListClickChangeSkin_Accept ( int raceIndex, int colorIndex );
	void _onListClickChangeSkin_Cancel ( );
	void Set_onListClickChangeSkin_Cancel_Delegate ( struct FScriptDelegate F );
	void Unreal_onListClickChangeSkin_Cancel ( );
	bool _getRaceAndColorIndexes ( struct FGuid raceGuid, struct FGuid ColorGuid, int* raceIndex, int* colorIndex );
	bool _getRaceAndColorGuids ( int raceIndex, int colorIndex, struct FGuid* raceGuid, struct FGuid* ColorGuid );
	void _onListClickChangeSkin_Add ( int raceIndex, int colorIndex );
	void Set_onListClickChangeSkin_Add_Delegate ( struct FScriptDelegate F );
	void Unreal_onListClickChangeSkin_Add ( int raceIndex, int colorIndex );
	void _onHideForeground ( );
	void Set_onHideForeground_Delegate ( struct FScriptDelegate F );
	void Unreal_onHideForeground ( );
};

UClass* UPBGFxObject_ServiceShop::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_QuitFromMainMenu
// 0x001C (0x00BC - 0x00A0)
class UPBGFxObject_QuitFromMainMenu : public UPBGFxObject_ContainerBased
{
public:
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __unrealLogout__Delegate;                         		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnLogoutDone__Delegate;                        		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58070 ];

		return pClassPointer;
	};

	void _Release ( );
	void _OnLogoutDone ( int requestId, int ErrorCode, struct FGuid ProfileId );
	void _OnLogout ( );
	bool _Initialize ( );
	void SetOnLogoutDelegate ( struct FScriptDelegate F );
	void unrealLogout ( );
};

UClass* UPBGFxObject_QuitFromMainMenu::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_Quit
// 0x0010 (0x010C - 0x00FC)
class UPBGFxObject_Quit : public UPBGFxObject_MusicContainer
{
public:
	unsigned long                                      m_bReadyForQuit : 1;                              		// 0x00FC (0x0004) [0x0000000000000000] [0x00000001] 
	struct FScriptDelegate                             __Unreal_onQuit__Delegate;                        		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58071 ];

		return pClassPointer;
	};

	void OnPBManagerLogoutFinished ( struct FTPBItemShopResult_OnLogoutDone* Result );
	void _OnLogoutFromPBManagerDone ( int requestId, int ErrorCode, struct FGuid ProfileId );
	void _LogoutFromPBManager ( );
	void _OnLogoutFromGamespyCompleted ( unsigned long bWasSuccessful );
	void _LogoutFromGamespy ( );
	void _StartLogout ( );
	bool _Initialize ( );
	void _Release ( );
	void Set_onQuit_Delegate ( struct FScriptDelegate F );
	void Unreal_onQuit ( );
	void _onQuit ( );
};

UClass* UPBGFxObject_Quit::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_HUD_Scoreboard
// 0x0418 (0x04B8 - 0x00A0)
class UPBGFxObject_HUD_Scoreboard : public UPBGFxObject_ContainerBased
{
public:
	struct FTPlayerInfo                                friendlyInfo[ 0xB ];                              		// 0x00A0 (0x01E4) [0x0000000000002000]              ( CPF_Transient )
	struct FTPlayerInfo                                enemyInfo[ 0xB ];                                 		// 0x0284 (0x01E4) [0x0000000000002000]              ( CPF_Transient )
	int                                                iNumOnFriendlyTeam;                               		// 0x0468 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPrevNumOnFriendlyTeam;                           		// 0x046C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iNumOnEnemyTeam;                                  		// 0x0470 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPrevNumOnEnemyTeam;                              		// 0x0474 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                currentTickValue;                                 		// 0x0478 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                currentPlayerTeam;                                		// 0x047C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                totalFriendlyHeat;                                		// 0x0480 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                totalFriendlyKills;                               		// 0x0484 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                totalFriendlyDeaths;                              		// 0x0488 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                totalFriendlyAssists;                             		// 0x048C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                totalEnemyHeat;                                   		// 0x0490 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                totalEnemyKills;                                  		// 0x0494 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                totalEnemyDeaths;                                 		// 0x0498 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                totalEnemyAssists;                                		// 0x049C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     PersonalEnemyString;                              		// 0x04A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     PersonalVictimString;                             		// 0x04AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58072 ];

		return pClassPointer;
	};

	void CallSetTotals ( int intotalFriendlyHeat, int intotalFriendlyKills, int intotalFriendlyDeaths, int intotalFriendlyAssists, int intotalEnemyHeat, int intotalEnemyKills, int intotalEnemyDeaths, int intotalEnemyAssists );
	void CallSetFriendlyTeam ( int FriendlyTeam );
	void CallSetTeamNames ( struct FString FriendlyName, struct FString EnemyName );
	void CallSetTeamScores ( int friendlyScore, int enemyScore );
	void CallSetVisibility ( unsigned long IsFriend, int Index, unsigned long isVisible );
	void CallUpdateValues ( unsigned long IsFriend, int Index, struct FString PlayerName, struct FString extraDetails, struct FString playerAvatar, int heat, int Kills, int Damage, int Deaths, int assists, int pingLevel, int actualPing, unsigned long alive, unsigned long isPlayer, unsigned long toggleplayer );
	void eventTick ( float fDelta );
	int GetPingState ( int Ping );
	bool _Initialize ( );
};

UClass* UPBGFxObject_HUD_Scoreboard::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_RemoveItems
// 0x000C (0x00AC - 0x00A0)
class UPBGFxObject_RemoveItems : public UPBGFxObject_ContainerBased
{
public:
	struct FScriptDelegate                             __Unreal_onAcceptClick__Delegate;                 		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58073 ];

		return pClassPointer;
	};

	void Call_ShowMessage ( struct FString Str );
	bool _Initialize ( );
	void _onAcceptClick ( );
	void Set_onAcceptClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onAcceptClick ( );
};

UClass* UPBGFxObject_RemoveItems::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_HUD_SafetyBuy
// 0x0015 (0x00B5 - 0x00A0)
class UPBGFxObject_HUD_SafetyBuy : public UPBGFxObject_ContainerBased
{
public:
	int                                                nSelectedPreset;                                  		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      ViewTarget;                                       		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      messageSet : 1;                                   		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      isInAttackingTeam : 1;                            		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      mbSecurityCamera : 1;                             		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	int                                                iPrevRespawnTimeLeft;                             		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPrevSafetyBuyTimer;                              		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      prevGameModeType;                                 		// 0x00B4 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58074 ];

		return pClassPointer;
	};

	void setCharacterDetails ( unsigned long bShow, struct FString charName, struct FString charDescription, struct FString AvatarImg );
	void SetGameMode ( struct FString modeName );
	void _Release ( );
	void _InitWeaponTextures ( );
	bool _Initialize ( );
	void Call_setCameraMode ( unsigned long bSecurityCamera );
	void eventTick ( float fDelta );
};

UClass* UPBGFxObject_HUD_SafetyBuy::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_RemoveMod
// 0x0060 (0x0100 - 0x00A0)
class UPBGFxObject_RemoveMod : public UPBGFxObject_ContainerBased
{
public:
	struct FPBUIEquipModStruct                         m_TempEquipModStructure;                          		// 0x00A0 (0x0048) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onAcceptClick__Delegate;                 		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onCancelClick__Delegate;                 		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58075 ];

		return pClassPointer;
	};

	void Call_setEquipmentStructure ( struct FPBUIEquipModStruct Str );
	bool _Initialize ( );
	class UPBGlobalBasket* _GetGlobalBasket ( );
	void _onCancelClick ( );
	void Set_onCancelClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onCancelClick ( );
	void _onAcceptClick ( TArray< int >* indexes );
	void Set_onAcceptClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onAcceptClick ( TArray< int > indexes );
};

UClass* UPBGFxObject_RemoveMod::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_Blur
// 0x0000 (0x00B0 - 0x00B0)
class UPBGFxObject_Blur : public UPBGFxObject_Foreground
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58076 ];

		return pClassPointer;
	};

	bool _Initialize ( );
};

UClass* UPBGFxObject_Blur::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_PromotionCode
// 0x0094 (0x0134 - 0x00A0)
class UPBGFxObject_PromotionCode : public UPBGFxObject_ContainerBased
{
public:
	struct FString                                     PromocodeStartDateNotReached;                     		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PromotionEndDatePassed;                           		// 0x00AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PromotionAlreadyUsed;                             		// 0x00B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InvalidPromoCode;                                 		// 0x00C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PromocodeFailedGeneral;                           		// 0x00D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GenderIsNotValid;                                 		// 0x00DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ItemAlreadyOwned;                                 		// 0x00E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ItemAwardFailedGeneral;                           		// 0x00F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     days;                                             		// 0x0100 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AwardedIGC;                                       		// 0x010C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      ctrlDown : 1;                                     		// 0x0118 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_onSubmit__Delegate;                      		// 0x011C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onAccept__Delegate;                      		// 0x0128 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58077 ];

		return pClassPointer;
	};

	void _Release ( );
	void callSetUnobtainable ( TArray< struct FString > itemList );
	void callSetObtainable ( TArray< struct FString > itemList );
	void callInvalidCode ( struct FString errorstr );
	void callPasteCode ( struct FString Text );
	bool HandleInputKeyF ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
	void callUseCode ( struct FString Code );
	void callValidateCode ( struct FString Code );
	void handleVerifyPromoCodeDone ( int requestId, int Error, TArray< struct FPBPromoCodeOffer > PromoCodeResult, int AmountIgc );
	void _OnUsePromoCodeDone ( int requestId, int ErrorCode );
	bool _Initialize ( );
	void Call_onUseCodeFinished ( );
	void Set_onAccept_Delegate ( struct FScriptDelegate F );
	void Unreal_onAccept ( struct FString Code );
	void Set_onSubmit_Delegate ( struct FScriptDelegate F );
	void Unreal_onSubmit ( struct FString Code );
};

UClass* UPBGFxObject_PromotionCode::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_SkillShop
// 0x007C (0x017C - 0x0100)
class UPBGFxObject_SkillShop : public UPBGFxObject_ShopClass
{
public:
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCharacterRotator*                         mRotator;                                         		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FTPBCharacterShopOffer >            mItems;                                           		// 0x0108 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mbOpenAnimationFinished : 1;                      		// 0x0114 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< struct FTPBSkillOffer >                    mTemporaryItems;                                  		// 0x0118 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBSkillOffer >                    mReallyTemporaryItems;                            		// 0x0124 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                mnCurrentTier;                                    		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_onClickAdd__Delegate;                    		// 0x0134 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onClickEquip__Delegate;                  		// 0x0140 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onClickRemove__Delegate;                 		// 0x014C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onTierSelected__Delegate;                		// 0x0158 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onOpenAnimationComplete__Delegate;       		// 0x0164 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_moveMouse__Delegate;                     		// 0x0170 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58078 ];

		return pClassPointer;
	};

	void Call_setItems ( TArray< struct FTPBSkillOffer > items );
	void Call_setCurrentTier ( int nTierIndex );
	void Call_setCurrentTierSkill ( int nTierIndex, struct FString skillName );
	void SetBasketQuantity ( int nQuantity );
	void OnBasketError ( int ErrorCode, struct FString sErrorMessage );
	class UPBGlobalBasket* _GetGlobalBasket ( );
	void _SetupCharacter ( );
	void _ConvertSkills ( TArray< struct FTPBCharacterShopOffer >* uiOffers, TArray< struct FTPBSkillOffer >* uiSkillOffers );
	void _UpdateItemsFlags ( );
	void _onGetOffersDone ( struct FTPBItemShopResult_OnGetOffersDone* Result );
	void _update ( );
	void _OnGetCharacterProfileDone ( int requestId, int ErrorCode, struct FPBCharacterProfile CharacterProfile );
	void _OnGetBasketDone ( int requestId, int ErrorCode, int amountBasketItems, TArray< struct FPBBasketItem > basketItems );
	void _OnDeleteItemFromBasketDone ( int requestId, int ErrorCode );
	void _OnAddItemToBasketDone ( int requestId, int ErrorCode, struct FPBBasketItem basketItem );
	void _Release ( );
	bool _Initialize ( );
	void Call_showRemoveItemsPopup ( );
	class UGFxObject* Call_NavigateItem ( struct FString itemguidstring );
	void _StartItemNavigation ( );
	void _moveMouse ( float X, float Y );
	void Set_moveMouse_Delegate ( struct FScriptDelegate F );
	void Unreal_moveMouse ( float X, float Y );
	void eventTick ( float fDelta );
	void _onOpenAnimationComplete ( );
	void Set_onOpenAnimationComplete_Delegate ( struct FScriptDelegate F );
	void Unreal_onOpenAnimationComplete ( );
	void _onTierSelected ( int nTierIndex );
	void Set_onTierSelected_Delegate ( struct FScriptDelegate F );
	void Unreal_onTierSelected ( int nTierIndex );
	void _onClickRemove ( int itemIndex, int skillIndex );
	void Set_onClickRemove_Delegate ( struct FScriptDelegate F );
	void Unreal_onClickRemove ( int itemIndex, int skillIndex );
	void _onClickEquip ( int itemIndex );
	void Set_onClickEquip_Delegate ( struct FScriptDelegate F );
	void Unreal_onClickEquip ( int itemIndex );
	void _onClickAdd ( int itemIndex, int skillIndex );
	void Set_onClickAdd_Delegate ( struct FScriptDelegate F );
	void Unreal_onClickAdd ( int itemIndex, int skillIndex );
};

UClass* UPBGFxObject_SkillShop::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_ControlBar
// 0x0014 (0x00B4 - 0x00A0)
class UPBGFxObject_ControlBar : public UPBGFxObject_ContainerBased
{
public:
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      mbUpdateCharacterDetails : 1;                     		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      mbWaitingOnMainMenu : 1;                          		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      mbWaitingForOverlayToClear : 1;                   		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	TArray< struct FTPBCharacterShopOffer >            Services;                                         		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58079 ];

		return pClassPointer;
	};

	void Call_ShowStylePopup ( struct FString styleDelta, struct FString Message );
	void Call_UpdateCharacterStats ( struct FTCharacterStatsInfo Info );
	void Call_SetServices ( TArray< struct FTPBCharacterShopOffer > servicesList );
	void Call_ShowCharacterParams ( unsigned long bShow );
	void Call_SetCharacterDetails ( struct FString charName, struct FString charDescription, struct FString AvatarImg, unsigned long bIsPremium );
	void UpdateStyleInfoInMainMenu ( );
	void _UpdateCharacterDetails ( class UPBCustomChar_MenuData* CharData );
	void eventTick ( float fDelta );
	void _Release ( );
	void _OnGetSubscriptionModeDone ( struct FTPBItemShopResult_OnGetSubscriptionModeDone* Result );
	void _OnLogoutFromPBManagerDone ( int requestId, int ErrorCode, struct FGuid ProfileId );
	void _OnGetCharacterProfileDone ( int requestId, int ErrorCode, struct FPBCharacterProfile CharacterProfile );
	void _OnGetAmountDone ( int requestId, int ErrorCode, int Amount );
	void _OnGetBasketDone ( int requestId, int ErrorCode, int amountBasketItems, TArray< struct FPBBasketItem > basketItems );
	void _OnGetEventByBackend ( int requestId, int ErrorCode, TArray< int > eventCodes, TArray< struct FPBShopEvent > criticalEvents );
	bool _Initialize ( );
};

UClass* UPBGFxObject_ControlBar::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_TauntShop
// 0x0080 (0x0180 - 0x0100)
class UPBGFxObject_TauntShop : public UPBGFxObject_ShopClass
{
public:
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCharacterRotator*                         mRotator;                                         		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FTPBCharacterShopOffer >            mItems;                                           		// 0x0108 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UPBHeatSystemArc*                            mpHeatSystemArc;                                  		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FTPBTauntOffer >                    mTemporaryItems;                                  		// 0x0118 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       mCurrentAnimation;                                		// 0x0124 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCurrentItemIndex;                              		// 0x012C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      mbOpenAnimationFinished : 1;                      		// 0x0130 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class USoundCue*                                   m_CurrentSoundCue;                                		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_startAnimation__Delegate;                		// 0x0138 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onClickAdd__Delegate;                    		// 0x0144 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_moveMouse__Delegate;                     		// 0x0150 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onClickEquip__Delegate;                  		// 0x015C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onClickRemove__Delegate;                 		// 0x0168 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onOpenAnimationComplete__Delegate;       		// 0x0174 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58080 ];

		return pClassPointer;
	};

	void Call_showRemoveItemsPopup ( );
	void Call_setItems ( TArray< struct FTPBTauntOffer > items );
	void SetBasketQuantity ( int nQuantity );
	void OnBasketError ( int ErrorCode, struct FString sErrorMessage );
	class UPBGlobalBasket* _GetGlobalBasket ( );
	void _SetupCharacter ( );
	void _ConvertItems ( TArray< struct FTPBCharacterShopOffer >* uiOffers, TArray< struct FTPBTauntOffer >* uiTauntOffers );
	void _UpdateItemsFlags ( );
	void _OnGetOfferDetailsDone ( int requestId, int ErrorCode, struct FGuid OfferId, struct FString offerDescription, struct FGuid itemId, struct FString itemDescription, int XpBoost, int creditBoost, int groupXpBoost, int groupIgcBoost );
	class UGFxObject* Call_NavigateItem ( struct FString itemguidstring );
	void _onGetOffersDone ( struct FTPBItemShopResult_OnGetOffersDone* Result );
	void eventTick ( float fDelta );
	void _update ( );
	void _OnGetCharacterProfileDone ( int requestId, int ErrorCode, struct FPBCharacterProfile CharacterProfile );
	void _OnGetBasketDone ( int requestId, int ErrorCode, int amountBasketItems, TArray< struct FPBBasketItem > basketItems );
	void _OnDeleteItemFromBasketDone ( int requestId, int ErrorCode );
	void _OnAddItemToBasketDone ( int requestId, int ErrorCode, struct FPBBasketItem basketItem );
	void _Release ( );
	bool _Initialize ( );
	void _StartItemNavigation ( );
	void _onOpenAnimationComplete ( );
	void Set_onOpenAnimationComplete_Delegate ( struct FScriptDelegate F );
	void Unreal_onOpenAnimationComplete ( );
	void _onClickRemove ( int itemIndex );
	void Set_onClickRemove_Delegate ( struct FScriptDelegate F );
	void Unreal_onClickRemove ( int itemIndex );
	void _onClickEquip ( int itemIndex, int Preset );
	void Set_onClickEquip_Delegate ( struct FScriptDelegate F );
	void Unreal_onClickEquip ( int itemIndex, int Preset );
	void _onClickAdd ( int itemIndex );
	void _moveMouse ( float X, float Y );
	void Set_moveMouse_Delegate ( struct FScriptDelegate F );
	void Unreal_moveMouse ( float X, float Y );
	void Set_onClickAdd_Delegate ( struct FScriptDelegate F );
	void Unreal_onClickAdd ( int itemIndex );
	void _startAnimation ( int itemIndex );
	void Set_startAnimation_Delegate ( struct FScriptDelegate F );
	void Unreal_startAnimation ( int itemIndex );
};

UClass* UPBGFxObject_TauntShop::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_LoadingMovie
// 0x0004 (0x00A4 - 0x00A0)
class UPBGFxObject_LoadingMovie : public UPBGFxObject_ContainerBased
{
public:
	int                                                TipsCount;                                        		// 0x00A0 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58081 ];

		return pClassPointer;
	};

	void setTipCount ( int tipCount );
	bool _Initialize ( );
};

UClass* UPBGFxObject_LoadingMovie::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_ModalError
// 0x000C (0x00AC - 0x00A0)
class UPBGFxObject_ModalError : public UPBGFxObject_ContainerBased
{
public:
	struct FScriptDelegate                             __unrealOnCloseClick__Delegate;                   		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58082 ];

		return pClassPointer;
	};

	void _Release ( );
	bool _Initialize ( );
	void setUnrealOnCloseClickDelegate ( struct FScriptDelegate F );
	void unrealOnCloseClick ( int nIndex );
};

UClass* UPBGFxObject_ModalError::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_UnequipItems
// 0x000C (0x00AC - 0x00A0)
class UPBGFxObject_UnequipItems : public UPBGFxObject_ContainerBased
{
public:
	struct FScriptDelegate                             __Unreal_onAcceptClick__Delegate;                 		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58083 ];

		return pClassPointer;
	};

	bool _Initialize ( );
	void _onAcceptClick ( );
	void Set_onAcceptClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onAcceptClick ( );
};

UClass* UPBGFxObject_UnequipItems::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_HUD_UnlockedItems
// 0x0064 (0x0104 - 0x00A0)
class UPBGFxObject_HUD_UnlockedItems : public UPBGFxObject_ContainerBased
{
public:
	TArray< struct FTPBCharacterShopOffer >            mItems;                                           		// 0x00A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTColorStruct >                     mColors;                                          		// 0x00AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBCharacterShopOffer >            mTemporaryItems;                                  		// 0x00B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     mCurrentCategory;                                 		// 0x00C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      mbUpdate : 1;                                     		// 0x00D0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< struct FString >                           mCategories;                                      		// 0x00D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_requestColors__Delegate;                 		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onCategorySelected__Delegate;            		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onItemDoubleClick__Delegate;             		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58084 ];

		return pClassPointer;
	};

	void _setNavigationInfo ( struct FGuid ItemGuid, struct FGuid ColorGuid, struct FString Category );
	void _Release ( );
	bool _Initialize ( );
	void Call_setCategoryQuantity ( struct FString Category, int quantity );
	void Call_setMoney ( int coins, int credits );
	void Call_selectCategory ( struct FString Category );
	void Call_setItems ( TArray< struct FTPBCharacterShopOffer > items );
	void _InitializeItems ( );
	void _FilterItems ( struct FString Category, TArray< struct FTPBCharacterShopOffer >* items, TArray< struct FTPBCharacterShopOffer >* out_Items );
	void _onItemDoubleClick ( struct FGuid ItemGuid, struct FGuid ColorGuid, struct FString Category );
	void Set_onItemDoubleClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onItemDoubleClick ( struct FString itemguidstring, struct FString colorguidstring, struct FString Category );
	void _onCategorySelected ( struct FString Category );
	void Set_onCategorySelected_Delegate ( struct FScriptDelegate F );
	void Unreal_onCategorySelected ( struct FString Category );
	void _requestColors ( struct FGuid ItemGuid, TArray< struct FTPBCharacterShopOffer >* outColors );
	void Set_requestColors_Delegate ( struct FScriptDelegate F );
	TArray< struct FTPBCharacterShopOffer > Unreal_requestColors ( struct FString itemguidstring );
	void Update ( );
	void eventTick ( float fDelta );
};

UClass* UPBGFxObject_HUD_UnlockedItems::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_QuitConfirmation
// 0x001C (0x00BC - 0x00A0)
class UPBGFxObject_QuitConfirmation : public UPBGFxObject_ContainerBased
{
public:
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_onOKClick__Delegate;                     		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onCancelClick__Delegate;                 		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58085 ];

		return pClassPointer;
	};

	void _Release ( );
	bool _Initialize ( );
	void _onCancelClick ( );
	void Set_onCancelClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onCancelClick ( );
	void _onOKClick ( );
	void Set_onOKClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onOKClick ( );
};

UClass* UPBGFxObject_QuitConfirmation::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_HUD_RepairWeapon
// 0x001C (0x00BC - 0x00A0)
class UPBGFxObject_HUD_RepairWeapon : public UPBGFxObject_ContainerBased
{
public:
	TArray< struct FTPBCharacterShopOffer >            mItems;                                           		// 0x00A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      mbUpdate : 1;                                     		// 0x00AC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_onItemDoubleClick__Delegate;             		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58086 ];

		return pClassPointer;
	};

	void _setNavigationInfo ( struct FGuid ItemGuid, struct FGuid ColorGuid, struct FString Category );
	void _Release ( );
	bool _Initialize ( );
	void Call_setPresetNames ( TArray< struct FString > Names );
	void Call_setMoney ( int coins, int credits );
	void Call_setItems ( TArray< struct FTPBCharacterShopOffer > items );
	void _InitializeItems ( );
	void _onItemDoubleClick ( struct FGuid ItemGuid, struct FGuid ColorGuid, struct FString Category );
	void Set_onItemDoubleClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onItemDoubleClick ( struct FString itemguidstring, struct FString colorguidstring, struct FString Category );
	void Update ( );
	void eventTick ( float fDelta );
};

UClass* UPBGFxObject_HUD_RepairWeapon::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_CommonShop
// 0x00AC (0x01AC - 0x0100)
class UPBGFxObject_CommonShop : public UPBGFxObject_ShopClass
{
public:
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBShop*                                     m_CurrentShop;                                    		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UPBShop* >                           m_Shops;                                          		// 0x0108 (0x000C) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	class UPBCharacterRotator*                         mRotator;                                         		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      mbOpenAnimationFinished : 1;                      		// 0x0118 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< int >                                      m_RemoveRequests;                                 		// 0x011C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CharNameCheck;                                    		// 0x0128 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onOpenAnimationComplete__Delegate;       		// 0x0134 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onSelectTab__Delegate;                   		// 0x0140 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onCategoryChanged__Delegate;             		// 0x014C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onItemSelected__Delegate;                		// 0x0158 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onColorSelected__Delegate;               		// 0x0164 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_updateCharacterRotation__Delegate;       		// 0x0170 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_getPremiumDiscount__Delegate;            		// 0x017C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_addToBasket__Delegate;                   		// 0x0188 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_removeFromBasket__Delegate;              		// 0x0194 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onChangeNameText__Delegate;              		// 0x01A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58087 ];

		return pClassPointer;
	};

	class UPBGlobalBasket* _GetGlobalBasket ( );
	void _updateList ( TArray< struct FTPBCharacterShopOffer >* items );
	void Call_clickCategory ( struct FString CategoryName );
	void Call_onQueueChanged ( int nQueueSize );
	void _updateLists ( unsigned long bUpdateItems );
	void _OnGetBasketDone ( int requestId, int ErrorCode, int amountBasketItems, TArray< struct FPBBasketItem > basketItems );
	void _OnGetCharacterProfileDone ( int requestId, int ErrorCode, struct FPBCharacterProfile CharacterProfile );
	void _OnDeleteItemFromBasketDone ( int requestId, int ErrorCode );
	void _OnAddItemToBasketDone ( int requestId, int ErrorCode, struct FPBBasketItem basketItem );
	void _Release ( );
	void _OnCheckoutBasketDone ( int requestId, int ErrorCode );
	void Call_OpenTab ( unsigned long bOpenWeapons );
	bool _Initialize ( );
	void _OnQueueChanged ( struct FTPBItemShopResult_OnQueueChanged* Result );
	void ShowCategories ( );
	void onForegroundChanged ( unsigned long bShow );
	void Delegate_OnNameValidationComplete ( class UPBShop* shop, unsigned long bValid, unsigned long bDifferentFromLast );
	struct FString Delegate_OnGetNewName ( class UPBShop* shop );
	void Delegate_OnShowColourPanel ( class UPBShop* shop, unsigned long bShowColourPanel, unsigned long bShowNameChooser, struct FString colourTitleString, TArray< struct FPBSBoosterList > boosterInfo );
	void Delegate_OnUpdateCategories ( class UPBShop* shop, TArray< struct FMainPanelCategory >* categories );
	void Delegate_OnUpdateColors ( class UPBShop* shop, TArray< struct FTPBCharacterShopOffer >* Colors );
	void Delegate_OnUpdateUniqueItems ( class UPBShop* shop, unsigned long bResetList, TArray< struct FTPBCharacterShopOffer >* items );
	void Call_SetNameValid ( unsigned long bValid, unsigned long bDifferentFromLast );
	struct FString Call_GetNewName ( );
	void Call_ShowColourPanel ( unsigned long bShowColour, unsigned long bShowNameChooser, struct FString colourTitleString, TArray< struct FPBSBoosterList > boosters );
	void Call_setWeaponParamsInfo ( TArray< struct UPBShop_FPBWeaponParamsInfo > Info );
	void Call_setBasketQuantity ( int nQuantity );
	void Call_setColors ( TArray< struct FTPBCharacterShopOffer > Colors, unsigned long bResetRenderers );
	void Call_setOffers ( TArray< struct FTPBCharacterShopOffer > items, unsigned long bResetRenderers );
	void Call_setNavigationItems ( TArray< struct FMainPanelCategory > categories, struct FString Selected );
	void Call_showRemoveItemsPopup ( );
	void _CharNameUpdated ( );
	void _onChangeNameText ( struct FString new_name );
	void Set_onChangeNameText_Delegate ( struct FScriptDelegate F );
	void Unreal_onChangeNameText ( struct FString new_name );
	bool _removeFromBasket ( );
	void Set_removeFromBasket_Delegate ( struct FScriptDelegate F );
	bool Unreal_removeFromBasket ( );
	bool _addToBasket ( );
	void Set_addToBasket_Delegate ( struct FScriptDelegate F );
	bool Unreal_addToBasket ( );
	int _getPremiumDiscount ( );
	void Set_getPremiumDiscount_Delegate ( struct FScriptDelegate F );
	int Unreal_getPremiumDiscount ( );
	void _updateCharacterRotation ( float deltaX, float deltaY );
	void Set_updateCharacterRotation_Delegate ( struct FScriptDelegate F );
	void Unreal_updateCharacterRotation ( float deltaX, float deltaY );
	void _onColorSelected ( struct FString colorguidstring );
	void Set_onColorSelected_Delegate ( struct FScriptDelegate F );
	void Unreal_onColorSelected ( struct FString colorguidstring );
	void _onItemSelected ( struct FString offerguidstring, struct FString itemguidstring );
	void Set_onItemSelected_Delegate ( struct FScriptDelegate F );
	void Unreal_onItemSelected ( struct FString offerguidstring, struct FString itemguidstring );
	void _onCategoryChanged ( struct FString sCategory );
	void Set_onCategoryChanged_Delegate ( struct FScriptDelegate F );
	void Unreal_onCategoryChanged ( struct FString sCategory );
	void _onSelectTab ( struct FString sTabName );
	void Set_onSelectTab_Delegate ( struct FScriptDelegate F );
	void Unreal_onSelectTab ( struct FString sTabName );
	void _onOpenAnimationComplete ( );
	void Set_onOpenAnimationComplete_Delegate ( struct FScriptDelegate F );
	void Unreal_onOpenAnimationComplete ( );
};

UClass* UPBGFxObject_CommonShop::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_CommonInventory
// 0x00B0 (0x01B0 - 0x0100)
class UPBGFxObject_CommonInventory : public UPBGFxObject_ShopClass
{
public:
	TArray< class UPBInventory* >                      m_InventoryList;                                  		// 0x0100 (0x000C) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	class UPBInventory*                                m_CurrentInventory;                               		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBInventory*                                mprevInventory;                                   		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCharacterRotator*                         mRotator;                                         		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      mbOpenAnimationFinished : 1;                      		// 0x011C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_onOpenAnimationComplete__Delegate;       		// 0x0120 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onSelectTab__Delegate;                   		// 0x012C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onCategoryChanged__Delegate;             		// 0x0138 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onItemSelected__Delegate;                		// 0x0144 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onClickRepair__Delegate;                 		// 0x0150 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onPositionClick__Delegate;               		// 0x015C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onItemSelectedAndEquipped__Delegate;     		// 0x0168 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onEquipItems__Delegate;                  		// 0x0174 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onLoadoutRename__Delegate;               		// 0x0180 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onChangeMods__Delegate;                  		// 0x018C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onClickEquipTaunt__Delegate;             		// 0x0198 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_updateCharacterRotation__Delegate;       		// 0x01A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58088 ];

		return pClassPointer;
	};

	void UpdateDetails ( struct FString ItemGuidStr );
	class UPBGlobalBasket* _GetGlobalBasket ( );
	void Call_setOffers ( TArray< struct FTPBCharacterShopOffer > items, unsigned long bResetRenderers );
	void _OnUpdateUniqueItems ( unsigned long bResetList, TArray< struct FTPBCharacterShopOffer >* items );
	void _onCategoryChanged ( struct FString sCategory );
	void Call_setNavigationItems ( TArray< struct FMainPanelCategory > categories );
	int CloseActiveWindow ( );
	bool HandleInputKeyF ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
	void _Release ( );
	void _updateCharacterRotation ( float deltaX, float deltaY );
	void Set_updateCharacterRotation_Delegate ( struct FScriptDelegate F );
	void Unreal_updateCharacterRotation ( float deltaX, float deltaY );
	void _onClickEquipTaunt ( int TauntLocation );
	void Set_onClickEquipTaunt_Delegate ( struct FScriptDelegate F );
	void Unreal_onClickEquipTaunt ( int TauntLocation );
	void _ononChangeMods ( TArray< struct FString > ModsToRemove );
	void Set_onChangeMods_Delegate ( struct FScriptDelegate F );
	void Unreal_onChangeMods ( TArray< struct FString > ModsToRemove );
	void Call_OpenWarningPopup ( struct FString Message );
	void OpenWarningPopup ( struct FString Message );
	void Call_CloseRename ( );
	void closeRenamePopup ( );
	void _OnUpdateWeaponPresetNameDone ( int requestId, int ErrorCode );
	void _onLoadoutRename ( struct FString loadoutName );
	void Set_onLoadoutRename_Delegate ( struct FScriptDelegate F );
	void Unreal_onLoadoutRename ( struct FString loadoutName );
	void _onEquipItems ( );
	void Set_onEquipItems_Delegate ( struct FScriptDelegate F );
	void Unreal_onEquipItems ( );
	void _onItemSelectedAndEquipped ( struct FString itemguidstring, struct FString colorguidstring );
	void Set_onItemSelectedAndEquipped_Delegate ( struct FScriptDelegate F );
	void Unreal_onItemSelectedAndEquipped ( struct FString itemguidstring, struct FString colorguidstring );
	void _onPositionClick ( struct FString buttonState );
	void Set_onPositionClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onPositionClick ( struct FString buttonState );
	void Set_onClickRepair_Delegate ( struct FScriptDelegate F );
	void Unreal_onClickRepair ( );
	void _onItemSelected ( struct FString itemguidstring, struct FString colorguidstring );
	void Set_onItemSelected_Delegate ( struct FScriptDelegate F );
	void Unreal_onItemSelected ( struct FString itemguidstring, struct FString colorguidstring );
	void _onSelectTab ( struct FString sTabName );
	void Set_onCategoryChanged_Delegate ( struct FScriptDelegate F );
	void Unreal_onCategoryChanged ( struct FString sCategory );
	void Set_onSelectTab_Delegate ( struct FScriptDelegate F );
	void Unreal_onSelectTab ( struct FString sTabName );
	void _SetupCharacter ( );
	void _onOpenAnimationComplete ( );
	void Set_onOpenAnimationComplete_Delegate ( struct FScriptDelegate F );
	void Unreal_onOpenAnimationComplete ( );
	void Call_OpenTab ( struct FString inventoryTabName, int presetIndex );
	void OpenDefaultTab ( );
	bool _Initialize ( );
	void ShowCategories ( );
	void onForegroundChanged ( unsigned long bShow );
};

UClass* UPBGFxObject_CommonInventory::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_WebView_Basic
// 0x004C (0x00EC - 0x00A0)
class UPBGFxObject_WebView_Basic : public UPBGFxObject_ContainerBased
{
public:
	struct FString                                     defaultURL;                                       		// 0x00A0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                image_width;                                      		// 0x00AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                image_height;                                     		// 0x00B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UPBNWebViewObject*                           m_WebObject;                                      		// 0x00B4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSetImagePathDone : 1;                            		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bFirstTick : 1;                                   		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_onDropdownItemClick__Delegate;           		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onMouseMove__Delegate;                   		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onMouseButtonEvent__Delegate;            		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onMouseWheelEvent__Delegate;             		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58090 ];

		return pClassPointer;
	};

	void Call_setWebImagePath ( struct FString Path, int nWidth, int nHeight );
	void OnPopupOpen ( int X, int Y, int Width, int Height, TArray< struct FString > AllOptions );
	void OnLoadingFinished ( );
	void Call_onLoadingFinished ( );
	void OnLoadingBegun ( );
	void Call_onLoadingBegun ( );
	void OnHoverLink ( unsigned long bHoveringOnLink );
	void OnDocumentReady ( struct FString docURL );
	struct FString ModifyURLLocale ( struct FString URL, struct FString newLocale );
	void NotifyTextureReady ( class UTexture2DDynamic* pDynamicTexture );
	void _ClearDelegates ( );
	void ClearDelegates ( );
	void _assignDelegates ( );
	void AssignDelegates ( );
	void _Release ( );
	void Call_openDropdown ( TArray< struct FString > items, int X, int Y, int Width, int Height );
	bool _Initialize ( );
	void eventTick ( float fDelta );
	class APBEntryPlayerController* GetEntryPC ( );
	void _onMouseWheelEvent ( int vertical_delta, int horizontal_delta );
	void Set_onMouseWheelEvent_Delegate ( struct FScriptDelegate F );
	void Unreal_onMouseWheelEvent ( int vertical_delta, int horizontal_delta );
	void _onMouseButtonEvent ( int button_index, unsigned long bPressed );
	void Set_onMouseButtonEvent_Delegate ( struct FScriptDelegate F );
	void Unreal_onMouseButtonEvent ( int button_index, unsigned long bPressed );
	void _onMouseMove ( int MouseX, int MouseY );
	void Set_onMouseMove_Delegate ( struct FScriptDelegate F );
	void Unreal_onMouseMove ( int MouseX, int MouseY );
	void _createWebView ( int Width, int Height, struct FString URL );
	void _onDropdownItemClick ( int nIndex );
	void Set_onDropdownItemClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onDropdownItemClick ( int nIndex );
};

UClass* UPBGFxObject_WebView_Basic::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_WebView
// 0x0000 (0x00EC - 0x00EC)
class UPBGFxObject_WebView : public UPBGFxObject_WebView_Basic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58089 ];

		return pClassPointer;
	};

	void OnGetCasTicketDone ( int requestId, int ErrorCode, struct FString casTicket, struct FString subscriptionURL );
	void _ClearDelegates ( );
	void _assignDelegates ( );
	void _Release ( );
	bool _Initialize ( );
};

UClass* UPBGFxObject_WebView::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_Credits
// 0x0000 (0x00A0 - 0x00A0)
class UPBGFxObject_Credits : public UPBGFxObject_ContainerBased
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58091 ];

		return pClassPointer;
	};

	void Call_setCreditsText ( struct FString newText, float Duration, float Delay );
	void _Release ( );
	bool _Initialize ( );
};

UClass* UPBGFxObject_Credits::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_EULAView
// 0x0000 (0x00A0 - 0x00A0)
class UPBGFxObject_EULAView : public UPBGFxObject_ContainerBased
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58092 ];

		return pClassPointer;
	};

	void Call_setupText ( struct FString Title, struct FString Body );
	void _Release ( );
	bool _Initialize ( );
};

UClass* UPBGFxObject_EULAView::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_SteamPurchase
// 0x0020 (0x00C0 - 0x00A0)
class UPBGFxObject_SteamPurchase : public UPBGFxObject_ContainerBased
{
public:
	int                                                m_WalletPaymentSourceID;                          		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     m_DefaultCurrency;                                		// 0x00A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      m_bAuthorised : 1;                                		// 0x00B0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FScriptDelegate                             __Unreal_onBundleClick__Delegate;                 		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58093 ];

		return pClassPointer;
	};

	void _OnFinalizeSteamTransactionDone ( int requestId, int ErrorCode, struct FString ErrorMessage );
	void _OnSteamAuthorizationDone ( struct FString orderId, unsigned long bAuthorize );
	void _OnFundWalletDone ( int requestId, int ErrorCode, struct FString ErrorMessage, int newRmtcAmount, struct FString orderId, struct FString tax, struct FString VATTax, struct FString orderTotal, struct FSOEStationCashProductFundWallet fundWalletProduct );
	void _OnGetStationCashProductsDone ( int requestId, int ErrorCode, struct FString ErrorMessage, TArray< struct FSOEStationCashProduct > StationCashProducts );
	void _OnGetPaymentSourcesDone ( int requestId, int ErrorCode, struct FString ErrorMessage, struct FString defaultcurrency, unsigned long parentPasswordRequired, int walletPaymentSourceID );
	void Call_finalizeTransaction ( );
	void Call_closeScene ( );
	void Call_updateBundles ( TArray< struct FTPBBundlesInfo > bundles );
	void ClearDelegates ( );
	void AssignDelegates ( );
	void _Release ( );
	bool _Initialize ( );
	void _onBundleClick ( struct FString sku );
	void Set_onBundleClick_Delegate ( struct FScriptDelegate F );
	void Unreal_onBundleClick ( struct FString sku );
};

UClass* UPBGFxObject_SteamPurchase::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_Subscription_Get
// 0x0000 (0x00EC - 0x00EC)
class UPBGFxObject_Subscription_Get : public UPBGFxObject_WebView_Basic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58094 ];

		return pClassPointer;
	};

	void OnGetCasTicketDone ( int requestId, int ErrorCode, struct FString casTicket, struct FString subscriptionURL );
	void _ClearDelegates ( );
	void _assignDelegates ( );
	void _Release ( );
	bool _Initialize ( );
};

UClass* UPBGFxObject_Subscription_Get::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_CharacterSelection_new
// 0x0088 (0x0184 - 0x00FC)
class UPBGFxObject_CharacterSelection_new : public UPBGFxObject_MusicContainer
{
public:
	class UMaterialInterface*                          mNewCharacterMaterial;                            		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastSelectedCharacterIndex;                       		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FGuid                                       LastSelectedCharacterGuid;                        		// 0x0104 (0x0010) [0x0000000000004000]              ( CPF_Config )
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     msCurrentArea;                                    		// 0x0118 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      m_bOpenAnimationHasBeenPlayed : 1;                		// 0x0124 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bProfilesHaveBeenLoaded : 1;                    		// 0x0124 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class UPBCameraMover*                              mMover;                                           		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCharacterSelector*                        mSelector;                                        		// 0x012C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct UPBGFxObject_CharacterSelection_new_FTCharacterProfileInfo > mCharacterProfileInfoArray;                       		// 0x0130 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __Unreal_onOpenAnimationComplete__Delegate;       		// 0x013C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __unrealOnDeleteClick__Delegate;                  		// 0x0148 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __unrealOnEnterClick__Delegate;                   		// 0x0154 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __unrealLogout__Delegate;                         		// 0x0160 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __unrealOnAreaClick__Delegate;                    		// 0x016C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __unrealOnAreaRollOver__Delegate;                 		// 0x0178 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58095 ];

		return pClassPointer;
	};

	void _Release ( );
	void _ClearDelegates ( );
	void _ClearTimers ( );
	void OnPBManagerLogoutFinished ( struct FTPBItemShopResult_OnLogoutDone* Result );
	void _OnGetSubscriptionModeDone ( struct FTPBItemShopResult_OnGetSubscriptionModeDone* Result );
	void LogoutFromPBManager ( );
	void OnLogoutFromGamespyCompleted ( unsigned long bWasSuccessful );
	void LogoutFromGamespy ( );
	bool _CreateCharacter ( );
	bool _DeleteCharacter ( );
	void ControlBar_showCharacterParams ( unsigned long bShow );
	void ControlBar_updateCharacterDetails ( class UPBCustomChar_MenuData* CharData );
	void _updateStates ( );
	bool _SelectCharacter ( int nIndex, unsigned long bSkipAnimation );
	void FillCharacterProfileInfoArray ( );
	void OnGetCharacterProfileDone ( int requestId, int ErrorCode, struct FPBCharacterProfile CharacterProfile );
	bool _LoadCharacter ( int nIndex );
	void _LoadNextCharacter ( );
	void _StartLoadingCharacters ( );
	void _CreateDefaultCharacters ( );
	void OnGettingMaxNumberProfilesDone ( int requestId, int ErrorCode, int maxNumberProfiles );
	void StartGettingMaxNumberOfProfiles ( );
	void OnGetProfilesDone ( int requestId, int ErrorCode, TArray< struct FPBProfile > Profiles );
	bool LoadPBManagerProfiles ( );
	void SetLoginError ( struct FString Error );
	void setCriticalError ( int ErrorCode, struct FString Error );
	bool _Initialize ( );
	void _OnGetAmountDone ( int requestId, int ErrorCode, int Amount );
	int _GetCharacterIndexByGuid ( struct FGuid CharGuid );
	void SetOnAreaClickDelegate ( struct FScriptDelegate F );
	void SetOnAreaRollOverDelegate ( struct FScriptDelegate F );
	void SetLogoutDelegate ( struct FScriptDelegate F );
	void SetOnEnterClickDelegate ( struct FScriptDelegate F );
	void SetOnDeleteClickDelegate ( struct FScriptDelegate F );
	void SwitchState ( struct FString sState );
	void EnableMainPlayerScreen ( );
	void OnSelectProfileDone ( int requestId, int ErrorCode, struct FGuid ProfileId, struct FString gameSpyToken, struct FString gameSpyChallenge );
	bool StartSelectProfile ( );
	void Call_updateStates ( TArray< struct UPBGFxObject_CharacterSelection_new_FTPBCharacterSelection_State > states );
	void Call_updateLastRollover ( );
	void OnDeletionProfileDone ( int requestId, int ErrorCode, struct FGuid ProfileId );
	void unrealOnAreaRollOver ( struct FString sArea );
	void unrealOnAreaClick ( struct FString sArea );
	void unrealLogout ( );
	void unrealOnEnterClick ( );
	void unrealOnDeleteClick ( );
	void _onOpenAnimationComplete ( );
	void Set_onOpenAnimationComplete_Delegate ( struct FScriptDelegate F );
	void Unreal_onOpenAnimationComplete ( );
};

UClass* UPBGFxObject_CharacterSelection_new::pClassPointer = NULL;

// Class PlanBGame.PBGFxMoviePlayer_Adverts
// 0x0000 (0x0184 - 0x0184)
class UPBGFxMoviePlayer_Adverts : public UPBGFxMoviePlayer_Tickable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58097 ];

		return pClassPointer;
	};

};

UClass* UPBGFxMoviePlayer_Adverts::pClassPointer = NULL;

// Class PlanBGame.PBGFxMoviePlayer_AdvertsHoriz
// 0x0000 (0x0184 - 0x0184)
class UPBGFxMoviePlayer_AdvertsHoriz : public UPBGFxMoviePlayer_Adverts
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58099 ];

		return pClassPointer;
	};

};

UClass* UPBGFxMoviePlayer_AdvertsHoriz::pClassPointer = NULL;

// Class PlanBGame.PBGFxMoviePlayer_AdvertsVert
// 0x0000 (0x0184 - 0x0184)
class UPBGFxMoviePlayer_AdvertsVert : public UPBGFxMoviePlayer_Adverts
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58102 ];

		return pClassPointer;
	};

};

UClass* UPBGFxMoviePlayer_AdvertsVert::pClassPointer = NULL;

// Class PlanBGame.PBGFxMoviePlayer_HUDScene
// 0x0010 (0x0194 - 0x0184)
class UPBGFxMoviePlayer_HUDScene : public UPBGFxMoviePlayer_Tickable
{
public:
	class UPBGFxObject_WeaponPresetsScreen*            pWeaponPresetsScreen;                             		// 0x0184 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     WeaponPresetsScreenName;                          		// 0x0188 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58105 ];

		return pClassPointer;
	};

	void eventTick ( float fDelta );
};

UClass* UPBGFxMoviePlayer_HUDScene::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_WeaponPresetsScreen
// 0x0018 (0x00A8 - 0x0090)
class UPBGFxObject_WeaponPresetsScreen : public UPBGFxObject_Tickable
{
public:
	unsigned long                                      bRequiresUpdate : 1;                              		// 0x0090 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsVisible : 1;                                   		// 0x0090 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bAlwaysVisible : 1;                               		// 0x0090 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bShowAll : 1;                                     		// 0x0090 (0x0004) [0x0000000000000000] [0x00000008] 
	TArray< class UGFxObject* >                        mPresets;                                         		// 0x0094 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPBCustomChar_MenuData*                      CharData;                                         		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iCurrentlySelectedPreset;                         		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58108 ];

		return pClassPointer;
	};

	void SetEnabled ( class UGFxObject* pObject, unsigned long bIsEnabled );
	void RequestUpdate ( class UGFxObject* pObject );
	void SetSelected ( class UGFxObject* pObject, unsigned long bIsSelected );
	bool CanSelectPreset ( class UPBWeaponPreset** pPreset );
	void eventTick ( float fDelta );
	bool IsEnabled ( );
	void SetShow ( unsigned long bShow );
	bool _Initialize ( );
	void InitCharData ( );
	void updatePresets ( );
	struct FString GetButtonName ( int iButtonId );
	bool SetupWeaponInfo ( int iPresetId, int iWeaponType, class UPBWeaponPreset** pPreset );
};

UClass* UPBGFxObject_WeaponPresetsScreen::pClassPointer = NULL;

// Class PlanBGame.PBGFxMoviePlayer_SpectatorScene
// 0x0010 (0x0194 - 0x0184)
class UPBGFxMoviePlayer_SpectatorScene : public UPBGFxMoviePlayer_Tickable
{
public:
	class UPBGFxObject_WeaponPresetsScreen*            pWeaponPresetsScreen;                             		// 0x0184 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     WeaponPresetsScreenName;                          		// 0x0188 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58276 ];

		return pClassPointer;
	};

	void eventTick ( float fDelta );
};

UClass* UPBGFxMoviePlayer_SpectatorScene::pClassPointer = NULL;

// Class PlanBGame.PBInventory
// 0x005C (0x0098 - 0x003C)
class UPBInventory : public UObject
{
public:
	struct FString                                     m_InventoryTabName;                               		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBGlobalBasket*                             mBasket;                                          		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     m_CurrentCategory;                                		// 0x0050 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UGFxObject*                                  mContainer;                                       		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBPlayerController*                         m_PC;                                             		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCharacterRotator*                         m_Rotator;                                        		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CurrentCategory;                                  		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMainPanelCategory >                m_Categories;                                     		// 0x0074 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBCharacterShopOffer >            m_CurrentItems;                                   		// 0x0080 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUpdateUniqueItems__Delegate;                  		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59876 ];

		return pClassPointer;
	};

	void _Equip ( );
	bool SetPresets ( TArray< struct FGuid >* serialNumber, TArray< int >* Preset );
	struct FPBItem GetItemByGUID ( struct FGuid ItemGuid );
	void addCategoryItem ( struct FString CatName, struct FString IconName );
	void addEmptyItem ( );
	void _activate ( );
	void _SetDetails ( struct FString ItemGuidStr );
	bool _CanEquip ( struct FString ItemGuidStr );
	void _SetSelectedItem ( struct FString ItemGuidStr, struct FString colorguidstring );
	bool _changeCategory ( struct FString sCategory );
	void _reset ( );
	void _init ( );
	void Activate ( );
	void equip ( );
	bool CanEquip ( struct FString ItemGuidStr );
	void SetSelectedItem ( struct FString ItemGuidStr, struct FString colorguidstring );
	void SetDetails ( struct FString ItemGuidStr );
	void ChangeCategory ( struct FString sCategory, struct FScriptDelegate Callback );
	TArray< struct FMainPanelCategory > GetCategories ( );
	void Reset ( );
	void Init ( class APBPlayerController* PC, class UPBCustomChar_MenuData* char_data, class UPBGlobalBasket* pBasket, class UGFxObject* pContainer, class UPBCharacterRotator* char_rotator );
	struct FString GetTabName ( );
	void OnUpdateUniqueItems ( unsigned long bResetList, TArray< struct FTPBCharacterShopOffer >* items );
};

UClass* UPBInventory::pClassPointer = NULL;

// Class PlanBGame.PBShop
// 0x00E8 (0x0124 - 0x003C)
class UPBShop : public UObject
{
public:
	struct FString                                     m_ShopTabName;                                    		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_CurrentCategory;                                		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FGuid                                       m_CurrentItem;                                    		// 0x0054 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FGuid                                       m_CurrentOffer;                                   		// 0x0064 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FGuid                                       m_CurrentColor;                                   		// 0x0074 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FTPBCharacterShopOffer >            m_CurrentItems;                                   		// 0x0084 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTPBCharacterShopOffer >            m_CurrentColors;                                  		// 0x0090 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPBCustomChar_MenuData*                      mCharData;                                        		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBCharacterRotator*                         m_Rotator;                                        		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBPlayerController*                         m_PC;                                             		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPBGlobalBasket*                             m_Basket;                                         		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      m_ShopRequests;                                   		// 0x00AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           m_SpecialCategories;                              		// 0x00B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           m_TempCategories;                                 		// 0x00C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMainPanelCategory >                m_Categories;                                     		// 0x00D0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUpdateUniqueItems__Delegate;                  		// 0x00DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUpdateColors__Delegate;                       		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUpdateCategories__Delegate;                   		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnShowColourPanel__Delegate;                    		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGetNewName__Delegate;                         		// 0x010C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnNameValidationComplete__Delegate;             		// 0x0118 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59879 ];

		return pClassPointer;
	};

	void _onChangeNameText ( struct FString new_name );
	void onChangeNameText ( struct FString new_name );
	bool _getWeaponParams ( struct FGuid selectedItem, TArray< struct UPBShop_FPBWeaponParamsInfo >* outInfo );
	void _getCurrentOffer ( struct FTPBCharacterShopOffer* Offer );
	void _removeShopRequest ( int Request );
	void _addShopRequest ( int Request );
	void _cancelShopRequests ( );
	void _selectColor ( struct FGuid ColorGuid );
	void _selectItem ( struct FGuid ItemGuid );
	bool _changeCategory ( struct FString sCategory );
	void _GetCategories ( );
	bool _addCurrentOfferToBasket ( );
	void _activate ( );
	void _OnGetMarketingCategoryOffersDone ( struct FTPBItemShopResult_OnGetOffersDone* Result );
	void _changeSpecialCategory ( int nMarketCategory );
	bool _isValidItemType ( struct FString Type );
	void _OnGetMarketingOffersDone ( struct FTPBItemShopResult_OnGetOffersDone* Result );
	void _getSpecialCategories ( );
	void _updateBoosterPanel ( );
	bool _isCategoryNeedUpdate ( struct FString category_name );
	void _reset ( );
	void _init ( );
	bool GetWeaponParams ( TArray< struct UPBShop_FPBWeaponParamsInfo >* outInfo );
	struct FTPBCharacterShopOffer GetCurrentOffer ( );
	struct FGuid GetCurrentColorGuid ( );
	struct FGuid GetCurrentOfferGuid ( );
	struct FGuid GetCurrentItemGuid ( );
	struct FString GetCurrentCategory ( );
	TArray< struct FTPBCharacterShopOffer > GetCurrentColors ( );
	TArray< struct FTPBCharacterShopOffer > GetCurrentItems ( );
	int GetCategoriesNum ( );
	void GetCategories ( struct FScriptDelegate Callback );
	bool AddCurrentOfferToBasket ( );
	void SelectColor ( struct FGuid ColorGuid );
	void SelectItem ( struct FGuid OfferGuid, struct FGuid ItemGuid, struct FScriptDelegate Callback, struct FScriptDelegate colourPanelDelegate, struct FScriptDelegate newNameDelegate, struct FScriptDelegate nameValidationCompleteDelegate );
	void _processItems ( TArray< struct FTPBCharacterShopOffer >* items );
	bool _filterUnlockedOffer ( struct FPBOffer* Offer );
	void _changeUnlockedCategory ( );
	void ChangeCategory ( struct FString sCategory, struct FScriptDelegate Callback, struct FScriptDelegate colourPanelDelegate );
	void UpdateCategory ( );
	void Reset ( );
	void OnOpenAnimationFinished ( );
	void _onOpenAnimationFinished ( );
	void Activate ( );
	void Init ( class APBPlayerController* PC, class UPBCustomChar_MenuData* char_data, class UPBGlobalBasket* pBasket, class UPBCharacterRotator* char_rotator );
	struct FString GetShopTabName ( );
	void UpdateBoosterPanel ( );
	bool IsCategoryNeedUpdate ( struct FString category_name );
	void OnNameValidationComplete ( class UPBShop* shop, unsigned long bValid, unsigned long bDifferentFromLast );
	struct FString OnGetNewName ( class UPBShop* shop );
	void OnShowColourPanel ( class UPBShop* shop, unsigned long bShowColourPanel, unsigned long bShowNameChooser, struct FString colourTitleString, TArray< struct FPBSBoosterList > boosters );
	void OnUpdateCategories ( class UPBShop* shop, TArray< struct FMainPanelCategory >* categories );
	void OnUpdateColors ( class UPBShop* shop, TArray< struct FTPBCharacterShopOffer >* Colors );
	void OnUpdateUniqueItems ( class UPBShop* shop, unsigned long bResetList, TArray< struct FTPBCharacterShopOffer >* items );
};

UClass* UPBShop::pClassPointer = NULL;

// Class PlanBGame.PBInventory_Appearance
// 0x00F8 (0x0190 - 0x0098)
class UPBInventory_Appearance : public UPBInventory
{
public:
	struct FName                                       m_CurrentAnimation;                               		// 0x0098 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   m_CurrentSoundCue;                                		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FTConflictingItem >                 conflicting_items;                                		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FAppearanceCategory >               HeadItems;                                        		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FAppearanceCategory >               UpperBodyItems;                                   		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FAppearanceCategory >               LowerBodyItems;                                   		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPBItem                                     selectedItem;                                     		// 0x00D4 (0x00BC) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59967 ];

		return pClassPointer;
	};

	void Call_SetConflictingItems ( TArray< struct FString > conflictItemList );
	void SetConflictingItems ( );
	bool _GetEmptyDefaultItem ( struct FPBItem BaseItem, struct FPBItem* DefaultItem );
	struct FString _localizeCategory ( struct FString Src );
	void Call_updatePosition ( struct FTPBCharacterShopOffer uioffer );
	void SwitchPositionItem ( struct FString buttonState );
	void buildCategory ( struct FString Category, TArray< struct FAppearanceCategory >* categories );
	bool IsSameCategory ( struct FString Category, unsigned char ItemType );
	void RefreshPreview ( );
	void ResetPreview ( );
	bool FindEmptyConflictItem ( struct FPBItem* resultItem );
	void _Equip ( );
	void _SetSelectedItem ( struct FString ItemGuidStr, struct FString colorguidstring );
	void _GetItemList ( struct FString Category, TArray< struct FPBItem >* itemList );
	void updateItemList ( struct FString selectedCategory, unsigned long bAddHeader );
	void UpdateGlobalCategory ( TArray< struct FAppearanceCategory >* items );
	void UpdateNewItems ( );
	void _RefreshAllItems ( unsigned long bResetList );
	bool _changeCategory ( struct FString sCategory );
	void _addSubcategories ( int Index, TArray< struct FAppearanceCategory >* items );
	void _activate ( );
	void _reset ( );
};

UClass* UPBInventory_Appearance::pClassPointer = NULL;

// Class PlanBGame.PBInventory_Weapons
// 0x0288 (0x0320 - 0x0098)
class UPBInventory_Weapons : public UPBInventory
{
public:
	class UPBNWeaponPreset*                            m_CurrentPreset;                                  		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_CurrentPresetIndex;                             		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     m_CurrentWeaponType;                              		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPBItem                                     CurrentWeapon;                                    		// 0x00AC (0x00BC) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPBItem >                           EquippedWeaponList;                               		// 0x0168 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPBItem                                     selectedItem;                                     		// 0x0174 (0x00BC) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mRenameRequestId;                                 		// 0x0230 (0x0004) [0x0000000000000000]              
	TArray< struct FWeaponItem >                       CurrentEquippedItems;                             		// 0x0234 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPBItem >                           ModsToRemove;                                     		// 0x0240 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TotalSlots;                                       		// 0x024C (0x0004) [0x0000000000000000]              
	int                                                EquippedSlots;                                    		// 0x0250 (0x0004) [0x0000000000000000]              
	int                                                RequiredSlots;                                    		// 0x0254 (0x0004) [0x0000000000000000]              
	struct FPBItem                                     CurrentSelectedMod;                               		// 0x0258 (0x00BC) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SortItems__Delegate;                            		// 0x0314 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60097 ];

		return pClassPointer;
	};

	struct FString _processWeaponCategory ( struct FString categoryMame );
	struct FString GetItemName ( struct FString item_type, struct FString itemguidstring );
	struct FString GetItemDescription ( struct FString item_type, struct FString itemguidstring );
	int GetModIdByCategory ( struct FString Category );
	bool _GetDefaultItem ( struct FPBItem BaseItem, struct FPBItem* resultItem );
	void ReplaceMods ( TArray< struct FString > StrModsToRemove );
	void Call_ChangeMods ( int TotalReqSlots, struct FTPBModOffer modDtl, TArray< struct FTPBModOffer > ModDtetails );
	void OpenChangeModMenu ( struct FPBItem Item, int ModRequiredSlots );
	void RenameLoadout ( struct FString loadoutName );
	void Call_RenameLoadout ( struct FString PresetName );
	void _activate ( );
	void Call_setWeaponStats ( int condition, TArray< struct FUIWeaponParamsInfo > Info, TArray< struct FTPBModOffer > ModDtetails, struct FString ItemTitle, struct FString itemDescription, int FreeSlots, unsigned long bSupport );
	void _SetDetails ( struct FString ItemGuidStr );
	void _Equip ( );
	void GetWeaponDetails ( TArray< struct FUIWeaponParamsInfo >* WeaponDtls, TArray< struct FTPBModOffer >* ModDtetails );
	struct FPBItem GetSelectedItemByCategory ( struct FString Category );
	bool GetWeaponByModId ( struct FPBItem ModItem, struct FPBItem* FoundItem );
	void _SetSelectedItem ( struct FString ItemGuidStr, struct FString colorguidstring );
	int _getModRequiredSlots ( struct FGuid ItemGuid, int WeaponCode );
	int _getWeaponTotalSlots ( int WeaponCode );
	void UpdateWeaponMods ( struct FPBItem Item );
	void SetCurrentWeapon ( struct FPBItem Item );
	bool _GetEmptyDefaultItem ( struct FPBItem BaseItem, struct FPBItem* DefaultItem );
	void _GetItemList ( struct FString Category, TArray< struct FPBItem >* itemList );
	void AddToUIOffers ( TArray< struct FPBItem > itemList, struct FString Category );
	void AddWeaponMods ( );
	void AddDecalMaterial ( struct FString Category );
	void AddAttachments ( );
	int SortItems ( struct FPBItem A, struct FPBItem B );
	void updateItemList ( struct FString Category );
	void _RefreshAllItems ( unsigned long bResetList, unsigned long bUpdateSelectedItem );
	bool _changeCategory ( struct FString sCategory );
	TArray< struct FMainPanelCategory > GetCategories ( );
	void _init ( );
};

UClass* UPBInventory_Weapons::pClassPointer = NULL;

// Class PlanBGame.PBInventory_SkillTaunt
// 0x00F8 (0x0190 - 0x0098)
class UPBInventory_SkillTaunt : public UPBInventory
{
public:
	struct FPBItem                                     CurrentItem;                                      		// 0x0098 (0x00BC) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPBItem >                           SkillList;                                        		// 0x0154 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPBItem >                           tauntList;                                        		// 0x0160 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPBItem >                           NewItemList;                                      		// 0x016C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       m_CurrentAnimation;                               		// 0x0178 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   m_CurrentSoundCue;                                		// 0x0180 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __SortItemList__Delegate;                         		// 0x0184 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60348 ];

		return pClassPointer;
	};

	void SetTaunt ( int TauntLocation );
	void Call_OpenTauntsMenu ( struct FTPBCharacterShopOffer selectedItem );
	void OpenTauntsMenu ( );
	void Call_SetSkillTauntItems ( TArray< struct FTPBCharacterShopOffer > Tauntitems, unsigned long bVisible );
	void SetTauntItemsWheel ( );
	void SetSkillItemsWheel ( );
	void ClearItemsWheel ( );
	void loadTaunts ( );
	int SortItemList ( struct FPBItem A, struct FPBItem B );
	void _Equip ( );
	void PreviewTaunt ( struct FPBItem TauntItem );
	void _SetSelectedItem ( struct FString ItemGuidStr, struct FString colorguidstring );
	struct FString _localizeSkill ( struct FString Src );
	void updateItemList ( TArray< struct FPBItem > itemList, unsigned long bAddHeader );
	void loadSkills ( );
	void loadNewItems ( );
	void _RefreshAllItems ( unsigned long bResetList );
	bool _changeCategory ( struct FString sCategory );
	TArray< struct FMainPanelCategory > GetCategories ( );
	void _init ( );
	void _reset ( );
};

UClass* UPBInventory_SkillTaunt::pClassPointer = NULL;

// Class PlanBGame.PBSceneCapture2DActor
// 0x0038 (0x0218 - 0x01E0)
class APBSceneCapture2DActor : public ASceneCapture2DActor
{
public:
	class APBCustomChar_Preview*                       TargetPreview;                                    		// 0x01E0 (0x0004) [0x0000000000000000]              
	float                                              MinDistance;                                      		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              transitionSpeed;                                  		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TargetLocation;                                   		// 0x01EC (0x000C) [0x0000000000000000]              
	struct FVector                                     OriginalLocation;                                 		// 0x01F8 (0x000C) [0x0000000000000000]              
	struct FVector                                     DistNormal;                                       		// 0x0204 (0x000C) [0x0000000000000000]              
	unsigned long                                      bTargetReached : 1;                               		// 0x0210 (0x0004) [0x0000000000000000] [0x00000001] 
	class USkeletalMeshComponent*                      CustomWeaponMeshComponent;                        		// 0x0214 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60478 ];

		return pClassPointer;
	};

	void setTargetPreview ( class APBCustomChar_Preview* NewTarget );
	void eventTick ( float DeltaTime );
	void UpdateTargetDistance ( );
	void eventPostBeginPlay ( );
};

UClass* APBSceneCapture2DActor::pClassPointer = NULL;

// Class PlanBGame.PBShop_Appearance
// 0x006C (0x0190 - 0x0124)
class UPBShop_Appearance : public UPBShop
{
public:
	TArray< struct FString >                           m_headCategories;                                 		// 0x0124 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            m_headItemTypes;                                  		// 0x0130 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           m_upperbodyCategories;                            		// 0x013C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            m_upperbodyItemTypes;                             		// 0x0148 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           m_lowerbodyCategories;                            		// 0x0154 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            m_lowerbodyItemTypes;                             		// 0x0160 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            m_headTypes;                                      		// 0x016C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            m_upperbodyTypes;                                 		// 0x0178 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            m_lowerbodyTypes;                                 		// 0x0184 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60803 ];

		return pClassPointer;
	};

	void _getCurrentOffer ( struct FTPBCharacterShopOffer* Offer );
	void _GetShopCategories ( unsigned char eCategory, TArray< struct FString >* categories, TArray< unsigned char >* itemTypes );
	unsigned char _ConvertCategory ( unsigned char eType );
	void _processItems ( TArray< struct FTPBCharacterShopOffer >* items );
	bool _filterUnlockedOffer ( struct FPBOffer* Offer );
	void _onGetUniqueOffersDone ( int requestId, int ErrorCode, TArray< struct FPBUniqueOffer > offers );
	void _onGetItemOffersDone ( int requestId, int ErrorCode, TArray< struct FPBOffer > offers );
	void _selectColor ( struct FGuid ColorGuid );
	void _selectItem ( struct FGuid ItemGuid );
	bool _changeCategory ( struct FString sCategory );
	bool _isValidItemType ( struct FString Type );
	void _changeSpecialCategory ( int nMarketCategory );
	void _localizeCategory ( struct FString* Src, struct FString* dst );
	void _processCategories ( TArray< struct FString >* categories, TArray< struct FMainPanelCategory >* children_array );
	void _GetCategories ( );
	void _init ( );
};

UClass* UPBShop_Appearance::pClassPointer = NULL;

// Class PlanBGame.PBShop_Weapon
// 0x0018 (0x013C - 0x0124)
class UPBShop_Weapon : public UPBShop
{
public:
	TArray< struct FString >                           m_WeaponCategories;                               		// 0x0124 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           m_TypesOrder;                                     		// 0x0130 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60926 ];

		return pClassPointer;
	};

	void _processWeaponCategorie ( struct FString categorie, TArray< struct FMainPanelCategory >* children_array );
	void _onGetOffersDone ( struct FTPBItemShopResult_OnGetOffersDone* Result );
	void _GetCategories ( );
	bool _isCategoryNeedUpdate ( struct FString category_name );
	void _processItems ( TArray< struct FTPBCharacterShopOffer >* items );
	bool _isValidItem ( struct FGuid ItemGuid, int nWeaponCode );
	bool _isValidItemType ( struct FString Type );
	void _OnGetCategoryOffersDone ( struct FTPBItemShopResult_OnGetOffersDone* Result );
	void _convertWeaponCategory ( struct FString Source, struct FString* outCategory, int* outWeaponIndex );
	bool _getWeaponParams ( struct FGuid selectedItem, TArray< struct UPBShop_FPBWeaponParamsInfo >* outInfo );
	bool _changeCategory ( struct FString sCategory );
	void _changeSpecialCategory ( int nMarketCategory );
	void _selectItem ( struct FGuid ItemGuid );
	void _onOpenAnimationFinished ( );
	void _activate ( );
	void _init ( );
};

UClass* UPBShop_Weapon::pClassPointer = NULL;

// Class PlanBGame.PBShop_Skill
// 0x0000 (0x0124 - 0x0124)
class UPBShop_Skill : public UPBShop
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61031 ];

		return pClassPointer;
	};

	bool _addCurrentOfferToBasket ( );
	void _OnGetCategoryOffersDone ( struct FTPBItemShopResult_OnGetOffersDone* Result );
	void _processItems ( TArray< struct FTPBCharacterShopOffer >* items );
	bool _changeCategory ( struct FString sCategory );
	void _GetCategories ( );
	void _activate ( );
	bool _isValidItemType ( struct FString Type );
	void _init ( );
};

UClass* UPBShop_Skill::pClassPointer = NULL;

// Class PlanBGame.PBShop_Service
// 0x00FC (0x0220 - 0x0124)
class UPBShop_Service : public UPBShop
{
public:
	TArray< struct UPBShop_Service_FTServiceCategory > m_CachedItems;                                    		// 0x0124 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      mbGetAdditionalInfo : 1;                          		// 0x0130 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      mbNameAvailable : 1;                              		// 0x0130 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      mbChangingRace : 1;                               		// 0x0130 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	int                                                mnAvailabilityRequestId;                          		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     msNewName;                                        		// 0x0138 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FGuid                                       mOldAvatarGuid;                                   		// 0x0144 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FGuid                                       mNewAvatarGuid;                                   		// 0x0154 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FGuid                                       mAddAvatarGuid;                                   		// 0x0164 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FGuid                                       mAddSkinGuid;                                     		// 0x0174 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	int                                                mNewRaceIndex;                                    		// 0x0184 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mOldRaceIndex;                                    		// 0x0188 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mNewColorIndex;                                   		// 0x018C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mOldColorIndex;                                   		// 0x0190 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mInBasketRaceIndex;                               		// 0x0194 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mInBasketColorIndex;                              		// 0x0198 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FTHeadInfo                                  mHeads[ 0x2 ];                                    		// 0x019C (0x0078) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPBSBoosterList >                   mBoosters;                                        		// 0x0214 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61080 ];

		return pClassPointer;
	};

	void _updateBoosterPanel ( );
	bool _isCategoryNeedUpdate ( struct FString category_name );
	bool _getRaceAndColorIndexes ( struct FGuid raceGuid, struct FGuid ColorGuid, int* raceIndex, int* colorIndex );
	bool _getRaceAndColorGuids ( int raceIndex, int colorIndex, struct FGuid* raceGuid, struct FGuid* ColorGuid );
	struct FTPBCharacterShopOffer GetOfferFromGuid ( struct FGuid searchGuid );
	void _OnDeleteItemFromBasketDone ( int requestId, int ErrorCode );
	void _OnIsCharacterNameAvailableDone ( int requestId, int ErrorCode, unsigned long available );
	void _onChangeNameText ( struct FString new_name );
	struct FString _GetItemDescription ( struct FGuid ItemGuid );
	void _OnGetOfferDetailsDone ( int requestId, int ErrorCode, struct FGuid OfferId, struct FString offerDescription, struct FGuid itemId, struct FString itemDescription, int XpBoost, int creditBoost, int groupXpBoost, int groupIgcBoost );
	bool actuallyAddItemToBasket ( struct FTPBCharacterShopOffer Offer );
	void _getCurrentOffer ( struct FTPBCharacterShopOffer* Offer );
	bool _addCurrentOfferToBasket ( );
	void _selectColor ( struct FGuid ColorGuid );
	void _selectItem ( struct FGuid ItemGuid );
	void _processItemsBoosters ( TArray< struct FTPBCharacterShopOffer >* items );
	void _processItemsServices ( TArray< struct FTPBCharacterShopOffer >* items );
	void _GetCategories ( );
	void _processItemsForSales ( TArray< struct FTPBCharacterShopOffer >* items );
	void _OnGetMarketingCategoryOffersDone ( struct FTPBItemShopResult_OnGetOffersDone* Result );
	void fillAllBoosterDescriptions ( );
	void _OnGetCategoryOffersDone ( struct FTPBItemShopResult_OnGetOffersDone* Result );
	void _useCache ( );
	bool _changeCategory ( struct FString sCategory );
	void _activate ( );
	void _init ( );
	bool _isValidItemType ( struct FString Type );
};

UClass* UPBShop_Service::pClassPointer = NULL;

// Class PlanBGame.PBShop_Taunt
// 0x0018 (0x013C - 0x0124)
class UPBShop_Taunt : public UPBShop
{
public:
	TArray< struct FTPBCharacterShopOffer >            m_CachedItems;                                    		// 0x0124 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       m_CurrentAnimation;                               		// 0x0130 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   m_CurrentSoundCue;                                		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61306 ];

		return pClassPointer;
	};

	void _OnGetCategoryOffersDone ( struct FTPBItemShopResult_OnGetOffersDone* Result );
	void _useCache ( );
	void _selectItem ( struct FGuid ItemGuid );
	bool _changeCategory ( struct FString sCategory );
	void _GetCategories ( );
	void _reset ( );
	void _activate ( );
	bool _isValidItemType ( struct FString Type );
	void _init ( );
};

UClass* UPBShop_Taunt::pClassPointer = NULL;

// Class PlanBGame.PBUISettingsArc
// 0x0040 (0x007C - 0x003C)
class UPBUISettingsArc : public UObject
{
public:
	float                                              fHeatDisplayTime;                                 		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fOtherDisplayTime;                                		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLineDisplayTime;                                 		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fProgressionTime;                                 		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fButtonsFadeupTime;                               		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fNavigationDelayTime;                             		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iWarningTime;                                     		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iCriticalTime;                                    		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAboveCrosshairMessageDisplayTime;                		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDelayBetweenTeamMateStatusScans;                 		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fKillMessageDisplayTime;                          		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fKillMessageFadeOut;                              		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fKillMessageMoveTime;                             		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fKillMessageFadeIn;                               		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSubmitDelayTime;                                 		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPBUISettingsArc*                            pPBHSAInstance;                                   		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61709 ];

		return pClassPointer;
	};

	class UPBUISettingsArc* GetInstance ( );
};

UClass* UPBUISettingsArc::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_PlayerSettings_Main
// 0x0024 (0x00B4 - 0x0090)
class UPBGFxObject_PlayerSettings_Main : public UPBGFxObject_Tickable
{
public:
	unsigned long                                      bFirstUpdate : 1;                                 		// 0x0090 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsDirty : 1;                                     		// 0x0090 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class UGFxObject*                                  pNextMatchVotePanel;                              		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iRepeatMap;                                       		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iNewMap;                                          		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iNewSettings;                                     		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iPlayerVote;                                      		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     NextMatchVotePanelName;                           		// 0x00A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65349 ];

		return pClassPointer;
	};

	void SetCanStartVote ( unsigned long CanStartVote );
	void eventTick ( float fDelta );
	void InitialUpdate ( );
	bool _Initialize ( );
	void UpdateNextMatchVotePanel ( );
	void UpdateNextMatchVotes ( );
};

UClass* UPBGFxObject_PlayerSettings_Main::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_PlayerSettings_Class
// 0x0030 (0x00C0 - 0x0090)
class UPBGFxObject_PlayerSettings_Class : public UPBGFxObject_Tickable
{
public:
	TArray< struct FString >                           mButtonNames;                                     		// 0x0090 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      mSelectableArray;                                 		// 0x009C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      mConditions;                                      		// 0x00A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __delegateChangeClass__Delegate;                  		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65350 ];

		return pClassPointer;
	};

	void setDelegateChangeClass ( struct FScriptDelegate D );
	void asUpdate ( int selectedLoadout );
	bool _Initialize ( );
	void SetModImage ( struct FString imageName, int presetIndex, int weaponIndex, int modIndex );
	void SetMods ( struct FSWeaponCode Code, int weaponIndex, int nPresetIndex );
	void SetConditions ( TArray< int > items, TArray< struct FString > presetNames );
	void _InitWeaponTextures ( );
	bool CanSelectPreset ( class UPBWeaponPreset** pPreset );
	void _UpdateSelectable ( );
	void eventTick ( float fDelta );
	void delegateChangeClass ( int NewClass );
};

UClass* UPBGFxObject_PlayerSettings_Class::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_PlayerSettings_Voting
// 0x0058 (0x00E8 - 0x0090)
class UPBGFxObject_PlayerSettings_Voting : public UPBGFxObject_Tickable
{
public:
	unsigned long                                      bFirstUpdate : 1;                                 		// 0x0090 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bVoteClockVisible : 1;                            		// 0x0090 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bCommittedVote : 1;                               		// 0x0090 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class UGFxObject*                                  mVoteOptionsContainer;                            		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< unsigned char >                            rVoteTopics;                                      		// 0x0098 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           rVoteOptions;                                     		// 0x00A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                currentVoteTimer;                                 		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                iCurrentVoteType;                                 		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __UpdateVoteTopics__Delegate;                     		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UpdateVoteOptions__Delegate;                    		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSelectTopic__Delegate;                        		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSelectOption__Delegate;                       		// 0x00DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65351 ];

		return pClassPointer;
	};

	void SetVoteClockVisible ( unsigned long bVisible );
	void SetVoteTimerString ( struct FString NewTime );
	void SetOptionsCount ( class UGFxObject* pObject, int Count );
	void ShowVoteTopics ( );
	void ShowVoteOptions ( );
	void RefreshOptions ( );
	void SetOnSelectTopic ( struct FScriptDelegate F );
	void SetOnSelectOption ( struct FScriptDelegate F );
	void SetUpdateVoteOptions ( struct FScriptDelegate F );
	void SetUpdateVoteTopics ( struct FScriptDelegate F );
	void flashOnSelectTopic ( class UGFxObject* pSelectedItem, int Id );
	void flashOnSelectOption ( class UGFxObject* pSelectedItem, int Id );
	void flashUpdateVoteOptions ( );
	void flashUpdateVoteTopics ( );
	bool CanStartVote ( );
	void CommitVote ( int VoteEvent, struct FString Option );
	void GetMaps ( unsigned long bSkipCurrentMap, TArray< struct FString >* MapNames );
	void GetPlayerList ( struct FPBVoteTargetInfo pTargetInfo, TArray< struct FString >* PlayerNames );
	int GetVoteOptions ( int VoteEvent, TArray< struct FString >* rOutOptionStrings );
	struct FString GetStringFromVoteEvent ( unsigned char EventType );
	void SetKickList ( TArray< struct FString > items, struct FString TeamName );
	void RecreateVoteTopics ( );
	void RecreateVoteOptions ( );
	void eventTick ( float fDelta );
	void InitialUpdate ( );
	void OnSelectOption ( class UGFxObject* pSelectedItem, int Id );
	void OnSelectTopic ( class UGFxObject* pSelectedItem, int Id );
	void UpdateVoteOptions ( );
	void UpdateVoteTopics ( );
};

UClass* UPBGFxObject_PlayerSettings_Voting::pClassPointer = NULL;

// Class PlanBGame.PBGFxObject_PlayerSettings_Faction
// 0x0028 (0x00B8 - 0x0090)
class UPBGFxObject_PlayerSettings_Faction : public UPBGFxObject_Tickable
{
public:
	struct FString                                     msContainerPath;                                  		// 0x0090 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                mnCurrentTeam;                                    		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      mButtonsState;                                    		// 0x00A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __delegateChangeFaction__Delegate;                		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65352 ];

		return pClassPointer;
	};

	void setDelegateChangeFaction ( struct FScriptDelegate D );
	void asUpdate ( );
	bool _Initialize ( );
	void eventTick ( float fDelta );
	void _updateButtons ( );
	void delegateChangeFaction ( struct FString newFaction );
};

UClass* UPBGFxObject_PlayerSettings_Faction::pClassPointer = NULL;

// Class PlanBGame.PBGlobalWeaponParam
// 0x0010 (0x01E8 - 0x01D8)
class APBGlobalWeaponParam : public AActor
{
public:
	float                                              SpreadFactor;                                     		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              damageFactor;                                     		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              runSpeed;                                         		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              jumpSpeed;                                        		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68711 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};

UClass* APBGlobalWeaponParam::pClassPointer = NULL;

// Class PlanBGame.PBHardcoreGame
// 0x0000 (0x0468 - 0x0468)
class APBHardcoreGame : public APBRoundGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68718 ];

		return pClassPointer;
	};

};

UClass* APBHardcoreGame::pClassPointer = NULL;

// Class PlanBGame.PBHeliAvailable
// 0x0000 (0x0060 - 0x0060)
class UPBHeliAvailable : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69075 ];

		return pClassPointer;
	};

};

UClass* UPBHeliAvailable::pClassPointer = NULL;

// Class PlanBGame.PBHistory
// 0x0000 (0x01D8 - 0x01D8)
class APBHistory : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69077 ];

		return pClassPointer;
	};

};

UClass* APBHistory::pClassPointer = NULL;

// Class PlanBGame.PBHostilesEliminated
// 0x0000 (0x0060 - 0x0060)
class UPBHostilesEliminated : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69085 ];

		return pClassPointer;
	};

};

UClass* UPBHostilesEliminated::pClassPointer = NULL;

// Class PlanBGame.PBInstructionVideoList
// 0x0014 (0x0050 - 0x003C)
class UPBInstructionVideoList : public UObject
{
public:
	class UPBInstructionVideoList*                     pInstructionVideoListArchetype;                   		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bDisableAllVideos : 1;                            		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FPBInstructionVideo >               rInstructionVideos;                               		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69090 ];

		return pClassPointer;
	};

	class UPBInstructionVideoList* GetInstance ( );
	bool FindInstructionVideoInfo ( unsigned char eType, int TeamIndex, struct FPBInstructionVideo* pInfo );
	class USoundCue* GetSoundCue ( unsigned char eType, int TeamIndex );
	class UTextureMovie* GetInstructionVideo ( unsigned char eType, int TeamIndex );
	bool ShouldPlayInstructionVideo ( unsigned char eType, int TeamIndex );
};

UClass* UPBInstructionVideoList::pClassPointer = NULL;

// Class PlanBGame.PBInteractibleZone
// 0x0003 (0x0354 - 0x0351)
class APBInteractibleZone : public APBInteractiveObjective
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69125 ];

		return pClassPointer;
	};

};

UClass* APBInteractibleZone::pClassPointer = NULL;

// Class PlanBGame.PBInvulnerabilityVolume
// 0x0000 (0x0214 - 0x0214)
class APBInvulnerabilityVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69259 ];

		return pClassPointer;
	};

	void eventUnTouch ( class AActor* Other );
};

UClass* APBInvulnerabilityVolume::pClassPointer = NULL;

// Class PlanBGame.PBMenuHUD
// 0x0000 (0x0464 - 0x0464)
class APBMenuHUD : public APBBaseHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69287 ];

		return pClassPointer;
	};

	void OpenPlayerSettings ( );
	void DrawEngineHUD ( );
};

UClass* APBMenuHUD::pClassPointer = NULL;

// Class PlanBGame.PBMenuReplicationInfo
// 0x0000 (0x0374 - 0x0374)
class APBMenuReplicationInfo : public APBGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69288 ];

		return pClassPointer;
	};

	void StartProcessingMenuData ( );
	void StartProcessingCharacterData ( );
};

UClass* APBMenuReplicationInfo::pClassPointer = NULL;

// Class PlanBGame.PBItemComparisonReplicationInfo
// 0x0004 (0x07FC - 0x07F8)
class APBItemComparisonReplicationInfo : public APBPlayerReplicationInfo
{
public:
	unsigned long                                      bIsProcessing : 1;                                		// 0x07F8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69341 ];

		return pClassPointer;
	};

	bool IsProcessingCharacter ( );
	void SetCharacterData ( unsigned long bForceSyncMerging, struct FCustomCharData* newData );
	void SetCharacterMesh ( class USkeletalMesh* Mesh3P, class USkeletalMesh* Mesh1P );
};

UClass* APBItemComparisonReplicationInfo::pClassPointer = NULL;

// Class PlanBGame.PBWeaponComparisonReplicationInfo
// 0x0004 (0x0378 - 0x0374)
class APBWeaponComparisonReplicationInfo : public APBGameReplicationInfo
{
public:
	unsigned long                                      bIsProcessing : 1;                                		// 0x0374 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsSuccess : 1;                                   		// 0x0374 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69351 ];

		return pClassPointer;
	};

	bool IsWeaponSet ( );
	bool IsProcessingWeapon ( );
	void ProcessWeaponDataByCode ( class APBPlayerReplicationInfo* PRI, struct FSWeaponCode WeaponCode, unsigned long bUpdateMeshWhenDone );
	void ProcessWeaponData ( class APBPlayerReplicationInfo* PRI, class APBKWeaponParams* pWeaponParams, class APBNWeaponCustomParams* pWeaponCustomParams, unsigned long bUpdateMeshWhenDone, class APBWeaponPickup* WeaponPickup, unsigned long bInFirstPerson, unsigned long bForceSync, struct FCustomWeaponData* WeaponData );
	void SendWeaponProcessingNotification ( unsigned long bNowProcessing );
	void SetNewWeaponMesh ( struct FCreateWeaponStatus InWeaponStatus, class USkeletalMesh* NewMesh );
};

UClass* APBWeaponComparisonReplicationInfo::pClassPointer = NULL;

// Class PlanBGame.PBSkill_Akimbo
// 0x0034 (0x02D0 - 0x029C)
class APBSkill_Akimbo : public APBSkill
{
public:
	TArray< struct FSSkillAkimbo_WeaponInfo >          rSkillWeaponParamNames;                           		// 0x029C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FSSkillAkimbo_WeaponInfo                    AkimboWeaponInfo;                                 		// 0x02A8 (0x0014) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              CombatGlideCost;                                  		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultCostPerBullet;                             		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlideFOVCharacter;                                		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlideFOVWeapon;                                   		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOutOfEnergy : 1;                                 		// 0x02CC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69723 ];

		return pClassPointer;
	};

	void OnSkillLevelChanged ( );
	void NotifyClientOutOfEnergy ( );
	void OnEnergyDepletedDuringUse ( );
	bool HasEnoughEnergyForOneShot ( );
	void OnConsumeAmmo ( );
	float GetCurrentEnergyCost ( );
	bool GetSkillWeaponCode ( int iIndex, struct FSWeaponCode* outWeaponCode );
	void InitSkill ( int iNewSkillLevel, unsigned long bDoNotEnforceDefaultLevel );
	void SetAkimboWeaponInfo ( );
	bool FindAkimboWeaponInfo ( int skillLevel, struct FSSkillAkimbo_WeaponInfo* pInfo );
	float GetCostPerBullet ( );
	struct FString GetWeaponParamName ( );
};

UClass* APBSkill_Akimbo::pClassPointer = NULL;

// Class PlanBGame.PBKWeaponInfo_Berserk
// 0x0008 (0x0284 - 0x027C)
class APBKWeaponInfo_Berserk : public APBKWeaponInfo
{
public:
	class UParticleSystemComponent*                    pBerserkPSLeftHand;                               		// 0x027C (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    pBerserkPSRightHand;                              		// 0x0280 (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69783 ];

		return pClassPointer;
	};

	float SetBerserCharging ( unsigned long bCharging );
	float PlayPrepareToEndChargeAnim ( );
	void PlayPrepareToChargeAnim ( );
	void SetWeaponVisibility ( unsigned long bFirstPerson, unsigned long bCurrentlyEquipped );
	void ActivateBerserkParticleSystem1P ( unsigned long bEnabled );
	void eventDestroyed ( );
};

UClass* APBKWeaponInfo_Berserk::pClassPointer = NULL;

// Class PlanBGame.PBKWeapon_BerserkSyringe
// 0x0000 (0x05C0 - 0x05C0)
class APBKWeapon_BerserkSyringe : public APBKWeapon_Skill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69861 ];

		return pClassPointer;
	};

	void ClientEndActiveState ( );
	void EndActiveState ( );
	void CancelSkill ( );
	void ReloadWeapon ( );
	void ServerGotoInject ( );
	void EndFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	bool HasEnergyCost ( );
	bool OnUseSkill ( unsigned char FireModeNum );
};

UClass* APBKWeapon_BerserkSyringe::pClassPointer = NULL;

// Class PlanBGame.PBSkill_GattlingGun
// 0x0014 (0x02B0 - 0x029C)
class APBSkill_GattlingGun : public APBSkill_AllClients
{
public:
	TArray< struct FGattlingGunData >                  gattlingGunValues;                                		// 0x029C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      iSpinByte;                                        		// 0x02A8 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fCurSpinPerc;                                     		// 0x02AC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69924 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	int GetHealAmount ( );
	float GetExplosionDamage ( );
	float GetExplosionRadiusEffective ( );
	float GetExplosionRadiusMax ( );
	float GetBarrelRotationSpeed ( );
	void Died ( class AController* Killer );
	void NotifyClientOutOfEnergy ( );
	void eventTick ( float fDeltaTime );
	void OnEnergyDepletedDuringUse ( );
	void SetSpinPerc ( float fSpinPerc );
	void SetSpinByte ( float fSpinPerc );
	void ClientOnUse ( unsigned char UsageMode );
	void OnUse ( unsigned char UsageMode );
	float GetCurrentEnergyCost ( );
	bool GetSkillWeaponCode ( int iIndex, struct FSWeaponCode* outWeaponCode );
	bool IsSelectable ( );
	void InitSkill ( int iNewSkillLevel, unsigned long bDoNotEnforceDefaultLevel );
};

UClass* APBSkill_GattlingGun::pClassPointer = NULL;

// Class PlanBGame.PBKWeaponInfo_Gattling
// 0x002C (0x02A8 - 0x027C)
class APBKWeaponInfo_Gattling : public APBKWeaponInfo
{
public:
	class UStaticMesh*                                 BarrelMesh;                                       		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        BarrelComponent1P;                                		// 0x0280 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        BarrelComponent3P;                                		// 0x0284 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   SpinningLoop1P;                                   		// 0x0288 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   SpinningLoop3P;                                   		// 0x028C (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             SpinningSoundComp1P;                              		// 0x0290 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             SpinningSoundComp3P;                              		// 0x0294 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             SpinningSoundComp;                                		// 0x0298 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	unsigned long                                      bSpinSoundPlaying : 1;                            		// 0x029C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              fCurSpin;                                         		// 0x02A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodeAdditiveBlending*                   pSpinAnimNode;                                    		// 0x02A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69962 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void StopAllSpinningSounds ( );
	void SetGattlingSpinAnim ( float fPerc );
	void DetachWeapon ( );
	void SetSoundLevels ( float fPerc );
	void SetWeaponVisibility ( unsigned long bFirstPerson, unsigned long bCurrentlyEquipped );
	void RotateBarrel ( float Speed, float fDeltaTime );
	void CreateVisualComponents ( unsigned long bFirstPerson, class USkeletalMeshComponent* BaseForWeapon );
	void UpdateTeamColor ( );
	void SetAnimSpinPerc ( float fNewPerc );
	void CleanupAnimNodeCache ( );
	void PlayImpactEffects ( struct FVector HitLocation, unsigned long bPawnHit );
	void CacheAnimNodes ( class USkeletalMeshComponent* CharacterMesh );
	void eventPostBeginPlay ( );
};

UClass* APBKWeaponInfo_Gattling::pClassPointer = NULL;

// Class PlanBGame.PBSkill_HeadCrab
// 0x0028 (0x02C4 - 0x029C)
class APBSkill_HeadCrab : public APBSkill
{
public:
	class APBSkill_HeadCrabActor*                      pHeadCrabActorTemplate;                           		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FHeadCrabData >                     headCrabValues;                                   		// 0x02A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   NegativePlacementSound;                           		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vSpawnOffset;                                     		// 0x02B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeadCrabReleaseTime;                              		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APBSkill_HeadCrabActor*                      currentPlacedHeadCrab;                            		// 0x02C0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70084 ];

		return pClassPointer;
	};

	float GetCurrentEnergyCost ( );
	void Died ( class AController* Killer );
	void eventTick ( float fDelta );
	bool IsHeadCrabPlaceable ( );
	void OnEnergyDepletedDuringUse ( );
	bool SpawnHeadCrab ( unsigned char DeployMode, class APawn* pOwner );
	void ActivateControlMode ( );
	void eventDestroyed ( );
	void InitSkill ( int iNewSkillLevel, unsigned long bDoNotEnforceDefaultLevel );
};

UClass* APBSkill_HeadCrab::pClassPointer = NULL;

// Class PlanBGame.PBKWeapon_Interactible
// 0x0000 (0x05B8 - 0x05B8)
class APBKWeapon_Interactible : public APBKWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70121 ];

		return pClassPointer;
	};

};

UClass* APBKWeapon_Interactible::pClassPointer = NULL;

// Class PlanBGame.PBKWeapon_MortarCaller
// 0x0000 (0x05B8 - 0x05B8)
class APBKWeapon_MortarCaller : public APBKWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70202 ];

		return pClassPointer;
	};

};

UClass* APBKWeapon_MortarCaller::pClassPointer = NULL;

// Class PlanBGame.PBSkill_PPlane
// 0x0024 (0x02C0 - 0x029C)
class APBSkill_PPlane : public APBSkill
{
public:
	TArray< struct FPaperPlaneImprovement >            rPaperPlaneImprovementsArray;                     		// 0x029C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class APBPaperPlanePawn*                           pPaperPlaneTemplate;                              		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      IsPlacePending : 1;                               		// 0x02AC (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      IsControlModeUser : 1;                            		// 0x02AC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bFiringInProgress : 1;                            		// 0x02AC (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	class APBPaperPlanePawn*                           currentPlacedPPlane;                              		// 0x02B0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              ThrowAnimationTime;                               		// 0x02B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PlaneReleaseTime;                                 		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlaneSpawnDistance;                               		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70208 ];

		return pClassPointer;
	};

	void Died ( class AController* Killer );
	void eventTick ( float fDelta );
	void OnEnergyDepletedDuringUse ( );
	float GetCurrentEnergyCost ( );
	void SpawnPPlane ( );
	void SwitchToPrevWeapon ( );
	void ThrowCompletedClient ( );
	void ThrowCompleted ( );
	void HideMesh ( );
	void ClientPlayThrowAnimation ( unsigned long ControlModeUser );
	void PlayThrowAnimation ( );
	void PPlaneSelected ( );
	bool DropPPlane ( );
	void OnUse ( unsigned char UsageMode );
	void InitSkill ( int iNewSkillLevel, unsigned long bDoNotEnforceDefaultLevel );
};

UClass* APBSkill_PPlane::pClassPointer = NULL;

// Class PlanBGame.PBKWeapon_SndBomb
// 0x0004 (0x05BC - 0x05B8)
class APBKWeapon_SndBomb : public APBKWeapon
{
public:
	class UAudioComponent*                             pSequenceLoopAC;                                  		// 0x05B8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70225 ];

		return pClassPointer;
	};

	void SetInteractLoopSounds ( unsigned long bEnableSounds );
};

UClass* APBKWeapon_SndBomb::pClassPointer = NULL;

// Class PlanBGame.PBKWeapon_Syringe
// 0x0004 (0x05C4 - 0x05C0)
class APBKWeapon_Syringe : public APBKWeapon_Skill
{
public:
	unsigned long                                      skillUsed : 1;                                    		// 0x05C0 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70236 ];

		return pClassPointer;
	};

	void ReloadWeapon ( );
	void ServerStartHeal ( );
	void EndFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	bool IsSelectable ( );
	bool OnUseSkill ( unsigned char FireModeNum );
};

UClass* APBKWeapon_Syringe::pClassPointer = NULL;

// Class PlanBGame.PBSkill_Heal
// 0x0010 (0x02AC - 0x029C)
class APBSkill_Heal : public APBSkill
{
public:
	TArray< struct FHealData >                         healValues;                                       		// 0x029C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                HealEffectDelay;                                  		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70261 ];

		return pClassPointer;
	};

	void eventTick ( float fDelta );
	void OnUse ( unsigned char UsageMode );
	void InitSkill ( int iNewSkillLevel, unsigned long bDoNotEnforceDefaultLevel );
};

UClass* APBSkill_Heal::pClassPointer = NULL;

// Class PlanBGame.PBKWeapon_Turret
// 0x0000 (0x05C0 - 0x05C0)
class APBKWeapon_Turret : public APBKWeapon_Skill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70281 ];

		return pClassPointer;
	};

	void NotifyTauntEnded ( );
	void NotifyTauntStarted ( );
	void SyncPlaceTurret ( );
	void PlaceTurret ( );
	void EndFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void BeginFire ( unsigned char FireModeNum );
	void SwitchToPrevWeapon ( );
};

UClass* APBKWeapon_Turret::pClassPointer = NULL;

// Class PlanBGame.PBSkill_Turret
// 0x009C (0x0338 - 0x029C)
class APBSkill_Turret : public APBSkill
{
public:
	float                                              rotationAngle;                                    		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetRotationAngle;                              		// 0x02A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      IsPlacePending : 1;                               		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsPlaceable : 1;                                 		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsPlacementHelperVisible : 1;                    		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x02A8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        PlacementHelperStaticMeshComponent;               		// 0x02AC (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UStaticMesh*                                 PlacementHelperStaticMesh;                        		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        RangeHelperStaticMeshComponent;                   		// 0x02B4 (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UStaticMesh*                                 RangeHelperStaticMesh;                            		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        FOVHelperStaticMeshComponentL;                    		// 0x02BC (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        FOVHelperStaticMeshComponentR;                    		// 0x02C0 (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UStaticMesh*                                 FOVHelperStaticMesh;                              		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class APBSkill_TurretWeapon* >             pTurretArchetypes;                                		// 0x02C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                RotateAngleYaw;                                   		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRotationSpeed;                                   		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fZPositionSpeed;                                  		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFourPointsHeightDifferenceTolerance;             		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fNormalDotProductDifferenceTolerance;             		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPushEyeLocationUp;                               		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTurretPlacementStartOffset;                      		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxPlacementDistance;                             		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxPlacementDepth;                                		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDiagonalRayDepth;                                		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PlacementHelperPosition;                          		// 0x02FC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    ExtraRotation;                                    		// 0x0308 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     PlacementLocationCached;                          		// 0x0314 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    PlacementRotationCached;                          		// 0x0320 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                iImmediateYaw;                                    		// 0x032C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              TurretCurrentZ;                                   		// 0x0330 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APBSkill_TurretWeapon*                       currentPlacedTurret;                              		// 0x0334 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70292 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void Died ( class AController* Killer );
	void DisplayHelperMeshes ( unsigned long bDisplay );
	void SetPlaceableColorForMesh ( class UStaticMeshComponent* Component );
	void SetPlacementHelperVisibility ( unsigned long bVisible );
	void SetIsPlaceable ( unsigned long bNewIsPlaceable );
	void UpdatePlacementHelperMeshMaterials ( );
	void TimedLerp ( float _totalDuration, float _target, float fDelta, float* _timeLeft, float* _in );
	bool IsInvalidPlacementActorClass ( class AActor* Target );
	void UpdatePlacementHelperMeshPosition ( float fDelta );
	class AActor* CheckPlacementPosition ( class APBPawn* P, struct FVector vStart, struct FVector vEnd, struct FVector testExtents, struct FVector* vHitPos, struct FVector* vNormal );
	void eventTick ( float fDelta );
	bool IsOwnerAlive ( );
	void TryToPutTurretDown ( );
	void ClientNotifyPlacementPending ( );
	void TurretSelected ( );
	void RotateTurret ( );
	void OnUse ( unsigned char UsageMode );
	void SetupEffects ( );
	void OnSkillLevelChanged ( );
	void InitSkill ( int iNewSkillLevel, unsigned long bDoNotEnforceDefaultLevel );
};

UClass* APBSkill_Turret::pClassPointer = NULL;

// Class PlanBGame.PBPotentialClimbWatcher
// 0x0004 (0x01DC - 0x01D8)
class APBPotentialClimbWatcher : public AInfo
{
public:
	unsigned long                                      TurnedOnce : 1;                                   		// 0x01D8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71010 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
};

UClass* APBPotentialClimbWatcher::pClassPointer = NULL;

// Class PlanBGame.PBLightChain
// 0x0000 (0x01D8 - 0x01D8)
class APBLightChain : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71018 ];

		return pClassPointer;
	};

};

UClass* APBLightChain::pClassPointer = NULL;

// Class PlanBGame.PBLobbyInfo
// 0x0000 (0x01D8 - 0x01D8)
class APBLobbyInfo : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71020 ];

		return pClassPointer;
	};

};

UClass* APBLobbyInfo::pClassPointer = NULL;

// Class PlanBGame.PBLobbyPlayerReplicationInfo
// 0x0000 (0x07F8 - 0x07F8)
class APBLobbyPlayerReplicationInfo : public APBPlayerReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71022 ];

		return pClassPointer;
	};

};

UClass* APBLobbyPlayerReplicationInfo::pClassPointer = NULL;

// Class PlanBGame.PBLobbyReplicationInfo
// 0x0000 (0x0374 - 0x0374)
class APBLobbyReplicationInfo : public APBGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71025 ];

		return pClassPointer;
	};

};

UClass* APBLobbyReplicationInfo::pClassPointer = NULL;

// Class PlanBGame.PBLookFromCameraAction
// 0x0048 (0x0254 - 0x020C)
class APBLookFromCameraAction : public APBCameraAction
{
public:
	class ACameraActor*                                pCameraActor;                                     		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTrackPlayer : 1;                                 		// 0x0210 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFreezePlayerMovement : 1;                        		// 0x0210 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFirstUpdate : 1;                                 		// 0x0210 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              fPositionInterpTime;                              		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRotationInterpTime;                              		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimePassed;                                      		// 0x021C (0x0004) [0x0000000000000000]              
	float                                              fLocationAlpha;                                   		// 0x0220 (0x0004) [0x0000000000000000]              
	float                                              fRotationAlpha;                                   		// 0x0224 (0x0004) [0x0000000000000000]              
	float                                              fBlendFactor;                                     		// 0x0228 (0x0004) [0x0000000000000000]              
	float                                              OldZ;                                             		// 0x022C (0x0004) [0x0000000000000000]              
	struct FVector                                     vPrevCamLoc;                                      		// 0x0230 (0x000C) [0x0000000000000000]              
	struct FRotator                                    vPrevCamRot;                                      		// 0x023C (0x000C) [0x0000000000000000]              
	struct FRotator                                    rCamRot;                                          		// 0x0248 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71046 ];

		return pClassPointer;
	};

	bool UpdateCamera ( float fDeltaTime, class AActor* Target, struct FVector* OutCamLoc, struct FRotator* OutCamRot, float* OutFOV );
	void DrawHUD ( class UCanvas* Canvas );
	void DeactivateAction ( );
	void ActivateAction ( class APBCameraActionManager* pManager );
};

UClass* APBLookFromCameraAction::pClassPointer = NULL;

// Class PlanBGame.PBLosingObjective
// 0x0000 (0x0060 - 0x0060)
class UPBLosingObjective : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71083 ];

		return pClassPointer;
	};

};

UClass* UPBLosingObjective::pClassPointer = NULL;

// Class PlanBGame.PBMapInfo
// 0x0000 (0x01D8 - 0x01D8)
class APBMapInfo : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71085 ];

		return pClassPointer;
	};

};

UClass* APBMapInfo::pClassPointer = NULL;

// Class PlanBGame.PBMapListLimiter
// 0x000C (0x0048 - 0x003C)
class UPBMapListLimiter : public UPBChoiseLimiter
{
public:
	TArray< struct FString >                           m_Maps;                                           		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71087 ];

		return pClassPointer;
	};

	TArray< struct FString > GetMaps ( );
	int GetLimit ( );
	bool IsMapReleased ( struct FString MapName );
	void Init ( );
};

UClass* UPBMapListLimiter::pClassPointer = NULL;

// Class PlanBGame.PBMapSpot
// 0x0014 (0x02C4 - 0x02B0)
class APBMapSpot : public ANavigationPoint
{
public:
	unsigned char                                      mapSpot;                                          		// 0x02B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  volumeTexture;                                    		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     v2DPosition;                                      		// 0x02B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71105 ];

		return pClassPointer;
	};

};

UClass* APBMapSpot::pClassPointer = NULL;

// Class PlanBGame.PBMinimapReferencePoint
// 0x0000 (0x01DC - 0x01DC)
class APBMinimapReferencePoint : public AKeypoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71148 ];

		return pClassPointer;
	};

};

UClass* APBMinimapReferencePoint::pClassPointer = NULL;

// Class PlanBGame.PBMinimapDrawer_Grenade
// 0x0000 (0x003C - 0x003C)
class UPBMinimapDrawer_Grenade : public UPBMinimapDrawer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71159 ];

		return pClassPointer;
	};

};

UClass* UPBMinimapDrawer_Grenade::pClassPointer = NULL;

// Class PlanBGame.PBMinimapDrawer_Pawn
// 0x0000 (0x003C - 0x003C)
class UPBMinimapDrawer_Pawn : public UPBMinimapDrawer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71162 ];

		return pClassPointer;
	};

};

UClass* UPBMinimapDrawer_Pawn::pClassPointer = NULL;

// Class PlanBGame.PBMinimapDrawer_PlaceableDevice
// 0x0000 (0x003C - 0x003C)
class UPBMinimapDrawer_PlaceableDevice : public UPBMinimapDrawer_Objective
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71164 ];

		return pClassPointer;
	};

};

UClass* UPBMinimapDrawer_PlaceableDevice::pClassPointer = NULL;

// Class PlanBGame.PBMinimapDrawer_ReinforcementZone
// 0x0000 (0x003C - 0x003C)
class UPBMinimapDrawer_ReinforcementZone : public UPBMinimapDrawer_Objective
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71166 ];

		return pClassPointer;
	};

};

UClass* UPBMinimapDrawer_ReinforcementZone::pClassPointer = NULL;

// Class PlanBGame.PBMoreBombsHandledMessage
// 0x0000 (0x0060 - 0x0060)
class UPBMoreBombsHandledMessage : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71169 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UPBMoreBombsHandledMessage::pClassPointer = NULL;

// Class PlanBGame.PBMortarAvailable
// 0x0000 (0x0060 - 0x0060)
class UPBMortarAvailable : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71179 ];

		return pClassPointer;
	};

};

UClass* UPBMortarAvailable::pClassPointer = NULL;

// Class PlanBGame.PBMortarHeliAvailable
// 0x0000 (0x0060 - 0x0060)
class UPBMortarHeliAvailable : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71181 ];

		return pClassPointer;
	};

};

UClass* UPBMortarHeliAvailable::pClassPointer = NULL;

// Class PlanBGame.PBMortarSupportCalled
// 0x0000 (0x0060 - 0x0060)
class UPBMortarSupportCalled : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71183 ];

		return pClassPointer;
	};

};

UClass* UPBMortarSupportCalled::pClassPointer = NULL;

// Class PlanBGame.PBMortarSupportToFriends
// 0x0000 (0x0060 - 0x0060)
class UPBMortarSupportToFriends : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71185 ];

		return pClassPointer;
	};

};

UClass* UPBMortarSupportToFriends::pClassPointer = NULL;

// Class PlanBGame.PBMortarSupportUnderway
// 0x0000 (0x0060 - 0x0060)
class UPBMortarSupportUnderway : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71187 ];

		return pClassPointer;
	};

};

UClass* UPBMortarSupportUnderway::pClassPointer = NULL;

// Class PlanBGame.PBMotionScanner
// 0x0003 (0x0354 - 0x0351)
class APBMotionScanner : public APBInteractiveObjective
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71189 ];

		return pClassPointer;
	};

};

UClass* APBMotionScanner::pClassPointer = NULL;

// Class PlanBGame.PBMotionSensor
// 0x000C (0x03C4 - 0x03B8)
class APBMotionSensor : public AAIController
{
public:
	class AController*                                 InstigatorController;                             		// 0x03B8 (0x0004) [0x0000000000000000]              
	unsigned char                                      TeamNum;                                          		// 0x03BC (0x0001) [0x0000000000000000]              
	float                                              initTime;                                         		// 0x03C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71196 ];

		return pClassPointer;
	};

	class AController* GetKillerController ( );
	unsigned char GetTeamNum ( );
};

UClass* APBMotionSensor::pClassPointer = NULL;

// Class PlanBGame.PBMsgAfterSafetyTime
// 0x0000 (0x0078 - 0x0078)
class UPBMsgAfterSafetyTime : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71217 ];

		return pClassPointer;
	};

};

UClass* UPBMsgAfterSafetyTime::pClassPointer = NULL;

// Class PlanBGame.PBMsgAllCTFDead
// 0x0000 (0x0078 - 0x0078)
class UPBMsgAllCTFDead : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71219 ];

		return pClassPointer;
	};

};

UClass* UPBMsgAllCTFDead::pClassPointer = NULL;

// Class PlanBGame.PBMsgAllTerroristsDead
// 0x0000 (0x0078 - 0x0078)
class UPBMsgAllTerroristsDead : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71221 ];

		return pClassPointer;
	};

};

UClass* UPBMsgAllTerroristsDead::pClassPointer = NULL;

// Class PlanBGame.PBMsgAreaSecure
// 0x0000 (0x0060 - 0x0060)
class UPBMsgAreaSecure : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71223 ];

		return pClassPointer;
	};

};

UClass* UPBMsgAreaSecure::pClassPointer = NULL;

// Class PlanBGame.PBMsgAreaSecuredWarning
// 0x0000 (0x0060 - 0x0060)
class UPBMsgAreaSecuredWarning : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71225 ];

		return pClassPointer;
	};

};

UClass* UPBMsgAreaSecuredWarning::pClassPointer = NULL;

// Class PlanBGame.PBMsgBioBombDestroyed
// 0x0000 (0x0060 - 0x0060)
class UPBMsgBioBombDestroyed : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71227 ];

		return pClassPointer;
	};

};

UClass* UPBMsgBioBombDestroyed::pClassPointer = NULL;

// Class PlanBGame.PBMsgBioBombDropped
// 0x0000 (0x0060 - 0x0060)
class UPBMsgBioBombDropped : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71229 ];

		return pClassPointer;
	};

};

UClass* UPBMsgBioBombDropped::pClassPointer = NULL;

// Class PlanBGame.PBMsgBioBombExploded
// 0x0000 (0x0060 - 0x0060)
class UPBMsgBioBombExploded : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71231 ];

		return pClassPointer;
	};

};

UClass* UPBMsgBioBombExploded::pClassPointer = NULL;

// Class PlanBGame.PBMsgBioBombPlaced
// 0x0000 (0x0078 - 0x0078)
class UPBMsgBioBombPlaced : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71233 ];

		return pClassPointer;
	};

};

UClass* UPBMsgBioBombPlaced::pClassPointer = NULL;

// Class PlanBGame.PBMsgC4Destroyed
// 0x0000 (0x02FC - 0x02FC)
class UPBMsgC4Destroyed : public UPBGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71235 ];

		return pClassPointer;
	};

};

UClass* UPBMsgC4Destroyed::pClassPointer = NULL;

// Class PlanBGame.PBMsgC4Exploded
// 0x0000 (0x02FC - 0x02FC)
class UPBMsgC4Exploded : public UPBGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71245 ];

		return pClassPointer;
	};

};

UClass* UPBMsgC4Exploded::pClassPointer = NULL;

// Class PlanBGame.PBMsgCampaignDefeatCTF
// 0x0000 (0x0060 - 0x0060)
class UPBMsgCampaignDefeatCTF : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71256 ];

		return pClassPointer;
	};

};

UClass* UPBMsgCampaignDefeatCTF::pClassPointer = NULL;

// Class PlanBGame.PBMsgCampaignDiffuseBomb
// 0x0000 (0x0060 - 0x0060)
class UPBMsgCampaignDiffuseBomb : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71258 ];

		return pClassPointer;
	};

};

UClass* UPBMsgCampaignDiffuseBomb::pClassPointer = NULL;

// Class PlanBGame.PBMsgCampaignOpenTheRoof
// 0x0000 (0x0060 - 0x0060)
class UPBMsgCampaignOpenTheRoof : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71260 ];

		return pClassPointer;
	};

};

UClass* UPBMsgCampaignOpenTheRoof::pClassPointer = NULL;

// Class PlanBGame.PBMsgCampaignTimeWarning
// 0x0000 (0x0078 - 0x0078)
class UPBMsgCampaignTimeWarning : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71262 ];

		return pClassPointer;
	};

};

UClass* UPBMsgCampaignTimeWarning::pClassPointer = NULL;

// Class PlanBGame.PBMsgDefuseKitDestroyed
// 0x0000 (0x0060 - 0x0060)
class UPBMsgDefuseKitDestroyed : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71264 ];

		return pClassPointer;
	};

};

UClass* UPBMsgDefuseKitDestroyed::pClassPointer = NULL;

// Class PlanBGame.PBMsgDefuseKitDropped
// 0x0000 (0x0060 - 0x0060)
class UPBMsgDefuseKitDropped : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71266 ];

		return pClassPointer;
	};

};

UClass* UPBMsgDefuseKitDropped::pClassPointer = NULL;

// Class PlanBGame.PBMsgDefuseReinforcementDevice
// 0x0000 (0x0060 - 0x0060)
class UPBMsgDefuseReinforcementDevice : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71268 ];

		return pClassPointer;
	};

};

UClass* UPBMsgDefuseReinforcementDevice::pClassPointer = NULL;

// Class PlanBGame.PBMsgDiffusingExpert
// 0x0000 (0x0060 - 0x0060)
class UPBMsgDiffusingExpert : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71270 ];

		return pClassPointer;
	};

};

UClass* UPBMsgDiffusingExpert::pClassPointer = NULL;

// Class PlanBGame.PBMsgEMPExploded
// 0x0000 (0x0078 - 0x0078)
class UPBMsgEMPExploded : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71272 ];

		return pClassPointer;
	};

};

UClass* UPBMsgEMPExploded::pClassPointer = NULL;

// Class PlanBGame.PBMsgEmpPlaced
// 0x0000 (0x0078 - 0x0078)
class UPBMsgEmpPlaced : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71274 ];

		return pClassPointer;
	};

};

UClass* UPBMsgEmpPlaced::pClassPointer = NULL;

// Class PlanBGame.PBMsgEnemyUnitWasEliminated
// 0x0000 (0x0060 - 0x0060)
class UPBMsgEnemyUnitWasEliminated : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71276 ];

		return pClassPointer;
	};

};

UClass* UPBMsgEnemyUnitWasEliminated::pClassPointer = NULL;

// Class PlanBGame.PBMsgEnteredDangerZone
// 0x0000 (0x0060 - 0x0060)
class UPBMsgEnteredDangerZone : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71278 ];

		return pClassPointer;
	};

};

UClass* UPBMsgEnteredDangerZone::pClassPointer = NULL;

// Class PlanBGame.PBMsgEnteredTurretZone
// 0x0000 (0x0060 - 0x0060)
class UPBMsgEnteredTurretZone : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71289 ];

		return pClassPointer;
	};

};

UClass* UPBMsgEnteredTurretZone::pClassPointer = NULL;

// Class PlanBGame.PBMsgGasBombPickedUp
// 0x0000 (0x0060 - 0x0060)
class UPBMsgGasBombPickedUp : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71291 ];

		return pClassPointer;
	};

};

UClass* UPBMsgGasBombPickedUp::pClassPointer = NULL;

// Class PlanBGame.PBMsgMotionScannerDestroyed
// 0x0000 (0x0078 - 0x0078)
class UPBMsgMotionScannerDestroyed : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71293 ];

		return pClassPointer;
	};

};

UClass* UPBMsgMotionScannerDestroyed::pClassPointer = NULL;

// Class PlanBGame.PBMsgNuclearDefused
// 0x0000 (0x0078 - 0x0078)
class UPBMsgNuclearDefused : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71295 ];

		return pClassPointer;
	};

};

UClass* UPBMsgNuclearDefused::pClassPointer = NULL;

// Class PlanBGame.PBMsgObstacleActivated
// 0x0000 (0x0078 - 0x0078)
class UPBMsgObstacleActivated : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71297 ];

		return pClassPointer;
	};

};

UClass* UPBMsgObstacleActivated::pClassPointer = NULL;

// Class PlanBGame.PBMsgOurUnitWasEliminated
// 0x0000 (0x0060 - 0x0060)
class UPBMsgOurUnitWasEliminated : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71299 ];

		return pClassPointer;
	};

};

UClass* UPBMsgOurUnitWasEliminated::pClassPointer = NULL;

// Class PlanBGame.PBMsgReinforcementDeviceDestroyed
// 0x0000 (0x0060 - 0x0060)
class UPBMsgReinforcementDeviceDestroyed : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71301 ];

		return pClassPointer;
	};

};

UClass* UPBMsgReinforcementDeviceDestroyed::pClassPointer = NULL;

// Class PlanBGame.PBMsgReinforcementDeviceDropped
// 0x0000 (0x0060 - 0x0060)
class UPBMsgReinforcementDeviceDropped : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71303 ];

		return pClassPointer;
	};

};

UClass* UPBMsgReinforcementDeviceDropped::pClassPointer = NULL;

// Class PlanBGame.PBMsgReinforcementDeviceFinished
// 0x0000 (0x0060 - 0x0060)
class UPBMsgReinforcementDeviceFinished : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71305 ];

		return pClassPointer;
	};

};

UClass* UPBMsgReinforcementDeviceFinished::pClassPointer = NULL;

// Class PlanBGame.PBMsgReinforcementDevicePickedUp
// 0x0000 (0x0060 - 0x0060)
class UPBMsgReinforcementDevicePickedUp : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71307 ];

		return pClassPointer;
	};

};

UClass* UPBMsgReinforcementDevicePickedUp::pClassPointer = NULL;

// Class PlanBGame.PBMsgReinforcementDevicePlaced
// 0x0000 (0x0078 - 0x0078)
class UPBMsgReinforcementDevicePlaced : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71309 ];

		return pClassPointer;
	};

};

UClass* UPBMsgReinforcementDevicePlaced::pClassPointer = NULL;

// Class PlanBGame.PBMsgRoofOpening
// 0x0000 (0x0078 - 0x0078)
class UPBMsgRoofOpening : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71311 ];

		return pClassPointer;
	};

};

UClass* UPBMsgRoofOpening::pClassPointer = NULL;

// Class PlanBGame.PBMsgRoundTimedOut
// 0x0000 (0x0078 - 0x0078)
class UPBMsgRoundTimedOut : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71313 ];

		return pClassPointer;
	};

};

UClass* UPBMsgRoundTimedOut::pClassPointer = NULL;

// Class PlanBGame.PBMsgTurretDestroyed
// 0x0000 (0x0078 - 0x0078)
class UPBMsgTurretDestroyed : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71315 ];

		return pClassPointer;
	};

};

UClass* UPBMsgTurretDestroyed::pClassPointer = NULL;

// Class PlanBGame.PBMsgTurretFinished
// 0x0000 (0x0078 - 0x0078)
class UPBMsgTurretFinished : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71318 ];

		return pClassPointer;
	};

};

UClass* UPBMsgTurretFinished::pClassPointer = NULL;

// Class PlanBGame.PBMsgTurretPlaced
// 0x0000 (0x0078 - 0x0078)
class UPBMsgTurretPlaced : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71334 ];

		return pClassPointer;
	};

};

UClass* UPBMsgTurretPlaced::pClassPointer = NULL;

// Class PlanBGame.PBMusicManager
// 0x0000 (0x01D8 - 0x01D8)
class APBMusicManager : public AInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71336 ];

		return pClassPointer;
	};

};

UClass* APBMusicManager::pClassPointer = NULL;

// Class PlanBGame.PBNukeZone
// 0x0000 (0x01D8 - 0x01D8)
class APBNukeZone : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71338 ];

		return pClassPointer;
	};

};

UClass* APBNukeZone::pClassPointer = NULL;

// Class PlanBGame.PBNYCityDestroyedMessage
// 0x0000 (0x0060 - 0x0060)
class UPBNYCityDestroyedMessage : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71521 ];

		return pClassPointer;
	};

};

UClass* UPBNYCityDestroyedMessage::pClassPointer = NULL;

// Class PlanBGame.PBNYCitySavedMessage
// 0x0000 (0x0060 - 0x0060)
class UPBNYCitySavedMessage : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71523 ];

		return pClassPointer;
	};

};

UClass* UPBNYCitySavedMessage::pClassPointer = NULL;

// Class PlanBGame.PBObjectiveLost
// 0x0000 (0x0060 - 0x0060)
class UPBObjectiveLost : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71525 ];

		return pClassPointer;
	};

};

UClass* UPBObjectiveLost::pClassPointer = NULL;

// Class PlanBGame.PBObjectiveSecured
// 0x0000 (0x0060 - 0x0060)
class UPBObjectiveSecured : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71527 ];

		return pClassPointer;
	};

};

UClass* UPBObjectiveSecured::pClassPointer = NULL;

// Class PlanBGame.PBObjectiveStart
// 0x0000 (0x02B0 - 0x02B0)
class APBObjectiveStart : public ANavigationPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71529 ];

		return pClassPointer;
	};

};

UClass* APBObjectiveStart::pClassPointer = NULL;

// Class PlanBGame.PBObjectiveStart_AAMTerminal
// 0x0000 (0x02B0 - 0x02B0)
class APBObjectiveStart_AAMTerminal : public APBObjectiveStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71532 ];

		return pClassPointer;
	};

};

UClass* APBObjectiveStart_AAMTerminal::pClassPointer = NULL;

// Class PlanBGame.PBObjectiveStart_AmmunitionCrate
// 0x0000 (0x02B0 - 0x02B0)
class APBObjectiveStart_AmmunitionCrate : public APBObjectiveStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71535 ];

		return pClassPointer;
	};

};

UClass* APBObjectiveStart_AmmunitionCrate::pClassPointer = NULL;

// Class PlanBGame.PBObjectiveStart_AntiAirTurret
// 0x0000 (0x02B0 - 0x02B0)
class APBObjectiveStart_AntiAirTurret : public APBObjectiveStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71538 ];

		return pClassPointer;
	};

};

UClass* APBObjectiveStart_AntiAirTurret::pClassPointer = NULL;

// Class PlanBGame.PBObjectiveStart_C4
// 0x0000 (0x02B0 - 0x02B0)
class APBObjectiveStart_C4 : public APBObjectiveStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71541 ];

		return pClassPointer;
	};

};

UClass* APBObjectiveStart_C4::pClassPointer = NULL;

// Class PlanBGame.PBObjectiveStart_DefuseKit
// 0x0000 (0x02B0 - 0x02B0)
class APBObjectiveStart_DefuseKit : public APBObjectiveStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71544 ];

		return pClassPointer;
	};

};

UClass* APBObjectiveStart_DefuseKit::pClassPointer = NULL;

// Class PlanBGame.PBObjectiveStart_InteractibleZone
// 0x0000 (0x02B0 - 0x02B0)
class APBObjectiveStart_InteractibleZone : public APBObjectiveStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71547 ];

		return pClassPointer;
	};

};

UClass* APBObjectiveStart_InteractibleZone::pClassPointer = NULL;

// Class PlanBGame.PBObjectiveStart_MotionScanner
// 0x0000 (0x02B0 - 0x02B0)
class APBObjectiveStart_MotionScanner : public APBObjectiveStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71550 ];

		return pClassPointer;
	};

};

UClass* APBObjectiveStart_MotionScanner::pClassPointer = NULL;

// Class PlanBGame.PBObjectiveStart_ReinforcementZone
// 0x0000 (0x02B0 - 0x02B0)
class APBObjectiveStart_ReinforcementZone : public APBObjectiveStart_InteractibleZone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71553 ];

		return pClassPointer;
	};

};

UClass* APBObjectiveStart_ReinforcementZone::pClassPointer = NULL;

// Class PlanBGame.PBObjectiveStart_NukeZone
// 0x0000 (0x02B0 - 0x02B0)
class APBObjectiveStart_NukeZone : public APBObjectiveStart_ReinforcementZone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71556 ];

		return pClassPointer;
	};

};

UClass* APBObjectiveStart_NukeZone::pClassPointer = NULL;

// Class PlanBGame.PBObjectiveStart_SecurityOfficeZone
// 0x0000 (0x02B0 - 0x02B0)
class APBObjectiveStart_SecurityOfficeZone : public APBObjectiveStart_ReinforcementZone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71559 ];

		return pClassPointer;
	};

};

UClass* APBObjectiveStart_SecurityOfficeZone::pClassPointer = NULL;

// Class PlanBGame.PBObjectiveStart_Turret
// 0x0000 (0x02B0 - 0x02B0)
class APBObjectiveStart_Turret : public APBObjectiveStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71562 ];

		return pClassPointer;
	};

};

UClass* APBObjectiveStart_Turret::pClassPointer = NULL;

// Class PlanBGame.PBObjectiveStart_TurretZone
// 0x0000 (0x02B0 - 0x02B0)
class APBObjectiveStart_TurretZone : public APBObjectiveStart_InteractibleZone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71565 ];

		return pClassPointer;
	};

};

UClass* APBObjectiveStart_TurretZone::pClassPointer = NULL;

// Class PlanBGame.PBStatisticsKeys
// 0x0054 (0x0090 - 0x003C)
class UPBStatisticsKeys : public UObject
{
public:
	struct FTKeySet                                    PlayerKeys;                                       		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTKeySet >                          WeaponKeys;                                       		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTKeySet                                    MapKeys;                                          		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTKeySet                                    GameMapRFGKeys;                                   		// 0x0060 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTKeySet                                    GameMapTDMKeys;                                   		// 0x006C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTKeySet                                    GameMapCMPKeys;                                   		// 0x0078 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FTKeySet                                    GameCampaignKeys;                                 		// 0x0084 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71590 ];

		return pClassPointer;
	};

};

UClass* UPBStatisticsKeys::pClassPointer = NULL;

// Class PlanBGame.PBTeamAI
// 0x009C (0x0274 - 0x01D8)
class APBTeamAI : public AInfo
{
public:
	class APBTeamInfo*                                 Team;                                             		// 0x01D8 (0x0004) [0x0000000000000000]              
	class APBTeamInfo*                                 EnemyTeam;                                        		// 0x01DC (0x0004) [0x0000000000000000]              
	int                                                NumSupportingPlayer;                              		// 0x01E0 (0x0004) [0x0000000000000000]              
	class APBGameObjective*                            Objectives;                                       		// 0x01E4 (0x0004) [0x0000000000000000]              
	class APBGameObjective*                            PickedObjective;                                  		// 0x01E8 (0x0004) [0x0000000000000000]              
	class APBSquadAI*                                  Squads;                                           		// 0x01EC (0x0004) [0x0000000000000000]              
	class APBSquadAI*                                  AttackSquad;                                      		// 0x01F0 (0x0004) [0x0000000000000000]              
	class APBSquadAI*                                  FreelanceSquad;                                   		// 0x01F4 (0x0004) [0x0000000000000000]              
	class UClass*                                      SquadType;                                        		// 0x01F8 (0x0004) [0x0000000000000000]              
	int                                                OrderOffset;                                      		// 0x01FC (0x0004) [0x0000000000000000]              
	struct FName                                       OrderList[ 0x8 ];                                 		// 0x0200 (0x0040) [0x0000000000000000]              
	struct FString                                     BotWpClassNames[ 0x4 ];                           		// 0x0240 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                BotWpNameOffset;                                  		// 0x0270 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72509 ];

		return pClassPointer;
	};

	struct FString GetBotWeaponClassName ( );
	void RemoveFromTeam ( class AController* Other );
	void SetOrders ( class APBBot* B, struct FName NewOrders, class AController* OrderGiver );
	void SetBotOrders ( class APBBot* NewBot );
	class APBSquadAI* AddSquad ( class AController* C, class APBGameObjective* O );
	void PutOnFreelance ( class APBBot* B );
	void PutOnOffense ( class APBBot* B );
	bool PutOnDefense ( class APBBot* B );
	class APBGameObjective* GetPriorityFreelanceObjectiveFor ( class APBSquadAI* InFreelanceSquad );
	class APBGameObjective* GetPriorityAttackObjectiveFor ( class APBSquadAI* AnAttackSquad );
	class APBGameObjective* GetMostDefendedObjective ( );
	class APBGameObjective* GetLeastDefendedObjective ( );
	class APBSquadAI* AddSquadWithLeader ( class AController* C, class APBGameObjective* O );
	void SetObjectiveLists ( );
	unsigned char GetTeamNum ( );
	bool FriendlyToward ( class APawn* Other );
	class APBSquadAI* FindSquadOf ( class AController* C );
	void RemoveSquad ( class APBSquadAI* Squad );
	void FindNewObjectiveFor ( class APBSquadAI* S, unsigned long bForceUpdate );
	void FindNewObjectives ( class APBGameObjective* DisabledObjective );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* damageTyp );
	void ReAssessStrategy ( );
	class APBSquadAI* GetSquadLedBy ( class AController* C );
	void ResetSquads ( );
	void Reset ( );
	void CriticalObjectiveWarning ( class APBGameObjective* AttackedObjective, class APawn* EventInstigator, struct FName nName );
	void Timer ( );
	void PostBeginPlay ( );
};

UClass* APBTeamAI::pClassPointer = NULL;

// Class PlanBGame.PBProj_FragGrenade
// 0x0010 (0x047C - 0x046C)
class APBProj_FragGrenade : public APBProj_Grenade
{
public:
	class USoundCue*                                   BlowupOneShotSound;                               		// 0x046C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ExplosionTemplate;                                		// 0x0470 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxImpulseForKActorsClientSideOnly;              		// 0x0474 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    ExplosionParticleSystem;                          		// 0x0478 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72610 ];

		return pClassPointer;
	};

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float VisibleCullDistance, float HiddenCullDistance );
	void DoExplode ( );
	bool bCooks ( );
};

UClass* APBProj_FragGrenade::pClassPointer = NULL;

// Class PlanBGame.PBSeqAct_SetTeamVictory
// 0x0008 (0x0104 - 0x00FC)
class UPBSeqAct_SetTeamVictory : public USequenceAction
{
public:
	int                                                iVictoriousTeam;                                  		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MessageToBroadcast;                               		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72771 ];

		return pClassPointer;
	};

	void Reset ( );
};

UClass* UPBSeqAct_SetTeamVictory::pClassPointer = NULL;

// Class PlanBGame.PBRoundEndMessage
// 0x0000 (0x0060 - 0x0060)
class UPBRoundEndMessage : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73296 ];

		return pClassPointer;
	};

};

UClass* UPBRoundEndMessage::pClassPointer = NULL;

// Class PlanBGame.PBPhysMat_Destructible
// 0x0000 (0x006C - 0x006C)
class UPBPhysMat_Destructible : public UPBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73343 ];

		return pClassPointer;
	};

};

UClass* UPBPhysMat_Destructible::pClassPointer = NULL;

// Class PlanBGame.PBPigeonFlock
// 0x0000 (0x0260 - 0x0260)
class APBPigeonFlock : public APBFlock
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73345 ];

		return pClassPointer;
	};

};

UClass* APBPigeonFlock::pClassPointer = NULL;

// Class PlanBGame.PBPlayerCamera
// 0x0000 (0x0450 - 0x0450)
class APBPlayerCamera : public ACamera
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73349 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
};

UClass* APBPlayerCamera::pClassPointer = NULL;

// Class PlanBGame.PBPlayerDyingMsg
// 0x0000 (0x0060 - 0x0060)
class UPBPlayerDyingMsg : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73352 ];

		return pClassPointer;
	};

};

UClass* UPBPlayerDyingMsg::pClassPointer = NULL;

// Class PlanBGame.PBPlayerHitMsg
// 0x0000 (0x0060 - 0x0060)
class UPBPlayerHitMsg : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73354 ];

		return pClassPointer;
	};

};

UClass* UPBPlayerHitMsg::pClassPointer = NULL;

// Class PlanBGame.PBPlayerReloadMsg
// 0x0000 (0x0060 - 0x0060)
class UPBPlayerReloadMsg : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73427 ];

		return pClassPointer;
	};

};

UClass* UPBPlayerReloadMsg::pClassPointer = NULL;

// Class PlanBGame.PBWaterVolume
// 0x0008 (0x025C - 0x0254)
class APBWaterVolume : public APhysicsVolume
{
public:
	class USoundCue*                                   EntrySound;                                       		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             EntryParticleSystem;                              		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73709 ];

		return pClassPointer;
	};

	void PlaySoundFX ( class USoundCue* sndCue, class AActor* Other, struct FVector vLocation, float fVolumeMultiplier );
	void PlayEntrySplash ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* APBWaterVolume::pClassPointer = NULL;

// Class PlanBGame.PBProj_FlashGrenade
// 0x0024 (0x0490 - 0x046C)
class APBProj_FlashGrenade : public APBProj_Grenade
{
public:
	class USoundCue*                                   BlowupOneShotSound;                               		// 0x046C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ExplosionTemplate;                                		// 0x0470 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlashIn;                                          		// 0x0474 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlashFull;                                        		// 0x0478 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlashOut;                                         		// 0x047C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlashSuperimposeDelay;                            		// 0x0480 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlashSuperimposeFade;                             		// 0x0484 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlashMaxDirectionDecrease;                        		// 0x0488 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    ExplosionParticleSystem;                          		// 0x048C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73734 ];

		return pClassPointer;
	};

	void DoExplode ( );
};

UClass* APBProj_FlashGrenade::pClassPointer = NULL;

// Class PlanBGame.PBProj_Mortar
// 0x0010 (0x02B0 - 0x02A0)
class APBProj_Mortar : public APBProjectileNoPhysic
{
public:
	class UStaticMeshComponent*                        pMortarMesh;                                      		// 0x02A0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             pFallingSound;                                    		// 0x02A4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   pMortarStartAudio;                                		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEffectiveRadius;                                 		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73877 ];

		return pClassPointer;
	};

	float ModifyRadiusDamage ( class AActor* Victim, struct FVector HurtOrigin, float fRadius, float fBaseDamage );
	bool AGHurtRadius ( float BaseDamage, float Radius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void PostBeginPlay ( );
	void ClientInit ( struct FInitialPhysicState Initial );
	void Init ( struct FVector Direction );
};

UClass* APBProj_Mortar::pClassPointer = NULL;

// Class PlanBGame.PBProj_SmokeGrenade
// 0x0034 (0x04A0 - 0x046C)
class APBProj_SmokeGrenade : public APBProj_Grenade
{
public:
	float                                              fFadeoutLoopAfter;                                		// 0x046C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSmokeLoopFadeInDuration;                         		// 0x0470 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSmokeLoopFadeOutDuration;                        		// 0x0474 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BlowupOneShotSound;                               		// 0x0478 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SmokeLoopSound;                                   		// 0x047C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SmokeEndOneShotSound;                             		// 0x0480 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ExplosionTemplate;                                		// 0x0484 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRadiusForSmoke;                                  		// 0x0488 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fInSmokeTestInterval;                             		// 0x048C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSmokeEmitting : 1;                               		// 0x0490 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              fLastSmokeTestTime;                               		// 0x0494 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAudioComponent*                             pSmokeLoop;                                       		// 0x0498 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    SmokeParticleSystem;                              		// 0x049C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73954 ];

		return pClassPointer;
	};

	void eventOnBecomeStationary ( );
	void eventTick ( float DeltaTime );
	void OnParticleSystemFinish ( class UParticleSystemComponent* PSystem );
	void StopSmokeSound ( );
	void DoExplode ( );
	void eventPostBeginPlay ( );
};

UClass* APBProj_SmokeGrenade::pClassPointer = NULL;

// Class PlanBGame.PBRadioMessage
// 0x0000 (0x0060 - 0x0060)
class UPBRadioMessage : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73989 ];

		return pClassPointer;
	};

};

UClass* UPBRadioMessage::pClassPointer = NULL;

// Class PlanBGame.PBRankAnnouncement
// 0x000C (0x006C - 0x0060)
class UPBRankAnnouncement : public UPBLocalMessage
{
public:
	TArray< struct FString >                           strRanks;                                         		// 0x0060 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73991 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UPBRankAnnouncement::pClassPointer = NULL;

// Class PlanBGame.PBRedTeamDefensePoint
// 0x0000 (0x02D8 - 0x02D8)
class APBRedTeamDefensePoint : public APBDefensePoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74008 ];

		return pClassPointer;
	};

};

UClass* APBRedTeamDefensePoint::pClassPointer = NULL;

// Class PlanBGame.PBRedTeamStart
// 0x0002 (0x02C4 - 0x02C2)
class APBRedTeamStart : public APBPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74011 ];

		return pClassPointer;
	};

};

UClass* APBRedTeamStart::pClassPointer = NULL;

// Class PlanBGame.PBReinforcementDevice
// 0x0000 (0x03BC - 0x03BC)
class APBReinforcementDevice : public APBPlaceableDevice
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74029 ];

		return pClassPointer;
	};

};

UClass* APBReinforcementDevice::pClassPointer = NULL;

// Class PlanBGame.PBReinforcementGame
// 0x0000 (0x0468 - 0x0468)
class APBReinforcementGame : public APBRoundGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74036 ];

		return pClassPointer;
	};

};

UClass* APBReinforcementGame::pClassPointer = NULL;

// Class PlanBGame.PBReinforcementZone
// 0x0000 (0x0354 - 0x0354)
class APBReinforcementZone : public APBInteractibleZone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74039 ];

		return pClassPointer;
	};

};

UClass* APBReinforcementZone::pClassPointer = NULL;

// Class PlanBGame.PBRFGGameReplicationInfo
// 0x0000 (0x0374 - 0x0374)
class APBRFGGameReplicationInfo : public APBGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74046 ];

		return pClassPointer;
	};

};

UClass* APBRFGGameReplicationInfo::pClassPointer = NULL;

// Class PlanBGame.PBRFGPlayerReplicationInfo
// 0x0000 (0x07F8 - 0x07F8)
class APBRFGPlayerReplicationInfo : public APBPlayerReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74048 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void ResetScore ( );
	void Reset ( );
	void ClientReset ( );
	void PostBeginPlay ( );
};

UClass* APBRFGPlayerReplicationInfo::pClassPointer = NULL;

// Class PlanBGame.PBRoundDrawMessage
// 0x0000 (0x0060 - 0x0060)
class UPBRoundDrawMessage : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74057 ];

		return pClassPointer;
	};

};

UClass* UPBRoundDrawMessage::pClassPointer = NULL;

// Class PlanBGame.PBSafeBreachedMessage
// 0x0000 (0x0078 - 0x0078)
class UPBSafeBreachedMessage : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74060 ];

		return pClassPointer;
	};

};

UClass* UPBSafeBreachedMessage::pClassPointer = NULL;

// Class PlanBGame.PBSafeBreachStoppedMessage
// 0x0000 (0x0078 - 0x0078)
class UPBSafeBreachStoppedMessage : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74062 ];

		return pClassPointer;
	};

};

UClass* UPBSafeBreachStoppedMessage::pClassPointer = NULL;

// Class PlanBGame.PBScoreboard
// 0x0000 (0x0460 - 0x0460)
class APBScoreboard : public AHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74086 ];

		return pClassPointer;
	};

};

UClass* APBScoreboard::pClassPointer = NULL;

// Class PlanBGame.PBSecureVolume
// 0x0000 (0x0254 - 0x0254)
class APBSecureVolume : public APhysicsVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74096 ];

		return pClassPointer;
	};

};

UClass* APBSecureVolume::pClassPointer = NULL;

// Class PlanBGame.PBSecurityActivatedMessage
// 0x0000 (0x0078 - 0x0078)
class UPBSecurityActivatedMessage : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74099 ];

		return pClassPointer;
	};

};

UClass* UPBSecurityActivatedMessage::pClassPointer = NULL;

// Class PlanBGame.PBSecurityDeactivatedMessage
// 0x0000 (0x0078 - 0x0078)
class UPBSecurityDeactivatedMessage : public UPBSplitTeamMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74103 ];

		return pClassPointer;
	};

};

UClass* UPBSecurityDeactivatedMessage::pClassPointer = NULL;

// Class PlanBGame.PBSecurityOfficeZone
// 0x0000 (0x0354 - 0x0354)
class APBSecurityOfficeZone : public APBReinforcementZone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74105 ];

		return pClassPointer;
	};

};

UClass* APBSecurityOfficeZone::pClassPointer = NULL;

// Class PlanBGame.PBSensor
// 0x0024 (0x08FC - 0x08D8)
class APBSensor : public APBPawn
{
public:
	unsigned char                                      TeamNum;                                          		// 0x08D8 (0x0001) [0x0000000000000020]              ( CPF_Net )
	float                                              MaxSensorRange;                                   		// 0x08DC (0x0004) [0x0000000000000000]              
	float                                              SensorScale;                                      		// 0x08E0 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   SensorMaterialInstance;                           		// 0x08E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterial*                                   HudMaterial;                                      		// 0x08E8 (0x0004) [0x0000000000000000]              
	class APBSensorVolume*                             Volume;                                           		// 0x08EC (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnDeployableUsedUp__Delegate;                   		// 0x08F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74112 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void RenderMapIcon ( class APBRoundHUD* H, struct FLinearColor FinalColor );
	unsigned char GetTeamNum ( );
	void OnDeployableUsedUp ( class AActor* ChildDeployable );
};

UClass* APBSensor::pClassPointer = NULL;

// Class PlanBGame.PBSensorVolume
// 0x0000 (0x0254 - 0x0254)
class APBSensorVolume : public APBSecureVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74116 ];

		return pClassPointer;
	};

};

UClass* APBSensorVolume::pClassPointer = NULL;

// Class PlanBGame.PBSeqAct_ActivateCrackingDev
// 0x0000 (0x00FC - 0x00FC)
class UPBSeqAct_ActivateCrackingDev : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74144 ];

		return pClassPointer;
	};

};

UClass* UPBSeqAct_ActivateCrackingDev::pClassPointer = NULL;

// Class PlanBGame.PBSeqAct_CameraShake
// 0x0040 (0x013C - 0x00FC)
class UPBSeqAct_CameraShake : public USequenceAction
{
public:
	struct FViewShakeInfo                              CameraShake;                                      		// 0x00FC (0x0040) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74149 ];

		return pClassPointer;
	};

};

UClass* UPBSeqAct_CameraShake::pClassPointer = NULL;

// Class PlanBGame.PBSeqAct_CampaignSetPhase
// 0x0000 (0x00FC - 0x00FC)
class UPBSeqAct_CampaignSetPhase : public UPBSeqAct_ActivateOnScript
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74152 ];

		return pClassPointer;
	};

};

UClass* UPBSeqAct_CampaignSetPhase::pClassPointer = NULL;

// Class PlanBGame.PBSeqAct_ChangeNodeStatus
// 0x0001 (0x00FD - 0x00FC)
class UPBSeqAct_ChangeNodeStatus : public USequenceAction
{
public:
	unsigned char                                      ownerTeam;                                        		// 0x00FC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74154 ];

		return pClassPointer;
	};

};

UClass* UPBSeqAct_ChangeNodeStatus::pClassPointer = NULL;

// Class PlanBGame.PBSeqAct_ChangeTvMaterial
// 0x0000 (0x00FC - 0x00FC)
class UPBSeqAct_ChangeTvMaterial : public UPBSeqAct_ActivateOnScript
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74157 ];

		return pClassPointer;
	};

};

UClass* UPBSeqAct_ChangeTvMaterial::pClassPointer = NULL;

// Class PlanBGame.PBSeqAct_InstallObjectiveDevice
// 0x0000 (0x00FC - 0x00FC)
class UPBSeqAct_InstallObjectiveDevice : public UPBSeqAct_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74159 ];

		return pClassPointer;
	};

};

UClass* UPBSeqAct_InstallObjectiveDevice::pClassPointer = NULL;

// Class PlanBGame.PBSeqAct_WaitForPlayerMovement
// 0x0018 (0x0114 - 0x00FC)
class UPBSeqAct_WaitForPlayerMovement : public UPBSeqAct_Base
{
public:
	class UObject*                                     Player;                                           		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              RequiredDistance;                                 		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LastLocation;                                     		// 0x0104 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              TraveledDistance;                                 		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74169 ];

		return pClassPointer;
	};

	bool eventUpdate ( float DeltaTime );
	void eventActivated ( );
	struct FVector GetPlayerLocation ( );
};

UClass* UPBSeqAct_WaitForPlayerMovement::pClassPointer = NULL;

// Class PlanBGame.PBSeqCond_CampaignPhase
// 0x0000 (0x00E4 - 0x00E4)
class UPBSeqCond_CampaignPhase : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74183 ];

		return pClassPointer;
	};

};

UClass* UPBSeqCond_CampaignPhase::pClassPointer = NULL;

// Class PlanBGame.PBSeqCond_CampaignZone
// 0x0000 (0x00E4 - 0x00E4)
class UPBSeqCond_CampaignZone : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74185 ];

		return pClassPointer;
	};

};

UClass* UPBSeqCond_CampaignZone::pClassPointer = NULL;

// Class PlanBGame.PBSeqCond_IsInCombat
// 0x000C (0x00F0 - 0x00E4)
class UPBSeqCond_IsInCombat : public USequenceCondition
{
public:
	TArray< struct FString >                           MenuMapNames;                                     		// 0x00E4 (0x000C) [0x0000000020404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink | CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74187 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UPBSeqCond_IsInCombat::pClassPointer = NULL;

// Class PlanBGame.PBSeqCond_IsObstacleActivated
// 0x0000 (0x00E4 - 0x00E4)
class UPBSeqCond_IsObstacleActivated : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74197 ];

		return pClassPointer;
	};

};

UClass* UPBSeqCond_IsObstacleActivated::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_ApplyDamage
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_ApplyDamage : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74200 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UPBSeqEvent_ApplyDamage::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_BigExplosion
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_BigExplosion : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74203 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_BigExplosion::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_BiologicalBombExploded
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_BiologicalBombExploded : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74205 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_BiologicalBombExploded::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_BotsKilled
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_BotsKilled : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74207 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_BotsKilled::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_C4Exploded
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_C4Exploded : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74209 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_C4Exploded::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_CampaignPhaseChanged
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_CampaignPhaseChanged : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74211 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_CampaignPhaseChanged::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_CampaignStarting
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_CampaignStarting : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74213 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_CampaignStarting::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_DestructionStateChange
// 0x0001 (0x0115 - 0x0114)
class UPBSeqEvent_DestructionStateChange : public USequenceEvent
{
public:
	unsigned char                                      DestructionState;                                 		// 0x0114 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74215 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_DestructionStateChange::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_ObstacleClose
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_ObstacleClose : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74231 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_ObstacleClose::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_ObstacleOpen
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_ObstacleOpen : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74233 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_ObstacleOpen::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_ObstacleReset
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_ObstacleReset : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74235 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_ObstacleReset::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_TurrentArmed
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_TurrentArmed : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74237 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_TurrentArmed::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_UpdateEMP
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_UpdateEMP : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74239 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_UpdateEMP::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_WarfareCampaignEnd
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_WarfareCampaignEnd : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74241 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_WarfareCampaignEnd::pClassPointer = NULL;

// Class PlanBGame.PBSeqEvent_WarfareCampaignStart
// 0x0000 (0x0114 - 0x0114)
class UPBSeqEvent_WarfareCampaignStart : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74243 ];

		return pClassPointer;
	};

};

UClass* UPBSeqEvent_WarfareCampaignStart::pClassPointer = NULL;

// Class PlanBGame.PBSGNuclearBomb
// 0x0003 (0x0354 - 0x0351)
class APBSGNuclearBomb : public APBInteractiveObjective
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74291 ];

		return pClassPointer;
	};

};

UClass* APBSGNuclearBomb::pClassPointer = NULL;

// Class PlanBGame.PBShakingCameraAction
// 0x0040 (0x024C - 0x020C)
class APBShakingCameraAction : public APBCameraAction
{
public:
	float                                              fIntensity;                                       		// 0x020C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              fSpeedHorizontal;                                 		// 0x0210 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              fSpeedVertical;                                   		// 0x0214 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMaterial*                                   ScreenShader;                                     		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeaponShakeFactor;                               		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAlwaysShakeAtMaxIntensity : 1;                   		// 0x0220 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHorizontalInc : 1;                               		// 0x0220 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bVerticalInc : 1;                                 		// 0x0220 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              fShaderIntensityFactor;                           		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLastDeltaTime;                                   		// 0x0228 (0x0004) [0x0000000000000000]              
	float                                              fHorizontalComponent;                             		// 0x022C (0x0004) [0x0000000000000000]              
	float                                              fVerticalComponent;                               		// 0x0230 (0x0004) [0x0000000000000000]              
	int                                                iCurrentFrame;                                    		// 0x0234 (0x0004) [0x0000000000000000]              
	int                                                iShakeDir;                                        		// 0x0238 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   pShaderInstance;                                  		// 0x023C (0x0004) [0x0000000000000000]              
	struct FVector                                     vShakeOffset;                                     		// 0x0240 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74298 ];

		return pClassPointer;
	};

	bool UpdateCamera ( float fDeltaTime, class AActor* Target, struct FVector* OutCamLoc, struct FRotator* OutCamRot, float* OutFOV );
	struct FVector GetRandomShakeOffset ( float fDeltaTime, struct FVector vLookDir );
	struct FVector GetVerticalRand ( float fDeltaTime, struct FVector rRelUp );
	struct FVector GetHorizontalRand ( float fDeltaTime, struct FVector rRelRight );
	void GetCameraRelativeRightUp ( struct FVector vLookDir, struct FVector* vRight, struct FVector* vUp );
	bool IsNearZero ( struct FVector V );
	struct FVector GetWorldRightVector ( );
	struct FVector GetWorldUpVector ( );
	void DeactivateAction ( );
	void DrawHUD ( class UCanvas* Canvas );
	void ActivateAction ( class APBCameraActionManager* pManager );
};

UClass* APBShakingCameraAction::pClassPointer = NULL;

// Class PlanBGame.PBSideRollCameraAction
// 0x0000 (0x020C - 0x020C)
class APBSideRollCameraAction : public APBCameraAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74364 ];

		return pClassPointer;
	};

};

UClass* APBSideRollCameraAction::pClassPointer = NULL;

// Class PlanBGame.PBSingleSquad
// 0x0000 (0x0294 - 0x0294)
class APBSingleSquad : public APBSquadAI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74639 ];

		return pClassPointer;
	};

};

UClass* APBSingleSquad::pClassPointer = NULL;

// Class PlanBGame.PBSkill_PPlaneActor
// 0x0000 (0x04E0 - 0x04E0)
class APBSkill_PPlaneActor : public APBActorController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75304 ];

		return pClassPointer;
	};

};

UClass* APBSkill_PPlaneActor::pClassPointer = NULL;

// Class PlanBGame.PBZone
// 0x0000 (0x02EC - 0x02EC)
class APBZone : public APBGameObjective
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75808 ];

		return pClassPointer;
	};

};

UClass* APBZone::pClassPointer = NULL;

// Class PlanBGame.PBSlideZone
// 0x0000 (0x02EC - 0x02EC)
class APBSlideZone : public APBZone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75811 ];

		return pClassPointer;
	};

};

UClass* APBSlideZone::pClassPointer = NULL;

// Class PlanBGame.PBSlowVolume
// 0x001C (0x0274 - 0x0258)
class APBSlowVolume : public AGravityVolume
{
public:
	float                                              ScalingFactor;                                    		// 0x0258 (0x0004) [0x0000000000000000]              
	TArray< class AActor* >                            PendingEntered;                                   		// 0x025C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AActor* >                            PendingLeaving;                                   		// 0x0268 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75814 ];

		return pClassPointer;
	};

	void PawnLeavingVolume ( class APawn* Other );
	void PawnEnteredVolume ( class APawn* Other );
	void PostTouch ( class AActor* Other );
	void ActorLeavingVolume ( class AActor* Other );
	void ActorEnteredVolume ( class AActor* Other );
	void Destroyed ( );
	void PostBeginPlay ( );
};

UClass* APBSlowVolume::pClassPointer = NULL;

// Class PlanBGame.PBSniperHitMsg
// 0x0000 (0x0060 - 0x0060)
class UPBSniperHitMsg : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75838 ];

		return pClassPointer;
	};

};

UClass* UPBSniperHitMsg::pClassPointer = NULL;

// Class PlanBGame.PBSoundEmitter
// 0x0000 (0x02EC - 0x02EC)
class APBSoundEmitter : public APBGameObjective
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75862 ];

		return pClassPointer;
	};

};

UClass* APBSoundEmitter::pClassPointer = NULL;

// Class PlanBGame.PBSpecialMove_Move2IdleTransition
// 0x0000 (0x003C - 0x003C)
class UPBSpecialMove_Move2IdleTransition : public UPBSpecialMove
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75935 ];

		return pClassPointer;
	};

};

UClass* UPBSpecialMove_Move2IdleTransition::pClassPointer = NULL;

// Class PlanBGame.PBSpecialMove_TransitionRun2Idle
// 0x0000 (0x003C - 0x003C)
class UPBSpecialMove_TransitionRun2Idle : public UPBSpecialMove_Move2IdleTransition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75937 ];

		return pClassPointer;
	};

};

UClass* UPBSpecialMove_TransitionRun2Idle::pClassPointer = NULL;

// Class PlanBGame.PBSpecialMove_TransitionWalk2Idle
// 0x0000 (0x003C - 0x003C)
class UPBSpecialMove_TransitionWalk2Idle : public UPBSpecialMove_Move2IdleTransition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75939 ];

		return pClassPointer;
	};

};

UClass* UPBSpecialMove_TransitionWalk2Idle::pClassPointer = NULL;

// Class PlanBGame.PBSpecialZoneInfo
// 0x0000 (0x01D8 - 0x01D8)
class APBSpecialZoneInfo : public AReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75941 ];

		return pClassPointer;
	};

};

UClass* APBSpecialZoneInfo::pClassPointer = NULL;

// Class PlanBGame.PBSpecialZoneEquipment
// 0x0000 (0x01D8 - 0x01D8)
class APBSpecialZoneEquipment : public APBSpecialZoneInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75943 ];

		return pClassPointer;
	};

};

UClass* APBSpecialZoneEquipment::pClassPointer = NULL;

// Class PlanBGame.PBSpecialZoneExtraLife
// 0x0000 (0x01D8 - 0x01D8)
class APBSpecialZoneExtraLife : public APBSpecialZoneInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75945 ];

		return pClassPointer;
	};

};

UClass* APBSpecialZoneExtraLife::pClassPointer = NULL;

// Class PlanBGame.PBSpecialZoneMortar
// 0x0000 (0x01D8 - 0x01D8)
class APBSpecialZoneMortar : public APBSpecialZoneInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75947 ];

		return pClassPointer;
	};

};

UClass* APBSpecialZoneMortar::pClassPointer = NULL;

// Class PlanBGame.PBSpecialZoneScanner
// 0x0000 (0x01D8 - 0x01D8)
class APBSpecialZoneScanner : public APBSpecialZoneInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75949 ];

		return pClassPointer;
	};

};

UClass* APBSpecialZoneScanner::pClassPointer = NULL;

// Class PlanBGame.PBSpectatorRestrictVolume
// 0x0010 (0x0224 - 0x0214)
class APBSpectatorRestrictVolume : public AVolume
{
public:
	struct FVector                                     PrevPosition;                                     		// 0x0214 (0x000C) [0x0000000000000000]              
	class APBPlayerController*                         pLocalPlayerController;                           		// 0x0220 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75951 ];

		return pClassPointer;
	};

	void ProcessPlayerMove ( class APBPlayerController* pController );
	void SetLocalPlayerController ( class APBPlayerController* pController );
};

UClass* APBSpectatorRestrictVolume::pClassPointer = NULL;

// Class PlanBGame.PBStaticMesh
// 0x0000 (0x026C - 0x026C)
class UPBStaticMesh : public UStaticMeshComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75961 ];

		return pClassPointer;
	};

};

UClass* UPBStaticMesh::pClassPointer = NULL;

// Class PlanBGame.PBStrategicMapCell
// 0x0000 (0x01D8 - 0x01D8)
class APBStrategicMapCell : public APBBaseStrategicMapCell
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75979 ];

		return pClassPointer;
	};

};

UClass* APBStrategicMapCell::pClassPointer = NULL;

// Class PlanBGame.PBStrategicMapManager
// 0x0000 (0x01D8 - 0x01D8)
class APBStrategicMapManager : public APBBaseStrategicMapCell
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75981 ];

		return pClassPointer;
	};

};

UClass* APBStrategicMapManager::pClassPointer = NULL;

// Class PlanBGame.PBSun
// 0x003C (0x021C - 0x01E0)
class APBSun : public AStaticMeshActor
{
public:
	unsigned long                                      LightRender : 1;                                  		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      CoronaRender : 1;                                 		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      BlindRender : 1;                                  		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              LightPower;                                       		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightBrightness;                                  		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightMinValue;                                    		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                Light_Corona_color;                               		// 0x01F0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoronaPower;                                      		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoronaBrightness;                                 		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoronaMinValue;                                   		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoronaFadeOut;                                    		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoronaRadius;                                     		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          CoronaMaterial;                                   		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlindPower;                                       		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75983 ];

		return pClassPointer;
	};

};

UClass* APBSun::pClassPointer = NULL;

// Class PlanBGame.PBTeamEliminatedMessage
// 0x0000 (0x0060 - 0x0060)
class UPBTeamEliminatedMessage : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76263 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UPBTeamEliminatedMessage::pClassPointer = NULL;

// Class PlanBGame.PBTeamVoiceMsg
// 0x0000 (0x0060 - 0x0060)
class UPBTeamVoiceMsg : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76318 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UPBTeamVoiceMsg::pClassPointer = NULL;

// Class PlanBGame.PBTestCameraAction
// 0x0000 (0x020C - 0x020C)
class APBTestCameraAction : public APBCameraAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76337 ];

		return pClassPointer;
	};

	bool UpdateCamera ( float fDeltaTime, class AActor* Target, struct FVector* OutCamLoc, struct FRotator* OutCamRot, float* OutFOV );
	void DeactivateAction ( );
	void ActivateAction ( class APBCameraActionManager* pManager );
};

UClass* APBTestCameraAction::pClassPointer = NULL;

// Class PlanBGame.PBThrowGrenadeMsg
// 0x0000 (0x0060 - 0x0060)
class UPBThrowGrenadeMsg : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76377 ];

		return pClassPointer;
	};

};

UClass* UPBThrowGrenadeMsg::pClassPointer = NULL;

// Class PlanBGame.PBTriggerDeathVolume
// 0x0000 (0x0214 - 0x0214)
class APBTriggerDeathVolume : public ATriggerVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76410 ];

		return pClassPointer;
	};

};

UClass* APBTriggerDeathVolume::pClassPointer = NULL;

// Class PlanBGame.PBTurretBlockVolume
// 0x0004 (0x0218 - 0x0214)
class APBTurretBlockVolume : public AVolume
{
public:
	unsigned long                                      bDestroyTurret : 1;                               		// 0x0214 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76419 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
};

UClass* APBTurretBlockVolume::pClassPointer = NULL;

// Class PlanBGame.PBTurretInfo
// 0x00A8 (0x00E4 - 0x003C)
class UPBTurretInfo : public UObject
{
public:
	class UParticleSystem*                             MuzzleFlashPSCTemplate;                           		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             DisabledEffectPSCTemplate;                        		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DisabledEffectSocketName;                         		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MuzzleFlashDuration;                              		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHasLightEffect : 1;                              		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              MuzzleFlashLightBrightnessMin;                    		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MuzzleFlashLightBrightnessMax;                    		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLightRadius;                                     		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ShellEjectPSCTemplate;                            		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShellEjectionSocketName;                          		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fShellEjectDuration;                              		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fShellEjectDelayTime;                             		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSpreadPerBullet;                                 		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FiringSpeed;                                      		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TurretMaxDamage;                                  		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TurretMinDamage;                                  		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurretSpeed;                                      		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetMinFocusTime;                               		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetLostTime;                                   		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EndFireDelay;                                     		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartFireDelay;                                   		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartUpDelay;                                     		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDist;                                          		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFollowDist;                                    		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EffectiveRange;                                   		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WarnDist;                                         		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpawnDist;                                        		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThinkTimeInterval;                                		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FOV;                                              		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FireSound;                                        		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FireSoundFadeOutTime;                             		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ActivatedSound;                                   		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   IdleSound;                                        		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DisabledSound;                                    		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ArmingSound;                                      		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SndBulletWhizCue;                                 		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SpinningUpSound;                                  		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SpinningDownSound;                                		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BulletWhizSoundDistance;                          		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  AvatarImage;                                      		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76431 ];

		return pClassPointer;
	};

};

UClass* UPBTurretInfo::pClassPointer = NULL;

// Class PlanBGame.PBTurretSpot
// 0x0003 (0x0354 - 0x0351)
class APBTurretSpot : public APBInteractiveObjective
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76476 ];

		return pClassPointer;
	};

};

UClass* APBTurretSpot::pClassPointer = NULL;

// Class PlanBGame.PBTurretZone
// 0x0000 (0x0354 - 0x0354)
class APBTurretZone : public APBInteractibleZone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76483 ];

		return pClassPointer;
	};

};

UClass* APBTurretZone::pClassPointer = NULL;

// Class PlanBGame.PBTv
// 0x0000 (0x02EC - 0x02EC)
class APBTv : public APBGameObjective
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76490 ];

		return pClassPointer;
	};

};

UClass* APBTv::pClassPointer = NULL;

// Class PlanBGame.PBUIDataProvider_OnlineFriendMessages
// 0x003C (0x00E0 - 0x00A4)
class UPBUIDataProvider_OnlineFriendMessages : public UUIDataProvider_OnlineFriendMessages
{
public:
	TArray< struct FOnlineFriendMessage >              m_Archive;                                        		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   m_OnNewMessageDelegateArray;                      		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   m_OnMessageSentDelegateArray;                     		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnNewMessageDelegate__Delegate;                 		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMessageSentDelegate__Delegate;                		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76493 ];

		return pClassPointer;
	};

	TArray< struct FOnlineFriendMessage > _IntFilterMessages ( TArray< struct FOnlineFriendMessage > MessagesArray );
	void _IntReadMessages ( );
	void _IntOnMessageSent ( struct FOnlineFriendMessage Message );
	void _IntLogMessage ( struct FString sInfo, struct FOnlineFriendMessage Message );
	void _DeleteMessagesFromCache ( );
	void _IntOnNewMessage ( struct FOnlineFriendMessage Message );
	void OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message );
	void OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message );
	void OnLogoutCompleted ( unsigned long bWasSuccessful );
	void OnLoginChange ( unsigned char LocalUserNum );
	void StartMessageRecieving ( );
	void OnFriendMessageSent ( unsigned char LocalUserNum, struct FUniqueNetId RecievedPlayer, struct FString Message );
	void ClearDelegates ( );
	void ClearOnMessageSentDelegate ( struct FScriptDelegate func );
	void AddOnMessageSentDelegate ( struct FScriptDelegate func );
	void ClearOnNewMessageDelegate ( struct FScriptDelegate func );
	void AddOnNewMessageDelegate ( struct FScriptDelegate func );
	void OnMessageSentDelegate ( struct FOnlineFriendMessage Message );
	void OnNewMessageDelegate ( struct FOnlineFriendMessage Message );
};

UClass* UPBUIDataProvider_OnlineFriendMessages::pClassPointer = NULL;

// Class PlanBGame.PBUIDataProvider_OnlineFriends
// 0x0073 (0x0178 - 0x0105)
class UPBUIDataProvider_OnlineFriends : public UUIDataProvider_OnlineFriends
{
public:
	TArray< struct FString >                           getPictureList;                                   		// 0x0108 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FOnlineFriend >                     m_AuthorizationList;                              		// 0x0114 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FOnlineFriend >                     m_RequestList;                                    		// 0x0120 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           m_deleteFromAuthorizationStorage;                 		// 0x012C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           m_deleteFromRequestStorage;                       		// 0x0138 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           m_PopupsSent;                                     		// 0x0144 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           m_FriendsAdded;                                   		// 0x0150 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bAuthorizedUpdated : 1;                         		// 0x015C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bRequestedUpdated : 1;                          		// 0x015C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bRetrievingPictures : 1;                        		// 0x015C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bIAmOnlineShown : 1;                            		// 0x015C (0x0004) [0x0000000000000000] [0x00000008] 
	TArray< struct FScriptDelegate >                   m_OnBuddyListsChangedDelegates;                   		// 0x0160 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnBuddyListsChangedDelegate__Delegate;          		// 0x016C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76519 ];

		return pClassPointer;
	};

	void eventOnUnregister ( );
	void _SendIAmOnlineMessages ( );
	void OnNewMessageDelegate ( struct FOnlineFriendMessage Message );
	void OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message );
	bool _AddToRequestList ( struct FString NickName, struct FUniqueNetId Id );
	bool _AddToAuthorizationList ( struct FString NickName );
	void OnCreateBuddyRequestComplete ( unsigned long bWasSuccessful, int RecordId, struct FString NickName, struct FUniqueNetId Id );
	void OnCreateBuddyAuthorizationComplete ( unsigned long bWasSuccessful, int RecordId, struct FString NickName );
	void OnRemoveBuddyRequestComplete ( unsigned long bWasSuccessful );
	void OnRemoveBuddyAuthorizationComplete ( unsigned long bWasSuccessful );
	void _DeleteRequestRecords ( );
	void _DeleteAuthenticationRecords ( );
	bool removeBuddy ( struct FString sNickName );
	bool _IntAcceptBuddy ( struct FString sNickName );
	bool _IntAuthorizeBuddy ( struct FString sNickName );
	bool AddBuddy ( struct FString sNickName );
	void RetrievePictures ( );
	bool _AddGetPictureRequest ( struct FString sNickName );
	void OnGetBuddyListImageIndexComplete ( unsigned long bWasSuccessful );
	void OnReadBuddyRequestListComplete ( unsigned long bWasSuccessful );
	void OnReadBuddyAuthorizationListComplete ( unsigned long bWasSuccessful );
	void ClearDelegates ( );
	void OnFriendsReadComplete ( unsigned long bWasSuccessful );
	void _AnalizeLists ( );
	bool IsRequesting ( struct FString sNickName, int* nIndex );
	bool IsAutorizing ( struct FString sNickName, int* nIndex );
	bool IsFriend ( struct FString sNickName, int* nIndex );
	bool IsRequestingByPlayerID ( struct FUniqueNetId PlayerID, int* nIndex );
	bool IsFriendByPlayerID ( struct FUniqueNetId PlayerID, int* nIndex );
	void OnLoginChange ( unsigned char LocalUserNum );
	void OnLogoutCompleted ( unsigned long bWasSuccessful );
	void Clear_OnBuddyListsChangedDelegate ( struct FScriptDelegate func );
	bool Add_OnBuddyListsChangedDelegate ( struct FScriptDelegate func );
	void OnBuddyListsChangedDelegate ( );
};

UClass* UPBUIDataProvider_OnlineFriends::pClassPointer = NULL;

// Class PlanBGame.PBVictimMessage
// 0x0000 (0x0060 - 0x0060)
class UPBVictimMessage : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76967 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UPBVictimMessage::pClassPointer = NULL;

// Class PlanBGame.PBVolume
// 0x0000 (0x0214 - 0x0214)
class APBVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77178 ];

		return pClassPointer;
	};

};

UClass* APBVolume::pClassPointer = NULL;

// Class PlanBGame.PBWarfareCampaignVictory
// 0x0000 (0x0060 - 0x0060)
class UPBWarfareCampaignVictory : public UPBLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77181 ];

		return pClassPointer;
	};

};

UClass* UPBWarfareCampaignVictory::pClassPointer = NULL;

// Class PlanBGame.PBWarfareGame
// 0x0000 (0x0468 - 0x0468)
class APBWarfareGame : public APBRoundGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77183 ];

		return pClassPointer;
	};

};

UClass* APBWarfareGame::pClassPointer = NULL;

// Class PlanBGame.PBWarfareMapInfo
// 0x0000 (0x01D8 - 0x01D8)
class APBWarfareMapInfo : public AInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77186 ];

		return pClassPointer;
	};

};

UClass* APBWarfareMapInfo::pClassPointer = NULL;

// Class PlanBGame.PBWeaponListLimiter
// 0x0000 (0x003C - 0x003C)
class UPBWeaponListLimiter : public UPBChoiseLimiter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77235 ];

		return pClassPointer;
	};

	int GetLimit ( );
};

UClass* UPBWeaponListLimiter::pClassPointer = NULL;

// Class PlanBGame.PBWeaponSpread
// 0x0000 (0x003C - 0x003C)
class UPBWeaponSpread : public UPBWeaponSpreadBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77395 ];

		return pClassPointer;
	};

};

UClass* UPBWeaponSpread::pClassPointer = NULL;

// Class PlanBGame.PBWGGameReplicationInfo
// 0x0000 (0x0374 - 0x0374)
class APBWGGameReplicationInfo : public APBGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77458 ];

		return pClassPointer;
	};

};

UClass* APBWGGameReplicationInfo::pClassPointer = NULL;

// Class PlanBGame.PBWGPlayerReplicationInfo
// 0x0000 (0x07F8 - 0x07F8)
class APBWGPlayerReplicationInfo : public APBPlayerReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77460 ];

		return pClassPointer;
	};

};

UClass* APBWGPlayerReplicationInfo::pClassPointer = NULL;

// Class PlanBGame.SeqAct_PBCameraShake
// 0x0074 (0x0170 - 0x00FC)
class USeqAct_PBCameraShake : public USequenceAction
{
public:
	struct FScreenShakeStruct                          CameraShake;                                      		// 0x00FC (0x0068) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalScale;                                      		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalAmplitudeScale;                             		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalFrequencyScale;                             		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77463 ];

		return pClassPointer;
	};

};

UClass* USeqAct_PBCameraShake::pClassPointer = NULL;

// Class PlanBGame.SeqAct_SetBreakableMesh
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_SetBreakableMesh : public USequenceAction
{
public:
	class UStaticMesh*                                 NewStaticMesh;                                    		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      NoCollision : 1;                                  		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77469 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetBreakableMesh::pClassPointer = NULL;

// Class PlanBGame.SeqAct_SetWheelParticles
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_SetWheelParticles : public USequenceAction
{
public:
	class UParticleSystem*                             NewParticleSystem;                                		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77473 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetWheelParticles::pClassPointer = NULL;


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif