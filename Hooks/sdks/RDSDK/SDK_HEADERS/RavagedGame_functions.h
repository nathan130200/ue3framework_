/*
#############################################################################################
# Ravaged Beta (Beta) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: RavagedGame_functions.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Functions
# ========================================================================================= #
*/

// Function RavagedGame.R_AlienFX.SetColor
// [0x00020002] 
// Parameters infos:
// struct FColor                  newColor                       ( CPF_Parm )

void UR_AlienFX::SetColor ( struct FColor newColor )
{
	static UFunction* pFnSetColor = NULL;

	if ( ! pFnSetColor )
		pFnSetColor = (UFunction*) UObject::GObjObjects()->Data[ 78085 ];

	UR_AlienFX_execSetColor_Parms SetColor_Parms;
	memcpy ( &SetColor_Parms.newColor, &newColor, 0x4 );

	this->ProcessEvent ( pFnSetColor, &SetColor_Parms, NULL );
};

// Function RavagedGame.R_AlienFX.PackColor
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FColor                  Col                            ( CPF_Parm )

int UR_AlienFX::PackColor ( struct FColor Col )
{
	static UFunction* pFnPackColor = NULL;

	if ( ! pFnPackColor )
		pFnPackColor = (UFunction*) UObject::GObjObjects()->Data[ 78081 ];

	UR_AlienFX_execPackColor_Parms PackColor_Parms;
	memcpy ( &PackColor_Parms.Col, &Col, 0x4 );

	this->ProcessEvent ( pFnPackColor, &PackColor_Parms, NULL );

	return PackColor_Parms.ReturnValue;
};

// Function RavagedGame.R_AlienFX.SameColor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FColor                  A                              ( CPF_Parm )
// struct FColor                  B                              ( CPF_Parm )

bool UR_AlienFX::SameColor ( struct FColor A, struct FColor B )
{
	static UFunction* pFnSameColor = NULL;

	if ( ! pFnSameColor )
		pFnSameColor = (UFunction*) UObject::GObjObjects()->Data[ 78077 ];

	UR_AlienFX_execSameColor_Parms SameColor_Parms;
	memcpy ( &SameColor_Parms.A, &A, 0x4 );
	memcpy ( &SameColor_Parms.B, &B, 0x4 );

	this->ProcessEvent ( pFnSameColor, &SameColor_Parms, NULL );

	return SameColor_Parms.ReturnValue;
};

// Function RavagedGame.R_AlienFX.UpdateLights
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UR_AlienFX::UpdateLights ( )
{
	static UFunction* pFnUpdateLights = NULL;

	if ( ! pFnUpdateLights )
		pFnUpdateLights = (UFunction*) UObject::GObjObjects()->Data[ 78076 ];

	UR_AlienFX_execUpdateLights_Parms UpdateLights_Parms;

	pFnUpdateLights->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateLights, &UpdateLights_Parms, NULL );

	pFnUpdateLights->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_AlienFX.SetDeviceLightColorNoUpdate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Dev                            ( CPF_Parm )
// int                            Light                          ( CPF_Parm )
// int                            R                              ( CPF_Parm )
// int                            G                              ( CPF_Parm )
// int                            B                              ( CPF_Parm )
// int                            A                              ( CPF_Parm )

void UR_AlienFX::SetDeviceLightColorNoUpdate ( int Dev, int Light, int R, int G, int B, int A )
{
	static UFunction* pFnSetDeviceLightColorNoUpdate = NULL;

	if ( ! pFnSetDeviceLightColorNoUpdate )
		pFnSetDeviceLightColorNoUpdate = (UFunction*) UObject::GObjObjects()->Data[ 78069 ];

	UR_AlienFX_execSetDeviceLightColorNoUpdate_Parms SetDeviceLightColorNoUpdate_Parms;
	SetDeviceLightColorNoUpdate_Parms.Dev = Dev;
	SetDeviceLightColorNoUpdate_Parms.Light = Light;
	SetDeviceLightColorNoUpdate_Parms.R = R;
	SetDeviceLightColorNoUpdate_Parms.G = G;
	SetDeviceLightColorNoUpdate_Parms.B = B;
	SetDeviceLightColorNoUpdate_Parms.A = A;

	pFnSetDeviceLightColorNoUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDeviceLightColorNoUpdate, &SetDeviceLightColorNoUpdate_Parms, NULL );

	pFnSetDeviceLightColorNoUpdate->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_AlienFX.GetNumLights
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            DeviceNum                      ( CPF_Parm )

int UR_AlienFX::GetNumLights ( int DeviceNum )
{
	static UFunction* pFnGetNumLights = NULL;

	if ( ! pFnGetNumLights )
		pFnGetNumLights = (UFunction*) UObject::GObjObjects()->Data[ 78066 ];

	UR_AlienFX_execGetNumLights_Parms GetNumLights_Parms;
	GetNumLights_Parms.DeviceNum = DeviceNum;

	pFnGetNumLights->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumLights, &GetNumLights_Parms, NULL );

	pFnGetNumLights->FunctionFlags |= 0x400;

	return GetNumLights_Parms.ReturnValue;
};

// Function RavagedGame.R_AlienFX.NativeSetAllLight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            packedCol                      ( CPF_Parm )

void UR_AlienFX::NativeSetAllLight ( int packedCol )
{
	static UFunction* pFnNativeSetAllLight = NULL;

	if ( ! pFnNativeSetAllLight )
		pFnNativeSetAllLight = (UFunction*) UObject::GObjObjects()->Data[ 78064 ];

	UR_AlienFX_execNativeSetAllLight_Parms NativeSetAllLight_Parms;
	NativeSetAllLight_Parms.packedCol = packedCol;

	pFnNativeSetAllLight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeSetAllLight, &NativeSetAllLight_Parms, NULL );

	pFnNativeSetAllLight->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_AlienFX.GetNumDevicesDoNotCall
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UR_AlienFX::GetNumDevicesDoNotCall ( )
{
	static UFunction* pFnGetNumDevicesDoNotCall = NULL;

	if ( ! pFnGetNumDevicesDoNotCall )
		pFnGetNumDevicesDoNotCall = (UFunction*) UObject::GObjObjects()->Data[ 78062 ];

	UR_AlienFX_execGetNumDevicesDoNotCall_Parms GetNumDevicesDoNotCall_Parms;

	pFnGetNumDevicesDoNotCall->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumDevicesDoNotCall, &GetNumDevicesDoNotCall_Parms, NULL );

	pFnGetNumDevicesDoNotCall->FunctionFlags |= 0x400;

	return GetNumDevicesDoNotCall_Parms.ReturnValue;
};

// Function RavagedGame.R_AlienFX.SetColorDoNotCall
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            R                              ( CPF_Parm )
// int                            G                              ( CPF_Parm )
// int                            B                              ( CPF_Parm )
// int                            A                              ( CPF_Parm )

void UR_AlienFX::SetColorDoNotCall ( int R, int G, int B, int A )
{
	static UFunction* pFnSetColorDoNotCall = NULL;

	if ( ! pFnSetColorDoNotCall )
		pFnSetColorDoNotCall = (UFunction*) UObject::GObjObjects()->Data[ 78057 ];

	UR_AlienFX_execSetColorDoNotCall_Parms SetColorDoNotCall_Parms;
	SetColorDoNotCall_Parms.R = R;
	SetColorDoNotCall_Parms.G = G;
	SetColorDoNotCall_Parms.B = B;
	SetColorDoNotCall_Parms.A = A;

	pFnSetColorDoNotCall->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetColorDoNotCall, &SetColorDoNotCall_Parms, NULL );

	pFnSetColorDoNotCall->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_CombatVolume.GetReEntryPoint
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Position                       ( CPF_Parm )
// struct FVector                 ReEntryPosition                ( CPF_Parm | CPF_OutParm )

bool AR_CombatVolume::GetReEntryPoint ( struct FVector Position, struct FVector* ReEntryPosition )
{
	static UFunction* pFnGetReEntryPoint = NULL;

	if ( ! pFnGetReEntryPoint )
		pFnGetReEntryPoint = (UFunction*) UObject::GObjObjects()->Data[ 78913 ];

	AR_CombatVolume_execGetReEntryPoint_Parms GetReEntryPoint_Parms;
	memcpy ( &GetReEntryPoint_Parms.Position, &Position, 0xC );

	pFnGetReEntryPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetReEntryPoint, &GetReEntryPoint_Parms, NULL );

	pFnGetReEntryPoint->FunctionFlags |= 0x400;

	if ( ReEntryPosition )
		memcpy ( ReEntryPosition, &GetReEntryPoint_Parms.ReEntryPosition, 0xC );

	return GetReEntryPoint_Parms.ReturnValue;
};

// Function RavagedGame.R_DisplayHandler.ResolutionSort
// [0x00120002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FMonitorResolutionInfo  A                              ( CPF_Parm )
// struct FMonitorResolutionInfo  B                              ( CPF_Parm )

int UR_DisplayHandler::ResolutionSort ( struct FMonitorResolutionInfo A, struct FMonitorResolutionInfo B )
{
	static UFunction* pFnResolutionSort = NULL;

	if ( ! pFnResolutionSort )
		pFnResolutionSort = (UFunction*) UObject::GObjObjects()->Data[ 79128 ];

	UR_DisplayHandler_execResolutionSort_Parms ResolutionSort_Parms;
	memcpy ( &ResolutionSort_Parms.A, &A, 0x10 );
	memcpy ( &ResolutionSort_Parms.B, &B, 0x10 );

	this->ProcessEvent ( pFnResolutionSort, &ResolutionSort_Parms, NULL );

	return ResolutionSort_Parms.ReturnValue;
};

// Function RavagedGame.R_DisplayHandler.Resort
// [0x00020002] 
// Parameters infos:
// unsigned char                  NewSortMode                    ( CPF_Parm )

void UR_DisplayHandler::Resort ( unsigned char NewSortMode )
{
	static UFunction* pFnResort = NULL;

	if ( ! pFnResort )
		pFnResort = (UFunction*) UObject::GObjObjects()->Data[ 79125 ];

	UR_DisplayHandler_execResort_Parms Resort_Parms;
	Resort_Parms.NewSortMode = NewSortMode;

	this->ProcessEvent ( pFnResort, &Resort_Parms, NULL );
};

// Function RavagedGame.R_DisplayHandler.GetAspectRatioString
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Idx                            ( CPF_Parm )

struct FString UR_DisplayHandler::GetAspectRatioString ( int Idx )
{
	static UFunction* pFnGetAspectRatioString = NULL;

	if ( ! pFnGetAspectRatioString )
		pFnGetAspectRatioString = (UFunction*) UObject::GObjObjects()->Data[ 79119 ];

	UR_DisplayHandler_execGetAspectRatioString_Parms GetAspectRatioString_Parms;
	GetAspectRatioString_Parms.Idx = Idx;

	this->ProcessEvent ( pFnGetAspectRatioString, &GetAspectRatioString_Parms, NULL );

	return GetAspectRatioString_Parms.ReturnValue;
};

// Function RavagedGame.R_DisplayHandler.CalculateAspectRatios
// [0x00020002] 
// Parameters infos:

void UR_DisplayHandler::CalculateAspectRatios ( )
{
	static UFunction* pFnCalculateAspectRatios = NULL;

	if ( ! pFnCalculateAspectRatios )
		pFnCalculateAspectRatios = (UFunction*) UObject::GObjObjects()->Data[ 79117 ];

	UR_DisplayHandler_execCalculateAspectRatios_Parms CalculateAspectRatios_Parms;

	this->ProcessEvent ( pFnCalculateAspectRatios, &CalculateAspectRatios_Parms, NULL );
};

// Function RavagedGame.R_DisplayHandler.PopulateResolutions
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bAutoSort                      ( CPF_OptionalParm | CPF_Parm )

bool UR_DisplayHandler::PopulateResolutions ( unsigned long bAutoSort )
{
	static UFunction* pFnPopulateResolutions = NULL;

	if ( ! pFnPopulateResolutions )
		pFnPopulateResolutions = (UFunction*) UObject::GObjObjects()->Data[ 79113 ];

	UR_DisplayHandler_execPopulateResolutions_Parms PopulateResolutions_Parms;
	PopulateResolutions_Parms.bAutoSort = bAutoSort;

	this->ProcessEvent ( pFnPopulateResolutions, &PopulateResolutions_Parms, NULL );

	return PopulateResolutions_Parms.ReturnValue;
};

// Function RavagedGame.R_DisplayHandler.VerifyPossibleAspectRatios
// [0x00020002] 
// Parameters infos:

void UR_DisplayHandler::VerifyPossibleAspectRatios ( )
{
	static UFunction* pFnVerifyPossibleAspectRatios = NULL;

	if ( ! pFnVerifyPossibleAspectRatios )
		pFnVerifyPossibleAspectRatios = (UFunction*) UObject::GObjObjects()->Data[ 79106 ];

	UR_DisplayHandler_execVerifyPossibleAspectRatios_Parms VerifyPossibleAspectRatios_Parms;

	this->ProcessEvent ( pFnVerifyPossibleAspectRatios, &VerifyPossibleAspectRatios_Parms, NULL );
};

// Function RavagedGame.R_DisplayHandler.Equals
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          A                              ( CPF_Parm )
// float                          B                              ( CPF_Parm )

bool UR_DisplayHandler::Equals ( float A, float B )
{
	static UFunction* pFnEquals = NULL;

	if ( ! pFnEquals )
		pFnEquals = (UFunction*) UObject::GObjObjects()->Data[ 79102 ];

	UR_DisplayHandler_execEquals_Parms Equals_Parms;
	Equals_Parms.A = A;
	Equals_Parms.B = B;

	this->ProcessEvent ( pFnEquals, &Equals_Parms, NULL );

	return Equals_Parms.ReturnValue;
};

// Function RavagedGame.R_DisplayHandler.SetMaxSmoothedFrameRate
// [0x00020002] 
// Parameters infos:
// int                            maxFPS                         ( CPF_Parm )

void UR_DisplayHandler::SetMaxSmoothedFrameRate ( int maxFPS )
{
	static UFunction* pFnSetMaxSmoothedFrameRate = NULL;

	if ( ! pFnSetMaxSmoothedFrameRate )
		pFnSetMaxSmoothedFrameRate = (UFunction*) UObject::GObjObjects()->Data[ 79099 ];

	UR_DisplayHandler_execSetMaxSmoothedFrameRate_Parms SetMaxSmoothedFrameRate_Parms;
	SetMaxSmoothedFrameRate_Parms.maxFPS = maxFPS;

	this->ProcessEvent ( pFnSetMaxSmoothedFrameRate, &SetMaxSmoothedFrameRate_Parms, NULL );
};

// Function RavagedGame.R_DisplayHandler.GetMaxSmoothedFrameRate
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UR_DisplayHandler::GetMaxSmoothedFrameRate ( )
{
	static UFunction* pFnGetMaxSmoothedFrameRate = NULL;

	if ( ! pFnGetMaxSmoothedFrameRate )
		pFnGetMaxSmoothedFrameRate = (UFunction*) UObject::GObjObjects()->Data[ 79096 ];

	UR_DisplayHandler_execGetMaxSmoothedFrameRate_Parms GetMaxSmoothedFrameRate_Parms;

	this->ProcessEvent ( pFnGetMaxSmoothedFrameRate, &GetMaxSmoothedFrameRate_Parms, NULL );

	return GetMaxSmoothedFrameRate_Parms.ReturnValue;
};

// Function RavagedGame.R_DisplayHandler.SetDefaultGamma
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UR_DisplayHandler::SetDefaultGamma ( )
{
	static UFunction* pFnSetDefaultGamma = NULL;

	if ( ! pFnSetDefaultGamma )
		pFnSetDefaultGamma = (UFunction*) UObject::GObjObjects()->Data[ 79095 ];

	UR_DisplayHandler_execSetDefaultGamma_Parms SetDefaultGamma_Parms;

	pFnSetDefaultGamma->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDefaultGamma, &SetDefaultGamma_Parms, NULL );

	pFnSetDefaultGamma->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_DisplayHandler.SetGamma
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          decimalValue                   ( CPF_Parm )

void UR_DisplayHandler::SetGamma ( float decimalValue )
{
	static UFunction* pFnSetGamma = NULL;

	if ( ! pFnSetGamma )
		pFnSetGamma = (UFunction*) UObject::GObjObjects()->Data[ 79093 ];

	UR_DisplayHandler_execSetGamma_Parms SetGamma_Parms;
	SetGamma_Parms.decimalValue = decimalValue;

	pFnSetGamma->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetGamma, &SetGamma_Parms, NULL );

	pFnSetGamma->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_DisplayHandler.SetDynamicDecals
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void UR_DisplayHandler::SetDynamicDecals ( unsigned long B )
{
	static UFunction* pFnSetDynamicDecals = NULL;

	if ( ! pFnSetDynamicDecals )
		pFnSetDynamicDecals = (UFunction*) UObject::GObjObjects()->Data[ 79091 ];

	UR_DisplayHandler_execSetDynamicDecals_Parms SetDynamicDecals_Parms;
	SetDynamicDecals_Parms.B = B;

	pFnSetDynamicDecals->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDynamicDecals, &SetDynamicDecals_Parms, NULL );

	pFnSetDynamicDecals->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_DisplayHandler.SetPostprocess
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void UR_DisplayHandler::SetPostprocess ( unsigned long B )
{
	static UFunction* pFnSetPostprocess = NULL;

	if ( ! pFnSetPostprocess )
		pFnSetPostprocess = (UFunction*) UObject::GObjObjects()->Data[ 79089 ];

	UR_DisplayHandler_execSetPostprocess_Parms SetPostprocess_Parms;
	SetPostprocess_Parms.B = B;

	pFnSetPostprocess->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPostprocess, &SetPostprocess_Parms, NULL );

	pFnSetPostprocess->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_DisplayHandler.SetFullscreenMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Mode                           ( CPF_Parm )

void UR_DisplayHandler::SetFullscreenMode ( int Mode )
{
	static UFunction* pFnSetFullscreenMode = NULL;

	if ( ! pFnSetFullscreenMode )
		pFnSetFullscreenMode = (UFunction*) UObject::GObjObjects()->Data[ 79087 ];

	UR_DisplayHandler_execSetFullscreenMode_Parms SetFullscreenMode_Parms;
	SetFullscreenMode_Parms.Mode = Mode;

	pFnSetFullscreenMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFullscreenMode, &SetFullscreenMode_Parms, NULL );

	pFnSetFullscreenMode->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_DisplayHandler.SetVSync
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void UR_DisplayHandler::SetVSync ( unsigned long B )
{
	static UFunction* pFnSetVSync = NULL;

	if ( ! pFnSetVSync )
		pFnSetVSync = (UFunction*) UObject::GObjObjects()->Data[ 79085 ];

	UR_DisplayHandler_execSetVSync_Parms SetVSync_Parms;
	SetVSync_Parms.B = B;

	pFnSetVSync->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVSync, &SetVSync_Parms, NULL );

	pFnSetVSync->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_DisplayHandler.SetShadowDetail
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void UR_DisplayHandler::SetShadowDetail ( int Level )
{
	static UFunction* pFnSetShadowDetail = NULL;

	if ( ! pFnSetShadowDetail )
		pFnSetShadowDetail = (UFunction*) UObject::GObjObjects()->Data[ 79083 ];

	UR_DisplayHandler_execSetShadowDetail_Parms SetShadowDetail_Parms;
	SetShadowDetail_Parms.Level = Level;

	pFnSetShadowDetail->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetShadowDetail, &SetShadowDetail_Parms, NULL );

	pFnSetShadowDetail->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_DisplayHandler.SetTextureDetail
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void UR_DisplayHandler::SetTextureDetail ( int Level )
{
	static UFunction* pFnSetTextureDetail = NULL;

	if ( ! pFnSetTextureDetail )
		pFnSetTextureDetail = (UFunction*) UObject::GObjObjects()->Data[ 79081 ];

	UR_DisplayHandler_execSetTextureDetail_Parms SetTextureDetail_Parms;
	SetTextureDetail_Parms.Level = Level;

	pFnSetTextureDetail->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextureDetail, &SetTextureDetail_Parms, NULL );

	pFnSetTextureDetail->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_DisplayHandler.SetAFLevel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void UR_DisplayHandler::SetAFLevel ( int Level )
{
	static UFunction* pFnSetAFLevel = NULL;

	if ( ! pFnSetAFLevel )
		pFnSetAFLevel = (UFunction*) UObject::GObjObjects()->Data[ 79079 ];

	UR_DisplayHandler_execSetAFLevel_Parms SetAFLevel_Parms;
	SetAFLevel_Parms.Level = Level;

	pFnSetAFLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAFLevel, &SetAFLevel_Parms, NULL );

	pFnSetAFLevel->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_DisplayHandler.SetPostProcessingAALevel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void UR_DisplayHandler::SetPostProcessingAALevel ( int Level )
{
	static UFunction* pFnSetPostProcessingAALevel = NULL;

	if ( ! pFnSetPostProcessingAALevel )
		pFnSetPostProcessingAALevel = (UFunction*) UObject::GObjObjects()->Data[ 79077 ];

	UR_DisplayHandler_execSetPostProcessingAALevel_Parms SetPostProcessingAALevel_Parms;
	SetPostProcessingAALevel_Parms.Level = Level;

	pFnSetPostProcessingAALevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPostProcessingAALevel, &SetPostProcessingAALevel_Parms, NULL );

	pFnSetPostProcessingAALevel->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_DisplayHandler.SetMSAAEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void UR_DisplayHandler::SetMSAAEnabled ( int Level )
{
	static UFunction* pFnSetMSAAEnabled = NULL;

	if ( ! pFnSetMSAAEnabled )
		pFnSetMSAAEnabled = (UFunction*) UObject::GObjObjects()->Data[ 79075 ];

	UR_DisplayHandler_execSetMSAAEnabled_Parms SetMSAAEnabled_Parms;
	SetMSAAEnabled_Parms.Level = Level;

	pFnSetMSAAEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMSAAEnabled, &SetMSAAEnabled_Parms, NULL );

	pFnSetMSAAEnabled->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_DisplayHandler.SetOverallQualityLevel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void UR_DisplayHandler::SetOverallQualityLevel ( int Level )
{
	static UFunction* pFnSetOverallQualityLevel = NULL;

	if ( ! pFnSetOverallQualityLevel )
		pFnSetOverallQualityLevel = (UFunction*) UObject::GObjObjects()->Data[ 79073 ];

	UR_DisplayHandler_execSetOverallQualityLevel_Parms SetOverallQualityLevel_Parms;
	SetOverallQualityLevel_Parms.Level = Level;

	pFnSetOverallQualityLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOverallQualityLevel, &SetOverallQualityLevel_Parms, NULL );

	pFnSetOverallQualityLevel->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_DisplayHandler.GetNativeResolutions
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< struct FMonitorResolutionInfo > RezArray                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UR_DisplayHandler::GetNativeResolutions ( TArray< struct FMonitorResolutionInfo >* RezArray )
{
	static UFunction* pFnGetNativeResolutions = NULL;

	if ( ! pFnGetNativeResolutions )
		pFnGetNativeResolutions = (UFunction*) UObject::GObjObjects()->Data[ 79064 ];

	UR_DisplayHandler_execGetNativeResolutions_Parms GetNativeResolutions_Parms;

	pFnGetNativeResolutions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNativeResolutions, &GetNativeResolutions_Parms, NULL );

	pFnGetNativeResolutions->FunctionFlags |= 0x400;

	if ( RezArray )
		memcpy ( RezArray, &GetNativeResolutions_Parms.RezArray, 0xC );

	return GetNativeResolutions_Parms.ReturnValue;
};

// Function RavagedGame.R_DisplayHandler.SetResolution
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ResX                           ( CPF_Parm )
// int                            ResY                           ( CPF_Parm )

void UR_DisplayHandler::SetResolution ( int ResX, int ResY )
{
	static UFunction* pFnSetResolution = NULL;

	if ( ! pFnSetResolution )
		pFnSetResolution = (UFunction*) UObject::GObjObjects()->Data[ 79061 ];

	UR_DisplayHandler_execSetResolution_Parms SetResolution_Parms;
	SetResolution_Parms.ResX = ResX;
	SetResolution_Parms.ResY = ResY;

	pFnSetResolution->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetResolution, &SetResolution_Parms, NULL );

	pFnSetResolution->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_DisplayHandler.GetGamma
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UR_DisplayHandler::GetGamma ( )
{
	static UFunction* pFnGetGamma = NULL;

	if ( ! pFnGetGamma )
		pFnGetGamma = (UFunction*) UObject::GObjObjects()->Data[ 79059 ];

	UR_DisplayHandler_execGetGamma_Parms GetGamma_Parms;

	pFnGetGamma->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGamma, &GetGamma_Parms, NULL );

	pFnGetGamma->FunctionFlags |= 0x400;

	return GetGamma_Parms.ReturnValue;
};

// Function RavagedGame.R_DisplayHandler.GetDynamicDecals
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UR_DisplayHandler::GetDynamicDecals ( )
{
	static UFunction* pFnGetDynamicDecals = NULL;

	if ( ! pFnGetDynamicDecals )
		pFnGetDynamicDecals = (UFunction*) UObject::GObjObjects()->Data[ 79057 ];

	UR_DisplayHandler_execGetDynamicDecals_Parms GetDynamicDecals_Parms;

	pFnGetDynamicDecals->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDynamicDecals, &GetDynamicDecals_Parms, NULL );

	pFnGetDynamicDecals->FunctionFlags |= 0x400;

	return GetDynamicDecals_Parms.ReturnValue;
};

// Function RavagedGame.R_DisplayHandler.GetPostprocessEffectsEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UR_DisplayHandler::GetPostprocessEffectsEnabled ( )
{
	static UFunction* pFnGetPostprocessEffectsEnabled = NULL;

	if ( ! pFnGetPostprocessEffectsEnabled )
		pFnGetPostprocessEffectsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 79055 ];

	UR_DisplayHandler_execGetPostprocessEffectsEnabled_Parms GetPostprocessEffectsEnabled_Parms;

	pFnGetPostprocessEffectsEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPostprocessEffectsEnabled, &GetPostprocessEffectsEnabled_Parms, NULL );

	pFnGetPostprocessEffectsEnabled->FunctionFlags |= 0x400;

	return GetPostprocessEffectsEnabled_Parms.ReturnValue;
};

// Function RavagedGame.R_DisplayHandler.GetFullscreenMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UR_DisplayHandler::GetFullscreenMode ( )
{
	static UFunction* pFnGetFullscreenMode = NULL;

	if ( ! pFnGetFullscreenMode )
		pFnGetFullscreenMode = (UFunction*) UObject::GObjObjects()->Data[ 79053 ];

	UR_DisplayHandler_execGetFullscreenMode_Parms GetFullscreenMode_Parms;

	pFnGetFullscreenMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFullscreenMode, &GetFullscreenMode_Parms, NULL );

	pFnGetFullscreenMode->FunctionFlags |= 0x400;

	return GetFullscreenMode_Parms.ReturnValue;
};

// Function RavagedGame.R_DisplayHandler.GetVSync
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UR_DisplayHandler::GetVSync ( )
{
	static UFunction* pFnGetVSync = NULL;

	if ( ! pFnGetVSync )
		pFnGetVSync = (UFunction*) UObject::GObjObjects()->Data[ 79051 ];

	UR_DisplayHandler_execGetVSync_Parms GetVSync_Parms;

	pFnGetVSync->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVSync, &GetVSync_Parms, NULL );

	pFnGetVSync->FunctionFlags |= 0x400;

	return GetVSync_Parms.ReturnValue;
};

// Function RavagedGame.R_DisplayHandler.GetDesktopResolution
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            ResX                           ( CPF_Parm | CPF_OutParm )
// int                            ResY                           ( CPF_Parm | CPF_OutParm )

void UR_DisplayHandler::GetDesktopResolution ( int* ResX, int* ResY )
{
	static UFunction* pFnGetDesktopResolution = NULL;

	if ( ! pFnGetDesktopResolution )
		pFnGetDesktopResolution = (UFunction*) UObject::GObjObjects()->Data[ 79048 ];

	UR_DisplayHandler_execGetDesktopResolution_Parms GetDesktopResolution_Parms;

	pFnGetDesktopResolution->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDesktopResolution, &GetDesktopResolution_Parms, NULL );

	pFnGetDesktopResolution->FunctionFlags |= 0x400;

	if ( ResX )
		*ResX = GetDesktopResolution_Parms.ResX;

	if ( ResY )
		*ResY = GetDesktopResolution_Parms.ResY;
};

// Function RavagedGame.R_DisplayHandler.GetResolution
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            ResX                           ( CPF_Parm | CPF_OutParm )
// int                            ResY                           ( CPF_Parm | CPF_OutParm )

void UR_DisplayHandler::GetResolution ( int* ResX, int* ResY )
{
	static UFunction* pFnGetResolution = NULL;

	if ( ! pFnGetResolution )
		pFnGetResolution = (UFunction*) UObject::GObjObjects()->Data[ 79045 ];

	UR_DisplayHandler_execGetResolution_Parms GetResolution_Parms;

	pFnGetResolution->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResolution, &GetResolution_Parms, NULL );

	pFnGetResolution->FunctionFlags |= 0x400;

	if ( ResX )
		*ResX = GetResolution_Parms.ResX;

	if ( ResY )
		*ResY = GetResolution_Parms.ResY;
};

// Function RavagedGame.R_DisplayHandler.GetAFLevel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UR_DisplayHandler::GetAFLevel ( )
{
	static UFunction* pFnGetAFLevel = NULL;

	if ( ! pFnGetAFLevel )
		pFnGetAFLevel = (UFunction*) UObject::GObjObjects()->Data[ 79043 ];

	UR_DisplayHandler_execGetAFLevel_Parms GetAFLevel_Parms;

	pFnGetAFLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAFLevel, &GetAFLevel_Parms, NULL );

	pFnGetAFLevel->FunctionFlags |= 0x400;

	return GetAFLevel_Parms.ReturnValue;
};

// Function RavagedGame.R_DisplayHandler.GetPostProcessingAALevel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UR_DisplayHandler::GetPostProcessingAALevel ( )
{
	static UFunction* pFnGetPostProcessingAALevel = NULL;

	if ( ! pFnGetPostProcessingAALevel )
		pFnGetPostProcessingAALevel = (UFunction*) UObject::GObjObjects()->Data[ 79041 ];

	UR_DisplayHandler_execGetPostProcessingAALevel_Parms GetPostProcessingAALevel_Parms;

	pFnGetPostProcessingAALevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPostProcessingAALevel, &GetPostProcessingAALevel_Parms, NULL );

	pFnGetPostProcessingAALevel->FunctionFlags |= 0x400;

	return GetPostProcessingAALevel_Parms.ReturnValue;
};

// Function RavagedGame.R_DisplayHandler.GetMSAALevel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UR_DisplayHandler::GetMSAALevel ( )
{
	static UFunction* pFnGetMSAALevel = NULL;

	if ( ! pFnGetMSAALevel )
		pFnGetMSAALevel = (UFunction*) UObject::GObjObjects()->Data[ 79039 ];

	UR_DisplayHandler_execGetMSAALevel_Parms GetMSAALevel_Parms;

	pFnGetMSAALevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMSAALevel, &GetMSAALevel_Parms, NULL );

	pFnGetMSAALevel->FunctionFlags |= 0x400;

	return GetMSAALevel_Parms.ReturnValue;
};

// Function RavagedGame.R_DisplayHandler.GetShadowDetail
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UR_DisplayHandler::GetShadowDetail ( )
{
	static UFunction* pFnGetShadowDetail = NULL;

	if ( ! pFnGetShadowDetail )
		pFnGetShadowDetail = (UFunction*) UObject::GObjObjects()->Data[ 79037 ];

	UR_DisplayHandler_execGetShadowDetail_Parms GetShadowDetail_Parms;

	pFnGetShadowDetail->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetShadowDetail, &GetShadowDetail_Parms, NULL );

	pFnGetShadowDetail->FunctionFlags |= 0x400;

	return GetShadowDetail_Parms.ReturnValue;
};

// Function RavagedGame.R_DisplayHandler.GetTextureDetail
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UR_DisplayHandler::GetTextureDetail ( )
{
	static UFunction* pFnGetTextureDetail = NULL;

	if ( ! pFnGetTextureDetail )
		pFnGetTextureDetail = (UFunction*) UObject::GObjObjects()->Data[ 79035 ];

	UR_DisplayHandler_execGetTextureDetail_Parms GetTextureDetail_Parms;

	pFnGetTextureDetail->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTextureDetail, &GetTextureDetail_Parms, NULL );

	pFnGetTextureDetail->FunctionFlags |= 0x400;

	return GetTextureDetail_Parms.ReturnValue;
};

// Function RavagedGame.R_DisplayHandler.GetOverallQuality
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UR_DisplayHandler::GetOverallQuality ( )
{
	static UFunction* pFnGetOverallQuality = NULL;

	if ( ! pFnGetOverallQuality )
		pFnGetOverallQuality = (UFunction*) UObject::GObjObjects()->Data[ 79033 ];

	UR_DisplayHandler_execGetOverallQuality_Parms GetOverallQuality_Parms;

	pFnGetOverallQuality->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOverallQuality, &GetOverallQuality_Parms, NULL );

	pFnGetOverallQuality->FunctionFlags |= 0x400;

	return GetOverallQuality_Parms.ReturnValue;
};

// Function RavagedGame.R_DisplayHandler.SetDefaultOverallQuality
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UR_DisplayHandler::SetDefaultOverallQuality ( )
{
	static UFunction* pFnSetDefaultOverallQuality = NULL;

	if ( ! pFnSetDefaultOverallQuality )
		pFnSetDefaultOverallQuality = (UFunction*) UObject::GObjObjects()->Data[ 79032 ];

	UR_DisplayHandler_execSetDefaultOverallQuality_Parms SetDefaultOverallQuality_Parms;

	pFnSetDefaultOverallQuality->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDefaultOverallQuality, &SetDefaultOverallQuality_Parms, NULL );

	pFnSetDefaultOverallQuality->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_DisplayHandler.RevertSystemSettings
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UR_DisplayHandler::RevertSystemSettings ( )
{
	static UFunction* pFnRevertSystemSettings = NULL;

	if ( ! pFnRevertSystemSettings )
		pFnRevertSystemSettings = (UFunction*) UObject::GObjObjects()->Data[ 79031 ];

	UR_DisplayHandler_execRevertSystemSettings_Parms RevertSystemSettings_Parms;

	pFnRevertSystemSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRevertSystemSettings, &RevertSystemSettings_Parms, NULL );

	pFnRevertSystemSettings->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_DisplayHandler.ApplyCurrentSystemSettings
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  writeToIni                     ( CPF_Parm )

void UR_DisplayHandler::ApplyCurrentSystemSettings ( unsigned long writeToIni )
{
	static UFunction* pFnApplyCurrentSystemSettings = NULL;

	if ( ! pFnApplyCurrentSystemSettings )
		pFnApplyCurrentSystemSettings = (UFunction*) UObject::GObjObjects()->Data[ 79029 ];

	UR_DisplayHandler_execApplyCurrentSystemSettings_Parms ApplyCurrentSystemSettings_Parms;
	ApplyCurrentSystemSettings_Parms.writeToIni = writeToIni;

	pFnApplyCurrentSystemSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyCurrentSystemSettings, &ApplyCurrentSystemSettings_Parms, NULL );

	pFnApplyCurrentSystemSettings->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_DisplayHandler.InitCurrentSystemSettings
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UR_DisplayHandler::InitCurrentSystemSettings ( )
{
	static UFunction* pFnInitCurrentSystemSettings = NULL;

	if ( ! pFnInitCurrentSystemSettings )
		pFnInitCurrentSystemSettings = (UFunction*) UObject::GObjObjects()->Data[ 79028 ];

	UR_DisplayHandler_execInitCurrentSystemSettings_Parms InitCurrentSystemSettings_Parms;

	pFnInitCurrentSystemSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitCurrentSystemSettings, &InitCurrentSystemSettings_Parms, NULL );

	pFnInitCurrentSystemSettings->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_LadderVolume.PawnLeavingVolume
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AR_LadderVolume::eventPawnLeavingVolume ( class APawn* P )
{
	static UFunction* pFnPawnLeavingVolume = NULL;

	if ( ! pFnPawnLeavingVolume )
		pFnPawnLeavingVolume = (UFunction*) UObject::GObjObjects()->Data[ 84581 ];

	AR_LadderVolume_eventPawnLeavingVolume_Parms PawnLeavingVolume_Parms;
	PawnLeavingVolume_Parms.P = P;

	this->ProcessEvent ( pFnPawnLeavingVolume, &PawnLeavingVolume_Parms, NULL );
};

// Function RavagedGame.R_LadderVolume.PawnEnteredVolume
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AR_LadderVolume::eventPawnEnteredVolume ( class APawn* P )
{
	static UFunction* pFnPawnEnteredVolume = NULL;

	if ( ! pFnPawnEnteredVolume )
		pFnPawnEnteredVolume = (UFunction*) UObject::GObjObjects()->Data[ 84575 ];

	AR_LadderVolume_eventPawnEnteredVolume_Parms PawnEnteredVolume_Parms;
	PawnEnteredVolume_Parms.P = P;

	this->ProcessEvent ( pFnPawnEnteredVolume, &PawnEnteredVolume_Parms, NULL );
};

// Function RavagedGame.R_LadderVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_LadderVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 84574 ];

	AR_LadderVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_Minimap.ToggleFullMap
// [0x00020002] 
// Parameters infos:

void UR_Minimap::ToggleFullMap ( )
{
	static UFunction* pFnToggleFullMap = NULL;

	if ( ! pFnToggleFullMap )
		pFnToggleFullMap = (UFunction*) UObject::GObjObjects()->Data[ 85076 ];

	UR_Minimap_execToggleFullMap_Parms ToggleFullMap_Parms;

	this->ProcessEvent ( pFnToggleFullMap, &ToggleFullMap_Parms, NULL );
};

// Function RavagedGame.R_Minimap.ResizeFinished
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void UR_Minimap::eventResizeFinished ( )
{
	static UFunction* pFnResizeFinished = NULL;

	if ( ! pFnResizeFinished )
		pFnResizeFinished = (UFunction*) UObject::GObjObjects()->Data[ 85075 ];

	UR_Minimap_eventResizeFinished_Parms ResizeFinished_Parms;

	this->ProcessEvent ( pFnResizeFinished, &ResizeFinished_Parms, NULL );
};

// Function RavagedGame.R_Minimap.SetZoom
// [0x00020002] 
// Parameters infos:
// float                          Amount                         ( CPF_Parm )

void UR_Minimap::SetZoom ( float Amount )
{
	static UFunction* pFnSetZoom = NULL;

	if ( ! pFnSetZoom )
		pFnSetZoom = (UFunction*) UObject::GObjObjects()->Data[ 85073 ];

	UR_Minimap_execSetZoom_Parms SetZoom_Parms;
	SetZoom_Parms.Amount = Amount;

	this->ProcessEvent ( pFnSetZoom, &SetZoom_Parms, NULL );
};

// Function RavagedGame.R_Minimap.GetFullMapSizeAndLoc
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          ClipX                          ( CPF_Parm )
// float                          ClipY                          ( CPF_Parm )
// float                          Size                           ( CPF_Parm | CPF_OutParm )
// struct FVector2D               Loc                            ( CPF_Parm | CPF_OutParm )

void UR_Minimap::GetFullMapSizeAndLoc ( float ClipX, float ClipY, float* Size, struct FVector2D* Loc )
{
	static UFunction* pFnGetFullMapSizeAndLoc = NULL;

	if ( ! pFnGetFullMapSizeAndLoc )
		pFnGetFullMapSizeAndLoc = (UFunction*) UObject::GObjObjects()->Data[ 85068 ];

	UR_Minimap_execGetFullMapSizeAndLoc_Parms GetFullMapSizeAndLoc_Parms;
	GetFullMapSizeAndLoc_Parms.ClipX = ClipX;
	GetFullMapSizeAndLoc_Parms.ClipY = ClipY;

	pFnGetFullMapSizeAndLoc->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFullMapSizeAndLoc, &GetFullMapSizeAndLoc_Parms, NULL );

	pFnGetFullMapSizeAndLoc->FunctionFlags |= 0x400;

	if ( Size )
		*Size = GetFullMapSizeAndLoc_Parms.Size;

	if ( Loc )
		memcpy ( Loc, &GetFullMapSizeAndLoc_Parms.Loc, 0x8 );
};

// Function RavagedGame.R_Minimap.GetSmallMapSizeAndLoc
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          ClipY                          ( CPF_Parm )
// float                          Size                           ( CPF_Parm | CPF_OutParm )
// struct FVector2D               Loc                            ( CPF_Parm | CPF_OutParm )

void UR_Minimap::GetSmallMapSizeAndLoc ( float ClipY, float* Size, struct FVector2D* Loc )
{
	static UFunction* pFnGetSmallMapSizeAndLoc = NULL;

	if ( ! pFnGetSmallMapSizeAndLoc )
		pFnGetSmallMapSizeAndLoc = (UFunction*) UObject::GObjObjects()->Data[ 85064 ];

	UR_Minimap_execGetSmallMapSizeAndLoc_Parms GetSmallMapSizeAndLoc_Parms;
	GetSmallMapSizeAndLoc_Parms.ClipY = ClipY;

	pFnGetSmallMapSizeAndLoc->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSmallMapSizeAndLoc, &GetSmallMapSizeAndLoc_Parms, NULL );

	pFnGetSmallMapSizeAndLoc->FunctionFlags |= 0x400;

	if ( Size )
		*Size = GetSmallMapSizeAndLoc_Parms.Size;

	if ( Loc )
		memcpy ( Loc, &GetSmallMapSizeAndLoc_Parms.Loc, 0x8 );
};

// Function RavagedGame.R_Minimap.IsOnMap
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Location                       ( CPF_Parm )

bool UR_Minimap::IsOnMap ( struct FVector Location )
{
	static UFunction* pFnIsOnMap = NULL;

	if ( ! pFnIsOnMap )
		pFnIsOnMap = (UFunction*) UObject::GObjObjects()->Data[ 85061 ];

	UR_Minimap_execIsOnMap_Parms IsOnMap_Parms;
	memcpy ( &IsOnMap_Parms.Location, &Location, 0xC );

	pFnIsOnMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOnMap, &IsOnMap_Parms, NULL );

	pFnIsOnMap->FunctionFlags |= 0x400;

	return IsOnMap_Parms.ReturnValue;
};

// Function RavagedGame.R_Minimap.GetHUDLocationNative
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 InLocation                     ( CPF_Parm )

struct FVector UR_Minimap::GetHUDLocationNative ( struct FVector InLocation )
{
	static UFunction* pFnGetHUDLocationNative = NULL;

	if ( ! pFnGetHUDLocationNative )
		pFnGetHUDLocationNative = (UFunction*) UObject::GObjObjects()->Data[ 85058 ];

	UR_Minimap_execGetHUDLocationNative_Parms GetHUDLocationNative_Parms;
	memcpy ( &GetHUDLocationNative_Parms.InLocation, &InLocation, 0xC );

	pFnGetHUDLocationNative->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHUDLocationNative, &GetHUDLocationNative_Parms, NULL );

	pFnGetHUDLocationNative->FunctionFlags |= 0x400;

	return GetHUDLocationNative_Parms.ReturnValue;
};

// Function RavagedGame.R_Minimap.DrawResources
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UR_Minimap::DrawResources ( class UCanvas* Canvas )
{
	static UFunction* pFnDrawResources = NULL;

	if ( ! pFnDrawResources )
		pFnDrawResources = (UFunction*) UObject::GObjObjects()->Data[ 85056 ];

	UR_Minimap_execDrawResources_Parms DrawResources_Parms;
	DrawResources_Parms.Canvas = Canvas;

	pFnDrawResources->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawResources, &DrawResources_Parms, NULL );

	pFnDrawResources->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_Minimap.DrawControlPoints
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UR_Minimap::DrawControlPoints ( class UCanvas* Canvas )
{
	static UFunction* pFnDrawControlPoints = NULL;

	if ( ! pFnDrawControlPoints )
		pFnDrawControlPoints = (UFunction*) UObject::GObjObjects()->Data[ 85054 ];

	UR_Minimap_execDrawControlPoints_Parms DrawControlPoints_Parms;
	DrawControlPoints_Parms.Canvas = Canvas;

	pFnDrawControlPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawControlPoints, &DrawControlPoints_Parms, NULL );

	pFnDrawControlPoints->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_Minimap.DrawPawnsNative
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UR_Minimap::DrawPawnsNative ( class UCanvas* Canvas )
{
	static UFunction* pFnDrawPawnsNative = NULL;

	if ( ! pFnDrawPawnsNative )
		pFnDrawPawnsNative = (UFunction*) UObject::GObjObjects()->Data[ 85052 ];

	UR_Minimap_execDrawPawnsNative_Parms DrawPawnsNative_Parms;
	DrawPawnsNative_Parms.Canvas = Canvas;

	pFnDrawPawnsNative->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawPawnsNative, &DrawPawnsNative_Parms, NULL );

	pFnDrawPawnsNative->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_Minimap.RenderNative
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UR_Minimap::RenderNative ( class UCanvas* Canvas )
{
	static UFunction* pFnRenderNative = NULL;

	if ( ! pFnRenderNative )
		pFnRenderNative = (UFunction*) UObject::GObjObjects()->Data[ 85050 ];

	UR_Minimap_execRenderNative_Parms RenderNative_Parms;
	RenderNative_Parms.Canvas = Canvas;

	pFnRenderNative->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRenderNative, &RenderNative_Parms, NULL );

	pFnRenderNative->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_Minimap.Cleanup
// [0x00020002] 
// Parameters infos:

void UR_Minimap::Cleanup ( )
{
	static UFunction* pFnCleanup = NULL;

	if ( ! pFnCleanup )
		pFnCleanup = (UFunction*) UObject::GObjObjects()->Data[ 85049 ];

	UR_Minimap_execCleanup_Parms Cleanup_Parms;

	this->ProcessEvent ( pFnCleanup, &Cleanup_Parms, NULL );
};

// Function RavagedGame.R_Minimap.Initialize
// [0x00020002] 
// Parameters infos:
// class APlayerController*       rPC                            ( CPF_Parm )
// class AR_HUD*                  rHUD                           ( CPF_Parm )

void UR_Minimap::Initialize ( class APlayerController* rPC, class AR_HUD* rHUD )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 85044 ];

	UR_Minimap_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.rPC = rPC;
	Initialize_Parms.rHUD = rHUD;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function RavagedGame.R_NoProneVolume.PawnLeavingVolume
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void AR_NoProneVolume::eventPawnLeavingVolume ( class APawn* Other )
{
	static UFunction* pFnPawnLeavingVolume = NULL;

	if ( ! pFnPawnLeavingVolume )
		pFnPawnLeavingVolume = (UFunction*) UObject::GObjObjects()->Data[ 85098 ];

	AR_NoProneVolume_eventPawnLeavingVolume_Parms PawnLeavingVolume_Parms;
	PawnLeavingVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnPawnLeavingVolume, &PawnLeavingVolume_Parms, NULL );
};

// Function RavagedGame.R_NoProneVolume.PawnEnteredVolume
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void AR_NoProneVolume::eventPawnEnteredVolume ( class APawn* Other )
{
	static UFunction* pFnPawnEnteredVolume = NULL;

	if ( ! pFnPawnEnteredVolume )
		pFnPawnEnteredVolume = (UFunction*) UObject::GObjObjects()->Data[ 85096 ];

	AR_NoProneVolume_eventPawnEnteredVolume_Parms PawnEnteredVolume_Parms;
	PawnEnteredVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnPawnEnteredVolume, &PawnEnteredVolume_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.BroadcastTakenDroppedMessage
// [0x00020002] 
// Parameters infos:
// class AController*             EventInstigator                ( CPF_Parm )

void AR_Object_CTR::BroadcastTakenDroppedMessage ( class AController* EventInstigator )
{
	static UFunction* pFnBroadcastTakenDroppedMessage = NULL;

	if ( ! pFnBroadcastTakenDroppedMessage )
		pFnBroadcastTakenDroppedMessage = (UFunction*) UObject::GObjObjects()->Data[ 85191 ];

	AR_Object_CTR_execBroadcastTakenDroppedMessage_Parms BroadcastTakenDroppedMessage_Parms;
	BroadcastTakenDroppedMessage_Parms.EventInstigator = EventInstigator;

	this->ProcessEvent ( pFnBroadcastTakenDroppedMessage, &BroadcastTakenDroppedMessage_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.BroadcastTakenFromBaseMessage
// [0x00020002] 
// Parameters infos:
// class AController*             EventInstigator                ( CPF_Parm )

void AR_Object_CTR::BroadcastTakenFromBaseMessage ( class AController* EventInstigator )
{
	static UFunction* pFnBroadcastTakenFromBaseMessage = NULL;

	if ( ! pFnBroadcastTakenFromBaseMessage )
		pFnBroadcastTakenFromBaseMessage = (UFunction*) UObject::GObjObjects()->Data[ 85189 ];

	AR_Object_CTR_execBroadcastTakenFromBaseMessage_Parms BroadcastTakenFromBaseMessage_Parms;
	BroadcastTakenFromBaseMessage_Parms.EventInstigator = EventInstigator;

	this->ProcessEvent ( pFnBroadcastTakenFromBaseMessage, &BroadcastTakenFromBaseMessage_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.BroadcastDroppedMessage
// [0x00020002] 
// Parameters infos:
// class AController*             EventInstigator                ( CPF_Parm )

void AR_Object_CTR::BroadcastDroppedMessage ( class AController* EventInstigator )
{
	static UFunction* pFnBroadcastDroppedMessage = NULL;

	if ( ! pFnBroadcastDroppedMessage )
		pFnBroadcastDroppedMessage = (UFunction*) UObject::GObjObjects()->Data[ 85187 ];

	AR_Object_CTR_execBroadcastDroppedMessage_Parms BroadcastDroppedMessage_Parms;
	BroadcastDroppedMessage_Parms.EventInstigator = EventInstigator;

	this->ProcessEvent ( pFnBroadcastDroppedMessage, &BroadcastDroppedMessage_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.BroadcastReturnedMessage
// [0x00020002] 
// Parameters infos:

void AR_Object_CTR::BroadcastReturnedMessage ( )
{
	static UFunction* pFnBroadcastReturnedMessage = NULL;

	if ( ! pFnBroadcastReturnedMessage )
		pFnBroadcastReturnedMessage = (UFunction*) UObject::GObjObjects()->Data[ 85186 ];

	AR_Object_CTR_execBroadcastReturnedMessage_Parms BroadcastReturnedMessage_Parms;

	this->ProcessEvent ( pFnBroadcastReturnedMessage, &BroadcastReturnedMessage_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.SetFlagDynamicLightToNotBeDynamic
// [0x00020002] 
// Parameters infos:

void AR_Object_CTR::SetFlagDynamicLightToNotBeDynamic ( )
{
	static UFunction* pFnSetFlagDynamicLightToNotBeDynamic = NULL;

	if ( ! pFnSetFlagDynamicLightToNotBeDynamic )
		pFnSetFlagDynamicLightToNotBeDynamic = (UFunction*) UObject::GObjObjects()->Data[ 85185 ];

	AR_Object_CTR_execSetFlagDynamicLightToNotBeDynamic_Parms SetFlagDynamicLightToNotBeDynamic_Parms;

	this->ProcessEvent ( pFnSetFlagDynamicLightToNotBeDynamic, &SetFlagDynamicLightToNotBeDynamic_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.SetFlagPropertiesToStationaryFlagState
// [0x00020002] 
// Parameters infos:

void AR_Object_CTR::SetFlagPropertiesToStationaryFlagState ( )
{
	static UFunction* pFnSetFlagPropertiesToStationaryFlagState = NULL;

	if ( ! pFnSetFlagPropertiesToStationaryFlagState )
		pFnSetFlagPropertiesToStationaryFlagState = (UFunction*) UObject::GObjObjects()->Data[ 85184 ];

	AR_Object_CTR_execSetFlagPropertiesToStationaryFlagState_Parms SetFlagPropertiesToStationaryFlagState_Parms;

	this->ProcessEvent ( pFnSetFlagPropertiesToStationaryFlagState, &SetFlagPropertiesToStationaryFlagState_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.Drop
// [0x00024002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_OptionalParm | CPF_Parm )

void AR_Object_CTR::Drop ( class AController* Killer )
{
	static UFunction* pFnDrop = NULL;

	if ( ! pFnDrop )
		pFnDrop = (UFunction*) UObject::GObjObjects()->Data[ 85182 ];

	AR_Object_CTR_execDrop_Parms Drop_Parms;
	Drop_Parms.Killer = Killer;

	this->ProcessEvent ( pFnDrop, &Drop_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.CustomFadeOutEffects
// [0x00020102] 
// Parameters infos:

void AR_Object_CTR::CustomFadeOutEffects ( )
{
	static UFunction* pFnCustomFadeOutEffects = NULL;

	if ( ! pFnCustomFadeOutEffects )
		pFnCustomFadeOutEffects = (UFunction*) UObject::GObjObjects()->Data[ 85162 ];

	AR_Object_CTR_execCustomFadeOutEffects_Parms CustomFadeOutEffects_Parms;

	this->ProcessEvent ( pFnCustomFadeOutEffects, &CustomFadeOutEffects_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.bringUpBrightOff
// [0x00020102] 
// Parameters infos:

void AR_Object_CTR::bringUpBrightOff ( )
{
	static UFunction* pFnbringUpBrightOff = NULL;

	if ( ! pFnbringUpBrightOff )
		pFnbringUpBrightOff = (UFunction*) UObject::GObjObjects()->Data[ 85160 ];

	AR_Object_CTR_execbringUpBrightOff_Parms bringUpBrightOff_Parms;

	this->ProcessEvent ( pFnbringUpBrightOff, &bringUpBrightOff_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.CustomRespawnEffects
// [0x00020102] 
// Parameters infos:

void AR_Object_CTR::CustomRespawnEffects ( )
{
	static UFunction* pFnCustomRespawnEffects = NULL;

	if ( ! pFnCustomRespawnEffects )
		pFnCustomRespawnEffects = (UFunction*) UObject::GObjObjects()->Data[ 85158 ];

	AR_Object_CTR_execCustomRespawnEffects_Parms CustomRespawnEffects_Parms;

	this->ProcessEvent ( pFnCustomRespawnEffects, &CustomRespawnEffects_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.SameTeamTouch
// [0x00020000] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )

void AR_Object_CTR::SameTeamTouch ( class AController* C )
{
	static UFunction* pFnSameTeamTouch = NULL;

	if ( ! pFnSameTeamTouch )
		pFnSameTeamTouch = (UFunction*) UObject::GObjObjects()->Data[ 85156 ];

	AR_Object_CTR_execSameTeamTouch_Parms SameTeamTouch_Parms;
	SameTeamTouch_Parms.C = C;

	this->ProcessEvent ( pFnSameTeamTouch, &SameTeamTouch_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.ValidHolder
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AR_Object_CTR::ValidHolder ( class AActor* Other )
{
	static UFunction* pFnValidHolder = NULL;

	if ( ! pFnValidHolder )
		pFnValidHolder = (UFunction*) UObject::GObjObjects()->Data[ 85149 ];

	AR_Object_CTR_execValidHolder_Parms ValidHolder_Parms;
	ValidHolder_Parms.Other = Other;

	this->ProcessEvent ( pFnValidHolder, &ValidHolder_Parms, NULL );

	return ValidHolder_Parms.ReturnValue;
};

// Function RavagedGame.R_Object_CTR.SetHolder
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )

void AR_Object_CTR::SetHolder ( class AController* C )
{
	static UFunction* pFnSetHolder = NULL;

	if ( ! pFnSetHolder )
		pFnSetHolder = (UFunction*) UObject::GObjObjects()->Data[ 85146 ];

	AR_Object_CTR_execSetHolder_Parms SetHolder_Parms;
	SetHolder_Parms.C = C;

	this->ProcessEvent ( pFnSetHolder, &SetHolder_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.ClientReturnedHome
// [0x00020102] 
// Parameters infos:

void AR_Object_CTR::ClientReturnedHome ( )
{
	static UFunction* pFnClientReturnedHome = NULL;

	if ( ! pFnClientReturnedHome )
		pFnClientReturnedHome = (UFunction*) UObject::GObjObjects()->Data[ 85145 ];

	AR_Object_CTR_execClientReturnedHome_Parms ClientReturnedHome_Parms;

	this->ProcessEvent ( pFnClientReturnedHome, &ClientReturnedHome_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.ShouldMinimapRenderFor
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       PC                             ( CPF_Parm )

bool AR_Object_CTR::ShouldMinimapRenderFor ( class APlayerController* PC )
{
	static UFunction* pFnShouldMinimapRenderFor = NULL;

	if ( ! pFnShouldMinimapRenderFor )
		pFnShouldMinimapRenderFor = (UFunction*) UObject::GObjObjects()->Data[ 85142 ];

	AR_Object_CTR_execShouldMinimapRenderFor_Parms ShouldMinimapRenderFor_Parms;
	ShouldMinimapRenderFor_Parms.PC = PC;

	this->ProcessEvent ( pFnShouldMinimapRenderFor, &ShouldMinimapRenderFor_Parms, NULL );

	return ShouldMinimapRenderFor_Parms.ReturnValue;
};

// Function RavagedGame.R_Object_CTR.OnBaseChainChanged
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_Object_CTR::eventOnBaseChainChanged ( )
{
	static UFunction* pFnOnBaseChainChanged = NULL;

	if ( ! pFnOnBaseChainChanged )
		pFnOnBaseChainChanged = (UFunction*) UObject::GObjObjects()->Data[ 85140 ];

	AR_Object_CTR_eventOnBaseChainChanged_Parms OnBaseChainChanged_Parms;

	this->ProcessEvent ( pFnOnBaseChainChanged, &OnBaseChainChanged_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void AR_Object_CTR::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 85136 ];

	AR_Object_CTR_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.RegisterWithGRI
// [0x00020102] 
// Parameters infos:

void AR_Object_CTR::RegisterWithGRI ( )
{
	static UFunction* pFnRegisterWithGRI = NULL;

	if ( ! pFnRegisterWithGRI )
		pFnRegisterWithGRI = (UFunction*) UObject::GObjObjects()->Data[ 85134 ];

	AR_Object_CTR_execRegisterWithGRI_Parms RegisterWithGRI_Parms;

	this->ProcessEvent ( pFnRegisterWithGRI, &RegisterWithGRI_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AR_Object_CTR::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 85132 ];

	AR_Object_CTR_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AR_Object_CTR::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 85130 ];

	AR_Object_CTR_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function RavagedGame.R_Object_CTR.BlinkHUD
// [0x00020102] 
// Parameters infos:

void AR_Object_CTR::BlinkHUD ( )
{
	static UFunction* pFnBlinkHUD = NULL;

	if ( ! pFnBlinkHUD )
		pFnBlinkHUD = (UFunction*) UObject::GObjObjects()->Data[ 85129 ];

	AR_Object_CTR_execBlinkHUD_Parms BlinkHUD_Parms;

	this->ProcessEvent ( pFnBlinkHUD, &BlinkHUD_Parms, NULL );
};

// Function RavagedGame.R_Objective_ControlPoint.UpdateFlag
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void AR_Objective_ControlPoint::eventUpdateFlag ( float DT )
{
	static UFunction* pFnUpdateFlag = NULL;

	if ( ! pFnUpdateFlag )
		pFnUpdateFlag = (UFunction*) UObject::GObjObjects()->Data[ 79774 ];

	AR_Objective_ControlPoint_eventUpdateFlag_Parms UpdateFlag_Parms;
	UpdateFlag_Parms.DT = DT;

	this->ProcessEvent ( pFnUpdateFlag, &UpdateFlag_Parms, NULL );
};

// Function RavagedGame.R_Objective_ControlPoint.UpdateFlagNative
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void AR_Objective_ControlPoint::UpdateFlagNative ( float DT )
{
	static UFunction* pFnUpdateFlagNative = NULL;

	if ( ! pFnUpdateFlagNative )
		pFnUpdateFlagNative = (UFunction*) UObject::GObjObjects()->Data[ 79772 ];

	AR_Objective_ControlPoint_execUpdateFlagNative_Parms UpdateFlagNative_Parms;
	UpdateFlagNative_Parms.DT = DT;

	pFnUpdateFlagNative->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateFlagNative, &UpdateFlagNative_Parms, NULL );

	pFnUpdateFlagNative->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_Objective_ControlPoint.Captured
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AR_PlayerController*     Scorer                         ( CPF_Parm )
// unsigned long                  bNeutralized                   ( CPF_Parm )

void AR_Objective_ControlPoint::eventCaptured ( class AR_PlayerController* Scorer, unsigned long bNeutralized )
{
	static UFunction* pFnCaptured = NULL;

	if ( ! pFnCaptured )
		pFnCaptured = (UFunction*) UObject::GObjObjects()->Data[ 79767 ];

	AR_Objective_ControlPoint_eventCaptured_Parms Captured_Parms;
	Captured_Parms.Scorer = Scorer;
	Captured_Parms.bNeutralized = bNeutralized;

	this->ProcessEvent ( pFnCaptured, &Captured_Parms, NULL );
};

// Function RavagedGame.R_Objective_ControlPoint.BaseTimer
// [0x00820002] 
// Parameters infos:

void AR_Objective_ControlPoint::BaseTimer ( )
{
	static UFunction* pFnBaseTimer = NULL;

	if ( ! pFnBaseTimer )
		pFnBaseTimer = (UFunction*) UObject::GObjObjects()->Data[ 79738 ];

	AR_Objective_ControlPoint_execBaseTimer_Parms BaseTimer_Parms;

	this->ProcessEvent ( pFnBaseTimer, &BaseTimer_Parms, NULL );
};

// Function RavagedGame.R_Objective_ControlPoint.NearObjective
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool AR_Objective_ControlPoint::NearObjective ( class APawn* P )
{
	static UFunction* pFnNearObjective = NULL;

	if ( ! pFnNearObjective )
		pFnNearObjective = (UFunction*) UObject::GObjObjects()->Data[ 79731 ];

	AR_Objective_ControlPoint_execNearObjective_Parms NearObjective_Parms;
	NearObjective_Parms.P = P;

	this->ProcessEvent ( pFnNearObjective, &NearObjective_Parms, NULL );

	return NearObjective_Parms.ReturnValue;
};

// Function RavagedGame.R_Objective_ControlPoint.ResetObjectiveStatus
// [0x00020002] 
// Parameters infos:

void AR_Objective_ControlPoint::ResetObjectiveStatus ( )
{
	static UFunction* pFnResetObjectiveStatus = NULL;

	if ( ! pFnResetObjectiveStatus )
		pFnResetObjectiveStatus = (UFunction*) UObject::GObjObjects()->Data[ 79728 ];

	AR_Objective_ControlPoint_execResetObjectiveStatus_Parms ResetObjectiveStatus_Parms;

	this->ProcessEvent ( pFnResetObjectiveStatus, &ResetObjectiveStatus_Parms, NULL );
};

// Function RavagedGame.R_Objective_ControlPoint.IsCaptured
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Objective_ControlPoint::IsCaptured ( )
{
	static UFunction* pFnIsCaptured = NULL;

	if ( ! pFnIsCaptured )
		pFnIsCaptured = (UFunction*) UObject::GObjObjects()->Data[ 79726 ];

	AR_Objective_ControlPoint_execIsCaptured_Parms IsCaptured_Parms;

	this->ProcessEvent ( pFnIsCaptured, &IsCaptured_Parms, NULL );

	return IsCaptured_Parms.ReturnValue;
};

// Function RavagedGame.R_Objective_ControlPoint.IsActive
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Objective_ControlPoint::eventIsActive ( )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = (UFunction*) UObject::GObjObjects()->Data[ 79724 ];

	AR_Objective_ControlPoint_eventIsActive_Parms IsActive_Parms;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	return IsActive_Parms.ReturnValue;
};

// Function RavagedGame.R_Objective_ControlPoint.UpdateWindFromMap
// [0x00820102] 
// Parameters infos:

void AR_Objective_ControlPoint::UpdateWindFromMap ( )
{
	static UFunction* pFnUpdateWindFromMap = NULL;

	if ( ! pFnUpdateWindFromMap )
		pFnUpdateWindFromMap = (UFunction*) UObject::GObjObjects()->Data[ 79715 ];

	AR_Objective_ControlPoint_execUpdateWindFromMap_Parms UpdateWindFromMap_Parms;

	this->ProcessEvent ( pFnUpdateWindFromMap, &UpdateWindFromMap_Parms, NULL );
};

// Function RavagedGame.R_Objective_ControlPoint.ActivateTeamMesh
// [0x00020102] 
// Parameters infos:

void AR_Objective_ControlPoint::ActivateTeamMesh ( )
{
	static UFunction* pFnActivateTeamMesh = NULL;

	if ( ! pFnActivateTeamMesh )
		pFnActivateTeamMesh = (UFunction*) UObject::GObjObjects()->Data[ 79712 ];

	AR_Objective_ControlPoint_execActivateTeamMesh_Parms ActivateTeamMesh_Parms;

	this->ProcessEvent ( pFnActivateTeamMesh, &ActivateTeamMesh_Parms, NULL );
};

// Function RavagedGame.R_Objective_ControlPoint.ActivateFactories
// [0x00020102] 
// Parameters infos:

void AR_Objective_ControlPoint::ActivateFactories ( )
{
	static UFunction* pFnActivateFactories = NULL;

	if ( ! pFnActivateFactories )
		pFnActivateFactories = (UFunction*) UObject::GObjObjects()->Data[ 79706 ];

	AR_Objective_ControlPoint_execActivateFactories_Parms ActivateFactories_Parms;

	this->ProcessEvent ( pFnActivateFactories, &ActivateFactories_Parms, NULL );
};

// Function RavagedGame.R_Objective_ControlPoint.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AR_Objective_ControlPoint::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 79691 ];

	AR_Objective_ControlPoint_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_Objective_ControlPoint.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AR_Objective_ControlPoint::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 79688 ];

	AR_Objective_ControlPoint_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function RavagedGame.R_Pawn_Native.OutOfCombatTimer
// [0x00020002] 
// Parameters infos:

void AR_Pawn_Native::OutOfCombatTimer ( )
{
	static UFunction* pFnOutOfCombatTimer = NULL;

	if ( ! pFnOutOfCombatTimer )
		pFnOutOfCombatTimer = (UFunction*) UObject::GObjObjects()->Data[ 85238 ];

	AR_Pawn_Native_execOutOfCombatTimer_Parms OutOfCombatTimer_Parms;

	this->ProcessEvent ( pFnOutOfCombatTimer, &OutOfCombatTimer_Parms, NULL );
};

// Function RavagedGame.R_Pawn_Native.ExitCombatVolume
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AR_Pawn_Native::eventExitCombatVolume ( )
{
	static UFunction* pFnExitCombatVolume = NULL;

	if ( ! pFnExitCombatVolume )
		pFnExitCombatVolume = (UFunction*) UObject::GObjObjects()->Data[ 85234 ];

	AR_Pawn_Native_eventExitCombatVolume_Parms ExitCombatVolume_Parms;

	this->ProcessEvent ( pFnExitCombatVolume, &ExitCombatVolume_Parms, NULL );
};

// Function RavagedGame.R_Pawn_Native.EnterCombatVolume
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AR_Pawn_Native::eventEnterCombatVolume ( )
{
	static UFunction* pFnEnterCombatVolume = NULL;

	if ( ! pFnEnterCombatVolume )
		pFnEnterCombatVolume = (UFunction*) UObject::GObjObjects()->Data[ 85233 ];

	AR_Pawn_Native_eventEnterCombatVolume_Parms EnterCombatVolume_Parms;

	this->ProcessEvent ( pFnEnterCombatVolume, &EnterCombatVolume_Parms, NULL );
};

// Function RavagedGame.R_Pawn_Native.StartCrouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void AR_Pawn_Native::eventStartCrouch ( float HeightAdjust )
{
	static UFunction* pFnStartCrouch = NULL;

	if ( ! pFnStartCrouch )
		pFnStartCrouch = (UFunction*) UObject::GObjObjects()->Data[ 85231 ];

	AR_Pawn_Native_eventStartCrouch_Parms StartCrouch_Parms;
	StartCrouch_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnStartCrouch, &StartCrouch_Parms, NULL );
};

// Function RavagedGame.R_Pawn_Native.EndCrouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void AR_Pawn_Native::eventEndCrouch ( float HeightAdjust )
{
	static UFunction* pFnEndCrouch = NULL;

	if ( ! pFnEndCrouch )
		pFnEndCrouch = (UFunction*) UObject::GObjObjects()->Data[ 85229 ];

	AR_Pawn_Native_eventEndCrouch_Parms EndCrouch_Parms;
	EndCrouch_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnEndCrouch, &EndCrouch_Parms, NULL );
};

// Function RavagedGame.R_Pawn_Native.SetMaxStepHeight
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// float                          NewMaxStepHeight               ( CPF_Parm )

void AR_Pawn_Native::SetMaxStepHeight ( float NewMaxStepHeight )
{
	static UFunction* pFnSetMaxStepHeight = NULL;

	if ( ! pFnSetMaxStepHeight )
		pFnSetMaxStepHeight = (UFunction*) UObject::GObjObjects()->Data[ 85227 ];

	AR_Pawn_Native_execSetMaxStepHeight_Parms SetMaxStepHeight_Parms;
	SetMaxStepHeight_Parms.NewMaxStepHeight = NewMaxStepHeight;

	pFnSetMaxStepHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaxStepHeight, &SetMaxStepHeight_Parms, NULL );

	pFnSetMaxStepHeight->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_Pawn_Native.NativePostRenderFor
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void AR_Pawn_Native::NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnNativePostRenderFor = NULL;

	if ( ! pFnNativePostRenderFor )
		pFnNativePostRenderFor = (UFunction*) UObject::GObjObjects()->Data[ 85222 ];

	AR_Pawn_Native_execNativePostRenderFor_Parms NativePostRenderFor_Parms;
	NativePostRenderFor_Parms.PC = PC;
	NativePostRenderFor_Parms.Canvas = Canvas;
	memcpy ( &NativePostRenderFor_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &NativePostRenderFor_Parms.CameraDir, &CameraDir, 0xC );

	pFnNativePostRenderFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativePostRenderFor, &NativePostRenderFor_Parms, NULL );

	pFnNativePostRenderFor->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_SoundNodePerspectiveSwitch.StartUpNode
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm | CPF_EditInline )
// int                            NodeIndex                      ( CPF_Parm )

void UR_SoundNodePerspectiveSwitch::eventStartUpNode ( class UAudioComponent* AC, int NodeIndex )
{
	static UFunction* pFnStartUpNode = NULL;

	if ( ! pFnStartUpNode )
		pFnStartUpNode = (UFunction*) UObject::GObjObjects()->Data[ 86664 ];

	UR_SoundNodePerspectiveSwitch_eventStartUpNode_Parms StartUpNode_Parms;
	StartUpNode_Parms.AC = AC;
	StartUpNode_Parms.NodeIndex = NodeIndex;

	this->ProcessEvent ( pFnStartUpNode, &StartUpNode_Parms, NULL );
};

// Function RavagedGame.R_SoundNodeWeapDistXFade.StartUpNode
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm | CPF_EditInline )
// float                          Dist                           ( CPF_Parm )
// unsigned char                  ActiveChildMask                ( CPF_Parm )
// float                          Vol1                           ( CPF_Parm )
// float                          Vol2                           ( CPF_Parm )

void UR_SoundNodeWeapDistXFade::eventStartUpNode ( class UAudioComponent* AC, float Dist, unsigned char ActiveChildMask, float Vol1, float Vol2 )
{
	static UFunction* pFnStartUpNode = NULL;

	if ( ! pFnStartUpNode )
		pFnStartUpNode = (UFunction*) UObject::GObjObjects()->Data[ 86672 ];

	UR_SoundNodeWeapDistXFade_eventStartUpNode_Parms StartUpNode_Parms;
	StartUpNode_Parms.AC = AC;
	StartUpNode_Parms.Dist = Dist;
	StartUpNode_Parms.ActiveChildMask = ActiveChildMask;
	StartUpNode_Parms.Vol1 = Vol1;
	StartUpNode_Parms.Vol2 = Vol2;

	this->ProcessEvent ( pFnStartUpNode, &StartUpNode_Parms, NULL );
};

// Function RavagedGame.R_SoundNodeWeapDistXFade.ShowOwner
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAudioComponent*         act1                           ( CPF_Parm | CPF_EditInline )
// class AActor*                  act2                           ( CPF_Parm )

void UR_SoundNodeWeapDistXFade::eventShowOwner ( class UAudioComponent* act1, class AActor* act2 )
{
	static UFunction* pFnShowOwner = NULL;

	if ( ! pFnShowOwner )
		pFnShowOwner = (UFunction*) UObject::GObjObjects()->Data[ 86669 ];

	UR_SoundNodeWeapDistXFade_eventShowOwner_Parms ShowOwner_Parms;
	ShowOwner_Parms.act1 = act1;
	ShowOwner_Parms.act2 = act2;

	this->ProcessEvent ( pFnShowOwner, &ShowOwner_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Engine.GetLocalForce
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UR_Vehicle_Engine::GetLocalForce ( )
{
	static UFunction* pFnGetLocalForce = NULL;

	if ( ! pFnGetLocalForce )
		pFnGetLocalForce = (UFunction*) UObject::GObjObjects()->Data[ 87429 ];

	UR_Vehicle_Engine_execGetLocalForce_Parms GetLocalForce_Parms;

	this->ProcessEvent ( pFnGetLocalForce, &GetLocalForce_Parms, NULL );

	return GetLocalForce_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle_Engine.GetLocalTorque
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UR_Vehicle_Engine::GetLocalTorque ( )
{
	static UFunction* pFnGetLocalTorque = NULL;

	if ( ! pFnGetLocalTorque )
		pFnGetLocalTorque = (UFunction*) UObject::GObjObjects()->Data[ 87426 ];

	UR_Vehicle_Engine_execGetLocalTorque_Parms GetLocalTorque_Parms;

	this->ProcessEvent ( pFnGetLocalTorque, &GetLocalTorque_Parms, NULL );

	return GetLocalTorque_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle_Engine.NativeGetLocalTorque
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UR_Vehicle_Engine::NativeGetLocalTorque ( )
{
	static UFunction* pFnNativeGetLocalTorque = NULL;

	if ( ! pFnNativeGetLocalTorque )
		pFnNativeGetLocalTorque = (UFunction*) UObject::GObjObjects()->Data[ 87424 ];

	UR_Vehicle_Engine_execNativeGetLocalTorque_Parms NativeGetLocalTorque_Parms;

	pFnNativeGetLocalTorque->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeGetLocalTorque, &NativeGetLocalTorque_Parms, NULL );

	pFnNativeGetLocalTorque->FunctionFlags |= 0x400;

	return NativeGetLocalTorque_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle_Engine.NativeUpdateEngine
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void UR_Vehicle_Engine::NativeUpdateEngine ( )
{
	static UFunction* pFnNativeUpdateEngine = NULL;

	if ( ! pFnNativeUpdateEngine )
		pFnNativeUpdateEngine = (UFunction*) UObject::GObjObjects()->Data[ 87423 ];

	UR_Vehicle_Engine_execNativeUpdateEngine_Parms NativeUpdateEngine_Parms;

	pFnNativeUpdateEngine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeUpdateEngine, &NativeUpdateEngine_Parms, NULL );

	pFnNativeUpdateEngine->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_Vehicle_Engine.NativeApplyInputs
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// float                          InThrottle                     ( CPF_Parm )
// float                          InX                            ( CPF_Parm )
// float                          InY                            ( CPF_Parm )
// float                          DT                             ( CPF_Parm )

void UR_Vehicle_Engine::NativeApplyInputs ( float InThrottle, float InX, float InY, float DT )
{
	static UFunction* pFnNativeApplyInputs = NULL;

	if ( ! pFnNativeApplyInputs )
		pFnNativeApplyInputs = (UFunction*) UObject::GObjObjects()->Data[ 87418 ];

	UR_Vehicle_Engine_execNativeApplyInputs_Parms NativeApplyInputs_Parms;
	NativeApplyInputs_Parms.InThrottle = InThrottle;
	NativeApplyInputs_Parms.InX = InX;
	NativeApplyInputs_Parms.InY = InY;
	NativeApplyInputs_Parms.DT = DT;

	pFnNativeApplyInputs->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeApplyInputs, &NativeApplyInputs_Parms, NULL );

	pFnNativeApplyInputs->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_Vehicle_Engine.InitEngine
// [0x00020102] 
// Parameters infos:

void UR_Vehicle_Engine::InitEngine ( )
{
	static UFunction* pFnInitEngine = NULL;

	if ( ! pFnInitEngine )
		pFnInitEngine = (UFunction*) UObject::GObjObjects()->Data[ 87417 ];

	UR_Vehicle_Engine_execInitEngine_Parms InitEngine_Parms;

	this->ProcessEvent ( pFnInitEngine, &InitEngine_Parms, NULL );
};

// Function RavagedGame.R_VehicleSim_Heli.SetEnginesIdled
// [0x00020102] 
// Parameters infos:
// unsigned long                  bIdledState                    ( CPF_Parm )

void UR_VehicleSim_Heli::SetEnginesIdled ( unsigned long bIdledState )
{
	static UFunction* pFnSetEnginesIdled = NULL;

	if ( ! pFnSetEnginesIdled )
		pFnSetEnginesIdled = (UFunction*) UObject::GObjObjects()->Data[ 87440 ];

	UR_VehicleSim_Heli_execSetEnginesIdled_Parms SetEnginesIdled_Parms;
	SetEnginesIdled_Parms.bIdledState = bIdledState;

	this->ProcessEvent ( pFnSetEnginesIdled, &SetEnginesIdled_Parms, NULL );
};

// Function RavagedGame.R_VehicleSim_Heli.InitEngines
// [0x00020102] 
// Parameters infos:

void UR_VehicleSim_Heli::InitEngines ( )
{
	static UFunction* pFnInitEngines = NULL;

	if ( ! pFnInitEngines )
		pFnInitEngines = (UFunction*) UObject::GObjObjects()->Data[ 87438 ];

	UR_VehicleSim_Heli_execInitEngines_Parms InitEngines_Parms;

	this->ProcessEvent ( pFnInitEngines, &InitEngines_Parms, NULL );
};

// Function RavagedGame.R_VehicleSimCar.ThrowDriver
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class ASVehicle*               Vehicle                        ( CPF_Parm )

void UR_VehicleSimCar::eventThrowDriver ( class ASVehicle* Vehicle )
{
	static UFunction* pFnThrowDriver = NULL;

	if ( ! pFnThrowDriver )
		pFnThrowDriver = (UFunction*) UObject::GObjObjects()->Data[ 87586 ];

	UR_VehicleSimCar_eventThrowDriver_Parms ThrowDriver_Parms;
	ThrowDriver_Parms.Vehicle = Vehicle;

	this->ProcessEvent ( pFnThrowDriver, &ThrowDriver_Parms, NULL );
};

// Function RavagedGame.R_VehicleSimCar.UpdateLeanInScript
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class AUDKVehicleBase*         Vehicle                        ( CPF_Parm )
// float                          DT                             ( CPF_Parm )

void UR_VehicleSimCar::eventUpdateLeanInScript ( class AUDKVehicleBase* Vehicle, float DT )
{
	static UFunction* pFnUpdateLeanInScript = NULL;

	if ( ! pFnUpdateLeanInScript )
		pFnUpdateLeanInScript = (UFunction*) UObject::GObjObjects()->Data[ 87574 ];

	UR_VehicleSimCar_eventUpdateLeanInScript_Parms UpdateLeanInScript_Parms;
	UpdateLeanInScript_Parms.Vehicle = Vehicle;
	UpdateLeanInScript_Parms.DT = DT;

	this->ProcessEvent ( pFnUpdateLeanInScript, &UpdateLeanInScript_Parms, NULL );
};

// Function RavagedGame.R_VehicleSimCar.UpdateLean
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class AUDKVehicle*             Vehicle                        ( CPF_Parm )
// float                          DT                             ( CPF_Parm )

void UR_VehicleSimCar::UpdateLean ( class AUDKVehicle* Vehicle, float DT )
{
	static UFunction* pFnUpdateLean = NULL;

	if ( ! pFnUpdateLean )
		pFnUpdateLean = (UFunction*) UObject::GObjObjects()->Data[ 87571 ];

	UR_VehicleSimCar_execUpdateLean_Parms UpdateLean_Parms;
	UpdateLean_Parms.Vehicle = Vehicle;
	UpdateLean_Parms.DT = DT;

	pFnUpdateLean->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateLean, &UpdateLean_Parms, NULL );

	pFnUpdateLean->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_VehicleSimCar.ChassisTouchingUpsideDown
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class ASVehicle*               Vehicle                        ( CPF_Parm )

void UR_VehicleSimCar::eventChassisTouchingUpsideDown ( class ASVehicle* Vehicle )
{
	static UFunction* pFnChassisTouchingUpsideDown = NULL;

	if ( ! pFnChassisTouchingUpsideDown )
		pFnChassisTouchingUpsideDown = (UFunction*) UObject::GObjObjects()->Data[ 87569 ];

	UR_VehicleSimCar_eventChassisTouchingUpsideDown_Parms ChassisTouchingUpsideDown_Parms;
	ChassisTouchingUpsideDown_Parms.Vehicle = Vehicle;

	this->ProcessEvent ( pFnChassisTouchingUpsideDown, &ChassisTouchingUpsideDown_Parms, NULL );
};

// Function RavagedGame.R_VehicleSimCar.VehicleLanded
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class ASVehicle*               Vehicle                        ( CPF_Parm )
// float                          distanceTraveled               ( CPF_Parm )

void UR_VehicleSimCar::eventVehicleLanded ( class ASVehicle* Vehicle, float distanceTraveled )
{
	static UFunction* pFnVehicleLanded = NULL;

	if ( ! pFnVehicleLanded )
		pFnVehicleLanded = (UFunction*) UObject::GObjObjects()->Data[ 87565 ];

	UR_VehicleSimCar_eventVehicleLanded_Parms VehicleLanded_Parms;
	VehicleLanded_Parms.Vehicle = Vehicle;
	VehicleLanded_Parms.distanceTraveled = distanceTraveled;

	this->ProcessEvent ( pFnVehicleLanded, &VehicleLanded_Parms, NULL );
};

// Function RavagedGame.R_AnimBlendByVehicle.CheckForHandIKSockets
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class AVehicle*                mainVeh                        ( CPF_Parm )
// int                            CurSeatIdx                     ( CPF_Parm )

void UR_AnimBlendByVehicle::eventCheckForHandIKSockets ( class AVehicle* mainVeh, int CurSeatIdx )
{
	static UFunction* pFnCheckForHandIKSockets = NULL;

	if ( ! pFnCheckForHandIKSockets )
		pFnCheckForHandIKSockets = (UFunction*) UObject::GObjObjects()->Data[ 78271 ];

	UR_AnimBlendByVehicle_eventCheckForHandIKSockets_Parms CheckForHandIKSockets_Parms;
	CheckForHandIKSockets_Parms.mainVeh = mainVeh;
	CheckForHandIKSockets_Parms.CurSeatIdx = CurSeatIdx;

	this->ProcessEvent ( pFnCheckForHandIKSockets, &CheckForHandIKSockets_Parms, NULL );
};

// Function RavagedGame.R_AnimBlendByVehicle.GetSeatAnimNames
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class AVehicle*                mainVeh                        ( CPF_Parm )
// int                            CurSeatIdx                     ( CPF_Parm )

void UR_AnimBlendByVehicle::eventGetSeatAnimNames ( class AVehicle* mainVeh, int CurSeatIdx )
{
	static UFunction* pFnGetSeatAnimNames = NULL;

	if ( ! pFnGetSeatAnimNames )
		pFnGetSeatAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 78268 ];

	UR_AnimBlendByVehicle_eventGetSeatAnimNames_Parms GetSeatAnimNames_Parms;
	GetSeatAnimNames_Parms.mainVeh = mainVeh;
	GetSeatAnimNames_Parms.CurSeatIdx = CurSeatIdx;

	this->ProcessEvent ( pFnGetSeatAnimNames, &GetSeatAnimNames_Parms, NULL );
};

// Function RavagedGame.R_AnimBlendByVehicle.UpdateInScript
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void UR_AnimBlendByVehicle::eventUpdateInScript ( float DT )
{
	static UFunction* pFnUpdateInScript = NULL;

	if ( ! pFnUpdateInScript )
		pFnUpdateInScript = (UFunction*) UObject::GObjObjects()->Data[ 78266 ];

	UR_AnimBlendByVehicle_eventUpdateInScript_Parms UpdateInScript_Parms;
	UpdateInScript_Parms.DT = DT;

	this->ProcessEvent ( pFnUpdateInScript, &UpdateInScript_Parms, NULL );
};

// Function RavagedGame.R_AnimBlendByVehicle.HandIKEnabled
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bUsingIK                       ( CPF_Parm )

void UR_AnimBlendByVehicle::eventHandIKEnabled ( unsigned long bUsingIK )
{
	static UFunction* pFnHandIKEnabled = NULL;

	if ( ! pFnHandIKEnabled )
		pFnHandIKEnabled = (UFunction*) UObject::GObjObjects()->Data[ 78264 ];

	UR_AnimBlendByVehicle_eventHandIKEnabled_Parms HandIKEnabled_Parms;
	HandIKEnabled_Parms.bUsingIK = bUsingIK;

	this->ProcessEvent ( pFnHandIKEnabled, &HandIKEnabled_Parms, NULL );
};

// Function RavagedGame.R_AnimBlendByVehicle.UpdateVehicleState
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UR_AnimBlendByVehicle::UpdateVehicleState ( )
{
	static UFunction* pFnUpdateVehicleState = NULL;

	if ( ! pFnUpdateVehicleState )
		pFnUpdateVehicleState = (UFunction*) UObject::GObjObjects()->Data[ 78263 ];

	UR_AnimBlendByVehicle_execUpdateVehicleState_Parms UpdateVehicleState_Parms;

	pFnUpdateVehicleState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateVehicleState, &UpdateVehicleState_Parms, NULL );

	pFnUpdateVehicleState->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_AnimNodeBlendByLadder.NativeUpdateNode
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void UR_AnimNodeBlendByLadder::NativeUpdateNode ( float DT )
{
	static UFunction* pFnNativeUpdateNode = NULL;

	if ( ! pFnNativeUpdateNode )
		pFnNativeUpdateNode = (UFunction*) UObject::GObjObjects()->Data[ 78364 ];

	UR_AnimNodeBlendByLadder_execNativeUpdateNode_Parms NativeUpdateNode_Parms;
	NativeUpdateNode_Parms.DT = DT;

	pFnNativeUpdateNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeUpdateNode, &NativeUpdateNode_Parms, NULL );

	pFnNativeUpdateNode->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_AnimNodeBlendByLadder.UpdateInScript
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void UR_AnimNodeBlendByLadder::eventUpdateInScript ( float DT )
{
	static UFunction* pFnUpdateInScript = NULL;

	if ( ! pFnUpdateInScript )
		pFnUpdateInScript = (UFunction*) UObject::GObjObjects()->Data[ 78355 ];

	UR_AnimNodeBlendByLadder_eventUpdateInScript_Parms UpdateInScript_Parms;
	UpdateInScript_Parms.DT = DT;

	this->ProcessEvent ( pFnUpdateInScript, &UpdateInScript_Parms, NULL );
};

// Function RavagedGame.R_AnimNodeBlendByLadder.InitNewLadder
// [0x00020102] 
// Parameters infos:
// class AR_LadderVolume*         LV                             ( CPF_Parm )

void UR_AnimNodeBlendByLadder::InitNewLadder ( class AR_LadderVolume* LV )
{
	static UFunction* pFnInitNewLadder = NULL;

	if ( ! pFnInitNewLadder )
		pFnInitNewLadder = (UFunction*) UObject::GObjObjects()->Data[ 78353 ];

	UR_AnimNodeBlendByLadder_execInitNewLadder_Parms InitNewLadder_Parms;
	InitNewLadder_Parms.LV = LV;

	this->ProcessEvent ( pFnInitNewLadder, &InitNewLadder_Parms, NULL );
};

// Function RavagedGame.R_AnimNodeBlendBySeatLean.GetAnimNamesFromSeat
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void UR_AnimNodeBlendBySeatLean::eventGetAnimNamesFromSeat ( )
{
	static UFunction* pFnGetAnimNamesFromSeat = NULL;

	if ( ! pFnGetAnimNamesFromSeat )
		pFnGetAnimNamesFromSeat = (UFunction*) UObject::GObjObjects()->Data[ 78396 ];

	UR_AnimNodeBlendBySeatLean_eventGetAnimNamesFromSeat_Parms GetAnimNamesFromSeat_Parms;

	this->ProcessEvent ( pFnGetAnimNamesFromSeat, &GetAnimNamesFromSeat_Parms, NULL );
};

// Function RavagedGame.R_AnimNodeBlendBySeatLean.OnCeaseRelevant
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UR_AnimNodeBlendBySeatLean::eventOnCeaseRelevant ( )
{
	static UFunction* pFnOnCeaseRelevant = NULL;

	if ( ! pFnOnCeaseRelevant )
		pFnOnCeaseRelevant = (UFunction*) UObject::GObjObjects()->Data[ 78395 ];

	UR_AnimNodeBlendBySeatLean_eventOnCeaseRelevant_Parms OnCeaseRelevant_Parms;

	this->ProcessEvent ( pFnOnCeaseRelevant, &OnCeaseRelevant_Parms, NULL );
};

// Function RavagedGame.R_AnimNodeBlendBySeatLean.OnBecomeRelevant
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UR_AnimNodeBlendBySeatLean::eventOnBecomeRelevant ( )
{
	static UFunction* pFnOnBecomeRelevant = NULL;

	if ( ! pFnOnBecomeRelevant )
		pFnOnBecomeRelevant = (UFunction*) UObject::GObjObjects()->Data[ 78394 ];

	UR_AnimNodeBlendBySeatLean_eventOnBecomeRelevant_Parms OnBecomeRelevant_Parms;

	this->ProcessEvent ( pFnOnBecomeRelevant, &OnBecomeRelevant_Parms, NULL );
};

// Function RavagedGame.R_AnimNodeBlendBySeatLean.OnInit
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UR_AnimNodeBlendBySeatLean::eventOnInit ( )
{
	static UFunction* pFnOnInit = NULL;

	if ( ! pFnOnInit )
		pFnOnInit = (UFunction*) UObject::GObjObjects()->Data[ 78393 ];

	UR_AnimNodeBlendBySeatLean_eventOnInit_Parms OnInit_Parms;

	this->ProcessEvent ( pFnOnInit, &OnInit_Parms, NULL );
};

// Function RavagedGame.R_AnimNodeBlendBySeatLean.SetChildAnimsPlaying
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bPlayAnims                     ( CPF_Parm )

void UR_AnimNodeBlendBySeatLean::eventSetChildAnimsPlaying ( unsigned long bPlayAnims )
{
	static UFunction* pFnSetChildAnimsPlaying = NULL;

	if ( ! pFnSetChildAnimsPlaying )
		pFnSetChildAnimsPlaying = (UFunction*) UObject::GObjObjects()->Data[ 78390 ];

	UR_AnimNodeBlendBySeatLean_eventSetChildAnimsPlaying_Parms SetChildAnimsPlaying_Parms;
	SetChildAnimsPlaying_Parms.bPlayAnims = bPlayAnims;

	this->ProcessEvent ( pFnSetChildAnimsPlaying, &SetChildAnimsPlaying_Parms, NULL );
};

// Function RavagedGame.R_AnimNodeBlendBySeatLean.UpdateInScript
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void UR_AnimNodeBlendBySeatLean::eventUpdateInScript ( float DT )
{
	static UFunction* pFnUpdateInScript = NULL;

	if ( ! pFnUpdateInScript )
		pFnUpdateInScript = (UFunction*) UObject::GObjObjects()->Data[ 78376 ];

	UR_AnimNodeBlendBySeatLean_eventUpdateInScript_Parms UpdateInScript_Parms;
	UpdateInScript_Parms.DT = DT;

	this->ProcessEvent ( pFnUpdateInScript, &UpdateInScript_Parms, NULL );
};

// Function RavagedGame.R_AnimNodeBlendBySeatLean.UpdateVehicleLean
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void UR_AnimNodeBlendBySeatLean::UpdateVehicleLean ( float DT )
{
	static UFunction* pFnUpdateVehicleLean = NULL;

	if ( ! pFnUpdateVehicleLean )
		pFnUpdateVehicleLean = (UFunction*) UObject::GObjObjects()->Data[ 78374 ];

	UR_AnimNodeBlendBySeatLean_execUpdateVehicleLean_Parms UpdateVehicleLean_Parms;
	UpdateVehicleLean_Parms.DT = DT;

	pFnUpdateVehicleLean->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateVehicleLean, &UpdateVehicleLean_Parms, NULL );

	pFnUpdateVehicleLean->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_AnimNodeBlendBySeatSpringSim.ScriptUpdateChildrenFromPosition
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void UR_AnimNodeBlendBySeatSpringSim::eventScriptUpdateChildrenFromPosition ( )
{
	static UFunction* pFnScriptUpdateChildrenFromPosition = NULL;

	if ( ! pFnScriptUpdateChildrenFromPosition )
		pFnScriptUpdateChildrenFromPosition = (UFunction*) UObject::GObjObjects()->Data[ 78429 ];

	UR_AnimNodeBlendBySeatSpringSim_eventScriptUpdateChildrenFromPosition_Parms ScriptUpdateChildrenFromPosition_Parms;

	this->ProcessEvent ( pFnScriptUpdateChildrenFromPosition, &ScriptUpdateChildrenFromPosition_Parms, NULL );
};

// Function RavagedGame.R_AnimNodeBlendBySeatSpringSim.InitSpringSystem
// [0x00020102] 
// Parameters infos:

void UR_AnimNodeBlendBySeatSpringSim::InitSpringSystem ( )
{
	static UFunction* pFnInitSpringSystem = NULL;

	if ( ! pFnInitSpringSystem )
		pFnInitSpringSystem = (UFunction*) UObject::GObjObjects()->Data[ 78428 ];

	UR_AnimNodeBlendBySeatSpringSim_execInitSpringSystem_Parms InitSpringSystem_Parms;

	this->ProcessEvent ( pFnInitSpringSystem, &InitSpringSystem_Parms, NULL );
};

// Function RavagedGame.R_AnimNodeBlendBySeatSpringSim.CalcForces
// [0x00820102] 
// Parameters infos:
// struct FVector                 localAccelFromVeh              ( CPF_Parm )
// float                          DT                             ( CPF_Parm )

void UR_AnimNodeBlendBySeatSpringSim::CalcForces ( struct FVector localAccelFromVeh, float DT )
{
	static UFunction* pFnCalcForces = NULL;

	if ( ! pFnCalcForces )
		pFnCalcForces = (UFunction*) UObject::GObjObjects()->Data[ 78418 ];

	UR_AnimNodeBlendBySeatSpringSim_execCalcForces_Parms CalcForces_Parms;
	memcpy ( &CalcForces_Parms.localAccelFromVeh, &localAccelFromVeh, 0xC );
	CalcForces_Parms.DT = DT;

	this->ProcessEvent ( pFnCalcForces, &CalcForces_Parms, NULL );
};

// Function RavagedGame.R_AnimNodeBlendBySeatSpringSim.UpdateInScript
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void UR_AnimNodeBlendBySeatSpringSim::eventUpdateInScript ( float DT )
{
	static UFunction* pFnUpdateInScript = NULL;

	if ( ! pFnUpdateInScript )
		pFnUpdateInScript = (UFunction*) UObject::GObjObjects()->Data[ 78414 ];

	UR_AnimNodeBlendBySeatSpringSim_eventUpdateInScript_Parms UpdateInScript_Parms;
	UpdateInScript_Parms.DT = DT;

	this->ProcessEvent ( pFnUpdateInScript, &UpdateInScript_Parms, NULL );
};

// Function RavagedGame.R_AnimNodeBlendBySeatSpringSim.UpdateChildrenFromPosition
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void UR_AnimNodeBlendBySeatSpringSim::UpdateChildrenFromPosition ( )
{
	static UFunction* pFnUpdateChildrenFromPosition = NULL;

	if ( ! pFnUpdateChildrenFromPosition )
		pFnUpdateChildrenFromPosition = (UFunction*) UObject::GObjObjects()->Data[ 78413 ];

	UR_AnimNodeBlendBySeatSpringSim_execUpdateChildrenFromPosition_Parms UpdateChildrenFromPosition_Parms;

	pFnUpdateChildrenFromPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateChildrenFromPosition, &UpdateChildrenFromPosition_Parms, NULL );

	pFnUpdateChildrenFromPosition->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_AnimNodeBlendBySeatSpringSim.NativeCalcForces
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 localAccelFromVeh              ( CPF_Parm )
// float                          DT                             ( CPF_Parm )

void UR_AnimNodeBlendBySeatSpringSim::NativeCalcForces ( struct FVector localAccelFromVeh, float DT )
{
	static UFunction* pFnNativeCalcForces = NULL;

	if ( ! pFnNativeCalcForces )
		pFnNativeCalcForces = (UFunction*) UObject::GObjObjects()->Data[ 78410 ];

	UR_AnimNodeBlendBySeatSpringSim_execNativeCalcForces_Parms NativeCalcForces_Parms;
	memcpy ( &NativeCalcForces_Parms.localAccelFromVeh, &localAccelFromVeh, 0xC );
	NativeCalcForces_Parms.DT = DT;

	pFnNativeCalcForces->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeCalcForces, &NativeCalcForces_Parms, NULL );

	pFnNativeCalcForces->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_AnimNodeBlendBySeatSpringSim.NativeUpdateNode
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void UR_AnimNodeBlendBySeatSpringSim::NativeUpdateNode ( float DT )
{
	static UFunction* pFnNativeUpdateNode = NULL;

	if ( ! pFnNativeUpdateNode )
		pFnNativeUpdateNode = (UFunction*) UObject::GObjObjects()->Data[ 78408 ];

	UR_AnimNodeBlendBySeatSpringSim_execNativeUpdateNode_Parms NativeUpdateNode_Parms;
	NativeUpdateNode_Parms.DT = DT;

	pFnNativeUpdateNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeUpdateNode, &NativeUpdateNode_Parms, NULL );

	pFnNativeUpdateNode->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_AnimNodeBlendBySeatTurret.InitTurretConstraints
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AR_Vehicle*              veh                            ( CPF_Parm )
// int                            CurSeatIdx                     ( CPF_Parm )

void UR_AnimNodeBlendBySeatTurret::eventInitTurretConstraints ( class AR_Vehicle* veh, int CurSeatIdx )
{
	static UFunction* pFnInitTurretConstraints = NULL;

	if ( ! pFnInitTurretConstraints )
		pFnInitTurretConstraints = (UFunction*) UObject::GObjObjects()->Data[ 78473 ];

	UR_AnimNodeBlendBySeatTurret_eventInitTurretConstraints_Parms InitTurretConstraints_Parms;
	InitTurretConstraints_Parms.veh = veh;
	InitTurretConstraints_Parms.CurSeatIdx = CurSeatIdx;

	this->ProcessEvent ( pFnInitTurretConstraints, &InitTurretConstraints_Parms, NULL );
};

// Function RavagedGame.R_AnimNodeBlendBySeatTurret.Update9PoseTurret
// [0x00820102] 
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void UR_AnimNodeBlendBySeatTurret::Update9PoseTurret ( float DT )
{
	static UFunction* pFnUpdate9PoseTurret = NULL;

	if ( ! pFnUpdate9PoseTurret )
		pFnUpdate9PoseTurret = (UFunction*) UObject::GObjObjects()->Data[ 78464 ];

	UR_AnimNodeBlendBySeatTurret_execUpdate9PoseTurret_Parms Update9PoseTurret_Parms;
	Update9PoseTurret_Parms.DT = DT;

	this->ProcessEvent ( pFnUpdate9PoseTurret, &Update9PoseTurret_Parms, NULL );
};

// Function RavagedGame.R_AnimNodeBlendBySeatTurret.UpdateHorizontalTurret
// [0x00820102] 
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void UR_AnimNodeBlendBySeatTurret::UpdateHorizontalTurret ( float DT )
{
	static UFunction* pFnUpdateHorizontalTurret = NULL;

	if ( ! pFnUpdateHorizontalTurret )
		pFnUpdateHorizontalTurret = (UFunction*) UObject::GObjObjects()->Data[ 78460 ];

	UR_AnimNodeBlendBySeatTurret_execUpdateHorizontalTurret_Parms UpdateHorizontalTurret_Parms;
	UpdateHorizontalTurret_Parms.DT = DT;

	this->ProcessEvent ( pFnUpdateHorizontalTurret, &UpdateHorizontalTurret_Parms, NULL );
};

// Function RavagedGame.R_AnimNodeBlendBySeatTurret.UpdateInScript
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void UR_AnimNodeBlendBySeatTurret::eventUpdateInScript ( float DT )
{
	static UFunction* pFnUpdateInScript = NULL;

	if ( ! pFnUpdateInScript )
		pFnUpdateInScript = (UFunction*) UObject::GObjObjects()->Data[ 78458 ];

	UR_AnimNodeBlendBySeatTurret_eventUpdateInScript_Parms UpdateInScript_Parms;
	UpdateInScript_Parms.DT = DT;

	this->ProcessEvent ( pFnUpdateInScript, &UpdateInScript_Parms, NULL );
};

// Function RavagedGame.R_AnimNodeBlendBySeatTurret.NormalizeTurretAngle
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ang                            ( CPF_Parm )

int UR_AnimNodeBlendBySeatTurret::NormalizeTurretAngle ( int ang )
{
	static UFunction* pFnNormalizeTurretAngle = NULL;

	if ( ! pFnNormalizeTurretAngle )
		pFnNormalizeTurretAngle = (UFunction*) UObject::GObjObjects()->Data[ 78455 ];

	UR_AnimNodeBlendBySeatTurret_execNormalizeTurretAngle_Parms NormalizeTurretAngle_Parms;
	NormalizeTurretAngle_Parms.ang = ang;

	this->ProcessEvent ( pFnNormalizeTurretAngle, &NormalizeTurretAngle_Parms, NULL );

	return NormalizeTurretAngle_Parms.ReturnValue;
};

// Function RavagedGame.R_AnimNodeBlendBySeatTurret.NativeUpdateHorizontalTurret
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void UR_AnimNodeBlendBySeatTurret::NativeUpdateHorizontalTurret ( float DT )
{
	static UFunction* pFnNativeUpdateHorizontalTurret = NULL;

	if ( ! pFnNativeUpdateHorizontalTurret )
		pFnNativeUpdateHorizontalTurret = (UFunction*) UObject::GObjObjects()->Data[ 78453 ];

	UR_AnimNodeBlendBySeatTurret_execNativeUpdateHorizontalTurret_Parms NativeUpdateHorizontalTurret_Parms;
	NativeUpdateHorizontalTurret_Parms.DT = DT;

	pFnNativeUpdateHorizontalTurret->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeUpdateHorizontalTurret, &NativeUpdateHorizontalTurret_Parms, NULL );

	pFnNativeUpdateHorizontalTurret->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_AnimNodeBlendBySeatTurret.NativeUpdate9PoseTurret
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void UR_AnimNodeBlendBySeatTurret::NativeUpdate9PoseTurret ( float DT )
{
	static UFunction* pFnNativeUpdate9PoseTurret = NULL;

	if ( ! pFnNativeUpdate9PoseTurret )
		pFnNativeUpdate9PoseTurret = (UFunction*) UObject::GObjObjects()->Data[ 78451 ];

	UR_AnimNodeBlendBySeatTurret_execNativeUpdate9PoseTurret_Parms NativeUpdate9PoseTurret_Parms;
	NativeUpdate9PoseTurret_Parms.DT = DT;

	pFnNativeUpdate9PoseTurret->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeUpdate9PoseTurret, &NativeUpdate9PoseTurret_Parms, NULL );

	pFnNativeUpdate9PoseTurret->FunctionFlags |= 0x400;
};

// Function RavagedGame.R_AnimNodeBlendBySeatTurret.NativeNormalizeTurretAngle
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ang                            ( CPF_Parm )

int UR_AnimNodeBlendBySeatTurret::NativeNormalizeTurretAngle ( int ang )
{
	static UFunction* pFnNativeNormalizeTurretAngle = NULL;

	if ( ! pFnNativeNormalizeTurretAngle )
		pFnNativeNormalizeTurretAngle = (UFunction*) UObject::GObjObjects()->Data[ 78448 ];

	UR_AnimNodeBlendBySeatTurret_execNativeNormalizeTurretAngle_Parms NativeNormalizeTurretAngle_Parms;
	NativeNormalizeTurretAngle_Parms.ang = ang;

	pFnNativeNormalizeTurretAngle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeNormalizeTurretAngle, &NativeNormalizeTurretAngle_Parms, NULL );

	pFnNativeNormalizeTurretAngle->FunctionFlags |= 0x400;

	return NativeNormalizeTurretAngle_Parms.ReturnValue;
};

// Function RavagedGame.R_SkelControlFollowBone.FollowBoneInScript
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// int                            BoneID                         ( CPF_Parm )
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void UR_SkelControlFollowBone::eventFollowBoneInScript ( int BoneID, class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnFollowBoneInScript = NULL;

	if ( ! pFnFollowBoneInScript )
		pFnFollowBoneInScript = (UFunction*) UObject::GObjObjects()->Data[ 86645 ];

	UR_SkelControlFollowBone_eventFollowBoneInScript_Parms FollowBoneInScript_Parms;
	FollowBoneInScript_Parms.BoneID = BoneID;
	FollowBoneInScript_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnFollowBoneInScript, &FollowBoneInScript_Parms, NULL );
};

// Function RavagedGame.R_SkelControlFollowBone.InitBones
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void UR_SkelControlFollowBone::eventInitBones ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnInitBones = NULL;

	if ( ! pFnInitBones )
		pFnInitBones = (UFunction*) UObject::GObjObjects()->Data[ 86643 ];

	UR_SkelControlFollowBone_eventInitBones_Parms InitBones_Parms;
	InitBones_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnInitBones, &InitBones_Parms, NULL );
};

// Function RavagedGame.R_SkelControlHandlebars.InitAndGetSimObject
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void UR_SkelControlHandlebars::eventInitAndGetSimObject ( )
{
	static UFunction* pFnInitAndGetSimObject = NULL;

	if ( ! pFnInitAndGetSimObject )
		pFnInitAndGetSimObject = (UFunction*) UObject::GObjObjects()->Data[ 86657 ];

	UR_SkelControlHandlebars_eventInitAndGetSimObject_Parms InitAndGetSimObject_Parms;

	this->ProcessEvent ( pFnInitAndGetSimObject, &InitAndGetSimObject_Parms, NULL );
};

// Function RavagedGame.R_Achievements.Initialize
// [0x00020000] 
// Parameters infos:

void UR_Achievements::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 78052 ];

	UR_Achievements_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function RavagedGame.R_AlienFxManager.FindNextState
// [0x00020002] 
// Parameters infos:

void AR_AlienFxManager::FindNextState ( )
{
	static UFunction* pFnFindNextState = NULL;

	if ( ! pFnFindNextState )
		pFnFindNextState = (UFunction*) UObject::GObjObjects()->Data[ 78186 ];

	AR_AlienFxManager_execFindNextState_Parms FindNextState_Parms;

	this->ProcessEvent ( pFnFindNextState, &FindNextState_Parms, NULL );
};

// Function RavagedGame.R_AlienFxManager.Tick
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void AR_AlienFxManager::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 78133 ];

	AR_AlienFxManager_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function RavagedGame.R_AlienFxManager.ChangeState
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  NewState                       ( CPF_Parm )
// unsigned long                  bForceNewState                 ( CPF_OptionalParm | CPF_Parm )

bool AR_AlienFxManager::ChangeState ( unsigned char NewState, unsigned long bForceNewState )
{
	static UFunction* pFnChangeState = NULL;

	if ( ! pFnChangeState )
		pFnChangeState = (UFunction*) UObject::GObjObjects()->Data[ 78124 ];

	AR_AlienFxManager_execChangeState_Parms ChangeState_Parms;
	ChangeState_Parms.NewState = NewState;
	ChangeState_Parms.bForceNewState = bForceNewState;

	this->ProcessEvent ( pFnChangeState, &ChangeState_Parms, NULL );

	return ChangeState_Parms.ReturnValue;
};

// Function RavagedGame.R_AlienFxManager.GetOwner
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_AlienFxManager::GetOwner ( )
{
	static UFunction* pFnGetOwner = NULL;

	if ( ! pFnGetOwner )
		pFnGetOwner = (UFunction*) UObject::GObjObjects()->Data[ 78120 ];

	AR_AlienFxManager_execGetOwner_Parms GetOwner_Parms;

	this->ProcessEvent ( pFnGetOwner, &GetOwner_Parms, NULL );

	return GetOwner_Parms.ReturnValue;
};

// Function RavagedGame.R_AlienFxManager.StartLightChase
// [0x00020002] 
// Parameters infos:

void AR_AlienFxManager::StartLightChase ( )
{
	static UFunction* pFnStartLightChase = NULL;

	if ( ! pFnStartLightChase )
		pFnStartLightChase = (UFunction*) UObject::GObjObjects()->Data[ 78116 ];

	AR_AlienFxManager_execStartLightChase_Parms StartLightChase_Parms;

	this->ProcessEvent ( pFnStartLightChase, &StartLightChase_Parms, NULL );
};

// Function RavagedGame.R_AlienFxManager.NewDeviceLights
// [0x00820002] 
// Parameters infos:
// struct FDeviceLights           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            numLights                      ( CPF_Parm )

struct FDeviceLights AR_AlienFxManager::NewDeviceLights ( int numLights )
{
	static UFunction* pFnNewDeviceLights = NULL;

	if ( ! pFnNewDeviceLights )
		pFnNewDeviceLights = (UFunction*) UObject::GObjObjects()->Data[ 78110 ];

	AR_AlienFxManager_execNewDeviceLights_Parms NewDeviceLights_Parms;
	NewDeviceLights_Parms.numLights = numLights;

	this->ProcessEvent ( pFnNewDeviceLights, &NewDeviceLights_Parms, NULL );

	return NewDeviceLights_Parms.ReturnValue;
};

// Function RavagedGame.R_AlienFxManager.Initialize
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_AlienFxManager::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 78103 ];

	AR_AlienFxManager_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	return Initialize_Parms.ReturnValue;
};

// Function RavagedGame.R_PlayerController.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_PlayerController::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 86264 ];

	AR_PlayerController_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_PlayerController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 86263 ];

	AR_PlayerController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ServerPlayerShout
// [0x002200C2] 
// Parameters infos:
// unsigned char                  CommandIndex                   ( CPF_Parm )

void AR_PlayerController::ServerPlayerShout ( unsigned char CommandIndex )
{
	static UFunction* pFnServerPlayerShout = NULL;

	if ( ! pFnServerPlayerShout )
		pFnServerPlayerShout = (UFunction*) UObject::GObjObjects()->Data[ 86257 ];

	AR_PlayerController_execServerPlayerShout_Parms ServerPlayerShout_Parms;
	ServerPlayerShout_Parms.CommandIndex = CommandIndex;

	this->ProcessEvent ( pFnServerPlayerShout, &ServerPlayerShout_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.PlayerShout
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  CommandIndex                   ( CPF_Parm )

void AR_PlayerController::PlayerShout ( unsigned char CommandIndex )
{
	static UFunction* pFnPlayerShout = NULL;

	if ( ! pFnPlayerShout )
		pFnPlayerShout = (UFunction*) UObject::GObjObjects()->Data[ 86253 ];

	AR_PlayerController_execPlayerShout_Parms PlayerShout_Parms;
	PlayerShout_Parms.CommandIndex = CommandIndex;

	this->ProcessEvent ( pFnPlayerShout, &PlayerShout_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.DrawSquadOnCanvas
// [0x00020002] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AR_PlayerController::DrawSquadOnCanvas ( class AHUD* H )
{
	static UFunction* pFnDrawSquadOnCanvas = NULL;

	if ( ! pFnDrawSquadOnCanvas )
		pFnDrawSquadOnCanvas = (UFunction*) UObject::GObjObjects()->Data[ 86243 ];

	AR_PlayerController_execDrawSquadOnCanvas_Parms DrawSquadOnCanvas_Parms;
	DrawSquadOnCanvas_Parms.H = H;

	this->ProcessEvent ( pFnDrawSquadOnCanvas, &DrawSquadOnCanvas_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.SquadToggleDrawOnCanvas
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_PlayerController::SquadToggleDrawOnCanvas ( )
{
	static UFunction* pFnSquadToggleDrawOnCanvas = NULL;

	if ( ! pFnSquadToggleDrawOnCanvas )
		pFnSquadToggleDrawOnCanvas = (UFunction*) UObject::GObjObjects()->Data[ 86242 ];

	AR_PlayerController_execSquadToggleDrawOnCanvas_Parms SquadToggleDrawOnCanvas_Parms;

	this->ProcessEvent ( pFnSquadToggleDrawOnCanvas, &SquadToggleDrawOnCanvas_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ServerLeaveSquad
// [0x002200C2] 
// Parameters infos:

void AR_PlayerController::ServerLeaveSquad ( )
{
	static UFunction* pFnServerLeaveSquad = NULL;

	if ( ! pFnServerLeaveSquad )
		pFnServerLeaveSquad = (UFunction*) UObject::GObjObjects()->Data[ 86241 ];

	AR_PlayerController_execServerLeaveSquad_Parms ServerLeaveSquad_Parms;

	this->ProcessEvent ( pFnServerLeaveSquad, &ServerLeaveSquad_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.SquadLeave
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_PlayerController::SquadLeave ( )
{
	static UFunction* pFnSquadLeave = NULL;

	if ( ! pFnSquadLeave )
		pFnSquadLeave = (UFunction*) UObject::GObjObjects()->Data[ 86240 ];

	AR_PlayerController_execSquadLeave_Parms SquadLeave_Parms;

	this->ProcessEvent ( pFnSquadLeave, &SquadLeave_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ServerCreateSquad
// [0x002200C2] 
// Parameters infos:
// struct FString                 SquadName                      ( CPF_Parm | CPF_NeedCtorLink )

void AR_PlayerController::ServerCreateSquad ( struct FString SquadName )
{
	static UFunction* pFnServerCreateSquad = NULL;

	if ( ! pFnServerCreateSquad )
		pFnServerCreateSquad = (UFunction*) UObject::GObjObjects()->Data[ 86235 ];

	AR_PlayerController_execServerCreateSquad_Parms ServerCreateSquad_Parms;
	memcpy ( &ServerCreateSquad_Parms.SquadName, &SquadName, 0xC );

	this->ProcessEvent ( pFnServerCreateSquad, &ServerCreateSquad_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.SquadCreate
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 SquadName                      ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void AR_PlayerController::SquadCreate ( struct FString SquadName )
{
	static UFunction* pFnSquadCreate = NULL;

	if ( ! pFnSquadCreate )
		pFnSquadCreate = (UFunction*) UObject::GObjObjects()->Data[ 86233 ];

	AR_PlayerController_execSquadCreate_Parms SquadCreate_Parms;
	memcpy ( &SquadCreate_Parms.SquadName, &SquadName, 0xC );

	this->ProcessEvent ( pFnSquadCreate, &SquadCreate_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientSquadResponse
// [0x010201C2] 
// Parameters infos:
// struct FString                 ResponseStr                    ( CPF_Parm | CPF_NeedCtorLink )

void AR_PlayerController::ClientSquadResponse ( struct FString ResponseStr )
{
	static UFunction* pFnClientSquadResponse = NULL;

	if ( ! pFnClientSquadResponse )
		pFnClientSquadResponse = (UFunction*) UObject::GObjObjects()->Data[ 86231 ];

	AR_PlayerController_execClientSquadResponse_Parms ClientSquadResponse_Parms;
	memcpy ( &ClientSquadResponse_Parms.ResponseStr, &ResponseStr, 0xC );

	this->ProcessEvent ( pFnClientSquadResponse, &ClientSquadResponse_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientJoinedSquadResponse
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bJoined                        ( CPF_Parm )
// struct FString                 ResponseStr                    ( CPF_Parm | CPF_NeedCtorLink )

void AR_PlayerController::ClientJoinedSquadResponse ( unsigned long bJoined, struct FString ResponseStr )
{
	static UFunction* pFnClientJoinedSquadResponse = NULL;

	if ( ! pFnClientJoinedSquadResponse )
		pFnClientJoinedSquadResponse = (UFunction*) UObject::GObjObjects()->Data[ 86228 ];

	AR_PlayerController_execClientJoinedSquadResponse_Parms ClientJoinedSquadResponse_Parms;
	ClientJoinedSquadResponse_Parms.bJoined = bJoined;
	memcpy ( &ClientJoinedSquadResponse_Parms.ResponseStr, &ResponseStr, 0xC );

	this->ProcessEvent ( pFnClientJoinedSquadResponse, &ClientJoinedSquadResponse_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ServerJoinSquad
// [0x002200C2] 
// Parameters infos:
// class ASquadInfo*              JoinSquad                      ( CPF_Parm )

void AR_PlayerController::ServerJoinSquad ( class ASquadInfo* JoinSquad )
{
	static UFunction* pFnServerJoinSquad = NULL;

	if ( ! pFnServerJoinSquad )
		pFnServerJoinSquad = (UFunction*) UObject::GObjObjects()->Data[ 86224 ];

	AR_PlayerController_execServerJoinSquad_Parms ServerJoinSquad_Parms;
	ServerJoinSquad_Parms.JoinSquad = JoinSquad;

	this->ProcessEvent ( pFnServerJoinSquad, &ServerJoinSquad_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.SquadJoinByName
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 SquadName                      ( CPF_Parm | CPF_NeedCtorLink )

void AR_PlayerController::SquadJoinByName ( struct FString SquadName )
{
	static UFunction* pFnSquadJoinByName = NULL;

	if ( ! pFnSquadJoinByName )
		pFnSquadJoinByName = (UFunction*) UObject::GObjObjects()->Data[ 86220 ];

	AR_PlayerController_execSquadJoinByName_Parms SquadJoinByName_Parms;
	memcpy ( &SquadJoinByName_Parms.SquadName, &SquadName, 0xC );

	this->ProcessEvent ( pFnSquadJoinByName, &SquadJoinByName_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.SquadJoinByID
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void AR_PlayerController::SquadJoinByID ( int Index )
{
	static UFunction* pFnSquadJoinByID = NULL;

	if ( ! pFnSquadJoinByID )
		pFnSquadJoinByID = (UFunction*) UObject::GObjObjects()->Data[ 86218 ];

	AR_PlayerController_execSquadJoinByID_Parms SquadJoinByID_Parms;
	SquadJoinByID_Parms.Index = Index;

	this->ProcessEvent ( pFnSquadJoinByID, &SquadJoinByID_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.SquadList
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_PlayerController::SquadList ( )
{
	static UFunction* pFnSquadList = NULL;

	if ( ! pFnSquadList )
		pFnSquadList = (UFunction*) UObject::GObjObjects()->Data[ 86211 ];

	AR_PlayerController_execSquadList_Parms SquadList_Parms;

	this->ProcessEvent ( pFnSquadList, &SquadList_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.BuyGame
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_PlayerController::BuyGame ( )
{
	static UFunction* pFnBuyGame = NULL;

	if ( ! pFnBuyGame )
		pFnBuyGame = (UFunction*) UObject::GObjObjects()->Data[ 86210 ];

	AR_PlayerController_execBuyGame_Parms BuyGame_Parms;

	this->ProcessEvent ( pFnBuyGame, &BuyGame_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GetPlayerList
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_PlayerController::GetPlayerList ( )
{
	static UFunction* pFnGetPlayerList = NULL;

	if ( ! pFnGetPlayerList )
		pFnGetPlayerList = (UFunction*) UObject::GObjObjects()->Data[ 86209 ];

	AR_PlayerController_execGetPlayerList_Parms GetPlayerList_Parms;

	this->ProcessEvent ( pFnGetPlayerList, &GetPlayerList_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ServerGetPlayerList
// [0x002200C2] 
// Parameters infos:
// class APlayerController*       caller                         ( CPF_Parm )

void AR_PlayerController::ServerGetPlayerList ( class APlayerController* caller )
{
	static UFunction* pFnServerGetPlayerList = NULL;

	if ( ! pFnServerGetPlayerList )
		pFnServerGetPlayerList = (UFunction*) UObject::GObjObjects()->Data[ 86204 ];

	AR_PlayerController_execServerGetPlayerList_Parms ServerGetPlayerList_Parms;
	ServerGetPlayerList_Parms.caller = caller;

	this->ProcessEvent ( pFnServerGetPlayerList, &ServerGetPlayerList_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientVoteKickResponse
// [0x010201C2] 
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )

void AR_PlayerController::ClientVoteKickResponse ( struct FString msg )
{
	static UFunction* pFnClientVoteKickResponse = NULL;

	if ( ! pFnClientVoteKickResponse )
		pFnClientVoteKickResponse = (UFunction*) UObject::GObjObjects()->Data[ 86202 ];

	AR_PlayerController_execClientVoteKickResponse_Parms ClientVoteKickResponse_Parms;
	memcpy ( &ClientVoteKickResponse_Parms.msg, &msg, 0xC );

	this->ProcessEvent ( pFnClientVoteKickResponse, &ClientVoteKickResponse_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientVoteHasEnded
// [0x010201C2] 
// Parameters infos:
// int                            VoteID                         ( CPF_Parm )
// unsigned long                  bVoteResults                   ( CPF_Parm )

void AR_PlayerController::ClientVoteHasEnded ( int VoteID, unsigned long bVoteResults )
{
	static UFunction* pFnClientVoteHasEnded = NULL;

	if ( ! pFnClientVoteHasEnded )
		pFnClientVoteHasEnded = (UFunction*) UObject::GObjObjects()->Data[ 86199 ];

	AR_PlayerController_execClientVoteHasEnded_Parms ClientVoteHasEnded_Parms;
	ClientVoteHasEnded_Parms.VoteID = VoteID;
	ClientVoteHasEnded_Parms.bVoteResults = bVoteResults;

	this->ProcessEvent ( pFnClientVoteHasEnded, &ClientVoteHasEnded_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientVoteUpdate
// [0x010201C2] 
// Parameters infos:
// int                            VoteID                         ( CPF_Parm )
// unsigned char                  VotesYes                       ( CPF_Parm )
// unsigned char                  VotesNo                        ( CPF_Parm )

void AR_PlayerController::ClientVoteUpdate ( int VoteID, unsigned char VotesYes, unsigned char VotesNo )
{
	static UFunction* pFnClientVoteUpdate = NULL;

	if ( ! pFnClientVoteUpdate )
		pFnClientVoteUpdate = (UFunction*) UObject::GObjObjects()->Data[ 86195 ];

	AR_PlayerController_execClientVoteUpdate_Parms ClientVoteUpdate_Parms;
	ClientVoteUpdate_Parms.VoteID = VoteID;
	ClientVoteUpdate_Parms.VotesYes = VotesYes;
	ClientVoteUpdate_Parms.VotesNo = VotesNo;

	this->ProcessEvent ( pFnClientVoteUpdate, &ClientVoteUpdate_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ServerCastVoteKickPlayer
// [0x002200C2] 
// Parameters infos:
// unsigned long                  bKickPlayer                    ( CPF_Parm )
// int                            VoteID                         ( CPF_Parm )

void AR_PlayerController::ServerCastVoteKickPlayer ( unsigned long bKickPlayer, int VoteID )
{
	static UFunction* pFnServerCastVoteKickPlayer = NULL;

	if ( ! pFnServerCastVoteKickPlayer )
		pFnServerCastVoteKickPlayer = (UFunction*) UObject::GObjObjects()->Data[ 86191 ];

	AR_PlayerController_execServerCastVoteKickPlayer_Parms ServerCastVoteKickPlayer_Parms;
	ServerCastVoteKickPlayer_Parms.bKickPlayer = bKickPlayer;
	ServerCastVoteKickPlayer_Parms.VoteID = VoteID;

	this->ProcessEvent ( pFnServerCastVoteKickPlayer, &ServerCastVoteKickPlayer_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.CastVote
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bKickPlayer                    ( CPF_Parm )

void AR_PlayerController::CastVote ( unsigned long bKickPlayer )
{
	static UFunction* pFnCastVote = NULL;

	if ( ! pFnCastVote )
		pFnCastVote = (UFunction*) UObject::GObjObjects()->Data[ 86189 ];

	AR_PlayerController_execCastVote_Parms CastVote_Parms;
	CastVote_Parms.bKickPlayer = bKickPlayer;

	this->ProcessEvent ( pFnCastVote, &CastVote_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientReceiveVoteKickPlayerInProgress
// [0x010201C2] 
// Parameters infos:
// class APlayerReplicationInfo*  KickPRI                        ( CPF_Parm )
// int                            VoteID                         ( CPF_Parm )
// float                          TimeRemaining                  ( CPF_Parm )

void AR_PlayerController::ClientReceiveVoteKickPlayerInProgress ( class APlayerReplicationInfo* KickPRI, int VoteID, float TimeRemaining )
{
	static UFunction* pFnClientReceiveVoteKickPlayerInProgress = NULL;

	if ( ! pFnClientReceiveVoteKickPlayerInProgress )
		pFnClientReceiveVoteKickPlayerInProgress = (UFunction*) UObject::GObjObjects()->Data[ 86185 ];

	AR_PlayerController_execClientReceiveVoteKickPlayerInProgress_Parms ClientReceiveVoteKickPlayerInProgress_Parms;
	ClientReceiveVoteKickPlayerInProgress_Parms.KickPRI = KickPRI;
	ClientReceiveVoteKickPlayerInProgress_Parms.VoteID = VoteID;
	ClientReceiveVoteKickPlayerInProgress_Parms.TimeRemaining = TimeRemaining;

	this->ProcessEvent ( pFnClientReceiveVoteKickPlayerInProgress, &ClientReceiveVoteKickPlayerInProgress_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ServerRequestVoteKickPlayer
// [0x002200C2] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void AR_PlayerController::ServerRequestVoteKickPlayer ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnServerRequestVoteKickPlayer = NULL;

	if ( ! pFnServerRequestVoteKickPlayer )
		pFnServerRequestVoteKickPlayer = (UFunction*) UObject::GObjObjects()->Data[ 86181 ];

	AR_PlayerController_execServerRequestVoteKickPlayer_Parms ServerRequestVoteKickPlayer_Parms;
	ServerRequestVoteKickPlayer_Parms.PRI = PRI;

	this->ProcessEvent ( pFnServerRequestVoteKickPlayer, &ServerRequestVoteKickPlayer_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.VoteKickPlayerByIndex
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void AR_PlayerController::VoteKickPlayerByIndex ( int Index )
{
	static UFunction* pFnVoteKickPlayerByIndex = NULL;

	if ( ! pFnVoteKickPlayerByIndex )
		pFnVoteKickPlayerByIndex = (UFunction*) UObject::GObjObjects()->Data[ 86179 ];

	AR_PlayerController_execVoteKickPlayerByIndex_Parms VoteKickPlayerByIndex_Parms;
	VoteKickPlayerByIndex_Parms.Index = Index;

	this->ProcessEvent ( pFnVoteKickPlayerByIndex, &VoteKickPlayerByIndex_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.VoteKickStart
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_PlayerController::VoteKickStart ( )
{
	static UFunction* pFnVoteKickStart = NULL;

	if ( ! pFnVoteKickStart )
		pFnVoteKickStart = (UFunction*) UObject::GObjObjects()->Data[ 86173 ];

	AR_PlayerController_execVoteKickStart_Parms VoteKickStart_Parms;

	this->ProcessEvent ( pFnVoteKickStart, &VoteKickStart_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.NotifyLoadedWorld
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   WorldPackageName               ( CPF_Parm )
// unsigned long                  bFinalDest                     ( CPF_Parm )

void AR_PlayerController::eventNotifyLoadedWorld ( struct FName WorldPackageName, unsigned long bFinalDest )
{
	static UFunction* pFnNotifyLoadedWorld = NULL;

	if ( ! pFnNotifyLoadedWorld )
		pFnNotifyLoadedWorld = (UFunction*) UObject::GObjObjects()->Data[ 86170 ];

	AR_PlayerController_eventNotifyLoadedWorld_Parms NotifyLoadedWorld_Parms;
	memcpy ( &NotifyLoadedWorld_Parms.WorldPackageName, &WorldPackageName, 0x8 );
	NotifyLoadedWorld_Parms.bFinalDest = bFinalDest;

	this->ProcessEvent ( pFnNotifyLoadedWorld, &NotifyLoadedWorld_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.SetMapSpectatorLocation
// [0x00020002] 
// Parameters infos:

void AR_PlayerController::SetMapSpectatorLocation ( )
{
	static UFunction* pFnSetMapSpectatorLocation = NULL;

	if ( ! pFnSetMapSpectatorLocation )
		pFnSetMapSpectatorLocation = (UFunction*) UObject::GObjObjects()->Data[ 86168 ];

	AR_PlayerController_execSetMapSpectatorLocation_Parms SetMapSpectatorLocation_Parms;

	this->ProcessEvent ( pFnSetMapSpectatorLocation, &SetMapSpectatorLocation_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ServerRequestSpectate
// [0x002200C2] 
// Parameters infos:

void AR_PlayerController::ServerRequestSpectate ( )
{
	static UFunction* pFnServerRequestSpectate = NULL;

	if ( ! pFnServerRequestSpectate )
		pFnServerRequestSpectate = (UFunction*) UObject::GObjObjects()->Data[ 86160 ];

	AR_PlayerController_execServerRequestSpectate_Parms ServerRequestSpectate_Parms;

	this->ProcessEvent ( pFnServerRequestSpectate, &ServerRequestSpectate_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.RequestSpectate
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_PlayerController::RequestSpectate ( )
{
	static UFunction* pFnRequestSpectate = NULL;

	if ( ! pFnRequestSpectate )
		pFnRequestSpectate = (UFunction*) UObject::GObjObjects()->Data[ 86159 ];

	AR_PlayerController_execRequestSpectate_Parms RequestSpectate_Parms;

	this->ProcessEvent ( pFnRequestSpectate, &RequestSpectate_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.Check3PWeaponZoom
// [0x00020102] 
// Parameters infos:

void AR_PlayerController::Check3PWeaponZoom ( )
{
	static UFunction* pFnCheck3PWeaponZoom = NULL;

	if ( ! pFnCheck3PWeaponZoom )
		pFnCheck3PWeaponZoom = (UFunction*) UObject::GObjObjects()->Data[ 86158 ];

	AR_PlayerController_execCheck3PWeaponZoom_Parms Check3PWeaponZoom_Parms;

	this->ProcessEvent ( pFnCheck3PWeaponZoom, &Check3PWeaponZoom_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientSetBehindView
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bNewBehindView                 ( CPF_Parm )

void AR_PlayerController::ClientSetBehindView ( unsigned long bNewBehindView )
{
	static UFunction* pFnClientSetBehindView = NULL;

	if ( ! pFnClientSetBehindView )
		pFnClientSetBehindView = (UFunction*) UObject::GObjObjects()->Data[ 86156 ];

	AR_PlayerController_execClientSetBehindView_Parms ClientSetBehindView_Parms;
	ClientSetBehindView_Parms.bNewBehindView = bNewBehindView;

	this->ProcessEvent ( pFnClientSetBehindView, &ClientSetBehindView_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ServerToggleBehindView
// [0x002200C2] 
// Parameters infos:

void AR_PlayerController::ServerToggleBehindView ( )
{
	static UFunction* pFnServerToggleBehindView = NULL;

	if ( ! pFnServerToggleBehindView )
		pFnServerToggleBehindView = (UFunction*) UObject::GObjObjects()->Data[ 86155 ];

	AR_PlayerController_execServerToggleBehindView_Parms ServerToggleBehindView_Parms;

	this->ProcessEvent ( pFnServerToggleBehindView, &ServerToggleBehindView_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.CyclePerspective
// [0x00020102] 
// Parameters infos:

void AR_PlayerController::CyclePerspective ( )
{
	static UFunction* pFnCyclePerspective = NULL;

	if ( ! pFnCyclePerspective )
		pFnCyclePerspective = (UFunction*) UObject::GObjObjects()->Data[ 86154 ];

	AR_PlayerController_execCyclePerspective_Parms CyclePerspective_Parms;

	this->ProcessEvent ( pFnCyclePerspective, &CyclePerspective_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientSetRequestedEntryWithFlag
// [0x010201C2] 
// Parameters infos:
// class AUTVehicle*              V                              ( CPF_Parm )
// unsigned long                  bNewValue                      ( CPF_Parm )
// int                            MessageIndex                   ( CPF_Parm )

void AR_PlayerController::ClientSetRequestedEntryWithFlag ( class AUTVehicle* V, unsigned long bNewValue, int MessageIndex )
{
	static UFunction* pFnClientSetRequestedEntryWithFlag = NULL;

	if ( ! pFnClientSetRequestedEntryWithFlag )
		pFnClientSetRequestedEntryWithFlag = (UFunction*) UObject::GObjObjects()->Data[ 86145 ];

	AR_PlayerController_execClientSetRequestedEntryWithFlag_Parms ClientSetRequestedEntryWithFlag_Parms;
	ClientSetRequestedEntryWithFlag_Parms.V = V;
	ClientSetRequestedEntryWithFlag_Parms.bNewValue = bNewValue;
	ClientSetRequestedEntryWithFlag_Parms.MessageIndex = MessageIndex;

	this->ProcessEvent ( pFnClientSetRequestedEntryWithFlag, &ClientSetRequestedEntryWithFlag_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.PlayStartupMessage
// [0x010201C2] 
// Parameters infos:
// unsigned char                  StartupStage                   ( CPF_Parm )

void AR_PlayerController::PlayStartupMessage ( unsigned char StartupStage )
{
	static UFunction* pFnPlayStartupMessage = NULL;

	if ( ! pFnPlayStartupMessage )
		pFnPlayStartupMessage = (UFunction*) UObject::GObjObjects()->Data[ 86143 ];

	AR_PlayerController_execPlayStartupMessage_Parms PlayStartupMessage_Parms;
	PlayStartupMessage_Parms.StartupStage = StartupStage;

	this->ProcessEvent ( pFnPlayStartupMessage, &PlayStartupMessage_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientPlayTakeHit
// [0x01020142] 
// Parameters infos:
// struct FVector                 HitLoc                         ( CPF_Parm )
// unsigned char                  Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void AR_PlayerController::ClientPlayTakeHit ( struct FVector HitLoc, unsigned char Damage, class UClass* DamageType )
{
	static UFunction* pFnClientPlayTakeHit = NULL;

	if ( ! pFnClientPlayTakeHit )
		pFnClientPlayTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 86139 ];

	AR_PlayerController_execClientPlayTakeHit_Parms ClientPlayTakeHit_Parms;
	memcpy ( &ClientPlayTakeHit_Parms.HitLoc, &HitLoc, 0xC );
	ClientPlayTakeHit_Parms.Damage = Damage;
	ClientPlayTakeHit_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnClientPlayTakeHit, &ClientPlayTakeHit_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.AllowTTSMessageFrom
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

bool AR_PlayerController::AllowTTSMessageFrom ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnAllowTTSMessageFrom = NULL;

	if ( ! pFnAllowTTSMessageFrom )
		pFnAllowTTSMessageFrom = (UFunction*) UObject::GObjObjects()->Data[ 86134 ];

	AR_PlayerController_execAllowTTSMessageFrom_Parms AllowTTSMessageFrom_Parms;
	AllowTTSMessageFrom_Parms.PRI = PRI;

	this->ProcessEvent ( pFnAllowTTSMessageFrom, &AllowTTSMessageFrom_Parms, NULL );

	return AllowTTSMessageFrom_Parms.ReturnValue;
};

// Function RavagedGame.R_PlayerController.CanCommunicate
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_PlayerController::CanCommunicate ( )
{
	static UFunction* pFnCanCommunicate = NULL;

	if ( ! pFnCanCommunicate )
		pFnCanCommunicate = (UFunction*) UObject::GObjObjects()->Data[ 86133 ];

	AR_PlayerController_execCanCommunicate_Parms CanCommunicate_Parms;

	this->ProcessEvent ( pFnCanCommunicate, &CanCommunicate_Parms, NULL );

	return CanCommunicate_Parms.ReturnValue;
};

// Function RavagedGame.R_PlayerController.TeamMessage
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_Parm )
// float                          MsgLifeTime                    ( CPF_OptionalParm | CPF_Parm )

void AR_PlayerController::eventTeamMessage ( class APlayerReplicationInfo* PRI, struct FString S, struct FName Type, float MsgLifeTime )
{
	static UFunction* pFnTeamMessage = NULL;

	if ( ! pFnTeamMessage )
		pFnTeamMessage = (UFunction*) UObject::GObjObjects()->Data[ 86127 ];

	AR_PlayerController_eventTeamMessage_Parms TeamMessage_Parms;
	TeamMessage_Parms.PRI = PRI;
	memcpy ( &TeamMessage_Parms.S, &S, 0xC );
	memcpy ( &TeamMessage_Parms.Type, &Type, 0x8 );
	TeamMessage_Parms.MsgLifeTime = MsgLifeTime;

	this->ProcessEvent ( pFnTeamMessage, &TeamMessage_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.SetMotD
// [0x010201C2] 
// Parameters infos:
// struct FString                 MotD                           ( CPF_Parm | CPF_NeedCtorLink )

void AR_PlayerController::SetMotD ( struct FString MotD )
{
	static UFunction* pFnSetMotD = NULL;

	if ( ! pFnSetMotD )
		pFnSetMotD = (UFunction*) UObject::GObjObjects()->Data[ 86124 ];

	AR_PlayerController_execSetMotD_Parms SetMotD_Parms;
	memcpy ( &SetMotD_Parms.MotD, &MotD, 0xC );

	this->ProcessEvent ( pFnSetMotD, &SetMotD_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.TeamSay
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )

void AR_PlayerController::TeamSay ( struct FString msg )
{
	static UFunction* pFnTeamSay = NULL;

	if ( ! pFnTeamSay )
		pFnTeamSay = (UFunction*) UObject::GObjObjects()->Data[ 86122 ];

	AR_PlayerController_execTeamSay_Parms TeamSay_Parms;
	memcpy ( &TeamSay_Parms.msg, &msg, 0xC );

	this->ProcessEvent ( pFnTeamSay, &TeamSay_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ShowSoundMode
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_PlayerController::ShowSoundMode ( )
{
	static UFunction* pFnShowSoundMode = NULL;

	if ( ! pFnShowSoundMode )
		pFnShowSoundMode = (UFunction*) UObject::GObjObjects()->Data[ 86119 ];

	AR_PlayerController_execShowSoundMode_Parms ShowSoundMode_Parms;

	this->ProcessEvent ( pFnShowSoundMode, &ShowSoundMode_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GFxReset
// [0x00020102] 
// Parameters infos:

void AR_PlayerController::GFxReset ( )
{
	static UFunction* pFnGFxReset = NULL;

	if ( ! pFnGFxReset )
		pFnGFxReset = (UFunction*) UObject::GObjObjects()->Data[ 86118 ];

	AR_PlayerController_execGFxReset_Parms GFxReset_Parms;

	this->ProcessEvent ( pFnGFxReset, &GFxReset_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientKillSpawnMenu
// [0x010201C2] 
// Parameters infos:

void AR_PlayerController::ClientKillSpawnMenu ( )
{
	static UFunction* pFnClientKillSpawnMenu = NULL;

	if ( ! pFnClientKillSpawnMenu )
		pFnClientKillSpawnMenu = (UFunction*) UObject::GObjObjects()->Data[ 86117 ];

	AR_PlayerController_execClientKillSpawnMenu_Parms ClientKillSpawnMenu_Parms;

	this->ProcessEvent ( pFnClientKillSpawnMenu, &ClientKillSpawnMenu_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientReset
// [0x010201C2] 
// Parameters infos:

void AR_PlayerController::ClientReset ( )
{
	static UFunction* pFnClientReset = NULL;

	if ( ! pFnClientReset )
		pFnClientReset = (UFunction*) UObject::GObjObjects()->Data[ 86116 ];

	AR_PlayerController_execClientReset_Parms ClientReset_Parms;

	this->ProcessEvent ( pFnClientReset, &ClientReset_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.Reset
// [0x00020002] 
// Parameters infos:

void AR_PlayerController::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 86115 ];

	AR_PlayerController_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.PlayTinitusEffect
// [0x00020102] 
// Parameters infos:
// class AR_Pawn*                 rPawn                          ( CPF_Parm )

void AR_PlayerController::PlayTinitusEffect ( class AR_Pawn* rPawn )
{
	static UFunction* pFnPlayTinitusEffect = NULL;

	if ( ! pFnPlayTinitusEffect )
		pFnPlayTinitusEffect = (UFunction*) UObject::GObjObjects()->Data[ 86110 ];

	AR_PlayerController_execPlayTinitusEffect_Parms PlayTinitusEffect_Parms;
	PlayTinitusEffect_Parms.rPawn = rPawn;

	this->ProcessEvent ( pFnPlayTinitusEffect, &PlayTinitusEffect_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.StopTinitusEffect
// [0x00020102] 
// Parameters infos:

void AR_PlayerController::StopTinitusEffect ( )
{
	static UFunction* pFnStopTinitusEffect = NULL;

	if ( ! pFnStopTinitusEffect )
		pFnStopTinitusEffect = (UFunction*) UObject::GObjObjects()->Data[ 86106 ];

	AR_PlayerController_execStopTinitusEffect_Parms StopTinitusEffect_Parms;

	this->ProcessEvent ( pFnStopTinitusEffect, &StopTinitusEffect_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.DrawVehicleResourceDepotServiceState
// [0x00020102] 
// Parameters infos:
// class AR_Vehicle*              rVeh                           ( CPF_Parm )
// class AHUD*                    H                              ( CPF_Parm )

void AR_PlayerController::DrawVehicleResourceDepotServiceState ( class AR_Vehicle* rVeh, class AHUD* H )
{
	static UFunction* pFnDrawVehicleResourceDepotServiceState = NULL;

	if ( ! pFnDrawVehicleResourceDepotServiceState )
		pFnDrawVehicleResourceDepotServiceState = (UFunction*) UObject::GObjObjects()->Data[ 86099 ];

	AR_PlayerController_execDrawVehicleResourceDepotServiceState_Parms DrawVehicleResourceDepotServiceState_Parms;
	DrawVehicleResourceDepotServiceState_Parms.rVeh = rVeh;
	DrawVehicleResourceDepotServiceState_Parms.H = H;

	this->ProcessEvent ( pFnDrawVehicleResourceDepotServiceState, &DrawVehicleResourceDepotServiceState_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.DrawHUD
// [0x00020002] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AR_PlayerController::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 86088 ];

	AR_PlayerController_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GetR_Pawn
// [0x00020102] 
// Parameters infos:
// class AR_Pawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AR_Pawn* AR_PlayerController::GetR_Pawn ( )
{
	static UFunction* pFnGetR_Pawn = NULL;

	if ( ! pFnGetR_Pawn )
		pFnGetR_Pawn = (UFunction*) UObject::GObjObjects()->Data[ 78176 ];

	AR_PlayerController_execGetR_Pawn_Parms GetR_Pawn_Parms;

	this->ProcessEvent ( pFnGetR_Pawn, &GetR_Pawn_Parms, NULL );

	return GetR_Pawn_Parms.ReturnValue;
};

// Function RavagedGame.R_PlayerController.RenderVoteKick
// [0x00020002] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AR_PlayerController::RenderVoteKick ( class AHUD* H )
{
	static UFunction* pFnRenderVoteKick = NULL;

	if ( ! pFnRenderVoteKick )
		pFnRenderVoteKick = (UFunction*) UObject::GObjObjects()->Data[ 86069 ];

	AR_PlayerController_execRenderVoteKick_Parms RenderVoteKick_Parms;
	RenderVoteKick_Parms.H = H;

	this->ProcessEvent ( pFnRenderVoteKick, &RenderVoteKick_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.DrawSensitivity
// [0x00020002] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AR_PlayerController::DrawSensitivity ( class AHUD* H )
{
	static UFunction* pFnDrawSensitivity = NULL;

	if ( ! pFnDrawSensitivity )
		pFnDrawSensitivity = (UFunction*) UObject::GObjObjects()->Data[ 86064 ];

	AR_PlayerController_execDrawSensitivity_Parms DrawSensitivity_Parms;
	DrawSensitivity_Parms.H = H;

	this->ProcessEvent ( pFnDrawSensitivity, &DrawSensitivity_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientRestart
// [0x010201C2] 
// Parameters infos:
// class APawn*                   NewPawn                        ( CPF_Parm )

void AR_PlayerController::ClientRestart ( class APawn* NewPawn )
{
	static UFunction* pFnClientRestart = NULL;

	if ( ! pFnClientRestart )
		pFnClientRestart = (UFunction*) UObject::GObjObjects()->Data[ 86062 ];

	AR_PlayerController_execClientRestart_Parms ClientRestart_Parms;
	ClientRestart_Parms.NewPawn = NewPawn;

	this->ProcessEvent ( pFnClientRestart, &ClientRestart_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.Set1pHUDVisibility
// [0x00020102] 
// Parameters infos:
// unsigned long                  bVis                           ( CPF_Parm )

void AR_PlayerController::Set1pHUDVisibility ( unsigned long bVis )
{
	static UFunction* pFnSet1pHUDVisibility = NULL;

	if ( ! pFnSet1pHUDVisibility )
		pFnSet1pHUDVisibility = (UFunction*) UObject::GObjObjects()->Data[ 86059 ];

	AR_PlayerController_execSet1pHUDVisibility_Parms Set1pHUDVisibility_Parms;
	Set1pHUDVisibility_Parms.bVis = bVis;

	this->ProcessEvent ( pFnSet1pHUDVisibility, &Set1pHUDVisibility_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientPawnDied
// [0x010201C2] 
// Parameters infos:

void AR_PlayerController::ClientPawnDied ( )
{
	static UFunction* pFnClientPawnDied = NULL;

	if ( ! pFnClientPawnDied )
		pFnClientPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 86057 ];

	AR_PlayerController_execClientPawnDied_Parms ClientPawnDied_Parms;

	this->ProcessEvent ( pFnClientPawnDied, &ClientPawnDied_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.PawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AR_PlayerController::PawnDied ( class APawn* P )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 86055 ];

	AR_PlayerController_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.P = P;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ProcessViewRotation
// [0x00420002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )

void AR_PlayerController::ProcessViewRotation ( float DeltaTime, struct FRotator DeltaRot, struct FRotator* out_ViewRotation )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 86045 ];

	AR_PlayerController_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;
	memcpy ( &ProcessViewRotation_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );
};

// Function RavagedGame.R_PlayerController.ServerReceiveTurretRot
// [0x002200C2] 
// Parameters infos:
// struct FRotator                NewTurrentRot                  ( CPF_Parm )

void AR_PlayerController::ServerReceiveTurretRot ( struct FRotator NewTurrentRot )
{
	static UFunction* pFnServerReceiveTurretRot = NULL;

	if ( ! pFnServerReceiveTurretRot )
		pFnServerReceiveTurretRot = (UFunction*) UObject::GObjObjects()->Data[ 86039 ];

	AR_PlayerController_execServerReceiveTurretRot_Parms ServerReceiveTurretRot_Parms;
	memcpy ( &ServerReceiveTurretRot_Parms.NewTurrentRot, &NewTurrentRot, 0xC );

	this->ProcessEvent ( pFnServerReceiveTurretRot, &ServerReceiveTurretRot_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.SendServerNewTurretRot
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FRotator                NewTurretRotation              ( CPF_Parm )

void AR_PlayerController::eventSendServerNewTurretRot ( struct FRotator NewTurretRotation )
{
	static UFunction* pFnSendServerNewTurretRot = NULL;

	if ( ! pFnSendServerNewTurretRot )
		pFnSendServerNewTurretRot = (UFunction*) UObject::GObjObjects()->Data[ 86037 ];

	AR_PlayerController_eventSendServerNewTurretRot_Parms SendServerNewTurretRot_Parms;
	memcpy ( &SendServerNewTurretRot_Parms.NewTurretRotation, &NewTurretRotation, 0xC );

	this->ProcessEvent ( pFnSendServerNewTurretRot, &SendServerNewTurretRot_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GFxClassMenuVisibilityChanged
// [0x00020100] 
// Parameters infos:
// unsigned long                  bClassMenuVis                  ( CPF_Parm )

void AR_PlayerController::GFxClassMenuVisibilityChanged ( unsigned long bClassMenuVis )
{
	static UFunction* pFnGFxClassMenuVisibilityChanged = NULL;

	if ( ! pFnGFxClassMenuVisibilityChanged )
		pFnGFxClassMenuVisibilityChanged = (UFunction*) UObject::GObjObjects()->Data[ 86035 ];

	AR_PlayerController_execGFxClassMenuVisibilityChanged_Parms GFxClassMenuVisibilityChanged_Parms;
	GFxClassMenuVisibilityChanged_Parms.bClassMenuVis = bClassMenuVis;

	this->ProcessEvent ( pFnGFxClassMenuVisibilityChanged, &GFxClassMenuVisibilityChanged_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ReceiveMsgFromGFx
// [0x00020102] 
// Parameters infos:
// struct FString                 str                            ( CPF_Parm | CPF_NeedCtorLink )

void AR_PlayerController::ReceiveMsgFromGFx ( struct FString str )
{
	static UFunction* pFnReceiveMsgFromGFx = NULL;

	if ( ! pFnReceiveMsgFromGFx )
		pFnReceiveMsgFromGFx = (UFunction*) UObject::GObjObjects()->Data[ 86033 ];

	AR_PlayerController_execReceiveMsgFromGFx_Parms ReceiveMsgFromGFx_Parms;
	memcpy ( &ReceiveMsgFromGFx_Parms.str, &str, 0xC );

	this->ProcessEvent ( pFnReceiveMsgFromGFx, &ReceiveMsgFromGFx_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GFxChatEnter
// [0x00020102] 
// Parameters infos:

void AR_PlayerController::GFxChatEnter ( )
{
	static UFunction* pFnGFxChatEnter = NULL;

	if ( ! pFnGFxChatEnter )
		pFnGFxChatEnter = (UFunction*) UObject::GObjObjects()->Data[ 86032 ];

	AR_PlayerController_execGFxChatEnter_Parms GFxChatEnter_Parms;

	this->ProcessEvent ( pFnGFxChatEnter, &GFxChatEnter_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GFxClassChanged
// [0x00020102] 
// Parameters infos:
// int                            nTeam                          ( CPF_Parm )
// int                            newClassIdx                    ( CPF_Parm )

void AR_PlayerController::GFxClassChanged ( int nTeam, int newClassIdx )
{
	static UFunction* pFnGFxClassChanged = NULL;

	if ( ! pFnGFxClassChanged )
		pFnGFxClassChanged = (UFunction*) UObject::GObjObjects()->Data[ 86029 ];

	AR_PlayerController_execGFxClassChanged_Parms GFxClassChanged_Parms;
	GFxClassChanged_Parms.nTeam = nTeam;
	GFxClassChanged_Parms.newClassIdx = newClassIdx;

	this->ProcessEvent ( pFnGFxClassChanged, &GFxClassChanged_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GFxGetWeaponPortraitAndDescription
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            WeaponType                     ( CPF_Parm )
// int                            WeapIdx                        ( CPF_Parm )
// class UTexture*                weapTex                        ( CPF_Parm | CPF_OutParm )
// struct FString                 weapDesc                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AR_PlayerController::GFxGetWeaponPortraitAndDescription ( int WeaponType, int WeapIdx, class UTexture** weapTex, struct FString* weapDesc )
{
	static UFunction* pFnGFxGetWeaponPortraitAndDescription = NULL;

	if ( ! pFnGFxGetWeaponPortraitAndDescription )
		pFnGFxGetWeaponPortraitAndDescription = (UFunction*) UObject::GObjObjects()->Data[ 83432 ];

	AR_PlayerController_execGFxGetWeaponPortraitAndDescription_Parms GFxGetWeaponPortraitAndDescription_Parms;
	GFxGetWeaponPortraitAndDescription_Parms.WeaponType = WeaponType;
	GFxGetWeaponPortraitAndDescription_Parms.WeapIdx = WeapIdx;

	this->ProcessEvent ( pFnGFxGetWeaponPortraitAndDescription, &GFxGetWeaponPortraitAndDescription_Parms, NULL );

	if ( weapTex )
		*weapTex = GFxGetWeaponPortraitAndDescription_Parms.weapTex;

	if ( weapDesc )
		memcpy ( weapDesc, &GFxGetWeaponPortraitAndDescription_Parms.weapDesc, 0xC );

	return GFxGetWeaponPortraitAndDescription_Parms.ReturnValue;
};

// Function RavagedGame.R_PlayerController.GFxUpdateClassWeapons
// [0x00020102] 
// Parameters infos:

void AR_PlayerController::GFxUpdateClassWeapons ( )
{
	static UFunction* pFnGFxUpdateClassWeapons = NULL;

	if ( ! pFnGFxUpdateClassWeapons )
		pFnGFxUpdateClassWeapons = (UFunction*) UObject::GObjObjects()->Data[ 86020 ];

	AR_PlayerController_execGFxUpdateClassWeapons_Parms GFxUpdateClassWeapons_Parms;

	this->ProcessEvent ( pFnGFxUpdateClassWeapons, &GFxUpdateClassWeapons_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GFxFillLoadOuts
// [0x00020102] 
// Parameters infos:
// int                            nTeam                          ( CPF_Parm )
// int                            nClass                         ( CPF_Parm )

void AR_PlayerController::GFxFillLoadOuts ( int nTeam, int nClass )
{
	static UFunction* pFnGFxFillLoadOuts = NULL;

	if ( ! pFnGFxFillLoadOuts )
		pFnGFxFillLoadOuts = (UFunction*) UObject::GObjObjects()->Data[ 86015 ];

	AR_PlayerController_execGFxFillLoadOuts_Parms GFxFillLoadOuts_Parms;
	GFxFillLoadOuts_Parms.nTeam = nTeam;
	GFxFillLoadOuts_Parms.nClass = nClass;

	this->ProcessEvent ( pFnGFxFillLoadOuts, &GFxFillLoadOuts_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GFxFillTeamWeaponArraysIfNewTeam
// [0x00020102] 
// Parameters infos:
// int                            NewTeam                        ( CPF_Parm )

void AR_PlayerController::GFxFillTeamWeaponArraysIfNewTeam ( int NewTeam )
{
	static UFunction* pFnGFxFillTeamWeaponArraysIfNewTeam = NULL;

	if ( ! pFnGFxFillTeamWeaponArraysIfNewTeam )
		pFnGFxFillTeamWeaponArraysIfNewTeam = (UFunction*) UObject::GObjObjects()->Data[ 86012 ];

	AR_PlayerController_execGFxFillTeamWeaponArraysIfNewTeam_Parms GFxFillTeamWeaponArraysIfNewTeam_Parms;
	GFxFillTeamWeaponArraysIfNewTeam_Parms.NewTeam = NewTeam;

	this->ProcessEvent ( pFnGFxFillTeamWeaponArraysIfNewTeam, &GFxFillTeamWeaponArraysIfNewTeam_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GFxUpdateClassMenuTeam
// [0x00020102] 
// Parameters infos:
// int                            NewTeam                        ( CPF_Parm )

void AR_PlayerController::GFxUpdateClassMenuTeam ( int NewTeam )
{
	static UFunction* pFnGFxUpdateClassMenuTeam = NULL;

	if ( ! pFnGFxUpdateClassMenuTeam )
		pFnGFxUpdateClassMenuTeam = (UFunction*) UObject::GObjObjects()->Data[ 86008 ];

	AR_PlayerController_execGFxUpdateClassMenuTeam_Parms GFxUpdateClassMenuTeam_Parms;
	GFxUpdateClassMenuTeam_Parms.NewTeam = NewTeam;

	this->ProcessEvent ( pFnGFxUpdateClassMenuTeam, &GFxUpdateClassMenuTeam_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GFxClientNewSpawnSelected
// [0x010201C2] 
// Parameters infos:
// class AActor*                  newSpawnObj                    ( CPF_Parm )

void AR_PlayerController::GFxClientNewSpawnSelected ( class AActor* newSpawnObj )
{
	static UFunction* pFnGFxClientNewSpawnSelected = NULL;

	if ( ! pFnGFxClientNewSpawnSelected )
		pFnGFxClientNewSpawnSelected = (UFunction*) UObject::GObjObjects()->Data[ 86006 ];

	AR_PlayerController_execGFxClientNewSpawnSelected_Parms GFxClientNewSpawnSelected_Parms;
	GFxClientNewSpawnSelected_Parms.newSpawnObj = newSpawnObj;

	this->ProcessEvent ( pFnGFxClientNewSpawnSelected, &GFxClientNewSpawnSelected_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ServerRequestSpawnPoint
// [0x002200C2] 
// Parameters infos:
// class AActor*                  SpawnPoint                     ( CPF_Parm )

void AR_PlayerController::ServerRequestSpawnPoint ( class AActor* SpawnPoint )
{
	static UFunction* pFnServerRequestSpawnPoint = NULL;

	if ( ! pFnServerRequestSpawnPoint )
		pFnServerRequestSpawnPoint = (UFunction*) UObject::GObjObjects()->Data[ 86002 ];

	AR_PlayerController_execServerRequestSpawnPoint_Parms ServerRequestSpawnPoint_Parms;
	ServerRequestSpawnPoint_Parms.SpawnPoint = SpawnPoint;

	this->ProcessEvent ( pFnServerRequestSpawnPoint, &ServerRequestSpawnPoint_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GFxServerSelectDefaultObjective
// [0x002200C2] 
// Parameters infos:

void AR_PlayerController::GFxServerSelectDefaultObjective ( )
{
	static UFunction* pFnGFxServerSelectDefaultObjective = NULL;

	if ( ! pFnGFxServerSelectDefaultObjective )
		pFnGFxServerSelectDefaultObjective = (UFunction*) UObject::GObjObjects()->Data[ 86001 ];

	AR_PlayerController_execGFxServerSelectDefaultObjective_Parms GFxServerSelectDefaultObjective_Parms;

	this->ProcessEvent ( pFnGFxServerSelectDefaultObjective, &GFxServerSelectDefaultObjective_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GFxSelectDefaultObjective
// [0x00020102] 
// Parameters infos:

void AR_PlayerController::GFxSelectDefaultObjective ( )
{
	static UFunction* pFnGFxSelectDefaultObjective = NULL;

	if ( ! pFnGFxSelectDefaultObjective )
		pFnGFxSelectDefaultObjective = (UFunction*) UObject::GObjObjects()->Data[ 86000 ];

	AR_PlayerController_execGFxSelectDefaultObjective_Parms GFxSelectDefaultObjective_Parms;

	this->ProcessEvent ( pFnGFxSelectDefaultObjective, &GFxSelectDefaultObjective_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.SpectateButtonPressed
// [0x00020102] 
// Parameters infos:

void AR_PlayerController::SpectateButtonPressed ( )
{
	static UFunction* pFnSpectateButtonPressed = NULL;

	if ( ! pFnSpectateButtonPressed )
		pFnSpectateButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 85999 ];

	AR_PlayerController_execSpectateButtonPressed_Parms SpectateButtonPressed_Parms;

	this->ProcessEvent ( pFnSpectateButtonPressed, &SpectateButtonPressed_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.SuicideButtonPressed
// [0x00020102] 
// Parameters infos:

void AR_PlayerController::SuicideButtonPressed ( )
{
	static UFunction* pFnSuicideButtonPressed = NULL;

	if ( ! pFnSuicideButtonPressed )
		pFnSuicideButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 85998 ];

	AR_PlayerController_execSuicideButtonPressed_Parms SuicideButtonPressed_Parms;

	this->ProcessEvent ( pFnSuicideButtonPressed, &SuicideButtonPressed_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GFxSpawnMenuStop
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bStopChat                      ( CPF_Parm )

void AR_PlayerController::GFxSpawnMenuStop ( unsigned long bStopChat )
{
	static UFunction* pFnGFxSpawnMenuStop = NULL;

	if ( ! pFnGFxSpawnMenuStop )
		pFnGFxSpawnMenuStop = (UFunction*) UObject::GObjObjects()->Data[ 85996 ];

	AR_PlayerController_execGFxSpawnMenuStop_Parms GFxSpawnMenuStop_Parms;
	GFxSpawnMenuStop_Parms.bStopChat = bStopChat;

	this->ProcessEvent ( pFnGFxSpawnMenuStop, &GFxSpawnMenuStop_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GFxClientSpawnSettingsComplete
// [0x010201C2] 
// Parameters infos:

void AR_PlayerController::GFxClientSpawnSettingsComplete ( )
{
	static UFunction* pFnGFxClientSpawnSettingsComplete = NULL;

	if ( ! pFnGFxClientSpawnSettingsComplete )
		pFnGFxClientSpawnSettingsComplete = (UFunction*) UObject::GObjObjects()->Data[ 85995 ];

	AR_PlayerController_execGFxClientSpawnSettingsComplete_Parms GFxClientSpawnSettingsComplete_Parms;

	this->ProcessEvent ( pFnGFxClientSpawnSettingsComplete, &GFxClientSpawnSettingsComplete_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GFxCheckSpawnMenuStatus
// [0x00020102] 
// Parameters infos:

void AR_PlayerController::GFxCheckSpawnMenuStatus ( )
{
	static UFunction* pFnGFxCheckSpawnMenuStatus = NULL;

	if ( ! pFnGFxCheckSpawnMenuStatus )
		pFnGFxCheckSpawnMenuStatus = (UFunction*) UObject::GObjObjects()->Data[ 85994 ];

	AR_PlayerController_execGFxCheckSpawnMenuStatus_Parms GFxCheckSpawnMenuStatus_Parms;

	this->ProcessEvent ( pFnGFxCheckSpawnMenuStatus, &GFxCheckSpawnMenuStatus_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ShowSpawnMenu
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_PlayerController::ShowSpawnMenu ( )
{
	static UFunction* pFnShowSpawnMenu = NULL;

	if ( ! pFnShowSpawnMenu )
		pFnShowSpawnMenu = (UFunction*) UObject::GObjObjects()->Data[ 85992 ];

	AR_PlayerController_execShowSpawnMenu_Parms ShowSpawnMenu_Parms;

	this->ProcessEvent ( pFnShowSpawnMenu, &ShowSpawnMenu_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.SpawnMenuKeyPressed
// [0x00020102] 
// Parameters infos:

void AR_PlayerController::SpawnMenuKeyPressed ( )
{
	static UFunction* pFnSpawnMenuKeyPressed = NULL;

	if ( ! pFnSpawnMenuKeyPressed )
		pFnSpawnMenuKeyPressed = (UFunction*) UObject::GObjObjects()->Data[ 85991 ];

	AR_PlayerController_execSpawnMenuKeyPressed_Parms SpawnMenuKeyPressed_Parms;

	this->ProcessEvent ( pFnSpawnMenuKeyPressed, &SpawnMenuKeyPressed_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ShowClassMenu
// [0x010201C2] 
// Parameters infos:

void AR_PlayerController::ShowClassMenu ( )
{
	static UFunction* pFnShowClassMenu = NULL;

	if ( ! pFnShowClassMenu )
		pFnShowClassMenu = (UFunction*) UObject::GObjObjects()->Data[ 85990 ];

	AR_PlayerController_execShowClassMenu_Parms ShowClassMenu_Parms;

	this->ProcessEvent ( pFnShowClassMenu, &ShowClassMenu_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.EnableControls
// [0x00020002] 
// Parameters infos:
// unsigned long                  bEnableMouse                   ( CPF_Parm )
// unsigned long                  bEnableMove                    ( CPF_Parm )

void AR_PlayerController::EnableControls ( unsigned long bEnableMouse, unsigned long bEnableMove )
{
	static UFunction* pFnEnableControls = NULL;

	if ( ! pFnEnableControls )
		pFnEnableControls = (UFunction*) UObject::GObjObjects()->Data[ 85986 ];

	AR_PlayerController_execEnableControls_Parms EnableControls_Parms;
	EnableControls_Parms.bEnableMouse = bEnableMouse;
	EnableControls_Parms.bEnableMove = bEnableMove;

	this->ProcessEvent ( pFnEnableControls, &EnableControls_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.DisableControls
// [0x00020002] 
// Parameters infos:

void AR_PlayerController::DisableControls ( )
{
	static UFunction* pFnDisableControls = NULL;

	if ( ! pFnDisableControls )
		pFnDisableControls = (UFunction*) UObject::GObjObjects()->Data[ 85985 ];

	AR_PlayerController_execDisableControls_Parms DisableControls_Parms;

	this->ProcessEvent ( pFnDisableControls, &DisableControls_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.TogglePlayerClass
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            classIdx                       ( CPF_Parm )

void AR_PlayerController::TogglePlayerClass ( int classIdx )
{
	static UFunction* pFnTogglePlayerClass = NULL;

	if ( ! pFnTogglePlayerClass )
		pFnTogglePlayerClass = (UFunction*) UObject::GObjObjects()->Data[ 85983 ];

	AR_PlayerController_execTogglePlayerClass_Parms TogglePlayerClass_Parms;
	TogglePlayerClass_Parms.classIdx = classIdx;

	this->ProcessEvent ( pFnTogglePlayerClass, &TogglePlayerClass_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.UnSprint
// [0x00020102] 
// Parameters infos:

void AR_PlayerController::UnSprint ( )
{
	static UFunction* pFnUnSprint = NULL;

	if ( ! pFnUnSprint )
		pFnUnSprint = (UFunction*) UObject::GObjObjects()->Data[ 85980 ];

	AR_PlayerController_execUnSprint_Parms UnSprint_Parms;

	this->ProcessEvent ( pFnUnSprint, &UnSprint_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GetLastDriverPerspective
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AR_Vehicle*              rVeh                           ( CPF_Parm )

int AR_PlayerController::GetLastDriverPerspective ( class AR_Vehicle* rVeh )
{
	static UFunction* pFnGetLastDriverPerspective = NULL;

	if ( ! pFnGetLastDriverPerspective )
		pFnGetLastDriverPerspective = (UFunction*) UObject::GObjObjects()->Data[ 85881 ];

	AR_PlayerController_execGetLastDriverPerspective_Parms GetLastDriverPerspective_Parms;
	GetLastDriverPerspective_Parms.rVeh = rVeh;

	this->ProcessEvent ( pFnGetLastDriverPerspective, &GetLastDriverPerspective_Parms, NULL );

	return GetLastDriverPerspective_Parms.ReturnValue;
};

// Function RavagedGame.R_PlayerController.NewDriverPerspectiveSelected
// [0x00820002] 
// Parameters infos:
// class AR_Vehicle*              rVeh                           ( CPF_Parm )
// int                            PerspectivesIdx                ( CPF_Parm )

void AR_PlayerController::NewDriverPerspectiveSelected ( class AR_Vehicle* rVeh, int PerspectivesIdx )
{
	static UFunction* pFnNewDriverPerspectiveSelected = NULL;

	if ( ! pFnNewDriverPerspectiveSelected )
		pFnNewDriverPerspectiveSelected = (UFunction*) UObject::GObjObjects()->Data[ 85875 ];

	AR_PlayerController_execNewDriverPerspectiveSelected_Parms NewDriverPerspectiveSelected_Parms;
	NewDriverPerspectiveSelected_Parms.rVeh = rVeh;
	NewDriverPerspectiveSelected_Parms.PerspectivesIdx = PerspectivesIdx;

	this->ProcessEvent ( pFnNewDriverPerspectiveSelected, &NewDriverPerspectiveSelected_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ProcessDriveLeaner
// [0x00020002] 
// Parameters infos:
// float                          InForward                      ( CPF_Parm )
// float                          InStrafe                       ( CPF_Parm )
// float                          InUp                           ( CPF_Parm )
// int                            Mouse                          ( CPF_Parm )

void AR_PlayerController::ProcessDriveLeaner ( float InForward, float InStrafe, float InUp, int Mouse )
{
	static UFunction* pFnProcessDriveLeaner = NULL;

	if ( ! pFnProcessDriveLeaner )
		pFnProcessDriveLeaner = (UFunction*) UObject::GObjObjects()->Data[ 85870 ];

	AR_PlayerController_execProcessDriveLeaner_Parms ProcessDriveLeaner_Parms;
	ProcessDriveLeaner_Parms.InForward = InForward;
	ProcessDriveLeaner_Parms.InStrafe = InStrafe;
	ProcessDriveLeaner_Parms.InUp = InUp;
	ProcessDriveLeaner_Parms.Mouse = Mouse;

	this->ProcessEvent ( pFnProcessDriveLeaner, &ProcessDriveLeaner_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ProcessDriveAir
// [0x00020002] 
// Parameters infos:
// float                          InForward                      ( CPF_Parm )
// float                          InStrafe                       ( CPF_Parm )
// int                            Mouse                          ( CPF_Parm )

void AR_PlayerController::ProcessDriveAir ( float InForward, float InStrafe, int Mouse )
{
	static UFunction* pFnProcessDriveAir = NULL;

	if ( ! pFnProcessDriveAir )
		pFnProcessDriveAir = (UFunction*) UObject::GObjObjects()->Data[ 85866 ];

	AR_PlayerController_execProcessDriveAir_Parms ProcessDriveAir_Parms;
	ProcessDriveAir_Parms.InForward = InForward;
	ProcessDriveAir_Parms.InStrafe = InStrafe;
	ProcessDriveAir_Parms.Mouse = Mouse;

	this->ProcessEvent ( pFnProcessDriveAir, &ProcessDriveAir_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ServerDriveLeaner
// [0x00A20042] 
// Parameters infos:
// float                          InForward                      ( CPF_Parm )
// float                          InStrafe                       ( CPF_Parm )
// float                          InUp                           ( CPF_Parm )
// int                            Mouse                          ( CPF_Parm )
// int                            View                           ( CPF_Parm )

void AR_PlayerController::ServerDriveLeaner ( float InForward, float InStrafe, float InUp, int Mouse, int View )
{
	static UFunction* pFnServerDriveLeaner = NULL;

	if ( ! pFnServerDriveLeaner )
		pFnServerDriveLeaner = (UFunction*) UObject::GObjObjects()->Data[ 85859 ];

	AR_PlayerController_execServerDriveLeaner_Parms ServerDriveLeaner_Parms;
	ServerDriveLeaner_Parms.InForward = InForward;
	ServerDriveLeaner_Parms.InStrafe = InStrafe;
	ServerDriveLeaner_Parms.InUp = InUp;
	ServerDriveLeaner_Parms.Mouse = Mouse;
	ServerDriveLeaner_Parms.View = View;

	this->ProcessEvent ( pFnServerDriveLeaner, &ServerDriveLeaner_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ServerDriveAir
// [0x00A20042] 
// Parameters infos:
// float                          InForward                      ( CPF_Parm )
// float                          InStrafe                       ( CPF_Parm )
// int                            Mouse                          ( CPF_Parm )
// int                            View                           ( CPF_Parm )

void AR_PlayerController::ServerDriveAir ( float InForward, float InStrafe, int Mouse, int View )
{
	static UFunction* pFnServerDriveAir = NULL;

	if ( ! pFnServerDriveAir )
		pFnServerDriveAir = (UFunction*) UObject::GObjObjects()->Data[ 85853 ];

	AR_PlayerController_execServerDriveAir_Parms ServerDriveAir_Parms;
	ServerDriveAir_Parms.InForward = InForward;
	ServerDriveAir_Parms.InStrafe = InStrafe;
	ServerDriveAir_Parms.Mouse = Mouse;
	ServerDriveAir_Parms.View = View;

	this->ProcessEvent ( pFnServerDriveAir, &ServerDriveAir_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientSetAirVehicleParams
// [0x010201C2] 
// Parameters infos:
// float                          NewAirVehicleMouseSensitivity  ( CPF_Parm )
// unsigned long                  bMouseInputCurve               ( CPF_Parm )

void AR_PlayerController::ClientSetAirVehicleParams ( float NewAirVehicleMouseSensitivity, unsigned long bMouseInputCurve )
{
	static UFunction* pFnClientSetAirVehicleParams = NULL;

	if ( ! pFnClientSetAirVehicleParams )
		pFnClientSetAirVehicleParams = (UFunction*) UObject::GObjObjects()->Data[ 85831 ];

	AR_PlayerController_execClientSetAirVehicleParams_Parms ClientSetAirVehicleParams_Parms;
	ClientSetAirVehicleParams_Parms.NewAirVehicleMouseSensitivity = NewAirVehicleMouseSensitivity;
	ClientSetAirVehicleParams_Parms.bMouseInputCurve = bMouseInputCurve;

	this->ProcessEvent ( pFnClientSetAirVehicleParams, &ClientSetAirVehicleParams_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ServerSetAirVehicleParams
// [0x002200C2] 
// Parameters infos:
// float                          NewAirVehicleMouseSensitivity  ( CPF_Parm )
// unsigned long                  bMouseInputCurve               ( CPF_Parm )

void AR_PlayerController::ServerSetAirVehicleParams ( float NewAirVehicleMouseSensitivity, unsigned long bMouseInputCurve )
{
	static UFunction* pFnServerSetAirVehicleParams = NULL;

	if ( ! pFnServerSetAirVehicleParams )
		pFnServerSetAirVehicleParams = (UFunction*) UObject::GObjObjects()->Data[ 85827 ];

	AR_PlayerController_execServerSetAirVehicleParams_Parms ServerSetAirVehicleParams_Parms;
	ServerSetAirVehicleParams_Parms.NewAirVehicleMouseSensitivity = NewAirVehicleMouseSensitivity;
	ServerSetAirVehicleParams_Parms.bMouseInputCurve = bMouseInputCurve;

	this->ProcessEvent ( pFnServerSetAirVehicleParams, &ServerSetAirVehicleParams_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientSetLandSensitivity
// [0x010201C2] 
// Parameters infos:
// float                          NewLandVehicleSteerSensitivity ( CPF_Parm )

void AR_PlayerController::ClientSetLandSensitivity ( float NewLandVehicleSteerSensitivity )
{
	static UFunction* pFnClientSetLandSensitivity = NULL;

	if ( ! pFnClientSetLandSensitivity )
		pFnClientSetLandSensitivity = (UFunction*) UObject::GObjObjects()->Data[ 85822 ];

	AR_PlayerController_execClientSetLandSensitivity_Parms ClientSetLandSensitivity_Parms;
	ClientSetLandSensitivity_Parms.NewLandVehicleSteerSensitivity = NewLandVehicleSteerSensitivity;

	this->ProcessEvent ( pFnClientSetLandSensitivity, &ClientSetLandSensitivity_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ServerSetLandSensitivity
// [0x002200C2] 
// Parameters infos:
// float                          NewLandVehicleSteerSensitivity ( CPF_Parm )

void AR_PlayerController::ServerSetLandSensitivity ( float NewLandVehicleSteerSensitivity )
{
	static UFunction* pFnServerSetLandSensitivity = NULL;

	if ( ! pFnServerSetLandSensitivity )
		pFnServerSetLandSensitivity = (UFunction*) UObject::GObjObjects()->Data[ 85819 ];

	AR_PlayerController_execServerSetLandSensitivity_Parms ServerSetLandSensitivity_Parms;
	ServerSetLandSensitivity_Parms.NewLandVehicleSteerSensitivity = NewLandVehicleSteerSensitivity;

	this->ProcessEvent ( pFnServerSetLandSensitivity, &ServerSetLandSensitivity_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientShowSpawnMenu
// [0x010201C2] 
// Parameters infos:

void AR_PlayerController::ClientShowSpawnMenu ( )
{
	static UFunction* pFnClientShowSpawnMenu = NULL;

	if ( ! pFnClientShowSpawnMenu )
		pFnClientShowSpawnMenu = (UFunction*) UObject::GObjObjects()->Data[ 85818 ];

	AR_PlayerController_execClientShowSpawnMenu_Parms ClientShowSpawnMenu_Parms;

	this->ProcessEvent ( pFnClientShowSpawnMenu, &ClientShowSpawnMenu_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ServerRequestSpawnMenu
// [0x002200C2] 
// Parameters infos:

void AR_PlayerController::ServerRequestSpawnMenu ( )
{
	static UFunction* pFnServerRequestSpawnMenu = NULL;

	if ( ! pFnServerRequestSpawnMenu )
		pFnServerRequestSpawnMenu = (UFunction*) UObject::GObjObjects()->Data[ 85817 ];

	AR_PlayerController_execServerRequestSpawnMenu_Parms ServerRequestSpawnMenu_Parms;

	this->ProcessEvent ( pFnServerRequestSpawnMenu, &ServerRequestSpawnMenu_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ShowControllerState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_PlayerController::ShowControllerState ( )
{
	static UFunction* pFnShowControllerState = NULL;

	if ( ! pFnShowControllerState )
		pFnShowControllerState = (UFunction*) UObject::GObjObjects()->Data[ 85816 ];

	AR_PlayerController_execShowControllerState_Parms ShowControllerState_Parms;

	this->ProcessEvent ( pFnShowControllerState, &ShowControllerState_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientChangedTeam
// [0x010201C2] 
// Parameters infos:
// int                            NewTeam                        ( CPF_Parm )

void AR_PlayerController::ClientChangedTeam ( int NewTeam )
{
	static UFunction* pFnClientChangedTeam = NULL;

	if ( ! pFnClientChangedTeam )
		pFnClientChangedTeam = (UFunction*) UObject::GObjObjects()->Data[ 85814 ];

	AR_PlayerController_execClientChangedTeam_Parms ClientChangedTeam_Parms;
	ClientChangedTeam_Parms.NewTeam = NewTeam;

	this->ProcessEvent ( pFnClientChangedTeam, &ClientChangedTeam_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ServerRequestTeam
// [0x002200C2] 
// Parameters infos:
// int                            N                              ( CPF_Parm )

void AR_PlayerController::ServerRequestTeam ( int N )
{
	static UFunction* pFnServerRequestTeam = NULL;

	if ( ! pFnServerRequestTeam )
		pFnServerRequestTeam = (UFunction*) UObject::GObjObjects()->Data[ 85811 ];

	AR_PlayerController_execServerRequestTeam_Parms ServerRequestTeam_Parms;
	ServerRequestTeam_Parms.N = N;

	this->ProcessEvent ( pFnServerRequestTeam, &ServerRequestTeam_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GFxCreateInventoryMods
// [0x00820002] 
// Parameters infos:
// int                            PrimaryIdx                     ( CPF_Parm )
// int                            SecondaryIdx                   ( CPF_Parm )
// int                            MeleeIdx                       ( CPF_Parm )
// int                            ThrowIdx                       ( CPF_Parm )

void AR_PlayerController::GFxCreateInventoryMods ( int PrimaryIdx, int SecondaryIdx, int MeleeIdx, int ThrowIdx )
{
	static UFunction* pFnGFxCreateInventoryMods = NULL;

	if ( ! pFnGFxCreateInventoryMods )
		pFnGFxCreateInventoryMods = (UFunction*) UObject::GObjObjects()->Data[ 85802 ];

	AR_PlayerController_execGFxCreateInventoryMods_Parms GFxCreateInventoryMods_Parms;
	GFxCreateInventoryMods_Parms.PrimaryIdx = PrimaryIdx;
	GFxCreateInventoryMods_Parms.SecondaryIdx = SecondaryIdx;
	GFxCreateInventoryMods_Parms.MeleeIdx = MeleeIdx;
	GFxCreateInventoryMods_Parms.ThrowIdx = ThrowIdx;

	this->ProcessEvent ( pFnGFxCreateInventoryMods, &GFxCreateInventoryMods_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GFxServerSetSpawnSettings
// [0x002200C2] 
// Parameters infos:
// unsigned char                  pClass                         ( CPF_Parm )
// unsigned char                  PrimaryIdx                     ( CPF_Parm )
// unsigned char                  SecondaryIdx                   ( CPF_Parm )
// unsigned char                  MeleeIdx                       ( CPF_Parm )
// unsigned char                  ThrowIdx                       ( CPF_Parm )

void AR_PlayerController::GFxServerSetSpawnSettings ( unsigned char pClass, unsigned char PrimaryIdx, unsigned char SecondaryIdx, unsigned char MeleeIdx, unsigned char ThrowIdx )
{
	static UFunction* pFnGFxServerSetSpawnSettings = NULL;

	if ( ! pFnGFxServerSetSpawnSettings )
		pFnGFxServerSetSpawnSettings = (UFunction*) UObject::GObjObjects()->Data[ 85791 ];

	AR_PlayerController_execGFxServerSetSpawnSettings_Parms GFxServerSetSpawnSettings_Parms;
	GFxServerSetSpawnSettings_Parms.pClass = pClass;
	GFxServerSetSpawnSettings_Parms.PrimaryIdx = PrimaryIdx;
	GFxServerSetSpawnSettings_Parms.SecondaryIdx = SecondaryIdx;
	GFxServerSetSpawnSettings_Parms.MeleeIdx = MeleeIdx;
	GFxServerSetSpawnSettings_Parms.ThrowIdx = ThrowIdx;

	this->ProcessEvent ( pFnGFxServerSetSpawnSettings, &GFxServerSetSpawnSettings_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ServerChangeClass
// [0x002200C2] 
// Parameters infos:
// unsigned char                  PC                             ( CPF_Parm )

void AR_PlayerController::ServerChangeClass ( unsigned char PC )
{
	static UFunction* pFnServerChangeClass = NULL;

	if ( ! pFnServerChangeClass )
		pFnServerChangeClass = (UFunction*) UObject::GObjObjects()->Data[ 85789 ];

	AR_PlayerController_execServerChangeClass_Parms ServerChangeClass_Parms;
	ServerChangeClass_Parms.PC = PC;

	this->ProcessEvent ( pFnServerChangeClass, &ServerChangeClass_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ChangeClass
// [0x00020102] 
// Parameters infos:
// unsigned char                  PC                             ( CPF_Parm )

void AR_PlayerController::ChangeClass ( unsigned char PC )
{
	static UFunction* pFnChangeClass = NULL;

	if ( ! pFnChangeClass )
		pFnChangeClass = (UFunction*) UObject::GObjObjects()->Data[ 85787 ];

	AR_PlayerController_execChangeClass_Parms ChangeClass_Parms;
	ChangeClass_Parms.PC = PC;

	this->ProcessEvent ( pFnChangeClass, &ChangeClass_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GetClass
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AR_PlayerController::GetClass ( )
{
	static UFunction* pFnGetClass = NULL;

	if ( ! pFnGetClass )
		pFnGetClass = (UFunction*) UObject::GObjObjects()->Data[ 80079 ];

	AR_PlayerController_execGetClass_Parms GetClass_Parms;

	this->ProcessEvent ( pFnGetClass, &GetClass_Parms, NULL );

	return GetClass_Parms.ReturnValue;
};

// Function RavagedGame.R_PlayerController.SpawnPlayer
// [0x002200C2] 
// Parameters infos:

void AR_PlayerController::SpawnPlayer ( )
{
	static UFunction* pFnSpawnPlayer = NULL;

	if ( ! pFnSpawnPlayer )
		pFnSpawnPlayer = (UFunction*) UObject::GObjObjects()->Data[ 85785 ];

	AR_PlayerController_execSpawnPlayer_Parms SpawnPlayer_Parms;

	this->ProcessEvent ( pFnSpawnPlayer, &SpawnPlayer_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.SetSelectedSpawn
// [0x002200C2] 
// Parameters infos:
// class AActor*                  Objective                      ( CPF_Parm )

void AR_PlayerController::SetSelectedSpawn ( class AActor* Objective )
{
	static UFunction* pFnSetSelectedSpawn = NULL;

	if ( ! pFnSetSelectedSpawn )
		pFnSetSelectedSpawn = (UFunction*) UObject::GObjObjects()->Data[ 85783 ];

	AR_PlayerController_execSetSelectedSpawn_Parms SetSelectedSpawn_Parms;
	SetSelectedSpawn_Parms.Objective = Objective;

	this->ProcessEvent ( pFnSetSelectedSpawn, &SetSelectedSpawn_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientUnlockAchievement
// [0x010201C2] 
// Parameters infos:
// int                            AchievementId                  ( CPF_Parm )

void AR_PlayerController::ClientUnlockAchievement ( int AchievementId )
{
	static UFunction* pFnClientUnlockAchievement = NULL;

	if ( ! pFnClientUnlockAchievement )
		pFnClientUnlockAchievement = (UFunction*) UObject::GObjObjects()->Data[ 85781 ];

	AR_PlayerController_execClientUnlockAchievement_Parms ClientUnlockAchievement_Parms;
	ClientUnlockAchievement_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnClientUnlockAchievement, &ClientUnlockAchievement_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClearStats
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_PlayerController::ClearStats ( )
{
	static UFunction* pFnClearStats = NULL;

	if ( ! pFnClearStats )
		pFnClearStats = (UFunction*) UObject::GObjObjects()->Data[ 85779 ];

	AR_PlayerController_execClearStats_Parms ClearStats_Parms;

	this->ProcessEvent ( pFnClearStats, &ClearStats_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.GetSeamlessTravelActorList
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bToEntry                       ( CPF_Parm )
// TArray< class AActor* >        ActorList                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AR_PlayerController::eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList )
{
	static UFunction* pFnGetSeamlessTravelActorList = NULL;

	if ( ! pFnGetSeamlessTravelActorList )
		pFnGetSeamlessTravelActorList = (UFunction*) UObject::GObjObjects()->Data[ 85767 ];

	AR_PlayerController_eventGetSeamlessTravelActorList_Parms GetSeamlessTravelActorList_Parms;
	GetSeamlessTravelActorList_Parms.bToEntry = bToEntry;

	this->ProcessEvent ( pFnGetSeamlessTravelActorList, &GetSeamlessTravelActorList_Parms, NULL );

	if ( ActorList )
		memcpy ( ActorList, &GetSeamlessTravelActorList_Parms.ActorList, 0xC );
};

// Function RavagedGame.R_PlayerController.ReadLeaderboardDataStatsComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AR_PlayerController::ReadLeaderboardDataStatsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnReadLeaderboardDataStatsComplete = NULL;

	if ( ! pFnReadLeaderboardDataStatsComplete )
		pFnReadLeaderboardDataStatsComplete = (UFunction*) UObject::GObjObjects()->Data[ 85761 ];

	AR_PlayerController_execReadLeaderboardDataStatsComplete_Parms ReadLeaderboardDataStatsComplete_Parms;
	ReadLeaderboardDataStatsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnReadLeaderboardDataStatsComplete, &ReadLeaderboardDataStatsComplete_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientWriteLeaderboardDataStats
// [0x010241C2] 
// Parameters infos:
// class UClass*                  OnlineStatsWriteClass          ( CPF_Parm )
// unsigned long                  bIsIncomplete                  ( CPF_OptionalParm | CPF_Parm )

void AR_PlayerController::ClientWriteLeaderboardDataStats ( class UClass* OnlineStatsWriteClass, unsigned long bIsIncomplete )
{
	static UFunction* pFnClientWriteLeaderboardDataStats = NULL;

	if ( ! pFnClientWriteLeaderboardDataStats )
		pFnClientWriteLeaderboardDataStats = (UFunction*) UObject::GObjObjects()->Data[ 85756 ];

	AR_PlayerController_execClientWriteLeaderboardDataStats_Parms ClientWriteLeaderboardDataStats_Parms;
	ClientWriteLeaderboardDataStats_Parms.OnlineStatsWriteClass = OnlineStatsWriteClass;
	ClientWriteLeaderboardDataStats_Parms.bIsIncomplete = bIsIncomplete;

	this->ProcessEvent ( pFnClientWriteLeaderboardDataStats, &ClientWriteLeaderboardDataStats_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ReadLeaderboardStatsComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AR_PlayerController::ReadLeaderboardStatsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnReadLeaderboardStatsComplete = NULL;

	if ( ! pFnReadLeaderboardStatsComplete )
		pFnReadLeaderboardStatsComplete = (UFunction*) UObject::GObjObjects()->Data[ 85744 ];

	AR_PlayerController_execReadLeaderboardStatsComplete_Parms ReadLeaderboardStatsComplete_Parms;
	ReadLeaderboardStatsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnReadLeaderboardStatsComplete, &ReadLeaderboardStatsComplete_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientWriteLeaderboardStats
// [0x010241C2] 
// Parameters infos:
// class UClass*                  OnlineStatsWriteClass          ( CPF_Parm )
// unsigned long                  bIsIncomplete                  ( CPF_OptionalParm | CPF_Parm )

void AR_PlayerController::ClientWriteLeaderboardStats ( class UClass* OnlineStatsWriteClass, unsigned long bIsIncomplete )
{
	static UFunction* pFnClientWriteLeaderboardStats = NULL;

	if ( ! pFnClientWriteLeaderboardStats )
		pFnClientWriteLeaderboardStats = (UFunction*) UObject::GObjObjects()->Data[ 85739 ];

	AR_PlayerController_execClientWriteLeaderboardStats_Parms ClientWriteLeaderboardStats_Parms;
	ClientWriteLeaderboardStats_Parms.OnlineStatsWriteClass = OnlineStatsWriteClass;
	ClientWriteLeaderboardStats_Parms.bIsIncomplete = bIsIncomplete;

	this->ProcessEvent ( pFnClientWriteLeaderboardStats, &ClientWriteLeaderboardStats_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.ClientReceiveMatchAwardLocalizedMessage
// [0x010201C2] 
// Parameters infos:
// int                            Switch                         ( CPF_Parm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// struct FString                 StatStr                        ( CPF_Parm | CPF_NeedCtorLink )

void AR_PlayerController::ClientReceiveMatchAwardLocalizedMessage ( int Switch, class APlayerReplicationInfo* PRI, struct FString StatStr )
{
	static UFunction* pFnClientReceiveMatchAwardLocalizedMessage = NULL;

	if ( ! pFnClientReceiveMatchAwardLocalizedMessage )
		pFnClientReceiveMatchAwardLocalizedMessage = (UFunction*) UObject::GObjObjects()->Data[ 85732 ];

	AR_PlayerController_execClientReceiveMatchAwardLocalizedMessage_Parms ClientReceiveMatchAwardLocalizedMessage_Parms;
	ClientReceiveMatchAwardLocalizedMessage_Parms.Switch = Switch;
	ClientReceiveMatchAwardLocalizedMessage_Parms.PRI = PRI;
	memcpy ( &ClientReceiveMatchAwardLocalizedMessage_Parms.StatStr, &StatStr, 0xC );

	this->ProcessEvent ( pFnClientReceiveMatchAwardLocalizedMessage, &ClientReceiveMatchAwardLocalizedMessage_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.AcknowledgePossession
// [0x00820002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AR_PlayerController::AcknowledgePossession ( class APawn* P )
{
	static UFunction* pFnAcknowledgePossession = NULL;

	if ( ! pFnAcknowledgePossession )
		pFnAcknowledgePossession = (UFunction*) UObject::GObjObjects()->Data[ 85729 ];

	AR_PlayerController_execAcknowledgePossession_Parms AcknowledgePossession_Parms;
	AcknowledgePossession_Parms.P = P;

	this->ProcessEvent ( pFnAcknowledgePossession, &AcknowledgePossession_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.UpdateAirVehicleInputs
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_PlayerController::UpdateAirVehicleInputs ( )
{
	static UFunction* pFnUpdateAirVehicleInputs = NULL;

	if ( ! pFnUpdateAirVehicleInputs )
		pFnUpdateAirVehicleInputs = (UFunction*) UObject::GObjObjects()->Data[ 85728 ];

	AR_PlayerController_execUpdateAirVehicleInputs_Parms UpdateAirVehicleInputs_Parms;

	this->ProcessEvent ( pFnUpdateAirVehicleInputs, &UpdateAirVehicleInputs_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.SetAirVehicleMouseSensitivity
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          newVal                         ( CPF_Parm )

void AR_PlayerController::SetAirVehicleMouseSensitivity ( float newVal )
{
	static UFunction* pFnSetAirVehicleMouseSensitivity = NULL;

	if ( ! pFnSetAirVehicleMouseSensitivity )
		pFnSetAirVehicleMouseSensitivity = (UFunction*) UObject::GObjObjects()->Data[ 85726 ];

	AR_PlayerController_execSetAirVehicleMouseSensitivity_Parms SetAirVehicleMouseSensitivity_Parms;
	SetAirVehicleMouseSensitivity_Parms.newVal = newVal;

	this->ProcessEvent ( pFnSetAirVehicleMouseSensitivity, &SetAirVehicleMouseSensitivity_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.SetLandVehicleSteerSensitivity
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          newVal                         ( CPF_Parm )

void AR_PlayerController::SetLandVehicleSteerSensitivity ( float newVal )
{
	static UFunction* pFnSetLandVehicleSteerSensitivity = NULL;

	if ( ! pFnSetLandVehicleSteerSensitivity )
		pFnSetLandVehicleSteerSensitivity = (UFunction*) UObject::GObjObjects()->Data[ 85724 ];

	AR_PlayerController_execSetLandVehicleSteerSensitivity_Parms SetLandVehicleSteerSensitivity_Parms;
	SetLandVehicleSteerSensitivity_Parms.newVal = newVal;

	this->ProcessEvent ( pFnSetLandVehicleSteerSensitivity, &SetLandVehicleSteerSensitivity_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.SetFrontEndError
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 titleName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 messageName                    ( CPF_Parm | CPF_NeedCtorLink )

void AR_PlayerController::SetFrontEndError ( struct FString titleName, struct FString messageName )
{
	static UFunction* pFnSetFrontEndError = NULL;

	if ( ! pFnSetFrontEndError )
		pFnSetFrontEndError = (UFunction*) UObject::GObjObjects()->Data[ 85721 ];

	AR_PlayerController_execSetFrontEndError_Parms SetFrontEndError_Parms;
	memcpy ( &SetFrontEndError_Parms.titleName, &titleName, 0xC );
	memcpy ( &SetFrontEndError_Parms.messageName, &messageName, 0xC );

	this->ProcessEvent ( pFnSetFrontEndError, &SetFrontEndError_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.AutoAimOff
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void AR_PlayerController::AutoAimOff ( )
{
	static UFunction* pFnAutoAimOff = NULL;

	if ( ! pFnAutoAimOff )
		pFnAutoAimOff = (UFunction*) UObject::GObjObjects()->Data[ 85720 ];

	AR_PlayerController_execAutoAimOff_Parms AutoAimOff_Parms;

	this->ProcessEvent ( pFnAutoAimOff, &AutoAimOff_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.AutoAimOn
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void AR_PlayerController::AutoAimOn ( )
{
	static UFunction* pFnAutoAimOn = NULL;

	if ( ! pFnAutoAimOn )
		pFnAutoAimOn = (UFunction*) UObject::GObjObjects()->Data[ 85719 ];

	AR_PlayerController_execAutoAimOn_Parms AutoAimOn_Parms;

	this->ProcessEvent ( pFnAutoAimOn, &AutoAimOn_Parms, NULL );
};

// Function RavagedGame.R_PlayerController.HandlePendingMultiKill
// [0x00020102] 
// Parameters infos:

void AR_PlayerController::HandlePendingMultiKill ( )
{
	static UFunction* pFnHandlePendingMultiKill = NULL;

	if ( ! pFnHandlePendingMultiKill )
		pFnHandlePendingMultiKill = (UFunction*) UObject::GObjObjects()->Data[ 85718 ];

	AR_PlayerController_execHandlePendingMultiKill_Parms HandlePendingMultiKill_Parms;

	this->ProcessEvent ( pFnHandlePendingMultiKill, &HandlePendingMultiKill_Parms, NULL );
};

// Function RavagedGame.R_Pawn.HoldGameObject
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AUDKCarriedObject*       GameObj                        ( CPF_Parm )

void AR_Pawn::eventHoldGameObject ( class AUDKCarriedObject* GameObj )
{
	static UFunction* pFnHoldGameObject = NULL;

	if ( ! pFnHoldGameObject )
		pFnHoldGameObject = (UFunction*) UObject::GObjObjects()->Data[ 85606 ];

	AR_Pawn_eventHoldGameObject_Parms HoldGameObject_Parms;
	HoldGameObject_Parms.GameObj = GameObj;

	this->ProcessEvent ( pFnHoldGameObject, &HoldGameObject_Parms, NULL );
};

// Function RavagedGame.R_Pawn.DoJump
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bUpdating                      ( CPF_Parm )

bool AR_Pawn::DoJump ( unsigned long bUpdating )
{
	static UFunction* pFnDoJump = NULL;

	if ( ! pFnDoJump )
		pFnDoJump = (UFunction*) UObject::GObjObjects()->Data[ 85602 ];

	AR_Pawn_execDoJump_Parms DoJump_Parms;
	DoJump_Parms.bUpdating = bUpdating;

	this->ProcessEvent ( pFnDoJump, &DoJump_Parms, NULL );

	return DoJump_Parms.ReturnValue;
};

// Function RavagedGame.R_Pawn.UpdateEyeHeight
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void AR_Pawn::eventUpdateEyeHeight ( float DeltaTime )
{
	static UFunction* pFnUpdateEyeHeight = NULL;

	if ( ! pFnUpdateEyeHeight )
		pFnUpdateEyeHeight = (UFunction*) UObject::GObjObjects()->Data[ 85584 ];

	AR_Pawn_eventUpdateEyeHeight_Parms UpdateEyeHeight_Parms;
	UpdateEyeHeight_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateEyeHeight, &UpdateEyeHeight_Parms, NULL );
};

// Function RavagedGame.R_Pawn.SwitchWeapon
// [0x00020102] 
// Parameters infos:
// unsigned char                  NewGroup                       ( CPF_Parm )

void AR_Pawn::SwitchWeapon ( unsigned char NewGroup )
{
	static UFunction* pFnSwitchWeapon = NULL;

	if ( ! pFnSwitchWeapon )
		pFnSwitchWeapon = (UFunction*) UObject::GObjObjects()->Data[ 85582 ];

	AR_Pawn_execSwitchWeapon_Parms SwitchWeapon_Parms;
	SwitchWeapon_Parms.NewGroup = NewGroup;

	this->ProcessEvent ( pFnSwitchWeapon, &SwitchWeapon_Parms, NULL );
};

// Function RavagedGame.R_Pawn.PostRenderFor
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void AR_Pawn::eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnPostRenderFor = NULL;

	if ( ! pFnPostRenderFor )
		pFnPostRenderFor = (UFunction*) UObject::GObjObjects()->Data[ 85564 ];

	AR_Pawn_eventPostRenderFor_Parms PostRenderFor_Parms;
	PostRenderFor_Parms.PC = PC;
	PostRenderFor_Parms.Canvas = Canvas;
	memcpy ( &PostRenderFor_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &PostRenderFor_Parms.CameraDir, &CameraDir, 0xC );

	this->ProcessEvent ( pFnPostRenderFor, &PostRenderFor_Parms, NULL );
};

// Function RavagedGame.R_Pawn.ReplicateWeaponSound
// [0x00020002] 
// Parameters infos:
// unsigned char                  InWeapSoundIdx                 ( CPF_Parm )

void AR_Pawn::ReplicateWeaponSound ( unsigned char InWeapSoundIdx )
{
	static UFunction* pFnReplicateWeaponSound = NULL;

	if ( ! pFnReplicateWeaponSound )
		pFnReplicateWeaponSound = (UFunction*) UObject::GObjObjects()->Data[ 85562 ];

	AR_Pawn_execReplicateWeaponSound_Parms ReplicateWeaponSound_Parms;
	ReplicateWeaponSound_Parms.InWeapSoundIdx = InWeapSoundIdx;

	this->ProcessEvent ( pFnReplicateWeaponSound, &ReplicateWeaponSound_Parms, NULL );
};

// Function RavagedGame.R_Pawn.ServerPlay3PWeaponAnimation
// [0x00020002] 
// Parameters infos:
// unsigned char                  InWeapAnimIdx                  ( CPF_Parm )

void AR_Pawn::ServerPlay3PWeaponAnimation ( unsigned char InWeapAnimIdx )
{
	static UFunction* pFnServerPlay3PWeaponAnimation = NULL;

	if ( ! pFnServerPlay3PWeaponAnimation )
		pFnServerPlay3PWeaponAnimation = (UFunction*) UObject::GObjObjects()->Data[ 85560 ];

	AR_Pawn_execServerPlay3PWeaponAnimation_Parms ServerPlay3PWeaponAnimation_Parms;
	ServerPlay3PWeaponAnimation_Parms.InWeapAnimIdx = InWeapAnimIdx;

	this->ProcessEvent ( pFnServerPlay3PWeaponAnimation, &ServerPlay3PWeaponAnimation_Parms, NULL );
};

// Function RavagedGame.R_Pawn.DoPlay3PWeaponAnimation
// [0x00020102] 
// Parameters infos:
// unsigned char                  AninIdx                        ( CPF_Parm )

void AR_Pawn::DoPlay3PWeaponAnimation ( unsigned char AninIdx )
{
	static UFunction* pFnDoPlay3PWeaponAnimation = NULL;

	if ( ! pFnDoPlay3PWeaponAnimation )
		pFnDoPlay3PWeaponAnimation = (UFunction*) UObject::GObjObjects()->Data[ 85555 ];

	AR_Pawn_execDoPlay3PWeaponAnimation_Parms DoPlay3PWeaponAnimation_Parms;
	DoPlay3PWeaponAnimation_Parms.AninIdx = AninIdx;

	this->ProcessEvent ( pFnDoPlay3PWeaponAnimation, &DoPlay3PWeaponAnimation_Parms, NULL );
};

// Function RavagedGame.R_Pawn.DoPlayWeaponSound
// [0x00020100] 
// Parameters infos:
// unsigned char                  InWeapSoundIdx                 ( CPF_Parm )

void AR_Pawn::DoPlayWeaponSound ( unsigned char InWeapSoundIdx )
{
	static UFunction* pFnDoPlayWeaponSound = NULL;

	if ( ! pFnDoPlayWeaponSound )
		pFnDoPlayWeaponSound = (UFunction*) UObject::GObjObjects()->Data[ 85553 ];

	AR_Pawn_execDoPlayWeaponSound_Parms DoPlayWeaponSound_Parms;
	DoPlayWeaponSound_Parms.InWeapSoundIdx = InWeapSoundIdx;

	this->ProcessEvent ( pFnDoPlayWeaponSound, &DoPlayWeaponSound_Parms, NULL );
};

// Function RavagedGame.R_Pawn.StopWeaponFiring
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Pawn::StopWeaponFiring ( )
{
	static UFunction* pFnStopWeaponFiring = NULL;

	if ( ! pFnStopWeaponFiring )
		pFnStopWeaponFiring = (UFunction*) UObject::GObjObjects()->Data[ 85550 ];

	AR_Pawn_execStopWeaponFiring_Parms StopWeaponFiring_Parms;

	this->ProcessEvent ( pFnStopWeaponFiring, &StopWeaponFiring_Parms, NULL );

	return StopWeaponFiring_Parms.ReturnValue;
};

// Function RavagedGame.R_Pawn.Engine_PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void AR_Pawn::Engine_PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnEngine_PossessedBy = NULL;

	if ( ! pFnEngine_PossessedBy )
		pFnEngine_PossessedBy = (UFunction*) UObject::GObjObjects()->Data[ 85547 ];

	AR_Pawn_execEngine_PossessedBy_Parms Engine_PossessedBy_Parms;
	Engine_PossessedBy_Parms.C = C;
	Engine_PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnEngine_PossessedBy, &Engine_PossessedBy_Parms, NULL );
};

// Function RavagedGame.R_Pawn.SetArmsSkinFromMeshDefault
// [0x00020102] 
// Parameters infos:

void AR_Pawn::SetArmsSkinFromMeshDefault ( )
{
	static UFunction* pFnSetArmsSkinFromMeshDefault = NULL;

	if ( ! pFnSetArmsSkinFromMeshDefault )
		pFnSetArmsSkinFromMeshDefault = (UFunction*) UObject::GObjObjects()->Data[ 85544 ];

	AR_Pawn_execSetArmsSkinFromMeshDefault_Parms SetArmsSkinFromMeshDefault_Parms;

	this->ProcessEvent ( pFnSetArmsSkinFromMeshDefault, &SetArmsSkinFromMeshDefault_Parms, NULL );
};

// Function RavagedGame.R_Pawn.UT_SetCharacterClassFromInfo
// [0x00020102] 
// Parameters infos:
// class UClass*                  Info                           ( CPF_Parm )

void AR_Pawn::UT_SetCharacterClassFromInfo ( class UClass* Info )
{
	static UFunction* pFnUT_SetCharacterClassFromInfo = NULL;

	if ( ! pFnUT_SetCharacterClassFromInfo )
		pFnUT_SetCharacterClassFromInfo = (UFunction*) UObject::GObjObjects()->Data[ 85537 ];

	AR_Pawn_execUT_SetCharacterClassFromInfo_Parms UT_SetCharacterClassFromInfo_Parms;
	UT_SetCharacterClassFromInfo_Parms.Info = Info;

	this->ProcessEvent ( pFnUT_SetCharacterClassFromInfo, &UT_SetCharacterClassFromInfo_Parms, NULL );
};

// Function RavagedGame.R_Pawn.SetCharacterClassFromInfo
// [0x00020102] 
// Parameters infos:
// class UClass*                  Info                           ( CPF_Parm )

void AR_Pawn::SetCharacterClassFromInfo ( class UClass* Info )
{
	static UFunction* pFnSetCharacterClassFromInfo = NULL;

	if ( ! pFnSetCharacterClassFromInfo )
		pFnSetCharacterClassFromInfo = (UFunction*) UObject::GObjObjects()->Data[ 85535 ];

	AR_Pawn_execSetCharacterClassFromInfo_Parms SetCharacterClassFromInfo_Parms;
	SetCharacterClassFromInfo_Parms.Info = Info;

	this->ProcessEvent ( pFnSetCharacterClassFromInfo, &SetCharacterClassFromInfo_Parms, NULL );
};

// Function RavagedGame.R_Pawn.UT_NotifyTeamChanged
// [0x00020102] 
// Parameters infos:

void AR_Pawn::UT_NotifyTeamChanged ( )
{
	static UFunction* pFnUT_NotifyTeamChanged = NULL;

	if ( ! pFnUT_NotifyTeamChanged )
		pFnUT_NotifyTeamChanged = (UFunction*) UObject::GObjObjects()->Data[ 85531 ];

	AR_Pawn_execUT_NotifyTeamChanged_Parms UT_NotifyTeamChanged_Parms;

	this->ProcessEvent ( pFnUT_NotifyTeamChanged, &UT_NotifyTeamChanged_Parms, NULL );
};

// Function RavagedGame.R_Pawn.UT_PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void AR_Pawn::UT_PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnUT_PossessedBy = NULL;

	if ( ! pFnUT_PossessedBy )
		pFnUT_PossessedBy = (UFunction*) UObject::GObjObjects()->Data[ 85528 ];

	AR_Pawn_execUT_PossessedBy_Parms UT_PossessedBy_Parms;
	UT_PossessedBy_Parms.C = C;
	UT_PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnUT_PossessedBy, &UT_PossessedBy_Parms, NULL );
};

// Function RavagedGame.R_Pawn.PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void AR_Pawn::PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = (UFunction*) UObject::GObjObjects()->Data[ 85525 ];

	AR_Pawn_execPossessedBy_Parms PossessedBy_Parms;
	PossessedBy_Parms.C = C;
	PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function RavagedGame.R_Pawn.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AR_Pawn::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 85523 ];

	AR_Pawn_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function RavagedGame.R_Pawn.TossInventory
// [0x00824002] 
// Parameters infos:
// class AInventory*              Inv                            ( CPF_Parm )
// struct FVector                 ForceVelocity                  ( CPF_OptionalParm | CPF_Parm )

void AR_Pawn::TossInventory ( class AInventory* Inv, struct FVector ForceVelocity )
{
	static UFunction* pFnTossInventory = NULL;

	if ( ! pFnTossInventory )
		pFnTossInventory = (UFunction*) UObject::GObjObjects()->Data[ 85513 ];

	AR_Pawn_execTossInventory_Parms TossInventory_Parms;
	TossInventory_Parms.Inv = Inv;
	memcpy ( &TossInventory_Parms.ForceVelocity, &ForceVelocity, 0xC );

	this->ProcessEvent ( pFnTossInventory, &TossInventory_Parms, NULL );
};

// Function RavagedGame.R_Pawn.WeaponFired
// [0x00824102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void AR_Pawn::WeaponFired ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation )
{
	static UFunction* pFnWeaponFired = NULL;

	if ( ! pFnWeaponFired )
		pFnWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 85505 ];

	AR_Pawn_execWeaponFired_Parms WeaponFired_Parms;
	WeaponFired_Parms.InWeapon = InWeapon;
	WeaponFired_Parms.bViaReplication = bViaReplication;
	memcpy ( &WeaponFired_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnWeaponFired, &WeaponFired_Parms, NULL );
};

// Function RavagedGame.R_Pawn.IsLocationInHipArea
// [0x00C20002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          AdditionalScale                ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Const | CPF_Parm | CPF_OutParm )
// int                            HitResults                     ( CPF_Parm | CPF_OutParm )

bool AR_Pawn::IsLocationInHipArea ( float AdditionalScale, struct FImpactInfo* Impact, int* HitResults )
{
	static UFunction* pFnIsLocationInHipArea = NULL;

	if ( ! pFnIsLocationInHipArea )
		pFnIsLocationInHipArea = (UFunction*) UObject::GObjObjects()->Data[ 85494 ];

	AR_Pawn_execIsLocationInHipArea_Parms IsLocationInHipArea_Parms;
	IsLocationInHipArea_Parms.AdditionalScale = AdditionalScale;

	this->ProcessEvent ( pFnIsLocationInHipArea, &IsLocationInHipArea_Parms, NULL );

	if ( Impact )
		memcpy ( Impact, &IsLocationInHipArea_Parms.Impact, 0x50 );

	if ( HitResults )
		*HitResults = IsLocationInHipArea_Parms.HitResults;

	return IsLocationInHipArea_Parms.ReturnValue;
};

// Function RavagedGame.R_Pawn.TakeCrotchShot
// [0x00420002] 
// Parameters infos:
// class UClass*                  CrotchShotDamageType           ( CPF_Parm )
// int                            CrotchDamage                   ( CPF_Parm )
// class AController*             InstigatingController          ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void AR_Pawn::TakeCrotchShot ( class UClass* CrotchShotDamageType, int CrotchDamage, class AController* InstigatingController, struct FImpactInfo* Impact )
{
	static UFunction* pFnTakeCrotchShot = NULL;

	if ( ! pFnTakeCrotchShot )
		pFnTakeCrotchShot = (UFunction*) UObject::GObjObjects()->Data[ 85489 ];

	AR_Pawn_execTakeCrotchShot_Parms TakeCrotchShot_Parms;
	TakeCrotchShot_Parms.CrotchShotDamageType = CrotchShotDamageType;
	TakeCrotchShot_Parms.CrotchDamage = CrotchDamage;
	TakeCrotchShot_Parms.InstigatingController = InstigatingController;

	this->ProcessEvent ( pFnTakeCrotchShot, &TakeCrotchShot_Parms, NULL );

	if ( Impact )
		memcpy ( Impact, &TakeCrotchShot_Parms.Impact, 0x50 );
};

// Function RavagedGame.R_Pawn.TakeHeadShot
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  HeadShotDamageType             ( CPF_Parm )
// int                            HeadDamage                     ( CPF_Parm )
// float                          AdditionalScale                ( CPF_Parm )
// class AController*             InstigatingController          ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Const | CPF_Parm | CPF_OutParm )

bool AR_Pawn::TakeHeadShot ( class UClass* HeadShotDamageType, int HeadDamage, float AdditionalScale, class AController* InstigatingController, struct FImpactInfo* Impact )
{
	static UFunction* pFnTakeHeadShot = NULL;

	if ( ! pFnTakeHeadShot )
		pFnTakeHeadShot = (UFunction*) UObject::GObjObjects()->Data[ 85482 ];

	AR_Pawn_execTakeHeadShot_Parms TakeHeadShot_Parms;
	TakeHeadShot_Parms.HeadShotDamageType = HeadShotDamageType;
	TakeHeadShot_Parms.HeadDamage = HeadDamage;
	TakeHeadShot_Parms.AdditionalScale = AdditionalScale;
	TakeHeadShot_Parms.InstigatingController = InstigatingController;

	this->ProcessEvent ( pFnTakeHeadShot, &TakeHeadShot_Parms, NULL );

	if ( Impact )
		memcpy ( Impact, &TakeHeadShot_Parms.Impact, 0x50 );

	return TakeHeadShot_Parms.ReturnValue;
};

// Function RavagedGame.R_Pawn.IsLocationOnHead
// [0x00C20002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          AdditionalScale                ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Const | CPF_Parm | CPF_OutParm )

bool AR_Pawn::IsLocationOnHead ( float AdditionalScale, struct FImpactInfo* Impact )
{
	static UFunction* pFnIsLocationOnHead = NULL;

	if ( ! pFnIsLocationOnHead )
		pFnIsLocationOnHead = (UFunction*) UObject::GObjObjects()->Data[ 85476 ];

	AR_Pawn_execIsLocationOnHead_Parms IsLocationOnHead_Parms;
	IsLocationOnHead_Parms.AdditionalScale = AdditionalScale;

	this->ProcessEvent ( pFnIsLocationOnHead, &IsLocationOnHead_Parms, NULL );

	if ( Impact )
		memcpy ( Impact, &IsLocationOnHead_Parms.Impact, 0x50 );

	return IsLocationOnHead_Parms.ReturnValue;
};

// Function RavagedGame.R_Pawn.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AR_Pawn::DisplayDebug ( class AHUD* H, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 85470 ];

	AR_Pawn_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.H = H;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function RavagedGame.R_Pawn.R_DrawHUD
// [0x00020102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )
// unsigned long                  bSkipSuper                     ( CPF_Parm )

void AR_Pawn::R_DrawHUD ( class AHUD* H, unsigned long bSkipSuper )
{
	static UFunction* pFnR_DrawHUD = NULL;

	if ( ! pFnR_DrawHUD )
		pFnR_DrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 85465 ];

	AR_Pawn_execR_DrawHUD_Parms R_DrawHUD_Parms;
	R_DrawHUD_Parms.H = H;
	R_DrawHUD_Parms.bSkipSuper = bSkipSuper;

	this->ProcessEvent ( pFnR_DrawHUD, &R_DrawHUD_Parms, NULL );
};

// Function RavagedGame.R_Pawn.PlayTinitusEffect
// [0x00020102] 
// Parameters infos:

void AR_Pawn::PlayTinitusEffect ( )
{
	static UFunction* pFnPlayTinitusEffect = NULL;

	if ( ! pFnPlayTinitusEffect )
		pFnPlayTinitusEffect = (UFunction*) UObject::GObjObjects()->Data[ 85464 ];

	AR_Pawn_execPlayTinitusEffect_Parms PlayTinitusEffect_Parms;

	this->ProcessEvent ( pFnPlayTinitusEffect, &PlayTinitusEffect_Parms, NULL );
};

// Function RavagedGame.R_Pawn.StopTinitusEffect
// [0x00020102] 
// Parameters infos:

void AR_Pawn::StopTinitusEffect ( )
{
	static UFunction* pFnStopTinitusEffect = NULL;

	if ( ! pFnStopTinitusEffect )
		pFnStopTinitusEffect = (UFunction*) UObject::GObjObjects()->Data[ 85463 ];

	AR_Pawn_execStopTinitusEffect_Parms StopTinitusEffect_Parms;

	this->ProcessEvent ( pFnStopTinitusEffect, &StopTinitusEffect_Parms, NULL );
};

// Function RavagedGame.R_Pawn.HealTimer
// [0x00020002] 
// Parameters infos:

void AR_Pawn::HealTimer ( )
{
	static UFunction* pFnHealTimer = NULL;

	if ( ! pFnHealTimer )
		pFnHealTimer = (UFunction*) UObject::GObjObjects()->Data[ 85460 ];

	AR_Pawn_execHealTimer_Parms HealTimer_Parms;

	this->ProcessEvent ( pFnHealTimer, &HealTimer_Parms, NULL );
};

// Function RavagedGame.R_Pawn.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AR_Pawn::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 85452 ];

	AR_Pawn_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function RavagedGame.R_Pawn.TakeRadiusDamage
// [0x00024102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// float                          DamageFalloffExponent          ( CPF_OptionalParm | CPF_Parm )

void AR_Pawn::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 85438 ];

	AR_Pawn_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;
	TakeRadiusDamage_Parms.DamageFalloffExponent = DamageFalloffExponent;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function RavagedGame.R_Pawn.PerformDodge
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  DoubleClickMove                ( CPF_Parm )
// struct FVector                 Dir                            ( CPF_Parm )
// struct FVector                 Cross                          ( CPF_Parm )

bool AR_Pawn::PerformDodge ( unsigned char DoubleClickMove, struct FVector Dir, struct FVector Cross )
{
	static UFunction* pFnPerformDodge = NULL;

	if ( ! pFnPerformDodge )
		pFnPerformDodge = (UFunction*) UObject::GObjObjects()->Data[ 85433 ];

	AR_Pawn_execPerformDodge_Parms PerformDodge_Parms;
	PerformDodge_Parms.DoubleClickMove = DoubleClickMove;
	memcpy ( &PerformDodge_Parms.Dir, &Dir, 0xC );
	memcpy ( &PerformDodge_Parms.Cross, &Cross, 0xC );

	this->ProcessEvent ( pFnPerformDodge, &PerformDodge_Parms, NULL );

	return PerformDodge_Parms.ReturnValue;
};

// Function RavagedGame.R_Pawn.ClimbLadder
// [0x00020102] 
// Parameters infos:
// class ALadderVolume*           L                              ( CPF_Parm )

void AR_Pawn::ClimbLadder ( class ALadderVolume* L )
{
	static UFunction* pFnClimbLadder = NULL;

	if ( ! pFnClimbLadder )
		pFnClimbLadder = (UFunction*) UObject::GObjObjects()->Data[ 85431 ];

	AR_Pawn_execClimbLadder_Parms ClimbLadder_Parms;
	ClimbLadder_Parms.L = L;

	this->ProcessEvent ( pFnClimbLadder, &ClimbLadder_Parms, NULL );
};

// Function RavagedGame.R_Pawn.EndClimbLadder
// [0x00020102] 
// Parameters infos:
// class ALadderVolume*           OldLadder                      ( CPF_Parm )

void AR_Pawn::EndClimbLadder ( class ALadderVolume* OldLadder )
{
	static UFunction* pFnEndClimbLadder = NULL;

	if ( ! pFnEndClimbLadder )
		pFnEndClimbLadder = (UFunction*) UObject::GObjObjects()->Data[ 85429 ];

	AR_Pawn_execEndClimbLadder_Parms EndClimbLadder_Parms;
	EndClimbLadder_Parms.OldLadder = OldLadder;

	this->ProcessEvent ( pFnEndClimbLadder, &EndClimbLadder_Parms, NULL );
};

// Function RavagedGame.R_Pawn.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void AR_Pawn::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 85427 ];

	AR_Pawn_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function RavagedGame.R_Pawn.UT_StopDriving
// [0x00820102] 
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )

void AR_Pawn::UT_StopDriving ( class AVehicle* V )
{
	static UFunction* pFnUT_StopDriving = NULL;

	if ( ! pFnUT_StopDriving )
		pFnUT_StopDriving = (UFunction*) UObject::GObjObjects()->Data[ 85423 ];

	AR_Pawn_execUT_StopDriving_Parms UT_StopDriving_Parms;
	UT_StopDriving_Parms.V = V;

	this->ProcessEvent ( pFnUT_StopDriving, &UT_StopDriving_Parms, NULL );
};

// Function RavagedGame.R_Pawn.StopDriving
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )

void AR_Pawn::eventStopDriving ( class AVehicle* V )
{
	static UFunction* pFnStopDriving = NULL;

	if ( ! pFnStopDriving )
		pFnStopDriving = (UFunction*) UObject::GObjObjects()->Data[ 85421 ];

	AR_Pawn_eventStopDriving_Parms StopDriving_Parms;
	StopDriving_Parms.V = V;

	this->ProcessEvent ( pFnStopDriving, &StopDriving_Parms, NULL );
};

// Function RavagedGame.R_Pawn.SetMeshVisibilityInVehicle
// [0x00020102] 
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void AR_Pawn::SetMeshVisibilityInVehicle ( unsigned long bVisible )
{
	static UFunction* pFnSetMeshVisibilityInVehicle = NULL;

	if ( ! pFnSetMeshVisibilityInVehicle )
		pFnSetMeshVisibilityInVehicle = (UFunction*) UObject::GObjObjects()->Data[ 85419 ];

	AR_Pawn_execSetMeshVisibilityInVehicle_Parms SetMeshVisibilityInVehicle_Parms;
	SetMeshVisibilityInVehicle_Parms.bVisible = bVisible;

	this->ProcessEvent ( pFnSetMeshVisibilityInVehicle, &SetMeshVisibilityInVehicle_Parms, NULL );
};

// Function RavagedGame.R_Pawn.UT_StartDriving
// [0x00020102] 
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )

void AR_Pawn::UT_StartDriving ( class AVehicle* V )
{
	static UFunction* pFnUT_StartDriving = NULL;

	if ( ! pFnUT_StartDriving )
		pFnUT_StartDriving = (UFunction*) UObject::GObjObjects()->Data[ 85414 ];

	AR_Pawn_execUT_StartDriving_Parms UT_StartDriving_Parms;
	UT_StartDriving_Parms.V = V;

	this->ProcessEvent ( pFnUT_StartDriving, &UT_StartDriving_Parms, NULL );
};

// Function RavagedGame.R_Pawn.StartDriving
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )

void AR_Pawn::eventStartDriving ( class AVehicle* V )
{
	static UFunction* pFnStartDriving = NULL;

	if ( ! pFnStartDriving )
		pFnStartDriving = (UFunction*) UObject::GObjObjects()->Data[ 85410 ];

	AR_Pawn_eventStartDriving_Parms StartDriving_Parms;
	StartDriving_Parms.V = V;

	this->ProcessEvent ( pFnStartDriving, &StartDriving_Parms, NULL );
};

// Function RavagedGame.R_Pawn.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool AR_Pawn::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 85405 ];

	AR_Pawn_execDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function RavagedGame.R_Pawn.QuickWeaponChanged
// [0x00020102] 
// Parameters infos:
// class AR_Weapon*               NewWeapon                      ( CPF_Parm )

void AR_Pawn::QuickWeaponChanged ( class AR_Weapon* NewWeapon )
{
	static UFunction* pFnQuickWeaponChanged = NULL;

	if ( ! pFnQuickWeaponChanged )
		pFnQuickWeaponChanged = (UFunction*) UObject::GObjObjects()->Data[ 85402 ];

	AR_Pawn_execQuickWeaponChanged_Parms QuickWeaponChanged_Parms;
	QuickWeaponChanged_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnQuickWeaponChanged, &QuickWeaponChanged_Parms, NULL );
};

// Function RavagedGame.R_Pawn.R_GetUTPlayerReplicationInfo
// [0x00020102] 
// Parameters infos:
// class AR_PlayerReplicationInfo* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AR_PlayerReplicationInfo* AR_Pawn::R_GetUTPlayerReplicationInfo ( )
{
	static UFunction* pFnR_GetUTPlayerReplicationInfo = NULL;

	if ( ! pFnR_GetUTPlayerReplicationInfo )
		pFnR_GetUTPlayerReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 85399 ];

	AR_Pawn_execR_GetUTPlayerReplicationInfo_Parms R_GetUTPlayerReplicationInfo_Parms;

	this->ProcessEvent ( pFnR_GetUTPlayerReplicationInfo, &R_GetUTPlayerReplicationInfo_Parms, NULL );

	return R_GetUTPlayerReplicationInfo_Parms.ReturnValue;
};

// Function RavagedGame.R_Pawn.GetFamilyInfo
// [0x00020102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* AR_Pawn::GetFamilyInfo ( )
{
	static UFunction* pFnGetFamilyInfo = NULL;

	if ( ! pFnGetFamilyInfo )
		pFnGetFamilyInfo = (UFunction*) UObject::GObjObjects()->Data[ 85396 ];

	AR_Pawn_execGetFamilyInfo_Parms GetFamilyInfo_Parms;

	this->ProcessEvent ( pFnGetFamilyInfo, &GetFamilyInfo_Parms, NULL );

	return GetFamilyInfo_Parms.ReturnValue;
};

// Function RavagedGame.R_Pawn.FinalizeSetup
// [0x00020002] 
// Parameters infos:

void AR_Pawn::FinalizeSetup ( )
{
	static UFunction* pFnFinalizeSetup = NULL;

	if ( ! pFnFinalizeSetup )
		pFnFinalizeSetup = (UFunction*) UObject::GObjObjects()->Data[ 85395 ];

	AR_Pawn_execFinalizeSetup_Parms FinalizeSetup_Parms;

	this->ProcessEvent ( pFnFinalizeSetup, &FinalizeSetup_Parms, NULL );
};

// Function RavagedGame.R_Pawn.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AR_Pawn::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 85394 ];

	AR_Pawn_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_Pawn.EndProne
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void AR_Pawn::eventEndProne ( float HeightAdjust )
{
	static UFunction* pFnEndProne = NULL;

	if ( ! pFnEndProne )
		pFnEndProne = (UFunction*) UObject::GObjObjects()->Data[ 85392 ];

	AR_Pawn_eventEndProne_Parms EndProne_Parms;
	EndProne_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnEndProne, &EndProne_Parms, NULL );
};

// Function RavagedGame.R_Pawn.StartProne
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void AR_Pawn::eventStartProne ( float HeightAdjust )
{
	static UFunction* pFnStartProne = NULL;

	if ( ! pFnStartProne )
		pFnStartProne = (UFunction*) UObject::GObjObjects()->Data[ 85390 ];

	AR_Pawn_eventStartProne_Parms StartProne_Parms;
	StartProne_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnStartProne, &StartProne_Parms, NULL );
};

// Function RavagedGame.R_Pawn.ModifySpeedFromWeapon
// [0x00020102] 
// Parameters infos:

void AR_Pawn::ModifySpeedFromWeapon ( )
{
	static UFunction* pFnModifySpeedFromWeapon = NULL;

	if ( ! pFnModifySpeedFromWeapon )
		pFnModifySpeedFromWeapon = (UFunction*) UObject::GObjObjects()->Data[ 85389 ];

	AR_Pawn_execModifySpeedFromWeapon_Parms ModifySpeedFromWeapon_Parms;

	this->ProcessEvent ( pFnModifySpeedFromWeapon, &ModifySpeedFromWeapon_Parms, NULL );
};

// Function RavagedGame.R_Pawn.GetCurrentGroundSpeed
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AR_Pawn::GetCurrentGroundSpeed ( )
{
	static UFunction* pFnGetCurrentGroundSpeed = NULL;

	if ( ! pFnGetCurrentGroundSpeed )
		pFnGetCurrentGroundSpeed = (UFunction*) UObject::GObjObjects()->Data[ 85384 ];

	AR_Pawn_execGetCurrentGroundSpeed_Parms GetCurrentGroundSpeed_Parms;

	this->ProcessEvent ( pFnGetCurrentGroundSpeed, &GetCurrentGroundSpeed_Parms, NULL );

	return GetCurrentGroundSpeed_Parms.ReturnValue;
};

// Function RavagedGame.R_Pawn.DoUnSprinting
// [0x00020102] 
// Parameters infos:

void AR_Pawn::DoUnSprinting ( )
{
	static UFunction* pFnDoUnSprinting = NULL;

	if ( ! pFnDoUnSprinting )
		pFnDoUnSprinting = (UFunction*) UObject::GObjObjects()->Data[ 85381 ];

	AR_Pawn_execDoUnSprinting_Parms DoUnSprinting_Parms;

	this->ProcessEvent ( pFnDoUnSprinting, &DoUnSprinting_Parms, NULL );
};

// Function RavagedGame.R_Pawn.DoSprinting
// [0x00020102] 
// Parameters infos:

void AR_Pawn::DoSprinting ( )
{
	static UFunction* pFnDoSprinting = NULL;

	if ( ! pFnDoSprinting )
		pFnDoSprinting = (UFunction*) UObject::GObjObjects()->Data[ 85376 ];

	AR_Pawn_execDoSprinting_Parms DoSprinting_Parms;

	this->ProcessEvent ( pFnDoSprinting, &DoSprinting_Parms, NULL );
};

// Function RavagedGame.R_Pawn.ServerStopSprinting
// [0x002200C2] 
// Parameters infos:

void AR_Pawn::ServerStopSprinting ( )
{
	static UFunction* pFnServerStopSprinting = NULL;

	if ( ! pFnServerStopSprinting )
		pFnServerStopSprinting = (UFunction*) UObject::GObjObjects()->Data[ 85375 ];

	AR_Pawn_execServerStopSprinting_Parms ServerStopSprinting_Parms;

	this->ProcessEvent ( pFnServerStopSprinting, &ServerStopSprinting_Parms, NULL );
};

// Function RavagedGame.R_Pawn.StopSprinting
// [0x00020102] 
// Parameters infos:

void AR_Pawn::StopSprinting ( )
{
	static UFunction* pFnStopSprinting = NULL;

	if ( ! pFnStopSprinting )
		pFnStopSprinting = (UFunction*) UObject::GObjObjects()->Data[ 85374 ];

	AR_Pawn_execStopSprinting_Parms StopSprinting_Parms;

	this->ProcessEvent ( pFnStopSprinting, &StopSprinting_Parms, NULL );
};

// Function RavagedGame.R_Pawn.ServerStartSprinting
// [0x002200C2] 
// Parameters infos:

void AR_Pawn::ServerStartSprinting ( )
{
	static UFunction* pFnServerStartSprinting = NULL;

	if ( ! pFnServerStartSprinting )
		pFnServerStartSprinting = (UFunction*) UObject::GObjObjects()->Data[ 85373 ];

	AR_Pawn_execServerStartSprinting_Parms ServerStartSprinting_Parms;

	this->ProcessEvent ( pFnServerStartSprinting, &ServerStartSprinting_Parms, NULL );
};

// Function RavagedGame.R_Pawn.StartSprinting
// [0x00020102] 
// Parameters infos:

void AR_Pawn::StartSprinting ( )
{
	static UFunction* pFnStartSprinting = NULL;

	if ( ! pFnStartSprinting )
		pFnStartSprinting = (UFunction*) UObject::GObjObjects()->Data[ 85372 ];

	AR_Pawn_execStartSprinting_Parms StartSprinting_Parms;

	this->ProcessEvent ( pFnStartSprinting, &StartSprinting_Parms, NULL );
};

// Function RavagedGame.R_Pawn.DisableVehicleCollisionDetection
// [0x002200C2] 
// Parameters infos:

void AR_Pawn::DisableVehicleCollisionDetection ( )
{
	static UFunction* pFnDisableVehicleCollisionDetection = NULL;

	if ( ! pFnDisableVehicleCollisionDetection )
		pFnDisableVehicleCollisionDetection = (UFunction*) UObject::GObjObjects()->Data[ 85371 ];

	AR_Pawn_execDisableVehicleCollisionDetection_Parms DisableVehicleCollisionDetection_Parms;

	this->ProcessEvent ( pFnDisableVehicleCollisionDetection, &DisableVehicleCollisionDetection_Parms, NULL );
};

// Function RavagedGame.R_Pawn.EnableVehicleCollisionDetection
// [0x002200C2] 
// Parameters infos:

void AR_Pawn::EnableVehicleCollisionDetection ( )
{
	static UFunction* pFnEnableVehicleCollisionDetection = NULL;

	if ( ! pFnEnableVehicleCollisionDetection )
		pFnEnableVehicleCollisionDetection = (UFunction*) UObject::GObjObjects()->Data[ 85370 ];

	AR_Pawn_execEnableVehicleCollisionDetection_Parms EnableVehicleCollisionDetection_Parms;

	this->ProcessEvent ( pFnEnableVehicleCollisionDetection, &EnableVehicleCollisionDetection_Parms, NULL );
};

// Function RavagedGame.R_Pawn.SetCharacterMeshInfo
// [0x00020102] 
// Parameters infos:
// class USkeletalMesh*           SkelMesh                       ( CPF_Parm )
// class UMaterialInterface*      HeadMaterial                   ( CPF_Parm )
// class UMaterialInterface*      BodyMaterial                   ( CPF_Parm )

void AR_Pawn::SetCharacterMeshInfo ( class USkeletalMesh* SkelMesh, class UMaterialInterface* HeadMaterial, class UMaterialInterface* BodyMaterial )
{
	static UFunction* pFnSetCharacterMeshInfo = NULL;

	if ( ! pFnSetCharacterMeshInfo )
		pFnSetCharacterMeshInfo = (UFunction*) UObject::GObjObjects()->Data[ 85364 ];

	AR_Pawn_execSetCharacterMeshInfo_Parms SetCharacterMeshInfo_Parms;
	SetCharacterMeshInfo_Parms.SkelMesh = SkelMesh;
	SetCharacterMeshInfo_Parms.HeadMaterial = HeadMaterial;
	SetCharacterMeshInfo_Parms.BodyMaterial = BodyMaterial;

	this->ProcessEvent ( pFnSetCharacterMeshInfo, &SetCharacterMeshInfo_Parms, NULL );
};

// Function RavagedGame.R_Pawn.VerifyBodyMaterialInstance
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Pawn::VerifyBodyMaterialInstance ( )
{
	static UFunction* pFnVerifyBodyMaterialInstance = NULL;

	if ( ! pFnVerifyBodyMaterialInstance )
		pFnVerifyBodyMaterialInstance = (UFunction*) UObject::GObjObjects()->Data[ 85361 ];

	AR_Pawn_execVerifyBodyMaterialInstance_Parms VerifyBodyMaterialInstance_Parms;

	this->ProcessEvent ( pFnVerifyBodyMaterialInstance, &VerifyBodyMaterialInstance_Parms, NULL );

	return VerifyBodyMaterialInstance_Parms.ReturnValue;
};

// Function RavagedGame.R_Pawn.SpawnHeadGib
// [0x00820102] 
// Parameters infos:
// class UClass*                  UTDamageType                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void AR_Pawn::SpawnHeadGib ( class UClass* UTDamageType, struct FVector HitLocation )
{
	static UFunction* pFnSpawnHeadGib = NULL;

	if ( ! pFnSpawnHeadGib )
		pFnSpawnHeadGib = (UFunction*) UObject::GObjObjects()->Data[ 85351 ];

	AR_Pawn_execSpawnHeadGib_Parms SpawnHeadGib_Parms;
	SpawnHeadGib_Parms.UTDamageType = UTDamageType;
	memcpy ( &SpawnHeadGib_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSpawnHeadGib, &SpawnHeadGib_Parms, NULL );
};

// Function RavagedGame.R_Pawn.ProcessViewRotation
// [0x00C20102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void AR_Pawn::ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 85341 ];

	AR_Pawn_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );
};

// Function RavagedGame.R_Pawn.ProneAimAdjustBinarySearch
// [0x00C20102] 
// Parameters infos:
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )

void AR_Pawn::ProneAimAdjustBinarySearch ( struct FRotator* out_ViewRotation )
{
	static UFunction* pFnProneAimAdjustBinarySearch = NULL;

	if ( ! pFnProneAimAdjustBinarySearch )
		pFnProneAimAdjustBinarySearch = (UFunction*) UObject::GObjObjects()->Data[ 85328 ];

	AR_Pawn_execProneAimAdjustBinarySearch_Parms ProneAimAdjustBinarySearch_Parms;

	this->ProcessEvent ( pFnProneAimAdjustBinarySearch, &ProneAimAdjustBinarySearch_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProneAimAdjustBinarySearch_Parms.out_ViewRotation, 0xC );
};

// Function RavagedGame.R_Pawn.GetAdjustedAimFor3P
// [0x00820102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator AR_Pawn::GetAdjustedAimFor3P ( class AWeapon* W, struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAimFor3P = NULL;

	if ( ! pFnGetAdjustedAimFor3P )
		pFnGetAdjustedAimFor3P = (UFunction*) UObject::GObjObjects()->Data[ 85316 ];

	AR_Pawn_execGetAdjustedAimFor3P_Parms GetAdjustedAimFor3P_Parms;
	GetAdjustedAimFor3P_Parms.W = W;
	memcpy ( &GetAdjustedAimFor3P_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAimFor3P, &GetAdjustedAimFor3P_Parms, NULL );

	return GetAdjustedAimFor3P_Parms.ReturnValue;
};

// Function RavagedGame.R_Pawn.GetAdjustedAimFor
// [0x00020102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator AR_Pawn::GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAimFor = NULL;

	if ( ! pFnGetAdjustedAimFor )
		pFnGetAdjustedAimFor = (UFunction*) UObject::GObjObjects()->Data[ 85312 ];

	AR_Pawn_execGetAdjustedAimFor_Parms GetAdjustedAimFor_Parms;
	GetAdjustedAimFor_Parms.W = W;
	memcpy ( &GetAdjustedAimFor_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAimFor, &GetAdjustedAimFor_Parms, NULL );

	return GetAdjustedAimFor_Parms.ReturnValue;
};

// Function RavagedGame.R_Pawn.EncroachingOn
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AR_Pawn::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 85309 ];

	AR_Pawn_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function RavagedGame.R_HUD.ToggleInventory
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void AR_HUD::ToggleInventory ( )
{
	static UFunction* pFnToggleInventory = NULL;

	if ( ! pFnToggleInventory )
		pFnToggleInventory = (UFunction*) UObject::GObjObjects()->Data[ 84477 ];

	AR_HUD_execToggleInventory_Parms ToggleInventory_Parms;

	this->ProcessEvent ( pFnToggleInventory, &ToggleInventory_Parms, NULL );
};

// Function RavagedGame.R_HUD.DrawGFxHUDToolTip
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ToolTip                        ( CPF_Parm | CPF_NeedCtorLink )

void AR_HUD::DrawGFxHUDToolTip ( class APlayerController* PC, struct FString Command, struct FString ToolTip )
{
	static UFunction* pFnDrawGFxHUDToolTip = NULL;

	if ( ! pFnDrawGFxHUDToolTip )
		pFnDrawGFxHUDToolTip = (UFunction*) UObject::GObjObjects()->Data[ 84470 ];

	AR_HUD_execDrawGFxHUDToolTip_Parms DrawGFxHUDToolTip_Parms;
	DrawGFxHUDToolTip_Parms.PC = PC;
	memcpy ( &DrawGFxHUDToolTip_Parms.Command, &Command, 0xC );
	memcpy ( &DrawGFxHUDToolTip_Parms.ToolTip, &ToolTip, 0xC );

	this->ProcessEvent ( pFnDrawGFxHUDToolTip, &DrawGFxHUDToolTip_Parms, NULL );
};

// Function RavagedGame.R_HUD.TogglePauseMenu
// [0x00020002] 
// Parameters infos:

void AR_HUD::TogglePauseMenu ( )
{
	static UFunction* pFnTogglePauseMenu = NULL;

	if ( ! pFnTogglePauseMenu )
		pFnTogglePauseMenu = (UFunction*) UObject::GObjObjects()->Data[ 84469 ];

	AR_HUD_execTogglePauseMenu_Parms TogglePauseMenu_Parms;

	this->ProcessEvent ( pFnTogglePauseMenu, &TogglePauseMenu_Parms, NULL );
};

// Function RavagedGame.R_HUD.AddPostRenderedActor
// [0x00020002] 
// Parameters infos:
// class AActor*                  A                              ( CPF_Parm )

void AR_HUD::AddPostRenderedActor ( class AActor* A )
{
	static UFunction* pFnAddPostRenderedActor = NULL;

	if ( ! pFnAddPostRenderedActor )
		pFnAddPostRenderedActor = (UFunction*) UObject::GObjObjects()->Data[ 84467 ];

	AR_HUD_execAddPostRenderedActor_Parms AddPostRenderedActor_Parms;
	AddPostRenderedActor_Parms.A = A;

	this->ProcessEvent ( pFnAddPostRenderedActor, &AddPostRenderedActor_Parms, NULL );
};

// Function RavagedGame.R_HUD.ToggleFullMap
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_HUD::ToggleFullMap ( )
{
	static UFunction* pFnToggleFullMap = NULL;

	if ( ! pFnToggleFullMap )
		pFnToggleFullMap = (UFunction*) UObject::GObjObjects()->Data[ 84466 ];

	AR_HUD_execToggleFullMap_Parms ToggleFullMap_Parms;

	this->ProcessEvent ( pFnToggleFullMap, &ToggleFullMap_Parms, NULL );
};

// Function RavagedGame.R_HUD.SetMinimapZoom
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          ZoomDir                        ( CPF_Parm )

void AR_HUD::SetMinimapZoom ( float ZoomDir )
{
	static UFunction* pFnSetMinimapZoom = NULL;

	if ( ! pFnSetMinimapZoom )
		pFnSetMinimapZoom = (UFunction*) UObject::GObjObjects()->Data[ 84464 ];

	AR_HUD_execSetMinimapZoom_Parms SetMinimapZoom_Parms;
	SetMinimapZoom_Parms.ZoomDir = ZoomDir;

	this->ProcessEvent ( pFnSetMinimapZoom, &SetMinimapZoom_Parms, NULL );
};

// Function RavagedGame.R_HUD.ShowMotD
// [0x00020002] 
// Parameters infos:

void AR_HUD::ShowMotD ( )
{
	static UFunction* pFnShowMotD = NULL;

	if ( ! pFnShowMotD )
		pFnShowMotD = (UFunction*) UObject::GObjObjects()->Data[ 84463 ];

	AR_HUD_execShowMotD_Parms ShowMotD_Parms;

	this->ProcessEvent ( pFnShowMotD, &ShowMotD_Parms, NULL );
};

// Function RavagedGame.R_HUD.SetMotD
// [0x00020002] 
// Parameters infos:
// struct FString                 MotD                           ( CPF_Parm | CPF_NeedCtorLink )

void AR_HUD::SetMotD ( struct FString MotD )
{
	static UFunction* pFnSetMotD = NULL;

	if ( ! pFnSetMotD )
		pFnSetMotD = (UFunction*) UObject::GObjObjects()->Data[ 84461 ];

	AR_HUD_execSetMotD_Parms SetMotD_Parms;
	memcpy ( &SetMotD_Parms.MotD, &MotD, 0xC );

	this->ProcessEvent ( pFnSetMotD, &SetMotD_Parms, NULL );
};

// Function RavagedGame.R_HUD.ClampLerp
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               A                              ( CPF_Parm )
// struct FVector2D               B                              ( CPF_Parm )
// float                          val                            ( CPF_Parm )

float AR_HUD::ClampLerp ( struct FVector2D A, struct FVector2D B, float val )
{
	static UFunction* pFnClampLerp = NULL;

	if ( ! pFnClampLerp )
		pFnClampLerp = (UFunction*) UObject::GObjObjects()->Data[ 84456 ];

	AR_HUD_execClampLerp_Parms ClampLerp_Parms;
	memcpy ( &ClampLerp_Parms.A, &A, 0x8 );
	memcpy ( &ClampLerp_Parms.B, &B, 0x8 );
	ClampLerp_Parms.val = val;

	this->ProcessEvent ( pFnClampLerp, &ClampLerp_Parms, NULL );

	return ClampLerp_Parms.ReturnValue;
};

// Function RavagedGame.R_HUD.DrawScaledNumber
// [0x00820102] 
// Parameters infos:
// struct FVector                 DrawLoc                        ( CPF_Parm )
// int                            DrawNum                        ( CPF_Parm )
// float                          TargetDrawScale                ( CPF_Parm )

void AR_HUD::DrawScaledNumber ( struct FVector DrawLoc, int DrawNum, float TargetDrawScale )
{
	static UFunction* pFnDrawScaledNumber = NULL;

	if ( ! pFnDrawScaledNumber )
		pFnDrawScaledNumber = (UFunction*) UObject::GObjObjects()->Data[ 84434 ];

	AR_HUD_execDrawScaledNumber_Parms DrawScaledNumber_Parms;
	memcpy ( &DrawScaledNumber_Parms.DrawLoc, &DrawLoc, 0xC );
	DrawScaledNumber_Parms.DrawNum = DrawNum;
	DrawScaledNumber_Parms.TargetDrawScale = TargetDrawScale;

	this->ProcessEvent ( pFnDrawScaledNumber, &DrawScaledNumber_Parms, NULL );
};

// Function RavagedGame.R_HUD.DrawScaledCP
// [0x00824102] 
// Parameters infos:
// struct FVector                 Loc                            ( CPF_Parm )
// float                          TargetDrawScale                ( CPF_Parm )
// class UTexture2D*              Tex                            ( CPF_Parm )
// float                          TargetDist                     ( CPF_Parm )
// unsigned long                  bDrawWhenOffScreen             ( CPF_OptionalParm | CPF_Parm )

void AR_HUD::DrawScaledCP ( struct FVector Loc, float TargetDrawScale, class UTexture2D* Tex, float TargetDist, unsigned long bDrawWhenOffScreen )
{
	static UFunction* pFnDrawScaledCP = NULL;

	if ( ! pFnDrawScaledCP )
		pFnDrawScaledCP = (UFunction*) UObject::GObjObjects()->Data[ 84410 ];

	AR_HUD_execDrawScaledCP_Parms DrawScaledCP_Parms;
	memcpy ( &DrawScaledCP_Parms.Loc, &Loc, 0xC );
	DrawScaledCP_Parms.TargetDrawScale = TargetDrawScale;
	DrawScaledCP_Parms.Tex = Tex;
	DrawScaledCP_Parms.TargetDist = TargetDist;
	DrawScaledCP_Parms.bDrawWhenOffScreen = bDrawWhenOffScreen;

	this->ProcessEvent ( pFnDrawScaledCP, &DrawScaledCP_Parms, NULL );
};

// Function RavagedGame.R_HUD.DrawUncapBase
// [0x00020102] 
// Parameters infos:
// class AR_Thrust_ControlPoint*  tempCP                         ( CPF_Parm )
// float                          curScale                       ( CPF_Parm )

void AR_HUD::DrawUncapBase ( class AR_Thrust_ControlPoint* tempCP, float curScale )
{
	static UFunction* pFnDrawUncapBase = NULL;

	if ( ! pFnDrawUncapBase )
		pFnDrawUncapBase = (UFunction*) UObject::GObjObjects()->Data[ 84404 ];

	AR_HUD_execDrawUncapBase_Parms DrawUncapBase_Parms;
	DrawUncapBase_Parms.tempCP = tempCP;
	DrawUncapBase_Parms.curScale = curScale;

	this->ProcessEvent ( pFnDrawUncapBase, &DrawUncapBase_Parms, NULL );
};

// Function RavagedGame.R_HUD.DrawControlPoints
// [0x00820102] 
// Parameters infos:
// int                            teamIdx                        ( CPF_Parm )

void AR_HUD::DrawControlPoints ( int teamIdx )
{
	static UFunction* pFnDrawControlPoints = NULL;

	if ( ! pFnDrawControlPoints )
		pFnDrawControlPoints = (UFunction*) UObject::GObjObjects()->Data[ 84394 ];

	AR_HUD_execDrawControlPoints_Parms DrawControlPoints_Parms;
	DrawControlPoints_Parms.teamIdx = teamIdx;

	this->ProcessEvent ( pFnDrawControlPoints, &DrawControlPoints_Parms, NULL );
};

// Function RavagedGame.R_HUD.Hide1pHUD
// [0x00020100] 
// Parameters infos:
// unsigned long                  bVis                           ( CPF_Parm )

void AR_HUD::Hide1pHUD ( unsigned long bVis )
{
	static UFunction* pFnHide1pHUD = NULL;

	if ( ! pFnHide1pHUD )
		pFnHide1pHUD = (UFunction*) UObject::GObjObjects()->Data[ 84392 ];

	AR_HUD_execHide1pHUD_Parms Hide1pHUD_Parms;
	Hide1pHUD_Parms.bVis = bVis;

	this->ProcessEvent ( pFnHide1pHUD, &Hide1pHUD_Parms, NULL );
};

// Function RavagedGame.R_HUD.SuperPostRender
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AR_HUD::eventSuperPostRender ( )
{
	static UFunction* pFnSuperPostRender = NULL;

	if ( ! pFnSuperPostRender )
		pFnSuperPostRender = (UFunction*) UObject::GObjObjects()->Data[ 84390 ];

	AR_HUD_eventSuperPostRender_Parms SuperPostRender_Parms;

	this->ProcessEvent ( pFnSuperPostRender, &SuperPostRender_Parms, NULL );
};

// Function RavagedGame.R_HUD.UpdateDeployButton
// [0x00020002] 
// Parameters infos:
// struct FString                 strTop                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 strBottom                      ( CPF_Parm | CPF_NeedCtorLink )

void AR_HUD::UpdateDeployButton ( struct FString strTop, struct FString strBottom )
{
	static UFunction* pFnUpdateDeployButton = NULL;

	if ( ! pFnUpdateDeployButton )
		pFnUpdateDeployButton = (UFunction*) UObject::GObjObjects()->Data[ 84387 ];

	AR_HUD_execUpdateDeployButton_Parms UpdateDeployButton_Parms;
	memcpy ( &UpdateDeployButton_Parms.strTop, &strTop, 0xC );
	memcpy ( &UpdateDeployButton_Parms.strBottom, &strBottom, 0xC );

	this->ProcessEvent ( pFnUpdateDeployButton, &UpdateDeployButton_Parms, NULL );
};

// Function RavagedGame.R_HUD.PostRender
// [0x00020002] 
// Parameters infos:

void AR_HUD::PostRender ( )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = (UFunction*) UObject::GObjObjects()->Data[ 84376 ];

	AR_HUD_execPostRender_Parms PostRender_Parms;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function RavagedGame.R_HUD.Timer
// [0x00020102] 
// Parameters infos:

void AR_HUD::Timer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 84373 ];

	AR_HUD_execTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function RavagedGame.R_HUD.AddConsoleMessage
// [0x00024002] 
// Parameters infos:
// struct FString                 M                              ( CPF_Parm | CPF_NeedCtorLink )
// class UClass*                  InMessageClass                 ( CPF_Parm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// float                          Lifetime                       ( CPF_OptionalParm | CPF_Parm )

void AR_HUD::AddConsoleMessage ( struct FString M, class UClass* InMessageClass, class APlayerReplicationInfo* PRI, float Lifetime )
{
	static UFunction* pFnAddConsoleMessage = NULL;

	if ( ! pFnAddConsoleMessage )
		pFnAddConsoleMessage = (UFunction*) UObject::GObjObjects()->Data[ 84368 ];

	AR_HUD_execAddConsoleMessage_Parms AddConsoleMessage_Parms;
	memcpy ( &AddConsoleMessage_Parms.M, &M, 0xC );
	AddConsoleMessage_Parms.InMessageClass = InMessageClass;
	AddConsoleMessage_Parms.PRI = PRI;
	AddConsoleMessage_Parms.Lifetime = Lifetime;

	this->ProcessEvent ( pFnAddConsoleMessage, &AddConsoleMessage_Parms, NULL );
};

// Function RavagedGame.R_HUD.LocalizedMessage
// [0x00024002] 
// Parameters infos:
// class UClass*                  InMessageClass                 ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_Parm )
// struct FString                 CriticalString                 ( CPF_Parm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_Parm )
// float                          Position                       ( CPF_Parm )
// float                          Lifetime                       ( CPF_Parm )
// int                            FontSize                       ( CPF_Parm )
// struct FColor                  DrawColor                      ( CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AR_HUD::LocalizedMessage ( class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, class UObject* OptionalObject )
{
	static UFunction* pFnLocalizedMessage = NULL;

	if ( ! pFnLocalizedMessage )
		pFnLocalizedMessage = (UFunction*) UObject::GObjObjects()->Data[ 84356 ];

	AR_HUD_execLocalizedMessage_Parms LocalizedMessage_Parms;
	LocalizedMessage_Parms.InMessageClass = InMessageClass;
	LocalizedMessage_Parms.RelatedPRI = RelatedPRI;
	LocalizedMessage_Parms.RelatedPRI01 = RelatedPRI01;
	memcpy ( &LocalizedMessage_Parms.CriticalString, &CriticalString, 0xC );
	LocalizedMessage_Parms.Switch = Switch;
	LocalizedMessage_Parms.Position = Position;
	LocalizedMessage_Parms.Lifetime = Lifetime;
	LocalizedMessage_Parms.FontSize = FontSize;
	memcpy ( &LocalizedMessage_Parms.DrawColor, &DrawColor, 0x4 );
	LocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnLocalizedMessage, &LocalizedMessage_Parms, NULL );
};

// Function RavagedGame.R_HUD.DrawHUD
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AR_HUD::eventDrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 84351 ];

	AR_HUD_eventDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function RavagedGame.R_HUD.OnCloseAnimComplete
// [0x00020002] 
// Parameters infos:

void AR_HUD::OnCloseAnimComplete ( )
{
	static UFunction* pFnOnCloseAnimComplete = NULL;

	if ( ! pFnOnCloseAnimComplete )
		pFnOnCloseAnimComplete = (UFunction*) UObject::GObjObjects()->Data[ 84350 ];

	AR_HUD_execOnCloseAnimComplete_Parms OnCloseAnimComplete_Parms;

	this->ProcessEvent ( pFnOnCloseAnimComplete, &OnCloseAnimComplete_Parms, NULL );
};

// Function RavagedGame.R_HUD.SetShowScores
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bEnableShowScores              ( CPF_Parm )

void AR_HUD::SetShowScores ( unsigned long bEnableShowScores )
{
	static UFunction* pFnSetShowScores = NULL;

	if ( ! pFnSetShowScores )
		pFnSetShowScores = (UFunction*) UObject::GObjObjects()->Data[ 84347 ];

	AR_HUD_execSetShowScores_Parms SetShowScores_Parms;
	SetShowScores_Parms.bEnableShowScores = bEnableShowScores;

	this->ProcessEvent ( pFnSetShowScores, &SetShowScores_Parms, NULL );
};

// Function RavagedGame.R_HUD.SetShowLeaderboard
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bEnableLeaderboard             ( CPF_Parm )

void AR_HUD::SetShowLeaderboard ( unsigned long bEnableLeaderboard )
{
	static UFunction* pFnSetShowLeaderboard = NULL;

	if ( ! pFnSetShowLeaderboard )
		pFnSetShowLeaderboard = (UFunction*) UObject::GObjObjects()->Data[ 84345 ];

	AR_HUD_execSetShowLeaderboard_Parms SetShowLeaderboard_Parms;
	SetShowLeaderboard_Parms.bEnableLeaderboard = bEnableLeaderboard;

	this->ProcessEvent ( pFnSetShowLeaderboard, &SetShowLeaderboard_Parms, NULL );
};

// Function RavagedGame.R_HUD.ShowOutOfBounds
// [0x00020002] 
// Parameters infos:

void AR_HUD::ShowOutOfBounds ( )
{
	static UFunction* pFnShowOutOfBounds = NULL;

	if ( ! pFnShowOutOfBounds )
		pFnShowOutOfBounds = (UFunction*) UObject::GObjObjects()->Data[ 84338 ];

	AR_HUD_execShowOutOfBounds_Parms ShowOutOfBounds_Parms;

	this->ProcessEvent ( pFnShowOutOfBounds, &ShowOutOfBounds_Parms, NULL );
};

// Function RavagedGame.R_HUD.ResolutionChanged
// [0x00020002] 
// Parameters infos:

void AR_HUD::ResolutionChanged ( )
{
	static UFunction* pFnResolutionChanged = NULL;

	if ( ! pFnResolutionChanged )
		pFnResolutionChanged = (UFunction*) UObject::GObjObjects()->Data[ 84337 ];

	AR_HUD_execResolutionChanged_Parms ResolutionChanged_Parms;

	this->ProcessEvent ( pFnResolutionChanged, &ResolutionChanged_Parms, NULL );
};

// Function RavagedGame.R_HUD.DisplayHit
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitDir                         ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void AR_HUD::DisplayHit ( struct FVector HitDir, int Damage, class UClass* DamageType )
{
	static UFunction* pFnDisplayHit = NULL;

	if ( ! pFnDisplayHit )
		pFnDisplayHit = (UFunction*) UObject::GObjObjects()->Data[ 84333 ];

	AR_HUD_execDisplayHit_Parms DisplayHit_Parms;
	memcpy ( &DisplayHit_Parms.HitDir, &HitDir, 0xC );
	DisplayHit_Parms.Damage = Damage;
	DisplayHit_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnDisplayHit, &DisplayHit_Parms, NULL );
};

// Function RavagedGame.R_HUD.SetVisible
// [0x00020002] 
// Parameters infos:
// unsigned long                  bNewVisible                    ( CPF_Parm )

void AR_HUD::SetVisible ( unsigned long bNewVisible )
{
	static UFunction* pFnSetVisible = NULL;

	if ( ! pFnSetVisible )
		pFnSetVisible = (UFunction*) UObject::GObjObjects()->Data[ 84331 ];

	AR_HUD_execSetVisible_Parms SetVisible_Parms;
	SetVisible_Parms.bNewVisible = bNewVisible;

	this->ProcessEvent ( pFnSetVisible, &SetVisible_Parms, NULL );
};

// Function RavagedGame.R_HUD.GetLocalPlayerOwnerIndex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AR_HUD::GetLocalPlayerOwnerIndex ( )
{
	static UFunction* pFnGetLocalPlayerOwnerIndex = NULL;

	if ( ! pFnGetLocalPlayerOwnerIndex )
		pFnGetLocalPlayerOwnerIndex = (UFunction*) UObject::GObjObjects()->Data[ 84329 ];

	AR_HUD_execGetLocalPlayerOwnerIndex_Parms GetLocalPlayerOwnerIndex_Parms;

	this->ProcessEvent ( pFnGetLocalPlayerOwnerIndex, &GetLocalPlayerOwnerIndex_Parms, NULL );

	return GetLocalPlayerOwnerIndex_Parms.ReturnValue;
};

// Function RavagedGame.R_HUD.AddSpawnPoints
// [0x00020000] 
// Parameters infos:

void AR_HUD::AddSpawnPoints ( )
{
	static UFunction* pFnAddSpawnPoints = NULL;

	if ( ! pFnAddSpawnPoints )
		pFnAddSpawnPoints = (UFunction*) UObject::GObjObjects()->Data[ 84328 ];

	AR_HUD_execAddSpawnPoints_Parms AddSpawnPoints_Parms;

	this->ProcessEvent ( pFnAddSpawnPoints, &AddSpawnPoints_Parms, NULL );
};

// Function RavagedGame.R_HUD.CreateChatMovie
// [0x00020002] 
// Parameters infos:

void AR_HUD::CreateChatMovie ( )
{
	static UFunction* pFnCreateChatMovie = NULL;

	if ( ! pFnCreateChatMovie )
		pFnCreateChatMovie = (UFunction*) UObject::GObjObjects()->Data[ 84327 ];

	AR_HUD_execCreateChatMovie_Parms CreateChatMovie_Parms;

	this->ProcessEvent ( pFnCreateChatMovie, &CreateChatMovie_Parms, NULL );
};

// Function RavagedGame.R_HUD.RoundIntroHUDMovie
// [0x00020000] 
// Parameters infos:

void AR_HUD::RoundIntroHUDMovie ( )
{
	static UFunction* pFnRoundIntroHUDMovie = NULL;

	if ( ! pFnRoundIntroHUDMovie )
		pFnRoundIntroHUDMovie = (UFunction*) UObject::GObjObjects()->Data[ 84326 ];

	AR_HUD_execRoundIntroHUDMovie_Parms RoundIntroHUDMovie_Parms;

	this->ProcessEvent ( pFnRoundIntroHUDMovie, &RoundIntroHUDMovie_Parms, NULL );
};

// Function RavagedGame.R_HUD.CreateLeaderBoardMovie
// [0x00020002] 
// Parameters infos:

void AR_HUD::CreateLeaderBoardMovie ( )
{
	static UFunction* pFnCreateLeaderBoardMovie = NULL;

	if ( ! pFnCreateLeaderBoardMovie )
		pFnCreateLeaderBoardMovie = (UFunction*) UObject::GObjObjects()->Data[ 84325 ];

	AR_HUD_execCreateLeaderBoardMovie_Parms CreateLeaderBoardMovie_Parms;

	this->ProcessEvent ( pFnCreateLeaderBoardMovie, &CreateLeaderBoardMovie_Parms, NULL );
};

// Function RavagedGame.R_HUD.CreateScoreBoardMovie
// [0x00020002] 
// Parameters infos:

void AR_HUD::CreateScoreBoardMovie ( )
{
	static UFunction* pFnCreateScoreBoardMovie = NULL;

	if ( ! pFnCreateScoreBoardMovie )
		pFnCreateScoreBoardMovie = (UFunction*) UObject::GObjObjects()->Data[ 84324 ];

	AR_HUD_execCreateScoreBoardMovie_Parms CreateScoreBoardMovie_Parms;

	this->ProcessEvent ( pFnCreateScoreBoardMovie, &CreateScoreBoardMovie_Parms, NULL );
};

// Function RavagedGame.R_HUD.CreateHUDMovie
// [0x00020002] 
// Parameters infos:

void AR_HUD::CreateHUDMovie ( )
{
	static UFunction* pFnCreateHUDMovie = NULL;

	if ( ! pFnCreateHUDMovie )
		pFnCreateHUDMovie = (UFunction*) UObject::GObjObjects()->Data[ 84323 ];

	AR_HUD_execCreateHUDMovie_Parms CreateHUDMovie_Parms;

	this->ProcessEvent ( pFnCreateHUDMovie, &CreateHUDMovie_Parms, NULL );
};

// Function RavagedGame.R_HUD.RemoveMovies
// [0x00020002] 
// Parameters infos:

void AR_HUD::RemoveMovies ( )
{
	static UFunction* pFnRemoveMovies = NULL;

	if ( ! pFnRemoveMovies )
		pFnRemoveMovies = (UFunction*) UObject::GObjObjects()->Data[ 84322 ];

	AR_HUD_execRemoveMovies_Parms RemoveMovies_Parms;

	this->ProcessEvent ( pFnRemoveMovies, &RemoveMovies_Parms, NULL );
};

// Function RavagedGame.R_HUD.MinimapZoomOut
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_HUD::MinimapZoomOut ( )
{
	static UFunction* pFnMinimapZoomOut = NULL;

	if ( ! pFnMinimapZoomOut )
		pFnMinimapZoomOut = (UFunction*) UObject::GObjObjects()->Data[ 84321 ];

	AR_HUD_execMinimapZoomOut_Parms MinimapZoomOut_Parms;

	this->ProcessEvent ( pFnMinimapZoomOut, &MinimapZoomOut_Parms, NULL );
};

// Function RavagedGame.R_HUD.MinimapZoomIn
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_HUD::MinimapZoomIn ( )
{
	static UFunction* pFnMinimapZoomIn = NULL;

	if ( ! pFnMinimapZoomIn )
		pFnMinimapZoomIn = (UFunction*) UObject::GObjObjects()->Data[ 84320 ];

	AR_HUD_execMinimapZoomIn_Parms MinimapZoomIn_Parms;

	this->ProcessEvent ( pFnMinimapZoomIn, &MinimapZoomIn_Parms, NULL );
};

// Function RavagedGame.R_HUD.BeginTeamChat
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bChat                          ( CPF_Parm )

void AR_HUD::BeginTeamChat ( unsigned long bChat )
{
	static UFunction* pFnBeginTeamChat = NULL;

	if ( ! pFnBeginTeamChat )
		pFnBeginTeamChat = (UFunction*) UObject::GObjObjects()->Data[ 84317 ];

	AR_HUD_execBeginTeamChat_Parms BeginTeamChat_Parms;
	BeginTeamChat_Parms.bChat = bChat;

	this->ProcessEvent ( pFnBeginTeamChat, &BeginTeamChat_Parms, NULL );
};

// Function RavagedGame.R_HUD.BeginChat
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bChat                          ( CPF_Parm )

void AR_HUD::BeginChat ( unsigned long bChat )
{
	static UFunction* pFnBeginChat = NULL;

	if ( ! pFnBeginChat )
		pFnBeginChat = (UFunction*) UObject::GObjObjects()->Data[ 84313 ];

	AR_HUD_execBeginChat_Parms BeginChat_Parms;
	BeginChat_Parms.bChat = bChat;

	this->ProcessEvent ( pFnBeginChat, &BeginChat_Parms, NULL );
};

// Function RavagedGame.R_HUD.UpdateTinitus
// [0x00020002] 
// Parameters infos:

void AR_HUD::UpdateTinitus ( )
{
	static UFunction* pFnUpdateTinitus = NULL;

	if ( ! pFnUpdateTinitus )
		pFnUpdateTinitus = (UFunction*) UObject::GObjObjects()->Data[ 84312 ];

	AR_HUD_execUpdateTinitus_Parms UpdateTinitus_Parms;

	this->ProcessEvent ( pFnUpdateTinitus, &UpdateTinitus_Parms, NULL );
};

// Function RavagedGame.R_HUD.NotifyBindPostProcessEffects
// [0x00020002] 
// Parameters infos:

void AR_HUD::NotifyBindPostProcessEffects ( )
{
	static UFunction* pFnNotifyBindPostProcessEffects = NULL;

	if ( ! pFnNotifyBindPostProcessEffects )
		pFnNotifyBindPostProcessEffects = (UFunction*) UObject::GObjObjects()->Data[ 84311 ];

	AR_HUD_execNotifyBindPostProcessEffects_Parms NotifyBindPostProcessEffects_Parms;

	this->ProcessEvent ( pFnNotifyBindPostProcessEffects, &NotifyBindPostProcessEffects_Parms, NULL );
};

// Function RavagedGame.R_HUD.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AR_HUD::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 84310 ];

	AR_HUD_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_HUD.GRIFound
// [0x00020102] 
// Parameters infos:

void AR_HUD::GRIFound ( )
{
	static UFunction* pFnGRIFound = NULL;

	if ( ! pFnGRIFound )
		pFnGRIFound = (UFunction*) UObject::GObjObjects()->Data[ 84309 ];

	AR_HUD_execGRIFound_Parms GRIFound_Parms;

	this->ProcessEvent ( pFnGRIFound, &GRIFound_Parms, NULL );
};

// Function RavagedGame.R_HUD.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_HUD::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 84308 ];

	AR_HUD_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_HUD.GetSupplyObjects
// [0x00020102] 
// Parameters infos:

void AR_HUD::GetSupplyObjects ( )
{
	static UFunction* pFnGetSupplyObjects = NULL;

	if ( ! pFnGetSupplyObjects )
		pFnGetSupplyObjects = (UFunction*) UObject::GObjObjects()->Data[ 84306 ];

	AR_HUD_execGetSupplyObjects_Parms GetSupplyObjects_Parms;

	this->ProcessEvent ( pFnGetSupplyObjects, &GetSupplyObjects_Parms, NULL );
};

// Function RavagedGame.R_HUD.GRIisReady
// [0x00020100] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_HUD::GRIisReady ( )
{
	static UFunction* pFnGRIisReady = NULL;

	if ( ! pFnGRIisReady )
		pFnGRIisReady = (UFunction*) UObject::GObjObjects()->Data[ 84304 ];

	AR_HUD_execGRIisReady_Parms GRIisReady_Parms;

	this->ProcessEvent ( pFnGRIisReady, &GRIisReady_Parms, NULL );

	return GRIisReady_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.AttachFlag
// [0x00020102] 
// Parameters infos:
// class AUTCarriedObject*        FlagActor                      ( CPF_Parm )
// class APawn*                   NewDriver                      ( CPF_Parm )

void AR_Vehicle::AttachFlag ( class AUTCarriedObject* FlagActor, class APawn* NewDriver )
{
	static UFunction* pFnAttachFlag = NULL;

	if ( ! pFnAttachFlag )
		pFnAttachFlag = (UFunction*) UObject::GObjObjects()->Data[ 87341 ];

	AR_Vehicle_execAttachFlag_Parms AttachFlag_Parms;
	AttachFlag_Parms.FlagActor = FlagActor;
	AttachFlag_Parms.NewDriver = NewDriver;

	this->ProcessEvent ( pFnAttachFlag, &AttachFlag_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.PostRenderFor
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void AR_Vehicle::eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnPostRenderFor = NULL;

	if ( ! pFnPostRenderFor )
		pFnPostRenderFor = (UFunction*) UObject::GObjObjects()->Data[ 87323 ];

	AR_Vehicle_eventPostRenderFor_Parms PostRenderFor_Parms;
	PostRenderFor_Parms.PC = PC;
	PostRenderFor_Parms.Canvas = Canvas;
	memcpy ( &PostRenderFor_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &PostRenderFor_Parms.CameraDir, &CameraDir, 0xC );

	this->ProcessEvent ( pFnPostRenderFor, &PostRenderFor_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.RenderToolTips
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// float                          Dist                           ( CPF_Parm )

void AR_Vehicle::eventRenderToolTips ( class APlayerController* PC, class UCanvas* Canvas, float Dist )
{
	static UFunction* pFnRenderToolTips = NULL;

	if ( ! pFnRenderToolTips )
		pFnRenderToolTips = (UFunction*) UObject::GObjObjects()->Data[ 87317 ];

	AR_Vehicle_eventRenderToolTips_Parms RenderToolTips_Parms;
	RenderToolTips_Parms.PC = PC;
	RenderToolTips_Parms.Canvas = Canvas;
	RenderToolTips_Parms.Dist = Dist;

	this->ProcessEvent ( pFnRenderToolTips, &RenderToolTips_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.SetBurnOut
// [0x00020102] 
// Parameters infos:

void AR_Vehicle::SetBurnOut ( )
{
	static UFunction* pFnSetBurnOut = NULL;

	if ( ! pFnSetBurnOut )
		pFnSetBurnOut = (UFunction*) UObject::GObjObjects()->Data[ 87315 ];

	AR_Vehicle_execSetBurnOut_Parms SetBurnOut_Parms;

	this->ProcessEvent ( pFnSetBurnOut, &SetBurnOut_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.StartBurnOut
// [0x00020102] 
// Parameters infos:

void AR_Vehicle::StartBurnOut ( )
{
	static UFunction* pFnStartBurnOut = NULL;

	if ( ! pFnStartBurnOut )
		pFnStartBurnOut = (UFunction*) UObject::GObjObjects()->Data[ 87314 ];

	AR_Vehicle_execStartBurnOut_Parms StartBurnOut_Parms;

	this->ProcessEvent ( pFnStartBurnOut, &StartBurnOut_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.ChangeToDeathMesh
// [0x00020102] 
// Parameters infos:

void AR_Vehicle::ChangeToDeathMesh ( )
{
	static UFunction* pFnChangeToDeathMesh = NULL;

	if ( ! pFnChangeToDeathMesh )
		pFnChangeToDeathMesh = (UFunction*) UObject::GObjObjects()->Data[ 87312 ];

	AR_Vehicle_execChangeToDeathMesh_Parms ChangeToDeathMesh_Parms;

	this->ProcessEvent ( pFnChangeToDeathMesh, &ChangeToDeathMesh_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.BleedHealthTimer
// [0x00020102] 
// Parameters infos:

void AR_Vehicle::BleedHealthTimer ( )
{
	static UFunction* pFnBleedHealthTimer = NULL;

	if ( ! pFnBleedHealthTimer )
		pFnBleedHealthTimer = (UFunction*) UObject::GObjObjects()->Data[ 87282 ];

	AR_Vehicle_execBleedHealthTimer_Parms BleedHealthTimer_Parms;

	this->ProcessEvent ( pFnBleedHealthTimer, &BleedHealthTimer_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.CheckHealthAlarmSound
// [0x00020102] 
// Parameters infos:

void AR_Vehicle::CheckHealthAlarmSound ( )
{
	static UFunction* pFnCheckHealthAlarmSound = NULL;

	if ( ! pFnCheckHealthAlarmSound )
		pFnCheckHealthAlarmSound = (UFunction*) UObject::GObjObjects()->Data[ 87278 ];

	AR_Vehicle_execCheckHealthAlarmSound_Parms CheckHealthAlarmSound_Parms;

	this->ProcessEvent ( pFnCheckHealthAlarmSound, &CheckHealthAlarmSound_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.TakeDamage
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AR_Vehicle::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 87270 ];

	AR_Vehicle_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.ReceivedHealthChange
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_Vehicle::eventReceivedHealthChange ( )
{
	static UFunction* pFnReceivedHealthChange = NULL;

	if ( ! pFnReceivedHealthChange )
		pFnReceivedHealthChange = (UFunction*) UObject::GObjObjects()->Data[ 87269 ];

	AR_Vehicle_eventReceivedHealthChange_Parms ReceivedHealthChange_Parms;

	this->ProcessEvent ( pFnReceivedHealthChange, &ReceivedHealthChange_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.HealDamage
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )
// class AController*             Healer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

bool AR_Vehicle::HealDamage ( int Amount, class AController* Healer, class UClass* DamageType )
{
	static UFunction* pFnHealDamage = NULL;

	if ( ! pFnHealDamage )
		pFnHealDamage = (UFunction*) UObject::GObjObjects()->Data[ 84211 ];

	AR_Vehicle_execHealDamage_Parms HealDamage_Parms;
	HealDamage_Parms.Amount = Amount;
	HealDamage_Parms.Healer = Healer;
	HealDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnHealDamage, &HealDamage_Parms, NULL );

	return HealDamage_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.R_GetCollisionDamageModifier
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          ContactAngle                   ( CPF_Parm )
// float                          MinFallColMultFact             ( CPF_Parm )
// float                          RoofHitAdditional              ( CPF_Parm )

float AR_Vehicle::R_GetCollisionDamageModifier ( float ContactAngle, float MinFallColMultFact, float RoofHitAdditional )
{
	static UFunction* pFnR_GetCollisionDamageModifier = NULL;

	if ( ! pFnR_GetCollisionDamageModifier )
		pFnR_GetCollisionDamageModifier = (UFunction*) UObject::GObjObjects()->Data[ 87261 ];

	AR_Vehicle_execR_GetCollisionDamageModifier_Parms R_GetCollisionDamageModifier_Parms;
	R_GetCollisionDamageModifier_Parms.ContactAngle = ContactAngle;
	R_GetCollisionDamageModifier_Parms.MinFallColMultFact = MinFallColMultFact;
	R_GetCollisionDamageModifier_Parms.RoofHitAdditional = RoofHitAdditional;

	this->ProcessEvent ( pFnR_GetCollisionDamageModifier, &R_GetCollisionDamageModifier_Parms, NULL );

	return R_GetCollisionDamageModifier_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.RigidBodyCollision
// [0x00C20902] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     HitComponent                   ( CPF_Parm | CPF_EditInline )
// class UPrimitiveComponent*     OtherComponent                 ( CPF_Parm | CPF_EditInline )
// int                            ContactIndex                   ( CPF_Parm )
// struct FCollisionImpactData    Collision                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AR_Vehicle::eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* Collision )
{
	static UFunction* pFnRigidBodyCollision = NULL;

	if ( ! pFnRigidBodyCollision )
		pFnRigidBodyCollision = (UFunction*) UObject::GObjObjects()->Data[ 87242 ];

	AR_Vehicle_eventRigidBodyCollision_Parms RigidBodyCollision_Parms;
	RigidBodyCollision_Parms.HitComponent = HitComponent;
	RigidBodyCollision_Parms.OtherComponent = OtherComponent;
	RigidBodyCollision_Parms.ContactIndex = ContactIndex;

	this->ProcessEvent ( pFnRigidBodyCollision, &RigidBodyCollision_Parms, NULL );

	if ( Collision )
		memcpy ( Collision, &RigidBodyCollision_Parms.Collision, 0x24 );
};

// Function RavagedGame.R_Vehicle.PlayCollisionSound
// [0x00020102] 
// Parameters infos:
// class USoundCue*               colSound                       ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )

void AR_Vehicle::PlayCollisionSound ( class USoundCue* colSound, int Damage )
{
	static UFunction* pFnPlayCollisionSound = NULL;

	if ( ! pFnPlayCollisionSound )
		pFnPlayCollisionSound = (UFunction*) UObject::GObjObjects()->Data[ 87239 ];

	AR_Vehicle_execPlayCollisionSound_Parms PlayCollisionSound_Parms;
	PlayCollisionSound_Parms.colSound = colSound;
	PlayCollisionSound_Parms.Damage = Damage;

	this->ProcessEvent ( pFnPlayCollisionSound, &PlayCollisionSound_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.RanInto
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AR_Vehicle::eventRanInto ( class AActor* Other )
{
	static UFunction* pFnRanInto = NULL;

	if ( ! pFnRanInto )
		pFnRanInto = (UFunction*) UObject::GObjObjects()->Data[ 87235 ];

	AR_Vehicle_eventRanInto_Parms RanInto_Parms;
	RanInto_Parms.Other = Other;

	this->ProcessEvent ( pFnRanInto, &RanInto_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.InitSeatWeaponWindups
// [0x00020102] 
// Parameters infos:
// class AR_VehicleWeapon*        VWeap                          ( CPF_Parm )

void AR_Vehicle::InitSeatWeaponWindups ( class AR_VehicleWeapon* VWeap )
{
	static UFunction* pFnInitSeatWeaponWindups = NULL;

	if ( ! pFnInitSeatWeaponWindups )
		pFnInitSeatWeaponWindups = (UFunction*) UObject::GObjObjects()->Data[ 87233 ];

	AR_Vehicle_execInitSeatWeaponWindups_Parms InitSeatWeaponWindups_Parms;
	InitSeatWeaponWindups_Parms.VWeap = VWeap;

	this->ProcessEvent ( pFnInitSeatWeaponWindups, &InitSeatWeaponWindups_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.InitializeWeaponWindups
// [0x00020102] 
// Parameters infos:

void AR_Vehicle::InitializeWeaponWindups ( )
{
	static UFunction* pFnInitializeWeaponWindups = NULL;

	if ( ! pFnInitializeWeaponWindups )
		pFnInitializeWeaponWindups = (UFunction*) UObject::GObjObjects()->Data[ 87227 ];

	AR_Vehicle_execInitializeWeaponWindups_Parms InitializeWeaponWindups_Parms;

	this->ProcessEvent ( pFnInitializeWeaponWindups, &InitializeWeaponWindups_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.InitializeSeats
// [0x00020002] 
// Parameters infos:

void AR_Vehicle::InitializeSeats ( )
{
	static UFunction* pFnInitializeSeats = NULL;

	if ( ! pFnInitializeSeats )
		pFnInitializeSeats = (UFunction*) UObject::GObjObjects()->Data[ 87225 ];

	AR_Vehicle_execInitializeSeats_Parms InitializeSeats_Parms;

	this->ProcessEvent ( pFnInitializeSeats, &InitializeSeats_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_Vehicle::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 87224 ];

	AR_Vehicle_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.TakeHeadShot
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  HeadShotDamageType             ( CPF_Parm )
// int                            HeadDamage                     ( CPF_Parm )
// float                          AdditionalScale                ( CPF_Parm )
// class AController*             InstigatingController          ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Const | CPF_Parm | CPF_OutParm )

bool AR_Vehicle::TakeHeadShot ( class UClass* HeadShotDamageType, int HeadDamage, float AdditionalScale, class AController* InstigatingController, struct FImpactInfo* Impact )
{
	static UFunction* pFnTakeHeadShot = NULL;

	if ( ! pFnTakeHeadShot )
		pFnTakeHeadShot = (UFunction*) UObject::GObjObjects()->Data[ 87217 ];

	AR_Vehicle_execTakeHeadShot_Parms TakeHeadShot_Parms;
	TakeHeadShot_Parms.HeadShotDamageType = HeadShotDamageType;
	TakeHeadShot_Parms.HeadDamage = HeadDamage;
	TakeHeadShot_Parms.AdditionalScale = AdditionalScale;
	TakeHeadShot_Parms.InstigatingController = InstigatingController;

	this->ProcessEvent ( pFnTakeHeadShot, &TakeHeadShot_Parms, NULL );

	if ( Impact )
		memcpy ( Impact, &TakeHeadShot_Parms.Impact, 0x50 );

	return TakeHeadShot_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.UTVehicleBaseTakeHeadShot
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  HeadShotDamageType             ( CPF_Parm )
// int                            HeadDamage                     ( CPF_Parm )
// float                          AdditionalScale                ( CPF_Parm )
// class AController*             InstigatingController          ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Const | CPF_Parm | CPF_OutParm )

bool AR_Vehicle::UTVehicleBaseTakeHeadShot ( class UClass* HeadShotDamageType, int HeadDamage, float AdditionalScale, class AController* InstigatingController, struct FImpactInfo* Impact )
{
	static UFunction* pFnUTVehicleBaseTakeHeadShot = NULL;

	if ( ! pFnUTVehicleBaseTakeHeadShot )
		pFnUTVehicleBaseTakeHeadShot = (UFunction*) UObject::GObjObjects()->Data[ 87209 ];

	AR_Vehicle_execUTVehicleBaseTakeHeadShot_Parms UTVehicleBaseTakeHeadShot_Parms;
	UTVehicleBaseTakeHeadShot_Parms.HeadShotDamageType = HeadShotDamageType;
	UTVehicleBaseTakeHeadShot_Parms.HeadDamage = HeadDamage;
	UTVehicleBaseTakeHeadShot_Parms.AdditionalScale = AdditionalScale;
	UTVehicleBaseTakeHeadShot_Parms.InstigatingController = InstigatingController;

	this->ProcessEvent ( pFnUTVehicleBaseTakeHeadShot, &UTVehicleBaseTakeHeadShot_Parms, NULL );

	if ( Impact )
		memcpy ( Impact, &UTVehicleBaseTakeHeadShot_Parms.Impact, 0x50 );

	return UTVehicleBaseTakeHeadShot_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.AdjustDriverDamage
// [0x00420002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// int                            Damage                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void AR_Vehicle::AdjustDriverDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum )
{
	static UFunction* pFnAdjustDriverDamage = NULL;

	if ( ! pFnAdjustDriverDamage )
		pFnAdjustDriverDamage = (UFunction*) UObject::GObjObjects()->Data[ 87203 ];

	AR_Vehicle_execAdjustDriverDamage_Parms AdjustDriverDamage_Parms;
	AdjustDriverDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &AdjustDriverDamage_Parms.HitLocation, &HitLocation, 0xC );
	AdjustDriverDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnAdjustDriverDamage, &AdjustDriverDamage_Parms, NULL );

	if ( Damage )
		*Damage = AdjustDriverDamage_Parms.Damage;

	if ( Momentum )
		memcpy ( Momentum, &AdjustDriverDamage_Parms.Momentum, 0xC );
};

// Function RavagedGame.R_Vehicle.StopVehicleSounds
// [0x00020102] 
// Parameters infos:

void AR_Vehicle::StopVehicleSounds ( )
{
	static UFunction* pFnStopVehicleSounds = NULL;

	if ( ! pFnStopVehicleSounds )
		pFnStopVehicleSounds = (UFunction*) UObject::GObjObjects()->Data[ 87202 ];

	AR_Vehicle_execStopVehicleSounds_Parms StopVehicleSounds_Parms;

	this->ProcessEvent ( pFnStopVehicleSounds, &StopVehicleSounds_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.DoStopBoosting
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void AR_Vehicle::eventDoStopBoosting ( )
{
	static UFunction* pFnDoStopBoosting = NULL;

	if ( ! pFnDoStopBoosting )
		pFnDoStopBoosting = (UFunction*) UObject::GObjObjects()->Data[ 87201 ];

	AR_Vehicle_eventDoStopBoosting_Parms DoStopBoosting_Parms;

	this->ProcessEvent ( pFnDoStopBoosting, &DoStopBoosting_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.ServerStopBoosting
// [0x002200C2] 
// Parameters infos:

void AR_Vehicle::ServerStopBoosting ( )
{
	static UFunction* pFnServerStopBoosting = NULL;

	if ( ! pFnServerStopBoosting )
		pFnServerStopBoosting = (UFunction*) UObject::GObjObjects()->Data[ 87200 ];

	AR_Vehicle_execServerStopBoosting_Parms ServerStopBoosting_Parms;

	this->ProcessEvent ( pFnServerStopBoosting, &ServerStopBoosting_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.StopBoosting
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_Vehicle::eventStopBoosting ( )
{
	static UFunction* pFnStopBoosting = NULL;

	if ( ! pFnStopBoosting )
		pFnStopBoosting = (UFunction*) UObject::GObjObjects()->Data[ 87199 ];

	AR_Vehicle_eventStopBoosting_Parms StopBoosting_Parms;

	this->ProcessEvent ( pFnStopBoosting, &StopBoosting_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.DoBoosting
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void AR_Vehicle::eventDoBoosting ( )
{
	static UFunction* pFnDoBoosting = NULL;

	if ( ! pFnDoBoosting )
		pFnDoBoosting = (UFunction*) UObject::GObjObjects()->Data[ 87198 ];

	AR_Vehicle_eventDoBoosting_Parms DoBoosting_Parms;

	this->ProcessEvent ( pFnDoBoosting, &DoBoosting_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.ServerStartBoosting
// [0x002200C2] 
// Parameters infos:

void AR_Vehicle::ServerStartBoosting ( )
{
	static UFunction* pFnServerStartBoosting = NULL;

	if ( ! pFnServerStartBoosting )
		pFnServerStartBoosting = (UFunction*) UObject::GObjObjects()->Data[ 87197 ];

	AR_Vehicle_execServerStartBoosting_Parms ServerStartBoosting_Parms;

	this->ProcessEvent ( pFnServerStartBoosting, &ServerStartBoosting_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.StartBoosting
// [0x00020102] 
// Parameters infos:

void AR_Vehicle::StartBoosting ( )
{
	static UFunction* pFnStartBoosting = NULL;

	if ( ! pFnStartBoosting )
		pFnStartBoosting = (UFunction*) UObject::GObjObjects()->Data[ 87196 ];

	AR_Vehicle_execStartBoosting_Parms StartBoosting_Parms;

	this->ProcessEvent ( pFnStartBoosting, &StartBoosting_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.PassengerLeave
// [0x00020002] 
// Parameters infos:
// int                            SeatIndex                      ( CPF_Parm )

void AR_Vehicle::PassengerLeave ( int SeatIndex )
{
	static UFunction* pFnPassengerLeave = NULL;

	if ( ! pFnPassengerLeave )
		pFnPassengerLeave = (UFunction*) UObject::GObjObjects()->Data[ 87193 ];

	AR_Vehicle_execPassengerLeave_Parms PassengerLeave_Parms;
	PassengerLeave_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnPassengerLeave, &PassengerLeave_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.PassengerEnter
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// int                            SeatIndex                      ( CPF_Parm )

bool AR_Vehicle::PassengerEnter ( class APawn* P, int SeatIndex )
{
	static UFunction* pFnPassengerEnter = NULL;

	if ( ! pFnPassengerEnter )
		pFnPassengerEnter = (UFunction*) UObject::GObjObjects()->Data[ 80084 ];

	AR_Vehicle_execPassengerEnter_Parms PassengerEnter_Parms;
	PassengerEnter_Parms.P = P;
	PassengerEnter_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnPassengerEnter, &PassengerEnter_Parms, NULL );

	return PassengerEnter_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.DriverLeave
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceLeave                    ( CPF_Parm )

bool AR_Vehicle::eventDriverLeave ( unsigned long bForceLeave )
{
	static UFunction* pFnDriverLeave = NULL;

	if ( ! pFnDriverLeave )
		pFnDriverLeave = (UFunction*) UObject::GObjObjects()->Data[ 87182 ];

	AR_Vehicle_eventDriverLeave_Parms DriverLeave_Parms;
	DriverLeave_Parms.bForceLeave = bForceLeave;

	this->ProcessEvent ( pFnDriverLeave, &DriverLeave_Parms, NULL );

	return DriverLeave_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.SitDriver
// [0x00820102] 
// Parameters infos:
// class AUTPawn*                 UTP                            ( CPF_Parm )
// int                            SeatIndex                      ( CPF_Parm )

void AR_Vehicle::SitDriver ( class AUTPawn* UTP, int SeatIndex )
{
	static UFunction* pFnSitDriver = NULL;

	if ( ! pFnSitDriver )
		pFnSitDriver = (UFunction*) UObject::GObjObjects()->Data[ 87176 ];

	AR_Vehicle_execSitDriver_Parms SitDriver_Parms;
	SitDriver_Parms.UTP = UTP;
	SitDriver_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnSitDriver, &SitDriver_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.DriverEnter
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool AR_Vehicle::DriverEnter ( class APawn* P )
{
	static UFunction* pFnDriverEnter = NULL;

	if ( ! pFnDriverEnter )
		pFnDriverEnter = (UFunction*) UObject::GObjObjects()->Data[ 80086 ];

	AR_Vehicle_execDriverEnter_Parms DriverEnter_Parms;
	DriverEnter_Parms.P = P;

	this->ProcessEvent ( pFnDriverEnter, &DriverEnter_Parms, NULL );

	return DriverEnter_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.ChangeSeat
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             ControllerToMove               ( CPF_Parm )
// int                            RequestedSeat                  ( CPF_Parm )

bool AR_Vehicle::ChangeSeat ( class AController* ControllerToMove, int RequestedSeat )
{
	static UFunction* pFnChangeSeat = NULL;

	if ( ! pFnChangeSeat )
		pFnChangeSeat = (UFunction*) UObject::GObjObjects()->Data[ 87165 ];

	AR_Vehicle_execChangeSeat_Parms ChangeSeat_Parms;
	ChangeSeat_Parms.ControllerToMove = ControllerToMove;
	ChangeSeat_Parms.RequestedSeat = RequestedSeat;

	this->ProcessEvent ( pFnChangeSeat, &ChangeSeat_Parms, NULL );

	return ChangeSeat_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.UT_VehicleCalcCamera
// [0x00C24102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// int                            SeatIndex                      ( CPF_Parm )
// unsigned long                  bPivotOnly                     ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )
// struct FVector                 CamStart                       ( CPF_Parm | CPF_OutParm )

void AR_Vehicle::UT_VehicleCalcCamera ( float DeltaTime, int SeatIndex, unsigned long bPivotOnly, struct FVector* out_CamLoc, struct FRotator* out_CamRot, struct FVector* CamStart )
{
	static UFunction* pFnUT_VehicleCalcCamera = NULL;

	if ( ! pFnUT_VehicleCalcCamera )
		pFnUT_VehicleCalcCamera = (UFunction*) UObject::GObjObjects()->Data[ 87141 ];

	AR_Vehicle_execUT_VehicleCalcCamera_Parms UT_VehicleCalcCamera_Parms;
	UT_VehicleCalcCamera_Parms.DeltaTime = DeltaTime;
	UT_VehicleCalcCamera_Parms.SeatIndex = SeatIndex;
	UT_VehicleCalcCamera_Parms.bPivotOnly = bPivotOnly;

	this->ProcessEvent ( pFnUT_VehicleCalcCamera, &UT_VehicleCalcCamera_Parms, NULL );

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &UT_VehicleCalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &UT_VehicleCalcCamera_Parms.out_CamRot, 0xC );

	if ( CamStart )
		memcpy ( CamStart, &UT_VehicleCalcCamera_Parms.CamStart, 0xC );
};

// Function RavagedGame.R_Vehicle.VehicleCalcCamera
// [0x00C24102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// int                            SeatIndex                      ( CPF_Parm )
// unsigned long                  bPivotOnly                     ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )
// struct FVector                 CamStart                       ( CPF_Parm | CPF_OutParm )

void AR_Vehicle::VehicleCalcCamera ( float DeltaTime, int SeatIndex, unsigned long bPivotOnly, struct FVector* out_CamLoc, struct FRotator* out_CamRot, struct FVector* CamStart )
{
	static UFunction* pFnVehicleCalcCamera = NULL;

	if ( ! pFnVehicleCalcCamera )
		pFnVehicleCalcCamera = (UFunction*) UObject::GObjObjects()->Data[ 87129 ];

	AR_Vehicle_execVehicleCalcCamera_Parms VehicleCalcCamera_Parms;
	VehicleCalcCamera_Parms.DeltaTime = DeltaTime;
	VehicleCalcCamera_Parms.SeatIndex = SeatIndex;
	VehicleCalcCamera_Parms.bPivotOnly = bPivotOnly;

	this->ProcessEvent ( pFnVehicleCalcCamera, &VehicleCalcCamera_Parms, NULL );

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &VehicleCalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &VehicleCalcCamera_Parms.out_CamRot, 0xC );

	if ( CamStart )
		memcpy ( CamStart, &VehicleCalcCamera_Parms.CamStart, 0xC );
};

// Function RavagedGame.R_Vehicle.ApplyViewConstraint
// [0x00C20102] 
// Parameters infos:
// int                            SeatIndex                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )

void AR_Vehicle::ApplyViewConstraint ( int SeatIndex, struct FRotator* out_ViewRotation )
{
	static UFunction* pFnApplyViewConstraint = NULL;

	if ( ! pFnApplyViewConstraint )
		pFnApplyViewConstraint = (UFunction*) UObject::GObjObjects()->Data[ 87124 ];

	AR_Vehicle_execApplyViewConstraint_Parms ApplyViewConstraint_Parms;
	ApplyViewConstraint_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnApplyViewConstraint, &ApplyViewConstraint_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ApplyViewConstraint_Parms.out_ViewRotation, 0xC );
};

// Function RavagedGame.R_Vehicle.VehicleProcessViewRotation
// [0x00C20102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// int                            SeatIndex                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void AR_Vehicle::VehicleProcessViewRotation ( float DeltaTime, int SeatIndex, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnVehicleProcessViewRotation = NULL;

	if ( ! pFnVehicleProcessViewRotation )
		pFnVehicleProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 87107 ];

	AR_Vehicle_execVehicleProcessViewRotation_Parms VehicleProcessViewRotation_Parms;
	VehicleProcessViewRotation_Parms.DeltaTime = DeltaTime;
	VehicleProcessViewRotation_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnVehicleProcessViewRotation, &VehicleProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &VehicleProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &VehicleProcessViewRotation_Parms.out_DeltaRot, 0xC );
};

// Function RavagedGame.R_Vehicle.LimitRotation
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            in_rot                         ( CPF_Parm )
// int                            ViewMin                        ( CPF_Parm )
// int                            ViewMax                        ( CPF_Parm )

int AR_Vehicle::LimitRotation ( int in_rot, int ViewMin, int ViewMax )
{
	static UFunction* pFnLimitRotation = NULL;

	if ( ! pFnLimitRotation )
		pFnLimitRotation = (UFunction*) UObject::GObjObjects()->Data[ 87102 ];

	AR_Vehicle_execLimitRotation_Parms LimitRotation_Parms;
	LimitRotation_Parms.in_rot = in_rot;
	LimitRotation_Parms.ViewMin = ViewMin;
	LimitRotation_Parms.ViewMax = ViewMax;

	this->ProcessEvent ( pFnLimitRotation, &LimitRotation_Parms, NULL );

	return LimitRotation_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.ApplyCamera
// [0x00020102] 
// Parameters infos:
// struct FCameraInfo             cInfo                          ( CPF_Parm | CPF_NeedCtorLink )
// int                            SeatIndex                      ( CPF_Parm )

void AR_Vehicle::ApplyCamera ( struct FCameraInfo cInfo, int SeatIndex )
{
	static UFunction* pFnApplyCamera = NULL;

	if ( ! pFnApplyCamera )
		pFnApplyCamera = (UFunction*) UObject::GObjObjects()->Data[ 87099 ];

	AR_Vehicle_execApplyCamera_Parms ApplyCamera_Parms;
	memcpy ( &ApplyCamera_Parms.cInfo, &cInfo, 0x6C );
	ApplyCamera_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnApplyCamera, &ApplyCamera_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.ServerApplyPerspective
// [0x00A200C2] 
// Parameters infos:
// int                            SeatIndex                      ( CPF_Parm )
// int                            NewIdx                         ( CPF_Parm )

void AR_Vehicle::ServerApplyPerspective ( int SeatIndex, int NewIdx )
{
	static UFunction* pFnServerApplyPerspective = NULL;

	if ( ! pFnServerApplyPerspective )
		pFnServerApplyPerspective = (UFunction*) UObject::GObjObjects()->Data[ 87095 ];

	AR_Vehicle_execServerApplyPerspective_Parms ServerApplyPerspective_Parms;
	ServerApplyPerspective_Parms.SeatIndex = SeatIndex;
	ServerApplyPerspective_Parms.NewIdx = NewIdx;

	this->ProcessEvent ( pFnServerApplyPerspective, &ServerApplyPerspective_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.ApplyPerspective
// [0x00820102] 
// Parameters infos:
// int                            SeatIndex                      ( CPF_Parm )
// class AR_Pawn*                 rPwn                           ( CPF_Parm )

void AR_Vehicle::ApplyPerspective ( int SeatIndex, class AR_Pawn* rPwn )
{
	static UFunction* pFnApplyPerspective = NULL;

	if ( ! pFnApplyPerspective )
		pFnApplyPerspective = (UFunction*) UObject::GObjObjects()->Data[ 87090 ];

	AR_Vehicle_execApplyPerspective_Parms ApplyPerspective_Parms;
	ApplyPerspective_Parms.SeatIndex = SeatIndex;
	ApplyPerspective_Parms.rPwn = rPwn;

	this->ProcessEvent ( pFnApplyPerspective, &ApplyPerspective_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.CyclePerspective
// [0x00020102] 
// Parameters infos:
// class AR_PlayerController*     pController                    ( CPF_Parm )
// int                            SeatIndex                      ( CPF_Parm )

void AR_Vehicle::CyclePerspective ( class AR_PlayerController* pController, int SeatIndex )
{
	static UFunction* pFnCyclePerspective = NULL;

	if ( ! pFnCyclePerspective )
		pFnCyclePerspective = (UFunction*) UObject::GObjObjects()->Data[ 87086 ];

	AR_Vehicle_execCyclePerspective_Parms CyclePerspective_Parms;
	CyclePerspective_Parms.pController = pController;
	CyclePerspective_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnCyclePerspective, &CyclePerspective_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.GetSeatFOV
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SeatIndex                      ( CPF_Parm )

float AR_Vehicle::GetSeatFOV ( int SeatIndex )
{
	static UFunction* pFnGetSeatFOV = NULL;

	if ( ! pFnGetSeatFOV )
		pFnGetSeatFOV = (UFunction*) UObject::GObjObjects()->Data[ 87083 ];

	AR_Vehicle_execGetSeatFOV_Parms GetSeatFOV_Parms;
	GetSeatFOV_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnGetSeatFOV, &GetSeatFOV_Parms, NULL );

	return GetSeatFOV_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.TryFalloutPos
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ExitingDriver                  ( CPF_Parm )
// struct FVector                 ExitPos                        ( CPF_Parm )

bool AR_Vehicle::TryFalloutPos ( class APawn* ExitingDriver, struct FVector ExitPos )
{
	static UFunction* pFnTryFalloutPos = NULL;

	if ( ! pFnTryFalloutPos )
		pFnTryFalloutPos = (UFunction*) UObject::GObjObjects()->Data[ 87073 ];

	AR_Vehicle_execTryFalloutPos_Parms TryFalloutPos_Parms;
	TryFalloutPos_Parms.ExitingDriver = ExitingDriver;
	memcpy ( &TryFalloutPos_Parms.ExitPos, &ExitPos, 0xC );

	this->ProcessEvent ( pFnTryFalloutPos, &TryFalloutPos_Parms, NULL );

	return TryFalloutPos_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.DriverFallOut
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ExitingDriver                  ( CPF_Parm )

bool AR_Vehicle::DriverFallOut ( class APawn* ExitingDriver )
{
	static UFunction* pFnDriverFallOut = NULL;

	if ( ! pFnDriverFallOut )
		pFnDriverFallOut = (UFunction*) UObject::GObjObjects()->Data[ 87067 ];

	AR_Vehicle_execDriverFallOut_Parms DriverFallOut_Parms;
	DriverFallOut_Parms.ExitingDriver = ExitingDriver;

	this->ProcessEvent ( pFnDriverFallOut, &DriverFallOut_Parms, NULL );

	return DriverFallOut_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.TryExitPosition
// [0x00C20002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 ExitPosition                   ( CPF_Parm )
// float                          RelativeYaw                    ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// class APawn*                   ExitingDriver                  ( CPF_Parm )
// struct FRotator                ExitRot                        ( CPF_Parm | CPF_OutParm )

bool AR_Vehicle::TryExitPosition ( struct FVector ExitPosition, float RelativeYaw, struct FVector Extent, class APawn* ExitingDriver, struct FRotator* ExitRot )
{
	static UFunction* pFnTryExitPosition = NULL;

	if ( ! pFnTryExitPosition )
		pFnTryExitPosition = (UFunction*) UObject::GObjObjects()->Data[ 87058 ];

	AR_Vehicle_execTryExitPosition_Parms TryExitPosition_Parms;
	memcpy ( &TryExitPosition_Parms.ExitPosition, &ExitPosition, 0xC );
	TryExitPosition_Parms.RelativeYaw = RelativeYaw;
	memcpy ( &TryExitPosition_Parms.Extent, &Extent, 0xC );
	TryExitPosition_Parms.ExitingDriver = ExitingDriver;

	this->ProcessEvent ( pFnTryExitPosition, &TryExitPosition_Parms, NULL );

	if ( ExitRot )
		memcpy ( ExitRot, &TryExitPosition_Parms.ExitRot, 0xC );

	return TryExitPosition_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.R_PlaceExitingDriver2
// [0x00C24002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AVehicle*                ExitVehicle                    ( CPF_Parm )
// int                            SeatIdx                        ( CPF_Parm )
// class APawn*                   ExitingDriver                  ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                ExitRot                        ( CPF_Parm | CPF_OutParm )

bool AR_Vehicle::R_PlaceExitingDriver2 ( class AVehicle* ExitVehicle, int SeatIdx, class APawn* ExitingDriver, struct FRotator* ExitRot )
{
	static UFunction* pFnR_PlaceExitingDriver2 = NULL;

	if ( ! pFnR_PlaceExitingDriver2 )
		pFnR_PlaceExitingDriver2 = (UFunction*) UObject::GObjObjects()->Data[ 87048 ];

	AR_Vehicle_execR_PlaceExitingDriver2_Parms R_PlaceExitingDriver2_Parms;
	R_PlaceExitingDriver2_Parms.ExitVehicle = ExitVehicle;
	R_PlaceExitingDriver2_Parms.SeatIdx = SeatIdx;
	R_PlaceExitingDriver2_Parms.ExitingDriver = ExitingDriver;

	this->ProcessEvent ( pFnR_PlaceExitingDriver2, &R_PlaceExitingDriver2_Parms, NULL );

	if ( ExitRot )
		memcpy ( ExitRot, &R_PlaceExitingDriver2_Parms.ExitRot, 0xC );

	return R_PlaceExitingDriver2_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.PassengerLeaveVehicle
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AUDKWeaponPawn*          PassVeh                        ( CPF_Parm )
// unsigned long                  bForceLeave                    ( CPF_Parm )

bool AR_Vehicle::PassengerLeaveVehicle ( class AUDKWeaponPawn* PassVeh, unsigned long bForceLeave )
{
	static UFunction* pFnPassengerLeaveVehicle = NULL;

	if ( ! pFnPassengerLeaveVehicle )
		pFnPassengerLeaveVehicle = (UFunction*) UObject::GObjObjects()->Data[ 87040 ];

	AR_Vehicle_execPassengerLeaveVehicle_Parms PassengerLeaveVehicle_Parms;
	PassengerLeaveVehicle_Parms.PassVeh = PassVeh;
	PassengerLeaveVehicle_Parms.bForceLeave = bForceLeave;

	this->ProcessEvent ( pFnPassengerLeaveVehicle, &PassengerLeaveVehicle_Parms, NULL );

	return PassengerLeaveVehicle_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.DisplayDebug
// [0x00C20102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AR_Vehicle::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 87034 ];

	AR_Vehicle_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function RavagedGame.R_Vehicle.GetWeaponAim
// [0x00820002] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AUTVehicleWeapon*        VWeapon                        ( CPF_Parm )

struct FRotator AR_Vehicle::GetWeaponAim ( class AUTVehicleWeapon* VWeapon )
{
	static UFunction* pFnGetWeaponAim = NULL;

	if ( ! pFnGetWeaponAim )
		pFnGetWeaponAim = (UFunction*) UObject::GObjObjects()->Data[ 87013 ];

	AR_Vehicle_execGetWeaponAim_Parms GetWeaponAim_Parms;
	GetWeaponAim_Parms.VWeapon = VWeapon;

	this->ProcessEvent ( pFnGetWeaponAim, &GetWeaponAim_Parms, NULL );

	return GetWeaponAim_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.UTGetEffectLocation
// [0x00C20102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SeatIndex                      ( CPF_Parm )
// struct FRotator                BarrelRotation                 ( CPF_Parm | CPF_OutParm )

struct FVector AR_Vehicle::UTGetEffectLocation ( int SeatIndex, struct FRotator* BarrelRotation )
{
	static UFunction* pFnUTGetEffectLocation = NULL;

	if ( ! pFnUTGetEffectLocation )
		pFnUTGetEffectLocation = (UFunction*) UObject::GObjObjects()->Data[ 87008 ];

	AR_Vehicle_execUTGetEffectLocation_Parms UTGetEffectLocation_Parms;
	UTGetEffectLocation_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnUTGetEffectLocation, &UTGetEffectLocation_Parms, NULL );

	if ( BarrelRotation )
		memcpy ( BarrelRotation, &UTGetEffectLocation_Parms.BarrelRotation, 0xC );

	return UTGetEffectLocation_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.FireTracerRound
// [0x00820102] 
// Parameters infos:
// int                            SeatIdx                        ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void AR_Vehicle::FireTracerRound ( int SeatIdx, struct FVector HitLocation )
{
	static UFunction* pFnFireTracerRound = NULL;

	if ( ! pFnFireTracerRound )
		pFnFireTracerRound = (UFunction*) UObject::GObjObjects()->Data[ 86997 ];

	AR_Vehicle_execFireTracerRound_Parms FireTracerRound_Parms;
	FireTracerRound_Parms.SeatIdx = SeatIdx;
	memcpy ( &FireTracerRound_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnFireTracerRound, &FireTracerRound_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.VehicleWeaponFireEffects
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            SeatIndex                      ( CPF_Parm )

void AR_Vehicle::VehicleWeaponFireEffects ( struct FVector HitLocation, int SeatIndex )
{
	static UFunction* pFnVehicleWeaponFireEffects = NULL;

	if ( ! pFnVehicleWeaponFireEffects )
		pFnVehicleWeaponFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 86994 ];

	AR_Vehicle_execVehicleWeaponFireEffects_Parms VehicleWeaponFireEffects_Parms;
	memcpy ( &VehicleWeaponFireEffects_Parms.HitLocation, &HitLocation, 0xC );
	VehicleWeaponFireEffects_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnVehicleWeaponFireEffects, &VehicleWeaponFireEffects_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.VehicleWeaponStoppedFiring
// [0x00020102] 
// Parameters infos:
// unsigned long                  bViaReplication                ( CPF_Parm )
// int                            SeatIndex                      ( CPF_Parm )

void AR_Vehicle::VehicleWeaponStoppedFiring ( unsigned long bViaReplication, int SeatIndex )
{
	static UFunction* pFnVehicleWeaponStoppedFiring = NULL;

	if ( ! pFnVehicleWeaponStoppedFiring )
		pFnVehicleWeaponStoppedFiring = (UFunction*) UObject::GObjObjects()->Data[ 86991 ];

	AR_Vehicle_execVehicleWeaponStoppedFiring_Parms VehicleWeaponStoppedFiring_Parms;
	VehicleWeaponStoppedFiring_Parms.bViaReplication = bViaReplication;
	VehicleWeaponStoppedFiring_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnVehicleWeaponStoppedFiring, &VehicleWeaponStoppedFiring_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.VehicleWeaponFired
// [0x00020102] 
// Parameters infos:
// unsigned long                  bViaReplication                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            SeatIndex                      ( CPF_Parm )

void AR_Vehicle::VehicleWeaponFired ( unsigned long bViaReplication, struct FVector HitLocation, int SeatIndex )
{
	static UFunction* pFnVehicleWeaponFired = NULL;

	if ( ! pFnVehicleWeaponFired )
		pFnVehicleWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 86987 ];

	AR_Vehicle_execVehicleWeaponFired_Parms VehicleWeaponFired_Parms;
	VehicleWeaponFired_Parms.bViaReplication = bViaReplication;
	memcpy ( &VehicleWeaponFired_Parms.HitLocation, &HitLocation, 0xC );
	VehicleWeaponFired_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnVehicleWeaponFired, &VehicleWeaponFired_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AR_Vehicle::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 86985 ];

	AR_Vehicle_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.PlayHornSound
// [0x00020102] 
// Parameters infos:

void AR_Vehicle::PlayHornSound ( )
{
	static UFunction* pFnPlayHornSound = NULL;

	if ( ! pFnPlayHornSound )
		pFnPlayHornSound = (UFunction*) UObject::GObjObjects()->Data[ 86984 ];

	AR_Vehicle_execPlayHornSound_Parms PlayHornSound_Parms;

	this->ProcessEvent ( pFnPlayHornSound, &PlayHornSound_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.UpdatePassengerClients
// [0x00020002] 
// Parameters infos:

void AR_Vehicle::UpdatePassengerClients ( )
{
	static UFunction* pFnUpdatePassengerClients = NULL;

	if ( ! pFnUpdatePassengerClients )
		pFnUpdatePassengerClients = (UFunction*) UObject::GObjObjects()->Data[ 86981 ];

	AR_Vehicle_execUpdatePassengerClients_Parms UpdatePassengerClients_Parms;

	this->ProcessEvent ( pFnUpdatePassengerClients, &UpdatePassengerClients_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.CheckSpawnPointState
// [0x00020002] 
// Parameters infos:

void AR_Vehicle::CheckSpawnPointState ( )
{
	static UFunction* pFnCheckSpawnPointState = NULL;

	if ( ! pFnCheckSpawnPointState )
		pFnCheckSpawnPointState = (UFunction*) UObject::GObjObjects()->Data[ 86979 ];

	AR_Vehicle_execCheckSpawnPointState_Parms CheckSpawnPointState_Parms;

	this->ProcessEvent ( pFnCheckSpawnPointState, &CheckSpawnPointState_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.CountOccupants
// [0x00020002] 
// Parameters infos:

void AR_Vehicle::CountOccupants ( )
{
	static UFunction* pFnCountOccupants = NULL;

	if ( ! pFnCountOccupants )
		pFnCountOccupants = (UFunction*) UObject::GObjObjects()->Data[ 86975 ];

	AR_Vehicle_execCountOccupants_Parms CountOccupants_Parms;

	this->ProcessEvent ( pFnCountOccupants, &CountOccupants_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.DriverDied
// [0x00020002] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )

void AR_Vehicle::DriverDied ( class UClass* DamageType )
{
	static UFunction* pFnDriverDied = NULL;

	if ( ! pFnDriverDied )
		pFnDriverDied = (UFunction*) UObject::GObjObjects()->Data[ 86973 ];

	AR_Vehicle_execDriverDied_Parms DriverDied_Parms;
	DriverDied_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnDriverDied, &DriverDied_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.ReplicateWindupState
// [0x00020100] 
// Parameters infos:
// unsigned char                  SeatIdx                        ( CPF_Parm )
// unsigned char                  NewState                       ( CPF_Parm )

void AR_Vehicle::ReplicateWindupState ( unsigned char SeatIdx, unsigned char NewState )
{
	static UFunction* pFnReplicateWindupState = NULL;

	if ( ! pFnReplicateWindupState )
		pFnReplicateWindupState = (UFunction*) UObject::GObjObjects()->Data[ 86970 ];

	AR_Vehicle_execReplicateWindupState_Parms ReplicateWindupState_Parms;
	ReplicateWindupState_Parms.SeatIdx = SeatIdx;
	ReplicateWindupState_Parms.NewState = NewState;

	this->ProcessEvent ( pFnReplicateWindupState, &ReplicateWindupState_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.HandleWeaponWindupState
// [0x00020102] 
// Parameters infos:
// unsigned char                  SeatIdx                        ( CPF_Parm )
// unsigned char                  NewState                       ( CPF_Parm )

void AR_Vehicle::HandleWeaponWindupState ( unsigned char SeatIdx, unsigned char NewState )
{
	static UFunction* pFnHandleWeaponWindupState = NULL;

	if ( ! pFnHandleWeaponWindupState )
		pFnHandleWeaponWindupState = (UFunction*) UObject::GObjObjects()->Data[ 86967 ];

	AR_Vehicle_execHandleWeaponWindupState_Parms HandleWeaponWindupState_Parms;
	HandleWeaponWindupState_Parms.SeatIdx = SeatIdx;
	HandleWeaponWindupState_Parms.NewState = NewState;

	this->ProcessEvent ( pFnHandleWeaponWindupState, &HandleWeaponWindupState_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.SeatWeaponWindDown
// [0x00020102] 
// Parameters infos:
// unsigned char                  SeatIdx                        ( CPF_Parm )

void AR_Vehicle::SeatWeaponWindDown ( unsigned char SeatIdx )
{
	static UFunction* pFnSeatWeaponWindDown = NULL;

	if ( ! pFnSeatWeaponWindDown )
		pFnSeatWeaponWindDown = (UFunction*) UObject::GObjObjects()->Data[ 86965 ];

	AR_Vehicle_execSeatWeaponWindDown_Parms SeatWeaponWindDown_Parms;
	SeatWeaponWindDown_Parms.SeatIdx = SeatIdx;

	this->ProcessEvent ( pFnSeatWeaponWindDown, &SeatWeaponWindDown_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.SeatWeaponStartFiringLoop
// [0x00020102] 
// Parameters infos:
// unsigned char                  SeatIdx                        ( CPF_Parm )

void AR_Vehicle::SeatWeaponStartFiringLoop ( unsigned char SeatIdx )
{
	static UFunction* pFnSeatWeaponStartFiringLoop = NULL;

	if ( ! pFnSeatWeaponStartFiringLoop )
		pFnSeatWeaponStartFiringLoop = (UFunction*) UObject::GObjObjects()->Data[ 86963 ];

	AR_Vehicle_execSeatWeaponStartFiringLoop_Parms SeatWeaponStartFiringLoop_Parms;
	SeatWeaponStartFiringLoop_Parms.SeatIdx = SeatIdx;

	this->ProcessEvent ( pFnSeatWeaponStartFiringLoop, &SeatWeaponStartFiringLoop_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.SeatWeaponWindupStart
// [0x00020102] 
// Parameters infos:
// unsigned char                  SeatIdx                        ( CPF_Parm )

void AR_Vehicle::SeatWeaponWindupStart ( unsigned char SeatIdx )
{
	static UFunction* pFnSeatWeaponWindupStart = NULL;

	if ( ! pFnSeatWeaponWindupStart )
		pFnSeatWeaponWindupStart = (UFunction*) UObject::GObjObjects()->Data[ 86961 ];

	AR_Vehicle_execSeatWeaponWindupStart_Parms SeatWeaponWindupStart_Parms;
	SeatWeaponWindupStart_Parms.SeatIdx = SeatIdx;

	this->ProcessEvent ( pFnSeatWeaponWindupStart, &SeatWeaponWindupStart_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.CanBeBaseForPawn
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   aPawn                          ( CPF_Parm )

bool AR_Vehicle::CanBeBaseForPawn ( class APawn* aPawn )
{
	static UFunction* pFnCanBeBaseForPawn = NULL;

	if ( ! pFnCanBeBaseForPawn )
		pFnCanBeBaseForPawn = (UFunction*) UObject::GObjObjects()->Data[ 86958 ];

	AR_Vehicle_execCanBeBaseForPawn_Parms CanBeBaseForPawn_Parms;
	CanBeBaseForPawn_Parms.aPawn = aPawn;

	this->ProcessEvent ( pFnCanBeBaseForPawn, &CanBeBaseForPawn_Parms, NULL );

	return CanBeBaseForPawn_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle.CalcResources
// [0x00020002] 
// Parameters infos:

void AR_Vehicle::CalcResources ( )
{
	static UFunction* pFnCalcResources = NULL;

	if ( ! pFnCalcResources )
		pFnCalcResources = (UFunction*) UObject::GObjObjects()->Data[ 86956 ];

	AR_Vehicle_execCalcResources_Parms CalcResources_Parms;

	this->ProcessEvent ( pFnCalcResources, &CalcResources_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.UnloadResource
// [0x00020002] 
// Parameters infos:
// int                            ResourcesToUnload              ( CPF_Parm )

void AR_Vehicle::UnloadResource ( int ResourcesToUnload )
{
	static UFunction* pFnUnloadResource = NULL;

	if ( ! pFnUnloadResource )
		pFnUnloadResource = (UFunction*) UObject::GObjObjects()->Data[ 86954 ];

	AR_Vehicle_execUnloadResource_Parms UnloadResource_Parms;
	UnloadResource_Parms.ResourcesToUnload = ResourcesToUnload;

	this->ProcessEvent ( pFnUnloadResource, &UnloadResource_Parms, NULL );
};

// Function RavagedGame.R_Vehicle.AddResource
// [0x00020002] 
// Parameters infos:
// int                            ResourcesToAdd                 ( CPF_Parm )

void AR_Vehicle::AddResource ( int ResourcesToAdd )
{
	static UFunction* pFnAddResource = NULL;

	if ( ! pFnAddResource )
		pFnAddResource = (UFunction*) UObject::GObjObjects()->Data[ 86951 ];

	AR_Vehicle_execAddResource_Parms AddResource_Parms;
	AddResource_Parms.ResourcesToAdd = ResourcesToAdd;

	this->ProcessEvent ( pFnAddResource, &AddResource_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.GetMagCount
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AR_Weapon_MagType::GetMagCount ( )
{
	static UFunction* pFnGetMagCount = NULL;

	if ( ! pFnGetMagCount )
		pFnGetMagCount = (UFunction*) UObject::GObjObjects()->Data[ 83196 ];

	AR_Weapon_MagType_execGetMagCount_Parms GetMagCount_Parms;

	this->ProcessEvent ( pFnGetMagCount, &GetMagCount_Parms, NULL );

	return GetMagCount_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon_MagType.GetAmmoCountMag
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AR_Weapon_MagType::GetAmmoCountMag ( )
{
	static UFunction* pFnGetAmmoCountMag = NULL;

	if ( ! pFnGetAmmoCountMag )
		pFnGetAmmoCountMag = (UFunction*) UObject::GObjObjects()->Data[ 83194 ];

	AR_Weapon_MagType_execGetAmmoCountMag_Parms GetAmmoCountMag_Parms;

	this->ProcessEvent ( pFnGetAmmoCountMag, &GetAmmoCountMag_Parms, NULL );

	return GetAmmoCountMag_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon_MagType.DenyClientWeaponSet
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Weapon_MagType::DenyClientWeaponSet ( )
{
	static UFunction* pFnDenyClientWeaponSet = NULL;

	if ( ! pFnDenyClientWeaponSet )
		pFnDenyClientWeaponSet = (UFunction*) UObject::GObjObjects()->Data[ 88652 ];

	AR_Weapon_MagType_execDenyClientWeaponSet_Parms DenyClientWeaponSet_Parms;

	this->ProcessEvent ( pFnDenyClientWeaponSet, &DenyClientWeaponSet_Parms, NULL );

	return DenyClientWeaponSet_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon_MagType.PutDownWeapon
// [0x00020102] 
// Parameters infos:

void AR_Weapon_MagType::PutDownWeapon ( )
{
	static UFunction* pFnPutDownWeapon = NULL;

	if ( ! pFnPutDownWeapon )
		pFnPutDownWeapon = (UFunction*) UObject::GObjObjects()->Data[ 88651 ];

	AR_Weapon_MagType_execPutDownWeapon_Parms PutDownWeapon_Parms;

	this->ProcessEvent ( pFnPutDownWeapon, &PutDownWeapon_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.ChangeVisibility
// [0x00020102] 
// Parameters infos:
// unsigned long                  bIsVisible                     ( CPF_Parm )

void AR_Weapon_MagType::ChangeVisibility ( unsigned long bIsVisible )
{
	static UFunction* pFnChangeVisibility = NULL;

	if ( ! pFnChangeVisibility )
		pFnChangeVisibility = (UFunction*) UObject::GObjObjects()->Data[ 88649 ];

	AR_Weapon_MagType_execChangeVisibility_Parms ChangeVisibility_Parms;
	ChangeVisibility_Parms.bIsVisible = bIsVisible;

	this->ProcessEvent ( pFnChangeVisibility, &ChangeVisibility_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AR_Weapon_MagType::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 88645 ];

	AR_Weapon_MagType_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function RavagedGame.R_Weapon_MagType.DisplayDebugState
// [0x00020102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AR_Weapon_MagType::DisplayDebugState ( class AHUD* H )
{
	static UFunction* pFnDisplayDebugState = NULL;

	if ( ! pFnDisplayDebugState )
		pFnDisplayDebugState = (UFunction*) UObject::GObjObjects()->Data[ 88640 ];

	AR_Weapon_MagType_execDisplayDebugState_Parms DisplayDebugState_Parms;
	DisplayDebugState_Parms.H = H;

	this->ProcessEvent ( pFnDisplayDebugState, &DisplayDebugState_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.DisplayDebugReloadState
// [0x00020102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AR_Weapon_MagType::DisplayDebugReloadState ( class AHUD* H )
{
	static UFunction* pFnDisplayDebugReloadState = NULL;

	if ( ! pFnDisplayDebugReloadState )
		pFnDisplayDebugReloadState = (UFunction*) UObject::GObjObjects()->Data[ 88635 ];

	AR_Weapon_MagType_execDisplayDebugReloadState_Parms DisplayDebugReloadState_Parms;
	DisplayDebugReloadState_Parms.H = H;

	this->ProcessEvent ( pFnDisplayDebugReloadState, &DisplayDebugReloadState_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.SetMotionSampleTimer
// [0x00020102] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )
// unsigned long                  bShowDeviations                ( CPF_Parm )

void AR_Weapon_MagType::SetMotionSampleTimer ( unsigned long bOn, unsigned long bShowDeviations )
{
	static UFunction* pFnSetMotionSampleTimer = NULL;

	if ( ! pFnSetMotionSampleTimer )
		pFnSetMotionSampleTimer = (UFunction*) UObject::GObjObjects()->Data[ 88599 ];

	AR_Weapon_MagType_execSetMotionSampleTimer_Parms SetMotionSampleTimer_Parms;
	SetMotionSampleTimer_Parms.bOn = bOn;
	SetMotionSampleTimer_Parms.bShowDeviations = bShowDeviations;

	this->ProcessEvent ( pFnSetMotionSampleTimer, &SetMotionSampleTimer_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.IsReloading
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Weapon_MagType::IsReloading ( )
{
	static UFunction* pFnIsReloading = NULL;

	if ( ! pFnIsReloading )
		pFnIsReloading = (UFunction*) UObject::GObjObjects()->Data[ 88597 ];

	AR_Weapon_MagType_execIsReloading_Parms IsReloading_Parms;

	this->ProcessEvent ( pFnIsReloading, &IsReloading_Parms, NULL );

	return IsReloading_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon_MagType.IsMagazineLow
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Weapon_MagType::IsMagazineLow ( )
{
	static UFunction* pFnIsMagazineLow = NULL;

	if ( ! pFnIsMagazineLow )
		pFnIsMagazineLow = (UFunction*) UObject::GObjObjects()->Data[ 88595 ];

	AR_Weapon_MagType_execIsMagazineLow_Parms IsMagazineLow_Parms;

	this->ProcessEvent ( pFnIsMagazineLow, &IsMagazineLow_Parms, NULL );

	return IsMagazineLow_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon_MagType.IsMagazineEmpty
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Weapon_MagType::IsMagazineEmpty ( )
{
	static UFunction* pFnIsMagazineEmpty = NULL;

	if ( ! pFnIsMagazineEmpty )
		pFnIsMagazineEmpty = (UFunction*) UObject::GObjObjects()->Data[ 88593 ];

	AR_Weapon_MagType_execIsMagazineEmpty_Parms IsMagazineEmpty_Parms;

	this->ProcessEvent ( pFnIsMagazineEmpty, &IsMagazineEmpty_Parms, NULL );

	return IsMagazineEmpty_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon_MagType.AddAmmo
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

int AR_Weapon_MagType::AddAmmo ( int Amount )
{
	static UFunction* pFnAddAmmo = NULL;

	if ( ! pFnAddAmmo )
		pFnAddAmmo = (UFunction*) UObject::GObjObjects()->Data[ 88590 ];

	AR_Weapon_MagType_execAddAmmo_Parms AddAmmo_Parms;
	AddAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddAmmo, &AddAmmo_Parms, NULL );

	return AddAmmo_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon_MagType.CalcMagCount
// [0x00020002] 
// Parameters infos:

void AR_Weapon_MagType::CalcMagCount ( )
{
	static UFunction* pFnCalcMagCount = NULL;

	if ( ! pFnCalcMagCount )
		pFnCalcMagCount = (UFunction*) UObject::GObjObjects()->Data[ 88589 ];

	AR_Weapon_MagType_execCalcMagCount_Parms CalcMagCount_Parms;

	this->ProcessEvent ( pFnCalcMagCount, &CalcMagCount_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AR_Weapon_MagType::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 88588 ];

	AR_Weapon_MagType_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.HasAmmo
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// int                            Amount                         ( CPF_OptionalParm | CPF_Parm )

bool AR_Weapon_MagType::HasAmmo ( unsigned char FireModeNum, int Amount )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = (UFunction*) UObject::GObjObjects()->Data[ 88584 ];

	AR_Weapon_MagType_execHasAmmo_Parms HasAmmo_Parms;
	HasAmmo_Parms.FireModeNum = FireModeNum;
	HasAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );

	return HasAmmo_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon_MagType.Loaded
// [0x00024102] 
// Parameters infos:
// unsigned long                  bUseWeaponMax                  ( CPF_OptionalParm | CPF_Parm )

void AR_Weapon_MagType::Loaded ( unsigned long bUseWeaponMax )
{
	static UFunction* pFnLoaded = NULL;

	if ( ! pFnLoaded )
		pFnLoaded = (UFunction*) UObject::GObjObjects()->Data[ 88582 ];

	AR_Weapon_MagType_execLoaded_Parms Loaded_Parms;
	Loaded_Parms.bUseWeaponMax = bUseWeaponMax;

	this->ProcessEvent ( pFnLoaded, &Loaded_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.ClientEndReload
// [0x010201C0] 
// Parameters infos:
// int                            MagAmmo                        ( CPF_Parm )

void AR_Weapon_MagType::ClientEndReload ( int MagAmmo )
{
	static UFunction* pFnClientEndReload = NULL;

	if ( ! pFnClientEndReload )
		pFnClientEndReload = (UFunction*) UObject::GObjObjects()->Data[ 88580 ];

	AR_Weapon_MagType_execClientEndReload_Parms ClientEndReload_Parms;
	ClientEndReload_Parms.MagAmmo = MagAmmo;

	this->ProcessEvent ( pFnClientEndReload, &ClientEndReload_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.ServerEndReload
// [0x002200C0] 
// Parameters infos:

void AR_Weapon_MagType::ServerEndReload ( )
{
	static UFunction* pFnServerEndReload = NULL;

	if ( ! pFnServerEndReload )
		pFnServerEndReload = (UFunction*) UObject::GObjObjects()->Data[ 88579 ];

	AR_Weapon_MagType_execServerEndReload_Parms ServerEndReload_Parms;

	this->ProcessEvent ( pFnServerEndReload, &ServerEndReload_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.EndReload
// [0x00020100] 
// Parameters infos:

void AR_Weapon_MagType::EndReload ( )
{
	static UFunction* pFnEndReload = NULL;

	if ( ! pFnEndReload )
		pFnEndReload = (UFunction*) UObject::GObjObjects()->Data[ 88578 ];

	AR_Weapon_MagType_execEndReload_Parms EndReload_Parms;

	this->ProcessEvent ( pFnEndReload, &EndReload_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.StopReload
// [0x00020000] 
// Parameters infos:

void AR_Weapon_MagType::StopReload ( )
{
	static UFunction* pFnStopReload = NULL;

	if ( ! pFnStopReload )
		pFnStopReload = (UFunction*) UObject::GObjObjects()->Data[ 88577 ];

	AR_Weapon_MagType_execStopReload_Parms StopReload_Parms;

	this->ProcessEvent ( pFnStopReload, &StopReload_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.ServerAbortReload
// [0x002200C0] 
// Parameters infos:

void AR_Weapon_MagType::ServerAbortReload ( )
{
	static UFunction* pFnServerAbortReload = NULL;

	if ( ! pFnServerAbortReload )
		pFnServerAbortReload = (UFunction*) UObject::GObjObjects()->Data[ 88576 ];

	AR_Weapon_MagType_execServerAbortReload_Parms ServerAbortReload_Parms;

	this->ProcessEvent ( pFnServerAbortReload, &ServerAbortReload_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.AbortReload
// [0x00020100] 
// Parameters infos:

void AR_Weapon_MagType::AbortReload ( )
{
	static UFunction* pFnAbortReload = NULL;

	if ( ! pFnAbortReload )
		pFnAbortReload = (UFunction*) UObject::GObjObjects()->Data[ 88575 ];

	AR_Weapon_MagType_execAbortReload_Parms AbortReload_Parms;

	this->ProcessEvent ( pFnAbortReload, &AbortReload_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.WeaponIsReloaded
// [0x00020100] 
// Parameters infos:

void AR_Weapon_MagType::WeaponIsReloaded ( )
{
	static UFunction* pFnWeaponIsReloaded = NULL;

	if ( ! pFnWeaponIsReloaded )
		pFnWeaponIsReloaded = (UFunction*) UObject::GObjObjects()->Data[ 88574 ];

	AR_Weapon_MagType_execWeaponIsReloaded_Parms WeaponIsReloaded_Parms;

	this->ProcessEvent ( pFnWeaponIsReloaded, &WeaponIsReloaded_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.ShouldAutoReload
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Weapon_MagType::ShouldAutoReload ( )
{
	static UFunction* pFnShouldAutoReload = NULL;

	if ( ! pFnShouldAutoReload )
		pFnShouldAutoReload = (UFunction*) UObject::GObjObjects()->Data[ 88572 ];

	AR_Weapon_MagType_execShouldAutoReload_Parms ShouldAutoReload_Parms;

	this->ProcessEvent ( pFnShouldAutoReload, &ShouldAutoReload_Parms, NULL );

	return ShouldAutoReload_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon_MagType.CanReload
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Weapon_MagType::CanReload ( )
{
	static UFunction* pFnCanReload = NULL;

	if ( ! pFnCanReload )
		pFnCanReload = (UFunction*) UObject::GObjObjects()->Data[ 88570 ];

	AR_Weapon_MagType_execCanReload_Parms CanReload_Parms;

	this->ProcessEvent ( pFnCanReload, &CanReload_Parms, NULL );

	return CanReload_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon_MagType.ProcessReload
// [0x002200C2] 
// Parameters infos:

void AR_Weapon_MagType::ProcessReload ( )
{
	static UFunction* pFnProcessReload = NULL;

	if ( ! pFnProcessReload )
		pFnProcessReload = (UFunction*) UObject::GObjObjects()->Data[ 88569 ];

	AR_Weapon_MagType_execProcessReload_Parms ProcessReload_Parms;

	this->ProcessEvent ( pFnProcessReload, &ProcessReload_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.ServerBeginReload
// [0x002200C2] 
// Parameters infos:

void AR_Weapon_MagType::ServerBeginReload ( )
{
	static UFunction* pFnServerBeginReload = NULL;

	if ( ! pFnServerBeginReload )
		pFnServerBeginReload = (UFunction*) UObject::GObjObjects()->Data[ 88568 ];

	AR_Weapon_MagType_execServerBeginReload_Parms ServerBeginReload_Parms;

	this->ProcessEvent ( pFnServerBeginReload, &ServerBeginReload_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.BeginReload
// [0x00020102] 
// Parameters infos:

void AR_Weapon_MagType::BeginReload ( )
{
	static UFunction* pFnBeginReload = NULL;

	if ( ! pFnBeginReload )
		pFnBeginReload = (UFunction*) UObject::GObjObjects()->Data[ 88567 ];

	AR_Weapon_MagType_execBeginReload_Parms BeginReload_Parms;

	this->ProcessEvent ( pFnBeginReload, &BeginReload_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.ClientVerifyMagAmmo
// [0x010201C2] 
// Parameters infos:
// int                            MagAmmo                        ( CPF_Parm )

void AR_Weapon_MagType::ClientVerifyMagAmmo ( int MagAmmo )
{
	static UFunction* pFnClientVerifyMagAmmo = NULL;

	if ( ! pFnClientVerifyMagAmmo )
		pFnClientVerifyMagAmmo = (UFunction*) UObject::GObjObjects()->Data[ 88565 ];

	AR_Weapon_MagType_execClientVerifyMagAmmo_Parms ClientVerifyMagAmmo_Parms;
	ClientVerifyMagAmmo_Parms.MagAmmo = MagAmmo;

	this->ProcessEvent ( pFnClientVerifyMagAmmo, &ClientVerifyMagAmmo_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.ServerVerifyMagAmmo
// [0x002200C2] 
// Parameters infos:

void AR_Weapon_MagType::ServerVerifyMagAmmo ( )
{
	static UFunction* pFnServerVerifyMagAmmo = NULL;

	if ( ! pFnServerVerifyMagAmmo )
		pFnServerVerifyMagAmmo = (UFunction*) UObject::GObjObjects()->Data[ 88564 ];

	AR_Weapon_MagType_execServerVerifyMagAmmo_Parms ServerVerifyMagAmmo_Parms;

	this->ProcessEvent ( pFnServerVerifyMagAmmo, &ServerVerifyMagAmmo_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.reload
// [0x010201C2] 
// Parameters infos:

void AR_Weapon_MagType::reload ( )
{
	static UFunction* pFnreload = NULL;

	if ( ! pFnreload )
		pFnreload = (UFunction*) UObject::GObjObjects()->Data[ 88563 ];

	AR_Weapon_MagType_execreload_Parms reload_Parms;

	this->ProcessEvent ( pFnreload, &reload_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.ConsumeAmmo
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_Weapon_MagType::ConsumeAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 88561 ];

	AR_Weapon_MagType_execConsumeAmmo_Parms ConsumeAmmo_Parms;
	ConsumeAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.TimeWeaponReloading
// [0x00020002] 
// Parameters infos:

void AR_Weapon_MagType::TimeWeaponReloading ( )
{
	static UFunction* pFnTimeWeaponReloading = NULL;

	if ( ! pFnTimeWeaponReloading )
		pFnTimeWeaponReloading = (UFunction*) UObject::GObjObjects()->Data[ 88560 ];

	AR_Weapon_MagType_execTimeWeaponReloading_Parms TimeWeaponReloading_Parms;

	this->ProcessEvent ( pFnTimeWeaponReloading, &TimeWeaponReloading_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.ClientPlayLoopedReloadOutroAnim
// [0x010201C2] 
// Parameters infos:

void AR_Weapon_MagType::ClientPlayLoopedReloadOutroAnim ( )
{
	static UFunction* pFnClientPlayLoopedReloadOutroAnim = NULL;

	if ( ! pFnClientPlayLoopedReloadOutroAnim )
		pFnClientPlayLoopedReloadOutroAnim = (UFunction*) UObject::GObjObjects()->Data[ 88559 ];

	AR_Weapon_MagType_execClientPlayLoopedReloadOutroAnim_Parms ClientPlayLoopedReloadOutroAnim_Parms;

	this->ProcessEvent ( pFnClientPlayLoopedReloadOutroAnim, &ClientPlayLoopedReloadOutroAnim_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.ClientReloadedOne
// [0x00020102] 
// Parameters infos:

void AR_Weapon_MagType::ClientReloadedOne ( )
{
	static UFunction* pFnClientReloadedOne = NULL;

	if ( ! pFnClientReloadedOne )
		pFnClientReloadedOne = (UFunction*) UObject::GObjObjects()->Data[ 88558 ];

	AR_Weapon_MagType_execClientReloadedOne_Parms ClientReloadedOne_Parms;

	this->ProcessEvent ( pFnClientReloadedOne, &ClientReloadedOne_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.ClientPlayLoopedReloadIntroAnim
// [0x010201C2] 
// Parameters infos:

void AR_Weapon_MagType::ClientPlayLoopedReloadIntroAnim ( )
{
	static UFunction* pFnClientPlayLoopedReloadIntroAnim = NULL;

	if ( ! pFnClientPlayLoopedReloadIntroAnim )
		pFnClientPlayLoopedReloadIntroAnim = (UFunction*) UObject::GObjObjects()->Data[ 88557 ];

	AR_Weapon_MagType_execClientPlayLoopedReloadIntroAnim_Parms ClientPlayLoopedReloadIntroAnim_Parms;

	this->ProcessEvent ( pFnClientPlayLoopedReloadIntroAnim, &ClientPlayLoopedReloadIntroAnim_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.StopWeaponReloadingAnimation
// [0x010201C2] 
// Parameters infos:

void AR_Weapon_MagType::StopWeaponReloadingAnimation ( )
{
	static UFunction* pFnStopWeaponReloadingAnimation = NULL;

	if ( ! pFnStopWeaponReloadingAnimation )
		pFnStopWeaponReloadingAnimation = (UFunction*) UObject::GObjObjects()->Data[ 88556 ];

	AR_Weapon_MagType_execStopWeaponReloadingAnimation_Parms StopWeaponReloadingAnimation_Parms;

	this->ProcessEvent ( pFnStopWeaponReloadingAnimation, &StopWeaponReloadingAnimation_Parms, NULL );
};

// Function RavagedGame.R_Weapon_MagType.PlayWeaponReloadingAnimation
// [0x010201C2] 
// Parameters infos:

void AR_Weapon_MagType::PlayWeaponReloadingAnimation ( )
{
	static UFunction* pFnPlayWeaponReloadingAnimation = NULL;

	if ( ! pFnPlayWeaponReloadingAnimation )
		pFnPlayWeaponReloadingAnimation = (UFunction*) UObject::GObjObjects()->Data[ 88555 ];

	AR_Weapon_MagType_execPlayWeaponReloadingAnimation_Parms PlayWeaponReloadingAnimation_Parms;

	this->ProcessEvent ( pFnPlayWeaponReloadingAnimation, &PlayWeaponReloadingAnimation_Parms, NULL );
};

// Function RavagedGame.R_Weapon.LagRot
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            NewValue                       ( CPF_Parm )
// int                            LastValue                      ( CPF_Parm )
// float                          MaxDiff                        ( CPF_Parm )
// int                            Index                          ( CPF_Parm )

int AR_Weapon::LagRot ( int NewValue, int LastValue, float MaxDiff, int Index )
{
	static UFunction* pFnLagRot = NULL;

	if ( ! pFnLagRot )
		pFnLagRot = (UFunction*) UObject::GObjObjects()->Data[ 88518 ];

	AR_Weapon_execLagRot_Parms LagRot_Parms;
	LagRot_Parms.NewValue = NewValue;
	LagRot_Parms.LastValue = LastValue;
	LagRot_Parms.MaxDiff = MaxDiff;
	LagRot_Parms.Index = Index;

	this->ProcessEvent ( pFnLagRot, &LagRot_Parms, NULL );

	return LagRot_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon.SetPosition
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class AUDKPawn*                Holder                         ( CPF_Parm )

void AR_Weapon::eventSetPosition ( class AUDKPawn* Holder )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = (UFunction*) UObject::GObjObjects()->Data[ 88503 ];

	AR_Weapon_eventSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.Holder = Holder;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );
};

// Function RavagedGame.R_Weapon.AttachWeaponTo
// [0x00024102] 
// Parameters infos:
// class USkeletalMeshComponent*  MeshCpnt                       ( CPF_Parm | CPF_EditInline )
// struct FName                   SocketName                     ( CPF_OptionalParm | CPF_Parm )

void AR_Weapon::AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName )
{
	static UFunction* pFnAttachWeaponTo = NULL;

	if ( ! pFnAttachWeaponTo )
		pFnAttachWeaponTo = (UFunction*) UObject::GObjObjects()->Data[ 88499 ];

	AR_Weapon_execAttachWeaponTo_Parms AttachWeaponTo_Parms;
	AttachWeaponTo_Parms.MeshCpnt = MeshCpnt;
	memcpy ( &AttachWeaponTo_Parms.SocketName, &SocketName, 0x8 );

	this->ProcessEvent ( pFnAttachWeaponTo, &AttachWeaponTo_Parms, NULL );
};

// Function RavagedGame.R_Weapon.DetachMuzzleFlash
// [0x00020102] 
// Parameters infos:

void AR_Weapon::DetachMuzzleFlash ( )
{
	static UFunction* pFnDetachMuzzleFlash = NULL;

	if ( ! pFnDetachMuzzleFlash )
		pFnDetachMuzzleFlash = (UFunction*) UObject::GObjObjects()->Data[ 88497 ];

	AR_Weapon_execDetachMuzzleFlash_Parms DetachMuzzleFlash_Parms;

	this->ProcessEvent ( pFnDetachMuzzleFlash, &DetachMuzzleFlash_Parms, NULL );
};

// Function RavagedGame.R_Weapon.AttachMuzzleFlash
// [0x00020102] 
// Parameters infos:

void AR_Weapon::AttachMuzzleFlash ( )
{
	static UFunction* pFnAttachMuzzleFlash = NULL;

	if ( ! pFnAttachMuzzleFlash )
		pFnAttachMuzzleFlash = (UFunction*) UObject::GObjObjects()->Data[ 88495 ];

	AR_Weapon_execAttachMuzzleFlash_Parms AttachMuzzleFlash_Parms;

	this->ProcessEvent ( pFnAttachMuzzleFlash, &AttachMuzzleFlash_Parms, NULL );
};

// Function RavagedGame.R_Weapon.SetShellParams
// [0x00020100] 
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void AR_Weapon::SetShellParams ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnSetShellParams = NULL;

	if ( ! pFnSetShellParams )
		pFnSetShellParams = (UFunction*) UObject::GObjObjects()->Data[ 88493 ];

	AR_Weapon_execSetShellParams_Parms SetShellParams_Parms;
	SetShellParams_Parms.PSC = PSC;

	this->ProcessEvent ( pFnSetShellParams, &SetShellParams_Parms, NULL );
};

// Function RavagedGame.R_Weapon.PreloadTextures
// [0x00020102] 
// Parameters infos:
// unsigned long                  bForcePreload                  ( CPF_Parm )

void AR_Weapon::PreloadTextures ( unsigned long bForcePreload )
{
	static UFunction* pFnPreloadTextures = NULL;

	if ( ! pFnPreloadTextures )
		pFnPreloadTextures = (UFunction*) UObject::GObjObjects()->Data[ 88491 ];

	AR_Weapon_execPreloadTextures_Parms PreloadTextures_Parms;
	PreloadTextures_Parms.bForcePreload = bForcePreload;

	this->ProcessEvent ( pFnPreloadTextures, &PreloadTextures_Parms, NULL );
};

// Function RavagedGame.R_Weapon.StopMuzzleFlash
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_Weapon::eventStopMuzzleFlash ( )
{
	static UFunction* pFnStopMuzzleFlash = NULL;

	if ( ! pFnStopMuzzleFlash )
		pFnStopMuzzleFlash = (UFunction*) UObject::GObjObjects()->Data[ 88490 ];

	AR_Weapon_eventStopMuzzleFlash_Parms StopMuzzleFlash_Parms;

	this->ProcessEvent ( pFnStopMuzzleFlash, &StopMuzzleFlash_Parms, NULL );
};

// Function RavagedGame.R_Weapon.CauseMuzzleFlash
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_Weapon::eventCauseMuzzleFlash ( )
{
	static UFunction* pFnCauseMuzzleFlash = NULL;

	if ( ! pFnCauseMuzzleFlash )
		pFnCauseMuzzleFlash = (UFunction*) UObject::GObjObjects()->Data[ 88487 ];

	AR_Weapon_eventCauseMuzzleFlash_Parms CauseMuzzleFlash_Parms;

	this->ProcessEvent ( pFnCauseMuzzleFlash, &CauseMuzzleFlash_Parms, NULL );
};

// Function RavagedGame.R_Weapon.ShellEjectorTimer
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_Weapon::eventShellEjectorTimer ( )
{
	static UFunction* pFnShellEjectorTimer = NULL;

	if ( ! pFnShellEjectorTimer )
		pFnShellEjectorTimer = (UFunction*) UObject::GObjObjects()->Data[ 88486 ];

	AR_Weapon_eventShellEjectorTimer_Parms ShellEjectorTimer_Parms;

	this->ProcessEvent ( pFnShellEjectorTimer, &ShellEjectorTimer_Parms, NULL );
};

// Function RavagedGame.R_Weapon.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AR_Weapon::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 88485 ];

	AR_Weapon_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_Weapon.TeamCanUse
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            teamInd                        ( CPF_Parm )

bool AR_Weapon::TeamCanUse ( int teamInd )
{
	static UFunction* pFnTeamCanUse = NULL;

	if ( ! pFnTeamCanUse )
		pFnTeamCanUse = (UFunction*) UObject::GObjObjects()->Data[ 80125 ];

	AR_Weapon_execTeamCanUse_Parms TeamCanUse_Parms;
	TeamCanUse_Parms.teamInd = teamInd;

	this->ProcessEvent ( pFnTeamCanUse, &TeamCanUse_Parms, NULL );

	return TeamCanUse_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AR_Weapon::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 88480 ];

	AR_Weapon_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function RavagedGame.R_Weapon.DisplayDebugDeviations
// [0x00020102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AR_Weapon::DisplayDebugDeviations ( class AHUD* H )
{
	static UFunction* pFnDisplayDebugDeviations = NULL;

	if ( ! pFnDisplayDebugDeviations )
		pFnDisplayDebugDeviations = (UFunction*) UObject::GObjObjects()->Data[ 88478 ];

	AR_Weapon_execDisplayDebugDeviations_Parms DisplayDebugDeviations_Parms;
	DisplayDebugDeviations_Parms.H = H;

	this->ProcessEvent ( pFnDisplayDebugDeviations, &DisplayDebugDeviations_Parms, NULL );
};

// Function RavagedGame.R_Weapon.ActiveRenderOverlays
// [0x00020102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AR_Weapon::ActiveRenderOverlays ( class AHUD* H )
{
	static UFunction* pFnActiveRenderOverlays = NULL;

	if ( ! pFnActiveRenderOverlays )
		pFnActiveRenderOverlays = (UFunction*) UObject::GObjObjects()->Data[ 88471 ];

	AR_Weapon_execActiveRenderOverlays_Parms ActiveRenderOverlays_Parms;
	ActiveRenderOverlays_Parms.H = H;

	this->ProcessEvent ( pFnActiveRenderOverlays, &ActiveRenderOverlays_Parms, NULL );
};

// Function RavagedGame.R_Weapon.DrawZoomedOverlay
// [0x00020102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AR_Weapon::DrawZoomedOverlay ( class AHUD* H )
{
	static UFunction* pFnDrawZoomedOverlay = NULL;

	if ( ! pFnDrawZoomedOverlay )
		pFnDrawZoomedOverlay = (UFunction*) UObject::GObjObjects()->Data[ 88462 ];

	AR_Weapon_execDrawZoomedOverlay_Parms DrawZoomedOverlay_Parms;
	DrawZoomedOverlay_Parms.H = H;

	this->ProcessEvent ( pFnDrawZoomedOverlay, &DrawZoomedOverlay_Parms, NULL );
};

// Function RavagedGame.R_Weapon.PlayWeaponPutDown
// [0x00020102] 
// Parameters infos:

void AR_Weapon::PlayWeaponPutDown ( )
{
	static UFunction* pFnPlayWeaponPutDown = NULL;

	if ( ! pFnPlayWeaponPutDown )
		pFnPlayWeaponPutDown = (UFunction*) UObject::GObjObjects()->Data[ 88461 ];

	AR_Weapon_execPlayWeaponPutDown_Parms PlayWeaponPutDown_Parms;

	this->ProcessEvent ( pFnPlayWeaponPutDown, &PlayWeaponPutDown_Parms, NULL );
};

// Function RavagedGame.R_Weapon.PerformQuickWeaponChange
// [0x00020102] 
// Parameters infos:

void AR_Weapon::PerformQuickWeaponChange ( )
{
	static UFunction* pFnPerformQuickWeaponChange = NULL;

	if ( ! pFnPerformQuickWeaponChange )
		pFnPerformQuickWeaponChange = (UFunction*) UObject::GObjObjects()->Data[ 88447 ];

	AR_Weapon_execPerformQuickWeaponChange_Parms PerformQuickWeaponChange_Parms;

	this->ProcessEvent ( pFnPerformQuickWeaponChange, &PerformQuickWeaponChange_Parms, NULL );
};

// Function RavagedGame.R_Weapon.BeginFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_Weapon::BeginFire ( unsigned char FireModeNum )
{
	static UFunction* pFnBeginFire = NULL;

	if ( ! pFnBeginFire )
		pFnBeginFire = (UFunction*) UObject::GObjObjects()->Data[ 88444 ];

	AR_Weapon_execBeginFire_Parms BeginFire_Parms;
	BeginFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnBeginFire, &BeginFire_Parms, NULL );
};

// Function RavagedGame.R_Weapon.SprintOutFinished
// [0x00020100] 
// Parameters infos:

void AR_Weapon::SprintOutFinished ( )
{
	static UFunction* pFnSprintOutFinished = NULL;

	if ( ! pFnSprintOutFinished )
		pFnSprintOutFinished = (UFunction*) UObject::GObjObjects()->Data[ 88431 ];

	AR_Weapon_execSprintOutFinished_Parms SprintOutFinished_Parms;

	this->ProcessEvent ( pFnSprintOutFinished, &SprintOutFinished_Parms, NULL );
};

// Function RavagedGame.R_Weapon.PlayWeaponEquip
// [0x00020102] 
// Parameters infos:

void AR_Weapon::PlayWeaponEquip ( )
{
	static UFunction* pFnPlayWeaponEquip = NULL;

	if ( ! pFnPlayWeaponEquip )
		pFnPlayWeaponEquip = (UFunction*) UObject::GObjObjects()->Data[ 88430 ];

	AR_Weapon_execPlayWeaponEquip_Parms PlayWeaponEquip_Parms;

	this->ProcessEvent ( pFnPlayWeaponEquip, &PlayWeaponEquip_Parms, NULL );
};

// Function RavagedGame.R_Weapon.EndFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_Weapon::EndFire ( unsigned char FireModeNum )
{
	static UFunction* pFnEndFire = NULL;

	if ( ! pFnEndFire )
		pFnEndFire = (UFunction*) UObject::GObjObjects()->Data[ 88423 ];

	AR_Weapon_execEndFire_Parms EndFire_Parms;
	EndFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnEndFire, &EndFire_Parms, NULL );
};

// Function RavagedGame.R_Weapon.PlayWeaponTaunt
// [0x00020102] 
// Parameters infos:

void AR_Weapon::PlayWeaponTaunt ( )
{
	static UFunction* pFnPlayWeaponTaunt = NULL;

	if ( ! pFnPlayWeaponTaunt )
		pFnPlayWeaponTaunt = (UFunction*) UObject::GObjObjects()->Data[ 88422 ];

	AR_Weapon_execPlayWeaponTaunt_Parms PlayWeaponTaunt_Parms;

	this->ProcessEvent ( pFnPlayWeaponTaunt, &PlayWeaponTaunt_Parms, NULL );
};

// Function RavagedGame.R_Weapon.ServerBeginTaunt
// [0x002200C2] 
// Parameters infos:

void AR_Weapon::ServerBeginTaunt ( )
{
	static UFunction* pFnServerBeginTaunt = NULL;

	if ( ! pFnServerBeginTaunt )
		pFnServerBeginTaunt = (UFunction*) UObject::GObjObjects()->Data[ 88421 ];

	AR_Weapon_execServerBeginTaunt_Parms ServerBeginTaunt_Parms;

	this->ProcessEvent ( pFnServerBeginTaunt, &ServerBeginTaunt_Parms, NULL );
};

// Function RavagedGame.R_Weapon.BeginTaunt
// [0x00020102] 
// Parameters infos:

void AR_Weapon::BeginTaunt ( )
{
	static UFunction* pFnBeginTaunt = NULL;

	if ( ! pFnBeginTaunt )
		pFnBeginTaunt = (UFunction*) UObject::GObjObjects()->Data[ 88420 ];

	AR_Weapon_execBeginTaunt_Parms BeginTaunt_Parms;

	this->ProcessEvent ( pFnBeginTaunt, &BeginTaunt_Parms, NULL );
};

// Function RavagedGame.R_Weapon.Taunt
// [0x010201C2] 
// Parameters infos:

void AR_Weapon::Taunt ( )
{
	static UFunction* pFnTaunt = NULL;

	if ( ! pFnTaunt )
		pFnTaunt = (UFunction*) UObject::GObjObjects()->Data[ 88419 ];

	AR_Weapon_execTaunt_Parms Taunt_Parms;

	this->ProcessEvent ( pFnTaunt, &Taunt_Parms, NULL );
};

// Function RavagedGame.R_Weapon.TimeWeaponTaunt
// [0x00020102] 
// Parameters infos:

void AR_Weapon::TimeWeaponTaunt ( )
{
	static UFunction* pFnTimeWeaponTaunt = NULL;

	if ( ! pFnTimeWeaponTaunt )
		pFnTimeWeaponTaunt = (UFunction*) UObject::GObjObjects()->Data[ 88418 ];

	AR_Weapon_execTimeWeaponTaunt_Parms TimeWeaponTaunt_Parms;

	this->ProcessEvent ( pFnTimeWeaponTaunt, &TimeWeaponTaunt_Parms, NULL );
};

// Function RavagedGame.R_Weapon.CalcInventoryWeight
// [0x00020102] 
// Parameters infos:

void AR_Weapon::CalcInventoryWeight ( )
{
	static UFunction* pFnCalcInventoryWeight = NULL;

	if ( ! pFnCalcInventoryWeight )
		pFnCalcInventoryWeight = (UFunction*) UObject::GObjObjects()->Data[ 88397 ];

	AR_Weapon_execCalcInventoryWeight_Parms CalcInventoryWeight_Parms;

	this->ProcessEvent ( pFnCalcInventoryWeight, &CalcInventoryWeight_Parms, NULL );
};

// Function RavagedGame.R_Weapon.PlayFireEffects
// [0x00024102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void AR_Weapon::PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffects = NULL;

	if ( ! pFnPlayFireEffects )
		pFnPlayFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 88394 ];

	AR_Weapon_execPlayFireEffects_Parms PlayFireEffects_Parms;
	PlayFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffects, &PlayFireEffects_Parms, NULL );
};

// Function RavagedGame.R_Weapon.CheckZoom
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool AR_Weapon::CheckZoom ( unsigned char FireModeNum )
{
	static UFunction* pFnCheckZoom = NULL;

	if ( ! pFnCheckZoom )
		pFnCheckZoom = (UFunction*) UObject::GObjObjects()->Data[ 88390 ];

	AR_Weapon_execCheckZoom_Parms CheckZoom_Parms;
	CheckZoom_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnCheckZoom, &CheckZoom_Parms, NULL );

	return CheckZoom_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon.TauntisFinished
// [0x00020102] 
// Parameters infos:

void AR_Weapon::TauntisFinished ( )
{
	static UFunction* pFnTauntisFinished = NULL;

	if ( ! pFnTauntisFinished )
		pFnTauntisFinished = (UFunction*) UObject::GObjObjects()->Data[ 88389 ];

	AR_Weapon_execTauntisFinished_Parms TauntisFinished_Parms;

	this->ProcessEvent ( pFnTauntisFinished, &TauntisFinished_Parms, NULL );
};

// Function RavagedGame.R_Weapon.ServerEndTaunt
// [0x002200C0] 
// Parameters infos:

void AR_Weapon::ServerEndTaunt ( )
{
	static UFunction* pFnServerEndTaunt = NULL;

	if ( ! pFnServerEndTaunt )
		pFnServerEndTaunt = (UFunction*) UObject::GObjObjects()->Data[ 88388 ];

	AR_Weapon_execServerEndTaunt_Parms ServerEndTaunt_Parms;

	this->ProcessEvent ( pFnServerEndTaunt, &ServerEndTaunt_Parms, NULL );
};

// Function RavagedGame.R_Weapon.EndTaunt
// [0x00020100] 
// Parameters infos:

void AR_Weapon::EndTaunt ( )
{
	static UFunction* pFnEndTaunt = NULL;

	if ( ! pFnEndTaunt )
		pFnEndTaunt = (UFunction*) UObject::GObjObjects()->Data[ 88387 ];

	AR_Weapon_execEndTaunt_Parms EndTaunt_Parms;

	this->ProcessEvent ( pFnEndTaunt, &EndTaunt_Parms, NULL );
};

// Function RavagedGame.R_Weapon.StopTaunt
// [0x00020100] 
// Parameters infos:

void AR_Weapon::StopTaunt ( )
{
	static UFunction* pFnStopTaunt = NULL;

	if ( ! pFnStopTaunt )
		pFnStopTaunt = (UFunction*) UObject::GObjObjects()->Data[ 88386 ];

	AR_Weapon_execStopTaunt_Parms StopTaunt_Parms;

	this->ProcessEvent ( pFnStopTaunt, &StopTaunt_Parms, NULL );
};

// Function RavagedGame.R_Weapon.AbortTaunt
// [0x00020100] 
// Parameters infos:

void AR_Weapon::AbortTaunt ( )
{
	static UFunction* pFnAbortTaunt = NULL;

	if ( ! pFnAbortTaunt )
		pFnAbortTaunt = (UFunction*) UObject::GObjObjects()->Data[ 88385 ];

	AR_Weapon_execAbortTaunt_Parms AbortTaunt_Parms;

	this->ProcessEvent ( pFnAbortTaunt, &AbortTaunt_Parms, NULL );
};

// Function RavagedGame.R_Weapon.WeaponTauntingFinished
// [0x00020100] 
// Parameters infos:

void AR_Weapon::WeaponTauntingFinished ( )
{
	static UFunction* pFnWeaponTauntingFinished = NULL;

	if ( ! pFnWeaponTauntingFinished )
		pFnWeaponTauntingFinished = (UFunction*) UObject::GObjObjects()->Data[ 88384 ];

	AR_Weapon_execWeaponTauntingFinished_Parms WeaponTauntingFinished_Parms;

	this->ProcessEvent ( pFnWeaponTauntingFinished, &WeaponTauntingFinished_Parms, NULL );
};

// Function RavagedGame.R_Weapon.PlayWeaponSprintOut
// [0x00020102] 
// Parameters infos:

void AR_Weapon::PlayWeaponSprintOut ( )
{
	static UFunction* pFnPlayWeaponSprintOut = NULL;

	if ( ! pFnPlayWeaponSprintOut )
		pFnPlayWeaponSprintOut = (UFunction*) UObject::GObjObjects()->Data[ 88383 ];

	AR_Weapon_execPlayWeaponSprintOut_Parms PlayWeaponSprintOut_Parms;

	this->ProcessEvent ( pFnPlayWeaponSprintOut, &PlayWeaponSprintOut_Parms, NULL );
};

// Function RavagedGame.R_Weapon.SprintInFinished
// [0x00020102] 
// Parameters infos:

void AR_Weapon::SprintInFinished ( )
{
	static UFunction* pFnSprintInFinished = NULL;

	if ( ! pFnSprintInFinished )
		pFnSprintInFinished = (UFunction*) UObject::GObjObjects()->Data[ 88382 ];

	AR_Weapon_execSprintInFinished_Parms SprintInFinished_Parms;

	this->ProcessEvent ( pFnSprintInFinished, &SprintInFinished_Parms, NULL );
};

// Function RavagedGame.R_Weapon.PlayWeaponSprintIn
// [0x00020102] 
// Parameters infos:

void AR_Weapon::PlayWeaponSprintIn ( )
{
	static UFunction* pFnPlayWeaponSprintIn = NULL;

	if ( ! pFnPlayWeaponSprintIn )
		pFnPlayWeaponSprintIn = (UFunction*) UObject::GObjObjects()->Data[ 88381 ];

	AR_Weapon_execPlayWeaponSprintIn_Parms PlayWeaponSprintIn_Parms;

	this->ProcessEvent ( pFnPlayWeaponSprintIn, &PlayWeaponSprintIn_Parms, NULL );
};

// Function RavagedGame.R_Weapon.WeaponStartSprint
// [0x00020102] 
// Parameters infos:

void AR_Weapon::WeaponStartSprint ( )
{
	static UFunction* pFnWeaponStartSprint = NULL;

	if ( ! pFnWeaponStartSprint )
		pFnWeaponStartSprint = (UFunction*) UObject::GObjObjects()->Data[ 88380 ];

	AR_Weapon_execWeaponStartSprint_Parms WeaponStartSprint_Parms;

	this->ProcessEvent ( pFnWeaponStartSprint, &WeaponStartSprint_Parms, NULL );
};

// Function RavagedGame.R_Weapon.GetZoomedState
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AR_Weapon::GetZoomedState ( )
{
	static UFunction* pFnGetZoomedState = NULL;

	if ( ! pFnGetZoomedState )
		pFnGetZoomedState = (UFunction*) UObject::GObjObjects()->Data[ 88378 ];

	AR_Weapon_execGetZoomedState_Parms GetZoomedState_Parms;

	this->ProcessEvent ( pFnGetZoomedState, &GetZoomedState_Parms, NULL );

	return GetZoomedState_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon.IsZoomedOrZooming
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Weapon::IsZoomedOrZooming ( )
{
	static UFunction* pFnIsZoomedOrZooming = NULL;

	if ( ! pFnIsZoomedOrZooming )
		pFnIsZoomedOrZooming = (UFunction*) UObject::GObjObjects()->Data[ 85379 ];

	AR_Weapon_execIsZoomedOrZooming_Parms IsZoomedOrZooming_Parms;

	this->ProcessEvent ( pFnIsZoomedOrZooming, &IsZoomedOrZooming_Parms, NULL );

	return IsZoomedOrZooming_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon.RestartCrosshair
// [0x00020100] 
// Parameters infos:

void AR_Weapon::RestartCrosshair ( )
{
	static UFunction* pFnRestartCrosshair = NULL;

	if ( ! pFnRestartCrosshair )
		pFnRestartCrosshair = (UFunction*) UObject::GObjObjects()->Data[ 88377 ];

	AR_Weapon_execRestartCrosshair_Parms RestartCrosshair_Parms;

	this->ProcessEvent ( pFnRestartCrosshair, &RestartCrosshair_Parms, NULL );
};

// Function RavagedGame.R_Weapon.ZoomOutAnimDone
// [0x00020102] 
// Parameters infos:

void AR_Weapon::ZoomOutAnimDone ( )
{
	static UFunction* pFnZoomOutAnimDone = NULL;

	if ( ! pFnZoomOutAnimDone )
		pFnZoomOutAnimDone = (UFunction*) UObject::GObjObjects()->Data[ 88376 ];

	AR_Weapon_execZoomOutAnimDone_Parms ZoomOutAnimDone_Parms;

	this->ProcessEvent ( pFnZoomOutAnimDone, &ZoomOutAnimDone_Parms, NULL );
};

// Function RavagedGame.R_Weapon.EndZoomImmediate
// [0x00020102] 
// Parameters infos:
// class AR_PlayerController*     PC                             ( CPF_Parm )

void AR_Weapon::EndZoomImmediate ( class AR_PlayerController* PC )
{
	static UFunction* pFnEndZoomImmediate = NULL;

	if ( ! pFnEndZoomImmediate )
		pFnEndZoomImmediate = (UFunction*) UObject::GObjObjects()->Data[ 88374 ];

	AR_Weapon_execEndZoomImmediate_Parms EndZoomImmediate_Parms;
	EndZoomImmediate_Parms.PC = PC;

	this->ProcessEvent ( pFnEndZoomImmediate, &EndZoomImmediate_Parms, NULL );
};

// Function RavagedGame.R_Weapon.LeaveZoom
// [0x00020102] 
// Parameters infos:

void AR_Weapon::LeaveZoom ( )
{
	static UFunction* pFnLeaveZoom = NULL;

	if ( ! pFnLeaveZoom )
		pFnLeaveZoom = (UFunction*) UObject::GObjObjects()->Data[ 88373 ];

	AR_Weapon_execLeaveZoom_Parms LeaveZoom_Parms;

	this->ProcessEvent ( pFnLeaveZoom, &LeaveZoom_Parms, NULL );
};

// Function RavagedGame.R_Weapon.EndZoom
// [0x00020102] 
// Parameters infos:
// class AUTPlayerController*     PC                             ( CPF_Parm )

void AR_Weapon::EndZoom ( class AUTPlayerController* PC )
{
	static UFunction* pFnEndZoom = NULL;

	if ( ! pFnEndZoom )
		pFnEndZoom = (UFunction*) UObject::GObjObjects()->Data[ 88369 ];

	AR_Weapon_execEndZoom_Parms EndZoom_Parms;
	EndZoom_Parms.PC = PC;

	this->ProcessEvent ( pFnEndZoom, &EndZoom_Parms, NULL );
};

// Function RavagedGame.R_Weapon.StopZoom
// [0x00020102] 
// Parameters infos:

void AR_Weapon::StopZoom ( )
{
	static UFunction* pFnStopZoom = NULL;

	if ( ! pFnStopZoom )
		pFnStopZoom = (UFunction*) UObject::GObjObjects()->Data[ 88367 ];

	AR_Weapon_execStopZoom_Parms StopZoom_Parms;

	this->ProcessEvent ( pFnStopZoom, &StopZoom_Parms, NULL );
};

// Function RavagedGame.R_Weapon.ZoomInComplete
// [0x00020102] 
// Parameters infos:

void AR_Weapon::ZoomInComplete ( )
{
	static UFunction* pFnZoomInComplete = NULL;

	if ( ! pFnZoomInComplete )
		pFnZoomInComplete = (UFunction*) UObject::GObjObjects()->Data[ 88366 ];

	AR_Weapon_execZoomInComplete_Parms ZoomInComplete_Parms;

	this->ProcessEvent ( pFnZoomInComplete, &ZoomInComplete_Parms, NULL );
};

// Function RavagedGame.R_Weapon.ZoomInAnimDone
// [0x00020102] 
// Parameters infos:

void AR_Weapon::ZoomInAnimDone ( )
{
	static UFunction* pFnZoomInAnimDone = NULL;

	if ( ! pFnZoomInAnimDone )
		pFnZoomInAnimDone = (UFunction*) UObject::GObjObjects()->Data[ 88364 ];

	AR_Weapon_execZoomInAnimDone_Parms ZoomInAnimDone_Parms;

	this->ProcessEvent ( pFnZoomInAnimDone, &ZoomInAnimDone_Parms, NULL );
};

// Function RavagedGame.R_Weapon.StartZoom
// [0x00020102] 
// Parameters infos:
// class AUTPlayerController*     UTPC                           ( CPF_Parm )

void AR_Weapon::StartZoom ( class AUTPlayerController* UTPC )
{
	static UFunction* pFnStartZoom = NULL;

	if ( ! pFnStartZoom )
		pFnStartZoom = (UFunction*) UObject::GObjObjects()->Data[ 88362 ];

	AR_Weapon_execStartZoom_Parms StartZoom_Parms;
	StartZoom_Parms.UTPC = UTPC;

	this->ProcessEvent ( pFnStartZoom, &StartZoom_Parms, NULL );
};

// Function RavagedGame.R_Weapon.HolderEnteredVehicle
// [0x00020102] 
// Parameters infos:

void AR_Weapon::HolderEnteredVehicle ( )
{
	static UFunction* pFnHolderEnteredVehicle = NULL;

	if ( ! pFnHolderEnteredVehicle )
		pFnHolderEnteredVehicle = (UFunction*) UObject::GObjObjects()->Data[ 88360 ];

	AR_Weapon_execHolderEnteredVehicle_Parms HolderEnteredVehicle_Parms;

	this->ProcessEvent ( pFnHolderEnteredVehicle, &HolderEnteredVehicle_Parms, NULL );
};

// Function RavagedGame.R_Weapon.GetEffectLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AR_Weapon::GetEffectLocation ( )
{
	static UFunction* pFnGetEffectLocation = NULL;

	if ( ! pFnGetEffectLocation )
		pFnGetEffectLocation = (UFunction*) UObject::GObjObjects()->Data[ 88358 ];

	AR_Weapon_execGetEffectLocation_Parms GetEffectLocation_Parms;

	this->ProcessEvent ( pFnGetEffectLocation, &GetEffectLocation_Parms, NULL );

	return GetEffectLocation_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon.ApplyRecoil
// [0x00820102] 
// Parameters infos:

void AR_Weapon::ApplyRecoil ( )
{
	static UFunction* pFnApplyRecoil = NULL;

	if ( ! pFnApplyRecoil )
		pFnApplyRecoil = (UFunction*) UObject::GObjObjects()->Data[ 88352 ];

	AR_Weapon_execApplyRecoil_Parms ApplyRecoil_Parms;

	this->ProcessEvent ( pFnApplyRecoil, &ApplyRecoil_Parms, NULL );
};

// Function RavagedGame.R_Weapon.WeaponProcessInstantHit
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// float                          DamageScale                    ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void AR_Weapon::WeaponProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, float DamageScale, int NumHits )
{
	static UFunction* pFnWeaponProcessInstantHit = NULL;

	if ( ! pFnWeaponProcessInstantHit )
		pFnWeaponProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 88344 ];

	AR_Weapon_execWeaponProcessInstantHit_Parms WeaponProcessInstantHit_Parms;
	WeaponProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &WeaponProcessInstantHit_Parms.Impact, &Impact, 0x50 );
	WeaponProcessInstantHit_Parms.DamageScale = DamageScale;
	WeaponProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnWeaponProcessInstantHit, &WeaponProcessInstantHit_Parms, NULL );
};

// Function RavagedGame.R_Weapon.UTWeaponProcessInstantHit
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// float                          DamageScale                    ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void AR_Weapon::UTWeaponProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, float DamageScale, int NumHits )
{
	static UFunction* pFnUTWeaponProcessInstantHit = NULL;

	if ( ! pFnUTWeaponProcessInstantHit )
		pFnUTWeaponProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 88335 ];

	AR_Weapon_execUTWeaponProcessInstantHit_Parms UTWeaponProcessInstantHit_Parms;
	UTWeaponProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &UTWeaponProcessInstantHit_Parms.Impact, &Impact, 0x50 );
	UTWeaponProcessInstantHit_Parms.DamageScale = DamageScale;
	UTWeaponProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnUTWeaponProcessInstantHit, &UTWeaponProcessInstantHit_Parms, NULL );
};

// Function RavagedGame.R_Weapon.sKillzProcessInstantHit
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// float                          DamageScale                    ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

bool AR_Weapon::sKillzProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, float DamageScale, int NumHits )
{
	static UFunction* pFnsKillzProcessInstantHit = NULL;

	if ( ! pFnsKillzProcessInstantHit )
		pFnsKillzProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 88324 ];

	AR_Weapon_execsKillzProcessInstantHit_Parms sKillzProcessInstantHit_Parms;
	sKillzProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &sKillzProcessInstantHit_Parms.Impact, &Impact, 0x50 );
	sKillzProcessInstantHit_Parms.DamageScale = DamageScale;
	sKillzProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnsKillzProcessInstantHit, &sKillzProcessInstantHit_Parms, NULL );

	return sKillzProcessInstantHit_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon.ProcessInstantHit
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void AR_Weapon::ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 88317 ];

	AR_Weapon_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x50 );
	ProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function RavagedGame.R_Weapon.InstantFireShotGun
// [0x00020102] 
// Parameters infos:

void AR_Weapon::InstantFireShotGun ( )
{
	static UFunction* pFnInstantFireShotGun = NULL;

	if ( ! pFnInstantFireShotGun )
		pFnInstantFireShotGun = (UFunction*) UObject::GObjObjects()->Data[ 88314 ];

	AR_Weapon_execInstantFireShotGun_Parms InstantFireShotGun_Parms;

	this->ProcessEvent ( pFnInstantFireShotGun, &InstantFireShotGun_Parms, NULL );
};

// Function RavagedGame.R_Weapon.InstantFire
// [0x00020102] 
// Parameters infos:

void AR_Weapon::InstantFire ( )
{
	static UFunction* pFnInstantFire = NULL;

	if ( ! pFnInstantFire )
		pFnInstantFire = (UFunction*) UObject::GObjObjects()->Data[ 88313 ];

	AR_Weapon_execInstantFire_Parms InstantFire_Parms;

	this->ProcessEvent ( pFnInstantFire, &InstantFire_Parms, NULL );
};

// Function RavagedGame.R_Weapon.ShakeView
// [0x00020102] 
// Parameters infos:

void AR_Weapon::ShakeView ( )
{
	static UFunction* pFnShakeView = NULL;

	if ( ! pFnShakeView )
		pFnShakeView = (UFunction*) UObject::GObjObjects()->Data[ 88310 ];

	AR_Weapon_execShakeView_Parms ShakeView_Parms;

	this->ProcessEvent ( pFnShakeView, &ShakeView_Parms, NULL );
};

// Function RavagedGame.R_Weapon.AddSpread
// [0x00820102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                BaseAim                        ( CPF_Parm )

struct FRotator AR_Weapon::AddSpread ( struct FRotator BaseAim )
{
	static UFunction* pFnAddSpread = NULL;

	if ( ! pFnAddSpread )
		pFnAddSpread = (UFunction*) UObject::GObjObjects()->Data[ 88301 ];

	AR_Weapon_execAddSpread_Parms AddSpread_Parms;
	memcpy ( &AddSpread_Parms.BaseAim, &BaseAim, 0xC );

	this->ProcessEvent ( pFnAddSpread, &AddSpread_Parms, NULL );

	return AddSpread_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon.UpdateClientDeviations
// [0x00020102] 
// Parameters infos:

void AR_Weapon::UpdateClientDeviations ( )
{
	static UFunction* pFnUpdateClientDeviations = NULL;

	if ( ! pFnUpdateClientDeviations )
		pFnUpdateClientDeviations = (UFunction*) UObject::GObjObjects()->Data[ 88298 ];

	AR_Weapon_execUpdateClientDeviations_Parms UpdateClientDeviations_Parms;

	this->ProcessEvent ( pFnUpdateClientDeviations, &UpdateClientDeviations_Parms, NULL );
};

// Function RavagedGame.R_Weapon.SampleMotionTimer
// [0x00820102] 
// Parameters infos:

void AR_Weapon::SampleMotionTimer ( )
{
	static UFunction* pFnSampleMotionTimer = NULL;

	if ( ! pFnSampleMotionTimer )
		pFnSampleMotionTimer = (UFunction*) UObject::GObjObjects()->Data[ 88296 ];

	AR_Weapon_execSampleMotionTimer_Parms SampleMotionTimer_Parms;

	this->ProcessEvent ( pFnSampleMotionTimer, &SampleMotionTimer_Parms, NULL );
};

// Function RavagedGame.R_Weapon.DropFrom
// [0x00020002] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 StartVelocity                  ( CPF_Parm )

void AR_Weapon::DropFrom ( struct FVector StartLocation, struct FVector StartVelocity )
{
	static UFunction* pFnDropFrom = NULL;

	if ( ! pFnDropFrom )
		pFnDropFrom = (UFunction*) UObject::GObjObjects()->Data[ 88293 ];

	AR_Weapon_execDropFrom_Parms DropFrom_Parms;
	memcpy ( &DropFrom_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DropFrom_Parms.StartVelocity, &StartVelocity, 0xC );

	this->ProcessEvent ( pFnDropFrom, &DropFrom_Parms, NULL );
};

// Function RavagedGame.R_Weapon.SetMotionSampleTimer
// [0x00020102] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )
// unsigned long                  bShowDeviations                ( CPF_Parm )

void AR_Weapon::SetMotionSampleTimer ( unsigned long bOn, unsigned long bShowDeviations )
{
	static UFunction* pFnSetMotionSampleTimer = NULL;

	if ( ! pFnSetMotionSampleTimer )
		pFnSetMotionSampleTimer = (UFunction*) UObject::GObjObjects()->Data[ 88290 ];

	AR_Weapon_execSetMotionSampleTimer_Parms SetMotionSampleTimer_Parms;
	SetMotionSampleTimer_Parms.bOn = bOn;
	SetMotionSampleTimer_Parms.bShowDeviations = bShowDeviations;

	this->ProcessEvent ( pFnSetMotionSampleTimer, &SetMotionSampleTimer_Parms, NULL );
};

// Function RavagedGame.R_Supply_Object.RegenPlayerPawn
// [0x00020002] 
// Parameters infos:
// class AR_Pawn*                 pwn                            ( CPF_Parm )
// float                          DT                             ( CPF_Parm )

void AR_Supply_Object::RegenPlayerPawn ( class AR_Pawn* pwn, float DT )
{
	static UFunction* pFnRegenPlayerPawn = NULL;

	if ( ! pFnRegenPlayerPawn )
		pFnRegenPlayerPawn = (UFunction*) UObject::GObjObjects()->Data[ 78237 ];

	AR_Supply_Object_execRegenPlayerPawn_Parms RegenPlayerPawn_Parms;
	RegenPlayerPawn_Parms.pwn = pwn;
	RegenPlayerPawn_Parms.DT = DT;

	this->ProcessEvent ( pFnRegenPlayerPawn, &RegenPlayerPawn_Parms, NULL );
};

// Function RavagedGame.R_Supply_Object.SupplyPlayerPawns
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Supply_Object::SupplyPlayerPawns ( )
{
	static UFunction* pFnSupplyPlayerPawns = NULL;

	if ( ! pFnSupplyPlayerPawns )
		pFnSupplyPlayerPawns = (UFunction*) UObject::GObjObjects()->Data[ 78233 ];

	AR_Supply_Object_execSupplyPlayerPawns_Parms SupplyPlayerPawns_Parms;

	this->ProcessEvent ( pFnSupplyPlayerPawns, &SupplyPlayerPawns_Parms, NULL );

	return SupplyPlayerPawns_Parms.ReturnValue;
};

// Function RavagedGame.R_Supply_Object.CheckPawns
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Supply_Object::CheckPawns ( )
{
	static UFunction* pFnCheckPawns = NULL;

	if ( ! pFnCheckPawns )
		pFnCheckPawns = (UFunction*) UObject::GObjObjects()->Data[ 78231 ];

	AR_Supply_Object_execCheckPawns_Parms CheckPawns_Parms;

	this->ProcessEvent ( pFnCheckPawns, &CheckPawns_Parms, NULL );

	return CheckPawns_Parms.ReturnValue;
};

// Function RavagedGame.R_Supply_Object.SupplyTimer
// [0x00020002] 
// Parameters infos:

void AR_Supply_Object::SupplyTimer ( )
{
	static UFunction* pFnSupplyTimer = NULL;

	if ( ! pFnSupplyTimer )
		pFnSupplyTimer = (UFunction*) UObject::GObjObjects()->Data[ 78230 ];

	AR_Supply_Object_execSupplyTimer_Parms SupplyTimer_Parms;

	this->ProcessEvent ( pFnSupplyTimer, &SupplyTimer_Parms, NULL );
};

// Function RavagedGame.R_Supply_Object.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void AR_Supply_Object::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 78229 ];

	AR_Supply_Object_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_InventoryManager.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AR_InventoryManager::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 84556 ];

	AR_InventoryManager_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function RavagedGame.R_InventoryManager.NextWeapon
// [0x00020102] 
// Parameters infos:

void AR_InventoryManager::NextWeapon ( )
{
	static UFunction* pFnNextWeapon = NULL;

	if ( ! pFnNextWeapon )
		pFnNextWeapon = (UFunction*) UObject::GObjObjects()->Data[ 84555 ];

	AR_InventoryManager_execNextWeapon_Parms NextWeapon_Parms;

	this->ProcessEvent ( pFnNextWeapon, &NextWeapon_Parms, NULL );
};

// Function RavagedGame.R_InventoryManager.PrevWeapon
// [0x00020102] 
// Parameters infos:

void AR_InventoryManager::PrevWeapon ( )
{
	static UFunction* pFnPrevWeapon = NULL;

	if ( ! pFnPrevWeapon )
		pFnPrevWeapon = (UFunction*) UObject::GObjObjects()->Data[ 84554 ];

	AR_InventoryManager_execPrevWeapon_Parms PrevWeapon_Parms;

	this->ProcessEvent ( pFnPrevWeapon, &PrevWeapon_Parms, NULL );
};

// Function RavagedGame.R_InventoryManager.DropAmmo
// [0x00020102] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 StartVelocity                  ( CPF_Parm )

void AR_InventoryManager::DropAmmo ( struct FVector StartLocation, struct FVector StartVelocity )
{
	static UFunction* pFnDropAmmo = NULL;

	if ( ! pFnDropAmmo )
		pFnDropAmmo = (UFunction*) UObject::GObjObjects()->Data[ 84547 ];

	AR_InventoryManager_execDropAmmo_Parms DropAmmo_Parms;
	memcpy ( &DropAmmo_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DropAmmo_Parms.StartVelocity, &StartVelocity, 0xC );

	this->ProcessEvent ( pFnDropAmmo, &DropAmmo_Parms, NULL );
};

// Function RavagedGame.R_InventoryManager.AddAmmoToWeapon
// [0x00020002] 
// Parameters infos:
// int                            AmountToAdd                    ( CPF_Parm )
// class UClass*                  WeaponClassToAddTo             ( CPF_Parm )

void AR_InventoryManager::AddAmmoToWeapon ( int AmountToAdd, class UClass* WeaponClassToAddTo )
{
	static UFunction* pFnAddAmmoToWeapon = NULL;

	if ( ! pFnAddAmmoToWeapon )
		pFnAddAmmoToWeapon = (UFunction*) UObject::GObjObjects()->Data[ 84541 ];

	AR_InventoryManager_execAddAmmoToWeapon_Parms AddAmmoToWeapon_Parms;
	AddAmmoToWeapon_Parms.AmountToAdd = AmountToAdd;
	AddAmmoToWeapon_Parms.WeaponClassToAddTo = WeaponClassToAddTo;

	this->ProcessEvent ( pFnAddAmmoToWeapon, &AddAmmoToWeapon_Parms, NULL );
};

// Function RavagedGame.R_InventoryManager.AddInventory
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              NewItem                        ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

bool AR_InventoryManager::AddInventory ( class AInventory* NewItem, unsigned long bDoNotActivate )
{
	static UFunction* pFnAddInventory = NULL;

	if ( ! pFnAddInventory )
		pFnAddInventory = (UFunction*) UObject::GObjObjects()->Data[ 84537 ];

	AR_InventoryManager_execAddInventory_Parms AddInventory_Parms;
	AddInventory_Parms.NewItem = NewItem;
	AddInventory_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnAddInventory, &AddInventory_Parms, NULL );

	return AddInventory_Parms.ReturnValue;
};

// Function RavagedGame.R_AnimBlendByVehicleSeat.UpdateInScript
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void UR_AnimBlendByVehicleSeat::eventUpdateInScript ( float DT )
{
	static UFunction* pFnUpdateInScript = NULL;

	if ( ! pFnUpdateInScript )
		pFnUpdateInScript = (UFunction*) UObject::GObjObjects()->Data[ 78348 ];

	UR_AnimBlendByVehicleSeat_eventUpdateInScript_Parms UpdateInScript_Parms;
	UpdateInScript_Parms.DT = DT;

	this->ProcessEvent ( pFnUpdateInScript, &UpdateInScript_Parms, NULL );
};

// Function RavagedGame.R_AnimBlendByVehicleSeat.HandIKEnabled
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bUsingIK                       ( CPF_Parm )

void UR_AnimBlendByVehicleSeat::eventHandIKEnabled ( unsigned long bUsingIK )
{
	static UFunction* pFnHandIKEnabled = NULL;

	if ( ! pFnHandIKEnabled )
		pFnHandIKEnabled = (UFunction*) UObject::GObjObjects()->Data[ 78345 ];

	UR_AnimBlendByVehicleSeat_eventHandIKEnabled_Parms HandIKEnabled_Parms;
	HandIKEnabled_Parms.bUsingIK = bUsingIK;

	this->ProcessEvent ( pFnHandIKEnabled, &HandIKEnabled_Parms, NULL );
};

// Function RavagedGame.R_AnimBlendByVehicleSeat.GetSeatAnimNames
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AVehicle*                veh                            ( CPF_Parm )
// int                            CurSeatIdx                     ( CPF_Parm )

void UR_AnimBlendByVehicleSeat::eventGetSeatAnimNames ( class AVehicle* veh, int CurSeatIdx )
{
	static UFunction* pFnGetSeatAnimNames = NULL;

	if ( ! pFnGetSeatAnimNames )
		pFnGetSeatAnimNames = (UFunction*) UObject::GObjObjects()->Data[ 78290 ];

	UR_AnimBlendByVehicleSeat_eventGetSeatAnimNames_Parms GetSeatAnimNames_Parms;
	GetSeatAnimNames_Parms.veh = veh;
	GetSeatAnimNames_Parms.CurSeatIdx = CurSeatIdx;

	this->ProcessEvent ( pFnGetSeatAnimNames, &GetSeatAnimNames_Parms, NULL );
};

// Function RavagedGame.R_AnimBlendByVehicleSeat.CheckForHandIKSockets
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AVehicle*                veh                            ( CPF_Parm )
// int                            CurSeatIdx                     ( CPF_Parm )

void UR_AnimBlendByVehicleSeat::eventCheckForHandIKSockets ( class AVehicle* veh, int CurSeatIdx )
{
	static UFunction* pFnCheckForHandIKSockets = NULL;

	if ( ! pFnCheckForHandIKSockets )
		pFnCheckForHandIKSockets = (UFunction*) UObject::GObjObjects()->Data[ 78282 ];

	UR_AnimBlendByVehicleSeat_eventCheckForHandIKSockets_Parms CheckForHandIKSockets_Parms;
	CheckForHandIKSockets_Parms.veh = veh;
	CheckForHandIKSockets_Parms.CurSeatIdx = CurSeatIdx;

	this->ProcessEvent ( pFnCheckForHandIKSockets, &CheckForHandIKSockets_Parms, NULL );
};

// Function RavagedGame.R_AnimBlendByVehicleSeat.MyTickAnim
// [0x00820102] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void UR_AnimBlendByVehicleSeat::MyTickAnim ( float DeltaSeconds )
{
	static UFunction* pFnMyTickAnim = NULL;

	if ( ! pFnMyTickAnim )
		pFnMyTickAnim = (UFunction*) UObject::GObjObjects()->Data[ 78275 ];

	UR_AnimBlendByVehicleSeat_execMyTickAnim_Parms MyTickAnim_Parms;
	MyTickAnim_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnMyTickAnim, &MyTickAnim_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land_Leaning.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AR_Vehicle_Land_Leaning::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 87720 ];

	AR_Vehicle_Land_Leaning_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land_Leaning.TickSpecial
// [0x00020102] 
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void AR_Vehicle_Land_Leaning::TickSpecial ( float DT )
{
	static UFunction* pFnTickSpecial = NULL;

	if ( ! pFnTickSpecial )
		pFnTickSpecial = (UFunction*) UObject::GObjObjects()->Data[ 87717 ];

	AR_Vehicle_Land_Leaning_execTickSpecial_Parms TickSpecial_Parms;
	TickSpecial_Parms.DT = DT;

	this->ProcessEvent ( pFnTickSpecial, &TickSpecial_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land_Leaning.VehicleProcessViewRotation
// [0x00420102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// int                            SeatIndex                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void AR_Vehicle_Land_Leaning::VehicleProcessViewRotation ( float DeltaTime, int SeatIndex, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnVehicleProcessViewRotation = NULL;

	if ( ! pFnVehicleProcessViewRotation )
		pFnVehicleProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 87711 ];

	AR_Vehicle_Land_Leaning_execVehicleProcessViewRotation_Parms VehicleProcessViewRotation_Parms;
	VehicleProcessViewRotation_Parms.DeltaTime = DeltaTime;
	VehicleProcessViewRotation_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnVehicleProcessViewRotation, &VehicleProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &VehicleProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &VehicleProcessViewRotation_Parms.out_DeltaRot, 0xC );
};

// Function RavagedGame.R_Vehicle_Land_Leaning.ResetCam
// [0x00020102] 
// Parameters infos:

void AR_Vehicle_Land_Leaning::ResetCam ( )
{
	static UFunction* pFnResetCam = NULL;

	if ( ! pFnResetCam )
		pFnResetCam = (UFunction*) UObject::GObjObjects()->Data[ 87710 ];

	AR_Vehicle_Land_Leaning_execResetCam_Parms ResetCam_Parms;

	this->ProcessEvent ( pFnResetCam, &ResetCam_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land_Leaning.SetInputsLeaner
// [0x00020102] 
// Parameters infos:
// float                          InForward                      ( CPF_Parm )
// float                          InStrafe                       ( CPF_Parm )
// float                          InUp                           ( CPF_Parm )
// int                            Mouse                          ( CPF_Parm )

void AR_Vehicle_Land_Leaning::SetInputsLeaner ( float InForward, float InStrafe, float InUp, int Mouse )
{
	static UFunction* pFnSetInputsLeaner = NULL;

	if ( ! pFnSetInputsLeaner )
		pFnSetInputsLeaner = (UFunction*) UObject::GObjObjects()->Data[ 87705 ];

	AR_Vehicle_Land_Leaning_execSetInputsLeaner_Parms SetInputsLeaner_Parms;
	SetInputsLeaner_Parms.InForward = InForward;
	SetInputsLeaner_Parms.InStrafe = InStrafe;
	SetInputsLeaner_Parms.InUp = InUp;
	SetInputsLeaner_Parms.Mouse = Mouse;

	this->ProcessEvent ( pFnSetInputsLeaner, &SetInputsLeaner_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land.ChassisTouchingUpsideDown
// [0x00020102] 
// Parameters infos:
// unsigned long                  bTouching                      ( CPF_Parm )

void AR_Vehicle_Land::ChassisTouchingUpsideDown ( unsigned long bTouching )
{
	static UFunction* pFnChassisTouchingUpsideDown = NULL;

	if ( ! pFnChassisTouchingUpsideDown )
		pFnChassisTouchingUpsideDown = (UFunction*) UObject::GObjObjects()->Data[ 87680 ];

	AR_Vehicle_Land_execChassisTouchingUpsideDown_Parms ChassisTouchingUpsideDown_Parms;
	ChassisTouchingUpsideDown_Parms.bTouching = bTouching;

	this->ProcessEvent ( pFnChassisTouchingUpsideDown, &ChassisTouchingUpsideDown_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land.DoStopBoosting
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_Vehicle_Land::eventDoStopBoosting ( )
{
	static UFunction* pFnDoStopBoosting = NULL;

	if ( ! pFnDoStopBoosting )
		pFnDoStopBoosting = (UFunction*) UObject::GObjObjects()->Data[ 87677 ];

	AR_Vehicle_Land_eventDoStopBoosting_Parms DoStopBoosting_Parms;

	this->ProcessEvent ( pFnDoStopBoosting, &DoStopBoosting_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land.DoBoosting
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AR_Vehicle_Land::eventDoBoosting ( )
{
	static UFunction* pFnDoBoosting = NULL;

	if ( ! pFnDoBoosting )
		pFnDoBoosting = (UFunction*) UObject::GObjObjects()->Data[ 87670 ];

	AR_Vehicle_Land_eventDoBoosting_Parms DoBoosting_Parms;

	this->ProcessEvent ( pFnDoBoosting, &DoBoosting_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land.CauseMuzzleFlashLight
// [0x00020102] 
// Parameters infos:
// int                            SeatIndex                      ( CPF_Parm )

void AR_Vehicle_Land::CauseMuzzleFlashLight ( int SeatIndex )
{
	static UFunction* pFnCauseMuzzleFlashLight = NULL;

	if ( ! pFnCauseMuzzleFlashLight )
		pFnCauseMuzzleFlashLight = (UFunction*) UObject::GObjObjects()->Data[ 87668 ];

	AR_Vehicle_Land_execCauseMuzzleFlashLight_Parms CauseMuzzleFlashLight_Parms;
	CauseMuzzleFlashLight_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnCauseMuzzleFlashLight, &CauseMuzzleFlashLight_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land.IdleUpEngineTimer
// [0x00020102] 
// Parameters infos:

void AR_Vehicle_Land::IdleUpEngineTimer ( )
{
	static UFunction* pFnIdleUpEngineTimer = NULL;

	if ( ! pFnIdleUpEngineTimer )
		pFnIdleUpEngineTimer = (UFunction*) UObject::GObjObjects()->Data[ 87667 ];

	AR_Vehicle_Land_execIdleUpEngineTimer_Parms IdleUpEngineTimer_Parms;

	this->ProcessEvent ( pFnIdleUpEngineTimer, &IdleUpEngineTimer_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land.DrivingStatusChanged
// [0x00020102] 
// Parameters infos:

void AR_Vehicle_Land::DrivingStatusChanged ( )
{
	static UFunction* pFnDrivingStatusChanged = NULL;

	if ( ! pFnDrivingStatusChanged )
		pFnDrivingStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 87666 ];

	AR_Vehicle_Land_execDrivingStatusChanged_Parms DrivingStatusChanged_Parms;

	this->ProcessEvent ( pFnDrivingStatusChanged, &DrivingStatusChanged_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land.TryToDrive
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool AR_Vehicle_Land::TryToDrive ( class APawn* P )
{
	static UFunction* pFnTryToDrive = NULL;

	if ( ! pFnTryToDrive )
		pFnTryToDrive = (UFunction*) UObject::GObjObjects()->Data[ 87659 ];

	AR_Vehicle_Land_execTryToDrive_Parms TryToDrive_Parms;
	TryToDrive_Parms.P = P;

	this->ProcessEvent ( pFnTryToDrive, &TryToDrive_Parms, NULL );

	return TryToDrive_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle_Land.SuspensionHeavyShift
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void AR_Vehicle_Land::eventSuspensionHeavyShift ( float Delta )
{
	static UFunction* pFnSuspensionHeavyShift = NULL;

	if ( ! pFnSuspensionHeavyShift )
		pFnSuspensionHeavyShift = (UFunction*) UObject::GObjObjects()->Data[ 87657 ];

	AR_Vehicle_Land_eventSuspensionHeavyShift_Parms SuspensionHeavyShift_Parms;
	SuspensionHeavyShift_Parms.Delta = Delta;

	this->ProcessEvent ( pFnSuspensionHeavyShift, &SuspensionHeavyShift_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land.SetInputs
// [0x00020102] 
// Parameters infos:
// float                          InForward                      ( CPF_Parm )
// float                          InStrafe                       ( CPF_Parm )
// float                          InUp                           ( CPF_Parm )

void AR_Vehicle_Land::SetInputs ( float InForward, float InStrafe, float InUp )
{
	static UFunction* pFnSetInputs = NULL;

	if ( ! pFnSetInputs )
		pFnSetInputs = (UFunction*) UObject::GObjObjects()->Data[ 87653 ];

	AR_Vehicle_Land_execSetInputs_Parms SetInputs_Parms;
	SetInputs_Parms.InForward = InForward;
	SetInputs_Parms.InStrafe = InStrafe;
	SetInputs_Parms.InUp = InUp;

	this->ProcessEvent ( pFnSetInputs, &SetInputs_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AR_Vehicle_Land::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 87637 ];

	AR_Vehicle_Land_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function RavagedGame.R_Vehicle_Land.ThrowDriver
// [0x00020002] 
// Parameters infos:

void AR_Vehicle_Land::ThrowDriver ( )
{
	static UFunction* pFnThrowDriver = NULL;

	if ( ! pFnThrowDriver )
		pFnThrowDriver = (UFunction*) UObject::GObjObjects()->Data[ 87634 ];

	AR_Vehicle_Land_execThrowDriver_Parms ThrowDriver_Parms;

	this->ProcessEvent ( pFnThrowDriver, &ThrowDriver_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land.InitializeSeats
// [0x00020002] 
// Parameters infos:

void AR_Vehicle_Land::InitializeSeats ( )
{
	static UFunction* pFnInitializeSeats = NULL;

	if ( ! pFnInitializeSeats )
		pFnInitializeSeats = (UFunction*) UObject::GObjObjects()->Data[ 87631 ];

	AR_Vehicle_Land_execInitializeSeats_Parms InitializeSeats_Parms;

	this->ProcessEvent ( pFnInitializeSeats, &InitializeSeats_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land.SetLandSensitivity
// [0x00020102] 
// Parameters infos:
// float                          NewSensitivity                 ( CPF_Parm )
// unsigned long                  bIsServer                      ( CPF_Parm )

void AR_Vehicle_Land::SetLandSensitivity ( float NewSensitivity, unsigned long bIsServer )
{
	static UFunction* pFnSetLandSensitivity = NULL;

	if ( ! pFnSetLandSensitivity )
		pFnSetLandSensitivity = (UFunction*) UObject::GObjObjects()->Data[ 87628 ];

	AR_Vehicle_Land_execSetLandSensitivity_Parms SetLandSensitivity_Parms;
	SetLandSensitivity_Parms.NewSensitivity = NewSensitivity;
	SetLandSensitivity_Parms.bIsServer = bIsServer;

	this->ProcessEvent ( pFnSetLandSensitivity, &SetLandSensitivity_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AR_Vehicle_Land::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 87626 ];

	AR_Vehicle_Land_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land.PostLandingAwardDelay
// [0x00020102] 
// Parameters infos:

void AR_Vehicle_Land::PostLandingAwardDelay ( )
{
	static UFunction* pFnPostLandingAwardDelay = NULL;

	if ( ! pFnPostLandingAwardDelay )
		pFnPostLandingAwardDelay = (UFunction*) UObject::GObjObjects()->Data[ 87625 ];

	AR_Vehicle_Land_execPostLandingAwardDelay_Parms PostLandingAwardDelay_Parms;

	this->ProcessEvent ( pFnPostLandingAwardDelay, &PostLandingAwardDelay_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land.AddVelocity
// [0x00024002] 
// Parameters infos:
// struct FVector                 NewVelocity                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )

void AR_Vehicle_Land::AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnAddVelocity = NULL;

	if ( ! pFnAddVelocity )
		pFnAddVelocity = (UFunction*) UObject::GObjObjects()->Data[ 87620 ];

	AR_Vehicle_Land_execAddVelocity_Parms AddVelocity_Parms;
	memcpy ( &AddVelocity_Parms.NewVelocity, &NewVelocity, 0xC );
	memcpy ( &AddVelocity_Parms.HitLocation, &HitLocation, 0xC );
	AddVelocity_Parms.DamageType = DamageType;
	memcpy ( &AddVelocity_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnAddVelocity, &AddVelocity_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Land.SetDriving
// [0x00020102] 
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void AR_Vehicle_Land::SetDriving ( unsigned long B )
{
	static UFunction* pFnSetDriving = NULL;

	if ( ! pFnSetDriving )
		pFnSetDriving = (UFunction*) UObject::GObjObjects()->Data[ 87618 ];

	AR_Vehicle_Land_execSetDriving_Parms SetDriving_Parms;
	SetDriving_Parms.B = B;

	this->ProcessEvent ( pFnSetDriving, &SetDriving_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment.StopThirdPersonFireEffects
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_WeaponAttachment::eventStopThirdPersonFireEffects ( )
{
	static UFunction* pFnStopThirdPersonFireEffects = NULL;

	if ( ! pFnStopThirdPersonFireEffects )
		pFnStopThirdPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 78494 ];

	AR_WeaponAttachment_eventStopThirdPersonFireEffects_Parms StopThirdPersonFireEffects_Parms;

	this->ProcessEvent ( pFnStopThirdPersonFireEffects, &StopThirdPersonFireEffects_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment.GetWeapon3PAnimationFromIndex
// [0x00020102] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Idx                            ( CPF_Parm )
// unsigned long                  bProned                        ( CPF_Parm )

struct FName AR_WeaponAttachment::GetWeapon3PAnimationFromIndex ( unsigned char Idx, unsigned long bProned )
{
	static UFunction* pFnGetWeapon3PAnimationFromIndex = NULL;

	if ( ! pFnGetWeapon3PAnimationFromIndex )
		pFnGetWeapon3PAnimationFromIndex = (UFunction*) UObject::GObjObjects()->Data[ 78490 ];

	AR_WeaponAttachment_execGetWeapon3PAnimationFromIndex_Parms GetWeapon3PAnimationFromIndex_Parms;
	GetWeapon3PAnimationFromIndex_Parms.Idx = Idx;
	GetWeapon3PAnimationFromIndex_Parms.bProned = bProned;

	this->ProcessEvent ( pFnGetWeapon3PAnimationFromIndex, &GetWeapon3PAnimationFromIndex_Parms, NULL );

	return GetWeapon3PAnimationFromIndex_Parms.ReturnValue;
};

// Function RavagedGame.R_WeaponAttachment_Tracer.ThirdPersonFireEffects
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void AR_WeaponAttachment_Tracer::ThirdPersonFireEffects ( struct FVector HitLocation )
{
	static UFunction* pFnThirdPersonFireEffects = NULL;

	if ( ! pFnThirdPersonFireEffects )
		pFnThirdPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 78530 ];

	AR_WeaponAttachment_Tracer_execThirdPersonFireEffects_Parms ThirdPersonFireEffects_Parms;
	memcpy ( &ThirdPersonFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnThirdPersonFireEffects, &ThirdPersonFireEffects_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment_Tracer.FirstPersonFireEffects
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 PawnWeapon                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void AR_WeaponAttachment_Tracer::FirstPersonFireEffects ( class AWeapon* PawnWeapon, struct FVector HitLocation )
{
	static UFunction* pFnFirstPersonFireEffects = NULL;

	if ( ! pFnFirstPersonFireEffects )
		pFnFirstPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 78527 ];

	AR_WeaponAttachment_Tracer_execFirstPersonFireEffects_Parms FirstPersonFireEffects_Parms;
	FirstPersonFireEffects_Parms.PawnWeapon = PawnWeapon;
	memcpy ( &FirstPersonFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnFirstPersonFireEffects, &FirstPersonFireEffects_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment_Tracer.FireTracerRound
// [0x00020102] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 EffectLocation                 ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

class AProjectile* AR_WeaponAttachment_Tracer::FireTracerRound ( struct FVector EffectLocation, struct FVector HitLocation )
{
	static UFunction* pFnFireTracerRound = NULL;

	if ( ! pFnFireTracerRound )
		pFnFireTracerRound = (UFunction*) UObject::GObjObjects()->Data[ 78521 ];

	AR_WeaponAttachment_Tracer_execFireTracerRound_Parms FireTracerRound_Parms;
	memcpy ( &FireTracerRound_Parms.EffectLocation, &EffectLocation, 0xC );
	memcpy ( &FireTracerRound_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnFireTracerRound, &FireTracerRound_Parms, NULL );

	return FireTracerRound_Parms.ReturnValue;
};

// Function RavagedGame.R_TracerProjectile.ProjectileHurtRadius
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool AR_TracerProjectile::ProjectileHurtRadius ( struct FVector HurtOrigin, struct FVector HitNormal )
{
	static UFunction* pFnProjectileHurtRadius = NULL;

	if ( ! pFnProjectileHurtRadius )
		pFnProjectileHurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 86795 ];

	AR_TracerProjectile_execProjectileHurtRadius_Parms ProjectileHurtRadius_Parms;
	memcpy ( &ProjectileHurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	memcpy ( &ProjectileHurtRadius_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProjectileHurtRadius, &ProjectileHurtRadius_Parms, NULL );

	return ProjectileHurtRadius_Parms.ReturnValue;
};

// Function RavagedGame.R_TracerProjectile.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AR_TracerProjectile::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 86792 ];

	AR_TracerProjectile_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function RavagedGame.R_TracerProjectile.SpawnExplosionEffects
// [0x00020100] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AR_TracerProjectile::SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnSpawnExplosionEffects = NULL;

	if ( ! pFnSpawnExplosionEffects )
		pFnSpawnExplosionEffects = (UFunction*) UObject::GObjObjects()->Data[ 86789 ];

	AR_TracerProjectile_execSpawnExplosionEffects_Parms SpawnExplosionEffects_Parms;
	memcpy ( &SpawnExplosionEffects_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &SpawnExplosionEffects_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnSpawnExplosionEffects, &SpawnExplosionEffects_Parms, NULL );
};

// Function RavagedGame.R_Projectile.Projectile_HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void AR_Projectile::eventProjectile_HitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnProjectile_HitWall = NULL;

	if ( ! pFnProjectile_HitWall )
		pFnProjectile_HitWall = (UFunction*) UObject::GObjObjects()->Data[ 86428 ];

	AR_Projectile_eventProjectile_HitWall_Parms Projectile_HitWall_Parms;
	memcpy ( &Projectile_HitWall_Parms.HitNormal, &HitNormal, 0xC );
	Projectile_HitWall_Parms.Wall = Wall;
	Projectile_HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnProjectile_HitWall, &Projectile_HitWall_Parms, NULL );
};

// Function RavagedGame.R_Projectile.HitWall
// [0x00020922] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void AR_Projectile::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 86424 ];

	AR_Projectile_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function RavagedGame.R_Projectile.ProcessTouch
// [0x00020102] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AR_Projectile::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 86420 ];

	AR_Projectile_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function RavagedGame.R_Projectile.CheckMinArmDistance
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool AR_Projectile::CheckMinArmDistance ( struct FVector HitNormal )
{
	static UFunction* pFnCheckMinArmDistance = NULL;

	if ( ! pFnCheckMinArmDistance )
		pFnCheckMinArmDistance = (UFunction*) UObject::GObjObjects()->Data[ 86416 ];

	AR_Projectile_execCheckMinArmDistance_Parms CheckMinArmDistance_Parms;
	memcpy ( &CheckMinArmDistance_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnCheckMinArmDistance, &CheckMinArmDistance_Parms, NULL );

	return CheckMinArmDistance_Parms.ReturnValue;
};

// Function RavagedGame.R_Projectile.DoMinArmBounce
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )

void AR_Projectile::DoMinArmBounce ( struct FVector HitNormal )
{
	static UFunction* pFnDoMinArmBounce = NULL;

	if ( ! pFnDoMinArmBounce )
		pFnDoMinArmBounce = (UFunction*) UObject::GObjObjects()->Data[ 86414 ];

	AR_Projectile_execDoMinArmBounce_Parms DoMinArmBounce_Parms;
	memcpy ( &DoMinArmBounce_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnDoMinArmBounce, &DoMinArmBounce_Parms, NULL );
};

// Function RavagedGame.R_Projectile.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AR_Projectile::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 86411 ];

	AR_Projectile_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function RavagedGame.R_Projectile.Actor_HurtRadius
// [0x00824102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          hurtDamageRadius               ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// class AActor*                  IgnoredActor                   ( CPF_OptionalParm | CPF_Parm )
// class AController*             InstigatedByController         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDoFullDamage                  ( CPF_OptionalParm | CPF_Parm )

bool AR_Projectile::Actor_HurtRadius ( float BaseDamage, float hurtDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage )
{
	static UFunction* pFnActor_HurtRadius = NULL;

	if ( ! pFnActor_HurtRadius )
		pFnActor_HurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 86396 ];

	AR_Projectile_execActor_HurtRadius_Parms Actor_HurtRadius_Parms;
	Actor_HurtRadius_Parms.BaseDamage = BaseDamage;
	Actor_HurtRadius_Parms.hurtDamageRadius = hurtDamageRadius;
	Actor_HurtRadius_Parms.DamageType = DamageType;
	Actor_HurtRadius_Parms.Momentum = Momentum;
	memcpy ( &Actor_HurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	Actor_HurtRadius_Parms.IgnoredActor = IgnoredActor;
	Actor_HurtRadius_Parms.InstigatedByController = InstigatedByController;
	Actor_HurtRadius_Parms.bDoFullDamage = bDoFullDamage;

	this->ProcessEvent ( pFnActor_HurtRadius, &Actor_HurtRadius_Parms, NULL );

	return Actor_HurtRadius_Parms.ReturnValue;
};

// Function RavagedGame.R_Projectile.Projectile_HurtRadius
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DamageAmount                   ( CPF_Parm )
// float                          InDamageRadius                 ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// class AActor*                  IgnoredActor                   ( CPF_OptionalParm | CPF_Parm )
// class AController*             InstigatedByController         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDoFullDamage                  ( CPF_OptionalParm | CPF_Parm )

bool AR_Projectile::Projectile_HurtRadius ( float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage )
{
	static UFunction* pFnProjectile_HurtRadius = NULL;

	if ( ! pFnProjectile_HurtRadius )
		pFnProjectile_HurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 86384 ];

	AR_Projectile_execProjectile_HurtRadius_Parms Projectile_HurtRadius_Parms;
	Projectile_HurtRadius_Parms.DamageAmount = DamageAmount;
	Projectile_HurtRadius_Parms.InDamageRadius = InDamageRadius;
	Projectile_HurtRadius_Parms.DamageType = DamageType;
	Projectile_HurtRadius_Parms.Momentum = Momentum;
	memcpy ( &Projectile_HurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	Projectile_HurtRadius_Parms.IgnoredActor = IgnoredActor;
	Projectile_HurtRadius_Parms.InstigatedByController = InstigatedByController;
	Projectile_HurtRadius_Parms.bDoFullDamage = bDoFullDamage;

	this->ProcessEvent ( pFnProjectile_HurtRadius, &Projectile_HurtRadius_Parms, NULL );

	return Projectile_HurtRadius_Parms.ReturnValue;
};

// Function RavagedGame.R_Projectile.Projectile_ProjectileHurtRadius
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool AR_Projectile::Projectile_ProjectileHurtRadius ( struct FVector HurtOrigin, struct FVector HitNormal )
{
	static UFunction* pFnProjectile_ProjectileHurtRadius = NULL;

	if ( ! pFnProjectile_ProjectileHurtRadius )
		pFnProjectile_ProjectileHurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 86376 ];

	AR_Projectile_execProjectile_ProjectileHurtRadius_Parms Projectile_ProjectileHurtRadius_Parms;
	memcpy ( &Projectile_ProjectileHurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	memcpy ( &Projectile_ProjectileHurtRadius_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProjectile_ProjectileHurtRadius, &Projectile_ProjectileHurtRadius_Parms, NULL );

	return Projectile_ProjectileHurtRadius_Parms.ReturnValue;
};

// Function RavagedGame.R_Projectile.ProjectileHurtRadius
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool AR_Projectile::ProjectileHurtRadius ( struct FVector HurtOrigin, struct FVector HitNormal )
{
	static UFunction* pFnProjectileHurtRadius = NULL;

	if ( ! pFnProjectileHurtRadius )
		pFnProjectileHurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 86372 ];

	AR_Projectile_execProjectileHurtRadius_Parms ProjectileHurtRadius_Parms;
	memcpy ( &ProjectileHurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	memcpy ( &ProjectileHurtRadius_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProjectileHurtRadius, &ProjectileHurtRadius_Parms, NULL );

	return ProjectileHurtRadius_Parms.ReturnValue;
};

// Function RavagedGame.R_Projectile.SpawnExplosionEffects
// [0x00820102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AR_Projectile::SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnSpawnExplosionEffects = NULL;

	if ( ! pFnSpawnExplosionEffects )
		pFnSpawnExplosionEffects = (UFunction*) UObject::GObjObjects()->Data[ 86367 ];

	AR_Projectile_execSpawnExplosionEffects_Parms SpawnExplosionEffects_Parms;
	memcpy ( &SpawnExplosionEffects_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &SpawnExplosionEffects_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnSpawnExplosionEffects, &SpawnExplosionEffects_Parms, NULL );
};

// Function RavagedGame.R_Projectile.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AR_Projectile::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 86366 ];

	AR_Projectile_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment_Anim_Arms.StopThirdPersonFireEffects
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_WeaponAttachment_Anim_Arms::eventStopThirdPersonFireEffects ( )
{
	static UFunction* pFnStopThirdPersonFireEffects = NULL;

	if ( ! pFnStopThirdPersonFireEffects )
		pFnStopThirdPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 78577 ];

	AR_WeaponAttachment_Anim_Arms_eventStopThirdPersonFireEffects_Parms StopThirdPersonFireEffects_Parms;

	this->ProcessEvent ( pFnStopThirdPersonFireEffects, &StopThirdPersonFireEffects_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment_Anim_Arms.PlayImpactEffects
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void AR_WeaponAttachment_Anim_Arms::PlayImpactEffects ( struct FVector HitLocation )
{
	static UFunction* pFnPlayImpactEffects = NULL;

	if ( ! pFnPlayImpactEffects )
		pFnPlayImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 78575 ];

	AR_WeaponAttachment_Anim_Arms_execPlayImpactEffects_Parms PlayImpactEffects_Parms;
	memcpy ( &PlayImpactEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayImpactEffects, &PlayImpactEffects_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment_Anim_Arms.ThirdPersonFireEffects
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void AR_WeaponAttachment_Anim_Arms::ThirdPersonFireEffects ( struct FVector HitLocation )
{
	static UFunction* pFnThirdPersonFireEffects = NULL;

	if ( ! pFnThirdPersonFireEffects )
		pFnThirdPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 78571 ];

	AR_WeaponAttachment_Anim_Arms_execThirdPersonFireEffects_Parms ThirdPersonFireEffects_Parms;
	memcpy ( &ThirdPersonFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnThirdPersonFireEffects, &ThirdPersonFireEffects_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment_Anim_Arms.FirstPersonFireEffects
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 PawnWeapon                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void AR_WeaponAttachment_Anim_Arms::FirstPersonFireEffects ( class AWeapon* PawnWeapon, struct FVector HitLocation )
{
	static UFunction* pFnFirstPersonFireEffects = NULL;

	if ( ! pFnFirstPersonFireEffects )
		pFnFirstPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 78566 ];

	AR_WeaponAttachment_Anim_Arms_execFirstPersonFireEffects_Parms FirstPersonFireEffects_Parms;
	FirstPersonFireEffects_Parms.PawnWeapon = PawnWeapon;
	memcpy ( &FirstPersonFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnFirstPersonFireEffects, &FirstPersonFireEffects_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee.FireAmmunition
// [0x00020102] 
// Parameters infos:

void AR_Weapon_Melee::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = (UFunction*) UObject::GObjObjects()->Data[ 88804 ];

	AR_Weapon_Melee_execFireAmmunition_Parms FireAmmunition_Parms;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee.ConsumeAmmo
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_Weapon_Melee::ConsumeAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 88802 ];

	AR_Weapon_Melee_execConsumeAmmo_Parms ConsumeAmmo_Parms;
	ConsumeAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee.DrawDebugAnims
// [0x00820102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AR_Weapon_Melee::DrawDebugAnims ( class AHUD* H )
{
	static UFunction* pFnDrawDebugAnims = NULL;

	if ( ! pFnDrawDebugAnims )
		pFnDrawDebugAnims = (UFunction*) UObject::GObjObjects()->Data[ 88797 ];

	AR_Weapon_Melee_execDrawDebugAnims_Parms DrawDebugAnims_Parms;
	DrawDebugAnims_Parms.H = H;

	this->ProcessEvent ( pFnDrawDebugAnims, &DrawDebugAnims_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee.HasAmmo
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// int                            Amount                         ( CPF_OptionalParm | CPF_Parm )

bool AR_Weapon_Melee::HasAmmo ( unsigned char FireModeNum, int Amount )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = (UFunction*) UObject::GObjObjects()->Data[ 88783 ];

	AR_Weapon_Melee_execHasAmmo_Parms HasAmmo_Parms;
	HasAmmo_Parms.FireModeNum = FireModeNum;
	HasAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );

	return HasAmmo_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon_Melee.TakeSample
// [0x00820102] 
// Parameters infos:

void AR_Weapon_Melee::TakeSample ( )
{
	static UFunction* pFnTakeSample = NULL;

	if ( ! pFnTakeSample )
		pFnTakeSample = (UFunction*) UObject::GObjObjects()->Data[ 88778 ];

	AR_Weapon_Melee_execTakeSample_Parms TakeSample_Parms;

	this->ProcessEvent ( pFnTakeSample, &TakeSample_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee.StopFireEffects
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_Weapon_Melee::StopFireEffects ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFireEffects = NULL;

	if ( ! pFnStopFireEffects )
		pFnStopFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 88776 ];

	AR_Weapon_Melee_execStopFireEffects_Parms StopFireEffects_Parms;
	StopFireEffects_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFireEffects, &StopFireEffects_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee.ProcessInstantHit
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void AR_Weapon_Melee::ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 88772 ];

	AR_Weapon_Melee_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x50 );
	ProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee.SetFlashLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void AR_Weapon_Melee::SetFlashLocation ( struct FVector HitLocation )
{
	static UFunction* pFnSetFlashLocation = NULL;

	if ( ! pFnSetFlashLocation )
		pFnSetFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 88770 ];

	AR_Weapon_Melee_execSetFlashLocation_Parms SetFlashLocation_Parms;
	memcpy ( &SetFlashLocation_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSetFlashLocation, &SetFlashLocation_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee.PerformFirePositionIdx
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            localPosIdx                    ( CPF_Parm )

bool AR_Weapon_Melee::PerformFirePositionIdx ( int localPosIdx )
{
	static UFunction* pFnPerformFirePositionIdx = NULL;

	if ( ! pFnPerformFirePositionIdx )
		pFnPerformFirePositionIdx = (UFunction*) UObject::GObjObjects()->Data[ 88758 ];

	AR_Weapon_Melee_execPerformFirePositionIdx_Parms PerformFirePositionIdx_Parms;
	PerformFirePositionIdx_Parms.localPosIdx = localPosIdx;

	this->ProcessEvent ( pFnPerformFirePositionIdx, &PerformFirePositionIdx_Parms, NULL );

	return PerformFirePositionIdx_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon_Melee.StopSwing
// [0x00020102] 
// Parameters infos:

void AR_Weapon_Melee::StopSwing ( )
{
	static UFunction* pFnStopSwing = NULL;

	if ( ! pFnStopSwing )
		pFnStopSwing = (UFunction*) UObject::GObjObjects()->Data[ 88757 ];

	AR_Weapon_Melee_execStopSwing_Parms StopSwing_Parms;

	this->ProcessEvent ( pFnStopSwing, &StopSwing_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee.PlaybackSamples
// [0x00020102] 
// Parameters infos:

void AR_Weapon_Melee::PlaybackSamples ( )
{
	static UFunction* pFnPlaybackSamples = NULL;

	if ( ! pFnPlaybackSamples )
		pFnPlaybackSamples = (UFunction*) UObject::GObjObjects()->Data[ 88754 ];

	AR_Weapon_Melee_execPlaybackSamples_Parms PlaybackSamples_Parms;

	this->ProcessEvent ( pFnPlaybackSamples, &PlaybackSamples_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee.CheckHitTimer
// [0x00020102] 
// Parameters infos:

void AR_Weapon_Melee::CheckHitTimer ( )
{
	static UFunction* pFnCheckHitTimer = NULL;

	if ( ! pFnCheckHitTimer )
		pFnCheckHitTimer = (UFunction*) UObject::GObjObjects()->Data[ 88753 ];

	AR_Weapon_Melee_execCheckHitTimer_Parms CheckHitTimer_Parms;

	this->ProcessEvent ( pFnCheckHitTimer, &CheckHitTimer_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee.WindUpComplete
// [0x00020102] 
// Parameters infos:

void AR_Weapon_Melee::WindUpComplete ( )
{
	static UFunction* pFnWindUpComplete = NULL;

	if ( ! pFnWindUpComplete )
		pFnWindUpComplete = (UFunction*) UObject::GObjObjects()->Data[ 88752 ];

	AR_Weapon_Melee_execWindUpComplete_Parms WindUpComplete_Parms;

	this->ProcessEvent ( pFnWindUpComplete, &WindUpComplete_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee.PlayFireEffects
// [0x00824102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void AR_Weapon_Melee::PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffects = NULL;

	if ( ! pFnPlayFireEffects )
		pFnPlayFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 88748 ];

	AR_Weapon_Melee_execPlayFireEffects_Parms PlayFireEffects_Parms;
	PlayFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffects, &PlayFireEffects_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee.InstantFire
// [0x00020102] 
// Parameters infos:

void AR_Weapon_Melee::InstantFire ( )
{
	static UFunction* pFnInstantFire = NULL;

	if ( ! pFnInstantFire )
		pFnInstantFire = (UFunction*) UObject::GObjObjects()->Data[ 88747 ];

	AR_Weapon_Melee_execInstantFire_Parms InstantFire_Parms;

	this->ProcessEvent ( pFnInstantFire, &InstantFire_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee.PlayAllAnimsTimer
// [0x00020102] 
// Parameters infos:

void AR_Weapon_Melee::PlayAllAnimsTimer ( )
{
	static UFunction* pFnPlayAllAnimsTimer = NULL;

	if ( ! pFnPlayAllAnimsTimer )
		pFnPlayAllAnimsTimer = (UFunction*) UObject::GObjObjects()->Data[ 88746 ];

	AR_Weapon_Melee_execPlayAllAnimsTimer_Parms PlayAllAnimsTimer_Parms;

	this->ProcessEvent ( pFnPlayAllAnimsTimer, &PlayAllAnimsTimer_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee.BeginFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_Weapon_Melee::BeginFire ( unsigned char FireModeNum )
{
	static UFunction* pFnBeginFire = NULL;

	if ( ! pFnBeginFire )
		pFnBeginFire = (UFunction*) UObject::GObjObjects()->Data[ 88741 ];

	AR_Weapon_Melee_execBeginFire_Parms BeginFire_Parms;
	BeginFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnBeginFire, &BeginFire_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee.TimeWeaponFiring
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_Weapon_Melee::TimeWeaponFiring ( unsigned char FireModeNum )
{
	static UFunction* pFnTimeWeaponFiring = NULL;

	if ( ! pFnTimeWeaponFiring )
		pFnTimeWeaponFiring = (UFunction*) UObject::GObjObjects()->Data[ 88739 ];

	AR_Weapon_Melee_execTimeWeaponFiring_Parms TimeWeaponFiring_Parms;
	TimeWeaponFiring_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnTimeWeaponFiring, &TimeWeaponFiring_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee.GetFireInterval
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

float AR_Weapon_Melee::GetFireInterval ( unsigned char FireModeNum )
{
	static UFunction* pFnGetFireInterval = NULL;

	if ( ! pFnGetFireInterval )
		pFnGetFireInterval = (UFunction*) UObject::GObjObjects()->Data[ 88736 ];

	AR_Weapon_Melee_execGetFireInterval_Parms GetFireInterval_Parms;
	GetFireInterval_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnGetFireInterval, &GetFireInterval_Parms, NULL );

	return GetFireInterval_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon_Melee.SetMotionSampleTimer
// [0x00020102] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )
// unsigned long                  bShowDeviations                ( CPF_Parm )

void AR_Weapon_Melee::SetMotionSampleTimer ( unsigned long bOn, unsigned long bShowDeviations )
{
	static UFunction* pFnSetMotionSampleTimer = NULL;

	if ( ! pFnSetMotionSampleTimer )
		pFnSetMotionSampleTimer = (UFunction*) UObject::GObjObjects()->Data[ 88733 ];

	AR_Weapon_Melee_execSetMotionSampleTimer_Parms SetMotionSampleTimer_Parms;
	SetMotionSampleTimer_Parms.bOn = bOn;
	SetMotionSampleTimer_Parms.bShowDeviations = bShowDeviations;

	this->ProcessEvent ( pFnSetMotionSampleTimer, &SetMotionSampleTimer_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AR_Weapon_Melee::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 88732 ];

	AR_Weapon_Melee_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee_Attachment.StopThirdPersonFireEffects
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_Weapon_Melee_Attachment::eventStopThirdPersonFireEffects ( )
{
	static UFunction* pFnStopThirdPersonFireEffects = NULL;

	if ( ! pFnStopThirdPersonFireEffects )
		pFnStopThirdPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 78584 ];

	AR_Weapon_Melee_Attachment_eventStopThirdPersonFireEffects_Parms StopThirdPersonFireEffects_Parms;

	this->ProcessEvent ( pFnStopThirdPersonFireEffects, &StopThirdPersonFireEffects_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Melee_Attachment.PlayImpactEffects
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void AR_Weapon_Melee_Attachment::PlayImpactEffects ( struct FVector HitLocation )
{
	static UFunction* pFnPlayImpactEffects = NULL;

	if ( ! pFnPlayImpactEffects )
		pFnPlayImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 78582 ];

	AR_Weapon_Melee_Attachment_execPlayImpactEffects_Parms PlayImpactEffects_Parms;
	memcpy ( &PlayImpactEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayImpactEffects, &PlayImpactEffects_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment_Throwable.ArmingTime3PComplete
// [0x00020102] 
// Parameters infos:

void AR_WeaponAttachment_Throwable::ArmingTime3PComplete ( )
{
	static UFunction* pFnArmingTime3PComplete = NULL;

	if ( ! pFnArmingTime3PComplete )
		pFnArmingTime3PComplete = (UFunction*) UObject::GObjObjects()->Data[ 78631 ];

	AR_WeaponAttachment_Throwable_execArmingTime3PComplete_Parms ArmingTime3PComplete_Parms;

	this->ProcessEvent ( pFnArmingTime3PComplete, &ArmingTime3PComplete_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment_Throwable.ThirdPersonFireEffects
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void AR_WeaponAttachment_Throwable::ThirdPersonFireEffects ( struct FVector HitLocation )
{
	static UFunction* pFnThirdPersonFireEffects = NULL;

	if ( ! pFnThirdPersonFireEffects )
		pFnThirdPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 78629 ];

	AR_WeaponAttachment_Throwable_execThirdPersonFireEffects_Parms ThirdPersonFireEffects_Parms;
	memcpy ( &ThirdPersonFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnThirdPersonFireEffects, &ThirdPersonFireEffects_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment_Throwable.FirstPersonThrowProjectileEffects
// [0x00020100] 
// Parameters infos:
// class AWeapon*                 Weap                           ( CPF_Parm )
// struct FVector                 testV                          ( CPF_Parm )

void AR_WeaponAttachment_Throwable::FirstPersonThrowProjectileEffects ( class AWeapon* Weap, struct FVector testV )
{
	static UFunction* pFnFirstPersonThrowProjectileEffects = NULL;

	if ( ! pFnFirstPersonThrowProjectileEffects )
		pFnFirstPersonThrowProjectileEffects = (UFunction*) UObject::GObjObjects()->Data[ 78626 ];

	AR_WeaponAttachment_Throwable_execFirstPersonThrowProjectileEffects_Parms FirstPersonThrowProjectileEffects_Parms;
	FirstPersonThrowProjectileEffects_Parms.Weap = Weap;
	memcpy ( &FirstPersonThrowProjectileEffects_Parms.testV, &testV, 0xC );

	this->ProcessEvent ( pFnFirstPersonThrowProjectileEffects, &FirstPersonThrowProjectileEffects_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment_Throwable.RestoreVisibility
// [0x00020102] 
// Parameters infos:

void AR_WeaponAttachment_Throwable::RestoreVisibility ( )
{
	static UFunction* pFnRestoreVisibility = NULL;

	if ( ! pFnRestoreVisibility )
		pFnRestoreVisibility = (UFunction*) UObject::GObjObjects()->Data[ 78625 ];

	AR_WeaponAttachment_Throwable_execRestoreVisibility_Parms RestoreVisibility_Parms;

	this->ProcessEvent ( pFnRestoreVisibility, &RestoreVisibility_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment_Throwable.ReleaseProjectile
// [0x00020102] 
// Parameters infos:

void AR_WeaponAttachment_Throwable::ReleaseProjectile ( )
{
	static UFunction* pFnReleaseProjectile = NULL;

	if ( ! pFnReleaseProjectile )
		pFnReleaseProjectile = (UFunction*) UObject::GObjObjects()->Data[ 78624 ];

	AR_WeaponAttachment_Throwable_execReleaseProjectile_Parms ReleaseProjectile_Parms;

	this->ProcessEvent ( pFnReleaseProjectile, &ReleaseProjectile_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment_Throwable.ThirdPersonThrowProjectileEffects
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void AR_WeaponAttachment_Throwable::ThirdPersonThrowProjectileEffects ( struct FVector HitLocation )
{
	static UFunction* pFnThirdPersonThrowProjectileEffects = NULL;

	if ( ! pFnThirdPersonThrowProjectileEffects )
		pFnThirdPersonThrowProjectileEffects = (UFunction*) UObject::GObjObjects()->Data[ 78621 ];

	AR_WeaponAttachment_Throwable_execThirdPersonThrowProjectileEffects_Parms ThirdPersonThrowProjectileEffects_Parms;
	memcpy ( &ThirdPersonThrowProjectileEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnThirdPersonThrowProjectileEffects, &ThirdPersonThrowProjectileEffects_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Throwable.WeaponRearmed
// [0x00020102] 
// Parameters infos:

void AR_Weapon_Throwable::WeaponRearmed ( )
{
	static UFunction* pFnWeaponRearmed = NULL;

	if ( ! pFnWeaponRearmed )
		pFnWeaponRearmed = (UFunction*) UObject::GObjObjects()->Data[ 88907 ];

	AR_Weapon_Throwable_execWeaponRearmed_Parms WeaponRearmed_Parms;

	this->ProcessEvent ( pFnWeaponRearmed, &WeaponRearmed_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Throwable.ArmingTimeComplete
// [0x00020102] 
// Parameters infos:

void AR_Weapon_Throwable::ArmingTimeComplete ( )
{
	static UFunction* pFnArmingTimeComplete = NULL;

	if ( ! pFnArmingTimeComplete )
		pFnArmingTimeComplete = (UFunction*) UObject::GObjObjects()->Data[ 88881 ];

	AR_Weapon_Throwable_execArmingTimeComplete_Parms ArmingTimeComplete_Parms;

	this->ProcessEvent ( pFnArmingTimeComplete, &ArmingTimeComplete_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Throwable.PlayFireEffects
// [0x00024102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void AR_Weapon_Throwable::PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffects = NULL;

	if ( ! pFnPlayFireEffects )
		pFnPlayFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 88878 ];

	AR_Weapon_Throwable_execPlayFireEffects_Parms PlayFireEffects_Parms;
	PlayFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffects, &PlayFireEffects_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Throwable.PlayFiringSound
// [0x00020102] 
// Parameters infos:

void AR_Weapon_Throwable::PlayFiringSound ( )
{
	static UFunction* pFnPlayFiringSound = NULL;

	if ( ! pFnPlayFiringSound )
		pFnPlayFiringSound = (UFunction*) UObject::GObjObjects()->Data[ 88877 ];

	AR_Weapon_Throwable_execPlayFiringSound_Parms PlayFiringSound_Parms;

	this->ProcessEvent ( pFnPlayFiringSound, &PlayFiringSound_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Throwable.ProjectileFire
// [0x00020102] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* AR_Weapon_Throwable::ProjectileFire ( )
{
	static UFunction* pFnProjectileFire = NULL;

	if ( ! pFnProjectileFire )
		pFnProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 88873 ];

	AR_Weapon_Throwable_execProjectileFire_Parms ProjectileFire_Parms;

	this->ProcessEvent ( pFnProjectileFire, &ProjectileFire_Parms, NULL );

	return ProjectileFire_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon_Throwable.GetAdjustedAim
// [0x00820102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator AR_Weapon_Throwable::GetAdjustedAim ( struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAim = NULL;

	if ( ! pFnGetAdjustedAim )
		pFnGetAdjustedAim = (UFunction*) UObject::GObjObjects()->Data[ 88869 ];

	AR_Weapon_Throwable_execGetAdjustedAim_Parms GetAdjustedAim_Parms;
	memcpy ( &GetAdjustedAim_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAim, &GetAdjustedAim_Parms, NULL );

	return GetAdjustedAim_Parms.ReturnValue;
};

// Function RavagedGame.R_Weap_Cleaver.GetAdjustedAim
// [0x00020102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator AR_Weap_Cleaver::GetAdjustedAim ( struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAim = NULL;

	if ( ! pFnGetAdjustedAim )
		pFnGetAdjustedAim = (UFunction*) UObject::GObjObjects()->Data[ 88912 ];

	AR_Weap_Cleaver_execGetAdjustedAim_Parms GetAdjustedAim_Parms;
	memcpy ( &GetAdjustedAim_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAim, &GetAdjustedAim_Parms, NULL );

	return GetAdjustedAim_Parms.ReturnValue;
};

// Function RavagedGame.R_Weap_GKnife.GetAdjustedAim
// [0x00020102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator AR_Weap_GKnife::GetAdjustedAim ( struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAim = NULL;

	if ( ! pFnGetAdjustedAim )
		pFnGetAdjustedAim = (UFunction*) UObject::GObjObjects()->Data[ 89002 ];

	AR_Weap_GKnife_execGetAdjustedAim_Parms GetAdjustedAim_Parms;
	memcpy ( &GetAdjustedAim_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAim, &GetAdjustedAim_Parms, NULL );

	return GetAdjustedAim_Parms.ReturnValue;
};

// Function RavagedGame.R_Attachment_LAW.StopThirdPersonFireEffects
// [0x00020102] 
// Parameters infos:

void AR_Attachment_LAW::StopThirdPersonFireEffects ( )
{
	static UFunction* pFnStopThirdPersonFireEffects = NULL;

	if ( ! pFnStopThirdPersonFireEffects )
		pFnStopThirdPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 78662 ];

	AR_Attachment_LAW_execStopThirdPersonFireEffects_Parms StopThirdPersonFireEffects_Parms;

	this->ProcessEvent ( pFnStopThirdPersonFireEffects, &StopThirdPersonFireEffects_Parms, NULL );
};

// Function RavagedGame.R_Attachment_LAW.ThirdPersonFireEffects
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void AR_Attachment_LAW::ThirdPersonFireEffects ( struct FVector HitLocation )
{
	static UFunction* pFnThirdPersonFireEffects = NULL;

	if ( ! pFnThirdPersonFireEffects )
		pFnThirdPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 78660 ];

	AR_Attachment_LAW_execThirdPersonFireEffects_Parms ThirdPersonFireEffects_Parms;
	memcpy ( &ThirdPersonFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnThirdPersonFireEffects, &ThirdPersonFireEffects_Parms, NULL );
};

// Function RavagedGame.R_Attachment_LAW.AttachTo
// [0x00020102] 
// Parameters infos:
// class AUTPawn*                 OwnerPawn                      ( CPF_Parm )

void AR_Attachment_LAW::AttachTo ( class AUTPawn* OwnerPawn )
{
	static UFunction* pFnAttachTo = NULL;

	if ( ! pFnAttachTo )
		pFnAttachTo = (UFunction*) UObject::GObjObjects()->Data[ 78658 ];

	AR_Attachment_LAW_execAttachTo_Parms AttachTo_Parms;
	AttachTo_Parms.OwnerPawn = OwnerPawn;

	this->ProcessEvent ( pFnAttachTo, &AttachTo_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Fused.WeaponRearmed
// [0x00020102] 
// Parameters infos:

void AR_Weapon_Fused::WeaponRearmed ( )
{
	static UFunction* pFnWeaponRearmed = NULL;

	if ( ! pFnWeaponRearmed )
		pFnWeaponRearmed = (UFunction*) UObject::GObjObjects()->Data[ 89109 ];

	AR_Weapon_Fused_execWeaponRearmed_Parms WeaponRearmed_Parms;

	this->ProcessEvent ( pFnWeaponRearmed, &WeaponRearmed_Parms, NULL );
};

// Function RavagedGame.R_Weapon_Fused.ProjectileFire
// [0x00020102] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* AR_Weapon_Fused::ProjectileFire ( )
{
	static UFunction* pFnProjectileFire = NULL;

	if ( ! pFnProjectileFire )
		pFnProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 89081 ];

	AR_Weapon_Fused_execProjectileFire_Parms ProjectileFire_Parms;

	this->ProcessEvent ( pFnProjectileFire, &ProjectileFire_Parms, NULL );

	return ProjectileFire_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon_Fused.GetPowerPerc
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AR_Weapon_Fused::GetPowerPerc ( )
{
	static UFunction* pFnGetPowerPerc = NULL;

	if ( ! pFnGetPowerPerc )
		pFnGetPowerPerc = (UFunction*) UObject::GObjObjects()->Data[ 89079 ];

	AR_Weapon_Fused_execGetPowerPerc_Parms GetPowerPerc_Parms;

	this->ProcessEvent ( pFnGetPowerPerc, &GetPowerPerc_Parms, NULL );

	return GetPowerPerc_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon_Fused.ActiveRenderOverlays
// [0x00020102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AR_Weapon_Fused::ActiveRenderOverlays ( class AHUD* H )
{
	static UFunction* pFnActiveRenderOverlays = NULL;

	if ( ! pFnActiveRenderOverlays )
		pFnActiveRenderOverlays = (UFunction*) UObject::GObjObjects()->Data[ 89072 ];

	AR_Weapon_Fused_execActiveRenderOverlays_Parms ActiveRenderOverlays_Parms;
	ActiveRenderOverlays_Parms.H = H;

	this->ProcessEvent ( pFnActiveRenderOverlays, &ActiveRenderOverlays_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment_ShotgunType.AttachTo
// [0x00020102] 
// Parameters infos:
// class AUTPawn*                 OwnerPawn                      ( CPF_Parm )

void AR_WeaponAttachment_ShotgunType::AttachTo ( class AUTPawn* OwnerPawn )
{
	static UFunction* pFnAttachTo = NULL;

	if ( ! pFnAttachTo )
		pFnAttachTo = (UFunction*) UObject::GObjObjects()->Data[ 78738 ];

	AR_WeaponAttachment_ShotgunType_execAttachTo_Parms AttachTo_Parms;
	AttachTo_Parms.OwnerPawn = OwnerPawn;

	this->ProcessEvent ( pFnAttachTo, &AttachTo_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment_ShotgunType.WeapAttachAddSpread
// [0x00820102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                BaseAim                        ( CPF_Parm )

struct FRotator AR_WeaponAttachment_ShotgunType::WeapAttachAddSpread ( struct FRotator BaseAim )
{
	static UFunction* pFnWeapAttachAddSpread = NULL;

	if ( ! pFnWeapAttachAddSpread )
		pFnWeapAttachAddSpread = (UFunction*) UObject::GObjObjects()->Data[ 78730 ];

	AR_WeaponAttachment_ShotgunType_execWeapAttachAddSpread_Parms WeapAttachAddSpread_Parms;
	memcpy ( &WeapAttachAddSpread_Parms.BaseAim, &BaseAim, 0xC );

	this->ProcessEvent ( pFnWeapAttachAddSpread, &WeapAttachAddSpread_Parms, NULL );

	return WeapAttachAddSpread_Parms.ReturnValue;
};

// Function RavagedGame.R_WeaponAttachment_ShotgunType.ShotgunExpandFireEffects
// [0x00820102] 
// Parameters infos:
// struct FVector                 EffectStartLoc                 ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void AR_WeaponAttachment_ShotgunType::ShotgunExpandFireEffects ( struct FVector EffectStartLoc, struct FVector HitLocation )
{
	static UFunction* pFnShotgunExpandFireEffects = NULL;

	if ( ! pFnShotgunExpandFireEffects )
		pFnShotgunExpandFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 78721 ];

	AR_WeaponAttachment_ShotgunType_execShotgunExpandFireEffects_Parms ShotgunExpandFireEffects_Parms;
	memcpy ( &ShotgunExpandFireEffects_Parms.EffectStartLoc, &EffectStartLoc, 0xC );
	memcpy ( &ShotgunExpandFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnShotgunExpandFireEffects, &ShotgunExpandFireEffects_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment_ShotgunType.PlayImpactEffects
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void AR_WeaponAttachment_ShotgunType::PlayImpactEffects ( struct FVector HitLocation )
{
	static UFunction* pFnPlayImpactEffects = NULL;

	if ( ! pFnPlayImpactEffects )
		pFnPlayImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 78719 ];

	AR_WeaponAttachment_ShotgunType_execPlayImpactEffects_Parms PlayImpactEffects_Parms;
	memcpy ( &PlayImpactEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayImpactEffects, &PlayImpactEffects_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment_ShotgunType.ThirdPersonFireEffects
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void AR_WeaponAttachment_ShotgunType::ThirdPersonFireEffects ( struct FVector HitLocation )
{
	static UFunction* pFnThirdPersonFireEffects = NULL;

	if ( ! pFnThirdPersonFireEffects )
		pFnThirdPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 78717 ];

	AR_WeaponAttachment_ShotgunType_execThirdPersonFireEffects_Parms ThirdPersonFireEffects_Parms;
	memcpy ( &ThirdPersonFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnThirdPersonFireEffects, &ThirdPersonFireEffects_Parms, NULL );
};

// Function RavagedGame.R_WeaponAttachment_ShotgunType.FirstPersonFireEffects
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 PawnWeapon                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void AR_WeaponAttachment_ShotgunType::FirstPersonFireEffects ( class AWeapon* PawnWeapon, struct FVector HitLocation )
{
	static UFunction* pFnFirstPersonFireEffects = NULL;

	if ( ! pFnFirstPersonFireEffects )
		pFnFirstPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 78714 ];

	AR_WeaponAttachment_ShotgunType_execFirstPersonFireEffects_Parms FirstPersonFireEffects_Parms;
	FirstPersonFireEffects_Parms.PawnWeapon = PawnWeapon;
	memcpy ( &FirstPersonFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnFirstPersonFireEffects, &FirstPersonFireEffects_Parms, NULL );
};

// Function RavagedGame.R_BarrelOfDeath.Explode
// [0x00020102] 
// Parameters infos:

void AR_BarrelOfDeath::Explode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 78807 ];

	AR_BarrelOfDeath_execExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function RavagedGame.R_BarrelOfDeath.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            TheDamage                      ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AR_BarrelOfDeath::eventTakeDamage ( int TheDamage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 78799 ];

	AR_BarrelOfDeath_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.TheDamage = TheDamage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function RavagedGame.R_Base_CTR.SameTeamTouch
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )

void AR_Base_CTR::SameTeamTouch ( class AController* C )
{
	static UFunction* pFnSameTeamTouch = NULL;

	if ( ! pFnSameTeamTouch )
		pFnSameTeamTouch = (UFunction*) UObject::GObjObjects()->Data[ 78873 ];

	AR_Base_CTR_execSameTeamTouch_Parms SameTeamTouch_Parms;
	SameTeamTouch_Parms.C = C;

	this->ProcessEvent ( pFnSameTeamTouch, &SameTeamTouch_Parms, NULL );
};

// Function RavagedGame.R_Base_CTR.Touch
// [0x00020822] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AR_Base_CTR::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 78866 ];

	AR_Base_CTR_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function RavagedGame.R_Base_CTR.IsActive
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Base_CTR::eventIsActive ( )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = (UFunction*) UObject::GObjObjects()->Data[ 78864 ];

	AR_Base_CTR_eventIsActive_Parms IsActive_Parms;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	return IsActive_Parms.ReturnValue;
};

// Function RavagedGame.R_Base_CTR.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AR_Base_CTR::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 78862 ];

	AR_Base_CTR_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function RavagedGame.R_Base_CTR.SetAlarm
// [0x00020102] 
// Parameters infos:
// unsigned long                  bNowOn                         ( CPF_Parm )

void AR_Base_CTR::SetAlarm ( unsigned long bNowOn )
{
	static UFunction* pFnSetAlarm = NULL;

	if ( ! pFnSetAlarm )
		pFnSetAlarm = (UFunction*) UObject::GObjObjects()->Data[ 78860 ];

	AR_Base_CTR_execSetAlarm_Parms SetAlarm_Parms;
	SetAlarm_Parms.bNowOn = bNowOn;

	this->ProcessEvent ( pFnSetAlarm, &SetAlarm_Parms, NULL );
};

// Function RavagedGame.R_Base_CTR.GetFlag
// [0x00020002] 
// Parameters infos:
// class AUTCarriedObject*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AUTCarriedObject* AR_Base_CTR::GetFlag ( )
{
	static UFunction* pFnGetFlag = NULL;

	if ( ! pFnGetFlag )
		pFnGetFlag = (UFunction*) UObject::GObjObjects()->Data[ 78858 ];

	AR_Base_CTR_execGetFlag_Parms GetFlag_Parms;

	this->ProcessEvent ( pFnGetFlag, &GetFlag_Parms, NULL );

	return GetFlag_Parms.ReturnValue;
};

// Function RavagedGame.R_Base_CTR.ObjectiveChanged
// [0x00020002] 
// Parameters infos:

void AR_Base_CTR::ObjectiveChanged ( )
{
	static UFunction* pFnObjectiveChanged = NULL;

	if ( ! pFnObjectiveChanged )
		pFnObjectiveChanged = (UFunction*) UObject::GObjObjects()->Data[ 78856 ];

	AR_Base_CTR_execObjectiveChanged_Parms ObjectiveChanged_Parms;

	this->ProcessEvent ( pFnObjectiveChanged, &ObjectiveChanged_Parms, NULL );
};

// Function RavagedGame.R_Base_CTR.GetLocationSpeechFor
// [0x00020102] 
// Parameters infos:
// class USoundNodeWave*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       PC                             ( CPF_Parm )
// int                            LocationSpeechOffset           ( CPF_Parm )
// int                            MessageIndex                   ( CPF_Parm )

class USoundNodeWave* AR_Base_CTR::GetLocationSpeechFor ( class APlayerController* PC, int LocationSpeechOffset, int MessageIndex )
{
	static UFunction* pFnGetLocationSpeechFor = NULL;

	if ( ! pFnGetLocationSpeechFor )
		pFnGetLocationSpeechFor = (UFunction*) UObject::GObjObjects()->Data[ 78851 ];

	AR_Base_CTR_execGetLocationSpeechFor_Parms GetLocationSpeechFor_Parms;
	GetLocationSpeechFor_Parms.PC = PC;
	GetLocationSpeechFor_Parms.LocationSpeechOffset = LocationSpeechOffset;
	GetLocationSpeechFor_Parms.MessageIndex = MessageIndex;

	this->ProcessEvent ( pFnGetLocationSpeechFor, &GetLocationSpeechFor_Parms, NULL );

	return GetLocationSpeechFor_Parms.ReturnValue;
};

// Function RavagedGame.R_Base_CTR.GetLocationMessageIndex
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AUTBot*                  B                              ( CPF_Parm )
// class APawn*                   StatusPawn                     ( CPF_Parm )

int AR_Base_CTR::GetLocationMessageIndex ( class AUTBot* B, class APawn* StatusPawn )
{
	static UFunction* pFnGetLocationMessageIndex = NULL;

	if ( ! pFnGetLocationMessageIndex )
		pFnGetLocationMessageIndex = (UFunction*) UObject::GObjObjects()->Data[ 78845 ];

	AR_Base_CTR_execGetLocationMessageIndex_Parms GetLocationMessageIndex_Parms;
	GetLocationMessageIndex_Parms.B = B;
	GetLocationMessageIndex_Parms.StatusPawn = StatusPawn;

	this->ProcessEvent ( pFnGetLocationMessageIndex, &GetLocationMessageIndex_Parms, NULL );

	return GetLocationMessageIndex_Parms.ReturnValue;
};

// Function RavagedGame.R_Base_CTR.GetBestViewTarget
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* AR_Base_CTR::eventGetBestViewTarget ( )
{
	static UFunction* pFnGetBestViewTarget = NULL;

	if ( ! pFnGetBestViewTarget )
		pFnGetBestViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 78843 ];

	AR_Base_CTR_eventGetBestViewTarget_Parms GetBestViewTarget_Parms;

	this->ProcessEvent ( pFnGetBestViewTarget, &GetBestViewTarget_Parms, NULL );

	return GetBestViewTarget_Parms.ReturnValue;
};

// Function RavagedGame.R_Base_CTR.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AR_Base_CTR::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 78839 ];

	AR_Base_CTR_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_Game_CTR.ScoreKill
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Other                          ( CPF_Parm )

void AR_Game_CTR::ScoreKill ( class AController* Killer, class AController* Other )
{
	static UFunction* pFnScoreKill = NULL;

	if ( ! pFnScoreKill )
		pFnScoreKill = (UFunction*) UObject::GObjObjects()->Data[ 80500 ];

	AR_Game_CTR_execScoreKill_Parms ScoreKill_Parms;
	ScoreKill_Parms.Killer = Killer;
	ScoreKill_Parms.Other = Other;

	this->ProcessEvent ( pFnScoreKill, &ScoreKill_Parms, NULL );
};

// Function RavagedGame.R_Game_CTR.VehicleUnloadedResources
// [0x00020002] 
// Parameters infos:
// class AR_Vehicle*              veh                            ( CPF_Parm )
// int                            ResourcesUnloaded              ( CPF_Parm )

void AR_Game_CTR::VehicleUnloadedResources ( class AR_Vehicle* veh, int ResourcesUnloaded )
{
	static UFunction* pFnVehicleUnloadedResources = NULL;

	if ( ! pFnVehicleUnloadedResources )
		pFnVehicleUnloadedResources = (UFunction*) UObject::GObjObjects()->Data[ 80495 ];

	AR_Game_CTR_execVehicleUnloadedResources_Parms VehicleUnloadedResources_Parms;
	VehicleUnloadedResources_Parms.veh = veh;
	VehicleUnloadedResources_Parms.ResourcesUnloaded = ResourcesUnloaded;

	this->ProcessEvent ( pFnVehicleUnloadedResources, &VehicleUnloadedResources_Parms, NULL );
};

// Function RavagedGame.R_Game_CTR.VehicleLoadedResources
// [0x00020002] 
// Parameters infos:
// class AR_Vehicle*              veh                            ( CPF_Parm )
// int                            ResourcesUnloaded              ( CPF_Parm )

void AR_Game_CTR::VehicleLoadedResources ( class AR_Vehicle* veh, int ResourcesUnloaded )
{
	static UFunction* pFnVehicleLoadedResources = NULL;

	if ( ! pFnVehicleLoadedResources )
		pFnVehicleLoadedResources = (UFunction*) UObject::GObjObjects()->Data[ 80490 ];

	AR_Game_CTR_execVehicleLoadedResources_Parms VehicleLoadedResources_Parms;
	VehicleLoadedResources_Parms.veh = veh;
	VehicleLoadedResources_Parms.ResourcesUnloaded = ResourcesUnloaded;

	this->ProcessEvent ( pFnVehicleLoadedResources, &VehicleLoadedResources_Parms, NULL );
};

// Function RavagedGame.R_Game_CTR.GetVehicleDriverPRI
// [0x00020002] 
// Parameters infos:
// class AR_PlayerReplicationInfo* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AR_Vehicle*              veh                            ( CPF_Parm )

class AR_PlayerReplicationInfo* AR_Game_CTR::GetVehicleDriverPRI ( class AR_Vehicle* veh )
{
	static UFunction* pFnGetVehicleDriverPRI = NULL;

	if ( ! pFnGetVehicleDriverPRI )
		pFnGetVehicleDriverPRI = (UFunction*) UObject::GObjObjects()->Data[ 80486 ];

	AR_Game_CTR_execGetVehicleDriverPRI_Parms GetVehicleDriverPRI_Parms;
	GetVehicleDriverPRI_Parms.veh = veh;

	this->ProcessEvent ( pFnGetVehicleDriverPRI, &GetVehicleDriverPRI_Parms, NULL );

	return GetVehicleDriverPRI_Parms.ReturnValue;
};

// Function RavagedGame.R_Game_CTR.ShowPathTo
// [0x00020002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )
// int                            TeamNum                        ( CPF_Parm )

void AR_Game_CTR::ShowPathTo ( class APlayerController* P, int TeamNum )
{
	static UFunction* pFnShowPathTo = NULL;

	if ( ! pFnShowPathTo )
		pFnShowPathTo = (UFunction*) UObject::GObjObjects()->Data[ 80483 ];

	AR_Game_CTR_execShowPathTo_Parms ShowPathTo_Parms;
	ShowPathTo_Parms.P = P;
	ShowPathTo_Parms.TeamNum = TeamNum;

	this->ProcessEvent ( pFnShowPathTo, &ShowPathTo_Parms, NULL );
};

// Function RavagedGame.R_Game_CTR.ViewObjective
// [0x00020000] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AR_Game_CTR::ViewObjective ( class APlayerController* PC )
{
	static UFunction* pFnViewObjective = NULL;

	if ( ! pFnViewObjective )
		pFnViewObjective = (UFunction*) UObject::GObjObjects()->Data[ 80481 ];

	AR_Game_CTR_execViewObjective_Parms ViewObjective_Parms;
	ViewObjective_Parms.PC = PC;

	this->ProcessEvent ( pFnViewObjective, &ViewObjective_Parms, NULL );
};

// Function RavagedGame.R_Game_CTR.ScoreFlag
// [0x00020002] 
// Parameters infos:
// class AController*             Scorer                         ( CPF_Parm )
// class AR_Object_CTR*           theFlag                        ( CPF_Parm )

void AR_Game_CTR::ScoreFlag ( class AController* Scorer, class AR_Object_CTR* theFlag )
{
	static UFunction* pFnScoreFlag = NULL;

	if ( ! pFnScoreFlag )
		pFnScoreFlag = (UFunction*) UObject::GObjObjects()->Data[ 80451 ];

	AR_Game_CTR_execScoreFlag_Parms ScoreFlag_Parms;
	ScoreFlag_Parms.Scorer = Scorer;
	ScoreFlag_Parms.theFlag = theFlag;

	this->ProcessEvent ( pFnScoreFlag, &ScoreFlag_Parms, NULL );
};

// Function RavagedGame.R_Game_CTR.UpdateScorersArray
// [0x00C20002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// float                          NewScore                       ( CPF_Parm )
// TArray< struct FScorerInfo >   Scorers                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AR_Game_CTR::UpdateScorersArray ( class APlayerReplicationInfo* PRI, float NewScore, TArray< struct FScorerInfo >* Scorers )
{
	static UFunction* pFnUpdateScorersArray = NULL;

	if ( ! pFnUpdateScorersArray )
		pFnUpdateScorersArray = (UFunction*) UObject::GObjObjects()->Data[ 80444 ];

	AR_Game_CTR_execUpdateScorersArray_Parms UpdateScorersArray_Parms;
	UpdateScorersArray_Parms.PRI = PRI;
	UpdateScorersArray_Parms.NewScore = NewScore;

	this->ProcessEvent ( pFnUpdateScorersArray, &UpdateScorersArray_Parms, NULL );

	if ( Scorers )
		memcpy ( Scorers, &UpdateScorersArray_Parms.Scorers, 0xC );
};

// Function RavagedGame.R_Game_CTR.InitGame
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AR_Game_CTR::eventInitGame ( struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnInitGame = NULL;

	if ( ! pFnInitGame )
		pFnInitGame = (UFunction*) UObject::GObjObjects()->Data[ 80437 ];

	AR_Game_CTR_eventInitGame_Parms InitGame_Parms;
	memcpy ( &InitGame_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnInitGame, &InitGame_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &InitGame_Parms.ErrorMessage, 0xC );
};

// Function RavagedGame.R_Game_CTR.CheckEndGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

bool AR_Game_CTR::CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnCheckEndGame = NULL;

	if ( ! pFnCheckEndGame )
		pFnCheckEndGame = (UFunction*) UObject::GObjObjects()->Data[ 80430 ];

	AR_Game_CTR_execCheckEndGame_Parms CheckEndGame_Parms;
	CheckEndGame_Parms.Winner = Winner;
	memcpy ( &CheckEndGame_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCheckEndGame, &CheckEndGame_Parms, NULL );

	return CheckEndGame_Parms.ReturnValue;
};

// Function RavagedGame.R_Game_CTR.RegisterResource
// [0x00020000] 
// Parameters infos:
// class AR_Object_CTR*           F                              ( CPF_Parm )
// int                            TeamIndex                      ( CPF_Parm )

void AR_Game_CTR::RegisterResource ( class AR_Object_CTR* F, int TeamIndex )
{
	static UFunction* pFnRegisterResource = NULL;

	if ( ! pFnRegisterResource )
		pFnRegisterResource = (UFunction*) UObject::GObjObjects()->Data[ 80427 ];

	AR_Game_CTR_execRegisterResource_Parms RegisterResource_Parms;
	RegisterResource_Parms.F = F;
	RegisterResource_Parms.TeamIndex = TeamIndex;

	this->ProcessEvent ( pFnRegisterResource, &RegisterResource_Parms, NULL );
};

// Function RavagedGame.R_Game_CTR.GetLocationFor
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   StatusPawn                     ( CPF_Parm )
// int                            LocationSpeechOffset           ( CPF_Parm )
// class AActor*                  LocationObject                 ( CPF_Parm | CPF_OutParm )
// int                            MessageIndex                   ( CPF_Parm | CPF_OutParm )

bool AR_Game_CTR::GetLocationFor ( class APawn* StatusPawn, int LocationSpeechOffset, class AActor** LocationObject, int* MessageIndex )
{
	static UFunction* pFnGetLocationFor = NULL;

	if ( ! pFnGetLocationFor )
		pFnGetLocationFor = (UFunction*) UObject::GObjObjects()->Data[ 80419 ];

	AR_Game_CTR_execGetLocationFor_Parms GetLocationFor_Parms;
	GetLocationFor_Parms.StatusPawn = StatusPawn;
	GetLocationFor_Parms.LocationSpeechOffset = LocationSpeechOffset;

	this->ProcessEvent ( pFnGetLocationFor, &GetLocationFor_Parms, NULL );

	if ( LocationObject )
		*LocationObject = GetLocationFor_Parms.LocationObject;

	if ( MessageIndex )
		*MessageIndex = GetLocationFor_Parms.MessageIndex;

	return GetLocationFor_Parms.ReturnValue;
};

// Function RavagedGame.R_Game_CTR.GetHandicapNeed
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

int AR_Game_CTR::GetHandicapNeed ( class APawn* Other )
{
	static UFunction* pFnGetHandicapNeed = NULL;

	if ( ! pFnGetHandicapNeed )
		pFnGetHandicapNeed = (UFunction*) UObject::GObjObjects()->Data[ 80416 ];

	AR_Game_CTR_execGetHandicapNeed_Parms GetHandicapNeed_Parms;
	GetHandicapNeed_Parms.Other = Other;

	this->ProcessEvent ( pFnGetHandicapNeed, &GetHandicapNeed_Parms, NULL );

	return GetHandicapNeed_Parms.ReturnValue;
};

// Function RavagedGame.R_Game_CTR.SetEndGameFocus
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )

void AR_Game_CTR::SetEndGameFocus ( class APlayerReplicationInfo* Winner )
{
	static UFunction* pFnSetEndGameFocus = NULL;

	if ( ! pFnSetEndGameFocus )
		pFnSetEndGameFocus = (UFunction*) UObject::GObjObjects()->Data[ 80413 ];

	AR_Game_CTR_execSetEndGameFocus_Parms SetEndGameFocus_Parms;
	SetEndGameFocus_Parms.Winner = Winner;

	this->ProcessEvent ( pFnSetEndGameFocus, &SetEndGameFocus_Parms, NULL );
};

// Function RavagedGame.R_Game_CTR.GetSeamlessTravelActorList
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bToEntry                       ( CPF_Parm )
// TArray< class AActor* >        ActorList                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AR_Game_CTR::eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList )
{
	static UFunction* pFnGetSeamlessTravelActorList = NULL;

	if ( ! pFnGetSeamlessTravelActorList )
		pFnGetSeamlessTravelActorList = (UFunction*) UObject::GObjObjects()->Data[ 80402 ];

	AR_Game_CTR_eventGetSeamlessTravelActorList_Parms GetSeamlessTravelActorList_Parms;
	GetSeamlessTravelActorList_Parms.bToEntry = bToEntry;

	this->ProcessEvent ( pFnGetSeamlessTravelActorList, &GetSeamlessTravelActorList_Parms, NULL );

	if ( ActorList )
		memcpy ( ActorList, &GetSeamlessTravelActorList_Parms.ActorList, 0xC );
};

// Function RavagedGame.R_Game_CTR.ObjectiveCaptured
// [0x00024002] 
// Parameters infos:
// class AController*             Scorer                         ( CPF_Parm )
// class AR_Objective_ControlPoint* O                              ( CPF_Parm )
// unsigned long                  bAnnounce                      ( CPF_OptionalParm | CPF_Parm )

void AR_Game_CTR::ObjectiveCaptured ( class AController* Scorer, class AR_Objective_ControlPoint* O, unsigned long bAnnounce )
{
	static UFunction* pFnObjectiveCaptured = NULL;

	if ( ! pFnObjectiveCaptured )
		pFnObjectiveCaptured = (UFunction*) UObject::GObjObjects()->Data[ 80398 ];

	AR_Game_CTR_execObjectiveCaptured_Parms ObjectiveCaptured_Parms;
	ObjectiveCaptured_Parms.Scorer = Scorer;
	ObjectiveCaptured_Parms.O = O;
	ObjectiveCaptured_Parms.bAnnounce = bAnnounce;

	this->ProcessEvent ( pFnObjectiveCaptured, &ObjectiveCaptured_Parms, NULL );
};

// Function RavagedGame.R_Game.GetMatchStats
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_Game::GetMatchStats ( )
{
	static UFunction* pFnGetMatchStats = NULL;

	if ( ! pFnGetMatchStats )
		pFnGetMatchStats = (UFunction*) UObject::GObjObjects()->Data[ 80384 ];

	AR_Game_execGetMatchStats_Parms GetMatchStats_Parms;

	this->ProcessEvent ( pFnGetMatchStats, &GetMatchStats_Parms, NULL );
};

// Function RavagedGame.R_Game.ReportMatchStat
// [0x00820002] 
// Parameters infos:

void AR_Game::ReportMatchStat ( )
{
	static UFunction* pFnReportMatchStat = NULL;

	if ( ! pFnReportMatchStat )
		pFnReportMatchStat = (UFunction*) UObject::GObjObjects()->Data[ 80381 ];

	AR_Game_execReportMatchStat_Parms ReportMatchStat_Parms;

	this->ProcessEvent ( pFnReportMatchStat, &ReportMatchStat_Parms, NULL );
};

// Function RavagedGame.R_Game.GetMatchOverStats
// [0x00020002] 
// Parameters infos:

void AR_Game::GetMatchOverStats ( )
{
	static UFunction* pFnGetMatchOverStats = NULL;

	if ( ! pFnGetMatchOverStats )
		pFnGetMatchOverStats = (UFunction*) UObject::GObjObjects()->Data[ 80380 ];

	AR_Game_execGetMatchOverStats_Parms GetMatchOverStats_Parms;

	this->ProcessEvent ( pFnGetMatchOverStats, &GetMatchOverStats_Parms, NULL );
};

// Function RavagedGame.R_Game.CompileMatchAchievers
// [0x00020002] 
// Parameters infos:

void AR_Game::CompileMatchAchievers ( )
{
	static UFunction* pFnCompileMatchAchievers = NULL;

	if ( ! pFnCompileMatchAchievers )
		pFnCompileMatchAchievers = (UFunction*) UObject::GObjObjects()->Data[ 80373 ];

	AR_Game_execCompileMatchAchievers_Parms CompileMatchAchievers_Parms;

	this->ProcessEvent ( pFnCompileMatchAchievers, &CompileMatchAchievers_Parms, NULL );
};

// Function RavagedGame.R_Game.GetMatchAchieverIndex
// [0x00820002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ach                            ( CPF_Parm )

int AR_Game::GetMatchAchieverIndex ( unsigned char ach )
{
	static UFunction* pFnGetMatchAchieverIndex = NULL;

	if ( ! pFnGetMatchAchieverIndex )
		pFnGetMatchAchieverIndex = (UFunction*) UObject::GObjObjects()->Data[ 80368 ];

	AR_Game_execGetMatchAchieverIndex_Parms GetMatchAchieverIndex_Parms;
	GetMatchAchieverIndex_Parms.ach = ach;

	this->ProcessEvent ( pFnGetMatchAchieverIndex, &GetMatchAchieverIndex_Parms, NULL );

	return GetMatchAchieverIndex_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.NotifySpree
// [0x00020002] 
// Parameters infos:
// class AUTPlayerReplicationInfo* Other                          ( CPF_Parm )
// int                            Num                            ( CPF_Parm )

void AR_Game::NotifySpree ( class AUTPlayerReplicationInfo* Other, int Num )
{
	static UFunction* pFnNotifySpree = NULL;

	if ( ! pFnNotifySpree )
		pFnNotifySpree = (UFunction*) UObject::GObjObjects()->Data[ 80363 ];

	AR_Game_execNotifySpree_Parms NotifySpree_Parms;
	NotifySpree_Parms.Other = Other;
	NotifySpree_Parms.Num = Num;

	this->ProcessEvent ( pFnNotifySpree, &NotifySpree_Parms, NULL );
};

// Function RavagedGame.R_Game.KickAnyBannedPlayers
// [0x00020002] 
// Parameters infos:

void AR_Game::KickAnyBannedPlayers ( )
{
	static UFunction* pFnKickAnyBannedPlayers = NULL;

	if ( ! pFnKickAnyBannedPlayers )
		pFnKickAnyBannedPlayers = (UFunction*) UObject::GObjObjects()->Data[ 80361 ];

	AR_Game_execKickAnyBannedPlayers_Parms KickAnyBannedPlayers_Parms;

	this->ProcessEvent ( pFnKickAnyBannedPlayers, &KickAnyBannedPlayers_Parms, NULL );
};

// Function RavagedGame.R_Game.TestABStability
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            Instances                      ( CPF_Parm )

void AR_Game::TestABStability ( int Instances )
{
	static UFunction* pFnTestABStability = NULL;

	if ( ! pFnTestABStability )
		pFnTestABStability = (UFunction*) UObject::GObjObjects()->Data[ 80358 ];

	AR_Game_execTestABStability_Parms TestABStability_Parms;
	TestABStability_Parms.Instances = Instances;

	this->ProcessEvent ( pFnTestABStability, &TestABStability_Parms, NULL );
};

// Function RavagedGame.R_Game.TestAB
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_Game::TestAB ( )
{
	static UFunction* pFnTestAB = NULL;

	if ( ! pFnTestAB )
		pFnTestAB = (UFunction*) UObject::GObjObjects()->Data[ 80357 ];

	AR_Game_execTestAB_Parms TestAB_Parms;

	this->ProcessEvent ( pFnTestAB, &TestAB_Parms, NULL );
};

// Function RavagedGame.R_Game.TestABImpl
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  verbose                        ( CPF_Parm )

bool AR_Game::TestABImpl ( unsigned long verbose )
{
	static UFunction* pFnTestABImpl = NULL;

	if ( ! pFnTestABImpl )
		pFnTestABImpl = (UFunction*) UObject::GObjObjects()->Data[ 80354 ];

	AR_Game_execTestABImpl_Parms TestABImpl_Parms;
	TestABImpl_Parms.verbose = verbose;

	this->ProcessEvent ( pFnTestABImpl, &TestABImpl_Parms, NULL );

	return TestABImpl_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.Autobalance
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  Testing                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  getNewTeamData                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  verbose                        ( CPF_OptionalParm | CPF_Parm )

bool AR_Game::Autobalance ( unsigned long Testing, unsigned long getNewTeamData, unsigned long verbose )
{
	static UFunction* pFnAutobalance = NULL;

	if ( ! pFnAutobalance )
		pFnAutobalance = (UFunction*) UObject::GObjObjects()->Data[ 80340 ];

	AR_Game_execAutobalance_Parms Autobalance_Parms;
	Autobalance_Parms.Testing = Testing;
	Autobalance_Parms.getNewTeamData = getNewTeamData;
	Autobalance_Parms.verbose = verbose;

	this->ProcessEvent ( pFnAutobalance, &Autobalance_Parms, NULL );

	return Autobalance_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.ABNow
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_Game::ABNow ( )
{
	static UFunction* pFnABNow = NULL;

	if ( ! pFnABNow )
		pFnABNow = (UFunction*) UObject::GObjObjects()->Data[ 80339 ];

	AR_Game_execABNow_Parms ABNow_Parms;

	this->ProcessEvent ( pFnABNow, &ABNow_Parms, NULL );
};

// Function RavagedGame.R_Game.GetKToDForBalance
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Kills                          ( CPF_Parm )
// int                            Deaths                         ( CPF_Parm )

float AR_Game::GetKToDForBalance ( int Kills, int Deaths )
{
	static UFunction* pFnGetKToDForBalance = NULL;

	if ( ! pFnGetKToDForBalance )
		pFnGetKToDForBalance = (UFunction*) UObject::GObjObjects()->Data[ 80335 ];

	AR_Game_execGetKToDForBalance_Parms GetKToDForBalance_Parms;
	GetKToDForBalance_Parms.Kills = Kills;
	GetKToDForBalance_Parms.Deaths = Deaths;

	this->ProcessEvent ( pFnGetKToDForBalance, &GetKToDForBalance_Parms, NULL );

	return GetKToDForBalance_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.ClearABPlayerLists
// [0x00020002] 
// Parameters infos:

void AR_Game::ClearABPlayerLists ( )
{
	static UFunction* pFnClearABPlayerLists = NULL;

	if ( ! pFnClearABPlayerLists )
		pFnClearABPlayerLists = (UFunction*) UObject::GObjObjects()->Data[ 80334 ];

	AR_Game_execClearABPlayerLists_Parms ClearABPlayerLists_Parms;

	this->ProcessEvent ( pFnClearABPlayerLists, &ClearABPlayerLists_Parms, NULL );
};

// Function RavagedGame.R_Game.SpewPlayers
// [0x00420000] 
// Parameters infos:
// TArray< struct FABTeamPlayer > Players                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AR_Game::SpewPlayers ( TArray< struct FABTeamPlayer >* Players )
{
	static UFunction* pFnSpewPlayers = NULL;

	if ( ! pFnSpewPlayers )
		pFnSpewPlayers = (UFunction*) UObject::GObjObjects()->Data[ 80331 ];

	AR_Game_execSpewPlayers_Parms SpewPlayers_Parms;

	this->ProcessEvent ( pFnSpewPlayers, &SpewPlayers_Parms, NULL );

	if ( Players )
		memcpy ( Players, &SpewPlayers_Parms.Players, 0xC );
};

// Function RavagedGame.R_Game.SwapABTeamPlayer
// [0x00420000] 
// Parameters infos:
// TArray< struct FABTeamPlayer > From                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FABTeamPlayer > to                             ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FABTeamPlayer           Player                         ( CPF_Parm | CPF_OutParm )

void AR_Game::SwapABTeamPlayer ( TArray< struct FABTeamPlayer >* From, TArray< struct FABTeamPlayer >* to, struct FABTeamPlayer* Player )
{
	static UFunction* pFnSwapABTeamPlayer = NULL;

	if ( ! pFnSwapABTeamPlayer )
		pFnSwapABTeamPlayer = (UFunction*) UObject::GObjObjects()->Data[ 80325 ];

	AR_Game_execSwapABTeamPlayer_Parms SwapABTeamPlayer_Parms;

	this->ProcessEvent ( pFnSwapABTeamPlayer, &SwapABTeamPlayer_Parms, NULL );

	if ( From )
		memcpy ( From, &SwapABTeamPlayer_Parms.From, 0xC );

	if ( to )
		memcpy ( to, &SwapABTeamPlayer_Parms.to, 0xC );

	if ( Player )
		memcpy ( Player, &SwapABTeamPlayer_Parms.Player, 0x4 );
};

// Function RavagedGame.R_Game.AutoBalancePlayer
// [0x00020002] 
// Parameters infos:
// struct FABTeamPlayer           Player                         ( CPF_Parm )

void AR_Game::AutoBalancePlayer ( struct FABTeamPlayer Player )
{
	static UFunction* pFnAutoBalancePlayer = NULL;

	if ( ! pFnAutoBalancePlayer )
		pFnAutoBalancePlayer = (UFunction*) UObject::GObjObjects()->Data[ 80322 ];

	AR_Game_execAutoBalancePlayer_Parms AutoBalancePlayer_Parms;
	memcpy ( &AutoBalancePlayer_Parms.Player, &Player, 0x4 );

	this->ProcessEvent ( pFnAutoBalancePlayer, &AutoBalancePlayer_Parms, NULL );
};

// Function RavagedGame.R_Game.TestABPlayer
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Player                         ( CPF_Parm | CPF_NeedCtorLink )

void AR_Game::TestABPlayer ( struct FString Player )
{
	static UFunction* pFnTestABPlayer = NULL;

	if ( ! pFnTestABPlayer )
		pFnTestABPlayer = (UFunction*) UObject::GObjObjects()->Data[ 80319 ];

	AR_Game_execTestABPlayer_Parms TestABPlayer_Parms;
	memcpy ( &TestABPlayer_Parms.Player, &Player, 0xC );

	this->ProcessEvent ( pFnTestABPlayer, &TestABPlayer_Parms, NULL );
};

// Function RavagedGame.R_Game.GetTeamData
// [0x00C24002] 
// Parameters infos:
// unsigned long                  Testing                        ( CPF_Parm )
// int                            TeamNum                        ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FABTeamPlayer > goodPlayers                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FABTeamPlayer > badPlayers                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AR_Game::GetTeamData ( unsigned long Testing, int TeamNum, TArray< struct FABTeamPlayer >* goodPlayers, TArray< struct FABTeamPlayer >* badPlayers )
{
	static UFunction* pFnGetTeamData = NULL;

	if ( ! pFnGetTeamData )
		pFnGetTeamData = (UFunction*) UObject::GObjObjects()->Data[ 80308 ];

	AR_Game_execGetTeamData_Parms GetTeamData_Parms;
	GetTeamData_Parms.Testing = Testing;
	GetTeamData_Parms.TeamNum = TeamNum;

	this->ProcessEvent ( pFnGetTeamData, &GetTeamData_Parms, NULL );

	if ( goodPlayers )
		memcpy ( goodPlayers, &GetTeamData_Parms.goodPlayers, 0xC );

	if ( badPlayers )
		memcpy ( badPlayers, &GetTeamData_Parms.badPlayers, 0xC );
};

// Function RavagedGame.R_Game.CheckForHighPings
// [0x00020002] 
// Parameters infos:

void AR_Game::CheckForHighPings ( )
{
	static UFunction* pFnCheckForHighPings = NULL;

	if ( ! pFnCheckForHighPings )
		pFnCheckForHighPings = (UFunction*) UObject::GObjObjects()->Data[ 80304 ];

	AR_Game_execCheckForHighPings_Parms CheckForHighPings_Parms;

	this->ProcessEvent ( pFnCheckForHighPings, &CheckForHighPings_Parms, NULL );
};

// Function RavagedGame.R_Game.DecayTeamKills
// [0x00020002] 
// Parameters infos:

void AR_Game::DecayTeamKills ( )
{
	static UFunction* pFnDecayTeamKills = NULL;

	if ( ! pFnDecayTeamKills )
		pFnDecayTeamKills = (UFunction*) UObject::GObjObjects()->Data[ 80302 ];

	AR_Game_execDecayTeamKills_Parms DecayTeamKills_Parms;

	this->ProcessEvent ( pFnDecayTeamKills, &DecayTeamKills_Parms, NULL );
};

// Function RavagedGame.R_Game.ScoreKill
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Other                          ( CPF_Parm )

void AR_Game::ScoreKill ( class AController* Killer, class AController* Other )
{
	static UFunction* pFnScoreKill = NULL;

	if ( ! pFnScoreKill )
		pFnScoreKill = (UFunction*) UObject::GObjObjects()->Data[ 80298 ];

	AR_Game_execScoreKill_Parms ScoreKill_Parms;
	ScoreKill_Parms.Killer = Killer;
	ScoreKill_Parms.Other = Other;

	this->ProcessEvent ( pFnScoreKill, &ScoreKill_Parms, NULL );
};

// Function RavagedGame.R_Game.Killed
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             KilledPlayer                   ( CPF_Parm )
// class APawn*                   KilledPawn                     ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void AR_Game::Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType )
{
	static UFunction* pFnKilled = NULL;

	if ( ! pFnKilled )
		pFnKilled = (UFunction*) UObject::GObjObjects()->Data[ 80279 ];

	AR_Game_execKilled_Parms Killed_Parms;
	Killed_Parms.Killer = Killer;
	Killed_Parms.KilledPlayer = KilledPlayer;
	Killed_Parms.KilledPawn = KilledPawn;
	Killed_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnKilled, &Killed_Parms, NULL );
};

// Function RavagedGame.R_Game.Announce
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// int                            timeDelay                      ( CPF_Parm )

void AR_Game::Announce ( struct FString Message, int timeDelay )
{
	static UFunction* pFnAnnounce = NULL;

	if ( ! pFnAnnounce )
		pFnAnnounce = (UFunction*) UObject::GObjObjects()->Data[ 80276 ];

	AR_Game_execAnnounce_Parms Announce_Parms;
	memcpy ( &Announce_Parms.Message, &Message, 0xC );
	Announce_Parms.timeDelay = timeDelay;

	this->ProcessEvent ( pFnAnnounce, &Announce_Parms, NULL );
};

// Function RavagedGame.R_Game.ClearAnnouncement
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 messageID                      ( CPF_Parm | CPF_NeedCtorLink )

void AR_Game::ClearAnnouncement ( struct FString messageID )
{
	static UFunction* pFnClearAnnouncement = NULL;

	if ( ! pFnClearAnnouncement )
		pFnClearAnnouncement = (UFunction*) UObject::GObjObjects()->Data[ 80274 ];

	AR_Game_execClearAnnouncement_Parms ClearAnnouncement_Parms;
	memcpy ( &ClearAnnouncement_Parms.messageID, &messageID, 0xC );

	this->ProcessEvent ( pFnClearAnnouncement, &ClearAnnouncement_Parms, NULL );
};

// Function RavagedGame.R_Game.BroadcastAnnouncement
// [0x00020002] 
// Parameters infos:

void AR_Game::BroadcastAnnouncement ( )
{
	static UFunction* pFnBroadcastAnnouncement = NULL;

	if ( ! pFnBroadcastAnnouncement )
		pFnBroadcastAnnouncement = (UFunction*) UObject::GObjObjects()->Data[ 80273 ];

	AR_Game_execBroadcastAnnouncement_Parms BroadcastAnnouncement_Parms;

	this->ProcessEvent ( pFnBroadcastAnnouncement, &BroadcastAnnouncement_Parms, NULL );
};

// Function RavagedGame.R_Game.SetMotD
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 newMotD                        ( CPF_Parm | CPF_NeedCtorLink )

void AR_Game::SetMotD ( struct FString newMotD )
{
	static UFunction* pFnSetMotD = NULL;

	if ( ! pFnSetMotD )
		pFnSetMotD = (UFunction*) UObject::GObjObjects()->Data[ 80271 ];

	AR_Game_execSetMotD_Parms SetMotD_Parms;
	memcpy ( &SetMotD_Parms.newMotD, &newMotD, 0xC );

	this->ProcessEvent ( pFnSetMotD, &SetMotD_Parms, NULL );
};

// Function RavagedGame.R_Game.MoveMap
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            mapNum                         ( CPF_Parm )
// unsigned long                  Up                             ( CPF_Parm )

void AR_Game::MoveMap ( int mapNum, unsigned long Up )
{
	static UFunction* pFnMoveMap = NULL;

	if ( ! pFnMoveMap )
		pFnMoveMap = (UFunction*) UObject::GObjObjects()->Data[ 80266 ];

	AR_Game_execMoveMap_Parms MoveMap_Parms;
	MoveMap_Parms.mapNum = mapNum;
	MoveMap_Parms.Up = Up;

	this->ProcessEvent ( pFnMoveMap, &MoveMap_Parms, NULL );
};

// Function RavagedGame.R_Game.RemoveMap
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            mapNum                         ( CPF_Parm )

void AR_Game::RemoveMap ( int mapNum )
{
	static UFunction* pFnRemoveMap = NULL;

	if ( ! pFnRemoveMap )
		pFnRemoveMap = (UFunction*) UObject::GObjObjects()->Data[ 80261 ];

	AR_Game_execRemoveMap_Parms RemoveMap_Parms;
	RemoveMap_Parms.mapNum = mapNum;

	this->ProcessEvent ( pFnRemoveMap, &RemoveMap_Parms, NULL );
};

// Function RavagedGame.R_Game.AddMap
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Map                            ( CPF_Parm | CPF_NeedCtorLink )
// int                            I                              ( CPF_OptionalParm | CPF_Parm )

void AR_Game::AddMap ( struct FString Map, int I )
{
	static UFunction* pFnAddMap = NULL;

	if ( ! pFnAddMap )
		pFnAddMap = (UFunction*) UObject::GObjObjects()->Data[ 80253 ];

	AR_Game_execAddMap_Parms AddMap_Parms;
	memcpy ( &AddMap_Parms.Map, &Map, 0xC );
	AddMap_Parms.I = I;

	this->ProcessEvent ( pFnAddMap, &AddMap_Parms, NULL );
};

// Function RavagedGame.R_Game.GetMapList
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  annotated                      ( CPF_OptionalParm | CPF_Parm )

void AR_Game::GetMapList ( unsigned long annotated )
{
	static UFunction* pFnGetMapList = NULL;

	if ( ! pFnGetMapList )
		pFnGetMapList = (UFunction*) UObject::GObjObjects()->Data[ 80249 ];

	AR_Game_execGetMapList_Parms GetMapList_Parms;
	GetMapList_Parms.annotated = annotated;

	this->ProcessEvent ( pFnGetMapList, &GetMapList_Parms, NULL );
};

// Function RavagedGame.R_Game.Switch
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void AR_Game::Switch ( struct FString URL )
{
	static UFunction* pFnSwitch = NULL;

	if ( ! pFnSwitch )
		pFnSwitch = (UFunction*) UObject::GObjObjects()->Data[ 80247 ];

	AR_Game_execSwitch_Parms Switch_Parms;
	memcpy ( &Switch_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnSwitch, &Switch_Parms, NULL );
};

// Function RavagedGame.R_Game.RestartMap
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_Game::RestartMap ( )
{
	static UFunction* pFnRestartMap = NULL;

	if ( ! pFnRestartMap )
		pFnRestartMap = (UFunction*) UObject::GObjObjects()->Data[ 80246 ];

	AR_Game_execRestartMap_Parms RestartMap_Parms;

	this->ProcessEvent ( pFnRestartMap, &RestartMap_Parms, NULL );
};

// Function RavagedGame.R_Game.VoteKickEndVote
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVoteSucceeded                 ( CPF_Parm )

void AR_Game::VoteKickEndVote ( unsigned long bVoteSucceeded )
{
	static UFunction* pFnVoteKickEndVote = NULL;

	if ( ! pFnVoteKickEndVote )
		pFnVoteKickEndVote = (UFunction*) UObject::GObjObjects()->Data[ 80243 ];

	AR_Game_execVoteKickEndVote_Parms VoteKickEndVote_Parms;
	VoteKickEndVote_Parms.bVoteSucceeded = bVoteSucceeded;

	this->ProcessEvent ( pFnVoteKickEndVote, &VoteKickEndVote_Parms, NULL );
};

// Function RavagedGame.R_Game.VoteKickTimedOut
// [0x00020002] 
// Parameters infos:

void AR_Game::VoteKickTimedOut ( )
{
	static UFunction* pFnVoteKickTimedOut = NULL;

	if ( ! pFnVoteKickTimedOut )
		pFnVoteKickTimedOut = (UFunction*) UObject::GObjObjects()->Data[ 80242 ];

	AR_Game_execVoteKickTimedOut_Parms VoteKickTimedOut_Parms;

	this->ProcessEvent ( pFnVoteKickTimedOut, &VoteKickTimedOut_Parms, NULL );
};

// Function RavagedGame.R_Game.VoteKickCheckResults
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Game::VoteKickCheckResults ( )
{
	static UFunction* pFnVoteKickCheckResults = NULL;

	if ( ! pFnVoteKickCheckResults )
		pFnVoteKickCheckResults = (UFunction*) UObject::GObjObjects()->Data[ 80240 ];

	AR_Game_execVoteKickCheckResults_Parms VoteKickCheckResults_Parms;

	this->ProcessEvent ( pFnVoteKickCheckResults, &VoteKickCheckResults_Parms, NULL );

	return VoteKickCheckResults_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.VoteKickCalcVotesNeeded
// [0x00020002] 
// Parameters infos:

void AR_Game::VoteKickCalcVotesNeeded ( )
{
	static UFunction* pFnVoteKickCalcVotesNeeded = NULL;

	if ( ! pFnVoteKickCalcVotesNeeded )
		pFnVoteKickCalcVotesNeeded = (UFunction*) UObject::GObjObjects()->Data[ 80236 ];

	AR_Game_execVoteKickCalcVotesNeeded_Parms VoteKickCalcVotesNeeded_Parms;

	this->ProcessEvent ( pFnVoteKickCalcVotesNeeded, &VoteKickCalcVotesNeeded_Parms, NULL );
};

// Function RavagedGame.R_Game.VoteKickCastVote
// [0x00020002] 
// Parameters infos:
// class AR_PlayerController*     voterPC                        ( CPF_Parm )
// unsigned long                  bKickPlayer                    ( CPF_Parm )
// int                            curVoteID                      ( CPF_Parm )

void AR_Game::VoteKickCastVote ( class AR_PlayerController* voterPC, unsigned long bKickPlayer, int curVoteID )
{
	static UFunction* pFnVoteKickCastVote = NULL;

	if ( ! pFnVoteKickCastVote )
		pFnVoteKickCastVote = (UFunction*) UObject::GObjObjects()->Data[ 80231 ];

	AR_Game_execVoteKickCastVote_Parms VoteKickCastVote_Parms;
	VoteKickCastVote_Parms.voterPC = voterPC;
	VoteKickCastVote_Parms.bKickPlayer = bKickPlayer;
	VoteKickCastVote_Parms.curVoteID = curVoteID;

	this->ProcessEvent ( pFnVoteKickCastVote, &VoteKickCastVote_Parms, NULL );
};

// Function RavagedGame.R_Game.RequestVoteKick
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AR_PlayerController*     VoteInstigator                 ( CPF_Parm )
// class APlayerReplicationInfo*  KickPRI                        ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AR_Game::RequestVoteKick ( class AR_PlayerController* VoteInstigator, class APlayerReplicationInfo* KickPRI, struct FString* msg )
{
	static UFunction* pFnRequestVoteKick = NULL;

	if ( ! pFnRequestVoteKick )
		pFnRequestVoteKick = (UFunction*) UObject::GObjObjects()->Data[ 80222 ];

	AR_Game_execRequestVoteKick_Parms RequestVoteKick_Parms;
	RequestVoteKick_Parms.VoteInstigator = VoteInstigator;
	RequestVoteKick_Parms.KickPRI = KickPRI;

	this->ProcessEvent ( pFnRequestVoteKick, &RequestVoteKick_Parms, NULL );

	if ( msg )
		memcpy ( msg, &RequestVoteKick_Parms.msg, 0xC );

	return RequestVoteKick_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.VoteKickPlayerAllowedToInstigate
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AR_PlayerController*     VoteInstigator                 ( CPF_Parm )

bool AR_Game::VoteKickPlayerAllowedToInstigate ( class AR_PlayerController* VoteInstigator )
{
	static UFunction* pFnVoteKickPlayerAllowedToInstigate = NULL;

	if ( ! pFnVoteKickPlayerAllowedToInstigate )
		pFnVoteKickPlayerAllowedToInstigate = (UFunction*) UObject::GObjObjects()->Data[ 80219 ];

	AR_Game_execVoteKickPlayerAllowedToInstigate_Parms VoteKickPlayerAllowedToInstigate_Parms;
	VoteKickPlayerAllowedToInstigate_Parms.VoteInstigator = VoteInstigator;

	this->ProcessEvent ( pFnVoteKickPlayerAllowedToInstigate, &VoteKickPlayerAllowedToInstigate_Parms, NULL );

	return VoteKickPlayerAllowedToInstigate_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.GetPlayerList
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  annotated                      ( CPF_OptionalParm | CPF_Parm )

void AR_Game::GetPlayerList ( unsigned long annotated )
{
	static UFunction* pFnGetPlayerList = NULL;

	if ( ! pFnGetPlayerList )
		pFnGetPlayerList = (UFunction*) UObject::GObjObjects()->Data[ 80216 ];

	AR_Game_execGetPlayerList_Parms GetPlayerList_Parms;
	GetPlayerList_Parms.annotated = annotated;

	this->ProcessEvent ( pFnGetPlayerList, &GetPlayerList_Parms, NULL );
};

// Function RavagedGame.R_Game.GetAnnotatedPlayerStringFromPRI
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

struct FString AR_Game::GetAnnotatedPlayerStringFromPRI ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnGetAnnotatedPlayerStringFromPRI = NULL;

	if ( ! pFnGetAnnotatedPlayerStringFromPRI )
		pFnGetAnnotatedPlayerStringFromPRI = (UFunction*) UObject::GObjObjects()->Data[ 80213 ];

	AR_Game_execGetAnnotatedPlayerStringFromPRI_Parms GetAnnotatedPlayerStringFromPRI_Parms;
	GetAnnotatedPlayerStringFromPRI_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetAnnotatedPlayerStringFromPRI, &GetAnnotatedPlayerStringFromPRI_Parms, NULL );

	return GetAnnotatedPlayerStringFromPRI_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.GetPlayerStringFromPRI
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

struct FString AR_Game::GetPlayerStringFromPRI ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnGetPlayerStringFromPRI = NULL;

	if ( ! pFnGetPlayerStringFromPRI )
		pFnGetPlayerStringFromPRI = (UFunction*) UObject::GObjObjects()->Data[ 80210 ];

	AR_Game_execGetPlayerStringFromPRI_Parms GetPlayerStringFromPRI_Parms;
	GetPlayerStringFromPRI_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetPlayerStringFromPRI, &GetPlayerStringFromPRI_Parms, NULL );

	return GetPlayerStringFromPRI_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.CycleMap
// [0x00020002] 
// Parameters infos:

void AR_Game::CycleMap ( )
{
	static UFunction* pFnCycleMap = NULL;

	if ( ! pFnCycleMap )
		pFnCycleMap = (UFunction*) UObject::GObjObjects()->Data[ 80209 ];

	AR_Game_execCycleMap_Parms CycleMap_Parms;

	this->ProcessEvent ( pFnCycleMap, &CycleMap_Parms, NULL );
};

// Function RavagedGame.R_Game.NextMap
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_Game::NextMap ( )
{
	static UFunction* pFnNextMap = NULL;

	if ( ! pFnNextMap )
		pFnNextMap = (UFunction*) UObject::GObjObjects()->Data[ 80205 ];

	AR_Game_execNextMap_Parms NextMap_Parms;

	this->ProcessEvent ( pFnNextMap, &NextMap_Parms, NULL );
};

// Function RavagedGame.R_Game.RoundTransition
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_Game::RoundTransition ( )
{
	static UFunction* pFnRoundTransition = NULL;

	if ( ! pFnRoundTransition )
		pFnRoundTransition = (UFunction*) UObject::GObjObjects()->Data[ 80202 ];

	AR_Game_execRoundTransition_Parms RoundTransition_Parms;

	this->ProcessEvent ( pFnRoundTransition, &RoundTransition_Parms, NULL );
};

// Function RavagedGame.R_Game.RoundChange
// [0x00020002] 
// Parameters infos:

void AR_Game::RoundChange ( )
{
	static UFunction* pFnRoundChange = NULL;

	if ( ! pFnRoundChange )
		pFnRoundChange = (UFunction*) UObject::GObjObjects()->Data[ 80201 ];

	AR_Game_execRoundChange_Parms RoundChange_Parms;

	this->ProcessEvent ( pFnRoundChange, &RoundChange_Parms, NULL );
};

// Function RavagedGame.R_Game.JoinGameFromSpectate
// [0x00020002] 
// Parameters infos:
// class APlayerController*       rCon                           ( CPF_Parm )

void AR_Game::JoinGameFromSpectate ( class APlayerController* rCon )
{
	static UFunction* pFnJoinGameFromSpectate = NULL;

	if ( ! pFnJoinGameFromSpectate )
		pFnJoinGameFromSpectate = (UFunction*) UObject::GObjObjects()->Data[ 80196 ];

	AR_Game_execJoinGameFromSpectate_Parms JoinGameFromSpectate_Parms;
	JoinGameFromSpectate_Parms.rCon = rCon;

	this->ProcessEvent ( pFnJoinGameFromSpectate, &JoinGameFromSpectate_Parms, NULL );
};

// Function RavagedGame.R_Game.SpectatePlayer
// [0x00820002] 
// Parameters infos:
// class APlayerController*       rCon                           ( CPF_Parm )

void AR_Game::SpectatePlayer ( class APlayerController* rCon )
{
	static UFunction* pFnSpectatePlayer = NULL;

	if ( ! pFnSpectatePlayer )
		pFnSpectatePlayer = (UFunction*) UObject::GObjObjects()->Data[ 80188 ];

	AR_Game_execSpectatePlayer_Parms SpectatePlayer_Parms;
	SpectatePlayer_Parms.rCon = rCon;

	this->ProcessEvent ( pFnSpectatePlayer, &SpectatePlayer_Parms, NULL );
};

// Function RavagedGame.R_Game.PostLogin
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       NewPlayer                      ( CPF_Parm )

void AR_Game::eventPostLogin ( class APlayerController* NewPlayer )
{
	static UFunction* pFnPostLogin = NULL;

	if ( ! pFnPostLogin )
		pFnPostLogin = (UFunction*) UObject::GObjObjects()->Data[ 80185 ];

	AR_Game_eventPostLogin_Parms PostLogin_Parms;
	PostLogin_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnPostLogin, &PostLogin_Parms, NULL );
};

// Function RavagedGame.R_Game.GetGameSettings
// [0x00020002] 
// Parameters infos:
// class UR_DataStore_GameSettings* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UR_DataStore_GameSettings* AR_Game::GetGameSettings ( )
{
	static UFunction* pFnGetGameSettings = NULL;

	if ( ! pFnGetGameSettings )
		pFnGetGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 80182 ];

	AR_Game_execGetGameSettings_Parms GetGameSettings_Parms;

	this->ProcessEvent ( pFnGetGameSettings, &GetGameSettings_Parms, NULL );

	return GetGameSettings_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.GenericPlayerInitialization
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )

void AR_Game::GenericPlayerInitialization ( class AController* C )
{
	static UFunction* pFnGenericPlayerInitialization = NULL;

	if ( ! pFnGenericPlayerInitialization )
		pFnGenericPlayerInitialization = (UFunction*) UObject::GObjObjects()->Data[ 80180 ];

	AR_Game_execGenericPlayerInitialization_Parms GenericPlayerInitialization_Parms;
	GenericPlayerInitialization_Parms.C = C;

	this->ProcessEvent ( pFnGenericPlayerInitialization, &GenericPlayerInitialization_Parms, NULL );
};

// Function RavagedGame.R_Game.UTGame_ReduceDamage
// [0x00420002] 
// Parameters infos:
// class APawn*                   injured                        ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// int                            Damage                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void AR_Game::UTGame_ReduceDamage ( class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum )
{
	static UFunction* pFnUTGame_ReduceDamage = NULL;

	if ( ! pFnUTGame_ReduceDamage )
		pFnUTGame_ReduceDamage = (UFunction*) UObject::GObjObjects()->Data[ 80171 ];

	AR_Game_execUTGame_ReduceDamage_Parms UTGame_ReduceDamage_Parms;
	UTGame_ReduceDamage_Parms.injured = injured;
	UTGame_ReduceDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &UTGame_ReduceDamage_Parms.HitLocation, &HitLocation, 0xC );
	UTGame_ReduceDamage_Parms.DamageType = DamageType;
	UTGame_ReduceDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnUTGame_ReduceDamage, &UTGame_ReduceDamage_Parms, NULL );

	if ( Damage )
		*Damage = UTGame_ReduceDamage_Parms.Damage;

	if ( Momentum )
		memcpy ( Momentum, &UTGame_ReduceDamage_Parms.Momentum, 0xC );
};

// Function RavagedGame.R_Game.UTTeamGame_ReduceDamage
// [0x00420002] 
// Parameters infos:
// class APawn*                   injured                        ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// int                            Damage                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void AR_Game::UTTeamGame_ReduceDamage ( class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum )
{
	static UFunction* pFnUTTeamGame_ReduceDamage = NULL;

	if ( ! pFnUTTeamGame_ReduceDamage )
		pFnUTTeamGame_ReduceDamage = (UFunction*) UObject::GObjObjects()->Data[ 80161 ];

	AR_Game_execUTTeamGame_ReduceDamage_Parms UTTeamGame_ReduceDamage_Parms;
	UTTeamGame_ReduceDamage_Parms.injured = injured;
	UTTeamGame_ReduceDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &UTTeamGame_ReduceDamage_Parms.HitLocation, &HitLocation, 0xC );
	UTTeamGame_ReduceDamage_Parms.DamageType = DamageType;
	UTTeamGame_ReduceDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnUTTeamGame_ReduceDamage, &UTTeamGame_ReduceDamage_Parms, NULL );

	if ( Damage )
		*Damage = UTTeamGame_ReduceDamage_Parms.Damage;

	if ( Momentum )
		memcpy ( Momentum, &UTTeamGame_ReduceDamage_Parms.Momentum, 0xC );
};

// Function RavagedGame.R_Game.ReduceDamage
// [0x00420002] 
// Parameters infos:
// class APawn*                   injured                        ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// int                            Damage                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void AR_Game::ReduceDamage ( class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum )
{
	static UFunction* pFnReduceDamage = NULL;

	if ( ! pFnReduceDamage )
		pFnReduceDamage = (UFunction*) UObject::GObjObjects()->Data[ 80153 ];

	AR_Game_execReduceDamage_Parms ReduceDamage_Parms;
	ReduceDamage_Parms.injured = injured;
	ReduceDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &ReduceDamage_Parms.HitLocation, &HitLocation, 0xC );
	ReduceDamage_Parms.DamageType = DamageType;
	ReduceDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnReduceDamage, &ReduceDamage_Parms, NULL );

	if ( Damage )
		*Damage = ReduceDamage_Parms.Damage;

	if ( Momentum )
		memcpy ( Momentum, &ReduceDamage_Parms.Momentum, 0xC );
};

// Function RavagedGame.R_Game.UpdateGameSettings
// [0x00020002] 
// Parameters infos:

void AR_Game::UpdateGameSettings ( )
{
	static UFunction* pFnUpdateGameSettings = NULL;

	if ( ! pFnUpdateGameSettings )
		pFnUpdateGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 80149 ];

	AR_Game_execUpdateGameSettings_Parms UpdateGameSettings_Parms;

	this->ProcessEvent ( pFnUpdateGameSettings, &UpdateGameSettings_Parms, NULL );
};

// Function RavagedGame.R_Game.GetWeaponsForTeamClass
// [0x00022002] 
// Parameters infos:
// TArray< class UClass* >        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// TArray< class UClass* >        weapList                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            nTeam                          ( CPF_Parm )
// int                            nClass                         ( CPF_Parm )

TArray< class UClass* > AR_Game::GetWeaponsForTeamClass ( TArray< class UClass* > weapList, int nTeam, int nClass )
{
	static UFunction* pFnGetWeaponsForTeamClass = NULL;

	if ( ! pFnGetWeaponsForTeamClass )
		pFnGetWeaponsForTeamClass = (UFunction*) UObject::GObjObjects()->Data[ 80137 ];

	AR_Game_execGetWeaponsForTeamClass_Parms GetWeaponsForTeamClass_Parms;
	memcpy ( &GetWeaponsForTeamClass_Parms.weapList, &weapList, 0xC );
	GetWeaponsForTeamClass_Parms.nTeam = nTeam;
	GetWeaponsForTeamClass_Parms.nClass = nClass;

	this->ProcessEvent ( pFnGetWeaponsForTeamClass, &GetWeaponsForTeamClass_Parms, NULL );

	return GetWeaponsForTeamClass_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.GetWeaponsOfLoadoutType
// [0x00022002] 
// Parameters infos:
// TArray< class UClass* >        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// TArray< class UClass* >        weapList                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  FilterType                     ( CPF_Parm )

TArray< class UClass* > AR_Game::GetWeaponsOfLoadoutType ( TArray< class UClass* > weapList, unsigned char FilterType )
{
	static UFunction* pFnGetWeaponsOfLoadoutType = NULL;

	if ( ! pFnGetWeaponsOfLoadoutType )
		pFnGetWeaponsOfLoadoutType = (UFunction*) UObject::GObjObjects()->Data[ 80127 ];

	AR_Game_execGetWeaponsOfLoadoutType_Parms GetWeaponsOfLoadoutType_Parms;
	memcpy ( &GetWeaponsOfLoadoutType_Parms.weapList, &weapList, 0xC );
	GetWeaponsOfLoadoutType_Parms.FilterType = FilterType;

	this->ProcessEvent ( pFnGetWeaponsOfLoadoutType, &GetWeaponsOfLoadoutType_Parms, NULL );

	return GetWeaponsOfLoadoutType_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.GetTeamWeapons
// [0x00022002] 
// Parameters infos:
// TArray< class UClass* >        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Team                           ( CPF_Parm )

TArray< class UClass* > AR_Game::GetTeamWeapons ( int Team )
{
	static UFunction* pFnGetTeamWeapons = NULL;

	if ( ! pFnGetTeamWeapons )
		pFnGetTeamWeapons = (UFunction*) UObject::GObjObjects()->Data[ 80118 ];

	AR_Game_execGetTeamWeapons_Parms GetTeamWeapons_Parms;
	GetTeamWeapons_Parms.Team = Team;

	this->ProcessEvent ( pFnGetTeamWeapons, &GetTeamWeapons_Parms, NULL );

	return GetTeamWeapons_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.SpawnPlayer
// [0x00020002] 
// Parameters infos:
// class AController*             aPlayer                        ( CPF_Parm )

void AR_Game::SpawnPlayer ( class AController* aPlayer )
{
	static UFunction* pFnSpawnPlayer = NULL;

	if ( ! pFnSpawnPlayer )
		pFnSpawnPlayer = (UFunction*) UObject::GObjObjects()->Data[ 80116 ];

	AR_Game_execSpawnPlayer_Parms SpawnPlayer_Parms;
	SpawnPlayer_Parms.aPlayer = aPlayer;

	this->ProcessEvent ( pFnSpawnPlayer, &SpawnPlayer_Parms, NULL );
};

// Function RavagedGame.R_Game.GameInfo_SpawnDefaultPawnFor
// [0x00820002] 
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             NewPlayer                      ( CPF_Parm )
// class AActor*                  StartSpot                      ( CPF_Parm )
// unsigned long                  bDisableStartCollisions        ( CPF_Parm )

class APawn* AR_Game::GameInfo_SpawnDefaultPawnFor ( class AController* NewPlayer, class AActor* StartSpot, unsigned long bDisableStartCollisions )
{
	static UFunction* pFnGameInfo_SpawnDefaultPawnFor = NULL;

	if ( ! pFnGameInfo_SpawnDefaultPawnFor )
		pFnGameInfo_SpawnDefaultPawnFor = (UFunction*) UObject::GObjObjects()->Data[ 80105 ];

	AR_Game_execGameInfo_SpawnDefaultPawnFor_Parms GameInfo_SpawnDefaultPawnFor_Parms;
	GameInfo_SpawnDefaultPawnFor_Parms.NewPlayer = NewPlayer;
	GameInfo_SpawnDefaultPawnFor_Parms.StartSpot = StartSpot;
	GameInfo_SpawnDefaultPawnFor_Parms.bDisableStartCollisions = bDisableStartCollisions;

	this->ProcessEvent ( pFnGameInfo_SpawnDefaultPawnFor, &GameInfo_SpawnDefaultPawnFor_Parms, NULL );

	return GameInfo_SpawnDefaultPawnFor_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.GameInfo_RestartPlayer
// [0x00020002] 
// Parameters infos:
// class AController*             NewPlayer                      ( CPF_Parm )

void AR_Game::GameInfo_RestartPlayer ( class AController* NewPlayer )
{
	static UFunction* pFnGameInfo_RestartPlayer = NULL;

	if ( ! pFnGameInfo_RestartPlayer )
		pFnGameInfo_RestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 80096 ];

	AR_Game_execGameInfo_RestartPlayer_Parms GameInfo_RestartPlayer_Parms;
	GameInfo_RestartPlayer_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnGameInfo_RestartPlayer, &GameInfo_RestartPlayer_Parms, NULL );
};

// Function RavagedGame.R_Game.UTGame_RestartPlayer
// [0x00820002] 
// Parameters infos:
// class AController*             aPlayer                        ( CPF_Parm )

void AR_Game::UTGame_RestartPlayer ( class AController* aPlayer )
{
	static UFunction* pFnUTGame_RestartPlayer = NULL;

	if ( ! pFnUTGame_RestartPlayer )
		pFnUTGame_RestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 80088 ];

	AR_Game_execUTGame_RestartPlayer_Parms UTGame_RestartPlayer_Parms;
	UTGame_RestartPlayer_Parms.aPlayer = aPlayer;

	this->ProcessEvent ( pFnUTGame_RestartPlayer, &UTGame_RestartPlayer_Parms, NULL );
};

// Function RavagedGame.R_Game.GFxSpawnPlayer
// [0x00020002] 
// Parameters infos:
// class AController*             aPlayer                        ( CPF_Parm )

void AR_Game::GFxSpawnPlayer ( class AController* aPlayer )
{
	static UFunction* pFnGFxSpawnPlayer = NULL;

	if ( ! pFnGFxSpawnPlayer )
		pFnGFxSpawnPlayer = (UFunction*) UObject::GObjObjects()->Data[ 80082 ];

	AR_Game_execGFxSpawnPlayer_Parms GFxSpawnPlayer_Parms;
	GFxSpawnPlayer_Parms.aPlayer = aPlayer;

	this->ProcessEvent ( pFnGFxSpawnPlayer, &GFxSpawnPlayer_Parms, NULL );
};

// Function RavagedGame.R_Game.GFxSetupPlayerInventory
// [0x00020002] 
// Parameters infos:
// class AController*             aPlayer                        ( CPF_Parm )

void AR_Game::GFxSetupPlayerInventory ( class AController* aPlayer )
{
	static UFunction* pFnGFxSetupPlayerInventory = NULL;

	if ( ! pFnGFxSetupPlayerInventory )
		pFnGFxSetupPlayerInventory = (UFunction*) UObject::GObjObjects()->Data[ 80073 ];

	AR_Game_execGFxSetupPlayerInventory_Parms GFxSetupPlayerInventory_Parms;
	GFxSetupPlayerInventory_Parms.aPlayer = aPlayer;

	this->ProcessEvent ( pFnGFxSetupPlayerInventory, &GFxSetupPlayerInventory_Parms, NULL );
};

// Function RavagedGame.R_Game.RestartPlayer
// [0x00020002] 
// Parameters infos:
// class AController*             aPlayer                        ( CPF_Parm )

void AR_Game::RestartPlayer ( class AController* aPlayer )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 80071 ];

	AR_Game_execRestartPlayer_Parms RestartPlayer_Parms;
	RestartPlayer_Parms.aPlayer = aPlayer;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function RavagedGame.R_Game.SkillZCombo
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             KilledPlayer                   ( CPF_Parm )
// class APawn*                   KilledPawn                     ( CPF_Parm )
// class UClass*                  comboType                      ( CPF_Parm )

void AR_Game::SkillZCombo ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* comboType )
{
	static UFunction* pFnSkillZCombo = NULL;

	if ( ! pFnSkillZCombo )
		pFnSkillZCombo = (UFunction*) UObject::GObjObjects()->Data[ 80064 ];

	AR_Game_execSkillZCombo_Parms SkillZCombo_Parms;
	SkillZCombo_Parms.Killer = Killer;
	SkillZCombo_Parms.KilledPlayer = KilledPlayer;
	SkillZCombo_Parms.KilledPawn = KilledPawn;
	SkillZCombo_Parms.comboType = comboType;

	this->ProcessEvent ( pFnSkillZCombo, &SkillZCombo_Parms, NULL );
};

// Function RavagedGame.R_Game.SetRespawnTime
// [0x00020002] 
// Parameters infos:
// class AR_PlayerController*     PC                             ( CPF_Parm )

void AR_Game::SetRespawnTime ( class AR_PlayerController* PC )
{
	static UFunction* pFnSetRespawnTime = NULL;

	if ( ! pFnSetRespawnTime )
		pFnSetRespawnTime = (UFunction*) UObject::GObjObjects()->Data[ 80051 ];

	AR_Game_execSetRespawnTime_Parms SetRespawnTime_Parms;
	SetRespawnTime_Parms.PC = PC;

	this->ProcessEvent ( pFnSetRespawnTime, &SetRespawnTime_Parms, NULL );
};

// Function RavagedGame.R_Game.AnnounceScore
// [0x00020002] 
// Parameters infos:
// int                            ScoringTeam                    ( CPF_Parm )

void AR_Game::AnnounceScore ( int ScoringTeam )
{
	static UFunction* pFnAnnounceScore = NULL;

	if ( ! pFnAnnounceScore )
		pFnAnnounceScore = (UFunction*) UObject::GObjObjects()->Data[ 80035 ];

	AR_Game_execAnnounceScore_Parms AnnounceScore_Parms;
	AnnounceScore_Parms.ScoringTeam = ScoringTeam;

	this->ProcessEvent ( pFnAnnounceScore, &AnnounceScore_Parms, NULL );
};

// Function RavagedGame.R_Game.AllClientsKillSpawnMenu
// [0x00020002] 
// Parameters infos:

void AR_Game::AllClientsKillSpawnMenu ( )
{
	static UFunction* pFnAllClientsKillSpawnMenu = NULL;

	if ( ! pFnAllClientsKillSpawnMenu )
		pFnAllClientsKillSpawnMenu = (UFunction*) UObject::GObjObjects()->Data[ 80033 ];

	AR_Game_execAllClientsKillSpawnMenu_Parms AllClientsKillSpawnMenu_Parms;

	this->ProcessEvent ( pFnAllClientsKillSpawnMenu, &AllClientsKillSpawnMenu_Parms, NULL );
};

// Function RavagedGame.R_Game.ObjectiveNeutralized
// [0x00820002] 
// Parameters infos:
// class AController*             Scorer                         ( CPF_Parm )
// class AR_Objective_ControlPoint* O                              ( CPF_Parm )
// int                            NewTeam                        ( CPF_Parm )

void AR_Game::ObjectiveNeutralized ( class AController* Scorer, class AR_Objective_ControlPoint* O, int NewTeam )
{
	static UFunction* pFnObjectiveNeutralized = NULL;

	if ( ! pFnObjectiveNeutralized )
		pFnObjectiveNeutralized = (UFunction*) UObject::GObjObjects()->Data[ 80023 ];

	AR_Game_execObjectiveNeutralized_Parms ObjectiveNeutralized_Parms;
	ObjectiveNeutralized_Parms.Scorer = Scorer;
	ObjectiveNeutralized_Parms.O = O;
	ObjectiveNeutralized_Parms.NewTeam = NewTeam;

	this->ProcessEvent ( pFnObjectiveNeutralized, &ObjectiveNeutralized_Parms, NULL );
};

// Function RavagedGame.R_Game.ObjectiveCaptured
// [0x00824002] 
// Parameters infos:
// class AController*             Scorer                         ( CPF_Parm )
// class AR_Objective_ControlPoint* O                              ( CPF_Parm )
// unsigned long                  bAnnounce                      ( CPF_OptionalParm | CPF_Parm )

void AR_Game::ObjectiveCaptured ( class AController* Scorer, class AR_Objective_ControlPoint* O, unsigned long bAnnounce )
{
	static UFunction* pFnObjectiveCaptured = NULL;

	if ( ! pFnObjectiveCaptured )
		pFnObjectiveCaptured = (UFunction*) UObject::GObjObjects()->Data[ 80009 ];

	AR_Game_execObjectiveCaptured_Parms ObjectiveCaptured_Parms;
	ObjectiveCaptured_Parms.Scorer = Scorer;
	ObjectiveCaptured_Parms.O = O;
	ObjectiveCaptured_Parms.bAnnounce = bAnnounce;

	this->ProcessEvent ( pFnObjectiveCaptured, &ObjectiveCaptured_Parms, NULL );
};

// Function RavagedGame.R_Game.AddTeamPoints
// [0x00020002] 
// Parameters infos:
// int                            TeamNumber                     ( CPF_Parm )
// int                            Points                         ( CPF_Parm )

void AR_Game::AddTeamPoints ( int TeamNumber, int Points )
{
	static UFunction* pFnAddTeamPoints = NULL;

	if ( ! pFnAddTeamPoints )
		pFnAddTeamPoints = (UFunction*) UObject::GObjObjects()->Data[ 80006 ];

	AR_Game_execAddTeamPoints_Parms AddTeamPoints_Parms;
	AddTeamPoints_Parms.TeamNumber = TeamNumber;
	AddTeamPoints_Parms.Points = Points;

	this->ProcessEvent ( pFnAddTeamPoints, &AddTeamPoints_Parms, NULL );
};

// Function RavagedGame.R_Game.ChoosePlayerStart
// [0x00024002] 
// Parameters infos:
// class APlayerStart*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )

class APlayerStart* AR_Game::ChoosePlayerStart ( class AController* Player, unsigned char InTeam )
{
	static UFunction* pFnChoosePlayerStart = NULL;

	if ( ! pFnChoosePlayerStart )
		pFnChoosePlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 79999 ];

	AR_Game_execChoosePlayerStart_Parms ChoosePlayerStart_Parms;
	ChoosePlayerStart_Parms.Player = Player;
	ChoosePlayerStart_Parms.InTeam = InTeam;

	this->ProcessEvent ( pFnChoosePlayerStart, &ChoosePlayerStart_Parms, NULL );

	return ChoosePlayerStart_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.R_RatePlayerStart
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerStart*            P                              ( CPF_Parm )
// unsigned char                  Team                           ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )

float AR_Game::R_RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player )
{
	static UFunction* pFnR_RatePlayerStart = NULL;

	if ( ! pFnR_RatePlayerStart )
		pFnR_RatePlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 79990 ];

	AR_Game_execR_RatePlayerStart_Parms R_RatePlayerStart_Parms;
	R_RatePlayerStart_Parms.P = P;
	R_RatePlayerStart_Parms.Team = Team;
	R_RatePlayerStart_Parms.Player = Player;

	this->ProcessEvent ( pFnR_RatePlayerStart, &R_RatePlayerStart_Parms, NULL );

	return R_RatePlayerStart_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.GetObjectivesBestPlayerStart
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AR_Objective_ControlPoint* cp                             ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )

class AActor* AR_Game::GetObjectivesBestPlayerStart ( class AR_Objective_ControlPoint* cp, unsigned char InTeam, class AController* Player )
{
	static UFunction* pFnGetObjectivesBestPlayerStart = NULL;

	if ( ! pFnGetObjectivesBestPlayerStart )
		pFnGetObjectivesBestPlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 79981 ];

	AR_Game_execGetObjectivesBestPlayerStart_Parms GetObjectivesBestPlayerStart_Parms;
	GetObjectivesBestPlayerStart_Parms.cp = cp;
	GetObjectivesBestPlayerStart_Parms.InTeam = InTeam;
	GetObjectivesBestPlayerStart_Parms.Player = Player;

	this->ProcessEvent ( pFnGetObjectivesBestPlayerStart, &GetObjectivesBestPlayerStart_Parms, NULL );

	return GetObjectivesBestPlayerStart_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.R_FindPlayerStart
// [0x00024002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )
// struct FString                 IncomingName                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class AActor* AR_Game::R_FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName )
{
	static UFunction* pFnR_FindPlayerStart = NULL;

	if ( ! pFnR_FindPlayerStart )
		pFnR_FindPlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 79974 ];

	AR_Game_execR_FindPlayerStart_Parms R_FindPlayerStart_Parms;
	R_FindPlayerStart_Parms.Player = Player;
	R_FindPlayerStart_Parms.InTeam = InTeam;
	memcpy ( &R_FindPlayerStart_Parms.IncomingName, &IncomingName, 0xC );

	this->ProcessEvent ( pFnR_FindPlayerStart, &R_FindPlayerStart_Parms, NULL );

	return R_FindPlayerStart_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.AddDumbBots
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            numbBots                       ( CPF_Parm )

void AR_Game::AddDumbBots ( int numbBots )
{
	static UFunction* pFnAddDumbBots = NULL;

	if ( ! pFnAddDumbBots )
		pFnAddDumbBots = (UFunction*) UObject::GObjObjects()->Data[ 79972 ];

	AR_Game_execAddDumbBots_Parms AddDumbBots_Parms;
	AddDumbBots_Parms.numbBots = numbBots;

	this->ProcessEvent ( pFnAddDumbBots, &AddDumbBots_Parms, NULL );
};

// Function RavagedGame.R_Game.AddDumbBot
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            TeamIndex                      ( CPF_Parm )
// int                            numberToAdd                    ( CPF_Parm )

void AR_Game::AddDumbBot ( int TeamIndex, int numberToAdd )
{
	static UFunction* pFnAddDumbBot = NULL;

	if ( ! pFnAddDumbBot )
		pFnAddDumbBot = (UFunction*) UObject::GObjObjects()->Data[ 79968 ];

	AR_Game_execAddDumbBot_Parms AddDumbBot_Parms;
	AddDumbBot_Parms.TeamIndex = TeamIndex;
	AddDumbBot_Parms.numberToAdd = numberToAdd;

	this->ProcessEvent ( pFnAddDumbBot, &AddDumbBot_Parms, NULL );
};

// Function RavagedGame.R_Game.AddBot
// [0x00024002] 
// Parameters infos:
// class AUTBot*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 BotName                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bUseTeamIndex                  ( CPF_OptionalParm | CPF_Parm )
// int                            TeamIndex                      ( CPF_OptionalParm | CPF_Parm )

class AUTBot* AR_Game::AddBot ( struct FString BotName, unsigned long bUseTeamIndex, int TeamIndex )
{
	static UFunction* pFnAddBot = NULL;

	if ( ! pFnAddBot )
		pFnAddBot = (UFunction*) UObject::GObjObjects()->Data[ 79962 ];

	AR_Game_execAddBot_Parms AddBot_Parms;
	memcpy ( &AddBot_Parms.BotName, &BotName, 0xC );
	AddBot_Parms.bUseTeamIndex = bUseTeamIndex;
	AddBot_Parms.TeamIndex = TeamIndex;

	this->ProcessEvent ( pFnAddBot, &AddBot_Parms, NULL );

	return AddBot_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.SetGameType
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Portal                         ( CPF_Parm | CPF_NeedCtorLink )

class UClass* AR_Game::eventSetGameType ( struct FString MapName, struct FString Options, struct FString Portal )
{
	static UFunction* pFnSetGameType = NULL;

	if ( ! pFnSetGameType )
		pFnSetGameType = (UFunction*) UObject::GObjObjects()->Data[ 79957 ];

	AR_Game_eventSetGameType_Parms SetGameType_Parms;
	memcpy ( &SetGameType_Parms.MapName, &MapName, 0xC );
	memcpy ( &SetGameType_Parms.Options, &Options, 0xC );
	memcpy ( &SetGameType_Parms.Portal, &Portal, 0xC );

	this->ProcessEvent ( pFnSetGameType, &SetGameType_Parms, NULL );

	return SetGameType_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.ChangeTeam
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Other                          ( CPF_Parm )
// int                            N                              ( CPF_Parm )
// unsigned long                  bNewTeam                       ( CPF_Parm )

bool AR_Game::ChangeTeam ( class AController* Other, int N, unsigned long bNewTeam )
{
	static UFunction* pFnChangeTeam = NULL;

	if ( ! pFnChangeTeam )
		pFnChangeTeam = (UFunction*) UObject::GObjObjects()->Data[ 79950 ];

	AR_Game_execChangeTeam_Parms ChangeTeam_Parms;
	ChangeTeam_Parms.Other = Other;
	ChangeTeam_Parms.N = N;
	ChangeTeam_Parms.bNewTeam = bNewTeam;

	this->ProcessEvent ( pFnChangeTeam, &ChangeTeam_Parms, NULL );

	return ChangeTeam_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.UTTeamGame_ChangeTeam
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Other                          ( CPF_Parm )
// int                            Num                            ( CPF_Parm )
// unsigned long                  bNewTeam                       ( CPF_Parm )

bool AR_Game::UTTeamGame_ChangeTeam ( class AController* Other, int Num, unsigned long bNewTeam )
{
	static UFunction* pFnUTTeamGame_ChangeTeam = NULL;

	if ( ! pFnUTTeamGame_ChangeTeam )
		pFnUTTeamGame_ChangeTeam = (UFunction*) UObject::GObjObjects()->Data[ 79942 ];

	AR_Game_execUTTeamGame_ChangeTeam_Parms UTTeamGame_ChangeTeam_Parms;
	UTTeamGame_ChangeTeam_Parms.Other = Other;
	UTTeamGame_ChangeTeam_Parms.Num = Num;
	UTTeamGame_ChangeTeam_Parms.bNewTeam = bNewTeam;

	this->ProcessEvent ( pFnUTTeamGame_ChangeTeam, &UTTeamGame_ChangeTeam_Parms, NULL );

	return UTTeamGame_ChangeTeam_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.CalcTeamScores
// [0x00020000] 
// Parameters infos:

void AR_Game::CalcTeamScores ( )
{
	static UFunction* pFnCalcTeamScores = NULL;

	if ( ! pFnCalcTeamScores )
		pFnCalcTeamScores = (UFunction*) UObject::GObjObjects()->Data[ 79941 ];

	AR_Game_execCalcTeamScores_Parms CalcTeamScores_Parms;

	this->ProcessEvent ( pFnCalcTeamScores, &CalcTeamScores_Parms, NULL );
};

// Function RavagedGame.R_Game.GRIisReady
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Game::GRIisReady ( )
{
	static UFunction* pFnGRIisReady = NULL;

	if ( ! pFnGRIisReady )
		pFnGRIisReady = (UFunction*) UObject::GObjObjects()->Data[ 79936 ];

	AR_Game_execGRIisReady_Parms GRIisReady_Parms;

	this->ProcessEvent ( pFnGRIisReady, &GRIisReady_Parms, NULL );

	return GRIisReady_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.PostSeamlessTravel
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AR_Game::eventPostSeamlessTravel ( )
{
	static UFunction* pFnPostSeamlessTravel = NULL;

	if ( ! pFnPostSeamlessTravel )
		pFnPostSeamlessTravel = (UFunction*) UObject::GObjObjects()->Data[ 79935 ];

	AR_Game_eventPostSeamlessTravel_Parms PostSeamlessTravel_Parms;

	this->ProcessEvent ( pFnPostSeamlessTravel, &PostSeamlessTravel_Parms, NULL );
};

// Function RavagedGame.R_Game.R_ActivateVehicleFactory
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AUTVehicleFactory*       VF                             ( CPF_Parm )

bool AR_Game::R_ActivateVehicleFactory ( class AUTVehicleFactory* VF )
{
	static UFunction* pFnR_ActivateVehicleFactory = NULL;

	if ( ! pFnR_ActivateVehicleFactory )
		pFnR_ActivateVehicleFactory = (UFunction*) UObject::GObjObjects()->Data[ 79932 ];

	AR_Game_execR_ActivateVehicleFactory_Parms R_ActivateVehicleFactory_Parms;
	R_ActivateVehicleFactory_Parms.VF = VF;

	this->ProcessEvent ( pFnR_ActivateVehicleFactory, &R_ActivateVehicleFactory_Parms, NULL );

	return R_ActivateVehicleFactory_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.AllStreamedLevelsVisible
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Game::AllStreamedLevelsVisible ( )
{
	static UFunction* pFnAllStreamedLevelsVisible = NULL;

	if ( ! pFnAllStreamedLevelsVisible )
		pFnAllStreamedLevelsVisible = (UFunction*) UObject::GObjObjects()->Data[ 79929 ];

	AR_Game_execAllStreamedLevelsVisible_Parms AllStreamedLevelsVisible_Parms;

	this->ProcessEvent ( pFnAllStreamedLevelsVisible, &AllStreamedLevelsVisible_Parms, NULL );

	return AllStreamedLevelsVisible_Parms.ReturnValue;
};

// Function RavagedGame.R_Game.FindMainBases
// [0x00020002] 
// Parameters infos:

void AR_Game::FindMainBases ( )
{
	static UFunction* pFnFindMainBases = NULL;

	if ( ! pFnFindMainBases )
		pFnFindMainBases = (UFunction*) UObject::GObjObjects()->Data[ 79924 ];

	AR_Game_execFindMainBases_Parms FindMainBases_Parms;

	this->ProcessEvent ( pFnFindMainBases, &FindMainBases_Parms, NULL );
};

// Function RavagedGame.R_Game.PreBeginPlay
// [0x00020002] 
// Parameters infos:

void AR_Game::PreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 79923 ];

	AR_Game_execPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_Game.InitGame
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AR_Game::eventInitGame ( struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnInitGame = NULL;

	if ( ! pFnInitGame )
		pFnInitGame = (UFunction*) UObject::GObjObjects()->Data[ 79917 ];

	AR_Game_eventInitGame_Parms InitGame_Parms;
	memcpy ( &InitGame_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnInitGame, &InitGame_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &InitGame_Parms.ErrorMessage, 0xC );
};

// Function RavagedGame.R_Game.InitGameReplicationInfo
// [0x00020002] 
// Parameters infos:

void AR_Game::InitGameReplicationInfo ( )
{
	static UFunction* pFnInitGameReplicationInfo = NULL;

	if ( ! pFnInitGameReplicationInfo )
		pFnInitGameReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 79909 ];

	AR_Game_execInitGameReplicationInfo_Parms InitGameReplicationInfo_Parms;

	this->ProcessEvent ( pFnInitGameReplicationInfo, &InitGameReplicationInfo_Parms, NULL );
};

// Function RavagedGame.R_Game.GetSeamlessTravelActorList
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bToEntry                       ( CPF_Parm )
// TArray< class AActor* >        ActorList                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AR_Game::eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList )
{
	static UFunction* pFnGetSeamlessTravelActorList = NULL;

	if ( ! pFnGetSeamlessTravelActorList )
		pFnGetSeamlessTravelActorList = (UFunction*) UObject::GObjObjects()->Data[ 79902 ];

	AR_Game_eventGetSeamlessTravelActorList_Parms GetSeamlessTravelActorList_Parms;
	GetSeamlessTravelActorList_Parms.bToEntry = bToEntry;

	this->ProcessEvent ( pFnGetSeamlessTravelActorList, &GetSeamlessTravelActorList_Parms, NULL );

	if ( ActorList )
		memcpy ( ActorList, &GetSeamlessTravelActorList_Parms.ActorList, 0xC );
};

// Function RavagedGame.R_Game.StartMatch
// [0x00020002] 
// Parameters infos:

void AR_Game::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = (UFunction*) UObject::GObjObjects()->Data[ 79900 ];

	AR_Game_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function RavagedGame.R_Game.SwitchBothTeams
// [0x00020002] 
// Parameters infos:

void AR_Game::SwitchBothTeams ( )
{
	static UFunction* pFnSwitchBothTeams = NULL;

	if ( ! pFnSwitchBothTeams )
		pFnSwitchBothTeams = (UFunction*) UObject::GObjObjects()->Data[ 79897 ];

	AR_Game_execSwitchBothTeams_Parms SwitchBothTeams_Parms;

	this->ProcessEvent ( pFnSwitchBothTeams, &SwitchBothTeams_Parms, NULL );
};

// Function RavagedGame.R_Game.RemovePlayerWaitingToSpawn
// [0x00020002] 
// Parameters infos:
// class AR_PlayerController*     rPC                            ( CPF_Parm )

void AR_Game::RemovePlayerWaitingToSpawn ( class AR_PlayerController* rPC )
{
	static UFunction* pFnRemovePlayerWaitingToSpawn = NULL;

	if ( ! pFnRemovePlayerWaitingToSpawn )
		pFnRemovePlayerWaitingToSpawn = (UFunction*) UObject::GObjObjects()->Data[ 79895 ];

	AR_Game_execRemovePlayerWaitingToSpawn_Parms RemovePlayerWaitingToSpawn_Parms;
	RemovePlayerWaitingToSpawn_Parms.rPC = rPC;

	this->ProcessEvent ( pFnRemovePlayerWaitingToSpawn, &RemovePlayerWaitingToSpawn_Parms, NULL );
};

// Function RavagedGame.R_Game.AddPlayerWaitingToSpawn
// [0x00020002] 
// Parameters infos:
// class AR_PlayerController*     rPC                            ( CPF_Parm )

void AR_Game::AddPlayerWaitingToSpawn ( class AR_PlayerController* rPC )
{
	static UFunction* pFnAddPlayerWaitingToSpawn = NULL;

	if ( ! pFnAddPlayerWaitingToSpawn )
		pFnAddPlayerWaitingToSpawn = (UFunction*) UObject::GObjObjects()->Data[ 79893 ];

	AR_Game_execAddPlayerWaitingToSpawn_Parms AddPlayerWaitingToSpawn_Parms;
	AddPlayerWaitingToSpawn_Parms.rPC = rPC;

	this->ProcessEvent ( pFnAddPlayerWaitingToSpawn, &AddPlayerWaitingToSpawn_Parms, NULL );
};

// Function RavagedGame.R_Game.CheckPlayersSelectedSpawnActor
// [0x00020002] 
// Parameters infos:
// class AActor*                  checkActor                     ( CPF_Parm )

void AR_Game::CheckPlayersSelectedSpawnActor ( class AActor* checkActor )
{
	static UFunction* pFnCheckPlayersSelectedSpawnActor = NULL;

	if ( ! pFnCheckPlayersSelectedSpawnActor )
		pFnCheckPlayersSelectedSpawnActor = (UFunction*) UObject::GObjObjects()->Data[ 79887 ];

	AR_Game_execCheckPlayersSelectedSpawnActor_Parms CheckPlayersSelectedSpawnActor_Parms;
	CheckPlayersSelectedSpawnActor_Parms.checkActor = checkActor;

	this->ProcessEvent ( pFnCheckPlayersSelectedSpawnActor, &CheckPlayersSelectedSpawnActor_Parms, NULL );
};

// Function RavagedGame.R_Game.RespawnTimer
// [0x00020002] 
// Parameters infos:

void AR_Game::RespawnTimer ( )
{
	static UFunction* pFnRespawnTimer = NULL;

	if ( ! pFnRespawnTimer )
		pFnRespawnTimer = (UFunction*) UObject::GObjObjects()->Data[ 79877 ];

	AR_Game_execRespawnTimer_Parms RespawnTimer_Parms;

	this->ProcessEvent ( pFnRespawnTimer, &RespawnTimer_Parms, NULL );
};

// Function RavagedGame.R_Game.CreateTeam
// [0x00020002] 
// Parameters infos:
// int                            TeamIndex                      ( CPF_Parm )

void AR_Game::CreateTeam ( int TeamIndex )
{
	static UFunction* pFnCreateTeam = NULL;

	if ( ! pFnCreateTeam )
		pFnCreateTeam = (UFunction*) UObject::GObjObjects()->Data[ 79874 ];

	AR_Game_execCreateTeam_Parms CreateTeam_Parms;
	CreateTeam_Parms.TeamIndex = TeamIndex;

	this->ProcessEvent ( pFnCreateTeam, &CreateTeam_Parms, NULL );
};

// Function RavagedGame.R_PlayerReplicationInfo.GetKillStat
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StatName                       ( CPF_Parm )

int AR_PlayerReplicationInfo::GetKillStat ( struct FName StatName )
{
	static UFunction* pFnGetKillStat = NULL;

	if ( ! pFnGetKillStat )
		pFnGetKillStat = (UFunction*) UObject::GObjObjects()->Data[ 86345 ];

	AR_PlayerReplicationInfo_execGetKillStat_Parms GetKillStat_Parms;
	memcpy ( &GetKillStat_Parms.StatName, &StatName, 0x8 );

	this->ProcessEvent ( pFnGetKillStat, &GetKillStat_Parms, NULL );

	return GetKillStat_Parms.ReturnValue;
};

// Function RavagedGame.R_PlayerReplicationInfo.GetEventStat
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StatName                       ( CPF_Parm )

int AR_PlayerReplicationInfo::GetEventStat ( struct FName StatName )
{
	static UFunction* pFnGetEventStat = NULL;

	if ( ! pFnGetEventStat )
		pFnGetEventStat = (UFunction*) UObject::GObjObjects()->Data[ 80378 ];

	AR_PlayerReplicationInfo_execGetEventStat_Parms GetEventStat_Parms;
	memcpy ( &GetEventStat_Parms.StatName, &StatName, 0x8 );

	this->ProcessEvent ( pFnGetEventStat, &GetEventStat_Parms, NULL );

	return GetEventStat_Parms.ReturnValue;
};

// Function RavagedGame.R_PlayerReplicationInfo.IncrementKills
// [0x00020002] 
// Parameters infos:
// unsigned long                  bEnemyKill                     ( CPF_Parm )

void AR_PlayerReplicationInfo::IncrementKills ( unsigned long bEnemyKill )
{
	static UFunction* pFnIncrementKills = NULL;

	if ( ! pFnIncrementKills )
		pFnIncrementKills = (UFunction*) UObject::GObjObjects()->Data[ 86340 ];

	AR_PlayerReplicationInfo_execIncrementKills_Parms IncrementKills_Parms;
	IncrementKills_Parms.bEnemyKill = bEnemyKill;

	this->ProcessEvent ( pFnIncrementKills, &IncrementKills_Parms, NULL );
};

// Function RavagedGame.R_PlayerReplicationInfo.IncrementEventStat
// [0x00820002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NewStatName                    ( CPF_Parm )

int AR_PlayerReplicationInfo::IncrementEventStat ( struct FName NewStatName )
{
	static UFunction* pFnIncrementEventStat = NULL;

	if ( ! pFnIncrementEventStat )
		pFnIncrementEventStat = (UFunction*) UObject::GObjObjects()->Data[ 80293 ];

	AR_PlayerReplicationInfo_execIncrementEventStat_Parms IncrementEventStat_Parms;
	memcpy ( &IncrementEventStat_Parms.NewStatName, &NewStatName, 0x8 );

	this->ProcessEvent ( pFnIncrementEventStat, &IncrementEventStat_Parms, NULL );

	return IncrementEventStat_Parms.ReturnValue;
};

// Function RavagedGame.R_PlayerReplicationInfo.UpdateEventStatAchievements
// [0x00020000] 
// Parameters infos:
// struct FName                   StatName                       ( CPF_Parm )

void AR_PlayerReplicationInfo::UpdateEventStatAchievements ( struct FName StatName )
{
	static UFunction* pFnUpdateEventStatAchievements = NULL;

	if ( ! pFnUpdateEventStatAchievements )
		pFnUpdateEventStatAchievements = (UFunction*) UObject::GObjObjects()->Data[ 86334 ];

	AR_PlayerReplicationInfo_execUpdateEventStatAchievements_Parms UpdateEventStatAchievements_Parms;
	memcpy ( &UpdateEventStatAchievements_Parms.StatName, &StatName, 0x8 );

	this->ProcessEvent ( pFnUpdateEventStatAchievements, &UpdateEventStatAchievements_Parms, NULL );
};

// Function RavagedGame.R_PlayerReplicationInfo.SetFlag
// [0x00020002] 
// Parameters infos:
// class AUTCarriedObject*        NewFlag                        ( CPF_Parm )

void AR_PlayerReplicationInfo::SetFlag ( class AUTCarriedObject* NewFlag )
{
	static UFunction* pFnSetFlag = NULL;

	if ( ! pFnSetFlag )
		pFnSetFlag = (UFunction*) UObject::GObjObjects()->Data[ 86332 ];

	AR_PlayerReplicationInfo_execSetFlag_Parms SetFlag_Parms;
	SetFlag_Parms.NewFlag = NewFlag;

	this->ProcessEvent ( pFnSetFlag, &SetFlag_Parms, NULL );
};

// Function RavagedGame.R_PlayerReplicationInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AR_PlayerReplicationInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 86330 ];

	AR_PlayerReplicationInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function RavagedGame.R_Bot.ServerSetCharacterClass
// [0x002200C2] 
// Parameters infos:
// class UClass*                  CharClass                      ( CPF_Parm )

void AR_Bot::ServerSetCharacterClass ( class UClass* CharClass )
{
	static UFunction* pFnServerSetCharacterClass = NULL;

	if ( ! pFnServerSetCharacterClass )
		pFnServerSetCharacterClass = (UFunction*) UObject::GObjObjects()->Data[ 78891 ];

	AR_Bot_execServerSetCharacterClass_Parms ServerSetCharacterClass_Parms;
	ServerSetCharacterClass_Parms.CharClass = CharClass;

	this->ProcessEvent ( pFnServerSetCharacterClass, &ServerSetCharacterClass_Parms, NULL );
};

// Function RavagedGame.R_Bot.RandomSelectBot
// [0x00020002] 
// Parameters infos:

void AR_Bot::RandomSelectBot ( )
{
	static UFunction* pFnRandomSelectBot = NULL;

	if ( ! pFnRandomSelectBot )
		pFnRandomSelectBot = (UFunction*) UObject::GObjObjects()->Data[ 78890 ];

	AR_Bot_execRandomSelectBot_Parms RandomSelectBot_Parms;

	this->ProcessEvent ( pFnRandomSelectBot, &RandomSelectBot_Parms, NULL );
};

// Function RavagedGame.R_Bot.GetClass
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AR_Bot::GetClass ( )
{
	static UFunction* pFnGetClass = NULL;

	if ( ! pFnGetClass )
		pFnGetClass = (UFunction*) UObject::GObjObjects()->Data[ 78887 ];

	AR_Bot_execGetClass_Parms GetClass_Parms;

	this->ProcessEvent ( pFnGetClass, &GetClass_Parms, NULL );

	return GetClass_Parms.ReturnValue;
};

// Function RavagedGame.R_CheatManager.PatchDebugCameraController
// [0x00020000] 
// Parameters infos:

void UR_CheatManager::PatchDebugCameraController ( )
{
	static UFunction* pFnPatchDebugCameraController = NULL;

	if ( ! pFnPatchDebugCameraController )
		pFnPatchDebugCameraController = (UFunction*) UObject::GObjObjects()->Data[ 78906 ];

	UR_CheatManager_execPatchDebugCameraController_Parms PatchDebugCameraController_Parms;

	this->ProcessEvent ( pFnPatchDebugCameraController, &PatchDebugCameraController_Parms, NULL );
};

// Function RavagedGame.R_CheatManager.ToggleDebugCamera
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bDrawDebugText                 ( CPF_OptionalParm | CPF_Parm )

void UR_CheatManager::ToggleDebugCamera ( unsigned long bDrawDebugText )
{
	static UFunction* pFnToggleDebugCamera = NULL;

	if ( ! pFnToggleDebugCamera )
		pFnToggleDebugCamera = (UFunction*) UObject::GObjObjects()->Data[ 78902 ];

	UR_CheatManager_execToggleDebugCamera_Parms ToggleDebugCamera_Parms;
	ToggleDebugCamera_Parms.bDrawDebugText = bDrawDebugText;

	this->ProcessEvent ( pFnToggleDebugCamera, &ToggleDebugCamera_Parms, NULL );
};

// Function RavagedGame.R_DebugCameraController.OnActivate
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AR_DebugCameraController::OnActivate ( class APlayerController* PC )
{
	static UFunction* pFnOnActivate = NULL;

	if ( ! pFnOnActivate )
		pFnOnActivate = (UFunction*) UObject::GObjObjects()->Data[ 78985 ];

	AR_DebugCameraController_execOnActivate_Parms OnActivate_Parms;
	OnActivate_Parms.PC = PC;

	this->ProcessEvent ( pFnOnActivate, &OnActivate_Parms, NULL );
};

// Function RavagedGame.R_DebugCameraController.DebugCamCalcWeaponFire
// [0x00C24102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FImpactInfo AR_DebugCameraController::DebugCamCalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, TArray< struct FImpactInfo >* ImpactList )
{
	static UFunction* pFnDebugCamCalcWeaponFire = NULL;

	if ( ! pFnDebugCamCalcWeaponFire )
		pFnDebugCamCalcWeaponFire = (UFunction*) UObject::GObjObjects()->Data[ 78968 ];

	AR_DebugCameraController_execDebugCamCalcWeaponFire_Parms DebugCamCalcWeaponFire_Parms;
	memcpy ( &DebugCamCalcWeaponFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &DebugCamCalcWeaponFire_Parms.EndTrace, &EndTrace, 0xC );
	memcpy ( &DebugCamCalcWeaponFire_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnDebugCamCalcWeaponFire, &DebugCamCalcWeaponFire_Parms, NULL );

	if ( ImpactList )
		memcpy ( ImpactList, &DebugCamCalcWeaponFire_Parms.ImpactList, 0xC );

	return DebugCamCalcWeaponFire_Parms.ReturnValue;
};

// Function RavagedGame.R_DebugCameraController.PassThroughDamage
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  HitActor                       ( CPF_Parm )

bool AR_DebugCameraController::PassThroughDamage ( class AActor* HitActor )
{
	static UFunction* pFnPassThroughDamage = NULL;

	if ( ! pFnPassThroughDamage )
		pFnPassThroughDamage = (UFunction*) UObject::GObjObjects()->Data[ 78965 ];

	AR_DebugCameraController_execPassThroughDamage_Parms PassThroughDamage_Parms;
	PassThroughDamage_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnPassThroughDamage, &PassThroughDamage_Parms, NULL );

	return PassThroughDamage_Parms.ReturnValue;
};

// Function RavagedGame.R_DebugCameraController.LogFullTrace
// [0x00020100] 
// Parameters infos:

void AR_DebugCameraController::LogFullTrace ( )
{
	static UFunction* pFnLogFullTrace = NULL;

	if ( ! pFnLogFullTrace )
		pFnLogFullTrace = (UFunction*) UObject::GObjObjects()->Data[ 78964 ];

	AR_DebugCameraController_execLogFullTrace_Parms LogFullTrace_Parms;

	this->ProcessEvent ( pFnLogFullTrace, &LogFullTrace_Parms, NULL );
};

// Function RavagedGame.R_DebugCameraController.PrimarySelect
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLoc                         ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

void AR_DebugCameraController::PrimarySelect ( struct FVector HitLoc, struct FVector HitNormal, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnPrimarySelect = NULL;

	if ( ! pFnPrimarySelect )
		pFnPrimarySelect = (UFunction*) UObject::GObjObjects()->Data[ 78960 ];

	AR_DebugCameraController_execPrimarySelect_Parms PrimarySelect_Parms;
	memcpy ( &PrimarySelect_Parms.HitLoc, &HitLoc, 0xC );
	memcpy ( &PrimarySelect_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &PrimarySelect_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnPrimarySelect, &PrimarySelect_Parms, NULL );
};

// Function RavagedGame.R_DebugCameraController.PlayerMove
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void AR_DebugCameraController::PlayerMove ( float DeltaTime )
{
	static UFunction* pFnPlayerMove = NULL;

	if ( ! pFnPlayerMove )
		pFnPlayerMove = (UFunction*) UObject::GObjObjects()->Data[ 78958 ];

	AR_DebugCameraController_execPlayerMove_Parms PlayerMove_Parms;
	PlayerMove_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerMove, &PlayerMove_Parms, NULL );
};

// Function RavagedGame.R_DebugCameraController.OnDeactivate
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AR_DebugCameraController::OnDeactivate ( class APlayerController* PC )
{
	static UFunction* pFnOnDeactivate = NULL;

	if ( ! pFnOnDeactivate )
		pFnOnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 78956 ];

	AR_DebugCameraController_execOnDeactivate_Parms OnDeactivate_Parms;
	OnDeactivate_Parms.PC = PC;

	this->ProcessEvent ( pFnOnDeactivate, &OnDeactivate_Parms, NULL );
};

// Function RavagedGame.R_DebugCameraController.PlayerTick
// [0x00020002] 
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void AR_DebugCameraController::PlayerTick ( float DT )
{
	static UFunction* pFnPlayerTick = NULL;

	if ( ! pFnPlayerTick )
		pFnPlayerTick = (UFunction*) UObject::GObjObjects()->Data[ 78954 ];

	AR_DebugCameraController_execPlayerTick_Parms PlayerTick_Parms;
	PlayerTick_Parms.DT = DT;

	this->ProcessEvent ( pFnPlayerTick, &PlayerTick_Parms, NULL );
};

// Function RavagedGame.R_DebugCameraController.DisableDebugCamera
// [0x00020002] 
// Parameters infos:

void AR_DebugCameraController::DisableDebugCamera ( )
{
	static UFunction* pFnDisableDebugCamera = NULL;

	if ( ! pFnDisableDebugCamera )
		pFnDisableDebugCamera = (UFunction*) UObject::GObjObjects()->Data[ 78953 ];

	AR_DebugCameraController_execDisableDebugCamera_Parms DisableDebugCamera_Parms;

	this->ProcessEvent ( pFnDisableDebugCamera, &DisableDebugCamera_Parms, NULL );
};

// Function RavagedGame.R_DebugCameraController.NativeInputKey
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  Event                          ( CPF_Parm )
// float                          AmountDepressed                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool AR_DebugCameraController::NativeInputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnNativeInputKey = NULL;

	if ( ! pFnNativeInputKey )
		pFnNativeInputKey = (UFunction*) UObject::GObjObjects()->Data[ 78945 ];

	AR_DebugCameraController_execNativeInputKey_Parms NativeInputKey_Parms;
	NativeInputKey_Parms.ControllerId = ControllerId;
	memcpy ( &NativeInputKey_Parms.Key, &Key, 0x8 );
	NativeInputKey_Parms.Event = Event;
	NativeInputKey_Parms.AmountDepressed = AmountDepressed;
	NativeInputKey_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnNativeInputKey, &NativeInputKey_Parms, NULL );

	return NativeInputKey_Parms.ReturnValue;
};

// Function RavagedGame.R_DebugCameraController.ClientHearSound
// [0x01024942] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// struct FVector                 SourceLocation                 ( CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_Parm )
// unsigned long                  bIsOccluded                    ( CPF_OptionalParm | CPF_Parm )

void AR_DebugCameraController::eventClientHearSound ( class USoundCue* ASound, class AActor* SourceActor, struct FVector SourceLocation, unsigned long bStopWhenOwnerDestroyed, unsigned long bIsOccluded )
{
	static UFunction* pFnClientHearSound = NULL;

	if ( ! pFnClientHearSound )
		pFnClientHearSound = (UFunction*) UObject::GObjObjects()->Data[ 78938 ];

	AR_DebugCameraController_eventClientHearSound_Parms ClientHearSound_Parms;
	ClientHearSound_Parms.ASound = ASound;
	ClientHearSound_Parms.SourceActor = SourceActor;
	memcpy ( &ClientHearSound_Parms.SourceLocation, &SourceLocation, 0xC );
	ClientHearSound_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	ClientHearSound_Parms.bIsOccluded = bIsOccluded;

	this->ProcessEvent ( pFnClientHearSound, &ClientHearSound_Parms, NULL );
};

// Function RavagedGame.R_DebugCameraController.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_DebugCameraController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 78936 ];

	AR_DebugCameraController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_DataStore_GameSettings.InitMapList
// [0x00020002] 
// Parameters infos:
// TArray< struct FString >       Maps                           ( CPF_Parm | CPF_NeedCtorLink )

void UR_DataStore_GameSettings::InitMapList ( TArray< struct FString > Maps )
{
	static UFunction* pFnInitMapList = NULL;

	if ( ! pFnInitMapList )
		pFnInitMapList = (UFunction*) UObject::GObjObjects()->Data[ 78927 ];

	UR_DataStore_GameSettings_execInitMapList_Parms InitMapList_Parms;
	memcpy ( &InitMapList_Parms.Maps, &Maps, 0xC );

	this->ProcessEvent ( pFnInitMapList, &InitMapList_Parms, NULL );
};

// Function RavagedGame.R_MapList.GetMapList
// [0x00024002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  annotated                      ( CPF_OptionalParm | CPF_Parm )

struct FString UR_MapList::GetMapList ( unsigned long annotated )
{
	static UFunction* pFnGetMapList = NULL;

	if ( ! pFnGetMapList )
		pFnGetMapList = (UFunction*) UObject::GObjObjects()->Data[ 80251 ];

	UR_MapList_execGetMapList_Parms GetMapList_Parms;
	GetMapList_Parms.annotated = annotated;

	this->ProcessEvent ( pFnGetMapList, &GetMapList_Parms, NULL );

	return GetMapList_Parms.ReturnValue;
};

// Function RavagedGame.R_MapList.MoveMap
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Position                       ( CPF_Parm )
// unsigned long                  Up                             ( CPF_Parm )

bool UR_MapList::MoveMap ( int Position, unsigned long Up )
{
	static UFunction* pFnMoveMap = NULL;

	if ( ! pFnMoveMap )
		pFnMoveMap = (UFunction*) UObject::GObjObjects()->Data[ 80269 ];

	UR_MapList_execMoveMap_Parms MoveMap_Parms;
	MoveMap_Parms.Position = Position;
	MoveMap_Parms.Up = Up;

	this->ProcessEvent ( pFnMoveMap, &MoveMap_Parms, NULL );

	return MoveMap_Parms.ReturnValue;
};

// Function RavagedGame.R_MapList.RemoveMap
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Position                       ( CPF_Parm )

bool UR_MapList::RemoveMap ( int Position )
{
	static UFunction* pFnRemoveMap = NULL;

	if ( ! pFnRemoveMap )
		pFnRemoveMap = (UFunction*) UObject::GObjObjects()->Data[ 80264 ];

	UR_MapList_execRemoveMap_Parms RemoveMap_Parms;
	RemoveMap_Parms.Position = Position;

	this->ProcessEvent ( pFnRemoveMap, &RemoveMap_Parms, NULL );

	return RemoveMap_Parms.ReturnValue;
};

// Function RavagedGame.R_MapList.AddMap
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Map                            ( CPF_Parm | CPF_NeedCtorLink )

bool UR_MapList::AddMap ( struct FString Map )
{
	static UFunction* pFnAddMap = NULL;

	if ( ! pFnAddMap )
		pFnAddMap = (UFunction*) UObject::GObjObjects()->Data[ 80257 ];

	UR_MapList_execAddMap_Parms AddMap_Parms;
	memcpy ( &AddMap_Parms.Map, &Map, 0xC );

	this->ProcessEvent ( pFnAddMap, &AddMap_Parms, NULL );

	return AddMap_Parms.ReturnValue;
};

// Function RavagedGame.R_MapList.InsertMap
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Map                            ( CPF_Parm | CPF_NeedCtorLink )
// int                            Position                       ( CPF_Parm )

bool UR_MapList::InsertMap ( struct FString Map, int Position )
{
	static UFunction* pFnInsertMap = NULL;

	if ( ! pFnInsertMap )
		pFnInsertMap = (UFunction*) UObject::GObjObjects()->Data[ 80259 ];

	UR_MapList_execInsertMap_Parms InsertMap_Parms;
	memcpy ( &InsertMap_Parms.Map, &Map, 0xC );
	InsertMap_Parms.Position = Position;

	this->ProcessEvent ( pFnInsertMap, &InsertMap_Parms, NULL );

	return InsertMap_Parms.ReturnValue;
};

// Function RavagedGame.R_MapList.NextMap
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UR_MapList::NextMap ( )
{
	static UFunction* pFnNextMap = NULL;

	if ( ! pFnNextMap )
		pFnNextMap = (UFunction*) UObject::GObjObjects()->Data[ 80207 ];

	UR_MapList_execNextMap_Parms NextMap_Parms;

	this->ProcessEvent ( pFnNextMap, &NextMap_Parms, NULL );

	return NextMap_Parms.ReturnValue;
};

// Function RavagedGame.R_MapList.IsMapIsValid
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Map                            ( CPF_Parm | CPF_NeedCtorLink )

bool UR_MapList::IsMapIsValid ( struct FString Map )
{
	static UFunction* pFnIsMapIsValid = NULL;

	if ( ! pFnIsMapIsValid )
		pFnIsMapIsValid = (UFunction*) UObject::GObjObjects()->Data[ 84637 ];

	UR_MapList_execIsMapIsValid_Parms IsMapIsValid_Parms;
	memcpy ( &IsMapIsValid_Parms.Map, &Map, 0xC );

	this->ProcessEvent ( pFnIsMapIsValid, &IsMapIsValid_Parms, NULL );

	return IsMapIsValid_Parms.ReturnValue;
};

// Function RavagedGame.R_MapList.GetCurrentMap
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UR_MapList::GetCurrentMap ( )
{
	static UFunction* pFnGetCurrentMap = NULL;

	if ( ! pFnGetCurrentMap )
		pFnGetCurrentMap = (UFunction*) UObject::GObjObjects()->Data[ 84635 ];

	UR_MapList_execGetCurrentMap_Parms GetCurrentMap_Parms;

	this->ProcessEvent ( pFnGetCurrentMap, &GetCurrentMap_Parms, NULL );

	return GetCurrentMap_Parms.ReturnValue;
};

// Function RavagedGame.R_MapList.InitializeMapList
// [0x00020002] 
// Parameters infos:
// TArray< struct FString >       MapList                        ( CPF_Parm | CPF_NeedCtorLink )

void UR_MapList::InitializeMapList ( TArray< struct FString > MapList )
{
	static UFunction* pFnInitializeMapList = NULL;

	if ( ! pFnInitializeMapList )
		pFnInitializeMapList = (UFunction*) UObject::GObjObjects()->Data[ 84631 ];

	UR_MapList_execInitializeMapList_Parms InitializeMapList_Parms;
	memcpy ( &InitializeMapList_Parms.MapList, &MapList, 0xC );

	this->ProcessEvent ( pFnInitializeMapList, &InitializeMapList_Parms, NULL );
};

// Function RavagedGame.R_MapList.CopyMapList
// [0x00020002] 
// Parameters infos:
// class UR_MapList*              Other                          ( CPF_Parm )

void UR_MapList::CopyMapList ( class UR_MapList* Other )
{
	static UFunction* pFnCopyMapList = NULL;

	if ( ! pFnCopyMapList )
		pFnCopyMapList = (UFunction*) UObject::GObjObjects()->Data[ 84629 ];

	UR_MapList_execCopyMapList_Parms CopyMapList_Parms;
	CopyMapList_Parms.Other = Other;

	this->ProcessEvent ( pFnCopyMapList, &CopyMapList_Parms, NULL );
};

// Function RavagedGame.R_DebugCameraHUD.DrawInsetText
// [0x00020002] 
// Parameters infos:
// class UCanvas*                 canv                           ( CPF_Parm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// struct FString                 MyText                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FColor                  DrawColor                      ( CPF_Parm )

void AR_DebugCameraHUD::DrawInsetText ( class UCanvas* canv, float X, float Y, struct FString MyText, struct FColor DrawColor )
{
	static UFunction* pFnDrawInsetText = NULL;

	if ( ! pFnDrawInsetText )
		pFnDrawInsetText = (UFunction*) UObject::GObjObjects()->Data[ 79018 ];

	AR_DebugCameraHUD_execDrawInsetText_Parms DrawInsetText_Parms;
	DrawInsetText_Parms.canv = canv;
	DrawInsetText_Parms.X = X;
	DrawInsetText_Parms.Y = Y;
	memcpy ( &DrawInsetText_Parms.MyText, &MyText, 0xC );
	memcpy ( &DrawInsetText_Parms.DrawColor, &DrawColor, 0x4 );

	this->ProcessEvent ( pFnDrawInsetText, &DrawInsetText_Parms, NULL );
};

// Function RavagedGame.R_DebugCameraHUD.DisplayActorMaterials
// [0x00C20002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          X                              ( CPF_Parm )
// float                          DY                             ( CPF_Parm )
// class UMeshComponent*          MeshComp                       ( CPF_Parm | CPF_EditInline )
// float                          Y                              ( CPF_Parm | CPF_OutParm )

bool AR_DebugCameraHUD::DisplayActorMaterials ( float X, float DY, class UMeshComponent* MeshComp, float* Y )
{
	static UFunction* pFnDisplayActorMaterials = NULL;

	if ( ! pFnDisplayActorMaterials )
		pFnDisplayActorMaterials = (UFunction*) UObject::GObjObjects()->Data[ 79007 ];

	AR_DebugCameraHUD_execDisplayActorMaterials_Parms DisplayActorMaterials_Parms;
	DisplayActorMaterials_Parms.X = X;
	DisplayActorMaterials_Parms.DY = DY;
	DisplayActorMaterials_Parms.MeshComp = MeshComp;

	this->ProcessEvent ( pFnDisplayActorMaterials, &DisplayActorMaterials_Parms, NULL );

	if ( Y )
		*Y = DisplayActorMaterials_Parms.Y;

	return DisplayActorMaterials_Parms.ReturnValue;
};

// Function RavagedGame.R_DebugCameraHUD.PostRender
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void AR_DebugCameraHUD::eventPostRender ( )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = (UFunction*) UObject::GObjObjects()->Data[ 78989 ];

	AR_DebugCameraHUD_eventPostRender_Parms PostRender_Parms;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput.StopKnife
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput::StopKnife ( )
{
	static UFunction* pFnStopKnife = NULL;

	if ( ! pFnStopKnife )
		pFnStopKnife = (UFunction*) UObject::GObjObjects()->Data[ 86312 ];

	UR_PlayerInput_execStopKnife_Parms StopKnife_Parms;

	this->ProcessEvent ( pFnStopKnife, &StopKnife_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput.StartKnife
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput::StartKnife ( )
{
	static UFunction* pFnStartKnife = NULL;

	if ( ! pFnStartKnife )
		pFnStartKnife = (UFunction*) UObject::GObjObjects()->Data[ 86307 ];

	UR_PlayerInput_execStartKnife_Parms StartKnife_Parms;

	this->ProcessEvent ( pFnStartKnife, &StartKnife_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput.StopThrowWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput::StopThrowWeapon ( )
{
	static UFunction* pFnStopThrowWeapon = NULL;

	if ( ! pFnStopThrowWeapon )
		pFnStopThrowWeapon = (UFunction*) UObject::GObjObjects()->Data[ 86306 ];

	UR_PlayerInput_execStopThrowWeapon_Parms StopThrowWeapon_Parms;

	this->ProcessEvent ( pFnStopThrowWeapon, &StopThrowWeapon_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput.StartThrowWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput::StartThrowWeapon ( )
{
	static UFunction* pFnStartThrowWeapon = NULL;

	if ( ! pFnStartThrowWeapon )
		pFnStartThrowWeapon = (UFunction*) UObject::GObjObjects()->Data[ 86301 ];

	UR_PlayerInput_execStartThrowWeapon_Parms StartThrowWeapon_Parms;

	this->ProcessEvent ( pFnStartThrowWeapon, &StartThrowWeapon_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput.UnDuck
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput::UnDuck ( )
{
	static UFunction* pFnUnDuck = NULL;

	if ( ! pFnUnDuck )
		pFnUnDuck = (UFunction*) UObject::GObjObjects()->Data[ 86300 ];

	UR_PlayerInput_execUnDuck_Parms UnDuck_Parms;

	this->ProcessEvent ( pFnUnDuck, &UnDuck_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput.Duck
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput::Duck ( )
{
	static UFunction* pFnDuck = NULL;

	if ( ! pFnDuck )
		pFnDuck = (UFunction*) UObject::GObjObjects()->Data[ 86299 ];

	UR_PlayerInput_execDuck_Parms Duck_Parms;

	this->ProcessEvent ( pFnDuck, &Duck_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput.UnSprint
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput::UnSprint ( )
{
	static UFunction* pFnUnSprint = NULL;

	if ( ! pFnUnSprint )
		pFnUnSprint = (UFunction*) UObject::GObjObjects()->Data[ 86298 ];

	UR_PlayerInput_execUnSprint_Parms UnSprint_Parms;

	this->ProcessEvent ( pFnUnSprint, &UnSprint_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput.Sprint
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput::Sprint ( )
{
	static UFunction* pFnSprint = NULL;

	if ( ! pFnSprint )
		pFnSprint = (UFunction*) UObject::GObjObjects()->Data[ 86297 ];

	UR_PlayerInput_execSprint_Parms Sprint_Parms;

	this->ProcessEvent ( pFnSprint, &Sprint_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput.TogglePerspective
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput::TogglePerspective ( )
{
	static UFunction* pFnTogglePerspective = NULL;

	if ( ! pFnTogglePerspective )
		pFnTogglePerspective = (UFunction*) UObject::GObjObjects()->Data[ 86294 ];

	UR_PlayerInput_execTogglePerspective_Parms TogglePerspective_Parms;

	this->ProcessEvent ( pFnTogglePerspective, &TogglePerspective_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput.ClassMenu
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput::ClassMenu ( )
{
	static UFunction* pFnClassMenu = NULL;

	if ( ! pFnClassMenu )
		pFnClassMenu = (UFunction*) UObject::GObjObjects()->Data[ 86293 ];

	UR_PlayerInput_execClassMenu_Parms ClassMenu_Parms;

	this->ProcessEvent ( pFnClassMenu, &ClassMenu_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput.Taunt
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput::Taunt ( )
{
	static UFunction* pFnTaunt = NULL;

	if ( ! pFnTaunt )
		pFnTaunt = (UFunction*) UObject::GObjObjects()->Data[ 86292 ];

	UR_PlayerInput_execTaunt_Parms Taunt_Parms;

	this->ProcessEvent ( pFnTaunt, &Taunt_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput.reload
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput::reload ( )
{
	static UFunction* pFnreload = NULL;

	if ( ! pFnreload )
		pFnreload = (UFunction*) UObject::GObjObjects()->Data[ 86290 ];

	UR_PlayerInput_execreload_Parms reload_Parms;

	this->ProcessEvent ( pFnreload, &reload_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput.CheckMouseInverts
// [0x00020002] 
// Parameters infos:

void UR_PlayerInput::CheckMouseInverts ( )
{
	static UFunction* pFnCheckMouseInverts = NULL;

	if ( ! pFnCheckMouseInverts )
		pFnCheckMouseInverts = (UFunction*) UObject::GObjObjects()->Data[ 86289 ];

	UR_PlayerInput_execCheckMouseInverts_Parms CheckMouseInverts_Parms;

	this->ProcessEvent ( pFnCheckMouseInverts, &CheckMouseInverts_Parms, NULL );
};

// Function RavagedGame.R_DmgType.CheckKillAchievement
// [0x00022000] 
// Parameters infos:
// class AUTPlayerReplicationInfo* KillerPRI                      ( CPF_Parm )
// int                            KillCount                      ( CPF_Parm )
// unsigned long                  bEnemyKill                     ( CPF_Parm )

void UR_DmgType::CheckKillAchievement ( class AUTPlayerReplicationInfo* KillerPRI, int KillCount, unsigned long bEnemyKill )
{
	static UFunction* pFnCheckKillAchievement = NULL;

	if ( ! pFnCheckKillAchievement )
		pFnCheckKillAchievement = (UFunction*) UObject::GObjObjects()->Data[ 79156 ];

	UR_DmgType_execCheckKillAchievement_Parms CheckKillAchievement_Parms;
	CheckKillAchievement_Parms.KillerPRI = KillerPRI;
	CheckKillAchievement_Parms.KillCount = KillCount;
	CheckKillAchievement_Parms.bEnemyKill = bEnemyKill;

	this->ProcessEvent ( pFnCheckKillAchievement, &CheckKillAchievement_Parms, NULL );
};

// Function RavagedGame.R_DmgType.R_IncrementKills
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AUTPlayerReplicationInfo* KillerPRI                      ( CPF_Parm )
// unsigned long                  bEnemyKill                     ( CPF_Parm )

int UR_DmgType::R_IncrementKills ( class AUTPlayerReplicationInfo* KillerPRI, unsigned long bEnemyKill )
{
	static UFunction* pFnR_IncrementKills = NULL;

	if ( ! pFnR_IncrementKills )
		pFnR_IncrementKills = (UFunction*) UObject::GObjObjects()->Data[ 79151 ];

	UR_DmgType_execR_IncrementKills_Parms R_IncrementKills_Parms;
	R_IncrementKills_Parms.KillerPRI = KillerPRI;
	R_IncrementKills_Parms.bEnemyKill = bEnemyKill;

	this->ProcessEvent ( pFnR_IncrementKills, &R_IncrementKills_Parms, NULL );

	return R_IncrementKills_Parms.ReturnValue;
};

// Function RavagedGame.R_DmgType.R_ScoreKill
// [0x00022002] 
// Parameters infos:
// class AUTPlayerReplicationInfo* KillerPRI                      ( CPF_Parm )
// class AUTPlayerReplicationInfo* KilledPRI                      ( CPF_Parm )
// class APawn*                   KilledPawn                     ( CPF_Parm )
// unsigned long                  bEnemyKill                     ( CPF_Parm )

void UR_DmgType::R_ScoreKill ( class AUTPlayerReplicationInfo* KillerPRI, class AUTPlayerReplicationInfo* KilledPRI, class APawn* KilledPawn, unsigned long bEnemyKill )
{
	static UFunction* pFnR_ScoreKill = NULL;

	if ( ! pFnR_ScoreKill )
		pFnR_ScoreKill = (UFunction*) UObject::GObjObjects()->Data[ 79146 ];

	UR_DmgType_execR_ScoreKill_Parms R_ScoreKill_Parms;
	R_ScoreKill_Parms.KillerPRI = KillerPRI;
	R_ScoreKill_Parms.KilledPRI = KilledPRI;
	R_ScoreKill_Parms.KilledPawn = KilledPawn;
	R_ScoreKill_Parms.bEnemyKill = bEnemyKill;

	this->ProcessEvent ( pFnR_ScoreKill, &R_ScoreKill_Parms, NULL );
};

// Function RavagedGame.R_DmgType.VehicleDamageScalingFor
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AVehicle*                V                              ( CPF_Parm )

float UR_DmgType::VehicleDamageScalingFor ( class AVehicle* V )
{
	static UFunction* pFnVehicleDamageScalingFor = NULL;

	if ( ! pFnVehicleDamageScalingFor )
		pFnVehicleDamageScalingFor = (UFunction*) UObject::GObjObjects()->Data[ 79140 ];

	UR_DmgType_execVehicleDamageScalingFor_Parms VehicleDamageScalingFor_Parms;
	VehicleDamageScalingFor_Parms.V = V;

	this->ProcessEvent ( pFnVehicleDamageScalingFor, &VehicleDamageScalingFor_Parms, NULL );

	return VehicleDamageScalingFor_Parms.ReturnValue;
};

// Function RavagedGame.R_VehicleWeapon.ShakeView
// [0x00020102] 
// Parameters infos:

void AR_VehicleWeapon::ShakeView ( )
{
	static UFunction* pFnShakeView = NULL;

	if ( ! pFnShakeView )
		pFnShakeView = (UFunction*) UObject::GObjObjects()->Data[ 88011 ];

	AR_VehicleWeapon_execShakeView_Parms ShakeView_Parms;

	this->ProcessEvent ( pFnShakeView, &ShakeView_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.ProjectileFire
// [0x00020102] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* AR_VehicleWeapon::ProjectileFire ( )
{
	static UFunction* pFnProjectileFire = NULL;

	if ( ! pFnProjectileFire )
		pFnProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 88008 ];

	AR_VehicleWeapon_execProjectileFire_Parms ProjectileFire_Parms;

	this->ProcessEvent ( pFnProjectileFire, &ProjectileFire_Parms, NULL );

	return ProjectileFire_Parms.ReturnValue;
};

// Function RavagedGame.R_VehicleWeapon.RActor_HurtRadius
// [0x00824102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// class AActor*                  IgnoredActor                   ( CPF_OptionalParm | CPF_Parm )
// class AController*             InstigatedByController         ( CPF_OptionalParm | CPF_Parm )

bool AR_VehicleWeapon::RActor_HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController )
{
	static UFunction* pFnRActor_HurtRadius = NULL;

	if ( ! pFnRActor_HurtRadius )
		pFnRActor_HurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 87994 ];

	AR_VehicleWeapon_execRActor_HurtRadius_Parms RActor_HurtRadius_Parms;
	RActor_HurtRadius_Parms.BaseDamage = BaseDamage;
	RActor_HurtRadius_Parms.DamageRadius = DamageRadius;
	RActor_HurtRadius_Parms.DamageType = DamageType;
	RActor_HurtRadius_Parms.Momentum = Momentum;
	memcpy ( &RActor_HurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	RActor_HurtRadius_Parms.IgnoredActor = IgnoredActor;
	RActor_HurtRadius_Parms.InstigatedByController = InstigatedByController;

	this->ProcessEvent ( pFnRActor_HurtRadius, &RActor_HurtRadius_Parms, NULL );

	return RActor_HurtRadius_Parms.ReturnValue;
};

// Function RavagedGame.R_VehicleWeapon.InstantHitSplashHurtRadius
// [0x00824102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// class AActor*                  ImpactedActor                  ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AController*             InstigatedByController         ( CPF_OptionalParm | CPF_Parm )

void AR_VehicleWeapon::InstantHitSplashHurtRadius ( unsigned char FiringMode, class AActor* ImpactedActor, struct FVector HurtOrigin, struct FVector HitNormal, class AController* InstigatedByController )
{
	static UFunction* pFnInstantHitSplashHurtRadius = NULL;

	if ( ! pFnInstantHitSplashHurtRadius )
		pFnInstantHitSplashHurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 87982 ];

	AR_VehicleWeapon_execInstantHitSplashHurtRadius_Parms InstantHitSplashHurtRadius_Parms;
	InstantHitSplashHurtRadius_Parms.FiringMode = FiringMode;
	InstantHitSplashHurtRadius_Parms.ImpactedActor = ImpactedActor;
	memcpy ( &InstantHitSplashHurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	memcpy ( &InstantHitSplashHurtRadius_Parms.HitNormal, &HitNormal, 0xC );
	InstantHitSplashHurtRadius_Parms.InstigatedByController = InstigatedByController;

	this->ProcessEvent ( pFnInstantHitSplashHurtRadius, &InstantHitSplashHurtRadius_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.ProcessInstantHit
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void AR_VehicleWeapon::ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 87978 ];

	AR_VehicleWeapon_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x50 );
	ProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.InstantFire
// [0x00020102] 
// Parameters infos:

void AR_VehicleWeapon::InstantFire ( )
{
	static UFunction* pFnInstantFire = NULL;

	if ( ! pFnInstantFire )
		pFnInstantFire = (UFunction*) UObject::GObjObjects()->Data[ 87974 ];

	AR_VehicleWeapon_execInstantFire_Parms InstantFire_Parms;

	this->ProcessEvent ( pFnInstantFire, &InstantFire_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.UT_ProcessInstantHit
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void AR_VehicleWeapon::UT_ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits )
{
	static UFunction* pFnUT_ProcessInstantHit = NULL;

	if ( ! pFnUT_ProcessInstantHit )
		pFnUT_ProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 87966 ];

	AR_VehicleWeapon_execUT_ProcessInstantHit_Parms UT_ProcessInstantHit_Parms;
	UT_ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &UT_ProcessInstantHit_Parms.Impact, &Impact, 0x50 );
	UT_ProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnUT_ProcessInstantHit, &UT_ProcessInstantHit_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.GetMagCount2
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AR_VehicleWeapon::GetMagCount2 ( )
{
	static UFunction* pFnGetMagCount2 = NULL;

	if ( ! pFnGetMagCount2 )
		pFnGetMagCount2 = (UFunction*) UObject::GObjObjects()->Data[ 83227 ];

	AR_VehicleWeapon_execGetMagCount2_Parms GetMagCount2_Parms;

	this->ProcessEvent ( pFnGetMagCount2, &GetMagCount2_Parms, NULL );

	return GetMagCount2_Parms.ReturnValue;
};

// Function RavagedGame.R_VehicleWeapon.GetMagCount
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AR_VehicleWeapon::GetMagCount ( )
{
	static UFunction* pFnGetMagCount = NULL;

	if ( ! pFnGetMagCount )
		pFnGetMagCount = (UFunction*) UObject::GObjObjects()->Data[ 83225 ];

	AR_VehicleWeapon_execGetMagCount_Parms GetMagCount_Parms;

	this->ProcessEvent ( pFnGetMagCount, &GetMagCount_Parms, NULL );

	return GetMagCount_Parms.ReturnValue;
};

// Function RavagedGame.R_VehicleWeapon.GetAmmoCountMag
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AR_VehicleWeapon::GetAmmoCountMag ( )
{
	static UFunction* pFnGetAmmoCountMag = NULL;

	if ( ! pFnGetAmmoCountMag )
		pFnGetAmmoCountMag = (UFunction*) UObject::GObjObjects()->Data[ 87964 ];

	AR_VehicleWeapon_execGetAmmoCountMag_Parms GetAmmoCountMag_Parms;

	this->ProcessEvent ( pFnGetAmmoCountMag, &GetAmmoCountMag_Parms, NULL );

	return GetAmmoCountMag_Parms.ReturnValue;
};

// Function RavagedGame.R_VehicleWeapon.StartZoom
// [0x00020102] 
// Parameters infos:
// class AUTPlayerController*     PC                             ( CPF_Parm )

void AR_VehicleWeapon::StartZoom ( class AUTPlayerController* PC )
{
	static UFunction* pFnStartZoom = NULL;

	if ( ! pFnStartZoom )
		pFnStartZoom = (UFunction*) UObject::GObjObjects()->Data[ 87962 ];

	AR_VehicleWeapon_execStartZoom_Parms StartZoom_Parms;
	StartZoom_Parms.PC = PC;

	this->ProcessEvent ( pFnStartZoom, &StartZoom_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.ServerSetZoom
// [0x002200C2] 
// Parameters infos:
// unsigned long                  bNowZoomed                     ( CPF_Parm )

void AR_VehicleWeapon::ServerSetZoom ( unsigned long bNowZoomed )
{
	static UFunction* pFnServerSetZoom = NULL;

	if ( ! pFnServerSetZoom )
		pFnServerSetZoom = (UFunction*) UObject::GObjObjects()->Data[ 87960 ];

	AR_VehicleWeapon_execServerSetZoom_Parms ServerSetZoom_Parms;
	ServerSetZoom_Parms.bNowZoomed = bNowZoomed;

	this->ProcessEvent ( pFnServerSetZoom, &ServerSetZoom_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.DrawWeaponCrosshair
// [0x00020102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )

void AR_VehicleWeapon::DrawWeaponCrosshair ( class AHUD* HUD )
{
	static UFunction* pFnDrawWeaponCrosshair = NULL;

	if ( ! pFnDrawWeaponCrosshair )
		pFnDrawWeaponCrosshair = (UFunction*) UObject::GObjObjects()->Data[ 87952 ];

	AR_VehicleWeapon_execDrawWeaponCrosshair_Parms DrawWeaponCrosshair_Parms;
	DrawWeaponCrosshair_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDrawWeaponCrosshair, &DrawWeaponCrosshair_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.DisplayMagDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AR_VehicleWeapon::DisplayMagDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayMagDebug = NULL;

	if ( ! pFnDisplayMagDebug )
		pFnDisplayMagDebug = (UFunction*) UObject::GObjObjects()->Data[ 87945 ];

	AR_VehicleWeapon_execDisplayMagDebug_Parms DisplayMagDebug_Parms;
	DisplayMagDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayMagDebug, &DisplayMagDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayMagDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayMagDebug_Parms.out_YPos;
};

// Function RavagedGame.R_VehicleWeapon.PlayWeaponAnimation
// [0x00024102] 
// Parameters infos:
// struct FName                   Sequence                       ( CPF_Parm )
// float                          fDesiredDuration               ( CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )

void AR_VehicleWeapon::PlayWeaponAnimation ( struct FName Sequence, float fDesiredDuration, unsigned long bLoop, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnPlayWeaponAnimation = NULL;

	if ( ! pFnPlayWeaponAnimation )
		pFnPlayWeaponAnimation = (UFunction*) UObject::GObjObjects()->Data[ 87940 ];

	AR_VehicleWeapon_execPlayWeaponAnimation_Parms PlayWeaponAnimation_Parms;
	memcpy ( &PlayWeaponAnimation_Parms.Sequence, &Sequence, 0x8 );
	PlayWeaponAnimation_Parms.fDesiredDuration = fDesiredDuration;
	PlayWeaponAnimation_Parms.bLoop = bLoop;
	PlayWeaponAnimation_Parms.SkelMesh = SkelMesh;

	this->ProcessEvent ( pFnPlayWeaponAnimation, &PlayWeaponAnimation_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.StopFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_VehicleWeapon::StopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 87938 ];

	AR_VehicleWeapon_execStopFire_Parms StopFire_Parms;
	StopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.StartFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_VehicleWeapon::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 87936 ];

	AR_VehicleWeapon_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.PlayFiringSound
// [0x00020102] 
// Parameters infos:

void AR_VehicleWeapon::PlayFiringSound ( )
{
	static UFunction* pFnPlayFiringSound = NULL;

	if ( ! pFnPlayFiringSound )
		pFnPlayFiringSound = (UFunction*) UObject::GObjObjects()->Data[ 87935 ];

	AR_VehicleWeapon_execPlayFiringSound_Parms PlayFiringSound_Parms;

	this->ProcessEvent ( pFnPlayFiringSound, &PlayFiringSound_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.WindDownComplete
// [0x00020102] 
// Parameters infos:

void AR_VehicleWeapon::WindDownComplete ( )
{
	static UFunction* pFnWindDownComplete = NULL;

	if ( ! pFnWindDownComplete )
		pFnWindDownComplete = (UFunction*) UObject::GObjObjects()->Data[ 87934 ];

	AR_VehicleWeapon_execWindDownComplete_Parms WindDownComplete_Parms;

	this->ProcessEvent ( pFnWindDownComplete, &WindDownComplete_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.WindUpComplete
// [0x00020102] 
// Parameters infos:

void AR_VehicleWeapon::WindUpComplete ( )
{
	static UFunction* pFnWindUpComplete = NULL;

	if ( ! pFnWindUpComplete )
		pFnWindUpComplete = (UFunction*) UObject::GObjObjects()->Data[ 87928 ];

	AR_VehicleWeapon_execWindUpComplete_Parms WindUpComplete_Parms;

	this->ProcessEvent ( pFnWindUpComplete, &WindUpComplete_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.ServerStartWinddown
// [0x002200C2] 
// Parameters infos:

void AR_VehicleWeapon::ServerStartWinddown ( )
{
	static UFunction* pFnServerStartWinddown = NULL;

	if ( ! pFnServerStartWinddown )
		pFnServerStartWinddown = (UFunction*) UObject::GObjObjects()->Data[ 87924 ];

	AR_VehicleWeapon_execServerStartWinddown_Parms ServerStartWinddown_Parms;

	this->ProcessEvent ( pFnServerStartWinddown, &ServerStartWinddown_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.ServerStopFireLooping
// [0x002200C2] 
// Parameters infos:

void AR_VehicleWeapon::ServerStopFireLooping ( )
{
	static UFunction* pFnServerStopFireLooping = NULL;

	if ( ! pFnServerStopFireLooping )
		pFnServerStopFireLooping = (UFunction*) UObject::GObjObjects()->Data[ 87923 ];

	AR_VehicleWeapon_execServerStopFireLooping_Parms ServerStopFireLooping_Parms;

	this->ProcessEvent ( pFnServerStopFireLooping, &ServerStopFireLooping_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.ServerStartFireLooping
// [0x002200C2] 
// Parameters infos:

void AR_VehicleWeapon::ServerStartFireLooping ( )
{
	static UFunction* pFnServerStartFireLooping = NULL;

	if ( ! pFnServerStartFireLooping )
		pFnServerStartFireLooping = (UFunction*) UObject::GObjObjects()->Data[ 87922 ];

	AR_VehicleWeapon_execServerStartFireLooping_Parms ServerStartFireLooping_Parms;

	this->ProcessEvent ( pFnServerStartFireLooping, &ServerStartFireLooping_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.ServerStartWindup
// [0x002200C2] 
// Parameters infos:

void AR_VehicleWeapon::ServerStartWindup ( )
{
	static UFunction* pFnServerStartWindup = NULL;

	if ( ! pFnServerStartWindup )
		pFnServerStartWindup = (UFunction*) UObject::GObjObjects()->Data[ 87921 ];

	AR_VehicleWeapon_execServerStartWindup_Parms ServerStartWindup_Parms;

	this->ProcessEvent ( pFnServerStartWindup, &ServerStartWindup_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.IsReloading
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool AR_VehicleWeapon::IsReloading ( unsigned char FireModeNum )
{
	static UFunction* pFnIsReloading = NULL;

	if ( ! pFnIsReloading )
		pFnIsReloading = (UFunction*) UObject::GObjObjects()->Data[ 87915 ];

	AR_VehicleWeapon_execIsReloading_Parms IsReloading_Parms;
	IsReloading_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnIsReloading, &IsReloading_Parms, NULL );

	return IsReloading_Parms.ReturnValue;
};

// Function RavagedGame.R_VehicleWeapon.IsMagazineLow
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool AR_VehicleWeapon::IsMagazineLow ( unsigned char FireModeNum )
{
	static UFunction* pFnIsMagazineLow = NULL;

	if ( ! pFnIsMagazineLow )
		pFnIsMagazineLow = (UFunction*) UObject::GObjObjects()->Data[ 87912 ];

	AR_VehicleWeapon_execIsMagazineLow_Parms IsMagazineLow_Parms;
	IsMagazineLow_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnIsMagazineLow, &IsMagazineLow_Parms, NULL );

	return IsMagazineLow_Parms.ReturnValue;
};

// Function RavagedGame.R_VehicleWeapon.IsMagazineEmpty
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool AR_VehicleWeapon::IsMagazineEmpty ( unsigned char FireModeNum )
{
	static UFunction* pFnIsMagazineEmpty = NULL;

	if ( ! pFnIsMagazineEmpty )
		pFnIsMagazineEmpty = (UFunction*) UObject::GObjObjects()->Data[ 87909 ];

	AR_VehicleWeapon_execIsMagazineEmpty_Parms IsMagazineEmpty_Parms;
	IsMagazineEmpty_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnIsMagazineEmpty, &IsMagazineEmpty_Parms, NULL );

	return IsMagazineEmpty_Parms.ReturnValue;
};

// Function RavagedGame.R_VehicleWeapon.ReloadMag1
// [0x010201C2] 
// Parameters infos:

void AR_VehicleWeapon::ReloadMag1 ( )
{
	static UFunction* pFnReloadMag1 = NULL;

	if ( ! pFnReloadMag1 )
		pFnReloadMag1 = (UFunction*) UObject::GObjObjects()->Data[ 87908 ];

	AR_VehicleWeapon_execReloadMag1_Parms ReloadMag1_Parms;

	this->ProcessEvent ( pFnReloadMag1, &ReloadMag1_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.ReloadMag0
// [0x010201C2] 
// Parameters infos:

void AR_VehicleWeapon::ReloadMag0 ( )
{
	static UFunction* pFnReloadMag0 = NULL;

	if ( ! pFnReloadMag0 )
		pFnReloadMag0 = (UFunction*) UObject::GObjObjects()->Data[ 87907 ];

	AR_VehicleWeapon_execReloadMag0_Parms ReloadMag0_Parms;

	this->ProcessEvent ( pFnReloadMag0, &ReloadMag0_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.AddMagAmmo
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// int                            Amount                         ( CPF_Parm )

int AR_VehicleWeapon::AddMagAmmo ( unsigned char FireModeNum, int Amount )
{
	static UFunction* pFnAddMagAmmo = NULL;

	if ( ! pFnAddMagAmmo )
		pFnAddMagAmmo = (UFunction*) UObject::GObjObjects()->Data[ 87903 ];

	AR_VehicleWeapon_execAddMagAmmo_Parms AddMagAmmo_Parms;
	AddMagAmmo_Parms.FireModeNum = FireModeNum;
	AddMagAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddMagAmmo, &AddMagAmmo_Parms, NULL );

	return AddMagAmmo_Parms.ReturnValue;
};

// Function RavagedGame.R_VehicleWeapon.ConsumeAmmo
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_VehicleWeapon::ConsumeAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 87901 ];

	AR_VehicleWeapon_execConsumeAmmo_Parms ConsumeAmmo_Parms;
	ConsumeAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.AddVehicleWeapAmmo
// [0x00020002] 
// Parameters infos:
// int                            Amount                         ( CPF_Parm )

void AR_VehicleWeapon::AddVehicleWeapAmmo ( int Amount )
{
	static UFunction* pFnAddVehicleWeapAmmo = NULL;

	if ( ! pFnAddVehicleWeapAmmo )
		pFnAddVehicleWeapAmmo = (UFunction*) UObject::GObjObjects()->Data[ 87899 ];

	AR_VehicleWeapon_execAddVehicleWeapAmmo_Parms AddVehicleWeapAmmo_Parms;
	AddVehicleWeapAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddVehicleWeapAmmo, &AddVehicleWeapAmmo_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AR_VehicleWeapon::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 87898 ];

	AR_VehicleWeapon_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.HasAnyAmmoForMag
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool AR_VehicleWeapon::HasAnyAmmoForMag ( unsigned char FireModeNum )
{
	static UFunction* pFnHasAnyAmmoForMag = NULL;

	if ( ! pFnHasAnyAmmoForMag )
		pFnHasAnyAmmoForMag = (UFunction*) UObject::GObjObjects()->Data[ 87895 ];

	AR_VehicleWeapon_execHasAnyAmmoForMag_Parms HasAnyAmmoForMag_Parms;
	HasAnyAmmoForMag_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnHasAnyAmmoForMag, &HasAnyAmmoForMag_Parms, NULL );

	return HasAnyAmmoForMag_Parms.ReturnValue;
};

// Function RavagedGame.R_VehicleWeapon.HasAmmo
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// int                            Amount                         ( CPF_OptionalParm | CPF_Parm )

bool AR_VehicleWeapon::HasAmmo ( unsigned char FireModeNum, int Amount )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = (UFunction*) UObject::GObjObjects()->Data[ 87891 ];

	AR_VehicleWeapon_execHasAmmo_Parms HasAmmo_Parms;
	HasAmmo_Parms.FireModeNum = FireModeNum;
	HasAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );

	return HasAmmo_Parms.ReturnValue;
};

// Function RavagedGame.R_VehicleWeapon.ServerEndReload
// [0x002200C2] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_VehicleWeapon::ServerEndReload ( unsigned char FireModeNum )
{
	static UFunction* pFnServerEndReload = NULL;

	if ( ! pFnServerEndReload )
		pFnServerEndReload = (UFunction*) UObject::GObjObjects()->Data[ 87889 ];

	AR_VehicleWeapon_execServerEndReload_Parms ServerEndReload_Parms;
	ServerEndReload_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnServerEndReload, &ServerEndReload_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.EndReload
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_VehicleWeapon::EndReload ( unsigned char FireModeNum )
{
	static UFunction* pFnEndReload = NULL;

	if ( ! pFnEndReload )
		pFnEndReload = (UFunction*) UObject::GObjObjects()->Data[ 87887 ];

	AR_VehicleWeapon_execEndReload_Parms EndReload_Parms;
	EndReload_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnEndReload, &EndReload_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.AbortReload
// [0x00020100] 
// Parameters infos:

void AR_VehicleWeapon::AbortReload ( )
{
	static UFunction* pFnAbortReload = NULL;

	if ( ! pFnAbortReload )
		pFnAbortReload = (UFunction*) UObject::GObjObjects()->Data[ 87886 ];

	AR_VehicleWeapon_execAbortReload_Parms AbortReload_Parms;

	this->ProcessEvent ( pFnAbortReload, &AbortReload_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.WeaponIsReloaded
// [0x00020100] 
// Parameters infos:

void AR_VehicleWeapon::WeaponIsReloaded ( )
{
	static UFunction* pFnWeaponIsReloaded = NULL;

	if ( ! pFnWeaponIsReloaded )
		pFnWeaponIsReloaded = (UFunction*) UObject::GObjObjects()->Data[ 87885 ];

	AR_VehicleWeapon_execWeaponIsReloaded_Parms WeaponIsReloaded_Parms;

	this->ProcessEvent ( pFnWeaponIsReloaded, &WeaponIsReloaded_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.ShouldAutoReload
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool AR_VehicleWeapon::ShouldAutoReload ( unsigned char FireModeNum )
{
	static UFunction* pFnShouldAutoReload = NULL;

	if ( ! pFnShouldAutoReload )
		pFnShouldAutoReload = (UFunction*) UObject::GObjObjects()->Data[ 87882 ];

	AR_VehicleWeapon_execShouldAutoReload_Parms ShouldAutoReload_Parms;
	ShouldAutoReload_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnShouldAutoReload, &ShouldAutoReload_Parms, NULL );

	return ShouldAutoReload_Parms.ReturnValue;
};

// Function RavagedGame.R_VehicleWeapon.MagHasAnyAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool AR_VehicleWeapon::MagHasAnyAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnMagHasAnyAmmo = NULL;

	if ( ! pFnMagHasAnyAmmo )
		pFnMagHasAnyAmmo = (UFunction*) UObject::GObjObjects()->Data[ 87879 ];

	AR_VehicleWeapon_execMagHasAnyAmmo_Parms MagHasAnyAmmo_Parms;
	MagHasAnyAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnMagHasAnyAmmo, &MagHasAnyAmmo_Parms, NULL );

	return MagHasAnyAmmo_Parms.ReturnValue;
};

// Function RavagedGame.R_VehicleWeapon.CanReload
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool AR_VehicleWeapon::CanReload ( unsigned char FireModeNum )
{
	static UFunction* pFnCanReload = NULL;

	if ( ! pFnCanReload )
		pFnCanReload = (UFunction*) UObject::GObjObjects()->Data[ 87876 ];

	AR_VehicleWeapon_execCanReload_Parms CanReload_Parms;
	CanReload_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnCanReload, &CanReload_Parms, NULL );

	return CanReload_Parms.ReturnValue;
};

// Function RavagedGame.R_VehicleWeapon.CalcMagCount
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_VehicleWeapon::CalcMagCount ( unsigned char FireModeNum )
{
	static UFunction* pFnCalcMagCount = NULL;

	if ( ! pFnCalcMagCount )
		pFnCalcMagCount = (UFunction*) UObject::GObjObjects()->Data[ 87874 ];

	AR_VehicleWeapon_execCalcMagCount_Parms CalcMagCount_Parms;
	CalcMagCount_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnCalcMagCount, &CalcMagCount_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.ProcessReload
// [0x002200C2] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_VehicleWeapon::ProcessReload ( unsigned char FireModeNum )
{
	static UFunction* pFnProcessReload = NULL;

	if ( ! pFnProcessReload )
		pFnProcessReload = (UFunction*) UObject::GObjObjects()->Data[ 87872 ];

	AR_VehicleWeapon_execProcessReload_Parms ProcessReload_Parms;
	ProcessReload_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnProcessReload, &ProcessReload_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.StopReload
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_VehicleWeapon::StopReload ( unsigned char FireModeNum )
{
	static UFunction* pFnStopReload = NULL;

	if ( ! pFnStopReload )
		pFnStopReload = (UFunction*) UObject::GObjObjects()->Data[ 87870 ];

	AR_VehicleWeapon_execStopReload_Parms StopReload_Parms;
	StopReload_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopReload, &StopReload_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.EndMag1ReloadTime
// [0x00020102] 
// Parameters infos:

void AR_VehicleWeapon::EndMag1ReloadTime ( )
{
	static UFunction* pFnEndMag1ReloadTime = NULL;

	if ( ! pFnEndMag1ReloadTime )
		pFnEndMag1ReloadTime = (UFunction*) UObject::GObjObjects()->Data[ 87869 ];

	AR_VehicleWeapon_execEndMag1ReloadTime_Parms EndMag1ReloadTime_Parms;

	this->ProcessEvent ( pFnEndMag1ReloadTime, &EndMag1ReloadTime_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.EndMag0ReloadTime
// [0x00020102] 
// Parameters infos:

void AR_VehicleWeapon::EndMag0ReloadTime ( )
{
	static UFunction* pFnEndMag0ReloadTime = NULL;

	if ( ! pFnEndMag0ReloadTime )
		pFnEndMag0ReloadTime = (UFunction*) UObject::GObjObjects()->Data[ 87868 ];

	AR_VehicleWeapon_execEndMag0ReloadTime_Parms EndMag0ReloadTime_Parms;

	this->ProcessEvent ( pFnEndMag0ReloadTime, &EndMag0ReloadTime_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.ServerBeginReload
// [0x002200C2] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_VehicleWeapon::ServerBeginReload ( unsigned char FireModeNum )
{
	static UFunction* pFnServerBeginReload = NULL;

	if ( ! pFnServerBeginReload )
		pFnServerBeginReload = (UFunction*) UObject::GObjObjects()->Data[ 87866 ];

	AR_VehicleWeapon_execServerBeginReload_Parms ServerBeginReload_Parms;
	ServerBeginReload_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnServerBeginReload, &ServerBeginReload_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.BeginReload
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_VehicleWeapon::BeginReload ( unsigned char FireModeNum )
{
	static UFunction* pFnBeginReload = NULL;

	if ( ! pFnBeginReload )
		pFnBeginReload = (UFunction*) UObject::GObjObjects()->Data[ 87864 ];

	AR_VehicleWeapon_execBeginReload_Parms BeginReload_Parms;
	BeginReload_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnBeginReload, &BeginReload_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.PackWeaponWindupState
// [0x00020102] 
// Parameters infos:
// unsigned char                  SendWindupState                ( CPF_Parm )

void AR_VehicleWeapon::PackWeaponWindupState ( unsigned char SendWindupState )
{
	static UFunction* pFnPackWeaponWindupState = NULL;

	if ( ! pFnPackWeaponWindupState )
		pFnPackWeaponWindupState = (UFunction*) UObject::GObjObjects()->Data[ 87862 ];

	AR_VehicleWeapon_execPackWeaponWindupState_Parms PackWeaponWindupState_Parms;
	PackWeaponWindupState_Parms.SendWindupState = SendWindupState;

	this->ProcessEvent ( pFnPackWeaponWindupState, &PackWeaponWindupState_Parms, NULL );
};

// Function RavagedGame.R_VehicleWeapon.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AR_VehicleWeapon::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 87860 ];

	AR_VehicleWeapon_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function RavagedGame.R_DmgType_Burning.GetHitEffectDuration
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// float                          Damage                         ( CPF_Parm )

float UR_DmgType_Burning::GetHitEffectDuration ( class APawn* P, float Damage )
{
	static UFunction* pFnGetHitEffectDuration = NULL;

	if ( ! pFnGetHitEffectDuration )
		pFnGetHitEffectDuration = (UFunction*) UObject::GObjObjects()->Data[ 79197 ];

	UR_DmgType_Burning_execGetHitEffectDuration_Parms GetHitEffectDuration_Parms;
	GetHitEffectDuration_Parms.P = P;
	GetHitEffectDuration_Parms.Damage = Damage;

	this->ProcessEvent ( pFnGetHitEffectDuration, &GetHitEffectDuration_Parms, NULL );

	return GetHitEffectDuration_Parms.ReturnValue;
};

// Function RavagedGame.R_DmgType_Burning.SpawnHitEffect
// [0x00822002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )
// float                          Damage                         ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void UR_DmgType_Burning::SpawnHitEffect ( class APawn* P, float Damage, struct FVector Momentum, struct FName BoneName, struct FVector HitLocation )
{
	static UFunction* pFnSpawnHitEffect = NULL;

	if ( ! pFnSpawnHitEffect )
		pFnSpawnHitEffect = (UFunction*) UObject::GObjObjects()->Data[ 79187 ];

	UR_DmgType_Burning_execSpawnHitEffect_Parms SpawnHitEffect_Parms;
	SpawnHitEffect_Parms.P = P;
	SpawnHitEffect_Parms.Damage = Damage;
	memcpy ( &SpawnHitEffect_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &SpawnHitEffect_Parms.BoneName, &BoneName, 0x8 );
	memcpy ( &SpawnHitEffect_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSpawnHitEffect, &SpawnHitEffect_Parms, NULL );
};

// Function RavagedGame.R_DmgType_Bat.CheckKillAchievement
// [0x00022002] 
// Parameters infos:
// class AUTPlayerReplicationInfo* KillerPRI                      ( CPF_Parm )
// int                            KillCount                      ( CPF_Parm )
// unsigned long                  bEnemyKill                     ( CPF_Parm )

void UR_DmgType_Bat::CheckKillAchievement ( class AUTPlayerReplicationInfo* KillerPRI, int KillCount, unsigned long bEnemyKill )
{
	static UFunction* pFnCheckKillAchievement = NULL;

	if ( ! pFnCheckKillAchievement )
		pFnCheckKillAchievement = (UFunction*) UObject::GObjObjects()->Data[ 79226 ];

	UR_DmgType_Bat_execCheckKillAchievement_Parms CheckKillAchievement_Parms;
	CheckKillAchievement_Parms.KillerPRI = KillerPRI;
	CheckKillAchievement_Parms.KillCount = KillCount;
	CheckKillAchievement_Parms.bEnemyKill = bEnemyKill;

	this->ProcessEvent ( pFnCheckKillAchievement, &CheckKillAchievement_Parms, NULL );
};

// Function RavagedGame.R_Weapon_QuickMelee.ProcessInstantHit
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void AR_Weapon_QuickMelee::ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 88949 ];

	AR_Weapon_QuickMelee_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x50 );
	ProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function RavagedGame.R_Weapon_QuickMelee.PlayImpactEffect
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void AR_Weapon_QuickMelee::PlayImpactEffect ( unsigned char FiringMode, struct FImpactInfo Impact )
{
	static UFunction* pFnPlayImpactEffect = NULL;

	if ( ! pFnPlayImpactEffect )
		pFnPlayImpactEffect = (UFunction*) UObject::GObjObjects()->Data[ 88942 ];

	AR_Weapon_QuickMelee_execPlayImpactEffect_Parms PlayImpactEffect_Parms;
	PlayImpactEffect_Parms.FiringMode = FiringMode;
	memcpy ( &PlayImpactEffect_Parms.Impact, &Impact, 0x50 );

	this->ProcessEvent ( pFnPlayImpactEffect, &PlayImpactEffect_Parms, NULL );
};

// Function RavagedGame.R_Weapon_QuickMelee.CalcAim
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// class APawn*                   Target                         ( CPF_Parm )

float AR_Weapon_QuickMelee::CalcAim ( class APawn* P, class APawn* Target )
{
	static UFunction* pFnCalcAim = NULL;

	if ( ! pFnCalcAim )
		pFnCalcAim = (UFunction*) UObject::GObjObjects()->Data[ 88935 ];

	AR_Weapon_QuickMelee_execCalcAim_Parms CalcAim_Parms;
	CalcAim_Parms.P = P;
	CalcAim_Parms.Target = Target;

	this->ProcessEvent ( pFnCalcAim, &CalcAim_Parms, NULL );

	return CalcAim_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon_QuickMelee.GetAIRating
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AR_Weapon_QuickMelee::GetAIRating ( )
{
	static UFunction* pFnGetAIRating = NULL;

	if ( ! pFnGetAIRating )
		pFnGetAIRating = (UFunction*) UObject::GObjObjects()->Data[ 88931 ];

	AR_Weapon_QuickMelee_execGetAIRating_Parms GetAIRating_Parms;

	this->ProcessEvent ( pFnGetAIRating, &GetAIRating_Parms, NULL );

	return GetAIRating_Parms.ReturnValue;
};

// Function RavagedGame.R_Weapon_QuickMelee.SetSkin
// [0x00020102] 
// Parameters infos:
// class UMaterial*               NewMaterial                    ( CPF_Parm )

void AR_Weapon_QuickMelee::SetSkin ( class UMaterial* NewMaterial )
{
	static UFunction* pFnSetSkin = NULL;

	if ( ! pFnSetSkin )
		pFnSetSkin = (UFunction*) UObject::GObjObjects()->Data[ 88929 ];

	AR_Weapon_QuickMelee_execSetSkin_Parms SetSkin_Parms;
	SetSkin_Parms.NewMaterial = NewMaterial;

	this->ProcessEvent ( pFnSetSkin, &SetSkin_Parms, NULL );
};

// Function RavagedGame.R_DmgType_CrotchShot.SpawnHitEffect
// [0x00022002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )
// float                          Damage                         ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void UR_DmgType_CrotchShot::SpawnHitEffect ( class APawn* P, float Damage, struct FVector Momentum, struct FName BoneName, struct FVector HitLocation )
{
	static UFunction* pFnSpawnHitEffect = NULL;

	if ( ! pFnSpawnHitEffect )
		pFnSpawnHitEffect = (UFunction*) UObject::GObjObjects()->Data[ 79250 ];

	UR_DmgType_CrotchShot_execSpawnHitEffect_Parms SpawnHitEffect_Parms;
	SpawnHitEffect_Parms.P = P;
	SpawnHitEffect_Parms.Damage = Damage;
	memcpy ( &SpawnHitEffect_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &SpawnHitEffect_Parms.BoneName, &BoneName, 0x8 );
	memcpy ( &SpawnHitEffect_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSpawnHitEffect, &SpawnHitEffect_Parms, NULL );
};

// Function RavagedGame.R_Message_Skillz.AnnouncementSound
// [0x00022002] 
// Parameters infos:
// class USoundNodeWave*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            MessageIndex                   ( CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

class USoundNodeWave* UR_Message_Skillz::AnnouncementSound ( int MessageIndex, class UObject* OptionalObject, class APlayerController* PC )
{
	static UFunction* pFnAnnouncementSound = NULL;

	if ( ! pFnAnnouncementSound )
		pFnAnnouncementSound = (UFunction*) UObject::GObjObjects()->Data[ 84819 ];

	UR_Message_Skillz_execAnnouncementSound_Parms AnnouncementSound_Parms;
	AnnouncementSound_Parms.MessageIndex = MessageIndex;
	AnnouncementSound_Parms.OptionalObject = OptionalObject;
	AnnouncementSound_Parms.PC = PC;

	this->ProcessEvent ( pFnAnnouncementSound, &AnnouncementSound_Parms, NULL );

	return AnnouncementSound_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_Skillz.AddAnnouncement
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AUTAnnouncer*            Announcer                      ( CPF_Parm )
// int                            MessageIndex                   ( CPF_Parm )
// class APlayerReplicationInfo*  PRI                            ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

bool UR_Message_Skillz::AddAnnouncement ( class AUTAnnouncer* Announcer, int MessageIndex, class APlayerReplicationInfo* PRI, class UObject* OptionalObject )
{
	static UFunction* pFnAddAnnouncement = NULL;

	if ( ! pFnAddAnnouncement )
		pFnAddAnnouncement = (UFunction*) UObject::GObjObjects()->Data[ 84813 ];

	UR_Message_Skillz_execAddAnnouncement_Parms AddAnnouncement_Parms;
	AddAnnouncement_Parms.Announcer = Announcer;
	AddAnnouncement_Parms.MessageIndex = MessageIndex;
	AddAnnouncement_Parms.PRI = PRI;
	AddAnnouncement_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnAddAnnouncement, &AddAnnouncement_Parms, NULL );

	return AddAnnouncement_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_Skillz.ShouldBeRemoved
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AUTQueuedAnnouncement*   MyAnnouncement                 ( CPF_Parm )
// class UClass*                  NewAnnouncementClass           ( CPF_Parm )
// int                            NewMessageIndex                ( CPF_Parm )

bool UR_Message_Skillz::ShouldBeRemoved ( class AUTQueuedAnnouncement* MyAnnouncement, class UClass* NewAnnouncementClass, int NewMessageIndex )
{
	static UFunction* pFnShouldBeRemoved = NULL;

	if ( ! pFnShouldBeRemoved )
		pFnShouldBeRemoved = (UFunction*) UObject::GObjObjects()->Data[ 84808 ];

	UR_Message_Skillz_execShouldBeRemoved_Parms ShouldBeRemoved_Parms;
	ShouldBeRemoved_Parms.MyAnnouncement = MyAnnouncement;
	ShouldBeRemoved_Parms.NewAnnouncementClass = NewAnnouncementClass;
	ShouldBeRemoved_Parms.NewMessageIndex = NewMessageIndex;

	this->ProcessEvent ( pFnShouldBeRemoved, &ShouldBeRemoved_Parms, NULL );

	return ShouldBeRemoved_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_Skillz.GetFontSize
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI1                    ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI2                    ( CPF_Parm )
// class APlayerReplicationInfo*  LocalPlayer                    ( CPF_Parm )

int UR_Message_Skillz::GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer )
{
	static UFunction* pFnGetFontSize = NULL;

	if ( ! pFnGetFontSize )
		pFnGetFontSize = (UFunction*) UObject::GObjObjects()->Data[ 84802 ];

	UR_Message_Skillz_execGetFontSize_Parms GetFontSize_Parms;
	GetFontSize_Parms.Switch = Switch;
	GetFontSize_Parms.RelatedPRI1 = RelatedPRI1;
	GetFontSize_Parms.RelatedPRI2 = RelatedPRI2;
	GetFontSize_Parms.LocalPlayer = LocalPlayer;

	this->ProcessEvent ( pFnGetFontSize, &GetFontSize_Parms, NULL );

	return GetFontSize_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_Skillz.ClientReceive
// [0x00026102] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void UR_Message_Skillz::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnClientReceive = NULL;

	if ( ! pFnClientReceive )
		pFnClientReceive = (UFunction*) UObject::GObjObjects()->Data[ 84796 ];

	UR_Message_Skillz_execClientReceive_Parms ClientReceive_Parms;
	ClientReceive_Parms.P = P;
	ClientReceive_Parms.Switch = Switch;
	ClientReceive_Parms.RelatedPRI = RelatedPRI;
	ClientReceive_Parms.RelatedPRI01 = RelatedPRI01;
	ClientReceive_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnClientReceive, &ClientReceive_Parms, NULL );
};

// Function RavagedGame.R_Message_Skillz.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString UR_Message_Skillz::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 84789 ];

	UR_Message_Skillz_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function RavagedGame.R_DmgType_Stinger.VehicleDamageScalingFor
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AVehicle*                V                              ( CPF_Parm )

float UR_DmgType_Stinger::VehicleDamageScalingFor ( class AVehicle* V )
{
	static UFunction* pFnVehicleDamageScalingFor = NULL;

	if ( ! pFnVehicleDamageScalingFor )
		pFnVehicleDamageScalingFor = (UFunction*) UObject::GObjObjects()->Data[ 79310 ];

	UR_DmgType_Stinger_execVehicleDamageScalingFor_Parms VehicleDamageScalingFor_Parms;
	VehicleDamageScalingFor_Parms.V = V;

	this->ProcessEvent ( pFnVehicleDamageScalingFor, &VehicleDamageScalingFor_Parms, NULL );

	return VehicleDamageScalingFor_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle_Air.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_Vehicle_Air::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 87386 ];

	AR_Vehicle_Air_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Air.TakeDamage
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AR_Vehicle_Air::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 87377 ];

	AR_Vehicle_Air_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Air.SetInputsAir
// [0x00020102] 
// Parameters infos:
// float                          InForward                      ( CPF_Parm )
// float                          InStrafe                       ( CPF_Parm )
// int                            Mouse                          ( CPF_Parm )

void AR_Vehicle_Air::SetInputsAir ( float InForward, float InStrafe, int Mouse )
{
	static UFunction* pFnSetInputsAir = NULL;

	if ( ! pFnSetInputsAir )
		pFnSetInputsAir = (UFunction*) UObject::GObjObjects()->Data[ 87373 ];

	AR_Vehicle_Air_execSetInputsAir_Parms SetInputsAir_Parms;
	SetInputsAir_Parms.InForward = InForward;
	SetInputsAir_Parms.InStrafe = InStrafe;
	SetInputsAir_Parms.Mouse = Mouse;

	this->ProcessEvent ( pFnSetInputsAir, &SetInputsAir_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Air.SmoothStrafeInput
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          InStrafe                       ( CPF_Parm )
// float                          DT                             ( CPF_Parm )

float AR_Vehicle_Air::SmoothStrafeInput ( float InStrafe, float DT )
{
	static UFunction* pFnSmoothStrafeInput = NULL;

	if ( ! pFnSmoothStrafeInput )
		pFnSmoothStrafeInput = (UFunction*) UObject::GObjObjects()->Data[ 85911 ];

	AR_Vehicle_Air_execSmoothStrafeInput_Parms SmoothStrafeInput_Parms;
	SmoothStrafeInput_Parms.InStrafe = InStrafe;
	SmoothStrafeInput_Parms.DT = DT;

	this->ProcessEvent ( pFnSmoothStrafeInput, &SmoothStrafeInput_Parms, NULL );

	return SmoothStrafeInput_Parms.ReturnValue;
};

// Function RavagedGame.R_DmgTypeThrowable.CheckKillAchievement
// [0x00022002] 
// Parameters infos:
// class AUTPlayerReplicationInfo* KillerPRI                      ( CPF_Parm )
// int                            KillCount                      ( CPF_Parm )
// unsigned long                  bEnemyKill                     ( CPF_Parm )

void UR_DmgTypeThrowable::CheckKillAchievement ( class AUTPlayerReplicationInfo* KillerPRI, int KillCount, unsigned long bEnemyKill )
{
	static UFunction* pFnCheckKillAchievement = NULL;

	if ( ! pFnCheckKillAchievement )
		pFnCheckKillAchievement = (UFunction*) UObject::GObjObjects()->Data[ 79335 ];

	UR_DmgTypeThrowable_execCheckKillAchievement_Parms CheckKillAchievement_Parms;
	CheckKillAchievement_Parms.KillerPRI = KillerPRI;
	CheckKillAchievement_Parms.KillCount = KillCount;
	CheckKillAchievement_Parms.bEnemyKill = bEnemyKill;

	this->ProcessEvent ( pFnCheckKillAchievement, &CheckKillAchievement_Parms, NULL );
};

// Function RavagedGame.R_DmgType_TempHeadShot.SpawnHitEffect
// [0x00022002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )
// float                          Damage                         ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void UR_DmgType_TempHeadShot::SpawnHitEffect ( class APawn* P, float Damage, struct FVector Momentum, struct FName BoneName, struct FVector HitLocation )
{
	static UFunction* pFnSpawnHitEffect = NULL;

	if ( ! pFnSpawnHitEffect )
		pFnSpawnHitEffect = (UFunction*) UObject::GObjObjects()->Data[ 79385 ];

	UR_DmgType_TempHeadShot_execSpawnHitEffect_Parms SpawnHitEffect_Parms;
	SpawnHitEffect_Parms.P = P;
	SpawnHitEffect_Parms.Damage = Damage;
	memcpy ( &SpawnHitEffect_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &SpawnHitEffect_Parms.BoneName, &BoneName, 0x8 );
	memcpy ( &SpawnHitEffect_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSpawnHitEffect, &SpawnHitEffect_Parms, NULL );
};

// Function RavagedGame.R_Weap_SniperRifle.GetEffectLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AR_Weap_SniperRifle::GetEffectLocation ( )
{
	static UFunction* pFnGetEffectLocation = NULL;

	if ( ! pFnGetEffectLocation )
		pFnGetEffectLocation = (UFunction*) UObject::GObjObjects()->Data[ 89189 ];

	AR_Weap_SniperRifle_execGetEffectLocation_Parms GetEffectLocation_Parms;

	this->ProcessEvent ( pFnGetEffectLocation, &GetEffectLocation_Parms, NULL );

	return GetEffectLocation_Parms.ReturnValue;
};

// Function RavagedGame.R_DmgType_SodaBomb.CheckKillAchievement
// [0x00022002] 
// Parameters infos:
// class AUTPlayerReplicationInfo* KillerPRI                      ( CPF_Parm )
// int                            KillCount                      ( CPF_Parm )
// unsigned long                  bEnemyKill                     ( CPF_Parm )

void UR_DmgType_SodaBomb::CheckKillAchievement ( class AUTPlayerReplicationInfo* KillerPRI, int KillCount, unsigned long bEnemyKill )
{
	static UFunction* pFnCheckKillAchievement = NULL;

	if ( ! pFnCheckKillAchievement )
		pFnCheckKillAchievement = (UFunction*) UObject::GObjObjects()->Data[ 79407 ];

	UR_DmgType_SodaBomb_execCheckKillAchievement_Parms CheckKillAchievement_Parms;
	CheckKillAchievement_Parms.KillerPRI = KillerPRI;
	CheckKillAchievement_Parms.KillCount = KillCount;
	CheckKillAchievement_Parms.bEnemyKill = bEnemyKill;

	this->ProcessEvent ( pFnCheckKillAchievement, &CheckKillAchievement_Parms, NULL );
};

// Function RavagedGame.R_VWeap_StrykerCannon.ProjectileFire
// [0x00820102] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* AR_VWeap_StrykerCannon::ProjectileFire ( )
{
	static UFunction* pFnProjectileFire = NULL;

	if ( ! pFnProjectileFire )
		pFnProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 88127 ];

	AR_VWeap_StrykerCannon_execProjectileFire_Parms ProjectileFire_Parms;

	this->ProcessEvent ( pFnProjectileFire, &ProjectileFire_Parms, NULL );

	return ProjectileFire_Parms.ReturnValue;
};

// Function RavagedGame.R_DroppedItemPickup.GiveTo
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AR_DroppedItemPickup::GiveTo ( class APawn* P )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = (UFunction*) UObject::GObjObjects()->Data[ 79451 ];

	AR_DroppedItemPickup_execGiveTo_Parms GiveTo_Parms;
	GiveTo_Parms.P = P;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function RavagedGame.R_DroppedItemPickup.SetPickupMesh
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     NewPickupMesh                  ( CPF_Parm | CPF_EditInline )

void AR_DroppedItemPickup::eventSetPickupMesh ( class UPrimitiveComponent* NewPickupMesh )
{
	static UFunction* pFnSetPickupMesh = NULL;

	if ( ! pFnSetPickupMesh )
		pFnSetPickupMesh = (UFunction*) UObject::GObjObjects()->Data[ 79449 ];

	AR_DroppedItemPickup_eventSetPickupMesh_Parms SetPickupMesh_Parms;
	SetPickupMesh_Parms.NewPickupMesh = NewPickupMesh;

	this->ProcessEvent ( pFnSetPickupMesh, &SetPickupMesh_Parms, NULL );
};

// Function RavagedGame.R_DroppedItemPickup.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AR_DroppedItemPickup::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 79448 ];

	AR_DroppedItemPickup_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_DroppedWeaponPickup.GiveTo
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AR_DroppedWeaponPickup::GiveTo ( class APawn* P )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = (UFunction*) UObject::GObjObjects()->Data[ 79467 ];

	AR_DroppedWeaponPickup_execGiveTo_Parms GiveTo_Parms;
	GiveTo_Parms.P = P;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function RavagedGame.R_DumbBot.WhatToDoNext
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AR_DumbBot::eventWhatToDoNext ( )
{
	static UFunction* pFnWhatToDoNext = NULL;

	if ( ! pFnWhatToDoNext )
		pFnWhatToDoNext = (UFunction*) UObject::GObjObjects()->Data[ 79473 ];

	AR_DumbBot_eventWhatToDoNext_Parms WhatToDoNext_Parms;

	this->ProcessEvent ( pFnWhatToDoNext, &WhatToDoNext_Parms, NULL );
};

// Function RavagedGame.R_ExplosionEffects.DoShake
// [0x00020102] 
// Parameters infos:

void AR_ExplosionEffects::DoShake ( )
{
	static UFunction* pFnDoShake = NULL;

	if ( ! pFnDoShake )
		pFnDoShake = (UFunction*) UObject::GObjObjects()->Data[ 79502 ];

	AR_ExplosionEffects_execDoShake_Parms DoShake_Parms;

	this->ProcessEvent ( pFnDoShake, &DoShake_Parms, NULL );
};

// Function RavagedGame.R_ExplosionEffects.LensFlareTimer
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_ExplosionEffects::eventLensFlareTimer ( )
{
	static UFunction* pFnLensFlareTimer = NULL;

	if ( ! pFnLensFlareTimer )
		pFnLensFlareTimer = (UFunction*) UObject::GObjObjects()->Data[ 79501 ];

	AR_ExplosionEffects_eventLensFlareTimer_Parms LensFlareTimer_Parms;

	this->ProcessEvent ( pFnLensFlareTimer, &LensFlareTimer_Parms, NULL );
};

// Function RavagedGame.R_ExplosionEffects.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void AR_ExplosionEffects::eventTick ( float DT )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 79497 ];

	AR_ExplosionEffects_eventTick_Parms Tick_Parms;
	Tick_Parms.DT = DT;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function RavagedGame.R_ExplosionEffects.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_ExplosionEffects::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 79496 ];

	AR_ExplosionEffects_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_FamilyInfo.GetTeamMaterials
// [0x00422002] 
// Parameters infos:
// int                            TeamNum                        ( CPF_Parm )
// class UMaterialInterface*      TeamMaterialHead               ( CPF_Parm | CPF_OutParm )
// class UMaterialInterface*      TeamMaterialBody               ( CPF_Parm | CPF_OutParm )

void UR_FamilyInfo::GetTeamMaterials ( int TeamNum, class UMaterialInterface** TeamMaterialHead, class UMaterialInterface** TeamMaterialBody )
{
	static UFunction* pFnGetTeamMaterials = NULL;

	if ( ! pFnGetTeamMaterials )
		pFnGetTeamMaterials = (UFunction*) UObject::GObjObjects()->Data[ 79574 ];

	UR_FamilyInfo_execGetTeamMaterials_Parms GetTeamMaterials_Parms;
	GetTeamMaterials_Parms.TeamNum = TeamNum;

	this->ProcessEvent ( pFnGetTeamMaterials, &GetTeamMaterials_Parms, NULL );

	if ( TeamMaterialHead )
		*TeamMaterialHead = GetTeamMaterials_Parms.TeamMaterialHead;

	if ( TeamMaterialBody )
		*TeamMaterialBody = GetTeamMaterials_Parms.TeamMaterialBody;
};

// Function RavagedGame.R_FamilyInfo.SetPawnInventory
// [0x00022002] 
// Parameters infos:
// class AR_Pawn*                 rPwn                           ( CPF_Parm )
// TArray< struct FInventoryModifier > inventMods                     ( CPF_Parm | CPF_NeedCtorLink )

void UR_FamilyInfo::SetPawnInventory ( class AR_Pawn* rPwn, TArray< struct FInventoryModifier > inventMods )
{
	static UFunction* pFnSetPawnInventory = NULL;

	if ( ! pFnSetPawnInventory )
		pFnSetPawnInventory = (UFunction*) UObject::GObjObjects()->Data[ 79563 ];

	UR_FamilyInfo_execSetPawnInventory_Parms SetPawnInventory_Parms;
	SetPawnInventory_Parms.rPwn = rPwn;
	memcpy ( &SetPawnInventory_Parms.inventMods, &inventMods, 0xC );

	this->ProcessEvent ( pFnSetPawnInventory, &SetPawnInventory_Parms, NULL );
};

// Function RavagedGame.R_FamilyInfo.SetPawnAttributes
// [0x00022002] 
// Parameters infos:
// class AR_Pawn*                 rPwn                           ( CPF_Parm )

void UR_FamilyInfo::SetPawnAttributes ( class AR_Pawn* rPwn )
{
	static UFunction* pFnSetPawnAttributes = NULL;

	if ( ! pFnSetPawnAttributes )
		pFnSetPawnAttributes = (UFunction*) UObject::GObjObjects()->Data[ 79559 ];

	UR_FamilyInfo_execSetPawnAttributes_Parms SetPawnAttributes_Parms;
	SetPawnAttributes_Parms.rPwn = rPwn;

	this->ProcessEvent ( pFnSetPawnAttributes, &SetPawnAttributes_Parms, NULL );
};

// Function RavagedGame.R_FamilyInfo.GetFamilyClassName
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  teamIdx                        ( CPF_Parm )
// unsigned char                  classIdx                       ( CPF_Parm )

struct FString UR_FamilyInfo::GetFamilyClassName ( unsigned char teamIdx, unsigned char classIdx )
{
	static UFunction* pFnGetFamilyClassName = NULL;

	if ( ! pFnGetFamilyClassName )
		pFnGetFamilyClassName = (UFunction*) UObject::GObjObjects()->Data[ 79554 ];

	UR_FamilyInfo_execGetFamilyClassName_Parms GetFamilyClassName_Parms;
	GetFamilyClassName_Parms.teamIdx = teamIdx;
	GetFamilyClassName_Parms.classIdx = classIdx;

	this->ProcessEvent ( pFnGetFamilyClassName, &GetFamilyClassName_Parms, NULL );

	return GetFamilyClassName_Parms.ReturnValue;
};

// Function RavagedGame.R_FamilyInfo.GetFamilyClassPortrait
// [0x00022002] 
// Parameters infos:
// class UTexture*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  teamIdx                        ( CPF_Parm )
// unsigned char                  classIdx                       ( CPF_Parm )

class UTexture* UR_FamilyInfo::GetFamilyClassPortrait ( unsigned char teamIdx, unsigned char classIdx )
{
	static UFunction* pFnGetFamilyClassPortrait = NULL;

	if ( ! pFnGetFamilyClassPortrait )
		pFnGetFamilyClassPortrait = (UFunction*) UObject::GObjObjects()->Data[ 79549 ];

	UR_FamilyInfo_execGetFamilyClassPortrait_Parms GetFamilyClassPortrait_Parms;
	GetFamilyClassPortrait_Parms.teamIdx = teamIdx;
	GetFamilyClassPortrait_Parms.classIdx = classIdx;

	this->ProcessEvent ( pFnGetFamilyClassPortrait, &GetFamilyClassPortrait_Parms, NULL );

	return GetFamilyClassPortrait_Parms.ReturnValue;
};

// Function RavagedGame.R_FamilyInfo.GetFamilyClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  teamIdx                        ( CPF_Parm )
// unsigned char                  classIdx                       ( CPF_Parm )

class UClass* UR_FamilyInfo::GetFamilyClass ( unsigned char teamIdx, unsigned char classIdx )
{
	static UFunction* pFnGetFamilyClass = NULL;

	if ( ! pFnGetFamilyClass )
		pFnGetFamilyClass = (UFunction*) UObject::GObjObjects()->Data[ 79545 ];

	UR_FamilyInfo_execGetFamilyClass_Parms GetFamilyClass_Parms;
	GetFamilyClass_Parms.teamIdx = teamIdx;
	GetFamilyClass_Parms.classIdx = classIdx;

	this->ProcessEvent ( pFnGetFamilyClass, &GetFamilyClass_Parms, NULL );

	return GetFamilyClass_Parms.ReturnValue;
};

// Function RavagedGame.R_PawnSoundGroup.PlayTauntSound
// [0x00022002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void UR_PawnSoundGroup::PlayTauntSound ( class APawn* P )
{
	static UFunction* pFnPlayTauntSound = NULL;

	if ( ! pFnPlayTauntSound )
		pFnPlayTauntSound = (UFunction*) UObject::GObjObjects()->Data[ 85643 ];

	UR_PawnSoundGroup_execPlayTauntSound_Parms PlayTauntSound_Parms;
	PlayTauntSound_Parms.P = P;

	this->ProcessEvent ( pFnPlayTauntSound, &PlayTauntSound_Parms, NULL );
};

// Function RavagedGame.R_PawnSoundGroup.PlayCrotchShotSound
// [0x00022002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void UR_PawnSoundGroup::PlayCrotchShotSound ( class APawn* P )
{
	static UFunction* pFnPlayCrotchShotSound = NULL;

	if ( ! pFnPlayCrotchShotSound )
		pFnPlayCrotchShotSound = (UFunction*) UObject::GObjObjects()->Data[ 85641 ];

	UR_PawnSoundGroup_execPlayCrotchShotSound_Parms PlayCrotchShotSound_Parms;
	PlayCrotchShotSound_Parms.P = P;

	this->ProcessEvent ( pFnPlayCrotchShotSound, &PlayCrotchShotSound_Parms, NULL );
};

// Function RavagedGame.R_PawnSoundGroup.PlayAssShotSound
// [0x00022002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void UR_PawnSoundGroup::PlayAssShotSound ( class APawn* P )
{
	static UFunction* pFnPlayAssShotSound = NULL;

	if ( ! pFnPlayAssShotSound )
		pFnPlayAssShotSound = (UFunction*) UObject::GObjObjects()->Data[ 85639 ];

	UR_PawnSoundGroup_execPlayAssShotSound_Parms PlayAssShotSound_Parms;
	PlayAssShotSound_Parms.P = P;

	this->ProcessEvent ( pFnPlayAssShotSound, &PlayAssShotSound_Parms, NULL );
};

// Function RavagedGame.R_PawnSoundGroup.GetCommunicationSound
// [0x00022002] 
// Parameters infos:
// class USoundCue*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ComIdx                         ( CPF_Parm )

class USoundCue* UR_PawnSoundGroup::GetCommunicationSound ( int ComIdx )
{
	static UFunction* pFnGetCommunicationSound = NULL;

	if ( ! pFnGetCommunicationSound )
		pFnGetCommunicationSound = (UFunction*) UObject::GObjObjects()->Data[ 85636 ];

	UR_PawnSoundGroup_execGetCommunicationSound_Parms GetCommunicationSound_Parms;
	GetCommunicationSound_Parms.ComIdx = ComIdx;

	this->ProcessEvent ( pFnGetCommunicationSound, &GetCommunicationSound_Parms, NULL );

	return GetCommunicationSound_Parms.ReturnValue;
};

// Function RavagedGame.R_Voice.SendLocationUpdate
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Sender                         ( CPF_Parm )
// class APlayerReplicationInfo*  Recipient                      ( CPF_Parm )
// struct FName                   MessageType                    ( CPF_Parm )
// class AUTGame*                 G                              ( CPF_Parm )
// class APawn*                   StatusPawn                     ( CPF_Parm )
// unsigned long                  bDontSendMidfield              ( CPF_OptionalParm | CPF_Parm )

bool UR_Voice::SendLocationUpdate ( class AController* Sender, class APlayerReplicationInfo* Recipient, struct FName MessageType, class AUTGame* G, class APawn* StatusPawn, unsigned long bDontSendMidfield )
{
	static UFunction* pFnSendLocationUpdate = NULL;

	if ( ! pFnSendLocationUpdate )
		pFnSendLocationUpdate = (UFunction*) UObject::GObjObjects()->Data[ 88019 ];

	UR_Voice_execSendLocationUpdate_Parms SendLocationUpdate_Parms;
	SendLocationUpdate_Parms.Sender = Sender;
	SendLocationUpdate_Parms.Recipient = Recipient;
	memcpy ( &SendLocationUpdate_Parms.MessageType, &MessageType, 0x8 );
	SendLocationUpdate_Parms.G = G;
	SendLocationUpdate_Parms.StatusPawn = StatusPawn;
	SendLocationUpdate_Parms.bDontSendMidfield = bDontSendMidfield;

	this->ProcessEvent ( pFnSendLocationUpdate, &SendLocationUpdate_Parms, NULL );

	return SendLocationUpdate_Parms.ReturnValue;
};

// Function RavagedGame.R_Gib_Human.HitWall
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void AR_Gib_Human::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 84032 ];

	AR_Gib_Human_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function RavagedGame.R_Gib_Human.DoCustomGibEffects
// [0x00020102] 
// Parameters infos:

void AR_Gib_Human::DoCustomGibEffects ( )
{
	static UFunction* pFnDoCustomGibEffects = NULL;

	if ( ! pFnDoCustomGibEffects )
		pFnDoCustomGibEffects = (UFunction*) UObject::GObjObjects()->Data[ 84029 ];

	AR_Gib_Human_execDoCustomGibEffects_Parms DoCustomGibEffects_Parms;

	this->ProcessEvent ( pFnDoCustomGibEffects, &DoCustomGibEffects_Parms, NULL );
};

// Function RavagedGame.R_PlayerStart.SetObjective
// [0x00020002] 
// Parameters infos:
// class AR_Objective_ControlPoint* O                              ( CPF_Parm )

void AR_PlayerStart::SetObjective ( class AR_Objective_ControlPoint* O )
{
	static UFunction* pFnSetObjective = NULL;

	if ( ! pFnSetObjective )
		pFnSetObjective = (UFunction*) UObject::GObjObjects()->Data[ 86351 ];

	AR_PlayerStart_execSetObjective_Parms SetObjective_Parms;
	SetObjective_Parms.O = O;

	this->ProcessEvent ( pFnSetObjective, &SetObjective_Parms, NULL );
};

// Function RavagedGame.R_GRI.VehicleSpawnPointStatusUpdate
// [0x00020102] 
// Parameters infos:
// class AR_Vehicle*              veh                            ( CPF_Parm )

void AR_GRI::VehicleSpawnPointStatusUpdate ( class AR_Vehicle* veh )
{
	static UFunction* pFnVehicleSpawnPointStatusUpdate = NULL;

	if ( ! pFnVehicleSpawnPointStatusUpdate )
		pFnVehicleSpawnPointStatusUpdate = (UFunction*) UObject::GObjObjects()->Data[ 84097 ];

	AR_GRI_execVehicleSpawnPointStatusUpdate_Parms VehicleSpawnPointStatusUpdate_Parms;
	VehicleSpawnPointStatusUpdate_Parms.veh = veh;

	this->ProcessEvent ( pFnVehicleSpawnPointStatusUpdate, &VehicleSpawnPointStatusUpdate_Parms, NULL );
};

// Function RavagedGame.R_GRI.GetVehicleSpawnPoints
// [0x00420102] 
// Parameters infos:
// int                            Team                           ( CPF_Parm )
// TArray< class AR_Vehicle* >    vehSpawns                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AR_GRI::GetVehicleSpawnPoints ( int Team, TArray< class AR_Vehicle* >* vehSpawns )
{
	static UFunction* pFnGetVehicleSpawnPoints = NULL;

	if ( ! pFnGetVehicleSpawnPoints )
		pFnGetVehicleSpawnPoints = (UFunction*) UObject::GObjObjects()->Data[ 84092 ];

	AR_GRI_execGetVehicleSpawnPoints_Parms GetVehicleSpawnPoints_Parms;
	GetVehicleSpawnPoints_Parms.Team = Team;

	this->ProcessEvent ( pFnGetVehicleSpawnPoints, &GetVehicleSpawnPoints_Parms, NULL );

	if ( vehSpawns )
		memcpy ( vehSpawns, &GetVehicleSpawnPoints_Parms.vehSpawns, 0xC );
};

// Function RavagedGame.R_GRI.GetControlPointSpawnPoints
// [0x00420102] 
// Parameters infos:
// int                            Team                           ( CPF_Parm )
// TArray< class AR_Thrust_ControlPoint* > allSpawns                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AR_GRI::GetControlPointSpawnPoints ( int Team, TArray< class AR_Thrust_ControlPoint* >* allSpawns )
{
	static UFunction* pFnGetControlPointSpawnPoints = NULL;

	if ( ! pFnGetControlPointSpawnPoints )
		pFnGetControlPointSpawnPoints = (UFunction*) UObject::GObjObjects()->Data[ 84087 ];

	AR_GRI_execGetControlPointSpawnPoints_Parms GetControlPointSpawnPoints_Parms;
	GetControlPointSpawnPoints_Parms.Team = Team;

	this->ProcessEvent ( pFnGetControlPointSpawnPoints, &GetControlPointSpawnPoints_Parms, NULL );

	if ( allSpawns )
		memcpy ( allSpawns, &GetControlPointSpawnPoints_Parms.allSpawns, 0xC );
};

// Function RavagedGame.R_GRI.Timer
// [0x00020102] 
// Parameters infos:

void AR_GRI::Timer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 84083 ];

	AR_GRI_execTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function RavagedGame.R_GRI.FindNextAvailableSpawn
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            curTeam                        ( CPF_Parm )
// class AR_Thrust_ControlPoint*  Obj                            ( CPF_Parm | CPF_OutParm )

bool AR_GRI::FindNextAvailableSpawn ( int curTeam, class AR_Thrust_ControlPoint** Obj )
{
	static UFunction* pFnFindNextAvailableSpawn = NULL;

	if ( ! pFnFindNextAvailableSpawn )
		pFnFindNextAvailableSpawn = (UFunction*) UObject::GObjObjects()->Data[ 84078 ];

	AR_GRI_execFindNextAvailableSpawn_Parms FindNextAvailableSpawn_Parms;
	FindNextAvailableSpawn_Parms.curTeam = curTeam;

	this->ProcessEvent ( pFnFindNextAvailableSpawn, &FindNextAvailableSpawn_Parms, NULL );

	if ( Obj )
		*Obj = FindNextAvailableSpawn_Parms.Obj;

	return FindNextAvailableSpawn_Parms.ReturnValue;
};

// Function RavagedGame.R_GRI.GetDefaultSpawn
// [0x00020002] 
// Parameters infos:
// class AR_Thrust_ControlPoint*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            curTeam                        ( CPF_Parm )

class AR_Thrust_ControlPoint* AR_GRI::GetDefaultSpawn ( int curTeam )
{
	static UFunction* pFnGetDefaultSpawn = NULL;

	if ( ! pFnGetDefaultSpawn )
		pFnGetDefaultSpawn = (UFunction*) UObject::GObjObjects()->Data[ 84073 ];

	AR_GRI_execGetDefaultSpawn_Parms GetDefaultSpawn_Parms;
	GetDefaultSpawn_Parms.curTeam = curTeam;

	this->ProcessEvent ( pFnGetDefaultSpawn, &GetDefaultSpawn_Parms, NULL );

	return GetDefaultSpawn_Parms.ReturnValue;
};

// Function RavagedGame.R_GRI.CountTeamControlPoints
// [0x00020102] 
// Parameters infos:

void AR_GRI::CountTeamControlPoints ( )
{
	static UFunction* pFnCountTeamControlPoints = NULL;

	if ( ! pFnCountTeamControlPoints )
		pFnCountTeamControlPoints = (UFunction*) UObject::GObjObjects()->Data[ 84071 ];

	AR_GRI_execCountTeamControlPoints_Parms CountTeamControlPoints_Parms;

	this->ProcessEvent ( pFnCountTeamControlPoints, &CountTeamControlPoints_Parms, NULL );
};

// Function RavagedGame.R_GRI.ControlPointTaken
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AR_Thrust_ControlPoint*  cp                             ( CPF_Parm )

bool AR_GRI::ControlPointTaken ( class AR_Thrust_ControlPoint* cp )
{
	static UFunction* pFnControlPointTaken = NULL;

	if ( ! pFnControlPointTaken )
		pFnControlPointTaken = (UFunction*) UObject::GObjObjects()->Data[ 80020 ];

	AR_GRI_execControlPointTaken_Parms ControlPointTaken_Parms;
	ControlPointTaken_Parms.cp = cp;

	this->ProcessEvent ( pFnControlPointTaken, &ControlPointTaken_Parms, NULL );

	return ControlPointTaken_Parms.ReturnValue;
};

// Function RavagedGame.R_GRI.CPsInitCheck
// [0x00020100] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_GRI::CPsInitCheck ( )
{
	static UFunction* pFnCPsInitCheck = NULL;

	if ( ! pFnCPsInitCheck )
		pFnCPsInitCheck = (UFunction*) UObject::GObjObjects()->Data[ 79939 ];

	AR_GRI_execCPsInitCheck_Parms CPsInitCheck_Parms;

	this->ProcessEvent ( pFnCPsInitCheck, &CPsInitCheck_Parms, NULL );

	return CPsInitCheck_Parms.ReturnValue;
};

// Function RavagedGame.R_GRI.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AR_GRI::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 84068 ];

	AR_GRI_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function RavagedGame.R_GRI.GetTeamMainBase
// [0x00020002] 
// Parameters infos:
// class AR_Thrust_ControlPoint*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  teamIdx                        ( CPF_Parm )

class AR_Thrust_ControlPoint* AR_GRI::GetTeamMainBase ( unsigned char teamIdx )
{
	static UFunction* pFnGetTeamMainBase = NULL;

	if ( ! pFnGetTeamMainBase )
		pFnGetTeamMainBase = (UFunction*) UObject::GObjObjects()->Data[ 79925 ];

	AR_GRI_execGetTeamMainBase_Parms GetTeamMainBase_Parms;
	GetTeamMainBase_Parms.teamIdx = teamIdx;

	this->ProcessEvent ( pFnGetTeamMainBase, &GetTeamMainBase_Parms, NULL );

	return GetTeamMainBase_Parms.ReturnValue;
};

// Function RavagedGame.R_Objective_VehicleFactory.ChangeTeam
// [0x00020002] 
// Parameters infos:
// unsigned char                  T                              ( CPF_Parm )

void AR_Objective_VehicleFactory::ChangeTeam ( unsigned char T )
{
	static UFunction* pFnChangeTeam = NULL;

	if ( ! pFnChangeTeam )
		pFnChangeTeam = (UFunction*) UObject::GObjObjects()->Data[ 85216 ];

	AR_Objective_VehicleFactory_execChangeTeam_Parms ChangeTeam_Parms;
	ChangeTeam_Parms.T = T;

	this->ProcessEvent ( pFnChangeTeam, &ChangeTeam_Parms, NULL );
};

// Function RavagedGame.R_VehicleFactory.GameIsReady
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_VehicleFactory::GameIsReady ( )
{
	static UFunction* pFnGameIsReady = NULL;

	if ( ! pFnGameIsReady )
		pFnGameIsReady = (UFunction*) UObject::GObjObjects()->Data[ 85209 ];

	AR_VehicleFactory_execGameIsReady_Parms GameIsReady_Parms;

	this->ProcessEvent ( pFnGameIsReady, &GameIsReady_Parms, NULL );

	return GameIsReady_Parms.ReturnValue;
};

// Function RavagedGame.R_VehicleFactory.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AR_VehicleFactory::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 85208 ];

	AR_VehicleFactory_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_Thrust_ControlPoint.InObjectiveReclaimArea
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool AR_Thrust_ControlPoint::InObjectiveReclaimArea ( class APawn* P )
{
	static UFunction* pFnInObjectiveReclaimArea = NULL;

	if ( ! pFnInObjectiveReclaimArea )
		pFnInObjectiveReclaimArea = (UFunction*) UObject::GObjObjects()->Data[ 80562 ];

	AR_Thrust_ControlPoint_execInObjectiveReclaimArea_Parms InObjectiveReclaimArea_Parms;
	InObjectiveReclaimArea_Parms.P = P;

	this->ProcessEvent ( pFnInObjectiveReclaimArea, &InObjectiveReclaimArea_Parms, NULL );

	return InObjectiveReclaimArea_Parms.ReturnValue;
};

// Function RavagedGame.R_Thrust_ControlPoint.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AR_Thrust_ControlPoint::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 86775 ];

	AR_Thrust_ControlPoint_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_TeamInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AR_TeamInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 86768 ];

	AR_TeamInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function RavagedGame.R_Message_Spawn.AnnouncementSound
// [0x00022002] 
// Parameters infos:
// class USoundNodeWave*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            MessageIndex                   ( CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

class USoundNodeWave* UR_Message_Spawn::AnnouncementSound ( int MessageIndex, class UObject* OptionalObject, class APlayerController* PC )
{
	static UFunction* pFnAnnouncementSound = NULL;

	if ( ! pFnAnnouncementSound )
		pFnAnnouncementSound = (UFunction*) UObject::GObjObjects()->Data[ 84854 ];

	UR_Message_Spawn_execAnnouncementSound_Parms AnnouncementSound_Parms;
	AnnouncementSound_Parms.MessageIndex = MessageIndex;
	AnnouncementSound_Parms.OptionalObject = OptionalObject;
	AnnouncementSound_Parms.PC = PC;

	this->ProcessEvent ( pFnAnnouncementSound, &AnnouncementSound_Parms, NULL );

	return AnnouncementSound_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_Spawn.ClientReceive
// [0x00026102] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void UR_Message_Spawn::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnClientReceive = NULL;

	if ( ! pFnClientReceive )
		pFnClientReceive = (UFunction*) UObject::GObjObjects()->Data[ 84847 ];

	UR_Message_Spawn_execClientReceive_Parms ClientReceive_Parms;
	ClientReceive_Parms.P = P;
	ClientReceive_Parms.Switch = Switch;
	ClientReceive_Parms.RelatedPRI = RelatedPRI;
	ClientReceive_Parms.RelatedPRI01 = RelatedPRI01;
	ClientReceive_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnClientReceive, &ClientReceive_Parms, NULL );
};

// Function RavagedGame.R_Message_Spawn.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString UR_Message_Spawn::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 84840 ];

	UR_Message_Spawn_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_Thrust.AddAnnouncement
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AUTAnnouncer*            Announcer                      ( CPF_Parm )
// int                            MessageIndex                   ( CPF_Parm )
// class APlayerReplicationInfo*  PRI                            ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

bool UR_Message_Thrust::AddAnnouncement ( class AUTAnnouncer* Announcer, int MessageIndex, class APlayerReplicationInfo* PRI, class UObject* OptionalObject )
{
	static UFunction* pFnAddAnnouncement = NULL;

	if ( ! pFnAddAnnouncement )
		pFnAddAnnouncement = (UFunction*) UObject::GObjObjects()->Data[ 84923 ];

	UR_Message_Thrust_execAddAnnouncement_Parms AddAnnouncement_Parms;
	AddAnnouncement_Parms.Announcer = Announcer;
	AddAnnouncement_Parms.MessageIndex = MessageIndex;
	AddAnnouncement_Parms.PRI = PRI;
	AddAnnouncement_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnAddAnnouncement, &AddAnnouncement_Parms, NULL );

	return AddAnnouncement_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_Thrust.ShouldBeRemoved
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AUTQueuedAnnouncement*   MyAnnouncement                 ( CPF_Parm )
// class UClass*                  NewAnnouncementClass           ( CPF_Parm )
// int                            NewMessageIndex                ( CPF_Parm )

bool UR_Message_Thrust::ShouldBeRemoved ( class AUTQueuedAnnouncement* MyAnnouncement, class UClass* NewAnnouncementClass, int NewMessageIndex )
{
	static UFunction* pFnShouldBeRemoved = NULL;

	if ( ! pFnShouldBeRemoved )
		pFnShouldBeRemoved = (UFunction*) UObject::GObjObjects()->Data[ 84918 ];

	UR_Message_Thrust_execShouldBeRemoved_Parms ShouldBeRemoved_Parms;
	ShouldBeRemoved_Parms.MyAnnouncement = MyAnnouncement;
	ShouldBeRemoved_Parms.NewAnnouncementClass = NewAnnouncementClass;
	ShouldBeRemoved_Parms.NewMessageIndex = NewMessageIndex;

	this->ProcessEvent ( pFnShouldBeRemoved, &ShouldBeRemoved_Parms, NULL );

	return ShouldBeRemoved_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_Thrust.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString UR_Message_Thrust::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 84911 ];

	UR_Message_Thrust_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_Thrust.AnnouncementLevel
// [0x00022002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  MessageIndex                   ( CPF_Parm )

unsigned char UR_Message_Thrust::AnnouncementLevel ( unsigned char MessageIndex )
{
	static UFunction* pFnAnnouncementLevel = NULL;

	if ( ! pFnAnnouncementLevel )
		pFnAnnouncementLevel = (UFunction*) UObject::GObjObjects()->Data[ 84908 ];

	UR_Message_Thrust_execAnnouncementLevel_Parms AnnouncementLevel_Parms;
	AnnouncementLevel_Parms.MessageIndex = MessageIndex;

	this->ProcessEvent ( pFnAnnouncementLevel, &AnnouncementLevel_Parms, NULL );

	return AnnouncementLevel_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_Thrust.AnnouncementSound
// [0x00022002] 
// Parameters infos:
// class USoundNodeWave*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            MessageIndex                   ( CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

class USoundNodeWave* UR_Message_Thrust::AnnouncementSound ( int MessageIndex, class UObject* OptionalObject, class APlayerController* PC )
{
	static UFunction* pFnAnnouncementSound = NULL;

	if ( ! pFnAnnouncementSound )
		pFnAnnouncementSound = (UFunction*) UObject::GObjObjects()->Data[ 84902 ];

	UR_Message_Thrust_execAnnouncementSound_Parms AnnouncementSound_Parms;
	AnnouncementSound_Parms.MessageIndex = MessageIndex;
	AnnouncementSound_Parms.OptionalObject = OptionalObject;
	AnnouncementSound_Parms.PC = PC;

	this->ProcessEvent ( pFnAnnouncementSound, &AnnouncementSound_Parms, NULL );

	return AnnouncementSound_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_Thrust.ClientReceive
// [0x00026102] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void UR_Message_Thrust::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnClientReceive = NULL;

	if ( ! pFnClientReceive )
		pFnClientReceive = (UFunction*) UObject::GObjObjects()->Data[ 84895 ];

	UR_Message_Thrust_execClientReceive_Parms ClientReceive_Parms;
	ClientReceive_Parms.P = P;
	ClientReceive_Parms.Switch = Switch;
	ClientReceive_Parms.RelatedPRI = RelatedPRI;
	ClientReceive_Parms.RelatedPRI01 = RelatedPRI01;
	ClientReceive_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnClientReceive, &ClientReceive_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.ToggleShowHelp
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_SpecPlayerController::ToggleShowHelp ( )
{
	static UFunction* pFnToggleShowHelp = NULL;

	if ( ! pFnToggleShowHelp )
		pFnToggleShowHelp = (UFunction*) UObject::GObjObjects()->Data[ 86748 ];

	AR_SpecPlayerController_execToggleShowHelp_Parms ToggleShowHelp_Parms;

	this->ProcessEvent ( pFnToggleShowHelp, &ToggleShowHelp_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.DrawHUD
// [0x00020002] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AR_SpecPlayerController::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 86739 ];

	AR_SpecPlayerController_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.ServerUpdateCamera
// [0x00220042] 
// Parameters infos:
// struct FVector                 CamLoc                         ( CPF_Parm )
// int                            CamPitchAndYaw                 ( CPF_Parm )

void AR_SpecPlayerController::ServerUpdateCamera ( struct FVector CamLoc, int CamPitchAndYaw )
{
	static UFunction* pFnServerUpdateCamera = NULL;

	if ( ! pFnServerUpdateCamera )
		pFnServerUpdateCamera = (UFunction*) UObject::GObjObjects()->Data[ 86736 ];

	AR_SpecPlayerController_execServerUpdateCamera_Parms ServerUpdateCamera_Parms;
	memcpy ( &ServerUpdateCamera_Parms.CamLoc, &CamLoc, 0xC );
	ServerUpdateCamera_Parms.CamPitchAndYaw = CamPitchAndYaw;

	this->ProcessEvent ( pFnServerUpdateCamera, &ServerUpdateCamera_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_SpecPlayerController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 86735 ];

	AR_SpecPlayerController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.ServerJoinGame
// [0x002200C2] 
// Parameters infos:

void AR_SpecPlayerController::ServerJoinGame ( )
{
	static UFunction* pFnServerJoinGame = NULL;

	if ( ! pFnServerJoinGame )
		pFnServerJoinGame = (UFunction*) UObject::GObjObjects()->Data[ 86734 ];

	AR_SpecPlayerController_execServerJoinGame_Parms ServerJoinGame_Parms;

	this->ProcessEvent ( pFnServerJoinGame, &ServerJoinGame_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.JoinGame
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AR_SpecPlayerController::JoinGame ( )
{
	static UFunction* pFnJoinGame = NULL;

	if ( ! pFnJoinGame )
		pFnJoinGame = (UFunction*) UObject::GObjObjects()->Data[ 86733 ];

	AR_SpecPlayerController_execJoinGame_Parms JoinGame_Parms;

	this->ProcessEvent ( pFnJoinGame, &JoinGame_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.ProcessViewRotation
// [0x00420002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )

void AR_SpecPlayerController::ProcessViewRotation ( float DeltaTime, struct FRotator DeltaRot, struct FRotator* out_ViewRotation )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 86728 ];

	AR_SpecPlayerController_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;
	memcpy ( &ProcessViewRotation_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );
};

// Function RavagedGame.R_SpecPlayerController.ProcessMove
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// unsigned char                  DoubleClickMove                ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )

void AR_SpecPlayerController::ProcessMove ( float DeltaTime, struct FVector newAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot )
{
	static UFunction* pFnProcessMove = NULL;

	if ( ! pFnProcessMove )
		pFnProcessMove = (UFunction*) UObject::GObjObjects()->Data[ 86723 ];

	AR_SpecPlayerController_execProcessMove_Parms ProcessMove_Parms;
	ProcessMove_Parms.DeltaTime = DeltaTime;
	memcpy ( &ProcessMove_Parms.newAccel, &newAccel, 0xC );
	ProcessMove_Parms.DoubleClickMove = DoubleClickMove;
	memcpy ( &ProcessMove_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnProcessMove, &ProcessMove_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.ClientUpdatePosition
// [0x00020002] 
// Parameters infos:

void AR_SpecPlayerController::ClientUpdatePosition ( )
{
	static UFunction* pFnClientUpdatePosition = NULL;

	if ( ! pFnClientUpdatePosition )
		pFnClientUpdatePosition = (UFunction*) UObject::GObjObjects()->Data[ 86722 ];

	AR_SpecPlayerController_execClientUpdatePosition_Parms ClientUpdatePosition_Parms;

	this->ProcessEvent ( pFnClientUpdatePosition, &ClientUpdatePosition_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.PlayerTick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void AR_SpecPlayerController::eventPlayerTick ( float DeltaTime )
{
	static UFunction* pFnPlayerTick = NULL;

	if ( ! pFnPlayerTick )
		pFnPlayerTick = (UFunction*) UObject::GObjObjects()->Data[ 86720 ];

	AR_SpecPlayerController_eventPlayerTick_Parms PlayerTick_Parms;
	PlayerTick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerTick, &PlayerTick_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.SetBehindView
// [0x00020002] 
// Parameters infos:
// unsigned long                  bNewBehindView                 ( CPF_Parm )

void AR_SpecPlayerController::SetBehindView ( unsigned long bNewBehindView )
{
	static UFunction* pFnSetBehindView = NULL;

	if ( ! pFnSetBehindView )
		pFnSetBehindView = (UFunction*) UObject::GObjObjects()->Data[ 86716 ];

	AR_SpecPlayerController_execSetBehindView_Parms SetBehindView_Parms;
	SetBehindView_Parms.bNewBehindView = bNewBehindView;

	this->ProcessEvent ( pFnSetBehindView, &SetBehindView_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.CyclePerspective
// [0x00020102] 
// Parameters infos:

void AR_SpecPlayerController::CyclePerspective ( )
{
	static UFunction* pFnCyclePerspective = NULL;

	if ( ! pFnCyclePerspective )
		pFnCyclePerspective = (UFunction*) UObject::GObjObjects()->Data[ 86715 ];

	AR_SpecPlayerController_execCyclePerspective_Parms CyclePerspective_Parms;

	this->ProcessEvent ( pFnCyclePerspective, &CyclePerspective_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.ClientSetViewTarget
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// class AActor*                  A                              ( CPF_Parm )
// struct FViewTargetTransitionParams TransitionParams               ( CPF_OptionalParm | CPF_Parm )

void AR_SpecPlayerController::eventClientSetViewTarget ( class AActor* A, struct FViewTargetTransitionParams TransitionParams )
{
	static UFunction* pFnClientSetViewTarget = NULL;

	if ( ! pFnClientSetViewTarget )
		pFnClientSetViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 86712 ];

	AR_SpecPlayerController_eventClientSetViewTarget_Parms ClientSetViewTarget_Parms;
	ClientSetViewTarget_Parms.A = A;
	memcpy ( &ClientSetViewTarget_Parms.TransitionParams, &TransitionParams, 0x10 );

	this->ProcessEvent ( pFnClientSetViewTarget, &ClientSetViewTarget_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.FollowNextPlayer
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void AR_SpecPlayerController::FollowNextPlayer ( )
{
	static UFunction* pFnFollowNextPlayer = NULL;

	if ( ! pFnFollowNextPlayer )
		pFnFollowNextPlayer = (UFunction*) UObject::GObjObjects()->Data[ 86698 ];

	AR_SpecPlayerController_execFollowNextPlayer_Parms FollowNextPlayer_Parms;

	this->ProcessEvent ( pFnFollowNextPlayer, &FollowNextPlayer_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.FollowPreviousPlayer
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void AR_SpecPlayerController::FollowPreviousPlayer ( )
{
	static UFunction* pFnFollowPreviousPlayer = NULL;

	if ( ! pFnFollowPreviousPlayer )
		pFnFollowPreviousPlayer = (UFunction*) UObject::GObjObjects()->Data[ 86697 ];

	AR_SpecPlayerController_execFollowPreviousPlayer_Parms FollowPreviousPlayer_Parms;

	this->ProcessEvent ( pFnFollowPreviousPlayer, &FollowPreviousPlayer_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.NextPlayerFollowFarViewDist
// [0x00020002] 
// Parameters infos:
// float                          Amount                         ( CPF_Parm )

void AR_SpecPlayerController::NextPlayerFollowFarViewDist ( float Amount )
{
	static UFunction* pFnNextPlayerFollowFarViewDist = NULL;

	if ( ! pFnNextPlayerFollowFarViewDist )
		pFnNextPlayerFollowFarViewDist = (UFunction*) UObject::GObjObjects()->Data[ 86695 ];

	AR_SpecPlayerController_execNextPlayerFollowFarViewDist_Parms NextPlayerFollowFarViewDist_Parms;
	NextPlayerFollowFarViewDist_Parms.Amount = Amount;

	this->ProcessEvent ( pFnNextPlayerFollowFarViewDist, &NextPlayerFollowFarViewDist_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.NextCamSpeed
// [0x00020102] 
// Parameters infos:

void AR_SpecPlayerController::NextCamSpeed ( )
{
	static UFunction* pFnNextCamSpeed = NULL;

	if ( ! pFnNextCamSpeed )
		pFnNextCamSpeed = (UFunction*) UObject::GObjObjects()->Data[ 86694 ];

	AR_SpecPlayerController_execNextCamSpeed_Parms NextCamSpeed_Parms;

	this->ProcessEvent ( pFnNextCamSpeed, &NextCamSpeed_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.UnSprintPressed
// [0x00020102] 
// Parameters infos:

void AR_SpecPlayerController::UnSprintPressed ( )
{
	static UFunction* pFnUnSprintPressed = NULL;

	if ( ! pFnUnSprintPressed )
		pFnUnSprintPressed = (UFunction*) UObject::GObjObjects()->Data[ 86693 ];

	AR_SpecPlayerController_execUnSprintPressed_Parms UnSprintPressed_Parms;

	this->ProcessEvent ( pFnUnSprintPressed, &UnSprintPressed_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.SprintPressed
// [0x00020102] 
// Parameters infos:

void AR_SpecPlayerController::SprintPressed ( )
{
	static UFunction* pFnSprintPressed = NULL;

	if ( ! pFnSprintPressed )
		pFnSprintPressed = (UFunction*) UObject::GObjObjects()->Data[ 86692 ];

	AR_SpecPlayerController_execSprintPressed_Parms SprintPressed_Parms;

	this->ProcessEvent ( pFnSprintPressed, &SprintPressed_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.SelectNextCP
// [0x00020002] 
// Parameters infos:
// int                            Dir                            ( CPF_Parm )

void AR_SpecPlayerController::SelectNextCP ( int Dir )
{
	static UFunction* pFnSelectNextCP = NULL;

	if ( ! pFnSelectNextCP )
		pFnSelectNextCP = (UFunction*) UObject::GObjObjects()->Data[ 86689 ];

	AR_SpecPlayerController_execSelectNextCP_Parms SelectNextCP_Parms;
	SelectNextCP_Parms.Dir = Dir;

	this->ProcessEvent ( pFnSelectNextCP, &SelectNextCP_Parms, NULL );
};

// Function RavagedGame.R_SpecPlayerController.ToggleViewCPs
// [0x00020002] 
// Parameters infos:

void AR_SpecPlayerController::ToggleViewCPs ( )
{
	static UFunction* pFnToggleViewCPs = NULL;

	if ( ! pFnToggleViewCPs )
		pFnToggleViewCPs = (UFunction*) UObject::GObjObjects()->Data[ 86688 ];

	AR_SpecPlayerController_execToggleViewCPs_Parms ToggleViewCPs_Parms;

	this->ProcessEvent ( pFnToggleViewCPs, &ToggleViewCPs_Parms, NULL );
};

// Function RavagedGame.R_KillAssistMessage.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString UR_KillAssistMessage::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 84564 ];

	UR_KillAssistMessage_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_TeamScore.GetColor
// [0x00026002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FColor UR_Message_TeamScore::GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetColor = NULL;

	if ( ! pFnGetColor )
		pFnGetColor = (UFunction*) UObject::GObjObjects()->Data[ 84880 ];

	UR_Message_TeamScore_execGetColor_Parms GetColor_Parms;
	GetColor_Parms.Switch = Switch;
	GetColor_Parms.RelatedPRI = RelatedPRI;
	GetColor_Parms.RelatedPRI01 = RelatedPRI01;
	GetColor_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetColor, &GetColor_Parms, NULL );

	return GetColor_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_TeamScore.AnnouncementSound
// [0x00022002] 
// Parameters infos:
// class USoundNodeWave*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            MessageIndex                   ( CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

class USoundNodeWave* UR_Message_TeamScore::AnnouncementSound ( int MessageIndex, class UObject* OptionalObject, class APlayerController* PC )
{
	static UFunction* pFnAnnouncementSound = NULL;

	if ( ! pFnAnnouncementSound )
		pFnAnnouncementSound = (UFunction*) UObject::GObjObjects()->Data[ 84874 ];

	UR_Message_TeamScore_execAnnouncementSound_Parms AnnouncementSound_Parms;
	AnnouncementSound_Parms.MessageIndex = MessageIndex;
	AnnouncementSound_Parms.OptionalObject = OptionalObject;
	AnnouncementSound_Parms.PC = PC;

	this->ProcessEvent ( pFnAnnouncementSound, &AnnouncementSound_Parms, NULL );

	return AnnouncementSound_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_TeamScore.ClientReceive
// [0x00026102] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void UR_Message_TeamScore::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnClientReceive = NULL;

	if ( ! pFnClientReceive )
		pFnClientReceive = (UFunction*) UObject::GObjObjects()->Data[ 84867 ];

	UR_Message_TeamScore_execClientReceive_Parms ClientReceive_Parms;
	ClientReceive_Parms.P = P;
	ClientReceive_Parms.Switch = Switch;
	ClientReceive_Parms.RelatedPRI = RelatedPRI;
	ClientReceive_Parms.RelatedPRI01 = RelatedPRI01;
	ClientReceive_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnClientReceive, &ClientReceive_Parms, NULL );
};

// Function RavagedGame.R_Message_TeamScore.AnnouncementLevel
// [0x00022002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  MessageIndex                   ( CPF_Parm )

unsigned char UR_Message_TeamScore::AnnouncementLevel ( unsigned char MessageIndex )
{
	static UFunction* pFnAnnouncementLevel = NULL;

	if ( ! pFnAnnouncementLevel )
		pFnAnnouncementLevel = (UFunction*) UObject::GObjObjects()->Data[ 84864 ];

	UR_Message_TeamScore_execAnnouncementLevel_Parms AnnouncementLevel_Parms;
	AnnouncementLevel_Parms.MessageIndex = MessageIndex;

	this->ProcessEvent ( pFnAnnouncementLevel, &AnnouncementLevel_Parms, NULL );

	return AnnouncementLevel_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_Victory.AnnouncementSound
// [0x00022002] 
// Parameters infos:
// class USoundNodeWave*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            MessageIndex                   ( CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

class USoundNodeWave* UR_Message_Victory::AnnouncementSound ( int MessageIndex, class UObject* OptionalObject, class APlayerController* PC )
{
	static UFunction* pFnAnnouncementSound = NULL;

	if ( ! pFnAnnouncementSound )
		pFnAnnouncementSound = (UFunction*) UObject::GObjObjects()->Data[ 84981 ];

	UR_Message_Victory_execAnnouncementSound_Parms AnnouncementSound_Parms;
	AnnouncementSound_Parms.MessageIndex = MessageIndex;
	AnnouncementSound_Parms.OptionalObject = OptionalObject;
	AnnouncementSound_Parms.PC = PC;

	this->ProcessEvent ( pFnAnnouncementSound, &AnnouncementSound_Parms, NULL );

	return AnnouncementSound_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_Death.ClientReceive
// [0x00026002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void UR_Message_Death::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnClientReceive = NULL;

	if ( ! pFnClientReceive )
		pFnClientReceive = (UFunction*) UObject::GObjObjects()->Data[ 84757 ];

	UR_Message_Death_execClientReceive_Parms ClientReceive_Parms;
	ClientReceive_Parms.P = P;
	ClientReceive_Parms.Switch = Switch;
	ClientReceive_Parms.RelatedPRI = RelatedPRI;
	ClientReceive_Parms.RelatedPRI01 = RelatedPRI01;
	ClientReceive_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnClientReceive, &ClientReceive_Parms, NULL );
};

// Function RavagedGame.R_GRI_CTR.VehicleResourcesUpdated
// [0x00020102] 
// Parameters infos:
// class AR_Vehicle*              veh                            ( CPF_Parm )

void AR_GRI_CTR::VehicleResourcesUpdated ( class AR_Vehicle* veh )
{
	static UFunction* pFnVehicleResourcesUpdated = NULL;

	if ( ! pFnVehicleResourcesUpdated )
		pFnVehicleResourcesUpdated = (UFunction*) UObject::GObjObjects()->Data[ 84124 ];

	AR_GRI_CTR_execVehicleResourcesUpdated_Parms VehicleResourcesUpdated_Parms;
	VehicleResourcesUpdated_Parms.veh = veh;

	this->ProcessEvent ( pFnVehicleResourcesUpdated, &VehicleResourcesUpdated_Parms, NULL );
};

// Function RavagedGame.R_GRI_CTR.CollectControlPoints
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_GRI_CTR::CollectControlPoints ( )
{
	static UFunction* pFnCollectControlPoints = NULL;

	if ( ! pFnCollectControlPoints )
		pFnCollectControlPoints = (UFunction*) UObject::GObjObjects()->Data[ 84118 ];

	AR_GRI_CTR_execCollectControlPoints_Parms CollectControlPoints_Parms;

	this->ProcessEvent ( pFnCollectControlPoints, &CollectControlPoints_Parms, NULL );

	return CollectControlPoints_Parms.ReturnValue;
};

// Function RavagedGame.R_GRI_CTR.CPsInitCheck
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_GRI_CTR::CPsInitCheck ( )
{
	static UFunction* pFnCPsInitCheck = NULL;

	if ( ! pFnCPsInitCheck )
		pFnCPsInitCheck = (UFunction*) UObject::GObjObjects()->Data[ 84116 ];

	AR_GRI_CTR_execCPsInitCheck_Parms CPsInitCheck_Parms;

	this->ProcessEvent ( pFnCPsInitCheck, &CPsInitCheck_Parms, NULL );

	return CPsInitCheck_Parms.ReturnValue;
};

// Function RavagedGame.R_GRI_CTR.GetCTRBases
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_GRI_CTR::GetCTRBases ( )
{
	static UFunction* pFnGetCTRBases = NULL;

	if ( ! pFnGetCTRBases )
		pFnGetCTRBases = (UFunction*) UObject::GObjObjects()->Data[ 84113 ];

	AR_GRI_CTR_execGetCTRBases_Parms GetCTRBases_Parms;

	this->ProcessEvent ( pFnGetCTRBases, &GetCTRBases_Parms, NULL );

	return GetCTRBases_Parms.ReturnValue;
};

// Function RavagedGame.R_GRI_CTR.GetResourcedVehicles
// [0x00020102] 
// Parameters infos:

void AR_GRI_CTR::GetResourcedVehicles ( )
{
	static UFunction* pFnGetResourcedVehicles = NULL;

	if ( ! pFnGetResourcedVehicles )
		pFnGetResourcedVehicles = (UFunction*) UObject::GObjObjects()->Data[ 84111 ];

	AR_GRI_CTR_execGetResourcedVehicles_Parms GetResourcedVehicles_Parms;

	this->ProcessEvent ( pFnGetResourcedVehicles, &GetResourcedVehicles_Parms, NULL );
};

// Function RavagedGame.R_GRI_CTR.RegisterResource
// [0x00020102] 
// Parameters infos:
// class AR_Object_CTR*           rsrc                           ( CPF_Parm )

void AR_GRI_CTR::RegisterResource ( class AR_Object_CTR* rsrc )
{
	static UFunction* pFnRegisterResource = NULL;

	if ( ! pFnRegisterResource )
		pFnRegisterResource = (UFunction*) UObject::GObjObjects()->Data[ 84109 ];

	AR_GRI_CTR_execRegisterResource_Parms RegisterResource_Parms;
	RegisterResource_Parms.rsrc = rsrc;

	this->ProcessEvent ( pFnRegisterResource, &RegisterResource_Parms, NULL );
};

// Function RavagedGame.R_GRI_CTR.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AR_GRI_CTR::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 84108 ];

	AR_GRI_CTR_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_GRI_CTR.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AR_GRI_CTR::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 84106 ];

	AR_GRI_CTR_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function RavagedGame.R_MapInfo.VerifyMapExtent
// [0x00020102] 
// Parameters infos:

void UR_MapInfo::VerifyMapExtent ( )
{
	static UFunction* pFnVerifyMapExtent = NULL;

	if ( ! pFnVerifyMapExtent )
		pFnVerifyMapExtent = (UFunction*) UObject::GObjObjects()->Data[ 84620 ];

	UR_MapInfo_execVerifyMapExtent_Parms VerifyMapExtent_Parms;

	this->ProcessEvent ( pFnVerifyMapExtent, &VerifyMapExtent_Parms, NULL );
};

// Function RavagedGame.R_Message_CTR.AddAnnouncement
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AUTAnnouncer*            Announcer                      ( CPF_Parm )
// int                            MessageIndex                   ( CPF_Parm )
// class APlayerReplicationInfo*  PRI                            ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

bool UR_Message_CTR::AddAnnouncement ( class AUTAnnouncer* Announcer, int MessageIndex, class APlayerReplicationInfo* PRI, class UObject* OptionalObject )
{
	static UFunction* pFnAddAnnouncement = NULL;

	if ( ! pFnAddAnnouncement )
		pFnAddAnnouncement = (UFunction*) UObject::GObjObjects()->Data[ 84733 ];

	UR_Message_CTR_execAddAnnouncement_Parms AddAnnouncement_Parms;
	AddAnnouncement_Parms.Announcer = Announcer;
	AddAnnouncement_Parms.MessageIndex = MessageIndex;
	AddAnnouncement_Parms.PRI = PRI;
	AddAnnouncement_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnAddAnnouncement, &AddAnnouncement_Parms, NULL );

	return AddAnnouncement_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_CTR.ShouldRemoveResourceAnnouncement
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            MyMessageIndex                 ( CPF_Parm )
// class UClass*                  NewAnnouncementClass           ( CPF_Parm )
// int                            NewMessageIndex                ( CPF_Parm )

bool UR_Message_CTR::ShouldRemoveResourceAnnouncement ( int MyMessageIndex, class UClass* NewAnnouncementClass, int NewMessageIndex )
{
	static UFunction* pFnShouldRemoveResourceAnnouncement = NULL;

	if ( ! pFnShouldRemoveResourceAnnouncement )
		pFnShouldRemoveResourceAnnouncement = (UFunction*) UObject::GObjObjects()->Data[ 84728 ];

	UR_Message_CTR_execShouldRemoveResourceAnnouncement_Parms ShouldRemoveResourceAnnouncement_Parms;
	ShouldRemoveResourceAnnouncement_Parms.MyMessageIndex = MyMessageIndex;
	ShouldRemoveResourceAnnouncement_Parms.NewAnnouncementClass = NewAnnouncementClass;
	ShouldRemoveResourceAnnouncement_Parms.NewMessageIndex = NewMessageIndex;

	this->ProcessEvent ( pFnShouldRemoveResourceAnnouncement, &ShouldRemoveResourceAnnouncement_Parms, NULL );

	return ShouldRemoveResourceAnnouncement_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_CTR.ShouldBeRemoved
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AUTQueuedAnnouncement*   MyAnnouncement                 ( CPF_Parm )
// class UClass*                  NewAnnouncementClass           ( CPF_Parm )
// int                            NewMessageIndex                ( CPF_Parm )

bool UR_Message_CTR::ShouldBeRemoved ( class AUTQueuedAnnouncement* MyAnnouncement, class UClass* NewAnnouncementClass, int NewMessageIndex )
{
	static UFunction* pFnShouldBeRemoved = NULL;

	if ( ! pFnShouldBeRemoved )
		pFnShouldBeRemoved = (UFunction*) UObject::GObjObjects()->Data[ 84723 ];

	UR_Message_CTR_execShouldBeRemoved_Parms ShouldBeRemoved_Parms;
	ShouldBeRemoved_Parms.MyAnnouncement = MyAnnouncement;
	ShouldBeRemoved_Parms.NewAnnouncementClass = NewAnnouncementClass;
	ShouldBeRemoved_Parms.NewMessageIndex = NewMessageIndex;

	this->ProcessEvent ( pFnShouldBeRemoved, &ShouldBeRemoved_Parms, NULL );

	return ShouldBeRemoved_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_CTR.AnnouncementLevel
// [0x00022002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  MessageIndex                   ( CPF_Parm )

unsigned char UR_Message_CTR::AnnouncementLevel ( unsigned char MessageIndex )
{
	static UFunction* pFnAnnouncementLevel = NULL;

	if ( ! pFnAnnouncementLevel )
		pFnAnnouncementLevel = (UFunction*) UObject::GObjObjects()->Data[ 84720 ];

	UR_Message_CTR_execAnnouncementLevel_Parms AnnouncementLevel_Parms;
	AnnouncementLevel_Parms.MessageIndex = MessageIndex;

	this->ProcessEvent ( pFnAnnouncementLevel, &AnnouncementLevel_Parms, NULL );

	return AnnouncementLevel_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_CTR.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString UR_Message_CTR::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 84713 ];

	UR_Message_CTR_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_CTR.AnnouncementSound
// [0x00022002] 
// Parameters infos:
// class USoundNodeWave*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            MessageIndex                   ( CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

class USoundNodeWave* UR_Message_CTR::AnnouncementSound ( int MessageIndex, class UObject* OptionalObject, class APlayerController* PC )
{
	static UFunction* pFnAnnouncementSound = NULL;

	if ( ! pFnAnnouncementSound )
		pFnAnnouncementSound = (UFunction*) UObject::GObjObjects()->Data[ 84707 ];

	UR_Message_CTR_execAnnouncementSound_Parms AnnouncementSound_Parms;
	AnnouncementSound_Parms.MessageIndex = MessageIndex;
	AnnouncementSound_Parms.OptionalObject = OptionalObject;
	AnnouncementSound_Parms.PC = PC;

	this->ProcessEvent ( pFnAnnouncementSound, &AnnouncementSound_Parms, NULL );

	return AnnouncementSound_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_CTR.ClientReceive
// [0x00026102] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void UR_Message_CTR::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnClientReceive = NULL;

	if ( ! pFnClientReceive )
		pFnClientReceive = (UFunction*) UObject::GObjObjects()->Data[ 84700 ];

	UR_Message_CTR_execClientReceive_Parms ClientReceive_Parms;
	ClientReceive_Parms.P = P;
	ClientReceive_Parms.Switch = Switch;
	ClientReceive_Parms.RelatedPRI = RelatedPRI;
	ClientReceive_Parms.RelatedPRI01 = RelatedPRI01;
	ClientReceive_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnClientReceive, &ClientReceive_Parms, NULL );
};

// Function RavagedGame.R_Message_VehicleCTR.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString UR_Message_VehicleCTR::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 84973 ];

	UR_Message_VehicleCTR_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_VehicleCTR.AnnouncementSound
// [0x00022002] 
// Parameters infos:
// class USoundNodeWave*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            MessageIndex                   ( CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

class USoundNodeWave* UR_Message_VehicleCTR::AnnouncementSound ( int MessageIndex, class UObject* OptionalObject, class APlayerController* PC )
{
	static UFunction* pFnAnnouncementSound = NULL;

	if ( ! pFnAnnouncementSound )
		pFnAnnouncementSound = (UFunction*) UObject::GObjObjects()->Data[ 84967 ];

	UR_Message_VehicleCTR_execAnnouncementSound_Parms AnnouncementSound_Parms;
	AnnouncementSound_Parms.MessageIndex = MessageIndex;
	AnnouncementSound_Parms.OptionalObject = OptionalObject;
	AnnouncementSound_Parms.PC = PC;

	this->ProcessEvent ( pFnAnnouncementSound, &AnnouncementSound_Parms, NULL );

	return AnnouncementSound_Parms.ReturnValue;
};

// Function RavagedGame.R_TeamAI_CTR.GetPriorityFreelanceObjectiveFor
// [0x00020002] 
// Parameters infos:
// class AUTGameObjective*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AUTSquadAI*              InFreelanceSquad               ( CPF_Parm )

class AUTGameObjective* AR_TeamAI_CTR::GetPriorityFreelanceObjectiveFor ( class AUTSquadAI* InFreelanceSquad )
{
	static UFunction* pFnGetPriorityFreelanceObjectiveFor = NULL;

	if ( ! pFnGetPriorityFreelanceObjectiveFor )
		pFnGetPriorityFreelanceObjectiveFor = (UFunction*) UObject::GObjObjects()->Data[ 86764 ];

	AR_TeamAI_CTR_execGetPriorityFreelanceObjectiveFor_Parms GetPriorityFreelanceObjectiveFor_Parms;
	GetPriorityFreelanceObjectiveFor_Parms.InFreelanceSquad = InFreelanceSquad;

	this->ProcessEvent ( pFnGetPriorityFreelanceObjectiveFor, &GetPriorityFreelanceObjectiveFor_Parms, NULL );

	return GetPriorityFreelanceObjectiveFor_Parms.ReturnValue;
};

// Function RavagedGame.R_HUD_CTR.DrawHUD
// [0x00020102] 
// Parameters infos:

void AR_HUD_CTR::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 84514 ];

	AR_HUD_CTR_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function RavagedGame.R_HUD_CTR.DrawResourcedVehicles
// [0x00820102] 
// Parameters infos:
// int                            teamIdx                        ( CPF_Parm )

void AR_HUD_CTR::DrawResourcedVehicles ( int teamIdx )
{
	static UFunction* pFnDrawResourcedVehicles = NULL;

	if ( ! pFnDrawResourcedVehicles )
		pFnDrawResourcedVehicles = (UFunction*) UObject::GObjObjects()->Data[ 84510 ];

	AR_HUD_CTR_execDrawResourcedVehicles_Parms DrawResourcedVehicles_Parms;
	DrawResourcedVehicles_Parms.teamIdx = teamIdx;

	this->ProcessEvent ( pFnDrawResourcedVehicles, &DrawResourcedVehicles_Parms, NULL );
};

// Function RavagedGame.R_HUD_CTR.DrawControlPoints
// [0x00020102] 
// Parameters infos:
// int                            teamIdx                        ( CPF_Parm )

void AR_HUD_CTR::DrawControlPoints ( int teamIdx )
{
	static UFunction* pFnDrawControlPoints = NULL;

	if ( ! pFnDrawControlPoints )
		pFnDrawControlPoints = (UFunction*) UObject::GObjObjects()->Data[ 84487 ];

	AR_HUD_CTR_execDrawControlPoints_Parms DrawControlPoints_Parms;
	DrawControlPoints_Parms.teamIdx = teamIdx;

	this->ProcessEvent ( pFnDrawControlPoints, &DrawControlPoints_Parms, NULL );
};

// Function RavagedGame.R_HUD_CTR.GRIisReady
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_HUD_CTR::GRIisReady ( )
{
	static UFunction* pFnGRIisReady = NULL;

	if ( ! pFnGRIisReady )
		pFnGRIisReady = (UFunction*) UObject::GObjObjects()->Data[ 84485 ];

	AR_HUD_CTR_execGRIisReady_Parms GRIisReady_Parms;

	this->ProcessEvent ( pFnGRIisReady, &GRIisReady_Parms, NULL );

	return GRIisReady_Parms.ReturnValue;
};

// Function RavagedGame.R_Game_Thrust.EndGame
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

void AR_Game_Thrust::EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnEndGame = NULL;

	if ( ! pFnEndGame )
		pFnEndGame = (UFunction*) UObject::GObjObjects()->Data[ 80604 ];

	AR_Game_Thrust_execEndGame_Parms EndGame_Parms;
	EndGame_Parms.Winner = Winner;
	memcpy ( &EndGame_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnEndGame, &EndGame_Parms, NULL );
};

// Function RavagedGame.R_Game_Thrust.CheckEndGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

bool AR_Game_Thrust::CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnCheckEndGame = NULL;

	if ( ! pFnCheckEndGame )
		pFnCheckEndGame = (UFunction*) UObject::GObjObjects()->Data[ 80599 ];

	AR_Game_Thrust_execCheckEndGame_Parms CheckEndGame_Parms;
	CheckEndGame_Parms.Winner = Winner;
	memcpy ( &CheckEndGame_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCheckEndGame, &CheckEndGame_Parms, NULL );

	return CheckEndGame_Parms.ReturnValue;
};

// Function RavagedGame.R_Game_Thrust.RatePlayerStart
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerStart*            P                              ( CPF_Parm )
// unsigned char                  Team                           ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )

float AR_Game_Thrust::RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player )
{
	static UFunction* pFnRatePlayerStart = NULL;

	if ( ! pFnRatePlayerStart )
		pFnRatePlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 80590 ];

	AR_Game_Thrust_execRatePlayerStart_Parms RatePlayerStart_Parms;
	RatePlayerStart_Parms.P = P;
	RatePlayerStart_Parms.Team = Team;
	RatePlayerStart_Parms.Player = Player;

	this->ProcessEvent ( pFnRatePlayerStart, &RatePlayerStart_Parms, NULL );

	return RatePlayerStart_Parms.ReturnValue;
};

// Function RavagedGame.R_Game_Thrust.InitGame
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AR_Game_Thrust::eventInitGame ( struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnInitGame = NULL;

	if ( ! pFnInitGame )
		pFnInitGame = (UFunction*) UObject::GObjObjects()->Data[ 80587 ];

	AR_Game_Thrust_eventInitGame_Parms InitGame_Parms;
	memcpy ( &InitGame_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnInitGame, &InitGame_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &InitGame_Parms.ErrorMessage, 0xC );
};

// Function RavagedGame.R_Game_Thrust.OnDestroy
// [0x00020102] 
// Parameters infos:
// class USeqAct_Destroy*         Action                         ( CPF_Parm )

void AR_Game_Thrust::OnDestroy ( class USeqAct_Destroy* Action )
{
	static UFunction* pFnOnDestroy = NULL;

	if ( ! pFnOnDestroy )
		pFnOnDestroy = (UFunction*) UObject::GObjObjects()->Data[ 80571 ];

	AR_Game_Thrust_execOnDestroy_Parms OnDestroy_Parms;
	OnDestroy_Parms.Action = Action;

	this->ProcessEvent ( pFnOnDestroy, &OnDestroy_Parms, NULL );
};

// Function RavagedGame.R_Game_Thrust.MatchStarting
// [0x00020002] 
// Parameters infos:

void AR_Game_Thrust::MatchStarting ( )
{
	static UFunction* pFnMatchStarting = NULL;

	if ( ! pFnMatchStarting )
		pFnMatchStarting = (UFunction*) UObject::GObjObjects()->Data[ 80570 ];

	AR_Game_Thrust_execMatchStarting_Parms MatchStarting_Parms;

	this->ProcessEvent ( pFnMatchStarting, &MatchStarting_Parms, NULL );
};

// Function RavagedGame.R_Game_Thrust.ShutDown
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AR_Game_Thrust::eventShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 80569 ];

	AR_Game_Thrust_eventShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function RavagedGame.R_Game_Thrust.Reset
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AR_Game_Thrust::eventReset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 80568 ];

	AR_Game_Thrust_eventReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function RavagedGame.R_Game_Thrust.ReclaimTimeEnded
// [0x00020002] 
// Parameters infos:

void AR_Game_Thrust::ReclaimTimeEnded ( )
{
	static UFunction* pFnReclaimTimeEnded = NULL;

	if ( ! pFnReclaimTimeEnded )
		pFnReclaimTimeEnded = (UFunction*) UObject::GObjObjects()->Data[ 80565 ];

	AR_Game_Thrust_execReclaimTimeEnded_Parms ReclaimTimeEnded_Parms;

	this->ProcessEvent ( pFnReclaimTimeEnded, &ReclaimTimeEnded_Parms, NULL );
};

// Function RavagedGame.R_Game_Thrust.ReclaimBaseTimer
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AR_Game_Thrust::ReclaimBaseTimer ( )
{
	static UFunction* pFnReclaimBaseTimer = NULL;

	if ( ! pFnReclaimBaseTimer )
		pFnReclaimBaseTimer = (UFunction*) UObject::GObjObjects()->Data[ 80555 ];

	AR_Game_Thrust_execReclaimBaseTimer_Parms ReclaimBaseTimer_Parms;

	this->ProcessEvent ( pFnReclaimBaseTimer, &ReclaimBaseTimer_Parms, NULL );

	return ReclaimBaseTimer_Parms.ReturnValue;
};

// Function RavagedGame.R_Game_Thrust.BaseWasTaken
// [0x00020002] 
// Parameters infos:

void AR_Game_Thrust::BaseWasTaken ( )
{
	static UFunction* pFnBaseWasTaken = NULL;

	if ( ! pFnBaseWasTaken )
		pFnBaseWasTaken = (UFunction*) UObject::GObjObjects()->Data[ 80550 ];

	AR_Game_Thrust_execBaseWasTaken_Parms BaseWasTaken_Parms;

	this->ProcessEvent ( pFnBaseWasTaken, &BaseWasTaken_Parms, NULL );
};

// Function RavagedGame.R_Game_Thrust.CalcTeamScores
// [0x00020002] 
// Parameters infos:

void AR_Game_Thrust::CalcTeamScores ( )
{
	static UFunction* pFnCalcTeamScores = NULL;

	if ( ! pFnCalcTeamScores )
		pFnCalcTeamScores = (UFunction*) UObject::GObjObjects()->Data[ 80546 ];

	AR_Game_Thrust_execCalcTeamScores_Parms CalcTeamScores_Parms;

	this->ProcessEvent ( pFnCalcTeamScores, &CalcTeamScores_Parms, NULL );
};

// Function RavagedGame.R_Game_Thrust.ObjectiveCaptured
// [0x00024002] 
// Parameters infos:
// class AController*             Scorer                         ( CPF_Parm )
// class AR_Objective_ControlPoint* O                              ( CPF_Parm )
// unsigned long                  bAnnounce                      ( CPF_OptionalParm | CPF_Parm )

void AR_Game_Thrust::ObjectiveCaptured ( class AController* Scorer, class AR_Objective_ControlPoint* O, unsigned long bAnnounce )
{
	static UFunction* pFnObjectiveCaptured = NULL;

	if ( ! pFnObjectiveCaptured )
		pFnObjectiveCaptured = (UFunction*) UObject::GObjObjects()->Data[ 80536 ];

	AR_Game_Thrust_execObjectiveCaptured_Parms ObjectiveCaptured_Parms;
	ObjectiveCaptured_Parms.Scorer = Scorer;
	ObjectiveCaptured_Parms.O = O;
	ObjectiveCaptured_Parms.bAnnounce = bAnnounce;

	this->ProcessEvent ( pFnObjectiveCaptured, &ObjectiveCaptured_Parms, NULL );
};

// Function RavagedGame.R_Game_Thrust.CheckScore
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )

bool AR_Game_Thrust::CheckScore ( class APlayerReplicationInfo* Scorer )
{
	static UFunction* pFnCheckScore = NULL;

	if ( ! pFnCheckScore )
		pFnCheckScore = (UFunction*) UObject::GObjObjects()->Data[ 80529 ];

	AR_Game_Thrust_execCheckScore_Parms CheckScore_Parms;
	CheckScore_Parms.Scorer = Scorer;

	this->ProcessEvent ( pFnCheckScore, &CheckScore_Parms, NULL );

	return CheckScore_Parms.ReturnValue;
};

// Function RavagedGame.R_Game_Thrust.GetSeamlessTravelActorList
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bToEntry                       ( CPF_Parm )
// TArray< class AActor* >        ActorList                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AR_Game_Thrust::eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList )
{
	static UFunction* pFnGetSeamlessTravelActorList = NULL;

	if ( ! pFnGetSeamlessTravelActorList )
		pFnGetSeamlessTravelActorList = (UFunction*) UObject::GObjObjects()->Data[ 80521 ];

	AR_Game_Thrust_eventGetSeamlessTravelActorList_Parms GetSeamlessTravelActorList_Parms;
	GetSeamlessTravelActorList_Parms.bToEntry = bToEntry;

	this->ProcessEvent ( pFnGetSeamlessTravelActorList, &GetSeamlessTravelActorList_Parms, NULL );

	if ( ActorList )
		memcpy ( ActorList, &GetSeamlessTravelActorList_Parms.ActorList, 0xC );
};

// Function RavagedGame.R_GRI_Thrust.GetDefaultSpawn
// [0x00020002] 
// Parameters infos:
// class AR_Thrust_ControlPoint*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            curTeam                        ( CPF_Parm )

class AR_Thrust_ControlPoint* AR_GRI_Thrust::GetDefaultSpawn ( int curTeam )
{
	static UFunction* pFnGetDefaultSpawn = NULL;

	if ( ! pFnGetDefaultSpawn )
		pFnGetDefaultSpawn = (UFunction*) UObject::GObjObjects()->Data[ 84176 ];

	AR_GRI_Thrust_execGetDefaultSpawn_Parms GetDefaultSpawn_Parms;
	GetDefaultSpawn_Parms.curTeam = curTeam;

	this->ProcessEvent ( pFnGetDefaultSpawn, &GetDefaultSpawn_Parms, NULL );

	return GetDefaultSpawn_Parms.ReturnValue;
};

// Function RavagedGame.R_GRI_Thrust.CPsInitCheck
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_GRI_Thrust::CPsInitCheck ( )
{
	static UFunction* pFnCPsInitCheck = NULL;

	if ( ! pFnCPsInitCheck )
		pFnCPsInitCheck = (UFunction*) UObject::GObjObjects()->Data[ 84174 ];

	AR_GRI_Thrust_execCPsInitCheck_Parms CPsInitCheck_Parms;

	this->ProcessEvent ( pFnCPsInitCheck, &CPsInitCheck_Parms, NULL );

	return CPsInitCheck_Parms.ReturnValue;
};

// Function RavagedGame.R_GRI_Thrust.VerifyThrustSetup
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_GRI_Thrust::VerifyThrustSetup ( )
{
	static UFunction* pFnVerifyThrustSetup = NULL;

	if ( ! pFnVerifyThrustSetup )
		pFnVerifyThrustSetup = (UFunction*) UObject::GObjObjects()->Data[ 84172 ];

	AR_GRI_Thrust_execVerifyThrustSetup_Parms VerifyThrustSetup_Parms;

	this->ProcessEvent ( pFnVerifyThrustSetup, &VerifyThrustSetup_Parms, NULL );

	return VerifyThrustSetup_Parms.ReturnValue;
};

// Function RavagedGame.R_GRI_Thrust.ThrustOrderSort
// [0x00120102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AR_Thrust_ControlPoint*  A                              ( CPF_Parm )
// class AR_Thrust_ControlPoint*  B                              ( CPF_Parm )

int AR_GRI_Thrust::ThrustOrderSort ( class AR_Thrust_ControlPoint* A, class AR_Thrust_ControlPoint* B )
{
	static UFunction* pFnThrustOrderSort = NULL;

	if ( ! pFnThrustOrderSort )
		pFnThrustOrderSort = (UFunction*) UObject::GObjObjects()->Data[ 84129 ];

	AR_GRI_Thrust_execThrustOrderSort_Parms ThrustOrderSort_Parms;
	ThrustOrderSort_Parms.A = A;
	ThrustOrderSort_Parms.B = B;

	this->ProcessEvent ( pFnThrustOrderSort, &ThrustOrderSort_Parms, NULL );

	return ThrustOrderSort_Parms.ReturnValue;
};

// Function RavagedGame.R_GRI_Thrust.CollectControlPoints
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_GRI_Thrust::CollectControlPoints ( )
{
	static UFunction* pFnCollectControlPoints = NULL;

	if ( ! pFnCollectControlPoints )
		pFnCollectControlPoints = (UFunction*) UObject::GObjObjects()->Data[ 84162 ];

	AR_GRI_Thrust_execCollectControlPoints_Parms CollectControlPoints_Parms;

	this->ProcessEvent ( pFnCollectControlPoints, &CollectControlPoints_Parms, NULL );

	return CollectControlPoints_Parms.ReturnValue;
};

// Function RavagedGame.R_GRI_Thrust.UpdateControlPointPaths
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_GRI_Thrust::UpdateControlPointPaths ( )
{
	static UFunction* pFnUpdateControlPointPaths = NULL;

	if ( ! pFnUpdateControlPointPaths )
		pFnUpdateControlPointPaths = (UFunction*) UObject::GObjObjects()->Data[ 84150 ];

	AR_GRI_Thrust_execUpdateControlPointPaths_Parms UpdateControlPointPaths_Parms;

	this->ProcessEvent ( pFnUpdateControlPointPaths, &UpdateControlPointPaths_Parms, NULL );

	return UpdateControlPointPaths_Parms.ReturnValue;
};

// Function RavagedGame.R_GRI_Thrust.OwnAllOnThrustOrder
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AR_Thrust_ControlPoint*  cp                             ( CPF_Parm )
// unsigned char                  TeamNum                        ( CPF_Parm )

bool AR_GRI_Thrust::OwnAllOnThrustOrder ( class AR_Thrust_ControlPoint* cp, unsigned char TeamNum )
{
	static UFunction* pFnOwnAllOnThrustOrder = NULL;

	if ( ! pFnOwnAllOnThrustOrder )
		pFnOwnAllOnThrustOrder = (UFunction*) UObject::GObjObjects()->Data[ 84146 ];

	AR_GRI_Thrust_execOwnAllOnThrustOrder_Parms OwnAllOnThrustOrder_Parms;
	OwnAllOnThrustOrder_Parms.cp = cp;
	OwnAllOnThrustOrder_Parms.TeamNum = TeamNum;

	this->ProcessEvent ( pFnOwnAllOnThrustOrder, &OwnAllOnThrustOrder_Parms, NULL );

	return OwnAllOnThrustOrder_Parms.ReturnValue;
};

// Function RavagedGame.R_GRI_Thrust.CanTakeAnyOnThrustOrder
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AR_Thrust_ControlPoint*  cp                             ( CPF_Parm )
// unsigned char                  OtherTeam                      ( CPF_Parm )

bool AR_GRI_Thrust::CanTakeAnyOnThrustOrder ( class AR_Thrust_ControlPoint* cp, unsigned char OtherTeam )
{
	static UFunction* pFnCanTakeAnyOnThrustOrder = NULL;

	if ( ! pFnCanTakeAnyOnThrustOrder )
		pFnCanTakeAnyOnThrustOrder = (UFunction*) UObject::GObjObjects()->Data[ 84142 ];

	AR_GRI_Thrust_execCanTakeAnyOnThrustOrder_Parms CanTakeAnyOnThrustOrder_Parms;
	CanTakeAnyOnThrustOrder_Parms.cp = cp;
	CanTakeAnyOnThrustOrder_Parms.OtherTeam = OtherTeam;

	this->ProcessEvent ( pFnCanTakeAnyOnThrustOrder, &CanTakeAnyOnThrustOrder_Parms, NULL );

	return CanTakeAnyOnThrustOrder_Parms.ReturnValue;
};

// Function RavagedGame.R_GRI_Thrust.ControlPointTaken
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AR_Thrust_ControlPoint*  cp                             ( CPF_Parm )

bool AR_GRI_Thrust::ControlPointTaken ( class AR_Thrust_ControlPoint* cp )
{
	static UFunction* pFnControlPointTaken = NULL;

	if ( ! pFnControlPointTaken )
		pFnControlPointTaken = (UFunction*) UObject::GObjObjects()->Data[ 80543 ];

	AR_GRI_Thrust_execControlPointTaken_Parms ControlPointTaken_Parms;
	ControlPointTaken_Parms.cp = cp;

	this->ProcessEvent ( pFnControlPointTaken, &ControlPointTaken_Parms, NULL );

	return ControlPointTaken_Parms.ReturnValue;
};

// Function RavagedGame.R_GRI_Thrust.IsControlPointInChain
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AR_Thrust_ControlPoint*  cpChain                        ( CPF_Parm )
// class AR_Thrust_ControlPoint*  cpToFind                       ( CPF_Parm )

bool AR_GRI_Thrust::IsControlPointInChain ( class AR_Thrust_ControlPoint* cpChain, class AR_Thrust_ControlPoint* cpToFind )
{
	static UFunction* pFnIsControlPointInChain = NULL;

	if ( ! pFnIsControlPointInChain )
		pFnIsControlPointInChain = (UFunction*) UObject::GObjObjects()->Data[ 84135 ];

	AR_GRI_Thrust_execIsControlPointInChain_Parms IsControlPointInChain_Parms;
	IsControlPointInChain_Parms.cpChain = cpChain;
	IsControlPointInChain_Parms.cpToFind = cpToFind;

	this->ProcessEvent ( pFnIsControlPointInChain, &IsControlPointInChain_Parms, NULL );

	return IsControlPointInChain_Parms.ReturnValue;
};

// Function RavagedGame.R_GRI_Thrust.ClientReclaimBaseTimer
// [0x00020102] 
// Parameters infos:

void AR_GRI_Thrust::ClientReclaimBaseTimer ( )
{
	static UFunction* pFnClientReclaimBaseTimer = NULL;

	if ( ! pFnClientReclaimBaseTimer )
		pFnClientReclaimBaseTimer = (UFunction*) UObject::GObjObjects()->Data[ 84132 ];

	AR_GRI_Thrust_execClientReclaimBaseTimer_Parms ClientReclaimBaseTimer_Parms;

	this->ProcessEvent ( pFnClientReclaimBaseTimer, &ClientReclaimBaseTimer_Parms, NULL );
};

// Function RavagedGame.R_GRI_Thrust.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AR_GRI_Thrust::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 84130 ];

	AR_GRI_Thrust_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function RavagedGame.R_HUD_Thrust.DrawHUD
// [0x00020102] 
// Parameters infos:

void AR_HUD_Thrust::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 84528 ];

	AR_HUD_Thrust_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function RavagedGame.R_HUD_Thrust.DrawControlPoints
// [0x00020102] 
// Parameters infos:
// int                            teamIdx                        ( CPF_Parm )

void AR_HUD_Thrust::DrawControlPoints ( int teamIdx )
{
	static UFunction* pFnDrawControlPoints = NULL;

	if ( ! pFnDrawControlPoints )
		pFnDrawControlPoints = (UFunction*) UObject::GObjObjects()->Data[ 84522 ];

	AR_HUD_Thrust_execDrawControlPoints_Parms DrawControlPoints_Parms;
	DrawControlPoints_Parms.teamIdx = teamIdx;

	this->ProcessEvent ( pFnDrawControlPoints, &DrawControlPoints_Parms, NULL );
};

// Function RavagedGame.R_HUD_Thrust.GRIisReady
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_HUD_Thrust::GRIisReady ( )
{
	static UFunction* pFnGRIisReady = NULL;

	if ( ! pFnGRIisReady )
		pFnGRIisReady = (UFunction*) UObject::GObjObjects()->Data[ 84520 ];

	AR_HUD_Thrust_execGRIisReady_Parms GRIisReady_Parms;

	this->ProcessEvent ( pFnGRIisReady, &GRIisReady_Parms, NULL );

	return GRIisReady_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxChat.Spawn
// [0x00020002] 
// Parameters infos:

void UR_GFxChat::Spawn ( )
{
	static UFunction* pFnSpawn = NULL;

	if ( ! pFnSpawn )
		pFnSpawn = (UFunction*) UObject::GObjObjects()->Data[ 80697 ];

	UR_GFxChat_execSpawn_Parms Spawn_Parms;

	this->ProcessEvent ( pFnSpawn, &Spawn_Parms, NULL );
};

// Function RavagedGame.R_GFxChat.SendChatMessage
// [0x00020002] 
// Parameters infos:
// struct FString                 ChatMessageFromHud             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxChat::SendChatMessage ( struct FString ChatMessageFromHud )
{
	static UFunction* pFnSendChatMessage = NULL;

	if ( ! pFnSendChatMessage )
		pFnSendChatMessage = (UFunction*) UObject::GObjObjects()->Data[ 80695 ];

	UR_GFxChat_execSendChatMessage_Parms SendChatMessage_Parms;
	memcpy ( &SendChatMessage_Parms.ChatMessageFromHud, &ChatMessageFromHud, 0xC );

	this->ProcessEvent ( pFnSendChatMessage, &SendChatMessage_Parms, NULL );
};

// Function RavagedGame.R_GFxChat.ToggleChatting
// [0x00020002] 
// Parameters infos:
// unsigned long                  bChat                          ( CPF_Parm )

void UR_GFxChat::ToggleChatting ( unsigned long bChat )
{
	static UFunction* pFnToggleChatting = NULL;

	if ( ! pFnToggleChatting )
		pFnToggleChatting = (UFunction*) UObject::GObjObjects()->Data[ 80693 ];

	UR_GFxChat_execToggleChatting_Parms ToggleChatting_Parms;
	ToggleChatting_Parms.bChat = bChat;

	this->ProcessEvent ( pFnToggleChatting, &ToggleChatting_Parms, NULL );
};

// Function RavagedGame.R_GFxChat.BeginChat
// [0x00020002] 
// Parameters infos:

void UR_GFxChat::BeginChat ( )
{
	static UFunction* pFnBeginChat = NULL;

	if ( ! pFnBeginChat )
		pFnBeginChat = (UFunction*) UObject::GObjObjects()->Data[ 80692 ];

	UR_GFxChat_execBeginChat_Parms BeginChat_Parms;

	this->ProcessEvent ( pFnBeginChat, &BeginChat_Parms, NULL );
};

// Function RavagedGame.R_GFxChat.InitializeChat
// [0x00020002] 
// Parameters infos:
// unsigned char                  ChatType                       ( CPF_Parm )
// unsigned long                  SpawnMenuOpen                  ( CPF_Parm )

void UR_GFxChat::InitializeChat ( unsigned char ChatType, unsigned long SpawnMenuOpen )
{
	static UFunction* pFnInitializeChat = NULL;

	if ( ! pFnInitializeChat )
		pFnInitializeChat = (UFunction*) UObject::GObjObjects()->Data[ 80688 ];

	UR_GFxChat_execInitializeChat_Parms InitializeChat_Parms;
	InitializeChat_Parms.ChatType = ChatType;
	InitializeChat_Parms.SpawnMenuOpen = SpawnMenuOpen;

	this->ProcessEvent ( pFnInitializeChat, &InitializeChat_Parms, NULL );
};

// Function RavagedGame.R_GFxChat.FilterButtonInput
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   ButtonName                     ( CPF_Parm )
// unsigned char                  InputEvent                     ( CPF_Parm )

bool UR_GFxChat::eventFilterButtonInput ( int ControllerId, struct FName ButtonName, unsigned char InputEvent )
{
	static UFunction* pFnFilterButtonInput = NULL;

	if ( ! pFnFilterButtonInput )
		pFnFilterButtonInput = (UFunction*) UObject::GObjObjects()->Data[ 80680 ];

	UR_GFxChat_eventFilterButtonInput_Parms FilterButtonInput_Parms;
	FilterButtonInput_Parms.ControllerId = ControllerId;
	memcpy ( &FilterButtonInput_Parms.ButtonName, &ButtonName, 0x8 );
	FilterButtonInput_Parms.InputEvent = InputEvent;

	this->ProcessEvent ( pFnFilterButtonInput, &FilterButtonInput_Parms, NULL );

	return FilterButtonInput_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxChat.AddDeathMessage
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Killer                         ( CPF_Parm )
// class APlayerReplicationInfo*  Killed                         ( CPF_Parm )
// class UClass*                  Dmg                            ( CPF_Parm )

void UR_GFxChat::AddDeathMessage ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Killed, class UClass* Dmg )
{
	static UFunction* pFnAddDeathMessage = NULL;

	if ( ! pFnAddDeathMessage )
		pFnAddDeathMessage = (UFunction*) UObject::GObjObjects()->Data[ 80674 ];

	UR_GFxChat_execAddDeathMessage_Parms AddDeathMessage_Parms;
	AddDeathMessage_Parms.Killer = Killer;
	AddDeathMessage_Parms.Killed = Killed;
	AddDeathMessage_Parms.Dmg = Dmg;

	this->ProcessEvent ( pFnAddDeathMessage, &AddDeathMessage_Parms, NULL );
};

// Function RavagedGame.R_GFxChat.AddKillCrawlMessage
// [0x00820002] 
// Parameters infos:
// struct FString                 Type                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxChat::AddKillCrawlMessage ( struct FString Type, struct FString msg )
{
	static UFunction* pFnAddKillCrawlMessage = NULL;

	if ( ! pFnAddKillCrawlMessage )
		pFnAddKillCrawlMessage = (UFunction*) UObject::GObjObjects()->Data[ 80666 ];

	UR_GFxChat_execAddKillCrawlMessage_Parms AddKillCrawlMessage_Parms;
	memcpy ( &AddKillCrawlMessage_Parms.Type, &Type, 0xC );
	memcpy ( &AddKillCrawlMessage_Parms.msg, &msg, 0xC );

	this->ProcessEvent ( pFnAddKillCrawlMessage, &AddKillCrawlMessage_Parms, NULL );
};

// Function RavagedGame.R_GFxChat.AddMessage
// [0x00820002] 
// Parameters infos:
// struct FString                 Type                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxChat::AddMessage ( struct FString Type, struct FString msg )
{
	static UFunction* pFnAddMessage = NULL;

	if ( ! pFnAddMessage )
		pFnAddMessage = (UFunction*) UObject::GObjObjects()->Data[ 80658 ];

	UR_GFxChat_execAddMessage_Parms AddMessage_Parms;
	memcpy ( &AddMessage_Parms.Type, &Type, 0xC );
	memcpy ( &AddMessage_Parms.msg, &msg, 0xC );

	this->ProcessEvent ( pFnAddMessage, &AddMessage_Parms, NULL );
};

// Function RavagedGame.R_GFxChat.RemoveMessage
// [0x00020000] 
// Parameters infos:

void UR_GFxChat::RemoveMessage ( )
{
	static UFunction* pFnRemoveMessage = NULL;

	if ( ! pFnRemoveMessage )
		pFnRemoveMessage = (UFunction*) UObject::GObjObjects()->Data[ 80657 ];

	UR_GFxChat_execRemoveMessage_Parms RemoveMessage_Parms;

	this->ProcessEvent ( pFnRemoveMessage, &RemoveMessage_Parms, NULL );
};

// Function RavagedGame.R_GFxChat.FormatTime
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Seconds                        ( CPF_Parm )

struct FString UR_GFxChat::FormatTime ( int Seconds )
{
	static UFunction* pFnFormatTime = NULL;

	if ( ! pFnFormatTime )
		pFnFormatTime = (UFunction*) UObject::GObjObjects()->Data[ 80651 ];

	UR_GFxChat_execFormatTime_Parms FormatTime_Parms;
	FormatTime_Parms.Seconds = Seconds;

	this->ProcessEvent ( pFnFormatTime, &FormatTime_Parms, NULL );

	return FormatTime_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxChat.Init
// [0x00024002] 
// Parameters infos:
// class ULocalPlayer*            Player                         ( CPF_OptionalParm | CPF_Parm )

void UR_GFxChat::Init ( class ULocalPlayer* Player )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 80642 ];

	UR_GFxChat_execInit_Parms Init_Parms;
	Init_Parms.Player = Player;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function RavagedGame.R_GFxChat.InitDeathMessageRow
// [0x00820002] 
// Parameters infos:
// class UGFxObject*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UGFxObject* UR_GFxChat::InitDeathMessageRow ( )
{
	static UFunction* pFnInitDeathMessageRow = NULL;

	if ( ! pFnInitDeathMessageRow )
		pFnInitDeathMessageRow = (UFunction*) UObject::GObjObjects()->Data[ 80638 ];

	UR_GFxChat_execInitDeathMessageRow_Parms InitDeathMessageRow_Parms;

	this->ProcessEvent ( pFnInitDeathMessageRow, &InitDeathMessageRow_Parms, NULL );

	return InitDeathMessageRow_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxChat.InitMessageRow
// [0x00820002] 
// Parameters infos:
// class UGFxObject*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UGFxObject* UR_GFxChat::InitMessageRow ( )
{
	static UFunction* pFnInitMessageRow = NULL;

	if ( ! pFnInitMessageRow )
		pFnInitMessageRow = (UFunction*) UObject::GObjObjects()->Data[ 80630 ];

	UR_GFxChat_execInitMessageRow_Parms InitMessageRow_Parms;

	this->ProcessEvent ( pFnInitMessageRow, &InitMessageRow_Parms, NULL );

	return InitMessageRow_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxChat.CreateMessageRow
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Type                           ( CPF_Parm | CPF_NeedCtorLink )

class UGFxObject* UR_GFxChat::CreateMessageRow ( struct FString Type )
{
	static UFunction* pFnCreateMessageRow = NULL;

	if ( ! pFnCreateMessageRow )
		pFnCreateMessageRow = (UFunction*) UObject::GObjObjects()->Data[ 80625 ];

	UR_GFxChat_execCreateMessageRow_Parms CreateMessageRow_Parms;
	memcpy ( &CreateMessageRow_Parms.Type, &Type, 0xC );

	this->ProcessEvent ( pFnCreateMessageRow, &CreateMessageRow_Parms, NULL );

	return CreateMessageRow_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxChat.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxChat::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 80616 ];

	UR_GFxChat_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd.FilterButtonInput
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   ButtonName                     ( CPF_Parm )
// unsigned char                  InputEvent                     ( CPF_Parm )

bool UR_GFxFrontEnd::eventFilterButtonInput ( int ControllerId, struct FName ButtonName, unsigned char InputEvent )
{
	static UFunction* pFnFilterButtonInput = NULL;

	if ( ! pFnFilterButtonInput )
		pFnFilterButtonInput = (UFunction*) UObject::GObjObjects()->Data[ 80854 ];

	UR_GFxFrontEnd_eventFilterButtonInput_Parms FilterButtonInput_Parms;
	FilterButtonInput_Parms.ControllerId = ControllerId;
	memcpy ( &FilterButtonInput_Parms.ButtonName, &ButtonName, 0x8 );
	FilterButtonInput_Parms.InputEvent = InputEvent;

	this->ProcessEvent ( pFnFilterButtonInput, &FilterButtonInput_Parms, NULL );

	return FilterButtonInput_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd.DestroyDependantViews
// [0x00020001] ( FUNC_Final )
// Parameters infos:
// struct FName                   InViewName                     ( CPF_Parm )

void UR_GFxFrontEnd::DestroyDependantViews ( struct FName InViewName )
{
	static UFunction* pFnDestroyDependantViews = NULL;

	if ( ! pFnDestroyDependantViews )
		pFnDestroyDependantViews = (UFunction*) UObject::GObjObjects()->Data[ 80852 ];

	UR_GFxFrontEnd_execDestroyDependantViews_Parms DestroyDependantViews_Parms;
	memcpy ( &DestroyDependantViews_Parms.InViewName, &InViewName, 0x8 );

	this->ProcessEvent ( pFnDestroyDependantViews, &DestroyDependantViews_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.LoadDependantViews
// [0x00020001] ( FUNC_Final )
// Parameters infos:
// struct FName                   InViewName                     ( CPF_Parm )

void UR_GFxFrontEnd::LoadDependantViews ( struct FName InViewName )
{
	static UFunction* pFnLoadDependantViews = NULL;

	if ( ! pFnLoadDependantViews )
		pFnLoadDependantViews = (UFunction*) UObject::GObjObjects()->Data[ 80850 ];

	UR_GFxFrontEnd_execLoadDependantViews_Parms LoadDependantViews_Parms;
	memcpy ( &LoadDependantViews_Parms.InViewName, &InViewName, 0x8 );

	this->ProcessEvent ( pFnLoadDependantViews, &LoadDependantViews_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.ResetTopBarIndex
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd::ResetTopBarIndex ( )
{
	static UFunction* pFnResetTopBarIndex = NULL;

	if ( ! pFnResetTopBarIndex )
		pFnResetTopBarIndex = (UFunction*) UObject::GObjObjects()->Data[ 80848 ];

	UR_GFxFrontEnd_execResetTopBarIndex_Parms ResetTopBarIndex_Parms;

	this->ProcessEvent ( pFnResetTopBarIndex, &ResetTopBarIndex_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.CheckErrorMessage
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UR_GFxFrontEnd::CheckErrorMessage ( )
{
	static UFunction* pFnCheckErrorMessage = NULL;

	if ( ! pFnCheckErrorMessage )
		pFnCheckErrorMessage = (UFunction*) UObject::GObjObjects()->Data[ 80844 ];

	UR_GFxFrontEnd_execCheckErrorMessage_Parms CheckErrorMessage_Parms;

	this->ProcessEvent ( pFnCheckErrorMessage, &CheckErrorMessage_Parms, NULL );

	return CheckErrorMessage_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 80838 ];

	UR_GFxFrontEnd_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd.CheckLinkConnectionAndError
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 AlternateTitle                 ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 AlternateMessage               ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UR_GFxFrontEnd::CheckLinkConnectionAndError ( struct FString AlternateTitle, struct FString AlternateMessage )
{
	static UFunction* pFnCheckLinkConnectionAndError = NULL;

	if ( ! pFnCheckLinkConnectionAndError )
		pFnCheckLinkConnectionAndError = (UFunction*) UObject::GObjObjects()->Data[ 80832 ];

	UR_GFxFrontEnd_execCheckLinkConnectionAndError_Parms CheckLinkConnectionAndError_Parms;
	memcpy ( &CheckLinkConnectionAndError_Parms.AlternateTitle, &AlternateTitle, 0xC );
	memcpy ( &CheckLinkConnectionAndError_Parms.AlternateMessage, &AlternateMessage, 0xC );

	this->ProcessEvent ( pFnCheckLinkConnectionAndError, &CheckLinkConnectionAndError_Parms, NULL );

	return CheckLinkConnectionAndError_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd.RestoreFocus
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd::RestoreFocus ( )
{
	static UFunction* pFnRestoreFocus = NULL;

	if ( ! pFnRestoreFocus )
		pFnRestoreFocus = (UFunction*) UObject::GObjObjects()->Data[ 80831 ];

	UR_GFxFrontEnd_execRestoreFocus_Parms RestoreFocus_Parms;

	this->ProcessEvent ( pFnRestoreFocus, &RestoreFocus_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.PostWidgetInit
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd::PostWidgetInit ( )
{
	static UFunction* pFnPostWidgetInit = NULL;

	if ( ! pFnPostWidgetInit )
		pFnPostWidgetInit = (UFunction*) UObject::GObjObjects()->Data[ 80830 ];

	UR_GFxFrontEnd_execPostWidgetInit_Parms PostWidgetInit_Parms;

	this->ProcessEvent ( pFnPostWidgetInit, &PostWidgetInit_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.ASShowCursor
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bShowCursor                    ( CPF_Parm )

void UR_GFxFrontEnd::ASShowCursor ( unsigned long bShowCursor )
{
	static UFunction* pFnASShowCursor = NULL;

	if ( ! pFnASShowCursor )
		pFnASShowCursor = (UFunction*) UObject::GObjObjects()->Data[ 80721 ];

	UR_GFxFrontEnd_execASShowCursor_Parms ASShowCursor_Parms;
	ASShowCursor_Parms.bShowCursor = bShowCursor;

	this->ProcessEvent ( pFnASShowCursor, &ASShowCursor_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.ConfigureView
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UR_GFxFrontEnd_View*     InView                         ( CPF_Parm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )

void UR_GFxFrontEnd::ConfigureView ( class UR_GFxFrontEnd_View* InView, struct FName WidgetName, struct FName WidgetPath )
{
	static UFunction* pFnConfigureView = NULL;

	if ( ! pFnConfigureView )
		pFnConfigureView = (UFunction*) UObject::GObjObjects()->Data[ 80824 ];

	UR_GFxFrontEnd_execConfigureView_Parms ConfigureView_Parms;
	ConfigureView_Parms.InView = InView;
	memcpy ( &ConfigureView_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &ConfigureView_Parms.WidgetPath, &WidgetPath, 0x8 );

	this->ProcessEvent ( pFnConfigureView, &ConfigureView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.UpdateViewLayout
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UR_GFxFrontEnd::UpdateViewLayout ( )
{
	static UFunction* pFnUpdateViewLayout = NULL;

	if ( ! pFnUpdateViewLayout )
		pFnUpdateViewLayout = (UFunction*) UObject::GObjObjects()->Data[ 80823 ];

	UR_GFxFrontEnd_execUpdateViewLayout_Parms UpdateViewLayout_Parms;

	this->ProcessEvent ( pFnUpdateViewLayout, &UpdateViewLayout_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.PopViewStub
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UGFxObject*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UGFxObject* UR_GFxFrontEnd::PopViewStub ( )
{
	static UFunction* pFnPopViewStub = NULL;

	if ( ! pFnPopViewStub )
		pFnPopViewStub = (UFunction*) UObject::GObjObjects()->Data[ 80821 ];

	UR_GFxFrontEnd_execPopViewStub_Parms PopViewStub_Parms;

	this->ProcessEvent ( pFnPopViewStub, &PopViewStub_Parms, NULL );

	return PopViewStub_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd.PopView
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UGFxObject* UR_GFxFrontEnd::PopView ( )
{
	static UFunction* pFnPopView = NULL;

	if ( ! pFnPopView )
		pFnPopView = (UFunction*) UObject::GObjObjects()->Data[ 80800 ];

	UR_GFxFrontEnd_execPopView_Parms PopView_Parms;

	this->ProcessEvent ( pFnPopView, &PopView_Parms, NULL );

	return PopView_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd.ReportViewData
// [0x00024002] 
// Parameters infos:
// struct FString                 Label                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd::ReportViewData ( struct FString Label )
{
	static UFunction* pFnReportViewData = NULL;

	if ( ! pFnReportViewData )
		pFnReportViewData = (UFunction*) UObject::GObjObjects()->Data[ 80818 ];

	UR_GFxFrontEnd_execReportViewData_Parms ReportViewData_Parms;
	memcpy ( &ReportViewData_Parms.Label, &Label, 0xC );

	this->ProcessEvent ( pFnReportViewData, &ReportViewData_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.ASSetSelectionFocus
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              MovieClip                      ( CPF_Parm )

void UR_GFxFrontEnd::ASSetSelectionFocus ( class UGFxObject* MovieClip )
{
	static UFunction* pFnASSetSelectionFocus = NULL;

	if ( ! pFnASSetSelectionFocus )
		pFnASSetSelectionFocus = (UFunction*) UObject::GObjObjects()->Data[ 80816 ];

	UR_GFxFrontEnd_execASSetSelectionFocus_Parms ASSetSelectionFocus_Parms;
	ASSetSelectionFocus_Parms.MovieClip = MovieClip;

	this->ProcessEvent ( pFnASSetSelectionFocus, &ASSetSelectionFocus_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.SetSelectionFocus
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              MovieClip                      ( CPF_Parm | CPF_CoerceParm )

void UR_GFxFrontEnd::SetSelectionFocus ( class UGFxObject* MovieClip )
{
	static UFunction* pFnSetSelectionFocus = NULL;

	if ( ! pFnSetSelectionFocus )
		pFnSetSelectionFocus = (UFunction*) UObject::GObjObjects()->Data[ 80814 ];

	UR_GFxFrontEnd_execSetSelectionFocus_Parms SetSelectionFocus_Parms;
	SetSelectionFocus_Parms.MovieClip = MovieClip;

	this->ProcessEvent ( pFnSetSelectionFocus, &SetSelectionFocus_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.PushDialogView
// [0x00020002] 
// Parameters infos:
// class UR_GFxFrontEnd_View*     dialogView                     ( CPF_Parm | CPF_CoerceParm )

void UR_GFxFrontEnd::PushDialogView ( class UR_GFxFrontEnd_View* dialogView )
{
	static UFunction* pFnPushDialogView = NULL;

	if ( ! pFnPushDialogView )
		pFnPushDialogView = (UFunction*) UObject::GObjObjects()->Data[ 80812 ];

	UR_GFxFrontEnd_execPushDialogView_Parms PushDialogView_Parms;
	PushDialogView_Parms.dialogView = dialogView;

	this->ProcessEvent ( pFnPushDialogView, &PushDialogView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.PushView
// [0x00020002] 
// Parameters infos:
// class UR_GFxFrontEnd_View*     TargetView                     ( CPF_Parm | CPF_CoerceParm )

void UR_GFxFrontEnd::PushView ( class UR_GFxFrontEnd_View* TargetView )
{
	static UFunction* pFnPushView = NULL;

	if ( ! pFnPushView )
		pFnPushView = (UFunction*) UObject::GObjObjects()->Data[ 80810 ];

	UR_GFxFrontEnd_execPushView_Parms PushView_Parms;
	PushView_Parms.TargetView = TargetView;

	this->ProcessEvent ( pFnPushView, &PushView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.IsViewAllowed
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UR_GFxFrontEnd_View*     TargetView                     ( CPF_Parm )

bool UR_GFxFrontEnd::IsViewAllowed ( class UR_GFxFrontEnd_View* TargetView )
{
	static UFunction* pFnIsViewAllowed = NULL;

	if ( ! pFnIsViewAllowed )
		pFnIsViewAllowed = (UFunction*) UObject::GObjObjects()->Data[ 80804 ];

	UR_GFxFrontEnd_execIsViewAllowed_Parms IsViewAllowed_Parms;
	IsViewAllowed_Parms.TargetView = TargetView;

	this->ProcessEvent ( pFnIsViewAllowed, &IsViewAllowed_Parms, NULL );

	return IsViewAllowed_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd.ConfigureTargetView
// [0x00020002] 
// Parameters infos:
// class UR_GFxFrontEnd_View*     TargetView                     ( CPF_Parm )

void UR_GFxFrontEnd::ConfigureTargetView ( class UR_GFxFrontEnd_View* TargetView )
{
	static UFunction* pFnConfigureTargetView = NULL;

	if ( ! pFnConfigureTargetView )
		pFnConfigureTargetView = (UFunction*) UObject::GObjObjects()->Data[ 80802 ];

	UR_GFxFrontEnd_execConfigureTargetView_Parms ConfigureTargetView_Parms;
	ConfigureTargetView_Parms.TargetView = TargetView;

	this->ProcessEvent ( pFnConfigureTargetView, &ConfigureTargetView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.ConfigureTargetDialog
// [0x00020002] 
// Parameters infos:
// class UR_GFxFrontEnd_View*     TargetDialog                   ( CPF_Parm | CPF_CoerceParm )

void UR_GFxFrontEnd::ConfigureTargetDialog ( class UR_GFxFrontEnd_View* TargetDialog )
{
	static UFunction* pFnConfigureTargetDialog = NULL;

	if ( ! pFnConfigureTargetDialog )
		pFnConfigureTargetDialog = (UFunction*) UObject::GObjObjects()->Data[ 80798 ];

	UR_GFxFrontEnd_execConfigureTargetDialog_Parms ConfigureTargetDialog_Parms;
	ConfigureTargetDialog_Parms.TargetDialog = TargetDialog;

	this->ProcessEvent ( pFnConfigureTargetDialog, &ConfigureTargetDialog_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.SpawnDialog
// [0x00024002] 
// Parameters infos:
// class UR_GFxFrontEnd_Dialog*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   TargetDialogName               ( CPF_Parm )
// class UR_GFxFrontEnd_Screen*   ParentView                     ( CPF_OptionalParm | CPF_Parm )

class UR_GFxFrontEnd_Dialog* UR_GFxFrontEnd::SpawnDialog ( struct FName TargetDialogName, class UR_GFxFrontEnd_Screen* ParentView )
{
	static UFunction* pFnSpawnDialog = NULL;

	if ( ! pFnSpawnDialog )
		pFnSpawnDialog = (UFunction*) UObject::GObjObjects()->Data[ 80794 ];

	UR_GFxFrontEnd_execSpawnDialog_Parms SpawnDialog_Parms;
	memcpy ( &SpawnDialog_Parms.TargetDialogName, &TargetDialogName, 0x8 );
	SpawnDialog_Parms.ParentView = ParentView;

	this->ProcessEvent ( pFnSpawnDialog, &SpawnDialog_Parms, NULL );

	return SpawnDialog_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd.PushViewByName
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   TargetViewName                 ( CPF_Parm )

void UR_GFxFrontEnd::PushViewByName ( struct FName TargetViewName )
{
	static UFunction* pFnPushViewByName = NULL;

	if ( ! pFnPushViewByName )
		pFnPushViewByName = (UFunction*) UObject::GObjObjects()->Data[ 80792 ];

	UR_GFxFrontEnd_execPushViewByName_Parms PushViewByName_Parms;
	memcpy ( &PushViewByName_Parms.TargetViewName, &TargetViewName, 0x8 );

	this->ProcessEvent ( pFnPushViewByName, &PushViewByName_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.SetEscapeDelegate
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd::SetEscapeDelegate ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnSetEscapeDelegate = NULL;

	if ( ! pFnSetEscapeDelegate )
		pFnSetEscapeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 80789 ];

	UR_GFxFrontEnd_execSetEscapeDelegate_Parms SetEscapeDelegate_Parms;
	memcpy ( &SetEscapeDelegate_Parms.InDelegate, &InDelegate, 0xC );

	this->ProcessEvent ( pFnSetEscapeDelegate, &SetEscapeDelegate_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.IsViewLoaded
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InViewName                     ( CPF_Parm )

bool UR_GFxFrontEnd::IsViewLoaded ( struct FName InViewName )
{
	static UFunction* pFnIsViewLoaded = NULL;

	if ( ! pFnIsViewLoaded )
		pFnIsViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 80785 ];

	UR_GFxFrontEnd_execIsViewLoaded_Parms IsViewLoaded_Parms;
	memcpy ( &IsViewLoaded_Parms.InViewName, &InViewName, 0x8 );

	this->ProcessEvent ( pFnIsViewLoaded, &IsViewLoaded_Parms, NULL );

	return IsViewLoaded_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd.LoadView
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct UR_GFxFrontEnd_FViewInfo InViewInfo                     ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd::LoadView ( struct UR_GFxFrontEnd_FViewInfo InViewInfo )
{
	static UFunction* pFnLoadView = NULL;

	if ( ! pFnLoadView )
		pFnLoadView = (UFunction*) UObject::GObjObjects()->Data[ 80729 ];

	UR_GFxFrontEnd_execLoadView_Parms LoadView_Parms;
	memcpy ( &LoadView_Parms.InViewInfo, &InViewInfo, 0x20 );

	this->ProcessEvent ( pFnLoadView, &LoadView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.LoadViews
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UR_GFxFrontEnd::LoadViews ( )
{
	static UFunction* pFnLoadViews = NULL;

	if ( ! pFnLoadViews )
		pFnLoadViews = (UFunction*) UObject::GObjObjects()->Data[ 80723 ];

	UR_GFxFrontEnd_execLoadViews_Parms LoadViews_Parms;

	this->ProcessEvent ( pFnLoadViews, &LoadViews_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.ConfigFrontEnd
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UR_GFxFrontEnd::ConfigFrontEnd ( )
{
	static UFunction* pFnConfigFrontEnd = NULL;

	if ( ! pFnConfigFrontEnd )
		pFnConfigFrontEnd = (UFunction*) UObject::GObjObjects()->Data[ 80718 ];

	UR_GFxFrontEnd_execConfigFrontEnd_Parms ConfigFrontEnd_Parms;

	this->ProcessEvent ( pFnConfigFrontEnd, &ConfigFrontEnd_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd.Start
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  StartPaused                    ( CPF_OptionalParm | CPF_Parm )

bool UR_GFxFrontEnd::Start ( unsigned long StartPaused )
{
	static UFunction* pFnStart = NULL;

	if ( ! pFnStart )
		pFnStart = (UFunction*) UObject::GObjObjects()->Data[ 80713 ];

	UR_GFxFrontEnd_execStart_Parms Start_Parms;
	Start_Parms.StartPaused = StartPaused;

	this->ProcessEvent ( pFnStart, &Start_Parms, NULL );

	return Start_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd.EscapeDelegate
// [0x00120000] 
// Parameters infos:

void UR_GFxFrontEnd::EscapeDelegate ( )
{
	static UFunction* pFnEscapeDelegate = NULL;

	if ( ! pFnEscapeDelegate )
		pFnEscapeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 80716 ];

	UR_GFxFrontEnd_execEscapeDelegate_Parms EscapeDelegate_Parms;

	this->ProcessEvent ( pFnEscapeDelegate, &EscapeDelegate_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_View.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_View::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 80877 ];

	UR_GFxFrontEnd_View_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_View.OnEscapeKeyPress
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_View::OnEscapeKeyPress ( )
{
	static UFunction* pFnOnEscapeKeyPress = NULL;

	if ( ! pFnOnEscapeKeyPress )
		pFnOnEscapeKeyPress = (UFunction*) UObject::GObjObjects()->Data[ 80876 ];

	UR_GFxFrontEnd_View_execOnEscapeKeyPress_Parms OnEscapeKeyPress_Parms;

	this->ProcessEvent ( pFnOnEscapeKeyPress, &OnEscapeKeyPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_View.MoveBackImpl
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_View::MoveBackImpl ( )
{
	static UFunction* pFnMoveBackImpl = NULL;

	if ( ! pFnMoveBackImpl )
		pFnMoveBackImpl = (UFunction*) UObject::GObjObjects()->Data[ 80875 ];

	UR_GFxFrontEnd_View_execMoveBackImpl_Parms MoveBackImpl_Parms;

	this->ProcessEvent ( pFnMoveBackImpl, &MoveBackImpl_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_View.Select_Back
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_View::Select_Back ( struct FEventData ev )
{
	static UFunction* pFnSelect_Back = NULL;

	if ( ! pFnSelect_Back )
		pFnSelect_Back = (UFunction*) UObject::GObjObjects()->Data[ 80873 ];

	UR_GFxFrontEnd_View_execSelect_Back_Parms Select_Back_Parms;
	memcpy ( &Select_Back_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnSelect_Back, &Select_Back_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_View.PlayCloseAnimation
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd_View::PlayCloseAnimation ( )
{
	static UFunction* pFnPlayCloseAnimation = NULL;

	if ( ! pFnPlayCloseAnimation )
		pFnPlayCloseAnimation = (UFunction*) UObject::GObjObjects()->Data[ 80872 ];

	UR_GFxFrontEnd_View_execPlayCloseAnimation_Parms PlayCloseAnimation_Parms;

	this->ProcessEvent ( pFnPlayCloseAnimation, &PlayCloseAnimation_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_View.PlayOpenAnimation
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd_View::PlayOpenAnimation ( )
{
	static UFunction* pFnPlayOpenAnimation = NULL;

	if ( ! pFnPlayOpenAnimation )
		pFnPlayOpenAnimation = (UFunction*) UObject::GObjObjects()->Data[ 80871 ];

	UR_GFxFrontEnd_View_execPlayOpenAnimation_Parms PlayOpenAnimation_Parms;

	this->ProcessEvent ( pFnPlayOpenAnimation, &PlayOpenAnimation_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_View.DisableSubComponents
// [0x00020000] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_View::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 80869 ];

	UR_GFxFrontEnd_View_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_View.OnViewClosed
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_View::OnViewClosed ( )
{
	static UFunction* pFnOnViewClosed = NULL;

	if ( ! pFnOnViewClosed )
		pFnOnViewClosed = (UFunction*) UObject::GObjObjects()->Data[ 80868 ];

	UR_GFxFrontEnd_View_execOnViewClosed_Parms OnViewClosed_Parms;

	this->ProcessEvent ( pFnOnViewClosed, &OnViewClosed_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_View.OnViewActivated
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd_View::OnViewActivated ( )
{
	static UFunction* pFnOnViewActivated = NULL;

	if ( ! pFnOnViewActivated )
		pFnOnViewActivated = (UFunction*) UObject::GObjObjects()->Data[ 80867 ];

	UR_GFxFrontEnd_View_execOnViewActivated_Parms OnViewActivated_Parms;

	this->ProcessEvent ( pFnOnViewActivated, &OnViewActivated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_View.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_View::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 80865 ];

	UR_GFxFrontEnd_View_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_View.OnViewLoaded
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd_View::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 80864 ];

	UR_GFxFrontEnd_View_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_PasswordDialog.Select_Cancel
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_PasswordDialog::Select_Cancel ( struct FEventData ev )
{
	static UFunction* pFnSelect_Cancel = NULL;

	if ( ! pFnSelect_Cancel )
		pFnSelect_Cancel = (UFunction*) UObject::GObjObjects()->Data[ 82295 ];

	UR_GFxFrontEnd_PasswordDialog_execSelect_Cancel_Parms Select_Cancel_Parms;
	memcpy ( &Select_Cancel_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnSelect_Cancel, &Select_Cancel_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_PasswordDialog.SetCancelButton_OnPress
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         EventListener                  ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_PasswordDialog::SetCancelButton_OnPress ( struct FScriptDelegate EventListener )
{
	static UFunction* pFnSetCancelButton_OnPress = NULL;

	if ( ! pFnSetCancelButton_OnPress )
		pFnSetCancelButton_OnPress = (UFunction*) UObject::GObjObjects()->Data[ 82293 ];

	UR_GFxFrontEnd_PasswordDialog_execSetCancelButton_OnPress_Parms SetCancelButton_OnPress_Parms;
	memcpy ( &SetCancelButton_OnPress_Parms.EventListener, &EventListener, 0xC );

	this->ProcessEvent ( pFnSetCancelButton_OnPress, &SetCancelButton_OnPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_PasswordDialog.SetCancelButton
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class UGFxObject*              InBackButton                   ( CPF_Parm )

void UR_GFxFrontEnd_PasswordDialog::SetCancelButton ( class UGFxObject* InBackButton )
{
	static UFunction* pFnSetCancelButton = NULL;

	if ( ! pFnSetCancelButton )
		pFnSetCancelButton = (UFunction*) UObject::GObjObjects()->Data[ 82291 ];

	UR_GFxFrontEnd_PasswordDialog_execSetCancelButton_Parms SetCancelButton_Parms;
	SetCancelButton_Parms.InBackButton = InBackButton;

	this->ProcessEvent ( pFnSetCancelButton, &SetCancelButton_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_PasswordDialog.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_PasswordDialog::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 82285 ];

	UR_GFxFrontEnd_PasswordDialog_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_PasswordDialog.ClearPasswordRenderer
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UR_GFxFrontEnd_PasswordDialog::ClearPasswordRenderer ( )
{
	static UFunction* pFnClearPasswordRenderer = NULL;

	if ( ! pFnClearPasswordRenderer )
		pFnClearPasswordRenderer = (UFunction*) UObject::GObjObjects()->Data[ 82276 ];

	UR_GFxFrontEnd_PasswordDialog_execClearPasswordRenderer_Parms ClearPasswordRenderer_Parms;

	this->ProcessEvent ( pFnClearPasswordRenderer, &ClearPasswordRenderer_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_PasswordDialog.GetPassword
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UR_GFxFrontEnd_PasswordDialog::GetPassword ( )
{
	static UFunction* pFnGetPassword = NULL;

	if ( ! pFnGetPassword )
		pFnGetPassword = (UFunction*) UObject::GObjObjects()->Data[ 81588 ];

	UR_GFxFrontEnd_PasswordDialog_execGetPassword_Parms GetPassword_Parms;

	this->ProcessEvent ( pFnGetPassword, &GetPassword_Parms, NULL );

	return GetPassword_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_PasswordDialog.SetOKButtonListener
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         DelegateListener               ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_PasswordDialog::SetOKButtonListener ( struct FScriptDelegate DelegateListener )
{
	static UFunction* pFnSetOKButtonListener = NULL;

	if ( ! pFnSetOKButtonListener )
		pFnSetOKButtonListener = (UFunction*) UObject::GObjObjects()->Data[ 82283 ];

	UR_GFxFrontEnd_PasswordDialog_execSetOKButtonListener_Parms SetOKButtonListener_Parms;
	memcpy ( &SetOKButtonListener_Parms.DelegateListener, &DelegateListener, 0xC );

	this->ProcessEvent ( pFnSetOKButtonListener, &SetOKButtonListener_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_PasswordDialog.SetCancelButtonListener
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         DelegateListener               ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_PasswordDialog::SetCancelButtonListener ( struct FScriptDelegate DelegateListener )
{
	static UFunction* pFnSetCancelButtonListener = NULL;

	if ( ! pFnSetCancelButtonListener )
		pFnSetCancelButtonListener = (UFunction*) UObject::GObjObjects()->Data[ 82281 ];

	UR_GFxFrontEnd_PasswordDialog_execSetCancelButtonListener_Parms SetCancelButtonListener_Parms;
	memcpy ( &SetCancelButtonListener_Parms.DelegateListener, &DelegateListener, 0xC );

	this->ProcessEvent ( pFnSetCancelButtonListener, &SetCancelButtonListener_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_PasswordDialog.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bEnableComponents              ( CPF_Parm )

void UR_GFxFrontEnd_PasswordDialog::DisableSubComponents ( unsigned long bEnableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 82279 ];

	UR_GFxFrontEnd_PasswordDialog_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bEnableComponents = bEnableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_PasswordDialog.OnEscapeKeyPress
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_PasswordDialog::OnEscapeKeyPress ( )
{
	static UFunction* pFnOnEscapeKeyPress = NULL;

	if ( ! pFnOnEscapeKeyPress )
		pFnOnEscapeKeyPress = (UFunction*) UObject::GObjObjects()->Data[ 82278 ];

	UR_GFxFrontEnd_PasswordDialog_execOnEscapeKeyPress_Parms OnEscapeKeyPress_Parms;

	this->ProcessEvent ( pFnOnEscapeKeyPress, &OnEscapeKeyPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_PasswordDialog.OnViewClosed
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_PasswordDialog::OnViewClosed ( )
{
	static UFunction* pFnOnViewClosed = NULL;

	if ( ! pFnOnViewClosed )
		pFnOnViewClosed = (UFunction*) UObject::GObjObjects()->Data[ 82277 ];

	UR_GFxFrontEnd_PasswordDialog_execOnViewClosed_Parms OnViewClosed_Parms;

	this->ProcessEvent ( pFnOnViewClosed, &OnViewClosed_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_PasswordDialog.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_PasswordDialog::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 82274 ];

	UR_GFxFrontEnd_PasswordDialog_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Dialog.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_Dialog::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 81039 ];

	UR_GFxFrontEnd_Dialog_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Dialog.Select_Back
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Dialog::Select_Back ( struct FEventData ev )
{
	static UFunction* pFnSelect_Back = NULL;

	if ( ! pFnSelect_Back )
		pFnSelect_Back = (UFunction*) UObject::GObjObjects()->Data[ 81037 ];

	UR_GFxFrontEnd_Dialog_execSelect_Back_Parms Select_Back_Parms;
	memcpy ( &Select_Back_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnSelect_Back, &Select_Back_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Dialog.SetBackButton_OnPress
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         EventListener                  ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Dialog::SetBackButton_OnPress ( struct FScriptDelegate EventListener )
{
	static UFunction* pFnSetBackButton_OnPress = NULL;

	if ( ! pFnSetBackButton_OnPress )
		pFnSetBackButton_OnPress = (UFunction*) UObject::GObjObjects()->Data[ 81035 ];

	UR_GFxFrontEnd_Dialog_execSetBackButton_OnPress_Parms SetBackButton_OnPress_Parms;
	memcpy ( &SetBackButton_OnPress_Parms.EventListener, &EventListener, 0xC );

	this->ProcessEvent ( pFnSetBackButton_OnPress, &SetBackButton_OnPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Dialog.SetBackButton
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class UGFxObject*              InBackButton                   ( CPF_Parm )

void UR_GFxFrontEnd_Dialog::SetBackButton ( class UGFxObject* InBackButton )
{
	static UFunction* pFnSetBackButton = NULL;

	if ( ! pFnSetBackButton )
		pFnSetBackButton = (UFunction*) UObject::GObjObjects()->Data[ 81033 ];

	UR_GFxFrontEnd_Dialog_execSetBackButton_Parms SetBackButton_Parms;
	SetBackButton_Parms.InBackButton = InBackButton;

	this->ProcessEvent ( pFnSetBackButton, &SetBackButton_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Dialog.PlayCloseAnimation
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd_Dialog::PlayCloseAnimation ( )
{
	static UFunction* pFnPlayCloseAnimation = NULL;

	if ( ! pFnPlayCloseAnimation )
		pFnPlayCloseAnimation = (UFunction*) UObject::GObjObjects()->Data[ 81032 ];

	UR_GFxFrontEnd_Dialog_execPlayCloseAnimation_Parms PlayCloseAnimation_Parms;

	this->ProcessEvent ( pFnPlayCloseAnimation, &PlayCloseAnimation_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Dialog.PlayOpenAnimation
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd_Dialog::PlayOpenAnimation ( )
{
	static UFunction* pFnPlayOpenAnimation = NULL;

	if ( ! pFnPlayOpenAnimation )
		pFnPlayOpenAnimation = (UFunction*) UObject::GObjObjects()->Data[ 81031 ];

	UR_GFxFrontEnd_Dialog_execPlayOpenAnimation_Parms PlayOpenAnimation_Parms;

	this->ProcessEvent ( pFnPlayOpenAnimation, &PlayOpenAnimation_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Dialog.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_Dialog::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 81029 ];

	UR_GFxFrontEnd_Dialog_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Dialog.DisableSubComponents
// [0x00020000] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_Dialog::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 81027 ];

	UR_GFxFrontEnd_Dialog_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Dialog.OnViewClosed
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd_Dialog::OnViewClosed ( )
{
	static UFunction* pFnOnViewClosed = NULL;

	if ( ! pFnOnViewClosed )
		pFnOnViewClosed = (UFunction*) UObject::GObjObjects()->Data[ 81026 ];

	UR_GFxFrontEnd_Dialog_execOnViewClosed_Parms OnViewClosed_Parms;

	this->ProcessEvent ( pFnOnViewClosed, &OnViewClosed_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Dialog.AcceptDelegate
// [0x00120000] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Dialog::AcceptDelegate ( struct FEventData ev )
{
	static UFunction* pFnAcceptDelegate = NULL;

	if ( ! pFnAcceptDelegate )
		pFnAcceptDelegate = (UFunction*) UObject::GObjObjects()->Data[ 81019 ];

	UR_GFxFrontEnd_Dialog_execAcceptDelegate_Parms AcceptDelegate_Parms;
	memcpy ( &AcceptDelegate_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnAcceptDelegate, &AcceptDelegate_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ErrorDialog.SetBackButton
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class UGFxObject*              InBackButton                   ( CPF_Parm )

void UR_GFxFrontEnd_ErrorDialog::SetBackButton ( class UGFxObject* InBackButton )
{
	static UFunction* pFnSetBackButton = NULL;

	if ( ! pFnSetBackButton )
		pFnSetBackButton = (UFunction*) UObject::GObjObjects()->Data[ 81127 ];

	UR_GFxFrontEnd_ErrorDialog_execSetBackButton_Parms SetBackButton_Parms;
	SetBackButton_Parms.InBackButton = InBackButton;

	this->ProcessEvent ( pFnSetBackButton, &SetBackButton_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ErrorDialog.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_ErrorDialog::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 81121 ];

	UR_GFxFrontEnd_ErrorDialog_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_ErrorDialog.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_ErrorDialog::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 81119 ];

	UR_GFxFrontEnd_ErrorDialog_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ErrorDialog.OnEscapeKeyPress
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_ErrorDialog::OnEscapeKeyPress ( )
{
	static UFunction* pFnOnEscapeKeyPress = NULL;

	if ( ! pFnOnEscapeKeyPress )
		pFnOnEscapeKeyPress = (UFunction*) UObject::GObjObjects()->Data[ 81118 ];

	UR_GFxFrontEnd_ErrorDialog_execOnEscapeKeyPress_Parms OnEscapeKeyPress_Parms;

	this->ProcessEvent ( pFnOnEscapeKeyPress, &OnEscapeKeyPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ErrorDialog.OnBackButtonPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_ErrorDialog::OnBackButtonPress ( struct FEventData ev )
{
	static UFunction* pFnOnBackButtonPress = NULL;

	if ( ! pFnOnBackButtonPress )
		pFnOnBackButtonPress = (UFunction*) UObject::GObjObjects()->Data[ 81116 ];

	UR_GFxFrontEnd_ErrorDialog_execOnBackButtonPress_Parms OnBackButtonPress_Parms;
	memcpy ( &OnBackButtonPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnBackButtonPress, &OnBackButtonPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ErrorDialog.OnViewClosed
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_ErrorDialog::OnViewClosed ( )
{
	static UFunction* pFnOnViewClosed = NULL;

	if ( ! pFnOnViewClosed )
		pFnOnViewClosed = (UFunction*) UObject::GObjObjects()->Data[ 81115 ];

	UR_GFxFrontEnd_ErrorDialog_execOnViewClosed_Parms OnViewClosed_Parms;

	this->ProcessEvent ( pFnOnViewClosed, &OnViewClosed_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ErrorDialog.SetButtonLabel
// [0x00020002] 
// Parameters infos:
// struct FString                 ButtonLabel                    ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_ErrorDialog::SetButtonLabel ( struct FString ButtonLabel )
{
	static UFunction* pFnSetButtonLabel = NULL;

	if ( ! pFnSetButtonLabel )
		pFnSetButtonLabel = (UFunction*) UObject::GObjObjects()->Data[ 81113 ];

	UR_GFxFrontEnd_ErrorDialog_execSetButtonLabel_Parms SetButtonLabel_Parms;
	memcpy ( &SetButtonLabel_Parms.ButtonLabel, &ButtonLabel, 0xC );

	this->ProcessEvent ( pFnSetButtonLabel, &SetButtonLabel_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ErrorDialog.SetBackButton_OnPress
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         EventListener                  ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_ErrorDialog::SetBackButton_OnPress ( struct FScriptDelegate EventListener )
{
	static UFunction* pFnSetBackButton_OnPress = NULL;

	if ( ! pFnSetBackButton_OnPress )
		pFnSetBackButton_OnPress = (UFunction*) UObject::GObjObjects()->Data[ 81111 ];

	UR_GFxFrontEnd_ErrorDialog_execSetBackButton_OnPress_Parms SetBackButton_OnPress_Parms;
	memcpy ( &SetBackButton_OnPress_Parms.EventListener, &EventListener, 0xC );

	this->ProcessEvent ( pFnSetBackButton_OnPress, &SetBackButton_OnPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ErrorDialog.SetInfo
// [0x00020002] 
// Parameters infos:
// struct FString                 Info                           ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_ErrorDialog::SetInfo ( struct FString Info )
{
	static UFunction* pFnSetInfo = NULL;

	if ( ! pFnSetInfo )
		pFnSetInfo = (UFunction*) UObject::GObjObjects()->Data[ 81109 ];

	UR_GFxFrontEnd_ErrorDialog_execSetInfo_Parms SetInfo_Parms;
	memcpy ( &SetInfo_Parms.Info, &Info, 0xC );

	this->ProcessEvent ( pFnSetInfo, &SetInfo_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ErrorDialog.SetTitle
// [0x00020002] 
// Parameters infos:
// struct FString                 Title                          ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_ErrorDialog::SetTitle ( struct FString Title )
{
	static UFunction* pFnSetTitle = NULL;

	if ( ! pFnSetTitle )
		pFnSetTitle = (UFunction*) UObject::GObjObjects()->Data[ 81107 ];

	UR_GFxFrontEnd_ErrorDialog_execSetTitle_Parms SetTitle_Parms;
	memcpy ( &SetTitle_Parms.Title, &Title, 0xC );

	this->ProcessEvent ( pFnSetTitle, &SetTitle_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ErrorDialog.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_ErrorDialog::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 81105 ];

	UR_GFxFrontEnd_ErrorDialog_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinDialog.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_JoinDialog::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 81751 ];

	UR_GFxFrontEnd_JoinDialog_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_JoinDialog.SetSpectateButtonPress
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         SpectateButtonListener         ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_JoinDialog::SetSpectateButtonPress ( struct FScriptDelegate SpectateButtonListener )
{
	static UFunction* pFnSetSpectateButtonPress = NULL;

	if ( ! pFnSetSpectateButtonPress )
		pFnSetSpectateButtonPress = (UFunction*) UObject::GObjObjects()->Data[ 81749 ];

	UR_GFxFrontEnd_JoinDialog_execSetSpectateButtonPress_Parms SetSpectateButtonPress_Parms;
	memcpy ( &SetSpectateButtonPress_Parms.SpectateButtonListener, &SpectateButtonListener, 0xC );

	this->ProcessEvent ( pFnSetSpectateButtonPress, &SetSpectateButtonPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinDialog.SetJoinButtonPress
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         JoinButtonListener             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_JoinDialog::SetJoinButtonPress ( struct FScriptDelegate JoinButtonListener )
{
	static UFunction* pFnSetJoinButtonPress = NULL;

	if ( ! pFnSetJoinButtonPress )
		pFnSetJoinButtonPress = (UFunction*) UObject::GObjObjects()->Data[ 81747 ];

	UR_GFxFrontEnd_JoinDialog_execSetJoinButtonPress_Parms SetJoinButtonPress_Parms;
	memcpy ( &SetJoinButtonPress_Parms.JoinButtonListener, &JoinButtonListener, 0xC );

	this->ProcessEvent ( pFnSetJoinButtonPress, &SetJoinButtonPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinDialog.PopulateServerInfo
// [0x00820002] 
// Parameters infos:
// class UOnlineGameSettings*     GameSettings                   ( CPF_Parm )

void UR_GFxFrontEnd_JoinDialog::PopulateServerInfo ( class UOnlineGameSettings* GameSettings )
{
	static UFunction* pFnPopulateServerInfo = NULL;

	if ( ! pFnPopulateServerInfo )
		pFnPopulateServerInfo = (UFunction*) UObject::GObjObjects()->Data[ 81727 ];

	UR_GFxFrontEnd_JoinDialog_execPopulateServerInfo_Parms PopulateServerInfo_Parms;
	PopulateServerInfo_Parms.GameSettings = GameSettings;

	this->ProcessEvent ( pFnPopulateServerInfo, &PopulateServerInfo_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinDialog.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_JoinDialog::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 81725 ];

	UR_GFxFrontEnd_JoinDialog_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinDialog.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_JoinDialog::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 81723 ];

	UR_GFxFrontEnd_JoinDialog_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_FilterDialog.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_FilterDialog::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 81189 ];

	UR_GFxFrontEnd_FilterDialog_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_FilterDialog.PushFilterListUpdate
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_FilterDialog::PushFilterListUpdate ( )
{
	static UFunction* pFnPushFilterListUpdate = NULL;

	if ( ! pFnPushFilterListUpdate )
		pFnPushFilterListUpdate = (UFunction*) UObject::GObjObjects()->Data[ 81188 ];

	UR_GFxFrontEnd_FilterDialog_execPushFilterListUpdate_Parms PushFilterListUpdate_Parms;

	this->ProcessEvent ( pFnPushFilterListUpdate, &PushFilterListUpdate_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_FilterDialog.SetupListDataProvider
// [0x00820002] 
// Parameters infos:

void UR_GFxFrontEnd_FilterDialog::SetupListDataProvider ( )
{
	static UFunction* pFnSetupListDataProvider = NULL;

	if ( ! pFnSetupListDataProvider )
		pFnSetupListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 81180 ];

	UR_GFxFrontEnd_FilterDialog_execSetupListDataProvider_Parms SetupListDataProvider_Parms;

	this->ProcessEvent ( pFnSetupListDataProvider, &SetupListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_FilterDialog.SetFilterNetworkType
// [0x00024002] 
// Parameters infos:
// unsigned long                  bLAN                           ( CPF_Parm )
// unsigned long                  bSkipUIUpdate                  ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_FilterDialog::SetFilterNetworkType ( unsigned long bLAN, unsigned long bSkipUIUpdate )
{
	static UFunction* pFnSetFilterNetworkType = NULL;

	if ( ! pFnSetFilterNetworkType )
		pFnSetFilterNetworkType = (UFunction*) UObject::GObjObjects()->Data[ 81173 ];

	UR_GFxFrontEnd_FilterDialog_execSetFilterNetworkType_Parms SetFilterNetworkType_Parms;
	SetFilterNetworkType_Parms.bLAN = bLAN;
	SetFilterNetworkType_Parms.bSkipUIUpdate = bSkipUIUpdate;

	this->ProcessEvent ( pFnSetFilterNetworkType, &SetFilterNetworkType_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_FilterDialog.OnFilterList_OptionChanged
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_FilterDialog::OnFilterList_OptionChanged ( struct FEventData ev )
{
	static UFunction* pFnOnFilterList_OptionChanged = NULL;

	if ( ! pFnOnFilterList_OptionChanged )
		pFnOnFilterList_OptionChanged = (UFunction*) UObject::GObjObjects()->Data[ 81163 ];

	UR_GFxFrontEnd_FilterDialog_execOnFilterList_OptionChanged_Parms OnFilterList_OptionChanged_Parms;
	memcpy ( &OnFilterList_OptionChanged_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnFilterList_OptionChanged, &OnFilterList_OptionChanged_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_FilterDialog.GetGameClassByFriendlyName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 FriendlyName                   ( CPF_Parm | CPF_NeedCtorLink )

struct FString UR_GFxFrontEnd_FilterDialog::GetGameClassByFriendlyName ( struct FString FriendlyName )
{
	static UFunction* pFnGetGameClassByFriendlyName = NULL;

	if ( ! pFnGetGameClassByFriendlyName )
		pFnGetGameClassByFriendlyName = (UFunction*) UObject::GObjObjects()->Data[ 81160 ];

	UR_GFxFrontEnd_FilterDialog_execGetGameClassByFriendlyName_Parms GetGameClassByFriendlyName_Parms;
	memcpy ( &GetGameClassByFriendlyName_Parms.FriendlyName, &FriendlyName, 0xC );

	this->ProcessEvent ( pFnGetGameClassByFriendlyName, &GetGameClassByFriendlyName_Parms, NULL );

	return GetGameClassByFriendlyName_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_FilterDialog.ValidateServerType
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_FilterDialog::ValidateServerType ( )
{
	static UFunction* pFnValidateServerType = NULL;

	if ( ! pFnValidateServerType )
		pFnValidateServerType = (UFunction*) UObject::GObjObjects()->Data[ 81154 ];

	UR_GFxFrontEnd_FilterDialog_execValidateServerType_Parms ValidateServerType_Parms;

	this->ProcessEvent ( pFnValidateServerType, &ValidateServerType_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_FilterDialog.SetBackButtonListener
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         DelegateListener               ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_FilterDialog::SetBackButtonListener ( struct FScriptDelegate DelegateListener )
{
	static UFunction* pFnSetBackButtonListener = NULL;

	if ( ! pFnSetBackButtonListener )
		pFnSetBackButtonListener = (UFunction*) UObject::GObjObjects()->Data[ 81152 ];

	UR_GFxFrontEnd_FilterDialog_execSetBackButtonListener_Parms SetBackButtonListener_Parms;
	memcpy ( &SetBackButtonListener_Parms.DelegateListener, &DelegateListener, 0xC );

	this->ProcessEvent ( pFnSetBackButtonListener, &SetBackButtonListener_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_FilterDialog.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bEnableComponents              ( CPF_Parm )

void UR_GFxFrontEnd_FilterDialog::DisableSubComponents ( unsigned long bEnableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 81150 ];

	UR_GFxFrontEnd_FilterDialog_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bEnableComponents = bEnableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_FilterDialog.OnViewClosed
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_FilterDialog::OnViewClosed ( )
{
	static UFunction* pFnOnViewClosed = NULL;

	if ( ! pFnOnViewClosed )
		pFnOnViewClosed = (UFunction*) UObject::GObjObjects()->Data[ 81149 ];

	UR_GFxFrontEnd_FilterDialog_execOnViewClosed_Parms OnViewClosed_Parms;

	this->ProcessEvent ( pFnOnViewClosed, &OnViewClosed_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_FilterDialog.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_FilterDialog::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 81147 ];

	UR_GFxFrontEnd_FilterDialog_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_FilterDialog.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_FilterDialog::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 81146 ];

	UR_GFxFrontEnd_FilterDialog_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_FilterDialog.OnSwitchedGameType
// [0x00120000] 
// Parameters infos:

void UR_GFxFrontEnd_FilterDialog::OnSwitchedGameType ( )
{
	static UFunction* pFnOnSwitchedGameType = NULL;

	if ( ! pFnOnSwitchedGameType )
		pFnOnSwitchedGameType = (UFunction*) UObject::GObjObjects()->Data[ 81134 ];

	UR_GFxFrontEnd_FilterDialog_execOnSwitchedGameType_Parms OnSwitchedGameType_Parms;

	this->ProcessEvent ( pFnOnSwitchedGameType, &OnSwitchedGameType_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_KeyBindDialog.SetInfo
// [0x00020002] 
// Parameters infos:
// struct FString                 Info                           ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_KeyBindDialog::SetInfo ( struct FString Info )
{
	static UFunction* pFnSetInfo = NULL;

	if ( ! pFnSetInfo )
		pFnSetInfo = (UFunction*) UObject::GObjObjects()->Data[ 81970 ];

	UR_GFxFrontEnd_KeyBindDialog_execSetInfo_Parms SetInfo_Parms;
	memcpy ( &SetInfo_Parms.Info, &Info, 0xC );

	this->ProcessEvent ( pFnSetInfo, &SetInfo_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_KeyBindDialog.SetTitle
// [0x00020002] 
// Parameters infos:
// struct FString                 Title                          ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_KeyBindDialog::SetTitle ( struct FString Title )
{
	static UFunction* pFnSetTitle = NULL;

	if ( ! pFnSetTitle )
		pFnSetTitle = (UFunction*) UObject::GObjObjects()->Data[ 81968 ];

	UR_GFxFrontEnd_KeyBindDialog_execSetTitle_Parms SetTitle_Parms;
	memcpy ( &SetTitle_Parms.Title, &Title, 0xC );

	this->ProcessEvent ( pFnSetTitle, &SetTitle_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_KeyBindDialog.DisableSubComponents
// [0x00020000] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_KeyBindDialog::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 81966 ];

	UR_GFxFrontEnd_KeyBindDialog_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_KeyBindDialog.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_KeyBindDialog::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 81964 ];

	UR_GFxFrontEnd_KeyBindDialog_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_KeyBindDialog.OnViewClosed
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_KeyBindDialog::OnViewClosed ( )
{
	static UFunction* pFnOnViewClosed = NULL;

	if ( ! pFnOnViewClosed )
		pFnOnViewClosed = (UFunction*) UObject::GObjObjects()->Data[ 81963 ];

	UR_GFxFrontEnd_KeyBindDialog_execOnViewClosed_Parms OnViewClosed_Parms;

	this->ProcessEvent ( pFnOnViewClosed, &OnViewClosed_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_InfoDialog.SetAcceptButton_OnPress
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         EventListener                  ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_InfoDialog::SetAcceptButton_OnPress ( struct FScriptDelegate EventListener )
{
	static UFunction* pFnSetAcceptButton_OnPress = NULL;

	if ( ! pFnSetAcceptButton_OnPress )
		pFnSetAcceptButton_OnPress = (UFunction*) UObject::GObjObjects()->Data[ 81479 ];

	UR_GFxFrontEnd_InfoDialog_execSetAcceptButton_OnPress_Parms SetAcceptButton_OnPress_Parms;
	memcpy ( &SetAcceptButton_OnPress_Parms.EventListener, &EventListener, 0xC );

	this->ProcessEvent ( pFnSetAcceptButton_OnPress, &SetAcceptButton_OnPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_InfoDialog.SetBackButtonLabel
// [0x00020002] 
// Parameters infos:
// struct FString                 Label                          ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_InfoDialog::SetBackButtonLabel ( struct FString Label )
{
	static UFunction* pFnSetBackButtonLabel = NULL;

	if ( ! pFnSetBackButtonLabel )
		pFnSetBackButtonLabel = (UFunction*) UObject::GObjObjects()->Data[ 81477 ];

	UR_GFxFrontEnd_InfoDialog_execSetBackButtonLabel_Parms SetBackButtonLabel_Parms;
	memcpy ( &SetBackButtonLabel_Parms.Label, &Label, 0xC );

	this->ProcessEvent ( pFnSetBackButtonLabel, &SetBackButtonLabel_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_InfoDialog.SetAcceptButtonLabel
// [0x00020002] 
// Parameters infos:
// struct FString                 Label                          ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_InfoDialog::SetAcceptButtonLabel ( struct FString Label )
{
	static UFunction* pFnSetAcceptButtonLabel = NULL;

	if ( ! pFnSetAcceptButtonLabel )
		pFnSetAcceptButtonLabel = (UFunction*) UObject::GObjObjects()->Data[ 81475 ];

	UR_GFxFrontEnd_InfoDialog_execSetAcceptButtonLabel_Parms SetAcceptButtonLabel_Parms;
	memcpy ( &SetAcceptButtonLabel_Parms.Label, &Label, 0xC );

	this->ProcessEvent ( pFnSetAcceptButtonLabel, &SetAcceptButtonLabel_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_InfoDialog.SetInfo
// [0x00020002] 
// Parameters infos:
// struct FString                 Info                           ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_InfoDialog::SetInfo ( struct FString Info )
{
	static UFunction* pFnSetInfo = NULL;

	if ( ! pFnSetInfo )
		pFnSetInfo = (UFunction*) UObject::GObjObjects()->Data[ 81473 ];

	UR_GFxFrontEnd_InfoDialog_execSetInfo_Parms SetInfo_Parms;
	memcpy ( &SetInfo_Parms.Info, &Info, 0xC );

	this->ProcessEvent ( pFnSetInfo, &SetInfo_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_InfoDialog.SetTitle
// [0x00020002] 
// Parameters infos:
// struct FString                 Title                          ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_InfoDialog::SetTitle ( struct FString Title )
{
	static UFunction* pFnSetTitle = NULL;

	if ( ! pFnSetTitle )
		pFnSetTitle = (UFunction*) UObject::GObjObjects()->Data[ 81471 ];

	UR_GFxFrontEnd_InfoDialog_execSetTitle_Parms SetTitle_Parms;
	memcpy ( &SetTitle_Parms.Title, &Title, 0xC );

	this->ProcessEvent ( pFnSetTitle, &SetTitle_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_InfoDialog.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_InfoDialog::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 81469 ];

	UR_GFxFrontEnd_InfoDialog_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_InfoDialog.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_InfoDialog::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 81467 ];

	UR_GFxFrontEnd_InfoDialog_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_InfoDialog.OnViewClosed
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_InfoDialog::OnViewClosed ( )
{
	static UFunction* pFnOnViewClosed = NULL;

	if ( ! pFnOnViewClosed )
		pFnOnViewClosed = (UFunction*) UObject::GObjObjects()->Data[ 81466 ];

	UR_GFxFrontEnd_InfoDialog_execOnViewClosed_Parms OnViewClosed_Parms;

	this->ProcessEvent ( pFnOnViewClosed, &OnViewClosed_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Quit.Select_Exit_Desktop
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Quit::Select_Exit_Desktop ( )
{
	static UFunction* pFnSelect_Exit_Desktop = NULL;

	if ( ! pFnSelect_Exit_Desktop )
		pFnSelect_Exit_Desktop = (UFunction*) UObject::GObjObjects()->Data[ 82350 ];

	UR_GFxFrontEnd_Quit_execSelect_Exit_Desktop_Parms Select_Exit_Desktop_Parms;

	this->ProcessEvent ( pFnSelect_Exit_Desktop, &Select_Exit_Desktop_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Quit.Select_Quit
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Quit::Select_Quit ( )
{
	static UFunction* pFnSelect_Quit = NULL;

	if ( ! pFnSelect_Quit )
		pFnSelect_Quit = (UFunction*) UObject::GObjObjects()->Data[ 82349 ];

	UR_GFxFrontEnd_Quit_execSelect_Quit_Parms Select_Quit_Parms;

	this->ProcessEvent ( pFnSelect_Quit, &Select_Quit_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Quit.Select_Stay
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Quit::Select_Stay ( )
{
	static UFunction* pFnSelect_Stay = NULL;

	if ( ! pFnSelect_Stay )
		pFnSelect_Stay = (UFunction*) UObject::GObjObjects()->Data[ 82348 ];

	UR_GFxFrontEnd_Quit_execSelect_Stay_Parms Select_Stay_Parms;

	this->ProcessEvent ( pFnSelect_Stay, &Select_Stay_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Quit.OnListChange
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Quit::OnListChange ( struct FEventData ev )
{
	static UFunction* pFnOnListChange = NULL;

	if ( ! pFnOnListChange )
		pFnOnListChange = (UFunction*) UObject::GObjObjects()->Data[ 82344 ];

	UR_GFxFrontEnd_Quit_execOnListChange_Parms OnListChange_Parms;
	memcpy ( &OnListChange_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListChange, &OnListChange_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Quit.SetList
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              InList                         ( CPF_Parm )

void UR_GFxFrontEnd_Quit::SetList ( class UGFxObject* InList )
{
	static UFunction* pFnSetList = NULL;

	if ( ! pFnSetList )
		pFnSetList = (UFunction*) UObject::GObjObjects()->Data[ 82342 ];

	UR_GFxFrontEnd_Quit_execSetList_Parms SetList_Parms;
	SetList_Parms.InList = InList;

	this->ProcessEvent ( pFnSetList, &SetList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Quit.UpdateMiddleBarListDataProvider
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Quit::UpdateMiddleBarListDataProvider ( )
{
	static UFunction* pFnUpdateMiddleBarListDataProvider = NULL;

	if ( ! pFnUpdateMiddleBarListDataProvider )
		pFnUpdateMiddleBarListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 82338 ];

	UR_GFxFrontEnd_Quit_execUpdateMiddleBarListDataProvider_Parms UpdateMiddleBarListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateMiddleBarListDataProvider, &UpdateMiddleBarListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Quit.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_Quit::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 82332 ];

	UR_GFxFrontEnd_Quit_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Quit.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_Quit::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 82330 ];

	UR_GFxFrontEnd_Quit_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Quit.OnViewClosed
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Quit::OnViewClosed ( )
{
	static UFunction* pFnOnViewClosed = NULL;

	if ( ! pFnOnViewClosed )
		pFnOnViewClosed = (UFunction*) UObject::GObjObjects()->Data[ 82329 ];

	UR_GFxFrontEnd_Quit_execOnViewClosed_Parms OnViewClosed_Parms;

	this->ProcessEvent ( pFnOnViewClosed, &OnViewClosed_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Quit.OnViewActivated
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Quit::OnViewActivated ( )
{
	static UFunction* pFnOnViewActivated = NULL;

	if ( ! pFnOnViewActivated )
		pFnOnViewActivated = (UFunction*) UObject::GObjObjects()->Data[ 82328 ];

	UR_GFxFrontEnd_Quit_execOnViewActivated_Parms OnViewActivated_Parms;

	this->ProcessEvent ( pFnOnViewActivated, &OnViewActivated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Quit.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_Quit::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 82326 ];

	UR_GFxFrontEnd_Quit_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Quit.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Quit::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 82325 ];

	UR_GFxFrontEnd_Quit_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Screen.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_Screen::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 80897 ];

	UR_GFxFrontEnd_Screen_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Screen.UpdateHelpButtonImages
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Screen::UpdateHelpButtonImages ( )
{
	static UFunction* pFnUpdateHelpButtonImages = NULL;

	if ( ! pFnUpdateHelpButtonImages )
		pFnUpdateHelpButtonImages = (UFunction*) UObject::GObjObjects()->Data[ 80896 ];

	UR_GFxFrontEnd_Screen_execUpdateHelpButtonImages_Parms UpdateHelpButtonImages_Parms;

	this->ProcessEvent ( pFnUpdateHelpButtonImages, &UpdateHelpButtonImages_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Screen.FocusIn_BackButton
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Screen::FocusIn_BackButton ( struct FEventData ev )
{
	static UFunction* pFnFocusIn_BackButton = NULL;

	if ( ! pFnFocusIn_BackButton )
		pFnFocusIn_BackButton = (UFunction*) UObject::GObjObjects()->Data[ 80894 ];

	UR_GFxFrontEnd_Screen_execFocusIn_BackButton_Parms FocusIn_BackButton_Parms;
	memcpy ( &FocusIn_BackButton_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnFocusIn_BackButton, &FocusIn_BackButton_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Credits.StartRoll
// [0x00020002] 
// Parameters infos:
// int                            ASCreditSpawnRate              ( CPF_Parm )

void UR_GFxFrontEnd_Credits::StartRoll ( int ASCreditSpawnRate )
{
	static UFunction* pFnStartRoll = NULL;

	if ( ! pFnStartRoll )
		pFnStartRoll = (UFunction*) UObject::GObjObjects()->Data[ 81008 ];

	UR_GFxFrontEnd_Credits_execStartRoll_Parms StartRoll_Parms;
	StartRoll_Parms.ASCreditSpawnRate = ASCreditSpawnRate;

	this->ProcessEvent ( pFnStartRoll, &StartRoll_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Credits.PopulateCredits
// [0x00020102] 
// Parameters infos:
// TArray< struct FString >       passCredits                    ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Credits::PopulateCredits ( TArray< struct FString > passCredits )
{
	static UFunction* pFnPopulateCredits = NULL;

	if ( ! pFnPopulateCredits )
		pFnPopulateCredits = (UFunction*) UObject::GObjObjects()->Data[ 81005 ];

	UR_GFxFrontEnd_Credits_execPopulateCredits_Parms PopulateCredits_Parms;
	memcpy ( &PopulateCredits_Parms.passCredits, &passCredits, 0xC );

	this->ProcessEvent ( pFnPopulateCredits, &PopulateCredits_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Credits.DisableSubComponents
// [0x00020000] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_Credits::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 81003 ];

	UR_GFxFrontEnd_Credits_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Credits.OnViewActivated
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd_Credits::OnViewActivated ( )
{
	static UFunction* pFnOnViewActivated = NULL;

	if ( ! pFnOnViewActivated )
		pFnOnViewActivated = (UFunction*) UObject::GObjObjects()->Data[ 81002 ];

	UR_GFxFrontEnd_Credits_execOnViewActivated_Parms OnViewActivated_Parms;

	this->ProcessEvent ( pFnOnViewActivated, &OnViewActivated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Credits.OnViewClosed
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Credits::OnViewClosed ( )
{
	static UFunction* pFnOnViewClosed = NULL;

	if ( ! pFnOnViewClosed )
		pFnOnViewClosed = (UFunction*) UObject::GObjObjects()->Data[ 81001 ];

	UR_GFxFrontEnd_Credits_execOnViewClosed_Parms OnViewClosed_Parms;

	this->ProcessEvent ( pFnOnViewClosed, &OnViewClosed_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Credits.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_Credits::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 80999 ];

	UR_GFxFrontEnd_Credits_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Credits.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Credits::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 80998 ];

	UR_GFxFrontEnd_Credits_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.ApplyOptions
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::ApplyOptions ( struct FEventData ev )
{
	static UFunction* pFnApplyOptions = NULL;

	if ( ! pFnApplyOptions )
		pFnApplyOptions = (UFunction*) UObject::GObjObjects()->Data[ 82882 ];

	UR_GFxFrontEnd_Settings_execApplyOptions_Parms ApplyOptions_Parms;
	memcpy ( &ApplyOptions_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnApplyOptions, &ApplyOptions_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.RevertOptions
// [0x00820002] 
// Parameters infos:
// unsigned long                  bRevertAdvanced                ( CPF_Parm )

void UR_GFxFrontEnd_Settings::RevertOptions ( unsigned long bRevertAdvanced )
{
	static UFunction* pFnRevertOptions = NULL;

	if ( ! pFnRevertOptions )
		pFnRevertOptions = (UFunction*) UObject::GObjObjects()->Data[ 82879 ];

	UR_GFxFrontEnd_Settings_execRevertOptions_Parms RevertOptions_Parms;
	RevertOptions_Parms.bRevertAdvanced = bRevertAdvanced;

	this->ProcessEvent ( pFnRevertOptions, &RevertOptions_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.ResetOptionDefaults
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::ResetOptionDefaults ( struct FEventData ev )
{
	static UFunction* pFnResetOptionDefaults = NULL;

	if ( ! pFnResetOptionDefaults )
		pFnResetOptionDefaults = (UFunction*) UObject::GObjObjects()->Data[ 82877 ];

	UR_GFxFrontEnd_Settings_execResetOptionDefaults_Parms ResetOptionDefaults_Parms;
	memcpy ( &ResetOptionDefaults_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnResetOptionDefaults, &ResetOptionDefaults_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SetGeneralTabDefaults
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Settings::SetGeneralTabDefaults ( )
{
	static UFunction* pFnSetGeneralTabDefaults = NULL;

	if ( ! pFnSetGeneralTabDefaults )
		pFnSetGeneralTabDefaults = (UFunction*) UObject::GObjObjects()->Data[ 82876 ];

	UR_GFxFrontEnd_Settings_execSetGeneralTabDefaults_Parms SetGeneralTabDefaults_Parms;

	this->ProcessEvent ( pFnSetGeneralTabDefaults, &SetGeneralTabDefaults_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.ChatterVolumeUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::ChatterVolumeUpdated ( struct FEventData ev )
{
	static UFunction* pFnChatterVolumeUpdated = NULL;

	if ( ! pFnChatterVolumeUpdated )
		pFnChatterVolumeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82874 ];

	UR_GFxFrontEnd_Settings_execChatterVolumeUpdated_Parms ChatterVolumeUpdated_Parms;
	memcpy ( &ChatterVolumeUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnChatterVolumeUpdated, &ChatterVolumeUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.VehicleVolumeUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::VehicleVolumeUpdated ( struct FEventData ev )
{
	static UFunction* pFnVehicleVolumeUpdated = NULL;

	if ( ! pFnVehicleVolumeUpdated )
		pFnVehicleVolumeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82872 ];

	UR_GFxFrontEnd_Settings_execVehicleVolumeUpdated_Parms VehicleVolumeUpdated_Parms;
	memcpy ( &VehicleVolumeUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnVehicleVolumeUpdated, &VehicleVolumeUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SoundEffectsVolumeUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::SoundEffectsVolumeUpdated ( struct FEventData ev )
{
	static UFunction* pFnSoundEffectsVolumeUpdated = NULL;

	if ( ! pFnSoundEffectsVolumeUpdated )
		pFnSoundEffectsVolumeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82870 ];

	UR_GFxFrontEnd_Settings_execSoundEffectsVolumeUpdated_Parms SoundEffectsVolumeUpdated_Parms;
	memcpy ( &SoundEffectsVolumeUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnSoundEffectsVolumeUpdated, &SoundEffectsVolumeUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.DialogVolumeUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::DialogVolumeUpdated ( struct FEventData ev )
{
	static UFunction* pFnDialogVolumeUpdated = NULL;

	if ( ! pFnDialogVolumeUpdated )
		pFnDialogVolumeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82868 ];

	UR_GFxFrontEnd_Settings_execDialogVolumeUpdated_Parms DialogVolumeUpdated_Parms;
	memcpy ( &DialogVolumeUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnDialogVolumeUpdated, &DialogVolumeUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.MusicVolumeUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::MusicVolumeUpdated ( struct FEventData ev )
{
	static UFunction* pFnMusicVolumeUpdated = NULL;

	if ( ! pFnMusicVolumeUpdated )
		pFnMusicVolumeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82866 ];

	UR_GFxFrontEnd_Settings_execMusicVolumeUpdated_Parms MusicVolumeUpdated_Parms;
	memcpy ( &MusicVolumeUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnMusicVolumeUpdated, &MusicVolumeUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.MasterVolumeUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::MasterVolumeUpdated ( struct FEventData ev )
{
	static UFunction* pFnMasterVolumeUpdated = NULL;

	if ( ! pFnMasterVolumeUpdated )
		pFnMasterVolumeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82864 ];

	UR_GFxFrontEnd_Settings_execMasterVolumeUpdated_Parms MasterVolumeUpdated_Parms;
	memcpy ( &MasterVolumeUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnMasterVolumeUpdated, &MasterVolumeUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.FoliageUpdated
// [0x00020000] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::FoliageUpdated ( struct FEventData ev )
{
	static UFunction* pFnFoliageUpdated = NULL;

	if ( ! pFnFoliageUpdated )
		pFnFoliageUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82862 ];

	UR_GFxFrontEnd_Settings_execFoliageUpdated_Parms FoliageUpdated_Parms;
	memcpy ( &FoliageUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnFoliageUpdated, &FoliageUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.PostProcessUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::PostProcessUpdated ( struct FEventData ev )
{
	static UFunction* pFnPostProcessUpdated = NULL;

	if ( ! pFnPostProcessUpdated )
		pFnPostProcessUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82859 ];

	UR_GFxFrontEnd_Settings_execPostProcessUpdated_Parms PostProcessUpdated_Parms;
	memcpy ( &PostProcessUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnPostProcessUpdated, &PostProcessUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.LockFPSUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::LockFPSUpdated ( struct FEventData ev )
{
	static UFunction* pFnLockFPSUpdated = NULL;

	if ( ! pFnLockFPSUpdated )
		pFnLockFPSUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82856 ];

	UR_GFxFrontEnd_Settings_execLockFPSUpdated_Parms LockFPSUpdated_Parms;
	memcpy ( &LockFPSUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnLockFPSUpdated, &LockFPSUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.ShowDecalsUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::ShowDecalsUpdated ( struct FEventData ev )
{
	static UFunction* pFnShowDecalsUpdated = NULL;

	if ( ! pFnShowDecalsUpdated )
		pFnShowDecalsUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82853 ];

	UR_GFxFrontEnd_Settings_execShowDecalsUpdated_Parms ShowDecalsUpdated_Parms;
	memcpy ( &ShowDecalsUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnShowDecalsUpdated, &ShowDecalsUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.ShadowsUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::ShadowsUpdated ( struct FEventData ev )
{
	static UFunction* pFnShadowsUpdated = NULL;

	if ( ! pFnShadowsUpdated )
		pFnShadowsUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82850 ];

	UR_GFxFrontEnd_Settings_execShadowsUpdated_Parms ShadowsUpdated_Parms;
	memcpy ( &ShadowsUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnShadowsUpdated, &ShadowsUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SyncFramesUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::SyncFramesUpdated ( struct FEventData ev )
{
	static UFunction* pFnSyncFramesUpdated = NULL;

	if ( ! pFnSyncFramesUpdated )
		pFnSyncFramesUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82847 ];

	UR_GFxFrontEnd_Settings_execSyncFramesUpdated_Parms SyncFramesUpdated_Parms;
	memcpy ( &SyncFramesUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnSyncFramesUpdated, &SyncFramesUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.TextureQualityUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::TextureQualityUpdated ( struct FEventData ev )
{
	static UFunction* pFnTextureQualityUpdated = NULL;

	if ( ! pFnTextureQualityUpdated )
		pFnTextureQualityUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82845 ];

	UR_GFxFrontEnd_Settings_execTextureQualityUpdated_Parms TextureQualityUpdated_Parms;
	memcpy ( &TextureQualityUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnTextureQualityUpdated, &TextureQualityUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.GammaUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::GammaUpdated ( struct FEventData ev )
{
	static UFunction* pFnGammaUpdated = NULL;

	if ( ! pFnGammaUpdated )
		pFnGammaUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82843 ];

	UR_GFxFrontEnd_Settings_execGammaUpdated_Parms GammaUpdated_Parms;
	memcpy ( &GammaUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnGammaUpdated, &GammaUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.OverallQualityUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::OverallQualityUpdated ( struct FEventData ev )
{
	static UFunction* pFnOverallQualityUpdated = NULL;

	if ( ! pFnOverallQualityUpdated )
		pFnOverallQualityUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82841 ];

	UR_GFxFrontEnd_Settings_execOverallQualityUpdated_Parms OverallQualityUpdated_Parms;
	memcpy ( &OverallQualityUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOverallQualityUpdated, &OverallQualityUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SetMSAAQuality
// [0x00020002] 
// Parameters infos:
// int                            mvalue                         ( CPF_Parm )

void UR_GFxFrontEnd_Settings::SetMSAAQuality ( int mvalue )
{
	static UFunction* pFnSetMSAAQuality = NULL;

	if ( ! pFnSetMSAAQuality )
		pFnSetMSAAQuality = (UFunction*) UObject::GObjObjects()->Data[ 82838 ];

	UR_GFxFrontEnd_Settings_execSetMSAAQuality_Parms SetMSAAQuality_Parms;
	SetMSAAQuality_Parms.mvalue = mvalue;

	this->ProcessEvent ( pFnSetMSAAQuality, &SetMSAAQuality_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SetDefaultAudioValues
// [0x00820002] 
// Parameters infos:

void UR_GFxFrontEnd_Settings::SetDefaultAudioValues ( )
{
	static UFunction* pFnSetDefaultAudioValues = NULL;

	if ( ! pFnSetDefaultAudioValues )
		pFnSetDefaultAudioValues = (UFunction*) UObject::GObjObjects()->Data[ 82836 ];

	UR_GFxFrontEnd_Settings_execSetDefaultAudioValues_Parms SetDefaultAudioValues_Parms;

	this->ProcessEvent ( pFnSetDefaultAudioValues, &SetDefaultAudioValues_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SetDefaultGeneralValues
// [0x00820002] 
// Parameters infos:

void UR_GFxFrontEnd_Settings::SetDefaultGeneralValues ( )
{
	static UFunction* pFnSetDefaultGeneralValues = NULL;

	if ( ! pFnSetDefaultGeneralValues )
		pFnSetDefaultGeneralValues = (UFunction*) UObject::GObjObjects()->Data[ 82834 ];

	UR_GFxFrontEnd_Settings_execSetDefaultGeneralValues_Parms SetDefaultGeneralValues_Parms;

	this->ProcessEvent ( pFnSetDefaultGeneralValues, &SetDefaultGeneralValues_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SetDefaultValues
// [0x00820002] 
// Parameters infos:

void UR_GFxFrontEnd_Settings::SetDefaultValues ( )
{
	static UFunction* pFnSetDefaultValues = NULL;

	if ( ! pFnSetDefaultValues )
		pFnSetDefaultValues = (UFunction*) UObject::GObjObjects()->Data[ 82832 ];

	UR_GFxFrontEnd_Settings_execSetDefaultValues_Parms SetDefaultValues_Parms;

	this->ProcessEvent ( pFnSetDefaultValues, &SetDefaultValues_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.AnisotropicFilteringUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::AnisotropicFilteringUpdated ( struct FEventData ev )
{
	static UFunction* pFnAnisotropicFilteringUpdated = NULL;

	if ( ! pFnAnisotropicFilteringUpdated )
		pFnAnisotropicFilteringUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82829 ];

	UR_GFxFrontEnd_Settings_execAnisotropicFilteringUpdated_Parms AnisotropicFilteringUpdated_Parms;
	memcpy ( &AnisotropicFilteringUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnAnisotropicFilteringUpdated, &AnisotropicFilteringUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.PostProcessAntiAliasingUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::PostProcessAntiAliasingUpdated ( struct FEventData ev )
{
	static UFunction* pFnPostProcessAntiAliasingUpdated = NULL;

	if ( ! pFnPostProcessAntiAliasingUpdated )
		pFnPostProcessAntiAliasingUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82827 ];

	UR_GFxFrontEnd_Settings_execPostProcessAntiAliasingUpdated_Parms PostProcessAntiAliasingUpdated_Parms;
	memcpy ( &PostProcessAntiAliasingUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnPostProcessAntiAliasingUpdated, &PostProcessAntiAliasingUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.AntiAliasingUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::AntiAliasingUpdated ( struct FEventData ev )
{
	static UFunction* pFnAntiAliasingUpdated = NULL;

	if ( ! pFnAntiAliasingUpdated )
		pFnAntiAliasingUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82825 ];

	UR_GFxFrontEnd_Settings_execAntiAliasingUpdated_Parms AntiAliasingUpdated_Parms;
	memcpy ( &AntiAliasingUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnAntiAliasingUpdated, &AntiAliasingUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.ScreenModeUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::ScreenModeUpdated ( struct FEventData ev )
{
	static UFunction* pFnScreenModeUpdated = NULL;

	if ( ! pFnScreenModeUpdated )
		pFnScreenModeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82823 ];

	UR_GFxFrontEnd_Settings_execScreenModeUpdated_Parms ScreenModeUpdated_Parms;
	memcpy ( &ScreenModeUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnScreenModeUpdated, &ScreenModeUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.DisplayResolutionUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::DisplayResolutionUpdated ( struct FEventData ev )
{
	static UFunction* pFnDisplayResolutionUpdated = NULL;

	if ( ! pFnDisplayResolutionUpdated )
		pFnDisplayResolutionUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82820 ];

	UR_GFxFrontEnd_Settings_execDisplayResolutionUpdated_Parms DisplayResolutionUpdated_Parms;
	memcpy ( &DisplayResolutionUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnDisplayResolutionUpdated, &DisplayResolutionUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.AspectRatioUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::AspectRatioUpdated ( struct FEventData ev )
{
	static UFunction* pFnAspectRatioUpdated = NULL;

	if ( ! pFnAspectRatioUpdated )
		pFnAspectRatioUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82818 ];

	UR_GFxFrontEnd_Settings_execAspectRatioUpdated_Parms AspectRatioUpdated_Parms;
	memcpy ( &AspectRatioUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnAspectRatioUpdated, &AspectRatioUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.DisableGamepadUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::DisableGamepadUpdated ( struct FEventData ev )
{
	static UFunction* pFnDisableGamepadUpdated = NULL;

	if ( ! pFnDisableGamepadUpdated )
		pFnDisableGamepadUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82816 ];

	UR_GFxFrontEnd_Settings_execDisableGamepadUpdated_Parms DisableGamepadUpdated_Parms;
	memcpy ( &DisableGamepadUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnDisableGamepadUpdated, &DisableGamepadUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.ToggleSprintUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::ToggleSprintUpdated ( struct FEventData ev )
{
	static UFunction* pFnToggleSprintUpdated = NULL;

	if ( ! pFnToggleSprintUpdated )
		pFnToggleSprintUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82814 ];

	UR_GFxFrontEnd_Settings_execToggleSprintUpdated_Parms ToggleSprintUpdated_Parms;
	memcpy ( &ToggleSprintUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnToggleSprintUpdated, &ToggleSprintUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.ToggleZoomUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::ToggleZoomUpdated ( struct FEventData ev )
{
	static UFunction* pFnToggleZoomUpdated = NULL;

	if ( ! pFnToggleZoomUpdated )
		pFnToggleZoomUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82812 ];

	UR_GFxFrontEnd_Settings_execToggleZoomUpdated_Parms ToggleZoomUpdated_Parms;
	memcpy ( &ToggleZoomUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnToggleZoomUpdated, &ToggleZoomUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.ToggleCrouchUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::ToggleCrouchUpdated ( struct FEventData ev )
{
	static UFunction* pFnToggleCrouchUpdated = NULL;

	if ( ! pFnToggleCrouchUpdated )
		pFnToggleCrouchUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82810 ];

	UR_GFxFrontEnd_Settings_execToggleCrouchUpdated_Parms ToggleCrouchUpdated_Parms;
	memcpy ( &ToggleCrouchUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnToggleCrouchUpdated, &ToggleCrouchUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.ShowHUDUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::ShowHUDUpdated ( struct FEventData ev )
{
	static UFunction* pFnShowHUDUpdated = NULL;

	if ( ! pFnShowHUDUpdated )
		pFnShowHUDUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82808 ];

	UR_GFxFrontEnd_Settings_execShowHUDUpdated_Parms ShowHUDUpdated_Parms;
	memcpy ( &ShowHUDUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnShowHUDUpdated, &ShowHUDUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.AVSensitivityInputUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::AVSensitivityInputUpdated ( struct FEventData ev )
{
	static UFunction* pFnAVSensitivityInputUpdated = NULL;

	if ( ! pFnAVSensitivityInputUpdated )
		pFnAVSensitivityInputUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82805 ];

	UR_GFxFrontEnd_Settings_execAVSensitivityInputUpdated_Parms AVSensitivityInputUpdated_Parms;
	memcpy ( &AVSensitivityInputUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnAVSensitivityInputUpdated, &AVSensitivityInputUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.LVSensitivityInputUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::LVSensitivityInputUpdated ( struct FEventData ev )
{
	static UFunction* pFnLVSensitivityInputUpdated = NULL;

	if ( ! pFnLVSensitivityInputUpdated )
		pFnLVSensitivityInputUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82802 ];

	UR_GFxFrontEnd_Settings_execLVSensitivityInputUpdated_Parms LVSensitivityInputUpdated_Parms;
	memcpy ( &LVSensitivityInputUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnLVSensitivityInputUpdated, &LVSensitivityInputUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.AVSensitivityUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::AVSensitivityUpdated ( struct FEventData ev )
{
	static UFunction* pFnAVSensitivityUpdated = NULL;

	if ( ! pFnAVSensitivityUpdated )
		pFnAVSensitivityUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82800 ];

	UR_GFxFrontEnd_Settings_execAVSensitivityUpdated_Parms AVSensitivityUpdated_Parms;
	memcpy ( &AVSensitivityUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnAVSensitivityUpdated, &AVSensitivityUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.LVSensitivityUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::LVSensitivityUpdated ( struct FEventData ev )
{
	static UFunction* pFnLVSensitivityUpdated = NULL;

	if ( ! pFnLVSensitivityUpdated )
		pFnLVSensitivityUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82798 ];

	UR_GFxFrontEnd_Settings_execLVSensitivityUpdated_Parms LVSensitivityUpdated_Parms;
	memcpy ( &LVSensitivityUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnLVSensitivityUpdated, &LVSensitivityUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.AirMouseInputPowerCurveUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::AirMouseInputPowerCurveUpdated ( struct FEventData ev )
{
	static UFunction* pFnAirMouseInputPowerCurveUpdated = NULL;

	if ( ! pFnAirMouseInputPowerCurveUpdated )
		pFnAirMouseInputPowerCurveUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82796 ];

	UR_GFxFrontEnd_Settings_execAirMouseInputPowerCurveUpdated_Parms AirMouseInputPowerCurveUpdated_Parms;
	memcpy ( &AirMouseInputPowerCurveUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnAirMouseInputPowerCurveUpdated, &AirMouseInputPowerCurveUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.LandVehicleMouseSteeringUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::LandVehicleMouseSteeringUpdated ( struct FEventData ev )
{
	static UFunction* pFnLandVehicleMouseSteeringUpdated = NULL;

	if ( ! pFnLandVehicleMouseSteeringUpdated )
		pFnLandVehicleMouseSteeringUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82794 ];

	UR_GFxFrontEnd_Settings_execLandVehicleMouseSteeringUpdated_Parms LandVehicleMouseSteeringUpdated_Parms;
	memcpy ( &LandVehicleMouseSteeringUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnLandVehicleMouseSteeringUpdated, &LandVehicleMouseSteeringUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.AirSmoothingUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::AirSmoothingUpdated ( struct FEventData ev )
{
	static UFunction* pFnAirSmoothingUpdated = NULL;

	if ( ! pFnAirSmoothingUpdated )
		pFnAirSmoothingUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82792 ];

	UR_GFxFrontEnd_Settings_execAirSmoothingUpdated_Parms AirSmoothingUpdated_Parms;
	memcpy ( &AirSmoothingUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnAirSmoothingUpdated, &AirSmoothingUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.InvertMouseUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::InvertMouseUpdated ( struct FEventData ev )
{
	static UFunction* pFnInvertMouseUpdated = NULL;

	if ( ! pFnInvertMouseUpdated )
		pFnInvertMouseUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82790 ];

	UR_GFxFrontEnd_Settings_execInvertMouseUpdated_Parms InvertMouseUpdated_Parms;
	memcpy ( &InvertMouseUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnInvertMouseUpdated, &InvertMouseUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.InvertAirVehiclesUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::InvertAirVehiclesUpdated ( struct FEventData ev )
{
	static UFunction* pFnInvertAirVehiclesUpdated = NULL;

	if ( ! pFnInvertAirVehiclesUpdated )
		pFnInvertAirVehiclesUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82788 ];

	UR_GFxFrontEnd_Settings_execInvertAirVehiclesUpdated_Parms InvertAirVehiclesUpdated_Parms;
	memcpy ( &InvertAirVehiclesUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnInvertAirVehiclesUpdated, &InvertAirVehiclesUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.MouseSensitivityUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::MouseSensitivityUpdated ( struct FEventData ev )
{
	static UFunction* pFnMouseSensitivityUpdated = NULL;

	if ( ! pFnMouseSensitivityUpdated )
		pFnMouseSensitivityUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82786 ];

	UR_GFxFrontEnd_Settings_execMouseSensitivityUpdated_Parms MouseSensitivityUpdated_Parms;
	memcpy ( &MouseSensitivityUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnMouseSensitivityUpdated, &MouseSensitivityUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.MouseSensitivityInputUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::MouseSensitivityInputUpdated ( struct FEventData ev )
{
	static UFunction* pFnMouseSensitivityInputUpdated = NULL;

	if ( ! pFnMouseSensitivityInputUpdated )
		pFnMouseSensitivityInputUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82783 ];

	UR_GFxFrontEnd_Settings_execMouseSensitivityInputUpdated_Parms MouseSensitivityInputUpdated_Parms;
	memcpy ( &MouseSensitivityInputUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnMouseSensitivityInputUpdated, &MouseSensitivityInputUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.MouseSmoothingUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::MouseSmoothingUpdated ( struct FEventData ev )
{
	static UFunction* pFnMouseSmoothingUpdated = NULL;

	if ( ! pFnMouseSmoothingUpdated )
		pFnMouseSmoothingUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82781 ];

	UR_GFxFrontEnd_Settings_execMouseSmoothingUpdated_Parms MouseSmoothingUpdated_Parms;
	memcpy ( &MouseSmoothingUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnMouseSmoothingUpdated, &MouseSmoothingUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.FOVInputUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::FOVInputUpdated ( struct FEventData ev )
{
	static UFunction* pFnFOVInputUpdated = NULL;

	if ( ! pFnFOVInputUpdated )
		pFnFOVInputUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82778 ];

	UR_GFxFrontEnd_Settings_execFOVInputUpdated_Parms FOVInputUpdated_Parms;
	memcpy ( &FOVInputUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnFOVInputUpdated, &FOVInputUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.FOVUpdated
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::FOVUpdated ( struct FEventData ev )
{
	static UFunction* pFnFOVUpdated = NULL;

	if ( ! pFnFOVUpdated )
		pFnFOVUpdated = (UFunction*) UObject::GObjObjects()->Data[ 82776 ];

	UR_GFxFrontEnd_Settings_execFOVUpdated_Parms FOVUpdated_Parms;
	memcpy ( &FOVUpdated_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnFOVUpdated, &FOVUpdated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.OnSettingChanged
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::OnSettingChanged ( struct FEventData ev )
{
	static UFunction* pFnOnSettingChanged = NULL;

	if ( ! pFnOnSettingChanged )
		pFnOnSettingChanged = (UFunction*) UObject::GObjObjects()->Data[ 82774 ];

	UR_GFxFrontEnd_Settings_execOnSettingChanged_Parms OnSettingChanged_Parms;
	memcpy ( &OnSettingChanged_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnSettingChanged, &OnSettingChanged_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.GetCheckBoxValue
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

bool UR_GFxFrontEnd_Settings::GetCheckBoxValue ( struct FEventData ev )
{
	static UFunction* pFnGetCheckBoxValue = NULL;

	if ( ! pFnGetCheckBoxValue )
		pFnGetCheckBoxValue = (UFunction*) UObject::GObjObjects()->Data[ 82771 ];

	UR_GFxFrontEnd_Settings_execGetCheckBoxValue_Parms GetCheckBoxValue_Parms;
	memcpy ( &GetCheckBoxValue_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnGetCheckBoxValue, &GetCheckBoxValue_Parms, NULL );

	return GetCheckBoxValue_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SetupScreenMode
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Settings::SetupScreenMode ( )
{
	static UFunction* pFnSetupScreenMode = NULL;

	if ( ! pFnSetupScreenMode )
		pFnSetupScreenMode = (UFunction*) UObject::GObjObjects()->Data[ 82767 ];

	UR_GFxFrontEnd_Settings_execSetupScreenMode_Parms SetupScreenMode_Parms;

	this->ProcessEvent ( pFnSetupScreenMode, &SetupScreenMode_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.GetWidgetValue
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 WidgetName                     ( CPF_Parm | CPF_NeedCtorLink )

struct FString UR_GFxFrontEnd_Settings::GetWidgetValue ( struct FString WidgetName )
{
	static UFunction* pFnGetWidgetValue = NULL;

	if ( ! pFnGetWidgetValue )
		pFnGetWidgetValue = (UFunction*) UObject::GObjObjects()->Data[ 82763 ];

	UR_GFxFrontEnd_Settings_execGetWidgetValue_Parms GetWidgetValue_Parms;
	memcpy ( &GetWidgetValue_Parms.WidgetName, &WidgetName, 0xC );

	this->ProcessEvent ( pFnGetWidgetValue, &GetWidgetValue_Parms, NULL );

	return GetWidgetValue_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Settings.GetSelectedDisplayResolutionIndex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UR_GFxFrontEnd_Settings::GetSelectedDisplayResolutionIndex ( )
{
	static UFunction* pFnGetSelectedDisplayResolutionIndex = NULL;

	if ( ! pFnGetSelectedDisplayResolutionIndex )
		pFnGetSelectedDisplayResolutionIndex = (UFunction*) UObject::GObjObjects()->Data[ 82757 ];

	UR_GFxFrontEnd_Settings_execGetSelectedDisplayResolutionIndex_Parms GetSelectedDisplayResolutionIndex_Parms;

	this->ProcessEvent ( pFnGetSelectedDisplayResolutionIndex, &GetSelectedDisplayResolutionIndex_Parms, NULL );

	return GetSelectedDisplayResolutionIndex_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Settings.GetSelectedARIndex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UR_GFxFrontEnd_Settings::GetSelectedARIndex ( )
{
	static UFunction* pFnGetSelectedARIndex = NULL;

	if ( ! pFnGetSelectedARIndex )
		pFnGetSelectedARIndex = (UFunction*) UObject::GObjObjects()->Data[ 82751 ];

	UR_GFxFrontEnd_Settings_execGetSelectedARIndex_Parms GetSelectedARIndex_Parms;

	this->ProcessEvent ( pFnGetSelectedARIndex, &GetSelectedARIndex_Parms, NULL );

	return GetSelectedARIndex_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Settings.GetSelectedAR
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UR_GFxFrontEnd_Settings::GetSelectedAR ( )
{
	static UFunction* pFnGetSelectedAR = NULL;

	if ( ! pFnGetSelectedAR )
		pFnGetSelectedAR = (UFunction*) UObject::GObjObjects()->Data[ 82745 ];

	UR_GFxFrontEnd_Settings_execGetSelectedAR_Parms GetSelectedAR_Parms;

	this->ProcessEvent ( pFnGetSelectedAR, &GetSelectedAR_Parms, NULL );

	return GetSelectedAR_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Settings.GetAvailableResolutions
// [0x00824002] 
// Parameters infos:
// struct FString                 AspectRatio                    ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::GetAvailableResolutions ( struct FString AspectRatio )
{
	static UFunction* pFnGetAvailableResolutions = NULL;

	if ( ! pFnGetAvailableResolutions )
		pFnGetAvailableResolutions = (UFunction*) UObject::GObjObjects()->Data[ 82734 ];

	UR_GFxFrontEnd_Settings_execGetAvailableResolutions_Parms GetAvailableResolutions_Parms;
	memcpy ( &GetAvailableResolutions_Parms.AspectRatio, &AspectRatio, 0xC );

	this->ProcessEvent ( pFnGetAvailableResolutions, &GetAvailableResolutions_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.ClearResolutionOptions
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Settings::ClearResolutionOptions ( )
{
	static UFunction* pFnClearResolutionOptions = NULL;

	if ( ! pFnClearResolutionOptions )
		pFnClearResolutionOptions = (UFunction*) UObject::GObjObjects()->Data[ 82732 ];

	UR_GFxFrontEnd_Settings_execClearResolutionOptions_Parms ClearResolutionOptions_Parms;

	this->ProcessEvent ( pFnClearResolutionOptions, &ClearResolutionOptions_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SpewAvailableResolutions
// [0x00020002] 
// Parameters infos:
// int                            resIndex                       ( CPF_Parm )

void UR_GFxFrontEnd_Settings::SpewAvailableResolutions ( int resIndex )
{
	static UFunction* pFnSpewAvailableResolutions = NULL;

	if ( ! pFnSpewAvailableResolutions )
		pFnSpewAvailableResolutions = (UFunction*) UObject::GObjObjects()->Data[ 82729 ];

	UR_GFxFrontEnd_Settings_execSpewAvailableResolutions_Parms SpewAvailableResolutions_Parms;
	SpewAvailableResolutions_Parms.resIndex = resIndex;

	this->ProcessEvent ( pFnSpewAvailableResolutions, &SpewAvailableResolutions_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.PopulateDynamicData
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Settings::PopulateDynamicData ( )
{
	static UFunction* pFnPopulateDynamicData = NULL;

	if ( ! pFnPopulateDynamicData )
		pFnPopulateDynamicData = (UFunction*) UObject::GObjObjects()->Data[ 82728 ];

	UR_GFxFrontEnd_Settings_execPopulateDynamicData_Parms PopulateDynamicData_Parms;

	this->ProcessEvent ( pFnPopulateDynamicData, &PopulateDynamicData_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.GetGameOptionByName
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 OptionName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FGameOption             outOption                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UR_GFxFrontEnd_Settings::GetGameOptionByName ( struct FString OptionName, struct FGameOption* outOption )
{
	static UFunction* pFnGetGameOptionByName = NULL;

	if ( ! pFnGetGameOptionByName )
		pFnGetGameOptionByName = (UFunction*) UObject::GObjObjects()->Data[ 82723 ];

	UR_GFxFrontEnd_Settings_execGetGameOptionByName_Parms GetGameOptionByName_Parms;
	memcpy ( &GetGameOptionByName_Parms.OptionName, &OptionName, 0xC );

	this->ProcessEvent ( pFnGetGameOptionByName, &GetGameOptionByName_Parms, NULL );

	if ( outOption )
		memcpy ( outOption, &GetGameOptionByName_Parms.outOption, 0x34 );

	return GetGameOptionByName_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Settings.HasGameOption
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 str                            ( CPF_Parm | CPF_NeedCtorLink )
// struct FGameOption             inOption                       ( CPF_Parm | CPF_NeedCtorLink )

bool UR_GFxFrontEnd_Settings::HasGameOption ( struct FString str, struct FGameOption inOption )
{
	static UFunction* pFnHasGameOption = NULL;

	if ( ! pFnHasGameOption )
		pFnHasGameOption = (UFunction*) UObject::GObjObjects()->Data[ 82719 ];

	UR_GFxFrontEnd_Settings_execHasGameOption_Parms HasGameOption_Parms;
	memcpy ( &HasGameOption_Parms.str, &str, 0xC );
	memcpy ( &HasGameOption_Parms.inOption, &inOption, 0x34 );

	this->ProcessEvent ( pFnHasGameOption, &HasGameOption_Parms, NULL );

	return HasGameOption_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SetupDefaultValue
// [0x00020002] 
// Parameters infos:
// struct FString                 WidgetName                     ( CPF_Parm | CPF_NeedCtorLink )
// class UGFxObject*              Widget                         ( CPF_Parm )

void UR_GFxFrontEnd_Settings::SetupDefaultValue ( struct FString WidgetName, class UGFxObject* Widget )
{
	static UFunction* pFnSetupDefaultValue = NULL;

	if ( ! pFnSetupDefaultValue )
		pFnSetupDefaultValue = (UFunction*) UObject::GObjObjects()->Data[ 82714 ];

	UR_GFxFrontEnd_Settings_execSetupDefaultValue_Parms SetupDefaultValue_Parms;
	memcpy ( &SetupDefaultValue_Parms.WidgetName, &WidgetName, 0xC );
	SetupDefaultValue_Parms.Widget = Widget;

	this->ProcessEvent ( pFnSetupDefaultValue, &SetupDefaultValue_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.TranslateAFLevelToIndex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            af                             ( CPF_Parm )

int UR_GFxFrontEnd_Settings::TranslateAFLevelToIndex ( int af )
{
	static UFunction* pFnTranslateAFLevelToIndex = NULL;

	if ( ! pFnTranslateAFLevelToIndex )
		pFnTranslateAFLevelToIndex = (UFunction*) UObject::GObjObjects()->Data[ 82711 ];

	UR_GFxFrontEnd_Settings_execTranslateAFLevelToIndex_Parms TranslateAFLevelToIndex_Parms;
	TranslateAFLevelToIndex_Parms.af = af;

	this->ProcessEvent ( pFnTranslateAFLevelToIndex, &TranslateAFLevelToIndex_Parms, NULL );

	return TranslateAFLevelToIndex_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Settings.PopulateOptionData
// [0x00420002] 
// Parameters infos:
// TArray< struct FString >       OptionData                     ( CPF_Parm | CPF_NeedCtorLink )
// class UGFxObject*              RendererDataProvider           ( CPF_Parm | CPF_OutParm )

void UR_GFxFrontEnd_Settings::PopulateOptionData ( TArray< struct FString > OptionData, class UGFxObject** RendererDataProvider )
{
	static UFunction* pFnPopulateOptionData = NULL;

	if ( ! pFnPopulateOptionData )
		pFnPopulateOptionData = (UFunction*) UObject::GObjObjects()->Data[ 82705 ];

	UR_GFxFrontEnd_Settings_execPopulateOptionData_Parms PopulateOptionData_Parms;
	memcpy ( &PopulateOptionData_Parms.OptionData, &OptionData, 0xC );

	this->ProcessEvent ( pFnPopulateOptionData, &PopulateOptionData_Parms, NULL );

	if ( RendererDataProvider )
		*RendererDataProvider = PopulateOptionData_Parms.RendererDataProvider;
};

// Function RavagedGame.R_GFxFrontEnd_Settings.InitializeGameOptions
// [0x00824002] 
// Parameters infos:
// struct FString                 WidgetName                     ( CPF_Parm | CPF_NeedCtorLink )
// class UGFxObject*              Widget                         ( CPF_Parm )
// unsigned long                  disableSettingsUpdate          ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_Settings::InitializeGameOptions ( struct FString WidgetName, class UGFxObject* Widget, unsigned long disableSettingsUpdate )
{
	static UFunction* pFnInitializeGameOptions = NULL;

	if ( ! pFnInitializeGameOptions )
		pFnInitializeGameOptions = (UFunction*) UObject::GObjObjects()->Data[ 82696 ];

	UR_GFxFrontEnd_Settings_execInitializeGameOptions_Parms InitializeGameOptions_Parms;
	memcpy ( &InitializeGameOptions_Parms.WidgetName, &WidgetName, 0xC );
	InitializeGameOptions_Parms.Widget = Widget;
	InitializeGameOptions_Parms.disableSettingsUpdate = disableSettingsUpdate;

	this->ProcessEvent ( pFnInitializeGameOptions, &InitializeGameOptions_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.DeactivateTextBox
// [0x00020000] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::DeactivateTextBox ( struct FEventData ev )
{
	static UFunction* pFnDeactivateTextBox = NULL;

	if ( ! pFnDeactivateTextBox )
		pFnDeactivateTextBox = (UFunction*) UObject::GObjObjects()->Data[ 82694 ];

	UR_GFxFrontEnd_Settings_execDeactivateTextBox_Parms DeactivateTextBox_Parms;
	memcpy ( &DeactivateTextBox_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnDeactivateTextBox, &DeactivateTextBox_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.ActivateTextBox
// [0x00020000] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::ActivateTextBox ( struct FEventData ev )
{
	static UFunction* pFnActivateTextBox = NULL;

	if ( ! pFnActivateTextBox )
		pFnActivateTextBox = (UFunction*) UObject::GObjObjects()->Data[ 82692 ];

	UR_GFxFrontEnd_Settings_execActivateTextBox_Parms ActivateTextBox_Parms;
	memcpy ( &ActivateTextBox_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnActivateTextBox, &ActivateTextBox_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.UnbindKey
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BindName                       ( CPF_Parm )
// int                            keyNumber                      ( CPF_OptionalParm | CPF_Parm )

bool UR_GFxFrontEnd_Settings::UnbindKey ( struct FName BindName, int keyNumber )
{
	static UFunction* pFnUnbindKey = NULL;

	if ( ! pFnUnbindKey )
		pFnUnbindKey = (UFunction*) UObject::GObjObjects()->Data[ 82684 ];

	UR_GFxFrontEnd_Settings_execUnbindKey_Parms UnbindKey_Parms;
	memcpy ( &UnbindKey_Parms.BindName, &BindName, 0x8 );
	UnbindKey_Parms.keyNumber = keyNumber;

	this->ProcessEvent ( pFnUnbindKey, &UnbindKey_Parms, NULL );

	return UnbindKey_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Settings.BindKey
// [0x00820002] 
// Parameters infos:
// struct FName                   KeyName                        ( CPF_Parm )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )
// int                            keyNumber                      ( CPF_Parm )

void UR_GFxFrontEnd_Settings::BindKey ( struct FName KeyName, struct FString Command, int keyNumber )
{
	static UFunction* pFnBindKey = NULL;

	if ( ! pFnBindKey )
		pFnBindKey = (UFunction*) UObject::GObjObjects()->Data[ 82678 ];

	UR_GFxFrontEnd_Settings_execBindKey_Parms BindKey_Parms;
	memcpy ( &BindKey_Parms.KeyName, &KeyName, 0x8 );
	memcpy ( &BindKey_Parms.Command, &Command, 0xC );
	BindKey_Parms.keyNumber = keyNumber;

	this->ProcessEvent ( pFnBindKey, &BindKey_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.RemapKey
// [0x00020002] 
// Parameters infos:
// int                            buttonIndex                    ( CPF_Parm )

void UR_GFxFrontEnd_Settings::RemapKey ( int buttonIndex )
{
	static UFunction* pFnRemapKey = NULL;

	if ( ! pFnRemapKey )
		pFnRemapKey = (UFunction*) UObject::GObjObjects()->Data[ 82671 ];

	UR_GFxFrontEnd_Settings_execRemapKey_Parms RemapKey_Parms;
	RemapKey_Parms.buttonIndex = buttonIndex;

	this->ProcessEvent ( pFnRemapKey, &RemapKey_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.UpdateListDataProvider
// [0x00024002] 
// Parameters infos:
// unsigned long                  RememberIndex                  ( CPF_Parm )
// unsigned long                  UseDefaults                    ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_Settings::UpdateListDataProvider ( unsigned long RememberIndex, unsigned long UseDefaults )
{
	static UFunction* pFnUpdateListDataProvider = NULL;

	if ( ! pFnUpdateListDataProvider )
		pFnUpdateListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 82659 ];

	UR_GFxFrontEnd_Settings_execUpdateListDataProvider_Parms UpdateListDataProvider_Parms;
	UpdateListDataProvider_Parms.RememberIndex = RememberIndex;
	UpdateListDataProvider_Parms.UseDefaults = UseDefaults;

	this->ProcessEvent ( pFnUpdateListDataProvider, &UpdateListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Settings::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 82658 ];

	UR_GFxFrontEnd_Settings_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SetAllSceneComponentsEnabled
// [0x00020002] 
// Parameters infos:
// unsigned long                  Enabled                        ( CPF_Parm )

void UR_GFxFrontEnd_Settings::SetAllSceneComponentsEnabled ( unsigned long Enabled )
{
	static UFunction* pFnSetAllSceneComponentsEnabled = NULL;

	if ( ! pFnSetAllSceneComponentsEnabled )
		pFnSetAllSceneComponentsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 82656 ];

	UR_GFxFrontEnd_Settings_execSetAllSceneComponentsEnabled_Parms SetAllSceneComponentsEnabled_Parms;
	SetAllSceneComponentsEnabled_Parms.Enabled = Enabled;

	this->ProcessEvent ( pFnSetAllSceneComponentsEnabled, &SetAllSceneComponentsEnabled_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_Settings::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 82654 ];

	UR_GFxFrontEnd_Settings_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.OnViewClosed
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Settings::OnViewClosed ( )
{
	static UFunction* pFnOnViewClosed = NULL;

	if ( ! pFnOnViewClosed )
		pFnOnViewClosed = (UFunction*) UObject::GObjObjects()->Data[ 82653 ];

	UR_GFxFrontEnd_Settings_execOnViewClosed_Parms OnViewClosed_Parms;

	this->ProcessEvent ( pFnOnViewClosed, &OnViewClosed_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.EnableCurrentTab
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Settings::EnableCurrentTab ( )
{
	static UFunction* pFnEnableCurrentTab = NULL;

	if ( ! pFnEnableCurrentTab )
		pFnEnableCurrentTab = (UFunction*) UObject::GObjObjects()->Data[ 82652 ];

	UR_GFxFrontEnd_Settings_execEnableCurrentTab_Parms EnableCurrentTab_Parms;

	this->ProcessEvent ( pFnEnableCurrentTab, &EnableCurrentTab_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_Settings::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 82650 ];

	UR_GFxFrontEnd_Settings_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.OnViewActivated
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Settings::OnViewActivated ( )
{
	static UFunction* pFnOnViewActivated = NULL;

	if ( ! pFnOnViewActivated )
		pFnOnViewActivated = (UFunction*) UObject::GObjObjects()->Data[ 82649 ];

	UR_GFxFrontEnd_Settings_execOnViewActivated_Parms OnViewActivated_Parms;

	this->ProcessEvent ( pFnOnViewActivated, &OnViewActivated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.InitLocalPC
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Settings::InitLocalPC ( )
{
	static UFunction* pFnInitLocalPC = NULL;

	if ( ! pFnInitLocalPC )
		pFnInitLocalPC = (UFunction*) UObject::GObjObjects()->Data[ 82647 ];

	UR_GFxFrontEnd_Settings_execInitLocalPC_Parms InitLocalPC_Parms;

	this->ProcessEvent ( pFnInitLocalPC, &InitLocalPC_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.Select_KeyBindings
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Settings::Select_KeyBindings ( )
{
	static UFunction* pFnSelect_KeyBindings = NULL;

	if ( ! pFnSelect_KeyBindings )
		pFnSelect_KeyBindings = (UFunction*) UObject::GObjObjects()->Data[ 82646 ];

	UR_GFxFrontEnd_Settings_execSelect_KeyBindings_Parms Select_KeyBindings_Parms;

	this->ProcessEvent ( pFnSelect_KeyBindings, &Select_KeyBindings_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.Select_AudioOptions
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Settings::Select_AudioOptions ( )
{
	static UFunction* pFnSelect_AudioOptions = NULL;

	if ( ! pFnSelect_AudioOptions )
		pFnSelect_AudioOptions = (UFunction*) UObject::GObjObjects()->Data[ 82645 ];

	UR_GFxFrontEnd_Settings_execSelect_AudioOptions_Parms Select_AudioOptions_Parms;

	this->ProcessEvent ( pFnSelect_AudioOptions, &Select_AudioOptions_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.Select_AdvancedDisplayOptions
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Settings::Select_AdvancedDisplayOptions ( )
{
	static UFunction* pFnSelect_AdvancedDisplayOptions = NULL;

	if ( ! pFnSelect_AdvancedDisplayOptions )
		pFnSelect_AdvancedDisplayOptions = (UFunction*) UObject::GObjObjects()->Data[ 82644 ];

	UR_GFxFrontEnd_Settings_execSelect_AdvancedDisplayOptions_Parms Select_AdvancedDisplayOptions_Parms;

	this->ProcessEvent ( pFnSelect_AdvancedDisplayOptions, &Select_AdvancedDisplayOptions_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.Select_DisplayOptions
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Settings::Select_DisplayOptions ( )
{
	static UFunction* pFnSelect_DisplayOptions = NULL;

	if ( ! pFnSelect_DisplayOptions )
		pFnSelect_DisplayOptions = (UFunction*) UObject::GObjObjects()->Data[ 82643 ];

	UR_GFxFrontEnd_Settings_execSelect_DisplayOptions_Parms Select_DisplayOptions_Parms;

	this->ProcessEvent ( pFnSelect_DisplayOptions, &Select_DisplayOptions_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.Select_GeneralOptions
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Settings::Select_GeneralOptions ( )
{
	static UFunction* pFnSelect_GeneralOptions = NULL;

	if ( ! pFnSelect_GeneralOptions )
		pFnSelect_GeneralOptions = (UFunction*) UObject::GObjObjects()->Data[ 82642 ];

	UR_GFxFrontEnd_Settings_execSelect_GeneralOptions_Parms Select_GeneralOptions_Parms;

	this->ProcessEvent ( pFnSelect_GeneralOptions, &Select_GeneralOptions_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.OnPressRemapButton1
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::OnPressRemapButton1 ( struct FEventData ev )
{
	static UFunction* pFnOnPressRemapButton1 = NULL;

	if ( ! pFnOnPressRemapButton1 )
		pFnOnPressRemapButton1 = (UFunction*) UObject::GObjObjects()->Data[ 82640 ];

	UR_GFxFrontEnd_Settings_execOnPressRemapButton1_Parms OnPressRemapButton1_Parms;
	memcpy ( &OnPressRemapButton1_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnPressRemapButton1, &OnPressRemapButton1_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.OnPressRemapButton0
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::OnPressRemapButton0 ( struct FEventData ev )
{
	static UFunction* pFnOnPressRemapButton0 = NULL;

	if ( ! pFnOnPressRemapButton0 )
		pFnOnPressRemapButton0 = (UFunction*) UObject::GObjObjects()->Data[ 82638 ];

	UR_GFxFrontEnd_Settings_execOnPressRemapButton0_Parms OnPressRemapButton0_Parms;
	memcpy ( &OnPressRemapButton0_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnPressRemapButton0, &OnPressRemapButton0_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.OnListChange
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::OnListChange ( struct FEventData ev )
{
	static UFunction* pFnOnListChange = NULL;

	if ( ! pFnOnListChange )
		pFnOnListChange = (UFunction*) UObject::GObjObjects()->Data[ 82634 ];

	UR_GFxFrontEnd_Settings_execOnListChange_Parms OnListChange_Parms;
	memcpy ( &OnListChange_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListChange, &OnListChange_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.Changed
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::Changed ( struct FEventData ev )
{
	static UFunction* pFnChanged = NULL;

	if ( ! pFnChanged )
		pFnChanged = (UFunction*) UObject::GObjObjects()->Data[ 82632 ];

	UR_GFxFrontEnd_Settings_execChanged_Parms Changed_Parms;
	memcpy ( &Changed_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnChanged, &Changed_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SetList
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              InList                         ( CPF_Parm )

void UR_GFxFrontEnd_Settings::SetList ( class UGFxObject* InList )
{
	static UFunction* pFnSetList = NULL;

	if ( ! pFnSetList )
		pFnSetList = (UFunction*) UObject::GObjObjects()->Data[ 82630 ];

	UR_GFxFrontEnd_Settings_execSetList_Parms SetList_Parms;
	SetList_Parms.InList = InList;

	this->ProcessEvent ( pFnSetList, &SetList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.UpdateMiddleBarListDataProvider
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Settings::UpdateMiddleBarListDataProvider ( )
{
	static UFunction* pFnUpdateMiddleBarListDataProvider = NULL;

	if ( ! pFnUpdateMiddleBarListDataProvider )
		pFnUpdateMiddleBarListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 82626 ];

	UR_GFxFrontEnd_Settings_execUpdateMiddleBarListDataProvider_Parms UpdateMiddleBarListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateMiddleBarListDataProvider, &UpdateMiddleBarListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SetKeybindWidgetEnabled
// [0x00020002] 
// Parameters infos:
// unsigned long                  Enabled                        ( CPF_Parm )

void UR_GFxFrontEnd_Settings::SetKeybindWidgetEnabled ( unsigned long Enabled )
{
	static UFunction* pFnSetKeybindWidgetEnabled = NULL;

	if ( ! pFnSetKeybindWidgetEnabled )
		pFnSetKeybindWidgetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 82624 ];

	UR_GFxFrontEnd_Settings_execSetKeybindWidgetEnabled_Parms SetKeybindWidgetEnabled_Parms;
	SetKeybindWidgetEnabled_Parms.Enabled = Enabled;

	this->ProcessEvent ( pFnSetKeybindWidgetEnabled, &SetKeybindWidgetEnabled_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SetKeybindButtonsEnabled
// [0x00020002] 
// Parameters infos:
// unsigned long                  Enabled                        ( CPF_Parm )
// unsigned long                  Visible                        ( CPF_Parm )

void UR_GFxFrontEnd_Settings::SetKeybindButtonsEnabled ( unsigned long Enabled, unsigned long Visible )
{
	static UFunction* pFnSetKeybindButtonsEnabled = NULL;

	if ( ! pFnSetKeybindButtonsEnabled )
		pFnSetKeybindButtonsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 82620 ];

	UR_GFxFrontEnd_Settings_execSetKeybindButtonsEnabled_Parms SetKeybindButtonsEnabled_Parms;
	SetKeybindButtonsEnabled_Parms.Enabled = Enabled;
	SetKeybindButtonsEnabled_Parms.Visible = Visible;

	this->ProcessEvent ( pFnSetKeybindButtonsEnabled, &SetKeybindButtonsEnabled_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SetAudioWidgetEnabled
// [0x00020002] 
// Parameters infos:
// unsigned long                  Enabled                        ( CPF_Parm )

void UR_GFxFrontEnd_Settings::SetAudioWidgetEnabled ( unsigned long Enabled )
{
	static UFunction* pFnSetAudioWidgetEnabled = NULL;

	if ( ! pFnSetAudioWidgetEnabled )
		pFnSetAudioWidgetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 82618 ];

	UR_GFxFrontEnd_Settings_execSetAudioWidgetEnabled_Parms SetAudioWidgetEnabled_Parms;
	SetAudioWidgetEnabled_Parms.Enabled = Enabled;

	this->ProcessEvent ( pFnSetAudioWidgetEnabled, &SetAudioWidgetEnabled_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SetAdvancedDisplayWidgetEnabled
// [0x00020002] 
// Parameters infos:
// unsigned long                  Enabled                        ( CPF_Parm )

void UR_GFxFrontEnd_Settings::SetAdvancedDisplayWidgetEnabled ( unsigned long Enabled )
{
	static UFunction* pFnSetAdvancedDisplayWidgetEnabled = NULL;

	if ( ! pFnSetAdvancedDisplayWidgetEnabled )
		pFnSetAdvancedDisplayWidgetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 82616 ];

	UR_GFxFrontEnd_Settings_execSetAdvancedDisplayWidgetEnabled_Parms SetAdvancedDisplayWidgetEnabled_Parms;
	SetAdvancedDisplayWidgetEnabled_Parms.Enabled = Enabled;

	this->ProcessEvent ( pFnSetAdvancedDisplayWidgetEnabled, &SetAdvancedDisplayWidgetEnabled_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SetDisplayWidgetEnabled
// [0x00020002] 
// Parameters infos:
// unsigned long                  Enabled                        ( CPF_Parm )

void UR_GFxFrontEnd_Settings::SetDisplayWidgetEnabled ( unsigned long Enabled )
{
	static UFunction* pFnSetDisplayWidgetEnabled = NULL;

	if ( ! pFnSetDisplayWidgetEnabled )
		pFnSetDisplayWidgetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 82614 ];

	UR_GFxFrontEnd_Settings_execSetDisplayWidgetEnabled_Parms SetDisplayWidgetEnabled_Parms;
	SetDisplayWidgetEnabled_Parms.Enabled = Enabled;

	this->ProcessEvent ( pFnSetDisplayWidgetEnabled, &SetDisplayWidgetEnabled_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SetGeneralWidgetEnabled
// [0x00020002] 
// Parameters infos:
// unsigned long                  Enabled                        ( CPF_Parm )

void UR_GFxFrontEnd_Settings::SetGeneralWidgetEnabled ( unsigned long Enabled )
{
	static UFunction* pFnSetGeneralWidgetEnabled = NULL;

	if ( ! pFnSetGeneralWidgetEnabled )
		pFnSetGeneralWidgetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 82612 ];

	UR_GFxFrontEnd_Settings_execSetGeneralWidgetEnabled_Parms SetGeneralWidgetEnabled_Parms;
	SetGeneralWidgetEnabled_Parms.Enabled = Enabled;

	this->ProcessEvent ( pFnSetGeneralWidgetEnabled, &SetGeneralWidgetEnabled_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SetWidgetVisible
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              Widget                         ( CPF_Parm )
// unsigned long                  Enabled                        ( CPF_Parm )

void UR_GFxFrontEnd_Settings::SetWidgetVisible ( class UGFxObject* Widget, unsigned long Enabled )
{
	static UFunction* pFnSetWidgetVisible = NULL;

	if ( ! pFnSetWidgetVisible )
		pFnSetWidgetVisible = (UFunction*) UObject::GObjObjects()->Data[ 82609 ];

	UR_GFxFrontEnd_Settings_execSetWidgetVisible_Parms SetWidgetVisible_Parms;
	SetWidgetVisible_Parms.Widget = Widget;
	SetWidgetVisible_Parms.Enabled = Enabled;

	this->ProcessEvent ( pFnSetWidgetVisible, &SetWidgetVisible_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SetWidgetEnabled
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              Widget                         ( CPF_Parm )
// unsigned long                  Enabled                        ( CPF_Parm )

void UR_GFxFrontEnd_Settings::SetWidgetEnabled ( class UGFxObject* Widget, unsigned long Enabled )
{
	static UFunction* pFnSetWidgetEnabled = NULL;

	if ( ! pFnSetWidgetEnabled )
		pFnSetWidgetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 82606 ];

	UR_GFxFrontEnd_Settings_execSetWidgetEnabled_Parms SetWidgetEnabled_Parms;
	SetWidgetEnabled_Parms.Widget = Widget;
	SetWidgetEnabled_Parms.Enabled = Enabled;

	this->ProcessEvent ( pFnSetWidgetEnabled, &SetWidgetEnabled_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Settings.WidgetInitialized
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_Settings::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 82589 ];

	UR_GFxFrontEnd_Settings_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Settings.SettingsLog
// [0x00020002] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Settings::SettingsLog ( struct FString S )
{
	static UFunction* pFnSettingsLog = NULL;

	if ( ! pFnSettingsLog )
		pFnSettingsLog = (UFunction*) UObject::GObjObjects()->Data[ 82587 ];

	UR_GFxFrontEnd_Settings_execSettingsLog_Parms SettingsLog_Parms;
	memcpy ( &SettingsLog_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnSettingsLog, &SettingsLog_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.ReadOnlineStatsComplete
// [0x00820002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UR_GFxFrontEnd_Stats::ReadOnlineStatsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnReadOnlineStatsComplete = NULL;

	if ( ! pFnReadOnlineStatsComplete )
		pFnReadOnlineStatsComplete = (UFunction*) UObject::GObjObjects()->Data[ 83008 ];

	UR_GFxFrontEnd_Stats_execReadOnlineStatsComplete_Parms ReadOnlineStatsComplete_Parms;
	ReadOnlineStatsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnReadOnlineStatsComplete, &ReadOnlineStatsComplete_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.OnlineCleanup
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Stats::OnlineCleanup ( )
{
	static UFunction* pFnOnlineCleanup = NULL;

	if ( ! pFnOnlineCleanup )
		pFnOnlineCleanup = (UFunction*) UObject::GObjObjects()->Data[ 83007 ];

	UR_GFxFrontEnd_Stats_execOnlineCleanup_Parms OnlineCleanup_Parms;

	this->ProcessEvent ( pFnOnlineCleanup, &OnlineCleanup_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.DoInitialLeaderboardRead
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Stats::DoInitialLeaderboardRead ( )
{
	static UFunction* pFnDoInitialLeaderboardRead = NULL;

	if ( ! pFnDoInitialLeaderboardRead )
		pFnDoInitialLeaderboardRead = (UFunction*) UObject::GObjObjects()->Data[ 83006 ];

	UR_GFxFrontEnd_Stats_execDoInitialLeaderboardRead_Parms DoInitialLeaderboardRead_Parms;

	this->ProcessEvent ( pFnDoInitialLeaderboardRead, &DoInitialLeaderboardRead_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.OnlineInit
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Stats::OnlineInit ( )
{
	static UFunction* pFnOnlineInit = NULL;

	if ( ! pFnOnlineInit )
		pFnOnlineInit = (UFunction*) UObject::GObjObjects()->Data[ 83004 ];

	UR_GFxFrontEnd_Stats_execOnlineInit_Parms OnlineInit_Parms;

	this->ProcessEvent ( pFnOnlineInit, &OnlineInit_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.OnOpenAnimComplete
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd_Stats::OnOpenAnimComplete ( )
{
	static UFunction* pFnOnOpenAnimComplete = NULL;

	if ( ! pFnOnOpenAnimComplete )
		pFnOnOpenAnimComplete = (UFunction*) UObject::GObjObjects()->Data[ 83003 ];

	UR_GFxFrontEnd_Stats_execOnOpenAnimComplete_Parms OnOpenAnimComplete_Parms;

	this->ProcessEvent ( pFnOnOpenAnimComplete, &OnOpenAnimComplete_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.OnCloseAnimComplete
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Stats::OnCloseAnimComplete ( )
{
	static UFunction* pFnOnCloseAnimComplete = NULL;

	if ( ! pFnOnCloseAnimComplete )
		pFnOnCloseAnimComplete = (UFunction*) UObject::GObjObjects()->Data[ 83002 ];

	UR_GFxFrontEnd_Stats_execOnCloseAnimComplete_Parms OnCloseAnimComplete_Parms;

	this->ProcessEvent ( pFnOnCloseAnimComplete, &OnCloseAnimComplete_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.UpdateFooter
// [0x00020002] 
// Parameters infos:
// struct UR_GFxFrontEnd_Stats_FUILeaderboardEntry FooterData                     ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Stats::UpdateFooter ( struct UR_GFxFrontEnd_Stats_FUILeaderboardEntry FooterData )
{
	static UFunction* pFnUpdateFooter = NULL;

	if ( ! pFnUpdateFooter )
		pFnUpdateFooter = (UFunction*) UObject::GObjObjects()->Data[ 83000 ];

	UR_GFxFrontEnd_Stats_execUpdateFooter_Parms UpdateFooter_Parms;
	memcpy ( &UpdateFooter_Parms.FooterData, &FooterData, 0x24 );

	this->ProcessEvent ( pFnUpdateFooter, &UpdateFooter_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.UpdateHeaders
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Stats::UpdateHeaders ( )
{
	static UFunction* pFnUpdateHeaders = NULL;

	if ( ! pFnUpdateHeaders )
		pFnUpdateHeaders = (UFunction*) UObject::GObjObjects()->Data[ 82998 ];

	UR_GFxFrontEnd_Stats_execUpdateHeaders_Parms UpdateHeaders_Parms;

	this->ProcessEvent ( pFnUpdateHeaders, &UpdateHeaders_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.SetPlayerRow
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              UpdatedPlayerRow               ( CPF_Parm )

void UR_GFxFrontEnd_Stats::SetPlayerRow ( class UGFxObject* UpdatedPlayerRow )
{
	static UFunction* pFnSetPlayerRow = NULL;

	if ( ! pFnSetPlayerRow )
		pFnSetPlayerRow = (UFunction*) UObject::GObjObjects()->Data[ 82996 ];

	UR_GFxFrontEnd_Stats_execSetPlayerRow_Parms SetPlayerRow_Parms;
	SetPlayerRow_Parms.UpdatedPlayerRow = UpdatedPlayerRow;

	this->ProcessEvent ( pFnSetPlayerRow, &SetPlayerRow_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.UpdateRow
// [0x00820002] 
// Parameters infos:
// struct UR_GFxFrontEnd_Stats_FListRow CurRow                         ( CPF_Parm )
// struct UR_GFxFrontEnd_Stats_FUILeaderboardEntry CurData                        ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Stats::UpdateRow ( struct UR_GFxFrontEnd_Stats_FListRow CurRow, struct UR_GFxFrontEnd_Stats_FUILeaderboardEntry CurData )
{
	static UFunction* pFnUpdateRow = NULL;

	if ( ! pFnUpdateRow )
		pFnUpdateRow = (UFunction*) UObject::GObjObjects()->Data[ 82988 ];

	UR_GFxFrontEnd_Stats_execUpdateRow_Parms UpdateRow_Parms;
	memcpy ( &UpdateRow_Parms.CurRow, &CurRow, 0x20 );
	memcpy ( &UpdateRow_Parms.CurData, &CurData, 0x24 );

	this->ProcessEvent ( pFnUpdateRow, &UpdateRow_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.UpdateLeaderboardLists
// [0x00820002] 
// Parameters infos:

void UR_GFxFrontEnd_Stats::UpdateLeaderboardLists ( )
{
	static UFunction* pFnUpdateLeaderboardLists = NULL;

	if ( ! pFnUpdateLeaderboardLists )
		pFnUpdateLeaderboardLists = (UFunction*) UObject::GObjObjects()->Data[ 82985 ];

	UR_GFxFrontEnd_Stats_execUpdateLeaderboardLists_Parms UpdateLeaderboardLists_Parms;

	this->ProcessEvent ( pFnUpdateLeaderboardLists, &UpdateLeaderboardLists_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.Draw
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Stats::Draw ( )
{
	static UFunction* pFnDraw = NULL;

	if ( ! pFnDraw )
		pFnDraw = (UFunction*) UObject::GObjObjects()->Data[ 82984 ];

	UR_GFxFrontEnd_Stats_execDraw_Parms Draw_Parms;

	this->ProcessEvent ( pFnDraw, &Draw_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.SetupList
// [0x00820002] 
// Parameters infos:

void UR_GFxFrontEnd_Stats::SetupList ( )
{
	static UFunction* pFnSetupList = NULL;

	if ( ! pFnSetupList )
		pFnSetupList = (UFunction*) UObject::GObjObjects()->Data[ 82979 ];

	UR_GFxFrontEnd_Stats_execSetupList_Parms SetupList_Parms;

	this->ProcessEvent ( pFnSetupList, &SetupList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.ConfigLeaderboard
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Stats::ConfigLeaderboard ( )
{
	static UFunction* pFnConfigLeaderboard = NULL;

	if ( ! pFnConfigLeaderboard )
		pFnConfigLeaderboard = (UFunction*) UObject::GObjObjects()->Data[ 82978 ];

	UR_GFxFrontEnd_Stats_execConfigLeaderboard_Parms ConfigLeaderboard_Parms;

	this->ProcessEvent ( pFnConfigLeaderboard, &ConfigLeaderboard_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.PlayCloseAnimation
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Stats::PlayCloseAnimation ( )
{
	static UFunction* pFnPlayCloseAnimation = NULL;

	if ( ! pFnPlayCloseAnimation )
		pFnPlayCloseAnimation = (UFunction*) UObject::GObjObjects()->Data[ 82977 ];

	UR_GFxFrontEnd_Stats_execPlayCloseAnimation_Parms PlayCloseAnimation_Parms;

	this->ProcessEvent ( pFnPlayCloseAnimation, &PlayCloseAnimation_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.PlayOpenAnimation
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Stats::PlayOpenAnimation ( )
{
	static UFunction* pFnPlayOpenAnimation = NULL;

	if ( ! pFnPlayOpenAnimation )
		pFnPlayOpenAnimation = (UFunction*) UObject::GObjObjects()->Data[ 82976 ];

	UR_GFxFrontEnd_Stats_execPlayOpenAnimation_Parms PlayOpenAnimation_Parms;

	this->ProcessEvent ( pFnPlayOpenAnimation, &PlayOpenAnimation_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.GetLocalPlayerOwnerIndex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UR_GFxFrontEnd_Stats::GetLocalPlayerOwnerIndex ( )
{
	static UFunction* pFnGetLocalPlayerOwnerIndex = NULL;

	if ( ! pFnGetLocalPlayerOwnerIndex )
		pFnGetLocalPlayerOwnerIndex = (UFunction*) UObject::GObjObjects()->Data[ 82974 ];

	UR_GFxFrontEnd_Stats_execGetLocalPlayerOwnerIndex_Parms GetLocalPlayerOwnerIndex_Parms;

	this->ProcessEvent ( pFnGetLocalPlayerOwnerIndex, &GetLocalPlayerOwnerIndex_Parms, NULL );

	return GetLocalPlayerOwnerIndex_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Stats.Select_Leaderboard
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Stats::Select_Leaderboard ( )
{
	static UFunction* pFnSelect_Leaderboard = NULL;

	if ( ! pFnSelect_Leaderboard )
		pFnSelect_Leaderboard = (UFunction*) UObject::GObjObjects()->Data[ 82973 ];

	UR_GFxFrontEnd_Stats_execSelect_Leaderboard_Parms Select_Leaderboard_Parms;

	this->ProcessEvent ( pFnSelect_Leaderboard, &Select_Leaderboard_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.Select_PlayerStats
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Stats::Select_PlayerStats ( )
{
	static UFunction* pFnSelect_PlayerStats = NULL;

	if ( ! pFnSelect_PlayerStats )
		pFnSelect_PlayerStats = (UFunction*) UObject::GObjObjects()->Data[ 82972 ];

	UR_GFxFrontEnd_Stats_execSelect_PlayerStats_Parms Select_PlayerStats_Parms;

	this->ProcessEvent ( pFnSelect_PlayerStats, &Select_PlayerStats_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.OnListChange
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Stats::OnListChange ( struct FEventData ev )
{
	static UFunction* pFnOnListChange = NULL;

	if ( ! pFnOnListChange )
		pFnOnListChange = (UFunction*) UObject::GObjObjects()->Data[ 82968 ];

	UR_GFxFrontEnd_Stats_execOnListChange_Parms OnListChange_Parms;
	memcpy ( &OnListChange_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListChange, &OnListChange_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.SetList
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              InList                         ( CPF_Parm )

void UR_GFxFrontEnd_Stats::SetList ( class UGFxObject* InList )
{
	static UFunction* pFnSetList = NULL;

	if ( ! pFnSetList )
		pFnSetList = (UFunction*) UObject::GObjObjects()->Data[ 82966 ];

	UR_GFxFrontEnd_Stats_execSetList_Parms SetList_Parms;
	SetList_Parms.InList = InList;

	this->ProcessEvent ( pFnSetList, &SetList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.UpdateMiddleBarListDataProvider
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Stats::UpdateMiddleBarListDataProvider ( )
{
	static UFunction* pFnUpdateMiddleBarListDataProvider = NULL;

	if ( ! pFnUpdateMiddleBarListDataProvider )
		pFnUpdateMiddleBarListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 82962 ];

	UR_GFxFrontEnd_Stats_execUpdateMiddleBarListDataProvider_Parms UpdateMiddleBarListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateMiddleBarListDataProvider, &UpdateMiddleBarListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_Stats::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 82956 ];

	UR_GFxFrontEnd_Stats_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Stats.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_Stats::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 82954 ];

	UR_GFxFrontEnd_Stats_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.OnViewClosed
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Stats::OnViewClosed ( )
{
	static UFunction* pFnOnViewClosed = NULL;

	if ( ! pFnOnViewClosed )
		pFnOnViewClosed = (UFunction*) UObject::GObjObjects()->Data[ 82953 ];

	UR_GFxFrontEnd_Stats_execOnViewClosed_Parms OnViewClosed_Parms;

	this->ProcessEvent ( pFnOnViewClosed, &OnViewClosed_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.OnViewActivated
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Stats::OnViewActivated ( )
{
	static UFunction* pFnOnViewActivated = NULL;

	if ( ! pFnOnViewActivated )
		pFnOnViewActivated = (UFunction*) UObject::GObjObjects()->Data[ 82952 ];

	UR_GFxFrontEnd_Stats_execOnViewActivated_Parms OnViewActivated_Parms;

	this->ProcessEvent ( pFnOnViewActivated, &OnViewActivated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_Stats::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 82950 ];

	UR_GFxFrontEnd_Stats_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Stats.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Stats::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 82949 ];

	UR_GFxFrontEnd_Stats_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Account.OnViewActivated
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Account::OnViewActivated ( )
{
	static UFunction* pFnOnViewActivated = NULL;

	if ( ! pFnOnViewActivated )
		pFnOnViewActivated = (UFunction*) UObject::GObjObjects()->Data[ 80908 ];

	UR_GFxFrontEnd_Account_execOnViewActivated_Parms OnViewActivated_Parms;

	this->ProcessEvent ( pFnOnViewActivated, &OnViewActivated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Account.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_Account::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 80906 ];

	UR_GFxFrontEnd_Account_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Account.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Account::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 80905 ];

	UR_GFxFrontEnd_Account_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.SetRefreshing
// [0x00020002] 
// Parameters infos:
// unsigned long                  IsRefreshing                   ( CPF_Parm )

void UR_GFxFrontEnd_JoinGame::SetRefreshing ( unsigned long IsRefreshing )
{
	static UFunction* pFnSetRefreshing = NULL;

	if ( ! pFnSetRefreshing )
		pFnSetRefreshing = (UFunction*) UObject::GObjObjects()->Data[ 81960 ];

	UR_GFxFrontEnd_JoinGame_execSetRefreshing_Parms SetRefreshing_Parms;
	SetRefreshing_Parms.IsRefreshing = IsRefreshing;

	this->ProcessEvent ( pFnSetRefreshing, &SetRefreshing_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.OnGameModeHeaderPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_JoinGame::OnGameModeHeaderPress ( struct FEventData ev )
{
	static UFunction* pFnOnGameModeHeaderPress = NULL;

	if ( ! pFnOnGameModeHeaderPress )
		pFnOnGameModeHeaderPress = (UFunction*) UObject::GObjObjects()->Data[ 81958 ];

	UR_GFxFrontEnd_JoinGame_execOnGameModeHeaderPress_Parms OnGameModeHeaderPress_Parms;
	memcpy ( &OnGameModeHeaderPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnGameModeHeaderPress, &OnGameModeHeaderPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.OnMapHeaderPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_JoinGame::OnMapHeaderPress ( struct FEventData ev )
{
	static UFunction* pFnOnMapHeaderPress = NULL;

	if ( ! pFnOnMapHeaderPress )
		pFnOnMapHeaderPress = (UFunction*) UObject::GObjObjects()->Data[ 81956 ];

	UR_GFxFrontEnd_JoinGame_execOnMapHeaderPress_Parms OnMapHeaderPress_Parms;
	memcpy ( &OnMapHeaderPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnMapHeaderPress, &OnMapHeaderPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.OnServerHeaderPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_JoinGame::OnServerHeaderPress ( struct FEventData ev )
{
	static UFunction* pFnOnServerHeaderPress = NULL;

	if ( ! pFnOnServerHeaderPress )
		pFnOnServerHeaderPress = (UFunction*) UObject::GObjObjects()->Data[ 81954 ];

	UR_GFxFrontEnd_JoinGame_execOnServerHeaderPress_Parms OnServerHeaderPress_Parms;
	memcpy ( &OnServerHeaderPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnServerHeaderPress, &OnServerHeaderPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.OnPlayersHeaderPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_JoinGame::OnPlayersHeaderPress ( struct FEventData ev )
{
	static UFunction* pFnOnPlayersHeaderPress = NULL;

	if ( ! pFnOnPlayersHeaderPress )
		pFnOnPlayersHeaderPress = (UFunction*) UObject::GObjObjects()->Data[ 81952 ];

	UR_GFxFrontEnd_JoinGame_execOnPlayersHeaderPress_Parms OnPlayersHeaderPress_Parms;
	memcpy ( &OnPlayersHeaderPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnPlayersHeaderPress, &OnPlayersHeaderPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.OnPingHeaderPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_JoinGame::OnPingHeaderPress ( struct FEventData ev )
{
	static UFunction* pFnOnPingHeaderPress = NULL;

	if ( ! pFnOnPingHeaderPress )
		pFnOnPingHeaderPress = (UFunction*) UObject::GObjObjects()->Data[ 81950 ];

	UR_GFxFrontEnd_JoinGame_execOnPingHeaderPress_Parms OnPingHeaderPress_Parms;
	memcpy ( &OnPingHeaderPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnPingHeaderPress, &OnPingHeaderPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.CheckPendingError
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_JoinGame::CheckPendingError ( )
{
	static UFunction* pFnCheckPendingError = NULL;

	if ( ! pFnCheckPendingError )
		pFnCheckPendingError = (UFunction*) UObject::GObjObjects()->Data[ 81944 ];

	UR_GFxFrontEnd_JoinGame_execCheckPendingError_Parms CheckPendingError_Parms;

	this->ProcessEvent ( pFnCheckPendingError, &CheckPendingError_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.OnGameTypeChanged
// [0x00024002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_JoinGame::OnGameTypeChanged ( int PlayerIndex )
{
	static UFunction* pFnOnGameTypeChanged = NULL;

	if ( ! pFnOnGameTypeChanged )
		pFnOnGameTypeChanged = (UFunction*) UObject::GObjObjects()->Data[ 81932 ];

	UR_GFxFrontEnd_JoinGame_execOnGameTypeChanged_Parms OnGameTypeChanged_Parms;
	OnGameTypeChanged_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnGameTypeChanged, &OnGameTypeChanged_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.OnViewClosed
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_JoinGame::OnViewClosed ( )
{
	static UFunction* pFnOnViewClosed = NULL;

	if ( ! pFnOnViewClosed )
		pFnOnViewClosed = (UFunction*) UObject::GObjObjects()->Data[ 81931 ];

	UR_GFxFrontEnd_JoinGame_execOnViewClosed_Parms OnViewClosed_Parms;

	this->ProcessEvent ( pFnOnViewClosed, &OnViewClosed_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.Select_QuickPlay
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_JoinGame::Select_QuickPlay ( )
{
	static UFunction* pFnSelect_QuickPlay = NULL;

	if ( ! pFnSelect_QuickPlay )
		pFnSelect_QuickPlay = (UFunction*) UObject::GObjObjects()->Data[ 81930 ];

	UR_GFxFrontEnd_JoinGame_execSelect_QuickPlay_Parms Select_QuickPlay_Parms;

	this->ProcessEvent ( pFnSelect_QuickPlay, &Select_QuickPlay_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.Select_ServerBrowser
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_JoinGame::Select_ServerBrowser ( )
{
	static UFunction* pFnSelect_ServerBrowser = NULL;

	if ( ! pFnSelect_ServerBrowser )
		pFnSelect_ServerBrowser = (UFunction*) UObject::GObjObjects()->Data[ 81929 ];

	UR_GFxFrontEnd_JoinGame_execSelect_ServerBrowser_Parms Select_ServerBrowser_Parms;

	this->ProcessEvent ( pFnSelect_ServerBrowser, &Select_ServerBrowser_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.AddToFavorites
// [0x00020000] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_JoinGame::AddToFavorites ( struct FEventData ev )
{
	static UFunction* pFnAddToFavorites = NULL;

	if ( ! pFnAddToFavorites )
		pFnAddToFavorites = (UFunction*) UObject::GObjObjects()->Data[ 81927 ];

	UR_GFxFrontEnd_JoinGame_execAddToFavorites_Parms AddToFavorites_Parms;
	memcpy ( &AddToFavorites_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnAddToFavorites, &AddToFavorites_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.OnListChange
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_JoinGame::OnListChange ( struct FEventData ev )
{
	static UFunction* pFnOnListChange = NULL;

	if ( ! pFnOnListChange )
		pFnOnListChange = (UFunction*) UObject::GObjObjects()->Data[ 81923 ];

	UR_GFxFrontEnd_JoinGame_execOnListChange_Parms OnListChange_Parms;
	memcpy ( &OnListChange_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListChange, &OnListChange_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.SetList
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              InList                         ( CPF_Parm )

void UR_GFxFrontEnd_JoinGame::SetList ( class UGFxObject* InList )
{
	static UFunction* pFnSetList = NULL;

	if ( ! pFnSetList )
		pFnSetList = (UFunction*) UObject::GObjObjects()->Data[ 81921 ];

	UR_GFxFrontEnd_JoinGame_execSetList_Parms SetList_Parms;
	SetList_Parms.InList = InList;

	this->ProcessEvent ( pFnSetList, &SetList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.UpdateMiddleBarListDataProvider
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_JoinGame::UpdateMiddleBarListDataProvider ( )
{
	static UFunction* pFnUpdateMiddleBarListDataProvider = NULL;

	if ( ! pFnUpdateMiddleBarListDataProvider )
		pFnUpdateMiddleBarListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 81917 ];

	UR_GFxFrontEnd_JoinGame_execUpdateMiddleBarListDataProvider_Parms UpdateMiddleBarListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateMiddleBarListDataProvider, &UpdateMiddleBarListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_JoinGame::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 81915 ];

	UR_GFxFrontEnd_JoinGame_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.OnViewActivated
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_JoinGame::OnViewActivated ( )
{
	static UFunction* pFnOnViewActivated = NULL;

	if ( ! pFnOnViewActivated )
		pFnOnViewActivated = (UFunction*) UObject::GObjObjects()->Data[ 81914 ];

	UR_GFxFrontEnd_JoinGame_execOnViewActivated_Parms OnViewActivated_Parms;

	this->ProcessEvent ( pFnOnViewActivated, &OnViewActivated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_JoinGame::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 81912 ];

	UR_GFxFrontEnd_JoinGame_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.UpdatePlayerCount
// [0x00020002] 
// Parameters infos:
// int                            GlobalPlayerCount              ( CPF_Parm )

void UR_GFxFrontEnd_JoinGame::UpdatePlayerCount ( int GlobalPlayerCount )
{
	static UFunction* pFnUpdatePlayerCount = NULL;

	if ( ! pFnUpdatePlayerCount )
		pFnUpdatePlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 81910 ];

	UR_GFxFrontEnd_JoinGame_execUpdatePlayerCount_Parms UpdatePlayerCount_Parms;
	UpdatePlayerCount_Parms.GlobalPlayerCount = GlobalPlayerCount;

	this->ProcessEvent ( pFnUpdatePlayerCount, &UpdatePlayerCount_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.InitiateBrowser
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_JoinGame::InitiateBrowser ( )
{
	static UFunction* pFnInitiateBrowser = NULL;

	if ( ! pFnInitiateBrowser )
		pFnInitiateBrowser = (UFunction*) UObject::GObjObjects()->Data[ 81908 ];

	UR_GFxFrontEnd_JoinGame_execInitiateBrowser_Parms InitiateBrowser_Parms;

	this->ProcessEvent ( pFnInitiateBrowser, &InitiateBrowser_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.FilterEmptyServers
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_JoinGame::FilterEmptyServers ( struct FEventData ev )
{
	static UFunction* pFnFilterEmptyServers = NULL;

	if ( ! pFnFilterEmptyServers )
		pFnFilterEmptyServers = (UFunction*) UObject::GObjObjects()->Data[ 81906 ];

	UR_GFxFrontEnd_JoinGame_execFilterEmptyServers_Parms FilterEmptyServers_Parms;
	memcpy ( &FilterEmptyServers_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnFilterEmptyServers, &FilterEmptyServers_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.FilterFullServers
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_JoinGame::FilterFullServers ( struct FEventData ev )
{
	static UFunction* pFnFilterFullServers = NULL;

	if ( ! pFnFilterFullServers )
		pFnFilterFullServers = (UFunction*) UObject::GObjObjects()->Data[ 81904 ];

	UR_GFxFrontEnd_JoinGame_execFilterFullServers_Parms FilterFullServers_Parms;
	memcpy ( &FilterFullServers_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnFilterFullServers, &FilterFullServers_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_JoinGame::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 81898 ];

	UR_GFxFrontEnd_JoinGame_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.OnServerListItemPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_JoinGame::OnServerListItemPress ( struct FEventData ev )
{
	static UFunction* pFnOnServerListItemPress = NULL;

	if ( ! pFnOnServerListItemPress )
		pFnOnServerListItemPress = (UFunction*) UObject::GObjObjects()->Data[ 81893 ];

	UR_GFxFrontEnd_JoinGame_execOnServerListItemPress_Parms OnServerListItemPress_Parms;
	memcpy ( &OnServerListItemPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnServerListItemPress, &OnServerListItemPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.ListSort
// [0x00120002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FServerList             A                              ( CPF_Parm | CPF_NeedCtorLink )
// struct FServerList             B                              ( CPF_Parm | CPF_NeedCtorLink )

int UR_GFxFrontEnd_JoinGame::ListSort ( struct FServerList A, struct FServerList B )
{
	static UFunction* pFnListSort = NULL;

	if ( ! pFnListSort )
		pFnListSort = (UFunction*) UObject::GObjObjects()->Data[ 81766 ];

	UR_GFxFrontEnd_JoinGame_execListSort_Parms ListSort_Parms;
	memcpy ( &ListSort_Parms.A, &A, 0x40 );
	memcpy ( &ListSort_Parms.B, &B, 0x40 );

	this->ProcessEvent ( pFnListSort, &ListSort_Parms, NULL );

	return ListSort_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.AddServer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

bool UR_GFxFrontEnd_JoinGame::AddServer ( int I )
{
	static UFunction* pFnAddServer = NULL;

	if ( ! pFnAddServer )
		pFnAddServer = (UFunction*) UObject::GObjObjects()->Data[ 81886 ];

	UR_GFxFrontEnd_JoinGame_execAddServer_Parms AddServer_Parms;
	AddServer_Parms.I = I;

	this->ProcessEvent ( pFnAddServer, &AddServer_Parms, NULL );

	return AddServer_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.FilterList
// [0x00820002] 
// Parameters infos:

void UR_GFxFrontEnd_JoinGame::FilterList ( )
{
	static UFunction* pFnFilterList = NULL;

	if ( ! pFnFilterList )
		pFnFilterList = (UFunction*) UObject::GObjObjects()->Data[ 81878 ];

	UR_GFxFrontEnd_JoinGame_execFilterList_Parms FilterList_Parms;

	this->ProcessEvent ( pFnFilterList, &FilterList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.ResortList
// [0x00820002] 
// Parameters infos:

void UR_GFxFrontEnd_JoinGame::ResortList ( )
{
	static UFunction* pFnResortList = NULL;

	if ( ! pFnResortList )
		pFnResortList = (UFunction*) UObject::GObjObjects()->Data[ 81871 ];

	UR_GFxFrontEnd_JoinGame_execResortList_Parms ResortList_Parms;

	this->ProcessEvent ( pFnResortList, &ResortList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.UpdateListDataProvider
// [0x00820002] 
// Parameters infos:

void UR_GFxFrontEnd_JoinGame::UpdateListDataProvider ( )
{
	static UFunction* pFnUpdateListDataProvider = NULL;

	if ( ! pFnUpdateListDataProvider )
		pFnUpdateListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 81854 ];

	UR_GFxFrontEnd_JoinGame_execUpdateListDataProvider_Parms UpdateListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateListDataProvider, &UpdateListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.GetGameTypeSearchProviderIndex
// [0x00024002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 GameClassName                  ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

int UR_GFxFrontEnd_JoinGame::GetGameTypeSearchProviderIndex ( struct FString GameClassName )
{
	static UFunction* pFnGetGameTypeSearchProviderIndex = NULL;

	if ( ! pFnGetGameTypeSearchProviderIndex )
		pFnGetGameTypeSearchProviderIndex = (UFunction*) UObject::GObjObjects()->Data[ 81844 ];

	UR_GFxFrontEnd_JoinGame_execGetGameTypeSearchProviderIndex_Parms GetGameTypeSearchProviderIndex_Parms;
	memcpy ( &GetGameTypeSearchProviderIndex_Parms.GameClassName, &GameClassName, 0xC );

	this->ProcessEvent ( pFnGetGameTypeSearchProviderIndex, &GetGameTypeSearchProviderIndex_Parms, NULL );

	return GetGameTypeSearchProviderIndex_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.ClearServerList
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_JoinGame::ClearServerList ( )
{
	static UFunction* pFnClearServerList = NULL;

	if ( ! pFnClearServerList )
		pFnClearServerList = (UFunction*) UObject::GObjObjects()->Data[ 81842 ];

	UR_GFxFrontEnd_JoinGame_execClearServerList_Parms ClearServerList_Parms;

	this->ProcessEvent ( pFnClearServerList, &ClearServerList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.OnFindOnlineGamesCompleteDelegate
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UR_GFxFrontEnd_JoinGame::OnFindOnlineGamesCompleteDelegate ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnOnFindOnlineGamesCompleteDelegate )
		pFnOnFindOnlineGamesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 81839 ];

	UR_GFxFrontEnd_JoinGame_execOnFindOnlineGamesCompleteDelegate_Parms OnFindOnlineGamesCompleteDelegate_Parms;
	OnFindOnlineGamesCompleteDelegate_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFindOnlineGamesCompleteDelegate, &OnFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.SubmitServerListQuery
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )

void UR_GFxFrontEnd_JoinGame::SubmitServerListQuery ( int PlayerIndex )
{
	static UFunction* pFnSubmitServerListQuery = NULL;

	if ( ! pFnSubmitServerListQuery )
		pFnSubmitServerListQuery = (UFunction*) UObject::GObjObjects()->Data[ 81837 ];

	UR_GFxFrontEnd_JoinGame_execSubmitServerListQuery_Parms SubmitServerListQuery_Parms;
	SubmitServerListQuery_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnSubmitServerListQuery, &SubmitServerListQuery_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.UpdatePlayersFilter
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_JoinGame::UpdatePlayersFilter ( struct FEventData ev )
{
	static UFunction* pFnUpdatePlayersFilter = NULL;

	if ( ! pFnUpdatePlayersFilter )
		pFnUpdatePlayersFilter = (UFunction*) UObject::GObjObjects()->Data[ 81835 ];

	UR_GFxFrontEnd_JoinGame_execUpdatePlayersFilter_Parms UpdatePlayersFilter_Parms;
	memcpy ( &UpdatePlayersFilter_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnUpdatePlayersFilter, &UpdatePlayersFilter_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.UpdateGameTypeFilter
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_JoinGame::UpdateGameTypeFilter ( struct FEventData ev )
{
	static UFunction* pFnUpdateGameTypeFilter = NULL;

	if ( ! pFnUpdateGameTypeFilter )
		pFnUpdateGameTypeFilter = (UFunction*) UObject::GObjObjects()->Data[ 81833 ];

	UR_GFxFrontEnd_JoinGame_execUpdateGameTypeFilter_Parms UpdateGameTypeFilter_Parms;
	memcpy ( &UpdateGameTypeFilter_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnUpdateGameTypeFilter, &UpdateGameTypeFilter_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.UpdateMapFilter
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_JoinGame::UpdateMapFilter ( struct FEventData ev )
{
	static UFunction* pFnUpdateMapFilter = NULL;

	if ( ! pFnUpdateMapFilter )
		pFnUpdateMapFilter = (UFunction*) UObject::GObjObjects()->Data[ 81831 ];

	UR_GFxFrontEnd_JoinGame_execUpdateMapFilter_Parms UpdateMapFilter_Parms;
	memcpy ( &UpdateMapFilter_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnUpdateMapFilter, &UpdateMapFilter_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.UpdateServerNameFilter
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_JoinGame::UpdateServerNameFilter ( struct FEventData ev )
{
	static UFunction* pFnUpdateServerNameFilter = NULL;

	if ( ! pFnUpdateServerNameFilter )
		pFnUpdateServerNameFilter = (UFunction*) UObject::GObjObjects()->Data[ 81829 ];

	UR_GFxFrontEnd_JoinGame_execUpdateServerNameFilter_Parms UpdateServerNameFilter_Parms;
	memcpy ( &UpdateServerNameFilter_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnUpdateServerNameFilter, &UpdateServerNameFilter_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.UpdatePingFilter
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_JoinGame::UpdatePingFilter ( struct FEventData ev )
{
	static UFunction* pFnUpdatePingFilter = NULL;

	if ( ! pFnUpdatePingFilter )
		pFnUpdatePingFilter = (UFunction*) UObject::GObjObjects()->Data[ 81827 ];

	UR_GFxFrontEnd_JoinGame_execUpdatePingFilter_Parms UpdatePingFilter_Parms;
	memcpy ( &UpdatePingFilter_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnUpdatePingFilter, &UpdatePingFilter_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.RefreshServerList
// [0x00024002] 
// Parameters infos:
// int                            InPlayerIndex                  ( CPF_Parm )
// int                            MaxResults                     ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_JoinGame::RefreshServerList ( int InPlayerIndex, int MaxResults )
{
	static UFunction* pFnRefreshServerList = NULL;

	if ( ! pFnRefreshServerList )
		pFnRefreshServerList = (UFunction*) UObject::GObjObjects()->Data[ 81820 ];

	UR_GFxFrontEnd_JoinGame_execRefreshServerList_Parms RefreshServerList_Parms;
	RefreshServerList_Parms.InPlayerIndex = InPlayerIndex;
	RefreshServerList_Parms.MaxResults = MaxResults;

	this->ProcessEvent ( pFnRefreshServerList, &RefreshServerList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.InitializeMapFilters
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_JoinGame::InitializeMapFilters ( )
{
	static UFunction* pFnInitializeMapFilters = NULL;

	if ( ! pFnInitializeMapFilters )
		pFnInitializeMapFilters = (UFunction*) UObject::GObjObjects()->Data[ 81814 ];

	UR_GFxFrontEnd_JoinGame_execInitializeMapFilters_Parms InitializeMapFilters_Parms;

	this->ProcessEvent ( pFnInitializeMapFilters, &InitializeMapFilters_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_JoinGame.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_JoinGame::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 81813 ];

	UR_GFxFrontEnd_JoinGame_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.ClearInspectorAssets
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Join::ClearInspectorAssets ( )
{
	static UFunction* pFnClearInspectorAssets = NULL;

	if ( ! pFnClearInspectorAssets )
		pFnClearInspectorAssets = (UFunction*) UObject::GObjObjects()->Data[ 81696 ];

	UR_GFxFrontEnd_Join_execClearInspectorAssets_Parms ClearInspectorAssets_Parms;

	this->ProcessEvent ( pFnClearInspectorAssets, &ClearInspectorAssets_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.SetRefreshing
// [0x00020002] 
// Parameters infos:
// unsigned long                  IsRefreshing                   ( CPF_Parm )

void UR_GFxFrontEnd_Join::SetRefreshing ( unsigned long IsRefreshing )
{
	static UFunction* pFnSetRefreshing = NULL;

	if ( ! pFnSetRefreshing )
		pFnSetRefreshing = (UFunction*) UObject::GObjObjects()->Data[ 81693 ];

	UR_GFxFrontEnd_Join_execSetRefreshing_Parms SetRefreshing_Parms;
	SetRefreshing_Parms.IsRefreshing = IsRefreshing;

	this->ProcessEvent ( pFnSetRefreshing, &SetRefreshing_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.ShowJoinStatusWindow
// [0x00020002] 
// Parameters infos:
// unsigned long                  bShow                          ( CPF_Parm )

void UR_GFxFrontEnd_Join::ShowJoinStatusWindow ( unsigned long bShow )
{
	static UFunction* pFnShowJoinStatusWindow = NULL;

	if ( ! pFnShowJoinStatusWindow )
		pFnShowJoinStatusWindow = (UFunction*) UObject::GObjObjects()->Data[ 81691 ];

	UR_GFxFrontEnd_Join_execShowJoinStatusWindow_Parms ShowJoinStatusWindow_Parms;
	ShowJoinStatusWindow_Parms.bShow = bShow;

	this->ProcessEvent ( pFnShowJoinStatusWindow, &ShowJoinStatusWindow_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.CancelJoin
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Join::CancelJoin ( struct FEventData ev )
{
	static UFunction* pFnCancelJoin = NULL;

	if ( ! pFnCancelJoin )
		pFnCancelJoin = (UFunction*) UObject::GObjObjects()->Data[ 81689 ];

	UR_GFxFrontEnd_Join_execCancelJoin_Parms CancelJoin_Parms;
	memcpy ( &CancelJoin_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnCancelJoin, &CancelJoin_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.OnGameTypeChanged
// [0x00024002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_Join::OnGameTypeChanged ( int PlayerIndex )
{
	static UFunction* pFnOnGameTypeChanged = NULL;

	if ( ! pFnOnGameTypeChanged )
		pFnOnGameTypeChanged = (UFunction*) UObject::GObjObjects()->Data[ 81677 ];

	UR_GFxFrontEnd_Join_execOnGameTypeChanged_Parms OnGameTypeChanged_Parms;
	OnGameTypeChanged_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnGameTypeChanged, &OnGameTypeChanged_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.ForceLANOption
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UR_GFxFrontEnd_Join::ForceLANOption ( )
{
	static UFunction* pFnForceLANOption = NULL;

	if ( ! pFnForceLANOption )
		pFnForceLANOption = (UFunction*) UObject::GObjObjects()->Data[ 81159 ];

	UR_GFxFrontEnd_Join_execForceLANOption_Parms ForceLANOption_Parms;

	this->ProcessEvent ( pFnForceLANOption, &ForceLANOption_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.OnServerListItemPress
// [0x00020000] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Join::OnServerListItemPress ( struct FEventData ev )
{
	static UFunction* pFnOnServerListItemPress = NULL;

	if ( ! pFnOnServerListItemPress )
		pFnOnServerListItemPress = (UFunction*) UObject::GObjObjects()->Data[ 81668 ];

	UR_GFxFrontEnd_Join_execOnServerListItemPress_Parms OnServerListItemPress_Parms;
	memcpy ( &OnServerListItemPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnServerListItemPress, &OnServerListItemPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.NotifyGameTypeChanged
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Join::NotifyGameTypeChanged ( )
{
	static UFunction* pFnNotifyGameTypeChanged = NULL;

	if ( ! pFnNotifyGameTypeChanged )
		pFnNotifyGameTypeChanged = (UFunction*) UObject::GObjObjects()->Data[ 81667 ];

	UR_GFxFrontEnd_Join_execNotifyGameTypeChanged_Parms NotifyGameTypeChanged_Parms;

	this->ProcessEvent ( pFnNotifyGameTypeChanged, &NotifyGameTypeChanged_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.OnCancelSearchComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UR_GFxFrontEnd_Join::OnCancelSearchComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnCancelSearchComplete = NULL;

	if ( ! pFnOnCancelSearchComplete )
		pFnOnCancelSearchComplete = (UFunction*) UObject::GObjObjects()->Data[ 81663 ];

	UR_GFxFrontEnd_Join_execOnCancelSearchComplete_Parms OnCancelSearchComplete_Parms;
	OnCancelSearchComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnCancelSearchComplete, &OnCancelSearchComplete_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.CancelQuery
// [0x00024002] 
// Parameters infos:
// unsigned char                  DesiredCancelAction            ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_Join::CancelQuery ( unsigned char DesiredCancelAction )
{
	static UFunction* pFnCancelQuery = NULL;

	if ( ! pFnCancelQuery )
		pFnCancelQuery = (UFunction*) UObject::GObjObjects()->Data[ 81661 ];

	UR_GFxFrontEnd_Join_execCancelQuery_Parms CancelQuery_Parms;
	CancelQuery_Parms.DesiredCancelAction = DesiredCancelAction;

	this->ProcessEvent ( pFnCancelQuery, &CancelQuery_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.AllowJoinServer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UR_GFxFrontEnd_Join::AllowJoinServer ( )
{
	static UFunction* pFnAllowJoinServer = NULL;

	if ( ! pFnAllowJoinServer )
		pFnAllowJoinServer = (UFunction*) UObject::GObjObjects()->Data[ 81658 ];

	UR_GFxFrontEnd_Join_execAllowJoinServer_Parms AllowJoinServer_Parms;

	this->ProcessEvent ( pFnAllowJoinServer, &AllowJoinServer_Parms, NULL );

	return AllowJoinServer_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Join.OnJoinGameComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bSuccessful                    ( CPF_Parm )

void UR_GFxFrontEnd_Join::OnJoinGameComplete ( struct FName SessionName, unsigned long bSuccessful )
{
	static UFunction* pFnOnJoinGameComplete = NULL;

	if ( ! pFnOnJoinGameComplete )
		pFnOnJoinGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 81654 ];

	UR_GFxFrontEnd_Join_execOnJoinGameComplete_Parms OnJoinGameComplete_Parms;
	memcpy ( &OnJoinGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnJoinGameComplete_Parms.bSuccessful = bSuccessful;

	this->ProcessEvent ( pFnOnJoinGameComplete, &OnJoinGameComplete_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.ProcessJoin
// [0x00840003] ( FUNC_Final )
// Parameters infos:

void UR_GFxFrontEnd_Join::ProcessJoin ( )
{
	static UFunction* pFnProcessJoin = NULL;

	if ( ! pFnProcessJoin )
		pFnProcessJoin = (UFunction*) UObject::GObjObjects()->Data[ 81591 ];

	UR_GFxFrontEnd_Join_execProcessJoin_Parms ProcessJoin_Parms;

	this->ProcessEvent ( pFnProcessJoin, &ProcessJoin_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.JoinServer
// [0x00820002] 
// Parameters infos:

void UR_GFxFrontEnd_Join::JoinServer ( )
{
	static UFunction* pFnJoinServer = NULL;

	if ( ! pFnJoinServer )
		pFnJoinServer = (UFunction*) UObject::GObjObjects()->Data[ 81646 ];

	UR_GFxFrontEnd_Join_execJoinServer_Parms JoinServer_Parms;

	this->ProcessEvent ( pFnJoinServer, &JoinServer_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.JoinServerClikListener
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Join::JoinServerClikListener ( struct FEventData ev )
{
	static UFunction* pFnJoinServerClikListener = NULL;

	if ( ! pFnJoinServerClikListener )
		pFnJoinServerClikListener = (UFunction*) UObject::GObjObjects()->Data[ 81644 ];

	UR_GFxFrontEnd_Join_execJoinServerClikListener_Parms JoinServerClikListener_Parms;
	memcpy ( &JoinServerClikListener_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnJoinServerClikListener, &JoinServerClikListener_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.SpectateServer
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Join::SpectateServer ( struct FEventData ev )
{
	static UFunction* pFnSpectateServer = NULL;

	if ( ! pFnSpectateServer )
		pFnSpectateServer = (UFunction*) UObject::GObjObjects()->Data[ 81641 ];

	UR_GFxFrontEnd_Join_execSpectateServer_Parms SpectateServer_Parms;
	memcpy ( &SpectateServer_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnSpectateServer, &SpectateServer_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.OnPingHeaderPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Join::OnPingHeaderPress ( struct FEventData ev )
{
	static UFunction* pFnOnPingHeaderPress = NULL;

	if ( ! pFnOnPingHeaderPress )
		pFnOnPingHeaderPress = (UFunction*) UObject::GObjObjects()->Data[ 81639 ];

	UR_GFxFrontEnd_Join_execOnPingHeaderPress_Parms OnPingHeaderPress_Parms;
	memcpy ( &OnPingHeaderPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnPingHeaderPress, &OnPingHeaderPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.OnPlayersHeaderPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Join::OnPlayersHeaderPress ( struct FEventData ev )
{
	static UFunction* pFnOnPlayersHeaderPress = NULL;

	if ( ! pFnOnPlayersHeaderPress )
		pFnOnPlayersHeaderPress = (UFunction*) UObject::GObjObjects()->Data[ 81637 ];

	UR_GFxFrontEnd_Join_execOnPlayersHeaderPress_Parms OnPlayersHeaderPress_Parms;
	memcpy ( &OnPlayersHeaderPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnPlayersHeaderPress, &OnPlayersHeaderPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.OnMapHeaderPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Join::OnMapHeaderPress ( struct FEventData ev )
{
	static UFunction* pFnOnMapHeaderPress = NULL;

	if ( ! pFnOnMapHeaderPress )
		pFnOnMapHeaderPress = (UFunction*) UObject::GObjObjects()->Data[ 81635 ];

	UR_GFxFrontEnd_Join_execOnMapHeaderPress_Parms OnMapHeaderPress_Parms;
	memcpy ( &OnMapHeaderPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnMapHeaderPress, &OnMapHeaderPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.OnServerHeaderPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Join::OnServerHeaderPress ( struct FEventData ev )
{
	static UFunction* pFnOnServerHeaderPress = NULL;

	if ( ! pFnOnServerHeaderPress )
		pFnOnServerHeaderPress = (UFunction*) UObject::GObjObjects()->Data[ 81633 ];

	UR_GFxFrontEnd_Join_execOnServerHeaderPress_Parms OnServerHeaderPress_Parms;
	memcpy ( &OnServerHeaderPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnServerHeaderPress, &OnServerHeaderPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.UpdateListDataProvider
// [0x00820002] 
// Parameters infos:

void UR_GFxFrontEnd_Join::UpdateListDataProvider ( )
{
	static UFunction* pFnUpdateListDataProvider = NULL;

	if ( ! pFnUpdateListDataProvider )
		pFnUpdateListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 81622 ];

	UR_GFxFrontEnd_Join_execUpdateListDataProvider_Parms UpdateListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateListDataProvider, &UpdateListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.ServerFilterChangedGameType
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Join::ServerFilterChangedGameType ( )
{
	static UFunction* pFnServerFilterChangedGameType = NULL;

	if ( ! pFnServerFilterChangedGameType )
		pFnServerFilterChangedGameType = (UFunction*) UObject::GObjObjects()->Data[ 81621 ];

	UR_GFxFrontEnd_Join_execServerFilterChangedGameType_Parms ServerFilterChangedGameType_Parms;

	this->ProcessEvent ( pFnServerFilterChangedGameType, &ServerFilterChangedGameType_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.OnFilterButtonPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Join::OnFilterButtonPress ( struct FEventData ev )
{
	static UFunction* pFnOnFilterButtonPress = NULL;

	if ( ! pFnOnFilterButtonPress )
		pFnOnFilterButtonPress = (UFunction*) UObject::GObjObjects()->Data[ 81618 ];

	UR_GFxFrontEnd_Join_execOnFilterButtonPress_Parms OnFilterButtonPress_Parms;
	memcpy ( &OnFilterButtonPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnFilterButtonPress, &OnFilterButtonPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.OnRefreshButtonPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Join::OnRefreshButtonPress ( struct FEventData ev )
{
	static UFunction* pFnOnRefreshButtonPress = NULL;

	if ( ! pFnOnRefreshButtonPress )
		pFnOnRefreshButtonPress = (UFunction*) UObject::GObjObjects()->Data[ 81616 ];

	UR_GFxFrontEnd_Join_execOnRefreshButtonPress_Parms OnRefreshButtonPress_Parms;
	memcpy ( &OnRefreshButtonPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnRefreshButtonPress, &OnRefreshButtonPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.GetDesiredMatchType
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UR_GFxFrontEnd_Join::GetDesiredMatchType ( )
{
	static UFunction* pFnGetDesiredMatchType = NULL;

	if ( ! pFnGetDesiredMatchType )
		pFnGetDesiredMatchType = (UFunction*) UObject::GObjObjects()->Data[ 81614 ];

	UR_GFxFrontEnd_Join_execGetDesiredMatchType_Parms GetDesiredMatchType_Parms;

	this->ProcessEvent ( pFnGetDesiredMatchType, &GetDesiredMatchType_Parms, NULL );

	return GetDesiredMatchType_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Join.OnFindOnlineGamesComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UR_GFxFrontEnd_Join::OnFindOnlineGamesComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnFindOnlineGamesComplete = NULL;

	if ( ! pFnOnFindOnlineGamesComplete )
		pFnOnFindOnlineGamesComplete = (UFunction*) UObject::GObjObjects()->Data[ 81610 ];

	UR_GFxFrontEnd_Join_execOnFindOnlineGamesComplete_Parms OnFindOnlineGamesComplete_Parms;
	OnFindOnlineGamesComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFindOnlineGamesComplete, &OnFindOnlineGamesComplete_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.OnFindOnlineGamesCompleteDelegate
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UR_GFxFrontEnd_Join::OnFindOnlineGamesCompleteDelegate ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnOnFindOnlineGamesCompleteDelegate )
		pFnOnFindOnlineGamesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 81607 ];

	UR_GFxFrontEnd_Join_execOnFindOnlineGamesCompleteDelegate_Parms OnFindOnlineGamesCompleteDelegate_Parms;
	OnFindOnlineGamesCompleteDelegate_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFindOnlineGamesCompleteDelegate, &OnFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.SubmitServerListQuery
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )

void UR_GFxFrontEnd_Join::SubmitServerListQuery ( int PlayerIndex )
{
	static UFunction* pFnSubmitServerListQuery = NULL;

	if ( ! pFnSubmitServerListQuery )
		pFnSubmitServerListQuery = (UFunction*) UObject::GObjObjects()->Data[ 81605 ];

	UR_GFxFrontEnd_Join_execSubmitServerListQuery_Parms SubmitServerListQuery_Parms;
	SubmitServerListQuery_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnSubmitServerListQuery, &SubmitServerListQuery_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.RefreshServerList
// [0x00024002] 
// Parameters infos:
// int                            InPlayerIndex                  ( CPF_Parm )
// int                            MaxResults                     ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_Join::RefreshServerList ( int InPlayerIndex, int MaxResults )
{
	static UFunction* pFnRefreshServerList = NULL;

	if ( ! pFnRefreshServerList )
		pFnRefreshServerList = (UFunction*) UObject::GObjObjects()->Data[ 81600 ];

	UR_GFxFrontEnd_Join_execRefreshServerList_Parms RefreshServerList_Parms;
	RefreshServerList_Parms.InPlayerIndex = InPlayerIndex;
	RefreshServerList_Parms.MaxResults = MaxResults;

	this->ProcessEvent ( pFnRefreshServerList, &RefreshServerList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.BuildJoinURL
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 ResolvedConnectionURL          ( CPF_Parm | CPF_NeedCtorLink )

struct FString UR_GFxFrontEnd_Join::BuildJoinURL ( struct FString ResolvedConnectionURL )
{
	static UFunction* pFnBuildJoinURL = NULL;

	if ( ! pFnBuildJoinURL )
		pFnBuildJoinURL = (UFunction*) UObject::GObjObjects()->Data[ 81595 ];

	UR_GFxFrontEnd_Join_execBuildJoinURL_Parms BuildJoinURL_Parms;
	memcpy ( &BuildJoinURL_Parms.ResolvedConnectionURL, &ResolvedConnectionURL, 0xC );

	this->ProcessEvent ( pFnBuildJoinURL, &BuildJoinURL_Parms, NULL );

	return BuildJoinURL_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Join.UpdateServerCount
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Join::UpdateServerCount ( )
{
	static UFunction* pFnUpdateServerCount = NULL;

	if ( ! pFnUpdateServerCount )
		pFnUpdateServerCount = (UFunction*) UObject::GObjObjects()->Data[ 81592 ];

	UR_GFxFrontEnd_Join_execUpdateServerCount_Parms UpdateServerCount_Parms;

	this->ProcessEvent ( pFnUpdateServerCount, &UpdateServerCount_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.OnPasswordDialog_OK
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Join::OnPasswordDialog_OK ( struct FEventData ev )
{
	static UFunction* pFnOnPasswordDialog_OK = NULL;

	if ( ! pFnOnPasswordDialog_OK )
		pFnOnPasswordDialog_OK = (UFunction*) UObject::GObjObjects()->Data[ 81585 ];

	UR_GFxFrontEnd_Join_execOnPasswordDialog_OK_Parms OnPasswordDialog_OK_Parms;
	memcpy ( &OnPasswordDialog_OK_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnPasswordDialog_OK, &OnPasswordDialog_OK_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.StripInvalidPasswordCharacters
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 PasswordString                 ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InvalidChars                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

struct FString UR_GFxFrontEnd_Join::StripInvalidPasswordCharacters ( struct FString PasswordString, struct FString InvalidChars )
{
	static UFunction* pFnStripInvalidPasswordCharacters = NULL;

	if ( ! pFnStripInvalidPasswordCharacters )
		pFnStripInvalidPasswordCharacters = (UFunction*) UObject::GObjObjects()->Data[ 81580 ];

	UR_GFxFrontEnd_Join_execStripInvalidPasswordCharacters_Parms StripInvalidPasswordCharacters_Parms;
	memcpy ( &StripInvalidPasswordCharacters_Parms.PasswordString, &PasswordString, 0xC );
	memcpy ( &StripInvalidPasswordCharacters_Parms.InvalidChars, &InvalidChars, 0xC );

	this->ProcessEvent ( pFnStripInvalidPasswordCharacters, &StripInvalidPasswordCharacters_Parms, NULL );

	return StripInvalidPasswordCharacters_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Join.PromptForServerPassword
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UR_GFxFrontEnd_Join::PromptForServerPassword ( )
{
	static UFunction* pFnPromptForServerPassword = NULL;

	if ( ! pFnPromptForServerPassword )
		pFnPromptForServerPassword = (UFunction*) UObject::GObjObjects()->Data[ 81578 ];

	UR_GFxFrontEnd_Join_execPromptForServerPassword_Parms PromptForServerPassword_Parms;

	this->ProcessEvent ( pFnPromptForServerPassword, &PromptForServerPassword_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.UpdateButtonStates
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Join::UpdateButtonStates ( )
{
	static UFunction* pFnUpdateButtonStates = NULL;

	if ( ! pFnUpdateButtonStates )
		pFnUpdateButtonStates = (UFunction*) UObject::GObjObjects()->Data[ 81576 ];

	UR_GFxFrontEnd_Join_execUpdateButtonStates_Parms UpdateButtonStates_Parms;

	this->ProcessEvent ( pFnUpdateButtonStates, &UpdateButtonStates_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.ConditionalRefreshServerList
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )

void UR_GFxFrontEnd_Join::ConditionalRefreshServerList ( int PlayerIndex )
{
	static UFunction* pFnConditionalRefreshServerList = NULL;

	if ( ! pFnConditionalRefreshServerList )
		pFnConditionalRefreshServerList = (UFunction*) UObject::GObjObjects()->Data[ 81572 ];

	UR_GFxFrontEnd_Join_execConditionalRefreshServerList_Parms ConditionalRefreshServerList_Parms;
	ConditionalRefreshServerList_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnConditionalRefreshServerList, &ConditionalRefreshServerList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.UpdateFilterButton
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UR_GFxFrontEnd_Join::UpdateFilterButton ( )
{
	static UFunction* pFnUpdateFilterButton = NULL;

	if ( ! pFnUpdateFilterButton )
		pFnUpdateFilterButton = (UFunction*) UObject::GObjObjects()->Data[ 81523 ];

	UR_GFxFrontEnd_Join_execUpdateFilterButton_Parms UpdateFilterButton_Parms;

	this->ProcessEvent ( pFnUpdateFilterButton, &UpdateFilterButton_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.Cleanup
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Join::Cleanup ( )
{
	static UFunction* pFnCleanup = NULL;

	if ( ! pFnCleanup )
		pFnCleanup = (UFunction*) UObject::GObjObjects()->Data[ 81566 ];

	UR_GFxFrontEnd_Join_execCleanup_Parms Cleanup_Parms;

	this->ProcessEvent ( pFnCleanup, &Cleanup_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.GetImageMarkupFromMapName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )

struct FString UR_GFxFrontEnd_Join::GetImageMarkupFromMapName ( struct FString MapName )
{
	static UFunction* pFnGetImageMarkupFromMapName = NULL;

	if ( ! pFnGetImageMarkupFromMapName )
		pFnGetImageMarkupFromMapName = (UFunction*) UObject::GObjObjects()->Data[ 81561 ];

	UR_GFxFrontEnd_Join_execGetImageMarkupFromMapName_Parms GetImageMarkupFromMapName_Parms;
	memcpy ( &GetImageMarkupFromMapName_Parms.MapName, &MapName, 0xC );

	this->ProcessEvent ( pFnGetImageMarkupFromMapName, &GetImageMarkupFromMapName_Parms, NULL );

	return GetImageMarkupFromMapName_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Join.ValidateServerType
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Join::ValidateServerType ( )
{
	static UFunction* pFnValidateServerType = NULL;

	if ( ! pFnValidateServerType )
		pFnValidateServerType = (UFunction*) UObject::GObjObjects()->Data[ 81558 ];

	UR_GFxFrontEnd_Join_execValidateServerType_Parms ValidateServerType_Parms;

	this->ProcessEvent ( pFnValidateServerType, &ValidateServerType_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_Join::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 81535 ];

	UR_GFxFrontEnd_Join_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Join.DisableJoinControls
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_Join::DisableJoinControls ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableJoinControls = NULL;

	if ( ! pFnDisableJoinControls )
		pFnDisableJoinControls = (UFunction*) UObject::GObjObjects()->Data[ 81531 ];

	UR_GFxFrontEnd_Join_execDisableJoinControls_Parms DisableJoinControls_Parms;
	DisableJoinControls_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableJoinControls, &DisableJoinControls_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_Join::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 81528 ];

	UR_GFxFrontEnd_Join_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.OnViewClosed
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Join::OnViewClosed ( )
{
	static UFunction* pFnOnViewClosed = NULL;

	if ( ! pFnOnViewClosed )
		pFnOnViewClosed = (UFunction*) UObject::GObjObjects()->Data[ 81527 ];

	UR_GFxFrontEnd_Join_execOnViewClosed_Parms OnViewClosed_Parms;

	this->ProcessEvent ( pFnOnViewClosed, &OnViewClosed_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_Join::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 81524 ];

	UR_GFxFrontEnd_Join_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.OnViewActivated
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Join::OnViewActivated ( )
{
	static UFunction* pFnOnViewActivated = NULL;

	if ( ! pFnOnViewActivated )
		pFnOnViewActivated = (UFunction*) UObject::GObjObjects()->Data[ 81514 ];

	UR_GFxFrontEnd_Join_execOnViewActivated_Parms OnViewActivated_Parms;

	this->ProcessEvent ( pFnOnViewActivated, &OnViewActivated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Join.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Join::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 81507 ];

	UR_GFxFrontEnd_Join_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_News.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UR_GFxFrontEnd_News::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = (UFunction*) UObject::GObjObjects()->Data[ 82264 ];

	UR_GFxFrontEnd_News_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_News.BuyButtonPressed
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_News::BuyButtonPressed ( struct FEventData ev )
{
	static UFunction* pFnBuyButtonPressed = NULL;

	if ( ! pFnBuyButtonPressed )
		pFnBuyButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 82261 ];

	UR_GFxFrontEnd_News_execBuyButtonPressed_Parms BuyButtonPressed_Parms;
	memcpy ( &BuyButtonPressed_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnBuyButtonPressed, &BuyButtonPressed_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_News.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_News::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 82255 ];

	UR_GFxFrontEnd_News_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_News.DownloadNews
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_News::DownloadNews ( struct FString URL )
{
	static UFunction* pFnDownloadNews = NULL;

	if ( ! pFnDownloadNews )
		pFnDownloadNews = (UFunction*) UObject::GObjObjects()->Data[ 82252 ];

	UR_GFxFrontEnd_News_execDownloadNews_Parms DownloadNews_Parms;
	memcpy ( &DownloadNews_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnDownloadNews, &DownloadNews_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_News.NewsDownloadComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// unsigned char                  NewsType                       ( CPF_Parm )

void UR_GFxFrontEnd_News::NewsDownloadComplete ( unsigned long bWasSuccessful, unsigned char NewsType )
{
	static UFunction* pFnNewsDownloadComplete = NULL;

	if ( ! pFnNewsDownloadComplete )
		pFnNewsDownloadComplete = (UFunction*) UObject::GObjObjects()->Data[ 82249 ];

	UR_GFxFrontEnd_News_execNewsDownloadComplete_Parms NewsDownloadComplete_Parms;
	NewsDownloadComplete_Parms.bWasSuccessful = bWasSuccessful;
	NewsDownloadComplete_Parms.NewsType = NewsType;

	this->ProcessEvent ( pFnNewsDownloadComplete, &NewsDownloadComplete_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_News.UpdateNews
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_News::UpdateNews ( )
{
	static UFunction* pFnUpdateNews = NULL;

	if ( ! pFnUpdateNews )
		pFnUpdateNews = (UFunction*) UObject::GObjObjects()->Data[ 82247 ];

	UR_GFxFrontEnd_News_execUpdateNews_Parms UpdateNews_Parms;

	this->ProcessEvent ( pFnUpdateNews, &UpdateNews_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_News.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_News::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 82245 ];

	UR_GFxFrontEnd_News_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_News.OnViewActivated
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_News::OnViewActivated ( )
{
	static UFunction* pFnOnViewActivated = NULL;

	if ( ! pFnOnViewActivated )
		pFnOnViewActivated = (UFunction*) UObject::GObjObjects()->Data[ 82244 ];

	UR_GFxFrontEnd_News_execOnViewActivated_Parms OnViewActivated_Parms;

	this->ProcessEvent ( pFnOnViewActivated, &OnViewActivated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_News.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_News::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 82242 ];

	UR_GFxFrontEnd_News_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_News.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_News::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 82241 ];

	UR_GFxFrontEnd_News_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MainMenu.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_MainMenu::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 82015 ];

	UR_GFxFrontEnd_MainMenu_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_MainMenu.OnEscapeKeyPress
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_MainMenu::OnEscapeKeyPress ( )
{
	static UFunction* pFnOnEscapeKeyPress = NULL;

	if ( ! pFnOnEscapeKeyPress )
		pFnOnEscapeKeyPress = (UFunction*) UObject::GObjObjects()->Data[ 82014 ];

	UR_GFxFrontEnd_MainMenu_execOnEscapeKeyPress_Parms OnEscapeKeyPress_Parms;

	this->ProcessEvent ( pFnOnEscapeKeyPress, &OnEscapeKeyPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MainMenu.SetList
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              InList                         ( CPF_Parm )

void UR_GFxFrontEnd_MainMenu::SetList ( class UGFxObject* InList )
{
	static UFunction* pFnSetList = NULL;

	if ( ! pFnSetList )
		pFnSetList = (UFunction*) UObject::GObjObjects()->Data[ 82012 ];

	UR_GFxFrontEnd_MainMenu_execSetList_Parms SetList_Parms;
	SetList_Parms.InList = InList;

	this->ProcessEvent ( pFnSetList, &SetList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MainMenu.UpdateListDataProvider
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_MainMenu::UpdateListDataProvider ( )
{
	static UFunction* pFnUpdateListDataProvider = NULL;

	if ( ! pFnUpdateListDataProvider )
		pFnUpdateListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 82008 ];

	UR_GFxFrontEnd_MainMenu_execUpdateListDataProvider_Parms UpdateListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateListDataProvider, &UpdateListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MainMenu.UpdateDescription
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_MainMenu::UpdateDescription ( )
{
	static UFunction* pFnUpdateDescription = NULL;

	if ( ! pFnUpdateDescription )
		pFnUpdateDescription = (UFunction*) UObject::GObjObjects()->Data[ 82005 ];

	UR_GFxFrontEnd_MainMenu_execUpdateDescription_Parms UpdateDescription_Parms;

	this->ProcessEvent ( pFnUpdateDescription, &UpdateDescription_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MainMenu.OnListChange
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_MainMenu::OnListChange ( struct FEventData ev )
{
	static UFunction* pFnOnListChange = NULL;

	if ( ! pFnOnListChange )
		pFnOnListChange = (UFunction*) UObject::GObjObjects()->Data[ 82001 ];

	UR_GFxFrontEnd_MainMenu_execOnListChange_Parms OnListChange_Parms;
	memcpy ( &OnListChange_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListChange, &OnListChange_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MainMenu.OnListItemPress
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_MainMenu::OnListItemPress ( struct FEventData ev )
{
	static UFunction* pFnOnListItemPress = NULL;

	if ( ! pFnOnListItemPress )
		pFnOnListItemPress = (UFunction*) UObject::GObjObjects()->Data[ 81999 ];

	UR_GFxFrontEnd_MainMenu_execOnListItemPress_Parms OnListItemPress_Parms;
	memcpy ( &OnListItemPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListItemPress, &OnListItemPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MainMenu.Select_QuitGame
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_MainMenu::Select_QuitGame ( )
{
	static UFunction* pFnSelect_QuitGame = NULL;

	if ( ! pFnSelect_QuitGame )
		pFnSelect_QuitGame = (UFunction*) UObject::GObjObjects()->Data[ 81998 ];

	UR_GFxFrontEnd_MainMenu_execSelect_QuitGame_Parms Select_QuitGame_Parms;

	this->ProcessEvent ( pFnSelect_QuitGame, &Select_QuitGame_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MainMenu.Select_Credits
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_MainMenu::Select_Credits ( )
{
	static UFunction* pFnSelect_Credits = NULL;

	if ( ! pFnSelect_Credits )
		pFnSelect_Credits = (UFunction*) UObject::GObjObjects()->Data[ 81997 ];

	UR_GFxFrontEnd_MainMenu_execSelect_Credits_Parms Select_Credits_Parms;

	this->ProcessEvent ( pFnSelect_Credits, &Select_Credits_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MainMenu.Select_Settings
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_MainMenu::Select_Settings ( )
{
	static UFunction* pFnSelect_Settings = NULL;

	if ( ! pFnSelect_Settings )
		pFnSelect_Settings = (UFunction*) UObject::GObjObjects()->Data[ 81996 ];

	UR_GFxFrontEnd_MainMenu_execSelect_Settings_Parms Select_Settings_Parms;

	this->ProcessEvent ( pFnSelect_Settings, &Select_Settings_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MainMenu.Select_Stats
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_MainMenu::Select_Stats ( )
{
	static UFunction* pFnSelect_Stats = NULL;

	if ( ! pFnSelect_Stats )
		pFnSelect_Stats = (UFunction*) UObject::GObjObjects()->Data[ 81995 ];

	UR_GFxFrontEnd_MainMenu_execSelect_Stats_Parms Select_Stats_Parms;

	this->ProcessEvent ( pFnSelect_Stats, &Select_Stats_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MainMenu.Select_Play
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_MainMenu::Select_Play ( )
{
	static UFunction* pFnSelect_Play = NULL;

	if ( ! pFnSelect_Play )
		pFnSelect_Play = (UFunction*) UObject::GObjObjects()->Data[ 81994 ];

	UR_GFxFrontEnd_MainMenu_execSelect_Play_Parms Select_Play_Parms;

	this->ProcessEvent ( pFnSelect_Play, &Select_Play_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MainMenu.Select_Home
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_MainMenu::Select_Home ( struct FEventData ev )
{
	static UFunction* pFnSelect_Home = NULL;

	if ( ! pFnSelect_Home )
		pFnSelect_Home = (UFunction*) UObject::GObjObjects()->Data[ 81992 ];

	UR_GFxFrontEnd_MainMenu_execSelect_Home_Parms Select_Home_Parms;
	memcpy ( &Select_Home_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnSelect_Home, &Select_Home_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MainMenu.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_MainMenu::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 81990 ];

	UR_GFxFrontEnd_MainMenu_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MainMenu.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_MainMenu::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 81988 ];

	UR_GFxFrontEnd_MainMenu_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MainMenu.OnViewActivated
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_MainMenu::OnViewActivated ( )
{
	static UFunction* pFnOnViewActivated = NULL;

	if ( ! pFnOnViewActivated )
		pFnOnViewActivated = (UFunction*) UObject::GObjObjects()->Data[ 81987 ];

	UR_GFxFrontEnd_MainMenu_execOnViewActivated_Parms OnViewActivated_Parms;

	this->ProcessEvent ( pFnOnViewActivated, &OnViewActivated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MainMenu.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_MainMenu::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 81986 ];

	UR_GFxFrontEnd_MainMenu_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseControlSettingType.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_ChooseControlSettingType::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 80941 ];

	UR_GFxFrontEnd_ChooseControlSettingType_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_ChooseControlSettingType.SetList
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              InList                         ( CPF_Parm )

void UR_GFxFrontEnd_ChooseControlSettingType::SetList ( class UGFxObject* InList )
{
	static UFunction* pFnSetList = NULL;

	if ( ! pFnSetList )
		pFnSetList = (UFunction*) UObject::GObjObjects()->Data[ 80939 ];

	UR_GFxFrontEnd_ChooseControlSettingType_execSetList_Parms SetList_Parms;
	SetList_Parms.InList = InList;

	this->ProcessEvent ( pFnSetList, &SetList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseControlSettingType.UpdateListDataProvider
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_ChooseControlSettingType::UpdateListDataProvider ( )
{
	static UFunction* pFnUpdateListDataProvider = NULL;

	if ( ! pFnUpdateListDataProvider )
		pFnUpdateListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 80935 ];

	UR_GFxFrontEnd_ChooseControlSettingType_execUpdateListDataProvider_Parms UpdateListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateListDataProvider, &UpdateListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseControlSettingType.UpdateDescription
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_ChooseControlSettingType::UpdateDescription ( )
{
	static UFunction* pFnUpdateDescription = NULL;

	if ( ! pFnUpdateDescription )
		pFnUpdateDescription = (UFunction*) UObject::GObjObjects()->Data[ 80932 ];

	UR_GFxFrontEnd_ChooseControlSettingType_execUpdateDescription_Parms UpdateDescription_Parms;

	this->ProcessEvent ( pFnUpdateDescription, &UpdateDescription_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseControlSettingType.OnListChange
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_ChooseControlSettingType::OnListChange ( struct FEventData ev )
{
	static UFunction* pFnOnListChange = NULL;

	if ( ! pFnOnListChange )
		pFnOnListChange = (UFunction*) UObject::GObjObjects()->Data[ 80930 ];

	UR_GFxFrontEnd_ChooseControlSettingType_execOnListChange_Parms OnListChange_Parms;
	memcpy ( &OnListChange_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListChange, &OnListChange_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseControlSettingType.OnListItemPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_ChooseControlSettingType::OnListItemPress ( struct FEventData ev )
{
	static UFunction* pFnOnListItemPress = NULL;

	if ( ! pFnOnListItemPress )
		pFnOnListItemPress = (UFunction*) UObject::GObjObjects()->Data[ 80926 ];

	UR_GFxFrontEnd_ChooseControlSettingType_execOnListItemPress_Parms OnListItemPress_Parms;
	memcpy ( &OnListItemPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListItemPress, &OnListItemPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseControlSettingType.Select_KeyBindings
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_ChooseControlSettingType::Select_KeyBindings ( )
{
	static UFunction* pFnSelect_KeyBindings = NULL;

	if ( ! pFnSelect_KeyBindings )
		pFnSelect_KeyBindings = (UFunction*) UObject::GObjObjects()->Data[ 80925 ];

	UR_GFxFrontEnd_ChooseControlSettingType_execSelect_KeyBindings_Parms Select_KeyBindings_Parms;

	this->ProcessEvent ( pFnSelect_KeyBindings, &Select_KeyBindings_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseControlSettingType.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_ChooseControlSettingType::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 80923 ];

	UR_GFxFrontEnd_ChooseControlSettingType_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseControlSettingType.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_ChooseControlSettingType::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 80921 ];

	UR_GFxFrontEnd_ChooseControlSettingType_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseControlSettingType.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_ChooseControlSettingType::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 80920 ];

	UR_GFxFrontEnd_ChooseControlSettingType_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseSettingType.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_ChooseSettingType::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 80981 ];

	UR_GFxFrontEnd_ChooseSettingType_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_ChooseSettingType.SetList
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              InList                         ( CPF_Parm )

void UR_GFxFrontEnd_ChooseSettingType::SetList ( class UGFxObject* InList )
{
	static UFunction* pFnSetList = NULL;

	if ( ! pFnSetList )
		pFnSetList = (UFunction*) UObject::GObjObjects()->Data[ 80979 ];

	UR_GFxFrontEnd_ChooseSettingType_execSetList_Parms SetList_Parms;
	SetList_Parms.InList = InList;

	this->ProcessEvent ( pFnSetList, &SetList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseSettingType.UpdateListDataProvider
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_ChooseSettingType::UpdateListDataProvider ( )
{
	static UFunction* pFnUpdateListDataProvider = NULL;

	if ( ! pFnUpdateListDataProvider )
		pFnUpdateListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 80975 ];

	UR_GFxFrontEnd_ChooseSettingType_execUpdateListDataProvider_Parms UpdateListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateListDataProvider, &UpdateListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseSettingType.UpdateDescription
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_ChooseSettingType::UpdateDescription ( )
{
	static UFunction* pFnUpdateDescription = NULL;

	if ( ! pFnUpdateDescription )
		pFnUpdateDescription = (UFunction*) UObject::GObjObjects()->Data[ 80972 ];

	UR_GFxFrontEnd_ChooseSettingType_execUpdateDescription_Parms UpdateDescription_Parms;

	this->ProcessEvent ( pFnUpdateDescription, &UpdateDescription_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseSettingType.OnListChange
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_ChooseSettingType::OnListChange ( struct FEventData ev )
{
	static UFunction* pFnOnListChange = NULL;

	if ( ! pFnOnListChange )
		pFnOnListChange = (UFunction*) UObject::GObjObjects()->Data[ 80970 ];

	UR_GFxFrontEnd_ChooseSettingType_execOnListChange_Parms OnListChange_Parms;
	memcpy ( &OnListChange_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListChange, &OnListChange_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseSettingType.OnListItemPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_ChooseSettingType::OnListItemPress ( struct FEventData ev )
{
	static UFunction* pFnOnListItemPress = NULL;

	if ( ! pFnOnListItemPress )
		pFnOnListItemPress = (UFunction*) UObject::GObjObjects()->Data[ 80966 ];

	UR_GFxFrontEnd_ChooseSettingType_execOnListItemPress_Parms OnListItemPress_Parms;
	memcpy ( &OnListItemPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListItemPress, &OnListItemPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseSettingType.Select_GameSettings
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_ChooseSettingType::Select_GameSettings ( )
{
	static UFunction* pFnSelect_GameSettings = NULL;

	if ( ! pFnSelect_GameSettings )
		pFnSelect_GameSettings = (UFunction*) UObject::GObjObjects()->Data[ 80965 ];

	UR_GFxFrontEnd_ChooseSettingType_execSelect_GameSettings_Parms Select_GameSettings_Parms;

	this->ProcessEvent ( pFnSelect_GameSettings, &Select_GameSettings_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseSettingType.Select_ChooseControlSettingType
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_ChooseSettingType::Select_ChooseControlSettingType ( )
{
	static UFunction* pFnSelect_ChooseControlSettingType = NULL;

	if ( ! pFnSelect_ChooseControlSettingType )
		pFnSelect_ChooseControlSettingType = (UFunction*) UObject::GObjObjects()->Data[ 80964 ];

	UR_GFxFrontEnd_ChooseSettingType_execSelect_ChooseControlSettingType_Parms Select_ChooseControlSettingType_Parms;

	this->ProcessEvent ( pFnSelect_ChooseControlSettingType, &Select_ChooseControlSettingType_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseSettingType.Select_DisplaySettings
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_ChooseSettingType::Select_DisplaySettings ( )
{
	static UFunction* pFnSelect_DisplaySettings = NULL;

	if ( ! pFnSelect_DisplaySettings )
		pFnSelect_DisplaySettings = (UFunction*) UObject::GObjObjects()->Data[ 80963 ];

	UR_GFxFrontEnd_ChooseSettingType_execSelect_DisplaySettings_Parms Select_DisplaySettings_Parms;

	this->ProcessEvent ( pFnSelect_DisplaySettings, &Select_DisplaySettings_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseSettingType.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_ChooseSettingType::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 80961 ];

	UR_GFxFrontEnd_ChooseSettingType_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseSettingType.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_ChooseSettingType::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 80959 ];

	UR_GFxFrontEnd_ChooseSettingType_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ChooseSettingType.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_ChooseSettingType::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 80958 ];

	UR_GFxFrontEnd_ChooseSettingType_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Controls.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_Controls::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 80990 ];

	UR_GFxFrontEnd_Controls_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Controls.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Controls::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 80989 ];

	UR_GFxFrontEnd_Controls_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Customize.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_Customize::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 81015 ];

	UR_GFxFrontEnd_Customize_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Customize.OnViewClosed
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd_Customize::OnViewClosed ( )
{
	static UFunction* pFnOnViewClosed = NULL;

	if ( ! pFnOnViewClosed )
		pFnOnViewClosed = (UFunction*) UObject::GObjObjects()->Data[ 81014 ];

	UR_GFxFrontEnd_Customize_execOnViewClosed_Parms OnViewClosed_Parms;

	this->ProcessEvent ( pFnOnViewClosed, &OnViewClosed_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Customize.OnViewLoaded
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd_Customize::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 81013 ];

	UR_GFxFrontEnd_Customize_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Customize.OnViewActivated
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd_Customize::OnViewActivated ( )
{
	static UFunction* pFnOnViewActivated = NULL;

	if ( ! pFnOnViewActivated )
		pFnOnViewActivated = (UFunction*) UObject::GObjObjects()->Data[ 81012 ];

	UR_GFxFrontEnd_Customize_execOnViewActivated_Parms OnViewActivated_Parms;

	this->ProcessEvent ( pFnOnViewActivated, &OnViewActivated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_DisplaySettings.SaveState
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_DisplaySettings::SaveState ( )
{
	static UFunction* pFnSaveState = NULL;

	if ( ! pFnSaveState )
		pFnSaveState = (UFunction*) UObject::GObjObjects()->Data[ 81099 ];

	UR_GFxFrontEnd_DisplaySettings_execSaveState_Parms SaveState_Parms;

	this->ProcessEvent ( pFnSaveState, &SaveState_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_DisplaySettings.UpdateDescription
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_DisplaySettings::UpdateDescription ( )
{
	static UFunction* pFnUpdateDescription = NULL;

	if ( ! pFnUpdateDescription )
		pFnUpdateDescription = (UFunction*) UObject::GObjObjects()->Data[ 81093 ];

	UR_GFxFrontEnd_DisplaySettings_execUpdateDescription_Parms UpdateDescription_Parms;

	this->ProcessEvent ( pFnUpdateDescription, &UpdateDescription_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_DisplaySettings.OnSettingChanged
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_DisplaySettings::OnSettingChanged ( struct FEventData ev )
{
	static UFunction* pFnOnSettingChanged = NULL;

	if ( ! pFnOnSettingChanged )
		pFnOnSettingChanged = (UFunction*) UObject::GObjObjects()->Data[ 81091 ];

	UR_GFxFrontEnd_DisplaySettings_execOnSettingChanged_Parms OnSettingChanged_Parms;
	memcpy ( &OnSettingChanged_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnSettingChanged, &OnSettingChanged_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_DisplaySettings.OnListChange
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_DisplaySettings::OnListChange ( struct FEventData ev )
{
	static UFunction* pFnOnListChange = NULL;

	if ( ! pFnOnListChange )
		pFnOnListChange = (UFunction*) UObject::GObjObjects()->Data[ 81089 ];

	UR_GFxFrontEnd_DisplaySettings_execOnListChange_Parms OnListChange_Parms;
	memcpy ( &OnListChange_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListChange, &OnListChange_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_DisplaySettings.MoveBackImpl
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_DisplaySettings::MoveBackImpl ( )
{
	static UFunction* pFnMoveBackImpl = NULL;

	if ( ! pFnMoveBackImpl )
		pFnMoveBackImpl = (UFunction*) UObject::GObjObjects()->Data[ 81088 ];

	UR_GFxFrontEnd_DisplaySettings_execMoveBackImpl_Parms MoveBackImpl_Parms;

	this->ProcessEvent ( pFnMoveBackImpl, &MoveBackImpl_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_DisplaySettings.Select_Back
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_DisplaySettings::Select_Back ( struct FEventData ev )
{
	static UFunction* pFnSelect_Back = NULL;

	if ( ! pFnSelect_Back )
		pFnSelect_Back = (UFunction*) UObject::GObjObjects()->Data[ 81086 ];

	UR_GFxFrontEnd_DisplaySettings_execSelect_Back_Parms Select_Back_Parms;
	memcpy ( &Select_Back_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnSelect_Back, &Select_Back_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_DisplaySettings.PopulateSettingData
// [0x00420002] 
// Parameters infos:
// TArray< struct FString >       SettingData                    ( CPF_Parm | CPF_NeedCtorLink )
// class UGFxObject*              RendererDataProvider           ( CPF_Parm | CPF_OutParm )

void UR_GFxFrontEnd_DisplaySettings::PopulateSettingData ( TArray< struct FString > SettingData, class UGFxObject** RendererDataProvider )
{
	static UFunction* pFnPopulateSettingData = NULL;

	if ( ! pFnPopulateSettingData )
		pFnPopulateSettingData = (UFunction*) UObject::GObjObjects()->Data[ 81080 ];

	UR_GFxFrontEnd_DisplaySettings_execPopulateSettingData_Parms PopulateSettingData_Parms;
	memcpy ( &PopulateSettingData_Parms.SettingData, &SettingData, 0xC );

	this->ProcessEvent ( pFnPopulateSettingData, &PopulateSettingData_Parms, NULL );

	if ( RendererDataProvider )
		*RendererDataProvider = PopulateSettingData_Parms.RendererDataProvider;
};

// Function RavagedGame.R_GFxFrontEnd_DisplaySettings.initializeSettings
// [0x00820002] 
// Parameters infos:

void UR_GFxFrontEnd_DisplaySettings::initializeSettings ( )
{
	static UFunction* pFninitializeSettings = NULL;

	if ( ! pFninitializeSettings )
		pFninitializeSettings = (UFunction*) UObject::GObjObjects()->Data[ 81071 ];

	UR_GFxFrontEnd_DisplaySettings_execinitializeSettings_Parms initializeSettings_Parms;

	this->ProcessEvent ( pFninitializeSettings, &initializeSettings_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_DisplaySettings.SetList
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              InList                         ( CPF_Parm )

void UR_GFxFrontEnd_DisplaySettings::SetList ( class UGFxObject* InList )
{
	static UFunction* pFnSetList = NULL;

	if ( ! pFnSetList )
		pFnSetList = (UFunction*) UObject::GObjObjects()->Data[ 81069 ];

	UR_GFxFrontEnd_DisplaySettings_execSetList_Parms SetList_Parms;
	SetList_Parms.InList = InList;

	this->ProcessEvent ( pFnSetList, &SetList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_DisplaySettings.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_DisplaySettings::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 81063 ];

	UR_GFxFrontEnd_DisplaySettings_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_DisplaySettings.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_DisplaySettings::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 81061 ];

	UR_GFxFrontEnd_DisplaySettings_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_DisplaySettings.OnViewLoaded
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd_DisplaySettings::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 81060 ];

	UR_GFxFrontEnd_DisplaySettings_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameMode.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_GameMode::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 81253 ];

	UR_GFxFrontEnd_GameMode_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_GameMode.ASSetList
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              List                           ( CPF_Parm )

void UR_GFxFrontEnd_GameMode::ASSetList ( class UGFxObject* List )
{
	static UFunction* pFnASSetList = NULL;

	if ( ! pFnASSetList )
		pFnASSetList = (UFunction*) UObject::GObjObjects()->Data[ 81251 ];

	UR_GFxFrontEnd_GameMode_execASSetList_Parms ASSetList_Parms;
	ASSetList_Parms.List = List;

	this->ProcessEvent ( pFnASSetList, &ASSetList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameMode.SetImgScroller
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UGFxClikWidget*          InImgScroller                  ( CPF_Parm )

void UR_GFxFrontEnd_GameMode::SetImgScroller ( class UGFxClikWidget* InImgScroller )
{
	static UFunction* pFnSetImgScroller = NULL;

	if ( ! pFnSetImgScroller )
		pFnSetImgScroller = (UFunction*) UObject::GObjObjects()->Data[ 81249 ];

	UR_GFxFrontEnd_GameMode_execSetImgScroller_Parms SetImgScroller_Parms;
	SetImgScroller_Parms.InImgScroller = InImgScroller;

	this->ProcessEvent ( pFnSetImgScroller, &SetImgScroller_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameMode.UpdateListDataProvider
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_GameMode::UpdateListDataProvider ( )
{
	static UFunction* pFnUpdateListDataProvider = NULL;

	if ( ! pFnUpdateListDataProvider )
		pFnUpdateListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 81241 ];

	UR_GFxFrontEnd_GameMode_execUpdateListDataProvider_Parms UpdateListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateListDataProvider, &UpdateListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameMode.UpdateDescription
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_GameMode::UpdateDescription ( )
{
	static UFunction* pFnUpdateDescription = NULL;

	if ( ! pFnUpdateDescription )
		pFnUpdateDescription = (UFunction*) UObject::GObjObjects()->Data[ 81238 ];

	UR_GFxFrontEnd_GameMode_execUpdateDescription_Parms UpdateDescription_Parms;

	this->ProcessEvent ( pFnUpdateDescription, &UpdateDescription_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameMode.OnListChange
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_GameMode::OnListChange ( struct FEventData ev )
{
	static UFunction* pFnOnListChange = NULL;

	if ( ! pFnOnListChange )
		pFnOnListChange = (UFunction*) UObject::GObjObjects()->Data[ 81236 ];

	UR_GFxFrontEnd_GameMode_execOnListChange_Parms OnListChange_Parms;
	memcpy ( &OnListChange_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListChange, &OnListChange_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameMode.OnListItemPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_GameMode::OnListItemPress ( struct FEventData ev )
{
	static UFunction* pFnOnListItemPress = NULL;

	if ( ! pFnOnListItemPress )
		pFnOnListItemPress = (UFunction*) UObject::GObjObjects()->Data[ 81233 ];

	UR_GFxFrontEnd_GameMode_execOnListItemPress_Parms OnListItemPress_Parms;
	memcpy ( &OnListItemPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListItemPress, &OnListItemPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameMode.OnGameModeChange
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            SelectedIndex                  ( CPF_Parm )

void UR_GFxFrontEnd_GameMode::OnGameModeChange ( int SelectedIndex )
{
	static UFunction* pFnOnGameModeChange = NULL;

	if ( ! pFnOnGameModeChange )
		pFnOnGameModeChange = (UFunction*) UObject::GObjObjects()->Data[ 81226 ];

	UR_GFxFrontEnd_GameMode_execOnGameModeChange_Parms OnGameModeChange_Parms;
	OnGameModeChange_Parms.SelectedIndex = SelectedIndex;

	this->ProcessEvent ( pFnOnGameModeChange, &OnGameModeChange_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameMode.OnGameModeSelected
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// struct FString                 InGameMode                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InDefaultMap                   ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InGameSettingsClass            ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_GameMode::OnGameModeSelected ( struct FString InGameMode, struct FString InDefaultMap, struct FString InGameSettingsClass )
{
	static UFunction* pFnOnGameModeSelected = NULL;

	if ( ! pFnOnGameModeSelected )
		pFnOnGameModeSelected = (UFunction*) UObject::GObjObjects()->Data[ 81216 ];

	UR_GFxFrontEnd_GameMode_execOnGameModeSelected_Parms OnGameModeSelected_Parms;
	memcpy ( &OnGameModeSelected_Parms.InGameMode, &InGameMode, 0xC );
	memcpy ( &OnGameModeSelected_Parms.InDefaultMap, &InDefaultMap, 0xC );
	memcpy ( &OnGameModeSelected_Parms.InGameSettingsClass, &InGameSettingsClass, 0xC );

	this->ProcessEvent ( pFnOnGameModeSelected, &OnGameModeSelected_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameMode.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_GameMode::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 81214 ];

	UR_GFxFrontEnd_GameMode_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameMode.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_GameMode::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 81212 ];

	UR_GFxFrontEnd_GameMode_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameMode.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_GameMode::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 81207 ];

	UR_GFxFrontEnd_GameMode_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MapSelect.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_MapSelect::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 82085 ];

	UR_GFxFrontEnd_MapSelect_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_MapSelect.GetMapFriendlyName
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Map                            ( CPF_Parm | CPF_NeedCtorLink )

struct FString UR_GFxFrontEnd_MapSelect::GetMapFriendlyName ( struct FString Map )
{
	static UFunction* pFnGetMapFriendlyName = NULL;

	if ( ! pFnGetMapFriendlyName )
		pFnGetMapFriendlyName = (UFunction*) UObject::GObjObjects()->Data[ 82054 ];

	UR_GFxFrontEnd_MapSelect_execGetMapFriendlyName_Parms GetMapFriendlyName_Parms;
	memcpy ( &GetMapFriendlyName_Parms.Map, &Map, 0xC );

	this->ProcessEvent ( pFnGetMapFriendlyName, &GetMapFriendlyName_Parms, NULL );

	return GetMapFriendlyName_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_MapSelect.GetSelectedMap
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UR_GFxFrontEnd_MapSelect::GetSelectedMap ( )
{
	static UFunction* pFnGetSelectedMap = NULL;

	if ( ! pFnGetSelectedMap )
		pFnGetSelectedMap = (UFunction*) UObject::GObjObjects()->Data[ 82073 ];

	UR_GFxFrontEnd_MapSelect_execGetSelectedMap_Parms GetSelectedMap_Parms;

	this->ProcessEvent ( pFnGetSelectedMap, &GetSelectedMap_Parms, NULL );

	return GetSelectedMap_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_MapSelect.SetupMapCycle
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FString                 SelectedMap                    ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_MapSelect::SetupMapCycle ( struct FString SelectedMap )
{
	static UFunction* pFnSetupMapCycle = NULL;

	if ( ! pFnSetupMapCycle )
		pFnSetupMapCycle = (UFunction*) UObject::GObjObjects()->Data[ 82068 ];

	UR_GFxFrontEnd_MapSelect_execSetupMapCycle_Parms SetupMapCycle_Parms;
	memcpy ( &SetupMapCycle_Parms.SelectedMap, &SelectedMap, 0xC );

	this->ProcessEvent ( pFnSetupMapCycle, &SetupMapCycle_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MapSelect.GetCurrentGameMode
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UR_GFxFrontEnd_MapSelect::GetCurrentGameMode ( )
{
	static UFunction* pFnGetCurrentGameMode = NULL;

	if ( ! pFnGetCurrentGameMode )
		pFnGetCurrentGameMode = (UFunction*) UObject::GObjObjects()->Data[ 82064 ];

	UR_GFxFrontEnd_MapSelect_execGetCurrentGameMode_Parms GetCurrentGameMode_Parms;

	this->ProcessEvent ( pFnGetCurrentGameMode, &GetCurrentGameMode_Parms, NULL );

	return GetCurrentGameMode_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_MapSelect.GetImageMarkupByMapName
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 InMapName                      ( CPF_Parm | CPF_NeedCtorLink )

struct FString UR_GFxFrontEnd_MapSelect::GetImageMarkupByMapName ( struct FString InMapName )
{
	static UFunction* pFnGetImageMarkupByMapName = NULL;

	if ( ! pFnGetImageMarkupByMapName )
		pFnGetImageMarkupByMapName = (UFunction*) UObject::GObjObjects()->Data[ 81223 ];

	UR_GFxFrontEnd_MapSelect_execGetImageMarkupByMapName_Parms GetImageMarkupByMapName_Parms;
	memcpy ( &GetImageMarkupByMapName_Parms.InMapName, &InMapName, 0xC );

	this->ProcessEvent ( pFnGetImageMarkupByMapName, &GetImageMarkupByMapName_Parms, NULL );

	return GetImageMarkupByMapName_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_MapSelect.SetImgScroller
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UGFxClikWidget*          InImgScroller                  ( CPF_Parm )

void UR_GFxFrontEnd_MapSelect::SetImgScroller ( class UGFxClikWidget* InImgScroller )
{
	static UFunction* pFnSetImgScroller = NULL;

	if ( ! pFnSetImgScroller )
		pFnSetImgScroller = (UFunction*) UObject::GObjObjects()->Data[ 82055 ];

	UR_GFxFrontEnd_MapSelect_execSetImgScroller_Parms SetImgScroller_Parms;
	SetImgScroller_Parms.InImgScroller = InImgScroller;

	this->ProcessEvent ( pFnSetImgScroller, &SetImgScroller_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MapSelect.UpdateListDataProvider
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_MapSelect::UpdateListDataProvider ( )
{
	static UFunction* pFnUpdateListDataProvider = NULL;

	if ( ! pFnUpdateListDataProvider )
		pFnUpdateListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 82045 ];

	UR_GFxFrontEnd_MapSelect_execUpdateListDataProvider_Parms UpdateListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateListDataProvider, &UpdateListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MapSelect.OnListItemPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_MapSelect::OnListItemPress ( struct FEventData ev )
{
	static UFunction* pFnOnListItemPress = NULL;

	if ( ! pFnOnListItemPress )
		pFnOnListItemPress = (UFunction*) UObject::GObjObjects()->Data[ 82040 ];

	UR_GFxFrontEnd_MapSelect_execOnListItemPress_Parms OnListItemPress_Parms;
	memcpy ( &OnListItemPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListItemPress, &OnListItemPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MapSelect.SetList
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              List                           ( CPF_Parm )

void UR_GFxFrontEnd_MapSelect::SetList ( class UGFxObject* List )
{
	static UFunction* pFnSetList = NULL;

	if ( ! pFnSetList )
		pFnSetList = (UFunction*) UObject::GObjObjects()->Data[ 82038 ];

	UR_GFxFrontEnd_MapSelect_execSetList_Parms SetList_Parms;
	SetList_Parms.List = List;

	this->ProcessEvent ( pFnSetList, &SetList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MapSelect.OnMapList_ValueChanged
// [0x00024002] 
// Parameters infos:
// struct FString                 InMapSelected                  ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InMapImageSelected             ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_MapSelect::OnMapList_ValueChanged ( struct FString InMapSelected, struct FString InMapImageSelected )
{
	static UFunction* pFnOnMapList_ValueChanged = NULL;

	if ( ! pFnOnMapList_ValueChanged )
		pFnOnMapList_ValueChanged = (UFunction*) UObject::GObjObjects()->Data[ 82034 ];

	UR_GFxFrontEnd_MapSelect_execOnMapList_ValueChanged_Parms OnMapList_ValueChanged_Parms;
	memcpy ( &OnMapList_ValueChanged_Parms.InMapSelected, &InMapSelected, 0xC );
	memcpy ( &OnMapList_ValueChanged_Parms.InMapImageSelected, &InMapImageSelected, 0xC );

	this->ProcessEvent ( pFnOnMapList_ValueChanged, &OnMapList_ValueChanged_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MapSelect.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_MapSelect::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 82032 ];

	UR_GFxFrontEnd_MapSelect_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MapSelect.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_MapSelect::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 82030 ];

	UR_GFxFrontEnd_MapSelect_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_MapSelect.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_MapSelect::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 82029 ];

	UR_GFxFrontEnd_MapSelect_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_Mutators::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 82225 ];

	UR_GFxFrontEnd_Mutators_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.SetConfigList
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              ConfigList                     ( CPF_Parm )

void UR_GFxFrontEnd_Mutators::SetConfigList ( class UGFxObject* ConfigList )
{
	static UFunction* pFnSetConfigList = NULL;

	if ( ! pFnSetConfigList )
		pFnSetConfigList = (UFunction*) UObject::GObjObjects()->Data[ 82223 ];

	UR_GFxFrontEnd_Mutators_execSetConfigList_Parms SetConfigList_Parms;
	SetConfigList_Parms.ConfigList = ConfigList;

	this->ProcessEvent ( pFnSetConfigList, &SetConfigList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.SetList
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              List                           ( CPF_Parm )

void UR_GFxFrontEnd_Mutators::SetList ( class UGFxObject* List )
{
	static UFunction* pFnSetList = NULL;

	if ( ! pFnSetList )
		pFnSetList = (UFunction*) UObject::GObjObjects()->Data[ 82221 ];

	UR_GFxFrontEnd_Mutators_execSetList_Parms SetList_Parms;
	SetList_Parms.List = List;

	this->ProcessEvent ( pFnSetList, &SetList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.IsCurrentMutatorConfigurable
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UR_GFxFrontEnd_Mutators::IsCurrentMutatorConfigurable ( )
{
	static UFunction* pFnIsCurrentMutatorConfigurable = NULL;

	if ( ! pFnIsCurrentMutatorConfigurable )
		pFnIsCurrentMutatorConfigurable = (UFunction*) UObject::GObjObjects()->Data[ 82219 ];

	UR_GFxFrontEnd_Mutators_execIsCurrentMutatorConfigurable_Parms IsCurrentMutatorConfigurable_Parms;

	this->ProcessEvent ( pFnIsCurrentMutatorConfigurable, &IsCurrentMutatorConfigurable_Parms, NULL );

	return IsCurrentMutatorConfigurable_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.ApplyGameModeFilter
// [0x00022002] 
// Parameters infos:

void UR_GFxFrontEnd_Mutators::ApplyGameModeFilter ( )
{
	static UFunction* pFnApplyGameModeFilter = NULL;

	if ( ! pFnApplyGameModeFilter )
		pFnApplyGameModeFilter = (UFunction*) UObject::GObjObjects()->Data[ 82211 ];

	UR_GFxFrontEnd_Mutators_execApplyGameModeFilter_Parms ApplyGameModeFilter_Parms;

	this->ProcessEvent ( pFnApplyGameModeFilter, &ApplyGameModeFilter_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.GetNumEnabledMutators
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UR_GFxFrontEnd_Mutators::GetNumEnabledMutators ( )
{
	static UFunction* pFnGetNumEnabledMutators = NULL;

	if ( ! pFnGetNumEnabledMutators )
		pFnGetNumEnabledMutators = (UFunction*) UObject::GObjObjects()->Data[ 81375 ];

	UR_GFxFrontEnd_Mutators_execGetNumEnabledMutators_Parms GetNumEnabledMutators_Parms;

	this->ProcessEvent ( pFnGetNumEnabledMutators, &GetNumEnabledMutators_Parms, NULL );

	return GetNumEnabledMutators_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.GetEnabledMutators
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UR_GFxFrontEnd_Mutators::GetEnabledMutators ( )
{
	static UFunction* pFnGetEnabledMutators = NULL;

	if ( ! pFnGetEnabledMutators )
		pFnGetEnabledMutators = (UFunction*) UObject::GObjObjects()->Data[ 81453 ];

	UR_GFxFrontEnd_Mutators_execGetEnabledMutators_Parms GetEnabledMutators_Parms;

	this->ProcessEvent ( pFnGetEnabledMutators, &GetEnabledMutators_Parms, NULL );

	return GetEnabledMutators_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.AddMutatorAndFilterList
// [0x00020002] 
// Parameters infos:
// int                            NewMutator                     ( CPF_Parm )

void UR_GFxFrontEnd_Mutators::AddMutatorAndFilterList ( int NewMutator )
{
	static UFunction* pFnAddMutatorAndFilterList = NULL;

	if ( ! pFnAddMutatorAndFilterList )
		pFnAddMutatorAndFilterList = (UFunction*) UObject::GObjObjects()->Data[ 82190 ];

	UR_GFxFrontEnd_Mutators_execAddMutatorAndFilterList_Parms AddMutatorAndFilterList_Parms;
	AddMutatorAndFilterList_Parms.NewMutator = NewMutator;

	this->ProcessEvent ( pFnAddMutatorAndFilterList, &AddMutatorAndFilterList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.SetMutatorEnabled
// [0x00020002] 
// Parameters infos:
// int                            MutatorId                      ( CPF_Parm )

void UR_GFxFrontEnd_Mutators::SetMutatorEnabled ( int MutatorId )
{
	static UFunction* pFnSetMutatorEnabled = NULL;

	if ( ! pFnSetMutatorEnabled )
		pFnSetMutatorEnabled = (UFunction*) UObject::GObjObjects()->Data[ 82188 ];

	UR_GFxFrontEnd_Mutators_execSetMutatorEnabled_Parms SetMutatorEnabled_Parms;
	SetMutatorEnabled_Parms.MutatorId = MutatorId;

	this->ProcessEvent ( pFnSetMutatorEnabled, &SetMutatorEnabled_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.UpdateConfigListDataProvider
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd_Mutators::UpdateConfigListDataProvider ( )
{
	static UFunction* pFnUpdateConfigListDataProvider = NULL;

	if ( ! pFnUpdateConfigListDataProvider )
		pFnUpdateConfigListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 82187 ];

	UR_GFxFrontEnd_Mutators_execUpdateConfigListDataProvider_Parms UpdateConfigListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateConfigListDataProvider, &UpdateConfigListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.UpdateListDataProvider
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Mutators::UpdateListDataProvider ( )
{
	static UFunction* pFnUpdateListDataProvider = NULL;

	if ( ! pFnUpdateListDataProvider )
		pFnUpdateListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 82178 ];

	UR_GFxFrontEnd_Mutators_execUpdateListDataProvider_Parms UpdateListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateListDataProvider, &UpdateListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.UpdateDescription
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Mutators::UpdateDescription ( )
{
	static UFunction* pFnUpdateDescription = NULL;

	if ( ! pFnUpdateDescription )
		pFnUpdateDescription = (UFunction*) UObject::GObjObjects()->Data[ 82174 ];

	UR_GFxFrontEnd_Mutators_execUpdateDescription_Parms UpdateDescription_Parms;

	this->ProcessEvent ( pFnUpdateDescription, &UpdateDescription_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.OnListChange
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Mutators::OnListChange ( struct FEventData ev )
{
	static UFunction* pFnOnListChange = NULL;

	if ( ! pFnOnListChange )
		pFnOnListChange = (UFunction*) UObject::GObjObjects()->Data[ 82172 ];

	UR_GFxFrontEnd_Mutators_execOnListChange_Parms OnListChange_Parms;
	memcpy ( &OnListChange_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListChange, &OnListChange_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.FindMutatorIndexByClass
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MutatorClass                   ( CPF_Parm | CPF_NeedCtorLink )

unsigned char UR_GFxFrontEnd_Mutators::FindMutatorIndexByClass ( struct FString MutatorClass )
{
	static UFunction* pFnFindMutatorIndexByClass = NULL;

	if ( ! pFnFindMutatorIndexByClass )
		pFnFindMutatorIndexByClass = (UFunction*) UObject::GObjObjects()->Data[ 82168 ];

	UR_GFxFrontEnd_Mutators_execFindMutatorIndexByClass_Parms FindMutatorIndexByClass_Parms;
	memcpy ( &FindMutatorIndexByClass_Parms.MutatorClass, &MutatorClass, 0xC );

	this->ProcessEvent ( pFnFindMutatorIndexByClass, &FindMutatorIndexByClass_Parms, NULL );

	return FindMutatorIndexByClass_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.OnListItemPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Mutators::OnListItemPress ( struct FEventData ev )
{
	static UFunction* pFnOnListItemPress = NULL;

	if ( ! pFnOnListItemPress )
		pFnOnListItemPress = (UFunction*) UObject::GObjObjects()->Data[ 82163 ];

	UR_GFxFrontEnd_Mutators_execOnListItemPress_Parms OnListItemPress_Parms;
	memcpy ( &OnListItemPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListItemPress, &OnListItemPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.PlayOpenAnimation
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Mutators::PlayOpenAnimation ( )
{
	static UFunction* pFnPlayOpenAnimation = NULL;

	if ( ! pFnPlayOpenAnimation )
		pFnPlayOpenAnimation = (UFunction*) UObject::GObjObjects()->Data[ 82162 ];

	UR_GFxFrontEnd_Mutators_execPlayOpenAnimation_Parms PlayOpenAnimation_Parms;

	this->ProcessEvent ( pFnPlayOpenAnimation, &PlayOpenAnimation_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_Mutators::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 82160 ];

	UR_GFxFrontEnd_Mutators_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_Mutators::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 82158 ];

	UR_GFxFrontEnd_Mutators_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.SortAllMutatorsBasedOnOfficialArray
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Mutators::SortAllMutatorsBasedOnOfficialArray ( )
{
	static UFunction* pFnSortAllMutatorsBasedOnOfficialArray = NULL;

	if ( ! pFnSortAllMutatorsBasedOnOfficialArray )
		pFnSortAllMutatorsBasedOnOfficialArray = (UFunction*) UObject::GObjObjects()->Data[ 82149 ];

	UR_GFxFrontEnd_Mutators_execSortAllMutatorsBasedOnOfficialArray_Parms SortAllMutatorsBasedOnOfficialArray_Parms;

	this->ProcessEvent ( pFnSortAllMutatorsBasedOnOfficialArray, &SortAllMutatorsBasedOnOfficialArray_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.OnViewActivated
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Mutators::OnViewActivated ( )
{
	static UFunction* pFnOnViewActivated = NULL;

	if ( ! pFnOnViewActivated )
		pFnOnViewActivated = (UFunction*) UObject::GObjObjects()->Data[ 82145 ];

	UR_GFxFrontEnd_Mutators_execOnViewActivated_Parms OnViewActivated_Parms;

	this->ProcessEvent ( pFnOnViewActivated, &OnViewActivated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Mutators.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Mutators::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 82144 ];

	UR_GFxFrontEnd_Mutators_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_LaunchGame.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_LaunchGame::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 81392 ];

	UR_GFxFrontEnd_LaunchGame_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_LaunchGame.GetGameModeFriendlyString
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 InGameMode                     ( CPF_Parm | CPF_NeedCtorLink )

struct FString UR_GFxFrontEnd_LaunchGame::GetGameModeFriendlyString ( struct FString InGameMode )
{
	static UFunction* pFnGetGameModeFriendlyString = NULL;

	if ( ! pFnGetGameModeFriendlyString )
		pFnGetGameModeFriendlyString = (UFunction*) UObject::GObjObjects()->Data[ 81247 ];

	UR_GFxFrontEnd_LaunchGame_execGetGameModeFriendlyString_Parms GetGameModeFriendlyString_Parms;
	memcpy ( &GetGameModeFriendlyString_Parms.InGameMode, &InGameMode, 0xC );

	this->ProcessEvent ( pFnGetGameModeFriendlyString, &GetGameModeFriendlyString_Parms, NULL );

	return GetGameModeFriendlyString_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_LaunchGame.UpdateListDataProvider
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_LaunchGame::UpdateListDataProvider ( )
{
	static UFunction* pFnUpdateListDataProvider = NULL;

	if ( ! pFnUpdateListDataProvider )
		pFnUpdateListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 81386 ];

	UR_GFxFrontEnd_LaunchGame_execUpdateListDataProvider_Parms UpdateListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateListDataProvider, &UpdateListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_LaunchGame.UpdateDescription
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_LaunchGame::UpdateDescription ( )
{
	static UFunction* pFnUpdateDescription = NULL;

	if ( ! pFnUpdateDescription )
		pFnUpdateDescription = (UFunction*) UObject::GObjObjects()->Data[ 81383 ];

	UR_GFxFrontEnd_LaunchGame_execUpdateDescription_Parms UpdateDescription_Parms;

	this->ProcessEvent ( pFnUpdateDescription, &UpdateDescription_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_LaunchGame.OnListChange
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_LaunchGame::OnListChange ( struct FEventData ev )
{
	static UFunction* pFnOnListChange = NULL;

	if ( ! pFnOnListChange )
		pFnOnListChange = (UFunction*) UObject::GObjObjects()->Data[ 81381 ];

	UR_GFxFrontEnd_LaunchGame_execOnListChange_Parms OnListChange_Parms;
	memcpy ( &OnListChange_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListChange, &OnListChange_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_LaunchGame.OnListItemPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_LaunchGame::OnListItemPress ( struct FEventData ev )
{
	static UFunction* pFnOnListItemPress = NULL;

	if ( ! pFnOnListItemPress )
		pFnOnListItemPress = (UFunction*) UObject::GObjObjects()->Data[ 81377 ];

	UR_GFxFrontEnd_LaunchGame_execOnListItemPress_Parms OnListItemPress_Parms;
	memcpy ( &OnListItemPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListItemPress, &OnListItemPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_LaunchGame.UpdateGameSettingsPanel
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void UR_GFxFrontEnd_LaunchGame::UpdateGameSettingsPanel ( )
{
	static UFunction* pFnUpdateGameSettingsPanel = NULL;

	if ( ! pFnUpdateGameSettingsPanel )
		pFnUpdateGameSettingsPanel = (UFunction*) UObject::GObjObjects()->Data[ 81358 ];

	UR_GFxFrontEnd_LaunchGame_execUpdateGameSettingsPanel_Parms UpdateGameSettingsPanel_Parms;

	this->ProcessEvent ( pFnUpdateGameSettingsPanel, &UpdateGameSettingsPanel_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_LaunchGame.OnStartGame_Confirm
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd_LaunchGame::OnStartGame_Confirm ( )
{
	static UFunction* pFnOnStartGame_Confirm = NULL;

	if ( ! pFnOnStartGame_Confirm )
		pFnOnStartGame_Confirm = (UFunction*) UObject::GObjObjects()->Data[ 81361 ];

	UR_GFxFrontEnd_LaunchGame_execOnStartGame_Confirm_Parms OnStartGame_Confirm_Parms;

	this->ProcessEvent ( pFnOnStartGame_Confirm, &OnStartGame_Confirm_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_LaunchGame.PlayCloseAnimation
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_LaunchGame::PlayCloseAnimation ( )
{
	static UFunction* pFnPlayCloseAnimation = NULL;

	if ( ! pFnPlayCloseAnimation )
		pFnPlayCloseAnimation = (UFunction*) UObject::GObjObjects()->Data[ 81360 ];

	UR_GFxFrontEnd_LaunchGame_execPlayCloseAnimation_Parms PlayCloseAnimation_Parms;

	this->ProcessEvent ( pFnPlayCloseAnimation, &PlayCloseAnimation_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_LaunchGame.PlayOpenAnimation
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_LaunchGame::PlayOpenAnimation ( )
{
	static UFunction* pFnPlayOpenAnimation = NULL;

	if ( ! pFnPlayOpenAnimation )
		pFnPlayOpenAnimation = (UFunction*) UObject::GObjObjects()->Data[ 81359 ];

	UR_GFxFrontEnd_LaunchGame_execPlayOpenAnimation_Parms PlayOpenAnimation_Parms;

	this->ProcessEvent ( pFnPlayOpenAnimation, &PlayOpenAnimation_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_LaunchGame.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_LaunchGame::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 81356 ];

	UR_GFxFrontEnd_LaunchGame_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_LaunchGame.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_LaunchGame::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 81354 ];

	UR_GFxFrontEnd_LaunchGame_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_LaunchGame.OnViewActivated
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_LaunchGame::OnViewActivated ( )
{
	static UFunction* pFnOnViewActivated = NULL;

	if ( ! pFnOnViewActivated )
		pFnOnViewActivated = (UFunction*) UObject::GObjObjects()->Data[ 81348 ];

	UR_GFxFrontEnd_LaunchGame_execOnViewActivated_Parms OnViewActivated_Parms;

	this->ProcessEvent ( pFnOnViewActivated, &OnViewActivated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_LaunchGame.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_LaunchGame::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 81346 ];

	UR_GFxFrontEnd_LaunchGame_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameplaySettings.SaveState
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_GameplaySettings::SaveState ( )
{
	static UFunction* pFnSaveState = NULL;

	if ( ! pFnSaveState )
		pFnSaveState = (UFunction*) UObject::GObjObjects()->Data[ 81306 ];

	UR_GFxFrontEnd_GameplaySettings_execSaveState_Parms SaveState_Parms;

	this->ProcessEvent ( pFnSaveState, &SaveState_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameplaySettings.UpdateDescription
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_GameplaySettings::UpdateDescription ( )
{
	static UFunction* pFnUpdateDescription = NULL;

	if ( ! pFnUpdateDescription )
		pFnUpdateDescription = (UFunction*) UObject::GObjObjects()->Data[ 81304 ];

	UR_GFxFrontEnd_GameplaySettings_execUpdateDescription_Parms UpdateDescription_Parms;

	this->ProcessEvent ( pFnUpdateDescription, &UpdateDescription_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameplaySettings.OnSettingChanged
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_GameplaySettings::OnSettingChanged ( struct FEventData ev )
{
	static UFunction* pFnOnSettingChanged = NULL;

	if ( ! pFnOnSettingChanged )
		pFnOnSettingChanged = (UFunction*) UObject::GObjObjects()->Data[ 81302 ];

	UR_GFxFrontEnd_GameplaySettings_execOnSettingChanged_Parms OnSettingChanged_Parms;
	memcpy ( &OnSettingChanged_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnSettingChanged, &OnSettingChanged_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameplaySettings.OnListChange
// [0x00020000] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_GameplaySettings::OnListChange ( struct FEventData ev )
{
	static UFunction* pFnOnListChange = NULL;

	if ( ! pFnOnListChange )
		pFnOnListChange = (UFunction*) UObject::GObjObjects()->Data[ 81300 ];

	UR_GFxFrontEnd_GameplaySettings_execOnListChange_Parms OnListChange_Parms;
	memcpy ( &OnListChange_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListChange, &OnListChange_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameplaySettings.MoveBackImpl
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_GameplaySettings::MoveBackImpl ( )
{
	static UFunction* pFnMoveBackImpl = NULL;

	if ( ! pFnMoveBackImpl )
		pFnMoveBackImpl = (UFunction*) UObject::GObjObjects()->Data[ 81299 ];

	UR_GFxFrontEnd_GameplaySettings_execMoveBackImpl_Parms MoveBackImpl_Parms;

	this->ProcessEvent ( pFnMoveBackImpl, &MoveBackImpl_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameplaySettings.Select_Back
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_GameplaySettings::Select_Back ( struct FEventData ev )
{
	static UFunction* pFnSelect_Back = NULL;

	if ( ! pFnSelect_Back )
		pFnSelect_Back = (UFunction*) UObject::GObjObjects()->Data[ 81297 ];

	UR_GFxFrontEnd_GameplaySettings_execSelect_Back_Parms Select_Back_Parms;
	memcpy ( &Select_Back_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnSelect_Back, &Select_Back_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameplaySettings.PopulateSettingData
// [0x00420002] 
// Parameters infos:
// TArray< struct FString >       SettingData                    ( CPF_Parm | CPF_NeedCtorLink )
// class UGFxObject*              RendererDataProvider           ( CPF_Parm | CPF_OutParm )

void UR_GFxFrontEnd_GameplaySettings::PopulateSettingData ( TArray< struct FString > SettingData, class UGFxObject** RendererDataProvider )
{
	static UFunction* pFnPopulateSettingData = NULL;

	if ( ! pFnPopulateSettingData )
		pFnPopulateSettingData = (UFunction*) UObject::GObjObjects()->Data[ 81291 ];

	UR_GFxFrontEnd_GameplaySettings_execPopulateSettingData_Parms PopulateSettingData_Parms;
	memcpy ( &PopulateSettingData_Parms.SettingData, &SettingData, 0xC );

	this->ProcessEvent ( pFnPopulateSettingData, &PopulateSettingData_Parms, NULL );

	if ( RendererDataProvider )
		*RendererDataProvider = PopulateSettingData_Parms.RendererDataProvider;
};

// Function RavagedGame.R_GFxFrontEnd_GameplaySettings.initializeSettings
// [0x00820002] 
// Parameters infos:

void UR_GFxFrontEnd_GameplaySettings::initializeSettings ( )
{
	static UFunction* pFninitializeSettings = NULL;

	if ( ! pFninitializeSettings )
		pFninitializeSettings = (UFunction*) UObject::GObjObjects()->Data[ 81282 ];

	UR_GFxFrontEnd_GameplaySettings_execinitializeSettings_Parms initializeSettings_Parms;

	this->ProcessEvent ( pFninitializeSettings, &initializeSettings_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameplaySettings.SetList
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              InList                         ( CPF_Parm )

void UR_GFxFrontEnd_GameplaySettings::SetList ( class UGFxObject* InList )
{
	static UFunction* pFnSetList = NULL;

	if ( ! pFnSetList )
		pFnSetList = (UFunction*) UObject::GObjObjects()->Data[ 81280 ];

	UR_GFxFrontEnd_GameplaySettings_execSetList_Parms SetList_Parms;
	SetList_Parms.InList = InList;

	this->ProcessEvent ( pFnSetList, &SetList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameplaySettings.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_GameplaySettings::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 81274 ];

	UR_GFxFrontEnd_GameplaySettings_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_GameplaySettings.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_GameplaySettings::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 81272 ];

	UR_GFxFrontEnd_GameplaySettings_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_GameplaySettings.OnViewLoaded
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd_GameplaySettings::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 81271 ];

	UR_GFxFrontEnd_GameplaySettings_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_HostGame.OnStartGame_Confirm
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_HostGame::OnStartGame_Confirm ( )
{
	static UFunction* pFnOnStartGame_Confirm = NULL;

	if ( ! pFnOnStartGame_Confirm )
		pFnOnStartGame_Confirm = (UFunction*) UObject::GObjObjects()->Data[ 81463 ];

	UR_GFxFrontEnd_HostGame_execOnStartGame_Confirm_Parms OnStartGame_Confirm_Parms;

	this->ProcessEvent ( pFnOnStartGame_Confirm, &OnStartGame_Confirm_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_HostGame.FinishStartDedicated
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_HostGame::FinishStartDedicated ( )
{
	static UFunction* pFnFinishStartDedicated = NULL;

	if ( ! pFnFinishStartDedicated )
		pFnFinishStartDedicated = (UFunction*) UObject::GObjObjects()->Data[ 81455 ];

	UR_GFxFrontEnd_HostGame_execFinishStartDedicated_Parms FinishStartDedicated_Parms;

	this->ProcessEvent ( pFnFinishStartDedicated, &FinishStartDedicated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_HostGame.OnGameCreated
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UR_GFxFrontEnd_HostGame::OnGameCreated ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnGameCreated = NULL;

	if ( ! pFnOnGameCreated )
		pFnOnGameCreated = (UFunction*) UObject::GObjObjects()->Data[ 81442 ];

	UR_GFxFrontEnd_HostGame_execOnGameCreated_Parms OnGameCreated_Parms;
	memcpy ( &OnGameCreated_Parms.SessionName, &SessionName, 0x8 );
	OnGameCreated_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnGameCreated, &OnGameCreated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_HostGame.CreateOnlineGame
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )

void UR_GFxFrontEnd_HostGame::CreateOnlineGame ( int PlayerIndex )
{
	static UFunction* pFnCreateOnlineGame = NULL;

	if ( ! pFnCreateOnlineGame )
		pFnCreateOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 81438 ];

	UR_GFxFrontEnd_HostGame_execCreateOnlineGame_Parms CreateOnlineGame_Parms;
	CreateOnlineGame_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnCreateOnlineGame, &CreateOnlineGame_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_HostGame.SetupGameSettings
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_HostGame::SetupGameSettings ( )
{
	static UFunction* pFnSetupGameSettings = NULL;

	if ( ! pFnSetupGameSettings )
		pFnSetupGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 81431 ];

	UR_GFxFrontEnd_HostGame_execSetupGameSettings_Parms SetupGameSettings_Parms;

	this->ProcessEvent ( pFnSetupGameSettings, &SetupGameSettings_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_HostGame.GenerateMutatorURLString
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UR_GFxFrontEnd_HostGame::GenerateMutatorURLString ( )
{
	static UFunction* pFnGenerateMutatorURLString = NULL;

	if ( ! pFnGenerateMutatorURLString )
		pFnGenerateMutatorURLString = (UFunction*) UObject::GObjObjects()->Data[ 81420 ];

	UR_GFxFrontEnd_HostGame_execGenerateMutatorURLString_Parms GenerateMutatorURLString_Parms;

	this->ProcessEvent ( pFnGenerateMutatorURLString, &GenerateMutatorURLString_Parms, NULL );

	return GenerateMutatorURLString_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_HostGame.ValidateServerType
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_HostGame::ValidateServerType ( )
{
	static UFunction* pFnValidateServerType = NULL;

	if ( ! pFnValidateServerType )
		pFnValidateServerType = (UFunction*) UObject::GObjObjects()->Data[ 81415 ];

	UR_GFxFrontEnd_HostGame_execValidateServerType_Parms ValidateServerType_Parms;

	this->ProcessEvent ( pFnValidateServerType, &ValidateServerType_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_HostGame.StripInvalidPasswordCharacters
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 PasswordString                 ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InvalidChars                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

struct FString UR_GFxFrontEnd_HostGame::StripInvalidPasswordCharacters ( struct FString PasswordString, struct FString InvalidChars )
{
	static UFunction* pFnStripInvalidPasswordCharacters = NULL;

	if ( ! pFnStripInvalidPasswordCharacters )
		pFnStripInvalidPasswordCharacters = (UFunction*) UObject::GObjObjects()->Data[ 81410 ];

	UR_GFxFrontEnd_HostGame_execStripInvalidPasswordCharacters_Parms StripInvalidPasswordCharacters_Parms;
	memcpy ( &StripInvalidPasswordCharacters_Parms.PasswordString, &PasswordString, 0xC );
	memcpy ( &StripInvalidPasswordCharacters_Parms.InvalidChars, &InvalidChars, 0xC );

	this->ProcessEvent ( pFnStripInvalidPasswordCharacters, &StripInvalidPasswordCharacters_Parms, NULL );

	return StripInvalidPasswordCharacters_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_HostGame.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_HostGame::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 81408 ];

	UR_GFxFrontEnd_HostGame_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_HostGame.OnViewActivated
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_HostGame::OnViewActivated ( )
{
	static UFunction* pFnOnViewActivated = NULL;

	if ( ! pFnOnViewActivated )
		pFnOnViewActivated = (UFunction*) UObject::GObjObjects()->Data[ 81404 ];

	UR_GFxFrontEnd_HostGame_execOnViewActivated_Parms OnViewActivated_Parms;

	this->ProcessEvent ( pFnOnViewActivated, &OnViewActivated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_InstantAction.OnStartGame_Confirm
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_InstantAction::OnStartGame_Confirm ( )
{
	static UFunction* pFnOnStartGame_Confirm = NULL;

	if ( ! pFnOnStartGame_Confirm )
		pFnOnStartGame_Confirm = (UFunction*) UObject::GObjObjects()->Data[ 81485 ];

	UR_GFxFrontEnd_InstantAction_execOnStartGame_Confirm_Parms OnStartGame_Confirm_Parms;

	this->ProcessEvent ( pFnOnStartGame_Confirm, &OnStartGame_Confirm_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_InstantAction.OnViewActivated
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_InstantAction::OnViewActivated ( )
{
	static UFunction* pFnOnViewActivated = NULL;

	if ( ! pFnOnViewActivated )
		pFnOnViewActivated = (UFunction*) UObject::GObjObjects()->Data[ 81483 ];

	UR_GFxFrontEnd_InstantAction_execOnViewActivated_Parms OnViewActivated_Parms;

	this->ProcessEvent ( pFnOnViewActivated, &OnViewActivated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Multiplayer.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_Multiplayer::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 82124 ];

	UR_GFxFrontEnd_Multiplayer_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Multiplayer.SetList
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              InList                         ( CPF_Parm )

void UR_GFxFrontEnd_Multiplayer::SetList ( class UGFxObject* InList )
{
	static UFunction* pFnSetList = NULL;

	if ( ! pFnSetList )
		pFnSetList = (UFunction*) UObject::GObjObjects()->Data[ 82122 ];

	UR_GFxFrontEnd_Multiplayer_execSetList_Parms SetList_Parms;
	SetList_Parms.InList = InList;

	this->ProcessEvent ( pFnSetList, &SetList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Multiplayer.UpdateListDataProvider
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Multiplayer::UpdateListDataProvider ( )
{
	static UFunction* pFnUpdateListDataProvider = NULL;

	if ( ! pFnUpdateListDataProvider )
		pFnUpdateListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 82118 ];

	UR_GFxFrontEnd_Multiplayer_execUpdateListDataProvider_Parms UpdateListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateListDataProvider, &UpdateListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Multiplayer.UpdateDescription
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Multiplayer::UpdateDescription ( )
{
	static UFunction* pFnUpdateDescription = NULL;

	if ( ! pFnUpdateDescription )
		pFnUpdateDescription = (UFunction*) UObject::GObjObjects()->Data[ 82115 ];

	UR_GFxFrontEnd_Multiplayer_execUpdateDescription_Parms UpdateDescription_Parms;

	this->ProcessEvent ( pFnUpdateDescription, &UpdateDescription_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Multiplayer.OnListChange
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Multiplayer::OnListChange ( struct FEventData ev )
{
	static UFunction* pFnOnListChange = NULL;

	if ( ! pFnOnListChange )
		pFnOnListChange = (UFunction*) UObject::GObjObjects()->Data[ 82113 ];

	UR_GFxFrontEnd_Multiplayer_execOnListChange_Parms OnListChange_Parms;
	memcpy ( &OnListChange_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListChange, &OnListChange_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Multiplayer.OnListItemPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_Multiplayer::OnListItemPress ( struct FEventData ev )
{
	static UFunction* pFnOnListItemPress = NULL;

	if ( ! pFnOnListItemPress )
		pFnOnListItemPress = (UFunction*) UObject::GObjObjects()->Data[ 82109 ];

	UR_GFxFrontEnd_Multiplayer_execOnListItemPress_Parms OnListItemPress_Parms;
	memcpy ( &OnListItemPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListItemPress, &OnListItemPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Multiplayer.Select_HostGame
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Multiplayer::Select_HostGame ( )
{
	static UFunction* pFnSelect_HostGame = NULL;

	if ( ! pFnSelect_HostGame )
		pFnSelect_HostGame = (UFunction*) UObject::GObjObjects()->Data[ 82108 ];

	UR_GFxFrontEnd_Multiplayer_execSelect_HostGame_Parms Select_HostGame_Parms;

	this->ProcessEvent ( pFnSelect_HostGame, &Select_HostGame_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Multiplayer.Select_JoinGame
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Multiplayer::Select_JoinGame ( )
{
	static UFunction* pFnSelect_JoinGame = NULL;

	if ( ! pFnSelect_JoinGame )
		pFnSelect_JoinGame = (UFunction*) UObject::GObjObjects()->Data[ 82107 ];

	UR_GFxFrontEnd_Multiplayer_execSelect_JoinGame_Parms Select_JoinGame_Parms;

	this->ProcessEvent ( pFnSelect_JoinGame, &Select_JoinGame_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Multiplayer.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_Multiplayer::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 82105 ];

	UR_GFxFrontEnd_Multiplayer_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Multiplayer.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_Multiplayer::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 82103 ];

	UR_GFxFrontEnd_Multiplayer_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Multiplayer.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Multiplayer::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 82102 ];

	UR_GFxFrontEnd_Multiplayer_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Play.OnViewActivated
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Play::OnViewActivated ( )
{
	static UFunction* pFnOnViewActivated = NULL;

	if ( ! pFnOnViewActivated )
		pFnOnViewActivated = (UFunction*) UObject::GObjObjects()->Data[ 82309 ];

	UR_GFxFrontEnd_Play_execOnViewActivated_Parms OnViewActivated_Parms;

	this->ProcessEvent ( pFnOnViewActivated, &OnViewActivated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Play.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_Play::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 82303 ];

	UR_GFxFrontEnd_Play_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Play.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_Play::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 82301 ];

	UR_GFxFrontEnd_Play_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Play.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Play::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 82300 ];

	UR_GFxFrontEnd_Play_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_QuickPlay.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_QuickPlay::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 82313 ];

	UR_GFxFrontEnd_QuickPlay_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_QuickPlay.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_QuickPlay::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 82312 ];

	UR_GFxFrontEnd_QuickPlay_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_SettingsBase.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxFrontEnd_SettingsBase::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 82411 ];

	UR_GFxFrontEnd_SettingsBase_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_SettingsBase.FindPropertyIndexByName
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InPropertyName                 ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

int UR_GFxFrontEnd_SettingsBase::FindPropertyIndexByName ( struct FString InPropertyName )
{
	static UFunction* pFnFindPropertyIndexByName = NULL;

	if ( ! pFnFindPropertyIndexByName )
		pFnFindPropertyIndexByName = (UFunction*) UObject::GObjObjects()->Data[ 82405 ];

	UR_GFxFrontEnd_SettingsBase_execFindPropertyIndexByName_Parms FindPropertyIndexByName_Parms;
	memcpy ( &FindPropertyIndexByName_Parms.InPropertyName, &InPropertyName, 0xC );

	this->ProcessEvent ( pFnFindPropertyIndexByName, &FindPropertyIndexByName_Parms, NULL );

	return FindPropertyIndexByName_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_SettingsBase.Select_BackImpl
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_SettingsBase::Select_BackImpl ( )
{
	static UFunction* pFnSelect_BackImpl = NULL;

	if ( ! pFnSelect_BackImpl )
		pFnSelect_BackImpl = (UFunction*) UObject::GObjObjects()->Data[ 82404 ];

	UR_GFxFrontEnd_SettingsBase_execSelect_BackImpl_Parms Select_BackImpl_Parms;

	this->ProcessEvent ( pFnSelect_BackImpl, &Select_BackImpl_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_SettingsBase.OnEscapeKeyPress
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_SettingsBase::OnEscapeKeyPress ( )
{
	static UFunction* pFnOnEscapeKeyPress = NULL;

	if ( ! pFnOnEscapeKeyPress )
		pFnOnEscapeKeyPress = (UFunction*) UObject::GObjObjects()->Data[ 82403 ];

	UR_GFxFrontEnd_SettingsBase_execOnEscapeKeyPress_Parms OnEscapeKeyPress_Parms;

	this->ProcessEvent ( pFnOnEscapeKeyPress, &OnEscapeKeyPress_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_SettingsBase.FindLocalizedSettingIndexByName
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InSettingName                  ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

int UR_GFxFrontEnd_SettingsBase::FindLocalizedSettingIndexByName ( struct FString InSettingName )
{
	static UFunction* pFnFindLocalizedSettingIndexByName = NULL;

	if ( ! pFnFindLocalizedSettingIndexByName )
		pFnFindLocalizedSettingIndexByName = (UFunction*) UObject::GObjObjects()->Data[ 82397 ];

	UR_GFxFrontEnd_SettingsBase_execFindLocalizedSettingIndexByName_Parms FindLocalizedSettingIndexByName_Parms;
	memcpy ( &FindLocalizedSettingIndexByName_Parms.InSettingName, &InSettingName, 0xC );

	this->ProcessEvent ( pFnFindLocalizedSettingIndexByName, &FindLocalizedSettingIndexByName_Parms, NULL );

	return FindLocalizedSettingIndexByName_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_SettingsBase.UpdateListDataProvider
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd_SettingsBase::UpdateListDataProvider ( )
{
	static UFunction* pFnUpdateListDataProvider = NULL;

	if ( ! pFnUpdateListDataProvider )
		pFnUpdateListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 82396 ];

	UR_GFxFrontEnd_SettingsBase_execUpdateListDataProvider_Parms UpdateListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateListDataProvider, &UpdateListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_SettingsBase.UpdateDescription
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_SettingsBase::UpdateDescription ( )
{
	static UFunction* pFnUpdateDescription = NULL;

	if ( ! pFnUpdateDescription )
		pFnUpdateDescription = (UFunction*) UObject::GObjObjects()->Data[ 82393 ];

	UR_GFxFrontEnd_SettingsBase_execUpdateDescription_Parms UpdateDescription_Parms;

	this->ProcessEvent ( pFnUpdateDescription, &UpdateDescription_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_SettingsBase.OnOptionChanged
// [0x00020000] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_SettingsBase::OnOptionChanged ( struct FEventData ev )
{
	static UFunction* pFnOnOptionChanged = NULL;

	if ( ! pFnOnOptionChanged )
		pFnOnOptionChanged = (UFunction*) UObject::GObjObjects()->Data[ 82391 ];

	UR_GFxFrontEnd_SettingsBase_execOnOptionChanged_Parms OnOptionChanged_Parms;
	memcpy ( &OnOptionChanged_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnOptionChanged, &OnOptionChanged_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_SettingsBase.OnListChange
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_SettingsBase::OnListChange ( struct FEventData ev )
{
	static UFunction* pFnOnListChange = NULL;

	if ( ! pFnOnListChange )
		pFnOnListChange = (UFunction*) UObject::GObjObjects()->Data[ 82389 ];

	UR_GFxFrontEnd_SettingsBase_execOnListChange_Parms OnListChange_Parms;
	memcpy ( &OnListChange_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnListChange, &OnListChange_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_SettingsBase.SetList
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              List                           ( CPF_Parm )

void UR_GFxFrontEnd_SettingsBase::SetList ( class UGFxObject* List )
{
	static UFunction* pFnSetList = NULL;

	if ( ! pFnSetList )
		pFnSetList = (UFunction*) UObject::GObjObjects()->Data[ 82387 ];

	UR_GFxFrontEnd_SettingsBase_execSetList_Parms SetList_Parms;
	SetList_Parms.List = List;

	this->ProcessEvent ( pFnSetList, &SetList_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_SettingsBase.SaveState
// [0x00820002] 
// Parameters infos:

void UR_GFxFrontEnd_SettingsBase::SaveState ( )
{
	static UFunction* pFnSaveState = NULL;

	if ( ! pFnSaveState )
		pFnSaveState = (UFunction*) UObject::GObjObjects()->Data[ 82379 ];

	UR_GFxFrontEnd_SettingsBase_execSaveState_Parms SaveState_Parms;

	this->ProcessEvent ( pFnSaveState, &SaveState_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_SettingsBase.Select_Back
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_SettingsBase::Select_Back ( struct FEventData ev )
{
	static UFunction* pFnSelect_Back = NULL;

	if ( ! pFnSelect_Back )
		pFnSelect_Back = (UFunction*) UObject::GObjObjects()->Data[ 82377 ];

	UR_GFxFrontEnd_SettingsBase_execSelect_Back_Parms Select_Back_Parms;
	memcpy ( &Select_Back_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnSelect_Back, &Select_Back_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_SettingsBase.LoadDataFromStore
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_SettingsBase::LoadDataFromStore ( )
{
	static UFunction* pFnLoadDataFromStore = NULL;

	if ( ! pFnLoadDataFromStore )
		pFnLoadDataFromStore = (UFunction*) UObject::GObjObjects()->Data[ 82367 ];

	UR_GFxFrontEnd_SettingsBase_execLoadDataFromStore_Parms LoadDataFromStore_Parms;

	this->ProcessEvent ( pFnLoadDataFromStore, &LoadDataFromStore_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_SettingsBase.SetSelectedOptionSet
// [0x00020000] 
// Parameters infos:

void UR_GFxFrontEnd_SettingsBase::SetSelectedOptionSet ( )
{
	static UFunction* pFnSetSelectedOptionSet = NULL;

	if ( ! pFnSetSelectedOptionSet )
		pFnSetSelectedOptionSet = (UFunction*) UObject::GObjObjects()->Data[ 82366 ];

	UR_GFxFrontEnd_SettingsBase_execSetSelectedOptionSet_Parms SetSelectedOptionSet_Parms;

	this->ProcessEvent ( pFnSetSelectedOptionSet, &SetSelectedOptionSet_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_SettingsBase.DisableSubComponents
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDisableComponents             ( CPF_Parm )

void UR_GFxFrontEnd_SettingsBase::DisableSubComponents ( unsigned long bDisableComponents )
{
	static UFunction* pFnDisableSubComponents = NULL;

	if ( ! pFnDisableSubComponents )
		pFnDisableSubComponents = (UFunction*) UObject::GObjObjects()->Data[ 82364 ];

	UR_GFxFrontEnd_SettingsBase_execDisableSubComponents_Parms DisableSubComponents_Parms;
	DisableSubComponents_Parms.bDisableComponents = bDisableComponents;

	this->ProcessEvent ( pFnDisableSubComponents, &DisableSubComponents_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_SettingsBase.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_SettingsBase::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 82362 ];

	UR_GFxFrontEnd_SettingsBase_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_SettingsBase.OnViewActivated
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_SettingsBase::OnViewActivated ( )
{
	static UFunction* pFnOnViewActivated = NULL;

	if ( ! pFnOnViewActivated )
		pFnOnViewActivated = (UFunction*) UObject::GObjObjects()->Data[ 82361 ];

	UR_GFxFrontEnd_SettingsBase_execOnViewActivated_Parms OnViewActivated_Parms;

	this->ProcessEvent ( pFnOnViewActivated, &OnViewActivated_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_SettingsBase.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_SettingsBase::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 82360 ];

	UR_GFxFrontEnd_SettingsBase_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ServerSettings.FindControlByUTClassName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  UTUIControlClass               ( CPF_Parm )

struct FString UR_GFxFrontEnd_ServerSettings::FindControlByUTClassName ( unsigned char UTUIControlClass )
{
	static UFunction* pFnFindControlByUTClassName = NULL;

	if ( ! pFnFindControlByUTClassName )
		pFnFindControlByUTClassName = (UFunction*) UObject::GObjObjects()->Data[ 82465 ];

	UR_GFxFrontEnd_ServerSettings_execFindControlByUTClassName_Parms FindControlByUTClassName_Parms;
	FindControlByUTClassName_Parms.UTUIControlClass = UTUIControlClass;

	this->ProcessEvent ( pFnFindControlByUTClassName, &FindControlByUTClassName_Parms, NULL );

	return FindControlByUTClassName_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_ServerSettings.PopulateOptionDataProviderForIndex
// [0x00420002] 
// Parameters infos:
// int                            Index                          ( CPF_Const | CPF_Parm )
// class UGFxObject*              OutDataProvider                ( CPF_Parm | CPF_OutParm )
// struct FString                 OutDefaultValue                ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// int                            OutDefaultIndex                ( CPF_Parm | CPF_OutParm )

void UR_GFxFrontEnd_ServerSettings::PopulateOptionDataProviderForIndex ( int Index, class UGFxObject** OutDataProvider, struct FString* OutDefaultValue, int* OutDefaultIndex )
{
	static UFunction* pFnPopulateOptionDataProviderForIndex = NULL;

	if ( ! pFnPopulateOptionDataProviderForIndex )
		pFnPopulateOptionDataProviderForIndex = (UFunction*) UObject::GObjObjects()->Data[ 82455 ];

	UR_GFxFrontEnd_ServerSettings_execPopulateOptionDataProviderForIndex_Parms PopulateOptionDataProviderForIndex_Parms;
	PopulateOptionDataProviderForIndex_Parms.Index = Index;

	this->ProcessEvent ( pFnPopulateOptionDataProviderForIndex, &PopulateOptionDataProviderForIndex_Parms, NULL );

	if ( OutDataProvider )
		*OutDataProvider = PopulateOptionDataProviderForIndex_Parms.OutDataProvider;

	if ( OutDefaultValue )
		memcpy ( OutDefaultValue, &PopulateOptionDataProviderForIndex_Parms.OutDefaultValue, 0xC );

	if ( OutDefaultIndex )
		*OutDefaultIndex = PopulateOptionDataProviderForIndex_Parms.OutDefaultIndex;
};

// Function RavagedGame.R_GFxFrontEnd_ServerSettings.UpdateListDataProvider
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_ServerSettings::UpdateListDataProvider ( )
{
	static UFunction* pFnUpdateListDataProvider = NULL;

	if ( ! pFnUpdateListDataProvider )
		pFnUpdateListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 82437 ];

	UR_GFxFrontEnd_ServerSettings_execUpdateListDataProvider_Parms UpdateListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateListDataProvider, &UpdateListDataProvider_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ServerSettings.SaveState
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_ServerSettings::SaveState ( )
{
	static UFunction* pFnSaveState = NULL;

	if ( ! pFnSaveState )
		pFnSaveState = (UFunction*) UObject::GObjObjects()->Data[ 82425 ];

	UR_GFxFrontEnd_ServerSettings_execSaveState_Parms SaveState_Parms;

	this->ProcessEvent ( pFnSaveState, &SaveState_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ServerSettings.OnOptionChanged
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxFrontEnd_ServerSettings::OnOptionChanged ( struct FEventData ev )
{
	static UFunction* pFnOnOptionChanged = NULL;

	if ( ! pFnOnOptionChanged )
		pFnOnOptionChanged = (UFunction*) UObject::GObjObjects()->Data[ 82421 ];

	UR_GFxFrontEnd_ServerSettings_execOnOptionChanged_Parms OnOptionChanged_Parms;
	memcpy ( &OnOptionChanged_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnOnOptionChanged, &OnOptionChanged_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_ServerSettings.SetSelectedOptionSet
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_ServerSettings::SetSelectedOptionSet ( )
{
	static UFunction* pFnSetSelectedOptionSet = NULL;

	if ( ! pFnSetSelectedOptionSet )
		pFnSetSelectedOptionSet = (UFunction*) UObject::GObjObjects()->Data[ 82420 ];

	UR_GFxFrontEnd_ServerSettings_execSetSelectedOptionSet_Parms SetSelectedOptionSet_Parms;

	this->ProcessEvent ( pFnSetSelectedOptionSet, &SetSelectedOptionSet_Parms, NULL );
};

// Function RavagedGame.R_LeaderboardScoreRead.GetAssists
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            Player                         ( CPF_Parm )

int UR_LeaderboardScoreRead::GetAssists ( struct FUniqueNetId Player )
{
	static UFunction* pFnGetAssists = NULL;

	if ( ! pFnGetAssists )
		pFnGetAssists = (UFunction*) UObject::GObjObjects()->Data[ 83021 ];

	UR_LeaderboardScoreRead_execGetAssists_Parms GetAssists_Parms;
	memcpy ( &GetAssists_Parms.Player, &Player, 0x8 );

	this->ProcessEvent ( pFnGetAssists, &GetAssists_Parms, NULL );

	return GetAssists_Parms.ReturnValue;
};

// Function RavagedGame.R_LeaderboardScoreRead.GetKills
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            Player                         ( CPF_Parm )

int UR_LeaderboardScoreRead::GetKills ( struct FUniqueNetId Player )
{
	static UFunction* pFnGetKills = NULL;

	if ( ! pFnGetKills )
		pFnGetKills = (UFunction*) UObject::GObjObjects()->Data[ 83019 ];

	UR_LeaderboardScoreRead_execGetKills_Parms GetKills_Parms;
	memcpy ( &GetKills_Parms.Player, &Player, 0x8 );

	this->ProcessEvent ( pFnGetKills, &GetKills_Parms, NULL );

	return GetKills_Parms.ReturnValue;
};

// Function RavagedGame.R_LeaderboardScoreRead.GetDeaths
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            Player                         ( CPF_Parm )

int UR_LeaderboardScoreRead::GetDeaths ( struct FUniqueNetId Player )
{
	static UFunction* pFnGetDeaths = NULL;

	if ( ! pFnGetDeaths )
		pFnGetDeaths = (UFunction*) UObject::GObjObjects()->Data[ 83017 ];

	UR_LeaderboardScoreRead_execGetDeaths_Parms GetDeaths_Parms;
	memcpy ( &GetDeaths_Parms.Player, &Player, 0x8 );

	this->ProcessEvent ( pFnGetDeaths, &GetDeaths_Parms, NULL );

	return GetDeaths_Parms.ReturnValue;
};

// Function RavagedGame.R_LeaderboardScoreRead.GetScore
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            Player                         ( CPF_Parm )

int UR_LeaderboardScoreRead::GetScore ( struct FUniqueNetId Player )
{
	static UFunction* pFnGetScore = NULL;

	if ( ! pFnGetScore )
		pFnGetScore = (UFunction*) UObject::GObjObjects()->Data[ 83015 ];

	UR_LeaderboardScoreRead_execGetScore_Parms GetScore_Parms;
	memcpy ( &GetScore_Parms.Player, &Player, 0x8 );

	this->ProcessEvent ( pFnGetScore, &GetScore_Parms, NULL );

	return GetScore_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxFrontEnd_Upgrades.OnTopMostView
// [0x00024002] 
// Parameters infos:
// unsigned long                  bPlayOpenAnimation             ( CPF_OptionalParm | CPF_Parm )

void UR_GFxFrontEnd_Upgrades::OnTopMostView ( unsigned long bPlayOpenAnimation )
{
	static UFunction* pFnOnTopMostView = NULL;

	if ( ! pFnOnTopMostView )
		pFnOnTopMostView = (UFunction*) UObject::GObjObjects()->Data[ 83028 ];

	UR_GFxFrontEnd_Upgrades_execOnTopMostView_Parms OnTopMostView_Parms;
	OnTopMostView_Parms.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent ( pFnOnTopMostView, &OnTopMostView_Parms, NULL );
};

// Function RavagedGame.R_GFxFrontEnd_Upgrades.OnViewLoaded
// [0x00020002] 
// Parameters infos:

void UR_GFxFrontEnd_Upgrades::OnViewLoaded ( )
{
	static UFunction* pFnOnViewLoaded = NULL;

	if ( ! pFnOnViewLoaded )
		pFnOnViewLoaded = (UFunction*) UObject::GObjObjects()->Data[ 83027 ];

	UR_GFxFrontEnd_Upgrades_execOnViewLoaded_Parms OnViewLoaded_Parms;

	this->ProcessEvent ( pFnOnViewLoaded, &OnViewLoaded_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.InitKillMessageRow
// [0x00820002] 
// Parameters infos:
// class UGFxObject*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UGFxObject* UR_GFxHUD::InitKillMessageRow ( )
{
	static UFunction* pFnInitKillMessageRow = NULL;

	if ( ! pFnInitKillMessageRow )
		pFnInitKillMessageRow = (UFunction*) UObject::GObjObjects()->Data[ 83282 ];

	UR_GFxHUD_execInitKillMessageRow_Parms InitKillMessageRow_Parms;

	this->ProcessEvent ( pFnInitKillMessageRow, &InitKillMessageRow_Parms, NULL );

	return InitKillMessageRow_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxHUD.CreateMessageRow
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Type                           ( CPF_Parm | CPF_NeedCtorLink )

class UGFxObject* UR_GFxHUD::CreateMessageRow ( struct FString Type )
{
	static UFunction* pFnCreateMessageRow = NULL;

	if ( ! pFnCreateMessageRow )
		pFnCreateMessageRow = (UFunction*) UObject::GObjObjects()->Data[ 83279 ];

	UR_GFxHUD_execCreateMessageRow_Parms CreateMessageRow_Parms;
	memcpy ( &CreateMessageRow_Parms.Type, &Type, 0xC );

	this->ProcessEvent ( pFnCreateMessageRow, &CreateMessageRow_Parms, NULL );

	return CreateMessageRow_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxHUD.ShowKillMessage
// [0x00820002] 
// Parameters infos:
// struct FString                 Type                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bTKill                         ( CPF_Parm )

void UR_GFxHUD::ShowKillMessage ( struct FString Type, struct FString msg, unsigned long bTKill )
{
	static UFunction* pFnShowKillMessage = NULL;

	if ( ! pFnShowKillMessage )
		pFnShowKillMessage = (UFunction*) UObject::GObjObjects()->Data[ 83272 ];

	UR_GFxHUD_execShowKillMessage_Parms ShowKillMessage_Parms;
	memcpy ( &ShowKillMessage_Parms.Type, &Type, 0xC );
	memcpy ( &ShowKillMessage_Parms.msg, &msg, 0xC );
	ShowKillMessage_Parms.bTKill = bTKill;

	this->ProcessEvent ( pFnShowKillMessage, &ShowKillMessage_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.AddKillMessage
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Killer                         ( CPF_Parm )
// class APlayerReplicationInfo*  Killed                         ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// class UClass*                  InMessageClass                 ( CPF_Parm )

void UR_GFxHUD::AddKillMessage ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Killed, struct FString Message, class UClass* InMessageClass )
{
	static UFunction* pFnAddKillMessage = NULL;

	if ( ! pFnAddKillMessage )
		pFnAddKillMessage = (UFunction*) UObject::GObjObjects()->Data[ 83267 ];

	UR_GFxHUD_execAddKillMessage_Parms AddKillMessage_Parms;
	AddKillMessage_Parms.Killer = Killer;
	AddKillMessage_Parms.Killed = Killed;
	memcpy ( &AddKillMessage_Parms.Message, &Message, 0xC );
	AddKillMessage_Parms.InMessageClass = InMessageClass;

	this->ProcessEvent ( pFnAddKillMessage, &AddKillMessage_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.GetRank
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

struct FString UR_GFxHUD::GetRank ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnGetRank = NULL;

	if ( ! pFnGetRank )
		pFnGetRank = (UFunction*) UObject::GObjObjects()->Data[ 83262 ];

	UR_GFxHUD_execGetRank_Parms GetRank_Parms;
	GetRank_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetRank, &GetRank_Parms, NULL );

	return GetRank_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxHUD.SetMotD
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxHUD::SetMotD ( struct FString Text )
{
	static UFunction* pFnSetMotD = NULL;

	if ( ! pFnSetMotD )
		pFnSetMotD = (UFunction*) UObject::GObjObjects()->Data[ 83260 ];

	UR_GFxHUD_execSetMotD_Parms SetMotD_Parms;
	memcpy ( &SetMotD_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnSetMotD, &SetMotD_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.SetReadyText
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxHUD::SetReadyText ( struct FString Text )
{
	static UFunction* pFnSetReadyText = NULL;

	if ( ! pFnSetReadyText )
		pFnSetReadyText = (UFunction*) UObject::GObjObjects()->Data[ 83258 ];

	UR_GFxHUD_execSetReadyText_Parms SetReadyText_Parms;
	memcpy ( &SetReadyText_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnSetReadyText, &SetReadyText_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.SetCountDownText
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxHUD::SetCountDownText ( struct FString Text )
{
	static UFunction* pFnSetCountDownText = NULL;

	if ( ! pFnSetCountDownText )
		pFnSetCountDownText = (UFunction*) UObject::GObjObjects()->Data[ 83256 ];

	UR_GFxHUD_execSetCountDownText_Parms SetCountDownText_Parms;
	memcpy ( &SetCountDownText_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnSetCountDownText, &SetCountDownText_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.SetSkillzText
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxHUD::SetSkillzText ( struct FString Text )
{
	static UFunction* pFnSetSkillzText = NULL;

	if ( ! pFnSetSkillzText )
		pFnSetSkillzText = (UFunction*) UObject::GObjObjects()->Data[ 83254 ];

	UR_GFxHUD_execSetSkillzText_Parms SetSkillzText_Parms;
	memcpy ( &SetSkillzText_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnSetSkillzText, &SetSkillzText_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.SetToolTipText
// [0x00020002] 
// Parameters infos:
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxHUD::SetToolTipText ( struct FString Message )
{
	static UFunction* pFnSetToolTipText = NULL;

	if ( ! pFnSetToolTipText )
		pFnSetToolTipText = (UFunction*) UObject::GObjObjects()->Data[ 83252 ];

	UR_GFxHUD_execSetToolTipText_Parms SetToolTipText_Parms;
	memcpy ( &SetToolTipText_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnSetToolTipText, &SetToolTipText_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.SetCenterText
// [0x00020002] 
// Parameters infos:
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxHUD::SetCenterText ( struct FString Message )
{
	static UFunction* pFnSetCenterText = NULL;

	if ( ! pFnSetCenterText )
		pFnSetCenterText = (UFunction*) UObject::GObjObjects()->Data[ 83250 ];

	UR_GFxHUD_execSetCenterText_Parms SetCenterText_Parms;
	memcpy ( &SetCenterText_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnSetCenterText, &SetCenterText_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.ShowMultiKill
// [0x00020002] 
// Parameters infos:
// int                            N                              ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxHUD::ShowMultiKill ( int N, struct FString msg )
{
	static UFunction* pFnShowMultiKill = NULL;

	if ( ! pFnShowMultiKill )
		pFnShowMultiKill = (UFunction*) UObject::GObjObjects()->Data[ 83247 ];

	UR_GFxHUD_execShowMultiKill_Parms ShowMultiKill_Parms;
	ShowMultiKill_Parms.N = N;
	memcpy ( &ShowMultiKill_Parms.msg, &msg, 0xC );

	this->ProcessEvent ( pFnShowMultiKill, &ShowMultiKill_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.DisplayHit
// [0x00820002] 
// Parameters infos:
// struct FVector                 HitDir                         ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void UR_GFxHUD::DisplayHit ( struct FVector HitDir, int Damage, class UClass* DamageType )
{
	static UFunction* pFnDisplayHit = NULL;

	if ( ! pFnDisplayHit )
		pFnDisplayHit = (UFunction*) UObject::GObjObjects()->Data[ 83234 ];

	UR_GFxHUD_execDisplayHit_Parms DisplayHit_Parms;
	memcpy ( &DisplayHit_Parms.HitDir, &HitDir, 0xC );
	DisplayHit_Parms.Damage = Damage;
	DisplayHit_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnDisplayHit, &DisplayHit_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.MinimapZoomIn
// [0x00020002] 
// Parameters infos:

void UR_GFxHUD::MinimapZoomIn ( )
{
	static UFunction* pFnMinimapZoomIn = NULL;

	if ( ! pFnMinimapZoomIn )
		pFnMinimapZoomIn = (UFunction*) UObject::GObjObjects()->Data[ 83233 ];

	UR_GFxHUD_execMinimapZoomIn_Parms MinimapZoomIn_Parms;

	this->ProcessEvent ( pFnMinimapZoomIn, &MinimapZoomIn_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.MinimapZoomOut
// [0x00020002] 
// Parameters infos:

void UR_GFxHUD::MinimapZoomOut ( )
{
	static UFunction* pFnMinimapZoomOut = NULL;

	if ( ! pFnMinimapZoomOut )
		pFnMinimapZoomOut = (UFunction*) UObject::GObjObjects()->Data[ 83232 ];

	UR_GFxHUD_execMinimapZoomOut_Parms MinimapZoomOut_Parms;

	this->ProcessEvent ( pFnMinimapZoomOut, &MinimapZoomOut_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.ToggleCrosshair
// [0x00020002] 
// Parameters infos:
// unsigned long                  bToggle                        ( CPF_Parm )

void UR_GFxHUD::ToggleCrosshair ( unsigned long bToggle )
{
	static UFunction* pFnToggleCrosshair = NULL;

	if ( ! pFnToggleCrosshair )
		pFnToggleCrosshair = (UFunction*) UObject::GObjObjects()->Data[ 83230 ];

	UR_GFxHUD_execToggleCrosshair_Parms ToggleCrosshair_Parms;
	ToggleCrosshair_Parms.bToggle = bToggle;

	this->ProcessEvent ( pFnToggleCrosshair, &ToggleCrosshair_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.ResetAmmoDisplay
// [0x00020002] 
// Parameters infos:

void UR_GFxHUD::ResetAmmoDisplay ( )
{
	static UFunction* pFnResetAmmoDisplay = NULL;

	if ( ! pFnResetAmmoDisplay )
		pFnResetAmmoDisplay = (UFunction*) UObject::GObjObjects()->Data[ 83229 ];

	UR_GFxHUD_execResetAmmoDisplay_Parms ResetAmmoDisplay_Parms;

	this->ProcessEvent ( pFnResetAmmoDisplay, &ResetAmmoDisplay_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.UpdateVehicleMagCount
// [0x00020002] 
// Parameters infos:
// class AR_VehicleWeapon*        VehicleWeapon                  ( CPF_Parm )

void UR_GFxHUD::UpdateVehicleMagCount ( class AR_VehicleWeapon* VehicleWeapon )
{
	static UFunction* pFnUpdateVehicleMagCount = NULL;

	if ( ! pFnUpdateVehicleMagCount )
		pFnUpdateVehicleMagCount = (UFunction*) UObject::GObjObjects()->Data[ 83222 ];

	UR_GFxHUD_execUpdateVehicleMagCount_Parms UpdateVehicleMagCount_Parms;
	UpdateVehicleMagCount_Parms.VehicleWeapon = VehicleWeapon;

	this->ProcessEvent ( pFnUpdateVehicleMagCount, &UpdateVehicleMagCount_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.UpdateVehicleAmmoCount
// [0x00020002] 
// Parameters infos:
// class AR_VehicleWeapon*        VehicleWeapon                  ( CPF_Parm )

void UR_GFxHUD::UpdateVehicleAmmoCount ( class AR_VehicleWeapon* VehicleWeapon )
{
	static UFunction* pFnUpdateVehicleAmmoCount = NULL;

	if ( ! pFnUpdateVehicleAmmoCount )
		pFnUpdateVehicleAmmoCount = (UFunction*) UObject::GObjObjects()->Data[ 83217 ];

	UR_GFxHUD_execUpdateVehicleAmmoCount_Parms UpdateVehicleAmmoCount_Parms;
	UpdateVehicleAmmoCount_Parms.VehicleWeapon = VehicleWeapon;

	this->ProcessEvent ( pFnUpdateVehicleAmmoCount, &UpdateVehicleAmmoCount_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.ShowSecondaryAmmo
// [0x00020002] 
// Parameters infos:
// unsigned long                  bShow                          ( CPF_Parm )

void UR_GFxHUD::ShowSecondaryAmmo ( unsigned long bShow )
{
	static UFunction* pFnShowSecondaryAmmo = NULL;

	if ( ! pFnShowSecondaryAmmo )
		pFnShowSecondaryAmmo = (UFunction*) UObject::GObjObjects()->Data[ 83215 ];

	UR_GFxHUD_execShowSecondaryAmmo_Parms ShowSecondaryAmmo_Parms;
	ShowSecondaryAmmo_Parms.bShow = bShow;

	this->ProcessEvent ( pFnShowSecondaryAmmo, &ShowSecondaryAmmo_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.ShowPrimaryAmmo
// [0x00020002] 
// Parameters infos:
// unsigned long                  bShow                          ( CPF_Parm )

void UR_GFxHUD::ShowPrimaryAmmo ( unsigned long bShow )
{
	static UFunction* pFnShowPrimaryAmmo = NULL;

	if ( ! pFnShowPrimaryAmmo )
		pFnShowPrimaryAmmo = (UFunction*) UObject::GObjObjects()->Data[ 83213 ];

	UR_GFxHUD_execShowPrimaryAmmo_Parms ShowPrimaryAmmo_Parms;
	ShowPrimaryAmmo_Parms.bShow = bShow;

	this->ProcessEvent ( pFnShowPrimaryAmmo, &ShowPrimaryAmmo_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.ShowPlayerHealth
// [0x00020002] 
// Parameters infos:
// unsigned long                  bShow                          ( CPF_Parm )

void UR_GFxHUD::ShowPlayerHealth ( unsigned long bShow )
{
	static UFunction* pFnShowPlayerHealth = NULL;

	if ( ! pFnShowPlayerHealth )
		pFnShowPlayerHealth = (UFunction*) UObject::GObjObjects()->Data[ 83211 ];

	UR_GFxHUD_execShowPlayerHealth_Parms ShowPlayerHealth_Parms;
	ShowPlayerHealth_Parms.bShow = bShow;

	this->ProcessEvent ( pFnShowPlayerHealth, &ShowPlayerHealth_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.UpdateVehicleHealthBar
// [0x00820002] 
// Parameters infos:
// class AUTVehicle*              UTV                            ( CPF_Parm )

void UR_GFxHUD::UpdateVehicleHealthBar ( class AUTVehicle* UTV )
{
	static UFunction* pFnUpdateVehicleHealthBar = NULL;

	if ( ! pFnUpdateVehicleHealthBar )
		pFnUpdateVehicleHealthBar = (UFunction*) UObject::GObjObjects()->Data[ 83208 ];

	UR_GFxHUD_execUpdateVehicleHealthBar_Parms UpdateVehicleHealthBar_Parms;
	UpdateVehicleHealthBar_Parms.UTV = UTV;

	this->ProcessEvent ( pFnUpdateVehicleHealthBar, &UpdateVehicleHealthBar_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.DrawVehicleOccupants
// [0x00020002] 
// Parameters infos:
// class AR_Vehicle*              rVeh                           ( CPF_Parm )

void UR_GFxHUD::DrawVehicleOccupants ( class AR_Vehicle* rVeh )
{
	static UFunction* pFnDrawVehicleOccupants = NULL;

	if ( ! pFnDrawVehicleOccupants )
		pFnDrawVehicleOccupants = (UFunction*) UObject::GObjObjects()->Data[ 83203 ];

	UR_GFxHUD_execDrawVehicleOccupants_Parms DrawVehicleOccupants_Parms;
	DrawVehicleOccupants_Parms.rVeh = rVeh;

	this->ProcessEvent ( pFnDrawVehicleOccupants, &DrawVehicleOccupants_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.UpdateCaptureIndicator
// [0x00020002] 
// Parameters infos:
// int                            Team                           ( CPF_Parm )
// float                          Amount                         ( CPF_Parm )

void UR_GFxHUD::UpdateCaptureIndicator ( int Team, float Amount )
{
	static UFunction* pFnUpdateCaptureIndicator = NULL;

	if ( ! pFnUpdateCaptureIndicator )
		pFnUpdateCaptureIndicator = (UFunction*) UObject::GObjObjects()->Data[ 83200 ];

	UR_GFxHUD_execUpdateCaptureIndicator_Parms UpdateCaptureIndicator_Parms;
	UpdateCaptureIndicator_Parms.Team = Team;
	UpdateCaptureIndicator_Parms.Amount = Amount;

	this->ProcessEvent ( pFnUpdateCaptureIndicator, &UpdateCaptureIndicator_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.TickHud
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UR_GFxHUD::TickHud ( float DeltaTime )
{
	static UFunction* pFnTickHud = NULL;

	if ( ! pFnTickHud )
		pFnTickHud = (UFunction*) UObject::GObjObjects()->Data[ 83179 ];

	UR_GFxHUD_execTickHud_Parms TickHud_Parms;
	TickHud_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTickHud, &TickHud_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.UpdateGameHUD
// [0x00020002] 
// Parameters infos:
// class AUTPlayerReplicationInfo* PRI                            ( CPF_Parm )

void UR_GFxHUD::UpdateGameHUD ( class AUTPlayerReplicationInfo* PRI )
{
	static UFunction* pFnUpdateGameHUD = NULL;

	if ( ! pFnUpdateGameHUD )
		pFnUpdateGameHUD = (UFunction*) UObject::GObjObjects()->Data[ 83174 ];

	UR_GFxHUD_execUpdateGameHUD_Parms UpdateGameHUD_Parms;
	UpdateGameHUD_Parms.PRI = PRI;

	this->ProcessEvent ( pFnUpdateGameHUD, &UpdateGameHUD_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.RemoveMessage
// [0x00020000] 
// Parameters infos:

void UR_GFxHUD::RemoveMessage ( )
{
	static UFunction* pFnRemoveMessage = NULL;

	if ( ! pFnRemoveMessage )
		pFnRemoveMessage = (UFunction*) UObject::GObjObjects()->Data[ 83173 ];

	UR_GFxHUD_execRemoveMessage_Parms RemoveMessage_Parms;

	this->ProcessEvent ( pFnRemoveMessage, &RemoveMessage_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.ClearStats
// [0x00824002] 
// Parameters infos:
// unsigned long                  clearScores                    ( CPF_OptionalParm | CPF_Parm )

void UR_GFxHUD::ClearStats ( unsigned long clearScores )
{
	static UFunction* pFnClearStats = NULL;

	if ( ! pFnClearStats )
		pFnClearStats = (UFunction*) UObject::GObjObjects()->Data[ 83170 ];

	UR_GFxHUD_execClearStats_Parms ClearStats_Parms;
	ClearStats_Parms.clearScores = clearScores;

	this->ProcessEvent ( pFnClearStats, &ClearStats_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.FormatTime
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Seconds                        ( CPF_Parm )

struct FString UR_GFxHUD::FormatTime ( int Seconds )
{
	static UFunction* pFnFormatTime = NULL;

	if ( ! pFnFormatTime )
		pFnFormatTime = (UFunction*) UObject::GObjObjects()->Data[ 83164 ];

	UR_GFxHUD_execFormatTime_Parms FormatTime_Parms;
	FormatTime_Parms.Seconds = Seconds;

	this->ProcessEvent ( pFnFormatTime, &FormatTime_Parms, NULL );

	return FormatTime_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxHUD.Init
// [0x00024002] 
// Parameters infos:
// class ULocalPlayer*            Player                         ( CPF_OptionalParm | CPF_Parm )

void UR_GFxHUD::Init ( class ULocalPlayer* Player )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 83161 ];

	UR_GFxHUD_execInit_Parms Init_Parms;
	Init_Parms.Player = Player;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.FlagSelectTest
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxHUD::FlagSelectTest ( struct FEventData ev )
{
	static UFunction* pFnFlagSelectTest = NULL;

	if ( ! pFnFlagSelectTest )
		pFnFlagSelectTest = (UFunction*) UObject::GObjObjects()->Data[ 83157 ];

	UR_GFxHUD_execFlagSelectTest_Parms FlagSelectTest_Parms;
	memcpy ( &FlagSelectTest_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnFlagSelectTest, &FlagSelectTest_Parms, NULL );
};

// Function RavagedGame.R_GFxHUD.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxHUD::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 83151 ];

	UR_GFxHUD_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_VWeap_Seat_Horn.ServerPlayHorn
// [0x002200C2] 
// Parameters infos:

void AR_VWeap_Seat_Horn::ServerPlayHorn ( )
{
	static UFunction* pFnServerPlayHorn = NULL;

	if ( ! pFnServerPlayHorn )
		pFnServerPlayHorn = (UFunction*) UObject::GObjObjects()->Data[ 88112 ];

	AR_VWeap_Seat_Horn_execServerPlayHorn_Parms ServerPlayHorn_Parms;

	this->ProcessEvent ( pFnServerPlayHorn, &ServerPlayHorn_Parms, NULL );
};

// Function RavagedGame.R_VWeap_Seat_Horn.ServerSetMouseSteering
// [0x002200C2] 
// Parameters infos:
// unsigned long                  bMouseSteering                 ( CPF_Parm )

void AR_VWeap_Seat_Horn::ServerSetMouseSteering ( unsigned long bMouseSteering )
{
	static UFunction* pFnServerSetMouseSteering = NULL;

	if ( ! pFnServerSetMouseSteering )
		pFnServerSetMouseSteering = (UFunction*) UObject::GObjObjects()->Data[ 88110 ];

	AR_VWeap_Seat_Horn_execServerSetMouseSteering_Parms ServerSetMouseSteering_Parms;
	ServerSetMouseSteering_Parms.bMouseSteering = bMouseSteering;

	this->ProcessEvent ( pFnServerSetMouseSteering, &ServerSetMouseSteering_Parms, NULL );
};

// Function RavagedGame.R_VWeap_Seat_Horn.StartFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_VWeap_Seat_Horn::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 88107 ];

	AR_VWeap_Seat_Horn_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function RavagedGame.R_VWeap_Seat_Horn.EndFire
// [0x00020100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_VWeap_Seat_Horn::EndFire ( unsigned char FireModeNum )
{
	static UFunction* pFnEndFire = NULL;

	if ( ! pFnEndFire )
		pFnEndFire = (UFunction*) UObject::GObjObjects()->Data[ 88105 ];

	AR_VWeap_Seat_Horn_execEndFire_Parms EndFire_Parms;
	EndFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnEndFire, &EndFire_Parms, NULL );
};

// Function RavagedGame.R_VWeap_Seat_Horn.DrawWeaponCrosshair
// [0x00020100] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )

void AR_VWeap_Seat_Horn::DrawWeaponCrosshair ( class AHUD* HUD )
{
	static UFunction* pFnDrawWeaponCrosshair = NULL;

	if ( ! pFnDrawWeaponCrosshair )
		pFnDrawWeaponCrosshair = (UFunction*) UObject::GObjObjects()->Data[ 88103 ];

	AR_VWeap_Seat_Horn_execDrawWeaponCrosshair_Parms DrawWeaponCrosshair_Parms;
	DrawWeaponCrosshair_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDrawWeaponCrosshair, &DrawWeaponCrosshair_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.UpdateSelectedWeaponImage
// [0x00020002] 
// Parameters infos:
// int                            Idx                            ( CPF_Parm )

void UR_GFxSpawnMenu::UpdateSelectedWeaponImage ( int Idx )
{
	static UFunction* pFnUpdateSelectedWeaponImage = NULL;

	if ( ! pFnUpdateSelectedWeaponImage )
		pFnUpdateSelectedWeaponImage = (UFunction*) UObject::GObjObjects()->Data[ 83544 ];

	UR_GFxSpawnMenu_execUpdateSelectedWeaponImage_Parms UpdateSelectedWeaponImage_Parms;
	UpdateSelectedWeaponImage_Parms.Idx = Idx;

	this->ProcessEvent ( pFnUpdateSelectedWeaponImage, &UpdateSelectedWeaponImage_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.UpdateSelectedWeapon
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::UpdateSelectedWeapon ( struct FEventData ev )
{
	static UFunction* pFnUpdateSelectedWeapon = NULL;

	if ( ! pFnUpdateSelectedWeapon )
		pFnUpdateSelectedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 83542 ];

	UR_GFxSpawnMenu_execUpdateSelectedWeapon_Parms UpdateSelectedWeapon_Parms;
	memcpy ( &UpdateSelectedWeapon_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnUpdateSelectedWeapon, &UpdateSelectedWeapon_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.HideWeaponList
// [0x00020002] 
// Parameters infos:

void UR_GFxSpawnMenu::HideWeaponList ( )
{
	static UFunction* pFnHideWeaponList = NULL;

	if ( ! pFnHideWeaponList )
		pFnHideWeaponList = (UFunction*) UObject::GObjObjects()->Data[ 83541 ];

	UR_GFxSpawnMenu_execHideWeaponList_Parms HideWeaponList_Parms;

	this->ProcessEvent ( pFnHideWeaponList, &HideWeaponList_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.ShowWeaponsList
// [0x00020002] 
// Parameters infos:
// TArray< class UClass* >        rWeapClasses                   ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::ShowWeaponsList ( TArray< class UClass* > rWeapClasses )
{
	static UFunction* pFnShowWeaponsList = NULL;

	if ( ! pFnShowWeaponsList )
		pFnShowWeaponsList = (UFunction*) UObject::GObjObjects()->Data[ 83533 ];

	UR_GFxSpawnMenu_execShowWeaponsList_Parms ShowWeaponsList_Parms;
	memcpy ( &ShowWeaponsList_Parms.rWeapClasses, &rWeapClasses, 0xC );

	this->ProcessEvent ( pFnShowWeaponsList, &ShowWeaponsList_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.ShowThrowableWeaponList
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::ShowThrowableWeaponList ( struct FEventData ev )
{
	static UFunction* pFnShowThrowableWeaponList = NULL;

	if ( ! pFnShowThrowableWeaponList )
		pFnShowThrowableWeaponList = (UFunction*) UObject::GObjObjects()->Data[ 83531 ];

	UR_GFxSpawnMenu_execShowThrowableWeaponList_Parms ShowThrowableWeaponList_Parms;
	memcpy ( &ShowThrowableWeaponList_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnShowThrowableWeaponList, &ShowThrowableWeaponList_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.ShowMeleeWeaponList
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::ShowMeleeWeaponList ( struct FEventData ev )
{
	static UFunction* pFnShowMeleeWeaponList = NULL;

	if ( ! pFnShowMeleeWeaponList )
		pFnShowMeleeWeaponList = (UFunction*) UObject::GObjObjects()->Data[ 83529 ];

	UR_GFxSpawnMenu_execShowMeleeWeaponList_Parms ShowMeleeWeaponList_Parms;
	memcpy ( &ShowMeleeWeaponList_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnShowMeleeWeaponList, &ShowMeleeWeaponList_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.ShowSecondaryWeaponList
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::ShowSecondaryWeaponList ( struct FEventData ev )
{
	static UFunction* pFnShowSecondaryWeaponList = NULL;

	if ( ! pFnShowSecondaryWeaponList )
		pFnShowSecondaryWeaponList = (UFunction*) UObject::GObjObjects()->Data[ 83527 ];

	UR_GFxSpawnMenu_execShowSecondaryWeaponList_Parms ShowSecondaryWeaponList_Parms;
	memcpy ( &ShowSecondaryWeaponList_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnShowSecondaryWeaponList, &ShowSecondaryWeaponList_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.ShowPrimaryWeaponList
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::ShowPrimaryWeaponList ( struct FEventData ev )
{
	static UFunction* pFnShowPrimaryWeaponList = NULL;

	if ( ! pFnShowPrimaryWeaponList )
		pFnShowPrimaryWeaponList = (UFunction*) UObject::GObjObjects()->Data[ 83525 ];

	UR_GFxSpawnMenu_execShowPrimaryWeaponList_Parms ShowPrimaryWeaponList_Parms;
	memcpy ( &ShowPrimaryWeaponList_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnShowPrimaryWeaponList, &ShowPrimaryWeaponList_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.SpawnWidgetPressed
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::SpawnWidgetPressed ( struct FEventData ev )
{
	static UFunction* pFnSpawnWidgetPressed = NULL;

	if ( ! pFnSpawnWidgetPressed )
		pFnSpawnWidgetPressed = (UFunction*) UObject::GObjObjects()->Data[ 83521 ];

	UR_GFxSpawnMenu_execSpawnWidgetPressed_Parms SpawnWidgetPressed_Parms;
	memcpy ( &SpawnWidgetPressed_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnSpawnWidgetPressed, &SpawnWidgetPressed_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.registerSpawnMapView
// [0x00020002] 
// Parameters infos:
// class UR_GFxSpawnMenuMap*      MC                             ( CPF_Parm )
// float                          R                              ( CPF_Parm )

void UR_GFxSpawnMenu::registerSpawnMapView ( class UR_GFxSpawnMenuMap* MC, float R )
{
	static UFunction* pFnregisterSpawnMapView = NULL;

	if ( ! pFnregisterSpawnMapView )
		pFnregisterSpawnMapView = (UFunction*) UObject::GObjObjects()->Data[ 83518 ];

	UR_GFxSpawnMenu_execregisterSpawnMapView_Parms registerSpawnMapView_Parms;
	registerSpawnMapView_Parms.MC = MC;
	registerSpawnMapView_Parms.R = R;

	this->ProcessEvent ( pFnregisterSpawnMapView, &registerSpawnMapView_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.QuitPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::QuitPress ( struct FEventData ev )
{
	static UFunction* pFnQuitPress = NULL;

	if ( ! pFnQuitPress )
		pFnQuitPress = (UFunction*) UObject::GObjObjects()->Data[ 83516 ];

	UR_GFxSpawnMenu_execQuitPress_Parms QuitPress_Parms;
	memcpy ( &QuitPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnQuitPress, &QuitPress_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.StatsPress
// [0x00020000] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::StatsPress ( struct FEventData ev )
{
	static UFunction* pFnStatsPress = NULL;

	if ( ! pFnStatsPress )
		pFnStatsPress = (UFunction*) UObject::GObjObjects()->Data[ 83514 ];

	UR_GFxSpawnMenu_execStatsPress_Parms StatsPress_Parms;
	memcpy ( &StatsPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnStatsPress, &StatsPress_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.LoadoutPress
// [0x00020000] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::LoadoutPress ( struct FEventData ev )
{
	static UFunction* pFnLoadoutPress = NULL;

	if ( ! pFnLoadoutPress )
		pFnLoadoutPress = (UFunction*) UObject::GObjObjects()->Data[ 83512 ];

	UR_GFxSpawnMenu_execLoadoutPress_Parms LoadoutPress_Parms;
	memcpy ( &LoadoutPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnLoadoutPress, &LoadoutPress_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.MapPress
// [0x00020000] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::MapPress ( struct FEventData ev )
{
	static UFunction* pFnMapPress = NULL;

	if ( ! pFnMapPress )
		pFnMapPress = (UFunction*) UObject::GObjObjects()->Data[ 83510 ];

	UR_GFxSpawnMenu_execMapPress_Parms MapPress_Parms;
	memcpy ( &MapPress_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnMapPress, &MapPress_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.AddCaptureKeys
// [0x00020002] 
// Parameters infos:

void UR_GFxSpawnMenu::AddCaptureKeys ( )
{
	static UFunction* pFnAddCaptureKeys = NULL;

	if ( ! pFnAddCaptureKeys )
		pFnAddCaptureKeys = (UFunction*) UObject::GObjObjects()->Data[ 83509 ];

	UR_GFxSpawnMenu_execAddCaptureKeys_Parms AddCaptureKeys_Parms;

	this->ProcessEvent ( pFnAddCaptureKeys, &AddCaptureKeys_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.toggleSpawnMenu
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::toggleSpawnMenu ( struct FEventData ev )
{
	static UFunction* pFntoggleSpawnMenu = NULL;

	if ( ! pFntoggleSpawnMenu )
		pFntoggleSpawnMenu = (UFunction*) UObject::GObjObjects()->Data[ 83507 ];

	UR_GFxSpawnMenu_exectoggleSpawnMenu_Parms toggleSpawnMenu_Parms;
	memcpy ( &toggleSpawnMenu_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFntoggleSpawnMenu, &toggleSpawnMenu_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.SetSpawnMenuVisibility
// [0x00020002] 
// Parameters infos:
// unsigned long                  bIsVis                         ( CPF_Parm )

void UR_GFxSpawnMenu::SetSpawnMenuVisibility ( unsigned long bIsVis )
{
	static UFunction* pFnSetSpawnMenuVisibility = NULL;

	if ( ! pFnSetSpawnMenuVisibility )
		pFnSetSpawnMenuVisibility = (UFunction*) UObject::GObjObjects()->Data[ 83505 ];

	UR_GFxSpawnMenu_execSetSpawnMenuVisibility_Parms SetSpawnMenuVisibility_Parms;
	SetSpawnMenuVisibility_Parms.bIsVis = bIsVis;

	this->ProcessEvent ( pFnSetSpawnMenuVisibility, &SetSpawnMenuVisibility_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.ASShowCursor
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bShowCursor                    ( CPF_Parm )

void UR_GFxSpawnMenu::ASShowCursor ( unsigned long bShowCursor )
{
	static UFunction* pFnASShowCursor = NULL;

	if ( ! pFnASShowCursor )
		pFnASShowCursor = (UFunction*) UObject::GObjObjects()->Data[ 83503 ];

	UR_GFxSpawnMenu_execASShowCursor_Parms ASShowCursor_Parms;
	ASShowCursor_Parms.bShowCursor = bShowCursor;

	this->ProcessEvent ( pFnASShowCursor, &ASShowCursor_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.ASDebug
// [0x00020102] 
// Parameters infos:
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::ASDebug ( struct FString Message )
{
	static UFunction* pFnASDebug = NULL;

	if ( ! pFnASDebug )
		pFnASDebug = (UFunction*) UObject::GObjObjects()->Data[ 83501 ];

	UR_GFxSpawnMenu_execASDebug_Parms ASDebug_Parms;
	memcpy ( &ASDebug_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnASDebug, &ASDebug_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.FinalizeChangeClass
// [0x00020102] 
// Parameters infos:

void UR_GFxSpawnMenu::FinalizeChangeClass ( )
{
	static UFunction* pFnFinalizeChangeClass = NULL;

	if ( ! pFnFinalizeChangeClass )
		pFnFinalizeChangeClass = (UFunction*) UObject::GObjObjects()->Data[ 83499 ];

	UR_GFxSpawnMenu_execFinalizeChangeClass_Parms FinalizeChangeClass_Parms;

	this->ProcessEvent ( pFnFinalizeChangeClass, &FinalizeChangeClass_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.SaveCurrentLoadoutSelection
// [0x00020102] 
// Parameters infos:
// int                            curTeam                        ( CPF_Parm )
// int                            curClass                       ( CPF_Parm )

void UR_GFxSpawnMenu::SaveCurrentLoadoutSelection ( int curTeam, int curClass )
{
	static UFunction* pFnSaveCurrentLoadoutSelection = NULL;

	if ( ! pFnSaveCurrentLoadoutSelection )
		pFnSaveCurrentLoadoutSelection = (UFunction*) UObject::GObjObjects()->Data[ 83496 ];

	UR_GFxSpawnMenu_execSaveCurrentLoadoutSelection_Parms SaveCurrentLoadoutSelection_Parms;
	SaveCurrentLoadoutSelection_Parms.curTeam = curTeam;
	SaveCurrentLoadoutSelection_Parms.curClass = curClass;

	this->ProcessEvent ( pFnSaveCurrentLoadoutSelection, &SaveCurrentLoadoutSelection_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.changeViewBtnPressed
// [0x00020100] 
// Parameters infos:

void UR_GFxSpawnMenu::changeViewBtnPressed ( )
{
	static UFunction* pFnchangeViewBtnPressed = NULL;

	if ( ! pFnchangeViewBtnPressed )
		pFnchangeViewBtnPressed = (UFunction*) UObject::GObjObjects()->Data[ 83495 ];

	UR_GFxSpawnMenu_execchangeViewBtnPressed_Parms changeViewBtnPressed_Parms;

	this->ProcessEvent ( pFnchangeViewBtnPressed, &changeViewBtnPressed_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.SpawnMenuMinimized
// [0x00020100] 
// Parameters infos:
// unsigned long                  bIsMin                         ( CPF_Parm )

void UR_GFxSpawnMenu::SpawnMenuMinimized ( unsigned long bIsMin )
{
	static UFunction* pFnSpawnMenuMinimized = NULL;

	if ( ! pFnSpawnMenuMinimized )
		pFnSpawnMenuMinimized = (UFunction*) UObject::GObjObjects()->Data[ 83493 ];

	UR_GFxSpawnMenu_execSpawnMenuMinimized_Parms SpawnMenuMinimized_Parms;
	SpawnMenuMinimized_Parms.bIsMin = bIsMin;

	this->ProcessEvent ( pFnSpawnMenuMinimized, &SpawnMenuMinimized_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.nextObjectiveBtnPressed
// [0x00020102] 
// Parameters infos:

void UR_GFxSpawnMenu::nextObjectiveBtnPressed ( )
{
	static UFunction* pFnnextObjectiveBtnPressed = NULL;

	if ( ! pFnnextObjectiveBtnPressed )
		pFnnextObjectiveBtnPressed = (UFunction*) UObject::GObjObjects()->Data[ 83492 ];

	UR_GFxSpawnMenu_execnextObjectiveBtnPressed_Parms nextObjectiveBtnPressed_Parms;

	this->ProcessEvent ( pFnnextObjectiveBtnPressed, &nextObjectiveBtnPressed_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.spawnAtBaseBtnPressed
// [0x00020100] 
// Parameters infos:

void UR_GFxSpawnMenu::spawnAtBaseBtnPressed ( )
{
	static UFunction* pFnspawnAtBaseBtnPressed = NULL;

	if ( ! pFnspawnAtBaseBtnPressed )
		pFnspawnAtBaseBtnPressed = (UFunction*) UObject::GObjObjects()->Data[ 83491 ];

	UR_GFxSpawnMenu_execspawnAtBaseBtnPressed_Parms spawnAtBaseBtnPressed_Parms;

	this->ProcessEvent ( pFnspawnAtBaseBtnPressed, &spawnAtBaseBtnPressed_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.spawnUpFrontBtnPressed
// [0x00020100] 
// Parameters infos:

void UR_GFxSpawnMenu::spawnUpFrontBtnPressed ( )
{
	static UFunction* pFnspawnUpFrontBtnPressed = NULL;

	if ( ! pFnspawnUpFrontBtnPressed )
		pFnspawnUpFrontBtnPressed = (UFunction*) UObject::GObjObjects()->Data[ 83490 ];

	UR_GFxSpawnMenu_execspawnUpFrontBtnPressed_Parms spawnUpFrontBtnPressed_Parms;

	this->ProcessEvent ( pFnspawnUpFrontBtnPressed, &spawnUpFrontBtnPressed_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.SpectateButtonPressed
// [0x00020102] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::SpectateButtonPressed ( struct FEventData ev )
{
	static UFunction* pFnSpectateButtonPressed = NULL;

	if ( ! pFnSpectateButtonPressed )
		pFnSpectateButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 83488 ];

	UR_GFxSpawnMenu_execSpectateButtonPressed_Parms SpectateButtonPressed_Parms;
	memcpy ( &SpectateButtonPressed_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnSpectateButtonPressed, &SpectateButtonPressed_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.SuicideButtonPressed
// [0x00020102] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::SuicideButtonPressed ( struct FEventData ev )
{
	static UFunction* pFnSuicideButtonPressed = NULL;

	if ( ! pFnSuicideButtonPressed )
		pFnSuicideButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 83486 ];

	UR_GFxSpawnMenu_execSuicideButtonPressed_Parms SuicideButtonPressed_Parms;
	memcpy ( &SuicideButtonPressed_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnSuicideButtonPressed, &SuicideButtonPressed_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.DeployButtonPressed
// [0x00020102] 
// Parameters infos:

void UR_GFxSpawnMenu::DeployButtonPressed ( )
{
	static UFunction* pFnDeployButtonPressed = NULL;

	if ( ! pFnDeployButtonPressed )
		pFnDeployButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 83485 ];

	UR_GFxSpawnMenu_execDeployButtonPressed_Parms DeployButtonPressed_Parms;

	this->ProcessEvent ( pFnDeployButtonPressed, &DeployButtonPressed_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.CollectClassData
// [0x00020102] 
// Parameters infos:

void UR_GFxSpawnMenu::CollectClassData ( )
{
	static UFunction* pFnCollectClassData = NULL;

	if ( ! pFnCollectClassData )
		pFnCollectClassData = (UFunction*) UObject::GObjObjects()->Data[ 83484 ];

	UR_GFxSpawnMenu_execCollectClassData_Parms CollectClassData_Parms;

	this->ProcessEvent ( pFnCollectClassData, &CollectClassData_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.UpdateCurrentLoadoutSelection
// [0x00020102] 
// Parameters infos:

void UR_GFxSpawnMenu::UpdateCurrentLoadoutSelection ( )
{
	static UFunction* pFnUpdateCurrentLoadoutSelection = NULL;

	if ( ! pFnUpdateCurrentLoadoutSelection )
		pFnUpdateCurrentLoadoutSelection = (UFunction*) UObject::GObjObjects()->Data[ 83478 ];

	UR_GFxSpawnMenu_execUpdateCurrentLoadoutSelection_Parms UpdateCurrentLoadoutSelection_Parms;

	this->ProcessEvent ( pFnUpdateCurrentLoadoutSelection, &UpdateCurrentLoadoutSelection_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.TogglePlayerClass
// [0x00020102] 
// Parameters infos:
// int                            classIdx                       ( CPF_Parm )

void UR_GFxSpawnMenu::TogglePlayerClass ( int classIdx )
{
	static UFunction* pFnTogglePlayerClass = NULL;

	if ( ! pFnTogglePlayerClass )
		pFnTogglePlayerClass = (UFunction*) UObject::GObjObjects()->Data[ 83476 ];

	UR_GFxSpawnMenu_execTogglePlayerClass_Parms TogglePlayerClass_Parms;
	TogglePlayerClass_Parms.classIdx = classIdx;

	this->ProcessEvent ( pFnTogglePlayerClass, &TogglePlayerClass_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.SetThrowableWeapon
// [0x00020102] 
// Parameters infos:
// float                          WeapIdx                        ( CPF_Parm )

void UR_GFxSpawnMenu::SetThrowableWeapon ( float WeapIdx )
{
	static UFunction* pFnSetThrowableWeapon = NULL;

	if ( ! pFnSetThrowableWeapon )
		pFnSetThrowableWeapon = (UFunction*) UObject::GObjObjects()->Data[ 83471 ];

	UR_GFxSpawnMenu_execSetThrowableWeapon_Parms SetThrowableWeapon_Parms;
	SetThrowableWeapon_Parms.WeapIdx = WeapIdx;

	this->ProcessEvent ( pFnSetThrowableWeapon, &SetThrowableWeapon_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.ShowThrowableWeapons
// [0x00020102] 
// Parameters infos:
// TArray< class UClass* >        rWeapClasses                   ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::ShowThrowableWeapons ( TArray< class UClass* > rWeapClasses )
{
	static UFunction* pFnShowThrowableWeapons = NULL;

	if ( ! pFnShowThrowableWeapons )
		pFnShowThrowableWeapons = (UFunction*) UObject::GObjObjects()->Data[ 83465 ];

	UR_GFxSpawnMenu_execShowThrowableWeapons_Parms ShowThrowableWeapons_Parms;
	memcpy ( &ShowThrowableWeapons_Parms.rWeapClasses, &rWeapClasses, 0xC );

	this->ProcessEvent ( pFnShowThrowableWeapons, &ShowThrowableWeapons_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.PopulateThrowableWeapons
// [0x00020102] 
// Parameters infos:
// TArray< struct FString >       throwNames                     ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::PopulateThrowableWeapons ( TArray< struct FString > throwNames )
{
	static UFunction* pFnPopulateThrowableWeapons = NULL;

	if ( ! pFnPopulateThrowableWeapons )
		pFnPopulateThrowableWeapons = (UFunction*) UObject::GObjObjects()->Data[ 83462 ];

	UR_GFxSpawnMenu_execPopulateThrowableWeapons_Parms PopulateThrowableWeapons_Parms;
	memcpy ( &PopulateThrowableWeapons_Parms.throwNames, &throwNames, 0xC );

	this->ProcessEvent ( pFnPopulateThrowableWeapons, &PopulateThrowableWeapons_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.SetMeleeWeapon
// [0x00020102] 
// Parameters infos:
// float                          WeapIdx                        ( CPF_Parm )

void UR_GFxSpawnMenu::SetMeleeWeapon ( float WeapIdx )
{
	static UFunction* pFnSetMeleeWeapon = NULL;

	if ( ! pFnSetMeleeWeapon )
		pFnSetMeleeWeapon = (UFunction*) UObject::GObjObjects()->Data[ 83457 ];

	UR_GFxSpawnMenu_execSetMeleeWeapon_Parms SetMeleeWeapon_Parms;
	SetMeleeWeapon_Parms.WeapIdx = WeapIdx;

	this->ProcessEvent ( pFnSetMeleeWeapon, &SetMeleeWeapon_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.ShowMeleeWeapons
// [0x00020102] 
// Parameters infos:
// TArray< class UClass* >        rWeapClasses                   ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::ShowMeleeWeapons ( TArray< class UClass* > rWeapClasses )
{
	static UFunction* pFnShowMeleeWeapons = NULL;

	if ( ! pFnShowMeleeWeapons )
		pFnShowMeleeWeapons = (UFunction*) UObject::GObjObjects()->Data[ 83451 ];

	UR_GFxSpawnMenu_execShowMeleeWeapons_Parms ShowMeleeWeapons_Parms;
	memcpy ( &ShowMeleeWeapons_Parms.rWeapClasses, &rWeapClasses, 0xC );

	this->ProcessEvent ( pFnShowMeleeWeapons, &ShowMeleeWeapons_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.PopulateMeleeWeapons
// [0x00020102] 
// Parameters infos:
// TArray< struct FString >       meleeNames                     ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::PopulateMeleeWeapons ( TArray< struct FString > meleeNames )
{
	static UFunction* pFnPopulateMeleeWeapons = NULL;

	if ( ! pFnPopulateMeleeWeapons )
		pFnPopulateMeleeWeapons = (UFunction*) UObject::GObjObjects()->Data[ 83448 ];

	UR_GFxSpawnMenu_execPopulateMeleeWeapons_Parms PopulateMeleeWeapons_Parms;
	memcpy ( &PopulateMeleeWeapons_Parms.meleeNames, &meleeNames, 0xC );

	this->ProcessEvent ( pFnPopulateMeleeWeapons, &PopulateMeleeWeapons_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.SetSecondaryWeapon
// [0x00020102] 
// Parameters infos:
// float                          WeapIdx                        ( CPF_Parm )

void UR_GFxSpawnMenu::SetSecondaryWeapon ( float WeapIdx )
{
	static UFunction* pFnSetSecondaryWeapon = NULL;

	if ( ! pFnSetSecondaryWeapon )
		pFnSetSecondaryWeapon = (UFunction*) UObject::GObjObjects()->Data[ 83443 ];

	UR_GFxSpawnMenu_execSetSecondaryWeapon_Parms SetSecondaryWeapon_Parms;
	SetSecondaryWeapon_Parms.WeapIdx = WeapIdx;

	this->ProcessEvent ( pFnSetSecondaryWeapon, &SetSecondaryWeapon_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.ShowSecondaryWeapons
// [0x00020102] 
// Parameters infos:
// TArray< class UClass* >        rWeapClasses                   ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::ShowSecondaryWeapons ( TArray< class UClass* > rWeapClasses )
{
	static UFunction* pFnShowSecondaryWeapons = NULL;

	if ( ! pFnShowSecondaryWeapons )
		pFnShowSecondaryWeapons = (UFunction*) UObject::GObjObjects()->Data[ 83437 ];

	UR_GFxSpawnMenu_execShowSecondaryWeapons_Parms ShowSecondaryWeapons_Parms;
	memcpy ( &ShowSecondaryWeapons_Parms.rWeapClasses, &rWeapClasses, 0xC );

	this->ProcessEvent ( pFnShowSecondaryWeapons, &ShowSecondaryWeapons_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.PopulateSecondaryWeapons
// [0x00020102] 
// Parameters infos:
// TArray< struct FString >       secondaryNames                 ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::PopulateSecondaryWeapons ( TArray< struct FString > secondaryNames )
{
	static UFunction* pFnPopulateSecondaryWeapons = NULL;

	if ( ! pFnPopulateSecondaryWeapons )
		pFnPopulateSecondaryWeapons = (UFunction*) UObject::GObjObjects()->Data[ 83434 ];

	UR_GFxSpawnMenu_execPopulateSecondaryWeapons_Parms PopulateSecondaryWeapons_Parms;
	memcpy ( &PopulateSecondaryWeapons_Parms.secondaryNames, &secondaryNames, 0xC );

	this->ProcessEvent ( pFnPopulateSecondaryWeapons, &PopulateSecondaryWeapons_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.SetPrimaryWeapon
// [0x00020102] 
// Parameters infos:
// float                          WeapIdx                        ( CPF_Parm )

void UR_GFxSpawnMenu::SetPrimaryWeapon ( float WeapIdx )
{
	static UFunction* pFnSetPrimaryWeapon = NULL;

	if ( ! pFnSetPrimaryWeapon )
		pFnSetPrimaryWeapon = (UFunction*) UObject::GObjObjects()->Data[ 83427 ];

	UR_GFxSpawnMenu_execSetPrimaryWeapon_Parms SetPrimaryWeapon_Parms;
	SetPrimaryWeapon_Parms.WeapIdx = WeapIdx;

	this->ProcessEvent ( pFnSetPrimaryWeapon, &SetPrimaryWeapon_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.ShowPrimaryWeapons
// [0x00020102] 
// Parameters infos:
// TArray< class UClass* >        rWeapClasses                   ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::ShowPrimaryWeapons ( TArray< class UClass* > rWeapClasses )
{
	static UFunction* pFnShowPrimaryWeapons = NULL;

	if ( ! pFnShowPrimaryWeapons )
		pFnShowPrimaryWeapons = (UFunction*) UObject::GObjObjects()->Data[ 83421 ];

	UR_GFxSpawnMenu_execShowPrimaryWeapons_Parms ShowPrimaryWeapons_Parms;
	memcpy ( &ShowPrimaryWeapons_Parms.rWeapClasses, &rWeapClasses, 0xC );

	this->ProcessEvent ( pFnShowPrimaryWeapons, &ShowPrimaryWeapons_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.PopulatePrimaryWeapons
// [0x00020102] 
// Parameters infos:
// TArray< struct FString >       primaryNames                   ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::PopulatePrimaryWeapons ( TArray< struct FString > primaryNames )
{
	static UFunction* pFnPopulatePrimaryWeapons = NULL;

	if ( ! pFnPopulatePrimaryWeapons )
		pFnPopulatePrimaryWeapons = (UFunction*) UObject::GObjObjects()->Data[ 83418 ];

	UR_GFxSpawnMenu_execPopulatePrimaryWeapons_Parms PopulatePrimaryWeapons_Parms;
	memcpy ( &PopulatePrimaryWeapons_Parms.primaryNames, &primaryNames, 0xC );

	this->ProcessEvent ( pFnPopulatePrimaryWeapons, &PopulatePrimaryWeapons_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.selectedClassChanged
// [0x00020102] 
// Parameters infos:
// float                          fClassIdx                      ( CPF_Parm )

void UR_GFxSpawnMenu::selectedClassChanged ( float fClassIdx )
{
	static UFunction* pFnselectedClassChanged = NULL;

	if ( ! pFnselectedClassChanged )
		pFnselectedClassChanged = (UFunction*) UObject::GObjObjects()->Data[ 83414 ];

	UR_GFxSpawnMenu_execselectedClassChanged_Parms selectedClassChanged_Parms;
	selectedClassChanged_Parms.fClassIdx = fClassIdx;

	this->ProcessEvent ( pFnselectedClassChanged, &selectedClassChanged_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.UpdateClassPortrait
// [0x00020102] 
// Parameters infos:
// int                            nTeam                          ( CPF_Parm )
// int                            newClassIdx                    ( CPF_Parm )

void UR_GFxSpawnMenu::UpdateClassPortrait ( int nTeam, int newClassIdx )
{
	static UFunction* pFnUpdateClassPortrait = NULL;

	if ( ! pFnUpdateClassPortrait )
		pFnUpdateClassPortrait = (UFunction*) UObject::GObjObjects()->Data[ 83408 ];

	UR_GFxSpawnMenu_execUpdateClassPortrait_Parms UpdateClassPortrait_Parms;
	UpdateClassPortrait_Parms.nTeam = nTeam;
	UpdateClassPortrait_Parms.newClassIdx = newClassIdx;

	this->ProcessEvent ( pFnUpdateClassPortrait, &UpdateClassPortrait_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.SetPlayerClass
// [0x00020102] 
// Parameters infos:
// float                          classIdx                       ( CPF_Parm )

void UR_GFxSpawnMenu::SetPlayerClass ( float classIdx )
{
	static UFunction* pFnSetPlayerClass = NULL;

	if ( ! pFnSetPlayerClass )
		pFnSetPlayerClass = (UFunction*) UObject::GObjObjects()->Data[ 83406 ];

	UR_GFxSpawnMenu_execSetPlayerClass_Parms SetPlayerClass_Parms;
	SetPlayerClass_Parms.classIdx = classIdx;

	this->ProcessEvent ( pFnSetPlayerClass, &SetPlayerClass_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.RequestTeam
// [0x00020102] 
// Parameters infos:
// int                            currentTeamNum                 ( CPF_Parm )

void UR_GFxSpawnMenu::RequestTeam ( int currentTeamNum )
{
	static UFunction* pFnRequestTeam = NULL;

	if ( ! pFnRequestTeam )
		pFnRequestTeam = (UFunction*) UObject::GObjObjects()->Data[ 83404 ];

	UR_GFxSpawnMenu_execRequestTeam_Parms RequestTeam_Parms;
	RequestTeam_Parms.currentTeamNum = currentTeamNum;

	this->ProcessEvent ( pFnRequestTeam, &RequestTeam_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.ASSetTeam
// [0x00020102] 
// Parameters infos:
// int                            TeamNum                        ( CPF_Parm )

void UR_GFxSpawnMenu::ASSetTeam ( int TeamNum )
{
	static UFunction* pFnASSetTeam = NULL;

	if ( ! pFnASSetTeam )
		pFnASSetTeam = (UFunction*) UObject::GObjObjects()->Data[ 83402 ];

	UR_GFxSpawnMenu_execASSetTeam_Parms ASSetTeam_Parms;
	ASSetTeam_Parms.TeamNum = TeamNum;

	this->ProcessEvent ( pFnASSetTeam, &ASSetTeam_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.UpdateTeamSizes
// [0x00020002] 
// Parameters infos:

void UR_GFxSpawnMenu::UpdateTeamSizes ( )
{
	static UFunction* pFnUpdateTeamSizes = NULL;

	if ( ! pFnUpdateTeamSizes )
		pFnUpdateTeamSizes = (UFunction*) UObject::GObjObjects()->Data[ 83401 ];

	UR_GFxSpawnMenu_execUpdateTeamSizes_Parms UpdateTeamSizes_Parms;

	this->ProcessEvent ( pFnUpdateTeamSizes, &UpdateTeamSizes_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.UpdateSelectedSpawnHealth
// [0x00020000] 
// Parameters infos:
// int                            ItemHealth                     ( CPF_Parm )

void UR_GFxSpawnMenu::UpdateSelectedSpawnHealth ( int ItemHealth )
{
	static UFunction* pFnUpdateSelectedSpawnHealth = NULL;

	if ( ! pFnUpdateSelectedSpawnHealth )
		pFnUpdateSelectedSpawnHealth = (UFunction*) UObject::GObjObjects()->Data[ 83399 ];

	UR_GFxSpawnMenu_execUpdateSelectedSpawnHealth_Parms UpdateSelectedSpawnHealth_Parms;
	UpdateSelectedSpawnHealth_Parms.ItemHealth = ItemHealth;

	this->ProcessEvent ( pFnUpdateSelectedSpawnHealth, &UpdateSelectedSpawnHealth_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.UpdateSelectedSpawnDescription
// [0x00020002] 
// Parameters infos:
// struct FString                 SpawnDesc                      ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxSpawnMenu::UpdateSelectedSpawnDescription ( struct FString SpawnDesc )
{
	static UFunction* pFnUpdateSelectedSpawnDescription = NULL;

	if ( ! pFnUpdateSelectedSpawnDescription )
		pFnUpdateSelectedSpawnDescription = (UFunction*) UObject::GObjObjects()->Data[ 83397 ];

	UR_GFxSpawnMenu_execUpdateSelectedSpawnDescription_Parms UpdateSelectedSpawnDescription_Parms;
	memcpy ( &UpdateSelectedSpawnDescription_Parms.SpawnDesc, &SpawnDesc, 0xC );

	this->ProcessEvent ( pFnUpdateSelectedSpawnDescription, &UpdateSelectedSpawnDescription_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.UpdateSelectedSpawnInspector
// [0x00020002] 
// Parameters infos:
// class UTexture*                ImageTexture                   ( CPF_Parm )
// struct FString                 SpawnType                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            ItemHealth                     ( CPF_Parm )

void UR_GFxSpawnMenu::UpdateSelectedSpawnInspector ( class UTexture* ImageTexture, struct FString SpawnType, int ItemHealth )
{
	static UFunction* pFnUpdateSelectedSpawnInspector = NULL;

	if ( ! pFnUpdateSelectedSpawnInspector )
		pFnUpdateSelectedSpawnInspector = (UFunction*) UObject::GObjObjects()->Data[ 83392 ];

	UR_GFxSpawnMenu_execUpdateSelectedSpawnInspector_Parms UpdateSelectedSpawnInspector_Parms;
	UpdateSelectedSpawnInspector_Parms.ImageTexture = ImageTexture;
	memcpy ( &UpdateSelectedSpawnInspector_Parms.SpawnType, &SpawnType, 0xC );
	UpdateSelectedSpawnInspector_Parms.ItemHealth = ItemHealth;

	this->ProcessEvent ( pFnUpdateSelectedSpawnInspector, &UpdateSelectedSpawnInspector_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.SetTeam
// [0x00020102] 
// Parameters infos:
// int                            TeamNum                        ( CPF_Parm )

void UR_GFxSpawnMenu::SetTeam ( int TeamNum )
{
	static UFunction* pFnSetTeam = NULL;

	if ( ! pFnSetTeam )
		pFnSetTeam = (UFunction*) UObject::GObjObjects()->Data[ 83387 ];

	UR_GFxSpawnMenu_execSetTeam_Parms SetTeam_Parms;
	SetTeam_Parms.TeamNum = TeamNum;

	this->ProcessEvent ( pFnSetTeam, &SetTeam_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenu.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxSpawnMenu::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 83379 ];

	UR_GFxSpawnMenu_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxSpawnMenu.Start
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  StartPaused                    ( CPF_OptionalParm | CPF_Parm )

bool UR_GFxSpawnMenu::Start ( unsigned long StartPaused )
{
	static UFunction* pFnStart = NULL;

	if ( ! pFnStart )
		pFnStart = (UFunction*) UObject::GObjObjects()->Data[ 83376 ];

	UR_GFxSpawnMenu_execStart_Parms Start_Parms;
	Start_Parms.StartPaused = StartPaused;

	this->ProcessEvent ( pFnStart, &Start_Parms, NULL );

	return Start_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxSpawnMenuMap.Update
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UR_GFxSpawnMenuMap::Update ( float DeltaTime )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 83660 ];

	UR_GFxSpawnMenuMap_execUpdate_Parms Update_Parms;
	Update_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenuMap.UpdateIcons
// [0x00C20002] 
// Parameters infos:
// unsigned long                  bIsRedIconType                 ( CPF_Parm )
// TArray< class AActor* >        Actors                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< class UGFxObject* >    ActorIcons                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UR_GFxSpawnMenuMap::UpdateIcons ( unsigned long bIsRedIconType, TArray< class AActor* >* Actors, TArray< class UGFxObject* >* ActorIcons )
{
	static UFunction* pFnUpdateIcons = NULL;

	if ( ! pFnUpdateIcons )
		pFnUpdateIcons = (UFunction*) UObject::GObjObjects()->Data[ 83648 ];

	UR_GFxSpawnMenuMap_execUpdateIcons_Parms UpdateIcons_Parms;
	UpdateIcons_Parms.bIsRedIconType = bIsRedIconType;

	this->ProcessEvent ( pFnUpdateIcons, &UpdateIcons_Parms, NULL );

	if ( Actors )
		memcpy ( Actors, &UpdateIcons_Parms.Actors, 0xC );

	if ( ActorIcons )
		memcpy ( ActorIcons, &UpdateIcons_Parms.ActorIcons, 0xC );
};

// Function RavagedGame.R_GFxSpawnMenuMap.GenFlagIcons
// [0x00020002] 
// Parameters infos:
// TArray< class UGFxObject* >    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            N                              ( CPF_Parm )

TArray< class UGFxObject* > UR_GFxSpawnMenuMap::GenFlagIcons ( int N )
{
	static UFunction* pFnGenFlagIcons = NULL;

	if ( ! pFnGenFlagIcons )
		pFnGenFlagIcons = (UFunction*) UObject::GObjObjects()->Data[ 83639 ];

	UR_GFxSpawnMenuMap_execGenFlagIcons_Parms GenFlagIcons_Parms;
	GenFlagIcons_Parms.N = N;

	this->ProcessEvent ( pFnGenFlagIcons, &GenFlagIcons_Parms, NULL );

	return GenFlagIcons_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxSpawnMenuMap.GenEnemyIcons
// [0x00020002] 
// Parameters infos:
// TArray< class UGFxObject* >    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            N                              ( CPF_Parm )

TArray< class UGFxObject* > UR_GFxSpawnMenuMap::GenEnemyIcons ( int N )
{
	static UFunction* pFnGenEnemyIcons = NULL;

	if ( ! pFnGenEnemyIcons )
		pFnGenEnemyIcons = (UFunction*) UObject::GObjObjects()->Data[ 83630 ];

	UR_GFxSpawnMenuMap_execGenEnemyIcons_Parms GenEnemyIcons_Parms;
	GenEnemyIcons_Parms.N = N;

	this->ProcessEvent ( pFnGenEnemyIcons, &GenEnemyIcons_Parms, NULL );

	return GenEnemyIcons_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxSpawnMenuMap.GenFriendIcons
// [0x00020002] 
// Parameters infos:
// TArray< class UGFxObject* >    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            N                              ( CPF_Parm )

TArray< class UGFxObject* > UR_GFxSpawnMenuMap::GenFriendIcons ( int N )
{
	static UFunction* pFnGenFriendIcons = NULL;

	if ( ! pFnGenFriendIcons )
		pFnGenFriendIcons = (UFunction*) UObject::GObjObjects()->Data[ 83621 ];

	UR_GFxSpawnMenuMap_execGenFriendIcons_Parms GenFriendIcons_Parms;
	GenFriendIcons_Parms.N = N;

	this->ProcessEvent ( pFnGenFriendIcons, &GenFriendIcons_Parms, NULL );

	return GenFriendIcons_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxSpawnMenuMap.GenSpawnIcons
// [0x00820002] 
// Parameters infos:
// TArray< class UGFxObject* >    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            N                              ( CPF_Parm )

TArray< class UGFxObject* > UR_GFxSpawnMenuMap::GenSpawnIcons ( int N )
{
	static UFunction* pFnGenSpawnIcons = NULL;

	if ( ! pFnGenSpawnIcons )
		pFnGenSpawnIcons = (UFunction*) UObject::GObjObjects()->Data[ 83610 ];

	UR_GFxSpawnMenuMap_execGenSpawnIcons_Parms GenSpawnIcons_Parms;
	GenSpawnIcons_Parms.N = N;

	this->ProcessEvent ( pFnGenSpawnIcons, &GenSpawnIcons_Parms, NULL );

	return GenSpawnIcons_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxSpawnMenuMap.UpdateData
// [0x00020002] 
// Parameters infos:

void UR_GFxSpawnMenuMap::UpdateData ( )
{
	static UFunction* pFnUpdateData = NULL;

	if ( ! pFnUpdateData )
		pFnUpdateData = (UFunction*) UObject::GObjObjects()->Data[ 83609 ];

	UR_GFxSpawnMenuMap_execUpdateData_Parms UpdateData_Parms;

	this->ProcessEvent ( pFnUpdateData, &UpdateData_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenuMap.Init
// [0x00820002] 
// Parameters infos:
// class UR_GFxSpawnMenu*         H                              ( CPF_Parm )

void UR_GFxSpawnMenuMap::Init ( class UR_GFxSpawnMenu* H )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 83583 ];

	UR_GFxSpawnMenuMap_execInit_Parms Init_Parms;
	Init_Parms.H = H;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenuMap.SetCurrentSpawn
// [0x00020002] 
// Parameters infos:
// class AActor*                  SelectedSpawn                  ( CPF_Parm )

void UR_GFxSpawnMenuMap::SetCurrentSpawn ( class AActor* SelectedSpawn )
{
	static UFunction* pFnSetCurrentSpawn = NULL;

	if ( ! pFnSetCurrentSpawn )
		pFnSetCurrentSpawn = (UFunction*) UObject::GObjObjects()->Data[ 83579 ];

	UR_GFxSpawnMenuMap_execSetCurrentSpawn_Parms SetCurrentSpawn_Parms;
	SetCurrentSpawn_Parms.SelectedSpawn = SelectedSpawn;

	this->ProcessEvent ( pFnSetCurrentSpawn, &SetCurrentSpawn_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenuMap.WidgetPressed
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              Widget                         ( CPF_Parm )

void UR_GFxSpawnMenuMap::WidgetPressed ( class UGFxObject* Widget )
{
	static UFunction* pFnWidgetPressed = NULL;

	if ( ! pFnWidgetPressed )
		pFnWidgetPressed = (UFunction*) UObject::GObjObjects()->Data[ 83570 ];

	UR_GFxSpawnMenuMap_execWidgetPressed_Parms WidgetPressed_Parms;
	WidgetPressed_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetPressed, &WidgetPressed_Parms, NULL );
};

// Function RavagedGame.R_GFxSpawnMenuMap.UpdateSpawnPoints
// [0x00C20002] 
// Parameters infos:
// TArray< class AR_Thrust_ControlPoint* > spawnObjs                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< class AR_Vehicle* >    spawnVehs                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UR_GFxSpawnMenuMap::UpdateSpawnPoints ( TArray< class AR_Thrust_ControlPoint* >* spawnObjs, TArray< class AR_Vehicle* >* spawnVehs )
{
	static UFunction* pFnUpdateSpawnPoints = NULL;

	if ( ! pFnUpdateSpawnPoints )
		pFnUpdateSpawnPoints = (UFunction*) UObject::GObjObjects()->Data[ 83557 ];

	UR_GFxSpawnMenuMap_execUpdateSpawnPoints_Parms UpdateSpawnPoints_Parms;

	this->ProcessEvent ( pFnUpdateSpawnPoints, &UpdateSpawnPoints_Parms, NULL );

	if ( spawnObjs )
		memcpy ( spawnObjs, &UpdateSpawnPoints_Parms.spawnObjs, 0xC );

	if ( spawnVehs )
		memcpy ( spawnVehs, &UpdateSpawnPoints_Parms.spawnVehs, 0xC );
};

// Function RavagedGame.R_GFxUILeaderboard.ReadOnlineStatsComplete
// [0x00820002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UR_GFxUILeaderboard::ReadOnlineStatsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnReadOnlineStatsComplete = NULL;

	if ( ! pFnReadOnlineStatsComplete )
		pFnReadOnlineStatsComplete = (UFunction*) UObject::GObjObjects()->Data[ 83799 ];

	UR_GFxUILeaderboard_execReadOnlineStatsComplete_Parms ReadOnlineStatsComplete_Parms;
	ReadOnlineStatsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnReadOnlineStatsComplete, &ReadOnlineStatsComplete_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.OnlineCleanup
// [0x00020002] 
// Parameters infos:

void UR_GFxUILeaderboard::OnlineCleanup ( )
{
	static UFunction* pFnOnlineCleanup = NULL;

	if ( ! pFnOnlineCleanup )
		pFnOnlineCleanup = (UFunction*) UObject::GObjObjects()->Data[ 83798 ];

	UR_GFxUILeaderboard_execOnlineCleanup_Parms OnlineCleanup_Parms;

	this->ProcessEvent ( pFnOnlineCleanup, &OnlineCleanup_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.Tick
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UR_GFxUILeaderboard::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 83795 ];

	UR_GFxUILeaderboard_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.DoInitialLeaderboardRead
// [0x00020002] 
// Parameters infos:

void UR_GFxUILeaderboard::DoInitialLeaderboardRead ( )
{
	static UFunction* pFnDoInitialLeaderboardRead = NULL;

	if ( ! pFnDoInitialLeaderboardRead )
		pFnDoInitialLeaderboardRead = (UFunction*) UObject::GObjObjects()->Data[ 83794 ];

	UR_GFxUILeaderboard_execDoInitialLeaderboardRead_Parms DoInitialLeaderboardRead_Parms;

	this->ProcessEvent ( pFnDoInitialLeaderboardRead, &DoInitialLeaderboardRead_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.OnlineInit
// [0x00020002] 
// Parameters infos:

void UR_GFxUILeaderboard::OnlineInit ( )
{
	static UFunction* pFnOnlineInit = NULL;

	if ( ! pFnOnlineInit )
		pFnOnlineInit = (UFunction*) UObject::GObjObjects()->Data[ 83792 ];

	UR_GFxUILeaderboard_execOnlineInit_Parms OnlineInit_Parms;

	this->ProcessEvent ( pFnOnlineInit, &OnlineInit_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.OnOpenAnimComplete
// [0x00020000] 
// Parameters infos:

void UR_GFxUILeaderboard::OnOpenAnimComplete ( )
{
	static UFunction* pFnOnOpenAnimComplete = NULL;

	if ( ! pFnOnOpenAnimComplete )
		pFnOnOpenAnimComplete = (UFunction*) UObject::GObjObjects()->Data[ 83791 ];

	UR_GFxUILeaderboard_execOnOpenAnimComplete_Parms OnOpenAnimComplete_Parms;

	this->ProcessEvent ( pFnOnOpenAnimComplete, &OnOpenAnimComplete_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.OnCloseAnimComplete
// [0x00020002] 
// Parameters infos:

void UR_GFxUILeaderboard::OnCloseAnimComplete ( )
{
	static UFunction* pFnOnCloseAnimComplete = NULL;

	if ( ! pFnOnCloseAnimComplete )
		pFnOnCloseAnimComplete = (UFunction*) UObject::GObjObjects()->Data[ 83790 ];

	UR_GFxUILeaderboard_execOnCloseAnimComplete_Parms OnCloseAnimComplete_Parms;

	this->ProcessEvent ( pFnOnCloseAnimComplete, &OnCloseAnimComplete_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.ProcessTweenCallback
// [0x00020002] 
// Parameters infos:
// struct FString                 Callback                       ( CPF_Parm | CPF_NeedCtorLink )
// class UGFxObject*              TargetMC                       ( CPF_Parm )

void UR_GFxUILeaderboard::ProcessTweenCallback ( struct FString Callback, class UGFxObject* TargetMC )
{
	static UFunction* pFnProcessTweenCallback = NULL;

	if ( ! pFnProcessTweenCallback )
		pFnProcessTweenCallback = (UFunction*) UObject::GObjObjects()->Data[ 83787 ];

	UR_GFxUILeaderboard_execProcessTweenCallback_Parms ProcessTweenCallback_Parms;
	memcpy ( &ProcessTweenCallback_Parms.Callback, &Callback, 0xC );
	ProcessTweenCallback_Parms.TargetMC = TargetMC;

	this->ProcessEvent ( pFnProcessTweenCallback, &ProcessTweenCallback_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.TweenPlayerRow
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              RowMC                          ( CPF_Parm )

void UR_GFxUILeaderboard::TweenPlayerRow ( class UGFxObject* RowMC )
{
	static UFunction* pFnTweenPlayerRow = NULL;

	if ( ! pFnTweenPlayerRow )
		pFnTweenPlayerRow = (UFunction*) UObject::GObjObjects()->Data[ 83785 ];

	UR_GFxUILeaderboard_execTweenPlayerRow_Parms TweenPlayerRow_Parms;
	TweenPlayerRow_Parms.RowMC = RowMC;

	this->ProcessEvent ( pFnTweenPlayerRow, &TweenPlayerRow_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.FloatLeaderboardAnimationY
// [0x00020002] 
// Parameters infos:
// unsigned long                  Direction                      ( CPF_Parm )

void UR_GFxUILeaderboard::FloatLeaderboardAnimationY ( unsigned long Direction )
{
	static UFunction* pFnFloatLeaderboardAnimationY = NULL;

	if ( ! pFnFloatLeaderboardAnimationY )
		pFnFloatLeaderboardAnimationY = (UFunction*) UObject::GObjObjects()->Data[ 83783 ];

	UR_GFxUILeaderboard_execFloatLeaderboardAnimationY_Parms FloatLeaderboardAnimationY_Parms;
	FloatLeaderboardAnimationY_Parms.Direction = Direction;

	this->ProcessEvent ( pFnFloatLeaderboardAnimationY, &FloatLeaderboardAnimationY_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.FloatLeaderboardAnimationX
// [0x00020002] 
// Parameters infos:
// unsigned long                  Direction                      ( CPF_Parm )

void UR_GFxUILeaderboard::FloatLeaderboardAnimationX ( unsigned long Direction )
{
	static UFunction* pFnFloatLeaderboardAnimationX = NULL;

	if ( ! pFnFloatLeaderboardAnimationX )
		pFnFloatLeaderboardAnimationX = (UFunction*) UObject::GObjObjects()->Data[ 83781 ];

	UR_GFxUILeaderboard_execFloatLeaderboardAnimationX_Parms FloatLeaderboardAnimationX_Parms;
	FloatLeaderboardAnimationX_Parms.Direction = Direction;

	this->ProcessEvent ( pFnFloatLeaderboardAnimationX, &FloatLeaderboardAnimationX_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.UpdateFooter
// [0x00020002] 
// Parameters infos:
// struct UR_GFxUILeaderboard_FUILeaderboardEntry FooterData                     ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxUILeaderboard::UpdateFooter ( struct UR_GFxUILeaderboard_FUILeaderboardEntry FooterData )
{
	static UFunction* pFnUpdateFooter = NULL;

	if ( ! pFnUpdateFooter )
		pFnUpdateFooter = (UFunction*) UObject::GObjObjects()->Data[ 83779 ];

	UR_GFxUILeaderboard_execUpdateFooter_Parms UpdateFooter_Parms;
	memcpy ( &UpdateFooter_Parms.FooterData, &FooterData, 0x24 );

	this->ProcessEvent ( pFnUpdateFooter, &UpdateFooter_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.UpdateHeaders
// [0x00020002] 
// Parameters infos:

void UR_GFxUILeaderboard::UpdateHeaders ( )
{
	static UFunction* pFnUpdateHeaders = NULL;

	if ( ! pFnUpdateHeaders )
		pFnUpdateHeaders = (UFunction*) UObject::GObjObjects()->Data[ 83777 ];

	UR_GFxUILeaderboard_execUpdateHeaders_Parms UpdateHeaders_Parms;

	this->ProcessEvent ( pFnUpdateHeaders, &UpdateHeaders_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.SetPlayerRow
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              UpdatedPlayerRow               ( CPF_Parm )

void UR_GFxUILeaderboard::SetPlayerRow ( class UGFxObject* UpdatedPlayerRow )
{
	static UFunction* pFnSetPlayerRow = NULL;

	if ( ! pFnSetPlayerRow )
		pFnSetPlayerRow = (UFunction*) UObject::GObjObjects()->Data[ 83775 ];

	UR_GFxUILeaderboard_execSetPlayerRow_Parms SetPlayerRow_Parms;
	SetPlayerRow_Parms.UpdatedPlayerRow = UpdatedPlayerRow;

	this->ProcessEvent ( pFnSetPlayerRow, &SetPlayerRow_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.UpdateRow
// [0x00820002] 
// Parameters infos:
// struct UR_GFxUILeaderboard_FListRow CurRow                         ( CPF_Parm )
// struct UR_GFxUILeaderboard_FUILeaderboardEntry CurData                        ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxUILeaderboard::UpdateRow ( struct UR_GFxUILeaderboard_FListRow CurRow, struct UR_GFxUILeaderboard_FUILeaderboardEntry CurData )
{
	static UFunction* pFnUpdateRow = NULL;

	if ( ! pFnUpdateRow )
		pFnUpdateRow = (UFunction*) UObject::GObjObjects()->Data[ 83767 ];

	UR_GFxUILeaderboard_execUpdateRow_Parms UpdateRow_Parms;
	memcpy ( &UpdateRow_Parms.CurRow, &CurRow, 0x20 );
	memcpy ( &UpdateRow_Parms.CurData, &CurData, 0x24 );

	this->ProcessEvent ( pFnUpdateRow, &UpdateRow_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.UpdateLeaderboardLists
// [0x00820002] 
// Parameters infos:

void UR_GFxUILeaderboard::UpdateLeaderboardLists ( )
{
	static UFunction* pFnUpdateLeaderboardLists = NULL;

	if ( ! pFnUpdateLeaderboardLists )
		pFnUpdateLeaderboardLists = (UFunction*) UObject::GObjObjects()->Data[ 83764 ];

	UR_GFxUILeaderboard_execUpdateLeaderboardLists_Parms UpdateLeaderboardLists_Parms;

	this->ProcessEvent ( pFnUpdateLeaderboardLists, &UpdateLeaderboardLists_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.Draw
// [0x00020002] 
// Parameters infos:

void UR_GFxUILeaderboard::Draw ( )
{
	static UFunction* pFnDraw = NULL;

	if ( ! pFnDraw )
		pFnDraw = (UFunction*) UObject::GObjObjects()->Data[ 83763 ];

	UR_GFxUILeaderboard_execDraw_Parms Draw_Parms;

	this->ProcessEvent ( pFnDraw, &Draw_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.SetupList
// [0x00820002] 
// Parameters infos:

void UR_GFxUILeaderboard::SetupList ( )
{
	static UFunction* pFnSetupList = NULL;

	if ( ! pFnSetupList )
		pFnSetupList = (UFunction*) UObject::GObjObjects()->Data[ 83758 ];

	UR_GFxUILeaderboard_execSetupList_Parms SetupList_Parms;

	this->ProcessEvent ( pFnSetupList, &SetupList_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.ConfigLeaderboard
// [0x00020002] 
// Parameters infos:

void UR_GFxUILeaderboard::ConfigLeaderboard ( )
{
	static UFunction* pFnConfigLeaderboard = NULL;

	if ( ! pFnConfigLeaderboard )
		pFnConfigLeaderboard = (UFunction*) UObject::GObjObjects()->Data[ 83757 ];

	UR_GFxUILeaderboard_execConfigLeaderboard_Parms ConfigLeaderboard_Parms;

	this->ProcessEvent ( pFnConfigLeaderboard, &ConfigLeaderboard_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.PlayCloseAnimation
// [0x00020002] 
// Parameters infos:

void UR_GFxUILeaderboard::PlayCloseAnimation ( )
{
	static UFunction* pFnPlayCloseAnimation = NULL;

	if ( ! pFnPlayCloseAnimation )
		pFnPlayCloseAnimation = (UFunction*) UObject::GObjObjects()->Data[ 83756 ];

	UR_GFxUILeaderboard_execPlayCloseAnimation_Parms PlayCloseAnimation_Parms;

	this->ProcessEvent ( pFnPlayCloseAnimation, &PlayCloseAnimation_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.PlayOpenAnimation
// [0x00020002] 
// Parameters infos:

void UR_GFxUILeaderboard::PlayOpenAnimation ( )
{
	static UFunction* pFnPlayOpenAnimation = NULL;

	if ( ! pFnPlayOpenAnimation )
		pFnPlayOpenAnimation = (UFunction*) UObject::GObjObjects()->Data[ 83755 ];

	UR_GFxUILeaderboard_execPlayOpenAnimation_Parms PlayOpenAnimation_Parms;

	this->ProcessEvent ( pFnPlayOpenAnimation, &PlayOpenAnimation_Parms, NULL );
};

// Function RavagedGame.R_GFxUILeaderboard.Start
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  StartPaused                    ( CPF_OptionalParm | CPF_Parm )

bool UR_GFxUILeaderboard::Start ( unsigned long StartPaused )
{
	static UFunction* pFnStart = NULL;

	if ( ! pFnStart )
		pFnStart = (UFunction*) UObject::GObjObjects()->Data[ 83752 ];

	UR_GFxUILeaderboard_execStart_Parms Start_Parms;
	Start_Parms.StartPaused = StartPaused;

	this->ProcessEvent ( pFnStart, &Start_Parms, NULL );

	return Start_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxUIScoreboard.GetTimeOnline
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class AUTPlayerReplicationInfo* PRI                            ( CPF_Parm )

struct FString UR_GFxUIScoreboard::GetTimeOnline ( class AUTPlayerReplicationInfo* PRI )
{
	static UFunction* pFnGetTimeOnline = NULL;

	if ( ! pFnGetTimeOnline )
		pFnGetTimeOnline = (UFunction*) UObject::GObjObjects()->Data[ 84022 ];

	UR_GFxUIScoreboard_execGetTimeOnline_Parms GetTimeOnline_Parms;
	GetTimeOnline_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetTimeOnline, &GetTimeOnline_Parms, NULL );

	return GetTimeOnline_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxUIScoreboard.IsValidScoreboardPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AUTPlayerReplicationInfo* PRI                            ( CPF_Parm )

bool UR_GFxUIScoreboard::IsValidScoreboardPlayer ( class AUTPlayerReplicationInfo* PRI )
{
	static UFunction* pFnIsValidScoreboardPlayer = NULL;

	if ( ! pFnIsValidScoreboardPlayer )
		pFnIsValidScoreboardPlayer = (UFunction*) UObject::GObjObjects()->Data[ 84019 ];

	UR_GFxUIScoreboard_execIsValidScoreboardPlayer_Parms IsValidScoreboardPlayer_Parms;
	IsValidScoreboardPlayer_Parms.PRI = PRI;

	this->ProcessEvent ( pFnIsValidScoreboardPlayer, &IsValidScoreboardPlayer_Parms, NULL );

	return IsValidScoreboardPlayer_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxUIScoreboard.ProcessTweenCallback
// [0x00020002] 
// Parameters infos:
// struct FString                 Callback                       ( CPF_Parm | CPF_NeedCtorLink )
// class UGFxObject*              TargetMC                       ( CPF_Parm )

void UR_GFxUIScoreboard::ProcessTweenCallback ( struct FString Callback, class UGFxObject* TargetMC )
{
	static UFunction* pFnProcessTweenCallback = NULL;

	if ( ! pFnProcessTweenCallback )
		pFnProcessTweenCallback = (UFunction*) UObject::GObjObjects()->Data[ 84016 ];

	UR_GFxUIScoreboard_execProcessTweenCallback_Parms ProcessTweenCallback_Parms;
	memcpy ( &ProcessTweenCallback_Parms.Callback, &Callback, 0xC );
	ProcessTweenCallback_Parms.TargetMC = TargetMC;

	this->ProcessEvent ( pFnProcessTweenCallback, &ProcessTweenCallback_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.TweenPlayerRow
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              RowMC                          ( CPF_Parm )

void UR_GFxUIScoreboard::TweenPlayerRow ( class UGFxObject* RowMC )
{
	static UFunction* pFnTweenPlayerRow = NULL;

	if ( ! pFnTweenPlayerRow )
		pFnTweenPlayerRow = (UFunction*) UObject::GObjObjects()->Data[ 84014 ];

	UR_GFxUIScoreboard_execTweenPlayerRow_Parms TweenPlayerRow_Parms;
	TweenPlayerRow_Parms.RowMC = RowMC;

	this->ProcessEvent ( pFnTweenPlayerRow, &TweenPlayerRow_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.FloatScoreboardAnimationY
// [0x00020000] 
// Parameters infos:
// unsigned long                  Direction                      ( CPF_Parm )

void UR_GFxUIScoreboard::FloatScoreboardAnimationY ( unsigned long Direction )
{
	static UFunction* pFnFloatScoreboardAnimationY = NULL;

	if ( ! pFnFloatScoreboardAnimationY )
		pFnFloatScoreboardAnimationY = (UFunction*) UObject::GObjObjects()->Data[ 84012 ];

	UR_GFxUIScoreboard_execFloatScoreboardAnimationY_Parms FloatScoreboardAnimationY_Parms;
	FloatScoreboardAnimationY_Parms.Direction = Direction;

	this->ProcessEvent ( pFnFloatScoreboardAnimationY, &FloatScoreboardAnimationY_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.FloatScoreboardAnimationX
// [0x00020000] 
// Parameters infos:
// unsigned long                  Direction                      ( CPF_Parm )

void UR_GFxUIScoreboard::FloatScoreboardAnimationX ( unsigned long Direction )
{
	static UFunction* pFnFloatScoreboardAnimationX = NULL;

	if ( ! pFnFloatScoreboardAnimationX )
		pFnFloatScoreboardAnimationX = (UFunction*) UObject::GObjObjects()->Data[ 84010 ];

	UR_GFxUIScoreboard_execFloatScoreboardAnimationX_Parms FloatScoreboardAnimationX_Parms;
	FloatScoreboardAnimationX_Parms.Direction = Direction;

	this->ProcessEvent ( pFnFloatScoreboardAnimationX, &FloatScoreboardAnimationX_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.ShowBackground
// [0x00020002] 
// Parameters infos:
// unsigned long                  bShow                          ( CPF_Parm )

void UR_GFxUIScoreboard::ShowBackground ( unsigned long bShow )
{
	static UFunction* pFnShowBackground = NULL;

	if ( ! pFnShowBackground )
		pFnShowBackground = (UFunction*) UObject::GObjObjects()->Data[ 84008 ];

	UR_GFxUIScoreboard_execShowBackground_Parms ShowBackground_Parms;
	ShowBackground_Parms.bShow = bShow;

	this->ProcessEvent ( pFnShowBackground, &ShowBackground_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.UpdateFooter
// [0x00024002] 
// Parameters infos:
// class AUTGameReplicationInfo*  GRI                            ( CPF_Parm )
// class AUTPlayerReplicationInfo* LocalPlayerPRI                 ( CPF_Parm )
// unsigned char                  PRIIndex                       ( CPF_OptionalParm | CPF_Parm )

void UR_GFxUIScoreboard::UpdateFooter ( class AUTGameReplicationInfo* GRI, class AUTPlayerReplicationInfo* LocalPlayerPRI, unsigned char PRIIndex )
{
	static UFunction* pFnUpdateFooter = NULL;

	if ( ! pFnUpdateFooter )
		pFnUpdateFooter = (UFunction*) UObject::GObjObjects()->Data[ 84002 ];

	UR_GFxUIScoreboard_execUpdateFooter_Parms UpdateFooter_Parms;
	UpdateFooter_Parms.GRI = GRI;
	UpdateFooter_Parms.LocalPlayerPRI = LocalPlayerPRI;
	UpdateFooter_Parms.PRIIndex = PRIIndex;

	this->ProcessEvent ( pFnUpdateFooter, &UpdateFooter_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.UpdateHeaders
// [0x00020002] 
// Parameters infos:
// class AUTGameReplicationInfo*  GRI                            ( CPF_Parm )

void UR_GFxUIScoreboard::UpdateHeaders ( class AUTGameReplicationInfo* GRI )
{
	static UFunction* pFnUpdateHeaders = NULL;

	if ( ! pFnUpdateHeaders )
		pFnUpdateHeaders = (UFunction*) UObject::GObjObjects()->Data[ 83999 ];

	UR_GFxUIScoreboard_execUpdateHeaders_Parms UpdateHeaders_Parms;
	UpdateHeaders_Parms.GRI = GRI;

	this->ProcessEvent ( pFnUpdateHeaders, &UpdateHeaders_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.FormatTime
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Seconds                        ( CPF_Parm )

struct FString UR_GFxUIScoreboard::FormatTime ( int Seconds )
{
	static UFunction* pFnFormatTime = NULL;

	if ( ! pFnFormatTime )
		pFnFormatTime = (UFunction*) UObject::GObjObjects()->Data[ 83993 ];

	UR_GFxUIScoreboard_execFormatTime_Parms FormatTime_Parms;
	FormatTime_Parms.Seconds = Seconds;

	this->ProcessEvent ( pFnFormatTime, &FormatTime_Parms, NULL );

	return FormatTime_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxUIScoreboard.UpdatePreviousState
// [0x00020002] 
// Parameters infos:
// class AUTGameReplicationInfo*  GRI                            ( CPF_Parm )

void UR_GFxUIScoreboard::UpdatePreviousState ( class AUTGameReplicationInfo* GRI )
{
	static UFunction* pFnUpdatePreviousState = NULL;

	if ( ! pFnUpdatePreviousState )
		pFnUpdatePreviousState = (UFunction*) UObject::GObjObjects()->Data[ 83991 ];

	UR_GFxUIScoreboard_execUpdatePreviousState_Parms UpdatePreviousState_Parms;
	UpdatePreviousState_Parms.GRI = GRI;

	this->ProcessEvent ( pFnUpdatePreviousState, &UpdatePreviousState_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.SetPlayerRow
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              UpdatedPlayerRow               ( CPF_Parm )

void UR_GFxUIScoreboard::SetPlayerRow ( class UGFxObject* UpdatedPlayerRow )
{
	static UFunction* pFnSetPlayerRow = NULL;

	if ( ! pFnSetPlayerRow )
		pFnSetPlayerRow = (UFunction*) UObject::GObjObjects()->Data[ 83989 ];

	UR_GFxUIScoreboard_execSetPlayerRow_Parms SetPlayerRow_Parms;
	SetPlayerRow_Parms.UpdatedPlayerRow = UpdatedPlayerRow;

	this->ProcessEvent ( pFnSetPlayerRow, &SetPlayerRow_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.Tick
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UR_GFxUIScoreboard::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 83986 ];

	UR_GFxUIScoreboard_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.UpdateRow
// [0x00C20002] 
// Parameters infos:
// struct FrScoreRow              ThisRow                        ( CPF_Parm )
// class AR_PlayerReplicationInfo* ThisPRI                        ( CPF_Parm )
// int                            PlayerCount                    ( CPF_Parm )
// struct FrScoreEntry            ThisEntry                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UR_GFxUIScoreboard::UpdateRow ( struct FrScoreRow ThisRow, class AR_PlayerReplicationInfo* ThisPRI, int PlayerCount, struct FrScoreEntry* ThisEntry )
{
	static UFunction* pFnUpdateRow = NULL;

	if ( ! pFnUpdateRow )
		pFnUpdateRow = (UFunction*) UObject::GObjObjects()->Data[ 83976 ];

	UR_GFxUIScoreboard_execUpdateRow_Parms UpdateRow_Parms;
	memcpy ( &UpdateRow_Parms.ThisRow, &ThisRow, 0x34 );
	UpdateRow_Parms.ThisPRI = ThisPRI;
	UpdateRow_Parms.PlayerCount = PlayerCount;

	this->ProcessEvent ( pFnUpdateRow, &UpdateRow_Parms, NULL );

	if ( ThisEntry )
		memcpy ( ThisEntry, &UpdateRow_Parms.ThisEntry, 0x48 );
};

// Function RavagedGame.R_GFxUIScoreboard.ClearRow
// [0x00820002] 
// Parameters infos:
// struct FrScoreRow              ThisRow                        ( CPF_Parm )

void UR_GFxUIScoreboard::ClearRow ( struct FrScoreRow ThisRow )
{
	static UFunction* pFnClearRow = NULL;

	if ( ! pFnClearRow )
		pFnClearRow = (UFunction*) UObject::GObjObjects()->Data[ 83973 ];

	UR_GFxUIScoreboard_execClearRow_Parms ClearRow_Parms;
	memcpy ( &ClearRow_Parms.ThisRow, &ThisRow, 0x34 );

	this->ProcessEvent ( pFnClearRow, &ClearRow_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.UpdatePRILists
// [0x00020002] 
// Parameters infos:
// class AUTGameReplicationInfo*  GRI                            ( CPF_Parm )

void UR_GFxUIScoreboard::UpdatePRILists ( class AUTGameReplicationInfo* GRI )
{
	static UFunction* pFnUpdatePRILists = NULL;

	if ( ! pFnUpdatePRILists )
		pFnUpdatePRILists = (UFunction*) UObject::GObjObjects()->Data[ 83966 ];

	UR_GFxUIScoreboard_execUpdatePRILists_Parms UpdatePRILists_Parms;
	UpdatePRILists_Parms.GRI = GRI;

	this->ProcessEvent ( pFnUpdatePRILists, &UpdatePRILists_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.Draw
// [0x00020002] 
// Parameters infos:

void UR_GFxUIScoreboard::Draw ( )
{
	static UFunction* pFnDraw = NULL;

	if ( ! pFnDraw )
		pFnDraw = (UFunction*) UObject::GObjObjects()->Data[ 83962 ];

	UR_GFxUIScoreboard_execDraw_Parms Draw_Parms;

	this->ProcessEvent ( pFnDraw, &Draw_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.SetupRedTeam
// [0x00820002] 
// Parameters infos:

void UR_GFxUIScoreboard::SetupRedTeam ( )
{
	static UFunction* pFnSetupRedTeam = NULL;

	if ( ! pFnSetupRedTeam )
		pFnSetupRedTeam = (UFunction*) UObject::GObjObjects()->Data[ 83957 ];

	UR_GFxUIScoreboard_execSetupRedTeam_Parms SetupRedTeam_Parms;

	this->ProcessEvent ( pFnSetupRedTeam, &SetupRedTeam_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.SetupBlueTeam
// [0x00820002] 
// Parameters infos:

void UR_GFxUIScoreboard::SetupBlueTeam ( )
{
	static UFunction* pFnSetupBlueTeam = NULL;

	if ( ! pFnSetupBlueTeam )
		pFnSetupBlueTeam = (UFunction*) UObject::GObjObjects()->Data[ 83952 ];

	UR_GFxUIScoreboard_execSetupBlueTeam_Parms SetupBlueTeam_Parms;

	this->ProcessEvent ( pFnSetupBlueTeam, &SetupBlueTeam_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.ConfigScoreboard
// [0x00020002] 
// Parameters infos:

void UR_GFxUIScoreboard::ConfigScoreboard ( )
{
	static UFunction* pFnConfigScoreboard = NULL;

	if ( ! pFnConfigScoreboard )
		pFnConfigScoreboard = (UFunction*) UObject::GObjObjects()->Data[ 83950 ];

	UR_GFxUIScoreboard_execConfigScoreboard_Parms ConfigScoreboard_Parms;

	this->ProcessEvent ( pFnConfigScoreboard, &ConfigScoreboard_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.PlayCloseAnimation
// [0x00020002] 
// Parameters infos:

void UR_GFxUIScoreboard::PlayCloseAnimation ( )
{
	static UFunction* pFnPlayCloseAnimation = NULL;

	if ( ! pFnPlayCloseAnimation )
		pFnPlayCloseAnimation = (UFunction*) UObject::GObjObjects()->Data[ 83949 ];

	UR_GFxUIScoreboard_execPlayCloseAnimation_Parms PlayCloseAnimation_Parms;

	this->ProcessEvent ( pFnPlayCloseAnimation, &PlayCloseAnimation_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.InvitePlayer
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxUIScoreboard::InvitePlayer ( struct FEventData ev )
{
	static UFunction* pFnInvitePlayer = NULL;

	if ( ! pFnInvitePlayer )
		pFnInvitePlayer = (UFunction*) UObject::GObjObjects()->Data[ 83947 ];

	UR_GFxUIScoreboard_execInvitePlayer_Parms InvitePlayer_Parms;
	memcpy ( &InvitePlayer_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnInvitePlayer, &InvitePlayer_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.MutePlayer
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxUIScoreboard::MutePlayer ( struct FEventData ev )
{
	static UFunction* pFnMutePlayer = NULL;

	if ( ! pFnMutePlayer )
		pFnMutePlayer = (UFunction*) UObject::GObjObjects()->Data[ 83945 ];

	UR_GFxUIScoreboard_execMutePlayer_Parms MutePlayer_Parms;
	memcpy ( &MutePlayer_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnMutePlayer, &MutePlayer_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.KickPlayer
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxUIScoreboard::KickPlayer ( struct FEventData ev )
{
	static UFunction* pFnKickPlayer = NULL;

	if ( ! pFnKickPlayer )
		pFnKickPlayer = (UFunction*) UObject::GObjObjects()->Data[ 83942 ];

	UR_GFxUIScoreboard_execKickPlayer_Parms KickPlayer_Parms;
	memcpy ( &KickPlayer_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnKickPlayer, &KickPlayer_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.BluePlayerSelected
// [0x00820002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxUIScoreboard::BluePlayerSelected ( struct FEventData ev )
{
	static UFunction* pFnBluePlayerSelected = NULL;

	if ( ! pFnBluePlayerSelected )
		pFnBluePlayerSelected = (UFunction*) UObject::GObjObjects()->Data[ 83939 ];

	UR_GFxUIScoreboard_execBluePlayerSelected_Parms BluePlayerSelected_Parms;
	memcpy ( &BluePlayerSelected_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnBluePlayerSelected, &BluePlayerSelected_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.RedPlayerSelected
// [0x00820002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void UR_GFxUIScoreboard::RedPlayerSelected ( struct FEventData ev )
{
	static UFunction* pFnRedPlayerSelected = NULL;

	if ( ! pFnRedPlayerSelected )
		pFnRedPlayerSelected = (UFunction*) UObject::GObjObjects()->Data[ 83936 ];

	UR_GFxUIScoreboard_execRedPlayerSelected_Parms RedPlayerSelected_Parms;
	memcpy ( &RedPlayerSelected_Parms.ev, &ev, 0x28 );

	this->ProcessEvent ( pFnRedPlayerSelected, &RedPlayerSelected_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.PlayOpenAnimation
// [0x00020002] 
// Parameters infos:

void UR_GFxUIScoreboard::PlayOpenAnimation ( )
{
	static UFunction* pFnPlayOpenAnimation = NULL;

	if ( ! pFnPlayOpenAnimation )
		pFnPlayOpenAnimation = (UFunction*) UObject::GObjObjects()->Data[ 83935 ];

	UR_GFxUIScoreboard_execPlayOpenAnimation_Parms PlayOpenAnimation_Parms;

	this->ProcessEvent ( pFnPlayOpenAnimation, &PlayOpenAnimation_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.SetList
// [0x00020002] 
// Parameters infos:
// class UGFxClikWidget*          InList                         ( CPF_Parm )

void UR_GFxUIScoreboard::SetList ( class UGFxClikWidget* InList )
{
	static UFunction* pFnSetList = NULL;

	if ( ! pFnSetList )
		pFnSetList = (UFunction*) UObject::GObjObjects()->Data[ 83933 ];

	UR_GFxUIScoreboard_execSetList_Parms SetList_Parms;
	SetList_Parms.InList = InList;

	this->ProcessEvent ( pFnSetList, &SetList_Parms, NULL );
};

// Function RavagedGame.R_GFxUIScoreboard.Start
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  StartPaused                    ( CPF_OptionalParm | CPF_Parm )

bool UR_GFxUIScoreboard::Start ( unsigned long StartPaused )
{
	static UFunction* pFnStart = NULL;

	if ( ! pFnStart )
		pFnStart = (UFunction*) UObject::GObjObjects()->Data[ 83930 ];

	UR_GFxUIScoreboard_execStart_Parms Start_Parms;
	Start_Parms.StartPaused = StartPaused;

	this->ProcessEvent ( pFnStart, &Start_Parms, NULL );

	return Start_Parms.ReturnValue;
};

// Function RavagedGame.R_GFxUIScoreboard.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool UR_GFxUIScoreboard::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 83924 ];

	UR_GFxUIScoreboard_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle_Pad.RegenVehicle
// [0x00820002] 
// Parameters infos:
// class AR_Vehicle*              veh                            ( CPF_Parm )
// float                          DT                             ( CPF_Parm )

void AR_Vehicle_Pad::RegenVehicle ( class AR_Vehicle* veh, float DT )
{
	static UFunction* pFnRegenVehicle = NULL;

	if ( ! pFnRegenVehicle )
		pFnRegenVehicle = (UFunction*) UObject::GObjObjects()->Data[ 84200 ];

	AR_Vehicle_Pad_execRegenVehicle_Parms RegenVehicle_Parms;
	RegenVehicle_Parms.veh = veh;
	RegenVehicle_Parms.DT = DT;

	this->ProcessEvent ( pFnRegenVehicle, &RegenVehicle_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Pad.CheckPawns
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Vehicle_Pad::CheckPawns ( )
{
	static UFunction* pFnCheckPawns = NULL;

	if ( ! pFnCheckPawns )
		pFnCheckPawns = (UFunction*) UObject::GObjObjects()->Data[ 84194 ];

	AR_Vehicle_Pad_execCheckPawns_Parms CheckPawns_Parms;

	this->ProcessEvent ( pFnCheckPawns, &CheckPawns_Parms, NULL );

	return CheckPawns_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle_Helicopter.IdleUpEngineTimer
// [0x00020102] 
// Parameters infos:

void AR_Vehicle_Helicopter::IdleUpEngineTimer ( )
{
	static UFunction* pFnIdleUpEngineTimer = NULL;

	if ( ! pFnIdleUpEngineTimer )
		pFnIdleUpEngineTimer = (UFunction*) UObject::GObjObjects()->Data[ 87490 ];

	AR_Vehicle_Helicopter_execIdleUpEngineTimer_Parms IdleUpEngineTimer_Parms;

	this->ProcessEvent ( pFnIdleUpEngineTimer, &IdleUpEngineTimer_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Helicopter.DrivingStatusChanged
// [0x00020102] 
// Parameters infos:

void AR_Vehicle_Helicopter::DrivingStatusChanged ( )
{
	static UFunction* pFnDrivingStatusChanged = NULL;

	if ( ! pFnDrivingStatusChanged )
		pFnDrivingStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 87489 ];

	AR_Vehicle_Helicopter_execDrivingStatusChanged_Parms DrivingStatusChanged_Parms;

	this->ProcessEvent ( pFnDrivingStatusChanged, &DrivingStatusChanged_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Helicopter.ProcessViewRotation
// [0x00420102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void AR_Vehicle_Helicopter::ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 87485 ];

	AR_Vehicle_Helicopter_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );
};

// Function RavagedGame.R_Vehicle_Helicopter.SitDriver
// [0x00020102] 
// Parameters infos:
// class AUTPawn*                 UTP                            ( CPF_Parm )
// int                            SeatIndex                      ( CPF_Parm )

void AR_Vehicle_Helicopter::SitDriver ( class AUTPawn* UTP, int SeatIndex )
{
	static UFunction* pFnSitDriver = NULL;

	if ( ! pFnSitDriver )
		pFnSitDriver = (UFunction*) UObject::GObjObjects()->Data[ 87482 ];

	AR_Vehicle_Helicopter_execSitDriver_Parms SitDriver_Parms;
	SitDriver_Parms.UTP = UTP;
	SitDriver_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnSitDriver, &SitDriver_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Helicopter.PassengerEnter
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// int                            SeatIndex                      ( CPF_Parm )

bool AR_Vehicle_Helicopter::PassengerEnter ( class APawn* P, int SeatIndex )
{
	static UFunction* pFnPassengerEnter = NULL;

	if ( ! pFnPassengerEnter )
		pFnPassengerEnter = (UFunction*) UObject::GObjObjects()->Data[ 87478 ];

	AR_Vehicle_Helicopter_execPassengerEnter_Parms PassengerEnter_Parms;
	PassengerEnter_Parms.P = P;
	PassengerEnter_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnPassengerEnter, &PassengerEnter_Parms, NULL );

	return PassengerEnter_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle_Helicopter.PassengerLeave
// [0x00020002] 
// Parameters infos:
// int                            SeatIndex                      ( CPF_Parm )

void AR_Vehicle_Helicopter::PassengerLeave ( int SeatIndex )
{
	static UFunction* pFnPassengerLeave = NULL;

	if ( ! pFnPassengerLeave )
		pFnPassengerLeave = (UFunction*) UObject::GObjObjects()->Data[ 87476 ];

	AR_Vehicle_Helicopter_execPassengerLeave_Parms PassengerLeave_Parms;
	PassengerLeave_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnPassengerLeave, &PassengerLeave_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Helicopter.DriverLeft
// [0x00020002] 
// Parameters infos:

void AR_Vehicle_Helicopter::DriverLeft ( )
{
	static UFunction* pFnDriverLeft = NULL;

	if ( ! pFnDriverLeft )
		pFnDriverLeft = (UFunction*) UObject::GObjObjects()->Data[ 87475 ];

	AR_Vehicle_Helicopter_execDriverLeft_Parms DriverLeft_Parms;

	this->ProcessEvent ( pFnDriverLeft, &DriverLeft_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Helicopter.ResetTurningSpeed
// [0x00020102] 
// Parameters infos:

void AR_Vehicle_Helicopter::ResetTurningSpeed ( )
{
	static UFunction* pFnResetTurningSpeed = NULL;

	if ( ! pFnResetTurningSpeed )
		pFnResetTurningSpeed = (UFunction*) UObject::GObjObjects()->Data[ 87474 ];

	AR_Vehicle_Helicopter_execResetTurningSpeed_Parms ResetTurningSpeed_Parms;

	this->ProcessEvent ( pFnResetTurningSpeed, &ResetTurningSpeed_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Helicopter.RigidBodyCollision
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     HitComponent                   ( CPF_Parm | CPF_EditInline )
// class UPrimitiveComponent*     OtherComponent                 ( CPF_Parm | CPF_EditInline )
// int                            ContactIndex                   ( CPF_Parm )
// struct FCollisionImpactData    RigidCollisionData             ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AR_Vehicle_Helicopter::eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData )
{
	static UFunction* pFnRigidBodyCollision = NULL;

	if ( ! pFnRigidBodyCollision )
		pFnRigidBodyCollision = (UFunction*) UObject::GObjObjects()->Data[ 87469 ];

	AR_Vehicle_Helicopter_eventRigidBodyCollision_Parms RigidBodyCollision_Parms;
	RigidBodyCollision_Parms.HitComponent = HitComponent;
	RigidBodyCollision_Parms.OtherComponent = OtherComponent;
	RigidBodyCollision_Parms.ContactIndex = ContactIndex;

	this->ProcessEvent ( pFnRigidBodyCollision, &RigidBodyCollision_Parms, NULL );

	if ( RigidCollisionData )
		memcpy ( RigidCollisionData, &RigidBodyCollision_Parms.RigidCollisionData, 0x24 );
};

// Function RavagedGame.R_Vehicle_Helicopter.Tick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void AR_Vehicle_Helicopter::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 87464 ];

	AR_Vehicle_Helicopter_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Helicopter.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AR_Vehicle_Helicopter::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 87462 ];

	AR_Vehicle_Helicopter_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Helicopter.SetAirInputParams
// [0x00020002] 
// Parameters infos:
// float                          NewSensitivity                 ( CPF_Parm )
// unsigned long                  bMousePowerCurve               ( CPF_Parm )
// unsigned long                  bIsServer                      ( CPF_Parm )

void AR_Vehicle_Helicopter::SetAirInputParams ( float NewSensitivity, unsigned long bMousePowerCurve, unsigned long bIsServer )
{
	static UFunction* pFnSetAirInputParams = NULL;

	if ( ! pFnSetAirInputParams )
		pFnSetAirInputParams = (UFunction*) UObject::GObjObjects()->Data[ 87457 ];

	AR_Vehicle_Helicopter_execSetAirInputParams_Parms SetAirInputParams_Parms;
	SetAirInputParams_Parms.NewSensitivity = NewSensitivity;
	SetAirInputParams_Parms.bMousePowerCurve = bMousePowerCurve;
	SetAirInputParams_Parms.bIsServer = bIsServer;

	this->ProcessEvent ( pFnSetAirInputParams, &SetAirInputParams_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Helicopter.DisplayDebug
// [0x00C20102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AR_Vehicle_Helicopter::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 87447 ];

	AR_Vehicle_Helicopter_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function RavagedGame.R_OutOfBoundsArrowComponent.Update
// [0x00820002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void UR_OutOfBoundsArrowComponent::Update ( class APlayerController* PC )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 84222 ];

	UR_OutOfBoundsArrowComponent_execUpdate_Parms Update_Parms;
	Update_Parms.PC = PC;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function RavagedGame.R_UTGFxTeamHUD.GetRank
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

struct FString UR_UTGFxTeamHUD::GetRank ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnGetRank = NULL;

	if ( ! pFnGetRank )
		pFnGetRank = (UFunction*) UObject::GObjObjects()->Data[ 86818 ];

	UR_UTGFxTeamHUD_execGetRank_Parms GetRank_Parms;
	GetRank_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetRank, &GetRank_Parms, NULL );

	return GetRank_Parms.ReturnValue;
};

// Function RavagedGame.R_UTGFxTeamHUD.UpdateGameHUD
// [0x00820002] 
// Parameters infos:
// class AUTPlayerReplicationInfo* PRI                            ( CPF_Parm )

void UR_UTGFxTeamHUD::UpdateGameHUD ( class AUTPlayerReplicationInfo* PRI )
{
	static UFunction* pFnUpdateGameHUD = NULL;

	if ( ! pFnUpdateGameHUD )
		pFnUpdateGameHUD = (UFunction*) UObject::GObjObjects()->Data[ 86811 ];

	UR_UTGFxTeamHUD_execUpdateGameHUD_Parms UpdateGameHUD_Parms;
	UpdateGameHUD_Parms.PRI = PRI;

	this->ProcessEvent ( pFnUpdateGameHUD, &UpdateGameHUD_Parms, NULL );
};

// Function RavagedGame.R_MusicManager.ChangeTrack
// [0x00020000] 
// Parameters infos:
// unsigned char                  NewState                       ( CPF_Parm )

void AR_MusicManager::ChangeTrack ( unsigned char NewState )
{
	static UFunction* pFnChangeTrack = NULL;

	if ( ! pFnChangeTrack )
		pFnChangeTrack = (UFunction*) UObject::GObjObjects()->Data[ 85093 ];

	AR_MusicManager_execChangeTrack_Parms ChangeTrack_Parms;
	ChangeTrack_Parms.NewState = NewState;

	this->ProcessEvent ( pFnChangeTrack, &ChangeTrack_Parms, NULL );
};

// Function RavagedGame.R_MusicManager.Tick
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void AR_MusicManager::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 85091 ];

	AR_MusicManager_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function RavagedGame.R_MusicManager.ProcessMusicEvent
// [0x00020000] 
// Parameters infos:

void AR_MusicManager::ProcessMusicEvent ( )
{
	static UFunction* pFnProcessMusicEvent = NULL;

	if ( ! pFnProcessMusicEvent )
		pFnProcessMusicEvent = (UFunction*) UObject::GObjObjects()->Data[ 85090 ];

	AR_MusicManager_execProcessMusicEvent_Parms ProcessMusicEvent_Parms;

	this->ProcessEvent ( pFnProcessMusicEvent, &ProcessMusicEvent_Parms, NULL );
};

// Function RavagedGame.R_MusicManager.MusicEvent
// [0x00020000] 
// Parameters infos:
// int                            NewEventIndex                  ( CPF_Parm )

void AR_MusicManager::MusicEvent ( int NewEventIndex )
{
	static UFunction* pFnMusicEvent = NULL;

	if ( ! pFnMusicEvent )
		pFnMusicEvent = (UFunction*) UObject::GObjObjects()->Data[ 85088 ];

	AR_MusicManager_execMusicEvent_Parms MusicEvent_Parms;
	MusicEvent_Parms.NewEventIndex = NewEventIndex;

	this->ProcessEvent ( pFnMusicEvent, &MusicEvent_Parms, NULL );
};

// Function RavagedGame.R_MusicManager.CreateNewTrack
// [0x00020002] 
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class USoundCue*               MusicCue                       ( CPF_Parm )

class UAudioComponent* AR_MusicManager::CreateNewTrack ( class USoundCue* MusicCue )
{
	static UFunction* pFnCreateNewTrack = NULL;

	if ( ! pFnCreateNewTrack )
		pFnCreateNewTrack = (UFunction*) UObject::GObjObjects()->Data[ 85085 ];

	AR_MusicManager_execCreateNewTrack_Parms CreateNewTrack_Parms;
	CreateNewTrack_Parms.MusicCue = MusicCue;

	this->ProcessEvent ( pFnCreateNewTrack, &CreateNewTrack_Parms, NULL );

	return CreateNewTrack_Parms.ReturnValue;
};

// Function RavagedGame.R_MusicManager.IntroFinished
// [0x00020000] 
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm | CPF_EditInline )

void AR_MusicManager::IntroFinished ( class UAudioComponent* AC )
{
	static UFunction* pFnIntroFinished = NULL;

	if ( ! pFnIntroFinished )
		pFnIntroFinished = (UFunction*) UObject::GObjObjects()->Data[ 85083 ];

	AR_MusicManager_execIntroFinished_Parms IntroFinished_Parms;
	IntroFinished_Parms.AC = AC;

	this->ProcessEvent ( pFnIntroFinished, &IntroFinished_Parms, NULL );
};

// Function RavagedGame.R_MusicManager.StartMusic
// [0x00020000] 
// Parameters infos:

void AR_MusicManager::StartMusic ( )
{
	static UFunction* pFnStartMusic = NULL;

	if ( ! pFnStartMusic )
		pFnStartMusic = (UFunction*) UObject::GObjObjects()->Data[ 85082 ];

	AR_MusicManager_execStartMusic_Parms StartMusic_Parms;

	this->ProcessEvent ( pFnStartMusic, &StartMusic_Parms, NULL );
};

// Function RavagedGame.R_MusicManager.PostBeginPlay
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AR_MusicManager::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 85081 ];

	AR_MusicManager_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_LeaderboardDataRead.GetData
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            Player                         ( CPF_Parm )

int UR_LeaderboardDataRead::GetData ( struct FUniqueNetId Player )
{
	static UFunction* pFnGetData = NULL;

	if ( ! pFnGetData )
		pFnGetData = (UFunction*) UObject::GObjObjects()->Data[ 84588 ];

	UR_LeaderboardDataRead_execGetData_Parms GetData_Parms;
	memcpy ( &GetData_Parms.Player, &Player, 0x8 );

	this->ProcessEvent ( pFnGetData, &GetData_Parms, NULL );

	return GetData_Parms.ReturnValue;
};

// Function RavagedGame.R_MapExtentVolume.GetCenterAndEdgeSize
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 VolumeCenter                   ( CPF_Parm | CPF_OutParm )
// float                          LargestEdge                    ( CPF_Parm | CPF_OutParm )

bool AR_MapExtentVolume::GetCenterAndEdgeSize ( struct FVector* VolumeCenter, float* LargestEdge )
{
	static UFunction* pFnGetCenterAndEdgeSize = NULL;

	if ( ! pFnGetCenterAndEdgeSize )
		pFnGetCenterAndEdgeSize = (UFunction*) UObject::GObjObjects()->Data[ 84608 ];

	AR_MapExtentVolume_execGetCenterAndEdgeSize_Parms GetCenterAndEdgeSize_Parms;

	this->ProcessEvent ( pFnGetCenterAndEdgeSize, &GetCenterAndEdgeSize_Parms, NULL );

	if ( VolumeCenter )
		memcpy ( VolumeCenter, &GetCenterAndEdgeSize_Parms.VolumeCenter, 0xC );

	if ( LargestEdge )
		*LargestEdge = GetCenterAndEdgeSize_Parms.LargestEdge;

	return GetCenterAndEdgeSize_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_CombatZone.AnnouncementSound
// [0x00022002] 
// Parameters infos:
// class USoundNodeWave*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            MessageIndex                   ( CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

class USoundNodeWave* UR_Message_CombatZone::AnnouncementSound ( int MessageIndex, class UObject* OptionalObject, class APlayerController* PC )
{
	static UFunction* pFnAnnouncementSound = NULL;

	if ( ! pFnAnnouncementSound )
		pFnAnnouncementSound = (UFunction*) UObject::GObjObjects()->Data[ 84680 ];

	UR_Message_CombatZone_execAnnouncementSound_Parms AnnouncementSound_Parms;
	AnnouncementSound_Parms.MessageIndex = MessageIndex;
	AnnouncementSound_Parms.OptionalObject = OptionalObject;
	AnnouncementSound_Parms.PC = PC;

	this->ProcessEvent ( pFnAnnouncementSound, &AnnouncementSound_Parms, NULL );

	return AnnouncementSound_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_CombatZone.ClientReceive
// [0x00026102] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void UR_Message_CombatZone::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnClientReceive = NULL;

	if ( ! pFnClientReceive )
		pFnClientReceive = (UFunction*) UObject::GObjObjects()->Data[ 84673 ];

	UR_Message_CombatZone_execClientReceive_Parms ClientReceive_Parms;
	ClientReceive_Parms.P = P;
	ClientReceive_Parms.Switch = Switch;
	ClientReceive_Parms.RelatedPRI = RelatedPRI;
	ClientReceive_Parms.RelatedPRI01 = RelatedPRI01;
	ClientReceive_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnClientReceive, &ClientReceive_Parms, NULL );
};

// Function RavagedGame.R_Message_CombatZone.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString UR_Message_CombatZone::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 84666 ];

	UR_Message_CombatZone_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function RavagedGame.R_Message_MatchAchievement.ClientReceive
// [0x00026102] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void UR_Message_MatchAchievement::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnClientReceive = NULL;

	if ( ! pFnClientReceive )
		pFnClientReceive = (UFunction*) UObject::GObjObjects()->Data[ 84776 ];

	UR_Message_MatchAchievement_execClientReceive_Parms ClientReceive_Parms;
	ClientReceive_Parms.P = P;
	ClientReceive_Parms.Switch = Switch;
	ClientReceive_Parms.RelatedPRI = RelatedPRI;
	ClientReceive_Parms.RelatedPRI01 = RelatedPRI01;
	ClientReceive_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnClientReceive, &ClientReceive_Parms, NULL );
};

// Function RavagedGame.R_Message_MatchAchievement.GetCustomString
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_Parm )
// struct FString                 StatStr                        ( CPF_Parm | CPF_NeedCtorLink )

struct FString UR_Message_MatchAchievement::GetCustomString ( int Switch, class APlayerReplicationInfo* RelatedPRI, struct FString StatStr )
{
	static UFunction* pFnGetCustomString = NULL;

	if ( ! pFnGetCustomString )
		pFnGetCustomString = (UFunction*) UObject::GObjObjects()->Data[ 84770 ];

	UR_Message_MatchAchievement_execGetCustomString_Parms GetCustomString_Parms;
	GetCustomString_Parms.Switch = Switch;
	GetCustomString_Parms.RelatedPRI = RelatedPRI;
	memcpy ( &GetCustomString_Parms.StatStr, &StatStr, 0xC );

	this->ProcessEvent ( pFnGetCustomString, &GetCustomString_Parms, NULL );

	return GetCustomString_Parms.ReturnValue;
};

// Function RavagedGame.R_Player_Attribute_Modifier.ApplyModifiersToPawn
// [0x00020002] 
// Parameters infos:
// class AR_Pawn*                 RP                             ( CPF_Parm )

void UR_Player_Attribute_Modifier::ApplyModifiersToPawn ( class AR_Pawn* RP )
{
	static UFunction* pFnApplyModifiersToPawn = NULL;

	if ( ! pFnApplyModifiersToPawn )
		pFnApplyModifiersToPawn = (UFunction*) UObject::GObjObjects()->Data[ 85706 ];

	UR_Player_Attribute_Modifier_execApplyModifiersToPawn_Parms ApplyModifiersToPawn_Parms;
	ApplyModifiersToPawn_Parms.RP = RP;

	this->ProcessEvent ( pFnApplyModifiersToPawn, &ApplyModifiersToPawn_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput_Spectator.NextWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput_Spectator::NextWeapon ( )
{
	static UFunction* pFnNextWeapon = NULL;

	if ( ! pFnNextWeapon )
		pFnNextWeapon = (UFunction*) UObject::GObjObjects()->Data[ 86322 ];

	UR_PlayerInput_Spectator_execNextWeapon_Parms NextWeapon_Parms;

	this->ProcessEvent ( pFnNextWeapon, &NextWeapon_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput_Spectator.PrevWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput_Spectator::PrevWeapon ( )
{
	static UFunction* pFnPrevWeapon = NULL;

	if ( ! pFnPrevWeapon )
		pFnPrevWeapon = (UFunction*) UObject::GObjObjects()->Data[ 86321 ];

	UR_PlayerInput_Spectator_execPrevWeapon_Parms PrevWeapon_Parms;

	this->ProcessEvent ( pFnPrevWeapon, &PrevWeapon_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput_Spectator.reload
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput_Spectator::reload ( )
{
	static UFunction* pFnreload = NULL;

	if ( ! pFnreload )
		pFnreload = (UFunction*) UObject::GObjObjects()->Data[ 86320 ];

	UR_PlayerInput_Spectator_execreload_Parms reload_Parms;

	this->ProcessEvent ( pFnreload, &reload_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput_Spectator.Use
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput_Spectator::Use ( )
{
	static UFunction* pFnUse = NULL;

	if ( ! pFnUse )
		pFnUse = (UFunction*) UObject::GObjObjects()->Data[ 86319 ];

	UR_PlayerInput_Spectator_execUse_Parms Use_Parms;

	this->ProcessEvent ( pFnUse, &Use_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput_Spectator.NextCamSpeed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput_Spectator::NextCamSpeed ( )
{
	static UFunction* pFnNextCamSpeed = NULL;

	if ( ! pFnNextCamSpeed )
		pFnNextCamSpeed = (UFunction*) UObject::GObjObjects()->Data[ 86318 ];

	UR_PlayerInput_Spectator_execNextCamSpeed_Parms NextCamSpeed_Parms;

	this->ProcessEvent ( pFnNextCamSpeed, &NextCamSpeed_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput_Spectator.UnSprint
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput_Spectator::UnSprint ( )
{
	static UFunction* pFnUnSprint = NULL;

	if ( ! pFnUnSprint )
		pFnUnSprint = (UFunction*) UObject::GObjObjects()->Data[ 86317 ];

	UR_PlayerInput_Spectator_execUnSprint_Parms UnSprint_Parms;

	this->ProcessEvent ( pFnUnSprint, &UnSprint_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput_Spectator.Sprint
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput_Spectator::Sprint ( )
{
	static UFunction* pFnSprint = NULL;

	if ( ! pFnSprint )
		pFnSprint = (UFunction*) UObject::GObjObjects()->Data[ 86316 ];

	UR_PlayerInput_Spectator_execSprint_Parms Sprint_Parms;

	this->ProcessEvent ( pFnSprint, &Sprint_Parms, NULL );
};

// Function RavagedGame.R_PlayerInput_Spectator.ToggleViewCPs
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UR_PlayerInput_Spectator::ToggleViewCPs ( )
{
	static UFunction* pFnToggleViewCPs = NULL;

	if ( ! pFnToggleViewCPs )
		pFnToggleViewCPs = (UFunction*) UObject::GObjObjects()->Data[ 86315 ];

	UR_PlayerInput_Spectator_execToggleViewCPs_Parms ToggleViewCPs_Parms;

	this->ProcessEvent ( pFnToggleViewCPs, &ToggleViewCPs_Parms, NULL );
};

// Function RavagedGame.R_Proj_Arrow.ProcessTouch
// [0x00020102] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AR_Proj_Arrow::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 86442 ];

	AR_Proj_Arrow_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function RavagedGame.R_Proj_Arrow.Touch
// [0x00020922] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AR_Proj_Arrow::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 86437 ];

	AR_Proj_Arrow_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function RavagedGame.R_Proj_FastAndFalls.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AR_Proj_FastAndFalls::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 86469 ];

	AR_Proj_FastAndFalls_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function RavagedGame.R_Proj_FastAndFalls.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void AR_Proj_FastAndFalls::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 86467 ];

	AR_Proj_FastAndFalls_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function RavagedGame.R_Proj_Throwable.PhysicsVolumeChange
// [0x00020102] 
// Parameters infos:
// class APhysicsVolume*          NewVolume                      ( CPF_Parm )

void AR_Proj_Throwable::PhysicsVolumeChange ( class APhysicsVolume* NewVolume )
{
	static UFunction* pFnPhysicsVolumeChange = NULL;

	if ( ! pFnPhysicsVolumeChange )
		pFnPhysicsVolumeChange = (UFunction*) UObject::GObjObjects()->Data[ 86489 ];

	AR_Proj_Throwable_execPhysicsVolumeChange_Parms PhysicsVolumeChange_Parms;
	PhysicsVolumeChange_Parms.NewVolume = NewVolume;

	this->ProcessEvent ( pFnPhysicsVolumeChange, &PhysicsVolumeChange_Parms, NULL );
};

// Function RavagedGame.R_Proj_Throwable.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void AR_Proj_Throwable::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 86485 ];

	AR_Proj_Throwable_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function RavagedGame.R_Proj_Throwable.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void AR_Proj_Throwable::Init ( struct FVector Direction )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 86483 ];

	AR_Proj_Throwable_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function RavagedGame.R_Proj_Throwable.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AR_Proj_Throwable::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 86482 ];

	AR_Proj_Throwable_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_Proj_Fused.ExplodeTimer
// [0x00020102] 
// Parameters infos:

void AR_Proj_Fused::ExplodeTimer ( )
{
	static UFunction* pFnExplodeTimer = NULL;

	if ( ! pFnExplodeTimer )
		pFnExplodeTimer = (UFunction*) UObject::GObjObjects()->Data[ 86496 ];

	AR_Proj_Fused_execExplodeTimer_Parms ExplodeTimer_Parms;

	this->ProcessEvent ( pFnExplodeTimer, &ExplodeTimer_Parms, NULL );
};

// Function RavagedGame.R_Proj_Fused.InitThrown
// [0x00020002] 
// Parameters infos:
// float                          ChargeRemaining                ( CPF_Parm )

void AR_Proj_Fused::InitThrown ( float ChargeRemaining )
{
	static UFunction* pFnInitThrown = NULL;

	if ( ! pFnInitThrown )
		pFnInitThrown = (UFunction*) UObject::GObjObjects()->Data[ 86494 ];

	AR_Proj_Fused_execInitThrown_Parms InitThrown_Parms;
	InitThrown_Parms.ChargeRemaining = ChargeRemaining;

	this->ProcessEvent ( pFnInitThrown, &InitThrown_Parms, NULL );
};

// Function RavagedGame.R_Proj_Rocket.UpdateSquirlyPath
// [0x00820102] 
// Parameters infos:

void AR_Proj_Rocket::UpdateSquirlyPath ( )
{
	static UFunction* pFnUpdateSquirlyPath = NULL;

	if ( ! pFnUpdateSquirlyPath )
		pFnUpdateSquirlyPath = (UFunction*) UObject::GObjObjects()->Data[ 86529 ];

	AR_Proj_Rocket_execUpdateSquirlyPath_Parms UpdateSquirlyPath_Parms;

	this->ProcessEvent ( pFnUpdateSquirlyPath, &UpdateSquirlyPath_Parms, NULL );
};

// Function RavagedGame.R_Proj_Rocket.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AR_Proj_Rocket::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 86528 ];

	AR_Proj_Rocket_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_Proj_Proximity_Rocket.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AR_Proj_Proximity_Rocket::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 86571 ];

	AR_Proj_Proximity_Rocket_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function RavagedGame.R_Proj_Proximity_Rocket.ProcessTouch
// [0x00020102] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AR_Proj_Proximity_Rocket::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 86567 ];

	AR_Proj_Proximity_Rocket_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function RavagedGame.R_Proj_Proximity_Rocket.VehicleCheckTimer
// [0x00020102] 
// Parameters infos:

void AR_Proj_Proximity_Rocket::VehicleCheckTimer ( )
{
	static UFunction* pFnVehicleCheckTimer = NULL;

	if ( ! pFnVehicleCheckTimer )
		pFnVehicleCheckTimer = (UFunction*) UObject::GObjObjects()->Data[ 86563 ];

	AR_Proj_Proximity_Rocket_execVehicleCheckTimer_Parms VehicleCheckTimer_Parms;

	this->ProcessEvent ( pFnVehicleCheckTimer, &VehicleCheckTimer_Parms, NULL );
};

// Function RavagedGame.R_Proj_Proximity_Rocket.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AR_Proj_Proximity_Rocket::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 86562 ];

	AR_Proj_Proximity_Rocket_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function RavagedGame.R_Resource_Depot.CheckPawns
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Resource_Depot::CheckPawns ( )
{
	static UFunction* pFnCheckPawns = NULL;

	if ( ! pFnCheckPawns )
		pFnCheckPawns = (UFunction*) UObject::GObjObjects()->Data[ 86621 ];

	AR_Resource_Depot_execCheckPawns_Parms CheckPawns_Parms;

	this->ProcessEvent ( pFnCheckPawns, &CheckPawns_Parms, NULL );

	return CheckPawns_Parms.ReturnValue;
};

// Function RavagedGame.R_Vehicle_Motorcycle.VehicleWeaponImpactEffects
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            SeatIndex                      ( CPF_Parm )

void AR_Vehicle_Motorcycle::VehicleWeaponImpactEffects ( struct FVector HitLocation, int SeatIndex )
{
	static UFunction* pFnVehicleWeaponImpactEffects = NULL;

	if ( ! pFnVehicleWeaponImpactEffects )
		pFnVehicleWeaponImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 87782 ];

	AR_Vehicle_Motorcycle_execVehicleWeaponImpactEffects_Parms VehicleWeaponImpactEffects_Parms;
	memcpy ( &VehicleWeaponImpactEffects_Parms.HitLocation, &HitLocation, 0xC );
	VehicleWeaponImpactEffects_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnVehicleWeaponImpactEffects, &VehicleWeaponImpactEffects_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Motorcycle.SitDriver
// [0x00020102] 
// Parameters infos:
// class AUTPawn*                 UTP                            ( CPF_Parm )
// int                            SeatIndex                      ( CPF_Parm )

void AR_Vehicle_Motorcycle::SitDriver ( class AUTPawn* UTP, int SeatIndex )
{
	static UFunction* pFnSitDriver = NULL;

	if ( ! pFnSitDriver )
		pFnSitDriver = (UFunction*) UObject::GObjObjects()->Data[ 87779 ];

	AR_Vehicle_Motorcycle_execSitDriver_Parms SitDriver_Parms;
	SitDriver_Parms.UTP = UTP;
	SitDriver_Parms.SeatIndex = SeatIndex;

	this->ProcessEvent ( pFnSitDriver, &SitDriver_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Motorcycle.AttachDriver
// [0x00020102] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AR_Vehicle_Motorcycle::AttachDriver ( class APawn* P )
{
	static UFunction* pFnAttachDriver = NULL;

	if ( ! pFnAttachDriver )
		pFnAttachDriver = (UFunction*) UObject::GObjObjects()->Data[ 87776 ];

	AR_Vehicle_Motorcycle_execAttachDriver_Parms AttachDriver_Parms;
	AttachDriver_Parms.P = P;

	this->ProcessEvent ( pFnAttachDriver, &AttachDriver_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Motorcycle.RigidBodyCollision
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     HitComponent                   ( CPF_Parm | CPF_EditInline )
// class UPrimitiveComponent*     OtherComponent                 ( CPF_Parm | CPF_EditInline )
// int                            ContactIndex                   ( CPF_Parm )
// struct FCollisionImpactData    RigidCollisionData             ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AR_Vehicle_Motorcycle::eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData )
{
	static UFunction* pFnRigidBodyCollision = NULL;

	if ( ! pFnRigidBodyCollision )
		pFnRigidBodyCollision = (UFunction*) UObject::GObjObjects()->Data[ 87768 ];

	AR_Vehicle_Motorcycle_eventRigidBodyCollision_Parms RigidBodyCollision_Parms;
	RigidBodyCollision_Parms.HitComponent = HitComponent;
	RigidBodyCollision_Parms.OtherComponent = OtherComponent;
	RigidBodyCollision_Parms.ContactIndex = ContactIndex;

	this->ProcessEvent ( pFnRigidBodyCollision, &RigidBodyCollision_Parms, NULL );

	if ( RigidCollisionData )
		memcpy ( RigidCollisionData, &RigidBodyCollision_Parms.RigidCollisionData, 0x24 );
};

// Function RavagedGame.R_Vehicle_Motorcycle.CheckForces
// [0x00820102] 
// Parameters infos:

void AR_Vehicle_Motorcycle::CheckForces ( )
{
	static UFunction* pFnCheckForces = NULL;

	if ( ! pFnCheckForces )
		pFnCheckForces = (UFunction*) UObject::GObjObjects()->Data[ 87763 ];

	AR_Vehicle_Motorcycle_execCheckForces_Parms CheckForces_Parms;

	this->ProcessEvent ( pFnCheckForces, &CheckForces_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Motorcycle.ServerSteer
// [0x00020102] 
// Parameters infos:

void AR_Vehicle_Motorcycle::ServerSteer ( )
{
	static UFunction* pFnServerSteer = NULL;

	if ( ! pFnServerSteer )
		pFnServerSteer = (UFunction*) UObject::GObjObjects()->Data[ 87760 ];

	AR_Vehicle_Motorcycle_execServerSteer_Parms ServerSteer_Parms;

	this->ProcessEvent ( pFnServerSteer, &ServerSteer_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Motorcycle.UpdateSteeringWheel
// [0x00020002] 
// Parameters infos:

void AR_Vehicle_Motorcycle::UpdateSteeringWheel ( )
{
	static UFunction* pFnUpdateSteeringWheel = NULL;

	if ( ! pFnUpdateSteeringWheel )
		pFnUpdateSteeringWheel = (UFunction*) UObject::GObjObjects()->Data[ 87754 ];

	AR_Vehicle_Motorcycle_execUpdateSteeringWheel_Parms UpdateSteeringWheel_Parms;

	this->ProcessEvent ( pFnUpdateSteeringWheel, &UpdateSteeringWheel_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Motorcycle.SetInputsCycle
// [0x00020100] 
// Parameters infos:
// float                          InForward                      ( CPF_Parm )
// float                          InStrafe                       ( CPF_Parm )
// float                          InUp                           ( CPF_Parm )
// float                          aRoll                          ( CPF_Parm )

void AR_Vehicle_Motorcycle::SetInputsCycle ( float InForward, float InStrafe, float InUp, float aRoll )
{
	static UFunction* pFnSetInputsCycle = NULL;

	if ( ! pFnSetInputsCycle )
		pFnSetInputsCycle = (UFunction*) UObject::GObjObjects()->Data[ 87749 ];

	AR_Vehicle_Motorcycle_execSetInputsCycle_Parms SetInputsCycle_Parms;
	SetInputsCycle_Parms.InForward = InForward;
	SetInputsCycle_Parms.InStrafe = InStrafe;
	SetInputsCycle_Parms.InUp = InUp;
	SetInputsCycle_Parms.aRoll = aRoll;

	this->ProcessEvent ( pFnSetInputsCycle, &SetInputsCycle_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Motorcycle.TickSpecial
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DT                             ( CPF_Parm )

void AR_Vehicle_Motorcycle::eventTickSpecial ( float DT )
{
	static UFunction* pFnTickSpecial = NULL;

	if ( ! pFnTickSpecial )
		pFnTickSpecial = (UFunction*) UObject::GObjObjects()->Data[ 87747 ];

	AR_Vehicle_Motorcycle_eventTickSpecial_Parms TickSpecial_Parms;
	TickSpecial_Parms.DT = DT;

	this->ProcessEvent ( pFnTickSpecial, &TickSpecial_Parms, NULL );
};

// Function RavagedGame.R_Vehicle_Motorcycle.Timer
// [0x00020102] 
// Parameters infos:

void AR_Vehicle_Motorcycle::Timer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 87746 ];

	AR_Vehicle_Motorcycle_execTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function RavagedGame.R_VWeap_MotorCycleGun.GetAdjustedAim
// [0x00820102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator AR_VWeap_MotorCycleGun::GetAdjustedAim ( struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAim = NULL;

	if ( ! pFnGetAdjustedAim )
		pFnGetAdjustedAim = (UFunction*) UObject::GObjObjects()->Data[ 88058 ];

	AR_VWeap_MotorCycleGun_execGetAdjustedAim_Parms GetAdjustedAim_Parms;
	memcpy ( &GetAdjustedAim_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAim, &GetAdjustedAim_Parms, NULL );

	return GetAdjustedAim_Parms.ReturnValue;
};

// Function RavagedGame.R_VWeap_Seat.EndFire
// [0x00020100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_VWeap_Seat::EndFire ( unsigned char FireModeNum )
{
	static UFunction* pFnEndFire = NULL;

	if ( ! pFnEndFire )
		pFnEndFire = (UFunction*) UObject::GObjObjects()->Data[ 88096 ];

	AR_VWeap_Seat_execEndFire_Parms EndFire_Parms;
	EndFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnEndFire, &EndFire_Parms, NULL );
};

// Function RavagedGame.R_VWeap_Seat.StartFire
// [0x00020100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_VWeap_Seat::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 88094 ];

	AR_VWeap_Seat_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function RavagedGame.R_VWeap_Seat.DrawWeaponCrosshair
// [0x00020100] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )

void AR_VWeap_Seat::DrawWeaponCrosshair ( class AHUD* HUD )
{
	static UFunction* pFnDrawWeaponCrosshair = NULL;

	if ( ! pFnDrawWeaponCrosshair )
		pFnDrawWeaponCrosshair = (UFunction*) UObject::GObjObjects()->Data[ 88092 ];

	AR_VWeap_Seat_execDrawWeaponCrosshair_Parms DrawWeaponCrosshair_Parms;
	DrawWeaponCrosshair_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDrawWeaponCrosshair, &DrawWeaponCrosshair_Parms, NULL );
};

// Function RavagedGame.R_VWeap_Seat_Lean.EndFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_VWeap_Seat_Lean::EndFire ( unsigned char FireModeNum )
{
	static UFunction* pFnEndFire = NULL;

	if ( ! pFnEndFire )
		pFnEndFire = (UFunction*) UObject::GObjObjects()->Data[ 88121 ];

	AR_VWeap_Seat_Lean_execEndFire_Parms EndFire_Parms;
	EndFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnEndFire, &EndFire_Parms, NULL );
};

// Function RavagedGame.R_VWeap_Seat_Lean.StartFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AR_VWeap_Seat_Lean::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 88119 ];

	AR_VWeap_Seat_Lean_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function RavagedGame.R_Weap_BotRifle.BestMode
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AR_Weap_BotRifle::BestMode ( )
{
	static UFunction* pFnBestMode = NULL;

	if ( ! pFnBestMode )
		pFnBestMode = (UFunction*) UObject::GObjObjects()->Data[ 88844 ];

	AR_Weap_BotRifle_execBestMode_Parms BestMode_Parms;

	this->ProcessEvent ( pFnBestMode, &BestMode_Parms, NULL );

	return BestMode_Parms.ReturnValue;
};

// Function RavagedGame.R_Weap_BotRifle.RecommendRangedAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AR_Weap_BotRifle::RecommendRangedAttack ( )
{
	static UFunction* pFnRecommendRangedAttack = NULL;

	if ( ! pFnRecommendRangedAttack )
		pFnRecommendRangedAttack = (UFunction*) UObject::GObjObjects()->Data[ 88841 ];

	AR_Weap_BotRifle_execRecommendRangedAttack_Parms RecommendRangedAttack_Parms;

	this->ProcessEvent ( pFnRecommendRangedAttack, &RecommendRangedAttack_Parms, NULL );

	return RecommendRangedAttack_Parms.ReturnValue;
};

// Function RavagedGame.R_Weap_BotRifle.GetAIRating
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AR_Weap_BotRifle::GetAIRating ( )
{
	static UFunction* pFnGetAIRating = NULL;

	if ( ! pFnGetAIRating )
		pFnGetAIRating = (UFunction*) UObject::GObjObjects()->Data[ 88835 ];

	AR_Weap_BotRifle_execGetAIRating_Parms GetAIRating_Parms;

	this->ProcessEvent ( pFnGetAIRating, &GetAIRating_Parms, NULL );

	return GetAIRating_Parms.ReturnValue;
};

// Function RavagedGame.R_Weap_BotRifle.SuggestDefenseStyle
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AR_Weap_BotRifle::SuggestDefenseStyle ( )
{
	static UFunction* pFnSuggestDefenseStyle = NULL;

	if ( ! pFnSuggestDefenseStyle )
		pFnSuggestDefenseStyle = (UFunction*) UObject::GObjObjects()->Data[ 88833 ];

	AR_Weap_BotRifle_execSuggestDefenseStyle_Parms SuggestDefenseStyle_Parms;

	this->ProcessEvent ( pFnSuggestDefenseStyle, &SuggestDefenseStyle_Parms, NULL );

	return SuggestDefenseStyle_Parms.ReturnValue;
};

// Function RavagedGame.R_Weap_BotRifle.SuggestAttackStyle
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AR_Weap_BotRifle::SuggestAttackStyle ( )
{
	static UFunction* pFnSuggestAttackStyle = NULL;

	if ( ! pFnSuggestAttackStyle )
		pFnSuggestAttackStyle = (UFunction*) UObject::GObjObjects()->Data[ 88831 ];

	AR_Weap_BotRifle_execSuggestAttackStyle_Parms SuggestAttackStyle_Parms;

	this->ProcessEvent ( pFnSuggestAttackStyle, &SuggestAttackStyle_Parms, NULL );

	return SuggestAttackStyle_Parms.ReturnValue;
};


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif