/*
#############################################################################################
# Sanctum (Unknown) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: Sanctum_functions.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Functions
# ========================================================================================= #
*/

// Function Sanctum.SanctumAudioManagerBase.DisplayDebug
// [0x00420100] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void USanctumAudioManagerBase::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 45203 ];

	USanctumAudioManagerBase_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Sanctum.SanctumAudioManagerBase.PlayGibSound
// [0x00020000] 
// Parameters infos:
// class USoundCue*               Sound                          ( CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_Parm )

void USanctumAudioManagerBase::PlayGibSound ( class USoundCue* Sound, struct FVector SoundLocation )
{
	static UFunction* pFnPlayGibSound = NULL;

	if ( ! pFnPlayGibSound )
		pFnPlayGibSound = (UFunction*) UObject::GObjObjects()->Data[ 45200 ];

	USanctumAudioManagerBase_execPlayGibSound_Parms PlayGibSound_Parms;
	PlayGibSound_Parms.Sound = Sound;
	memcpy ( &PlayGibSound_Parms.SoundLocation, &SoundLocation, 0xC );

	this->ProcessEvent ( pFnPlayGibSound, &PlayGibSound_Parms, NULL );
};

// Function Sanctum.SanctumAudioManagerBase.PlayDyingSound
// [0x00020000] 
// Parameters infos:
// class USoundCue*               Sound                          ( CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_Parm )

void USanctumAudioManagerBase::PlayDyingSound ( class USoundCue* Sound, struct FVector SoundLocation )
{
	static UFunction* pFnPlayDyingSound = NULL;

	if ( ! pFnPlayDyingSound )
		pFnPlayDyingSound = (UFunction*) UObject::GObjObjects()->Data[ 45197 ];

	USanctumAudioManagerBase_execPlayDyingSound_Parms PlayDyingSound_Parms;
	PlayDyingSound_Parms.Sound = Sound;
	memcpy ( &PlayDyingSound_Parms.SoundLocation, &SoundLocation, 0xC );

	this->ProcessEvent ( pFnPlayDyingSound, &PlayDyingSound_Parms, NULL );
};

// Function Sanctum.SanctumAudioManagerBase.PlayTakeHitSound
// [0x00020000] 
// Parameters infos:
// class USoundCue*               Sound                          ( CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_Parm )

void USanctumAudioManagerBase::PlayTakeHitSound ( class USoundCue* Sound, struct FVector SoundLocation )
{
	static UFunction* pFnPlayTakeHitSound = NULL;

	if ( ! pFnPlayTakeHitSound )
		pFnPlayTakeHitSound = (UFunction*) UObject::GObjObjects()->Data[ 45194 ];

	USanctumAudioManagerBase_execPlayTakeHitSound_Parms PlayTakeHitSound_Parms;
	PlayTakeHitSound_Parms.Sound = Sound;
	memcpy ( &PlayTakeHitSound_Parms.SoundLocation, &SoundLocation, 0xC );

	this->ProcessEvent ( pFnPlayTakeHitSound, &PlayTakeHitSound_Parms, NULL );
};

// Function Sanctum.SanctumAudioManagerBase.PlayMortarExplotionSound
// [0x00020000] 
// Parameters infos:
// class USoundCue*               Sound                          ( CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_Parm )

void USanctumAudioManagerBase::PlayMortarExplotionSound ( class USoundCue* Sound, struct FVector SoundLocation )
{
	static UFunction* pFnPlayMortarExplotionSound = NULL;

	if ( ! pFnPlayMortarExplotionSound )
		pFnPlayMortarExplotionSound = (UFunction*) UObject::GObjObjects()->Data[ 45191 ];

	USanctumAudioManagerBase_execPlayMortarExplotionSound_Parms PlayMortarExplotionSound_Parms;
	PlayMortarExplotionSound_Parms.Sound = Sound;
	memcpy ( &PlayMortarExplotionSound_Parms.SoundLocation, &SoundLocation, 0xC );

	this->ProcessEvent ( pFnPlayMortarExplotionSound, &PlayMortarExplotionSound_Parms, NULL );
};

// Function Sanctum.SanctumAudioManagerBase.PlayImmuneSound
// [0x00020000] 
// Parameters infos:
// class USoundCue*               Sound                          ( CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_Parm )
// class AActor*                  InstigatedBy                   ( CPF_Parm )

void USanctumAudioManagerBase::PlayImmuneSound ( class USoundCue* Sound, struct FVector SoundLocation, class AActor* InstigatedBy )
{
	static UFunction* pFnPlayImmuneSound = NULL;

	if ( ! pFnPlayImmuneSound )
		pFnPlayImmuneSound = (UFunction*) UObject::GObjObjects()->Data[ 45187 ];

	USanctumAudioManagerBase_execPlayImmuneSound_Parms PlayImmuneSound_Parms;
	PlayImmuneSound_Parms.Sound = Sound;
	memcpy ( &PlayImmuneSound_Parms.SoundLocation, &SoundLocation, 0xC );
	PlayImmuneSound_Parms.InstigatedBy = InstigatedBy;

	this->ProcessEvent ( pFnPlayImmuneSound, &PlayImmuneSound_Parms, NULL );
};

// Function Sanctum.SanctumAudioManagerBase.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void USanctumAudioManagerBase::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 45185 ];

	USanctumAudioManagerBase_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumEngineBase.InitializeEngine
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USanctumEngineBase::eventInitializeEngine ( )
{
	static UFunction* pFnInitializeEngine = NULL;

	if ( ! pFnInitializeEngine )
		pFnInitializeEngine = (UFunction*) UObject::GObjObjects()->Data[ 47883 ];

	USanctumEngineBase_eventInitializeEngine_Parms InitializeEngine_Parms;

	this->ProcessEvent ( pFnInitializeEngine, &InitializeEngine_Parms, NULL );
};

// Function Sanctum.SanctumPawnBase.IsInOverviewMode
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumPawnBase::eventIsInOverviewMode ( )
{
	static UFunction* pFnIsInOverviewMode = NULL;

	if ( ! pFnIsInOverviewMode )
		pFnIsInOverviewMode = (UFunction*) UObject::GObjObjects()->Data[ 46629 ];

	ASanctumPawnBase_eventIsInOverviewMode_Parms IsInOverviewMode_Parms;

	this->ProcessEvent ( pFnIsInOverviewMode, &IsInOverviewMode_Parms, NULL );

	return IsInOverviewMode_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.GetCountryCode
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USanctumSteamHelper::GetCountryCode ( )
{
	static UFunction* pFnGetCountryCode = NULL;

	if ( ! pFnGetCountryCode )
		pFnGetCountryCode = (UFunction*) UObject::GObjObjects()->Data[ 46357 ];

	USanctumSteamHelper_execGetCountryCode_Parms GetCountryCode_Parms;

	pFnGetCountryCode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCountryCode, &GetCountryCode_Parms, NULL );

	pFnGetCountryCode->FunctionFlags |= 0x400;

	return GetCountryCode_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.IsVACBanned
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSteamHelper::IsVACBanned ( )
{
	static UFunction* pFnIsVACBanned = NULL;

	if ( ! pFnIsVACBanned )
		pFnIsVACBanned = (UFunction*) UObject::GObjObjects()->Data[ 53877 ];

	USanctumSteamHelper_execIsVACBanned_Parms IsVACBanned_Parms;

	pFnIsVACBanned->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsVACBanned, &IsVACBanned_Parms, NULL );

	pFnIsVACBanned->FunctionFlags |= 0x400;

	return IsVACBanned_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.IsValidUrl
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 URLString                      ( CPF_Parm | CPF_NeedCtorLink )

bool USanctumSteamHelper::IsValidUrl ( struct FString URLString )
{
	static UFunction* pFnIsValidUrl = NULL;

	if ( ! pFnIsValidUrl )
		pFnIsValidUrl = (UFunction*) UObject::GObjObjects()->Data[ 52897 ];

	USanctumSteamHelper_execIsValidUrl_Parms IsValidUrl_Parms;
	memcpy ( &IsValidUrl_Parms.URLString, &URLString, 0xC );

	pFnIsValidUrl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidUrl, &IsValidUrl_Parms, NULL );

	pFnIsValidUrl->FunctionFlags |= 0x400;

	return IsValidUrl_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.SteamIDToString
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FUniqueNetId            Id                             ( CPF_Parm )

struct FString USanctumSteamHelper::SteamIDToString ( struct FUniqueNetId Id )
{
	static UFunction* pFnSteamIDToString = NULL;

	if ( ! pFnSteamIDToString )
		pFnSteamIDToString = (UFunction*) UObject::GObjObjects()->Data[ 55605 ];

	USanctumSteamHelper_execSteamIDToString_Parms SteamIDToString_Parms;
	memcpy ( &SteamIDToString_Parms.Id, &Id, 0x8 );

	pFnSteamIDToString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSteamIDToString, &SteamIDToString_Parms, NULL );

	pFnSteamIDToString->FunctionFlags |= 0x400;

	return SteamIDToString_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.HasDLCWithAppID
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AppID                          ( CPF_Parm )

bool USanctumSteamHelper::HasDLCWithAppID ( int AppID )
{
	static UFunction* pFnHasDLCWithAppID = NULL;

	if ( ! pFnHasDLCWithAppID )
		pFnHasDLCWithAppID = (UFunction*) UObject::GObjObjects()->Data[ 55602 ];

	USanctumSteamHelper_execHasDLCWithAppID_Parms HasDLCWithAppID_Parms;
	HasDLCWithAppID_Parms.AppID = AppID;

	pFnHasDLCWithAppID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasDLCWithAppID, &HasDLCWithAppID_Parms, NULL );

	pFnHasDLCWithAppID->FunctionFlags |= 0x400;

	return HasDLCWithAppID_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.HasAcceleratorDLC
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSteamHelper::HasAcceleratorDLC ( )
{
	static UFunction* pFnHasAcceleratorDLC = NULL;

	if ( ! pFnHasAcceleratorDLC )
		pFnHasAcceleratorDLC = (UFunction*) UObject::GObjObjects()->Data[ 55600 ];

	USanctumSteamHelper_execHasAcceleratorDLC_Parms HasAcceleratorDLC_Parms;

	pFnHasAcceleratorDLC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasAcceleratorDLC, &HasAcceleratorDLC_Parms, NULL );

	pFnHasAcceleratorDLC->FunctionFlags |= 0x400;

	return HasAcceleratorDLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.HasChristmasDLC
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSteamHelper::HasChristmasDLC ( )
{
	static UFunction* pFnHasChristmasDLC = NULL;

	if ( ! pFnHasChristmasDLC )
		pFnHasChristmasDLC = (UFunction*) UObject::GObjObjects()->Data[ 45911 ];

	USanctumSteamHelper_execHasChristmasDLC_Parms HasChristmasDLC_Parms;

	pFnHasChristmasDLC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasChristmasDLC, &HasChristmasDLC_Parms, NULL );

	pFnHasChristmasDLC->FunctionFlags |= 0x400;

	return HasChristmasDLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.HasCavernDLC
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSteamHelper::HasCavernDLC ( )
{
	static UFunction* pFnHasCavernDLC = NULL;

	if ( ! pFnHasCavernDLC )
		pFnHasCavernDLC = (UFunction*) UObject::GObjObjects()->Data[ 45907 ];

	USanctumSteamHelper_execHasCavernDLC_Parms HasCavernDLC_Parms;

	pFnHasCavernDLC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasCavernDLC, &HasCavernDLC_Parms, NULL );

	pFnHasCavernDLC->FunctionFlags |= 0x400;

	return HasCavernDLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.HasViolatorDLC
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSteamHelper::HasViolatorDLC ( )
{
	static UFunction* pFnHasViolatorDLC = NULL;

	if ( ! pFnHasViolatorDLC )
		pFnHasViolatorDLC = (UFunction*) UObject::GObjObjects()->Data[ 55598 ];

	USanctumSteamHelper_execHasViolatorDLC_Parms HasViolatorDLC_Parms;

	pFnHasViolatorDLC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasViolatorDLC, &HasViolatorDLC_Parms, NULL );

	pFnHasViolatorDLC->FunctionFlags |= 0x400;

	return HasViolatorDLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.HasSlumsDLC
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSteamHelper::HasSlumsDLC ( )
{
	static UFunction* pFnHasSlumsDLC = NULL;

	if ( ! pFnHasSlumsDLC )
		pFnHasSlumsDLC = (UFunction*) UObject::GObjObjects()->Data[ 45905 ];

	USanctumSteamHelper_execHasSlumsDLC_Parms HasSlumsDLC_Parms;

	pFnHasSlumsDLC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasSlumsDLC, &HasSlumsDLC_Parms, NULL );

	pFnHasSlumsDLC->FunctionFlags |= 0x400;

	return HasSlumsDLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.HasBelowDLC
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSteamHelper::HasBelowDLC ( )
{
	static UFunction* pFnHasBelowDLC = NULL;

	if ( ! pFnHasBelowDLC )
		pFnHasBelowDLC = (UFunction*) UObject::GObjObjects()->Data[ 45909 ];

	USanctumSteamHelper_execHasBelowDLC_Parms HasBelowDLC_Parms;

	pFnHasBelowDLC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasBelowDLC, &HasBelowDLC_Parms, NULL );

	pFnHasBelowDLC->FunctionFlags |= 0x400;

	return HasBelowDLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.HasMine2DLC
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSteamHelper::HasMine2DLC ( )
{
	static UFunction* pFnHasMine2DLC = NULL;

	if ( ! pFnHasMine2DLC )
		pFnHasMine2DLC = (UFunction*) UObject::GObjObjects()->Data[ 45903 ];

	USanctumSteamHelper_execHasMine2DLC_Parms HasMine2DLC_Parms;

	pFnHasMine2DLC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasMine2DLC, &HasMine2DLC_Parms, NULL );

	pFnHasMine2DLC->FunctionFlags |= 0x400;

	return HasMine2DLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.HasPenetratorDLC
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSteamHelper::HasPenetratorDLC ( )
{
	static UFunction* pFnHasPenetratorDLC = NULL;

	if ( ! pFnHasPenetratorDLC )
		pFnHasPenetratorDLC = (UFunction*) UObject::GObjObjects()->Data[ 55596 ];

	USanctumSteamHelper_execHasPenetratorDLC_Parms HasPenetratorDLC_Parms;

	pFnHasPenetratorDLC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasPenetratorDLC, &HasPenetratorDLC_Parms, NULL );

	pFnHasPenetratorDLC->FunctionFlags |= 0x400;

	return HasPenetratorDLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.HasKillingFloorDLC
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSteamHelper::HasKillingFloorDLC ( )
{
	static UFunction* pFnHasKillingFloorDLC = NULL;

	if ( ! pFnHasKillingFloorDLC )
		pFnHasKillingFloorDLC = (UFunction*) UObject::GObjObjects()->Data[ 55594 ];

	USanctumSteamHelper_execHasKillingFloorDLC_Parms HasKillingFloorDLC_Parms;

	pFnHasKillingFloorDLC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasKillingFloorDLC, &HasKillingFloorDLC_Parms, NULL );

	pFnHasKillingFloorDLC->FunctionFlags |= 0x400;

	return HasKillingFloorDLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.HasBridge2DLC
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSteamHelper::HasBridge2DLC ( )
{
	static UFunction* pFnHasBridge2DLC = NULL;

	if ( ! pFnHasBridge2DLC )
		pFnHasBridge2DLC = (UFunction*) UObject::GObjObjects()->Data[ 45901 ];

	USanctumSteamHelper_execHasBridge2DLC_Parms HasBridge2DLC_Parms;

	pFnHasBridge2DLC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasBridge2DLC, &HasBridge2DLC_Parms, NULL );

	pFnHasBridge2DLC->FunctionFlags |= 0x400;

	return HasBridge2DLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.HasMonkeyCageDLC
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSteamHelper::HasMonkeyCageDLC ( )
{
	static UFunction* pFnHasMonkeyCageDLC = NULL;

	if ( ! pFnHasMonkeyCageDLC )
		pFnHasMonkeyCageDLC = (UFunction*) UObject::GObjObjects()->Data[ 52865 ];

	USanctumSteamHelper_execHasMonkeyCageDLC_Parms HasMonkeyCageDLC_Parms;

	pFnHasMonkeyCageDLC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasMonkeyCageDLC, &HasMonkeyCageDLC_Parms, NULL );

	pFnHasMonkeyCageDLC->FunctionFlags |= 0x400;

	return HasMonkeyCageDLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.HasFirstMapPack
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSteamHelper::HasFirstMapPack ( )
{
	static UFunction* pFnHasFirstMapPack = NULL;

	if ( ! pFnHasFirstMapPack )
		pFnHasFirstMapPack = (UFunction*) UObject::GObjObjects()->Data[ 55592 ];

	USanctumSteamHelper_execHasFirstMapPack_Parms HasFirstMapPack_Parms;

	pFnHasFirstMapPack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasFirstMapPack, &HasFirstMapPack_Parms, NULL );

	pFnHasFirstMapPack->FunctionFlags |= 0x400;

	return HasFirstMapPack_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.HasJournalistDLC
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSteamHelper::HasJournalistDLC ( )
{
	static UFunction* pFnHasJournalistDLC = NULL;

	if ( ! pFnHasJournalistDLC )
		pFnHasJournalistDLC = (UFunction*) UObject::GObjObjects()->Data[ 55590 ];

	USanctumSteamHelper_execHasJournalistDLC_Parms HasJournalistDLC_Parms;

	pFnHasJournalistDLC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasJournalistDLC, &HasJournalistDLC_Parms, NULL );

	pFnHasJournalistDLC->FunctionFlags |= 0x400;

	return HasJournalistDLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumSteamHelper.OpenStoreOverlayForDLC
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// int                            AppID                          ( CPF_Parm )

void USanctumSteamHelper::OpenStoreOverlayForDLC ( int AppID )
{
	static UFunction* pFnOpenStoreOverlayForDLC = NULL;

	if ( ! pFnOpenStoreOverlayForDLC )
		pFnOpenStoreOverlayForDLC = (UFunction*) UObject::GObjObjects()->Data[ 55588 ];

	USanctumSteamHelper_execOpenStoreOverlayForDLC_Parms OpenStoreOverlayForDLC_Parms;
	OpenStoreOverlayForDLC_Parms.AppID = AppID;

	pFnOpenStoreOverlayForDLC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenStoreOverlayForDLC, &OpenStoreOverlayForDLC_Parms, NULL );

	pFnOpenStoreOverlayForDLC->FunctionFlags |= 0x400;
};

// Function Sanctum.SanctumSteamHelper.OpenWebURL
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void USanctumSteamHelper::OpenWebURL ( struct FString URL )
{
	static UFunction* pFnOpenWebURL = NULL;

	if ( ! pFnOpenWebURL )
		pFnOpenWebURL = (UFunction*) UObject::GObjObjects()->Data[ 55586 ];

	USanctumSteamHelper_execOpenWebURL_Parms OpenWebURL_Parms;
	memcpy ( &OpenWebURL_Parms.URL, &URL, 0xC );

	pFnOpenWebURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenWebURL, &OpenWebURL_Parms, NULL );

	pFnOpenWebURL->FunctionFlags |= 0x400;
};

// Function Sanctum.SanctumSystemSettings.IsChristmas
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSystemSettings::IsChristmas ( )
{
	static UFunction* pFnIsChristmas = NULL;

	if ( ! pFnIsChristmas )
		pFnIsChristmas = (UFunction*) UObject::GObjObjects()->Data[ 46909 ];

	USanctumSystemSettings_execIsChristmas_Parms IsChristmas_Parms;

	pFnIsChristmas->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsChristmas, &IsChristmas_Parms, NULL );

	pFnIsChristmas->FunctionFlags |= 0x400;

	return IsChristmas_Parms.ReturnValue;
};

// Function Sanctum.SanctumSystemSettings.GetAvailableResolutions
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FString >       resolutionArray                ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USanctumSystemSettings::GetAvailableResolutions ( TArray< struct FString >* resolutionArray )
{
	static UFunction* pFnGetAvailableResolutions = NULL;

	if ( ! pFnGetAvailableResolutions )
		pFnGetAvailableResolutions = (UFunction*) UObject::GObjObjects()->Data[ 55667 ];

	USanctumSystemSettings_execGetAvailableResolutions_Parms GetAvailableResolutions_Parms;

	pFnGetAvailableResolutions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAvailableResolutions, &GetAvailableResolutions_Parms, NULL );

	pFnGetAvailableResolutions->FunctionFlags |= 0x400;

	if ( resolutionArray )
		memcpy ( resolutionArray, &GetAvailableResolutions_Parms.resolutionArray, 0xC );
};

// Function Sanctum.SanctumSystemSettings.GetCurrentLanguage
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USanctumSystemSettings::GetCurrentLanguage ( )
{
	static UFunction* pFnGetCurrentLanguage = NULL;

	if ( ! pFnGetCurrentLanguage )
		pFnGetCurrentLanguage = (UFunction*) UObject::GObjObjects()->Data[ 55665 ];

	USanctumSystemSettings_execGetCurrentLanguage_Parms GetCurrentLanguage_Parms;

	pFnGetCurrentLanguage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentLanguage, &GetCurrentLanguage_Parms, NULL );

	pFnGetCurrentLanguage->FunctionFlags |= 0x400;

	return GetCurrentLanguage_Parms.ReturnValue;
};

// Function Sanctum.SanctumSystemSettings.SetLanguage
// [0x00026400] ( FUNC_Native )
// Parameters infos:
// struct FString                 lang                           ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  reloadObjects                  ( CPF_OptionalParm | CPF_Parm )

void USanctumSystemSettings::SetLanguage ( struct FString lang, unsigned long reloadObjects )
{
	static UFunction* pFnSetLanguage = NULL;

	if ( ! pFnSetLanguage )
		pFnSetLanguage = (UFunction*) UObject::GObjObjects()->Data[ 55662 ];

	USanctumSystemSettings_execSetLanguage_Parms SetLanguage_Parms;
	memcpy ( &SetLanguage_Parms.lang, &lang, 0xC );
	SetLanguage_Parms.reloadObjects = reloadObjects;

	pFnSetLanguage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLanguage, &SetLanguage_Parms, NULL );

	pFnSetLanguage->FunctionFlags |= 0x400;
};

// Function Sanctum.SanctumSystemSettings.GetPurgedObjectCount
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USanctumSystemSettings::GetPurgedObjectCount ( )
{
	static UFunction* pFnGetPurgedObjectCount = NULL;

	if ( ! pFnGetPurgedObjectCount )
		pFnGetPurgedObjectCount = (UFunction*) UObject::GObjObjects()->Data[ 50267 ];

	USanctumSystemSettings_execGetPurgedObjectCount_Parms GetPurgedObjectCount_Parms;

	pFnGetPurgedObjectCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPurgedObjectCount, &GetPurgedObjectCount_Parms, NULL );

	pFnGetPurgedObjectCount->FunctionFlags |= 0x400;

	return GetPurgedObjectCount_Parms.ReturnValue;
};

// Function Sanctum.SanctumSystemSettings.GetObjectCount
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USanctumSystemSettings::GetObjectCount ( )
{
	static UFunction* pFnGetObjectCount = NULL;

	if ( ! pFnGetObjectCount )
		pFnGetObjectCount = (UFunction*) UObject::GObjObjects()->Data[ 50265 ];

	USanctumSystemSettings_execGetObjectCount_Parms GetObjectCount_Parms;

	pFnGetObjectCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetObjectCount, &GetObjectCount_Parms, NULL );

	pFnGetObjectCount->FunctionFlags |= 0x400;

	return GetObjectCount_Parms.ReturnValue;
};

// Function Sanctum.SanctumSystemSettings.GetSupportedLanguages
// [0x00422002] 
// Parameters infos:
// TArray< struct FString >       langArray                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// int                            SelectedIndex                  ( CPF_Parm | CPF_OutParm )

void USanctumSystemSettings::GetSupportedLanguages ( TArray< struct FString >* langArray, int* SelectedIndex )
{
	static UFunction* pFnGetSupportedLanguages = NULL;

	if ( ! pFnGetSupportedLanguages )
		pFnGetSupportedLanguages = (UFunction*) UObject::GObjObjects()->Data[ 55657 ];

	USanctumSystemSettings_execGetSupportedLanguages_Parms GetSupportedLanguages_Parms;

	this->ProcessEvent ( pFnGetSupportedLanguages, &GetSupportedLanguages_Parms, NULL );

	if ( langArray )
		memcpy ( langArray, &GetSupportedLanguages_Parms.langArray, 0xC );

	if ( SelectedIndex )
		*SelectedIndex = GetSupportedLanguages_Parms.SelectedIndex;
};

// Function Sanctum.SanctumSystemSettings.getSelectedResolutionIndex
// [0x00422002] 
// Parameters infos:
// int                            ResX                           ( CPF_Parm )
// int                            ResY                           ( CPF_Parm )
// int                            SelectedIndex                  ( CPF_Parm | CPF_OutParm )

void USanctumSystemSettings::getSelectedResolutionIndex ( int ResX, int ResY, int* SelectedIndex )
{
	static UFunction* pFngetSelectedResolutionIndex = NULL;

	if ( ! pFngetSelectedResolutionIndex )
		pFngetSelectedResolutionIndex = (UFunction*) UObject::GObjObjects()->Data[ 55650 ];

	USanctumSystemSettings_execgetSelectedResolutionIndex_Parms getSelectedResolutionIndex_Parms;
	getSelectedResolutionIndex_Parms.ResX = ResX;
	getSelectedResolutionIndex_Parms.ResY = ResY;

	this->ProcessEvent ( pFngetSelectedResolutionIndex, &getSelectedResolutionIndex_Parms, NULL );

	if ( SelectedIndex )
		*SelectedIndex = getSelectedResolutionIndex_Parms.SelectedIndex;
};

// Function Sanctum.SanctumSystemSettings.getSettingValuesNumber
// [0x00422002] 
// Parameters infos:
// int                            Value                          ( CPF_Parm )
// int                            Min                            ( CPF_Parm )
// int                            Max                            ( CPF_Parm )
// TArray< struct FString >       Settings                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// int                            SelectedIndex                  ( CPF_Parm | CPF_OutParm )

void USanctumSystemSettings::getSettingValuesNumber ( int Value, int Min, int Max, TArray< struct FString >* Settings, int* SelectedIndex )
{
	static UFunction* pFngetSettingValuesNumber = NULL;

	if ( ! pFngetSettingValuesNumber )
		pFngetSettingValuesNumber = (UFunction*) UObject::GObjObjects()->Data[ 55642 ];

	USanctumSystemSettings_execgetSettingValuesNumber_Parms getSettingValuesNumber_Parms;
	getSettingValuesNumber_Parms.Value = Value;
	getSettingValuesNumber_Parms.Min = Min;
	getSettingValuesNumber_Parms.Max = Max;

	this->ProcessEvent ( pFngetSettingValuesNumber, &getSettingValuesNumber_Parms, NULL );

	if ( Settings )
		memcpy ( Settings, &getSettingValuesNumber_Parms.Settings, 0xC );

	if ( SelectedIndex )
		*SelectedIndex = getSettingValuesNumber_Parms.SelectedIndex;
};

// Function Sanctum.SanctumSystemSettings.getSettingValuesBool
// [0x00422002] 
// Parameters infos:
// unsigned long                  Value                          ( CPF_Parm )
// TArray< struct FString >       outRendererDataProvider        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// int                            SelectedIndex                  ( CPF_Parm | CPF_OutParm )

void USanctumSystemSettings::getSettingValuesBool ( unsigned long Value, TArray< struct FString >* outRendererDataProvider, int* SelectedIndex )
{
	static UFunction* pFngetSettingValuesBool = NULL;

	if ( ! pFngetSettingValuesBool )
		pFngetSettingValuesBool = (UFunction*) UObject::GObjObjects()->Data[ 55637 ];

	USanctumSystemSettings_execgetSettingValuesBool_Parms getSettingValuesBool_Parms;
	getSettingValuesBool_Parms.Value = Value;

	this->ProcessEvent ( pFngetSettingValuesBool, &getSettingValuesBool_Parms, NULL );

	if ( outRendererDataProvider )
		memcpy ( outRendererDataProvider, &getSettingValuesBool_Parms.outRendererDataProvider, 0xC );

	if ( SelectedIndex )
		*SelectedIndex = getSettingValuesBool_Parms.SelectedIndex;
};

// Function Sanctum.SanctumSystemSettings.GetWorldTextureLevel
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char USanctumSystemSettings::GetWorldTextureLevel ( )
{
	static UFunction* pFnGetWorldTextureLevel = NULL;

	if ( ! pFnGetWorldTextureLevel )
		pFnGetWorldTextureLevel = (UFunction*) UObject::GObjObjects()->Data[ 53082 ];

	USanctumSystemSettings_execGetWorldTextureLevel_Parms GetWorldTextureLevel_Parms;

	pFnGetWorldTextureLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWorldTextureLevel, &GetWorldTextureLevel_Parms, NULL );

	pFnGetWorldTextureLevel->FunctionFlags |= 0x400;

	return GetWorldTextureLevel_Parms.ReturnValue;
};

// Function Sanctum.SanctumSystemSettings.SetWorldTextureLevel
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  TextureLevel                   ( CPF_Parm )

void USanctumSystemSettings::SetWorldTextureLevel ( unsigned char TextureLevel )
{
	static UFunction* pFnSetWorldTextureLevel = NULL;

	if ( ! pFnSetWorldTextureLevel )
		pFnSetWorldTextureLevel = (UFunction*) UObject::GObjObjects()->Data[ 55635 ];

	USanctumSystemSettings_execSetWorldTextureLevel_Parms SetWorldTextureLevel_Parms;
	SetWorldTextureLevel_Parms.TextureLevel = TextureLevel;

	pFnSetWorldTextureLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWorldTextureLevel, &SetWorldTextureLevel_Parms, NULL );

	pFnSetWorldTextureLevel->FunctionFlags |= 0x400;
};

// Function Sanctum.SanctumSystemSettings.GetGraphicsSettings
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FGraphicsSettings       out_GraphicsSettings           ( CPF_Parm | CPF_OutParm )

void USanctumSystemSettings::GetGraphicsSettings ( struct FGraphicsSettings* out_GraphicsSettings )
{
	static UFunction* pFnGetGraphicsSettings = NULL;

	if ( ! pFnGetGraphicsSettings )
		pFnGetGraphicsSettings = (UFunction*) UObject::GObjObjects()->Data[ 55633 ];

	USanctumSystemSettings_execGetGraphicsSettings_Parms GetGraphicsSettings_Parms;

	pFnGetGraphicsSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGraphicsSettings, &GetGraphicsSettings_Parms, NULL );

	pFnGetGraphicsSettings->FunctionFlags |= 0x400;

	if ( out_GraphicsSettings )
		memcpy ( out_GraphicsSettings, &GetGraphicsSettings_Parms.out_GraphicsSettings, 0x60 );
};

// Function Sanctum.SanctumSystemSettings.MD5Hash
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 ToHash                         ( CPF_Parm | CPF_NeedCtorLink )

struct FString USanctumSystemSettings::MD5Hash ( struct FString ToHash )
{
	static UFunction* pFnMD5Hash = NULL;

	if ( ! pFnMD5Hash )
		pFnMD5Hash = (UFunction*) UObject::GObjObjects()->Data[ 48633 ];

	USanctumSystemSettings_execMD5Hash_Parms MD5Hash_Parms;
	memcpy ( &MD5Hash_Parms.ToHash, &ToHash, 0xC );

	pFnMD5Hash->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMD5Hash, &MD5Hash_Parms, NULL );

	pFnMD5Hash->FunctionFlags |= 0x400;

	return MD5Hash_Parms.ReturnValue;
};

// Function Sanctum.SanctumSystemSettings.GetShadowQuality
// [0x00422002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FGraphicsSettings       out_GraphicsSettings           ( CPF_Const | CPF_Parm | CPF_OutParm )

unsigned char USanctumSystemSettings::GetShadowQuality ( struct FGraphicsSettings* out_GraphicsSettings )
{
	static UFunction* pFnGetShadowQuality = NULL;

	if ( ! pFnGetShadowQuality )
		pFnGetShadowQuality = (UFunction*) UObject::GObjObjects()->Data[ 55629 ];

	USanctumSystemSettings_execGetShadowQuality_Parms GetShadowQuality_Parms;

	this->ProcessEvent ( pFnGetShadowQuality, &GetShadowQuality_Parms, NULL );

	if ( out_GraphicsSettings )
		memcpy ( out_GraphicsSettings, &GetShadowQuality_Parms.out_GraphicsSettings, 0x60 );

	return GetShadowQuality_Parms.ReturnValue;
};

// Function Sanctum.SanctumSystemSettings.SetShadowQuality
// [0x00422002] 
// Parameters infos:
// unsigned char                  Quality                        ( CPF_Parm )
// struct FGraphicsSettings       out_GraphicsSettings           ( CPF_Parm | CPF_OutParm )

void USanctumSystemSettings::SetShadowQuality ( unsigned char Quality, struct FGraphicsSettings* out_GraphicsSettings )
{
	static UFunction* pFnSetShadowQuality = NULL;

	if ( ! pFnSetShadowQuality )
		pFnSetShadowQuality = (UFunction*) UObject::GObjObjects()->Data[ 55626 ];

	USanctumSystemSettings_execSetShadowQuality_Parms SetShadowQuality_Parms;
	SetShadowQuality_Parms.Quality = Quality;

	this->ProcessEvent ( pFnSetShadowQuality, &SetShadowQuality_Parms, NULL );

	if ( out_GraphicsSettings )
		memcpy ( out_GraphicsSettings, &SetShadowQuality_Parms.out_GraphicsSettings, 0x60 );
};

// Function Sanctum.SanctumAchievements.ReadAchievementsStatsComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void USanctumAchievements::ReadAchievementsStatsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnReadAchievementsStatsComplete = NULL;

	if ( ! pFnReadAchievementsStatsComplete )
		pFnReadAchievementsStatsComplete = (UFunction*) UObject::GObjObjects()->Data[ 44972 ];

	USanctumAchievements_execReadAchievementsStatsComplete_Parms ReadAchievementsStatsComplete_Parms;
	ReadAchievementsStatsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnReadAchievementsStatsComplete, &ReadAchievementsStatsComplete_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.ReadAllOnlineStats
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::ReadAllOnlineStats ( )
{
	static UFunction* pFnReadAllOnlineStats = NULL;

	if ( ! pFnReadAllOnlineStats )
		pFnReadAllOnlineStats = (UFunction*) UObject::GObjObjects()->Data[ 44969 ];

	USanctumAchievements_execReadAllOnlineStats_Parms ReadAllOnlineStats_Parms;

	this->ProcessEvent ( pFnReadAllOnlineStats, &ReadAllOnlineStats_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.FlushAllStats
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::FlushAllStats ( )
{
	static UFunction* pFnFlushAllStats = NULL;

	if ( ! pFnFlushAllStats )
		pFnFlushAllStats = (UFunction*) UObject::GObjObjects()->Data[ 44968 ];

	USanctumAchievements_execFlushAllStats_Parms FlushAllStats_Parms;

	this->ProcessEvent ( pFnFlushAllStats, &FlushAllStats_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.WriteStatToViewID
// [0x00020002] 
// Parameters infos:
// unsigned char                  ViewId                         ( CPF_Parm )
// int                            StatValueDiff                  ( CPF_Parm )
// unsigned char                  NumberOfStats                  ( CPF_Parm )

void USanctumAchievements::WriteStatToViewID ( unsigned char ViewId, int StatValueDiff, unsigned char NumberOfStats )
{
	static UFunction* pFnWriteStatToViewID = NULL;

	if ( ! pFnWriteStatToViewID )
		pFnWriteStatToViewID = (UFunction*) UObject::GObjObjects()->Data[ 44964 ];

	USanctumAchievements_execWriteStatToViewID_Parms WriteStatToViewID_Parms;
	WriteStatToViewID_Parms.ViewId = ViewId;
	WriteStatToViewID_Parms.StatValueDiff = StatValueDiff;
	WriteStatToViewID_Parms.NumberOfStats = NumberOfStats;

	this->ProcessEvent ( pFnWriteStatToViewID, &WriteStatToViewID_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.UnlockAchievement
// [0x00020002] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void USanctumAchievements::UnlockAchievement ( int Index )
{
	static UFunction* pFnUnlockAchievement = NULL;

	if ( ! pFnUnlockAchievement )
		pFnUnlockAchievement = (UFunction*) UObject::GObjObjects()->Data[ 44961 ];

	USanctumAchievements_execUnlockAchievement_Parms UnlockAchievement_Parms;
	UnlockAchievement_Parms.Index = Index;

	this->ProcessEvent ( pFnUnlockAchievement, &UnlockAchievement_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.AchievementsEnabled
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumAchievements::AchievementsEnabled ( )
{
	static UFunction* pFnAchievementsEnabled = NULL;

	if ( ! pFnAchievementsEnabled )
		pFnAchievementsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 44952 ];

	USanctumAchievements_execAchievementsEnabled_Parms AchievementsEnabled_Parms;

	this->ProcessEvent ( pFnAchievementsEnabled, &AchievementsEnabled_Parms, NULL );

	return AchievementsEnabled_Parms.ReturnValue;
};

// Function Sanctum.SanctumAchievements.UnlockLevelComplete
// [0x00020002] 
// Parameters infos:
// int                            Level                          ( CPF_Parm )
// float                          Diff                           ( CPF_Parm )
// int                            GameMode                       ( CPF_Parm )
// float                          RemainingCoreLife              ( CPF_Parm )

void USanctumAchievements::UnlockLevelComplete ( int Level, float Diff, int GameMode, float RemainingCoreLife )
{
	static UFunction* pFnUnlockLevelComplete = NULL;

	if ( ! pFnUnlockLevelComplete )
		pFnUnlockLevelComplete = (UFunction*) UObject::GObjObjects()->Data[ 44947 ];

	USanctumAchievements_execUnlockLevelComplete_Parms UnlockLevelComplete_Parms;
	UnlockLevelComplete_Parms.Level = Level;
	UnlockLevelComplete_Parms.Diff = Diff;
	UnlockLevelComplete_Parms.GameMode = GameMode;
	UnlockLevelComplete_Parms.RemainingCoreLife = RemainingCoreLife;

	this->ProcessEvent ( pFnUnlockLevelComplete, &UnlockLevelComplete_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.GameEnded
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::GameEnded ( )
{
	static UFunction* pFnGameEnded = NULL;

	if ( ! pFnGameEnded )
		pFnGameEnded = (UFunction*) UObject::GObjObjects()->Data[ 44946 ];

	USanctumAchievements_execGameEnded_Parms GameEnded_Parms;

	this->ProcessEvent ( pFnGameEnded, &GameEnded_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.CheckNoTeleports
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::CheckNoTeleports ( )
{
	static UFunction* pFnCheckNoTeleports = NULL;

	if ( ! pFnCheckNoTeleports )
		pFnCheckNoTeleports = (UFunction*) UObject::GObjObjects()->Data[ 44944 ];

	USanctumAchievements_execCheckNoTeleports_Parms CheckNoTeleports_Parms;

	this->ProcessEvent ( pFnCheckNoTeleports, &CheckNoTeleports_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.NumberOfRunnersKilledWithOneGrenade
// [0x00020002] 
// Parameters infos:
// int                            Number                         ( CPF_Parm )

void USanctumAchievements::NumberOfRunnersKilledWithOneGrenade ( int Number )
{
	static UFunction* pFnNumberOfRunnersKilledWithOneGrenade = NULL;

	if ( ! pFnNumberOfRunnersKilledWithOneGrenade )
		pFnNumberOfRunnersKilledWithOneGrenade = (UFunction*) UObject::GObjObjects()->Data[ 44942 ];

	USanctumAchievements_execNumberOfRunnersKilledWithOneGrenade_Parms NumberOfRunnersKilledWithOneGrenade_Parms;
	NumberOfRunnersKilledWithOneGrenade_Parms.Number = Number;

	this->ProcessEvent ( pFnNumberOfRunnersKilledWithOneGrenade, &NumberOfRunnersKilledWithOneGrenade_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.EnemyKilledWithGrenade
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::EnemyKilledWithGrenade ( )
{
	static UFunction* pFnEnemyKilledWithGrenade = NULL;

	if ( ! pFnEnemyKilledWithGrenade )
		pFnEnemyKilledWithGrenade = (UFunction*) UObject::GObjObjects()->Data[ 44939 ];

	USanctumAchievements_execEnemyKilledWithGrenade_Parms EnemyKilledWithGrenade_Parms;

	this->ProcessEvent ( pFnEnemyKilledWithGrenade, &EnemyKilledWithGrenade_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.SniperStraightWeakSpotKills
// [0x00020002] 
// Parameters infos:
// int                            Number                         ( CPF_Parm )

void USanctumAchievements::SniperStraightWeakSpotKills ( int Number )
{
	static UFunction* pFnSniperStraightWeakSpotKills = NULL;

	if ( ! pFnSniperStraightWeakSpotKills )
		pFnSniperStraightWeakSpotKills = (UFunction*) UObject::GObjObjects()->Data[ 44937 ];

	USanctumAchievements_execSniperStraightWeakSpotKills_Parms SniperStraightWeakSpotKills_Parms;
	SniperStraightWeakSpotKills_Parms.Number = Number;

	this->ProcessEvent ( pFnSniperStraightWeakSpotKills, &SniperStraightWeakSpotKills_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.SniperOneClipKills
// [0x00020002] 
// Parameters infos:
// int                            Number                         ( CPF_Parm )

void USanctumAchievements::SniperOneClipKills ( int Number )
{
	static UFunction* pFnSniperOneClipKills = NULL;

	if ( ! pFnSniperOneClipKills )
		pFnSniperOneClipKills = (UFunction*) UObject::GObjObjects()->Data[ 44935 ];

	USanctumAchievements_execSniperOneClipKills_Parms SniperOneClipKills_Parms;
	SniperOneClipKills_Parms.Number = Number;

	this->ProcessEvent ( pFnSniperOneClipKills, &SniperOneClipKills_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.CheckForTowerDiversityOnArc
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::CheckForTowerDiversityOnArc ( )
{
	static UFunction* pFnCheckForTowerDiversityOnArc = NULL;

	if ( ! pFnCheckForTowerDiversityOnArc )
		pFnCheckForTowerDiversityOnArc = (UFunction*) UObject::GObjObjects()->Data[ 44931 ];

	USanctumAchievements_execCheckForTowerDiversityOnArc_Parms CheckForTowerDiversityOnArc_Parms;

	this->ProcessEvent ( pFnCheckForTowerDiversityOnArc, &CheckForTowerDiversityOnArc_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.CheckForSlowUpgrades
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::CheckForSlowUpgrades ( )
{
	static UFunction* pFnCheckForSlowUpgrades = NULL;

	if ( ! pFnCheckForSlowUpgrades )
		pFnCheckForSlowUpgrades = (UFunction*) UObject::GObjObjects()->Data[ 44928 ];

	USanctumAchievements_execCheckForSlowUpgrades_Parms CheckForSlowUpgrades_Parms;

	this->ProcessEvent ( pFnCheckForSlowUpgrades, &CheckForSlowUpgrades_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.CheckForTowerUpgrades
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::CheckForTowerUpgrades ( )
{
	static UFunction* pFnCheckForTowerUpgrades = NULL;

	if ( ! pFnCheckForTowerUpgrades )
		pFnCheckForTowerUpgrades = (UFunction*) UObject::GObjObjects()->Data[ 44923 ];

	USanctumAchievements_execCheckForTowerUpgrades_Parms CheckForTowerUpgrades_Parms;

	this->ProcessEvent ( pFnCheckForTowerUpgrades, &CheckForTowerUpgrades_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.CheckForExclusiveTowers
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::CheckForExclusiveTowers ( )
{
	static UFunction* pFnCheckForExclusiveTowers = NULL;

	if ( ! pFnCheckForExclusiveTowers )
		pFnCheckForExclusiveTowers = (UFunction*) UObject::GObjObjects()->Data[ 44918 ];

	USanctumAchievements_execCheckForExclusiveTowers_Parms CheckForExclusiveTowers_Parms;

	this->ProcessEvent ( pFnCheckForExclusiveTowers, &CheckForExclusiveTowers_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.NewActionPhaseAchievements
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::NewActionPhaseAchievements ( )
{
	static UFunction* pFnNewActionPhaseAchievements = NULL;

	if ( ! pFnNewActionPhaseAchievements )
		pFnNewActionPhaseAchievements = (UFunction*) UObject::GObjObjects()->Data[ 44917 ];

	USanctumAchievements_execNewActionPhaseAchievements_Parms NewActionPhaseAchievements_Parms;

	this->ProcessEvent ( pFnNewActionPhaseAchievements, &NewActionPhaseAchievements_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.NewBuildPhaseAchievements
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::NewBuildPhaseAchievements ( )
{
	static UFunction* pFnNewBuildPhaseAchievements = NULL;

	if ( ! pFnNewBuildPhaseAchievements )
		pFnNewBuildPhaseAchievements = (UFunction*) UObject::GObjObjects()->Data[ 44909 ];

	USanctumAchievements_execNewBuildPhaseAchievements_Parms NewBuildPhaseAchievements_Parms;

	this->ProcessEvent ( pFnNewBuildPhaseAchievements, &NewBuildPhaseAchievements_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.NewBlockWasBuilt
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::NewBlockWasBuilt ( )
{
	static UFunction* pFnNewBlockWasBuilt = NULL;

	if ( ! pFnNewBlockWasBuilt )
		pFnNewBlockWasBuilt = (UFunction*) UObject::GObjObjects()->Data[ 44908 ];

	USanctumAchievements_execNewBlockWasBuilt_Parms NewBlockWasBuilt_Parms;

	this->ProcessEvent ( pFnNewBlockWasBuilt, &NewBlockWasBuilt_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.BlockWasSold
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::BlockWasSold ( )
{
	static UFunction* pFnBlockWasSold = NULL;

	if ( ! pFnBlockWasSold )
		pFnBlockWasSold = (UFunction*) UObject::GObjObjects()->Data[ 44907 ];

	USanctumAchievements_execBlockWasSold_Parms BlockWasSold_Parms;

	this->ProcessEvent ( pFnBlockWasSold, &BlockWasSold_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.BombingRaid
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::BombingRaid ( )
{
	static UFunction* pFnBombingRaid = NULL;

	if ( ! pFnBombingRaid )
		pFnBombingRaid = (UFunction*) UObject::GObjObjects()->Data[ 44906 ];

	USanctumAchievements_execBombingRaid_Parms BombingRaid_Parms;

	this->ProcessEvent ( pFnBombingRaid, &BombingRaid_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.Brutus
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::Brutus ( )
{
	static UFunction* pFnBrutus = NULL;

	if ( ! pFnBrutus )
		pFnBrutus = (UFunction*) UObject::GObjObjects()->Data[ 44905 ];

	USanctumAchievements_execBrutus_Parms Brutus_Parms;

	this->ProcessEvent ( pFnBrutus, &Brutus_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.NoTowersShot
// [0x00020002] 
// Parameters infos:
// float                          Difficulty                     ( CPF_Parm )

void USanctumAchievements::NoTowersShot ( float Difficulty )
{
	static UFunction* pFnNoTowersShot = NULL;

	if ( ! pFnNoTowersShot )
		pFnNoTowersShot = (UFunction*) UObject::GObjObjects()->Data[ 44901 ];

	USanctumAchievements_execNoTowersShot_Parms NoTowersShot_Parms;
	NoTowersShot_Parms.Difficulty = Difficulty;

	this->ProcessEvent ( pFnNoTowersShot, &NoTowersShot_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.shotsFired
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::shotsFired ( )
{
	static UFunction* pFnshotsFired = NULL;

	if ( ! pFnshotsFired )
		pFnshotsFired = (UFunction*) UObject::GObjObjects()->Data[ 44900 ];

	USanctumAchievements_execshotsFired_Parms shotsFired_Parms;

	this->ProcessEvent ( pFnshotsFired, &shotsFired_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.NoneAssaulGrenadeFired
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::NoneAssaulGrenadeFired ( )
{
	static UFunction* pFnNoneAssaulGrenadeFired = NULL;

	if ( ! pFnNoneAssaulGrenadeFired )
		pFnNoneAssaulGrenadeFired = (UFunction*) UObject::GObjObjects()->Data[ 44899 ];

	USanctumAchievements_execNoneAssaulGrenadeFired_Parms NoneAssaulGrenadeFired_Parms;

	this->ProcessEvent ( pFnNoneAssaulGrenadeFired, &NoneAssaulGrenadeFired_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.AssaultGrenadeFired
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::AssaultGrenadeFired ( )
{
	static UFunction* pFnAssaultGrenadeFired = NULL;

	if ( ! pFnAssaultGrenadeFired )
		pFnAssaultGrenadeFired = (UFunction*) UObject::GObjObjects()->Data[ 44898 ];

	USanctumAchievements_execAssaultGrenadeFired_Parms AssaultGrenadeFired_Parms;

	this->ProcessEvent ( pFnAssaultGrenadeFired, &AssaultGrenadeFired_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.CheckIfInMaxSlowFieldAndFreeze
// [0x00820002] 
// Parameters infos:
// class ASanctumEnemy*           E                              ( CPF_Parm )

void USanctumAchievements::CheckIfInMaxSlowFieldAndFreeze ( class ASanctumEnemy* E )
{
	static UFunction* pFnCheckIfInMaxSlowFieldAndFreeze = NULL;

	if ( ! pFnCheckIfInMaxSlowFieldAndFreeze )
		pFnCheckIfInMaxSlowFieldAndFreeze = (UFunction*) UObject::GObjObjects()->Data[ 44888 ];

	USanctumAchievements_execCheckIfInMaxSlowFieldAndFreeze_Parms CheckIfInMaxSlowFieldAndFreeze_Parms;
	CheckIfInMaxSlowFieldAndFreeze_Parms.E = E;

	this->ProcessEvent ( pFnCheckIfInMaxSlowFieldAndFreeze, &CheckIfInMaxSlowFieldAndFreeze_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.WeaponUpgrade
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::WeaponUpgrade ( )
{
	static UFunction* pFnWeaponUpgrade = NULL;

	if ( ! pFnWeaponUpgrade )
		pFnWeaponUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 44828 ];

	USanctumAchievements_execWeaponUpgrade_Parms WeaponUpgrade_Parms;

	this->ProcessEvent ( pFnWeaponUpgrade, &WeaponUpgrade_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.MVP
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::MVP ( )
{
	static UFunction* pFnMVP = NULL;

	if ( ! pFnMVP )
		pFnMVP = (UFunction*) UObject::GObjObjects()->Data[ 44827 ];

	USanctumAchievements_execMVP_Parms MVP_Parms;

	this->ProcessEvent ( pFnMVP, &MVP_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.WaveCompleted
// [0x00020002] 
// Parameters infos:
// class UClass*                  GameInfo                       ( CPF_Parm )
// int                            Wave                           ( CPF_Parm )
// int                            MaxPlayers                     ( CPF_Parm )
// float                          Difficulty                     ( CPF_Parm )

void USanctumAchievements::WaveCompleted ( class UClass* GameInfo, int Wave, int MaxPlayers, float Difficulty )
{
	static UFunction* pFnWaveCompleted = NULL;

	if ( ! pFnWaveCompleted )
		pFnWaveCompleted = (UFunction*) UObject::GObjObjects()->Data[ 44817 ];

	USanctumAchievements_execWaveCompleted_Parms WaveCompleted_Parms;
	WaveCompleted_Parms.GameInfo = GameInfo;
	WaveCompleted_Parms.Wave = Wave;
	WaveCompleted_Parms.MaxPlayers = MaxPlayers;
	WaveCompleted_Parms.Difficulty = Difficulty;

	this->ProcessEvent ( pFnWaveCompleted, &WaveCompleted_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.ToggleRadio
// [0x00020002] 
// Parameters infos:
// unsigned long                  On                             ( CPF_Parm )

void USanctumAchievements::ToggleRadio ( unsigned long On )
{
	static UFunction* pFnToggleRadio = NULL;

	if ( ! pFnToggleRadio )
		pFnToggleRadio = (UFunction*) UObject::GObjObjects()->Data[ 44815 ];

	USanctumAchievements_execToggleRadio_Parms ToggleRadio_Parms;
	ToggleRadio_Parms.On = On;

	this->ProcessEvent ( pFnToggleRadio, &ToggleRadio_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.ExpandParasol
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::ExpandParasol ( )
{
	static UFunction* pFnExpandParasol = NULL;

	if ( ! pFnExpandParasol )
		pFnExpandParasol = (UFunction*) UObject::GObjObjects()->Data[ 44814 ];

	USanctumAchievements_execExpandParasol_Parms ExpandParasol_Parms;

	this->ProcessEvent ( pFnExpandParasol, &ExpandParasol_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.LightTheGrill
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::LightTheGrill ( )
{
	static UFunction* pFnLightTheGrill = NULL;

	if ( ! pFnLightTheGrill )
		pFnLightTheGrill = (UFunction*) UObject::GObjObjects()->Data[ 44813 ];

	USanctumAchievements_execLightTheGrill_Parms LightTheGrill_Parms;

	this->ProcessEvent ( pFnLightTheGrill, &LightTheGrill_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.CheckSummerAchievement
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::CheckSummerAchievement ( )
{
	static UFunction* pFnCheckSummerAchievement = NULL;

	if ( ! pFnCheckSummerAchievement )
		pFnCheckSummerAchievement = (UFunction*) UObject::GObjObjects()->Data[ 44812 ];

	USanctumAchievements_execCheckSummerAchievement_Parms CheckSummerAchievement_Parms;

	this->ProcessEvent ( pFnCheckSummerAchievement, &CheckSummerAchievement_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.ChristmasPresentCollected
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::ChristmasPresentCollected ( )
{
	static UFunction* pFnChristmasPresentCollected = NULL;

	if ( ! pFnChristmasPresentCollected )
		pFnChristmasPresentCollected = (UFunction*) UObject::GObjObjects()->Data[ 44811 ];

	USanctumAchievements_execChristmasPresentCollected_Parms ChristmasPresentCollected_Parms;

	this->ProcessEvent ( pFnChristmasPresentCollected, &ChristmasPresentCollected_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.StrawberryFishHit
// [0x00020002] 
// Parameters infos:
// int                            Id                             ( CPF_Parm )

void USanctumAchievements::StrawberryFishHit ( int Id )
{
	static UFunction* pFnStrawberryFishHit = NULL;

	if ( ! pFnStrawberryFishHit )
		pFnStrawberryFishHit = (UFunction*) UObject::GObjObjects()->Data[ 44808 ];

	USanctumAchievements_execStrawberryFishHit_Parms StrawberryFishHit_Parms;
	StrawberryFishHit_Parms.Id = Id;

	this->ProcessEvent ( pFnStrawberryFishHit, &StrawberryFishHit_Parms, NULL );
};

// Function Sanctum.SanctumAchievements.CleanUpAchievements
// [0x00020002] 
// Parameters infos:

void USanctumAchievements::CleanUpAchievements ( )
{
	static UFunction* pFnCleanUpAchievements = NULL;

	if ( ! pFnCleanUpAchievements )
		pFnCleanUpAchievements = (UFunction*) UObject::GObjObjects()->Data[ 44807 ];

	USanctumAchievements_execCleanUpAchievements_Parms CleanUpAchievements_Parms;

	this->ProcessEvent ( pFnCleanUpAchievements, &CleanUpAchievements_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.collectActionEndInfo
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfo::collectActionEndInfo ( )
{
	static UFunction* pFncollectActionEndInfo = NULL;

	if ( ! pFncollectActionEndInfo )
		pFncollectActionEndInfo = (UFunction*) UObject::GObjObjects()->Data[ 48274 ];

	ASanctumGameInfo_execcollectActionEndInfo_Parms collectActionEndInfo_Parms;

	this->ProcessEvent ( pFncollectActionEndInfo, &collectActionEndInfo_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.StopDPSTimer
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfo::StopDPSTimer ( )
{
	static UFunction* pFnStopDPSTimer = NULL;

	if ( ! pFnStopDPSTimer )
		pFnStopDPSTimer = (UFunction*) UObject::GObjObjects()->Data[ 48254 ];

	ASanctumGameInfo_execStopDPSTimer_Parms StopDPSTimer_Parms;

	this->ProcessEvent ( pFnStopDPSTimer, &StopDPSTimer_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.StartDPSTimer
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfo::StartDPSTimer ( )
{
	static UFunction* pFnStartDPSTimer = NULL;

	if ( ! pFnStartDPSTimer )
		pFnStartDPSTimer = (UFunction*) UObject::GObjObjects()->Data[ 48252 ];

	ASanctumGameInfo_execStartDPSTimer_Parms StartDPSTimer_Parms;

	this->ProcessEvent ( pFnStartDPSTimer, &StartDPSTimer_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.ForceStartWave
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfo::ForceStartWave ( )
{
	static UFunction* pFnForceStartWave = NULL;

	if ( ! pFnForceStartWave )
		pFnForceStartWave = (UFunction*) UObject::GObjObjects()->Data[ 48231 ];

	ASanctumGameInfo_execForceStartWave_Parms ForceStartWave_Parms;

	this->ProcessEvent ( pFnForceStartWave, &ForceStartWave_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.DisplayCheatMessage
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfo::DisplayCheatMessage ( )
{
	static UFunction* pFnDisplayCheatMessage = NULL;

	if ( ! pFnDisplayCheatMessage )
		pFnDisplayCheatMessage = (UFunction*) UObject::GObjObjects()->Data[ 48227 ];

	ASanctumGameInfo_execDisplayCheatMessage_Parms DisplayCheatMessage_Parms;

	this->ProcessEvent ( pFnDisplayCheatMessage, &DisplayCheatMessage_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.setNextEnemyInfo
// [0x00020002] 
// Parameters infos:
// int                            nextWave                       ( CPF_Parm )

void ASanctumGameInfo::setNextEnemyInfo ( int nextWave )
{
	static UFunction* pFnsetNextEnemyInfo = NULL;

	if ( ! pFnsetNextEnemyInfo )
		pFnsetNextEnemyInfo = (UFunction*) UObject::GObjObjects()->Data[ 48223 ];

	ASanctumGameInfo_execsetNextEnemyInfo_Parms setNextEnemyInfo_Parms;
	setNextEnemyInfo_Parms.nextWave = nextWave;

	this->ProcessEvent ( pFnsetNextEnemyInfo, &setNextEnemyInfo_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.ToggleReady
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfo::ToggleReady ( )
{
	static UFunction* pFnToggleReady = NULL;

	if ( ! pFnToggleReady )
		pFnToggleReady = (UFunction*) UObject::GObjObjects()->Data[ 48217 ];

	ASanctumGameInfo_execToggleReady_Parms ToggleReady_Parms;

	this->ProcessEvent ( pFnToggleReady, &ToggleReady_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.startWave
// [0x00020000] 
// Parameters infos:
// int                            waveNr                         ( CPF_Parm )

void ASanctumGameInfo::startWave ( int waveNr )
{
	static UFunction* pFnstartWave = NULL;

	if ( ! pFnstartWave )
		pFnstartWave = (UFunction*) UObject::GObjObjects()->Data[ 48215 ];

	ASanctumGameInfo_execstartWave_Parms startWave_Parms;
	startWave_Parms.waveNr = waveNr;

	this->ProcessEvent ( pFnstartWave, &startWave_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.isWavesLeft
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumGameInfo::isWavesLeft ( )
{
	static UFunction* pFnisWavesLeft = NULL;

	if ( ! pFnisWavesLeft )
		pFnisWavesLeft = (UFunction*) UObject::GObjObjects()->Data[ 48213 ];

	ASanctumGameInfo_execisWavesLeft_Parms isWavesLeft_Parms;

	this->ProcessEvent ( pFnisWavesLeft, &isWavesLeft_Parms, NULL );

	return isWavesLeft_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfo.GetGameModeInt
// [0x00020000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumGameInfo::GetGameModeInt ( )
{
	static UFunction* pFnGetGameModeInt = NULL;

	if ( ! pFnGetGameModeInt )
		pFnGetGameModeInt = (UFunction*) UObject::GObjObjects()->Data[ 48211 ];

	ASanctumGameInfo_execGetGameModeInt_Parms GetGameModeInt_Parms;

	this->ProcessEvent ( pFnGetGameModeInt, &GetGameModeInt_Parms, NULL );

	return GetGameModeInt_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfo.CreateViewIDForLeaderboard
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumGameInfo::CreateViewIDForLeaderboard ( )
{
	static UFunction* pFnCreateViewIDForLeaderboard = NULL;

	if ( ! pFnCreateViewIDForLeaderboard )
		pFnCreateViewIDForLeaderboard = (UFunction*) UObject::GObjObjects()->Data[ 48208 ];

	ASanctumGameInfo_execCreateViewIDForLeaderboard_Parms CreateViewIDForLeaderboard_Parms;

	this->ProcessEvent ( pFnCreateViewIDForLeaderboard, &CreateViewIDForLeaderboard_Parms, NULL );

	return CreateViewIDForLeaderboard_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfo.Pause
// [0x00020000] 
// Parameters infos:
// class ULocalPlayer*            ownedByLocalPlayer             ( CPF_Parm )

void ASanctumGameInfo::Pause ( class ULocalPlayer* ownedByLocalPlayer )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = (UFunction*) UObject::GObjObjects()->Data[ 48206 ];

	ASanctumGameInfo_execPause_Parms Pause_Parms;
	Pause_Parms.ownedByLocalPlayer = ownedByLocalPlayer;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.Logout
// [0x00820002] 
// Parameters infos:
// class AController*             Exiting                        ( CPF_Parm )

void ASanctumGameInfo::Logout ( class AController* Exiting )
{
	static UFunction* pFnLogout = NULL;

	if ( ! pFnLogout )
		pFnLogout = (UFunction*) UObject::GObjObjects()->Data[ 48196 ];

	ASanctumGameInfo_execLogout_Parms Logout_Parms;
	Logout_Parms.Exiting = Exiting;

	this->ProcessEvent ( pFnLogout, &Logout_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.PostLogin
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       NewPlayer                      ( CPF_Parm )

void ASanctumGameInfo::eventPostLogin ( class APlayerController* NewPlayer )
{
	static UFunction* pFnPostLogin = NULL;

	if ( ! pFnPostLogin )
		pFnPostLogin = (UFunction*) UObject::GObjObjects()->Data[ 48179 ];

	ASanctumGameInfo_eventPostLogin_Parms PostLogin_Parms;
	PostLogin_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnPostLogin, &PostLogin_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.IsTrainingMode
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumGameInfo::IsTrainingMode ( )
{
	static UFunction* pFnIsTrainingMode = NULL;

	if ( ! pFnIsTrainingMode )
		pFnIsTrainingMode = (UFunction*) UObject::GObjObjects()->Data[ 48177 ];

	ASanctumGameInfo_execIsTrainingMode_Parms IsTrainingMode_Parms;

	this->ProcessEvent ( pFnIsTrainingMode, &IsTrainingMode_Parms, NULL );

	return IsTrainingMode_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfo.DisableAchievements
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ASanctumGameInfo::DisableAchievements ( class APlayerController* PC )
{
	static UFunction* pFnDisableAchievements = NULL;

	if ( ! pFnDisableAchievements )
		pFnDisableAchievements = (UFunction*) UObject::GObjObjects()->Data[ 48174 ];

	ASanctumGameInfo_execDisableAchievements_Parms DisableAchievements_Parms;
	DisableAchievements_Parms.PC = PC;

	this->ProcessEvent ( pFnDisableAchievements, &DisableAchievements_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.FindInactivePRI
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       PC                             ( CPF_Parm )

bool ASanctumGameInfo::FindInactivePRI ( class APlayerController* PC )
{
	static UFunction* pFnFindInactivePRI = NULL;

	if ( ! pFnFindInactivePRI )
		pFnFindInactivePRI = (UFunction*) UObject::GObjObjects()->Data[ 48168 ];

	ASanctumGameInfo_execFindInactivePRI_Parms FindInactivePRI_Parms;
	FindInactivePRI_Parms.PC = PC;

	this->ProcessEvent ( pFnFindInactivePRI, &FindInactivePRI_Parms, NULL );

	return FindInactivePRI_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfo.Killed
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             KilledPlayer                   ( CPF_Parm )
// class APawn*                   KilledPawn                     ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void ASanctumGameInfo::Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType )
{
	static UFunction* pFnKilled = NULL;

	if ( ! pFnKilled )
		pFnKilled = (UFunction*) UObject::GObjObjects()->Data[ 48158 ];

	ASanctumGameInfo_execKilled_Parms Killed_Parms;
	Killed_Parms.Killer = Killer;
	Killed_Parms.KilledPlayer = KilledPlayer;
	Killed_Parms.KilledPawn = KilledPawn;
	Killed_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnKilled, &Killed_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.SpawnDefaultPawnFor
// [0x00020002] 
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             NewPlayer                      ( CPF_Parm )
// class ANavigationPoint*        StartSpot                      ( CPF_Parm )

class APawn* ASanctumGameInfo::SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot )
{
	static UFunction* pFnSpawnDefaultPawnFor = NULL;

	if ( ! pFnSpawnDefaultPawnFor )
		pFnSpawnDefaultPawnFor = (UFunction*) UObject::GObjObjects()->Data[ 48150 ];

	ASanctumGameInfo_execSpawnDefaultPawnFor_Parms SpawnDefaultPawnFor_Parms;
	SpawnDefaultPawnFor_Parms.NewPlayer = NewPlayer;
	SpawnDefaultPawnFor_Parms.StartSpot = StartSpot;

	this->ProcessEvent ( pFnSpawnDefaultPawnFor, &SpawnDefaultPawnFor_Parms, NULL );

	return SpawnDefaultPawnFor_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfo.RatePlayerStart
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerStart*            P                              ( CPF_Parm )
// unsigned char                  Team                           ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )

float ASanctumGameInfo::RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player )
{
	static UFunction* pFnRatePlayerStart = NULL;

	if ( ! pFnRatePlayerStart )
		pFnRatePlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 48141 ];

	ASanctumGameInfo_execRatePlayerStart_Parms RatePlayerStart_Parms;
	RatePlayerStart_Parms.P = P;
	RatePlayerStart_Parms.Team = Team;
	RatePlayerStart_Parms.Player = Player;

	this->ProcessEvent ( pFnRatePlayerStart, &RatePlayerStart_Parms, NULL );

	return RatePlayerStart_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfo.SendToMonkeyCage
// [0x00020002] 
// Parameters infos:
// class ASanctumPlayerController* PC                             ( CPF_Parm )

void ASanctumGameInfo::SendToMonkeyCage ( class ASanctumPlayerController* PC )
{
	static UFunction* pFnSendToMonkeyCage = NULL;

	if ( ! pFnSendToMonkeyCage )
		pFnSendToMonkeyCage = (UFunction*) UObject::GObjObjects()->Data[ 48137 ];

	ASanctumGameInfo_execSendToMonkeyCage_Parms SendToMonkeyCage_Parms;
	SendToMonkeyCage_Parms.PC = PC;

	this->ProcessEvent ( pFnSendToMonkeyCage, &SendToMonkeyCage_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.ReleaseFromMonkeyCage
// [0x00020002] 
// Parameters infos:
// class ASanctumPlayerController* PC                             ( CPF_Parm )

void ASanctumGameInfo::ReleaseFromMonkeyCage ( class ASanctumPlayerController* PC )
{
	static UFunction* pFnReleaseFromMonkeyCage = NULL;

	if ( ! pFnReleaseFromMonkeyCage )
		pFnReleaseFromMonkeyCage = (UFunction*) UObject::GObjObjects()->Data[ 48135 ];

	ASanctumGameInfo_execReleaseFromMonkeyCage_Parms ReleaseFromMonkeyCage_Parms;
	ReleaseFromMonkeyCage_Parms.PC = PC;

	this->ProcessEvent ( pFnReleaseFromMonkeyCage, &ReleaseFromMonkeyCage_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.isFirstPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumController*      SC                             ( CPF_Parm )

bool ASanctumGameInfo::isFirstPlayer ( class ASanctumController* SC )
{
	static UFunction* pFnisFirstPlayer = NULL;

	if ( ! pFnisFirstPlayer )
		pFnisFirstPlayer = (UFunction*) UObject::GObjObjects()->Data[ 48130 ];

	ASanctumGameInfo_execisFirstPlayer_Parms isFirstPlayer_Parms;
	isFirstPlayer_Parms.SC = SC;

	this->ProcessEvent ( pFnisFirstPlayer, &isFirstPlayer_Parms, NULL );

	return isFirstPlayer_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfo.CheckMapDLC
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfo::CheckMapDLC ( )
{
	static UFunction* pFnCheckMapDLC = NULL;

	if ( ! pFnCheckMapDLC )
		pFnCheckMapDLC = (UFunction*) UObject::GObjObjects()->Data[ 48121 ];

	ASanctumGameInfo_execCheckMapDLC_Parms CheckMapDLC_Parms;

	this->ProcessEvent ( pFnCheckMapDLC, &CheckMapDLC_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.Login
// [0x00C20802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Portal                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            UniqueId                       ( CPF_Const | CPF_Parm )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class APlayerController* ASanctumGameInfo::eventLogin ( struct FString Portal, struct FString Options, struct FUniqueNetId UniqueId, struct FString* ErrorMessage )
{
	static UFunction* pFnLogin = NULL;

	if ( ! pFnLogin )
		pFnLogin = (UFunction*) UObject::GObjObjects()->Data[ 48111 ];

	ASanctumGameInfo_eventLogin_Parms Login_Parms;
	memcpy ( &Login_Parms.Portal, &Portal, 0xC );
	memcpy ( &Login_Parms.Options, &Options, 0xC );
	memcpy ( &Login_Parms.UniqueId, &UniqueId, 0x8 );

	this->ProcessEvent ( pFnLogin, &Login_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &Login_Parms.ErrorMessage, 0xC );

	return Login_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfo.PreLogin
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Address                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            UniqueId                       ( CPF_Const | CPF_Parm )
// unsigned long                  bSupportsAuth                  ( CPF_Parm )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumGameInfo::eventPreLogin ( struct FString Options, struct FString Address, struct FUniqueNetId UniqueId, unsigned long bSupportsAuth, struct FString* ErrorMessage )
{
	static UFunction* pFnPreLogin = NULL;

	if ( ! pFnPreLogin )
		pFnPreLogin = (UFunction*) UObject::GObjObjects()->Data[ 48105 ];

	ASanctumGameInfo_eventPreLogin_Parms PreLogin_Parms;
	memcpy ( &PreLogin_Parms.Options, &Options, 0xC );
	memcpy ( &PreLogin_Parms.Address, &Address, 0xC );
	memcpy ( &PreLogin_Parms.UniqueId, &UniqueId, 0x8 );
	PreLogin_Parms.bSupportsAuth = bSupportsAuth;

	this->ProcessEvent ( pFnPreLogin, &PreLogin_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &PreLogin_Parms.ErrorMessage, 0xC );
};

// Function Sanctum.SanctumGameInfo.WriteOnlineStats
// [0x00020000] 
// Parameters infos:

void ASanctumGameInfo::WriteOnlineStats ( )
{
	static UFunction* pFnWriteOnlineStats = NULL;

	if ( ! pFnWriteOnlineStats )
		pFnWriteOnlineStats = (UFunction*) UObject::GObjObjects()->Data[ 48104 ];

	ASanctumGameInfo_execWriteOnlineStats_Parms WriteOnlineStats_Parms;

	this->ProcessEvent ( pFnWriteOnlineStats, &WriteOnlineStats_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.PerformEndGameHandling
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfo::PerformEndGameHandling ( )
{
	static UFunction* pFnPerformEndGameHandling = NULL;

	if ( ! pFnPerformEndGameHandling )
		pFnPerformEndGameHandling = (UFunction*) UObject::GObjObjects()->Data[ 48102 ];

	ASanctumGameInfo_execPerformEndGameHandling_Parms PerformEndGameHandling_Parms;

	this->ProcessEvent ( pFnPerformEndGameHandling, &PerformEndGameHandling_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.UpdateGameSettings
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfo::UpdateGameSettings ( )
{
	static UFunction* pFnUpdateGameSettings = NULL;

	if ( ! pFnUpdateGameSettings )
		pFnUpdateGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 48093 ];

	ASanctumGameInfo_execUpdateGameSettings_Parms UpdateGameSettings_Parms;

	this->ProcessEvent ( pFnUpdateGameSettings, &UpdateGameSettings_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.OnUpdateOnlineGameComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ASanctumGameInfo::OnUpdateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnUpdateOnlineGameComplete = NULL;

	if ( ! pFnOnUpdateOnlineGameComplete )
		pFnOnUpdateOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 48090 ];

	ASanctumGameInfo_execOnUpdateOnlineGameComplete_Parms OnUpdateOnlineGameComplete_Parms;
	memcpy ( &OnUpdateOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnUpdateOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnUpdateOnlineGameComplete, &OnUpdateOnlineGameComplete_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.UpdateGameSettingsCounts
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfo::UpdateGameSettingsCounts ( )
{
	static UFunction* pFnUpdateGameSettingsCounts = NULL;

	if ( ! pFnUpdateGameSettingsCounts )
		pFnUpdateGameSettingsCounts = (UFunction*) UObject::GObjObjects()->Data[ 48088 ];

	ASanctumGameInfo_execUpdateGameSettingsCounts_Parms UpdateGameSettingsCounts_Parms;

	this->ProcessEvent ( pFnUpdateGameSettingsCounts, &UpdateGameSettingsCounts_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.GameOver
// [0x00020002] 
// Parameters infos:
// class ASanctumEnemy*           Killer                         ( CPF_Parm )

void ASanctumGameInfo::GameOver ( class ASanctumEnemy* Killer )
{
	static UFunction* pFnGameOver = NULL;

	if ( ! pFnGameOver )
		pFnGameOver = (UFunction*) UObject::GObjObjects()->Data[ 48084 ];

	ASanctumGameInfo_execGameOver_Parms GameOver_Parms;
	GameOver_Parms.Killer = Killer;

	this->ProcessEvent ( pFnGameOver, &GameOver_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.OnStartOnlineGameComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ASanctumGameInfo::OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnStartOnlineGameComplete = NULL;

	if ( ! pFnOnStartOnlineGameComplete )
		pFnOnStartOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 48081 ];

	ASanctumGameInfo_execOnStartOnlineGameComplete_Parms OnStartOnlineGameComplete_Parms;
	memcpy ( &OnStartOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnStartOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnStartOnlineGameComplete, &OnStartOnlineGameComplete_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.enemyReachedCore
// [0x00020002] 
// Parameters infos:
// class ASanctumEnemy*           Enemy                          ( CPF_Parm )

void ASanctumGameInfo::enemyReachedCore ( class ASanctumEnemy* Enemy )
{
	static UFunction* pFnenemyReachedCore = NULL;

	if ( ! pFnenemyReachedCore )
		pFnenemyReachedCore = (UFunction*) UObject::GObjObjects()->Data[ 48077 ];

	ASanctumGameInfo_execenemyReachedCore_Parms enemyReachedCore_Parms;
	enemyReachedCore_Parms.Enemy = Enemy;

	this->ProcessEvent ( pFnenemyReachedCore, &enemyReachedCore_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.AllowCheats
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )

bool ASanctumGameInfo::AllowCheats ( class APlayerController* P )
{
	static UFunction* pFnAllowCheats = NULL;

	if ( ! pFnAllowCheats )
		pFnAllowCheats = (UFunction*) UObject::GObjObjects()->Data[ 48074 ];

	ASanctumGameInfo_execAllowCheats_Parms AllowCheats_Parms;
	AllowCheats_Parms.P = P;

	this->ProcessEvent ( pFnAllowCheats, &AllowCheats_Parms, NULL );

	return AllowCheats_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfo.BroadCastHeavyWaveIncoming
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfo::BroadCastHeavyWaveIncoming ( )
{
	static UFunction* pFnBroadCastHeavyWaveIncoming = NULL;

	if ( ! pFnBroadCastHeavyWaveIncoming )
		pFnBroadCastHeavyWaveIncoming = (UFunction*) UObject::GObjObjects()->Data[ 48071 ];

	ASanctumGameInfo_execBroadCastHeavyWaveIncoming_Parms BroadCastHeavyWaveIncoming_Parms;

	this->ProcessEvent ( pFnBroadCastHeavyWaveIncoming, &BroadCastHeavyWaveIncoming_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.ToggleBuildPhase
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfo::ToggleBuildPhase ( )
{
	static UFunction* pFnToggleBuildPhase = NULL;

	if ( ! pFnToggleBuildPhase )
		pFnToggleBuildPhase = (UFunction*) UObject::GObjObjects()->Data[ 48067 ];

	ASanctumGameInfo_execToggleBuildPhase_Parms ToggleBuildPhase_Parms;

	this->ProcessEvent ( pFnToggleBuildPhase, &ToggleBuildPhase_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.ScheduleBuildPhase
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfo::ScheduleBuildPhase ( )
{
	static UFunction* pFnScheduleBuildPhase = NULL;

	if ( ! pFnScheduleBuildPhase )
		pFnScheduleBuildPhase = (UFunction*) UObject::GObjObjects()->Data[ 48066 ];

	ASanctumGameInfo_execScheduleBuildPhase_Parms ScheduleBuildPhase_Parms;

	this->ProcessEvent ( pFnScheduleBuildPhase, &ScheduleBuildPhase_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.AddDefaultInventory
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ASanctumGameInfo::eventAddDefaultInventory ( class APawn* P )
{
	static UFunction* pFnAddDefaultInventory = NULL;

	if ( ! pFnAddDefaultInventory )
		pFnAddDefaultInventory = (UFunction*) UObject::GObjObjects()->Data[ 48064 ];

	ASanctumGameInfo_eventAddDefaultInventory_Parms AddDefaultInventory_Parms;
	AddDefaultInventory_Parms.P = P;

	this->ProcessEvent ( pFnAddDefaultInventory, &AddDefaultInventory_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.AllowMutator
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MutatorClassName               ( CPF_Parm | CPF_NeedCtorLink )

bool ASanctumGameInfo::AllowMutator ( struct FString MutatorClassName )
{
	static UFunction* pFnAllowMutator = NULL;

	if ( ! pFnAllowMutator )
		pFnAllowMutator = (UFunction*) UObject::GObjObjects()->Data[ 48061 ];

	ASanctumGameInfo_execAllowMutator_Parms AllowMutator_Parms;
	memcpy ( &AllowMutator_Parms.MutatorClassName, &MutatorClassName, 0xC );

	this->ProcessEvent ( pFnAllowMutator, &AllowMutator_Parms, NULL );

	return AllowMutator_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfo.writeSlot
// [0x00420002] 
// Parameters infos:
// int                            SlotNumber                     ( CPF_Parm )
// struct FPlayerSlot             Slot                           ( CPF_Const | CPF_Parm | CPF_OutParm )

void ASanctumGameInfo::writeSlot ( int SlotNumber, struct FPlayerSlot* Slot )
{
	static UFunction* pFnwriteSlot = NULL;

	if ( ! pFnwriteSlot )
		pFnwriteSlot = (UFunction*) UObject::GObjObjects()->Data[ 48057 ];

	ASanctumGameInfo_execwriteSlot_Parms writeSlot_Parms;
	writeSlot_Parms.SlotNumber = SlotNumber;

	this->ProcessEvent ( pFnwriteSlot, &writeSlot_Parms, NULL );

	if ( Slot )
		memcpy ( Slot, &writeSlot_Parms.Slot, 0x8 );
};

// Function Sanctum.SanctumGameInfo.findPlayerSlot
// [0x00420002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumController*      Controller                     ( CPF_Parm )
// struct FPlayerSlot             Slot                           ( CPF_Parm | CPF_OutParm )

int ASanctumGameInfo::findPlayerSlot ( class ASanctumController* Controller, struct FPlayerSlot* Slot )
{
	static UFunction* pFnfindPlayerSlot = NULL;

	if ( ! pFnfindPlayerSlot )
		pFnfindPlayerSlot = (UFunction*) UObject::GObjObjects()->Data[ 48051 ];

	ASanctumGameInfo_execfindPlayerSlot_Parms findPlayerSlot_Parms;
	findPlayerSlot_Parms.Controller = Controller;

	this->ProcessEvent ( pFnfindPlayerSlot, &findPlayerSlot_Parms, NULL );

	if ( Slot )
		memcpy ( Slot, &findPlayerSlot_Parms.Slot, 0x8 );

	return findPlayerSlot_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfo.findFreeSlot
// [0x00420002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FPlayerSlot             Slot                           ( CPF_Parm | CPF_OutParm )

int ASanctumGameInfo::findFreeSlot ( struct FPlayerSlot* Slot )
{
	static UFunction* pFnfindFreeSlot = NULL;

	if ( ! pFnfindFreeSlot )
		pFnfindFreeSlot = (UFunction*) UObject::GObjObjects()->Data[ 48041 ];

	ASanctumGameInfo_execfindFreeSlot_Parms findFreeSlot_Parms;

	this->ProcessEvent ( pFnfindFreeSlot, &findFreeSlot_Parms, NULL );

	if ( Slot )
		memcpy ( Slot, &findFreeSlot_Parms.Slot, 0x8 );

	return findFreeSlot_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfo.enemySpawned
// [0x00020002] 
// Parameters infos:
// class ASanctumEnemy*           Enemy                          ( CPF_Parm )

void ASanctumGameInfo::enemySpawned ( class ASanctumEnemy* Enemy )
{
	static UFunction* pFnenemySpawned = NULL;

	if ( ! pFnenemySpawned )
		pFnenemySpawned = (UFunction*) UObject::GObjObjects()->Data[ 48038 ];

	ASanctumGameInfo_execenemySpawned_Parms enemySpawned_Parms;
	enemySpawned_Parms.Enemy = Enemy;

	this->ProcessEvent ( pFnenemySpawned, &enemySpawned_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.ShowRubelGain
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfo::ShowRubelGain ( )
{
	static UFunction* pFnShowRubelGain = NULL;

	if ( ! pFnShowRubelGain )
		pFnShowRubelGain = (UFunction*) UObject::GObjObjects()->Data[ 48032 ];

	ASanctumGameInfo_execShowRubelGain_Parms ShowRubelGain_Parms;

	this->ProcessEvent ( pFnShowRubelGain, &ShowRubelGain_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.AddRubelToAll
// [0x00024002] 
// Parameters infos:
// int                            rubelAmount                    ( CPF_Parm )
// unsigned long                  showReward                     ( CPF_OptionalParm | CPF_Parm )

void ASanctumGameInfo::AddRubelToAll ( int rubelAmount, unsigned long showReward )
{
	static UFunction* pFnAddRubelToAll = NULL;

	if ( ! pFnAddRubelToAll )
		pFnAddRubelToAll = (UFunction*) UObject::GObjObjects()->Data[ 48028 ];

	ASanctumGameInfo_execAddRubelToAll_Parms AddRubelToAll_Parms;
	AddRubelToAll_Parms.rubelAmount = rubelAmount;
	AddRubelToAll_Parms.showReward = showReward;

	this->ProcessEvent ( pFnAddRubelToAll, &AddRubelToAll_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.ToggleLevelCompleteEvent
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumGameInfo::eventToggleLevelCompleteEvent ( )
{
	static UFunction* pFnToggleLevelCompleteEvent = NULL;

	if ( ! pFnToggleLevelCompleteEvent )
		pFnToggleLevelCompleteEvent = (UFunction*) UObject::GObjObjects()->Data[ 48024 ];

	ASanctumGameInfo_eventToggleLevelCompleteEvent_Parms ToggleLevelCompleteEvent_Parms;

	this->ProcessEvent ( pFnToggleLevelCompleteEvent, &ToggleLevelCompleteEvent_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.EnemyKilled
// [0x00020002] 
// Parameters infos:
// class ASanctumEnemy*           Enemy                          ( CPF_Parm )
// class AActor*                  Killer                         ( CPF_Parm )

void ASanctumGameInfo::EnemyKilled ( class ASanctumEnemy* Enemy, class AActor* Killer )
{
	static UFunction* pFnEnemyKilled = NULL;

	if ( ! pFnEnemyKilled )
		pFnEnemyKilled = (UFunction*) UObject::GObjObjects()->Data[ 48013 ];

	ASanctumGameInfo_execEnemyKilled_Parms EnemyKilled_Parms;
	EnemyKilled_Parms.Enemy = Enemy;
	EnemyKilled_Parms.Killer = Killer;

	this->ProcessEvent ( pFnEnemyKilled, &EnemyKilled_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.KillAllEnemies
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfo::KillAllEnemies ( )
{
	static UFunction* pFnKillAllEnemies = NULL;

	if ( ! pFnKillAllEnemies )
		pFnKillAllEnemies = (UFunction*) UObject::GObjObjects()->Data[ 48009 ];

	ASanctumGameInfo_execKillAllEnemies_Parms KillAllEnemies_Parms;

	this->ProcessEvent ( pFnKillAllEnemies, &KillAllEnemies_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.CalculateAccumulatedRubel
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfo::CalculateAccumulatedRubel ( )
{
	static UFunction* pFnCalculateAccumulatedRubel = NULL;

	if ( ! pFnCalculateAccumulatedRubel )
		pFnCalculateAccumulatedRubel = (UFunction*) UObject::GObjObjects()->Data[ 48002 ];

	ASanctumGameInfo_execCalculateAccumulatedRubel_Parms CalculateAccumulatedRubel_Parms;

	this->ProcessEvent ( pFnCalculateAccumulatedRubel, &CalculateAccumulatedRubel_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.difficultyToString
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  Difficulty                     ( CPF_Parm )

struct FString ASanctumGameInfo::difficultyToString ( unsigned char Difficulty )
{
	static UFunction* pFndifficultyToString = NULL;

	if ( ! pFndifficultyToString )
		pFndifficultyToString = (UFunction*) UObject::GObjObjects()->Data[ 47997 ];

	ASanctumGameInfo_execdifficultyToString_Parms difficultyToString_Parms;
	difficultyToString_Parms.Difficulty = Difficulty;

	this->ProcessEvent ( pFndifficultyToString, &difficultyToString_Parms, NULL );

	return difficultyToString_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfo.InitGameReplicationName
// [0x00020002] 
// Parameters infos:
// class ASanctumGameReplicationInfo* SGRI                           ( CPF_Parm )

void ASanctumGameInfo::InitGameReplicationName ( class ASanctumGameReplicationInfo* SGRI )
{
	static UFunction* pFnInitGameReplicationName = NULL;

	if ( ! pFnInitGameReplicationName )
		pFnInitGameReplicationName = (UFunction*) UObject::GObjObjects()->Data[ 47994 ];

	ASanctumGameInfo_execInitGameReplicationName_Parms InitGameReplicationName_Parms;
	InitGameReplicationName_Parms.SGRI = SGRI;

	this->ProcessEvent ( pFnInitGameReplicationName, &InitGameReplicationName_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.InitGameReplicationInfo
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfo::InitGameReplicationInfo ( )
{
	static UFunction* pFnInitGameReplicationInfo = NULL;

	if ( ! pFnInitGameReplicationInfo )
		pFnInitGameReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 47991 ];

	ASanctumGameInfo_execInitGameReplicationInfo_Parms InitGameReplicationInfo_Parms;

	this->ProcessEvent ( pFnInitGameReplicationInfo, &InitGameReplicationInfo_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.InitGame
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumGameInfo::eventInitGame ( struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnInitGame = NULL;

	if ( ! pFnInitGame )
		pFnInitGame = (UFunction*) UObject::GObjObjects()->Data[ 47981 ];

	ASanctumGameInfo_eventInitGame_Parms InitGame_Parms;
	memcpy ( &InitGame_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnInitGame, &InitGame_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &InitGame_Parms.ErrorMessage, 0xC );
};

// Function Sanctum.SanctumGameInfo.InitializeGameAddon
// [0x00420002] 
// Parameters infos:
// struct FString                 Options                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumGameInfo::InitializeGameAddon ( struct FString* Options )
{
	static UFunction* pFnInitializeGameAddon = NULL;

	if ( ! pFnInitializeGameAddon )
		pFnInitializeGameAddon = (UFunction*) UObject::GObjObjects()->Data[ 47978 ];

	ASanctumGameInfo_execInitializeGameAddon_Parms InitializeGameAddon_Parms;

	this->ProcessEvent ( pFnInitializeGameAddon, &InitializeGameAddon_Parms, NULL );

	if ( Options )
		memcpy ( Options, &InitializeGameAddon_Parms.Options, 0xC );
};

// Function Sanctum.SanctumGameInfo.GetGameMode
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ASanctumGameInfo::GetGameMode ( )
{
	static UFunction* pFnGetGameMode = NULL;

	if ( ! pFnGetGameMode )
		pFnGetGameMode = (UFunction*) UObject::GObjObjects()->Data[ 47974 ];

	ASanctumGameInfo_execGetGameMode_Parms GetGameMode_Parms;

	this->ProcessEvent ( pFnGetGameMode, &GetGameMode_Parms, NULL );

	return GetGameMode_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfo.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumGameInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47966 ];

	ASanctumGameInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumGameInfo.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumGameInfo::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47965 ];

	ASanctumGameInfo_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoEndless.startWave
// [0x00020002] 
// Parameters infos:
// int                            waveNr                         ( CPF_Parm )

void ASanctumGameInfoEndless::startWave ( int waveNr )
{
	static UFunction* pFnstartWave = NULL;

	if ( ! pFnstartWave )
		pFnstartWave = (UFunction*) UObject::GObjObjects()->Data[ 48328 ];

	ASanctumGameInfoEndless_execstartWave_Parms startWave_Parms;
	startWave_Parms.waveNr = waveNr;

	this->ProcessEvent ( pFnstartWave, &startWave_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoEndless.PostLogin
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       NewPlayer                      ( CPF_Parm )

void ASanctumGameInfoEndless::eventPostLogin ( class APlayerController* NewPlayer )
{
	static UFunction* pFnPostLogin = NULL;

	if ( ! pFnPostLogin )
		pFnPostLogin = (UFunction*) UObject::GObjObjects()->Data[ 48326 ];

	ASanctumGameInfoEndless_eventPostLogin_Parms PostLogin_Parms;
	PostLogin_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnPostLogin, &PostLogin_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoEndless.Login
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Portal                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            UniqueId                       ( CPF_Const | CPF_Parm )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class APlayerController* ASanctumGameInfoEndless::eventLogin ( struct FString Portal, struct FString Options, struct FUniqueNetId UniqueId, struct FString* ErrorMessage )
{
	static UFunction* pFnLogin = NULL;

	if ( ! pFnLogin )
		pFnLogin = (UFunction*) UObject::GObjObjects()->Data[ 48319 ];

	ASanctumGameInfoEndless_eventLogin_Parms Login_Parms;
	memcpy ( &Login_Parms.Portal, &Portal, 0xC );
	memcpy ( &Login_Parms.Options, &Options, 0xC );
	memcpy ( &Login_Parms.UniqueId, &UniqueId, 0x8 );

	this->ProcessEvent ( pFnLogin, &Login_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &Login_Parms.ErrorMessage, 0xC );

	return Login_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfoEndless.StartOnlineGame
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfoEndless::StartOnlineGame ( )
{
	static UFunction* pFnStartOnlineGame = NULL;

	if ( ! pFnStartOnlineGame )
		pFnStartOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 48317 ];

	ASanctumGameInfoEndless_execStartOnlineGame_Parms StartOnlineGame_Parms;

	this->ProcessEvent ( pFnStartOnlineGame, &StartOnlineGame_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoEndless.OnEndOnlineGameComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ASanctumGameInfoEndless::OnEndOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnEndOnlineGameComplete = NULL;

	if ( ! pFnOnEndOnlineGameComplete )
		pFnOnEndOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 48314 ];

	ASanctumGameInfoEndless_execOnEndOnlineGameComplete_Parms OnEndOnlineGameComplete_Parms;
	memcpy ( &OnEndOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnEndOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnEndOnlineGameComplete, &OnEndOnlineGameComplete_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoEndless.OnStartOnlineGameComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ASanctumGameInfoEndless::OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnStartOnlineGameComplete = NULL;

	if ( ! pFnOnStartOnlineGameComplete )
		pFnOnStartOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 48311 ];

	ASanctumGameInfoEndless_execOnStartOnlineGameComplete_Parms OnStartOnlineGameComplete_Parms;
	memcpy ( &OnStartOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnStartOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnStartOnlineGameComplete, &OnStartOnlineGameComplete_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoEndless.OnServerCreateComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ASanctumGameInfoEndless::OnServerCreateComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnServerCreateComplete = NULL;

	if ( ! pFnOnServerCreateComplete )
		pFnOnServerCreateComplete = (UFunction*) UObject::GObjObjects()->Data[ 48308 ];

	ASanctumGameInfoEndless_execOnServerCreateComplete_Parms OnServerCreateComplete_Parms;
	memcpy ( &OnServerCreateComplete_Parms.SessionName, &SessionName, 0x8 );
	OnServerCreateComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnServerCreateComplete, &OnServerCreateComplete_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoEndless.OnRegisterPlayerComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ASanctumGameInfoEndless::OnRegisterPlayerComplete ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnRegisterPlayerComplete = NULL;

	if ( ! pFnOnRegisterPlayerComplete )
		pFnOnRegisterPlayerComplete = (UFunction*) UObject::GObjObjects()->Data[ 48304 ];

	ASanctumGameInfoEndless_execOnRegisterPlayerComplete_Parms OnRegisterPlayerComplete_Parms;
	memcpy ( &OnRegisterPlayerComplete_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &OnRegisterPlayerComplete_Parms.PlayerID, &PlayerID, 0x8 );
	OnRegisterPlayerComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnRegisterPlayerComplete, &OnRegisterPlayerComplete_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoEndless.OnUnregisterPlayerComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ASanctumGameInfoEndless::OnUnregisterPlayerComplete ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnUnregisterPlayerComplete = NULL;

	if ( ! pFnOnUnregisterPlayerComplete )
		pFnOnUnregisterPlayerComplete = (UFunction*) UObject::GObjObjects()->Data[ 48300 ];

	ASanctumGameInfoEndless_execOnUnregisterPlayerComplete_Parms OnUnregisterPlayerComplete_Parms;
	memcpy ( &OnUnregisterPlayerComplete_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &OnUnregisterPlayerComplete_Parms.PlayerID, &PlayerID, 0x8 );
	OnUnregisterPlayerComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnUnregisterPlayerComplete, &OnUnregisterPlayerComplete_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoEndless.Logout
// [0x00020002] 
// Parameters infos:
// class AController*             Exiting                        ( CPF_Parm )

void ASanctumGameInfoEndless::Logout ( class AController* Exiting )
{
	static UFunction* pFnLogout = NULL;

	if ( ! pFnLogout )
		pFnLogout = (UFunction*) UObject::GObjObjects()->Data[ 48298 ];

	ASanctumGameInfoEndless_execLogout_Parms Logout_Parms;
	Logout_Parms.Exiting = Exiting;

	this->ProcessEvent ( pFnLogout, &Logout_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoEndless.GameEnding
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumGameInfoEndless::eventGameEnding ( )
{
	static UFunction* pFnGameEnding = NULL;

	if ( ! pFnGameEnding )
		pFnGameEnding = (UFunction*) UObject::GObjObjects()->Data[ 48297 ];

	ASanctumGameInfoEndless_eventGameEnding_Parms GameEnding_Parms;

	this->ProcessEvent ( pFnGameEnding, &GameEnding_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoEndless.PreExit
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumGameInfoEndless::eventPreExit ( )
{
	static UFunction* pFnPreExit = NULL;

	if ( ! pFnPreExit )
		pFnPreExit = (UFunction*) UObject::GObjObjects()->Data[ 48296 ];

	ASanctumGameInfoEndless_eventPreExit_Parms PreExit_Parms;

	this->ProcessEvent ( pFnPreExit, &PreExit_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoEndless.DestroyOnlineGame
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfoEndless::DestroyOnlineGame ( )
{
	static UFunction* pFnDestroyOnlineGame = NULL;

	if ( ! pFnDestroyOnlineGame )
		pFnDestroyOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 48295 ];

	ASanctumGameInfoEndless_execDestroyOnlineGame_Parms DestroyOnlineGame_Parms;

	this->ProcessEvent ( pFnDestroyOnlineGame, &DestroyOnlineGame_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoEndless.CleanUpDelegates
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfoEndless::CleanUpDelegates ( )
{
	static UFunction* pFnCleanUpDelegates = NULL;

	if ( ! pFnCleanUpDelegates )
		pFnCleanUpDelegates = (UFunction*) UObject::GObjObjects()->Data[ 48294 ];

	ASanctumGameInfoEndless_execCleanUpDelegates_Parms CleanUpDelegates_Parms;

	this->ProcessEvent ( pFnCleanUpDelegates, &CleanUpDelegates_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoEndless.difficultyToString
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  Difficulty                     ( CPF_Parm )

struct FString ASanctumGameInfoEndless::difficultyToString ( unsigned char Difficulty )
{
	static UFunction* pFndifficultyToString = NULL;

	if ( ! pFndifficultyToString )
		pFndifficultyToString = (UFunction*) UObject::GObjObjects()->Data[ 48291 ];

	ASanctumGameInfoEndless_execdifficultyToString_Parms difficultyToString_Parms;
	difficultyToString_Parms.Difficulty = Difficulty;

	this->ProcessEvent ( pFndifficultyToString, &difficultyToString_Parms, NULL );

	return difficultyToString_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfoEndless.GetGameModeInt
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumGameInfoEndless::GetGameModeInt ( )
{
	static UFunction* pFnGetGameModeInt = NULL;

	if ( ! pFnGetGameModeInt )
		pFnGetGameModeInt = (UFunction*) UObject::GObjObjects()->Data[ 48289 ];

	ASanctumGameInfoEndless_execGetGameModeInt_Parms GetGameModeInt_Parms;

	this->ProcessEvent ( pFnGetGameModeInt, &GetGameModeInt_Parms, NULL );

	return GetGameModeInt_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfoEndless.OnDestroyOnlineGameComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ASanctumGameInfoEndless::OnDestroyOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDestroyOnlineGameComplete = NULL;

	if ( ! pFnOnDestroyOnlineGameComplete )
		pFnOnDestroyOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 48286 ];

	ASanctumGameInfoEndless_execOnDestroyOnlineGameComplete_Parms OnDestroyOnlineGameComplete_Parms;
	memcpy ( &OnDestroyOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnDestroyOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDestroyOnlineGameComplete, &OnDestroyOnlineGameComplete_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoEndless.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumGameInfoEndless::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 48282 ];

	ASanctumGameInfoEndless_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.showNextEnemies
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  show                           ( CPF_Parm )

void ASanctumPlayerController::showNextEnemies ( unsigned long show )
{
	static UFunction* pFnshowNextEnemies = NULL;

	if ( ! pFnshowNextEnemies )
		pFnshowNextEnemies = (UFunction*) UObject::GObjObjects()->Data[ 54273 ];

	ASanctumPlayerController_execshowNextEnemies_Parms showNextEnemies_Parms;
	showNextEnemies_Parms.show = show;

	this->ProcessEvent ( pFnshowNextEnemies, &showNextEnemies_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.showResource
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  show                           ( CPF_Parm )

void ASanctumPlayerController::showResource ( unsigned long show )
{
	static UFunction* pFnshowResource = NULL;

	if ( ! pFnshowResource )
		pFnshowResource = (UFunction*) UObject::GObjObjects()->Data[ 54270 ];

	ASanctumPlayerController_execshowResource_Parms showResource_Parms;
	showResource_Parms.show = show;

	this->ProcessEvent ( pFnshowResource, &showResource_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.showLife
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  show                           ( CPF_Parm )

void ASanctumPlayerController::showLife ( unsigned long show )
{
	static UFunction* pFnshowLife = NULL;

	if ( ! pFnshowLife )
		pFnshowLife = (UFunction*) UObject::GObjObjects()->Data[ 54267 ];

	ASanctumPlayerController_execshowLife_Parms showLife_Parms;
	showLife_Parms.show = show;

	this->ProcessEvent ( pFnshowLife, &showLife_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.showBuildList
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  show                           ( CPF_Parm )

void ASanctumPlayerController::showBuildList ( unsigned long show )
{
	static UFunction* pFnshowBuildList = NULL;

	if ( ! pFnshowBuildList )
		pFnshowBuildList = (UFunction*) UObject::GObjObjects()->Data[ 54264 ];

	ASanctumPlayerController_execshowBuildList_Parms showBuildList_Parms;
	showBuildList_Parms.show = show;

	this->ProcessEvent ( pFnshowBuildList, &showBuildList_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.HUDVisibility
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  show                           ( CPF_Parm )

void ASanctumPlayerController::HUDVisibility ( unsigned long show )
{
	static UFunction* pFnHUDVisibility = NULL;

	if ( ! pFnHUDVisibility )
		pFnHUDVisibility = (UFunction*) UObject::GObjObjects()->Data[ 54261 ];

	ASanctumPlayerController_execHUDVisibility_Parms HUDVisibility_Parms;
	HUDVisibility_Parms.show = show;

	this->ProcessEvent ( pFnHUDVisibility, &HUDVisibility_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.WeaponVisibility
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  Visible                        ( CPF_OptionalParm | CPF_Parm )

void ASanctumPlayerController::WeaponVisibility ( unsigned long Visible )
{
	static UFunction* pFnWeaponVisibility = NULL;

	if ( ! pFnWeaponVisibility )
		pFnWeaponVisibility = (UFunction*) UObject::GObjObjects()->Data[ 54259 ];

	ASanctumPlayerController_execWeaponVisibility_Parms WeaponVisibility_Parms;
	WeaponVisibility_Parms.Visible = Visible;

	this->ProcessEvent ( pFnWeaponVisibility, &WeaponVisibility_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.CanUnpause
// [0x00120002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumPlayerController::CanUnpause ( )
{
	static UFunction* pFnCanUnpause = NULL;

	if ( ! pFnCanUnpause )
		pFnCanUnpause = (UFunction*) UObject::GObjObjects()->Data[ 53769 ];

	ASanctumPlayerController_execCanUnpause_Parms CanUnpause_Parms;

	this->ProcessEvent ( pFnCanUnpause, &CanUnpause_Parms, NULL );

	return CanUnpause_Parms.ReturnValue;
};

// Function Sanctum.SanctumPlayerController.findFreeSpotOnTeleporter
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USanctumTeleportInterface* Teleporter                     ( CPF_Parm )

struct FVector ASanctumPlayerController::findFreeSpotOnTeleporter ( class USanctumTeleportInterface* Teleporter )
{
	static UFunction* pFnfindFreeSpotOnTeleporter = NULL;

	if ( ! pFnfindFreeSpotOnTeleporter )
		pFnfindFreeSpotOnTeleporter = (UFunction*) UObject::GObjObjects()->Data[ 54253 ];

	ASanctumPlayerController_execfindFreeSpotOnTeleporter_Parms findFreeSpotOnTeleporter_Parms;
	findFreeSpotOnTeleporter_Parms.Teleporter = Teleporter;

	this->ProcessEvent ( pFnfindFreeSpotOnTeleporter, &findFreeSpotOnTeleporter_Parms, NULL );

	return findFreeSpotOnTeleporter_Parms.ReturnValue;
};

// Function Sanctum.SanctumPlayerController.ToggleReady
// [0x002240C2] 
// Parameters infos:
// unsigned long                  Toggle                         ( CPF_OptionalParm | CPF_Parm )

void ASanctumPlayerController::ToggleReady ( unsigned long Toggle )
{
	static UFunction* pFnToggleReady = NULL;

	if ( ! pFnToggleReady )
		pFnToggleReady = (UFunction*) UObject::GObjObjects()->Data[ 54251 ];

	ASanctumPlayerController_execToggleReady_Parms ToggleReady_Parms;
	ToggleReady_Parms.Toggle = Toggle;

	this->ProcessEvent ( pFnToggleReady, &ToggleReady_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.loopNotifierText
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::loopNotifierText ( )
{
	static UFunction* pFnloopNotifierText = NULL;

	if ( ! pFnloopNotifierText )
		pFnloopNotifierText = (UFunction*) UObject::GObjObjects()->Data[ 54249 ];

	ASanctumPlayerController_execloopNotifierText_Parms loopNotifierText_Parms;

	this->ProcessEvent ( pFnloopNotifierText, &loopNotifierText_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.InitInputSystem
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumPlayerController::eventInitInputSystem ( )
{
	static UFunction* pFnInitInputSystem = NULL;

	if ( ! pFnInitInputSystem )
		pFnInitInputSystem = (UFunction*) UObject::GObjObjects()->Data[ 54248 ];

	ASanctumPlayerController_eventInitInputSystem_Parms InitInputSystem_Parms;

	this->ProcessEvent ( pFnInitInputSystem, &InitInputSystem_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.StoreSwitch
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ASanctumPlayerController::StoreSwitch ( )
{
	static UFunction* pFnStoreSwitch = NULL;

	if ( ! pFnStoreSwitch )
		pFnStoreSwitch = (UFunction*) UObject::GObjObjects()->Data[ 54246 ];

	ASanctumPlayerController_execStoreSwitch_Parms StoreSwitch_Parms;

	this->ProcessEvent ( pFnStoreSwitch, &StoreSwitch_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.SwitchWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  T                              ( CPF_Parm )

void ASanctumPlayerController::SwitchWeapon ( unsigned char T )
{
	static UFunction* pFnSwitchWeapon = NULL;

	if ( ! pFnSwitchWeapon )
		pFnSwitchWeapon = (UFunction*) UObject::GObjObjects()->Data[ 54244 ];

	ASanctumPlayerController_execSwitchWeapon_Parms SwitchWeapon_Parms;
	SwitchWeapon_Parms.T = T;

	this->ProcessEvent ( pFnSwitchWeapon, &SwitchWeapon_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.LandingShake
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumPlayerController::LandingShake ( )
{
	static UFunction* pFnLandingShake = NULL;

	if ( ! pFnLandingShake )
		pFnLandingShake = (UFunction*) UObject::GObjObjects()->Data[ 54242 ];

	ASanctumPlayerController_execLandingShake_Parms LandingShake_Parms;

	this->ProcessEvent ( pFnLandingShake, &LandingShake_Parms, NULL );

	return LandingShake_Parms.ReturnValue;
};

// Function Sanctum.SanctumPlayerController.DrawHUD
// [0x00020002] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void ASanctumPlayerController::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 54240 ];

	ASanctumPlayerController_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.Use
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ASanctumPlayerController::Use ( )
{
	static UFunction* pFnUse = NULL;

	if ( ! pFnUse )
		pFnUse = (UFunction*) UObject::GObjObjects()->Data[ 54239 ];

	ASanctumPlayerController_execUse_Parms Use_Parms;

	this->ProcessEvent ( pFnUse, &Use_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.showRoundEnded
// [0x00020000] 
// Parameters infos:

void ASanctumPlayerController::showRoundEnded ( )
{
	static UFunction* pFnshowRoundEnded = NULL;

	if ( ! pFnshowRoundEnded )
		pFnshowRoundEnded = (UFunction*) UObject::GObjObjects()->Data[ 54221 ];

	ASanctumPlayerController_execshowRoundEnded_Parms showRoundEnded_Parms;

	this->ProcessEvent ( pFnshowRoundEnded, &showRoundEnded_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.endActionPhase
// [0x00020102] 
// Parameters infos:

void ASanctumPlayerController::endActionPhase ( )
{
	static UFunction* pFnendActionPhase = NULL;

	if ( ! pFnendActionPhase )
		pFnendActionPhase = (UFunction*) UObject::GObjObjects()->Data[ 54219 ];

	ASanctumPlayerController_execendActionPhase_Parms endActionPhase_Parms;

	this->ProcessEvent ( pFnendActionPhase, &endActionPhase_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.startActionPhase
// [0x002200C2] 
// Parameters infos:

void ASanctumPlayerController::startActionPhase ( )
{
	static UFunction* pFnstartActionPhase = NULL;

	if ( ! pFnstartActionPhase )
		pFnstartActionPhase = (UFunction*) UObject::GObjObjects()->Data[ 54218 ];

	ASanctumPlayerController_execstartActionPhase_Parms startActionPhase_Parms;

	this->ProcessEvent ( pFnstartActionPhase, &startActionPhase_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.startTeleport
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::startTeleport ( )
{
	static UFunction* pFnstartTeleport = NULL;

	if ( ! pFnstartTeleport )
		pFnstartTeleport = (UFunction*) UObject::GObjObjects()->Data[ 54216 ];

	ASanctumPlayerController_execstartTeleport_Parms startTeleport_Parms;

	this->ProcessEvent ( pFnstartTeleport, &startTeleport_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.activatePartyTimer
// [0x00024002] 
// Parameters infos:
// unsigned long                  Force                          ( CPF_OptionalParm | CPF_Parm )

void ASanctumPlayerController::activatePartyTimer ( unsigned long Force )
{
	static UFunction* pFnactivatePartyTimer = NULL;

	if ( ! pFnactivatePartyTimer )
		pFnactivatePartyTimer = (UFunction*) UObject::GObjObjects()->Data[ 54214 ];

	ASanctumPlayerController_execactivatePartyTimer_Parms activatePartyTimer_Parms;
	activatePartyTimer_Parms.Force = Force;

	this->ProcessEvent ( pFnactivatePartyTimer, &activatePartyTimer_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.BeginFire_Gamepad
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  gamepad                        ( CPF_Parm )

void ASanctumPlayerController::BeginFire_Gamepad ( unsigned long gamepad )
{
	static UFunction* pFnBeginFire_Gamepad = NULL;

	if ( ! pFnBeginFire_Gamepad )
		pFnBeginFire_Gamepad = (UFunction*) UObject::GObjObjects()->Data[ 54211 ];

	ASanctumPlayerController_execBeginFire_Gamepad_Parms BeginFire_Gamepad_Parms;
	BeginFire_Gamepad_Parms.gamepad = gamepad;

	this->ProcessEvent ( pFnBeginFire_Gamepad, &BeginFire_Gamepad_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.BeginFire
// [0x00824202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_OptionalParm | CPF_Parm )

void ASanctumPlayerController::BeginFire ( unsigned char FireModeNum )
{
	static UFunction* pFnBeginFire = NULL;

	if ( ! pFnBeginFire )
		pFnBeginFire = (UFunction*) UObject::GObjObjects()->Data[ 54204 ];

	ASanctumPlayerController_execBeginFire_Parms BeginFire_Parms;
	BeginFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnBeginFire, &BeginFire_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.StartAltFire
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_OptionalParm | CPF_Parm )

void ASanctumPlayerController::StartAltFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartAltFire = NULL;

	if ( ! pFnStartAltFire )
		pFnStartAltFire = (UFunction*) UObject::GObjObjects()->Data[ 54202 ];

	ASanctumPlayerController_execStartAltFire_Parms StartAltFire_Parms;
	StartAltFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartAltFire, &StartAltFire_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.SaveAndNotifyPlayerOfRecord
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::SaveAndNotifyPlayerOfRecord ( )
{
	static UFunction* pFnSaveAndNotifyPlayerOfRecord = NULL;

	if ( ! pFnSaveAndNotifyPlayerOfRecord )
		pFnSaveAndNotifyPlayerOfRecord = (UFunction*) UObject::GObjObjects()->Data[ 54196 ];

	ASanctumPlayerController_execSaveAndNotifyPlayerOfRecord_Parms SaveAndNotifyPlayerOfRecord_Parms;

	this->ProcessEvent ( pFnSaveAndNotifyPlayerOfRecord, &SaveAndNotifyPlayerOfRecord_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.SaveEndGameRecord
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::SaveEndGameRecord ( )
{
	static UFunction* pFnSaveEndGameRecord = NULL;

	if ( ! pFnSaveEndGameRecord )
		pFnSaveEndGameRecord = (UFunction*) UObject::GObjObjects()->Data[ 54192 ];

	ASanctumPlayerController_execSaveEndGameRecord_Parms SaveEndGameRecord_Parms;

	this->ProcessEvent ( pFnSaveEndGameRecord, &SaveEndGameRecord_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.GetWavesLeftForRecord
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumPlayerController::GetWavesLeftForRecord ( )
{
	static UFunction* pFnGetWavesLeftForRecord = NULL;

	if ( ! pFnGetWavesLeftForRecord )
		pFnGetWavesLeftForRecord = (UFunction*) UObject::GObjObjects()->Data[ 54187 ];

	ASanctumPlayerController_execGetWavesLeftForRecord_Parms GetWavesLeftForRecord_Parms;

	this->ProcessEvent ( pFnGetWavesLeftForRecord, &GetWavesLeftForRecord_Parms, NULL );

	return GetWavesLeftForRecord_Parms.ReturnValue;
};

// Function Sanctum.SanctumPlayerController.clientStartBuildPhase
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::clientStartBuildPhase ( )
{
	static UFunction* pFnclientStartBuildPhase = NULL;

	if ( ! pFnclientStartBuildPhase )
		pFnclientStartBuildPhase = (UFunction*) UObject::GObjObjects()->Data[ 54185 ];

	ASanctumPlayerController_execclientStartBuildPhase_Parms clientStartBuildPhase_Parms;

	this->ProcessEvent ( pFnclientStartBuildPhase, &clientStartBuildPhase_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.clientStartActionPhase
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::clientStartActionPhase ( )
{
	static UFunction* pFnclientStartActionPhase = NULL;

	if ( ! pFnclientStartActionPhase )
		pFnclientStartActionPhase = (UFunction*) UObject::GObjObjects()->Data[ 54183 ];

	ASanctumPlayerController_execclientStartActionPhase_Parms clientStartActionPhase_Parms;

	this->ProcessEvent ( pFnclientStartActionPhase, &clientStartActionPhase_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.SetWaveCompleted
// [0x00020002] 
// Parameters infos:
// int                            WaveCompleted                  ( CPF_Parm )

void ASanctumPlayerController::SetWaveCompleted ( int WaveCompleted )
{
	static UFunction* pFnSetWaveCompleted = NULL;

	if ( ! pFnSetWaveCompleted )
		pFnSetWaveCompleted = (UFunction*) UObject::GObjObjects()->Data[ 54180 ];

	ASanctumPlayerController_execSetWaveCompleted_Parms SetWaveCompleted_Parms;
	SetWaveCompleted_Parms.WaveCompleted = WaveCompleted;

	this->ProcessEvent ( pFnSetWaveCompleted, &SetWaveCompleted_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.CheckIfCheated
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::CheckIfCheated ( )
{
	static UFunction* pFnCheckIfCheated = NULL;

	if ( ! pFnCheckIfCheated )
		pFnCheckIfCheated = (UFunction*) UObject::GObjObjects()->Data[ 54178 ];

	ASanctumPlayerController_execCheckIfCheated_Parms CheckIfCheated_Parms;

	this->ProcessEvent ( pFnCheckIfCheated, &CheckIfCheated_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.GetAdjustedAimFor
// [0x00020002] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator ASanctumPlayerController::GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAimFor = NULL;

	if ( ! pFnGetAdjustedAimFor )
		pFnGetAdjustedAimFor = (UFunction*) UObject::GObjObjects()->Data[ 54173 ];

	ASanctumPlayerController_execGetAdjustedAimFor_Parms GetAdjustedAimFor_Parms;
	GetAdjustedAimFor_Parms.W = W;
	memcpy ( &GetAdjustedAimFor_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAimFor, &GetAdjustedAimFor_Parms, NULL );

	return GetAdjustedAimFor_Parms.ReturnValue;
};

// Function Sanctum.SanctumPlayerController.GetPlayerViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void ASanctumPlayerController::eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetPlayerViewPoint = NULL;

	if ( ! pFnGetPlayerViewPoint )
		pFnGetPlayerViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 54169 ];

	ASanctumPlayerController_eventGetPlayerViewPoint_Parms GetPlayerViewPoint_Parms;

	this->ProcessEvent ( pFnGetPlayerViewPoint, &GetPlayerViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetPlayerViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetPlayerViewPoint_Parms.out_Rotation, 0xC );
};

// Function Sanctum.SanctumPlayerController.SetCameraMode
// [0x00020002] 
// Parameters infos:
// struct FName                   NewCamMode                     ( CPF_Parm )

void ASanctumPlayerController::SetCameraMode ( struct FName NewCamMode )
{
	static UFunction* pFnSetCameraMode = NULL;

	if ( ! pFnSetCameraMode )
		pFnSetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 54167 ];

	ASanctumPlayerController_execSetCameraMode_Parms SetCameraMode_Parms;
	memcpy ( &SetCameraMode_Parms.NewCamMode, &NewCamMode, 0x8 );

	this->ProcessEvent ( pFnSetCameraMode, &SetCameraMode_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.CheckFPS
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ASanctumPlayerController::CheckFPS ( )
{
	static UFunction* pFnCheckFPS = NULL;

	if ( ! pFnCheckFPS )
		pFnCheckFPS = (UFunction*) UObject::GObjObjects()->Data[ 54166 ];

	ASanctumPlayerController_execCheckFPS_Parms CheckFPS_Parms;

	this->ProcessEvent ( pFnCheckFPS, &CheckFPS_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ServerStartActionPhase
// [0x00020102] 
// Parameters infos:

void ASanctumPlayerController::ServerStartActionPhase ( )
{
	static UFunction* pFnServerStartActionPhase = NULL;

	if ( ! pFnServerStartActionPhase )
		pFnServerStartActionPhase = (UFunction*) UObject::GObjObjects()->Data[ 54164 ];

	ASanctumPlayerController_execServerStartActionPhase_Parms ServerStartActionPhase_Parms;

	this->ProcessEvent ( pFnServerStartActionPhase, &ServerStartActionPhase_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.startBuildPhase
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::startBuildPhase ( )
{
	static UFunction* pFnstartBuildPhase = NULL;

	if ( ! pFnstartBuildPhase )
		pFnstartBuildPhase = (UFunction*) UObject::GObjObjects()->Data[ 54163 ];

	ASanctumPlayerController_execstartBuildPhase_Parms startBuildPhase_Parms;

	this->ProcessEvent ( pFnstartBuildPhase, &startBuildPhase_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.EnterStartState
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::EnterStartState ( )
{
	static UFunction* pFnEnterStartState = NULL;

	if ( ! pFnEnterStartState )
		pFnEnterStartState = (UFunction*) UObject::GObjObjects()->Data[ 54106 ];

	ASanctumPlayerController_execEnterStartState_Parms EnterStartState_Parms;

	this->ProcessEvent ( pFnEnterStartState, &EnterStartState_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ClientEndEquipmentScreen
// [0x00020102] 
// Parameters infos:

void ASanctumPlayerController::ClientEndEquipmentScreen ( )
{
	static UFunction* pFnClientEndEquipmentScreen = NULL;

	if ( ! pFnClientEndEquipmentScreen )
		pFnClientEndEquipmentScreen = (UFunction*) UObject::GObjObjects()->Data[ 54105 ];

	ASanctumPlayerController_execClientEndEquipmentScreen_Parms ClientEndEquipmentScreen_Parms;

	this->ProcessEvent ( pFnClientEndEquipmentScreen, &ClientEndEquipmentScreen_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.GotoOverviewAndSelectWeapons
// [0x00020102] 
// Parameters infos:

void ASanctumPlayerController::GotoOverviewAndSelectWeapons ( )
{
	static UFunction* pFnGotoOverviewAndSelectWeapons = NULL;

	if ( ! pFnGotoOverviewAndSelectWeapons )
		pFnGotoOverviewAndSelectWeapons = (UFunction*) UObject::GObjObjects()->Data[ 54103 ];

	ASanctumPlayerController_execGotoOverviewAndSelectWeapons_Parms GotoOverviewAndSelectWeapons_Parms;

	this->ProcessEvent ( pFnGotoOverviewAndSelectWeapons, &GotoOverviewAndSelectWeapons_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.DoneSelectingEquipment
// [0x00020000] 
// Parameters infos:

void ASanctumPlayerController::DoneSelectingEquipment ( )
{
	static UFunction* pFnDoneSelectingEquipment = NULL;

	if ( ! pFnDoneSelectingEquipment )
		pFnDoneSelectingEquipment = (UFunction*) UObject::GObjObjects()->Data[ 54102 ];

	ASanctumPlayerController_execDoneSelectingEquipment_Parms DoneSelectingEquipment_Parms;

	this->ProcessEvent ( pFnDoneSelectingEquipment, &DoneSelectingEquipment_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.serverGotoState
// [0x002200C2] 
// Parameters infos:
// struct FName                   NewState                       ( CPF_Parm )

void ASanctumPlayerController::serverGotoState ( struct FName NewState )
{
	static UFunction* pFnserverGotoState = NULL;

	if ( ! pFnserverGotoState )
		pFnserverGotoState = (UFunction*) UObject::GObjObjects()->Data[ 54100 ];

	ASanctumPlayerController_execserverGotoState_Parms serverGotoState_Parms;
	memcpy ( &serverGotoState_Parms.NewState, &NewState, 0x8 );

	this->ProcessEvent ( pFnserverGotoState, &serverGotoState_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.CalculateNewPlayerStats
// [0x00820002] 
// Parameters infos:

void ASanctumPlayerController::CalculateNewPlayerStats ( )
{
	static UFunction* pFnCalculateNewPlayerStats = NULL;

	if ( ! pFnCalculateNewPlayerStats )
		pFnCalculateNewPlayerStats = (UFunction*) UObject::GObjObjects()->Data[ 54073 ];

	ASanctumPlayerController_execCalculateNewPlayerStats_Parms CalculateNewPlayerStats_Parms;

	this->ProcessEvent ( pFnCalculateNewPlayerStats, &CalculateNewPlayerStats_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.notifyWaveStarted
// [0x00020102] 
// Parameters infos:

void ASanctumPlayerController::notifyWaveStarted ( )
{
	static UFunction* pFnnotifyWaveStarted = NULL;

	if ( ! pFnnotifyWaveStarted )
		pFnnotifyWaveStarted = (UFunction*) UObject::GObjObjects()->Data[ 54068 ];

	ASanctumPlayerController_execnotifyWaveStarted_Parms notifyWaveStarted_Parms;

	this->ProcessEvent ( pFnnotifyWaveStarted, &notifyWaveStarted_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ProcessMove
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// unsigned char                  DoubleClickMove                ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )

void ASanctumPlayerController::ProcessMove ( float DeltaTime, struct FVector newAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot )
{
	static UFunction* pFnProcessMove = NULL;

	if ( ! pFnProcessMove )
		pFnProcessMove = (UFunction*) UObject::GObjObjects()->Data[ 54063 ];

	ASanctumPlayerController_execProcessMove_Parms ProcessMove_Parms;
	ProcessMove_Parms.DeltaTime = DeltaTime;
	memcpy ( &ProcessMove_Parms.newAccel, &newAccel, 0xC );
	ProcessMove_Parms.DoubleClickMove = DoubleClickMove;
	memcpy ( &ProcessMove_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnProcessMove, &ProcessMove_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.PlayCameraAnim
// [0x00024002] 
// Parameters infos:
// class UCameraAnim*             AnimToPlay                     ( CPF_Parm )
// float                          Scale                          ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsDamageShake                 ( CPF_OptionalParm | CPF_Parm )

void ASanctumPlayerController::PlayCameraAnim ( class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bIsDamageShake )
{
	static UFunction* pFnPlayCameraAnim = NULL;

	if ( ! pFnPlayCameraAnim )
		pFnPlayCameraAnim = (UFunction*) UObject::GObjObjects()->Data[ 54054 ];

	ASanctumPlayerController_execPlayCameraAnim_Parms PlayCameraAnim_Parms;
	PlayCameraAnim_Parms.AnimToPlay = AnimToPlay;
	PlayCameraAnim_Parms.Scale = Scale;
	PlayCameraAnim_Parms.Rate = Rate;
	PlayCameraAnim_Parms.BlendInTime = BlendInTime;
	PlayCameraAnim_Parms.BlendOutTime = BlendOutTime;
	PlayCameraAnim_Parms.bLoop = bLoop;
	PlayCameraAnim_Parms.bIsDamageShake = bIsDamageShake;

	this->ProcessEvent ( pFnPlayCameraAnim, &PlayCameraAnim_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ViewShake
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASanctumPlayerController::ViewShake ( float DeltaTime )
{
	static UFunction* pFnViewShake = NULL;

	if ( ! pFnViewShake )
		pFnViewShake = (UFunction*) UObject::GObjObjects()->Data[ 54052 ];

	ASanctumPlayerController_execViewShake_Parms ViewShake_Parms;
	ViewShake_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnViewShake, &ViewShake_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.CheckJumpOrDuck
// [0x00020102] 
// Parameters infos:

void ASanctumPlayerController::CheckJumpOrDuck ( )
{
	static UFunction* pFnCheckJumpOrDuck = NULL;

	if ( ! pFnCheckJumpOrDuck )
		pFnCheckJumpOrDuck = (UFunction*) UObject::GObjObjects()->Data[ 54051 ];

	ASanctumPlayerController_execCheckJumpOrDuck_Parms CheckJumpOrDuck_Parms;

	this->ProcessEvent ( pFnCheckJumpOrDuck, &CheckJumpOrDuck_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.StartOverviewMode
// [0x00024102] 
// Parameters infos:
// unsigned long                  Force                          ( CPF_OptionalParm | CPF_Parm )

void ASanctumPlayerController::StartOverviewMode ( unsigned long Force )
{
	static UFunction* pFnStartOverviewMode = NULL;

	if ( ! pFnStartOverviewMode )
		pFnStartOverviewMode = (UFunction*) UObject::GObjObjects()->Data[ 54040 ];

	ASanctumPlayerController_execStartOverviewMode_Parms StartOverviewMode_Parms;
	StartOverviewMode_Parms.Force = Force;

	this->ProcessEvent ( pFnStartOverviewMode, &StartOverviewMode_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ClientStartOverviewMode
// [0x010241C2] 
// Parameters infos:
// unsigned long                  Force                          ( CPF_OptionalParm | CPF_Parm )

void ASanctumPlayerController::ClientStartOverviewMode ( unsigned long Force )
{
	static UFunction* pFnClientStartOverviewMode = NULL;

	if ( ! pFnClientStartOverviewMode )
		pFnClientStartOverviewMode = (UFunction*) UObject::GObjObjects()->Data[ 54038 ];

	ASanctumPlayerController_execClientStartOverviewMode_Parms ClientStartOverviewMode_Parms;
	ClientStartOverviewMode_Parms.Force = Force;

	this->ProcessEvent ( pFnClientStartOverviewMode, &ClientStartOverviewMode_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.NotifyAllEventsOfClass
// [0x00020002] 
// Parameters infos:
// class UClass*                  EventClass                     ( CPF_Parm )

void ASanctumPlayerController::NotifyAllEventsOfClass ( class UClass* EventClass )
{
	static UFunction* pFnNotifyAllEventsOfClass = NULL;

	if ( ! pFnNotifyAllEventsOfClass )
		pFnNotifyAllEventsOfClass = (UFunction*) UObject::GObjObjects()->Data[ 54033 ];

	ASanctumPlayerController_execNotifyAllEventsOfClass_Parms NotifyAllEventsOfClass_Parms;
	NotifyAllEventsOfClass_Parms.EventClass = EventClass;

	this->ProcessEvent ( pFnNotifyAllEventsOfClass, &NotifyAllEventsOfClass_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.EndOverviewMode
// [0x00024102] 
// Parameters infos:
// unsigned long                  transition                     ( CPF_OptionalParm | CPF_Parm )

void ASanctumPlayerController::EndOverviewMode ( unsigned long transition )
{
	static UFunction* pFnEndOverviewMode = NULL;

	if ( ! pFnEndOverviewMode )
		pFnEndOverviewMode = (UFunction*) UObject::GObjObjects()->Data[ 54023 ];

	ASanctumPlayerController_execEndOverviewMode_Parms EndOverviewMode_Parms;
	EndOverviewMode_Parms.transition = transition;

	this->ProcessEvent ( pFnEndOverviewMode, &EndOverviewMode_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ClientRemoveOverview
// [0x010201C2] 
// Parameters infos:
// unsigned long                  UnForce                        ( CPF_Parm )

void ASanctumPlayerController::ClientRemoveOverview ( unsigned long UnForce )
{
	static UFunction* pFnClientRemoveOverview = NULL;

	if ( ! pFnClientRemoveOverview )
		pFnClientRemoveOverview = (UFunction*) UObject::GObjObjects()->Data[ 54021 ];

	ASanctumPlayerController_execClientRemoveOverview_Parms ClientRemoveOverview_Parms;
	ClientRemoveOverview_Parms.UnForce = UnForce;

	this->ProcessEvent ( pFnClientRemoveOverview, &ClientRemoveOverview_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.Save
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::Save ( )
{
	static UFunction* pFnSave = NULL;

	if ( ! pFnSave )
		pFnSave = (UFunction*) UObject::GObjObjects()->Data[ 54020 ];

	ASanctumPlayerController_execSave_Parms Save_Parms;

	this->ProcessEvent ( pFnSave, &Save_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.showGameOver
// [0x010201C2] 
// Parameters infos:

void ASanctumPlayerController::showGameOver ( )
{
	static UFunction* pFnshowGameOver = NULL;

	if ( ! pFnshowGameOver )
		pFnshowGameOver = (UFunction*) UObject::GObjObjects()->Data[ 54019 ];

	ASanctumPlayerController_execshowGameOver_Parms showGameOver_Parms;

	this->ProcessEvent ( pFnshowGameOver, &showGameOver_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.showReward
// [0x010201C2] 
// Parameters infos:
// int                            rubelsToReward                 ( CPF_Parm )
// int                            WaveNumber                     ( CPF_Parm )
// int                            MaxWaveNumber                  ( CPF_Parm )

void ASanctumPlayerController::showReward ( int rubelsToReward, int WaveNumber, int MaxWaveNumber )
{
	static UFunction* pFnshowReward = NULL;

	if ( ! pFnshowReward )
		pFnshowReward = (UFunction*) UObject::GObjObjects()->Data[ 54015 ];

	ASanctumPlayerController_execshowReward_Parms showReward_Parms;
	showReward_Parms.rubelsToReward = rubelsToReward;
	showReward_Parms.WaveNumber = WaveNumber;
	showReward_Parms.MaxWaveNumber = MaxWaveNumber;

	this->ProcessEvent ( pFnshowReward, &showReward_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.characterProcessingComplete
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::characterProcessingComplete ( )
{
	static UFunction* pFncharacterProcessingComplete = NULL;

	if ( ! pFncharacterProcessingComplete )
		pFncharacterProcessingComplete = (UFunction*) UObject::GObjObjects()->Data[ 54014 ];

	ASanctumPlayerController_execcharacterProcessingComplete_Parms characterProcessingComplete_Parms;

	this->ProcessEvent ( pFncharacterProcessingComplete, &characterProcessingComplete_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.TogglePause
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ASanctumPlayerController::TogglePause ( )
{
	static UFunction* pFnTogglePause = NULL;

	if ( ! pFnTogglePause )
		pFnTogglePause = (UFunction*) UObject::GObjObjects()->Data[ 54012 ];

	ASanctumPlayerController_execTogglePause_Parms TogglePause_Parms;

	this->ProcessEvent ( pFnTogglePause, &TogglePause_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.NextWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ASanctumPlayerController::NextWeapon ( )
{
	static UFunction* pFnNextWeapon = NULL;

	if ( ! pFnNextWeapon )
		pFnNextWeapon = (UFunction*) UObject::GObjObjects()->Data[ 54011 ];

	ASanctumPlayerController_execNextWeapon_Parms NextWeapon_Parms;

	this->ProcessEvent ( pFnNextWeapon, &NextWeapon_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.PrevWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ASanctumPlayerController::PrevWeapon ( )
{
	static UFunction* pFnPrevWeapon = NULL;

	if ( ! pFnPrevWeapon )
		pFnPrevWeapon = (UFunction*) UObject::GObjObjects()->Data[ 54010 ];

	ASanctumPlayerController_execPrevWeapon_Parms PrevWeapon_Parms;

	this->ProcessEvent ( pFnPrevWeapon, &PrevWeapon_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ServerEndedOverview
// [0x002200C2] 
// Parameters infos:

void ASanctumPlayerController::ServerEndedOverview ( )
{
	static UFunction* pFnServerEndedOverview = NULL;

	if ( ! pFnServerEndedOverview )
		pFnServerEndedOverview = (UFunction*) UObject::GObjObjects()->Data[ 54009 ];

	ASanctumPlayerController_execServerEndedOverview_Parms ServerEndedOverview_Parms;

	this->ProcessEvent ( pFnServerEndedOverview, &ServerEndedOverview_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ServerEnteredOverview
// [0x002200C2] 
// Parameters infos:
// unsigned long                  Force                          ( CPF_Parm )

void ASanctumPlayerController::ServerEnteredOverview ( unsigned long Force )
{
	static UFunction* pFnServerEnteredOverview = NULL;

	if ( ! pFnServerEnteredOverview )
		pFnServerEnteredOverview = (UFunction*) UObject::GObjObjects()->Data[ 54007 ];

	ASanctumPlayerController_execServerEnteredOverview_Parms ServerEnteredOverview_Parms;
	ServerEnteredOverview_Parms.Force = Force;

	this->ProcessEvent ( pFnServerEnteredOverview, &ServerEnteredOverview_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ToggleOverview
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ASanctumPlayerController::ToggleOverview ( )
{
	static UFunction* pFnToggleOverview = NULL;

	if ( ! pFnToggleOverview )
		pFnToggleOverview = (UFunction*) UObject::GObjObjects()->Data[ 54005 ];

	ASanctumPlayerController_execToggleOverview_Parms ToggleOverview_Parms;

	this->ProcessEvent ( pFnToggleOverview, &ToggleOverview_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ServerTeleportPlayer
// [0x002200C2] 
// Parameters infos:
// struct FVector                 TeleportLocation               ( CPF_Parm )

void ASanctumPlayerController::ServerTeleportPlayer ( struct FVector TeleportLocation )
{
	static UFunction* pFnServerTeleportPlayer = NULL;

	if ( ! pFnServerTeleportPlayer )
		pFnServerTeleportPlayer = (UFunction*) UObject::GObjObjects()->Data[ 54003 ];

	ASanctumPlayerController_execServerTeleportPlayer_Parms ServerTeleportPlayer_Parms;
	memcpy ( &ServerTeleportPlayer_Parms.TeleportLocation, &TeleportLocation, 0xC );

	this->ProcessEvent ( pFnServerTeleportPlayer, &ServerTeleportPlayer_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.actuallyTeleportPlayer
// [0x00020002] 
// Parameters infos:
// struct FVector                 TeleportLocation               ( CPF_Parm )

void ASanctumPlayerController::actuallyTeleportPlayer ( struct FVector TeleportLocation )
{
	static UFunction* pFnactuallyTeleportPlayer = NULL;

	if ( ! pFnactuallyTeleportPlayer )
		pFnactuallyTeleportPlayer = (UFunction*) UObject::GObjObjects()->Data[ 54000 ];

	ASanctumPlayerController_execactuallyTeleportPlayer_Parms actuallyTeleportPlayer_Parms;
	memcpy ( &actuallyTeleportPlayer_Parms.TeleportLocation, &TeleportLocation, 0xC );

	this->ProcessEvent ( pFnactuallyTeleportPlayer, &actuallyTeleportPlayer_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.TeleportPlayer
// [0x00020102] 
// Parameters infos:
// struct FVector                 TeleportLocation               ( CPF_Parm )

void ASanctumPlayerController::TeleportPlayer ( struct FVector TeleportLocation )
{
	static UFunction* pFnTeleportPlayer = NULL;

	if ( ! pFnTeleportPlayer )
		pFnTeleportPlayer = (UFunction*) UObject::GObjObjects()->Data[ 53997 ];

	ASanctumPlayerController_execTeleportPlayer_Parms TeleportPlayer_Parms;
	memcpy ( &TeleportPlayer_Parms.TeleportLocation, &TeleportLocation, 0xC );

	this->ProcessEvent ( pFnTeleportPlayer, &TeleportPlayer_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.StopZoom
// [0x00020102] 
// Parameters infos:

void ASanctumPlayerController::StopZoom ( )
{
	static UFunction* pFnStopZoom = NULL;

	if ( ! pFnStopZoom )
		pFnStopZoom = (UFunction*) UObject::GObjObjects()->Data[ 53996 ];

	ASanctumPlayerController_execStopZoom_Parms StopZoom_Parms;

	this->ProcessEvent ( pFnStopZoom, &StopZoom_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.StartZoom
// [0x00020102] 
// Parameters infos:
// float                          NewDesiredFOV                  ( CPF_Parm )
// float                          NewZoomRate                    ( CPF_Parm )

void ASanctumPlayerController::StartZoom ( float NewDesiredFOV, float NewZoomRate )
{
	static UFunction* pFnStartZoom = NULL;

	if ( ! pFnStartZoom )
		pFnStartZoom = (UFunction*) UObject::GObjObjects()->Data[ 53993 ];

	ASanctumPlayerController_execStartZoom_Parms StartZoom_Parms;
	StartZoom_Parms.NewDesiredFOV = NewDesiredFOV;
	StartZoom_Parms.NewZoomRate = NewZoomRate;

	this->ProcessEvent ( pFnStartZoom, &StartZoom_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.AdjustFOV
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASanctumPlayerController::AdjustFOV ( float DeltaTime )
{
	static UFunction* pFnAdjustFOV = NULL;

	if ( ! pFnAdjustFOV )
		pFnAdjustFOV = (UFunction*) UObject::GObjObjects()->Data[ 53990 ];

	ASanctumPlayerController_execAdjustFOV_Parms AdjustFOV_Parms;
	AdjustFOV_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnAdjustFOV, &AdjustFOV_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumPlayerController::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 53988 ];

	ASanctumPlayerController_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   aPawn                          ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void ASanctumPlayerController::eventPossess ( class APawn* aPawn, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = (UFunction*) UObject::GObjObjects()->Data[ 53985 ];

	ASanctumPlayerController_eventPossess_Parms Possess_Parms;
	Possess_Parms.aPawn = aPawn;
	Possess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ClientSetHUD
// [0x010201C2] 
// Parameters infos:
// class UClass*                  newHUDType                     ( CPF_Parm )

void ASanctumPlayerController::ClientSetHUD ( class UClass* newHUDType )
{
	static UFunction* pFnClientSetHUD = NULL;

	if ( ! pFnClientSetHUD )
		pFnClientSetHUD = (UFunction*) UObject::GObjObjects()->Data[ 53983 ];

	ASanctumPlayerController_execClientSetHUD_Parms ClientSetHUD_Parms;
	ClientSetHUD_Parms.newHUDType = newHUDType;

	this->ProcessEvent ( pFnClientSetHUD, &ClientSetHUD_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.KickPlayer
// [0x00020002] 
// Parameters infos:
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumPlayerController::KickPlayer ( struct FString PlayerName )
{
	static UFunction* pFnKickPlayer = NULL;

	if ( ! pFnKickPlayer )
		pFnKickPlayer = (UFunction*) UObject::GObjObjects()->Data[ 53979 ];

	ASanctumPlayerController_execKickPlayer_Parms KickPlayer_Parms;
	memcpy ( &KickPlayer_Parms.PlayerName, &PlayerName, 0xC );

	this->ProcessEvent ( pFnKickPlayer, &KickPlayer_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ClientWasKicked
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void ASanctumPlayerController::eventClientWasKicked ( )
{
	static UFunction* pFnClientWasKicked = NULL;

	if ( ! pFnClientWasKicked )
		pFnClientWasKicked = (UFunction*) UObject::GObjObjects()->Data[ 53978 ];

	ASanctumPlayerController_eventClientWasKicked_Parms ClientWasKicked_Parms;

	this->ProcessEvent ( pFnClientWasKicked, &ClientWasKicked_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.OnFriendMessageReceived
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            SendingPlayer                  ( CPF_Parm )
// struct FString                 SendingNick                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumPlayerController::OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message )
{
	static UFunction* pFnOnFriendMessageReceived = NULL;

	if ( ! pFnOnFriendMessageReceived )
		pFnOnFriendMessageReceived = (UFunction*) UObject::GObjObjects()->Data[ 53973 ];

	ASanctumPlayerController_execOnFriendMessageReceived_Parms OnFriendMessageReceived_Parms;
	OnFriendMessageReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnFriendMessageReceived_Parms.SendingPlayer, &SendingPlayer, 0x8 );
	memcpy ( &OnFriendMessageReceived_Parms.SendingNick, &SendingNick, 0xC );
	memcpy ( &OnFriendMessageReceived_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnOnFriendMessageReceived, &OnFriendMessageReceived_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.OnFriendInviteReceived
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            RequestingPlayer               ( CPF_Parm )
// struct FString                 RequestingNick                 ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumPlayerController::OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message )
{
	static UFunction* pFnOnFriendInviteReceived = NULL;

	if ( ! pFnOnFriendInviteReceived )
		pFnOnFriendInviteReceived = (UFunction*) UObject::GObjObjects()->Data[ 53968 ];

	ASanctumPlayerController_execOnFriendInviteReceived_Parms OnFriendInviteReceived_Parms;
	OnFriendInviteReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnFriendInviteReceived_Parms.RequestingPlayer, &RequestingPlayer, 0x8 );
	memcpy ( &OnFriendInviteReceived_Parms.RequestingNick, &RequestingNick, 0xC );
	memcpy ( &OnFriendInviteReceived_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnOnFriendInviteReceived, &OnFriendInviteReceived_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.OnGameInviteReceived
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 RequestingNick                 ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumPlayerController::OnGameInviteReceived ( unsigned char LocalUserNum, struct FString RequestingNick )
{
	static UFunction* pFnOnGameInviteReceived = NULL;

	if ( ! pFnOnGameInviteReceived )
		pFnOnGameInviteReceived = (UFunction*) UObject::GObjObjects()->Data[ 53965 ];

	ASanctumPlayerController_execOnGameInviteReceived_Parms OnGameInviteReceived_Parms;
	OnGameInviteReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnGameInviteReceived_Parms.RequestingNick, &RequestingNick, 0xC );

	this->ProcessEvent ( pFnOnGameInviteReceived, &OnGameInviteReceived_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.OnReadProfileSettingsComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ASanctumPlayerController::OnReadProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadProfileSettingsComplete = NULL;

	if ( ! pFnOnReadProfileSettingsComplete )
		pFnOnReadProfileSettingsComplete = (UFunction*) UObject::GObjObjects()->Data[ 53962 ];

	ASanctumPlayerController_execOnReadProfileSettingsComplete_Parms OnReadProfileSettingsComplete_Parms;
	OnReadProfileSettingsComplete_Parms.LocalUserNum = LocalUserNum;
	OnReadProfileSettingsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadProfileSettingsComplete, &OnReadProfileSettingsComplete_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ClientSetOnlineStatus
// [0x010201C2] 
// Parameters infos:

void ASanctumPlayerController::ClientSetOnlineStatus ( )
{
	static UFunction* pFnClientSetOnlineStatus = NULL;

	if ( ! pFnClientSetOnlineStatus )
		pFnClientSetOnlineStatus = (UFunction*) UObject::GObjObjects()->Data[ 53955 ];

	ASanctumPlayerController_execClientSetOnlineStatus_Parms ClientSetOnlineStatus_Parms;

	this->ProcessEvent ( pFnClientSetOnlineStatus, &ClientSetOnlineStatus_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.OnLinkStatusChanged
// [0x00020002] 
// Parameters infos:
// unsigned long                  bConnected                     ( CPF_Parm )

void ASanctumPlayerController::OnLinkStatusChanged ( unsigned long bConnected )
{
	static UFunction* pFnOnLinkStatusChanged = NULL;

	if ( ! pFnOnLinkStatusChanged )
		pFnOnLinkStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 53953 ];

	ASanctumPlayerController_execOnLinkStatusChanged_Parms OnLinkStatusChanged_Parms;
	OnLinkStatusChanged_Parms.bConnected = bConnected;

	this->ProcessEvent ( pFnOnLinkStatusChanged, &OnLinkStatusChanged_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.OnConnectionStatusChange
// [0x00020002] 
// Parameters infos:
// unsigned char                  ConnectionStatus               ( CPF_Parm )

void ASanctumPlayerController::OnConnectionStatusChange ( unsigned char ConnectionStatus )
{
	static UFunction* pFnOnConnectionStatusChange = NULL;

	if ( ! pFnOnConnectionStatusChange )
		pFnOnConnectionStatusChange = (UFunction*) UObject::GObjObjects()->Data[ 53949 ];

	ASanctumPlayerController_execOnConnectionStatusChange_Parms OnConnectionStatusChange_Parms;
	OnConnectionStatusChange_Parms.ConnectionStatus = ConnectionStatus;

	this->ProcessEvent ( pFnOnConnectionStatusChange, &OnConnectionStatusChange_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ClearOnlineDelegates
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumPlayerController::eventClearOnlineDelegates ( )
{
	static UFunction* pFnClearOnlineDelegates = NULL;

	if ( ! pFnClearOnlineDelegates )
		pFnClearOnlineDelegates = (UFunction*) UObject::GObjObjects()->Data[ 53947 ];

	ASanctumPlayerController_eventClearOnlineDelegates_Parms ClearOnlineDelegates_Parms;

	this->ProcessEvent ( pFnClearOnlineDelegates, &ClearOnlineDelegates_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ReceivedGameClass
// [0x00020102] 
// Parameters infos:
// class UClass*                  GameClass                      ( CPF_Parm )

void ASanctumPlayerController::ReceivedGameClass ( class UClass* GameClass )
{
	static UFunction* pFnReceivedGameClass = NULL;

	if ( ! pFnReceivedGameClass )
		pFnReceivedGameClass = (UFunction*) UObject::GObjObjects()->Data[ 53945 ];

	ASanctumPlayerController_execReceivedGameClass_Parms ReceivedGameClass_Parms;
	ReceivedGameClass_Parms.GameClass = GameClass;

	this->ProcessEvent ( pFnReceivedGameClass, &ReceivedGameClass_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.AddOnlineDelegates
// [0x00020002] 
// Parameters infos:
// unsigned long                  bRegisterVoice                 ( CPF_Parm )

void ASanctumPlayerController::AddOnlineDelegates ( unsigned long bRegisterVoice )
{
	static UFunction* pFnAddOnlineDelegates = NULL;

	if ( ! pFnAddOnlineDelegates )
		pFnAddOnlineDelegates = (UFunction*) UObject::GObjObjects()->Data[ 53943 ];

	ASanctumPlayerController_execAddOnlineDelegates_Parms AddOnlineDelegates_Parms;
	AddOnlineDelegates_Parms.bRegisterVoice = bRegisterVoice;

	this->ProcessEvent ( pFnAddOnlineDelegates, &AddOnlineDelegates_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.UpdateParty
// [0x00820002] 
// Parameters infos:

void ASanctumPlayerController::UpdateParty ( )
{
	static UFunction* pFnUpdateParty = NULL;

	if ( ! pFnUpdateParty )
		pFnUpdateParty = (UFunction*) UObject::GObjObjects()->Data[ 53926 ];

	ASanctumPlayerController_execUpdateParty_Parms UpdateParty_Parms;

	this->ProcessEvent ( pFnUpdateParty, &UpdateParty_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ShowSteamFriends
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::ShowSteamFriends ( )
{
	static UFunction* pFnShowSteamFriends = NULL;

	if ( ! pFnShowSteamFriends )
		pFnShowSteamFriends = (UFunction*) UObject::GObjObjects()->Data[ 53924 ];

	ASanctumPlayerController_execShowSteamFriends_Parms ShowSteamFriends_Parms;

	this->ProcessEvent ( pFnShowSteamFriends, &ShowSteamFriends_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.WeakspotSoundCooldown
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::WeakspotSoundCooldown ( )
{
	static UFunction* pFnWeakspotSoundCooldown = NULL;

	if ( ! pFnWeakspotSoundCooldown )
		pFnWeakspotSoundCooldown = (UFunction*) UObject::GObjObjects()->Data[ 53923 ];

	ASanctumPlayerController_execWeakspotSoundCooldown_Parms WeakspotSoundCooldown_Parms;

	this->ProcessEvent ( pFnWeakspotSoundCooldown, &WeakspotSoundCooldown_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.DidWeakspotKill
// [0x00020002] 
// Parameters infos:
// class ASanctumEnemy*           Victim                         ( CPF_Parm )

void ASanctumPlayerController::DidWeakspotKill ( class ASanctumEnemy* Victim )
{
	static UFunction* pFnDidWeakspotKill = NULL;

	if ( ! pFnDidWeakspotKill )
		pFnDidWeakspotKill = (UFunction*) UObject::GObjObjects()->Data[ 53921 ];

	ASanctumPlayerController_execDidWeakspotKill_Parms DidWeakspotKill_Parms;
	DidWeakspotKill_Parms.Victim = Victim;

	this->ProcessEvent ( pFnDidWeakspotKill, &DidWeakspotKill_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ClientToggleRadio
// [0x010201C2] 
// Parameters infos:
// unsigned long                  On                             ( CPF_Parm )

void ASanctumPlayerController::ClientToggleRadio ( unsigned long On )
{
	static UFunction* pFnClientToggleRadio = NULL;

	if ( ! pFnClientToggleRadio )
		pFnClientToggleRadio = (UFunction*) UObject::GObjObjects()->Data[ 53919 ];

	ASanctumPlayerController_execClientToggleRadio_Parms ClientToggleRadio_Parms;
	ClientToggleRadio_Parms.On = On;

	this->ProcessEvent ( pFnClientToggleRadio, &ClientToggleRadio_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ClientExpandParasol
// [0x010201C2] 
// Parameters infos:

void ASanctumPlayerController::ClientExpandParasol ( )
{
	static UFunction* pFnClientExpandParasol = NULL;

	if ( ! pFnClientExpandParasol )
		pFnClientExpandParasol = (UFunction*) UObject::GObjObjects()->Data[ 53918 ];

	ASanctumPlayerController_execClientExpandParasol_Parms ClientExpandParasol_Parms;

	this->ProcessEvent ( pFnClientExpandParasol, &ClientExpandParasol_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ClientPickedUpChristmasPresent
// [0x010201C2] 
// Parameters infos:

void ASanctumPlayerController::ClientPickedUpChristmasPresent ( )
{
	static UFunction* pFnClientPickedUpChristmasPresent = NULL;

	if ( ! pFnClientPickedUpChristmasPresent )
		pFnClientPickedUpChristmasPresent = (UFunction*) UObject::GObjObjects()->Data[ 53917 ];

	ASanctumPlayerController_execClientPickedUpChristmasPresent_Parms ClientPickedUpChristmasPresent_Parms;

	this->ProcessEvent ( pFnClientPickedUpChristmasPresent, &ClientPickedUpChristmasPresent_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ClientLightTheGrill
// [0x010201C2] 
// Parameters infos:

void ASanctumPlayerController::ClientLightTheGrill ( )
{
	static UFunction* pFnClientLightTheGrill = NULL;

	if ( ! pFnClientLightTheGrill )
		pFnClientLightTheGrill = (UFunction*) UObject::GObjObjects()->Data[ 53916 ];

	ASanctumPlayerController_execClientLightTheGrill_Parms ClientLightTheGrill_Parms;

	this->ProcessEvent ( pFnClientLightTheGrill, &ClientLightTheGrill_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ClientShotFish
// [0x010201C2] 
// Parameters infos:
// int                            Id                             ( CPF_Parm )

void ASanctumPlayerController::ClientShotFish ( int Id )
{
	static UFunction* pFnClientShotFish = NULL;

	if ( ! pFnClientShotFish )
		pFnClientShotFish = (UFunction*) UObject::GObjObjects()->Data[ 53914 ];

	ASanctumPlayerController_execClientShotFish_Parms ClientShotFish_Parms;
	ClientShotFish_Parms.Id = Id;

	this->ProcessEvent ( pFnClientShotFish, &ClientShotFish_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ClientUnlockAchievement
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ASanctumPlayerController::ClientUnlockAchievement ( int Index )
{
	static UFunction* pFnClientUnlockAchievement = NULL;

	if ( ! pFnClientUnlockAchievement )
		pFnClientUnlockAchievement = (UFunction*) UObject::GObjObjects()->Data[ 53912 ];

	ASanctumPlayerController_execClientUnlockAchievement_Parms ClientUnlockAchievement_Parms;
	ClientUnlockAchievement_Parms.Index = Index;

	this->ProcessEvent ( pFnClientUnlockAchievement, &ClientUnlockAchievement_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ClientReadAllOnlineStats
// [0x010201C2] 
// Parameters infos:

void ASanctumPlayerController::ClientReadAllOnlineStats ( )
{
	static UFunction* pFnClientReadAllOnlineStats = NULL;

	if ( ! pFnClientReadAllOnlineStats )
		pFnClientReadAllOnlineStats = (UFunction*) UObject::GObjObjects()->Data[ 53911 ];

	ASanctumPlayerController_execClientReadAllOnlineStats_Parms ClientReadAllOnlineStats_Parms;

	this->ProcessEvent ( pFnClientReadAllOnlineStats, &ClientReadAllOnlineStats_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ClientDisableAchievements
// [0x010201C2] 
// Parameters infos:

void ASanctumPlayerController::ClientDisableAchievements ( )
{
	static UFunction* pFnClientDisableAchievements = NULL;

	if ( ! pFnClientDisableAchievements )
		pFnClientDisableAchievements = (UFunction*) UObject::GObjObjects()->Data[ 53910 ];

	ASanctumPlayerController_execClientDisableAchievements_Parms ClientDisableAchievements_Parms;

	this->ProcessEvent ( pFnClientDisableAchievements, &ClientDisableAchievements_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ClientSetStatToViewID
// [0x010201C2] 
// Parameters infos:
// unsigned char                  ViewId                         ( CPF_Parm )
// int                            StatValueDiff                  ( CPF_Parm )
// unsigned char                  NumberOfStats                  ( CPF_Parm )

void ASanctumPlayerController::ClientSetStatToViewID ( unsigned char ViewId, int StatValueDiff, unsigned char NumberOfStats )
{
	static UFunction* pFnClientSetStatToViewID = NULL;

	if ( ! pFnClientSetStatToViewID )
		pFnClientSetStatToViewID = (UFunction*) UObject::GObjObjects()->Data[ 53906 ];

	ASanctumPlayerController_execClientSetStatToViewID_Parms ClientSetStatToViewID_Parms;
	ClientSetStatToViewID_Parms.ViewId = ViewId;
	ClientSetStatToViewID_Parms.StatValueDiff = StatValueDiff;
	ClientSetStatToViewID_Parms.NumberOfStats = NumberOfStats;

	this->ProcessEvent ( pFnClientSetStatToViewID, &ClientSetStatToViewID_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.Cleanup
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::Cleanup ( )
{
	static UFunction* pFnCleanup = NULL;

	if ( ! pFnCleanup )
		pFnCleanup = (UFunction*) UObject::GObjObjects()->Data[ 53905 ];

	ASanctumPlayerController_execCleanup_Parms Cleanup_Parms;

	this->ProcessEvent ( pFnCleanup, &Cleanup_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.OnJoinGameComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bSuccessful                    ( CPF_Parm )

void ASanctumPlayerController::OnJoinGameComplete ( struct FName SessionName, unsigned long bSuccessful )
{
	static UFunction* pFnOnJoinGameComplete = NULL;

	if ( ! pFnOnJoinGameComplete )
		pFnOnJoinGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 53901 ];

	ASanctumPlayerController_execOnJoinGameComplete_Parms OnJoinGameComplete_Parms;
	memcpy ( &OnJoinGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnJoinGameComplete_Parms.bSuccessful = bSuccessful;

	this->ProcessEvent ( pFnOnJoinGameComplete, &OnJoinGameComplete_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.JoinGame
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// int                            ServerIndex                    ( CPF_Parm )

void ASanctumPlayerController::JoinGame ( int ServerIndex )
{
	static UFunction* pFnJoinGame = NULL;

	if ( ! pFnJoinGame )
		pFnJoinGame = (UFunction*) UObject::GObjObjects()->Data[ 53896 ];

	ASanctumPlayerController_execJoinGame_Parms JoinGame_Parms;
	JoinGame_Parms.ServerIndex = ServerIndex;

	this->ProcessEvent ( pFnJoinGame, &JoinGame_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.DestroyCurrentOnlineGame
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ASanctumPlayerController::DestroyCurrentOnlineGame ( )
{
	static UFunction* pFnDestroyCurrentOnlineGame = NULL;

	if ( ! pFnDestroyCurrentOnlineGame )
		pFnDestroyCurrentOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 53895 ];

	ASanctumPlayerController_execDestroyCurrentOnlineGame_Parms DestroyCurrentOnlineGame_Parms;

	this->ProcessEvent ( pFnDestroyCurrentOnlineGame, &DestroyCurrentOnlineGame_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.PrevElevator
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ASanctumPlayerController::PrevElevator ( )
{
	static UFunction* pFnPrevElevator = NULL;

	if ( ! pFnPrevElevator )
		pFnPrevElevator = (UFunction*) UObject::GObjObjects()->Data[ 53892 ];

	ASanctumPlayerController_execPrevElevator_Parms PrevElevator_Parms;

	this->ProcessEvent ( pFnPrevElevator, &PrevElevator_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.NextElevator
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ASanctumPlayerController::NextElevator ( )
{
	static UFunction* pFnNextElevator = NULL;

	if ( ! pFnNextElevator )
		pFnNextElevator = (UFunction*) UObject::GObjObjects()->Data[ 53889 ];

	ASanctumPlayerController_execNextElevator_Parms NextElevator_Parms;

	this->ProcessEvent ( pFnNextElevator, &NextElevator_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.SortElevators
// [0x00120002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USanctumTeleportInterface* A                              ( CPF_Parm )
// class USanctumTeleportInterface* B                              ( CPF_Parm )

int ASanctumPlayerController::SortElevators ( class USanctumTeleportInterface* A, class USanctumTeleportInterface* B )
{
	static UFunction* pFnSortElevators = NULL;

	if ( ! pFnSortElevators )
		pFnSortElevators = (UFunction*) UObject::GObjObjects()->Data[ 53771 ];

	ASanctumPlayerController_execSortElevators_Parms SortElevators_Parms;
	SortElevators_Parms.A = A;
	SortElevators_Parms.B = B;

	this->ProcessEvent ( pFnSortElevators, &SortElevators_Parms, NULL );

	return SortElevators_Parms.ReturnValue;
};

// Function Sanctum.SanctumPlayerController.ClientStartOnlineGame
// [0x010201C2] 
// Parameters infos:

void ASanctumPlayerController::ClientStartOnlineGame ( )
{
	static UFunction* pFnClientStartOnlineGame = NULL;

	if ( ! pFnClientStartOnlineGame )
		pFnClientStartOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 53882 ];

	ASanctumPlayerController_execClientStartOnlineGame_Parms ClientStartOnlineGame_Parms;

	this->ProcessEvent ( pFnClientStartOnlineGame, &ClientStartOnlineGame_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.OnFlushLeaderboardStatsComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ASanctumPlayerController::OnFlushLeaderboardStatsComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnFlushLeaderboardStatsComplete = NULL;

	if ( ! pFnOnFlushLeaderboardStatsComplete )
		pFnOnFlushLeaderboardStatsComplete = (UFunction*) UObject::GObjObjects()->Data[ 53879 ];

	ASanctumPlayerController_execOnFlushLeaderboardStatsComplete_Parms OnFlushLeaderboardStatsComplete_Parms;
	memcpy ( &OnFlushLeaderboardStatsComplete_Parms.SessionName, &SessionName, 0x8 );
	OnFlushLeaderboardStatsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFlushLeaderboardStatsComplete, &OnFlushLeaderboardStatsComplete_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ClientWriteLeaderboardStats
// [0x010241C2] 
// Parameters infos:
// class UClass*                  OnlineStatsWriteClass          ( CPF_Parm )
// unsigned long                  bIsIncomplete                  ( CPF_OptionalParm | CPF_Parm )

void ASanctumPlayerController::ClientWriteLeaderboardStats ( class UClass* OnlineStatsWriteClass, unsigned long bIsIncomplete )
{
	static UFunction* pFnClientWriteLeaderboardStats = NULL;

	if ( ! pFnClientWriteLeaderboardStats )
		pFnClientWriteLeaderboardStats = (UFunction*) UObject::GObjObjects()->Data[ 53871 ];

	ASanctumPlayerController_execClientWriteLeaderboardStats_Parms ClientWriteLeaderboardStats_Parms;
	ClientWriteLeaderboardStats_Parms.OnlineStatsWriteClass = OnlineStatsWriteClass;
	ClientWriteLeaderboardStats_Parms.bIsIncomplete = bIsIncomplete;

	this->ProcessEvent ( pFnClientWriteLeaderboardStats, &ClientWriteLeaderboardStats_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.NewActionPhase
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::NewActionPhase ( )
{
	static UFunction* pFnNewActionPhase = NULL;

	if ( ! pFnNewActionPhase )
		pFnNewActionPhase = (UFunction*) UObject::GObjObjects()->Data[ 53870 ];

	ASanctumPlayerController_execNewActionPhase_Parms NewActionPhase_Parms;

	this->ProcessEvent ( pFnNewActionPhase, &NewActionPhase_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.NewBuildPhase
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::NewBuildPhase ( )
{
	static UFunction* pFnNewBuildPhase = NULL;

	if ( ! pFnNewBuildPhase )
		pFnNewBuildPhase = (UFunction*) UObject::GObjObjects()->Data[ 53869 ];

	ASanctumPlayerController_execNewBuildPhase_Parms NewBuildPhase_Parms;

	this->ProcessEvent ( pFnNewBuildPhase, &NewBuildPhase_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.DrawTowerStats
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  draw                           ( CPF_Parm )

void ASanctumPlayerController::DrawTowerStats ( unsigned long draw )
{
	static UFunction* pFnDrawTowerStats = NULL;

	if ( ! pFnDrawTowerStats )
		pFnDrawTowerStats = (UFunction*) UObject::GObjObjects()->Data[ 53867 ];

	ASanctumPlayerController_execDrawTowerStats_Parms DrawTowerStats_Parms;
	DrawTowerStats_Parms.draw = draw;

	this->ProcessEvent ( pFnDrawTowerStats, &DrawTowerStats_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.registerListenersToHud
// [0x00020102] 
// Parameters infos:
// class ASanctumGameReplicationInfo* GRI                            ( CPF_Parm )
// class AHUD*                    HUD                            ( CPF_Parm )

void ASanctumPlayerController::registerListenersToHud ( class ASanctumGameReplicationInfo* GRI, class AHUD* HUD )
{
	static UFunction* pFnregisterListenersToHud = NULL;

	if ( ! pFnregisterListenersToHud )
		pFnregisterListenersToHud = (UFunction*) UObject::GObjObjects()->Data[ 53862 ];

	ASanctumPlayerController_execregisterListenersToHud_Parms registerListenersToHud_Parms;
	registerListenersToHud_Parms.GRI = GRI;
	registerListenersToHud_Parms.HUD = HUD;

	this->ProcessEvent ( pFnregisterListenersToHud, &registerListenersToHud_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.unregisterListenersToHud
// [0x00020102] 
// Parameters infos:
// class ASanctumGameReplicationInfo* GRI                            ( CPF_Parm )
// class AHUD*                    HUD                            ( CPF_Parm )

void ASanctumPlayerController::unregisterListenersToHud ( class ASanctumGameReplicationInfo* GRI, class AHUD* HUD )
{
	static UFunction* pFnunregisterListenersToHud = NULL;

	if ( ! pFnunregisterListenersToHud )
		pFnunregisterListenersToHud = (UFunction*) UObject::GObjObjects()->Data[ 53857 ];

	ASanctumPlayerController_execunregisterListenersToHud_Parms unregisterListenersToHud_Parms;
	unregisterListenersToHud_Parms.GRI = GRI;
	unregisterListenersToHud_Parms.HUD = HUD;

	this->ProcessEvent ( pFnunregisterListenersToHud, &unregisterListenersToHud_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ShowStatScreen
// [0x00020102] 
// Parameters infos:

void ASanctumPlayerController::ShowStatScreen ( )
{
	static UFunction* pFnShowStatScreen = NULL;

	if ( ! pFnShowStatScreen )
		pFnShowStatScreen = (UFunction*) UObject::GObjObjects()->Data[ 53852 ];

	ASanctumPlayerController_execShowStatScreen_Parms ShowStatScreen_Parms;

	this->ProcessEvent ( pFnShowStatScreen, &ShowStatScreen_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.SetTimeLabelForStatScreen
// [0x00020102] 
// Parameters infos:

void ASanctumPlayerController::SetTimeLabelForStatScreen ( )
{
	static UFunction* pFnSetTimeLabelForStatScreen = NULL;

	if ( ! pFnSetTimeLabelForStatScreen )
		pFnSetTimeLabelForStatScreen = (UFunction*) UObject::GObjObjects()->Data[ 53851 ];

	ASanctumPlayerController_execSetTimeLabelForStatScreen_Parms SetTimeLabelForStatScreen_Parms;

	this->ProcessEvent ( pFnSetTimeLabelForStatScreen, &SetTimeLabelForStatScreen_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ShowGameEndedScreen
// [0x00020102] 
// Parameters infos:
// unsigned long                  won                            ( CPF_Parm )

void ASanctumPlayerController::ShowGameEndedScreen ( unsigned long won )
{
	static UFunction* pFnShowGameEndedScreen = NULL;

	if ( ! pFnShowGameEndedScreen )
		pFnShowGameEndedScreen = (UFunction*) UObject::GObjObjects()->Data[ 53849 ];

	ASanctumPlayerController_execShowGameEndedScreen_Parms ShowGameEndedScreen_Parms;
	ShowGameEndedScreen_Parms.won = won;

	this->ProcessEvent ( pFnShowGameEndedScreen, &ShowGameEndedScreen_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.RewardStars
// [0x00020102] 
// Parameters infos:

void ASanctumPlayerController::RewardStars ( )
{
	static UFunction* pFnRewardStars = NULL;

	if ( ! pFnRewardStars )
		pFnRewardStars = (UFunction*) UObject::GObjObjects()->Data[ 53845 ];

	ASanctumPlayerController_execRewardStars_Parms RewardStars_Parms;

	this->ProcessEvent ( pFnRewardStars, &RewardStars_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ClientGameEnded
// [0x010201C2] 
// Parameters infos:
// class AActor*                  EndGameFocus                   ( CPF_Parm )
// unsigned long                  bIsWinner                      ( CPF_Parm )

void ASanctumPlayerController::ClientGameEnded ( class AActor* EndGameFocus, unsigned long bIsWinner )
{
	static UFunction* pFnClientGameEnded = NULL;

	if ( ! pFnClientGameEnded )
		pFnClientGameEnded = (UFunction*) UObject::GObjObjects()->Data[ 53838 ];

	ASanctumPlayerController_execClientGameEnded_Parms ClientGameEnded_Parms;
	ClientGameEnded_Parms.EndGameFocus = EndGameFocus;
	ClientGameEnded_Parms.bIsWinner = bIsWinner;

	this->ProcessEvent ( pFnClientGameEnded, &ClientGameEnded_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.GameHasEnded
// [0x00024002] 
// Parameters infos:
// class AActor*                  EndGameFocus                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsWinner                      ( CPF_OptionalParm | CPF_Parm )

void ASanctumPlayerController::GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner )
{
	static UFunction* pFnGameHasEnded = NULL;

	if ( ! pFnGameHasEnded )
		pFnGameHasEnded = (UFunction*) UObject::GObjObjects()->Data[ 53835 ];

	ASanctumPlayerController_execGameHasEnded_Parms GameHasEnded_Parms;
	GameHasEnded_Parms.EndGameFocus = EndGameFocus;
	GameHasEnded_Parms.bIsWinner = bIsWinner;

	this->ProcessEvent ( pFnGameHasEnded, &GameHasEnded_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.MapCompleted
// [0x00020002] 
// Parameters infos:
// struct FString                 NextMap                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  MapUnlocked                    ( CPF_Parm )

void ASanctumPlayerController::MapCompleted ( struct FString NextMap, unsigned long MapUnlocked )
{
	static UFunction* pFnMapCompleted = NULL;

	if ( ! pFnMapCompleted )
		pFnMapCompleted = (UFunction*) UObject::GObjObjects()->Data[ 53832 ];

	ASanctumPlayerController_execMapCompleted_Parms MapCompleted_Parms;
	memcpy ( &MapCompleted_Parms.NextMap, &NextMap, 0xC );
	MapCompleted_Parms.MapUnlocked = MapUnlocked;

	this->ProcessEvent ( pFnMapCompleted, &MapCompleted_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.AllowTextMessage
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )

bool ASanctumPlayerController::AllowTextMessage ( struct FString msg )
{
	static UFunction* pFnAllowTextMessage = NULL;

	if ( ! pFnAllowTextMessage )
		pFnAllowTextMessage = (UFunction*) UObject::GObjObjects()->Data[ 53828 ];

	ASanctumPlayerController_execAllowTextMessage_Parms AllowTextMessage_Parms;
	memcpy ( &AllowTextMessage_Parms.msg, &msg, 0xC );

	this->ProcessEvent ( pFnAllowTextMessage, &AllowTextMessage_Parms, NULL );

	return AllowTextMessage_Parms.ReturnValue;
};

// Function Sanctum.SanctumPlayerController.NotifyKismetEscapeMenu
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::NotifyKismetEscapeMenu ( )
{
	static UFunction* pFnNotifyKismetEscapeMenu = NULL;

	if ( ! pFnNotifyKismetEscapeMenu )
		pFnNotifyKismetEscapeMenu = (UFunction*) UObject::GObjObjects()->Data[ 53823 ];

	ASanctumPlayerController_execNotifyKismetEscapeMenu_Parms NotifyKismetEscapeMenu_Parms;

	this->ProcessEvent ( pFnNotifyKismetEscapeMenu, &NotifyKismetEscapeMenu_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.NotifyKismetGameResume
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::NotifyKismetGameResume ( )
{
	static UFunction* pFnNotifyKismetGameResume = NULL;

	if ( ! pFnNotifyKismetGameResume )
		pFnNotifyKismetGameResume = (UFunction*) UObject::GObjObjects()->Data[ 53818 ];

	ASanctumPlayerController_execNotifyKismetGameResume_Parms NotifyKismetGameResume_Parms;

	this->ProcessEvent ( pFnNotifyKismetGameResume, &NotifyKismetGameResume_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.hide
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Path                           ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumPlayerController::hide ( struct FString Path )
{
	static UFunction* pFnhide = NULL;

	if ( ! pFnhide )
		pFnhide = (UFunction*) UObject::GObjObjects()->Data[ 53815 ];

	ASanctumPlayerController_exechide_Parms hide_Parms;
	memcpy ( &hide_Parms.Path, &Path, 0xC );

	this->ProcessEvent ( pFnhide, &hide_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.AllowTTSMessageFrom
// [0x00080102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

bool ASanctumPlayerController::AllowTTSMessageFrom ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnAllowTTSMessageFrom = NULL;

	if ( ! pFnAllowTTSMessageFrom )
		pFnAllowTTSMessageFrom = (UFunction*) UObject::GObjObjects()->Data[ 53812 ];

	ASanctumPlayerController_execAllowTTSMessageFrom_Parms AllowTTSMessageFrom_Parms;
	AllowTTSMessageFrom_Parms.PRI = PRI;

	this->ProcessEvent ( pFnAllowTTSMessageFrom, &AllowTTSMessageFrom_Parms, NULL );

	return AllowTTSMessageFrom_Parms.ReturnValue;
};

// Function Sanctum.SanctumPlayerController.IsBuildPhase
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumPlayerController::IsBuildPhase ( )
{
	static UFunction* pFnIsBuildPhase = NULL;

	if ( ! pFnIsBuildPhase )
		pFnIsBuildPhase = (UFunction*) UObject::GObjObjects()->Data[ 50453 ];

	ASanctumPlayerController_execIsBuildPhase_Parms IsBuildPhase_Parms;

	this->ProcessEvent ( pFnIsBuildPhase, &IsBuildPhase_Parms, NULL );

	return IsBuildPhase_Parms.ReturnValue;
};

// Function Sanctum.SanctumPlayerController.ClientRegisterBuildListeners
// [0x010201C2] 
// Parameters infos:

void ASanctumPlayerController::ClientRegisterBuildListeners ( )
{
	static UFunction* pFnClientRegisterBuildListeners = NULL;

	if ( ! pFnClientRegisterBuildListeners )
		pFnClientRegisterBuildListeners = (UFunction*) UObject::GObjObjects()->Data[ 53810 ];

	ASanctumPlayerController_execClientRegisterBuildListeners_Parms ClientRegisterBuildListeners_Parms;

	this->ProcessEvent ( pFnClientRegisterBuildListeners, &ClientRegisterBuildListeners_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.BuildPhaseChanged
// [0x00024102] 
// Parameters infos:
// unsigned long                  buildPhase                     ( CPF_Parm )
// unsigned long                  isViaReplication               ( CPF_OptionalParm | CPF_Parm )

void ASanctumPlayerController::BuildPhaseChanged ( unsigned long buildPhase, unsigned long isViaReplication )
{
	static UFunction* pFnBuildPhaseChanged = NULL;

	if ( ! pFnBuildPhaseChanged )
		pFnBuildPhaseChanged = (UFunction*) UObject::GObjObjects()->Data[ 53807 ];

	ASanctumPlayerController_execBuildPhaseChanged_Parms BuildPhaseChanged_Parms;
	BuildPhaseChanged_Parms.buildPhase = buildPhase;
	BuildPhaseChanged_Parms.isViaReplication = isViaReplication;

	this->ProcessEvent ( pFnBuildPhaseChanged, &BuildPhaseChanged_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.updateNotifierText
// [0x00020002] 
// Parameters infos:
// unsigned long                  IsReady                        ( CPF_Parm )

void ASanctumPlayerController::updateNotifierText ( unsigned long IsReady )
{
	static UFunction* pFnupdateNotifierText = NULL;

	if ( ! pFnupdateNotifierText )
		pFnupdateNotifierText = (UFunction*) UObject::GObjObjects()->Data[ 53805 ];

	ASanctumPlayerController_execupdateNotifierText_Parms updateNotifierText_Parms;
	updateNotifierText_Parms.IsReady = IsReady;

	this->ProcessEvent ( pFnupdateNotifierText, &updateNotifierText_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.SetTextureLevel
// [0x00020002] 
// Parameters infos:
// unsigned char                  TextureLevel                   ( CPF_Parm )

void ASanctumPlayerController::SetTextureLevel ( unsigned char TextureLevel )
{
	static UFunction* pFnSetTextureLevel = NULL;

	if ( ! pFnSetTextureLevel )
		pFnSetTextureLevel = (UFunction*) UObject::GObjObjects()->Data[ 53803 ];

	ASanctumPlayerController_execSetTextureLevel_Parms SetTextureLevel_Parms;
	SetTextureLevel_Parms.TextureLevel = TextureLevel;

	this->ProcessEvent ( pFnSetTextureLevel, &SetTextureLevel_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.GetTextureLevel
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerController::GetTextureLevel ( )
{
	static UFunction* pFnGetTextureLevel = NULL;

	if ( ! pFnGetTextureLevel )
		pFnGetTextureLevel = (UFunction*) UObject::GObjObjects()->Data[ 53802 ];

	ASanctumPlayerController_execGetTextureLevel_Parms GetTextureLevel_Parms;

	this->ProcessEvent ( pFnGetTextureLevel, &GetTextureLevel_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.OpenStoreOverlayForDLC
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            AppID                          ( CPF_Parm )

void ASanctumPlayerController::OpenStoreOverlayForDLC ( int AppID )
{
	static UFunction* pFnOpenStoreOverlayForDLC = NULL;

	if ( ! pFnOpenStoreOverlayForDLC )
		pFnOpenStoreOverlayForDLC = (UFunction*) UObject::GObjObjects()->Data[ 53800 ];

	ASanctumPlayerController_execOpenStoreOverlayForDLC_Parms OpenStoreOverlayForDLC_Parms;
	OpenStoreOverlayForDLC_Parms.AppID = AppID;

	this->ProcessEvent ( pFnOpenStoreOverlayForDLC, &OpenStoreOverlayForDLC_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumPlayerController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 53799 ];

	ASanctumPlayerController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumPlayerController::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 53798 ];

	ASanctumPlayerController_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumPlayerController.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumPlayerController::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 53796 ];

	ASanctumPlayerController_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumController.OnLobbyInvite
// [0x00020002] 
// Parameters infos:
// struct FUniqueNetId            LobbyId                        ( CPF_Parm )
// struct FUniqueNetId            FriendID                       ( CPF_Parm )
// unsigned long                  bAccepted                      ( CPF_Parm )

void ASanctumController::OnLobbyInvite ( struct FUniqueNetId LobbyId, struct FUniqueNetId FriendID, unsigned long bAccepted )
{
	static UFunction* pFnOnLobbyInvite = NULL;

	if ( ! pFnOnLobbyInvite )
		pFnOnLobbyInvite = (UFunction*) UObject::GObjObjects()->Data[ 46473 ];

	ASanctumController_execOnLobbyInvite_Parms OnLobbyInvite_Parms;
	memcpy ( &OnLobbyInvite_Parms.LobbyId, &LobbyId, 0x8 );
	memcpy ( &OnLobbyInvite_Parms.FriendID, &FriendID, 0x8 );
	OnLobbyInvite_Parms.bAccepted = bAccepted;

	this->ProcessEvent ( pFnOnLobbyInvite, &OnLobbyInvite_Parms, NULL );
};

// Function Sanctum.SanctumController.OnLobbyJoinGame
// [0x00420000] 
// Parameters infos:
// int                            LobbyIndex                     ( CPF_Parm )
// struct FUniqueNetId            ServerID                       ( CPF_Parm )
// struct FString                 ServerIP                       ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FActiveLobbyInfo > LobbyList                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumController::OnLobbyJoinGame ( int LobbyIndex, struct FUniqueNetId ServerID, struct FString ServerIP, TArray< struct FActiveLobbyInfo >* LobbyList )
{
	static UFunction* pFnOnLobbyJoinGame = NULL;

	if ( ! pFnOnLobbyJoinGame )
		pFnOnLobbyJoinGame = (UFunction*) UObject::GObjObjects()->Data[ 46467 ];

	ASanctumController_execOnLobbyJoinGame_Parms OnLobbyJoinGame_Parms;
	OnLobbyJoinGame_Parms.LobbyIndex = LobbyIndex;
	memcpy ( &OnLobbyJoinGame_Parms.ServerID, &ServerID, 0x8 );
	memcpy ( &OnLobbyJoinGame_Parms.ServerIP, &ServerIP, 0xC );

	this->ProcessEvent ( pFnOnLobbyJoinGame, &OnLobbyJoinGame_Parms, NULL );

	if ( LobbyList )
		memcpy ( LobbyList, &OnLobbyJoinGame_Parms.LobbyList, 0xC );
};

// Function Sanctum.SanctumController.OnLobbyReceiveBinaryData
// [0x00420000] 
// Parameters infos:
// int                            LobbyIndex                     ( CPF_Parm )
// int                            MemberIndex                    ( CPF_Parm )
// TArray< struct FActiveLobbyInfo > LobbyList                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< unsigned char >        Data                           ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumController::OnLobbyReceiveBinaryData ( int LobbyIndex, int MemberIndex, TArray< struct FActiveLobbyInfo >* LobbyList, TArray< unsigned char >* Data )
{
	static UFunction* pFnOnLobbyReceiveBinaryData = NULL;

	if ( ! pFnOnLobbyReceiveBinaryData )
		pFnOnLobbyReceiveBinaryData = (UFunction*) UObject::GObjObjects()->Data[ 46460 ];

	ASanctumController_execOnLobbyReceiveBinaryData_Parms OnLobbyReceiveBinaryData_Parms;
	OnLobbyReceiveBinaryData_Parms.LobbyIndex = LobbyIndex;
	OnLobbyReceiveBinaryData_Parms.MemberIndex = MemberIndex;

	this->ProcessEvent ( pFnOnLobbyReceiveBinaryData, &OnLobbyReceiveBinaryData_Parms, NULL );

	if ( LobbyList )
		memcpy ( LobbyList, &OnLobbyReceiveBinaryData_Parms.LobbyList, 0xC );

	if ( Data )
		memcpy ( Data, &OnLobbyReceiveBinaryData_Parms.Data, 0xC );
};

// Function Sanctum.SanctumController.OnLobbyReceiveMessage
// [0x00420000] 
// Parameters infos:
// int                            LobbyIndex                     ( CPF_Parm )
// int                            MemberIndex                    ( CPF_Parm )
// struct FString                 Type                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FActiveLobbyInfo > LobbyList                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumController::OnLobbyReceiveMessage ( int LobbyIndex, int MemberIndex, struct FString Type, struct FString Message, TArray< struct FActiveLobbyInfo >* LobbyList )
{
	static UFunction* pFnOnLobbyReceiveMessage = NULL;

	if ( ! pFnOnLobbyReceiveMessage )
		pFnOnLobbyReceiveMessage = (UFunction*) UObject::GObjObjects()->Data[ 46453 ];

	ASanctumController_execOnLobbyReceiveMessage_Parms OnLobbyReceiveMessage_Parms;
	OnLobbyReceiveMessage_Parms.LobbyIndex = LobbyIndex;
	OnLobbyReceiveMessage_Parms.MemberIndex = MemberIndex;
	memcpy ( &OnLobbyReceiveMessage_Parms.Type, &Type, 0xC );
	memcpy ( &OnLobbyReceiveMessage_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnOnLobbyReceiveMessage, &OnLobbyReceiveMessage_Parms, NULL );

	if ( LobbyList )
		memcpy ( LobbyList, &OnLobbyReceiveMessage_Parms.LobbyList, 0xC );
};

// Function Sanctum.SanctumController.OnLobbyMemberStatusUpdate
// [0x00420000] 
// Parameters infos:
// int                            LobbyIndex                     ( CPF_Parm )
// int                            MemberIndex                    ( CPF_Parm )
// int                            InstigatorIndex                ( CPF_Parm )
// struct FString                 Status                         ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FActiveLobbyInfo > LobbyList                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumController::OnLobbyMemberStatusUpdate ( int LobbyIndex, int MemberIndex, int InstigatorIndex, struct FString Status, TArray< struct FActiveLobbyInfo >* LobbyList )
{
	static UFunction* pFnOnLobbyMemberStatusUpdate = NULL;

	if ( ! pFnOnLobbyMemberStatusUpdate )
		pFnOnLobbyMemberStatusUpdate = (UFunction*) UObject::GObjObjects()->Data[ 46446 ];

	ASanctumController_execOnLobbyMemberStatusUpdate_Parms OnLobbyMemberStatusUpdate_Parms;
	OnLobbyMemberStatusUpdate_Parms.LobbyIndex = LobbyIndex;
	OnLobbyMemberStatusUpdate_Parms.MemberIndex = MemberIndex;
	OnLobbyMemberStatusUpdate_Parms.InstigatorIndex = InstigatorIndex;
	memcpy ( &OnLobbyMemberStatusUpdate_Parms.Status, &Status, 0xC );

	this->ProcessEvent ( pFnOnLobbyMemberStatusUpdate, &OnLobbyMemberStatusUpdate_Parms, NULL );

	if ( LobbyList )
		memcpy ( LobbyList, &OnLobbyMemberStatusUpdate_Parms.LobbyList, 0xC );
};

// Function Sanctum.SanctumController.OnLobbyMemberSettingsUpdate
// [0x00420000] 
// Parameters infos:
// int                            LobbyIndex                     ( CPF_Parm )
// int                            MemberIndex                    ( CPF_Parm )
// TArray< struct FActiveLobbyInfo > LobbyList                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumController::OnLobbyMemberSettingsUpdate ( int LobbyIndex, int MemberIndex, TArray< struct FActiveLobbyInfo >* LobbyList )
{
	static UFunction* pFnOnLobbyMemberSettingsUpdate = NULL;

	if ( ! pFnOnLobbyMemberSettingsUpdate )
		pFnOnLobbyMemberSettingsUpdate = (UFunction*) UObject::GObjObjects()->Data[ 46441 ];

	ASanctumController_execOnLobbyMemberSettingsUpdate_Parms OnLobbyMemberSettingsUpdate_Parms;
	OnLobbyMemberSettingsUpdate_Parms.LobbyIndex = LobbyIndex;
	OnLobbyMemberSettingsUpdate_Parms.MemberIndex = MemberIndex;

	this->ProcessEvent ( pFnOnLobbyMemberSettingsUpdate, &OnLobbyMemberSettingsUpdate_Parms, NULL );

	if ( LobbyList )
		memcpy ( LobbyList, &OnLobbyMemberSettingsUpdate_Parms.LobbyList, 0xC );
};

// Function Sanctum.SanctumController.OnLobbySettingsUpdate
// [0x00420000] 
// Parameters infos:
// int                            LobbyIndex                     ( CPF_Parm )
// TArray< struct FActiveLobbyInfo > LobbyList                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumController::OnLobbySettingsUpdate ( int LobbyIndex, TArray< struct FActiveLobbyInfo >* LobbyList )
{
	static UFunction* pFnOnLobbySettingsUpdate = NULL;

	if ( ! pFnOnLobbySettingsUpdate )
		pFnOnLobbySettingsUpdate = (UFunction*) UObject::GObjObjects()->Data[ 46437 ];

	ASanctumController_execOnLobbySettingsUpdate_Parms OnLobbySettingsUpdate_Parms;
	OnLobbySettingsUpdate_Parms.LobbyIndex = LobbyIndex;

	this->ProcessEvent ( pFnOnLobbySettingsUpdate, &OnLobbySettingsUpdate_Parms, NULL );

	if ( LobbyList )
		memcpy ( LobbyList, &OnLobbySettingsUpdate_Parms.LobbyList, 0xC );
};

// Function Sanctum.SanctumController.OnFindLobbiesComplete
// [0x00C20002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// TArray< struct FBasicLobbyInfo > LobbyList                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumController::OnFindLobbiesComplete ( unsigned long bWasSuccessful, TArray< struct FBasicLobbyInfo >* LobbyList )
{
	static UFunction* pFnOnFindLobbiesComplete = NULL;

	if ( ! pFnOnFindLobbiesComplete )
		pFnOnFindLobbiesComplete = (UFunction*) UObject::GObjObjects()->Data[ 46420 ];

	ASanctumController_execOnFindLobbiesComplete_Parms OnFindLobbiesComplete_Parms;
	OnFindLobbiesComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFindLobbiesComplete, &OnFindLobbiesComplete_Parms, NULL );

	if ( LobbyList )
		memcpy ( LobbyList, &OnFindLobbiesComplete_Parms.LobbyList, 0xC );
};

// Function Sanctum.SanctumController.HasSameVersion
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< struct FLobbyMetaData > LobbySettings                  ( CPF_Parm | CPF_NeedCtorLink )

bool ASanctumController::HasSameVersion ( TArray< struct FLobbyMetaData > LobbySettings )
{
	static UFunction* pFnHasSameVersion = NULL;

	if ( ! pFnHasSameVersion )
		pFnHasSameVersion = (UFunction*) UObject::GObjObjects()->Data[ 46415 ];

	ASanctumController_execHasSameVersion_Parms HasSameVersion_Parms;
	memcpy ( &HasSameVersion_Parms.LobbySettings, &LobbySettings, 0xC );

	this->ProcessEvent ( pFnHasSameVersion, &HasSameVersion_Parms, NULL );

	return HasSameVersion_Parms.ReturnValue;
};

// Function Sanctum.SanctumController.HasHostname
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< struct FLobbyMetaData > LobbySettings                  ( CPF_Parm | CPF_NeedCtorLink )

bool ASanctumController::HasHostname ( TArray< struct FLobbyMetaData > LobbySettings )
{
	static UFunction* pFnHasHostname = NULL;

	if ( ! pFnHasHostname )
		pFnHasHostname = (UFunction*) UObject::GObjObjects()->Data[ 46410 ];

	ASanctumController_execHasHostname_Parms HasHostname_Parms;
	memcpy ( &HasHostname_Parms.LobbySettings, &LobbySettings, 0xC );

	this->ProcessEvent ( pFnHasHostname, &HasHostname_Parms, NULL );

	return HasHostname_Parms.ReturnValue;
};

// Function Sanctum.SanctumController.OnPingUpdated
// [0x00020002] 
// Parameters infos:
// struct FUniqueNetId            LobbyId                        ( CPF_Parm )
// int                            Ping                           ( CPF_Parm )

void ASanctumController::OnPingUpdated ( struct FUniqueNetId LobbyId, int Ping )
{
	static UFunction* pFnOnPingUpdated = NULL;

	if ( ! pFnOnPingUpdated )
		pFnOnPingUpdated = (UFunction*) UObject::GObjObjects()->Data[ 46399 ];

	ASanctumController_execOnPingUpdated_Parms OnPingUpdated_Parms;
	memcpy ( &OnPingUpdated_Parms.LobbyId, &LobbyId, 0x8 );
	OnPingUpdated_Parms.Ping = Ping;

	this->ProcessEvent ( pFnOnPingUpdated, &OnPingUpdated_Parms, NULL );
};

// Function Sanctum.SanctumController.OnJoinLobbyComplete
// [0x00C20002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// int                            LobbyIndex                     ( CPF_Parm )
// struct FUniqueNetId            LobbyUID                       ( CPF_Parm )
// struct FString                 Error                          ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FActiveLobbyInfo > LobbyList                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumController::OnJoinLobbyComplete ( unsigned long bWasSuccessful, int LobbyIndex, struct FUniqueNetId LobbyUID, struct FString Error, TArray< struct FActiveLobbyInfo >* LobbyList )
{
	static UFunction* pFnOnJoinLobbyComplete = NULL;

	if ( ! pFnOnJoinLobbyComplete )
		pFnOnJoinLobbyComplete = (UFunction*) UObject::GObjObjects()->Data[ 46386 ];

	ASanctumController_execOnJoinLobbyComplete_Parms OnJoinLobbyComplete_Parms;
	OnJoinLobbyComplete_Parms.bWasSuccessful = bWasSuccessful;
	OnJoinLobbyComplete_Parms.LobbyIndex = LobbyIndex;
	memcpy ( &OnJoinLobbyComplete_Parms.LobbyUID, &LobbyUID, 0x8 );
	memcpy ( &OnJoinLobbyComplete_Parms.Error, &Error, 0xC );

	this->ProcessEvent ( pFnOnJoinLobbyComplete, &OnJoinLobbyComplete_Parms, NULL );

	if ( LobbyList )
		memcpy ( LobbyList, &OnJoinLobbyComplete_Parms.LobbyList, 0xC );
};

// Function Sanctum.SanctumController.JoinLobby
// [0x00820002] 
// Parameters infos:
// struct FString                 LobbyId                        ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumController::JoinLobby ( struct FString LobbyId )
{
	static UFunction* pFnJoinLobby = NULL;

	if ( ! pFnJoinLobby )
		pFnJoinLobby = (UFunction*) UObject::GObjObjects()->Data[ 46383 ];

	ASanctumController_execJoinLobby_Parms JoinLobby_Parms;
	memcpy ( &JoinLobby_Parms.LobbyId, &LobbyId, 0xC );

	this->ProcessEvent ( pFnJoinLobby, &JoinLobby_Parms, NULL );
};

// Function Sanctum.SanctumController.OnCreateLobbyComplete
// [0x00820002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FUniqueNetId            LobbyId                        ( CPF_Parm )
// struct FString                 Error                          ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumController::OnCreateLobbyComplete ( unsigned long bWasSuccessful, struct FUniqueNetId LobbyId, struct FString Error )
{
	static UFunction* pFnOnCreateLobbyComplete = NULL;

	if ( ! pFnOnCreateLobbyComplete )
		pFnOnCreateLobbyComplete = (UFunction*) UObject::GObjObjects()->Data[ 46376 ];

	ASanctumController_execOnCreateLobbyComplete_Parms OnCreateLobbyComplete_Parms;
	OnCreateLobbyComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnCreateLobbyComplete_Parms.LobbyId, &LobbyId, 0x8 );
	memcpy ( &OnCreateLobbyComplete_Parms.Error, &Error, 0xC );

	this->ProcessEvent ( pFnOnCreateLobbyComplete, &OnCreateLobbyComplete_Parms, NULL );
};

// Function Sanctum.SanctumController.IPToString
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            IP                             ( CPF_Parm )

struct FString ASanctumController::IPToString ( int IP )
{
	static UFunction* pFnIPToString = NULL;

	if ( ! pFnIPToString )
		pFnIPToString = (UFunction*) UObject::GObjObjects()->Data[ 46372 ];

	ASanctumController_execIPToString_Parms IPToString_Parms;
	IPToString_Parms.IP = IP;

	this->ProcessEvent ( pFnIPToString, &IPToString_Parms, NULL );

	return IPToString_Parms.ReturnValue;
};

// Function Sanctum.SanctumController.updateGameLobbySettings
// [0x00820002] 
// Parameters infos:

void ASanctumController::updateGameLobbySettings ( )
{
	static UFunction* pFnupdateGameLobbySettings = NULL;

	if ( ! pFnupdateGameLobbySettings )
		pFnupdateGameLobbySettings = (UFunction*) UObject::GObjObjects()->Data[ 46364 ];

	ASanctumController_execupdateGameLobbySettings_Parms updateGameLobbySettings_Parms;

	this->ProcessEvent ( pFnupdateGameLobbySettings, &updateGameLobbySettings_Parms, NULL );
};

// Function Sanctum.SanctumController.getMetadataForGame
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< struct FLobbyMetaData > MetaData                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ASanctumController::getMetadataForGame ( TArray< struct FLobbyMetaData >* MetaData )
{
	static UFunction* pFngetMetadataForGame = NULL;

	if ( ! pFngetMetadataForGame )
		pFngetMetadataForGame = (UFunction*) UObject::GObjObjects()->Data[ 46351 ];

	ASanctumController_execgetMetadataForGame_Parms getMetadataForGame_Parms;

	this->ProcessEvent ( pFngetMetadataForGame, &getMetadataForGame_Parms, NULL );

	if ( MetaData )
		memcpy ( MetaData, &getMetadataForGame_Parms.MetaData, 0xC );

	return getMetadataForGame_Parms.ReturnValue;
};

// Function Sanctum.SanctumController.isLobbyAdmin
// [0x00C24002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            adminOfIndex                   ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool ASanctumController::isLobbyAdmin ( int* adminOfIndex )
{
	static UFunction* pFnisLobbyAdmin = NULL;

	if ( ! pFnisLobbyAdmin )
		pFnisLobbyAdmin = (UFunction*) UObject::GObjObjects()->Data[ 46346 ];

	ASanctumController_execisLobbyAdmin_Parms isLobbyAdmin_Parms;

	this->ProcessEvent ( pFnisLobbyAdmin, &isLobbyAdmin_Parms, NULL );

	if ( adminOfIndex )
		*adminOfIndex = isLobbyAdmin_Parms.adminOfIndex;

	return isLobbyAdmin_Parms.ReturnValue;
};

// Function Sanctum.SanctumController.findFriendsLobbies
// [0x00024002] 
// Parameters infos:
// int                            mapIndex                       ( CPF_Parm )
// int                            difficultyIndex                ( CPF_Parm )
// int                            playersIdx                     ( CPF_Parm )
// unsigned long                  hideFullGames                  ( CPF_Parm )
// int                            addonIdx                       ( CPF_OptionalParm | CPF_Parm )

void ASanctumController::findFriendsLobbies ( int mapIndex, int difficultyIndex, int playersIdx, unsigned long hideFullGames, int addonIdx )
{
	static UFunction* pFnfindFriendsLobbies = NULL;

	if ( ! pFnfindFriendsLobbies )
		pFnfindFriendsLobbies = (UFunction*) UObject::GObjObjects()->Data[ 46340 ];

	ASanctumController_execfindFriendsLobbies_Parms findFriendsLobbies_Parms;
	findFriendsLobbies_Parms.mapIndex = mapIndex;
	findFriendsLobbies_Parms.difficultyIndex = difficultyIndex;
	findFriendsLobbies_Parms.playersIdx = playersIdx;
	findFriendsLobbies_Parms.hideFullGames = hideFullGames;
	findFriendsLobbies_Parms.addonIdx = addonIdx;

	this->ProcessEvent ( pFnfindFriendsLobbies, &findFriendsLobbies_Parms, NULL );
};

// Function Sanctum.SanctumController.FindLobbies
// [0x00024002] 
// Parameters infos:
// int                            mapIndex                       ( CPF_Parm )
// int                            difficultyIndex                ( CPF_Parm )
// int                            playersIdx                     ( CPF_Parm )
// unsigned long                  hideFullGames                  ( CPF_Parm )
// unsigned char                  lobbyDistance                  ( CPF_OptionalParm | CPF_Parm )
// int                            addonIdx                       ( CPF_OptionalParm | CPF_Parm )

void ASanctumController::FindLobbies ( int mapIndex, int difficultyIndex, int playersIdx, unsigned long hideFullGames, unsigned char lobbyDistance, int addonIdx )
{
	static UFunction* pFnFindLobbies = NULL;

	if ( ! pFnFindLobbies )
		pFnFindLobbies = (UFunction*) UObject::GObjObjects()->Data[ 46323 ];

	ASanctumController_execFindLobbies_Parms FindLobbies_Parms;
	FindLobbies_Parms.mapIndex = mapIndex;
	FindLobbies_Parms.difficultyIndex = difficultyIndex;
	FindLobbies_Parms.playersIdx = playersIdx;
	FindLobbies_Parms.hideFullGames = hideFullGames;
	FindLobbies_Parms.lobbyDistance = lobbyDistance;
	FindLobbies_Parms.addonIdx = addonIdx;

	this->ProcessEvent ( pFnFindLobbies, &FindLobbies_Parms, NULL );
};

// Function Sanctum.SanctumController.appendDifficultyFilter
// [0x00C20002] 
// Parameters infos:
// int                            Difficulty                     ( CPF_Parm )
// TArray< struct FLobbyFilter >  Filters                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumController::appendDifficultyFilter ( int Difficulty, TArray< struct FLobbyFilter >* Filters )
{
	static UFunction* pFnappendDifficultyFilter = NULL;

	if ( ! pFnappendDifficultyFilter )
		pFnappendDifficultyFilter = (UFunction*) UObject::GObjObjects()->Data[ 46316 ];

	ASanctumController_execappendDifficultyFilter_Parms appendDifficultyFilter_Parms;
	appendDifficultyFilter_Parms.Difficulty = Difficulty;

	this->ProcessEvent ( pFnappendDifficultyFilter, &appendDifficultyFilter_Parms, NULL );

	if ( Filters )
		memcpy ( Filters, &appendDifficultyFilter_Parms.Filters, 0xC );
};

// Function Sanctum.SanctumController.appendLevelFilter
// [0x00C20002] 
// Parameters infos:
// struct FString                 Level                          ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FLobbyFilter >  Filters                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumController::appendLevelFilter ( struct FString Level, TArray< struct FLobbyFilter >* Filters )
{
	static UFunction* pFnappendLevelFilter = NULL;

	if ( ! pFnappendLevelFilter )
		pFnappendLevelFilter = (UFunction*) UObject::GObjObjects()->Data[ 46310 ];

	ASanctumController_execappendLevelFilter_Parms appendLevelFilter_Parms;
	memcpy ( &appendLevelFilter_Parms.Level, &Level, 0xC );

	this->ProcessEvent ( pFnappendLevelFilter, &appendLevelFilter_Parms, NULL );

	if ( Filters )
		memcpy ( Filters, &appendLevelFilter_Parms.Filters, 0xC );
};

// Function Sanctum.SanctumController.leaveAllLobbies
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ASanctumController::leaveAllLobbies ( )
{
	static UFunction* pFnleaveAllLobbies = NULL;

	if ( ! pFnleaveAllLobbies )
		pFnleaveAllLobbies = (UFunction*) UObject::GObjObjects()->Data[ 46306 ];

	ASanctumController_execleaveAllLobbies_Parms leaveAllLobbies_Parms;

	this->ProcessEvent ( pFnleaveAllLobbies, &leaveAllLobbies_Parms, NULL );
};

// Function Sanctum.SanctumController.clearLobbyDelegates
// [0x00020002] 
// Parameters infos:

void ASanctumController::clearLobbyDelegates ( )
{
	static UFunction* pFnclearLobbyDelegates = NULL;

	if ( ! pFnclearLobbyDelegates )
		pFnclearLobbyDelegates = (UFunction*) UObject::GObjObjects()->Data[ 46305 ];

	ASanctumController_execclearLobbyDelegates_Parms clearLobbyDelegates_Parms;

	this->ProcessEvent ( pFnclearLobbyDelegates, &clearLobbyDelegates_Parms, NULL );
};

// Function Sanctum.SanctumController.addLobbyDelegates
// [0x00020002] 
// Parameters infos:

void ASanctumController::addLobbyDelegates ( )
{
	static UFunction* pFnaddLobbyDelegates = NULL;

	if ( ! pFnaddLobbyDelegates )
		pFnaddLobbyDelegates = (UFunction*) UObject::GObjObjects()->Data[ 46304 ];

	ASanctumController_execaddLobbyDelegates_Parms addLobbyDelegates_Parms;

	this->ProcessEvent ( pFnaddLobbyDelegates, &addLobbyDelegates_Parms, NULL );
};

// Function Sanctum.SanctumController.joinedGame
// [0x00020102] 
// Parameters infos:
// class UClass*                  SGI                            ( CPF_Parm )

void ASanctumController::joinedGame ( class UClass* SGI )
{
	static UFunction* pFnjoinedGame = NULL;

	if ( ! pFnjoinedGame )
		pFnjoinedGame = (UFunction*) UObject::GObjObjects()->Data[ 46302 ];

	ASanctumController_execjoinedGame_Parms joinedGame_Parms;
	joinedGame_Parms.SGI = SGI;

	this->ProcessEvent ( pFnjoinedGame, &joinedGame_Parms, NULL );
};

// Function Sanctum.SanctumController.fetchLobbyInterface
// [0x00020102] 
// Parameters infos:

void ASanctumController::fetchLobbyInterface ( )
{
	static UFunction* pFnfetchLobbyInterface = NULL;

	if ( ! pFnfetchLobbyInterface )
		pFnfetchLobbyInterface = (UFunction*) UObject::GObjObjects()->Data[ 46301 ];

	ASanctumController_execfetchLobbyInterface_Parms fetchLobbyInterface_Parms;

	this->ProcessEvent ( pFnfetchLobbyInterface, &fetchLobbyInterface_Parms, NULL );
};

// Function Sanctum.SanctumController.kickLobbyMember
// [0x00020002] 
// Parameters infos:
// class ASanctumController*      LobbyMember                    ( CPF_Parm )

void ASanctumController::kickLobbyMember ( class ASanctumController* LobbyMember )
{
	static UFunction* pFnkickLobbyMember = NULL;

	if ( ! pFnkickLobbyMember )
		pFnkickLobbyMember = (UFunction*) UObject::GObjObjects()->Data[ 46299 ];

	ASanctumController_execkickLobbyMember_Parms kickLobbyMember_Parms;
	kickLobbyMember_Parms.LobbyMember = LobbyMember;

	this->ProcessEvent ( pFnkickLobbyMember, &kickLobbyMember_Parms, NULL );
};

// Function Sanctum.SanctumController.setupLobby
// [0x00020002] 
// Parameters infos:

void ASanctumController::setupLobby ( )
{
	static UFunction* pFnsetupLobby = NULL;

	if ( ! pFnsetupLobby )
		pFnsetupLobby = (UFunction*) UObject::GObjObjects()->Data[ 46292 ];

	ASanctumController_execsetupLobby_Parms setupLobby_Parms;

	this->ProcessEvent ( pFnsetupLobby, &setupLobby_Parms, NULL );
};

// Function Sanctum.SanctumController.OnAuthReady
// [0x00020002] 
// Parameters infos:

void ASanctumController::OnAuthReady ( )
{
	static UFunction* pFnOnAuthReady = NULL;

	if ( ! pFnOnAuthReady )
		pFnOnAuthReady = (UFunction*) UObject::GObjObjects()->Data[ 46290 ];

	ASanctumController_execOnAuthReady_Parms OnAuthReady_Parms;

	this->ProcessEvent ( pFnOnAuthReady, &OnAuthReady_Parms, NULL );
};

// Function Sanctum.SanctumController.hostedGame
// [0x00020002] 
// Parameters infos:
// class UClass*                  SGI                            ( CPF_Parm )

void ASanctumController::hostedGame ( class UClass* SGI )
{
	static UFunction* pFnhostedGame = NULL;

	if ( ! pFnhostedGame )
		pFnhostedGame = (UFunction*) UObject::GObjObjects()->Data[ 46284 ];

	ASanctumController_exechostedGame_Parms hostedGame_Parms;
	hostedGame_Parms.SGI = SGI;

	this->ProcessEvent ( pFnhostedGame, &hostedGame_Parms, NULL );
};

// Function Sanctum.SanctumController.ReceivedGameClass
// [0x00020102] 
// Parameters infos:
// class UClass*                  GameClass                      ( CPF_Parm )

void ASanctumController::ReceivedGameClass ( class UClass* GameClass )
{
	static UFunction* pFnReceivedGameClass = NULL;

	if ( ! pFnReceivedGameClass )
		pFnReceivedGameClass = (UFunction*) UObject::GObjObjects()->Data[ 46282 ];

	ASanctumController_execReceivedGameClass_Parms ReceivedGameClass_Parms;
	ReceivedGameClass_Parms.GameClass = GameClass;

	this->ProcessEvent ( pFnReceivedGameClass, &ReceivedGameClass_Parms, NULL );
};

// Function Sanctum.SanctumController.SetPlayerSlot
// [0x00020002] 
// Parameters infos:
// int                            SlotNumber                     ( CPF_Parm )

void ASanctumController::SetPlayerSlot ( int SlotNumber )
{
	static UFunction* pFnSetPlayerSlot = NULL;

	if ( ! pFnSetPlayerSlot )
		pFnSetPlayerSlot = (UFunction*) UObject::GObjObjects()->Data[ 46275 ];

	ASanctumController_execSetPlayerSlot_Parms SetPlayerSlot_Parms;
	SetPlayerSlot_Parms.SlotNumber = SlotNumber;

	this->ProcessEvent ( pFnSetPlayerSlot, &SetPlayerSlot_Parms, NULL );
};

// Function Sanctum.SanctumController.ControlLoop
// [0x00020002] 
// Parameters infos:

void ASanctumController::ControlLoop ( )
{
	static UFunction* pFnControlLoop = NULL;

	if ( ! pFnControlLoop )
		pFnControlLoop = (UFunction*) UObject::GObjObjects()->Data[ 46272 ];

	ASanctumController_execControlLoop_Parms ControlLoop_Parms;

	this->ProcessEvent ( pFnControlLoop, &ControlLoop_Parms, NULL );
};

// Function Sanctum.SanctumController.StartControlLoop
// [0x00020002] 
// Parameters infos:

void ASanctumController::StartControlLoop ( )
{
	static UFunction* pFnStartControlLoop = NULL;

	if ( ! pFnStartControlLoop )
		pFnStartControlLoop = (UFunction*) UObject::GObjObjects()->Data[ 46271 ];

	ASanctumController_execStartControlLoop_Parms StartControlLoop_Parms;

	this->ProcessEvent ( pFnStartControlLoop, &StartControlLoop_Parms, NULL );
};

// Function Sanctum.SanctumController.stringToHologram
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 hologramString                 ( CPF_Parm | CPF_NeedCtorLink )

class UClass* ASanctumController::stringToHologram ( struct FString hologramString )
{
	static UFunction* pFnstringToHologram = NULL;

	if ( ! pFnstringToHologram )
		pFnstringToHologram = (UFunction*) UObject::GObjObjects()->Data[ 46251 ];

	ASanctumController_execstringToHologram_Parms stringToHologram_Parms;
	memcpy ( &stringToHologram_Parms.hologramString, &hologramString, 0xC );

	this->ProcessEvent ( pFnstringToHologram, &stringToHologram_Parms, NULL );

	return stringToHologram_Parms.ReturnValue;
};

// Function Sanctum.SanctumController.stringToTower
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 towerString                    ( CPF_Parm | CPF_NeedCtorLink )

class UClass* ASanctumController::stringToTower ( struct FString towerString )
{
	static UFunction* pFnstringToTower = NULL;

	if ( ! pFnstringToTower )
		pFnstringToTower = (UFunction*) UObject::GObjObjects()->Data[ 46236 ];

	ASanctumController_execstringToTower_Parms stringToTower_Parms;
	memcpy ( &stringToTower_Parms.towerString, &towerString, 0xC );

	this->ProcessEvent ( pFnstringToTower, &stringToTower_Parms, NULL );

	return stringToTower_Parms.ReturnValue;
};

// Function Sanctum.SanctumController.stringToWeapon
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 weaponString                   ( CPF_Parm | CPF_NeedCtorLink )

class UClass* ASanctumController::stringToWeapon ( struct FString weaponString )
{
	static UFunction* pFnstringToWeapon = NULL;

	if ( ! pFnstringToWeapon )
		pFnstringToWeapon = (UFunction*) UObject::GObjObjects()->Data[ 46226 ];

	ASanctumController_execstringToWeapon_Parms stringToWeapon_Parms;
	memcpy ( &stringToWeapon_Parms.weaponString, &weaponString, 0xC );

	this->ProcessEvent ( pFnstringToWeapon, &stringToWeapon_Parms, NULL );

	return stringToWeapon_Parms.ReturnValue;
};

// Function Sanctum.SanctumController.showGame
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ASanctumController::showGame ( )
{
	static UFunction* pFnshowGame = NULL;

	if ( ! pFnshowGame )
		pFnshowGame = (UFunction*) UObject::GObjObjects()->Data[ 46224 ];

	ASanctumController_execshowGame_Parms showGame_Parms;

	this->ProcessEvent ( pFnshowGame, &showGame_Parms, NULL );
};

// Function Sanctum.SanctumController.printGames
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ASanctumController::printGames ( )
{
	static UFunction* pFnprintGames = NULL;

	if ( ! pFnprintGames )
		pFnprintGames = (UFunction*) UObject::GObjObjects()->Data[ 46218 ];

	ASanctumController_execprintGames_Parms printGames_Parms;

	this->ProcessEvent ( pFnprintGames, &printGames_Parms, NULL );
};

// Function Sanctum.SanctumController.DoesSaveExist
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumController::DoesSaveExist ( )
{
	static UFunction* pFnDoesSaveExist = NULL;

	if ( ! pFnDoesSaveExist )
		pFnDoesSaveExist = (UFunction*) UObject::GObjObjects()->Data[ 46216 ];

	ASanctumController_execDoesSaveExist_Parms DoesSaveExist_Parms;

	this->ProcessEvent ( pFnDoesSaveExist, &DoesSaveExist_Parms, NULL );

	return DoesSaveExist_Parms.ReturnValue;
};

// Function Sanctum.SanctumController.SaveLastEquipment
// [0x00020002] 
// Parameters infos:
// TArray< class UClass* >        Weapons                        ( CPF_Parm | CPF_NeedCtorLink )
// TArray< class UClass* >        Holograms                      ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumController::SaveLastEquipment ( TArray< class UClass* > Weapons, TArray< class UClass* > Holograms )
{
	static UFunction* pFnSaveLastEquipment = NULL;

	if ( ! pFnSaveLastEquipment )
		pFnSaveLastEquipment = (UFunction*) UObject::GObjObjects()->Data[ 46206 ];

	ASanctumController_execSaveLastEquipment_Parms SaveLastEquipment_Parms;
	memcpy ( &SaveLastEquipment_Parms.Weapons, &Weapons, 0xC );
	memcpy ( &SaveLastEquipment_Parms.Holograms, &Holograms, 0xC );

	this->ProcessEvent ( pFnSaveLastEquipment, &SaveLastEquipment_Parms, NULL );
};

// Function Sanctum.SanctumController.GetLastEquipment
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< class UClass* >        Weapons                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< class UClass* >        TowerHolograms                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ASanctumController::GetLastEquipment ( TArray< class UClass* >* Weapons, TArray< class UClass* >* TowerHolograms )
{
	static UFunction* pFnGetLastEquipment = NULL;

	if ( ! pFnGetLastEquipment )
		pFnGetLastEquipment = (UFunction*) UObject::GObjObjects()->Data[ 46192 ];

	ASanctumController_execGetLastEquipment_Parms GetLastEquipment_Parms;

	this->ProcessEvent ( pFnGetLastEquipment, &GetLastEquipment_Parms, NULL );

	if ( Weapons )
		memcpy ( Weapons, &GetLastEquipment_Parms.Weapons, 0xC );

	if ( TowerHolograms )
		memcpy ( TowerHolograms, &GetLastEquipment_Parms.TowerHolograms, 0xC );

	return GetLastEquipment_Parms.ReturnValue;
};

// Function Sanctum.SanctumController.AddNewEncounteredEnemy
// [0x00020002] 
// Parameters infos:
// struct FString                 NewEnemy                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumController::AddNewEncounteredEnemy ( struct FString NewEnemy )
{
	static UFunction* pFnAddNewEncounteredEnemy = NULL;

	if ( ! pFnAddNewEncounteredEnemy )
		pFnAddNewEncounteredEnemy = (UFunction*) UObject::GObjObjects()->Data[ 46190 ];

	ASanctumController_execAddNewEncounteredEnemy_Parms AddNewEncounteredEnemy_Parms;
	memcpy ( &AddNewEncounteredEnemy_Parms.NewEnemy, &NewEnemy, 0xC );

	this->ProcessEvent ( pFnAddNewEncounteredEnemy, &AddNewEncounteredEnemy_Parms, NULL );
};

// Function Sanctum.SanctumController.NewEncounteredEnemy
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 CheckEnemy                     ( CPF_Parm | CPF_NeedCtorLink )

bool ASanctumController::NewEncounteredEnemy ( struct FString CheckEnemy )
{
	static UFunction* pFnNewEncounteredEnemy = NULL;

	if ( ! pFnNewEncounteredEnemy )
		pFnNewEncounteredEnemy = (UFunction*) UObject::GObjObjects()->Data[ 46185 ];

	ASanctumController_execNewEncounteredEnemy_Parms NewEncounteredEnemy_Parms;
	memcpy ( &NewEncounteredEnemy_Parms.CheckEnemy, &CheckEnemy, 0xC );

	this->ProcessEvent ( pFnNewEncounteredEnemy, &NewEncounteredEnemy_Parms, NULL );

	return NewEncounteredEnemy_Parms.ReturnValue;
};

// Function Sanctum.SanctumController.SetLevelHasBeenStarted
// [0x00020002] 
// Parameters infos:
// struct FString                 Level                          ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumController::SetLevelHasBeenStarted ( struct FString Level )
{
	static UFunction* pFnSetLevelHasBeenStarted = NULL;

	if ( ! pFnSetLevelHasBeenStarted )
		pFnSetLevelHasBeenStarted = (UFunction*) UObject::GObjObjects()->Data[ 46183 ];

	ASanctumController_execSetLevelHasBeenStarted_Parms SetLevelHasBeenStarted_Parms;
	memcpy ( &SetLevelHasBeenStarted_Parms.Level, &Level, 0xC );

	this->ProcessEvent ( pFnSetLevelHasBeenStarted, &SetLevelHasBeenStarted_Parms, NULL );
};

// Function Sanctum.SanctumController.HasLevelBeenStarted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Level                          ( CPF_Parm | CPF_NeedCtorLink )

bool ASanctumController::HasLevelBeenStarted ( struct FString Level )
{
	static UFunction* pFnHasLevelBeenStarted = NULL;

	if ( ! pFnHasLevelBeenStarted )
		pFnHasLevelBeenStarted = (UFunction*) UObject::GObjObjects()->Data[ 46178 ];

	ASanctumController_execHasLevelBeenStarted_Parms HasLevelBeenStarted_Parms;
	memcpy ( &HasLevelBeenStarted_Parms.Level, &Level, 0xC );

	this->ProcessEvent ( pFnHasLevelBeenStarted, &HasLevelBeenStarted_Parms, NULL );

	return HasLevelBeenStarted_Parms.ReturnValue;
};

// Function Sanctum.SanctumController.isLevelUnlocked
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Level                          ( CPF_Parm | CPF_NeedCtorLink )

bool ASanctumController::isLevelUnlocked ( struct FString Level )
{
	static UFunction* pFnisLevelUnlocked = NULL;

	if ( ! pFnisLevelUnlocked )
		pFnisLevelUnlocked = (UFunction*) UObject::GObjObjects()->Data[ 46173 ];

	ASanctumController_execisLevelUnlocked_Parms isLevelUnlocked_Parms;
	memcpy ( &isLevelUnlocked_Parms.Level, &Level, 0xC );

	this->ProcessEvent ( pFnisLevelUnlocked, &isLevelUnlocked_Parms, NULL );

	return isLevelUnlocked_Parms.ReturnValue;
};

// Function Sanctum.SanctumController.UnlockLevel
// [0x00020002] 
// Parameters infos:
// struct FString                 Level                          ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumController::UnlockLevel ( struct FString Level )
{
	static UFunction* pFnUnlockLevel = NULL;

	if ( ! pFnUnlockLevel )
		pFnUnlockLevel = (UFunction*) UObject::GObjObjects()->Data[ 46171 ];

	ASanctumController_execUnlockLevel_Parms UnlockLevel_Parms;
	memcpy ( &UnlockLevel_Parms.Level, &Level, 0xC );

	this->ProcessEvent ( pFnUnlockLevel, &UnlockLevel_Parms, NULL );
};

// Function Sanctum.SanctumController.loadGameToSanctum
// [0x00820002] 
// Parameters infos:

void ASanctumController::loadGameToSanctum ( )
{
	static UFunction* pFnloadGameToSanctum = NULL;

	if ( ! pFnloadGameToSanctum )
		pFnloadGameToSanctum = (UFunction*) UObject::GObjObjects()->Data[ 46144 ];

	ASanctumController_execloadGameToSanctum_Parms loadGameToSanctum_Parms;

	this->ProcessEvent ( pFnloadGameToSanctum, &loadGameToSanctum_Parms, NULL );
};

// Function Sanctum.SanctumController.UpgradeAttachments
// [0x00420002] 
// Parameters infos:
// int                            lvl                            ( CPF_Parm )
// int                            numTowers                      ( CPF_Parm )
// TArray< class ASanctumTowerBaseAttachment* > spawnedAttachments             ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// int                            upgradedAttachments            ( CPF_Parm | CPF_OutParm )
// int                            totalAttachments               ( CPF_Parm | CPF_OutParm )
// int                            totalCost                      ( CPF_Parm | CPF_OutParm )

void ASanctumController::UpgradeAttachments ( int lvl, int numTowers, TArray< class ASanctumTowerBaseAttachment* >* spawnedAttachments, int* upgradedAttachments, int* totalAttachments, int* totalCost )
{
	static UFunction* pFnUpgradeAttachments = NULL;

	if ( ! pFnUpgradeAttachments )
		pFnUpgradeAttachments = (UFunction*) UObject::GObjObjects()->Data[ 46131 ];

	ASanctumController_execUpgradeAttachments_Parms UpgradeAttachments_Parms;
	UpgradeAttachments_Parms.lvl = lvl;
	UpgradeAttachments_Parms.numTowers = numTowers;

	this->ProcessEvent ( pFnUpgradeAttachments, &UpgradeAttachments_Parms, NULL );

	if ( spawnedAttachments )
		memcpy ( spawnedAttachments, &UpgradeAttachments_Parms.spawnedAttachments, 0xC );

	if ( upgradedAttachments )
		*upgradedAttachments = UpgradeAttachments_Parms.upgradedAttachments;

	if ( totalAttachments )
		*totalAttachments = UpgradeAttachments_Parms.totalAttachments;

	if ( totalCost )
		*totalCost = UpgradeAttachments_Parms.totalCost;
};

// Function Sanctum.SanctumController.UpgradeSpawnedAttachments
// [0x00420002] 
// Parameters infos:
// int                            A                              ( CPF_Parm )
// int                            B                              ( CPF_Parm )
// int                            C                              ( CPF_Parm )
// int                            D                              ( CPF_Parm )
// int                            E                              ( CPF_Parm )
// TArray< class ASanctumTowerBaseAttachment* > spawnedAttachments             ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// int                            totalCost                      ( CPF_Parm | CPF_OutParm )

void ASanctumController::UpgradeSpawnedAttachments ( int A, int B, int C, int D, int E, TArray< class ASanctumTowerBaseAttachment* >* spawnedAttachments, int* totalCost )
{
	static UFunction* pFnUpgradeSpawnedAttachments = NULL;

	if ( ! pFnUpgradeSpawnedAttachments )
		pFnUpgradeSpawnedAttachments = (UFunction*) UObject::GObjObjects()->Data[ 46120 ];

	ASanctumController_execUpgradeSpawnedAttachments_Parms UpgradeSpawnedAttachments_Parms;
	UpgradeSpawnedAttachments_Parms.A = A;
	UpgradeSpawnedAttachments_Parms.B = B;
	UpgradeSpawnedAttachments_Parms.C = C;
	UpgradeSpawnedAttachments_Parms.D = D;
	UpgradeSpawnedAttachments_Parms.E = E;

	this->ProcessEvent ( pFnUpgradeSpawnedAttachments, &UpgradeSpawnedAttachments_Parms, NULL );

	if ( spawnedAttachments )
		memcpy ( spawnedAttachments, &UpgradeSpawnedAttachments_Parms.spawnedAttachments, 0xC );

	if ( totalCost )
		*totalCost = UpgradeSpawnedAttachments_Parms.totalCost;
};

// Function Sanctum.SanctumController.SpawnRandomMaze
// [0x00824202] ( FUNC_Exec )
// Parameters infos:
// int                            numLevelSix                    ( CPF_OptionalParm | CPF_Parm )
// int                            numLevelFive                   ( CPF_OptionalParm | CPF_Parm )
// int                            numLevelFour                   ( CPF_OptionalParm | CPF_Parm )
// int                            numLevelThree                  ( CPF_OptionalParm | CPF_Parm )
// int                            numLevelTwo                    ( CPF_OptionalParm | CPF_Parm )
// int                            numLevelOne                    ( CPF_OptionalParm | CPF_Parm )

void ASanctumController::SpawnRandomMaze ( int numLevelSix, int numLevelFive, int numLevelFour, int numLevelThree, int numLevelTwo, int numLevelOne )
{
	static UFunction* pFnSpawnRandomMaze = NULL;

	if ( ! pFnSpawnRandomMaze )
		pFnSpawnRandomMaze = (UFunction*) UObject::GObjObjects()->Data[ 46080 ];

	ASanctumController_execSpawnRandomMaze_Parms SpawnRandomMaze_Parms;
	SpawnRandomMaze_Parms.numLevelSix = numLevelSix;
	SpawnRandomMaze_Parms.numLevelFive = numLevelFive;
	SpawnRandomMaze_Parms.numLevelFour = numLevelFour;
	SpawnRandomMaze_Parms.numLevelThree = numLevelThree;
	SpawnRandomMaze_Parms.numLevelTwo = numLevelTwo;
	SpawnRandomMaze_Parms.numLevelOne = numLevelOne;

	this->ProcessEvent ( pFnSpawnRandomMaze, &SpawnRandomMaze_Parms, NULL );
};

// Function Sanctum.SanctumController.SpawnRandomBlocks
// [0x00C20002] 
// Parameters infos:
// int                            numBlocksToSpawn               ( CPF_Parm )
// TArray< class ASanctumTowerBase* > towerBases                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< int >                  basesWithBlockIndex            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// int                            totalCost                      ( CPF_Parm | CPF_OutParm )

void ASanctumController::SpawnRandomBlocks ( int numBlocksToSpawn, TArray< class ASanctumTowerBase* >* towerBases, TArray< int >* basesWithBlockIndex, int* totalCost )
{
	static UFunction* pFnSpawnRandomBlocks = NULL;

	if ( ! pFnSpawnRandomBlocks )
		pFnSpawnRandomBlocks = (UFunction*) UObject::GObjObjects()->Data[ 46059 ];

	ASanctumController_execSpawnRandomBlocks_Parms SpawnRandomBlocks_Parms;
	SpawnRandomBlocks_Parms.numBlocksToSpawn = numBlocksToSpawn;

	this->ProcessEvent ( pFnSpawnRandomBlocks, &SpawnRandomBlocks_Parms, NULL );

	if ( towerBases )
		memcpy ( towerBases, &SpawnRandomBlocks_Parms.towerBases, 0xC );

	if ( basesWithBlockIndex )
		memcpy ( basesWithBlockIndex, &SpawnRandomBlocks_Parms.basesWithBlockIndex, 0xC );

	if ( totalCost )
		*totalCost = SpawnRandomBlocks_Parms.totalCost;
};

// Function Sanctum.SanctumController.ShuffleIntArray
// [0x00420002] 
// Parameters infos:
// TArray< int >                  indexes                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumController::ShuffleIntArray ( TArray< int >* indexes )
{
	static UFunction* pFnShuffleIntArray = NULL;

	if ( ! pFnShuffleIntArray )
		pFnShuffleIntArray = (UFunction*) UObject::GObjObjects()->Data[ 46051 ];

	ASanctumController_execShuffleIntArray_Parms ShuffleIntArray_Parms;

	this->ProcessEvent ( pFnShuffleIntArray, &ShuffleIntArray_Parms, NULL );

	if ( indexes )
		memcpy ( indexes, &ShuffleIntArray_Parms.indexes, 0xC );
};

// Function Sanctum.SanctumController.RandomSort
// [0x00120002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            A                              ( CPF_Parm )
// int                            B                              ( CPF_Parm )

int ASanctumController::RandomSort ( int A, int B )
{
	static UFunction* pFnRandomSort = NULL;

	if ( ! pFnRandomSort )
		pFnRandomSort = (UFunction*) UObject::GObjObjects()->Data[ 45846 ];

	ASanctumController_execRandomSort_Parms RandomSort_Parms;
	RandomSort_Parms.A = A;
	RandomSort_Parms.B = B;

	this->ProcessEvent ( pFnRandomSort, &RandomSort_Parms, NULL );

	return RandomSort_Parms.ReturnValue;
};

// Function Sanctum.SanctumController.loadWeaponsToSanctum
// [0x00020002] 
// Parameters infos:

void ASanctumController::loadWeaponsToSanctum ( )
{
	static UFunction* pFnloadWeaponsToSanctum = NULL;

	if ( ! pFnloadWeaponsToSanctum )
		pFnloadWeaponsToSanctum = (UFunction*) UObject::GObjObjects()->Data[ 46035 ];

	ASanctumController_execloadWeaponsToSanctum_Parms loadWeaponsToSanctum_Parms;

	this->ProcessEvent ( pFnloadWeaponsToSanctum, &loadWeaponsToSanctum_Parms, NULL );
};

// Function Sanctum.SanctumController.GetWeaponArchetypeFromClass
// [0x00020002] 
// Parameters infos:
// class ASanctumWeapon*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  Weapon                         ( CPF_Parm )

class ASanctumWeapon* ASanctumController::GetWeaponArchetypeFromClass ( class UClass* Weapon )
{
	static UFunction* pFnGetWeaponArchetypeFromClass = NULL;

	if ( ! pFnGetWeaponArchetypeFromClass )
		pFnGetWeaponArchetypeFromClass = (UFunction*) UObject::GObjObjects()->Data[ 46029 ];

	ASanctumController_execGetWeaponArchetypeFromClass_Parms GetWeaponArchetypeFromClass_Parms;
	GetWeaponArchetypeFromClass_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnGetWeaponArchetypeFromClass, &GetWeaponArchetypeFromClass_Parms, NULL );

	return GetWeaponArchetypeFromClass_Parms.ReturnValue;
};

// Function Sanctum.SanctumController.loadGame
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// class USanctumSapituGame*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 GameID                         ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  onlyParseInfo                  ( CPF_OptionalParm | CPF_Parm )

class USanctumSapituGame* ASanctumController::loadGame ( struct FString GameID, unsigned long onlyParseInfo )
{
	static UFunction* pFnloadGame = NULL;

	if ( ! pFnloadGame )
		pFnloadGame = (UFunction*) UObject::GObjObjects()->Data[ 46023 ];

	ASanctumController_execloadGame_Parms loadGame_Parms;
	memcpy ( &loadGame_Parms.GameID, &GameID, 0xC );
	loadGame_Parms.onlyParseInfo = onlyParseInfo;

	this->ProcessEvent ( pFnloadGame, &loadGame_Parms, NULL );

	return loadGame_Parms.ReturnValue;
};

// Function Sanctum.SanctumController.saveGame
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 GameName                       ( CPF_Parm | CPF_NeedCtorLink )

bool ASanctumController::saveGame ( struct FString GameName )
{
	static UFunction* pFnsaveGame = NULL;

	if ( ! pFnsaveGame )
		pFnsaveGame = (UFunction*) UObject::GObjObjects()->Data[ 45952 ];

	ASanctumController_execsaveGame_Parms saveGame_Parms;
	memcpy ( &saveGame_Parms.GameName, &GameName, 0xC );

	this->ProcessEvent ( pFnsaveGame, &saveGame_Parms, NULL );

	return saveGame_Parms.ReturnValue;
};

// Function Sanctum.SanctumController.loadCheckpoint
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ASanctumController::loadCheckpoint ( )
{
	static UFunction* pFnloadCheckpoint = NULL;

	if ( ! pFnloadCheckpoint )
		pFnloadCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 45951 ];

	ASanctumController_execloadCheckpoint_Parms loadCheckpoint_Parms;

	this->ProcessEvent ( pFnloadCheckpoint, &loadCheckpoint_Parms, NULL );
};

// Function Sanctum.SanctumController.resumeGameFromMainMenu
// [0x00020002] 
// Parameters infos:

void ASanctumController::resumeGameFromMainMenu ( )
{
	static UFunction* pFnresumeGameFromMainMenu = NULL;

	if ( ! pFnresumeGameFromMainMenu )
		pFnresumeGameFromMainMenu = (UFunction*) UObject::GObjObjects()->Data[ 45948 ];

	ASanctumController_execresumeGameFromMainMenu_Parms resumeGameFromMainMenu_Parms;

	this->ProcessEvent ( pFnresumeGameFromMainMenu, &resumeGameFromMainMenu_Parms, NULL );
};

// Function Sanctum.SanctumController.ShowAchievementsOverlay
// [0x00020002] 
// Parameters infos:

void ASanctumController::ShowAchievementsOverlay ( )
{
	static UFunction* pFnShowAchievementsOverlay = NULL;

	if ( ! pFnShowAchievementsOverlay )
		pFnShowAchievementsOverlay = (UFunction*) UObject::GObjObjects()->Data[ 45947 ];

	ASanctumController_execShowAchievementsOverlay_Parms ShowAchievementsOverlay_Parms;

	this->ProcessEvent ( pFnShowAchievementsOverlay, &ShowAchievementsOverlay_Parms, NULL );
};

// Function Sanctum.SanctumController.ShowChatOverlay
// [0x00020002] 
// Parameters infos:

void ASanctumController::ShowChatOverlay ( )
{
	static UFunction* pFnShowChatOverlay = NULL;

	if ( ! pFnShowChatOverlay )
		pFnShowChatOverlay = (UFunction*) UObject::GObjObjects()->Data[ 45946 ];

	ASanctumController_execShowChatOverlay_Parms ShowChatOverlay_Parms;

	this->ProcessEvent ( pFnShowChatOverlay, &ShowChatOverlay_Parms, NULL );
};

// Function Sanctum.SanctumController.ShowFacebookOverlay
// [0x00020002] 
// Parameters infos:

void ASanctumController::ShowFacebookOverlay ( )
{
	static UFunction* pFnShowFacebookOverlay = NULL;

	if ( ! pFnShowFacebookOverlay )
		pFnShowFacebookOverlay = (UFunction*) UObject::GObjObjects()->Data[ 45945 ];

	ASanctumController_execShowFacebookOverlay_Parms ShowFacebookOverlay_Parms;

	this->ProcessEvent ( pFnShowFacebookOverlay, &ShowFacebookOverlay_Parms, NULL );
};

// Function Sanctum.SanctumController.ShowForumOverlay
// [0x00020002] 
// Parameters infos:

void ASanctumController::ShowForumOverlay ( )
{
	static UFunction* pFnShowForumOverlay = NULL;

	if ( ! pFnShowForumOverlay )
		pFnShowForumOverlay = (UFunction*) UObject::GObjObjects()->Data[ 45944 ];

	ASanctumController_execShowForumOverlay_Parms ShowForumOverlay_Parms;

	this->ProcessEvent ( pFnShowForumOverlay, &ShowForumOverlay_Parms, NULL );
};

// Function Sanctum.SanctumController.ShowLeaderboardOverlay
// [0x00020002] 
// Parameters infos:

void ASanctumController::ShowLeaderboardOverlay ( )
{
	static UFunction* pFnShowLeaderboardOverlay = NULL;

	if ( ! pFnShowLeaderboardOverlay )
		pFnShowLeaderboardOverlay = (UFunction*) UObject::GObjObjects()->Data[ 45943 ];

	ASanctumController_execShowLeaderboardOverlay_Parms ShowLeaderboardOverlay_Parms;

	this->ProcessEvent ( pFnShowLeaderboardOverlay, &ShowLeaderboardOverlay_Parms, NULL );
};

// Function Sanctum.SanctumController.DisplayDebug
// [0x00C20102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void ASanctumController::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 45932 ];

	ASanctumController_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Sanctum.SanctumController.ShowAudioDebug
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  audioDebug                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  detailedVolumeInfo             ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  showAudioBoundingBox           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  showPriority                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumController::ShowAudioDebug ( unsigned long audioDebug, unsigned long detailedVolumeInfo, unsigned long showAudioBoundingBox, unsigned long showPriority )
{
	static UFunction* pFnShowAudioDebug = NULL;

	if ( ! pFnShowAudioDebug )
		pFnShowAudioDebug = (UFunction*) UObject::GObjObjects()->Data[ 45924 ];

	ASanctumController_execShowAudioDebug_Parms ShowAudioDebug_Parms;
	ShowAudioDebug_Parms.audioDebug = audioDebug;
	ShowAudioDebug_Parms.detailedVolumeInfo = detailedVolumeInfo;
	ShowAudioDebug_Parms.showAudioBoundingBox = showAudioBoundingBox;
	ShowAudioDebug_Parms.showPriority = showPriority;

	this->ProcessEvent ( pFnShowAudioDebug, &ShowAudioDebug_Parms, NULL );
};

// Function Sanctum.SanctumController.updateWebData
// [0x00020000] 
// Parameters infos:

void ASanctumController::updateWebData ( )
{
	static UFunction* pFnupdateWebData = NULL;

	if ( ! pFnupdateWebData )
		pFnupdateWebData = (UFunction*) UObject::GObjObjects()->Data[ 45923 ];

	ASanctumController_execupdateWebData_Parms updateWebData_Parms;

	this->ProcessEvent ( pFnupdateWebData, &updateWebData_Parms, NULL );
};

// Function Sanctum.SanctumController.MapCompleted
// [0x00020000] 
// Parameters infos:
// struct FString                 NextMap                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  MapUnlocked                    ( CPF_Parm )

void ASanctumController::MapCompleted ( struct FString NextMap, unsigned long MapUnlocked )
{
	static UFunction* pFnMapCompleted = NULL;

	if ( ! pFnMapCompleted )
		pFnMapCompleted = (UFunction*) UObject::GObjObjects()->Data[ 45920 ];

	ASanctumController_execMapCompleted_Parms MapCompleted_Parms;
	memcpy ( &MapCompleted_Parms.NextMap, &NextMap, 0xC );
	MapCompleted_Parms.MapUnlocked = MapUnlocked;

	this->ProcessEvent ( pFnMapCompleted, &MapCompleted_Parms, NULL );
};

// Function Sanctum.SanctumController.IsTutorialLevel
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumController::IsTutorialLevel ( )
{
	static UFunction* pFnIsTutorialLevel = NULL;

	if ( ! pFnIsTutorialLevel )
		pFnIsTutorialLevel = (UFunction*) UObject::GObjObjects()->Data[ 44958 ];

	ASanctumController_execIsTutorialLevel_Parms IsTutorialLevel_Parms;

	this->ProcessEvent ( pFnIsTutorialLevel, &IsTutorialLevel_Parms, NULL );

	return IsTutorialLevel_Parms.ReturnValue;
};

// Function Sanctum.SanctumController.ClientGameEnded
// [0x010201C2] 
// Parameters infos:
// class AActor*                  EndGameFocus                   ( CPF_Parm )
// unsigned long                  bIsWinner                      ( CPF_Parm )

void ASanctumController::ClientGameEnded ( class AActor* EndGameFocus, unsigned long bIsWinner )
{
	static UFunction* pFnClientGameEnded = NULL;

	if ( ! pFnClientGameEnded )
		pFnClientGameEnded = (UFunction*) UObject::GObjObjects()->Data[ 45916 ];

	ASanctumController_execClientGameEnded_Parms ClientGameEnded_Parms;
	ClientGameEnded_Parms.EndGameFocus = EndGameFocus;
	ClientGameEnded_Parms.bIsWinner = bIsWinner;

	this->ProcessEvent ( pFnClientGameEnded, &ClientGameEnded_Parms, NULL );
};

// Function Sanctum.SanctumController.GameHasEnded
// [0x00024002] 
// Parameters infos:
// class AActor*                  EndGameFocus                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsWinner                      ( CPF_OptionalParm | CPF_Parm )

void ASanctumController::GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner )
{
	static UFunction* pFnGameHasEnded = NULL;

	if ( ! pFnGameHasEnded )
		pFnGameHasEnded = (UFunction*) UObject::GObjObjects()->Data[ 45913 ];

	ASanctumController_execGameHasEnded_Parms GameHasEnded_Parms;
	GameHasEnded_Parms.EndGameFocus = EndGameFocus;
	GameHasEnded_Parms.bIsWinner = bIsWinner;

	this->ProcessEvent ( pFnGameHasEnded, &GameHasEnded_Parms, NULL );
};

// Function Sanctum.SanctumController.CheckLevelsLockInts
// [0x00020002] 
// Parameters infos:

void ASanctumController::CheckLevelsLockInts ( )
{
	static UFunction* pFnCheckLevelsLockInts = NULL;

	if ( ! pFnCheckLevelsLockInts )
		pFnCheckLevelsLockInts = (UFunction*) UObject::GObjObjects()->Data[ 45890 ];

	ASanctumController_execCheckLevelsLockInts_Parms CheckLevelsLockInts_Parms;

	this->ProcessEvent ( pFnCheckLevelsLockInts, &CheckLevelsLockInts_Parms, NULL );
};

// Function Sanctum.SanctumController.OnReadAchievementsComplete
// [0x00020002] 
// Parameters infos:
// int                            TitleId                        ( CPF_Parm )

void ASanctumController::OnReadAchievementsComplete ( int TitleId )
{
	static UFunction* pFnOnReadAchievementsComplete = NULL;

	if ( ! pFnOnReadAchievementsComplete )
		pFnOnReadAchievementsComplete = (UFunction*) UObject::GObjObjects()->Data[ 45886 ];

	ASanctumController_execOnReadAchievementsComplete_Parms OnReadAchievementsComplete_Parms;
	OnReadAchievementsComplete_Parms.TitleId = TitleId;

	this->ProcessEvent ( pFnOnReadAchievementsComplete, &OnReadAchievementsComplete_Parms, NULL );
};

// Function Sanctum.SanctumController.GetAllAchievements
// [0x00020002] 
// Parameters infos:

void ASanctumController::GetAllAchievements ( )
{
	static UFunction* pFnGetAllAchievements = NULL;

	if ( ! pFnGetAllAchievements )
		pFnGetAllAchievements = (UFunction*) UObject::GObjObjects()->Data[ 45885 ];

	ASanctumController_execGetAllAchievements_Parms GetAllAchievements_Parms;

	this->ProcessEvent ( pFnGetAllAchievements, &GetAllAchievements_Parms, NULL );
};

// Function Sanctum.SanctumController.ReInitMainMenu
// [0x00020002] 
// Parameters infos:

void ASanctumController::ReInitMainMenu ( )
{
	static UFunction* pFnReInitMainMenu = NULL;

	if ( ! pFnReInitMainMenu )
		pFnReInitMainMenu = (UFunction*) UObject::GObjObjects()->Data[ 45884 ];

	ASanctumController_execReInitMainMenu_Parms ReInitMainMenu_Parms;

	this->ProcessEvent ( pFnReInitMainMenu, &ReInitMainMenu_Parms, NULL );
};

// Function Sanctum.SanctumController.OnLoginFailed
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ErrorCode                      ( CPF_Parm )

void ASanctumController::OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode )
{
	static UFunction* pFnOnLoginFailed = NULL;

	if ( ! pFnOnLoginFailed )
		pFnOnLoginFailed = (UFunction*) UObject::GObjObjects()->Data[ 45881 ];

	ASanctumController_execOnLoginFailed_Parms OnLoginFailed_Parms;
	OnLoginFailed_Parms.LocalUserNum = LocalUserNum;
	OnLoginFailed_Parms.ErrorCode = ErrorCode;

	this->ProcessEvent ( pFnOnLoginFailed, &OnLoginFailed_Parms, NULL );
};

// Function Sanctum.SanctumController.OnLoginChange
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void ASanctumController::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 45879 ];

	ASanctumController_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Sanctum.SanctumController.Login
// [0x00024002] 
// Parameters infos:
// struct FString                 UserName                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ASanctumController::Login ( struct FString UserName, struct FString Password )
{
	static UFunction* pFnLogin = NULL;

	if ( ! pFnLogin )
		pFnLogin = (UFunction*) UObject::GObjObjects()->Data[ 45876 ];

	ASanctumController_execLogin_Parms Login_Parms;
	memcpy ( &Login_Parms.UserName, &UserName, 0xC );
	memcpy ( &Login_Parms.Password, &Password, 0xC );

	this->ProcessEvent ( pFnLogin, &Login_Parms, NULL );
};

// Function Sanctum.SanctumController.FixFOV
// [0x00020002] 
// Parameters infos:

void ASanctumController::FixFOV ( )
{
	static UFunction* pFnFixFOV = NULL;

	if ( ! pFnFixFOV )
		pFnFixFOV = (UFunction*) UObject::GObjObjects()->Data[ 45875 ];

	ASanctumController_execFixFOV_Parms FixFOV_Parms;

	this->ProcessEvent ( pFnFixFOV, &FixFOV_Parms, NULL );
};

// Function Sanctum.SanctumController.SetFOV
// [0x00020002] 
// Parameters infos:
// float                          NewFOV                         ( CPF_Parm )

void ASanctumController::SetFOV ( float NewFOV )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = (UFunction*) UObject::GObjObjects()->Data[ 45873 ];

	ASanctumController_execSetFOV_Parms SetFOV_Parms;
	SetFOV_Parms.NewFOV = NewFOV;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );
};

// Function Sanctum.SanctumController.Save
// [0x00020002] 
// Parameters infos:

void ASanctumController::Save ( )
{
	static UFunction* pFnSave = NULL;

	if ( ! pFnSave )
		pFnSave = (UFunction*) UObject::GObjObjects()->Data[ 45872 ];

	ASanctumController_execSave_Parms Save_Parms;

	this->ProcessEvent ( pFnSave, &Save_Parms, NULL );
};

// Function Sanctum.SanctumController.FixTheFov
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ASanctumController::FixTheFov ( )
{
	static UFunction* pFnFixTheFov = NULL;

	if ( ! pFnFixTheFov )
		pFnFixTheFov = (UFunction*) UObject::GObjObjects()->Data[ 45871 ];

	ASanctumController_execFixTheFov_Parms FixTheFov_Parms;

	this->ProcessEvent ( pFnFixTheFov, &FixTheFov_Parms, NULL );
};

// Function Sanctum.SanctumController.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumController::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 45870 ];

	ASanctumController_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumController.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 45869 ];

	ASanctumController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumController.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumController::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 45868 ];

	ASanctumController_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.activatePing
// [0x002200C2] 
// Parameters infos:
// struct FVector                 pingLoc                        ( CPF_Parm )

void ASanctumPlayerReplicationInfo::activatePing ( struct FVector pingLoc )
{
	static UFunction* pFnactivatePing = NULL;

	if ( ! pFnactivatePing )
		pFnactivatePing = (UFunction*) UObject::GObjObjects()->Data[ 54422 ];

	ASanctumPlayerReplicationInfo_execactivatePing_Parms activatePing_Parms;
	memcpy ( &activatePing_Parms.pingLoc, &pingLoc, 0xC );

	this->ProcessEvent ( pFnactivatePing, &activatePing_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.StorePlayerStats
// [0x00020102] 
// Parameters infos:

void ASanctumPlayerReplicationInfo::StorePlayerStats ( )
{
	static UFunction* pFnStorePlayerStats = NULL;

	if ( ! pFnStorePlayerStats )
		pFnStorePlayerStats = (UFunction*) UObject::GObjObjects()->Data[ 54421 ];

	ASanctumPlayerReplicationInfo_execStorePlayerStats_Parms StorePlayerStats_Parms;

	this->ProcessEvent ( pFnStorePlayerStats, &StorePlayerStats_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.OverrideWith
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void ASanctumPlayerReplicationInfo::OverrideWith ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnOverrideWith = NULL;

	if ( ! pFnOverrideWith )
		pFnOverrideWith = (UFunction*) UObject::GObjObjects()->Data[ 54418 ];

	ASanctumPlayerReplicationInfo_execOverrideWith_Parms OverrideWith_Parms;
	OverrideWith_Parms.PRI = PRI;

	this->ProcessEvent ( pFnOverrideWith, &OverrideWith_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.CopyProperties
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void ASanctumPlayerReplicationInfo::CopyProperties ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnCopyProperties = NULL;

	if ( ! pFnCopyProperties )
		pFnCopyProperties = (UFunction*) UObject::GObjObjects()->Data[ 54414 ];

	ASanctumPlayerReplicationInfo_execCopyProperties_Parms CopyProperties_Parms;
	CopyProperties_Parms.PRI = PRI;

	this->ProcessEvent ( pFnCopyProperties, &CopyProperties_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.IncreaseFavouriteTower
// [0x00020102] 
// Parameters infos:
// class UClass*                  Tower                          ( CPF_Parm )

void ASanctumPlayerReplicationInfo::IncreaseFavouriteTower ( class UClass* Tower )
{
	static UFunction* pFnIncreaseFavouriteTower = NULL;

	if ( ! pFnIncreaseFavouriteTower )
		pFnIncreaseFavouriteTower = (UFunction*) UObject::GObjObjects()->Data[ 54411 ];

	ASanctumPlayerReplicationInfo_execIncreaseFavouriteTower_Parms IncreaseFavouriteTower_Parms;
	IncreaseFavouriteTower_Parms.Tower = Tower;

	this->ProcessEvent ( pFnIncreaseFavouriteTower, &IncreaseFavouriteTower_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.AddToFavourite
// [0x00824102] 
// Parameters infos:
// class UClass*                  Tower                          ( CPF_Parm )
// int                            Count                          ( CPF_OptionalParm | CPF_Parm )

void ASanctumPlayerReplicationInfo::AddToFavourite ( class UClass* Tower, int Count )
{
	static UFunction* pFnAddToFavourite = NULL;

	if ( ! pFnAddToFavourite )
		pFnAddToFavourite = (UFunction*) UObject::GObjObjects()->Data[ 54407 ];

	ASanctumPlayerReplicationInfo_execAddToFavourite_Parms AddToFavourite_Parms;
	AddToFavourite_Parms.Tower = Tower;
	AddToFavourite_Parms.Count = Count;

	this->ProcessEvent ( pFnAddToFavourite, &AddToFavourite_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.GetFavouriteTowerClass
// [0x00020102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ASanctumPlayerReplicationInfo::GetFavouriteTowerClass ( )
{
	static UFunction* pFnGetFavouriteTowerClass = NULL;

	if ( ! pFnGetFavouriteTowerClass )
		pFnGetFavouriteTowerClass = (UFunction*) UObject::GObjObjects()->Data[ 54402 ];

	ASanctumPlayerReplicationInfo_execGetFavouriteTowerClass_Parms GetFavouriteTowerClass_Parms;

	this->ProcessEvent ( pFnGetFavouriteTowerClass, &GetFavouriteTowerClass_Parms, NULL );

	return GetFavouriteTowerClass_Parms.ReturnValue;
};

// Function Sanctum.SanctumPlayerReplicationInfo.setNotifierText
// [0x00020102] 
// Parameters infos:

void ASanctumPlayerReplicationInfo::setNotifierText ( )
{
	static UFunction* pFnsetNotifierText = NULL;

	if ( ! pFnsetNotifierText )
		pFnsetNotifierText = (UFunction*) UObject::GObjObjects()->Data[ 54400 ];

	ASanctumPlayerReplicationInfo_execsetNotifierText_Parms setNotifierText_Parms;

	this->ProcessEvent ( pFnsetNotifierText, &setNotifierText_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.getReady
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumPlayerReplicationInfo::getReady ( )
{
	static UFunction* pFngetReady = NULL;

	if ( ! pFngetReady )
		pFngetReady = (UFunction*) UObject::GObjObjects()->Data[ 48221 ];

	ASanctumPlayerReplicationInfo_execgetReady_Parms getReady_Parms;

	this->ProcessEvent ( pFngetReady, &getReady_Parms, NULL );

	return getReady_Parms.ReturnValue;
};

// Function Sanctum.SanctumPlayerReplicationInfo.setReady
// [0x00020002] 
// Parameters infos:
// unsigned long                  Ready                          ( CPF_Parm )

void ASanctumPlayerReplicationInfo::setReady ( unsigned long Ready )
{
	static UFunction* pFnsetReady = NULL;

	if ( ! pFnsetReady )
		pFnsetReady = (UFunction*) UObject::GObjObjects()->Data[ 54398 ];

	ASanctumPlayerReplicationInfo_execsetReady_Parms setReady_Parms;
	setReady_Parms.Ready = Ready;

	this->ProcessEvent ( pFnsetReady, &setReady_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.FillEquipmentForTutorial
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerReplicationInfo::FillEquipmentForTutorial ( )
{
	static UFunction* pFnFillEquipmentForTutorial = NULL;

	if ( ! pFnFillEquipmentForTutorial )
		pFnFillEquipmentForTutorial = (UFunction*) UObject::GObjObjects()->Data[ 54397 ];

	ASanctumPlayerReplicationInfo_execFillEquipmentForTutorial_Parms FillEquipmentForTutorial_Parms;

	this->ProcessEvent ( pFnFillEquipmentForTutorial, &FillEquipmentForTutorial_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.upgradeWeapon
// [0x00024002] 
// Parameters infos:
// class UClass*                  Weapon                         ( CPF_Parm )
// int                            toLevel                        ( CPF_Parm )
// unsigned long                  pay                            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  Message                        ( CPF_OptionalParm | CPF_Parm )

void ASanctumPlayerReplicationInfo::upgradeWeapon ( class UClass* Weapon, int toLevel, unsigned long pay, unsigned long Message )
{
	static UFunction* pFnupgradeWeapon = NULL;

	if ( ! pFnupgradeWeapon )
		pFnupgradeWeapon = (UFunction*) UObject::GObjObjects()->Data[ 54389 ];

	ASanctumPlayerReplicationInfo_execupgradeWeapon_Parms upgradeWeapon_Parms;
	upgradeWeapon_Parms.Weapon = Weapon;
	upgradeWeapon_Parms.toLevel = toLevel;
	upgradeWeapon_Parms.pay = pay;
	upgradeWeapon_Parms.Message = Message;

	this->ProcessEvent ( pFnupgradeWeapon, &upgradeWeapon_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.addDamage
// [0x00020002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )

void ASanctumPlayerReplicationInfo::addDamage ( float Damage )
{
	static UFunction* pFnaddDamage = NULL;

	if ( ! pFnaddDamage )
		pFnaddDamage = (UFunction*) UObject::GObjObjects()->Data[ 54385 ];

	ASanctumPlayerReplicationInfo_execaddDamage_Parms addDamage_Parms;
	addDamage_Parms.Damage = Damage;

	this->ProcessEvent ( pFnaddDamage, &addDamage_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.InitializeTowers
// [0x002200C2] 
// Parameters infos:
// int                            chosenTowers                   ( CPF_Parm )

void ASanctumPlayerReplicationInfo::InitializeTowers ( int* chosenTowers )
{
	static UFunction* pFnInitializeTowers = NULL;

	if ( ! pFnInitializeTowers )
		pFnInitializeTowers = (UFunction*) UObject::GObjObjects()->Data[ 54381 ];

	ASanctumPlayerReplicationInfo_execInitializeTowers_Parms InitializeTowers_Parms;
	memcpy ( &InitializeTowers_Parms.chosenTowers, &chosenTowers, 0x20 );

	this->ProcessEvent ( pFnInitializeTowers, &InitializeTowers_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.initializeWeapons
// [0x00A200C2] 
// Parameters infos:
// int                            chosenWeapons                  ( CPF_Parm )

void ASanctumPlayerReplicationInfo::initializeWeapons ( int* chosenWeapons )
{
	static UFunction* pFninitializeWeapons = NULL;

	if ( ! pFninitializeWeapons )
		pFninitializeWeapons = (UFunction*) UObject::GObjObjects()->Data[ 54377 ];

	ASanctumPlayerReplicationInfo_execinitializeWeapons_Parms initializeWeapons_Parms;
	memcpy ( &initializeWeapons_Parms.chosenWeapons, &chosenWeapons, 0xC );

	this->ProcessEvent ( pFninitializeWeapons, &initializeWeapons_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.GetWeaponTotalValue
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumPlayerReplicationInfo::GetWeaponTotalValue ( )
{
	static UFunction* pFnGetWeaponTotalValue = NULL;

	if ( ! pFnGetWeaponTotalValue )
		pFnGetWeaponTotalValue = (UFunction*) UObject::GObjObjects()->Data[ 48204 ];

	ASanctumPlayerReplicationInfo_execGetWeaponTotalValue_Parms GetWeaponTotalValue_Parms;

	this->ProcessEvent ( pFnGetWeaponTotalValue, &GetWeaponTotalValue_Parms, NULL );

	return GetWeaponTotalValue_Parms.ReturnValue;
};

// Function Sanctum.SanctumPlayerReplicationInfo.notifyWeaponChanged
// [0x00020102] 
// Parameters infos:

void ASanctumPlayerReplicationInfo::notifyWeaponChanged ( )
{
	static UFunction* pFnnotifyWeaponChanged = NULL;

	if ( ! pFnnotifyWeaponChanged )
		pFnnotifyWeaponChanged = (UFunction*) UObject::GObjObjects()->Data[ 54372 ];

	ASanctumPlayerReplicationInfo_execnotifyWeaponChanged_Parms notifyWeaponChanged_Parms;

	this->ProcessEvent ( pFnnotifyWeaponChanged, &notifyWeaponChanged_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.BuyBackWeapons
// [0x00820102] 
// Parameters infos:

void ASanctumPlayerReplicationInfo::BuyBackWeapons ( )
{
	static UFunction* pFnBuyBackWeapons = NULL;

	if ( ! pFnBuyBackWeapons )
		pFnBuyBackWeapons = (UFunction*) UObject::GObjObjects()->Data[ 54364 ];

	ASanctumPlayerReplicationInfo_execBuyBackWeapons_Parms BuyBackWeapons_Parms;

	this->ProcessEvent ( pFnBuyBackWeapons, &BuyBackWeapons_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.SetSelectedTowerInEQ
// [0x002200C2] 
// Parameters infos:
// class UClass*                  towerHologramClass             ( CPF_Parm )
// int                            Index                          ( CPF_Parm )

void ASanctumPlayerReplicationInfo::SetSelectedTowerInEQ ( class UClass* towerHologramClass, int Index )
{
	static UFunction* pFnSetSelectedTowerInEQ = NULL;

	if ( ! pFnSetSelectedTowerInEQ )
		pFnSetSelectedTowerInEQ = (UFunction*) UObject::GObjObjects()->Data[ 54361 ];

	ASanctumPlayerReplicationInfo_execSetSelectedTowerInEQ_Parms SetSelectedTowerInEQ_Parms;
	SetSelectedTowerInEQ_Parms.towerHologramClass = towerHologramClass;
	SetSelectedTowerInEQ_Parms.Index = Index;

	this->ProcessEvent ( pFnSetSelectedTowerInEQ, &SetSelectedTowerInEQ_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.SetSelectedWeaponInEQ
// [0x002200C2] 
// Parameters infos:
// class UClass*                  WeaponClass                    ( CPF_Parm )
// int                            Index                          ( CPF_Parm )

void ASanctumPlayerReplicationInfo::SetSelectedWeaponInEQ ( class UClass* WeaponClass, int Index )
{
	static UFunction* pFnSetSelectedWeaponInEQ = NULL;

	if ( ! pFnSetSelectedWeaponInEQ )
		pFnSetSelectedWeaponInEQ = (UFunction*) UObject::GObjObjects()->Data[ 54358 ];

	ASanctumPlayerReplicationInfo_execSetSelectedWeaponInEQ_Parms SetSelectedWeaponInEQ_Parms;
	SetSelectedWeaponInEQ_Parms.WeaponClass = WeaponClass;
	SetSelectedWeaponInEQ_Parms.Index = Index;

	this->ProcessEvent ( pFnSetSelectedWeaponInEQ, &SetSelectedWeaponInEQ_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.NewSelectedTowersInEQ
// [0x00020102] 
// Parameters infos:

void ASanctumPlayerReplicationInfo::NewSelectedTowersInEQ ( )
{
	static UFunction* pFnNewSelectedTowersInEQ = NULL;

	if ( ! pFnNewSelectedTowersInEQ )
		pFnNewSelectedTowersInEQ = (UFunction*) UObject::GObjObjects()->Data[ 54354 ];

	ASanctumPlayerReplicationInfo_execNewSelectedTowersInEQ_Parms NewSelectedTowersInEQ_Parms;

	this->ProcessEvent ( pFnNewSelectedTowersInEQ, &NewSelectedTowersInEQ_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.NewSelectedWeaponsInEQ
// [0x00020102] 
// Parameters infos:

void ASanctumPlayerReplicationInfo::NewSelectedWeaponsInEQ ( )
{
	static UFunction* pFnNewSelectedWeaponsInEQ = NULL;

	if ( ! pFnNewSelectedWeaponsInEQ )
		pFnNewSelectedWeaponsInEQ = (UFunction*) UObject::GObjObjects()->Data[ 54350 ];

	ASanctumPlayerReplicationInfo_execNewSelectedWeaponsInEQ_Parms NewSelectedWeaponsInEQ_Parms;

	this->ProcessEvent ( pFnNewSelectedWeaponsInEQ, &NewSelectedWeaponsInEQ_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.RemovePlayerFromOthersInEQ
// [0x00020102] 
// Parameters infos:

void ASanctumPlayerReplicationInfo::RemovePlayerFromOthersInEQ ( )
{
	static UFunction* pFnRemovePlayerFromOthersInEQ = NULL;

	if ( ! pFnRemovePlayerFromOthersInEQ )
		pFnRemovePlayerFromOthersInEQ = (UFunction*) UObject::GObjObjects()->Data[ 54346 ];

	ASanctumPlayerReplicationInfo_execRemovePlayerFromOthersInEQ_Parms RemovePlayerFromOthersInEQ_Parms;

	this->ProcessEvent ( pFnRemovePlayerFromOthersInEQ, &RemovePlayerFromOthersInEQ_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.InitializeBuildgun
// [0x00020102] 
// Parameters infos:

void ASanctumPlayerReplicationInfo::InitializeBuildgun ( )
{
	static UFunction* pFnInitializeBuildgun = NULL;

	if ( ! pFnInitializeBuildgun )
		pFnInitializeBuildgun = (UFunction*) UObject::GObjObjects()->Data[ 54343 ];

	ASanctumPlayerReplicationInfo_execInitializeBuildgun_Parms InitializeBuildgun_Parms;

	this->ProcessEvent ( pFnInitializeBuildgun, &InitializeBuildgun_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumPlayerReplicationInfo::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 54342 ];

	ASanctumPlayerReplicationInfo_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumPlayerReplicationInfo::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 54341 ];

	ASanctumPlayerReplicationInfo_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.ExitExterminationPhase
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerReplicationInfo::ExitExterminationPhase ( )
{
	static UFunction* pFnExitExterminationPhase = NULL;

	if ( ! pFnExitExterminationPhase )
		pFnExitExterminationPhase = (UFunction*) UObject::GObjObjects()->Data[ 54340 ];

	ASanctumPlayerReplicationInfo_execExitExterminationPhase_Parms ExitExterminationPhase_Parms;

	this->ProcessEvent ( pFnExitExterminationPhase, &ExitExterminationPhase_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.EnterExterminationPhase
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerReplicationInfo::EnterExterminationPhase ( )
{
	static UFunction* pFnEnterExterminationPhase = NULL;

	if ( ! pFnEnterExterminationPhase )
		pFnEnterExterminationPhase = (UFunction*) UObject::GObjObjects()->Data[ 54338 ];

	ASanctumPlayerReplicationInfo_execEnterExterminationPhase_Parms EnterExterminationPhase_Parms;

	this->ProcessEvent ( pFnEnterExterminationPhase, &EnterExterminationPhase_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.UpdatePlayersDPS
// [0x00020002] 
// Parameters infos:

void ASanctumPlayerReplicationInfo::UpdatePlayersDPS ( )
{
	static UFunction* pFnUpdatePlayersDPS = NULL;

	if ( ! pFnUpdatePlayersDPS )
		pFnUpdatePlayersDPS = (UFunction*) UObject::GObjObjects()->Data[ 54335 ];

	ASanctumPlayerReplicationInfo_execUpdatePlayersDPS_Parms UpdatePlayersDPS_Parms;

	this->ProcessEvent ( pFnUpdatePlayersDPS, &UpdatePlayersDPS_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumPlayerReplicationInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 54333 ];

	ASanctumPlayerReplicationInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumPlayerReplicationInfo.FloatChanged
// [0x00120000] 
// Parameters infos:
// float                          NewValue                       ( CPF_Parm )

void ASanctumPlayerReplicationInfo::FloatChanged ( float NewValue )
{
	static UFunction* pFnFloatChanged = NULL;

	if ( ! pFnFloatChanged )
		pFnFloatChanged = (UFunction*) UObject::GObjObjects()->Data[ 54326 ];

	ASanctumPlayerReplicationInfo_execFloatChanged_Parms FloatChanged_Parms;
	FloatChanged_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnFloatChanged, &FloatChanged_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.getWave
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumGameReplicationInfo::getWave ( )
{
	static UFunction* pFngetWave = NULL;

	if ( ! pFngetWave )
		pFngetWave = (UFunction*) UObject::GObjObjects()->Data[ 44915 ];

	ASanctumGameReplicationInfo_execgetWave_Parms getWave_Parms;

	this->ProcessEvent ( pFngetWave, &getWave_Parms, NULL );

	return getWave_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameReplicationInfo.getNumberOfEnemy
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumGameReplicationInfo::getNumberOfEnemy ( )
{
	static UFunction* pFngetNumberOfEnemy = NULL;

	if ( ! pFngetNumberOfEnemy )
		pFngetNumberOfEnemy = (UFunction*) UObject::GObjObjects()->Data[ 48020 ];

	ASanctumGameReplicationInfo_execgetNumberOfEnemy_Parms getNumberOfEnemy_Parms;

	this->ProcessEvent ( pFngetNumberOfEnemy, &getNumberOfEnemy_Parms, NULL );

	return getNumberOfEnemy_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameReplicationInfo.getMaxLife
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumGameReplicationInfo::getMaxLife ( )
{
	static UFunction* pFngetMaxLife = NULL;

	if ( ! pFngetMaxLife )
		pFngetMaxLife = (UFunction*) UObject::GObjObjects()->Data[ 48424 ];

	ASanctumGameReplicationInfo_execgetMaxLife_Parms getMaxLife_Parms;

	this->ProcessEvent ( pFngetMaxLife, &getMaxLife_Parms, NULL );

	return getMaxLife_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameReplicationInfo.getLife
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumGameReplicationInfo::getLife ( )
{
	static UFunction* pFngetLife = NULL;

	if ( ! pFngetLife )
		pFngetLife = (UFunction*) UObject::GObjObjects()->Data[ 44903 ];

	ASanctumGameReplicationInfo_execgetLife_Parms getLife_Parms;

	this->ProcessEvent ( pFngetLife, &getLife_Parms, NULL );

	return getLife_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameReplicationInfo.setNumEnemies
// [0x00020002] 
// Parameters infos:
// int                            Enemy                          ( CPF_Parm )

void ASanctumGameReplicationInfo::setNumEnemies ( int Enemy )
{
	static UFunction* pFnsetNumEnemies = NULL;

	if ( ! pFnsetNumEnemies )
		pFnsetNumEnemies = (UFunction*) UObject::GObjObjects()->Data[ 48666 ];

	ASanctumGameReplicationInfo_execsetNumEnemies_Parms setNumEnemies_Parms;
	setNumEnemies_Parms.Enemy = Enemy;

	this->ProcessEvent ( pFnsetNumEnemies, &setNumEnemies_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.UpdateLobbyWithNewWave
// [0x00820002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void ASanctumGameReplicationInfo::UpdateLobbyWithNewWave ( int Wave )
{
	static UFunction* pFnUpdateLobbyWithNewWave = NULL;

	if ( ! pFnUpdateLobbyWithNewWave )
		pFnUpdateLobbyWithNewWave = (UFunction*) UObject::GObjObjects()->Data[ 48662 ];

	ASanctumGameReplicationInfo_execUpdateLobbyWithNewWave_Parms UpdateLobbyWithNewWave_Parms;
	UpdateLobbyWithNewWave_Parms.Wave = Wave;

	this->ProcessEvent ( pFnUpdateLobbyWithNewWave, &UpdateLobbyWithNewWave_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.setWave
// [0x00020002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void ASanctumGameReplicationInfo::setWave ( int Wave )
{
	static UFunction* pFnsetWave = NULL;

	if ( ! pFnsetWave )
		pFnsetWave = (UFunction*) UObject::GObjObjects()->Data[ 48660 ];

	ASanctumGameReplicationInfo_execsetWave_Parms setWave_Parms;
	setWave_Parms.Wave = Wave;

	this->ProcessEvent ( pFnsetWave, &setWave_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.IsWaveCheatUsed
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumGameReplicationInfo::IsWaveCheatUsed ( )
{
	static UFunction* pFnIsWaveCheatUsed = NULL;

	if ( ! pFnIsWaveCheatUsed )
		pFnIsWaveCheatUsed = (UFunction*) UObject::GObjObjects()->Data[ 48658 ];

	ASanctumGameReplicationInfo_execIsWaveCheatUsed_Parms IsWaveCheatUsed_Parms;

	this->ProcessEvent ( pFnIsWaveCheatUsed, &IsWaveCheatUsed_Parms, NULL );

	return IsWaveCheatUsed_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameReplicationInfo.setMaxLife
// [0x00020002] 
// Parameters infos:
// int                            life                           ( CPF_Parm )

void ASanctumGameReplicationInfo::setMaxLife ( int life )
{
	static UFunction* pFnsetMaxLife = NULL;

	if ( ! pFnsetMaxLife )
		pFnsetMaxLife = (UFunction*) UObject::GObjObjects()->Data[ 48656 ];

	ASanctumGameReplicationInfo_execsetMaxLife_Parms setMaxLife_Parms;
	setMaxLife_Parms.life = life;

	this->ProcessEvent ( pFnsetMaxLife, &setMaxLife_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.setLife
// [0x00020002] 
// Parameters infos:
// int                            life                           ( CPF_Parm )

void ASanctumGameReplicationInfo::setLife ( int life )
{
	static UFunction* pFnsetLife = NULL;

	if ( ! pFnsetLife )
		pFnsetLife = (UFunction*) UObject::GObjObjects()->Data[ 48654 ];

	ASanctumGameReplicationInfo_execsetLife_Parms setLife_Parms;
	setLife_Parms.life = life;

	this->ProcessEvent ( pFnsetLife, &setLife_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.reduceLife
// [0x00020002] 
// Parameters infos:
// int                            dmg                            ( CPF_Parm )

void ASanctumGameReplicationInfo::reduceLife ( int dmg )
{
	static UFunction* pFnreduceLife = NULL;

	if ( ! pFnreduceLife )
		pFnreduceLife = (UFunction*) UObject::GObjObjects()->Data[ 48652 ];

	ASanctumGameReplicationInfo_execreduceLife_Parms reduceLife_Parms;
	reduceLife_Parms.dmg = dmg;

	this->ProcessEvent ( pFnreduceLife, &reduceLife_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.removeRubel
// [0x00020002] 
// Parameters infos:
// int                            Amount                         ( CPF_Parm )
// int                            Slot                           ( CPF_Parm )
// unsigned char                  Target                         ( CPF_Parm )

void ASanctumGameReplicationInfo::removeRubel ( int Amount, int Slot, unsigned char Target )
{
	static UFunction* pFnremoveRubel = NULL;

	if ( ! pFnremoveRubel )
		pFnremoveRubel = (UFunction*) UObject::GObjObjects()->Data[ 48647 ];

	ASanctumGameReplicationInfo_execremoveRubel_Parms removeRubel_Parms;
	removeRubel_Parms.Amount = Amount;
	removeRubel_Parms.Slot = Slot;
	removeRubel_Parms.Target = Target;

	this->ProcessEvent ( pFnremoveRubel, &removeRubel_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.giveRubel
// [0x00020002] 
// Parameters infos:
// int                            rubels                         ( CPF_Parm )
// int                            Slot                           ( CPF_Parm )

void ASanctumGameReplicationInfo::giveRubel ( int rubels, int Slot )
{
	static UFunction* pFngiveRubel = NULL;

	if ( ! pFngiveRubel )
		pFngiveRubel = (UFunction*) UObject::GObjObjects()->Data[ 48644 ];

	ASanctumGameReplicationInfo_execgiveRubel_Parms giveRubel_Parms;
	giveRubel_Parms.rubels = rubels;
	giveRubel_Parms.Slot = Slot;

	this->ProcessEvent ( pFngiveRubel, &giveRubel_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.UpdateManagePlayerList
// [0x00020002] 
// Parameters infos:

void ASanctumGameReplicationInfo::UpdateManagePlayerList ( )
{
	static UFunction* pFnUpdateManagePlayerList = NULL;

	if ( ! pFnUpdateManagePlayerList )
		pFnUpdateManagePlayerList = (UFunction*) UObject::GObjObjects()->Data[ 48642 ];

	ASanctumGameReplicationInfo_execUpdateManagePlayerList_Parms UpdateManagePlayerList_Parms;

	this->ProcessEvent ( pFnUpdateManagePlayerList, &UpdateManagePlayerList_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.RemovePRI
// [0x00020102] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void ASanctumGameReplicationInfo::RemovePRI ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnRemovePRI = NULL;

	if ( ! pFnRemovePRI )
		pFnRemovePRI = (UFunction*) UObject::GObjObjects()->Data[ 48640 ];

	ASanctumGameReplicationInfo_execRemovePRI_Parms RemovePRI_Parms;
	RemovePRI_Parms.PRI = PRI;

	this->ProcessEvent ( pFnRemovePRI, &RemovePRI_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.AddPRI
// [0x00020102] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void ASanctumGameReplicationInfo::AddPRI ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnAddPRI = NULL;

	if ( ! pFnAddPRI )
		pFnAddPRI = (UFunction*) UObject::GObjObjects()->Data[ 48638 ];

	ASanctumGameReplicationInfo_execAddPRI_Parms AddPRI_Parms;
	AddPRI_Parms.PRI = PRI;

	this->ProcessEvent ( pFnAddPRI, &AddPRI_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.giveRubelAll
// [0x00020002] 
// Parameters infos:
// int                            rubels                         ( CPF_Parm )

void ASanctumGameReplicationInfo::giveRubelAll ( int rubels )
{
	static UFunction* pFngiveRubelAll = NULL;

	if ( ! pFngiveRubelAll )
		pFngiveRubelAll = (UFunction*) UObject::GObjObjects()->Data[ 48635 ];

	ASanctumGameReplicationInfo_execgiveRubelAll_Parms giveRubelAll_Parms;
	giveRubelAll_Parms.rubels = rubels;

	this->ProcessEvent ( pFngiveRubelAll, &giveRubelAll_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.setRubel
// [0x00020002] 
// Parameters infos:
// int                            Rubel                          ( CPF_Parm )
// int                            Slot                           ( CPF_Parm )

void ASanctumGameReplicationInfo::setRubel ( int Rubel, int Slot )
{
	static UFunction* pFnsetRubel = NULL;

	if ( ! pFnsetRubel )
		pFnsetRubel = (UFunction*) UObject::GObjObjects()->Data[ 48628 ];

	ASanctumGameReplicationInfo_execsetRubel_Parms setRubel_Parms;
	setRubel_Parms.Rubel = Rubel;
	setRubel_Parms.Slot = Slot;

	this->ProcessEvent ( pFnsetRubel, &setRubel_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.notifyCashGainedListeners
// [0x00020102] 
// Parameters infos:

void ASanctumGameReplicationInfo::notifyCashGainedListeners ( )
{
	static UFunction* pFnnotifyCashGainedListeners = NULL;

	if ( ! pFnnotifyCashGainedListeners )
		pFnnotifyCashGainedListeners = (UFunction*) UObject::GObjObjects()->Data[ 48625 ];

	ASanctumGameReplicationInfo_execnotifyCashGainedListeners_Parms notifyCashGainedListeners_Parms;

	this->ProcessEvent ( pFnnotifyCashGainedListeners, &notifyCashGainedListeners_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.notifyTimeListeners
// [0x00020102] 
// Parameters infos:

void ASanctumGameReplicationInfo::notifyTimeListeners ( )
{
	static UFunction* pFnnotifyTimeListeners = NULL;

	if ( ! pFnnotifyTimeListeners )
		pFnnotifyTimeListeners = (UFunction*) UObject::GObjObjects()->Data[ 48622 ];

	ASanctumGameReplicationInfo_execnotifyTimeListeners_Parms notifyTimeListeners_Parms;

	this->ProcessEvent ( pFnnotifyTimeListeners, &notifyTimeListeners_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.notifyWaveListeners
// [0x00020102] 
// Parameters infos:

void ASanctumGameReplicationInfo::notifyWaveListeners ( )
{
	static UFunction* pFnnotifyWaveListeners = NULL;

	if ( ! pFnnotifyWaveListeners )
		pFnnotifyWaveListeners = (UFunction*) UObject::GObjObjects()->Data[ 48619 ];

	ASanctumGameReplicationInfo_execnotifyWaveListeners_Parms notifyWaveListeners_Parms;

	this->ProcessEvent ( pFnnotifyWaveListeners, &notifyWaveListeners_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.notifyEnemyListeners
// [0x00020102] 
// Parameters infos:

void ASanctumGameReplicationInfo::notifyEnemyListeners ( )
{
	static UFunction* pFnnotifyEnemyListeners = NULL;

	if ( ! pFnnotifyEnemyListeners )
		pFnnotifyEnemyListeners = (UFunction*) UObject::GObjObjects()->Data[ 48616 ];

	ASanctumGameReplicationInfo_execnotifyEnemyListeners_Parms notifyEnemyListeners_Parms;

	this->ProcessEvent ( pFnnotifyEnemyListeners, &notifyEnemyListeners_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.notifyMaxLifeListeners
// [0x00020102] 
// Parameters infos:

void ASanctumGameReplicationInfo::notifyMaxLifeListeners ( )
{
	static UFunction* pFnnotifyMaxLifeListeners = NULL;

	if ( ! pFnnotifyMaxLifeListeners )
		pFnnotifyMaxLifeListeners = (UFunction*) UObject::GObjObjects()->Data[ 48613 ];

	ASanctumGameReplicationInfo_execnotifyMaxLifeListeners_Parms notifyMaxLifeListeners_Parms;

	this->ProcessEvent ( pFnnotifyMaxLifeListeners, &notifyMaxLifeListeners_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.notifyLifeListeners
// [0x00020102] 
// Parameters infos:

void ASanctumGameReplicationInfo::notifyLifeListeners ( )
{
	static UFunction* pFnnotifyLifeListeners = NULL;

	if ( ! pFnnotifyLifeListeners )
		pFnnotifyLifeListeners = (UFunction*) UObject::GObjObjects()->Data[ 48603 ];

	ASanctumGameReplicationInfo_execnotifyLifeListeners_Parms notifyLifeListeners_Parms;

	this->ProcessEvent ( pFnnotifyLifeListeners, &notifyLifeListeners_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.notifyCashListeners
// [0x00820102] 
// Parameters infos:
// int                            Slot                           ( CPF_Parm )

void ASanctumGameReplicationInfo::notifyCashListeners ( int Slot )
{
	static UFunction* pFnnotifyCashListeners = NULL;

	if ( ! pFnnotifyCashListeners )
		pFnnotifyCashListeners = (UFunction*) UObject::GObjObjects()->Data[ 48598 ];

	ASanctumGameReplicationInfo_execnotifyCashListeners_Parms notifyCashListeners_Parms;
	notifyCashListeners_Parms.Slot = Slot;

	this->ProcessEvent ( pFnnotifyCashListeners, &notifyCashListeners_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.unregisterTimeListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         timeListener                   ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumGameReplicationInfo::unregisterTimeListener ( struct FScriptDelegate timeListener )
{
	static UFunction* pFnunregisterTimeListener = NULL;

	if ( ! pFnunregisterTimeListener )
		pFnunregisterTimeListener = (UFunction*) UObject::GObjObjects()->Data[ 48596 ];

	ASanctumGameReplicationInfo_execunregisterTimeListener_Parms unregisterTimeListener_Parms;
	memcpy ( &unregisterTimeListener_Parms.timeListener, &timeListener, 0xC );

	this->ProcessEvent ( pFnunregisterTimeListener, &unregisterTimeListener_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.unregisterWaveListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         waveListener                   ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumGameReplicationInfo::unregisterWaveListener ( struct FScriptDelegate waveListener )
{
	static UFunction* pFnunregisterWaveListener = NULL;

	if ( ! pFnunregisterWaveListener )
		pFnunregisterWaveListener = (UFunction*) UObject::GObjObjects()->Data[ 48594 ];

	ASanctumGameReplicationInfo_execunregisterWaveListener_Parms unregisterWaveListener_Parms;
	memcpy ( &unregisterWaveListener_Parms.waveListener, &waveListener, 0xC );

	this->ProcessEvent ( pFnunregisterWaveListener, &unregisterWaveListener_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.unregisterEnemyListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         enemyListener                  ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumGameReplicationInfo::unregisterEnemyListener ( struct FScriptDelegate enemyListener )
{
	static UFunction* pFnunregisterEnemyListener = NULL;

	if ( ! pFnunregisterEnemyListener )
		pFnunregisterEnemyListener = (UFunction*) UObject::GObjObjects()->Data[ 48592 ];

	ASanctumGameReplicationInfo_execunregisterEnemyListener_Parms unregisterEnemyListener_Parms;
	memcpy ( &unregisterEnemyListener_Parms.enemyListener, &enemyListener, 0xC );

	this->ProcessEvent ( pFnunregisterEnemyListener, &unregisterEnemyListener_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.unregisterMaxLifeListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         lifeListener                   ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumGameReplicationInfo::unregisterMaxLifeListener ( struct FScriptDelegate lifeListener )
{
	static UFunction* pFnunregisterMaxLifeListener = NULL;

	if ( ! pFnunregisterMaxLifeListener )
		pFnunregisterMaxLifeListener = (UFunction*) UObject::GObjObjects()->Data[ 48590 ];

	ASanctumGameReplicationInfo_execunregisterMaxLifeListener_Parms unregisterMaxLifeListener_Parms;
	memcpy ( &unregisterMaxLifeListener_Parms.lifeListener, &lifeListener, 0xC );

	this->ProcessEvent ( pFnunregisterMaxLifeListener, &unregisterMaxLifeListener_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.unregisterLifeListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         lifeListener                   ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumGameReplicationInfo::unregisterLifeListener ( struct FScriptDelegate lifeListener )
{
	static UFunction* pFnunregisterLifeListener = NULL;

	if ( ! pFnunregisterLifeListener )
		pFnunregisterLifeListener = (UFunction*) UObject::GObjObjects()->Data[ 48588 ];

	ASanctumGameReplicationInfo_execunregisterLifeListener_Parms unregisterLifeListener_Parms;
	memcpy ( &unregisterLifeListener_Parms.lifeListener, &lifeListener, 0xC );

	this->ProcessEvent ( pFnunregisterLifeListener, &unregisterLifeListener_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.unregisterCashGainedListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         cashListener                   ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumGameReplicationInfo::unregisterCashGainedListener ( struct FScriptDelegate cashListener )
{
	static UFunction* pFnunregisterCashGainedListener = NULL;

	if ( ! pFnunregisterCashGainedListener )
		pFnunregisterCashGainedListener = (UFunction*) UObject::GObjObjects()->Data[ 48586 ];

	ASanctumGameReplicationInfo_execunregisterCashGainedListener_Parms unregisterCashGainedListener_Parms;
	memcpy ( &unregisterCashGainedListener_Parms.cashListener, &cashListener, 0xC );

	this->ProcessEvent ( pFnunregisterCashGainedListener, &unregisterCashGainedListener_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.registerCashGainedListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumGameReplicationInfo::registerCashGainedListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnregisterCashGainedListener = NULL;

	if ( ! pFnregisterCashGainedListener )
		pFnregisterCashGainedListener = (UFunction*) UObject::GObjObjects()->Data[ 48584 ];

	ASanctumGameReplicationInfo_execregisterCashGainedListener_Parms registerCashGainedListener_Parms;
	memcpy ( &registerCashGainedListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnregisterCashGainedListener, &registerCashGainedListener_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.unregisterCashListener
// [0x00820102] 
// Parameters infos:
// struct FScriptDelegate         cashListener                   ( CPF_Parm | CPF_NeedCtorLink )
// int                            Slot                           ( CPF_Parm )

void ASanctumGameReplicationInfo::unregisterCashListener ( struct FScriptDelegate cashListener, int Slot )
{
	static UFunction* pFnunregisterCashListener = NULL;

	if ( ! pFnunregisterCashListener )
		pFnunregisterCashListener = (UFunction*) UObject::GObjObjects()->Data[ 48580 ];

	ASanctumGameReplicationInfo_execunregisterCashListener_Parms unregisterCashListener_Parms;
	memcpy ( &unregisterCashListener_Parms.cashListener, &cashListener, 0xC );
	unregisterCashListener_Parms.Slot = Slot;

	this->ProcessEvent ( pFnunregisterCashListener, &unregisterCashListener_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.registerTimeListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumGameReplicationInfo::registerTimeListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnregisterTimeListener = NULL;

	if ( ! pFnregisterTimeListener )
		pFnregisterTimeListener = (UFunction*) UObject::GObjObjects()->Data[ 48578 ];

	ASanctumGameReplicationInfo_execregisterTimeListener_Parms registerTimeListener_Parms;
	memcpy ( &registerTimeListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnregisterTimeListener, &registerTimeListener_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.registerWaveListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumGameReplicationInfo::registerWaveListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnregisterWaveListener = NULL;

	if ( ! pFnregisterWaveListener )
		pFnregisterWaveListener = (UFunction*) UObject::GObjObjects()->Data[ 48576 ];

	ASanctumGameReplicationInfo_execregisterWaveListener_Parms registerWaveListener_Parms;
	memcpy ( &registerWaveListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnregisterWaveListener, &registerWaveListener_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.registerEnemyListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumGameReplicationInfo::registerEnemyListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnregisterEnemyListener = NULL;

	if ( ! pFnregisterEnemyListener )
		pFnregisterEnemyListener = (UFunction*) UObject::GObjObjects()->Data[ 48574 ];

	ASanctumGameReplicationInfo_execregisterEnemyListener_Parms registerEnemyListener_Parms;
	memcpy ( &registerEnemyListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnregisterEnemyListener, &registerEnemyListener_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.registerMaxLifeListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         maxLifeListener                ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumGameReplicationInfo::registerMaxLifeListener ( struct FScriptDelegate maxLifeListener )
{
	static UFunction* pFnregisterMaxLifeListener = NULL;

	if ( ! pFnregisterMaxLifeListener )
		pFnregisterMaxLifeListener = (UFunction*) UObject::GObjObjects()->Data[ 48572 ];

	ASanctumGameReplicationInfo_execregisterMaxLifeListener_Parms registerMaxLifeListener_Parms;
	memcpy ( &registerMaxLifeListener_Parms.maxLifeListener, &maxLifeListener, 0xC );

	this->ProcessEvent ( pFnregisterMaxLifeListener, &registerMaxLifeListener_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.registerLifeListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         lifeListener                   ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumGameReplicationInfo::registerLifeListener ( struct FScriptDelegate lifeListener )
{
	static UFunction* pFnregisterLifeListener = NULL;

	if ( ! pFnregisterLifeListener )
		pFnregisterLifeListener = (UFunction*) UObject::GObjObjects()->Data[ 48570 ];

	ASanctumGameReplicationInfo_execregisterLifeListener_Parms registerLifeListener_Parms;
	memcpy ( &registerLifeListener_Parms.lifeListener, &lifeListener, 0xC );

	this->ProcessEvent ( pFnregisterLifeListener, &registerLifeListener_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.getRubels
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotNumber                     ( CPF_Parm )

int ASanctumGameReplicationInfo::getRubels ( int SlotNumber )
{
	static UFunction* pFngetRubels = NULL;

	if ( ! pFngetRubels )
		pFngetRubels = (UFunction*) UObject::GObjObjects()->Data[ 45969 ];

	ASanctumGameReplicationInfo_execgetRubels_Parms getRubels_Parms;
	getRubels_Parms.SlotNumber = SlotNumber;

	this->ProcessEvent ( pFngetRubels, &getRubels_Parms, NULL );

	return getRubels_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameReplicationInfo.registerCashListener
// [0x00820102] 
// Parameters infos:
// struct FScriptDelegate         cashListener                   ( CPF_Parm | CPF_NeedCtorLink )
// int                            Slot                           ( CPF_Parm )

void ASanctumGameReplicationInfo::registerCashListener ( struct FScriptDelegate cashListener, int Slot )
{
	static UFunction* pFnregisterCashListener = NULL;

	if ( ! pFnregisterCashListener )
		pFnregisterCashListener = (UFunction*) UObject::GObjObjects()->Data[ 48565 ];

	ASanctumGameReplicationInfo_execregisterCashListener_Parms registerCashListener_Parms;
	memcpy ( &registerCashListener_Parms.cashListener, &cashListener, 0xC );
	registerCashListener_Parms.Slot = Slot;

	this->ProcessEvent ( pFnregisterCashListener, &registerCashListener_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.getIncommingEnemies
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Wave                           ( CPF_Parm )
// struct FString                 Enemies                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ASanctumGameReplicationInfo::getIncommingEnemies ( int Wave, struct FString* Enemies )
{
	static UFunction* pFngetIncommingEnemies = NULL;

	if ( ! pFngetIncommingEnemies )
		pFngetIncommingEnemies = (UFunction*) UObject::GObjObjects()->Data[ 48554 ];

	ASanctumGameReplicationInfo_execgetIncommingEnemies_Parms getIncommingEnemies_Parms;
	getIncommingEnemies_Parms.Wave = Wave;

	this->ProcessEvent ( pFngetIncommingEnemies, &getIncommingEnemies_Parms, NULL );

	if ( Enemies )
		memcpy ( Enemies, &getIncommingEnemies_Parms.Enemies, 0x24 );

	return getIncommingEnemies_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameReplicationInfo.GetCurrentViewIDForLeaderboard
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumGameReplicationInfo::GetCurrentViewIDForLeaderboard ( )
{
	static UFunction* pFnGetCurrentViewIDForLeaderboard = NULL;

	if ( ! pFnGetCurrentViewIDForLeaderboard )
		pFnGetCurrentViewIDForLeaderboard = (UFunction*) UObject::GObjObjects()->Data[ 48552 ];

	ASanctumGameReplicationInfo_execGetCurrentViewIDForLeaderboard_Parms GetCurrentViewIDForLeaderboard_Parms;

	this->ProcessEvent ( pFnGetCurrentViewIDForLeaderboard, &GetCurrentViewIDForLeaderboard_Parms, NULL );

	return GetCurrentViewIDForLeaderboard_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameReplicationInfo.StoreGameStats
// [0x00020102] 
// Parameters infos:

void ASanctumGameReplicationInfo::StoreGameStats ( )
{
	static UFunction* pFnStoreGameStats = NULL;

	if ( ! pFnStoreGameStats )
		pFnStoreGameStats = (UFunction*) UObject::GObjObjects()->Data[ 48547 ];

	ASanctumGameReplicationInfo_execStoreGameStats_Parms StoreGameStats_Parms;

	this->ProcessEvent ( pFnStoreGameStats, &StoreGameStats_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.PlanNextWave
// [0x00020002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )
// TArray< class ASanctumEnemy* > Enemies                        ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumGameReplicationInfo::PlanNextWave ( int Wave, TArray< class ASanctumEnemy* > Enemies )
{
	static UFunction* pFnPlanNextWave = NULL;

	if ( ! pFnPlanNextWave )
		pFnPlanNextWave = (UFunction*) UObject::GObjObjects()->Data[ 48536 ];

	ASanctumGameReplicationInfo_execPlanNextWave_Parms PlanNextWave_Parms;
	PlanNextWave_Parms.Wave = Wave;
	memcpy ( &PlanNextWave_Parms.Enemies, &Enemies, 0xC );

	this->ProcessEvent ( pFnPlanNextWave, &PlanNextWave_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.ExitExterminationPhase
// [0x00020002] 
// Parameters infos:

void ASanctumGameReplicationInfo::ExitExterminationPhase ( )
{
	static UFunction* pFnExitExterminationPhase = NULL;

	if ( ! pFnExitExterminationPhase )
		pFnExitExterminationPhase = (UFunction*) UObject::GObjObjects()->Data[ 48535 ];

	ASanctumGameReplicationInfo_execExitExterminationPhase_Parms ExitExterminationPhase_Parms;

	this->ProcessEvent ( pFnExitExterminationPhase, &ExitExterminationPhase_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.EnterExterminationPhase
// [0x00020002] 
// Parameters infos:

void ASanctumGameReplicationInfo::EnterExterminationPhase ( )
{
	static UFunction* pFnEnterExterminationPhase = NULL;

	if ( ! pFnEnterExterminationPhase )
		pFnEnterExterminationPhase = (UFunction*) UObject::GObjObjects()->Data[ 48533 ];

	ASanctumGameReplicationInfo_execEnterExterminationPhase_Parms EnterExterminationPhase_Parms;

	this->ProcessEvent ( pFnEnterExterminationPhase, &EnterExterminationPhase_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.UpdateTowersDPS
// [0x00020002] 
// Parameters infos:

void ASanctumGameReplicationInfo::UpdateTowersDPS ( )
{
	static UFunction* pFnUpdateTowersDPS = NULL;

	if ( ! pFnUpdateTowersDPS )
		pFnUpdateTowersDPS = (UFunction*) UObject::GObjObjects()->Data[ 48530 ];

	ASanctumGameReplicationInfo_execUpdateTowersDPS_Parms UpdateTowersDPS_Parms;

	this->ProcessEvent ( pFnUpdateTowersDPS, &UpdateTowersDPS_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.addTowerDamage
// [0x00020002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )

void ASanctumGameReplicationInfo::addTowerDamage ( float Damage )
{
	static UFunction* pFnaddTowerDamage = NULL;

	if ( ! pFnaddTowerDamage )
		pFnaddTowerDamage = (UFunction*) UObject::GObjObjects()->Data[ 48526 ];

	ASanctumGameReplicationInfo_execaddTowerDamage_Parms addTowerDamage_Parms;
	addTowerDamage_Parms.Damage = Damage;

	this->ProcessEvent ( pFnaddTowerDamage, &addTowerDamage_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.IsBuildPhase
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumGameReplicationInfo::IsBuildPhase ( )
{
	static UFunction* pFnIsBuildPhase = NULL;

	if ( ! pFnIsBuildPhase )
		pFnIsBuildPhase = (UFunction*) UObject::GObjObjects()->Data[ 48219 ];

	ASanctumGameReplicationInfo_execIsBuildPhase_Parms IsBuildPhase_Parms;

	this->ProcessEvent ( pFnIsBuildPhase, &IsBuildPhase_Parms, NULL );

	return IsBuildPhase_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameReplicationInfo.BuildPhaseChanged
// [0x00024102] 
// Parameters infos:
// unsigned long                  buildPhase                     ( CPF_Parm )
// unsigned long                  isViaReplication               ( CPF_OptionalParm | CPF_Parm )

void ASanctumGameReplicationInfo::BuildPhaseChanged ( unsigned long buildPhase, unsigned long isViaReplication )
{
	static UFunction* pFnBuildPhaseChanged = NULL;

	if ( ! pFnBuildPhaseChanged )
		pFnBuildPhaseChanged = (UFunction*) UObject::GObjObjects()->Data[ 48521 ];

	ASanctumGameReplicationInfo_execBuildPhaseChanged_Parms BuildPhaseChanged_Parms;
	BuildPhaseChanged_Parms.buildPhase = buildPhase;
	BuildPhaseChanged_Parms.isViaReplication = isViaReplication;

	this->ProcessEvent ( pFnBuildPhaseChanged, &BuildPhaseChanged_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumGameReplicationInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 48518 ];

	ASanctumGameReplicationInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumGameReplicationInfo.IntChanged
// [0x00120000] 
// Parameters infos:
// int                            NewValue                       ( CPF_Parm )

void ASanctumGameReplicationInfo::IntChanged ( int NewValue )
{
	static UFunction* pFnIntChanged = NULL;

	if ( ! pFnIntChanged )
		pFnIntChanged = (UFunction*) UObject::GObjObjects()->Data[ 48473 ];

	ASanctumGameReplicationInfo_execIntChanged_Parms IntChanged_Parms;
	IntChanged_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnIntChanged, &IntChanged_Parms, NULL );
};

// Function Sanctum.SanctumPawn.DoJump
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bUpdating                      ( CPF_Parm )

bool ASanctumPawn::DoJump ( unsigned long bUpdating )
{
	static UFunction* pFnDoJump = NULL;

	if ( ! pFnDoJump )
		pFnDoJump = (UFunction*) UObject::GObjObjects()->Data[ 46809 ];

	ASanctumPawn_execDoJump_Parms DoJump_Parms;
	DoJump_Parms.bUpdating = bUpdating;

	this->ProcessEvent ( pFnDoJump, &DoJump_Parms, NULL );

	return DoJump_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawn.PlayJumpingSound
// [0x00020002] 
// Parameters infos:

void ASanctumPawn::PlayJumpingSound ( )
{
	static UFunction* pFnPlayJumpingSound = NULL;

	if ( ! pFnPlayJumpingSound )
		pFnPlayJumpingSound = (UFunction*) UObject::GObjObjects()->Data[ 46805 ];

	ASanctumPawn_execPlayJumpingSound_Parms PlayJumpingSound_Parms;

	this->ProcessEvent ( pFnPlayJumpingSound, &PlayJumpingSound_Parms, NULL );
};

// Function Sanctum.SanctumPawn.PlayDyingSound
// [0x00020002] 
// Parameters infos:

void ASanctumPawn::PlayDyingSound ( )
{
	static UFunction* pFnPlayDyingSound = NULL;

	if ( ! pFnPlayDyingSound )
		pFnPlayDyingSound = (UFunction*) UObject::GObjObjects()->Data[ 46804 ];

	ASanctumPawn_execPlayDyingSound_Parms PlayDyingSound_Parms;

	this->ProcessEvent ( pFnPlayDyingSound, &PlayDyingSound_Parms, NULL );
};

// Function Sanctum.SanctumPawn.ActuallyPlayFootstepSound
// [0x00020102] 
// Parameters infos:
// int                            FootDown                       ( CPF_Parm )

void ASanctumPawn::ActuallyPlayFootstepSound ( int FootDown )
{
	static UFunction* pFnActuallyPlayFootstepSound = NULL;

	if ( ! pFnActuallyPlayFootstepSound )
		pFnActuallyPlayFootstepSound = (UFunction*) UObject::GObjObjects()->Data[ 46799 ];

	ASanctumPawn_execActuallyPlayFootstepSound_Parms ActuallyPlayFootstepSound_Parms;
	ActuallyPlayFootstepSound_Parms.FootDown = FootDown;

	this->ProcessEvent ( pFnActuallyPlayFootstepSound, &ActuallyPlayFootstepSound_Parms, NULL );
};

// Function Sanctum.SanctumPawn.PlayFootStepSound
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            FootDown                       ( CPF_Parm )

void ASanctumPawn::eventPlayFootStepSound ( int FootDown )
{
	static UFunction* pFnPlayFootStepSound = NULL;

	if ( ! pFnPlayFootStepSound )
		pFnPlayFootStepSound = (UFunction*) UObject::GObjObjects()->Data[ 46796 ];

	ASanctumPawn_eventPlayFootStepSound_Parms PlayFootStepSound_Parms;
	PlayFootStepSound_Parms.FootDown = FootDown;

	this->ProcessEvent ( pFnPlayFootStepSound, &PlayFootStepSound_Parms, NULL );
};

// Function Sanctum.SanctumPawn.GetMaterialBelowFeet
// [0x00820102] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName ASanctumPawn::GetMaterialBelowFeet ( )
{
	static UFunction* pFnGetMaterialBelowFeet = NULL;

	if ( ! pFnGetMaterialBelowFeet )
		pFnGetMaterialBelowFeet = (UFunction*) UObject::GObjObjects()->Data[ 46786 ];

	ASanctumPawn_execGetMaterialBelowFeet_Parms GetMaterialBelowFeet_Parms;

	this->ProcessEvent ( pFnGetMaterialBelowFeet, &GetMaterialBelowFeet_Parms, NULL );

	return GetMaterialBelowFeet_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawn.TurnOffPawn
// [0x00020102] 
// Parameters infos:

void ASanctumPawn::TurnOffPawn ( )
{
	static UFunction* pFnTurnOffPawn = NULL;

	if ( ! pFnTurnOffPawn )
		pFnTurnOffPawn = (UFunction*) UObject::GObjObjects()->Data[ 46785 ];

	ASanctumPawn_execTurnOffPawn_Parms TurnOffPawn_Parms;

	this->ProcessEvent ( pFnTurnOffPawn, &TurnOffPawn_Parms, NULL );
};

// Function Sanctum.SanctumPawn.SpawnGibs
// [0x00820102] 
// Parameters infos:
// class UClass*                  sanctumDamageTypeClass         ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASanctumPawn::SpawnGibs ( class UClass* sanctumDamageTypeClass, struct FVector HitLocation )
{
	static UFunction* pFnSpawnGibs = NULL;

	if ( ! pFnSpawnGibs )
		pFnSpawnGibs = (UFunction*) UObject::GObjObjects()->Data[ 46776 ];

	ASanctumPawn_execSpawnGibs_Parms SpawnGibs_Parms;
	SpawnGibs_Parms.sanctumDamageTypeClass = sanctumDamageTypeClass;
	memcpy ( &SpawnGibs_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSpawnGibs, &SpawnGibs_Parms, NULL );
};

// Function Sanctum.SanctumPawn.SpawnGib
// [0x00820102] 
// Parameters infos:
// class ASanctumGib*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  GibClass                       ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )
// class UClass*                  sanctumDamageTypeClass         ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// unsigned long                  bSpinGib                       ( CPF_Parm )

class ASanctumGib* ASanctumPawn::SpawnGib ( class UClass* GibClass, struct FName BoneName, class UClass* sanctumDamageTypeClass, struct FVector HitLocation, unsigned long bSpinGib )
{
	static UFunction* pFnSpawnGib = NULL;

	if ( ! pFnSpawnGib )
		pFnSpawnGib = (UFunction*) UObject::GObjObjects()->Data[ 46759 ];

	ASanctumPawn_execSpawnGib_Parms SpawnGib_Parms;
	SpawnGib_Parms.GibClass = GibClass;
	memcpy ( &SpawnGib_Parms.BoneName, &BoneName, 0x8 );
	SpawnGib_Parms.sanctumDamageTypeClass = sanctumDamageTypeClass;
	memcpy ( &SpawnGib_Parms.HitLocation, &HitLocation, 0xC );
	SpawnGib_Parms.bSpinGib = bSpinGib;

	this->ProcessEvent ( pFnSpawnGib, &SpawnGib_Parms, NULL );

	return SpawnGib_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawn.ReflectVect
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 V                              ( CPF_Parm )
// struct FVector                 N                              ( CPF_Parm )

struct FVector ASanctumPawn::ReflectVect ( struct FVector V, struct FVector N )
{
	static UFunction* pFnReflectVect = NULL;

	if ( ! pFnReflectVect )
		pFnReflectVect = (UFunction*) UObject::GObjObjects()->Data[ 46755 ];

	ASanctumPawn_execReflectVect_Parms ReflectVect_Parms;
	memcpy ( &ReflectVect_Parms.V, &V, 0xC );
	memcpy ( &ReflectVect_Parms.N, &N, 0xC );

	this->ProcessEvent ( pFnReflectVect, &ReflectVect_Parms, NULL );

	return ReflectVect_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawn.SwitchWeapon
// [0x00020102] 
// Parameters infos:
// unsigned char                  NewGroup                       ( CPF_Parm )

void ASanctumPawn::SwitchWeapon ( unsigned char NewGroup )
{
	static UFunction* pFnSwitchWeapon = NULL;

	if ( ! pFnSwitchWeapon )
		pFnSwitchWeapon = (UFunction*) UObject::GObjObjects()->Data[ 46753 ];

	ASanctumPawn_execSwitchWeapon_Parms SwitchWeapon_Parms;
	SwitchWeapon_Parms.NewGroup = NewGroup;

	this->ProcessEvent ( pFnSwitchWeapon, &SwitchWeapon_Parms, NULL );
};

// Function Sanctum.SanctumPawn.StoreSwitch
// [0x00020102] 
// Parameters infos:
// unsigned char                  NewGroup                       ( CPF_Parm )

void ASanctumPawn::StoreSwitch ( unsigned char NewGroup )
{
	static UFunction* pFnStoreSwitch = NULL;

	if ( ! pFnStoreSwitch )
		pFnStoreSwitch = (UFunction*) UObject::GObjObjects()->Data[ 46751 ];

	ASanctumPawn_execStoreSwitch_Parms StoreSwitch_Parms;
	StoreSwitch_Parms.NewGroup = NewGroup;

	this->ProcessEvent ( pFnStoreSwitch, &StoreSwitch_Parms, NULL );
};

// Function Sanctum.SanctumPawn.HandleHitEffect
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumPawn::HandleHitEffect ( )
{
	static UFunction* pFnHandleHitEffect = NULL;

	if ( ! pFnHandleHitEffect )
		pFnHandleHitEffect = (UFunction*) UObject::GObjObjects()->Data[ 46749 ];

	ASanctumPawn_execHandleHitEffect_Parms HandleHitEffect_Parms;

	this->ProcessEvent ( pFnHandleHitEffect, &HandleHitEffect_Parms, NULL );

	return HandleHitEffect_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawn.GetEyeHeight
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASanctumPawn::GetEyeHeight ( )
{
	static UFunction* pFnGetEyeHeight = NULL;

	if ( ! pFnGetEyeHeight )
		pFnGetEyeHeight = (UFunction*) UObject::GObjObjects()->Data[ 46747 ];

	ASanctumPawn_execGetEyeHeight_Parms GetEyeHeight_Parms;

	this->ProcessEvent ( pFnGetEyeHeight, &GetEyeHeight_Parms, NULL );

	return GetEyeHeight_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawn.GetPawnViewLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASanctumPawn::GetPawnViewLocation ( )
{
	static UFunction* pFnGetPawnViewLocation = NULL;

	if ( ! pFnGetPawnViewLocation )
		pFnGetPawnViewLocation = (UFunction*) UObject::GObjObjects()->Data[ 46745 ];

	ASanctumPawn_execGetPawnViewLocation_Parms GetPawnViewLocation_Parms;

	this->ProcessEvent ( pFnGetPawnViewLocation, &GetPawnViewLocation_Parms, NULL );

	return GetPawnViewLocation_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawn.GetPawnAmbientSound
// [0x00020102] 
// Parameters infos:
// class USoundCue*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USoundCue* ASanctumPawn::GetPawnAmbientSound ( )
{
	static UFunction* pFnGetPawnAmbientSound = NULL;

	if ( ! pFnGetPawnAmbientSound )
		pFnGetPawnAmbientSound = (UFunction*) UObject::GObjObjects()->Data[ 46743 ];

	ASanctumPawn_execGetPawnAmbientSound_Parms GetPawnAmbientSound_Parms;

	this->ProcessEvent ( pFnGetPawnAmbientSound, &GetPawnAmbientSound_Parms, NULL );

	return GetPawnAmbientSound_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawn.SetPawnAmbientSound
// [0x00020102] 
// Parameters infos:
// class USoundCue*               NewAmbientSound                ( CPF_Parm )

void ASanctumPawn::SetPawnAmbientSound ( class USoundCue* NewAmbientSound )
{
	static UFunction* pFnSetPawnAmbientSound = NULL;

	if ( ! pFnSetPawnAmbientSound )
		pFnSetPawnAmbientSound = (UFunction*) UObject::GObjObjects()->Data[ 46741 ];

	ASanctumPawn_execSetPawnAmbientSound_Parms SetPawnAmbientSound_Parms;
	SetPawnAmbientSound_Parms.NewAmbientSound = NewAmbientSound;

	this->ProcessEvent ( pFnSetPawnAmbientSound, &SetPawnAmbientSound_Parms, NULL );
};

// Function Sanctum.SanctumPawn.ReachedPathnode
// [0x00020002] 
// Parameters infos:

void ASanctumPawn::ReachedPathnode ( )
{
	static UFunction* pFnReachedPathnode = NULL;

	if ( ! pFnReachedPathnode )
		pFnReachedPathnode = (UFunction*) UObject::GObjObjects()->Data[ 46739 ];

	ASanctumPawn_execReachedPathnode_Parms ReachedPathnode_Parms;

	this->ProcessEvent ( pFnReachedPathnode, &ReachedPathnode_Parms, NULL );
};

// Function Sanctum.SanctumPawn.SetAnimationTime
// [0x00020102] 
// Parameters infos:
// float                          newAnimationTime               ( CPF_Parm )

void ASanctumPawn::SetAnimationTime ( float newAnimationTime )
{
	static UFunction* pFnSetAnimationTime = NULL;

	if ( ! pFnSetAnimationTime )
		pFnSetAnimationTime = (UFunction*) UObject::GObjObjects()->Data[ 46735 ];

	ASanctumPawn_execSetAnimationTime_Parms SetAnimationTime_Parms;
	SetAnimationTime_Parms.newAnimationTime = newAnimationTime;

	this->ProcessEvent ( pFnSetAnimationTime, &SetAnimationTime_Parms, NULL );
};

// Function Sanctum.SanctumPawn.GetAnimationTime
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASanctumPawn::GetAnimationTime ( )
{
	static UFunction* pFnGetAnimationTime = NULL;

	if ( ! pFnGetAnimationTime )
		pFnGetAnimationTime = (UFunction*) UObject::GObjObjects()->Data[ 46731 ];

	ASanctumPawn_execGetAnimationTime_Parms GetAnimationTime_Parms;

	this->ProcessEvent ( pFnGetAnimationTime, &GetAnimationTime_Parms, NULL );

	return GetAnimationTime_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawn.GetAnimationLength
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASanctumPawn::GetAnimationLength ( )
{
	static UFunction* pFnGetAnimationLength = NULL;

	if ( ! pFnGetAnimationLength )
		pFnGetAnimationLength = (UFunction*) UObject::GObjObjects()->Data[ 46727 ];

	ASanctumPawn_execGetAnimationLength_Parms GetAnimationLength_Parms;

	this->ProcessEvent ( pFnGetAnimationLength, &GetAnimationLength_Parms, NULL );

	return GetAnimationLength_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawn.SetAmpColor
// [0x00020102] 
// Parameters infos:
// float                          AmpScale                       ( CPF_Parm )

void ASanctumPawn::SetAmpColor ( float AmpScale )
{
	static UFunction* pFnSetAmpColor = NULL;

	if ( ! pFnSetAmpColor )
		pFnSetAmpColor = (UFunction*) UObject::GObjObjects()->Data[ 46724 ];

	ASanctumPawn_execSetAmpColor_Parms SetAmpColor_Parms;
	SetAmpColor_Parms.AmpScale = AmpScale;

	this->ProcessEvent ( pFnSetAmpColor, &SetAmpColor_Parms, NULL );
};

// Function Sanctum.SanctumPawn.SetSlowColor
// [0x00020102] 
// Parameters infos:
// float                          ColorScale                     ( CPF_Parm )

void ASanctumPawn::SetSlowColor ( float ColorScale )
{
	static UFunction* pFnSetSlowColor = NULL;

	if ( ! pFnSetSlowColor )
		pFnSetSlowColor = (UFunction*) UObject::GObjObjects()->Data[ 46721 ];

	ASanctumPawn_execSetSlowColor_Parms SetSlowColor_Parms;
	SetSlowColor_Parms.ColorScale = ColorScale;

	this->ProcessEvent ( pFnSetSlowColor, &SetSlowColor_Parms, NULL );
};

// Function Sanctum.SanctumPawn.GetAmpColorScale
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASanctumPawn::GetAmpColorScale ( )
{
	static UFunction* pFnGetAmpColorScale = NULL;

	if ( ! pFnGetAmpColorScale )
		pFnGetAmpColorScale = (UFunction*) UObject::GObjObjects()->Data[ 46714 ];

	ASanctumPawn_execGetAmpColorScale_Parms GetAmpColorScale_Parms;

	this->ProcessEvent ( pFnGetAmpColorScale, &GetAmpColorScale_Parms, NULL );

	return GetAmpColorScale_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawn.GetAmpSlowRelation
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASanctumPawn::GetAmpSlowRelation ( )
{
	static UFunction* pFnGetAmpSlowRelation = NULL;

	if ( ! pFnGetAmpSlowRelation )
		pFnGetAmpSlowRelation = (UFunction*) UObject::GObjObjects()->Data[ 46711 ];

	ASanctumPawn_execGetAmpSlowRelation_Parms GetAmpSlowRelation_Parms;

	this->ProcessEvent ( pFnGetAmpSlowRelation, &GetAmpSlowRelation_Parms, NULL );

	return GetAmpSlowRelation_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawn.setDamageMultiplier
// [0x00020002] 
// Parameters infos:
// float                          newDamageMultiplier            ( CPF_Parm )

void ASanctumPawn::setDamageMultiplier ( float newDamageMultiplier )
{
	static UFunction* pFnsetDamageMultiplier = NULL;

	if ( ! pFnsetDamageMultiplier )
		pFnsetDamageMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 46709 ];

	ASanctumPawn_execsetDamageMultiplier_Parms setDamageMultiplier_Parms;
	setDamageMultiplier_Parms.newDamageMultiplier = newDamageMultiplier;

	this->ProcessEvent ( pFnsetDamageMultiplier, &setDamageMultiplier_Parms, NULL );
};

// Function Sanctum.SanctumPawn.multiplyDamage
// [0x00020002] 
// Parameters infos:
// float                          damageMultiplier               ( CPF_Parm )

void ASanctumPawn::multiplyDamage ( float damageMultiplier )
{
	static UFunction* pFnmultiplyDamage = NULL;

	if ( ! pFnmultiplyDamage )
		pFnmultiplyDamage = (UFunction*) UObject::GObjObjects()->Data[ 46707 ];

	ASanctumPawn_execmultiplyDamage_Parms multiplyDamage_Parms;
	multiplyDamage_Parms.damageMultiplier = damageMultiplier;

	this->ProcessEvent ( pFnmultiplyDamage, &multiplyDamage_Parms, NULL );
};

// Function Sanctum.SanctumPawn.revertDamageMultiplier
// [0x00020002] 
// Parameters infos:
// float                          damageMultiplier               ( CPF_Parm )

void ASanctumPawn::revertDamageMultiplier ( float damageMultiplier )
{
	static UFunction* pFnrevertDamageMultiplier = NULL;

	if ( ! pFnrevertDamageMultiplier )
		pFnrevertDamageMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 46705 ];

	ASanctumPawn_execrevertDamageMultiplier_Parms revertDamageMultiplier_Parms;
	revertDamageMultiplier_Parms.damageMultiplier = damageMultiplier;

	this->ProcessEvent ( pFnrevertDamageMultiplier, &revertDamageMultiplier_Parms, NULL );
};

// Function Sanctum.SanctumPawn.RemoveDamageMultiplierBy
// [0x00020002] 
// Parameters infos:
// class AActor*                  MultipliedBy                   ( CPF_Parm )

void ASanctumPawn::RemoveDamageMultiplierBy ( class AActor* MultipliedBy )
{
	static UFunction* pFnRemoveDamageMultiplierBy = NULL;

	if ( ! pFnRemoveDamageMultiplierBy )
		pFnRemoveDamageMultiplierBy = (UFunction*) UObject::GObjObjects()->Data[ 46702 ];

	ASanctumPawn_execRemoveDamageMultiplierBy_Parms RemoveDamageMultiplierBy_Parms;
	RemoveDamageMultiplierBy_Parms.MultipliedBy = MultipliedBy;

	this->ProcessEvent ( pFnRemoveDamageMultiplierBy, &RemoveDamageMultiplierBy_Parms, NULL );
};

// Function Sanctum.SanctumPawn.AddDamageMultiplier
// [0x00820002] 
// Parameters infos:
// class AActor*                  DamageModdedBy                 ( CPF_Parm )
// float                          damageMultiplier               ( CPF_Parm )

void ASanctumPawn::AddDamageMultiplier ( class AActor* DamageModdedBy, float damageMultiplier )
{
	static UFunction* pFnAddDamageMultiplier = NULL;

	if ( ! pFnAddDamageMultiplier )
		pFnAddDamageMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 46697 ];

	ASanctumPawn_execAddDamageMultiplier_Parms AddDamageMultiplier_Parms;
	AddDamageMultiplier_Parms.DamageModdedBy = DamageModdedBy;
	AddDamageMultiplier_Parms.damageMultiplier = damageMultiplier;

	this->ProcessEvent ( pFnAddDamageMultiplier, &AddDamageMultiplier_Parms, NULL );
};

// Function Sanctum.SanctumPawn.SetFrozen
// [0x00024002] 
// Parameters infos:
// unsigned long                  frozen                         ( CPF_Parm )
// float                          freezeTime                     ( CPF_OptionalParm | CPF_Parm )
// float                          DiminishFactor                 ( CPF_OptionalParm | CPF_Parm )
// float                          diminishTime                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumPawn::SetFrozen ( unsigned long frozen, float freezeTime, float DiminishFactor, float diminishTime )
{
	static UFunction* pFnSetFrozen = NULL;

	if ( ! pFnSetFrozen )
		pFnSetFrozen = (UFunction*) UObject::GObjObjects()->Data[ 46691 ];

	ASanctumPawn_execSetFrozen_Parms SetFrozen_Parms;
	SetFrozen_Parms.frozen = frozen;
	SetFrozen_Parms.freezeTime = freezeTime;
	SetFrozen_Parms.DiminishFactor = DiminishFactor;
	SetFrozen_Parms.diminishTime = diminishTime;

	this->ProcessEvent ( pFnSetFrozen, &SetFrozen_Parms, NULL );
};

// Function Sanctum.SanctumPawn.RevertSlow
// [0x00020002] 
// Parameters infos:
// float                          slowness                       ( CPF_Parm )

void ASanctumPawn::RevertSlow ( float slowness )
{
	static UFunction* pFnRevertSlow = NULL;

	if ( ! pFnRevertSlow )
		pFnRevertSlow = (UFunction*) UObject::GObjObjects()->Data[ 46689 ];

	ASanctumPawn_execRevertSlow_Parms RevertSlow_Parms;
	RevertSlow_Parms.slowness = slowness;

	this->ProcessEvent ( pFnRevertSlow, &RevertSlow_Parms, NULL );
};

// Function Sanctum.SanctumPawn.Slowdown
// [0x00020002] 
// Parameters infos:
// float                          slowness                       ( CPF_Parm )

void ASanctumPawn::Slowdown ( float slowness )
{
	static UFunction* pFnSlowdown = NULL;

	if ( ! pFnSlowdown )
		pFnSlowdown = (UFunction*) UObject::GObjObjects()->Data[ 46687 ];

	ASanctumPawn_execSlowdown_Parms Slowdown_Parms;
	Slowdown_Parms.slowness = slowness;

	this->ProcessEvent ( pFnSlowdown, &Slowdown_Parms, NULL );
};

// Function Sanctum.SanctumPawn.SetCustomTimeDilation
// [0x00020002] 
// Parameters infos:
// float                          newCustomTimeDilation          ( CPF_Parm )

void ASanctumPawn::SetCustomTimeDilation ( float newCustomTimeDilation )
{
	static UFunction* pFnSetCustomTimeDilation = NULL;

	if ( ! pFnSetCustomTimeDilation )
		pFnSetCustomTimeDilation = (UFunction*) UObject::GObjObjects()->Data[ 46685 ];

	ASanctumPawn_execSetCustomTimeDilation_Parms SetCustomTimeDilation_Parms;
	SetCustomTimeDilation_Parms.newCustomTimeDilation = newCustomTimeDilation;

	this->ProcessEvent ( pFnSetCustomTimeDilation, &SetCustomTimeDilation_Parms, NULL );
};

// Function Sanctum.SanctumPawn.GetNumberOfSlowProjectilesAffecting
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumPawn::GetNumberOfSlowProjectilesAffecting ( )
{
	static UFunction* pFnGetNumberOfSlowProjectilesAffecting = NULL;

	if ( ! pFnGetNumberOfSlowProjectilesAffecting )
		pFnGetNumberOfSlowProjectilesAffecting = (UFunction*) UObject::GObjObjects()->Data[ 46681 ];

	ASanctumPawn_execGetNumberOfSlowProjectilesAffecting_Parms GetNumberOfSlowProjectilesAffecting_Parms;

	this->ProcessEvent ( pFnGetNumberOfSlowProjectilesAffecting, &GetNumberOfSlowProjectilesAffecting_Parms, NULL );

	return GetNumberOfSlowProjectilesAffecting_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawn.RecalculateAllSlowDiminish
// [0x00020002] 
// Parameters infos:

void ASanctumPawn::RecalculateAllSlowDiminish ( )
{
	static UFunction* pFnRecalculateAllSlowDiminish = NULL;

	if ( ! pFnRecalculateAllSlowDiminish )
		pFnRecalculateAllSlowDiminish = (UFunction*) UObject::GObjObjects()->Data[ 46677 ];

	ASanctumPawn_execRecalculateAllSlowDiminish_Parms RecalculateAllSlowDiminish_Parms;

	this->ProcessEvent ( pFnRecalculateAllSlowDiminish, &RecalculateAllSlowDiminish_Parms, NULL );
};

// Function Sanctum.SanctumPawn.RemoveSlowDownBy
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  SlowedBy                       ( CPF_Parm )

bool ASanctumPawn::RemoveSlowDownBy ( class AActor* SlowedBy )
{
	static UFunction* pFnRemoveSlowDownBy = NULL;

	if ( ! pFnRemoveSlowDownBy )
		pFnRemoveSlowDownBy = (UFunction*) UObject::GObjObjects()->Data[ 46673 ];

	ASanctumPawn_execRemoveSlowDownBy_Parms RemoveSlowDownBy_Parms;
	RemoveSlowDownBy_Parms.SlowedBy = SlowedBy;

	this->ProcessEvent ( pFnRemoveSlowDownBy, &RemoveSlowDownBy_Parms, NULL );

	return RemoveSlowDownBy_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawn.CalculateSlowRateDiminish
// [0x00424002] 
// Parameters infos:
// float                          DiminishFactor                 ( CPF_Parm )
// int                            NumberOfProjectileAffecters    ( CPF_OptionalParm | CPF_Parm )
// float                          SlowDownRate                   ( CPF_Parm | CPF_OutParm )

void ASanctumPawn::CalculateSlowRateDiminish ( float DiminishFactor, int NumberOfProjectileAffecters, float* SlowDownRate )
{
	static UFunction* pFnCalculateSlowRateDiminish = NULL;

	if ( ! pFnCalculateSlowRateDiminish )
		pFnCalculateSlowRateDiminish = (UFunction*) UObject::GObjObjects()->Data[ 46669 ];

	ASanctumPawn_execCalculateSlowRateDiminish_Parms CalculateSlowRateDiminish_Parms;
	CalculateSlowRateDiminish_Parms.DiminishFactor = DiminishFactor;
	CalculateSlowRateDiminish_Parms.NumberOfProjectileAffecters = NumberOfProjectileAffecters;

	this->ProcessEvent ( pFnCalculateSlowRateDiminish, &CalculateSlowRateDiminish_Parms, NULL );

	if ( SlowDownRate )
		*SlowDownRate = CalculateSlowRateDiminish_Parms.SlowDownRate;
};

// Function Sanctum.SanctumPawn.SetSlowDown
// [0x00824002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  SlowedBy                       ( CPF_Parm )
// float                          SlowDownRate                   ( CPF_Parm )
// float                          DiminishFactor                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  DoesCauserStack                ( CPF_OptionalParm | CPF_Parm )

bool ASanctumPawn::SetSlowDown ( class AActor* SlowedBy, float SlowDownRate, float DiminishFactor, unsigned long DoesCauserStack )
{
	static UFunction* pFnSetSlowDown = NULL;

	if ( ! pFnSetSlowDown )
		pFnSetSlowDown = (UFunction*) UObject::GObjObjects()->Data[ 46660 ];

	ASanctumPawn_execSetSlowDown_Parms SetSlowDown_Parms;
	SetSlowDown_Parms.SlowedBy = SlowedBy;
	SetSlowDown_Parms.SlowDownRate = SlowDownRate;
	SetSlowDown_Parms.DiminishFactor = DiminishFactor;
	SetSlowDown_Parms.DoesCauserStack = DoesCauserStack;

	this->ProcessEvent ( pFnSetSlowDown, &SetSlowDown_Parms, NULL );

	return SetSlowDown_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawn.Byte2ToFloat
// [0x00024103] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  inputBytes                     ( CPF_Parm )
// unsigned long                  bSigned                        ( CPF_OptionalParm | CPF_Parm )

float ASanctumPawn::Byte2ToFloat ( unsigned char* inputBytes, unsigned long bSigned )
{
	static UFunction* pFnByte2ToFloat = NULL;

	if ( ! pFnByte2ToFloat )
		pFnByte2ToFloat = (UFunction*) UObject::GObjObjects()->Data[ 46635 ];

	ASanctumPawn_execByte2ToFloat_Parms Byte2ToFloat_Parms;
	memcpy ( &Byte2ToFloat_Parms.inputBytes, &inputBytes, 0x2 );
	Byte2ToFloat_Parms.bSigned = bSigned;

	this->ProcessEvent ( pFnByte2ToFloat, &Byte2ToFloat_Parms, NULL );

	return Byte2ToFloat_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawn.FloatTo2Bytes
// [0x00424103] ( FUNC_Final )
// Parameters infos:
// float                          inputFloat                     ( CPF_Parm )
// unsigned long                  bSigned                        ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  out_Bytes                      ( CPF_Parm | CPF_OutParm )

void ASanctumPawn::FloatTo2Bytes ( float inputFloat, unsigned long bSigned, unsigned char* out_Bytes )
{
	static UFunction* pFnFloatTo2Bytes = NULL;

	if ( ! pFnFloatTo2Bytes )
		pFnFloatTo2Bytes = (UFunction*) UObject::GObjObjects()->Data[ 46651 ];

	ASanctumPawn_execFloatTo2Bytes_Parms FloatTo2Bytes_Parms;
	FloatTo2Bytes_Parms.inputFloat = inputFloat;
	FloatTo2Bytes_Parms.bSigned = bSigned;

	this->ProcessEvent ( pFnFloatTo2Bytes, &FloatTo2Bytes_Parms, NULL );

	if ( out_Bytes )
		memcpy ( out_Bytes, &FloatTo2Bytes_Parms.out_Bytes, 0x2 );
};

// Function Sanctum.SanctumPawn.IsChristmasLevel
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumPawn::IsChristmasLevel ( )
{
	static UFunction* pFnIsChristmasLevel = NULL;

	if ( ! pFnIsChristmasLevel )
		pFnIsChristmasLevel = (UFunction*) UObject::GObjObjects()->Data[ 46649 ];

	ASanctumPawn_execIsChristmasLevel_Parms IsChristmasLevel_Parms;

	this->ProcessEvent ( pFnIsChristmasLevel, &IsChristmasLevel_Parms, NULL );

	return IsChristmasLevel_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawn.SpawnTransEffect
// [0x00020002] 
// Parameters infos:

void ASanctumPawn::SpawnTransEffect ( )
{
	static UFunction* pFnSpawnTransEffect = NULL;

	if ( ! pFnSpawnTransEffect )
		pFnSpawnTransEffect = (UFunction*) UObject::GObjObjects()->Data[ 46645 ];

	ASanctumPawn_execSpawnTransEffect_Parms SpawnTransEffect_Parms;

	this->ProcessEvent ( pFnSpawnTransEffect, &SpawnTransEffect_Parms, NULL );
};

// Function Sanctum.SanctumPawn.CalcCamera
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaTime                     ( CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )
// float                          out_FOV                        ( CPF_Parm | CPF_OutParm )

bool ASanctumPawn::CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV )
{
	static UFunction* pFnCalcCamera = NULL;

	if ( ! pFnCalcCamera )
		pFnCalcCamera = (UFunction*) UObject::GObjObjects()->Data[ 46639 ];

	ASanctumPawn_execCalcCamera_Parms CalcCamera_Parms;
	CalcCamera_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnCalcCamera, &CalcCamera_Parms, NULL );

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &CalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &CalcCamera_Parms.out_CamRot, 0xC );

	if ( out_FOV )
		*out_FOV = CalcCamera_Parms.out_FOV;

	return CalcCamera_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawn.GetPRI
// [0x00020102] 
// Parameters infos:

void ASanctumPawn::GetPRI ( )
{
	static UFunction* pFnGetPRI = NULL;

	if ( ! pFnGetPRI )
		pFnGetPRI = (UFunction*) UObject::GObjObjects()->Data[ 46637 ];

	ASanctumPawn_execGetPRI_Parms GetPRI_Parms;

	this->ProcessEvent ( pFnGetPRI, &GetPRI_Parms, NULL );
};

// Function Sanctum.SanctumPawn.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumPawn::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 46636 ];

	ASanctumPawn_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumPawn.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumPawn::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 46632 ];

	ASanctumPawn_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumGib.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumGib::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 48752 ];

	ASanctumGib_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumGib.HitWall
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ASanctumGib::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 48747 ];

	ASanctumGib_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function Sanctum.SanctumGib.Landed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ASanctumGib::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 48744 ];

	ASanctumGib_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function Sanctum.SanctumGib.TurnOnCollision
// [0x00020102] 
// Parameters infos:

void ASanctumGib::TurnOnCollision ( )
{
	static UFunction* pFnTurnOnCollision = NULL;

	if ( ! pFnTurnOnCollision )
		pFnTurnOnCollision = (UFunction*) UObject::GObjObjects()->Data[ 48743 ];

	ASanctumGib_execTurnOnCollision_Parms TurnOnCollision_Parms;

	this->ProcessEvent ( pFnTurnOnCollision, &TurnOnCollision_Parms, NULL );
};

// Function Sanctum.SanctumGib.LeaveADecal
// [0x00820102] 
// Parameters infos:
// struct FVector                 HitLoc                         ( CPF_Parm )
// struct FVector                 HitNorm                        ( CPF_Parm )

void ASanctumGib::LeaveADecal ( struct FVector HitLoc, struct FVector HitNorm )
{
	static UFunction* pFnLeaveADecal = NULL;

	if ( ! pFnLeaveADecal )
		pFnLeaveADecal = (UFunction*) UObject::GObjObjects()->Data[ 48733 ];

	ASanctumGib_execLeaveADecal_Parms LeaveADecal_Parms;
	memcpy ( &LeaveADecal_Parms.HitLoc, &HitLoc, 0xC );
	memcpy ( &LeaveADecal_Parms.HitNorm, &HitNorm, 0xC );

	this->ProcessEvent ( pFnLeaveADecal, &LeaveADecal_Parms, NULL );
};

// Function Sanctum.SanctumGib.RigidBodyCollision
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     HitComponent                   ( CPF_Parm | CPF_EditInline )
// class UPrimitiveComponent*     OtherComponent                 ( CPF_Parm | CPF_EditInline )
// int                            ContactIndex                   ( CPF_Parm )
// struct FCollisionImpactData    RigidCollisionData             ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumGib::eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData )
{
	static UFunction* pFnRigidBodyCollision = NULL;

	if ( ! pFnRigidBodyCollision )
		pFnRigidBodyCollision = (UFunction*) UObject::GObjObjects()->Data[ 48728 ];

	ASanctumGib_eventRigidBodyCollision_Parms RigidBodyCollision_Parms;
	RigidBodyCollision_Parms.HitComponent = HitComponent;
	RigidBodyCollision_Parms.OtherComponent = OtherComponent;
	RigidBodyCollision_Parms.ContactIndex = ContactIndex;

	this->ProcessEvent ( pFnRigidBodyCollision, &RigidBodyCollision_Parms, NULL );

	if ( RigidCollisionData )
		memcpy ( RigidCollisionData, &RigidBodyCollision_Parms.RigidCollisionData, 0x24 );
};

// Function Sanctum.SanctumGib.CalcCamera
// [0x00C20102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaTime                     ( CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )
// float                          out_FOV                        ( CPF_Parm | CPF_OutParm )

bool ASanctumGib::CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV )
{
	static UFunction* pFnCalcCamera = NULL;

	if ( ! pFnCalcCamera )
		pFnCalcCamera = (UFunction*) UObject::GObjObjects()->Data[ 48718 ];

	ASanctumGib_execCalcCamera_Parms CalcCamera_Parms;
	CalcCamera_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnCalcCamera, &CalcCamera_Parms, NULL );

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &CalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &CalcCamera_Parms.out_CamRot, 0xC );

	if ( out_FOV )
		*out_FOV = CalcCamera_Parms.out_FOV;

	return CalcCamera_Parms.ReturnValue;
};

// Function Sanctum.SanctumGib.BecomeViewTarget
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ASanctumGib::eventBecomeViewTarget ( class APlayerController* PC )
{
	static UFunction* pFnBecomeViewTarget = NULL;

	if ( ! pFnBecomeViewTarget )
		pFnBecomeViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 48716 ];

	ASanctumGib_eventBecomeViewTarget_Parms BecomeViewTarget_Parms;
	BecomeViewTarget_Parms.PC = PC;

	this->ProcessEvent ( pFnBecomeViewTarget, &BecomeViewTarget_Parms, NULL );
};

// Function Sanctum.SanctumGib.Timer
// [0x00020002] 
// Parameters infos:

void ASanctumGib::Timer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 48714 ];

	ASanctumGib_execTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Sanctum.SanctumGib.DoCustomGibEffects
// [0x00020100] 
// Parameters infos:

void ASanctumGib::DoCustomGibEffects ( )
{
	static UFunction* pFnDoCustomGibEffects = NULL;

	if ( ! pFnDoCustomGibEffects )
		pFnDoCustomGibEffects = (UFunction*) UObject::GObjObjects()->Data[ 48713 ];

	ASanctumGib_execDoCustomGibEffects_Parms DoCustomGibEffects_Parms;

	this->ProcessEvent ( pFnDoCustomGibEffects, &DoCustomGibEffects_Parms, NULL );
};

// Function Sanctum.SanctumGib.ChooseGib
// [0x00820102] 
// Parameters infos:

void ASanctumGib::ChooseGib ( )
{
	static UFunction* pFnChooseGib = NULL;

	if ( ! pFnChooseGib )
		pFnChooseGib = (UFunction*) UObject::GObjObjects()->Data[ 48704 ];

	ASanctumGib_execChooseGib_Parms ChooseGib_Parms;

	this->ProcessEvent ( pFnChooseGib, &ChooseGib_Parms, NULL );
};

// Function Sanctum.SanctumGib.SetGibStaticMesh
// [0x00020102] 
// Parameters infos:
// class UStaticMesh*             NewStaticMesh                  ( CPF_Parm )

void ASanctumGib::SetGibStaticMesh ( class UStaticMesh* NewStaticMesh )
{
	static UFunction* pFnSetGibStaticMesh = NULL;

	if ( ! pFnSetGibStaticMesh )
		pFnSetGibStaticMesh = (UFunction*) UObject::GObjObjects()->Data[ 48701 ];

	ASanctumGib_execSetGibStaticMesh_Parms SetGibStaticMesh_Parms;
	SetGibStaticMesh_Parms.NewStaticMesh = NewStaticMesh;

	this->ProcessEvent ( pFnSetGibStaticMesh, &SetGibStaticMesh_Parms, NULL );
};

// Function Sanctum.SanctumGib.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void ASanctumGib::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 48697 ];

	ASanctumGib_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Sanctum.SanctumGib.SetTexturesToBeResident
// [0x00020102] 
// Parameters infos:
// float                          TimeToBeResident               ( CPF_Parm )

void ASanctumGib::SetTexturesToBeResident ( float TimeToBeResident )
{
	static UFunction* pFnSetTexturesToBeResident = NULL;

	if ( ! pFnSetTexturesToBeResident )
		pFnSetTexturesToBeResident = (UFunction*) UObject::GObjObjects()->Data[ 48694 ];

	ASanctumGib_execSetTexturesToBeResident_Parms SetTexturesToBeResident_Parms;
	SetTexturesToBeResident_Parms.TimeToBeResident = TimeToBeResident;

	this->ProcessEvent ( pFnSetTexturesToBeResident, &SetTexturesToBeResident_Parms, NULL );
};

// Function Sanctum.SanctumGib.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumGib::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 48693 ];

	ASanctumGib_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumPawnSoundGroup.PlayImmuneSound
// [0x00022002] 
// Parameters infos:
// class ASanctumEnemy*           P                              ( CPF_Parm )
// class AActor*                  InstigatedBy                   ( CPF_Parm )

void USanctumPawnSoundGroup::PlayImmuneSound ( class ASanctumEnemy* P, class AActor* InstigatedBy )
{
	static UFunction* pFnPlayImmuneSound = NULL;

	if ( ! pFnPlayImmuneSound )
		pFnPlayImmuneSound = (UFunction*) UObject::GObjObjects()->Data[ 53451 ];

	USanctumPawnSoundGroup_execPlayImmuneSound_Parms PlayImmuneSound_Parms;
	PlayImmuneSound_Parms.P = P;
	PlayImmuneSound_Parms.InstigatedBy = InstigatedBy;

	this->ProcessEvent ( pFnPlayImmuneSound, &PlayImmuneSound_Parms, NULL );
};

// Function Sanctum.SanctumPawnSoundGroup.PlayGibSound
// [0x00022002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USanctumPawnSoundGroup::PlayGibSound ( class APawn* P )
{
	static UFunction* pFnPlayGibSound = NULL;

	if ( ! pFnPlayGibSound )
		pFnPlayGibSound = (UFunction*) UObject::GObjObjects()->Data[ 53448 ];

	USanctumPawnSoundGroup_execPlayGibSound_Parms PlayGibSound_Parms;
	PlayGibSound_Parms.P = P;

	this->ProcessEvent ( pFnPlayGibSound, &PlayGibSound_Parms, NULL );
};

// Function Sanctum.SanctumPawnSoundGroup.PlayTakeHitSound
// [0x00022002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )

void USanctumPawnSoundGroup::PlayTakeHitSound ( class APawn* P, int Damage )
{
	static UFunction* pFnPlayTakeHitSound = NULL;

	if ( ! pFnPlayTakeHitSound )
		pFnPlayTakeHitSound = (UFunction*) UObject::GObjObjects()->Data[ 53443 ];

	USanctumPawnSoundGroup_execPlayTakeHitSound_Parms PlayTakeHitSound_Parms;
	PlayTakeHitSound_Parms.P = P;
	PlayTakeHitSound_Parms.Damage = Damage;

	this->ProcessEvent ( pFnPlayTakeHitSound, &PlayTakeHitSound_Parms, NULL );
};

// Function Sanctum.SanctumPawnSoundGroup.PlayDyingSound
// [0x00022002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USanctumPawnSoundGroup::PlayDyingSound ( class APawn* P )
{
	static UFunction* pFnPlayDyingSound = NULL;

	if ( ! pFnPlayDyingSound )
		pFnPlayDyingSound = (UFunction*) UObject::GObjObjects()->Data[ 53440 ];

	USanctumPawnSoundGroup_execPlayDyingSound_Parms PlayDyingSound_Parms;
	PlayDyingSound_Parms.P = P;

	this->ProcessEvent ( pFnPlayDyingSound, &PlayDyingSound_Parms, NULL );
};

// Function Sanctum.SanctumPawnSoundGroup.GetLandSound
// [0x00022002] 
// Parameters infos:
// class USoundCue*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   MaterialType                   ( CPF_Parm )

class USoundCue* USanctumPawnSoundGroup::GetLandSound ( struct FName MaterialType )
{
	static UFunction* pFnGetLandSound = NULL;

	if ( ! pFnGetLandSound )
		pFnGetLandSound = (UFunction*) UObject::GObjObjects()->Data[ 53436 ];

	USanctumPawnSoundGroup_execGetLandSound_Parms GetLandSound_Parms;
	memcpy ( &GetLandSound_Parms.MaterialType, &MaterialType, 0x8 );

	this->ProcessEvent ( pFnGetLandSound, &GetLandSound_Parms, NULL );

	return GetLandSound_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawnSoundGroup.GetJumpSound
// [0x00022002] 
// Parameters infos:
// class USoundCue*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   MaterialType                   ( CPF_Parm )

class USoundCue* USanctumPawnSoundGroup::GetJumpSound ( struct FName MaterialType )
{
	static UFunction* pFnGetJumpSound = NULL;

	if ( ! pFnGetJumpSound )
		pFnGetJumpSound = (UFunction*) UObject::GObjObjects()->Data[ 46807 ];

	USanctumPawnSoundGroup_execGetJumpSound_Parms GetJumpSound_Parms;
	memcpy ( &GetJumpSound_Parms.MaterialType, &MaterialType, 0x8 );

	this->ProcessEvent ( pFnGetJumpSound, &GetJumpSound_Parms, NULL );

	return GetJumpSound_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawnSoundGroup.GetFootstepSound
// [0x00022002] 
// Parameters infos:
// class USoundCue*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FootDown                       ( CPF_Parm )
// struct FName                   MaterialType                   ( CPF_Parm )

class USoundCue* USanctumPawnSoundGroup::GetFootstepSound ( int FootDown, struct FName MaterialType )
{
	static UFunction* pFnGetFootstepSound = NULL;

	if ( ! pFnGetFootstepSound )
		pFnGetFootstepSound = (UFunction*) UObject::GObjObjects()->Data[ 46802 ];

	USanctumPawnSoundGroup_execGetFootstepSound_Parms GetFootstepSound_Parms;
	GetFootstepSound_Parms.FootDown = FootDown;
	memcpy ( &GetFootstepSound_Parms.MaterialType, &MaterialType, 0x8 );

	this->ProcessEvent ( pFnGetFootstepSound, &GetFootstepSound_Parms, NULL );

	return GetFootstepSound_Parms.ReturnValue;
};

// Function Sanctum.SanctumPawnSoundGroup.PlayLandSound
// [0x00022002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USanctumPawnSoundGroup::PlayLandSound ( class APawn* P )
{
	static UFunction* pFnPlayLandSound = NULL;

	if ( ! pFnPlayLandSound )
		pFnPlayLandSound = (UFunction*) UObject::GObjObjects()->Data[ 53429 ];

	USanctumPawnSoundGroup_execPlayLandSound_Parms PlayLandSound_Parms;
	PlayLandSound_Parms.P = P;

	this->ProcessEvent ( pFnPlayLandSound, &PlayLandSound_Parms, NULL );
};

// Function Sanctum.SanctumPawnSoundGroup.PlayJumpSound
// [0x00022002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USanctumPawnSoundGroup::PlayJumpSound ( class APawn* P )
{
	static UFunction* pFnPlayJumpSound = NULL;

	if ( ! pFnPlayJumpSound )
		pFnPlayJumpSound = (UFunction*) UObject::GObjObjects()->Data[ 53427 ];

	USanctumPawnSoundGroup_execPlayJumpSound_Parms PlayJumpSound_Parms;
	PlayJumpSound_Parms.P = P;

	this->ProcessEvent ( pFnPlayJumpSound, &PlayJumpSound_Parms, NULL );
};

// Function Sanctum.SanctumPawnSoundGroup.PlayBodyExplosion
// [0x00022002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USanctumPawnSoundGroup::PlayBodyExplosion ( class APawn* P )
{
	static UFunction* pFnPlayBodyExplosion = NULL;

	if ( ! pFnPlayBodyExplosion )
		pFnPlayBodyExplosion = (UFunction*) UObject::GObjObjects()->Data[ 53425 ];

	USanctumPawnSoundGroup_execPlayBodyExplosion_Parms PlayBodyExplosion_Parms;
	PlayBodyExplosion_Parms.P = P;

	this->ProcessEvent ( pFnPlayBodyExplosion, &PlayBodyExplosion_Parms, NULL );
};

// Function Sanctum.SanctumPawnSoundGroup.PlayCrushedSound
// [0x00022002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USanctumPawnSoundGroup::PlayCrushedSound ( class APawn* P )
{
	static UFunction* pFnPlayCrushedSound = NULL;

	if ( ! pFnPlayCrushedSound )
		pFnPlayCrushedSound = (UFunction*) UObject::GObjObjects()->Data[ 53423 ];

	USanctumPawnSoundGroup_execPlayCrushedSound_Parms PlayCrushedSound_Parms;
	PlayCrushedSound_Parms.P = P;

	this->ProcessEvent ( pFnPlayCrushedSound, &PlayCrushedSound_Parms, NULL );
};

// Function Sanctum.SanctumPawnSoundGroup.PlayBulletImpact
// [0x00022002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USanctumPawnSoundGroup::PlayBulletImpact ( class APawn* P )
{
	static UFunction* pFnPlayBulletImpact = NULL;

	if ( ! pFnPlayBulletImpact )
		pFnPlayBulletImpact = (UFunction*) UObject::GObjObjects()->Data[ 53421 ];

	USanctumPawnSoundGroup_execPlayBulletImpact_Parms PlayBulletImpact_Parms;
	PlayBulletImpact_Parms.P = P;

	this->ProcessEvent ( pFnPlayBulletImpact, &PlayBulletImpact_Parms, NULL );
};

// Function Sanctum.SanctumPawnSoundGroup.PlayInstagibSound
// [0x00022002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USanctumPawnSoundGroup::PlayInstagibSound ( class APawn* P )
{
	static UFunction* pFnPlayInstagibSound = NULL;

	if ( ! pFnPlayInstagibSound )
		pFnPlayInstagibSound = (UFunction*) UObject::GObjObjects()->Data[ 53419 ];

	USanctumPawnSoundGroup_execPlayInstagibSound_Parms PlayInstagibSound_Parms;
	PlayInstagibSound_Parms.P = P;

	this->ProcessEvent ( pFnPlayInstagibSound, &PlayInstagibSound_Parms, NULL );
};

// Function Sanctum.SanctumFreezeObject.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumFreezeObject::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 47923 ];

	ASanctumFreezeObject_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumFreezeObject.NewFreezeObject
// [0x00820002] 
// Parameters infos:
// float                          freezeTime                     ( CPF_Parm )
// float                          DiminishFactor                 ( CPF_Parm )
// float                          diminishTime                   ( CPF_Parm )

void ASanctumFreezeObject::NewFreezeObject ( float freezeTime, float DiminishFactor, float diminishTime )
{
	static UFunction* pFnNewFreezeObject = NULL;

	if ( ! pFnNewFreezeObject )
		pFnNewFreezeObject = (UFunction*) UObject::GObjObjects()->Data[ 47917 ];

	ASanctumFreezeObject_execNewFreezeObject_Parms NewFreezeObject_Parms;
	NewFreezeObject_Parms.freezeTime = freezeTime;
	NewFreezeObject_Parms.DiminishFactor = DiminishFactor;
	NewFreezeObject_Parms.diminishTime = diminishTime;

	this->ProcessEvent ( pFnNewFreezeObject, &NewFreezeObject_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentSlowField.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentSlowField::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 57108 ];

	ASanctumTowerBaseAttachmentSlowField_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentSlowField.HandleUntouch
// [0x00020102] 
// Parameters infos:
// class ASanctumPawn*            P                              ( CPF_Parm )

void ASanctumTowerBaseAttachmentSlowField::HandleUntouch ( class ASanctumPawn* P )
{
	static UFunction* pFnHandleUntouch = NULL;

	if ( ! pFnHandleUntouch )
		pFnHandleUntouch = (UFunction*) UObject::GObjObjects()->Data[ 57106 ];

	ASanctumTowerBaseAttachmentSlowField_execHandleUntouch_Parms HandleUntouch_Parms;
	HandleUntouch_Parms.P = P;

	this->ProcessEvent ( pFnHandleUntouch, &HandleUntouch_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentSlowField.HandleTouchingPawn
// [0x00020102] 
// Parameters infos:
// class ASanctumPawn*            P                              ( CPF_Parm )

void ASanctumTowerBaseAttachmentSlowField::HandleTouchingPawn ( class ASanctumPawn* P )
{
	static UFunction* pFnHandleTouchingPawn = NULL;

	if ( ! pFnHandleTouchingPawn )
		pFnHandleTouchingPawn = (UFunction*) UObject::GObjObjects()->Data[ 57104 ];

	ASanctumTowerBaseAttachmentSlowField_execHandleTouchingPawn_Parms HandleTouchingPawn_Parms;
	HandleTouchingPawn_Parms.P = P;

	this->ProcessEvent ( pFnHandleTouchingPawn, &HandleTouchingPawn_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentSlowField.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ASanctumTowerBaseAttachmentSlowField::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 57101 ];

	ASanctumTowerBaseAttachmentSlowField_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentSlowField.GetStats
// [0x00422102] 
// Parameters infos:
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         statInfo                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumTowerBaseAttachmentSlowField::GetStats ( int lvl, struct FStatInfoStruct* statInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 57095 ];

	ASanctumTowerBaseAttachmentSlowField_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( statInfo )
		memcpy ( statInfo, &GetStats_Parms.statInfo, 0xAC );
};

// Function Sanctum.SanctumTowerBaseAttachmentField.UpgradeMesh
// [0x00820102] 
// Parameters infos:
// int                            toLevel                        ( CPF_Parm )

void ASanctumTowerBaseAttachmentField::UpgradeMesh ( int toLevel )
{
	static UFunction* pFnUpgradeMesh = NULL;

	if ( ! pFnUpgradeMesh )
		pFnUpgradeMesh = (UFunction*) UObject::GObjObjects()->Data[ 56331 ];

	ASanctumTowerBaseAttachmentField_execUpgradeMesh_Parms UpgradeMesh_Parms;
	UpgradeMesh_Parms.toLevel = toLevel;

	this->ProcessEvent ( pFnUpgradeMesh, &UpgradeMesh_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentField.createParticleSystem
// [0x00820102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentField::createParticleSystem ( )
{
	static UFunction* pFncreateParticleSystem = NULL;

	if ( ! pFncreateParticleSystem )
		pFncreateParticleSystem = (UFunction*) UObject::GObjObjects()->Data[ 56329 ];

	ASanctumTowerBaseAttachmentField_execcreateParticleSystem_Parms createParticleSystem_Parms;

	this->ProcessEvent ( pFncreateParticleSystem, &createParticleSystem_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentField.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumTowerBaseAttachmentField::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 56326 ];

	ASanctumTowerBaseAttachmentField_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentField.HandleUntouch
// [0x00020100] 
// Parameters infos:
// class ASanctumPawn*            P                              ( CPF_Parm )

void ASanctumTowerBaseAttachmentField::HandleUntouch ( class ASanctumPawn* P )
{
	static UFunction* pFnHandleUntouch = NULL;

	if ( ! pFnHandleUntouch )
		pFnHandleUntouch = (UFunction*) UObject::GObjObjects()->Data[ 56324 ];

	ASanctumTowerBaseAttachmentField_execHandleUntouch_Parms HandleUntouch_Parms;
	HandleUntouch_Parms.P = P;

	this->ProcessEvent ( pFnHandleUntouch, &HandleUntouch_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentField.HandleTouchingPawn
// [0x00020100] 
// Parameters infos:
// class ASanctumPawn*            P                              ( CPF_Parm )

void ASanctumTowerBaseAttachmentField::HandleTouchingPawn ( class ASanctumPawn* P )
{
	static UFunction* pFnHandleTouchingPawn = NULL;

	if ( ! pFnHandleTouchingPawn )
		pFnHandleTouchingPawn = (UFunction*) UObject::GObjObjects()->Data[ 56322 ];

	ASanctumTowerBaseAttachmentField_execHandleTouchingPawn_Parms HandleTouchingPawn_Parms;
	HandleTouchingPawn_Parms.P = P;

	this->ProcessEvent ( pFnHandleTouchingPawn, &HandleTouchingPawn_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentField.IsPawnOn
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool ASanctumTowerBaseAttachmentField::IsPawnOn ( class APawn* P )
{
	static UFunction* pFnIsPawnOn = NULL;

	if ( ! pFnIsPawnOn )
		pFnIsPawnOn = (UFunction*) UObject::GObjObjects()->Data[ 56319 ];

	ASanctumTowerBaseAttachmentField_execIsPawnOn_Parms IsPawnOn_Parms;
	IsPawnOn_Parms.P = P;

	this->ProcessEvent ( pFnIsPawnOn, &IsPawnOn_Parms, NULL );

	return IsPawnOn_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentField.setTowerBase
// [0x00020002] 
// Parameters infos:
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )

void ASanctumTowerBaseAttachmentField::setTowerBase ( class ASanctumTowerBase* TowerBase )
{
	static UFunction* pFnsetTowerBase = NULL;

	if ( ! pFnsetTowerBase )
		pFnsetTowerBase = (UFunction*) UObject::GObjObjects()->Data[ 56317 ];

	ASanctumTowerBaseAttachmentField_execsetTowerBase_Parms setTowerBase_Parms;
	setTowerBase_Parms.TowerBase = TowerBase;

	this->ProcessEvent ( pFnsetTowerBase, &setTowerBase_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentField.Upgrade
// [0x00020002] 
// Parameters infos:
// int                            toLevel                        ( CPF_Parm )

void ASanctumTowerBaseAttachmentField::Upgrade ( int toLevel )
{
	static UFunction* pFnUpgrade = NULL;

	if ( ! pFnUpgrade )
		pFnUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 56315 ];

	ASanctumTowerBaseAttachmentField_execUpgrade_Parms Upgrade_Parms;
	Upgrade_Parms.toLevel = toLevel;

	this->ProcessEvent ( pFnUpgrade, &Upgrade_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentField.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentField::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 56314 ];

	ASanctumTowerBaseAttachmentField_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentField.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentField::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 56312 ];

	ASanctumTowerBaseAttachmentField_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentField.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumTowerBaseAttachmentField::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 56310 ];

	ASanctumTowerBaseAttachmentField_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachment.getRubelSpent
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            slotNr                         ( CPF_Parm )

int ASanctumTowerBaseAttachment::getRubelSpent ( int slotNr )
{
	static UFunction* pFngetRubelSpent = NULL;

	if ( ! pFngetRubelSpent )
		pFngetRubelSpent = (UFunction*) UObject::GObjObjects()->Data[ 55974 ];

	ASanctumTowerBaseAttachment_execgetRubelSpent_Parms getRubelSpent_Parms;
	getRubelSpent_Parms.slotNr = slotNr;

	this->ProcessEvent ( pFngetRubelSpent, &getRubelSpent_Parms, NULL );

	return getRubelSpent_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachment.setRubelSpent
// [0x00020102] 
// Parameters infos:
// int                            rubelSpent                     ( CPF_Parm )
// int                            slotNr                         ( CPF_Parm )

void ASanctumTowerBaseAttachment::setRubelSpent ( int rubelSpent, int slotNr )
{
	static UFunction* pFnsetRubelSpent = NULL;

	if ( ! pFnsetRubelSpent )
		pFnsetRubelSpent = (UFunction*) UObject::GObjObjects()->Data[ 55971 ];

	ASanctumTowerBaseAttachment_execsetRubelSpent_Parms setRubelSpent_Parms;
	setRubelSpent_Parms.rubelSpent = rubelSpent;
	setRubelSpent_Parms.slotNr = slotNr;

	this->ProcessEvent ( pFnsetRubelSpent, &setRubelSpent_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachment.getBuyCost
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumTowerBaseAttachment::getBuyCost ( )
{
	static UFunction* pFngetBuyCost = NULL;

	if ( ! pFngetBuyCost )
		pFngetBuyCost = (UFunction*) UObject::GObjObjects()->Data[ 55969 ];

	ASanctumTowerBaseAttachment_execgetBuyCost_Parms getBuyCost_Parms;

	this->ProcessEvent ( pFngetBuyCost, &getBuyCost_Parms, NULL );

	return getBuyCost_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachment.getUpgradeCost
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumTowerBaseAttachment::getUpgradeCost ( )
{
	static UFunction* pFngetUpgradeCost = NULL;

	if ( ! pFngetUpgradeCost )
		pFngetUpgradeCost = (UFunction*) UObject::GObjObjects()->Data[ 50908 ];

	ASanctumTowerBaseAttachment_execgetUpgradeCost_Parms getUpgradeCost_Parms;

	this->ProcessEvent ( pFngetUpgradeCost, &getUpgradeCost_Parms, NULL );

	return getUpgradeCost_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachment.GetAccumulatedUpgradeCost
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Level                          ( CPF_Parm )

int ASanctumTowerBaseAttachment::GetAccumulatedUpgradeCost ( int Level )
{
	static UFunction* pFnGetAccumulatedUpgradeCost = NULL;

	if ( ! pFnGetAccumulatedUpgradeCost )
		pFnGetAccumulatedUpgradeCost = (UFunction*) UObject::GObjObjects()->Data[ 46142 ];

	ASanctumTowerBaseAttachment_execGetAccumulatedUpgradeCost_Parms GetAccumulatedUpgradeCost_Parms;
	GetAccumulatedUpgradeCost_Parms.Level = Level;

	this->ProcessEvent ( pFnGetAccumulatedUpgradeCost, &GetAccumulatedUpgradeCost_Parms, NULL );

	return GetAccumulatedUpgradeCost_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachment.getTotalAmountRubelSpent
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumTowerBaseAttachment::getTotalAmountRubelSpent ( )
{
	static UFunction* pFngetTotalAmountRubelSpent = NULL;

	if ( ! pFngetTotalAmountRubelSpent )
		pFngetTotalAmountRubelSpent = (UFunction*) UObject::GObjObjects()->Data[ 55962 ];

	ASanctumTowerBaseAttachment_execgetTotalAmountRubelSpent_Parms getTotalAmountRubelSpent_Parms;

	this->ProcessEvent ( pFngetTotalAmountRubelSpent, &getTotalAmountRubelSpent_Parms, NULL );

	return getTotalAmountRubelSpent_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachment.Upgrade
// [0x00020002] 
// Parameters infos:
// int                            NewLevel                       ( CPF_Parm )

void ASanctumTowerBaseAttachment::Upgrade ( int NewLevel )
{
	static UFunction* pFnUpgrade = NULL;

	if ( ! pFnUpgrade )
		pFnUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 55960 ];

	ASanctumTowerBaseAttachment_execUpgrade_Parms Upgrade_Parms;
	Upgrade_Parms.NewLevel = NewLevel;

	this->ProcessEvent ( pFnUpgrade, &Upgrade_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachment.GetSellPrice
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumTowerBaseAttachment::GetSellPrice ( )
{
	static UFunction* pFnGetSellPrice = NULL;

	if ( ! pFnGetSellPrice )
		pFnGetSellPrice = (UFunction*) UObject::GObjObjects()->Data[ 55908 ];

	ASanctumTowerBaseAttachment_execGetSellPrice_Parms GetSellPrice_Parms;

	this->ProcessEvent ( pFnGetSellPrice, &GetSellPrice_Parms, NULL );

	return GetSellPrice_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachment.getParent
// [0x00020102] 
// Parameters infos:
// class ASanctumTowerBase*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASanctumTowerBase* ASanctumTowerBaseAttachment::getParent ( )
{
	static UFunction* pFngetParent = NULL;

	if ( ! pFngetParent )
		pFngetParent = (UFunction*) UObject::GObjObjects()->Data[ 55956 ];

	ASanctumTowerBaseAttachment_execgetParent_Parms getParent_Parms;

	this->ProcessEvent ( pFngetParent, &getParent_Parms, NULL );

	return getParent_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachment.setTowerBase
// [0x00020002] 
// Parameters infos:
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )

void ASanctumTowerBaseAttachment::setTowerBase ( class ASanctumTowerBase* TowerBase )
{
	static UFunction* pFnsetTowerBase = NULL;

	if ( ! pFnsetTowerBase )
		pFnsetTowerBase = (UFunction*) UObject::GObjObjects()->Data[ 55954 ];

	ASanctumTowerBaseAttachment_execsetTowerBase_Parms setTowerBase_Parms;
	setTowerBase_Parms.TowerBase = TowerBase;

	this->ProcessEvent ( pFnsetTowerBase, &setTowerBase_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachment.setLightEnvrioment
// [0x00020102] 
// Parameters infos:
// class UDynamicLightEnvironmentComponent* enviroment                     ( CPF_Parm | CPF_EditInline )

void ASanctumTowerBaseAttachment::setLightEnvrioment ( class UDynamicLightEnvironmentComponent* enviroment )
{
	static UFunction* pFnsetLightEnvrioment = NULL;

	if ( ! pFnsetLightEnvrioment )
		pFnsetLightEnvrioment = (UFunction*) UObject::GObjObjects()->Data[ 55951 ];

	ASanctumTowerBaseAttachment_execsetLightEnvrioment_Parms setLightEnvrioment_Parms;
	setLightEnvrioment_Parms.enviroment = enviroment;

	this->ProcessEvent ( pFnsetLightEnvrioment, &setLightEnvrioment_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachment.GetStats
// [0x00422102] 
// Parameters infos:
// int                            Level                          ( CPF_Parm )
// struct FStatInfoStruct         statInfo                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumTowerBaseAttachment::GetStats ( int Level, struct FStatInfoStruct* statInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 55947 ];

	ASanctumTowerBaseAttachment_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.Level = Level;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( statInfo )
		memcpy ( statInfo, &GetStats_Parms.statInfo, 0xAC );
};

// Function Sanctum.SanctumTowerBaseAttachment.StartBuildingPhase
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachment::StartBuildingPhase ( )
{
	static UFunction* pFnStartBuildingPhase = NULL;

	if ( ! pFnStartBuildingPhase )
		pFnStartBuildingPhase = (UFunction*) UObject::GObjObjects()->Data[ 55946 ];

	ASanctumTowerBaseAttachment_execStartBuildingPhase_Parms StartBuildingPhase_Parms;

	this->ProcessEvent ( pFnStartBuildingPhase, &StartBuildingPhase_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachment.startActionPhase
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachment::startActionPhase ( )
{
	static UFunction* pFnstartActionPhase = NULL;

	if ( ! pFnstartActionPhase )
		pFnstartActionPhase = (UFunction*) UObject::GObjObjects()->Data[ 55945 ];

	ASanctumTowerBaseAttachment_execstartActionPhase_Parms startActionPhase_Parms;

	this->ProcessEvent ( pFnstartActionPhase, &startActionPhase_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachment.getTowerBase
// [0x00020102] 
// Parameters infos:
// class ASanctumTowerBase*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASanctumTowerBase* ASanctumTowerBaseAttachment::getTowerBase ( )
{
	static UFunction* pFngetTowerBase = NULL;

	if ( ! pFngetTowerBase )
		pFngetTowerBase = (UFunction*) UObject::GObjObjects()->Data[ 45987 ];

	ASanctumTowerBaseAttachment_execgetTowerBase_Parms getTowerBase_Parms;

	this->ProcessEvent ( pFngetTowerBase, &getTowerBase_Parms, NULL );

	return getTowerBase_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachment.getTowerBaseName
// [0x00020102] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName ASanctumTowerBaseAttachment::getTowerBaseName ( )
{
	static UFunction* pFngetTowerBaseName = NULL;

	if ( ! pFngetTowerBaseName )
		pFngetTowerBaseName = (UFunction*) UObject::GObjObjects()->Data[ 45990 ];

	ASanctumTowerBaseAttachment_execgetTowerBaseName_Parms getTowerBaseName_Parms;

	this->ProcessEvent ( pFngetTowerBaseName, &getTowerBaseName_Parms, NULL );

	return getTowerBaseName_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachment.getMaxLevel
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumTowerBaseAttachment::getMaxLevel ( )
{
	static UFunction* pFngetMaxLevel = NULL;

	if ( ! pFngetMaxLevel )
		pFngetMaxLevel = (UFunction*) UObject::GObjObjects()->Data[ 50873 ];

	ASanctumTowerBaseAttachment_execgetMaxLevel_Parms getMaxLevel_Parms;

	this->ProcessEvent ( pFngetMaxLevel, &getMaxLevel_Parms, NULL );

	return getMaxLevel_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachment.getTowerInfo
// [0x00020102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ASanctumTowerBaseAttachment::getTowerInfo ( )
{
	static UFunction* pFngetTowerInfo = NULL;

	if ( ! pFngetTowerInfo )
		pFngetTowerInfo = (UFunction*) UObject::GObjObjects()->Data[ 51080 ];

	ASanctumTowerBaseAttachment_execgetTowerInfo_Parms getTowerInfo_Parms;

	this->ProcessEvent ( pFngetTowerInfo, &getTowerInfo_Parms, NULL );

	return getTowerInfo_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachment.getLevel
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumTowerBaseAttachment::getLevel ( )
{
	static UFunction* pFngetLevel = NULL;

	if ( ! pFngetLevel )
		pFngetLevel = (UFunction*) UObject::GObjObjects()->Data[ 44896 ];

	ASanctumTowerBaseAttachment_execgetLevel_Parms getLevel_Parms;

	this->ProcessEvent ( pFngetLevel, &getLevel_Parms, NULL );

	return getLevel_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachment.IsChristmas
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachment::IsChristmas ( )
{
	static UFunction* pFnIsChristmas = NULL;

	if ( ! pFnIsChristmas )
		pFnIsChristmas = (UFunction*) UObject::GObjObjects()->Data[ 55943 ];

	ASanctumTowerBaseAttachment_execIsChristmas_Parms IsChristmas_Parms;

	this->ProcessEvent ( pFnIsChristmas, &IsChristmas_Parms, NULL );

	return IsChristmas_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachment.CheckDLCOwnerShip
// [0x00020102] 
// Parameters infos:
// class ASanctumPlayerController* SPC                            ( CPF_Parm )

void ASanctumTowerBaseAttachment::CheckDLCOwnerShip ( class ASanctumPlayerController* SPC )
{
	static UFunction* pFnCheckDLCOwnerShip = NULL;

	if ( ! pFnCheckDLCOwnerShip )
		pFnCheckDLCOwnerShip = (UFunction*) UObject::GObjObjects()->Data[ 55941 ];

	ASanctumTowerBaseAttachment_execCheckDLCOwnerShip_Parms CheckDLCOwnerShip_Parms;
	CheckDLCOwnerShip_Parms.SPC = SPC;

	this->ProcessEvent ( pFnCheckDLCOwnerShip, &CheckDLCOwnerShip_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachment.HasDLC
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachment::HasDLC ( )
{
	static UFunction* pFnHasDLC = NULL;

	if ( ! pFnHasDLC )
		pFnHasDLC = (UFunction*) UObject::GObjObjects()->Data[ 51756 ];

	ASanctumTowerBaseAttachment_execHasDLC_Parms HasDLC_Parms;

	this->ProcessEvent ( pFnHasDLC, &HasDLC_Parms, NULL );

	return HasDLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachment.SetChristmasColor
// [0x00020100] 
// Parameters infos:
// struct FLinearColor            LC                             ( CPF_Parm )

void ASanctumTowerBaseAttachment::SetChristmasColor ( struct FLinearColor LC )
{
	static UFunction* pFnSetChristmasColor = NULL;

	if ( ! pFnSetChristmasColor )
		pFnSetChristmasColor = (UFunction*) UObject::GObjObjects()->Data[ 55939 ];

	ASanctumTowerBaseAttachment_execSetChristmasColor_Parms SetChristmasColor_Parms;
	memcpy ( &SetChristmasColor_Parms.LC, &LC, 0x10 );

	this->ProcessEvent ( pFnSetChristmasColor, &SetChristmasColor_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachment.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachment::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 55938 ];

	ASanctumTowerBaseAttachment_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachment.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumTowerBaseAttachment::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 55936 ];

	ASanctumTowerBaseAttachment_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.SetWeakbonesScale
// [0x00020102] 
// Parameters infos:
// float                          NewScale                       ( CPF_Parm )

void ASanctumEnemy::SetWeakbonesScale ( float NewScale )
{
	static UFunction* pFnSetWeakbonesScale = NULL;

	if ( ! pFnSetWeakbonesScale )
		pFnSetWeakbonesScale = (UFunction*) UObject::GObjObjects()->Data[ 47113 ];

	ASanctumEnemy_execSetWeakbonesScale_Parms SetWeakbonesScale_Parms;
	SetWeakbonesScale_Parms.NewScale = NewScale;

	this->ProcessEvent ( pFnSetWeakbonesScale, &SetWeakbonesScale_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.TakeRadiusDamage
// [0x00824102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// float                          DamageFalloffExponent          ( CPF_OptionalParm | CPF_Parm )

void ASanctumEnemy::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 47096 ];

	ASanctumEnemy_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;
	TakeRadiusDamage_Parms.DamageFalloffExponent = DamageFalloffExponent;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.WakeRagdoll
// [0x00820102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )

void ASanctumEnemy::WakeRagdoll ( class UClass* DamageType )
{
	static UFunction* pFnWakeRagdoll = NULL;

	if ( ! pFnWakeRagdoll )
		pFnWakeRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 47089 ];

	ASanctumEnemy_execWakeRagdoll_Parms WakeRagdoll_Parms;
	WakeRagdoll_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnWakeRagdoll, &WakeRagdoll_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.DisableShield
// [0x00020102] 
// Parameters infos:

void ASanctumEnemy::DisableShield ( )
{
	static UFunction* pFnDisableShield = NULL;

	if ( ! pFnDisableShield )
		pFnDisableShield = (UFunction*) UObject::GObjObjects()->Data[ 47088 ];

	ASanctumEnemy_execDisableShield_Parms DisableShield_Parms;

	this->ProcessEvent ( pFnDisableShield, &DisableShield_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.EnableShield
// [0x00020102] 
// Parameters infos:

void ASanctumEnemy::EnableShield ( )
{
	static UFunction* pFnEnableShield = NULL;

	if ( ! pFnEnableShield )
		pFnEnableShield = (UFunction*) UObject::GObjObjects()->Data[ 47087 ];

	ASanctumEnemy_execEnableShield_Parms EnableShield_Parms;

	this->ProcessEvent ( pFnEnableShield, &EnableShield_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.SpawnCoreDamageEffect
// [0x00020102] 
// Parameters infos:
// struct FVector                 centerLocation                 ( CPF_Parm )
// struct FVector                 surfaceLocation                ( CPF_Parm )

void ASanctumEnemy::SpawnCoreDamageEffect ( struct FVector centerLocation, struct FVector surfaceLocation )
{
	static UFunction* pFnSpawnCoreDamageEffect = NULL;

	if ( ! pFnSpawnCoreDamageEffect )
		pFnSpawnCoreDamageEffect = (UFunction*) UObject::GObjObjects()->Data[ 47081 ];

	ASanctumEnemy_execSpawnCoreDamageEffect_Parms SpawnCoreDamageEffect_Parms;
	memcpy ( &SpawnCoreDamageEffect_Parms.centerLocation, &centerLocation, 0xC );
	memcpy ( &SpawnCoreDamageEffect_Parms.surfaceLocation, &surfaceLocation, 0xC );

	this->ProcessEvent ( pFnSpawnCoreDamageEffect, &SpawnCoreDamageEffect_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumEnemy::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 47074 ];

	ASanctumEnemy_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.PlayTakeDamageSound
// [0x00024102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// float                          Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// int                            Flags                          ( CPF_OptionalParm | CPF_Parm )

void ASanctumEnemy::PlayTakeDamageSound ( struct FVector HitLocation, float Damage, class UClass* DamageType, class AActor* DamageCauser, int Flags )
{
	static UFunction* pFnPlayTakeDamageSound = NULL;

	if ( ! pFnPlayTakeDamageSound )
		pFnPlayTakeDamageSound = (UFunction*) UObject::GObjObjects()->Data[ 47068 ];

	ASanctumEnemy_execPlayTakeDamageSound_Parms PlayTakeDamageSound_Parms;
	memcpy ( &PlayTakeDamageSound_Parms.HitLocation, &HitLocation, 0xC );
	PlayTakeDamageSound_Parms.Damage = Damage;
	PlayTakeDamageSound_Parms.DamageType = DamageType;
	PlayTakeDamageSound_Parms.DamageCauser = DamageCauser;
	PlayTakeDamageSound_Parms.Flags = Flags;

	this->ProcessEvent ( pFnPlayTakeDamageSound, &PlayTakeDamageSound_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.PlayWeakspotGib
// [0x00020100] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void ASanctumEnemy::PlayWeakspotGib ( struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType )
{
	static UFunction* pFnPlayWeakspotGib = NULL;

	if ( ! pFnPlayWeakspotGib )
		pFnPlayWeakspotGib = (UFunction*) UObject::GObjObjects()->Data[ 47064 ];

	ASanctumEnemy_execPlayWeakspotGib_Parms PlayWeakspotGib_Parms;
	memcpy ( &PlayWeakspotGib_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &PlayWeakspotGib_Parms.Momentum, &Momentum, 0xC );
	PlayWeakspotGib_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnPlayWeakspotGib, &PlayWeakspotGib_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.PlayTakeDamageEffect
// [0x00824102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// float                          Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// int                            Flags                          ( CPF_OptionalParm | CPF_Parm )

void ASanctumEnemy::PlayTakeDamageEffect ( struct FVector HitLocation, float Damage, class UClass* DamageType, class AActor* DamageCauser, int Flags )
{
	static UFunction* pFnPlayTakeDamageEffect = NULL;

	if ( ! pFnPlayTakeDamageEffect )
		pFnPlayTakeDamageEffect = (UFunction*) UObject::GObjObjects()->Data[ 47050 ];

	ASanctumEnemy_execPlayTakeDamageEffect_Parms PlayTakeDamageEffect_Parms;
	memcpy ( &PlayTakeDamageEffect_Parms.HitLocation, &HitLocation, 0xC );
	PlayTakeDamageEffect_Parms.Damage = Damage;
	PlayTakeDamageEffect_Parms.DamageType = DamageType;
	PlayTakeDamageEffect_Parms.DamageCauser = DamageCauser;
	PlayTakeDamageEffect_Parms.Flags = Flags;

	this->ProcessEvent ( pFnPlayTakeDamageEffect, &PlayTakeDamageEffect_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.TornOff
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumEnemy::eventTornOff ( )
{
	static UFunction* pFnTornOff = NULL;

	if ( ! pFnTornOff )
		pFnTornOff = (UFunction*) UObject::GObjObjects()->Data[ 47049 ];

	ASanctumEnemy_eventTornOff_Parms TornOff_Parms;

	this->ProcessEvent ( pFnTornOff, &TornOff_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.TakeDamage
// [0x00824802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumEnemy::eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 47020 ];

	ASanctumEnemy_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.PlayerKilledEnemyStats
// [0x00020000] 
// Parameters infos:
// class ASanctumPlayerReplicationInfo* PRI                            ( CPF_Parm )

void ASanctumEnemy::PlayerKilledEnemyStats ( class ASanctumPlayerReplicationInfo* PRI )
{
	static UFunction* pFnPlayerKilledEnemyStats = NULL;

	if ( ! pFnPlayerKilledEnemyStats )
		pFnPlayerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47018 ];

	ASanctumEnemy_execPlayerKilledEnemyStats_Parms PlayerKilledEnemyStats_Parms;
	PlayerKilledEnemyStats_Parms.PRI = PRI;

	this->ProcessEvent ( pFnPlayerKilledEnemyStats, &PlayerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.TowerKilledEnemyStats
// [0x00020000] 
// Parameters infos:

void ASanctumEnemy::TowerKilledEnemyStats ( )
{
	static UFunction* pFnTowerKilledEnemyStats = NULL;

	if ( ! pFnTowerKilledEnemyStats )
		pFnTowerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47017 ];

	ASanctumEnemy_execTowerKilledEnemyStats_Parms TowerKilledEnemyStats_Parms;

	this->ProcessEvent ( pFnTowerKilledEnemyStats, &TowerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.CollectStats
// [0x00020002] 
// Parameters infos:
// class UClass*                  damageTypeClass                ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// unsigned long                  weakSpot                       ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void ASanctumEnemy::CollectStats ( class UClass* damageTypeClass, class AController* InstigatedBy, int Damage, unsigned long weakSpot, class AActor* DamageCauser )
{
	static UFunction* pFnCollectStats = NULL;

	if ( ! pFnCollectStats )
		pFnCollectStats = (UFunction*) UObject::GObjObjects()->Data[ 46999 ];

	ASanctumEnemy_execCollectStats_Parms CollectStats_Parms;
	CollectStats_Parms.damageTypeClass = damageTypeClass;
	CollectStats_Parms.InstigatedBy = InstigatedBy;
	CollectStats_Parms.Damage = Damage;
	CollectStats_Parms.weakSpot = weakSpot;
	CollectStats_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnCollectStats, &CollectStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.GotHitByController
// [0x00020000] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )

void ASanctumEnemy::GotHitByController ( class AController* InstigatedBy )
{
	static UFunction* pFnGotHitByController = NULL;

	if ( ! pFnGotHitByController )
		pFnGotHitByController = (UFunction*) UObject::GObjObjects()->Data[ 46997 ];

	ASanctumEnemy_execGotHitByController_Parms GotHitByController_Parms;
	GotHitByController_Parms.InstigatedBy = InstigatedBy;

	this->ProcessEvent ( pFnGotHitByController, &GotHitByController_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.WeakSpotHit
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  damageTypeClass                ( CPF_Parm )

bool ASanctumEnemy::WeakSpotHit ( struct FVector HitLocation, struct FVector Momentum, class UClass* damageTypeClass )
{
	static UFunction* pFnWeakSpotHit = NULL;

	if ( ! pFnWeakSpotHit )
		pFnWeakSpotHit = (UFunction*) UObject::GObjObjects()->Data[ 46990 ];

	ASanctumEnemy_execWeakSpotHit_Parms WeakSpotHit_Parms;
	memcpy ( &WeakSpotHit_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &WeakSpotHit_Parms.Momentum, &Momentum, 0xC );
	WeakSpotHit_Parms.damageTypeClass = damageTypeClass;

	this->ProcessEvent ( pFnWeakSpotHit, &WeakSpotHit_Parms, NULL );

	return WeakSpotHit_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemy.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASanctumEnemy::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 46987 ];

	ASanctumEnemy_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.isMarked
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumEnemy::isMarked ( )
{
	static UFunction* pFnisMarked = NULL;

	if ( ! pFnisMarked )
		pFnisMarked = (UFunction*) UObject::GObjObjects()->Data[ 46985 ];

	ASanctumEnemy_execisMarked_Parms isMarked_Parms;

	this->ProcessEvent ( pFnisMarked, &isMarked_Parms, NULL );

	return isMarked_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemy.ShouldGib
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  damageTypeClass                ( CPF_Parm )

bool ASanctumEnemy::ShouldGib ( class UClass* damageTypeClass )
{
	static UFunction* pFnShouldGib = NULL;

	if ( ! pFnShouldGib )
		pFnShouldGib = (UFunction*) UObject::GObjObjects()->Data[ 46981 ];

	ASanctumEnemy_execShouldGib_Parms ShouldGib_Parms;
	ShouldGib_Parms.damageTypeClass = damageTypeClass;

	this->ProcessEvent ( pFnShouldGib, &ShouldGib_Parms, NULL );

	return ShouldGib_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemy.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  damageTypeClass                ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ASanctumEnemy::PlayDying ( class UClass* damageTypeClass, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 46970 ];

	ASanctumEnemy_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.damageTypeClass = damageTypeClass;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.IsFlying
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumEnemy::IsFlying ( )
{
	static UFunction* pFnIsFlying = NULL;

	if ( ! pFnIsFlying )
		pFnIsFlying = (UFunction*) UObject::GObjObjects()->Data[ 46968 ];

	ASanctumEnemy_execIsFlying_Parms IsFlying_Parms;

	this->ProcessEvent ( pFnIsFlying, &IsFlying_Parms, NULL );

	return IsFlying_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemy.ReachedCore
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASanctumEnemy::ReachedCore ( struct FVector HitLocation )
{
	static UFunction* pFnReachedCore = NULL;

	if ( ! pFnReachedCore )
		pFnReachedCore = (UFunction*) UObject::GObjObjects()->Data[ 46965 ];

	ASanctumEnemy_execReachedCore_Parms ReachedCore_Parms;
	memcpy ( &ReachedCore_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnReachedCore, &ReachedCore_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.KilledTimer
// [0x00020102] 
// Parameters infos:

void ASanctumEnemy::KilledTimer ( )
{
	static UFunction* pFnKilledTimer = NULL;

	if ( ! pFnKilledTimer )
		pFnKilledTimer = (UFunction*) UObject::GObjObjects()->Data[ 46964 ];

	ASanctumEnemy_execKilledTimer_Parms KilledTimer_Parms;

	this->ProcessEvent ( pFnKilledTimer, &KilledTimer_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.SetPawnRBChannels
// [0x00020102] 
// Parameters infos:
// unsigned long                  bRagdollMode                   ( CPF_Parm )

void ASanctumEnemy::SetPawnRBChannels ( unsigned long bRagdollMode )
{
	static UFunction* pFnSetPawnRBChannels = NULL;

	if ( ! pFnSetPawnRBChannels )
		pFnSetPawnRBChannels = (UFunction*) UObject::GObjObjects()->Data[ 46962 ];

	ASanctumEnemy_execSetPawnRBChannels_Parms SetPawnRBChannels_Parms;
	SetPawnRBChannels_Parms.bRagdollMode = bRagdollMode;

	this->ProcessEvent ( pFnSetPawnRBChannels, &SetPawnRBChannels_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.CalculateHitFlags
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  damageTypeClass                ( CPF_Parm )

int ASanctumEnemy::CalculateHitFlags ( struct FVector HitLocation, struct FVector Momentum, class UClass* damageTypeClass )
{
	static UFunction* pFnCalculateHitFlags = NULL;

	if ( ! pFnCalculateHitFlags )
		pFnCalculateHitFlags = (UFunction*) UObject::GObjObjects()->Data[ 46956 ];

	ASanctumEnemy_execCalculateHitFlags_Parms CalculateHitFlags_Parms;
	memcpy ( &CalculateHitFlags_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &CalculateHitFlags_Parms.Momentum, &Momentum, 0xC );
	CalculateHitFlags_Parms.damageTypeClass = damageTypeClass;

	this->ProcessEvent ( pFnCalculateHitFlags, &CalculateHitFlags_Parms, NULL );

	return CalculateHitFlags_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemy.PlayHit
// [0x00820002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  damageTypeClass                ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

void ASanctumEnemy::PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* damageTypeClass, struct FVector Momentum, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnPlayHit = NULL;

	if ( ! pFnPlayHit )
		pFnPlayHit = (UFunction*) UObject::GObjObjects()->Data[ 46948 ];

	ASanctumEnemy_execPlayHit_Parms PlayHit_Parms;
	PlayHit_Parms.Damage = Damage;
	PlayHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &PlayHit_Parms.HitLocation, &HitLocation, 0xC );
	PlayHit_Parms.damageTypeClass = damageTypeClass;
	memcpy ( &PlayHit_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &PlayHit_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnPlayHit, &PlayHit_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.IsImmune
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )
// int                            Damage                         ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  DamageType                     ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

bool ASanctumEnemy::IsImmune ( struct FVector HitLocation, struct FVector Momentum, struct FTraceHitInfo HitInfo, int Damage, class UClass* DamageType, class AActor* DamageCauser )
{
	static UFunction* pFnIsImmune = NULL;

	if ( ! pFnIsImmune )
		pFnIsImmune = (UFunction*) UObject::GObjObjects()->Data[ 46940 ];

	ASanctumEnemy_execIsImmune_Parms IsImmune_Parms;
	memcpy ( &IsImmune_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &IsImmune_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &IsImmune_Parms.HitInfo, &HitInfo, 0x1C );
	IsImmune_Parms.Damage = Damage;
	IsImmune_Parms.DamageType = DamageType;
	IsImmune_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnIsImmune, &IsImmune_Parms, NULL );

	return IsImmune_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemy.GetAimLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASanctumEnemy::GetAimLocation ( )
{
	static UFunction* pFnGetAimLocation = NULL;

	if ( ! pFnGetAimLocation )
		pFnGetAimLocation = (UFunction*) UObject::GObjObjects()->Data[ 46938 ];

	ASanctumEnemy_execGetAimLocation_Parms GetAimLocation_Parms;

	this->ProcessEvent ( pFnGetAimLocation, &GetAimLocation_Parms, NULL );

	return GetAimLocation_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemy.GetHealthBoneWorldLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASanctumEnemy::GetHealthBoneWorldLocation ( )
{
	static UFunction* pFnGetHealthBoneWorldLocation = NULL;

	if ( ! pFnGetHealthBoneWorldLocation )
		pFnGetHealthBoneWorldLocation = (UFunction*) UObject::GObjObjects()->Data[ 45693 ];

	ASanctumEnemy_execGetHealthBoneWorldLocation_Parms GetHealthBoneWorldLocation_Parms;

	this->ProcessEvent ( pFnGetHealthBoneWorldLocation, &GetHealthBoneWorldLocation_Parms, NULL );

	return GetHealthBoneWorldLocation_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemy.SetupHealthbar
// [0x00020102] 
// Parameters infos:

void ASanctumEnemy::SetupHealthbar ( )
{
	static UFunction* pFnSetupHealthbar = NULL;

	if ( ! pFnSetupHealthbar )
		pFnSetupHealthbar = (UFunction*) UObject::GObjObjects()->Data[ 46937 ];

	ASanctumEnemy_execSetupHealthbar_Parms SetupHealthbar_Parms;

	this->ProcessEvent ( pFnSetupHealthbar, &SetupHealthbar_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.GetEndlessScalingHealth
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Difficulty                     ( CPF_Parm )
// float                          scaledWaveDifficulty           ( CPF_Parm )
// unsigned long                  singlePlayerGame               ( CPF_Parm )

int ASanctumEnemy::GetEndlessScalingHealth ( int Difficulty, float scaledWaveDifficulty, unsigned long singlePlayerGame )
{
	static UFunction* pFnGetEndlessScalingHealth = NULL;

	if ( ! pFnGetEndlessScalingHealth )
		pFnGetEndlessScalingHealth = (UFunction*) UObject::GObjObjects()->Data[ 46930 ];

	ASanctumEnemy_execGetEndlessScalingHealth_Parms GetEndlessScalingHealth_Parms;
	GetEndlessScalingHealth_Parms.Difficulty = Difficulty;
	GetEndlessScalingHealth_Parms.scaledWaveDifficulty = scaledWaveDifficulty;
	GetEndlessScalingHealth_Parms.singlePlayerGame = singlePlayerGame;

	this->ProcessEvent ( pFnGetEndlessScalingHealth, &GetEndlessScalingHealth_Parms, NULL );

	return GetEndlessScalingHealth_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemy.SetEndlessData
// [0x00020002] 
// Parameters infos:
// int                            totalWaves                     ( CPF_Parm )
// int                            waveNr                         ( CPF_Parm )
// unsigned long                  isSpGame                       ( CPF_Parm )
// float                          scaledDifficulty               ( CPF_Parm )
// float                          Difficulty                     ( CPF_Parm )

void ASanctumEnemy::SetEndlessData ( int totalWaves, int waveNr, unsigned long isSpGame, float scaledDifficulty, float Difficulty )
{
	static UFunction* pFnSetEndlessData = NULL;

	if ( ! pFnSetEndlessData )
		pFnSetEndlessData = (UFunction*) UObject::GObjObjects()->Data[ 46924 ];

	ASanctumEnemy_execSetEndlessData_Parms SetEndlessData_Parms;
	SetEndlessData_Parms.totalWaves = totalWaves;
	SetEndlessData_Parms.waveNr = waveNr;
	SetEndlessData_Parms.isSpGame = isSpGame;
	SetEndlessData_Parms.scaledDifficulty = scaledDifficulty;
	SetEndlessData_Parms.Difficulty = Difficulty;

	this->ProcessEvent ( pFnSetEndlessData, &SetEndlessData_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.AlwaysRelevantFalse
// [0x00020002] 
// Parameters infos:

void ASanctumEnemy::AlwaysRelevantFalse ( )
{
	static UFunction* pFnAlwaysRelevantFalse = NULL;

	if ( ! pFnAlwaysRelevantFalse )
		pFnAlwaysRelevantFalse = (UFunction*) UObject::GObjObjects()->Data[ 46923 ];

	ASanctumEnemy_execAlwaysRelevantFalse_Parms AlwaysRelevantFalse_Parms;

	this->ProcessEvent ( pFnAlwaysRelevantFalse, &AlwaysRelevantFalse_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.GetSpeedForStuckCheck
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASanctumEnemy::GetSpeedForStuckCheck ( )
{
	static UFunction* pFnGetSpeedForStuckCheck = NULL;

	if ( ! pFnGetSpeedForStuckCheck )
		pFnGetSpeedForStuckCheck = (UFunction*) UObject::GObjObjects()->Data[ 45025 ];

	ASanctumEnemy_execGetSpeedForStuckCheck_Parms GetSpeedForStuckCheck_Parms;

	this->ProcessEvent ( pFnGetSpeedForStuckCheck, &GetSpeedForStuckCheck_Parms, NULL );

	return GetSpeedForStuckCheck_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemy.StuckKillSelf
// [0x00020002] 
// Parameters infos:

void ASanctumEnemy::StuckKillSelf ( )
{
	static UFunction* pFnStuckKillSelf = NULL;

	if ( ! pFnStuckKillSelf )
		pFnStuckKillSelf = (UFunction*) UObject::GObjObjects()->Data[ 46922 ];

	ASanctumEnemy_execStuckKillSelf_Parms StuckKillSelf_Parms;

	this->ProcessEvent ( pFnStuckKillSelf, &StuckKillSelf_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.CheatKillSelf
// [0x00020002] 
// Parameters infos:

void ASanctumEnemy::CheatKillSelf ( )
{
	static UFunction* pFnCheatKillSelf = NULL;

	if ( ! pFnCheatKillSelf )
		pFnCheatKillSelf = (UFunction*) UObject::GObjObjects()->Data[ 46921 ];

	ASanctumEnemy_execCheatKillSelf_Parms CheatKillSelf_Parms;

	this->ProcessEvent ( pFnCheatKillSelf, &CheatKillSelf_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.DropGift
// [0x00820002] 
// Parameters infos:
// class ASanctumChristmasPresent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASanctumChristmasPresent* ASanctumEnemy::DropGift ( )
{
	static UFunction* pFnDropGift = NULL;

	if ( ! pFnDropGift )
		pFnDropGift = (UFunction*) UObject::GObjObjects()->Data[ 46916 ];

	ASanctumEnemy_execDropGift_Parms DropGift_Parms;

	this->ProcessEvent ( pFnDropGift, &DropGift_Parms, NULL );

	return DropGift_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemy.ShouldDropChristmasPresent
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumEnemy::ShouldDropChristmasPresent ( )
{
	static UFunction* pFnShouldDropChristmasPresent = NULL;

	if ( ! pFnShouldDropChristmasPresent )
		pFnShouldDropChristmasPresent = (UFunction*) UObject::GObjObjects()->Data[ 46914 ];

	ASanctumEnemy_execShouldDropChristmasPresent_Parms ShouldDropChristmasPresent_Parms;

	this->ProcessEvent ( pFnShouldDropChristmasPresent, &ShouldDropChristmasPresent_Parms, NULL );

	return ShouldDropChristmasPresent_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemy.AttachChristmas
// [0x00020100] 
// Parameters infos:

void ASanctumEnemy::AttachChristmas ( )
{
	static UFunction* pFnAttachChristmas = NULL;

	if ( ! pFnAttachChristmas )
		pFnAttachChristmas = (UFunction*) UObject::GObjObjects()->Data[ 46913 ];

	ASanctumEnemy_execAttachChristmas_Parms AttachChristmas_Parms;

	this->ProcessEvent ( pFnAttachChristmas, &AttachChristmas_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.ShouldBeChristmasEnemy
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumEnemy::ShouldBeChristmasEnemy ( )
{
	static UFunction* pFnShouldBeChristmasEnemy = NULL;

	if ( ! pFnShouldBeChristmasEnemy )
		pFnShouldBeChristmasEnemy = (UFunction*) UObject::GObjObjects()->Data[ 46911 ];

	ASanctumEnemy_execShouldBeChristmasEnemy_Parms ShouldBeChristmasEnemy_Parms;

	this->ProcessEvent ( pFnShouldBeChristmasEnemy, &ShouldBeChristmasEnemy_Parms, NULL );

	return ShouldBeChristmasEnemy_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemy.IsChristmasEvent
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumEnemy::IsChristmasEvent ( )
{
	static UFunction* pFnIsChristmasEvent = NULL;

	if ( ! pFnIsChristmasEvent )
		pFnIsChristmasEvent = (UFunction*) UObject::GObjObjects()->Data[ 46907 ];

	ASanctumEnemy_execIsChristmasEvent_Parms IsChristmasEvent_Parms;

	this->ProcessEvent ( pFnIsChristmasEvent, &IsChristmasEvent_Parms, NULL );

	return IsChristmasEvent_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemy.Destroyed
// [0x00020102] 
// Parameters infos:

void ASanctumEnemy::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 46903 ];

	ASanctumEnemy_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.PostBeginPlay
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void ASanctumEnemy::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 46900 ];

	ASanctumEnemy_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumEnemy.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumEnemy::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 46898 ];

	ASanctumEnemy_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentBlock.GetStats
// [0x00422102] 
// Parameters infos:
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         statInfo                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumTowerBaseAttachmentBlock::GetStats ( int lvl, struct FStatInfoStruct* statInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 56426 ];

	ASanctumTowerBaseAttachmentBlock_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( statInfo )
		memcpy ( statInfo, &GetStats_Parms.statInfo, 0xAC );
};

// Function Sanctum.SanctumTowerBaseAttachmentBlock.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASanctumTowerBaseAttachmentBlock::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 56424 ];

	ASanctumTowerBaseAttachmentBlock_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentBlock.GetSellPrice
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumTowerBaseAttachmentBlock::GetSellPrice ( )
{
	static UFunction* pFnGetSellPrice = NULL;

	if ( ! pFnGetSellPrice )
		pFnGetSellPrice = (UFunction*) UObject::GObjObjects()->Data[ 56422 ];

	ASanctumTowerBaseAttachmentBlock_execGetSellPrice_Parms GetSellPrice_Parms;

	this->ProcessEvent ( pFnGetSellPrice, &GetSellPrice_Parms, NULL );

	return GetSellPrice_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentBlock.PlayBuildSound
// [0x00020002] 
// Parameters infos:

void ASanctumTowerBaseAttachmentBlock::PlayBuildSound ( )
{
	static UFunction* pFnPlayBuildSound = NULL;

	if ( ! pFnPlayBuildSound )
		pFnPlayBuildSound = (UFunction*) UObject::GObjObjects()->Data[ 56421 ];

	ASanctumTowerBaseAttachmentBlock_execPlayBuildSound_Parms PlayBuildSound_Parms;

	this->ProcessEvent ( pFnPlayBuildSound, &PlayBuildSound_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentBlock.SetChristmasColor
// [0x00020102] 
// Parameters infos:
// struct FLinearColor            LC                             ( CPF_Parm )

void ASanctumTowerBaseAttachmentBlock::SetChristmasColor ( struct FLinearColor LC )
{
	static UFunction* pFnSetChristmasColor = NULL;

	if ( ! pFnSetChristmasColor )
		pFnSetChristmasColor = (UFunction*) UObject::GObjObjects()->Data[ 56419 ];

	ASanctumTowerBaseAttachmentBlock_execSetChristmasColor_Parms SetChristmasColor_Parms;
	memcpy ( &SetChristmasColor_Parms.LC, &LC, 0x10 );

	this->ProcessEvent ( pFnSetChristmasColor, &SetChristmasColor_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentBlock.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentBlock::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 56418 ];

	ASanctumTowerBaseAttachmentBlock_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.OnElevator
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool ASanctumTowerBaseAttachmentElevator::OnElevator ( class AActor* A )
{
	static UFunction* pFnOnElevator = NULL;

	if ( ! pFnOnElevator )
		pFnOnElevator = (UFunction*) UObject::GObjObjects()->Data[ 56524 ];

	ASanctumTowerBaseAttachmentElevator_execOnElevator_Parms OnElevator_Parms;
	OnElevator_Parms.A = A;

	this->ProcessEvent ( pFnOnElevator, &OnElevator_Parms, NULL );

	return OnElevator_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.MoveBox
// [0x00820102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// unsigned long                  upWards                        ( CPF_Parm )

void ASanctumTowerBaseAttachmentElevator::MoveBox ( float DeltaTime, unsigned long upWards )
{
	static UFunction* pFnMoveBox = NULL;

	if ( ! pFnMoveBox )
		pFnMoveBox = (UFunction*) UObject::GObjObjects()->Data[ 56515 ];

	ASanctumTowerBaseAttachmentElevator_execMoveBox_Parms MoveBox_Parms;
	MoveBox_Parms.DeltaTime = DeltaTime;
	MoveBox_Parms.upWards = upWards;

	this->ProcessEvent ( pFnMoveBox, &MoveBox_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumTowerBaseAttachmentElevator::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 56513 ];

	ASanctumTowerBaseAttachmentElevator_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.getLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASanctumTowerBaseAttachmentElevator::getLocation ( )
{
	static UFunction* pFngetLocation = NULL;

	if ( ! pFngetLocation )
		pFngetLocation = (UFunction*) UObject::GObjObjects()->Data[ 56511 ];

	ASanctumTowerBaseAttachmentElevator_execgetLocation_Parms getLocation_Parms;

	this->ProcessEvent ( pFngetLocation, &getLocation_Parms, NULL );

	return getLocation_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.StopHighlight
// [0x00820102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentElevator::StopHighlight ( )
{
	static UFunction* pFnStopHighlight = NULL;

	if ( ! pFnStopHighlight )
		pFnStopHighlight = (UFunction*) UObject::GObjObjects()->Data[ 56509 ];

	ASanctumTowerBaseAttachmentElevator_execStopHighlight_Parms StopHighlight_Parms;

	this->ProcessEvent ( pFnStopHighlight, &StopHighlight_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.StartHighlight
// [0x00820102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentElevator::StartHighlight ( )
{
	static UFunction* pFnStartHighlight = NULL;

	if ( ! pFnStartHighlight )
		pFnStartHighlight = (UFunction*) UObject::GObjObjects()->Data[ 56507 ];

	ASanctumTowerBaseAttachmentElevator_execStartHighlight_Parms StartHighlight_Parms;

	this->ProcessEvent ( pFnStartHighlight, &StartHighlight_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.StopOverview
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentElevator::StopOverview ( )
{
	static UFunction* pFnStopOverview = NULL;

	if ( ! pFnStopOverview )
		pFnStopOverview = (UFunction*) UObject::GObjObjects()->Data[ 56506 ];

	ASanctumTowerBaseAttachmentElevator_execStopOverview_Parms StopOverview_Parms;

	this->ProcessEvent ( pFnStopOverview, &StopOverview_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.StartOverview
// [0x00820102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentElevator::StartOverview ( )
{
	static UFunction* pFnStartOverview = NULL;

	if ( ! pFnStartOverview )
		pFnStartOverview = (UFunction*) UObject::GObjObjects()->Data[ 56504 ];

	ASanctumTowerBaseAttachmentElevator_execStartOverview_Parms StartOverview_Parms;

	this->ProcessEvent ( pFnStartOverview, &StartOverview_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.FindPlayers
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentElevator::FindPlayers ( )
{
	static UFunction* pFnFindPlayers = NULL;

	if ( ! pFnFindPlayers )
		pFnFindPlayers = (UFunction*) UObject::GObjObjects()->Data[ 56502 ];

	ASanctumTowerBaseAttachmentElevator_execFindPlayers_Parms FindPlayers_Parms;

	this->ProcessEvent ( pFnFindPlayers, &FindPlayers_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.PlayerSteppedOffElevator
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ASanctumPlayer*          P                              ( CPF_Parm )

void ASanctumTowerBaseAttachmentElevator::eventPlayerSteppedOffElevator ( class ASanctumPlayer* P )
{
	static UFunction* pFnPlayerSteppedOffElevator = NULL;

	if ( ! pFnPlayerSteppedOffElevator )
		pFnPlayerSteppedOffElevator = (UFunction*) UObject::GObjObjects()->Data[ 56500 ];

	ASanctumTowerBaseAttachmentElevator_eventPlayerSteppedOffElevator_Parms PlayerSteppedOffElevator_Parms;
	PlayerSteppedOffElevator_Parms.P = P;

	this->ProcessEvent ( pFnPlayerSteppedOffElevator, &PlayerSteppedOffElevator_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.moveElevatorDown
// [0x00020002] 
// Parameters infos:

void ASanctumTowerBaseAttachmentElevator::moveElevatorDown ( )
{
	static UFunction* pFnmoveElevatorDown = NULL;

	if ( ! pFnmoveElevatorDown )
		pFnmoveElevatorDown = (UFunction*) UObject::GObjObjects()->Data[ 56498 ];

	ASanctumTowerBaseAttachmentElevator_execmoveElevatorDown_Parms moveElevatorDown_Parms;

	this->ProcessEvent ( pFnmoveElevatorDown, &moveElevatorDown_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.moveElevatorUp
// [0x00020002] 
// Parameters infos:

void ASanctumTowerBaseAttachmentElevator::moveElevatorUp ( )
{
	static UFunction* pFnmoveElevatorUp = NULL;

	if ( ! pFnmoveElevatorUp )
		pFnmoveElevatorUp = (UFunction*) UObject::GObjObjects()->Data[ 56494 ];

	ASanctumTowerBaseAttachmentElevator_execmoveElevatorUp_Parms moveElevatorUp_Parms;

	this->ProcessEvent ( pFnmoveElevatorUp, &moveElevatorUp_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.PlayerSteppedOnElevator
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ASanctumPlayer*          P                              ( CPF_Parm )

void ASanctumTowerBaseAttachmentElevator::eventPlayerSteppedOnElevator ( class ASanctumPlayer* P )
{
	static UFunction* pFnPlayerSteppedOnElevator = NULL;

	if ( ! pFnPlayerSteppedOnElevator )
		pFnPlayerSteppedOnElevator = (UFunction*) UObject::GObjObjects()->Data[ 56492 ];

	ASanctumTowerBaseAttachmentElevator_eventPlayerSteppedOnElevator_Parms PlayerSteppedOnElevator_Parms;
	PlayerSteppedOnElevator_Parms.P = P;

	this->ProcessEvent ( pFnPlayerSteppedOnElevator, &PlayerSteppedOnElevator_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.NearbyPlayers
// [0x00020002] 
// Parameters infos:

void ASanctumTowerBaseAttachmentElevator::NearbyPlayers ( )
{
	static UFunction* pFnNearbyPlayers = NULL;

	if ( ! pFnNearbyPlayers )
		pFnNearbyPlayers = (UFunction*) UObject::GObjObjects()->Data[ 56489 ];

	ASanctumTowerBaseAttachmentElevator_execNearbyPlayers_Parms NearbyPlayers_Parms;

	this->ProcessEvent ( pFnNearbyPlayers, &NearbyPlayers_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.ensurePlayersOnElevator
// [0x00820102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentElevator::ensurePlayersOnElevator ( )
{
	static UFunction* pFnensurePlayersOnElevator = NULL;

	if ( ! pFnensurePlayersOnElevator )
		pFnensurePlayersOnElevator = (UFunction*) UObject::GObjObjects()->Data[ 56486 ];

	ASanctumTowerBaseAttachmentElevator_execensurePlayersOnElevator_Parms ensurePlayersOnElevator_Parms;

	this->ProcessEvent ( pFnensurePlayersOnElevator, &ensurePlayersOnElevator_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.PlayerGotDistanceToElevator
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ASanctumPlayer*          P                              ( CPF_Parm )

void ASanctumTowerBaseAttachmentElevator::eventPlayerGotDistanceToElevator ( class ASanctumPlayer* P )
{
	static UFunction* pFnPlayerGotDistanceToElevator = NULL;

	if ( ! pFnPlayerGotDistanceToElevator )
		pFnPlayerGotDistanceToElevator = (UFunction*) UObject::GObjObjects()->Data[ 56484 ];

	ASanctumTowerBaseAttachmentElevator_eventPlayerGotDistanceToElevator_Parms PlayerGotDistanceToElevator_Parms;
	PlayerGotDistanceToElevator_Parms.P = P;

	this->ProcessEvent ( pFnPlayerGotDistanceToElevator, &PlayerGotDistanceToElevator_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.PlayerCameCloseToElevator
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ASanctumPlayer*          P                              ( CPF_Parm )

void ASanctumTowerBaseAttachmentElevator::eventPlayerCameCloseToElevator ( class ASanctumPlayer* P )
{
	static UFunction* pFnPlayerCameCloseToElevator = NULL;

	if ( ! pFnPlayerCameCloseToElevator )
		pFnPlayerCameCloseToElevator = (UFunction*) UObject::GObjObjects()->Data[ 56482 ];

	ASanctumTowerBaseAttachmentElevator_eventPlayerCameCloseToElevator_Parms PlayerCameCloseToElevator_Parms;
	PlayerCameCloseToElevator_Parms.P = P;

	this->ProcessEvent ( pFnPlayerCameCloseToElevator, &PlayerCameCloseToElevator_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.DetectPlayers
// [0x00020002] 
// Parameters infos:

void ASanctumTowerBaseAttachmentElevator::DetectPlayers ( )
{
	static UFunction* pFnDetectPlayers = NULL;

	if ( ! pFnDetectPlayers )
		pFnDetectPlayers = (UFunction*) UObject::GObjObjects()->Data[ 56480 ];

	ASanctumTowerBaseAttachmentElevator_execDetectPlayers_Parms DetectPlayers_Parms;

	this->ProcessEvent ( pFnDetectPlayers, &DetectPlayers_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.AboveTower
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool ASanctumTowerBaseAttachmentElevator::AboveTower ( class AActor* A )
{
	static UFunction* pFnAboveTower = NULL;

	if ( ! pFnAboveTower )
		pFnAboveTower = (UFunction*) UObject::GObjObjects()->Data[ 56475 ];

	ASanctumTowerBaseAttachmentElevator_execAboveTower_Parms AboveTower_Parms;
	AboveTower_Parms.A = A;

	this->ProcessEvent ( pFnAboveTower, &AboveTower_Parms, NULL );

	return AboveTower_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.OnTowers
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool ASanctumTowerBaseAttachmentElevator::OnTowers ( class AActor* A )
{
	static UFunction* pFnOnTowers = NULL;

	if ( ! pFnOnTowers )
		pFnOnTowers = (UFunction*) UObject::GObjObjects()->Data[ 56470 ];

	ASanctumTowerBaseAttachmentElevator_execOnTowers_Parms OnTowers_Parms;
	OnTowers_Parms.A = A;

	this->ProcessEvent ( pFnOnTowers, &OnTowers_Parms, NULL );

	return OnTowers_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.setTowerBase
// [0x00820102] 
// Parameters infos:
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )

void ASanctumTowerBaseAttachmentElevator::setTowerBase ( class ASanctumTowerBase* TowerBase )
{
	static UFunction* pFnsetTowerBase = NULL;

	if ( ! pFnsetTowerBase )
		pFnsetTowerBase = (UFunction*) UObject::GObjObjects()->Data[ 56467 ];

	ASanctumTowerBaseAttachmentElevator_execsetTowerBase_Parms setTowerBase_Parms;
	setTowerBase_Parms.TowerBase = TowerBase;

	this->ProcessEvent ( pFnsetTowerBase, &setTowerBase_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentElevator::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 56464 ];

	ASanctumTowerBaseAttachmentElevator_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.PostBeginPlay
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentElevator::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 56461 ];

	ASanctumTowerBaseAttachmentElevator_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentElevator.GetStats
// [0x00422102] 
// Parameters infos:
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         statInfo                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumTowerBaseAttachmentElevator::GetStats ( int lvl, struct FStatInfoStruct* statInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 56458 ];

	ASanctumTowerBaseAttachmentElevator_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( statInfo )
		memcpy ( statInfo, &GetStats_Parms.statInfo, 0xAC );
};

// Function Sanctum.SanctumPlayer.SetPhaseAnimation
// [0x00020102] 
// Parameters infos:

void ASanctumPlayer::SetPhaseAnimation ( )
{
	static UFunction* pFnSetPhaseAnimation = NULL;

	if ( ! pFnSetPhaseAnimation )
		pFnSetPhaseAnimation = (UFunction*) UObject::GObjObjects()->Data[ 53740 ];

	ASanctumPlayer_execSetPhaseAnimation_Parms SetPhaseAnimation_Parms;

	this->ProcessEvent ( pFnSetPhaseAnimation, &SetPhaseAnimation_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASanctumPlayer::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 53734 ];

	ASanctumPlayer_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumPlayer::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 53728 ];

	ASanctumPlayer_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.KnockBack
// [0x00820002] 
// Parameters infos:
// struct FVector                 SourceLocation                 ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 vel                            ( CPF_Parm )
// float                          knockBackScale                 ( CPF_Parm )

void ASanctumPlayer::KnockBack ( struct FVector SourceLocation, struct FVector HitLocation, struct FVector vel, float knockBackScale )
{
	static UFunction* pFnKnockBack = NULL;

	if ( ! pFnKnockBack )
		pFnKnockBack = (UFunction*) UObject::GObjObjects()->Data[ 53721 ];

	ASanctumPlayer_execKnockBack_Parms KnockBack_Parms;
	memcpy ( &KnockBack_Parms.SourceLocation, &SourceLocation, 0xC );
	memcpy ( &KnockBack_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &KnockBack_Parms.vel, &vel, 0xC );
	KnockBack_Parms.knockBackScale = knockBackScale;

	this->ProcessEvent ( pFnKnockBack, &KnockBack_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.KnockbackHasEnded
// [0x00020002] 
// Parameters infos:

void ASanctumPlayer::KnockbackHasEnded ( )
{
	static UFunction* pFnKnockbackHasEnded = NULL;

	if ( ! pFnKnockbackHasEnded )
		pFnKnockbackHasEnded = (UFunction*) UObject::GObjObjects()->Data[ 53720 ];

	ASanctumPlayer_execKnockbackHasEnded_Parms KnockbackHasEnded_Parms;

	this->ProcessEvent ( pFnKnockbackHasEnded, &KnockbackHasEnded_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.KnockbackCooldown
// [0x00020002] 
// Parameters infos:

void ASanctumPlayer::KnockbackCooldown ( )
{
	static UFunction* pFnKnockbackCooldown = NULL;

	if ( ! pFnKnockbackCooldown )
		pFnKnockbackCooldown = (UFunction*) UObject::GObjObjects()->Data[ 53719 ];

	ASanctumPlayer_execKnockbackCooldown_Parms KnockbackCooldown_Parms;

	this->ProcessEvent ( pFnKnockbackCooldown, &KnockbackCooldown_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.BuildPhaseChanged
// [0x00020102] 
// Parameters infos:
// unsigned long                  NewValue                       ( CPF_Parm )

void ASanctumPlayer::BuildPhaseChanged ( unsigned long NewValue )
{
	static UFunction* pFnBuildPhaseChanged = NULL;

	if ( ! pFnBuildPhaseChanged )
		pFnBuildPhaseChanged = (UFunction*) UObject::GObjObjects()->Data[ 53717 ];

	ASanctumPlayer_execBuildPhaseChanged_Parms BuildPhaseChanged_Parms;
	BuildPhaseChanged_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnBuildPhaseChanged, &BuildPhaseChanged_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.PlayLandingSound
// [0x00020002] 
// Parameters infos:

void ASanctumPlayer::PlayLandingSound ( )
{
	static UFunction* pFnPlayLandingSound = NULL;

	if ( ! pFnPlayLandingSound )
		pFnPlayLandingSound = (UFunction*) UObject::GObjObjects()->Data[ 53715 ];

	ASanctumPlayer_execPlayLandingSound_Parms PlayLandingSound_Parms;

	this->ProcessEvent ( pFnPlayLandingSound, &PlayLandingSound_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.Landed
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ASanctumPlayer::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 53711 ];

	ASanctumPlayer_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.WeaponBob
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          BobDamping                     ( CPF_Parm )
// float                          JumpDamping                    ( CPF_Parm )

struct FVector ASanctumPlayer::WeaponBob ( float BobDamping, float JumpDamping )
{
	static UFunction* pFnWeaponBob = NULL;

	if ( ! pFnWeaponBob )
		pFnWeaponBob = (UFunction*) UObject::GObjObjects()->Data[ 48980 ];

	ASanctumPlayer_execWeaponBob_Parms WeaponBob_Parms;
	WeaponBob_Parms.BobDamping = BobDamping;
	WeaponBob_Parms.JumpDamping = JumpDamping;

	this->ProcessEvent ( pFnWeaponBob, &WeaponBob_Parms, NULL );

	return WeaponBob_Parms.ReturnValue;
};

// Function Sanctum.SanctumPlayer.UpdateEyeHeight
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASanctumPlayer::eventUpdateEyeHeight ( float DeltaTime )
{
	static UFunction* pFnUpdateEyeHeight = NULL;

	if ( ! pFnUpdateEyeHeight )
		pFnUpdateEyeHeight = (UFunction*) UObject::GObjObjects()->Data[ 53693 ];

	ASanctumPlayer_eventUpdateEyeHeight_Parms UpdateEyeHeight_Parms;
	UpdateEyeHeight_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateEyeHeight, &UpdateEyeHeight_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.SetPuttingDownWeapon
// [0x00020102] 
// Parameters infos:
// unsigned long                  bNowPuttingDownWeapon          ( CPF_Parm )

void ASanctumPlayer::SetPuttingDownWeapon ( unsigned long bNowPuttingDownWeapon )
{
	static UFunction* pFnSetPuttingDownWeapon = NULL;

	if ( ! pFnSetPuttingDownWeapon )
		pFnSetPuttingDownWeapon = (UFunction*) UObject::GObjObjects()->Data[ 53691 ];

	ASanctumPlayer_execSetPuttingDownWeapon_Parms SetPuttingDownWeapon_Parms;
	SetPuttingDownWeapon_Parms.bNowPuttingDownWeapon = bNowPuttingDownWeapon;

	this->ProcessEvent ( pFnSetPuttingDownWeapon, &SetPuttingDownWeapon_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.WeaponStoppedFiring
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ASanctumPlayer::WeaponStoppedFiring ( class AWeapon* InWeapon, unsigned long bViaReplication )
{
	static UFunction* pFnWeaponStoppedFiring = NULL;

	if ( ! pFnWeaponStoppedFiring )
		pFnWeaponStoppedFiring = (UFunction*) UObject::GObjObjects()->Data[ 53688 ];

	ASanctumPlayer_execWeaponStoppedFiring_Parms WeaponStoppedFiring_Parms;
	WeaponStoppedFiring_Parms.InWeapon = InWeapon;
	WeaponStoppedFiring_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnWeaponStoppedFiring, &WeaponStoppedFiring_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.WeaponFired
// [0x00024102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ASanctumPlayer::WeaponFired ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation )
{
	static UFunction* pFnWeaponFired = NULL;

	if ( ! pFnWeaponFired )
		pFnWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 53684 ];

	ASanctumPlayer_execWeaponFired_Parms WeaponFired_Parms;
	WeaponFired_Parms.InWeapon = InWeapon;
	WeaponFired_Parms.bViaReplication = bViaReplication;
	memcpy ( &WeaponFired_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnWeaponFired, &WeaponFired_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.SpawnFireFX
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringModeNum                  ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASanctumPlayer::SpawnFireFX ( unsigned char FiringModeNum, struct FImpactInfo Impact )
{
	static UFunction* pFnSpawnFireFX = NULL;

	if ( ! pFnSpawnFireFX )
		pFnSpawnFireFX = (UFunction*) UObject::GObjObjects()->Data[ 53681 ];

	ASanctumPlayer_execSpawnFireFX_Parms SpawnFireFX_Parms;
	SpawnFireFX_Parms.FiringModeNum = FiringModeNum;
	memcpy ( &SpawnFireFX_Parms.Impact, &Impact, 0x50 );

	this->ProcessEvent ( pFnSpawnFireFX, &SpawnFireFX_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.FlashCountUpdated
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned char                  InFlashCount                   ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ASanctumPlayer::FlashCountUpdated ( class AWeapon* InWeapon, unsigned char InFlashCount, unsigned long bViaReplication )
{
	static UFunction* pFnFlashCountUpdated = NULL;

	if ( ! pFnFlashCountUpdated )
		pFnFlashCountUpdated = (UFunction*) UObject::GObjObjects()->Data[ 53676 ];

	ASanctumPlayer_execFlashCountUpdated_Parms FlashCountUpdated_Parms;
	FlashCountUpdated_Parms.InWeapon = InWeapon;
	FlashCountUpdated_Parms.InFlashCount = InFlashCount;
	FlashCountUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFlashCountUpdated, &FlashCountUpdated_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.FlashLocationUpdated
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// struct FVector                 InFlashLocation                ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ASanctumPlayer::FlashLocationUpdated ( class AWeapon* InWeapon, struct FVector InFlashLocation, unsigned long bViaReplication )
{
	static UFunction* pFnFlashLocationUpdated = NULL;

	if ( ! pFnFlashLocationUpdated )
		pFnFlashLocationUpdated = (UFunction*) UObject::GObjObjects()->Data[ 53670 ];

	ASanctumPlayer_execFlashLocationUpdated_Parms FlashLocationUpdated_Parms;
	FlashLocationUpdated_Parms.InWeapon = InWeapon;
	memcpy ( &FlashLocationUpdated_Parms.InFlashLocation, &InFlashLocation, 0xC );
	FlashLocationUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFlashLocationUpdated, &FlashLocationUpdated_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.FiringModeUpdated
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned char                  InFiringMode                   ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ASanctumPlayer::FiringModeUpdated ( class AWeapon* InWeapon, unsigned char InFiringMode, unsigned long bViaReplication )
{
	static UFunction* pFnFiringModeUpdated = NULL;

	if ( ! pFnFiringModeUpdated )
		pFnFiringModeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 53666 ];

	ASanctumPlayer_execFiringModeUpdated_Parms FiringModeUpdated_Parms;
	FiringModeUpdated_Parms.InWeapon = InWeapon;
	FiringModeUpdated_Parms.InFiringMode = InFiringMode;
	FiringModeUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFiringModeUpdated, &FiringModeUpdated_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.weaponAttachmentChanged
// [0x00020102] 
// Parameters infos:

void ASanctumPlayer::weaponAttachmentChanged ( )
{
	static UFunction* pFnweaponAttachmentChanged = NULL;

	if ( ! pFnweaponAttachmentChanged )
		pFnweaponAttachmentChanged = (UFunction*) UObject::GObjObjects()->Data[ 53664 ];

	ASanctumPlayer_execweaponAttachmentChanged_Parms weaponAttachmentChanged_Parms;

	this->ProcessEvent ( pFnweaponAttachmentChanged, &weaponAttachmentChanged_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ASanctumPlayer::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 53662 ];

	ASanctumPlayer_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.EncroachedBy
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ASanctumPlayer::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = (UFunction*) UObject::GObjObjects()->Data[ 53656 ];

	ASanctumPlayer_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.FixSoundMode
// [0x00020102] 
// Parameters infos:

void ASanctumPlayer::FixSoundMode ( )
{
	static UFunction* pFnFixSoundMode = NULL;

	if ( ! pFnFixSoundMode )
		pFnFixSoundMode = (UFunction*) UObject::GObjObjects()->Data[ 53655 ];

	ASanctumPlayer_execFixSoundMode_Parms FixSoundMode_Parms;

	this->ProcessEvent ( pFnFixSoundMode, &FixSoundMode_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.RevertSlow
// [0x00020002] 
// Parameters infos:
// float                          slowness                       ( CPF_Parm )

void ASanctumPlayer::RevertSlow ( float slowness )
{
	static UFunction* pFnRevertSlow = NULL;

	if ( ! pFnRevertSlow )
		pFnRevertSlow = (UFunction*) UObject::GObjObjects()->Data[ 53653 ];

	ASanctumPlayer_execRevertSlow_Parms RevertSlow_Parms;
	RevertSlow_Parms.slowness = slowness;

	this->ProcessEvent ( pFnRevertSlow, &RevertSlow_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.Slowdown
// [0x00020002] 
// Parameters infos:
// float                          slowness                       ( CPF_Parm )

void ASanctumPlayer::Slowdown ( float slowness )
{
	static UFunction* pFnSlowdown = NULL;

	if ( ! pFnSlowdown )
		pFnSlowdown = (UFunction*) UObject::GObjObjects()->Data[ 53651 ];

	ASanctumPlayer_execSlowdown_Parms Slowdown_Parms;
	Slowdown_Parms.slowness = slowness;

	this->ProcessEvent ( pFnSlowdown, &Slowdown_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.SetWeaponAmbientSound
// [0x00020102] 
// Parameters infos:
// class USoundCue*               NewAmbientSound                ( CPF_Parm )

void ASanctumPlayer::SetWeaponAmbientSound ( class USoundCue* NewAmbientSound )
{
	static UFunction* pFnSetWeaponAmbientSound = NULL;

	if ( ! pFnSetWeaponAmbientSound )
		pFnSetWeaponAmbientSound = (UFunction*) UObject::GObjObjects()->Data[ 53649 ];

	ASanctumPlayer_execSetWeaponAmbientSound_Parms SetWeaponAmbientSound_Parms;
	SetWeaponAmbientSound_Parms.NewAmbientSound = NewAmbientSound;

	this->ProcessEvent ( pFnSetWeaponAmbientSound, &SetWeaponAmbientSound_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.SetOverheat
// [0x00020102] 
// Parameters infos:
// float                          Overheat                       ( CPF_Parm )

void ASanctumPlayer::SetOverheat ( float Overheat )
{
	static UFunction* pFnSetOverheat = NULL;

	if ( ! pFnSetOverheat )
		pFnSetOverheat = (UFunction*) UObject::GObjObjects()->Data[ 53647 ];

	ASanctumPlayer_execSetOverheat_Parms SetOverheat_Parms;
	SetOverheat_Parms.Overheat = Overheat;

	this->ProcessEvent ( pFnSetOverheat, &SetOverheat_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.getWeaponLevel
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  WeaponClass                    ( CPF_Parm )

int ASanctumPlayer::getWeaponLevel ( class UClass* WeaponClass )
{
	static UFunction* pFngetWeaponLevel = NULL;

	if ( ! pFngetWeaponLevel )
		pFngetWeaponLevel = (UFunction*) UObject::GObjObjects()->Data[ 53642 ];

	ASanctumPlayer_execgetWeaponLevel_Parms getWeaponLevel_Parms;
	getWeaponLevel_Parms.WeaponClass = WeaponClass;

	this->ProcessEvent ( pFngetWeaponLevel, &getWeaponLevel_Parms, NULL );

	return getWeaponLevel_Parms.ReturnValue;
};

// Function Sanctum.SanctumPlayer.GetPawnViewLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASanctumPlayer::GetPawnViewLocation ( )
{
	static UFunction* pFnGetPawnViewLocation = NULL;

	if ( ! pFnGetPawnViewLocation )
		pFnGetPawnViewLocation = (UFunction*) UObject::GObjObjects()->Data[ 53640 ];

	ASanctumPlayer_execGetPawnViewLocation_Parms GetPawnViewLocation_Parms;

	this->ProcessEvent ( pFnGetPawnViewLocation, &GetPawnViewLocation_Parms, NULL );

	return GetPawnViewLocation_Parms.ReturnValue;
};

// Function Sanctum.SanctumPlayer.updatedPRI
// [0x00020102] 
// Parameters infos:

void ASanctumPlayer::updatedPRI ( )
{
	static UFunction* pFnupdatedPRI = NULL;

	if ( ! pFnupdatedPRI )
		pFnupdatedPRI = (UFunction*) UObject::GObjObjects()->Data[ 53637 ];

	ASanctumPlayer_execupdatedPRI_Parms updatedPRI_Parms;

	this->ProcessEvent ( pFnupdatedPRI, &updatedPRI_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void ASanctumPlayer::PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = (UFunction*) UObject::GObjObjects()->Data[ 53634 ];

	ASanctumPlayer_execPossessedBy_Parms PossessedBy_Parms;
	PossessedBy_Parms.C = C;
	PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.FamilyInfoUpdated
// [0x00820102] 
// Parameters infos:

void ASanctumPlayer::FamilyInfoUpdated ( )
{
	static UFunction* pFnFamilyInfoUpdated = NULL;

	if ( ! pFnFamilyInfoUpdated )
		pFnFamilyInfoUpdated = (UFunction*) UObject::GObjObjects()->Data[ 53629 ];

	ASanctumPlayer_execFamilyInfoUpdated_Parms FamilyInfoUpdated_Parms;

	this->ProcessEvent ( pFnFamilyInfoUpdated, &FamilyInfoUpdated_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.AssignInventoryManagerHUD
// [0x00020102] 
// Parameters infos:

void ASanctumPlayer::AssignInventoryManagerHUD ( )
{
	static UFunction* pFnAssignInventoryManagerHUD = NULL;

	if ( ! pFnAssignInventoryManagerHUD )
		pFnAssignInventoryManagerHUD = (UFunction*) UObject::GObjObjects()->Data[ 53627 ];

	ASanctumPlayer_execAssignInventoryManagerHUD_Parms AssignInventoryManagerHUD_Parms;

	this->ProcessEvent ( pFnAssignInventoryManagerHUD, &AssignInventoryManagerHUD_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.StopOverview
// [0x00020100] 
// Parameters infos:

void ASanctumPlayer::StopOverview ( )
{
	static UFunction* pFnStopOverview = NULL;

	if ( ! pFnStopOverview )
		pFnStopOverview = (UFunction*) UObject::GObjObjects()->Data[ 53626 ];

	ASanctumPlayer_execStopOverview_Parms StopOverview_Parms;

	this->ProcessEvent ( pFnStopOverview, &StopOverview_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumPlayer::eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 53618 ];

	ASanctumPlayer_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.StartOverview
// [0x00020100] 
// Parameters infos:

void ASanctumPlayer::StartOverview ( )
{
	static UFunction* pFnStartOverview = NULL;

	if ( ! pFnStartOverview )
		pFnStartOverview = (UFunction*) UObject::GObjObjects()->Data[ 53617 ];

	ASanctumPlayer_execStartOverview_Parms StartOverview_Parms;

	this->ProcessEvent ( pFnStartOverview, &StartOverview_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.ProcessViewRotation
// [0x00420102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void ASanctumPlayer::ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 53612 ];

	ASanctumPlayer_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );
};

// Function Sanctum.SanctumPlayer.enterBuildPhase
// [0x00020102] 
// Parameters infos:

void ASanctumPlayer::enterBuildPhase ( )
{
	static UFunction* pFnenterBuildPhase = NULL;

	if ( ! pFnenterBuildPhase )
		pFnenterBuildPhase = (UFunction*) UObject::GObjObjects()->Data[ 53611 ];

	ASanctumPlayer_execenterBuildPhase_Parms enterBuildPhase_Parms;

	this->ProcessEvent ( pFnenterBuildPhase, &enterBuildPhase_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.enterActionPhase
// [0x00020102] 
// Parameters infos:

void ASanctumPlayer::enterActionPhase ( )
{
	static UFunction* pFnenterActionPhase = NULL;

	if ( ! pFnenterActionPhase )
		pFnenterActionPhase = (UFunction*) UObject::GObjObjects()->Data[ 53610 ];

	ASanctumPlayer_execenterActionPhase_Parms enterActionPhase_Parms;

	this->ProcessEvent ( pFnenterActionPhase, &enterActionPhase_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.ToggleOwnerSee
// [0x00020102] 
// Parameters infos:
// unsigned long                  see                            ( CPF_Parm )

void ASanctumPlayer::ToggleOwnerSee ( unsigned long see )
{
	static UFunction* pFnToggleOwnerSee = NULL;

	if ( ! pFnToggleOwnerSee )
		pFnToggleOwnerSee = (UFunction*) UObject::GObjObjects()->Data[ 53607 ];

	ASanctumPlayer_execToggleOwnerSee_Parms ToggleOwnerSee_Parms;
	ToggleOwnerSee_Parms.see = see;

	this->ProcessEvent ( pFnToggleOwnerSee, &ToggleOwnerSee_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.GetWeaponStartTraceLocation
// [0x00824902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 CurrentWeapon                  ( CPF_OptionalParm | CPF_Parm )

struct FVector ASanctumPlayer::eventGetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon )
{
	static UFunction* pFnGetWeaponStartTraceLocation = NULL;

	if ( ! pFnGetWeaponStartTraceLocation )
		pFnGetWeaponStartTraceLocation = (UFunction*) UObject::GObjObjects()->Data[ 53600 ];

	ASanctumPlayer_eventGetWeaponStartTraceLocation_Parms GetWeaponStartTraceLocation_Parms;
	GetWeaponStartTraceLocation_Parms.CurrentWeapon = CurrentWeapon;

	this->ProcessEvent ( pFnGetWeaponStartTraceLocation, &GetWeaponStartTraceLocation_Parms, NULL );

	return GetWeaponStartTraceLocation_Parms.ReturnValue;
};

// Function Sanctum.SanctumPlayer.UnPossessed
// [0x00020002] 
// Parameters infos:

void ASanctumPlayer::UnPossessed ( )
{
	static UFunction* pFnUnPossessed = NULL;

	if ( ! pFnUnPossessed )
		pFnUnPossessed = (UFunction*) UObject::GObjObjects()->Data[ 53598 ];

	ASanctumPlayer_execUnPossessed_Parms UnPossessed_Parms;

	this->ProcessEvent ( pFnUnPossessed, &UnPossessed_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.IsInOverviewMode
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumPlayer::eventIsInOverviewMode ( )
{
	static UFunction* pFnIsInOverviewMode = NULL;

	if ( ! pFnIsInOverviewMode )
		pFnIsInOverviewMode = (UFunction*) UObject::GObjObjects()->Data[ 53595 ];

	ASanctumPlayer_eventIsInOverviewMode_Parms IsInOverviewMode_Parms;

	this->ProcessEvent ( pFnIsInOverviewMode, &IsInOverviewMode_Parms, NULL );

	return IsInOverviewMode_Parms.ReturnValue;
};

// Function Sanctum.SanctumPlayer.WeaponChanged
// [0x00020102] 
// Parameters infos:
// class ASanctumWeapon*          NewWeapon                      ( CPF_Parm )

void ASanctumPlayer::WeaponChanged ( class ASanctumWeapon* NewWeapon )
{
	static UFunction* pFnWeaponChanged = NULL;

	if ( ! pFnWeaponChanged )
		pFnWeaponChanged = (UFunction*) UObject::GObjObjects()->Data[ 53592 ];

	ASanctumPlayer_execWeaponChanged_Parms WeaponChanged_Parms;
	WeaponChanged_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnWeaponChanged, &WeaponChanged_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.SpawnSnow
// [0x00820102] 
// Parameters infos:

void ASanctumPlayer::SpawnSnow ( )
{
	static UFunction* pFnSpawnSnow = NULL;

	if ( ! pFnSpawnSnow )
		pFnSpawnSnow = (UFunction*) UObject::GObjObjects()->Data[ 53587 ];

	ASanctumPlayer_execSpawnSnow_Parms SpawnSnow_Parms;

	this->ProcessEvent ( pFnSpawnSnow, &SpawnSnow_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumPlayer::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 53586 ];

	ASanctumPlayer_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumPlayer::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 53585 ];

	ASanctumPlayer_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumPlayer.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumPlayer::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 53583 ];

	ASanctumPlayer_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumMapInfo.IsDemoBuild
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumMapInfo::IsDemoBuild ( )
{
	static UFunction* pFnIsDemoBuild = NULL;

	if ( ! pFnIsDemoBuild )
		pFnIsDemoBuild = (UFunction*) UObject::GObjObjects()->Data[ 44956 ];

	USanctumMapInfo_execIsDemoBuild_Parms IsDemoBuild_Parms;

	this->ProcessEvent ( pFnIsDemoBuild, &IsDemoBuild_Parms, NULL );

	return IsDemoBuild_Parms.ReturnValue;
};

// Function Sanctum.SanctumMapInfo.GetPathingCommonRouteObject
// [0x00020002] 
// Parameters infos:
// class USanctumPathingCommonRoute* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USanctumPathingCommonRoute* USanctumMapInfo::GetPathingCommonRouteObject ( )
{
	static UFunction* pFnGetPathingCommonRouteObject = NULL;

	if ( ! pFnGetPathingCommonRouteObject )
		pFnGetPathingCommonRouteObject = (UFunction*) UObject::GObjObjects()->Data[ 45147 ];

	USanctumMapInfo_execGetPathingCommonRouteObject_Parms GetPathingCommonRouteObject_Parms;

	this->ProcessEvent ( pFnGetPathingCommonRouteObject, &GetPathingCommonRouteObject_Parms, NULL );

	return GetPathingCommonRouteObject_Parms.ReturnValue;
};

// Function Sanctum.SanctumMapInfo.IsTowerAvailableOnMap
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  hologram                       ( CPF_Parm )

bool USanctumMapInfo::IsTowerAvailableOnMap ( class UClass* hologram )
{
	static UFunction* pFnIsTowerAvailableOnMap = NULL;

	if ( ! pFnIsTowerAvailableOnMap )
		pFnIsTowerAvailableOnMap = (UFunction*) UObject::GObjObjects()->Data[ 51731 ];

	USanctumMapInfo_execIsTowerAvailableOnMap_Parms IsTowerAvailableOnMap_Parms;
	IsTowerAvailableOnMap_Parms.hologram = hologram;

	this->ProcessEvent ( pFnIsTowerAvailableOnMap, &IsTowerAvailableOnMap_Parms, NULL );

	return IsTowerAvailableOnMap_Parms.ReturnValue;
};

// Function Sanctum.SanctumMapInfo.GetUnavailableTowersArray
// [0x00420002] 
// Parameters infos:
// TArray< class UClass* >        unavailablTowers               ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USanctumMapInfo::GetUnavailableTowersArray ( TArray< class UClass* >* unavailablTowers )
{
	static UFunction* pFnGetUnavailableTowersArray = NULL;

	if ( ! pFnGetUnavailableTowersArray )
		pFnGetUnavailableTowersArray = (UFunction*) UObject::GObjObjects()->Data[ 53233 ];

	USanctumMapInfo_execGetUnavailableTowersArray_Parms GetUnavailableTowersArray_Parms;

	this->ProcessEvent ( pFnGetUnavailableTowersArray, &GetUnavailableTowersArray_Parms, NULL );

	if ( unavailablTowers )
		memcpy ( unavailablTowers, &GetUnavailableTowersArray_Parms.unavailablTowers, 0xC );
};

// Function Sanctum.SanctumMapInfo.GetNumberOfTowersToSelect
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USanctumMapInfo::GetNumberOfTowersToSelect ( )
{
	static UFunction* pFnGetNumberOfTowersToSelect = NULL;

	if ( ! pFnGetNumberOfTowersToSelect )
		pFnGetNumberOfTowersToSelect = (UFunction*) UObject::GObjObjects()->Data[ 45782 ];

	USanctumMapInfo_execGetNumberOfTowersToSelect_Parms GetNumberOfTowersToSelect_Parms;

	this->ProcessEvent ( pFnGetNumberOfTowersToSelect, &GetNumberOfTowersToSelect_Parms, NULL );

	return GetNumberOfTowersToSelect_Parms.ReturnValue;
};

// Function Sanctum.SanctumAIController.MoveUnreachable
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 AttemptedDest                  ( CPF_Parm )
// class AActor*                  AttemptedTarget                ( CPF_Parm )

void ASanctumAIController::eventMoveUnreachable ( struct FVector AttemptedDest, class AActor* AttemptedTarget )
{
	static UFunction* pFnMoveUnreachable = NULL;

	if ( ! pFnMoveUnreachable )
		pFnMoveUnreachable = (UFunction*) UObject::GObjObjects()->Data[ 45055 ];

	ASanctumAIController_eventMoveUnreachable_Parms MoveUnreachable_Parms;
	memcpy ( &MoveUnreachable_Parms.AttemptedDest, &AttemptedDest, 0xC );
	MoveUnreachable_Parms.AttemptedTarget = AttemptedTarget;

	this->ProcessEvent ( pFnMoveUnreachable, &MoveUnreachable_Parms, NULL );
};

// Function Sanctum.SanctumAIController.HandlePathObstruction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  BlockedBy                      ( CPF_Parm )

bool ASanctumAIController::eventHandlePathObstruction ( class AActor* BlockedBy )
{
	static UFunction* pFnHandlePathObstruction = NULL;

	if ( ! pFnHandlePathObstruction )
		pFnHandlePathObstruction = (UFunction*) UObject::GObjObjects()->Data[ 45051 ];

	ASanctumAIController_eventHandlePathObstruction_Parms HandlePathObstruction_Parms;
	HandlePathObstruction_Parms.BlockedBy = BlockedBy;

	this->ProcessEvent ( pFnHandlePathObstruction, &HandlePathObstruction_Parms, NULL );

	return HandlePathObstruction_Parms.ReturnValue;
};

// Function Sanctum.SanctumAIController.FindGoal
// [0x00020002] 
// Parameters infos:

void ASanctumAIController::FindGoal ( )
{
	static UFunction* pFnFindGoal = NULL;

	if ( ! pFnFindGoal )
		pFnFindGoal = (UFunction*) UObject::GObjObjects()->Data[ 45048 ];

	ASanctumAIController_execFindGoal_Parms FindGoal_Parms;

	this->ProcessEvent ( pFnFindGoal, &FindGoal_Parms, NULL );
};

// Function Sanctum.SanctumAIController.PawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ASanctumAIController::PawnDied ( class APawn* P )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 45046 ];

	ASanctumAIController_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.P = P;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function Sanctum.SanctumAIController.RandomVector
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Offset                         ( CPF_Parm )

struct FVector ASanctumAIController::RandomVector ( float Offset )
{
	static UFunction* pFnRandomVector = NULL;

	if ( ! pFnRandomVector )
		pFnRandomVector = (UFunction*) UObject::GObjObjects()->Data[ 45042 ];

	ASanctumAIController_execRandomVector_Parms RandomVector_Parms;
	RandomVector_Parms.Offset = Offset;

	this->ProcessEvent ( pFnRandomVector, &RandomVector_Parms, NULL );

	return RandomVector_Parms.ReturnValue;
};

// Function Sanctum.SanctumAIController.NotifySanctumPathNodeReached
// [0x00020002] 
// Parameters infos:

void ASanctumAIController::NotifySanctumPathNodeReached ( )
{
	static UFunction* pFnNotifySanctumPathNodeReached = NULL;

	if ( ! pFnNotifySanctumPathNodeReached )
		pFnNotifySanctumPathNodeReached = (UFunction*) UObject::GObjObjects()->Data[ 45039 ];

	ASanctumAIController_execNotifySanctumPathNodeReached_Parms NotifySanctumPathNodeReached_Parms;

	this->ProcessEvent ( pFnNotifySanctumPathNodeReached, &NotifySanctumPathNodeReached_Parms, NULL );
};

// Function Sanctum.SanctumAIController.ReachedPoint
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Point                          ( CPF_Parm )

bool ASanctumAIController::ReachedPoint ( struct FVector Point )
{
	static UFunction* pFnReachedPoint = NULL;

	if ( ! pFnReachedPoint )
		pFnReachedPoint = (UFunction*) UObject::GObjObjects()->Data[ 45033 ];

	ASanctumAIController_execReachedPoint_Parms ReachedPoint_Parms;
	memcpy ( &ReachedPoint_Parms.Point, &Point, 0xC );

	this->ProcessEvent ( pFnReachedPoint, &ReachedPoint_Parms, NULL );

	return ReachedPoint_Parms.ReturnValue;
};

// Function Sanctum.SanctumAIController.setStrafeTolerance
// [0x00020002] 
// Parameters infos:
// float                          strafeTolerance                ( CPF_Parm )

void ASanctumAIController::setStrafeTolerance ( float strafeTolerance )
{
	static UFunction* pFnsetStrafeTolerance = NULL;

	if ( ! pFnsetStrafeTolerance )
		pFnsetStrafeTolerance = (UFunction*) UObject::GObjObjects()->Data[ 45031 ];

	ASanctumAIController_execsetStrafeTolerance_Parms setStrafeTolerance_Parms;
	setStrafeTolerance_Parms.strafeTolerance = strafeTolerance;

	this->ProcessEvent ( pFnsetStrafeTolerance, &setStrafeTolerance_Parms, NULL );
};

// Function Sanctum.SanctumAIController.setStrafeDist
// [0x00020002] 
// Parameters infos:
// float                          strafeDist                     ( CPF_Parm )

void ASanctumAIController::setStrafeDist ( float strafeDist )
{
	static UFunction* pFnsetStrafeDist = NULL;

	if ( ! pFnsetStrafeDist )
		pFnsetStrafeDist = (UFunction*) UObject::GObjObjects()->Data[ 45029 ];

	ASanctumAIController_execsetStrafeDist_Parms setStrafeDist_Parms;
	setStrafeDist_Parms.strafeDist = strafeDist;

	this->ProcessEvent ( pFnsetStrafeDist, &setStrafeDist_Parms, NULL );
};

// Function Sanctum.SanctumAIController.ClearStuckTimer
// [0x00020002] 
// Parameters infos:

void ASanctumAIController::ClearStuckTimer ( )
{
	static UFunction* pFnClearStuckTimer = NULL;

	if ( ! pFnClearStuckTimer )
		pFnClearStuckTimer = (UFunction*) UObject::GObjObjects()->Data[ 45027 ];

	ASanctumAIController_execClearStuckTimer_Parms ClearStuckTimer_Parms;

	this->ProcessEvent ( pFnClearStuckTimer, &ClearStuckTimer_Parms, NULL );
};

// Function Sanctum.SanctumAIController.StartStuckCheck
// [0x00020002] 
// Parameters infos:
// struct FVector                 currentGoal                    ( CPF_Parm )

void ASanctumAIController::StartStuckCheck ( struct FVector currentGoal )
{
	static UFunction* pFnStartStuckCheck = NULL;

	if ( ! pFnStartStuckCheck )
		pFnStartStuckCheck = (UFunction*) UObject::GObjObjects()->Data[ 45018 ];

	ASanctumAIController_execStartStuckCheck_Parms StartStuckCheck_Parms;
	memcpy ( &StartStuckCheck_Parms.currentGoal, &currentGoal, 0xC );

	this->ProcessEvent ( pFnStartStuckCheck, &StartStuckCheck_Parms, NULL );
};

// Function Sanctum.SanctumAIController.GetNewTarget
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            forNodeNum                     ( CPF_Parm )

struct FVector ASanctumAIController::GetNewTarget ( int forNodeNum )
{
	static UFunction* pFnGetNewTarget = NULL;

	if ( ! pFnGetNewTarget )
		pFnGetNewTarget = (UFunction*) UObject::GObjObjects()->Data[ 45014 ];

	ASanctumAIController_execGetNewTarget_Parms GetNewTarget_Parms;
	GetNewTarget_Parms.forNodeNum = forNodeNum;

	this->ProcessEvent ( pFnGetNewTarget, &GetNewTarget_Parms, NULL );

	return GetNewTarget_Parms.ReturnValue;
};

// Function Sanctum.SanctumCore.LinearColorToColor
// [0x00020102] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FLinearColor            C                              ( CPF_Parm )

struct FColor ASanctumCore::LinearColorToColor ( struct FLinearColor C )
{
	static UFunction* pFnLinearColorToColor = NULL;

	if ( ! pFnLinearColorToColor )
		pFnLinearColorToColor = (UFunction*) UObject::GObjObjects()->Data[ 45624 ];

	ASanctumCore_execLinearColorToColor_Parms LinearColorToColor_Parms;
	memcpy ( &LinearColorToColor_Parms.C, &C, 0x10 );

	this->ProcessEvent ( pFnLinearColorToColor, &LinearColorToColor_Parms, NULL );

	return LinearColorToColor_Parms.ReturnValue;
};

// Function Sanctum.SanctumCore.updateVisuals
// [0x00824102] 
// Parameters infos:
// float                          Delta                          ( CPF_Parm )
// unsigned long                  ignoreDirty                    ( CPF_OptionalParm | CPF_Parm )

void ASanctumCore::updateVisuals ( float Delta, unsigned long ignoreDirty )
{
	static UFunction* pFnupdateVisuals = NULL;

	if ( ! pFnupdateVisuals )
		pFnupdateVisuals = (UFunction*) UObject::GObjObjects()->Data[ 45617 ];

	ASanctumCore_execupdateVisuals_Parms updateVisuals_Parms;
	updateVisuals_Parms.Delta = Delta;
	updateVisuals_Parms.ignoreDirty = ignoreDirty;

	this->ProcessEvent ( pFnupdateVisuals, &updateVisuals_Parms, NULL );
};

// Function Sanctum.SanctumCore.enableDamageEffect
// [0x00020102] 
// Parameters infos:

void ASanctumCore::enableDamageEffect ( )
{
	static UFunction* pFnenableDamageEffect = NULL;

	if ( ! pFnenableDamageEffect )
		pFnenableDamageEffect = (UFunction*) UObject::GObjObjects()->Data[ 45616 ];

	ASanctumCore_execenableDamageEffect_Parms enableDamageEffect_Parms;

	this->ProcessEvent ( pFnenableDamageEffect, &enableDamageEffect_Parms, NULL );
};

// Function Sanctum.SanctumCore.setLife
// [0x00020102] 
// Parameters infos:
// int                            life                           ( CPF_Parm )

void ASanctumCore::setLife ( int life )
{
	static UFunction* pFnsetLife = NULL;

	if ( ! pFnsetLife )
		pFnsetLife = (UFunction*) UObject::GObjObjects()->Data[ 45614 ];

	ASanctumCore_execsetLife_Parms setLife_Parms;
	setLife_Parms.life = life;

	this->ProcessEvent ( pFnsetLife, &setLife_Parms, NULL );
};

// Function Sanctum.SanctumCore.setMaxLife
// [0x00020102] 
// Parameters infos:
// int                            maxLife                        ( CPF_Parm )

void ASanctumCore::setMaxLife ( int maxLife )
{
	static UFunction* pFnsetMaxLife = NULL;

	if ( ! pFnsetMaxLife )
		pFnsetMaxLife = (UFunction*) UObject::GObjObjects()->Data[ 45612 ];

	ASanctumCore_execsetMaxLife_Parms setMaxLife_Parms;
	setMaxLife_Parms.maxLife = maxLife;

	this->ProcessEvent ( pFnsetMaxLife, &setMaxLife_Parms, NULL );
};

// Function Sanctum.SanctumCore.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumCore::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 45610 ];

	ASanctumCore_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumCore.registerWithGRI
// [0x00020102] 
// Parameters infos:

void ASanctumCore::registerWithGRI ( )
{
	static UFunction* pFnregisterWithGRI = NULL;

	if ( ! pFnregisterWithGRI )
		pFnregisterWithGRI = (UFunction*) UObject::GObjObjects()->Data[ 45608 ];

	ASanctumCore_execregisterWithGRI_Parms registerWithGRI_Parms;

	this->ProcessEvent ( pFnregisterWithGRI, &registerWithGRI_Parms, NULL );
};

// Function Sanctum.SanctumCore.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumCore::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 45607 ];

	ASanctumCore_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumEnemyArmadillo.OnAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ASanctumEnemyArmadillo::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 47184 ];

	ASanctumEnemyArmadillo_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function Sanctum.SanctumEnemyArmadillo.EnterDefense
// [0x00020102] 
// Parameters infos:

void ASanctumEnemyArmadillo::EnterDefense ( )
{
	static UFunction* pFnEnterDefense = NULL;

	if ( ! pFnEnterDefense )
		pFnEnterDefense = (UFunction*) UObject::GObjObjects()->Data[ 47183 ];

	ASanctumEnemyArmadillo_execEnterDefense_Parms EnterDefense_Parms;

	this->ProcessEvent ( pFnEnterDefense, &EnterDefense_Parms, NULL );
};

// Function Sanctum.SanctumEnemyArmadillo.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumEnemyArmadillo::eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 47174 ];

	ASanctumEnemyArmadillo_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Sanctum.SanctumEnemyArmadillo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumEnemyArmadillo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 47172 ];

	ASanctumEnemyArmadillo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumEnemyArmadillo.ExitDefense
// [0x00020100] 
// Parameters infos:

void ASanctumEnemyArmadillo::ExitDefense ( )
{
	static UFunction* pFnExitDefense = NULL;

	if ( ! pFnExitDefense )
		pFnExitDefense = (UFunction*) UObject::GObjObjects()->Data[ 47171 ];

	ASanctumEnemyArmadillo_execExitDefense_Parms ExitDefense_Parms;

	this->ProcessEvent ( pFnExitDefense, &ExitDefense_Parms, NULL );
};

// Function Sanctum.SanctumEnemyArmadillo.PlayerKilledEnemyStats
// [0x00020002] 
// Parameters infos:
// class ASanctumPlayerReplicationInfo* PRI                            ( CPF_Parm )

void ASanctumEnemyArmadillo::PlayerKilledEnemyStats ( class ASanctumPlayerReplicationInfo* PRI )
{
	static UFunction* pFnPlayerKilledEnemyStats = NULL;

	if ( ! pFnPlayerKilledEnemyStats )
		pFnPlayerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47168 ];

	ASanctumEnemyArmadillo_execPlayerKilledEnemyStats_Parms PlayerKilledEnemyStats_Parms;
	PlayerKilledEnemyStats_Parms.PRI = PRI;

	this->ProcessEvent ( pFnPlayerKilledEnemyStats, &PlayerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyArmadillo.TowerKilledEnemyStats
// [0x00020002] 
// Parameters infos:

void ASanctumEnemyArmadillo::TowerKilledEnemyStats ( )
{
	static UFunction* pFnTowerKilledEnemyStats = NULL;

	if ( ! pFnTowerKilledEnemyStats )
		pFnTowerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47165 ];

	ASanctumEnemyArmadillo_execTowerKilledEnemyStats_Parms TowerKilledEnemyStats_Parms;

	this->ProcessEvent ( pFnTowerKilledEnemyStats, &TowerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyArmadillo.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumEnemyArmadillo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47164 ];

	ASanctumEnemyArmadillo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumPathNode.PawnShouldTeleport
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ASanctumPathNode::PawnShouldTeleport ( class APawn* P )
{
	static UFunction* pFnPawnShouldTeleport = NULL;

	if ( ! pFnPawnShouldTeleport )
		pFnPawnShouldTeleport = (UFunction*) UObject::GObjObjects()->Data[ 53386 ];

	ASanctumPathNode_execPawnShouldTeleport_Parms PawnShouldTeleport_Parms;
	PawnShouldTeleport_Parms.P = P;

	this->ProcessEvent ( pFnPawnShouldTeleport, &PawnShouldTeleport_Parms, NULL );
};

// Function Sanctum.SanctumPathNode.ReachedPoint
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ASanctumPathNode::ReachedPoint ( class APawn* P )
{
	static UFunction* pFnReachedPoint = NULL;

	if ( ! pFnReachedPoint )
		pFnReachedPoint = (UFunction*) UObject::GObjObjects()->Data[ 53384 ];

	ASanctumPathNode_execReachedPoint_Parms ReachedPoint_Parms;
	ReachedPoint_Parms.P = P;

	this->ProcessEvent ( pFnReachedPoint, &ReachedPoint_Parms, NULL );
};

// Function Sanctum.SanctumAIControllerAir.ForceMoveToNextNode
// [0x00020002] 
// Parameters infos:

void ASanctumAIControllerAir::ForceMoveToNextNode ( )
{
	static UFunction* pFnForceMoveToNextNode = NULL;

	if ( ! pFnForceMoveToNextNode )
		pFnForceMoveToNextNode = (UFunction*) UObject::GObjObjects()->Data[ 45092 ];

	ASanctumAIControllerAir_execForceMoveToNextNode_Parms ForceMoveToNextNode_Parms;

	this->ProcessEvent ( pFnForceMoveToNextNode, &ForceMoveToNextNode_Parms, NULL );
};

// Function Sanctum.SanctumAIControllerAir.SetNextTarget
// [0x00020002] 
// Parameters infos:

void ASanctumAIControllerAir::SetNextTarget ( )
{
	static UFunction* pFnSetNextTarget = NULL;

	if ( ! pFnSetNextTarget )
		pFnSetNextTarget = (UFunction*) UObject::GObjObjects()->Data[ 45091 ];

	ASanctumAIControllerAir_execSetNextTarget_Parms SetNextTarget_Parms;

	this->ProcessEvent ( pFnSetNextTarget, &SetNextTarget_Parms, NULL );
};

// Function Sanctum.SanctumAIControllerAir.FindGoal
// [0x00020002] 
// Parameters infos:

void ASanctumAIControllerAir::FindGoal ( )
{
	static UFunction* pFnFindGoal = NULL;

	if ( ! pFnFindGoal )
		pFnFindGoal = (UFunction*) UObject::GObjObjects()->Data[ 45082 ];

	ASanctumAIControllerAir_execFindGoal_Parms FindGoal_Parms;

	this->ProcessEvent ( pFnFindGoal, &FindGoal_Parms, NULL );
};

// Function Sanctum.SanctumAIControllerAir.SetStrafing
// [0x00020002] 
// Parameters infos:
// unsigned long                  strafing                       ( CPF_Parm )

void ASanctumAIControllerAir::SetStrafing ( unsigned long strafing )
{
	static UFunction* pFnSetStrafing = NULL;

	if ( ! pFnSetStrafing )
		pFnSetStrafing = (UFunction*) UObject::GObjObjects()->Data[ 45080 ];

	ASanctumAIControllerAir_execSetStrafing_Parms SetStrafing_Parms;
	SetStrafing_Parms.strafing = strafing;

	this->ProcessEvent ( pFnSetStrafing, &SetStrafing_Parms, NULL );
};

// Function Sanctum.SanctumAIControllerAir.ReachedPoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Point                          ( CPF_Parm )

bool ASanctumAIControllerAir::ReachedPoint ( struct FVector Point )
{
	static UFunction* pFnReachedPoint = NULL;

	if ( ! pFnReachedPoint )
		pFnReachedPoint = (UFunction*) UObject::GObjObjects()->Data[ 45077 ];

	ASanctumAIControllerAir_execReachedPoint_Parms ReachedPoint_Parms;
	memcpy ( &ReachedPoint_Parms.Point, &Point, 0xC );

	this->ProcessEvent ( pFnReachedPoint, &ReachedPoint_Parms, NULL );

	return ReachedPoint_Parms.ReturnValue;
};

// Function Sanctum.SanctumAIControllerAir.RandomVector
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Offset                         ( CPF_Parm )

struct FVector ASanctumAIControllerAir::RandomVector ( float Offset )
{
	static UFunction* pFnRandomVector = NULL;

	if ( ! pFnRandomVector )
		pFnRandomVector = (UFunction*) UObject::GObjObjects()->Data[ 45073 ];

	ASanctumAIControllerAir_execRandomVector_Parms RandomVector_Parms;
	RandomVector_Parms.Offset = Offset;

	this->ProcessEvent ( pFnRandomVector, &RandomVector_Parms, NULL );

	return RandomVector_Parms.ReturnValue;
};

// Function Sanctum.SanctumAIControllerAir.StartCheck
// [0x00020002] 
// Parameters infos:

void ASanctumAIControllerAir::StartCheck ( )
{
	static UFunction* pFnStartCheck = NULL;

	if ( ! pFnStartCheck )
		pFnStartCheck = (UFunction*) UObject::GObjObjects()->Data[ 45071 ];

	ASanctumAIControllerAir_execStartCheck_Parms StartCheck_Parms;

	this->ProcessEvent ( pFnStartCheck, &StartCheck_Parms, NULL );
};

// Function Sanctum.SanctumAIControllerAir.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumAIControllerAir::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 45070 ];

	ASanctumAIControllerAir_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumEnemyFlying.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASanctumEnemyFlying::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47302 ];

	ASanctumEnemyFlying_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumAIControllerAirDodger.StartCheck
// [0x00020002] 
// Parameters infos:

void ASanctumAIControllerAirDodger::StartCheck ( )
{
	static UFunction* pFnStartCheck = NULL;

	if ( ! pFnStartCheck )
		pFnStartCheck = (UFunction*) UObject::GObjObjects()->Data[ 45124 ];

	ASanctumAIControllerAirDodger_execStartCheck_Parms StartCheck_Parms;

	this->ProcessEvent ( pFnStartCheck, &StartCheck_Parms, NULL );
};

// Function Sanctum.SanctumAIControllerAirDodger.ForceMoveToNextNode
// [0x00020002] 
// Parameters infos:

void ASanctumAIControllerAirDodger::ForceMoveToNextNode ( )
{
	static UFunction* pFnForceMoveToNextNode = NULL;

	if ( ! pFnForceMoveToNextNode )
		pFnForceMoveToNextNode = (UFunction*) UObject::GObjObjects()->Data[ 45116 ];

	ASanctumAIControllerAirDodger_execForceMoveToNextNode_Parms ForceMoveToNextNode_Parms;

	this->ProcessEvent ( pFnForceMoveToNextNode, &ForceMoveToNextNode_Parms, NULL );
};

// Function Sanctum.SanctumAIControllerAirDodger.FindGoal
// [0x00020002] 
// Parameters infos:

void ASanctumAIControllerAirDodger::FindGoal ( )
{
	static UFunction* pFnFindGoal = NULL;

	if ( ! pFnFindGoal )
		pFnFindGoal = (UFunction*) UObject::GObjObjects()->Data[ 45111 ];

	ASanctumAIControllerAirDodger_execFindGoal_Parms FindGoal_Parms;

	this->ProcessEvent ( pFnFindGoal, &FindGoal_Parms, NULL );
};

// Function Sanctum.SanctumAIControllerAirDodger.SetNextTarget
// [0x00820002] 
// Parameters infos:

void ASanctumAIControllerAirDodger::SetNextTarget ( )
{
	static UFunction* pFnSetNextTarget = NULL;

	if ( ! pFnSetNextTarget )
		pFnSetNextTarget = (UFunction*) UObject::GObjObjects()->Data[ 45101 ];

	ASanctumAIControllerAirDodger_execSetNextTarget_Parms SetNextTarget_Parms;

	this->ProcessEvent ( pFnSetNextTarget, &SetNextTarget_Parms, NULL );
};

// Function Sanctum.SanctumEnemyDodger.Destroyed
// [0x00020102] 
// Parameters infos:

void ASanctumEnemyDodger::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 47493 ];

	ASanctumEnemyDodger_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumEnemyDodger.SpawnGibs
// [0x00020102] 
// Parameters infos:
// class UClass*                  SanctumDamageType              ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASanctumEnemyDodger::SpawnGibs ( class UClass* SanctumDamageType, struct FVector HitLocation )
{
	static UFunction* pFnSpawnGibs = NULL;

	if ( ! pFnSpawnGibs )
		pFnSpawnGibs = (UFunction*) UObject::GObjObjects()->Data[ 47490 ];

	ASanctumEnemyDodger_execSpawnGibs_Parms SpawnGibs_Parms;
	SpawnGibs_Parms.SanctumDamageType = SanctumDamageType;
	memcpy ( &SpawnGibs_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSpawnGibs, &SpawnGibs_Parms, NULL );
};

// Function Sanctum.SanctumEnemyDodger.PlayerKilledEnemyStats
// [0x00020002] 
// Parameters infos:
// class ASanctumPlayerReplicationInfo* PRI                            ( CPF_Parm )

void ASanctumEnemyDodger::PlayerKilledEnemyStats ( class ASanctumPlayerReplicationInfo* PRI )
{
	static UFunction* pFnPlayerKilledEnemyStats = NULL;

	if ( ! pFnPlayerKilledEnemyStats )
		pFnPlayerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47487 ];

	ASanctumEnemyDodger_execPlayerKilledEnemyStats_Parms PlayerKilledEnemyStats_Parms;
	PlayerKilledEnemyStats_Parms.PRI = PRI;

	this->ProcessEvent ( pFnPlayerKilledEnemyStats, &PlayerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyDodger.TowerKilledEnemyStats
// [0x00020002] 
// Parameters infos:

void ASanctumEnemyDodger::TowerKilledEnemyStats ( )
{
	static UFunction* pFnTowerKilledEnemyStats = NULL;

	if ( ! pFnTowerKilledEnemyStats )
		pFnTowerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47484 ];

	ASanctumEnemyDodger_execTowerKilledEnemyStats_Parms TowerKilledEnemyStats_Parms;

	this->ProcessEvent ( pFnTowerKilledEnemyStats, &TowerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyDodger.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumEnemyDodger::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47480 ];

	ASanctumEnemyDodger_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumAIControllerGround.FindTarget
// [0x00020002] 
// Parameters infos:

void ASanctumAIControllerGround::FindTarget ( )
{
	static UFunction* pFnFindTarget = NULL;

	if ( ! pFnFindTarget )
		pFnFindTarget = (UFunction*) UObject::GObjObjects()->Data[ 45136 ];

	ASanctumAIControllerGround_execFindTarget_Parms FindTarget_Parms;

	this->ProcessEvent ( pFnFindTarget, &FindTarget_Parms, NULL );
};

// Function Sanctum.SanctumAIControllerGround.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumAIControllerGround::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 45135 ];

	ASanctumAIControllerGround_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumAIDummy.CanFindGoal
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )
// unsigned long                  blockTowerBase                 ( CPF_OptionalParm | CPF_Parm )

bool ASanctumAIDummy::CanFindGoal ( class ASanctumTowerBase* TowerBase, unsigned long blockTowerBase )
{
	static UFunction* pFnCanFindGoal = NULL;

	if ( ! pFnCanFindGoal )
		pFnCanFindGoal = (UFunction*) UObject::GObjObjects()->Data[ 45169 ];

	ASanctumAIDummy_execCanFindGoal_Parms CanFindGoal_Parms;
	CanFindGoal_Parms.TowerBase = TowerBase;
	CanFindGoal_Parms.blockTowerBase = blockTowerBase;

	this->ProcessEvent ( pFnCanFindGoal, &CanFindGoal_Parms, NULL );

	return CanFindGoal_Parms.ReturnValue;
};

// Function Sanctum.SanctumAIDummy.PathHasChanged
// [0x00420102] 
// Parameters infos:
// TArray< class ANavigationPoint* > newRoute                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumAIDummy::PathHasChanged ( TArray< class ANavigationPoint* >* newRoute )
{
	static UFunction* pFnPathHasChanged = NULL;

	if ( ! pFnPathHasChanged )
		pFnPathHasChanged = (UFunction*) UObject::GObjObjects()->Data[ 45165 ];

	ASanctumAIDummy_execPathHasChanged_Parms PathHasChanged_Parms;

	this->ProcessEvent ( pFnPathHasChanged, &PathHasChanged_Parms, NULL );

	if ( newRoute )
		memcpy ( newRoute, &PathHasChanged_Parms.newRoute, 0xC );
};

// Function Sanctum.SanctumAIDummy.CacheRoute
// [0x00420102] 
// Parameters infos:
// TArray< class ANavigationPoint* > routeToCache                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumAIDummy::CacheRoute ( TArray< class ANavigationPoint* >* routeToCache )
{
	static UFunction* pFnCacheRoute = NULL;

	if ( ! pFnCacheRoute )
		pFnCacheRoute = (UFunction*) UObject::GObjObjects()->Data[ 45161 ];

	ASanctumAIDummy_execCacheRoute_Parms CacheRoute_Parms;

	this->ProcessEvent ( pFnCacheRoute, &CacheRoute_Parms, NULL );

	if ( routeToCache )
		memcpy ( routeToCache, &CacheRoute_Parms.routeToCache, 0xC );
};

// Function Sanctum.SanctumAIDummy.IsPathDirty
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< class ANavigationPoint* > newRoute                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ASanctumAIDummy::IsPathDirty ( TArray< class ANavigationPoint* >* newRoute )
{
	static UFunction* pFnIsPathDirty = NULL;

	if ( ! pFnIsPathDirty )
		pFnIsPathDirty = (UFunction*) UObject::GObjObjects()->Data[ 45156 ];

	ASanctumAIDummy_execIsPathDirty_Parms IsPathDirty_Parms;

	this->ProcessEvent ( pFnIsPathDirty, &IsPathDirty_Parms, NULL );

	if ( newRoute )
		memcpy ( newRoute, &IsPathDirty_Parms.newRoute, 0xC );

	return IsPathDirty_Parms.ReturnValue;
};

// Function Sanctum.SanctumAIDummy.CallMarkPathAsDirty
// [0x00020102] 
// Parameters infos:

void ASanctumAIDummy::CallMarkPathAsDirty ( )
{
	static UFunction* pFnCallMarkPathAsDirty = NULL;

	if ( ! pFnCallMarkPathAsDirty )
		pFnCallMarkPathAsDirty = (UFunction*) UObject::GObjObjects()->Data[ 45155 ];

	ASanctumAIDummy_execCallMarkPathAsDirty_Parms CallMarkPathAsDirty_Parms;

	this->ProcessEvent ( pFnCallMarkPathAsDirty, &CallMarkPathAsDirty_Parms, NULL );
};

// Function Sanctum.SanctumAIDummy.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   inPawn                         ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void ASanctumAIDummy::eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = (UFunction*) UObject::GObjObjects()->Data[ 45152 ];

	ASanctumAIDummy_eventPossess_Parms Possess_Parms;
	Possess_Parms.inPawn = inPawn;
	Possess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function Sanctum.SanctumAIDummy.FindCore
// [0x00020102] 
// Parameters infos:
// class ASanctumCore*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASanctumCore* ASanctumAIDummy::FindCore ( )
{
	static UFunction* pFnFindCore = NULL;

	if ( ! pFnFindCore )
		pFnFindCore = (UFunction*) UObject::GObjObjects()->Data[ 45149 ];

	ASanctumAIDummy_execFindCore_Parms FindCore_Parms;

	this->ProcessEvent ( pFnFindCore, &FindCore_Parms, NULL );

	return FindCore_Parms.ReturnValue;
};

// Function Sanctum.SanctumAIDummy.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumAIDummy::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 45146 ];

	ASanctumAIDummy_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.ToggleOn
// [0x00020002] 
// Parameters infos:

void ASanctumTowerBase::ToggleOn ( )
{
	static UFunction* pFnToggleOn = NULL;

	if ( ! pFnToggleOn )
		pFnToggleOn = (UFunction*) UObject::GObjObjects()->Data[ 55911 ];

	ASanctumTowerBase_execToggleOn_Parms ToggleOn_Parms;

	this->ProcessEvent ( pFnToggleOn, &ToggleOn_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.ToggleOff
// [0x00020002] 
// Parameters infos:

void ASanctumTowerBase::ToggleOff ( )
{
	static UFunction* pFnToggleOff = NULL;

	if ( ! pFnToggleOff )
		pFnToggleOff = (UFunction*) UObject::GObjObjects()->Data[ 55910 ];

	ASanctumTowerBase_execToggleOff_Parms ToggleOff_Parms;

	this->ProcessEvent ( pFnToggleOff, &ToggleOff_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.SellTower
// [0x00820002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumTowerBase::SellTower ( )
{
	static UFunction* pFnSellTower = NULL;

	if ( ! pFnSellTower )
		pFnSellTower = (UFunction*) UObject::GObjObjects()->Data[ 46117 ];

	ASanctumTowerBase_execSellTower_Parms SellTower_Parms;

	this->ProcessEvent ( pFnSellTower, &SellTower_Parms, NULL );

	return SellTower_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBase.SetPathnodeBlocking
// [0x00020102] 
// Parameters infos:
// unsigned long                  newVal                         ( CPF_Parm )

void ASanctumTowerBase::SetPathnodeBlocking ( unsigned long newVal )
{
	static UFunction* pFnSetPathnodeBlocking = NULL;

	if ( ! pFnSetPathnodeBlocking )
		pFnSetPathnodeBlocking = (UFunction*) UObject::GObjObjects()->Data[ 55902 ];

	ASanctumTowerBase_execSetPathnodeBlocking_Parms SetPathnodeBlocking_Parms;
	SetPathnodeBlocking_Parms.newVal = newVal;

	this->ProcessEvent ( pFnSetPathnodeBlocking, &SetPathnodeBlocking_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.UpdatePathNextFrame
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBase::UpdatePathNextFrame ( )
{
	static UFunction* pFnUpdatePathNextFrame = NULL;

	if ( ! pFnUpdatePathNextFrame )
		pFnUpdatePathNextFrame = (UFunction*) UObject::GObjObjects()->Data[ 55901 ];

	ASanctumTowerBase_execUpdatePathNextFrame_Parms UpdatePathNextFrame_Parms;

	this->ProcessEvent ( pFnUpdatePathNextFrame, &UpdatePathNextFrame_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.SetHologram
// [0x00020102] 
// Parameters infos:
// class ASanctumTowerHologram*   hologram                       ( CPF_Parm )

void ASanctumTowerBase::SetHologram ( class ASanctumTowerHologram* hologram )
{
	static UFunction* pFnSetHologram = NULL;

	if ( ! pFnSetHologram )
		pFnSetHologram = (UFunction*) UObject::GObjObjects()->Data[ 55899 ];

	ASanctumTowerBase_execSetHologram_Parms SetHologram_Parms;
	SetHologram_Parms.hologram = hologram;

	this->ProcessEvent ( pFnSetHologram, &SetHologram_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.DelayedSetLocationRotation
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBase::DelayedSetLocationRotation ( )
{
	static UFunction* pFnDelayedSetLocationRotation = NULL;

	if ( ! pFnDelayedSetLocationRotation )
		pFnDelayedSetLocationRotation = (UFunction*) UObject::GObjObjects()->Data[ 55898 ];

	ASanctumTowerBase_execDelayedSetLocationRotation_Parms DelayedSetLocationRotation_Parms;

	this->ProcessEvent ( pFnDelayedSetLocationRotation, &DelayedSetLocationRotation_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.SetTower
// [0x00024102] 
// Parameters infos:
// class ASanctumTowerBaseAttachment* Tower                          ( CPF_Parm )
// unsigned long                  fromReplication                ( CPF_OptionalParm | CPF_Parm )

void ASanctumTowerBase::SetTower ( class ASanctumTowerBaseAttachment* Tower, unsigned long fromReplication )
{
	static UFunction* pFnSetTower = NULL;

	if ( ! pFnSetTower )
		pFnSetTower = (UFunction*) UObject::GObjObjects()->Data[ 55895 ];

	ASanctumTowerBase_execSetTower_Parms SetTower_Parms;
	SetTower_Parms.Tower = Tower;
	SetTower_Parms.fromReplication = fromReplication;

	this->ProcessEvent ( pFnSetTower, &SetTower_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.GetBuildLocationRotation
// [0x00420002] 
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void ASanctumTowerBase::GetBuildLocationRotation ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetBuildLocationRotation = NULL;

	if ( ! pFnGetBuildLocationRotation )
		pFnGetBuildLocationRotation = (UFunction*) UObject::GObjObjects()->Data[ 55892 ];

	ASanctumTowerBase_execGetBuildLocationRotation_Parms GetBuildLocationRotation_Parms;

	this->ProcessEvent ( pFnGetBuildLocationRotation, &GetBuildLocationRotation_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetBuildLocationRotation_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetBuildLocationRotation_Parms.out_Rotation, 0xC );
};

// Function Sanctum.SanctumTowerBase.GetLocationOffset
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASanctumTowerBase::GetLocationOffset ( )
{
	static UFunction* pFnGetLocationOffset = NULL;

	if ( ! pFnGetLocationOffset )
		pFnGetLocationOffset = (UFunction*) UObject::GObjObjects()->Data[ 55890 ];

	ASanctumTowerBase_execGetLocationOffset_Parms GetLocationOffset_Parms;

	this->ProcessEvent ( pFnGetLocationOffset, &GetLocationOffset_Parms, NULL );

	return GetLocationOffset_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBase.FindClosestPathNode
// [0x00020002] 
// Parameters infos:
// class APathNode*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APathNode* ASanctumTowerBase::FindClosestPathNode ( )
{
	static UFunction* pFnFindClosestPathNode = NULL;

	if ( ! pFnFindClosestPathNode )
		pFnFindClosestPathNode = (UFunction*) UObject::GObjObjects()->Data[ 55884 ];

	ASanctumTowerBase_execFindClosestPathNode_Parms FindClosestPathNode_Parms;

	this->ProcessEvent ( pFnFindClosestPathNode, &FindClosestPathNode_Parms, NULL );

	return FindClosestPathNode_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBase.EnterExterminationPhase
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBase::EnterExterminationPhase ( )
{
	static UFunction* pFnEnterExterminationPhase = NULL;

	if ( ! pFnEnterExterminationPhase )
		pFnEnterExterminationPhase = (UFunction*) UObject::GObjObjects()->Data[ 55883 ];

	ASanctumTowerBase_execEnterExterminationPhase_Parms EnterExterminationPhase_Parms;

	this->ProcessEvent ( pFnEnterExterminationPhase, &EnterExterminationPhase_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.enterBuildPhase
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBase::enterBuildPhase ( )
{
	static UFunction* pFnenterBuildPhase = NULL;

	if ( ! pFnenterBuildPhase )
		pFnenterBuildPhase = (UFunction*) UObject::GObjObjects()->Data[ 55882 ];

	ASanctumTowerBase_execenterBuildPhase_Parms enterBuildPhase_Parms;

	this->ProcessEvent ( pFnenterBuildPhase, &enterBuildPhase_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.ResetOwnerInvestments
// [0x00020102] 
// Parameters infos:
// class UClass*                  Tower                          ( CPF_Parm )

void ASanctumTowerBase::ResetOwnerInvestments ( class UClass* Tower )
{
	static UFunction* pFnResetOwnerInvestments = NULL;

	if ( ! pFnResetOwnerInvestments )
		pFnResetOwnerInvestments = (UFunction*) UObject::GObjObjects()->Data[ 55879 ];

	ASanctumTowerBase_execResetOwnerInvestments_Parms ResetOwnerInvestments_Parms;
	ResetOwnerInvestments_Parms.Tower = Tower;

	this->ProcessEvent ( pFnResetOwnerInvestments, &ResetOwnerInvestments_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.GetOwnerInvestmentsArray
// [0x00420102] 
// Parameters infos:
// class UClass*                  Tower                          ( CPF_Parm )
// TArray< int >                  ownerInvestment                ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumTowerBase::GetOwnerInvestmentsArray ( class UClass* Tower, TArray< int >* ownerInvestment )
{
	static UFunction* pFnGetOwnerInvestmentsArray = NULL;

	if ( ! pFnGetOwnerInvestmentsArray )
		pFnGetOwnerInvestmentsArray = (UFunction*) UObject::GObjObjects()->Data[ 55873 ];

	ASanctumTowerBase_execGetOwnerInvestmentsArray_Parms GetOwnerInvestmentsArray_Parms;
	GetOwnerInvestmentsArray_Parms.Tower = Tower;

	this->ProcessEvent ( pFnGetOwnerInvestmentsArray, &GetOwnerInvestmentsArray_Parms, NULL );

	if ( ownerInvestment )
		memcpy ( ownerInvestment, &GetOwnerInvestmentsArray_Parms.ownerInvestment, 0xC );
};

// Function Sanctum.SanctumTowerBase.ToggleBaseHologramHidden
// [0x00020102] 
// Parameters infos:
// unsigned long                  Hidden                         ( CPF_Parm )

void ASanctumTowerBase::ToggleBaseHologramHidden ( unsigned long Hidden )
{
	static UFunction* pFnToggleBaseHologramHidden = NULL;

	if ( ! pFnToggleBaseHologramHidden )
		pFnToggleBaseHologramHidden = (UFunction*) UObject::GObjObjects()->Data[ 55871 ];

	ASanctumTowerBase_execToggleBaseHologramHidden_Parms ToggleBaseHologramHidden_Parms;
	ToggleBaseHologramHidden_Parms.Hidden = Hidden;

	this->ProcessEvent ( pFnToggleBaseHologramHidden, &ToggleBaseHologramHidden_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.ClearPotentialInvestments
// [0x00020002] 
// Parameters infos:

void ASanctumTowerBase::ClearPotentialInvestments ( )
{
	static UFunction* pFnClearPotentialInvestments = NULL;

	if ( ! pFnClearPotentialInvestments )
		pFnClearPotentialInvestments = (UFunction*) UObject::GObjObjects()->Data[ 55869 ];

	ASanctumTowerBase_execClearPotentialInvestments_Parms ClearPotentialInvestments_Parms;

	this->ProcessEvent ( pFnClearPotentialInvestments, &ClearPotentialInvestments_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.GetPotentialPlayerInvestment
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            slotNr                         ( CPF_Parm )

int ASanctumTowerBase::GetPotentialPlayerInvestment ( int slotNr )
{
	static UFunction* pFnGetPotentialPlayerInvestment = NULL;

	if ( ! pFnGetPotentialPlayerInvestment )
		pFnGetPotentialPlayerInvestment = (UFunction*) UObject::GObjObjects()->Data[ 51082 ];

	ASanctumTowerBase_execGetPotentialPlayerInvestment_Parms GetPotentialPlayerInvestment_Parms;
	GetPotentialPlayerInvestment_Parms.slotNr = slotNr;

	this->ProcessEvent ( pFnGetPotentialPlayerInvestment, &GetPotentialPlayerInvestment_Parms, NULL );

	return GetPotentialPlayerInvestment_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBase.GetPotentialInvestment
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumTowerBase::GetPotentialInvestment ( )
{
	static UFunction* pFnGetPotentialInvestment = NULL;

	if ( ! pFnGetPotentialInvestment )
		pFnGetPotentialInvestment = (UFunction*) UObject::GObjObjects()->Data[ 51073 ];

	ASanctumTowerBase_execGetPotentialInvestment_Parms GetPotentialInvestment_Parms;

	this->ProcessEvent ( pFnGetPotentialInvestment, &GetPotentialInvestment_Parms, NULL );

	return GetPotentialInvestment_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBase.SetPotentialOwnerInvestment
// [0x00020102] 
// Parameters infos:
// int                            Rubel                          ( CPF_Parm )
// int                            slotNr                         ( CPF_Parm )

void ASanctumTowerBase::SetPotentialOwnerInvestment ( int Rubel, int slotNr )
{
	static UFunction* pFnSetPotentialOwnerInvestment = NULL;

	if ( ! pFnSetPotentialOwnerInvestment )
		pFnSetPotentialOwnerInvestment = (UFunction*) UObject::GObjObjects()->Data[ 55863 ];

	ASanctumTowerBase_execSetPotentialOwnerInvestment_Parms SetPotentialOwnerInvestment_Parms;
	SetPotentialOwnerInvestment_Parms.Rubel = Rubel;
	SetPotentialOwnerInvestment_Parms.slotNr = slotNr;

	this->ProcessEvent ( pFnSetPotentialOwnerInvestment, &SetPotentialOwnerInvestment_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.ClearPotentialTowerClass
// [0x00020002] 
// Parameters infos:
// int                            slotNr                         ( CPF_Parm )

void ASanctumTowerBase::ClearPotentialTowerClass ( int slotNr )
{
	static UFunction* pFnClearPotentialTowerClass = NULL;

	if ( ! pFnClearPotentialTowerClass )
		pFnClearPotentialTowerClass = (UFunction*) UObject::GObjObjects()->Data[ 55861 ];

	ASanctumTowerBase_execClearPotentialTowerClass_Parms ClearPotentialTowerClass_Parms;
	ClearPotentialTowerClass_Parms.slotNr = slotNr;

	this->ProcessEvent ( pFnClearPotentialTowerClass, &ClearPotentialTowerClass_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.SetPotentialTowerClass
// [0x00020002] 
// Parameters infos:
// class UClass*                  towerClass                     ( CPF_Parm )
// int                            slotNr                         ( CPF_Parm )

void ASanctumTowerBase::SetPotentialTowerClass ( class UClass* towerClass, int slotNr )
{
	static UFunction* pFnSetPotentialTowerClass = NULL;

	if ( ! pFnSetPotentialTowerClass )
		pFnSetPotentialTowerClass = (UFunction*) UObject::GObjObjects()->Data[ 55858 ];

	ASanctumTowerBase_execSetPotentialTowerClass_Parms SetPotentialTowerClass_Parms;
	SetPotentialTowerClass_Parms.towerClass = towerClass;
	SetPotentialTowerClass_Parms.slotNr = slotNr;

	this->ProcessEvent ( pFnSetPotentialTowerClass, &SetPotentialTowerClass_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.GetPotentialAmountCompleted
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            slotNr                         ( CPF_Parm )

float ASanctumTowerBase::GetPotentialAmountCompleted ( int slotNr )
{
	static UFunction* pFnGetPotentialAmountCompleted = NULL;

	if ( ! pFnGetPotentialAmountCompleted )
		pFnGetPotentialAmountCompleted = (UFunction*) UObject::GObjObjects()->Data[ 55855 ];

	ASanctumTowerBase_execGetPotentialAmountCompleted_Parms GetPotentialAmountCompleted_Parms;
	GetPotentialAmountCompleted_Parms.slotNr = slotNr;

	this->ProcessEvent ( pFnGetPotentialAmountCompleted, &GetPotentialAmountCompleted_Parms, NULL );

	return GetPotentialAmountCompleted_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBase.SetPotentialAmountCompleted
// [0x00020102] 
// Parameters infos:
// int                            slotNr                         ( CPF_Parm )
// float                          completion                     ( CPF_Parm )

void ASanctumTowerBase::SetPotentialAmountCompleted ( int slotNr, float completion )
{
	static UFunction* pFnSetPotentialAmountCompleted = NULL;

	if ( ! pFnSetPotentialAmountCompleted )
		pFnSetPotentialAmountCompleted = (UFunction*) UObject::GObjObjects()->Data[ 55851 ];

	ASanctumTowerBase_execSetPotentialAmountCompleted_Parms SetPotentialAmountCompleted_Parms;
	SetPotentialAmountCompleted_Parms.slotNr = slotNr;
	SetPotentialAmountCompleted_Parms.completion = completion;

	this->ProcessEvent ( pFnSetPotentialAmountCompleted, &SetPotentialAmountCompleted_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.SetOwnerInvestment
// [0x00020002] 
// Parameters infos:
// int                            Resources                      ( CPF_Parm )
// int                            SlotNumber                     ( CPF_Parm )
// class UClass*                  Tower                          ( CPF_Parm )

void ASanctumTowerBase::SetOwnerInvestment ( int Resources, int SlotNumber, class UClass* Tower )
{
	static UFunction* pFnSetOwnerInvestment = NULL;

	if ( ! pFnSetOwnerInvestment )
		pFnSetOwnerInvestment = (UFunction*) UObject::GObjObjects()->Data[ 55847 ];

	ASanctumTowerBase_execSetOwnerInvestment_Parms SetOwnerInvestment_Parms;
	SetOwnerInvestment_Parms.Resources = Resources;
	SetOwnerInvestment_Parms.SlotNumber = SlotNumber;
	SetOwnerInvestment_Parms.Tower = Tower;

	this->ProcessEvent ( pFnSetOwnerInvestment, &SetOwnerInvestment_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.AddOwnerInvestment
// [0x00020002] 
// Parameters infos:
// int                            Resources                      ( CPF_Parm )
// int                            SlotNumber                     ( CPF_Parm )

void ASanctumTowerBase::AddOwnerInvestment ( int Resources, int SlotNumber )
{
	static UFunction* pFnAddOwnerInvestment = NULL;

	if ( ! pFnAddOwnerInvestment )
		pFnAddOwnerInvestment = (UFunction*) UObject::GObjObjects()->Data[ 55844 ];

	ASanctumTowerBase_execAddOwnerInvestment_Parms AddOwnerInvestment_Parms;
	AddOwnerInvestment_Parms.Resources = Resources;
	AddOwnerInvestment_Parms.SlotNumber = SlotNumber;

	this->ProcessEvent ( pFnAddOwnerInvestment, &AddOwnerInvestment_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumTowerBase::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 55842 ];

	ASanctumTowerBase_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumTowerBase.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBase::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 55840 ];

	ASanctumTowerBase_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumAudioManager.PlayGibSound
// [0x00020002] 
// Parameters infos:
// class USoundCue*               Sound                          ( CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_Parm )

void USanctumAudioManager::PlayGibSound ( class USoundCue* Sound, struct FVector SoundLocation )
{
	static UFunction* pFnPlayGibSound = NULL;

	if ( ! pFnPlayGibSound )
		pFnPlayGibSound = (UFunction*) UObject::GObjObjects()->Data[ 45289 ];

	USanctumAudioManager_execPlayGibSound_Parms PlayGibSound_Parms;
	PlayGibSound_Parms.Sound = Sound;
	memcpy ( &PlayGibSound_Parms.SoundLocation, &SoundLocation, 0xC );

	this->ProcessEvent ( pFnPlayGibSound, &PlayGibSound_Parms, NULL );
};

// Function Sanctum.SanctumAudioManager.PlayDyingSound
// [0x00020002] 
// Parameters infos:
// class USoundCue*               Sound                          ( CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_Parm )

void USanctumAudioManager::PlayDyingSound ( class USoundCue* Sound, struct FVector SoundLocation )
{
	static UFunction* pFnPlayDyingSound = NULL;

	if ( ! pFnPlayDyingSound )
		pFnPlayDyingSound = (UFunction*) UObject::GObjObjects()->Data[ 45285 ];

	USanctumAudioManager_execPlayDyingSound_Parms PlayDyingSound_Parms;
	PlayDyingSound_Parms.Sound = Sound;
	memcpy ( &PlayDyingSound_Parms.SoundLocation, &SoundLocation, 0xC );

	this->ProcessEvent ( pFnPlayDyingSound, &PlayDyingSound_Parms, NULL );
};

// Function Sanctum.SanctumAudioManager.PlayMortarExplotionSound
// [0x00020002] 
// Parameters infos:
// class USoundCue*               Sound                          ( CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_Parm )

void USanctumAudioManager::PlayMortarExplotionSound ( class USoundCue* Sound, struct FVector SoundLocation )
{
	static UFunction* pFnPlayMortarExplotionSound = NULL;

	if ( ! pFnPlayMortarExplotionSound )
		pFnPlayMortarExplotionSound = (UFunction*) UObject::GObjObjects()->Data[ 45281 ];

	USanctumAudioManager_execPlayMortarExplotionSound_Parms PlayMortarExplotionSound_Parms;
	PlayMortarExplotionSound_Parms.Sound = Sound;
	memcpy ( &PlayMortarExplotionSound_Parms.SoundLocation, &SoundLocation, 0xC );

	this->ProcessEvent ( pFnPlayMortarExplotionSound, &PlayMortarExplotionSound_Parms, NULL );
};

// Function Sanctum.SanctumAudioManager.PlayTakeHitSound
// [0x00020002] 
// Parameters infos:
// class USoundCue*               Sound                          ( CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_Parm )

void USanctumAudioManager::PlayTakeHitSound ( class USoundCue* Sound, struct FVector SoundLocation )
{
	static UFunction* pFnPlayTakeHitSound = NULL;

	if ( ! pFnPlayTakeHitSound )
		pFnPlayTakeHitSound = (UFunction*) UObject::GObjObjects()->Data[ 45277 ];

	USanctumAudioManager_execPlayTakeHitSound_Parms PlayTakeHitSound_Parms;
	PlayTakeHitSound_Parms.Sound = Sound;
	memcpy ( &PlayTakeHitSound_Parms.SoundLocation, &SoundLocation, 0xC );

	this->ProcessEvent ( pFnPlayTakeHitSound, &PlayTakeHitSound_Parms, NULL );
};

// Function Sanctum.SanctumAudioManager.PlayImmuneSound
// [0x00020002] 
// Parameters infos:
// class USoundCue*               Sound                          ( CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_Parm )
// class AActor*                  InstigatedBy                   ( CPF_Parm )

void USanctumAudioManager::PlayImmuneSound ( class USoundCue* Sound, struct FVector SoundLocation, class AActor* InstigatedBy )
{
	static UFunction* pFnPlayImmuneSound = NULL;

	if ( ! pFnPlayImmuneSound )
		pFnPlayImmuneSound = (UFunction*) UObject::GObjObjects()->Data[ 45270 ];

	USanctumAudioManager_execPlayImmuneSound_Parms PlayImmuneSound_Parms;
	PlayImmuneSound_Parms.Sound = Sound;
	memcpy ( &PlayImmuneSound_Parms.SoundLocation, &SoundLocation, 0xC );
	PlayImmuneSound_Parms.InstigatedBy = InstigatedBy;

	this->ProcessEvent ( pFnPlayImmuneSound, &PlayImmuneSound_Parms, NULL );
};

// Function Sanctum.SanctumAudioManager.DisplayDebug
// [0x00C20102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void USanctumAudioManager::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 45250 ];

	USanctumAudioManager_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Sanctum.SanctumAudioManager.IsAttenuated
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAudioComponent*         AC                             ( CPF_Parm | CPF_EditInline )

bool USanctumAudioManager::IsAttenuated ( class UAudioComponent* AC )
{
	static UFunction* pFnIsAttenuated = NULL;

	if ( ! pFnIsAttenuated )
		pFnIsAttenuated = (UFunction*) UObject::GObjObjects()->Data[ 45246 ];

	USanctumAudioManager_execIsAttenuated_Parms IsAttenuated_Parms;
	IsAttenuated_Parms.AC = AC;

	this->ProcessEvent ( pFnIsAttenuated, &IsAttenuated_Parms, NULL );

	return IsAttenuated_Parms.ReturnValue;
};

// Function Sanctum.SanctumAudioManager.GetAttenuationDistance
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAudioComponent*         AC                             ( CPF_Parm | CPF_EditInline )

float USanctumAudioManager::GetAttenuationDistance ( class UAudioComponent* AC )
{
	static UFunction* pFnGetAttenuationDistance = NULL;

	if ( ! pFnGetAttenuationDistance )
		pFnGetAttenuationDistance = (UFunction*) UObject::GObjObjects()->Data[ 45242 ];

	USanctumAudioManager_execGetAttenuationDistance_Parms GetAttenuationDistance_Parms;
	GetAttenuationDistance_Parms.AC = AC;

	this->ProcessEvent ( pFnGetAttenuationDistance, &GetAttenuationDistance_Parms, NULL );

	return GetAttenuationDistance_Parms.ReturnValue;
};

// Function Sanctum.SanctumAudioManager.GetNumChannels
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAudioComponent*         AC                             ( CPF_Parm | CPF_EditInline )

int USanctumAudioManager::GetNumChannels ( class UAudioComponent* AC )
{
	static UFunction* pFnGetNumChannels = NULL;

	if ( ! pFnGetNumChannels )
		pFnGetNumChannels = (UFunction*) UObject::GObjObjects()->Data[ 45238 ];

	USanctumAudioManager_execGetNumChannels_Parms GetNumChannels_Parms;
	GetNumChannels_Parms.AC = AC;

	this->ProcessEvent ( pFnGetNumChannels, &GetNumChannels_Parms, NULL );

	return GetNumChannels_Parms.ReturnValue;
};

// Function Sanctum.SanctumAudioManager.DepthFirstSearchForNode
// [0x00020002] 
// Parameters infos:
// class USoundNode*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USoundNode*              Node                           ( CPF_Parm )
// class UClass*                  SoundNodeClass                 ( CPF_Parm )

class USoundNode* USanctumAudioManager::DepthFirstSearchForNode ( class USoundNode* Node, class UClass* SoundNodeClass )
{
	static UFunction* pFnDepthFirstSearchForNode = NULL;

	if ( ! pFnDepthFirstSearchForNode )
		pFnDepthFirstSearchForNode = (UFunction*) UObject::GObjObjects()->Data[ 45232 ];

	USanctumAudioManager_execDepthFirstSearchForNode_Parms DepthFirstSearchForNode_Parms;
	DepthFirstSearchForNode_Parms.Node = Node;
	DepthFirstSearchForNode_Parms.SoundNodeClass = SoundNodeClass;

	this->ProcessEvent ( pFnDepthFirstSearchForNode, &DepthFirstSearchForNode_Parms, NULL );

	return DepthFirstSearchForNode_Parms.ReturnValue;
};

// Function Sanctum.SanctumBeachGrill.Animate
// [0x00020102] 
// Parameters infos:

void ASanctumBeachGrill::Animate ( )
{
	static UFunction* pFnAnimate = NULL;

	if ( ! pFnAnimate )
		pFnAnimate = (UFunction*) UObject::GObjObjects()->Data[ 45309 ];

	ASanctumBeachGrill_execAnimate_Parms Animate_Parms;

	this->ProcessEvent ( pFnAnimate, &Animate_Parms, NULL );
};

// Function Sanctum.SanctumBeachGrill.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            DamageAmount                   ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumBeachGrill::eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 45299 ];

	ASanctumBeachGrill_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.DamageAmount = DamageAmount;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Sanctum.SanctumBeachGrill.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumBeachGrill::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 45297 ];

	ASanctumBeachGrill_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumBeachParasol.Animate
// [0x00020102] 
// Parameters infos:

void ASanctumBeachParasol::Animate ( )
{
	static UFunction* pFnAnimate = NULL;

	if ( ! pFnAnimate )
		pFnAnimate = (UFunction*) UObject::GObjObjects()->Data[ 45331 ];

	ASanctumBeachParasol_execAnimate_Parms Animate_Parms;

	this->ProcessEvent ( pFnAnimate, &Animate_Parms, NULL );
};

// Function Sanctum.SanctumBeachParasol.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            DamageAmount                   ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumBeachParasol::eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 45322 ];

	ASanctumBeachParasol_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.DamageAmount = DamageAmount;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Sanctum.SanctumBeachParasol.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumBeachParasol::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 45320 ];

	ASanctumBeachParasol_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumBeachParasol.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumBeachParasol::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 45318 ];

	ASanctumBeachParasol_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumBeachRadio.PlaySomeMusic
// [0x00020102] 
// Parameters infos:

void ASanctumBeachRadio::PlaySomeMusic ( )
{
	static UFunction* pFnPlaySomeMusic = NULL;

	if ( ! pFnPlaySomeMusic )
		pFnPlaySomeMusic = (UFunction*) UObject::GObjObjects()->Data[ 45353 ];

	ASanctumBeachRadio_execPlaySomeMusic_Parms PlaySomeMusic_Parms;

	this->ProcessEvent ( pFnPlaySomeMusic, &PlaySomeMusic_Parms, NULL );
};

// Function Sanctum.SanctumBeachRadio.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            DamageAmount                   ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumBeachRadio::eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 45344 ];

	ASanctumBeachRadio_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.DamageAmount = DamageAmount;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Sanctum.SanctumBeachRadio.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumBeachRadio::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 45342 ];

	ASanctumBeachRadio_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumCamera.Tick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASanctumCamera::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 45428 ];

	ASanctumCamera_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumCamera.StopPlacingTower
// [0x00024002] 
// Parameters infos:
// unsigned long                  teleportTransition             ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  eqTransition                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumCamera::StopPlacingTower ( unsigned long teleportTransition, unsigned long eqTransition )
{
	static UFunction* pFnStopPlacingTower = NULL;

	if ( ! pFnStopPlacingTower )
		pFnStopPlacingTower = (UFunction*) UObject::GObjObjects()->Data[ 45373 ];

	ASanctumCamera_execStopPlacingTower_Parms StopPlacingTower_Parms;
	StopPlacingTower_Parms.teleportTransition = teleportTransition;
	StopPlacingTower_Parms.eqTransition = eqTransition;

	this->ProcessEvent ( pFnStopPlacingTower, &StopPlacingTower_Parms, NULL );
};

// Function Sanctum.SanctumCamera.StartPlacingTower
// [0x00020002] 
// Parameters infos:

void ASanctumCamera::StartPlacingTower ( )
{
	static UFunction* pFnStartPlacingTower = NULL;

	if ( ! pFnStartPlacingTower )
		pFnStartPlacingTower = (UFunction*) UObject::GObjObjects()->Data[ 45372 ];

	ASanctumCamera_execStartPlacingTower_Parms StartPlacingTower_Parms;

	this->ProcessEvent ( pFnStartPlacingTower, &StartPlacingTower_Parms, NULL );
};

// Function Sanctum.SanctumCamera.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumCamera::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 45368 ];

	ASanctumCamera_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumCheatManager.UpgradeWeaponToLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   Weapon                         ( CPF_Parm )
// int                            Level                          ( CPF_Parm )

void USanctumCheatManager::UpgradeWeaponToLevel ( struct FName Weapon, int Level )
{
	static UFunction* pFnUpgradeWeaponToLevel = NULL;

	if ( ! pFnUpgradeWeaponToLevel )
		pFnUpgradeWeaponToLevel = (UFunction*) UObject::GObjObjects()->Data[ 45477 ];

	USanctumCheatManager_execUpgradeWeaponToLevel_Parms UpgradeWeaponToLevel_Parms;
	memcpy ( &UpgradeWeaponToLevel_Parms.Weapon, &Weapon, 0x8 );
	UpgradeWeaponToLevel_Parms.Level = Level;

	this->ProcessEvent ( pFnUpgradeWeaponToLevel, &UpgradeWeaponToLevel_Parms, NULL );
};

// Function Sanctum.SanctumCheatManager.showNextEnemies
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  show                           ( CPF_Parm )

void USanctumCheatManager::showNextEnemies ( unsigned long show )
{
	static UFunction* pFnshowNextEnemies = NULL;

	if ( ! pFnshowNextEnemies )
		pFnshowNextEnemies = (UFunction*) UObject::GObjObjects()->Data[ 45474 ];

	USanctumCheatManager_execshowNextEnemies_Parms showNextEnemies_Parms;
	showNextEnemies_Parms.show = show;

	this->ProcessEvent ( pFnshowNextEnemies, &showNextEnemies_Parms, NULL );
};

// Function Sanctum.SanctumCheatManager.showResource
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  show                           ( CPF_Parm )

void USanctumCheatManager::showResource ( unsigned long show )
{
	static UFunction* pFnshowResource = NULL;

	if ( ! pFnshowResource )
		pFnshowResource = (UFunction*) UObject::GObjObjects()->Data[ 45471 ];

	USanctumCheatManager_execshowResource_Parms showResource_Parms;
	showResource_Parms.show = show;

	this->ProcessEvent ( pFnshowResource, &showResource_Parms, NULL );
};

// Function Sanctum.SanctumCheatManager.showLife
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  show                           ( CPF_Parm )

void USanctumCheatManager::showLife ( unsigned long show )
{
	static UFunction* pFnshowLife = NULL;

	if ( ! pFnshowLife )
		pFnshowLife = (UFunction*) UObject::GObjObjects()->Data[ 45468 ];

	USanctumCheatManager_execshowLife_Parms showLife_Parms;
	showLife_Parms.show = show;

	this->ProcessEvent ( pFnshowLife, &showLife_Parms, NULL );
};

// Function Sanctum.SanctumCheatManager.showBuildList
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  show                           ( CPF_Parm )

void USanctumCheatManager::showBuildList ( unsigned long show )
{
	static UFunction* pFnshowBuildList = NULL;

	if ( ! pFnshowBuildList )
		pFnshowBuildList = (UFunction*) UObject::GObjObjects()->Data[ 45464 ];

	USanctumCheatManager_execshowBuildList_Parms showBuildList_Parms;
	showBuildList_Parms.show = show;

	this->ProcessEvent ( pFnshowBuildList, &showBuildList_Parms, NULL );
};

// Function Sanctum.SanctumCheatManager.checkWave
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USanctumCheatManager::checkWave ( )
{
	static UFunction* pFncheckWave = NULL;

	if ( ! pFncheckWave )
		pFncheckWave = (UFunction*) UObject::GObjObjects()->Data[ 45460 ];

	USanctumCheatManager_execcheckWave_Parms checkWave_Parms;

	this->ProcessEvent ( pFncheckWave, &checkWave_Parms, NULL );
};

// Function Sanctum.SanctumCheatManager.UnlockAllLevels
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USanctumCheatManager::UnlockAllLevels ( )
{
	static UFunction* pFnUnlockAllLevels = NULL;

	if ( ! pFnUnlockAllLevels )
		pFnUnlockAllLevels = (UFunction*) UObject::GObjObjects()->Data[ 45453 ];

	USanctumCheatManager_execUnlockAllLevels_Parms UnlockAllLevels_Parms;

	this->ProcessEvent ( pFnUnlockAllLevels, &UnlockAllLevels_Parms, NULL );
};

// Function Sanctum.SanctumCheatManager.WeaponVisibility
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  Visible                        ( CPF_OptionalParm | CPF_Parm )

void USanctumCheatManager::WeaponVisibility ( unsigned long Visible )
{
	static UFunction* pFnWeaponVisibility = NULL;

	if ( ! pFnWeaponVisibility )
		pFnWeaponVisibility = (UFunction*) UObject::GObjObjects()->Data[ 45449 ];

	USanctumCheatManager_execWeaponVisibility_Parms WeaponVisibility_Parms;
	WeaponVisibility_Parms.Visible = Visible;

	this->ProcessEvent ( pFnWeaponVisibility, &WeaponVisibility_Parms, NULL );
};

// Function Sanctum.SanctumCheatManager.setLife
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            life                           ( CPF_Parm )

void USanctumCheatManager::setLife ( int life )
{
	static UFunction* pFnsetLife = NULL;

	if ( ! pFnsetLife )
		pFnsetLife = (UFunction*) UObject::GObjObjects()->Data[ 45447 ];

	USanctumCheatManager_execsetLife_Parms setLife_Parms;
	setLife_Parms.life = life;

	this->ProcessEvent ( pFnsetLife, &setLife_Parms, NULL );
};

// Function Sanctum.SanctumCheatManager.setWave
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void USanctumCheatManager::setWave ( int Wave )
{
	static UFunction* pFnsetWave = NULL;

	if ( ! pFnsetWave )
		pFnsetWave = (UFunction*) UObject::GObjObjects()->Data[ 45442 ];

	USanctumCheatManager_execsetWave_Parms setWave_Parms;
	setWave_Parms.Wave = Wave;

	this->ProcessEvent ( pFnsetWave, &setWave_Parms, NULL );
};

// Function Sanctum.SanctumCheatManager.SetLifeOnEnemies
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            life                           ( CPF_Parm )

void USanctumCheatManager::SetLifeOnEnemies ( int life )
{
	static UFunction* pFnSetLifeOnEnemies = NULL;

	if ( ! pFnSetLifeOnEnemies )
		pFnSetLifeOnEnemies = (UFunction*) UObject::GObjObjects()->Data[ 45439 ];

	USanctumCheatManager_execSetLifeOnEnemies_Parms SetLifeOnEnemies_Parms;
	SetLifeOnEnemies_Parms.life = life;

	this->ProcessEvent ( pFnSetLifeOnEnemies, &SetLifeOnEnemies_Parms, NULL );
};

// Function Sanctum.SanctumCheatManager.GiefRubels
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// int                            rubels                         ( CPF_Parm )
// int                            toSlot                         ( CPF_OptionalParm | CPF_Parm )

void USanctumCheatManager::GiefRubels ( int rubels, int toSlot )
{
	static UFunction* pFnGiefRubels = NULL;

	if ( ! pFnGiefRubels )
		pFnGiefRubels = (UFunction*) UObject::GObjObjects()->Data[ 45436 ];

	USanctumCheatManager_execGiefRubels_Parms GiefRubels_Parms;
	GiefRubels_Parms.rubels = rubels;
	GiefRubels_Parms.toSlot = toSlot;

	this->ProcessEvent ( pFnGiefRubels, &GiefRubels_Parms, NULL );
};

// Function Sanctum.SanctumCheatManager.KillAllEnemies
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USanctumCheatManager::KillAllEnemies ( )
{
	static UFunction* pFnKillAllEnemies = NULL;

	if ( ! pFnKillAllEnemies )
		pFnKillAllEnemies = (UFunction*) UObject::GObjObjects()->Data[ 45435 ];

	USanctumCheatManager_execKillAllEnemies_Parms KillAllEnemies_Parms;

	this->ProcessEvent ( pFnKillAllEnemies, &KillAllEnemies_Parms, NULL );
};

// Function Sanctum.SanctumCheatManager.GiveWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class AWeapon*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 WeaponClassStr                 ( CPF_Parm | CPF_NeedCtorLink )

class AWeapon* USanctumCheatManager::GiveWeapon ( struct FString WeaponClassStr )
{
	static UFunction* pFnGiveWeapon = NULL;

	if ( ! pFnGiveWeapon )
		pFnGiveWeapon = (UFunction*) UObject::GObjObjects()->Data[ 45432 ];

	USanctumCheatManager_execGiveWeapon_Parms GiveWeapon_Parms;
	memcpy ( &GiveWeapon_Parms.WeaponClassStr, &WeaponClassStr, 0xC );

	this->ProcessEvent ( pFnGiveWeapon, &GiveWeapon_Parms, NULL );

	return GiveWeapon_Parms.ReturnValue;
};

// Function Sanctum.SanctumInventoryManager.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumInventoryManager::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 52323 ];

	ASanctumInventoryManager_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.CollectFavouriteWeaponStats
// [0x00020102] 
// Parameters infos:

void ASanctumInventoryManager::CollectFavouriteWeaponStats ( )
{
	static UFunction* pFnCollectFavouriteWeaponStats = NULL;

	if ( ! pFnCollectFavouriteWeaponStats )
		pFnCollectFavouriteWeaponStats = (UFunction*) UObject::GObjObjects()->Data[ 52319 ];

	ASanctumInventoryManager_execCollectFavouriteWeaponStats_Parms CollectFavouriteWeaponStats_Parms;

	this->ProcessEvent ( pFnCollectFavouriteWeaponStats, &CollectFavouriteWeaponStats_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.StopCollectingStats
// [0x00020102] 
// Parameters infos:

void ASanctumInventoryManager::StopCollectingStats ( )
{
	static UFunction* pFnStopCollectingStats = NULL;

	if ( ! pFnStopCollectingStats )
		pFnStopCollectingStats = (UFunction*) UObject::GObjObjects()->Data[ 52317 ];

	ASanctumInventoryManager_execStopCollectingStats_Parms StopCollectingStats_Parms;

	this->ProcessEvent ( pFnStopCollectingStats, &StopCollectingStats_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.AddToFavourite
// [0x00820102] 
// Parameters infos:
// class UClass*                  WeaponClass                    ( CPF_Parm )
// float                          TotalTime                      ( CPF_Parm )
// float                          LastTimeStamp                  ( CPF_Parm )
// unsigned long                  Equipped                       ( CPF_Parm )

void ASanctumInventoryManager::AddToFavourite ( class UClass* WeaponClass, float TotalTime, float LastTimeStamp, unsigned long Equipped )
{
	static UFunction* pFnAddToFavourite = NULL;

	if ( ! pFnAddToFavourite )
		pFnAddToFavourite = (UFunction*) UObject::GObjObjects()->Data[ 52311 ];

	ASanctumInventoryManager_execAddToFavourite_Parms AddToFavourite_Parms;
	AddToFavourite_Parms.WeaponClass = WeaponClass;
	AddToFavourite_Parms.TotalTime = TotalTime;
	AddToFavourite_Parms.LastTimeStamp = LastTimeStamp;
	AddToFavourite_Parms.Equipped = Equipped;

	this->ProcessEvent ( pFnAddToFavourite, &AddToFavourite_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.GetEquipTimeForClass
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  WeaponClass                    ( CPF_Parm )

float ASanctumInventoryManager::GetEquipTimeForClass ( class UClass* WeaponClass )
{
	static UFunction* pFnGetEquipTimeForClass = NULL;

	if ( ! pFnGetEquipTimeForClass )
		pFnGetEquipTimeForClass = (UFunction*) UObject::GObjObjects()->Data[ 45998 ];

	ASanctumInventoryManager_execGetEquipTimeForClass_Parms GetEquipTimeForClass_Parms;
	GetEquipTimeForClass_Parms.WeaponClass = WeaponClass;

	this->ProcessEvent ( pFnGetEquipTimeForClass, &GetEquipTimeForClass_Parms, NULL );

	return GetEquipTimeForClass_Parms.ReturnValue;
};

// Function Sanctum.SanctumInventoryManager.GetFavouriteWeaponClass
// [0x00020102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ASanctumInventoryManager::GetFavouriteWeaponClass ( )
{
	static UFunction* pFnGetFavouriteWeaponClass = NULL;

	if ( ! pFnGetFavouriteWeaponClass )
		pFnGetFavouriteWeaponClass = (UFunction*) UObject::GObjObjects()->Data[ 52304 ];

	ASanctumInventoryManager_execGetFavouriteWeaponClass_Parms GetFavouriteWeaponClass_Parms;

	this->ProcessEvent ( pFnGetFavouriteWeaponClass, &GetFavouriteWeaponClass_Parms, NULL );

	return GetFavouriteWeaponClass_Parms.ReturnValue;
};

// Function Sanctum.SanctumInventoryManager.SetPendingWeapon
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 DesiredWeapon                  ( CPF_Parm )

void ASanctumInventoryManager::SetPendingWeapon ( class AWeapon* DesiredWeapon )
{
	static UFunction* pFnSetPendingWeapon = NULL;

	if ( ! pFnSetPendingWeapon )
		pFnSetPendingWeapon = (UFunction*) UObject::GObjObjects()->Data[ 52302 ];

	ASanctumInventoryManager_execSetPendingWeapon_Parms SetPendingWeapon_Parms;
	SetPendingWeapon_Parms.DesiredWeapon = DesiredWeapon;

	this->ProcessEvent ( pFnSetPendingWeapon, &SetPendingWeapon_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.switchToBuildPhase
// [0x00020002] 
// Parameters infos:
// unsigned long                  buildPhase                     ( CPF_Parm )

void ASanctumInventoryManager::switchToBuildPhase ( unsigned long buildPhase )
{
	static UFunction* pFnswitchToBuildPhase = NULL;

	if ( ! pFnswitchToBuildPhase )
		pFnswitchToBuildPhase = (UFunction*) UObject::GObjObjects()->Data[ 52296 ];

	ASanctumInventoryManager_execswitchToBuildPhase_Parms switchToBuildPhase_Parms;
	switchToBuildPhase_Parms.buildPhase = buildPhase;

	this->ProcessEvent ( pFnswitchToBuildPhase, &switchToBuildPhase_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.ClientWeaponSet
// [0x00024102] 
// Parameters infos:
// class AWeapon*                 NewWeapon                      ( CPF_Parm )
// unsigned long                  bOptionalSet                   ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void ASanctumInventoryManager::ClientWeaponSet ( class AWeapon* NewWeapon, unsigned long bOptionalSet, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = (UFunction*) UObject::GObjObjects()->Data[ 52291 ];

	ASanctumInventoryManager_execClientWeaponSet_Parms ClientWeaponSet_Parms;
	ClientWeaponSet_Parms.NewWeapon = NewWeapon;
	ClientWeaponSet_Parms.bOptionalSet = bOptionalSet;
	ClientWeaponSet_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.ChangedWeapon
// [0x00020102] 
// Parameters infos:

void ASanctumInventoryManager::ChangedWeapon ( )
{
	static UFunction* pFnChangedWeapon = NULL;

	if ( ! pFnChangedWeapon )
		pFnChangedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 52290 ];

	ASanctumInventoryManager_execChangedWeapon_Parms ChangedWeapon_Parms;

	this->ProcessEvent ( pFnChangedWeapon, &ChangedWeapon_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.SwitchWeapon
// [0x00020102] 
// Parameters infos:
// unsigned char                  NewGroup                       ( CPF_Parm )

void ASanctumInventoryManager::SwitchWeapon ( unsigned char NewGroup )
{
	static UFunction* pFnSwitchWeapon = NULL;

	if ( ! pFnSwitchWeapon )
		pFnSwitchWeapon = (UFunction*) UObject::GObjObjects()->Data[ 52285 ];

	ASanctumInventoryManager_execSwitchWeapon_Parms SwitchWeapon_Parms;
	SwitchWeapon_Parms.NewGroup = NewGroup;

	this->ProcessEvent ( pFnSwitchWeapon, &SwitchWeapon_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.StoreSwitch
// [0x00020102] 
// Parameters infos:
// unsigned char                  NewGroup                       ( CPF_Parm )

void ASanctumInventoryManager::StoreSwitch ( unsigned char NewGroup )
{
	static UFunction* pFnStoreSwitch = NULL;

	if ( ! pFnStoreSwitch )
		pFnStoreSwitch = (UFunction*) UObject::GObjObjects()->Data[ 52283 ];

	ASanctumInventoryManager_execStoreSwitch_Parms StoreSwitch_Parms;
	StoreSwitch_Parms.NewGroup = NewGroup;

	this->ProcessEvent ( pFnStoreSwitch, &StoreSwitch_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.GetWeaponList
// [0x00420102] 
// Parameters infos:
// TArray< class ASanctumWeapon* > WeaponList                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumInventoryManager::GetWeaponList ( TArray< class ASanctumWeapon* >* WeaponList )
{
	static UFunction* pFnGetWeaponList = NULL;

	if ( ! pFnGetWeaponList )
		pFnGetWeaponList = (UFunction*) UObject::GObjObjects()->Data[ 52279 ];

	ASanctumInventoryManager_execGetWeaponList_Parms GetWeaponList_Parms;

	this->ProcessEvent ( pFnGetWeaponList, &GetWeaponList_Parms, NULL );

	if ( WeaponList )
		memcpy ( WeaponList, &GetWeaponList_Parms.WeaponList, 0xC );
};

// Function Sanctum.SanctumInventoryManager.PrevWeapon
// [0x00020102] 
// Parameters infos:

void ASanctumInventoryManager::PrevWeapon ( )
{
	static UFunction* pFnPrevWeapon = NULL;

	if ( ! pFnPrevWeapon )
		pFnPrevWeapon = (UFunction*) UObject::GObjObjects()->Data[ 52278 ];

	ASanctumInventoryManager_execPrevWeapon_Parms PrevWeapon_Parms;

	this->ProcessEvent ( pFnPrevWeapon, &PrevWeapon_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.NextWeapon
// [0x00020102] 
// Parameters infos:

void ASanctumInventoryManager::NextWeapon ( )
{
	static UFunction* pFnNextWeapon = NULL;

	if ( ! pFnNextWeapon )
		pFnNextWeapon = (UFunction*) UObject::GObjObjects()->Data[ 52277 ];

	ASanctumInventoryManager_execNextWeapon_Parms NextWeapon_Parms;

	this->ProcessEvent ( pFnNextWeapon, &NextWeapon_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.ProcessViewRotation
// [0x00420102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void ASanctumInventoryManager::ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 52272 ];

	ASanctumInventoryManager_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );
};

// Function Sanctum.SanctumInventoryManager.notifyNewHud
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class ASanctumHUD*             HUD                            ( CPF_Parm )

void ASanctumInventoryManager::eventnotifyNewHud ( class ASanctumHUD* HUD )
{
	static UFunction* pFnnotifyNewHud = NULL;

	if ( ! pFnnotifyNewHud )
		pFnnotifyNewHud = (UFunction*) UObject::GObjObjects()->Data[ 52267 ];

	ASanctumInventoryManager_eventnotifyNewHud_Parms notifyNewHud_Parms;
	notifyNewHud_Parms.HUD = HUD;

	this->ProcessEvent ( pFnnotifyNewHud, &notifyNewHud_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.removeCoolDownListeners
// [0x00020102] 
// Parameters infos:

void ASanctumInventoryManager::removeCoolDownListeners ( )
{
	static UFunction* pFnremoveCoolDownListeners = NULL;

	if ( ! pFnremoveCoolDownListeners )
		pFnremoveCoolDownListeners = (UFunction*) UObject::GObjObjects()->Data[ 52265 ];

	ASanctumInventoryManager_execremoveCoolDownListeners_Parms removeCoolDownListeners_Parms;

	this->ProcessEvent ( pFnremoveCoolDownListeners, &removeCoolDownListeners_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.notifyCurrentWeaponChangedListeners
// [0x00020102] 
// Parameters infos:
// class UClass*                  NewWeapon                      ( CPF_Parm )

void ASanctumInventoryManager::notifyCurrentWeaponChangedListeners ( class UClass* NewWeapon )
{
	static UFunction* pFnnotifyCurrentWeaponChangedListeners = NULL;

	if ( ! pFnnotifyCurrentWeaponChangedListeners )
		pFnnotifyCurrentWeaponChangedListeners = (UFunction*) UObject::GObjObjects()->Data[ 52261 ];

	ASanctumInventoryManager_execnotifyCurrentWeaponChangedListeners_Parms notifyCurrentWeaponChangedListeners_Parms;
	notifyCurrentWeaponChangedListeners_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnnotifyCurrentWeaponChangedListeners, &notifyCurrentWeaponChangedListeners_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.notifyWeaponNumberChangedListeners
// [0x00020102] 
// Parameters infos:
// unsigned char                  WeaponNumber                   ( CPF_Parm )

void ASanctumInventoryManager::notifyWeaponNumberChangedListeners ( unsigned char WeaponNumber )
{
	static UFunction* pFnnotifyWeaponNumberChangedListeners = NULL;

	if ( ! pFnnotifyWeaponNumberChangedListeners )
		pFnnotifyWeaponNumberChangedListeners = (UFunction*) UObject::GObjObjects()->Data[ 52257 ];

	ASanctumInventoryManager_execnotifyWeaponNumberChangedListeners_Parms notifyWeaponNumberChangedListeners_Parms;
	notifyWeaponNumberChangedListeners_Parms.WeaponNumber = WeaponNumber;

	this->ProcessEvent ( pFnnotifyWeaponNumberChangedListeners, &notifyWeaponNumberChangedListeners_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.removeWeaponChangedListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumInventoryManager::removeWeaponChangedListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnremoveWeaponChangedListener = NULL;

	if ( ! pFnremoveWeaponChangedListener )
		pFnremoveWeaponChangedListener = (UFunction*) UObject::GObjObjects()->Data[ 52254 ];

	ASanctumInventoryManager_execremoveWeaponChangedListener_Parms removeWeaponChangedListener_Parms;
	memcpy ( &removeWeaponChangedListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnremoveWeaponChangedListener, &removeWeaponChangedListener_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.removeWeaponSwitchListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumInventoryManager::removeWeaponSwitchListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnremoveWeaponSwitchListener = NULL;

	if ( ! pFnremoveWeaponSwitchListener )
		pFnremoveWeaponSwitchListener = (UFunction*) UObject::GObjObjects()->Data[ 52251 ];

	ASanctumInventoryManager_execremoveWeaponSwitchListener_Parms removeWeaponSwitchListener_Parms;
	memcpy ( &removeWeaponSwitchListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnremoveWeaponSwitchListener, &removeWeaponSwitchListener_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.addWeaponChangedListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumInventoryManager::addWeaponChangedListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnaddWeaponChangedListener = NULL;

	if ( ! pFnaddWeaponChangedListener )
		pFnaddWeaponChangedListener = (UFunction*) UObject::GObjObjects()->Data[ 52249 ];

	ASanctumInventoryManager_execaddWeaponChangedListener_Parms addWeaponChangedListener_Parms;
	memcpy ( &addWeaponChangedListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnaddWeaponChangedListener, &addWeaponChangedListener_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.EnableSellTower
// [0x00020002] 
// Parameters infos:

void ASanctumInventoryManager::EnableSellTower ( )
{
	static UFunction* pFnEnableSellTower = NULL;

	if ( ! pFnEnableSellTower )
		pFnEnableSellTower = (UFunction*) UObject::GObjObjects()->Data[ 52247 ];

	ASanctumInventoryManager_execEnableSellTower_Parms EnableSellTower_Parms;

	this->ProcessEvent ( pFnEnableSellTower, &EnableSellTower_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.DisableSellTower
// [0x00020002] 
// Parameters infos:

void ASanctumInventoryManager::DisableSellTower ( )
{
	static UFunction* pFnDisableSellTower = NULL;

	if ( ! pFnDisableSellTower )
		pFnDisableSellTower = (UFunction*) UObject::GObjObjects()->Data[ 52245 ];

	ASanctumInventoryManager_execDisableSellTower_Parms DisableSellTower_Parms;

	this->ProcessEvent ( pFnDisableSellTower, &DisableSellTower_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.enableBuildGun
// [0x00020002] 
// Parameters infos:

void ASanctumInventoryManager::enableBuildGun ( )
{
	static UFunction* pFnenableBuildGun = NULL;

	if ( ! pFnenableBuildGun )
		pFnenableBuildGun = (UFunction*) UObject::GObjObjects()->Data[ 52243 ];

	ASanctumInventoryManager_execenableBuildGun_Parms enableBuildGun_Parms;

	this->ProcessEvent ( pFnenableBuildGun, &enableBuildGun_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.disableBuildGun
// [0x00020002] 
// Parameters infos:

void ASanctumInventoryManager::disableBuildGun ( )
{
	static UFunction* pFndisableBuildGun = NULL;

	if ( ! pFndisableBuildGun )
		pFndisableBuildGun = (UFunction*) UObject::GObjObjects()->Data[ 52241 ];

	ASanctumInventoryManager_execdisableBuildGun_Parms disableBuildGun_Parms;

	this->ProcessEvent ( pFndisableBuildGun, &disableBuildGun_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.enableWeaponStore
// [0x00020002] 
// Parameters infos:

void ASanctumInventoryManager::enableWeaponStore ( )
{
	static UFunction* pFnenableWeaponStore = NULL;

	if ( ! pFnenableWeaponStore )
		pFnenableWeaponStore = (UFunction*) UObject::GObjObjects()->Data[ 52240 ];

	ASanctumInventoryManager_execenableWeaponStore_Parms enableWeaponStore_Parms;

	this->ProcessEvent ( pFnenableWeaponStore, &enableWeaponStore_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.disableWeaponStore
// [0x00020002] 
// Parameters infos:

void ASanctumInventoryManager::disableWeaponStore ( )
{
	static UFunction* pFndisableWeaponStore = NULL;

	if ( ! pFndisableWeaponStore )
		pFndisableWeaponStore = (UFunction*) UObject::GObjObjects()->Data[ 52239 ];

	ASanctumInventoryManager_execdisableWeaponStore_Parms disableWeaponStore_Parms;

	this->ProcessEvent ( pFndisableWeaponStore, &disableWeaponStore_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.TogglePlayerReady
// [0x00020002] 
// Parameters infos:
// unsigned long                  IsReady                        ( CPF_Parm )

void ASanctumInventoryManager::TogglePlayerReady ( unsigned long IsReady )
{
	static UFunction* pFnTogglePlayerReady = NULL;

	if ( ! pFnTogglePlayerReady )
		pFnTogglePlayerReady = (UFunction*) UObject::GObjObjects()->Data[ 52236 ];

	ASanctumInventoryManager_execTogglePlayerReady_Parms TogglePlayerReady_Parms;
	TogglePlayerReady_Parms.IsReady = IsReady;

	this->ProcessEvent ( pFnTogglePlayerReady, &TogglePlayerReady_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.setWeaponVisibility
// [0x00020102] 
// Parameters infos:
// unsigned long                  WeaponVisibility               ( CPF_Parm )

void ASanctumInventoryManager::setWeaponVisibility ( unsigned long WeaponVisibility )
{
	static UFunction* pFnsetWeaponVisibility = NULL;

	if ( ! pFnsetWeaponVisibility )
		pFnsetWeaponVisibility = (UFunction*) UObject::GObjObjects()->Data[ 52233 ];

	ASanctumInventoryManager_execsetWeaponVisibility_Parms setWeaponVisibility_Parms;
	setWeaponVisibility_Parms.WeaponVisibility = WeaponVisibility;

	this->ProcessEvent ( pFnsetWeaponVisibility, &setWeaponVisibility_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.addWeaponSwitchListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumInventoryManager::addWeaponSwitchListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnaddWeaponSwitchListener = NULL;

	if ( ! pFnaddWeaponSwitchListener )
		pFnaddWeaponSwitchListener = (UFunction*) UObject::GObjObjects()->Data[ 52231 ];

	ASanctumInventoryManager_execaddWeaponSwitchListener_Parms addWeaponSwitchListener_Parms;
	memcpy ( &addWeaponSwitchListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnaddWeaponSwitchListener, &addWeaponSwitchListener_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.IsBuildPhase
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumInventoryManager::IsBuildPhase ( )
{
	static UFunction* pFnIsBuildPhase = NULL;

	if ( ! pFnIsBuildPhase )
		pFnIsBuildPhase = (UFunction*) UObject::GObjObjects()->Data[ 52229 ];

	ASanctumInventoryManager_execIsBuildPhase_Parms IsBuildPhase_Parms;

	this->ProcessEvent ( pFnIsBuildPhase, &IsBuildPhase_Parms, NULL );

	return IsBuildPhase_Parms.ReturnValue;
};

// Function Sanctum.SanctumInventoryManager.GetSpawnedTowerHologram
// [0x00020002] 
// Parameters infos:
// class ASanctumTowerHologram*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  HologramClass                  ( CPF_Parm )

class ASanctumTowerHologram* ASanctumInventoryManager::GetSpawnedTowerHologram ( class UClass* HologramClass )
{
	static UFunction* pFnGetSpawnedTowerHologram = NULL;

	if ( ! pFnGetSpawnedTowerHologram )
		pFnGetSpawnedTowerHologram = (UFunction*) UObject::GObjObjects()->Data[ 50880 ];

	ASanctumInventoryManager_execGetSpawnedTowerHologram_Parms GetSpawnedTowerHologram_Parms;
	GetSpawnedTowerHologram_Parms.HologramClass = HologramClass;

	this->ProcessEvent ( pFnGetSpawnedTowerHologram, &GetSpawnedTowerHologram_Parms, NULL );

	return GetSpawnedTowerHologram_Parms.ReturnValue;
};

// Function Sanctum.SanctumInventoryManager.SpawnAllTowerHolograms
// [0x00020002] 
// Parameters infos:

void ASanctumInventoryManager::SpawnAllTowerHolograms ( )
{
	static UFunction* pFnSpawnAllTowerHolograms = NULL;

	if ( ! pFnSpawnAllTowerHolograms )
		pFnSpawnAllTowerHolograms = (UFunction*) UObject::GObjObjects()->Data[ 52225 ];

	ASanctumInventoryManager_execSpawnAllTowerHolograms_Parms SpawnAllTowerHolograms_Parms;

	this->ProcessEvent ( pFnSpawnAllTowerHolograms, &SpawnAllTowerHolograms_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.ClientSyncWeapon
// [0x010201C2] 
// Parameters infos:
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

void ASanctumInventoryManager::ClientSyncWeapon ( class AWeapon* NewWeapon )
{
	static UFunction* pFnClientSyncWeapon = NULL;

	if ( ! pFnClientSyncWeapon )
		pFnClientSyncWeapon = (UFunction*) UObject::GObjObjects()->Data[ 52222 ];

	ASanctumInventoryManager_execClientSyncWeapon_Parms ClientSyncWeapon_Parms;
	ClientSyncWeapon_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnClientSyncWeapon, &ClientSyncWeapon_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumInventoryManager::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 52221 ];

	ASanctumInventoryManager_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.WeaponChanged
// [0x00120000] 
// Parameters infos:
// class UClass*                  NewWeapon                      ( CPF_Parm )

void ASanctumInventoryManager::WeaponChanged ( class UClass* NewWeapon )
{
	static UFunction* pFnWeaponChanged = NULL;

	if ( ! pFnWeaponChanged )
		pFnWeaponChanged = (UFunction*) UObject::GObjObjects()->Data[ 52202 ];

	ASanctumInventoryManager_execWeaponChanged_Parms WeaponChanged_Parms;
	WeaponChanged_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnWeaponChanged, &WeaponChanged_Parms, NULL );
};

// Function Sanctum.SanctumInventoryManager.ByteChanged
// [0x00120000] 
// Parameters infos:
// unsigned char                  NewValue                       ( CPF_Parm )

void ASanctumInventoryManager::ByteChanged ( unsigned char NewValue )
{
	static UFunction* pFnByteChanged = NULL;

	if ( ! pFnByteChanged )
		pFnByteChanged = (UFunction*) UObject::GObjObjects()->Data[ 52199 ];

	ASanctumInventoryManager_execByteChanged_Parms ByteChanged_Parms;
	ByteChanged_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnByteChanged, &ByteChanged_Parms, NULL );
};

// Function Sanctum.SanctumGlobals.GetIndexForTowerHologramClass
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  towerHologramClass             ( CPF_Parm )

int USanctumGlobals::GetIndexForTowerHologramClass ( class UClass* towerHologramClass )
{
	static UFunction* pFnGetIndexForTowerHologramClass = NULL;

	if ( ! pFnGetIndexForTowerHologramClass )
		pFnGetIndexForTowerHologramClass = (UFunction*) UObject::GObjObjects()->Data[ 50085 ];

	USanctumGlobals_execGetIndexForTowerHologramClass_Parms GetIndexForTowerHologramClass_Parms;
	GetIndexForTowerHologramClass_Parms.towerHologramClass = towerHologramClass;

	this->ProcessEvent ( pFnGetIndexForTowerHologramClass, &GetIndexForTowerHologramClass_Parms, NULL );

	return GetIndexForTowerHologramClass_Parms.ReturnValue;
};

// Function Sanctum.SanctumGlobals.IsLevelFreeDLC
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Idx                            ( CPF_Parm )

bool USanctumGlobals::IsLevelFreeDLC ( int Idx )
{
	static UFunction* pFnIsLevelFreeDLC = NULL;

	if ( ! pFnIsLevelFreeDLC )
		pFnIsLevelFreeDLC = (UFunction*) UObject::GObjObjects()->Data[ 50082 ];

	USanctumGlobals_execIsLevelFreeDLC_Parms IsLevelFreeDLC_Parms;
	IsLevelFreeDLC_Parms.Idx = Idx;

	this->ProcessEvent ( pFnIsLevelFreeDLC, &IsLevelFreeDLC_Parms, NULL );

	return IsLevelFreeDLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumGlobals.GetIndexForMapName
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )

int USanctumGlobals::GetIndexForMapName ( struct FString MapName )
{
	static UFunction* pFnGetIndexForMapName = NULL;

	if ( ! pFnGetIndexForMapName )
		pFnGetIndexForMapName = (UFunction*) UObject::GObjObjects()->Data[ 45899 ];

	USanctumGlobals_execGetIndexForMapName_Parms GetIndexForMapName_Parms;
	memcpy ( &GetIndexForMapName_Parms.MapName, &MapName, 0xC );

	this->ProcessEvent ( pFnGetIndexForMapName, &GetIndexForMapName_Parms, NULL );

	return GetIndexForMapName_Parms.ReturnValue;
};

// Function Sanctum.SanctumGlobals.GetIndexForWeaponClass
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  WeaponClass                    ( CPF_Parm )

int USanctumGlobals::GetIndexForWeaponClass ( class UClass* WeaponClass )
{
	static UFunction* pFnGetIndexForWeaponClass = NULL;

	if ( ! pFnGetIndexForWeaponClass )
		pFnGetIndexForWeaponClass = (UFunction*) UObject::GObjObjects()->Data[ 50076 ];

	USanctumGlobals_execGetIndexForWeaponClass_Parms GetIndexForWeaponClass_Parms;
	GetIndexForWeaponClass_Parms.WeaponClass = WeaponClass;

	this->ProcessEvent ( pFnGetIndexForWeaponClass, &GetIndexForWeaponClass_Parms, NULL );

	return GetIndexForWeaponClass_Parms.ReturnValue;
};

// Function Sanctum.SanctumMenuHUD.StopCredits
// [0x00020002] 
// Parameters infos:

void ASanctumMenuHUD::StopCredits ( )
{
	static UFunction* pFnStopCredits = NULL;

	if ( ! pFnStopCredits )
		pFnStopCredits = (UFunction*) UObject::GObjObjects()->Data[ 53285 ];

	ASanctumMenuHUD_execStopCredits_Parms StopCredits_Parms;

	this->ProcessEvent ( pFnStopCredits, &StopCredits_Parms, NULL );
};

// Function Sanctum.SanctumMenuHUD.ShowDebugInfo
// [0x00420002] 
// Parameters infos:
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void ASanctumMenuHUD::ShowDebugInfo ( float* out_YL, float* out_YPos )
{
	static UFunction* pFnShowDebugInfo = NULL;

	if ( ! pFnShowDebugInfo )
		pFnShowDebugInfo = (UFunction*) UObject::GObjObjects()->Data[ 53282 ];

	ASanctumMenuHUD_execShowDebugInfo_Parms ShowDebugInfo_Parms;

	this->ProcessEvent ( pFnShowDebugInfo, &ShowDebugInfo_Parms, NULL );

	if ( out_YL )
		*out_YL = ShowDebugInfo_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = ShowDebugInfo_Parms.out_YPos;
};

// Function Sanctum.SanctumMenuHUD.IsAnyKeyPressed
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumMenuHUD::IsAnyKeyPressed ( )
{
	static UFunction* pFnIsAnyKeyPressed = NULL;

	if ( ! pFnIsAnyKeyPressed )
		pFnIsAnyKeyPressed = (UFunction*) UObject::GObjObjects()->Data[ 53280 ];

	ASanctumMenuHUD_execIsAnyKeyPressed_Parms IsAnyKeyPressed_Parms;

	this->ProcessEvent ( pFnIsAnyKeyPressed, &IsAnyKeyPressed_Parms, NULL );

	return IsAnyKeyPressed_Parms.ReturnValue;
};

// Function Sanctum.SanctumMenuHUD.DrawFullscreenMovie
// [0x00820002] 
// Parameters infos:
// class UTextureMovie*           Texture                        ( CPF_Parm )

void ASanctumMenuHUD::DrawFullscreenMovie ( class UTextureMovie* Texture )
{
	static UFunction* pFnDrawFullscreenMovie = NULL;

	if ( ! pFnDrawFullscreenMovie )
		pFnDrawFullscreenMovie = (UFunction*) UObject::GObjObjects()->Data[ 53277 ];

	ASanctumMenuHUD_execDrawFullscreenMovie_Parms DrawFullscreenMovie_Parms;
	DrawFullscreenMovie_Parms.Texture = Texture;

	this->ProcessEvent ( pFnDrawFullscreenMovie, &DrawFullscreenMovie_Parms, NULL );
};

// Function Sanctum.SanctumMenuHUD.StartCredits
// [0x00020002] 
// Parameters infos:

void ASanctumMenuHUD::StartCredits ( )
{
	static UFunction* pFnStartCredits = NULL;

	if ( ! pFnStartCredits )
		pFnStartCredits = (UFunction*) UObject::GObjObjects()->Data[ 53276 ];

	ASanctumMenuHUD_execStartCredits_Parms StartCredits_Parms;

	this->ProcessEvent ( pFnStartCredits, &StartCredits_Parms, NULL );
};

// Function Sanctum.SanctumMenuHUD.closeAllHUDs
// [0x00020002] 
// Parameters infos:

void ASanctumMenuHUD::closeAllHUDs ( )
{
	static UFunction* pFncloseAllHUDs = NULL;

	if ( ! pFncloseAllHUDs )
		pFncloseAllHUDs = (UFunction*) UObject::GObjObjects()->Data[ 53275 ];

	ASanctumMenuHUD_execcloseAllHUDs_Parms closeAllHUDs_Parms;

	this->ProcessEvent ( pFncloseAllHUDs, &closeAllHUDs_Parms, NULL );
};

// Function Sanctum.SanctumMenuHUD.Destroyed
// [0x00020822] ( FUNC_Event )
// Parameters infos:

void ASanctumMenuHUD::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 53274 ];

	ASanctumMenuHUD_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumMenuHUD.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASanctumMenuHUD::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 53273 ];

	ASanctumMenuHUD_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumHUD.DrawOverviewError
// [0x00020102] 
// Parameters infos:
// class UCanvas*                 C                              ( CPF_Parm )

void ASanctumHUD::DrawOverviewError ( class UCanvas* C )
{
	static UFunction* pFnDrawOverviewError = NULL;

	if ( ! pFnDrawOverviewError )
		pFnDrawOverviewError = (UFunction*) UObject::GObjObjects()->Data[ 50479 ];

	ASanctumHUD_execDrawOverviewError_Parms DrawOverviewError_Parms;
	DrawOverviewError_Parms.C = C;

	this->ProcessEvent ( pFnDrawOverviewError, &DrawOverviewError_Parms, NULL );
};

// Function Sanctum.SanctumHUD.changeState
// [0x00020002] 
// Parameters infos:
// struct FName                   StateName                      ( CPF_Parm )

void ASanctumHUD::changeState ( struct FName StateName )
{
	static UFunction* pFnchangeState = NULL;

	if ( ! pFnchangeState )
		pFnchangeState = (UFunction*) UObject::GObjObjects()->Data[ 50477 ];

	ASanctumHUD_execchangeState_Parms changeState_Parms;
	memcpy ( &changeState_Parms.StateName, &StateName, 0x8 );

	this->ProcessEvent ( pFnchangeState, &changeState_Parms, NULL );
};

// Function Sanctum.SanctumHUD.TraceElevators
// [0x00820102] 
// Parameters infos:

void ASanctumHUD::TraceElevators ( )
{
	static UFunction* pFnTraceElevators = NULL;

	if ( ! pFnTraceElevators )
		pFnTraceElevators = (UFunction*) UObject::GObjObjects()->Data[ 50467 ];

	ASanctumHUD_execTraceElevators_Parms TraceElevators_Parms;

	this->ProcessEvent ( pFnTraceElevators, &TraceElevators_Parms, NULL );
};

// Function Sanctum.SanctumHUD.setCursorPosition
// [0x00020002] 
// Parameters infos:

void ASanctumHUD::setCursorPosition ( )
{
	static UFunction* pFnsetCursorPosition = NULL;

	if ( ! pFnsetCursorPosition )
		pFnsetCursorPosition = (UFunction*) UObject::GObjObjects()->Data[ 50466 ];

	ASanctumHUD_execsetCursorPosition_Parms setCursorPosition_Parms;

	this->ProcessEvent ( pFnsetCursorPosition, &setCursorPosition_Parms, NULL );
};

// Function Sanctum.SanctumHUD.setGamepadControlActive
// [0x00020002] 
// Parameters infos:

void ASanctumHUD::setGamepadControlActive ( )
{
	static UFunction* pFnsetGamepadControlActive = NULL;

	if ( ! pFnsetGamepadControlActive )
		pFnsetGamepadControlActive = (UFunction*) UObject::GObjObjects()->Data[ 50465 ];

	ASanctumHUD_execsetGamepadControlActive_Parms setGamepadControlActive_Parms;

	this->ProcessEvent ( pFnsetGamepadControlActive, &setGamepadControlActive_Parms, NULL );
};

// Function Sanctum.SanctumHUD.drawHUDArrow
// [0x00824102] 
// Parameters infos:
// struct FVector                 TargetPos                      ( CPF_Parm )
// int                            SlotNumber                     ( CPF_Parm )
// unsigned long                  resourcesNeeded                ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  PlayerRotationByte             ( CPF_OptionalParm | CPF_Parm )

void ASanctumHUD::drawHUDArrow ( struct FVector TargetPos, int SlotNumber, unsigned long resourcesNeeded, unsigned char PlayerRotationByte )
{
	static UFunction* pFndrawHUDArrow = NULL;

	if ( ! pFndrawHUDArrow )
		pFndrawHUDArrow = (UFunction*) UObject::GObjObjects()->Data[ 50396 ];

	ASanctumHUD_execdrawHUDArrow_Parms drawHUDArrow_Parms;
	memcpy ( &drawHUDArrow_Parms.TargetPos, &TargetPos, 0xC );
	drawHUDArrow_Parms.SlotNumber = SlotNumber;
	drawHUDArrow_Parms.resourcesNeeded = resourcesNeeded;
	drawHUDArrow_Parms.PlayerRotationByte = PlayerRotationByte;

	this->ProcessEvent ( pFndrawHUDArrow, &drawHUDArrow_Parms, NULL );
};

// Function Sanctum.SanctumHUD.drawOfScreenArrow
// [0x00820102] 
// Parameters infos:
// struct FVector                 TargetPos                      ( CPF_Parm )
// unsigned long                  resourcesNeeded                ( CPF_Parm )
// int                            SlotNumber                     ( CPF_Parm )

void ASanctumHUD::drawOfScreenArrow ( struct FVector TargetPos, unsigned long resourcesNeeded, int SlotNumber )
{
	static UFunction* pFndrawOfScreenArrow = NULL;

	if ( ! pFndrawOfScreenArrow )
		pFndrawOfScreenArrow = (UFunction*) UObject::GObjObjects()->Data[ 50380 ];

	ASanctumHUD_execdrawOfScreenArrow_Parms drawOfScreenArrow_Parms;
	memcpy ( &drawOfScreenArrow_Parms.TargetPos, &TargetPos, 0xC );
	drawOfScreenArrow_Parms.resourcesNeeded = resourcesNeeded;
	drawOfScreenArrow_Parms.SlotNumber = SlotNumber;

	this->ProcessEvent ( pFndrawOfScreenArrow, &drawOfScreenArrow_Parms, NULL );
};

// Function Sanctum.SanctumHUD.drawOnScreenArrow
// [0x00820102] 
// Parameters infos:
// struct FVector                 TargetPos                      ( CPF_Parm )
// unsigned long                  resourcesNeeded                ( CPF_Parm )
// int                            SlotNumber                     ( CPF_Parm )

void ASanctumHUD::drawOnScreenArrow ( struct FVector TargetPos, unsigned long resourcesNeeded, int SlotNumber )
{
	static UFunction* pFndrawOnScreenArrow = NULL;

	if ( ! pFndrawOnScreenArrow )
		pFndrawOnScreenArrow = (UFunction*) UObject::GObjObjects()->Data[ 50375 ];

	ASanctumHUD_execdrawOnScreenArrow_Parms drawOnScreenArrow_Parms;
	memcpy ( &drawOnScreenArrow_Parms.TargetPos, &TargetPos, 0xC );
	drawOnScreenArrow_Parms.resourcesNeeded = resourcesNeeded;
	drawOnScreenArrow_Parms.SlotNumber = SlotNumber;

	this->ProcessEvent ( pFndrawOnScreenArrow, &drawOnScreenArrow_Parms, NULL );
};

// Function Sanctum.SanctumHUD.drawOverviewArrow
// [0x00820102] 
// Parameters infos:
// struct FVector                 TargetPos                      ( CPF_Parm )
// unsigned long                  resourcesNeeded                ( CPF_Parm )
// int                            SlotNumber                     ( CPF_Parm )
// unsigned char                  PlayerRotationByte             ( CPF_Parm )

void ASanctumHUD::drawOverviewArrow ( struct FVector TargetPos, unsigned long resourcesNeeded, int SlotNumber, unsigned char PlayerRotationByte )
{
	static UFunction* pFndrawOverviewArrow = NULL;

	if ( ! pFndrawOverviewArrow )
		pFndrawOverviewArrow = (UFunction*) UObject::GObjObjects()->Data[ 50368 ];

	ASanctumHUD_execdrawOverviewArrow_Parms drawOverviewArrow_Parms;
	memcpy ( &drawOverviewArrow_Parms.TargetPos, &TargetPos, 0xC );
	drawOverviewArrow_Parms.resourcesNeeded = resourcesNeeded;
	drawOverviewArrow_Parms.SlotNumber = SlotNumber;
	drawOverviewArrow_Parms.PlayerRotationByte = PlayerRotationByte;

	this->ProcessEvent ( pFndrawOverviewArrow, &drawOverviewArrow_Parms, NULL );
};

// Function Sanctum.SanctumHUD.DrawArrow
// [0x00820102] 
// Parameters infos:
// struct FRotator                arrowRotation                  ( CPF_Parm )
// unsigned long                  resourcesNeeded                ( CPF_Parm )
// unsigned long                  onScreen                       ( CPF_Parm )
// unsigned long                  inOverview                     ( CPF_Parm )
// int                            SlotNumber                     ( CPF_Parm )

void ASanctumHUD::DrawArrow ( struct FRotator arrowRotation, unsigned long resourcesNeeded, unsigned long onScreen, unsigned long inOverview, int SlotNumber )
{
	static UFunction* pFnDrawArrow = NULL;

	if ( ! pFnDrawArrow )
		pFnDrawArrow = (UFunction*) UObject::GObjObjects()->Data[ 50349 ];

	ASanctumHUD_execDrawArrow_Parms DrawArrow_Parms;
	memcpy ( &DrawArrow_Parms.arrowRotation, &arrowRotation, 0xC );
	DrawArrow_Parms.resourcesNeeded = resourcesNeeded;
	DrawArrow_Parms.onScreen = onScreen;
	DrawArrow_Parms.inOverview = inOverview;
	DrawArrow_Parms.SlotNumber = SlotNumber;

	this->ProcessEvent ( pFnDrawArrow, &DrawArrow_Parms, NULL );
};

// Function Sanctum.SanctumHUD.SetHUDArrowVisibility
// [0x00024102] 
// Parameters infos:
// unsigned long                  Visible                        ( CPF_OptionalParm | CPF_Parm )

void ASanctumHUD::SetHUDArrowVisibility ( unsigned long Visible )
{
	static UFunction* pFnSetHUDArrowVisibility = NULL;

	if ( ! pFnSetHUDArrowVisibility )
		pFnSetHUDArrowVisibility = (UFunction*) UObject::GObjObjects()->Data[ 50347 ];

	ASanctumHUD_execSetHUDArrowVisibility_Parms SetHUDArrowVisibility_Parms;
	SetHUDArrowVisibility_Parms.Visible = Visible;

	this->ProcessEvent ( pFnSetHUDArrowVisibility, &SetHUDArrowVisibility_Parms, NULL );
};

// Function Sanctum.SanctumHUD.BlendColorToWhite
// [0x00820102] 
// Parameters infos:
// struct FLinearColor            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          whiteness                      ( CPF_Parm )
// struct FLinearColor            C                              ( CPF_Parm )

struct FLinearColor ASanctumHUD::BlendColorToWhite ( float whiteness, struct FLinearColor C )
{
	static UFunction* pFnBlendColorToWhite = NULL;

	if ( ! pFnBlendColorToWhite )
		pFnBlendColorToWhite = (UFunction*) UObject::GObjObjects()->Data[ 50342 ];

	ASanctumHUD_execBlendColorToWhite_Parms BlendColorToWhite_Parms;
	BlendColorToWhite_Parms.whiteness = whiteness;
	memcpy ( &BlendColorToWhite_Parms.C, &C, 0x10 );

	this->ProcessEvent ( pFnBlendColorToWhite, &BlendColorToWhite_Parms, NULL );

	return BlendColorToWhite_Parms.ReturnValue;
};

// Function Sanctum.SanctumHUD.PostRender
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void ASanctumHUD::eventPostRender ( )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = (UFunction*) UObject::GObjObjects()->Data[ 50332 ];

	ASanctumHUD_eventPostRender_Parms PostRender_Parms;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function Sanctum.SanctumHUD.StopCredits
// [0x00020002] 
// Parameters infos:

void ASanctumHUD::StopCredits ( )
{
	static UFunction* pFnStopCredits = NULL;

	if ( ! pFnStopCredits )
		pFnStopCredits = (UFunction*) UObject::GObjObjects()->Data[ 50331 ];

	ASanctumHUD_execStopCredits_Parms StopCredits_Parms;

	this->ProcessEvent ( pFnStopCredits, &StopCredits_Parms, NULL );
};

// Function Sanctum.SanctumHUD.IsAnyKeyPressed
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumHUD::IsAnyKeyPressed ( )
{
	static UFunction* pFnIsAnyKeyPressed = NULL;

	if ( ! pFnIsAnyKeyPressed )
		pFnIsAnyKeyPressed = (UFunction*) UObject::GObjObjects()->Data[ 50329 ];

	ASanctumHUD_execIsAnyKeyPressed_Parms IsAnyKeyPressed_Parms;

	this->ProcessEvent ( pFnIsAnyKeyPressed, &IsAnyKeyPressed_Parms, NULL );

	return IsAnyKeyPressed_Parms.ReturnValue;
};

// Function Sanctum.SanctumHUD.DrawFullscreenMovie
// [0x00020002] 
// Parameters infos:
// class UTextureMovie*           Texture                        ( CPF_Parm )

void ASanctumHUD::DrawFullscreenMovie ( class UTextureMovie* Texture )
{
	static UFunction* pFnDrawFullscreenMovie = NULL;

	if ( ! pFnDrawFullscreenMovie )
		pFnDrawFullscreenMovie = (UFunction*) UObject::GObjObjects()->Data[ 50327 ];

	ASanctumHUD_execDrawFullscreenMovie_Parms DrawFullscreenMovie_Parms;
	DrawFullscreenMovie_Parms.Texture = Texture;

	this->ProcessEvent ( pFnDrawFullscreenMovie, &DrawFullscreenMovie_Parms, NULL );
};

// Function Sanctum.SanctumHUD.StartCredits
// [0x00020002] 
// Parameters infos:

void ASanctumHUD::StartCredits ( )
{
	static UFunction* pFnStartCredits = NULL;

	if ( ! pFnStartCredits )
		pFnStartCredits = (UFunction*) UObject::GObjObjects()->Data[ 50326 ];

	ASanctumHUD_execStartCredits_Parms StartCredits_Parms;

	this->ProcessEvent ( pFnStartCredits, &StartCredits_Parms, NULL );
};

// Function Sanctum.SanctumHUD.DrawTowerStats
// [0x00820002] 
// Parameters infos:

void ASanctumHUD::DrawTowerStats ( )
{
	static UFunction* pFnDrawTowerStats = NULL;

	if ( ! pFnDrawTowerStats )
		pFnDrawTowerStats = (UFunction*) UObject::GObjObjects()->Data[ 50281 ];

	ASanctumHUD_execDrawTowerStats_Parms DrawTowerStats_Parms;

	this->ProcessEvent ( pFnDrawTowerStats, &DrawTowerStats_Parms, NULL );
};

// Function Sanctum.SanctumHUD.ShowBanner
// [0x00020000] 
// Parameters infos:

void ASanctumHUD::ShowBanner ( )
{
	static UFunction* pFnShowBanner = NULL;

	if ( ! pFnShowBanner )
		pFnShowBanner = (UFunction*) UObject::GObjObjects()->Data[ 50280 ];

	ASanctumHUD_execShowBanner_Parms ShowBanner_Parms;

	this->ProcessEvent ( pFnShowBanner, &ShowBanner_Parms, NULL );
};

// Function Sanctum.SanctumHUD.closeTeleportHUD
// [0x00020002] 
// Parameters infos:
// unsigned long                  unloadContent                  ( CPF_Parm )

void ASanctumHUD::closeTeleportHUD ( unsigned long unloadContent )
{
	static UFunction* pFncloseTeleportHUD = NULL;

	if ( ! pFncloseTeleportHUD )
		pFncloseTeleportHUD = (UFunction*) UObject::GObjObjects()->Data[ 50278 ];

	ASanctumHUD_execcloseTeleportHUD_Parms closeTeleportHUD_Parms;
	closeTeleportHUD_Parms.unloadContent = unloadContent;

	this->ProcessEvent ( pFncloseTeleportHUD, &closeTeleportHUD_Parms, NULL );
};

// Function Sanctum.SanctumHUD.closePlayHUDS
// [0x00020002] 
// Parameters infos:
// unsigned long                  unloadContent                  ( CPF_Parm )

void ASanctumHUD::closePlayHUDS ( unsigned long unloadContent )
{
	static UFunction* pFnclosePlayHUDS = NULL;

	if ( ! pFnclosePlayHUDS )
		pFnclosePlayHUDS = (UFunction*) UObject::GObjObjects()->Data[ 50276 ];

	ASanctumHUD_execclosePlayHUDS_Parms closePlayHUDS_Parms;
	closePlayHUDS_Parms.unloadContent = unloadContent;

	this->ProcessEvent ( pFnclosePlayHUDS, &closePlayHUDS_Parms, NULL );
};

// Function Sanctum.SanctumHUD.closeBuildHUD
// [0x00020002] 
// Parameters infos:
// unsigned long                  unloadContent                  ( CPF_Parm )

void ASanctumHUD::closeBuildHUD ( unsigned long unloadContent )
{
	static UFunction* pFncloseBuildHUD = NULL;

	if ( ! pFncloseBuildHUD )
		pFncloseBuildHUD = (UFunction*) UObject::GObjObjects()->Data[ 50274 ];

	ASanctumHUD_execcloseBuildHUD_Parms closeBuildHUD_Parms;
	closeBuildHUD_Parms.unloadContent = unloadContent;

	this->ProcessEvent ( pFncloseBuildHUD, &closeBuildHUD_Parms, NULL );
};

// Function Sanctum.SanctumHUD.closeActionHUD
// [0x00020002] 
// Parameters infos:
// unsigned long                  unloadContent                  ( CPF_Parm )

void ASanctumHUD::closeActionHUD ( unsigned long unloadContent )
{
	static UFunction* pFncloseActionHUD = NULL;

	if ( ! pFncloseActionHUD )
		pFncloseActionHUD = (UFunction*) UObject::GObjObjects()->Data[ 50272 ];

	ASanctumHUD_execcloseActionHUD_Parms closeActionHUD_Parms;
	closeActionHUD_Parms.unloadContent = unloadContent;

	this->ProcessEvent ( pFncloseActionHUD, &closeActionHUD_Parms, NULL );
};

// Function Sanctum.SanctumHUD.closePauseHUD
// [0x00020002] 
// Parameters infos:
// unsigned long                  unloadContent                  ( CPF_Parm )

void ASanctumHUD::closePauseHUD ( unsigned long unloadContent )
{
	static UFunction* pFnclosePauseHUD = NULL;

	if ( ! pFnclosePauseHUD )
		pFnclosePauseHUD = (UFunction*) UObject::GObjObjects()->Data[ 50270 ];

	ASanctumHUD_execclosePauseHUD_Parms closePauseHUD_Parms;
	closePauseHUD_Parms.unloadContent = unloadContent;

	this->ProcessEvent ( pFnclosePauseHUD, &closePauseHUD_Parms, NULL );
};

// Function Sanctum.SanctumHUD.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumHUD::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 50269 ];

	ASanctumHUD_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumHUD.DrawHUD
// [0x00820002] 
// Parameters infos:

void ASanctumHUD::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 50261 ];

	ASanctumHUD_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Sanctum.SanctumHUD.DrawDemoText
// [0x00020000] 
// Parameters infos:

void ASanctumHUD::DrawDemoText ( )
{
	static UFunction* pFnDrawDemoText = NULL;

	if ( ! pFnDrawDemoText )
		pFnDrawDemoText = (UFunction*) UObject::GObjObjects()->Data[ 50260 ];

	ASanctumHUD_execDrawDemoText_Parms DrawDemoText_Parms;

	this->ProcessEvent ( pFnDrawDemoText, &DrawDemoText_Parms, NULL );
};

// Function Sanctum.SanctumHUD.AddConsoleMessage
// [0x00824002] 
// Parameters infos:
// struct FString                 M                              ( CPF_Parm | CPF_NeedCtorLink )
// class UClass*                  InMessageClass                 ( CPF_Parm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// float                          Lifetime                       ( CPF_OptionalParm | CPF_Parm )

void ASanctumHUD::AddConsoleMessage ( struct FString M, class UClass* InMessageClass, class APlayerReplicationInfo* PRI, float Lifetime )
{
	static UFunction* pFnAddConsoleMessage = NULL;

	if ( ! pFnAddConsoleMessage )
		pFnAddConsoleMessage = (UFunction*) UObject::GObjObjects()->Data[ 50252 ];

	ASanctumHUD_execAddConsoleMessage_Parms AddConsoleMessage_Parms;
	memcpy ( &AddConsoleMessage_Parms.M, &M, 0xC );
	AddConsoleMessage_Parms.InMessageClass = InMessageClass;
	AddConsoleMessage_Parms.PRI = PRI;
	AddConsoleMessage_Parms.Lifetime = Lifetime;

	this->ProcessEvent ( pFnAddConsoleMessage, &AddConsoleMessage_Parms, NULL );
};

// Function Sanctum.SanctumHUD.DisplayLocalMessages
// [0x00020002] 
// Parameters infos:

void ASanctumHUD::DisplayLocalMessages ( )
{
	static UFunction* pFnDisplayLocalMessages = NULL;

	if ( ! pFnDisplayLocalMessages )
		pFnDisplayLocalMessages = (UFunction*) UObject::GObjObjects()->Data[ 50242 ];

	ASanctumHUD_execDisplayLocalMessages_Parms DisplayLocalMessages_Parms;

	this->ProcessEvent ( pFnDisplayLocalMessages, &DisplayLocalMessages_Parms, NULL );
};

// Function Sanctum.SanctumHUD.DrawMessage
// [0x00C20002] 
// Parameters infos:
// int                            I                              ( CPF_Parm )
// float                          PosY                           ( CPF_Parm )
// float                          DX                             ( CPF_Parm | CPF_OutParm )
// float                          DY                             ( CPF_Parm | CPF_OutParm )

void ASanctumHUD::DrawMessage ( int I, float PosY, float* DX, float* DY )
{
	static UFunction* pFnDrawMessage = NULL;

	if ( ! pFnDrawMessage )
		pFnDrawMessage = (UFunction*) UObject::GObjObjects()->Data[ 50225 ];

	ASanctumHUD_execDrawMessage_Parms DrawMessage_Parms;
	DrawMessage_Parms.I = I;
	DrawMessage_Parms.PosY = PosY;

	this->ProcessEvent ( pFnDrawMessage, &DrawMessage_Parms, NULL );

	if ( DX )
		*DX = DrawMessage_Parms.DX;

	if ( DY )
		*DY = DrawMessage_Parms.DY;
};

// Function Sanctum.SanctumHUD.DrawLastMessage
// [0x00C20002] 
// Parameters infos:
// int                            I                              ( CPF_Parm )
// float                          PosY                           ( CPF_Parm )
// float                          DX                             ( CPF_Parm | CPF_OutParm )
// float                          DY                             ( CPF_Parm | CPF_OutParm )

void ASanctumHUD::DrawLastMessage ( int I, float PosY, float* DX, float* DY )
{
	static UFunction* pFnDrawLastMessage = NULL;

	if ( ! pFnDrawLastMessage )
		pFnDrawLastMessage = (UFunction*) UObject::GObjObjects()->Data[ 50209 ];

	ASanctumHUD_execDrawLastMessage_Parms DrawLastMessage_Parms;
	DrawLastMessage_Parms.I = I;
	DrawLastMessage_Parms.PosY = PosY;

	this->ProcessEvent ( pFnDrawLastMessage, &DrawLastMessage_Parms, NULL );

	if ( DX )
		*DX = DrawLastMessage_Parms.DX;

	if ( DY )
		*DY = DrawLastMessage_Parms.DY;
};

// Function Sanctum.SanctumHUD.switchState
// [0x00024000] 
// Parameters infos:
// struct FName                   NewState                       ( CPF_Parm )
// unsigned long                  closePrevious                  ( CPF_Parm )
// unsigned long                  exitAnim                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  enterAnim                      ( CPF_OptionalParm | CPF_Parm )

void ASanctumHUD::switchState ( struct FName NewState, unsigned long closePrevious, unsigned long exitAnim, unsigned long enterAnim )
{
	static UFunction* pFnswitchState = NULL;

	if ( ! pFnswitchState )
		pFnswitchState = (UFunction*) UObject::GObjObjects()->Data[ 50204 ];

	ASanctumHUD_execswitchState_Parms switchState_Parms;
	memcpy ( &switchState_Parms.NewState, &NewState, 0x8 );
	switchState_Parms.closePrevious = closePrevious;
	switchState_Parms.exitAnim = exitAnim;
	switchState_Parms.enterAnim = enterAnim;

	this->ProcessEvent ( pFnswitchState, &switchState_Parms, NULL );
};

// Function Sanctum.SanctumHUD.AllocateArrowMaterials
// [0x00820002] 
// Parameters infos:

void ASanctumHUD::AllocateArrowMaterials ( )
{
	static UFunction* pFnAllocateArrowMaterials = NULL;

	if ( ! pFnAllocateArrowMaterials )
		pFnAllocateArrowMaterials = (UFunction*) UObject::GObjObjects()->Data[ 50201 ];

	ASanctumHUD_execAllocateArrowMaterials_Parms AllocateArrowMaterials_Parms;

	this->ProcessEvent ( pFnAllocateArrowMaterials, &AllocateArrowMaterials_Parms, NULL );
};

// Function Sanctum.SanctumHUD.PollForGRI
// [0x00020002] 
// Parameters infos:

void ASanctumHUD::PollForGRI ( )
{
	static UFunction* pFnPollForGRI = NULL;

	if ( ! pFnPollForGRI )
		pFnPollForGRI = (UFunction*) UObject::GObjObjects()->Data[ 50200 ];

	ASanctumHUD_execPollForGRI_Parms PollForGRI_Parms;

	this->ProcessEvent ( pFnPollForGRI, &PollForGRI_Parms, NULL );
};

// Function Sanctum.SanctumHUD.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASanctumHUD::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 50197 ];

	ASanctumHUD_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumChristmasPresent.AddRandomSpin
// [0x00824102] 
// Parameters infos:
// unsigned long                  ViaReplication                 ( CPF_OptionalParm | CPF_Parm )

void ASanctumChristmasPresent::AddRandomSpin ( unsigned long ViaReplication )
{
	static UFunction* pFnAddRandomSpin = NULL;

	if ( ! pFnAddRandomSpin )
		pFnAddRandomSpin = (UFunction*) UObject::GObjObjects()->Data[ 45522 ];

	ASanctumChristmasPresent_execAddRandomSpin_Parms AddRandomSpin_Parms;
	AddRandomSpin_Parms.ViaReplication = ViaReplication;

	this->ProcessEvent ( pFnAddRandomSpin, &AddRandomSpin_Parms, NULL );
};

// Function Sanctum.SanctumChristmasPresent.MoveToRestingPlace
// [0x00020102] 
// Parameters infos:

void ASanctumChristmasPresent::MoveToRestingPlace ( )
{
	static UFunction* pFnMoveToRestingPlace = NULL;

	if ( ! pFnMoveToRestingPlace )
		pFnMoveToRestingPlace = (UFunction*) UObject::GObjObjects()->Data[ 45521 ];

	ASanctumChristmasPresent_execMoveToRestingPlace_Parms MoveToRestingPlace_Parms;

	this->ProcessEvent ( pFnMoveToRestingPlace, &MoveToRestingPlace_Parms, NULL );
};

// Function Sanctum.SanctumChristmasPresent.OnSleepRBPhysics
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumChristmasPresent::eventOnSleepRBPhysics ( )
{
	static UFunction* pFnOnSleepRBPhysics = NULL;

	if ( ! pFnOnSleepRBPhysics )
		pFnOnSleepRBPhysics = (UFunction*) UObject::GObjObjects()->Data[ 45520 ];

	ASanctumChristmasPresent_eventOnSleepRBPhysics_Parms OnSleepRBPhysics_Parms;

	this->ProcessEvent ( pFnOnSleepRBPhysics, &OnSleepRBPhysics_Parms, NULL );
};

// Function Sanctum.SanctumChristmasPresent.GeneratePhysics
// [0x00024102] 
// Parameters infos:
// unsigned long                  ViaReplication                 ( CPF_OptionalParm | CPF_Parm )

void ASanctumChristmasPresent::GeneratePhysics ( unsigned long ViaReplication )
{
	static UFunction* pFnGeneratePhysics = NULL;

	if ( ! pFnGeneratePhysics )
		pFnGeneratePhysics = (UFunction*) UObject::GObjObjects()->Data[ 45517 ];

	ASanctumChristmasPresent_execGeneratePhysics_Parms GeneratePhysics_Parms;
	GeneratePhysics_Parms.ViaReplication = ViaReplication;

	this->ProcessEvent ( pFnGeneratePhysics, &GeneratePhysics_Parms, NULL );
};

// Function Sanctum.SanctumChristmasPresent.KillSelf
// [0x00020002] 
// Parameters infos:

void ASanctumChristmasPresent::KillSelf ( )
{
	static UFunction* pFnKillSelf = NULL;

	if ( ! pFnKillSelf )
		pFnKillSelf = (UFunction*) UObject::GObjObjects()->Data[ 45516 ];

	ASanctumChristmasPresent_execKillSelf_Parms KillSelf_Parms;

	this->ProcessEvent ( pFnKillSelf, &KillSelf_Parms, NULL );
};

// Function Sanctum.SanctumChristmasPresent.SpawnPickUpFX
// [0x00020102] 
// Parameters infos:

void ASanctumChristmasPresent::SpawnPickUpFX ( )
{
	static UFunction* pFnSpawnPickUpFX = NULL;

	if ( ! pFnSpawnPickUpFX )
		pFnSpawnPickUpFX = (UFunction*) UObject::GObjObjects()->Data[ 45509 ];

	ASanctumChristmasPresent_execSpawnPickUpFX_Parms SpawnPickUpFX_Parms;

	this->ProcessEvent ( pFnSpawnPickUpFX, &SpawnPickUpFX_Parms, NULL );
};

// Function Sanctum.SanctumChristmasPresent.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumChristmasPresent::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 45503 ];

	ASanctumChristmasPresent_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Sanctum.SanctumChristmasPresent.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumChristmasPresent::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 45502 ];

	ASanctumChristmasPresent_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumChristmasPresent.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumChristmasPresent::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 45501 ];

	ASanctumChristmasPresent_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumChristmasPresent.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumChristmasPresent::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 45499 ];

	ASanctumChristmasPresent_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumChristmasSanta.Timer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumChristmasSanta::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 45569 ];

	ASanctumChristmasSanta_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Sanctum.SanctumChristmasSanta.ActivateEvent
// [0x00020102] 
// Parameters infos:
// class UClass*                  eventToActivate                ( CPF_Parm )

void ASanctumChristmasSanta::ActivateEvent ( class UClass* eventToActivate )
{
	static UFunction* pFnActivateEvent = NULL;

	if ( ! pFnActivateEvent )
		pFnActivateEvent = (UFunction*) UObject::GObjObjects()->Data[ 45564 ];

	ASanctumChristmasSanta_execActivateEvent_Parms ActivateEvent_Parms;
	ActivateEvent_Parms.eventToActivate = eventToActivate;

	this->ProcessEvent ( pFnActivateEvent, &ActivateEvent_Parms, NULL );
};

// Function Sanctum.SanctumChristmasSanta.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            DamageAmount                   ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumChristmasSanta::eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 45555 ];

	ASanctumChristmasSanta_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.DamageAmount = DamageAmount;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Sanctum.SanctumChristmasSanta.SpawnPackages
// [0x00020002] 
// Parameters infos:

void ASanctumChristmasSanta::SpawnPackages ( )
{
	static UFunction* pFnSpawnPackages = NULL;

	if ( ! pFnSpawnPackages )
		pFnSpawnPackages = (UFunction*) UObject::GObjObjects()->Data[ 45553 ];

	ASanctumChristmasSanta_execSpawnPackages_Parms SpawnPackages_Parms;

	this->ProcessEvent ( pFnSpawnPackages, &SpawnPackages_Parms, NULL );
};

// Function Sanctum.SanctumChristmasSanta.SpawnRagdollAndEffects
// [0x00020102] 
// Parameters infos:

void ASanctumChristmasSanta::SpawnRagdollAndEffects ( )
{
	static UFunction* pFnSpawnRagdollAndEffects = NULL;

	if ( ! pFnSpawnRagdollAndEffects )
		pFnSpawnRagdollAndEffects = (UFunction*) UObject::GObjObjects()->Data[ 45543 ];

	ASanctumChristmasSanta_execSpawnRagdollAndEffects_Parms SpawnRagdollAndEffects_Parms;

	this->ProcessEvent ( pFnSpawnRagdollAndEffects, &SpawnRagdollAndEffects_Parms, NULL );
};

// Function Sanctum.SanctumChristmasSanta.CanPlayerSeeMe
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Viewer                         ( CPF_Parm )

bool ASanctumChristmasSanta::CanPlayerSeeMe ( class AController* Viewer )
{
	static UFunction* pFnCanPlayerSeeMe = NULL;

	if ( ! pFnCanPlayerSeeMe )
		pFnCanPlayerSeeMe = (UFunction*) UObject::GObjObjects()->Data[ 45537 ];

	ASanctumChristmasSanta_execCanPlayerSeeMe_Parms CanPlayerSeeMe_Parms;
	CanPlayerSeeMe_Parms.Viewer = Viewer;

	this->ProcessEvent ( pFnCanPlayerSeeMe, &CanPlayerSeeMe_Parms, NULL );

	return CanPlayerSeeMe_Parms.ReturnValue;
};

// Function Sanctum.SanctumChristmasSanta.TornOff
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumChristmasSanta::eventTornOff ( )
{
	static UFunction* pFnTornOff = NULL;

	if ( ! pFnTornOff )
		pFnTornOff = (UFunction*) UObject::GObjObjects()->Data[ 45536 ];

	ASanctumChristmasSanta_eventTornOff_Parms TornOff_Parms;

	this->ProcessEvent ( pFnTornOff, &TornOff_Parms, NULL );
};

// Function Sanctum.SanctumChristmasSanta.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumChristmasSanta::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 45534 ];

	ASanctumChristmasSanta_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_SantaDied.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_SantaDied::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55325 ];

	USanctumSeqEvent_SantaDied_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_DestroySanta.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_DestroySanta::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55289 ];

	USanctumSeqEvent_DestroySanta_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumChristmasTree.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumChristmasTree::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 45635 ];

	ASanctumChristmasTree_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumCombatText.SpawnDigit
// [0x00820102] 
// Parameters infos:
// int                            digit                          ( CPF_Parm )
// struct FVector                 Loc                            ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )
// unsigned long                  IsCash                         ( CPF_Parm )

void ASanctumCombatText::SpawnDigit ( int digit, struct FVector Loc, float Scale, unsigned long IsCash )
{
	static UFunction* pFnSpawnDigit = NULL;

	if ( ! pFnSpawnDigit )
		pFnSpawnDigit = (UFunction*) UObject::GObjObjects()->Data[ 45695 ];

	ASanctumCombatText_execSpawnDigit_Parms SpawnDigit_Parms;
	SpawnDigit_Parms.digit = digit;
	memcpy ( &SpawnDigit_Parms.Loc, &Loc, 0xC );
	SpawnDigit_Parms.Scale = Scale;
	SpawnDigit_Parms.IsCash = IsCash;

	this->ProcessEvent ( pFnSpawnDigit, &SpawnDigit_Parms, NULL );
};

// Function Sanctum.SanctumCombatText.CreateCombatText
// [0x00824102] 
// Parameters infos:
// TArray< int >                  damageDigits                   ( CPF_Parm | CPF_NeedCtorLink )
// float                          Scale                          ( CPF_Parm )
// unsigned long                  IsCash                         ( CPF_OptionalParm | CPF_Parm )

void ASanctumCombatText::CreateCombatText ( TArray< int > damageDigits, float Scale, unsigned long IsCash )
{
	static UFunction* pFnCreateCombatText = NULL;

	if ( ! pFnCreateCombatText )
		pFnCreateCombatText = (UFunction*) UObject::GObjObjects()->Data[ 45679 ];

	ASanctumCombatText_execCreateCombatText_Parms CreateCombatText_Parms;
	memcpy ( &CreateCombatText_Parms.damageDigits, &damageDigits, 0xC );
	CreateCombatText_Parms.Scale = Scale;
	CreateCombatText_Parms.IsCash = IsCash;

	this->ProcessEvent ( pFnCreateCombatText, &CreateCombatText_Parms, NULL );
};

// Function Sanctum.SanctumCombatText.AddCombatText
// [0x00024102] 
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// float                          Scale                          ( CPF_OptionalParm | CPF_Parm )

void ASanctumCombatText::AddCombatText ( int Damage, class AActor* DamageCauser, float Scale )
{
	static UFunction* pFnAddCombatText = NULL;

	if ( ! pFnAddCombatText )
		pFnAddCombatText = (UFunction*) UObject::GObjObjects()->Data[ 45668 ];

	ASanctumCombatText_execAddCombatText_Parms AddCombatText_Parms;
	AddCombatText_Parms.Damage = Damage;
	AddCombatText_Parms.DamageCauser = DamageCauser;
	AddCombatText_Parms.Scale = Scale;

	this->ProcessEvent ( pFnAddCombatText, &AddCombatText_Parms, NULL );
};

// Function Sanctum.SanctumCombatText.AddPoints
// [0x00020102] 
// Parameters infos:
// int                            Points                         ( CPF_Parm )

void ASanctumCombatText::AddPoints ( int Points )
{
	static UFunction* pFnAddPoints = NULL;

	if ( ! pFnAddPoints )
		pFnAddPoints = (UFunction*) UObject::GObjObjects()->Data[ 45658 ];

	ASanctumCombatText_execAddPoints_Parms AddPoints_Parms;
	AddPoints_Parms.Points = Points;

	this->ProcessEvent ( pFnAddPoints, &AddPoints_Parms, NULL );
};

// Function Sanctum.SanctumCombatText.FindLocallyControlledPlayer
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumCombatText::FindLocallyControlledPlayer ( )
{
	static UFunction* pFnFindLocallyControlledPlayer = NULL;

	if ( ! pFnFindLocallyControlledPlayer )
		pFnFindLocallyControlledPlayer = (UFunction*) UObject::GObjObjects()->Data[ 45654 ];

	ASanctumCombatText_execFindLocallyControlledPlayer_Parms FindLocallyControlledPlayer_Parms;

	this->ProcessEvent ( pFnFindLocallyControlledPlayer, &FindLocallyControlledPlayer_Parms, NULL );

	return FindLocallyControlledPlayer_Parms.ReturnValue;
};

// Function Sanctum.SanctumViewportClient.DrawTransition
// [0x00020002] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void USanctumViewportClient::DrawTransition ( class UCanvas* Canvas )
{
	static UFunction* pFnDrawTransition = NULL;

	if ( ! pFnDrawTransition )
		pFnDrawTransition = (UFunction*) UObject::GObjObjects()->Data[ 57419 ];

	USanctumViewportClient_execDrawTransition_Parms DrawTransition_Parms;
	DrawTransition_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnDrawTransition, &DrawTransition_Parms, NULL );
};

// Function Sanctum.SanctumViewportClient.NotifyConnectionError
// [0x00024002] 
// Parameters infos:
// unsigned char                  MessageType                    ( CPF_Parm )
// struct FString                 Message                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Title                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void USanctumViewportClient::NotifyConnectionError ( unsigned char MessageType, struct FString Message, struct FString Title )
{
	static UFunction* pFnNotifyConnectionError = NULL;

	if ( ! pFnNotifyConnectionError )
		pFnNotifyConnectionError = (UFunction*) UObject::GObjObjects()->Data[ 57411 ];

	USanctumViewportClient_execNotifyConnectionError_Parms NotifyConnectionError_Parms;
	NotifyConnectionError_Parms.MessageType = MessageType;
	memcpy ( &NotifyConnectionError_Parms.Message, &Message, 0xC );
	memcpy ( &NotifyConnectionError_Parms.Title, &Title, 0xC );

	this->ProcessEvent ( pFnNotifyConnectionError, &NotifyConnectionError_Parms, NULL );
};

// Function Sanctum.SanctumViewportClient.SetProgressMessage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  MessageType                    ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Title                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIgnoreFutureNetworkMessages   ( CPF_OptionalParm | CPF_Parm )

void USanctumViewportClient::eventSetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title, unsigned long bIgnoreFutureNetworkMessages )
{
	static UFunction* pFnSetProgressMessage = NULL;

	if ( ! pFnSetProgressMessage )
		pFnSetProgressMessage = (UFunction*) UObject::GObjObjects()->Data[ 57405 ];

	USanctumViewportClient_eventSetProgressMessage_Parms SetProgressMessage_Parms;
	SetProgressMessage_Parms.MessageType = MessageType;
	memcpy ( &SetProgressMessage_Parms.Message, &Message, 0xC );
	memcpy ( &SetProgressMessage_Parms.Title, &Title, 0xC );
	SetProgressMessage_Parms.bIgnoreFutureNetworkMessages = bIgnoreFutureNetworkMessages;

	this->ProcessEvent ( pFnSetProgressMessage, &SetProgressMessage_Parms, NULL );
};

// Function Sanctum.SanctumViewportClient.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void USanctumViewportClient::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 57403 ];

	USanctumViewportClient_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumViewportClient.SetAudioSettings
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          Master                         ( CPF_Parm )
// float                          SFX                            ( CPF_Parm )
// float                          Ambient                        ( CPF_Parm )
// float                          Voice                          ( CPF_Parm )
// float                          Music                          ( CPF_Parm )

void USanctumViewportClient::SetAudioSettings ( float Master, float SFX, float Ambient, float Voice, float Music )
{
	static UFunction* pFnSetAudioSettings = NULL;

	if ( ! pFnSetAudioSettings )
		pFnSetAudioSettings = (UFunction*) UObject::GObjObjects()->Data[ 57397 ];

	USanctumViewportClient_execSetAudioSettings_Parms SetAudioSettings_Parms;
	SetAudioSettings_Parms.Master = Master;
	SetAudioSettings_Parms.SFX = SFX;
	SetAudioSettings_Parms.Ambient = Ambient;
	SetAudioSettings_Parms.Voice = Voice;
	SetAudioSettings_Parms.Music = Music;

	this->ProcessEvent ( pFnSetAudioSettings, &SetAudioSettings_Parms, NULL );
};

// Function Sanctum.SanctumViewportClient.Init
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USanctumViewportClient::eventInit ( struct FString* OutError )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 57393 ];

	USanctumViewportClient_eventInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	if ( OutError )
		memcpy ( OutError, &Init_Parms.OutError, 0xC );

	return Init_Parms.ReturnValue;
};

// Function Sanctum.SanctumSystemSettingsHelper.Cleanup
// [0x00020002] 
// Parameters infos:

void USanctumSystemSettingsHelper::Cleanup ( )
{
	static UFunction* pFnCleanup = NULL;

	if ( ! pFnCleanup )
		pFnCleanup = (UFunction*) UObject::GObjObjects()->Data[ 55786 ];

	USanctumSystemSettingsHelper_execCleanup_Parms Cleanup_Parms;

	this->ProcessEvent ( pFnCleanup, &Cleanup_Parms, NULL );
};

// Function Sanctum.SanctumSystemSettingsHelper.GetFOVValues
// [0x00420002] 
// Parameters infos:
// float                          currentFOV                     ( CPF_Parm )
// TArray< struct FString >       fovArray                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// int                            SelectedIndex                  ( CPF_Parm | CPF_OutParm )

void USanctumSystemSettingsHelper::GetFOVValues ( float currentFOV, TArray< struct FString >* fovArray, int* SelectedIndex )
{
	static UFunction* pFnGetFOVValues = NULL;

	if ( ! pFnGetFOVValues )
		pFnGetFOVValues = (UFunction*) UObject::GObjObjects()->Data[ 55780 ];

	USanctumSystemSettingsHelper_execGetFOVValues_Parms GetFOVValues_Parms;
	GetFOVValues_Parms.currentFOV = currentFOV;

	this->ProcessEvent ( pFnGetFOVValues, &GetFOVValues_Parms, NULL );

	if ( fovArray )
		memcpy ( fovArray, &GetFOVValues_Parms.fovArray, 0xC );

	if ( SelectedIndex )
		*SelectedIndex = GetFOVValues_Parms.SelectedIndex;
};

// Function Sanctum.SanctumSystemSettingsHelper.setResolutionProvider
// [0x00420002] 
// Parameters infos:
// class UGFxObject*              OutProvider                    ( CPF_Parm | CPF_OutParm )

void USanctumSystemSettingsHelper::setResolutionProvider ( class UGFxObject** OutProvider )
{
	static UFunction* pFnsetResolutionProvider = NULL;

	if ( ! pFnsetResolutionProvider )
		pFnsetResolutionProvider = (UFunction*) UObject::GObjObjects()->Data[ 55775 ];

	USanctumSystemSettingsHelper_execsetResolutionProvider_Parms setResolutionProvider_Parms;

	this->ProcessEvent ( pFnsetResolutionProvider, &setResolutionProvider_Parms, NULL );

	if ( OutProvider )
		*OutProvider = setResolutionProvider_Parms.OutProvider;
};

// Function Sanctum.SanctumSystemSettingsHelper.SetSoundMode
// [0x00020002] 
// Parameters infos:
// unsigned char                  NewSoundMode                   ( CPF_Parm )

void USanctumSystemSettingsHelper::SetSoundMode ( unsigned char NewSoundMode )
{
	static UFunction* pFnSetSoundMode = NULL;

	if ( ! pFnSetSoundMode )
		pFnSetSoundMode = (UFunction*) UObject::GObjObjects()->Data[ 55770 ];

	USanctumSystemSettingsHelper_execSetSoundMode_Parms SetSoundMode_Parms;
	SetSoundMode_Parms.NewSoundMode = NewSoundMode;

	this->ProcessEvent ( pFnSetSoundMode, &SetSoundMode_Parms, NULL );
};

// Function Sanctum.SanctumSystemSettingsHelper.UpdateAudioSettings
// [0x00020002] 
// Parameters infos:

void USanctumSystemSettingsHelper::UpdateAudioSettings ( )
{
	static UFunction* pFnUpdateAudioSettings = NULL;

	if ( ! pFnUpdateAudioSettings )
		pFnUpdateAudioSettings = (UFunction*) UObject::GObjObjects()->Data[ 55769 ];

	USanctumSystemSettingsHelper_execUpdateAudioSettings_Parms UpdateAudioSettings_Parms;

	this->ProcessEvent ( pFnUpdateAudioSettings, &UpdateAudioSettings_Parms, NULL );
};

// Function Sanctum.SanctumSystemSettingsHelper.SetAudioSettings
// [0x00020002] 
// Parameters infos:
// float                          Master                         ( CPF_Parm )
// float                          SFX                            ( CPF_Parm )
// float                          Ambient                        ( CPF_Parm )
// float                          Voice                          ( CPF_Parm )
// float                          Music                          ( CPF_Parm )

void USanctumSystemSettingsHelper::SetAudioSettings ( float Master, float SFX, float Ambient, float Voice, float Music )
{
	static UFunction* pFnSetAudioSettings = NULL;

	if ( ! pFnSetAudioSettings )
		pFnSetAudioSettings = (UFunction*) UObject::GObjObjects()->Data[ 55763 ];

	USanctumSystemSettingsHelper_execSetAudioSettings_Parms SetAudioSettings_Parms;
	SetAudioSettings_Parms.Master = Master;
	SetAudioSettings_Parms.SFX = SFX;
	SetAudioSettings_Parms.Ambient = Ambient;
	SetAudioSettings_Parms.Voice = Voice;
	SetAudioSettings_Parms.Music = Music;

	this->ProcessEvent ( pFnSetAudioSettings, &SetAudioSettings_Parms, NULL );
};

// Function Sanctum.SanctumSystemSettingsHelper.SetGameplaySettings
// [0x00020002] 
// Parameters infos:

void USanctumSystemSettingsHelper::SetGameplaySettings ( )
{
	static UFunction* pFnSetGameplaySettings = NULL;

	if ( ! pFnSetGameplaySettings )
		pFnSetGameplaySettings = (UFunction*) UObject::GObjObjects()->Data[ 55759 ];

	USanctumSystemSettingsHelper_execSetGameplaySettings_Parms SetGameplaySettings_Parms;

	this->ProcessEvent ( pFnSetGameplaySettings, &SetGameplaySettings_Parms, NULL );
};

// Function Sanctum.SanctumSystemSettingsHelper.ragdollDestroyed
// [0x00020002] 
// Parameters infos:
// class ASanctumEnemy*           Ragdoll                        ( CPF_Parm )

void USanctumSystemSettingsHelper::ragdollDestroyed ( class ASanctumEnemy* Ragdoll )
{
	static UFunction* pFnragdollDestroyed = NULL;

	if ( ! pFnragdollDestroyed )
		pFnragdollDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 55757 ];

	USanctumSystemSettingsHelper_execragdollDestroyed_Parms ragdollDestroyed_Parms;
	ragdollDestroyed_Parms.Ragdoll = Ragdoll;

	this->ProcessEvent ( pFnragdollDestroyed, &ragdollDestroyed_Parms, NULL );
};

// Function Sanctum.SanctumSystemSettingsHelper.RagdollSpawned
// [0x00020002] 
// Parameters infos:
// class ASanctumEnemy*           Ragdoll                        ( CPF_Parm )

void USanctumSystemSettingsHelper::RagdollSpawned ( class ASanctumEnemy* Ragdoll )
{
	static UFunction* pFnRagdollSpawned = NULL;

	if ( ! pFnRagdollSpawned )
		pFnRagdollSpawned = (UFunction*) UObject::GObjObjects()->Data[ 55755 ];

	USanctumSystemSettingsHelper_execRagdollSpawned_Parms RagdollSpawned_Parms;
	RagdollSpawned_Parms.Ragdoll = Ragdoll;

	this->ProcessEvent ( pFnRagdollSpawned, &RagdollSpawned_Parms, NULL );
};

// Function Sanctum.SanctumSystemSettingsHelper.GibDestroyed
// [0x00020002] 
// Parameters infos:
// class ASanctumGib*             Gib                            ( CPF_Parm )

void USanctumSystemSettingsHelper::GibDestroyed ( class ASanctumGib* Gib )
{
	static UFunction* pFnGibDestroyed = NULL;

	if ( ! pFnGibDestroyed )
		pFnGibDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 55753 ];

	USanctumSystemSettingsHelper_execGibDestroyed_Parms GibDestroyed_Parms;
	GibDestroyed_Parms.Gib = Gib;

	this->ProcessEvent ( pFnGibDestroyed, &GibDestroyed_Parms, NULL );
};

// Function Sanctum.SanctumSystemSettingsHelper.GetTextureLevel
// [0x00420002] 
// Parameters infos:
// unsigned char                  detailLevel                    ( CPF_Parm )
// TArray< struct FString >       outRendererDataProvider        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// int                            SelectedIndex                  ( CPF_Parm | CPF_OutParm )

void USanctumSystemSettingsHelper::GetTextureLevel ( unsigned char detailLevel, TArray< struct FString >* outRendererDataProvider, int* SelectedIndex )
{
	static UFunction* pFnGetTextureLevel = NULL;

	if ( ! pFnGetTextureLevel )
		pFnGetTextureLevel = (UFunction*) UObject::GObjObjects()->Data[ 55746 ];

	USanctumSystemSettingsHelper_execGetTextureLevel_Parms GetTextureLevel_Parms;
	GetTextureLevel_Parms.detailLevel = detailLevel;

	this->ProcessEvent ( pFnGetTextureLevel, &GetTextureLevel_Parms, NULL );

	if ( outRendererDataProvider )
		memcpy ( outRendererDataProvider, &GetTextureLevel_Parms.outRendererDataProvider, 0xC );

	if ( SelectedIndex )
		*SelectedIndex = GetTextureLevel_Parms.SelectedIndex;
};

// Function Sanctum.SanctumSystemSettingsHelper.getAALevel
// [0x00420002] 
// Parameters infos:
// unsigned long                  Enabled                        ( CPF_Parm )
// int                            aaVAlue                        ( CPF_Parm )
// TArray< struct FString >       outRendererDataProvider        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// int                            SelectedIndex                  ( CPF_Parm | CPF_OutParm )

void USanctumSystemSettingsHelper::getAALevel ( unsigned long Enabled, int aaVAlue, TArray< struct FString >* outRendererDataProvider, int* SelectedIndex )
{
	static UFunction* pFngetAALevel = NULL;

	if ( ! pFngetAALevel )
		pFngetAALevel = (UFunction*) UObject::GObjObjects()->Data[ 55739 ];

	USanctumSystemSettingsHelper_execgetAALevel_Parms getAALevel_Parms;
	getAALevel_Parms.Enabled = Enabled;
	getAALevel_Parms.aaVAlue = aaVAlue;

	this->ProcessEvent ( pFngetAALevel, &getAALevel_Parms, NULL );

	if ( outRendererDataProvider )
		memcpy ( outRendererDataProvider, &getAALevel_Parms.outRendererDataProvider, 0xC );

	if ( SelectedIndex )
		*SelectedIndex = getAALevel_Parms.SelectedIndex;
};

// Function Sanctum.SanctumSystemSettingsHelper.GetDetailMode
// [0x00420002] 
// Parameters infos:
// unsigned char                  detailLevel                    ( CPF_Parm )
// TArray< struct FString >       outRendererDataProvider        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// int                            SelectedIndex                  ( CPF_Parm | CPF_OutParm )

void USanctumSystemSettingsHelper::GetDetailMode ( unsigned char detailLevel, TArray< struct FString >* outRendererDataProvider, int* SelectedIndex )
{
	static UFunction* pFnGetDetailMode = NULL;

	if ( ! pFnGetDetailMode )
		pFnGetDetailMode = (UFunction*) UObject::GObjObjects()->Data[ 55732 ];

	USanctumSystemSettingsHelper_execGetDetailMode_Parms GetDetailMode_Parms;
	GetDetailMode_Parms.detailLevel = detailLevel;

	this->ProcessEvent ( pFnGetDetailMode, &GetDetailMode_Parms, NULL );

	if ( outRendererDataProvider )
		memcpy ( outRendererDataProvider, &GetDetailMode_Parms.outRendererDataProvider, 0xC );

	if ( SelectedIndex )
		*SelectedIndex = GetDetailMode_Parms.SelectedIndex;
};

// Function Sanctum.SanctumSystemSettingsHelper.PurgeDetailMode
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  DetailMode                     ( CPF_Parm )

unsigned char USanctumSystemSettingsHelper::PurgeDetailMode ( unsigned char DetailMode )
{
	static UFunction* pFnPurgeDetailMode = NULL;

	if ( ! pFnPurgeDetailMode )
		pFnPurgeDetailMode = (UFunction*) UObject::GObjObjects()->Data[ 55729 ];

	USanctumSystemSettingsHelper_execPurgeDetailMode_Parms PurgeDetailMode_Parms;
	PurgeDetailMode_Parms.DetailMode = DetailMode;

	this->ProcessEvent ( pFnPurgeDetailMode, &PurgeDetailMode_Parms, NULL );

	return PurgeDetailMode_Parms.ReturnValue;
};

// Function Sanctum.SanctumSystemSettingsHelper.getDetailLevel
// [0x00420002] 
// Parameters infos:
// unsigned char                  detailLevel                    ( CPF_Parm )
// TArray< struct FString >       outRendererDataProvider        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// int                            SelectedIndex                  ( CPF_Parm | CPF_OutParm )

void USanctumSystemSettingsHelper::getDetailLevel ( unsigned char detailLevel, TArray< struct FString >* outRendererDataProvider, int* SelectedIndex )
{
	static UFunction* pFngetDetailLevel = NULL;

	if ( ! pFngetDetailLevel )
		pFngetDetailLevel = (UFunction*) UObject::GObjObjects()->Data[ 55722 ];

	USanctumSystemSettingsHelper_execgetDetailLevel_Parms getDetailLevel_Parms;
	getDetailLevel_Parms.detailLevel = detailLevel;

	this->ProcessEvent ( pFngetDetailLevel, &getDetailLevel_Parms, NULL );

	if ( outRendererDataProvider )
		memcpy ( outRendererDataProvider, &getDetailLevel_Parms.outRendererDataProvider, 0xC );

	if ( SelectedIndex )
		*SelectedIndex = getDetailLevel_Parms.SelectedIndex;
};

// Function Sanctum.SanctumSystemSettingsHelper.gibSpawned
// [0x00020002] 
// Parameters infos:
// class ASanctumGib*             Gib                            ( CPF_Parm )

void USanctumSystemSettingsHelper::gibSpawned ( class ASanctumGib* Gib )
{
	static UFunction* pFngibSpawned = NULL;

	if ( ! pFngibSpawned )
		pFngibSpawned = (UFunction*) UObject::GObjObjects()->Data[ 55720 ];

	USanctumSystemSettingsHelper_execgibSpawned_Parms gibSpawned_Parms;
	gibSpawned_Parms.Gib = Gib;

	this->ProcessEvent ( pFngibSpawned, &gibSpawned_Parms, NULL );
};

// Function Sanctum.SanctumSystemSettingsHelper.IsMoreRagdollsAllowed
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumPawn*            E                              ( CPF_Parm )

bool USanctumSystemSettingsHelper::IsMoreRagdollsAllowed ( class ASanctumPawn* E )
{
	static UFunction* pFnIsMoreRagdollsAllowed = NULL;

	if ( ! pFnIsMoreRagdollsAllowed )
		pFnIsMoreRagdollsAllowed = (UFunction*) UObject::GObjObjects()->Data[ 46979 ];

	USanctumSystemSettingsHelper_execIsMoreRagdollsAllowed_Parms IsMoreRagdollsAllowed_Parms;
	IsMoreRagdollsAllowed_Parms.E = E;

	this->ProcessEvent ( pFnIsMoreRagdollsAllowed, &IsMoreRagdollsAllowed_Parms, NULL );

	return IsMoreRagdollsAllowed_Parms.ReturnValue;
};

// Function Sanctum.SanctumSystemSettingsHelper.IsMoreGibsAllowed
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumPawn*            E                              ( CPF_Parm )

bool USanctumSystemSettingsHelper::IsMoreGibsAllowed ( class ASanctumPawn* E )
{
	static UFunction* pFnIsMoreGibsAllowed = NULL;

	if ( ! pFnIsMoreGibsAllowed )
		pFnIsMoreGibsAllowed = (UFunction*) UObject::GObjObjects()->Data[ 46783 ];

	USanctumSystemSettingsHelper_execIsMoreGibsAllowed_Parms IsMoreGibsAllowed_Parms;
	IsMoreGibsAllowed_Parms.E = E;

	this->ProcessEvent ( pFnIsMoreGibsAllowed, &IsMoreGibsAllowed_Parms, NULL );

	return IsMoreGibsAllowed_Parms.ReturnValue;
};

// Function Sanctum.SanctumSystemSettingsHelper.destroyUnseenRagdolls
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSystemSettingsHelper::destroyUnseenRagdolls ( )
{
	static UFunction* pFndestroyUnseenRagdolls = NULL;

	if ( ! pFndestroyUnseenRagdolls )
		pFndestroyUnseenRagdolls = (UFunction*) UObject::GObjObjects()->Data[ 55715 ];

	USanctumSystemSettingsHelper_execdestroyUnseenRagdolls_Parms destroyUnseenRagdolls_Parms;

	this->ProcessEvent ( pFndestroyUnseenRagdolls, &destroyUnseenRagdolls_Parms, NULL );

	return destroyUnseenRagdolls_Parms.ReturnValue;
};

// Function Sanctum.SanctumSystemSettingsHelper.destoryUnseenGib
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSystemSettingsHelper::destoryUnseenGib ( )
{
	static UFunction* pFndestoryUnseenGib = NULL;

	if ( ! pFndestoryUnseenGib )
		pFndestoryUnseenGib = (UFunction*) UObject::GObjObjects()->Data[ 55712 ];

	USanctumSystemSettingsHelper_execdestoryUnseenGib_Parms destoryUnseenGib_Parms;

	this->ProcessEvent ( pFndestoryUnseenGib, &destoryUnseenGib_Parms, NULL );

	return destoryUnseenGib_Parms.ReturnValue;
};

// Function Sanctum.SanctumSystemSettingsHelper.forceRagdollsAndGibsForPawn
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumPawn*            E                              ( CPF_Parm )

bool USanctumSystemSettingsHelper::forceRagdollsAndGibsForPawn ( class ASanctumPawn* E )
{
	static UFunction* pFnforceRagdollsAndGibsForPawn = NULL;

	if ( ! pFnforceRagdollsAndGibsForPawn )
		pFnforceRagdollsAndGibsForPawn = (UFunction*) UObject::GObjObjects()->Data[ 55709 ];

	USanctumSystemSettingsHelper_execforceRagdollsAndGibsForPawn_Parms forceRagdollsAndGibsForPawn_Parms;
	forceRagdollsAndGibsForPawn_Parms.E = E;

	this->ProcessEvent ( pFnforceRagdollsAndGibsForPawn, &forceRagdollsAndGibsForPawn_Parms, NULL );

	return forceRagdollsAndGibsForPawn_Parms.ReturnValue;
};

// Function Sanctum.SanctumSystemSettingsHelper.Tick
// [0x00020002] 
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void USanctumSystemSettingsHelper::Tick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 55706 ];

	USanctumSystemSettingsHelper_execTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumSystemSettingsHelper.SetSoundPitch
// [0x00020002] 
// Parameters infos:
// float                          NewPitch                       ( CPF_Parm )

void USanctumSystemSettingsHelper::SetSoundPitch ( float NewPitch )
{
	static UFunction* pFnSetSoundPitch = NULL;

	if ( ! pFnSetSoundPitch )
		pFnSetSoundPitch = (UFunction*) UObject::GObjObjects()->Data[ 55704 ];

	USanctumSystemSettingsHelper_execSetSoundPitch_Parms SetSoundPitch_Parms;
	SetSoundPitch_Parms.NewPitch = NewPitch;

	this->ProcessEvent ( pFnSetSoundPitch, &SetSoundPitch_Parms, NULL );
};

// Function Sanctum.SanctumProjectileGrenade.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectileGrenade::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 54539 ];

	ASanctumProjectileGrenade_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Sanctum.SanctumProjectileGrenade.KilledAnEnemy
// [0x00020002] 
// Parameters infos:
// class UClass*                  Enemyclass                     ( CPF_Parm )

void ASanctumProjectileGrenade::KilledAnEnemy ( class UClass* Enemyclass )
{
	static UFunction* pFnKilledAnEnemy = NULL;

	if ( ! pFnKilledAnEnemy )
		pFnKilledAnEnemy = (UFunction*) UObject::GObjObjects()->Data[ 54537 ];

	ASanctumProjectileGrenade_execKilledAnEnemy_Parms KilledAnEnemy_Parms;
	KilledAnEnemy_Parms.Enemyclass = Enemyclass;

	this->ProcessEvent ( pFnKilledAnEnemy, &KilledAnEnemy_Parms, NULL );
};

// Function Sanctum.SanctumProjectileGrenade.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void ASanctumProjectileGrenade::Init ( struct FVector Direction )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 54535 ];

	ASanctumProjectileGrenade_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumProjectileGrenade.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumProjectileGrenade::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 54534 ];

	ASanctumProjectileGrenade_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumProjectile.SpawnExplosionEffects
// [0x00820102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectile::SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnSpawnExplosionEffects = NULL;

	if ( ! pFnSpawnExplosionEffects )
		pFnSpawnExplosionEffects = (UFunction*) UObject::GObjObjects()->Data[ 47594 ];

	ASanctumProjectile_execSpawnExplosionEffects_Parms SpawnExplosionEffects_Parms;
	memcpy ( &SpawnExplosionEffects_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &SpawnExplosionEffects_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnSpawnExplosionEffects, &SpawnExplosionEffects_Parms, NULL );
};

// Function Sanctum.SanctumProjectile.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectile::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 47591 ];

	ASanctumProjectile_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Sanctum.SanctumProjectile.MyOnParticleSystemFinished
// [0x00020102] 
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void ASanctumProjectile::MyOnParticleSystemFinished ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnMyOnParticleSystemFinished = NULL;

	if ( ! pFnMyOnParticleSystemFinished )
		pFnMyOnParticleSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 47589 ];

	ASanctumProjectile_execMyOnParticleSystemFinished_Parms MyOnParticleSystemFinished_Parms;
	MyOnParticleSystemFinished_Parms.PSC = PSC;

	this->ProcessEvent ( pFnMyOnParticleSystemFinished, &MyOnParticleSystemFinished_Parms, NULL );
};

// Function Sanctum.SanctumProjectile.SpawnFlightEffects
// [0x00820102] 
// Parameters infos:

void ASanctumProjectile::SpawnFlightEffects ( )
{
	static UFunction* pFnSpawnFlightEffects = NULL;

	if ( ! pFnSpawnFlightEffects )
		pFnSpawnFlightEffects = (UFunction*) UObject::GObjObjects()->Data[ 47587 ];

	ASanctumProjectile_execSpawnFlightEffects_Parms SpawnFlightEffects_Parms;

	this->ProcessEvent ( pFnSpawnFlightEffects, &SpawnFlightEffects_Parms, NULL );
};

// Function Sanctum.SanctumProjectile.HitAnEnemy
// [0x00020002] 
// Parameters infos:

void ASanctumProjectile::HitAnEnemy ( )
{
	static UFunction* pFnHitAnEnemy = NULL;

	if ( ! pFnHitAnEnemy )
		pFnHitAnEnemy = (UFunction*) UObject::GObjObjects()->Data[ 47586 ];

	ASanctumProjectile_execHitAnEnemy_Parms HitAnEnemy_Parms;

	this->ProcessEvent ( pFnHitAnEnemy, &HitAnEnemy_Parms, NULL );
};

// Function Sanctum.SanctumProjectile.ProcessTouch
// [0x00020102] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectile::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 47582 ];

	ASanctumProjectile_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function Sanctum.SanctumProjectile.Touch
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectile::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 47572 ];

	ASanctumProjectile_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Sanctum.SanctumProjectile.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASanctumProjectile::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47571 ];

	ASanctumProjectile_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumConsole.SetCursorPos
// [0x00020002] 
// Parameters infos:
// int                            Position                       ( CPF_Parm )

void USanctumConsole::SetCursorPos ( int Position )
{
	static UFunction* pFnSetCursorPos = NULL;

	if ( ! pFnSetCursorPos )
		pFnSetCursorPos = (UFunction*) UObject::GObjObjects()->Data[ 45732 ];

	USanctumConsole_execSetCursorPos_Parms SetCursorPos_Parms;
	SetCursorPos_Parms.Position = Position;

	this->ProcessEvent ( pFnSetCursorPos, &SetCursorPos_Parms, NULL );
};

// Function Sanctum.SanctumConsole.StartTyping
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void USanctumConsole::StartTyping ( struct FString Text )
{
	static UFunction* pFnStartTyping = NULL;

	if ( ! pFnStartTyping )
		pFnStartTyping = (UFunction*) UObject::GObjObjects()->Data[ 45730 ];

	USanctumConsole_execStartTyping_Parms StartTyping_Parms;
	memcpy ( &StartTyping_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnStartTyping, &StartTyping_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologram.setUpgrade
// [0x00020102] 
// Parameters infos:

void ASanctumTowerHologram::setUpgrade ( )
{
	static UFunction* pFnsetUpgrade = NULL;

	if ( ! pFnsetUpgrade )
		pFnsetUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 45832 ];

	ASanctumTowerHologram_execsetUpgrade_Parms setUpgrade_Parms;

	this->ProcessEvent ( pFnsetUpgrade, &setUpgrade_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologram.SetEnabled
// [0x00820102] 
// Parameters infos:

void ASanctumTowerHologram::SetEnabled ( )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 45825 ];

	ASanctumTowerHologram_execSetEnabled_Parms SetEnabled_Parms;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologram.SetDisabled
// [0x00820102] 
// Parameters infos:

void ASanctumTowerHologram::SetDisabled ( )
{
	static UFunction* pFnSetDisabled = NULL;

	if ( ! pFnSetDisabled )
		pFnSetDisabled = (UFunction*) UObject::GObjObjects()->Data[ 45821 ];

	ASanctumTowerHologram_execSetDisabled_Parms SetDisabled_Parms;

	this->ProcessEvent ( pFnSetDisabled, &SetDisabled_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologram.actionChanged
// [0x00020102] 
// Parameters infos:

void ASanctumTowerHologram::actionChanged ( )
{
	static UFunction* pFnactionChanged = NULL;

	if ( ! pFnactionChanged )
		pFnactionChanged = (UFunction*) UObject::GObjObjects()->Data[ 45820 ];

	ASanctumTowerHologram_execactionChanged_Parms actionChanged_Parms;

	this->ProcessEvent ( pFnactionChanged, &actionChanged_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologram.setCountdownChange
// [0x00020102] 
// Parameters infos:
// float                          percentComplete                ( CPF_Parm )

void ASanctumTowerHologram::setCountdownChange ( float percentComplete )
{
	static UFunction* pFnsetCountdownChange = NULL;

	if ( ! pFnsetCountdownChange )
		pFnsetCountdownChange = (UFunction*) UObject::GObjObjects()->Data[ 45817 ];

	ASanctumTowerHologram_execsetCountdownChange_Parms setCountdownChange_Parms;
	setCountdownChange_Parms.percentComplete = percentComplete;

	this->ProcessEvent ( pFnsetCountdownChange, &setCountdownChange_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologram.setPlayerOwner
// [0x00020002] 
// Parameters infos:
// class APawn*                   PC                             ( CPF_Parm )

void ASanctumTowerHologram::setPlayerOwner ( class APawn* PC )
{
	static UFunction* pFnsetPlayerOwner = NULL;

	if ( ! pFnsetPlayerOwner )
		pFnsetPlayerOwner = (UFunction*) UObject::GObjObjects()->Data[ 45815 ];

	ASanctumTowerHologram_execsetPlayerOwner_Parms setPlayerOwner_Parms;
	setPlayerOwner_Parms.PC = PC;

	this->ProcessEvent ( pFnsetPlayerOwner, &setPlayerOwner_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologram.alignWithTower
// [0x00020100] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBaseAttachmentOffensive* offensive                      ( CPF_Parm )

bool ASanctumTowerHologram::alignWithTower ( class ASanctumTowerBaseAttachmentOffensive* offensive )
{
	static UFunction* pFnalignWithTower = NULL;

	if ( ! pFnalignWithTower )
		pFnalignWithTower = (UFunction*) UObject::GObjObjects()->Data[ 45812 ];

	ASanctumTowerHologram_execalignWithTower_Parms alignWithTower_Parms;
	alignWithTower_Parms.offensive = offensive;

	this->ProcessEvent ( pFnalignWithTower, &alignWithTower_Parms, NULL );

	return alignWithTower_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologram.syncWithTower
// [0x00020102] 
// Parameters infos:
// class ASanctumTowerBaseAttachment* Attachment                     ( CPF_Parm )

void ASanctumTowerHologram::syncWithTower ( class ASanctumTowerBaseAttachment* Attachment )
{
	static UFunction* pFnsyncWithTower = NULL;

	if ( ! pFnsyncWithTower )
		pFnsyncWithTower = (UFunction*) UObject::GObjObjects()->Data[ 45808 ];

	ASanctumTowerHologram_execsyncWithTower_Parms syncWithTower_Parms;
	syncWithTower_Parms.Attachment = Attachment;

	this->ProcessEvent ( pFnsyncWithTower, &syncWithTower_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologram.getTowerClass
// [0x00020102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ASanctumTowerHologram::getTowerClass ( )
{
	static UFunction* pFngetTowerClass = NULL;

	if ( ! pFngetTowerClass )
		pFngetTowerClass = (UFunction*) UObject::GObjObjects()->Data[ 45806 ];

	ASanctumTowerHologram_execgetTowerClass_Parms getTowerClass_Parms;

	this->ProcessEvent ( pFngetTowerClass, &getTowerClass_Parms, NULL );

	return getTowerClass_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologram.PlayerOnBase
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBase*       TB                             ( CPF_Parm )

bool ASanctumTowerHologram::PlayerOnBase ( class ASanctumTowerBase* TB )
{
	static UFunction* pFnPlayerOnBase = NULL;

	if ( ! pFnPlayerOnBase )
		pFnPlayerOnBase = (UFunction*) UObject::GObjObjects()->Data[ 45792 ];

	ASanctumTowerHologram_execPlayerOnBase_Parms PlayerOnBase_Parms;
	PlayerOnBase_Parms.TB = TB;

	this->ProcessEvent ( pFnPlayerOnBase, &PlayerOnBase_Parms, NULL );

	return PlayerOnBase_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologram.AbleToBuildOnBase
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )
// int                            Rubel                          ( CPF_Parm )

unsigned char ASanctumTowerHologram::AbleToBuildOnBase ( class ASanctumTowerBase* TowerBase, int Rubel )
{
	static UFunction* pFnAbleToBuildOnBase = NULL;

	if ( ! pFnAbleToBuildOnBase )
		pFnAbleToBuildOnBase = (UFunction*) UObject::GObjObjects()->Data[ 45785 ];

	ASanctumTowerHologram_execAbleToBuildOnBase_Parms AbleToBuildOnBase_Parms;
	AbleToBuildOnBase_Parms.TowerBase = TowerBase;
	AbleToBuildOnBase_Parms.Rubel = Rubel;

	this->ProcessEvent ( pFnAbleToBuildOnBase, &AbleToBuildOnBase_Parms, NULL );

	return AbleToBuildOnBase_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologram.IsAChosenTower
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   hologramOwner                  ( CPF_Parm )

bool ASanctumTowerHologram::IsAChosenTower ( class APawn* hologramOwner )
{
	static UFunction* pFnIsAChosenTower = NULL;

	if ( ! pFnIsAChosenTower )
		pFnIsAChosenTower = (UFunction*) UObject::GObjObjects()->Data[ 45776 ];

	ASanctumTowerHologram_execIsAChosenTower_Parms IsAChosenTower_Parms;
	IsAChosenTower_Parms.hologramOwner = hologramOwner;

	this->ProcessEvent ( pFnIsAChosenTower, &IsAChosenTower_Parms, NULL );

	return IsAChosenTower_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologram.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerHologram::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 45775 ];

	ASanctumTowerHologram_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologram.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumTowerHologram::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 45773 ];

	ASanctumTowerHologram_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.AdjustAim
// [0x00020000] 
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumTowerBaseAttachmentOffensive::AdjustAim ( float Delta )
{
	static UFunction* pFnAdjustAim = NULL;

	if ( ! pFnAdjustAim )
		pFnAdjustAim = (UFunction*) UObject::GObjObjects()->Data[ 56091 ];

	ASanctumTowerBaseAttachmentOffensive_execAdjustAim_Parms AdjustAim_Parms;
	AdjustAim_Parms.Delta = Delta;

	this->ProcessEvent ( pFnAdjustAim, &AdjustAim_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.PlayIdleAnimation
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentOffensive::PlayIdleAnimation ( )
{
	static UFunction* pFnPlayIdleAnimation = NULL;

	if ( ! pFnPlayIdleAnimation )
		pFnPlayIdleAnimation = (UFunction*) UObject::GObjObjects()->Data[ 56082 ];

	ASanctumTowerBaseAttachmentOffensive_execPlayIdleAnimation_Parms PlayIdleAnimation_Parms;

	this->ProcessEvent ( pFnPlayIdleAnimation, &PlayIdleAnimation_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.PlayShootingAnimation
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentOffensive::PlayShootingAnimation ( )
{
	static UFunction* pFnPlayShootingAnimation = NULL;

	if ( ! pFnPlayShootingAnimation )
		pFnPlayShootingAnimation = (UFunction*) UObject::GObjObjects()->Data[ 56081 ];

	ASanctumTowerBaseAttachmentOffensive_execPlayShootingAnimation_Parms PlayShootingAnimation_Parms;

	this->ProcessEvent ( pFnPlayShootingAnimation, &PlayShootingAnimation_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.Destroyed
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentOffensive::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 56073 ];

	ASanctumTowerBaseAttachmentOffensive_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.throttleAI
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Delta                          ( CPF_Parm )

bool ASanctumTowerBaseAttachmentOffensive::throttleAI ( float Delta )
{
	static UFunction* pFnthrottleAI = NULL;

	if ( ! pFnthrottleAI )
		pFnthrottleAI = (UFunction*) UObject::GObjObjects()->Data[ 56070 ];

	ASanctumTowerBaseAttachmentOffensive_execthrottleAI_Parms throttleAI_Parms;
	throttleAI_Parms.Delta = Delta;

	this->ProcessEvent ( pFnthrottleAI, &throttleAI_Parms, NULL );

	return throttleAI_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.UpgradeMesh
// [0x00820102] 
// Parameters infos:
// int                            toLevel                        ( CPF_Parm )

void ASanctumTowerBaseAttachmentOffensive::UpgradeMesh ( int toLevel )
{
	static UFunction* pFnUpgradeMesh = NULL;

	if ( ! pFnUpgradeMesh )
		pFnUpgradeMesh = (UFunction*) UObject::GObjObjects()->Data[ 56066 ];

	ASanctumTowerBaseAttachmentOffensive_execUpgradeMesh_Parms UpgradeMesh_Parms;
	UpgradeMesh_Parms.toLevel = toLevel;

	this->ProcessEvent ( pFnUpgradeMesh, &UpgradeMesh_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.FindAndAssignNewTarget
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentOffensive::FindAndAssignNewTarget ( )
{
	static UFunction* pFnFindAndAssignNewTarget = NULL;

	if ( ! pFnFindAndAssignNewTarget )
		pFnFindAndAssignNewTarget = (UFunction*) UObject::GObjObjects()->Data[ 56065 ];

	ASanctumTowerBaseAttachmentOffensive_execFindAndAssignNewTarget_Parms FindAndAssignNewTarget_Parms;

	this->ProcessEvent ( pFnFindAndAssignNewTarget, &FindAndAssignNewTarget_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.Upgrade
// [0x00020002] 
// Parameters infos:
// int                            toLevel                        ( CPF_Parm )

void ASanctumTowerBaseAttachmentOffensive::Upgrade ( int toLevel )
{
	static UFunction* pFnUpgrade = NULL;

	if ( ! pFnUpgrade )
		pFnUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 56063 ];

	ASanctumTowerBaseAttachmentOffensive_execUpgrade_Parms Upgrade_Parms;
	Upgrade_Parms.toLevel = toLevel;

	this->ProcessEvent ( pFnUpgrade, &Upgrade_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.findNewTarget
// [0x00020002] 
// Parameters infos:
// class ASanctumEnemy*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASanctumEnemy* ASanctumTowerBaseAttachmentOffensive::findNewTarget ( )
{
	static UFunction* pFnfindNewTarget = NULL;

	if ( ! pFnfindNewTarget )
		pFnfindNewTarget = (UFunction*) UObject::GObjObjects()->Data[ 56057 ];

	ASanctumTowerBaseAttachmentOffensive_execfindNewTarget_Parms findNewTarget_Parms;

	this->ProcessEvent ( pFnfindNewTarget, &findNewTarget_Parms, NULL );

	return findNewTarget_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.isValidTarget
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumEnemy*           Target                         ( CPF_Parm )

bool ASanctumTowerBaseAttachmentOffensive::isValidTarget ( class ASanctumEnemy* Target )
{
	static UFunction* pFnisValidTarget = NULL;

	if ( ! pFnisValidTarget )
		pFnisValidTarget = (UFunction*) UObject::GObjObjects()->Data[ 56054 ];

	ASanctumTowerBaseAttachmentOffensive_execisValidTarget_Parms isValidTarget_Parms;
	isValidTarget_Parms.Target = Target;

	this->ProcessEvent ( pFnisValidTarget, &isValidTarget_Parms, NULL );

	return isValidTarget_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.isOkTarget
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumEnemy*           Target                         ( CPF_Parm )

bool ASanctumTowerBaseAttachmentOffensive::isOkTarget ( class ASanctumEnemy* Target )
{
	static UFunction* pFnisOkTarget = NULL;

	if ( ! pFnisOkTarget )
		pFnisOkTarget = (UFunction*) UObject::GObjObjects()->Data[ 56045 ];

	ASanctumTowerBaseAttachmentOffensive_execisOkTarget_Parms isOkTarget_Parms;
	isOkTarget_Parms.Target = Target;

	this->ProcessEvent ( pFnisOkTarget, &isOkTarget_Parms, NULL );

	return isOkTarget_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.isVisible
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumEnemy*           Enemy                          ( CPF_Parm )

bool ASanctumTowerBaseAttachmentOffensive::isVisible ( class ASanctumEnemy* Enemy )
{
	static UFunction* pFnisVisible = NULL;

	if ( ! pFnisVisible )
		pFnisVisible = (UFunction*) UObject::GObjObjects()->Data[ 56035 ];

	ASanctumTowerBaseAttachmentOffensive_execisVisible_Parms isVisible_Parms;
	isVisible_Parms.Enemy = Enemy;

	this->ProcessEvent ( pFnisVisible, &isVisible_Parms, NULL );

	return isVisible_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.StopOverview
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentOffensive::StopOverview ( )
{
	static UFunction* pFnStopOverview = NULL;

	if ( ! pFnStopOverview )
		pFnStopOverview = (UFunction*) UObject::GObjObjects()->Data[ 56034 ];

	ASanctumTowerBaseAttachmentOffensive_execStopOverview_Parms StopOverview_Parms;

	this->ProcessEvent ( pFnStopOverview, &StopOverview_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.StartOverview
// [0x00020100] 
// Parameters infos:

void ASanctumTowerBaseAttachmentOffensive::StartOverview ( )
{
	static UFunction* pFnStartOverview = NULL;

	if ( ! pFnStartOverview )
		pFnStartOverview = (UFunction*) UObject::GObjObjects()->Data[ 56033 ];

	ASanctumTowerBaseAttachmentOffensive_execStartOverview_Parms StartOverview_Parms;

	this->ProcessEvent ( pFnStartOverview, &StartOverview_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.StopHighlight
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentOffensive::StopHighlight ( )
{
	static UFunction* pFnStopHighlight = NULL;

	if ( ! pFnStopHighlight )
		pFnStopHighlight = (UFunction*) UObject::GObjObjects()->Data[ 56032 ];

	ASanctumTowerBaseAttachmentOffensive_execStopHighlight_Parms StopHighlight_Parms;

	this->ProcessEvent ( pFnStopHighlight, &StopHighlight_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.StartHighlight
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentOffensive::StartHighlight ( )
{
	static UFunction* pFnStartHighlight = NULL;

	if ( ! pFnStartHighlight )
		pFnStartHighlight = (UFunction*) UObject::GObjObjects()->Data[ 56023 ];

	ASanctumTowerBaseAttachmentOffensive_execStartHighlight_Parms StartHighlight_Parms;

	this->ProcessEvent ( pFnStartHighlight, &StartHighlight_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.hitWhitelistedComponent
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Actor                          ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

bool ASanctumTowerBaseAttachmentOffensive::hitWhitelistedComponent ( class AActor* Actor, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnhitWhitelistedComponent = NULL;

	if ( ! pFnhitWhitelistedComponent )
		pFnhitWhitelistedComponent = (UFunction*) UObject::GObjObjects()->Data[ 56019 ];

	ASanctumTowerBaseAttachmentOffensive_exechitWhitelistedComponent_Parms hitWhitelistedComponent_Parms;
	hitWhitelistedComponent_Parms.Actor = Actor;
	memcpy ( &hitWhitelistedComponent_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnhitWhitelistedComponent, &hitWhitelistedComponent_Parms, NULL );

	return hitWhitelistedComponent_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.notHitWhitelistedComponent
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Actor                          ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

bool ASanctumTowerBaseAttachmentOffensive::notHitWhitelistedComponent ( class AActor* Actor, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnnotHitWhitelistedComponent = NULL;

	if ( ! pFnnotHitWhitelistedComponent )
		pFnnotHitWhitelistedComponent = (UFunction*) UObject::GObjObjects()->Data[ 56015 ];

	ASanctumTowerBaseAttachmentOffensive_execnotHitWhitelistedComponent_Parms notHitWhitelistedComponent_Parms;
	notHitWhitelistedComponent_Parms.Actor = Actor;
	memcpy ( &notHitWhitelistedComponent_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnnotHitWhitelistedComponent, &notHitWhitelistedComponent_Parms, NULL );

	return notHitWhitelistedComponent_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.AwaitingWeaponUpgrade
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentOffensive::AwaitingWeaponUpgrade ( )
{
	static UFunction* pFnAwaitingWeaponUpgrade = NULL;

	if ( ! pFnAwaitingWeaponUpgrade )
		pFnAwaitingWeaponUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 56014 ];

	ASanctumTowerBaseAttachmentOffensive_execAwaitingWeaponUpgrade_Parms AwaitingWeaponUpgrade_Parms;

	this->ProcessEvent ( pFnAwaitingWeaponUpgrade, &AwaitingWeaponUpgrade_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.AddBlockMaterialToArray
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentOffensive::AddBlockMaterialToArray ( )
{
	static UFunction* pFnAddBlockMaterialToArray = NULL;

	if ( ! pFnAddBlockMaterialToArray )
		pFnAddBlockMaterialToArray = (UFunction*) UObject::GObjObjects()->Data[ 56012 ];

	ASanctumTowerBaseAttachmentOffensive_execAddBlockMaterialToArray_Parms AddBlockMaterialToArray_Parms;

	this->ProcessEvent ( pFnAddBlockMaterialToArray, &AddBlockMaterialToArray_Parms, NULL );

	return AddBlockMaterialToArray_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.SetChristmasColor
// [0x00020102] 
// Parameters infos:
// struct FLinearColor            LC                             ( CPF_Parm )

void ASanctumTowerBaseAttachmentOffensive::SetChristmasColor ( struct FLinearColor LC )
{
	static UFunction* pFnSetChristmasColor = NULL;

	if ( ! pFnSetChristmasColor )
		pFnSetChristmasColor = (UFunction*) UObject::GObjObjects()->Data[ 56010 ];

	ASanctumTowerBaseAttachmentOffensive_execSetChristmasColor_Parms SetChristmasColor_Parms;
	memcpy ( &SetChristmasColor_Parms.LC, &LC, 0x10 );

	this->ProcessEvent ( pFnSetChristmasColor, &SetChristmasColor_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentOffensive::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 56008 ];

	ASanctumTowerBaseAttachmentOffensive_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentOffensive.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   Variable                       ( CPF_Parm )

void ASanctumTowerBaseAttachmentOffensive::eventReplicatedEvent ( struct FName Variable )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 56006 ];

	ASanctumTowerBaseAttachmentOffensive_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.Variable, &Variable, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumDataStore_OnlineGameSearch.ClearAllSearchResults
// [0x00020002] 
// Parameters infos:

void USanctumDataStore_OnlineGameSearch::ClearAllSearchResults ( )
{
	static UFunction* pFnClearAllSearchResults = NULL;

	if ( ! pFnClearAllSearchResults )
		pFnClearAllSearchResults = (UFunction*) UObject::GObjObjects()->Data[ 46561 ];

	USanctumDataStore_OnlineGameSearch_execClearAllSearchResults_Parms ClearAllSearchResults_Parms;

	this->ProcessEvent ( pFnClearAllSearchResults, &ClearAllSearchResults_Parms, NULL );
};

// Function Sanctum.SanctumDataStore_OnlineGameSearch.Init
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumDataStore_OnlineGameSearch::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 46560 ];

	USanctumDataStore_OnlineGameSearch_eventInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumOnlineLeaderboardRead.GetScore
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            Player                         ( CPF_Parm )

int USanctumOnlineLeaderboardRead::GetScore ( struct FUniqueNetId Player )
{
	static UFunction* pFnGetScore = NULL;

	if ( ! pFnGetScore )
		pFnGetScore = (UFunction*) UObject::GObjObjects()->Data[ 53339 ];

	USanctumOnlineLeaderboardRead_execGetScore_Parms GetScore_Parms;
	memcpy ( &GetScore_Parms.Player, &Player, 0x8 );

	this->ProcessEvent ( pFnGetScore, &GetScore_Parms, NULL );

	return GetScore_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapituGame.addFavouriteTower
// [0x00820002] 
// Parameters infos:
// struct FString                 Tower                          ( CPF_Parm | CPF_NeedCtorLink )
// int                            Count                          ( CPF_Parm )

void USanctumSapituGame::addFavouriteTower ( struct FString Tower, int Count )
{
	static UFunction* pFnaddFavouriteTower = NULL;

	if ( ! pFnaddFavouriteTower )
		pFnaddFavouriteTower = (UFunction*) UObject::GObjObjects()->Data[ 55057 ];

	USanctumSapituGame_execaddFavouriteTower_Parms addFavouriteTower_Parms;
	memcpy ( &addFavouriteTower_Parms.Tower, &Tower, 0xC );
	addFavouriteTower_Parms.Count = Count;

	this->ProcessEvent ( pFnaddFavouriteTower, &addFavouriteTower_Parms, NULL );
};

// Function Sanctum.SanctumSapituGame.addTower
// [0x00820002] 
// Parameters infos:
// struct FString                 twClass                        ( CPF_Parm | CPF_NeedCtorLink )
// int                            twLevel                        ( CPF_Parm )
// struct FName                   twBaseName                     ( CPF_Parm )
// int                            TotalDamage                    ( CPF_Parm )
// int                            lastWaveDamage                 ( CPF_Parm )
// int                            TotalKills                     ( CPF_Parm )
// int                            lastWaveKills                  ( CPF_Parm )

void USanctumSapituGame::addTower ( struct FString twClass, int twLevel, struct FName twBaseName, int TotalDamage, int lastWaveDamage, int TotalKills, int lastWaveKills )
{
	static UFunction* pFnaddTower = NULL;

	if ( ! pFnaddTower )
		pFnaddTower = (UFunction*) UObject::GObjObjects()->Data[ 55048 ];

	USanctumSapituGame_execaddTower_Parms addTower_Parms;
	memcpy ( &addTower_Parms.twClass, &twClass, 0xC );
	addTower_Parms.twLevel = twLevel;
	memcpy ( &addTower_Parms.twBaseName, &twBaseName, 0x8 );
	addTower_Parms.TotalDamage = TotalDamage;
	addTower_Parms.lastWaveDamage = lastWaveDamage;
	addTower_Parms.TotalKills = TotalKills;
	addTower_Parms.lastWaveKills = lastWaveKills;

	this->ProcessEvent ( pFnaddTower, &addTower_Parms, NULL );
};

// Function Sanctum.SanctumSapituGame.addWeapon
// [0x00820002] 
// Parameters infos:
// struct FString                 wpClass                        ( CPF_Parm | CPF_NeedCtorLink )
// int                            wpLevel                        ( CPF_Parm )
// float                          wpTime                         ( CPF_Parm )

void USanctumSapituGame::addWeapon ( struct FString wpClass, int wpLevel, float wpTime )
{
	static UFunction* pFnaddWeapon = NULL;

	if ( ! pFnaddWeapon )
		pFnaddWeapon = (UFunction*) UObject::GObjObjects()->Data[ 55043 ];

	USanctumSapituGame_execaddWeapon_Parms addWeapon_Parms;
	memcpy ( &addWeapon_Parms.wpClass, &wpClass, 0xC );
	addWeapon_Parms.wpLevel = wpLevel;
	addWeapon_Parms.wpTime = wpTime;

	this->ProcessEvent ( pFnaddWeapon, &addWeapon_Parms, NULL );
};

// Function Sanctum.SanctumSapituGame.GetSaveName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USanctumSapituGame::GetSaveName ( )
{
	static UFunction* pFnGetSaveName = NULL;

	if ( ! pFnGetSaveName )
		pFnGetSaveName = (UFunction*) UObject::GObjObjects()->Data[ 55041 ];

	USanctumSapituGame_execGetSaveName_Parms GetSaveName_Parms;

	this->ProcessEvent ( pFnGetSaveName, &GetSaveName_Parms, NULL );

	return GetSaveName_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapituGame.stringToGame
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSapituGame::stringToGame ( )
{
	static UFunction* pFnstringToGame = NULL;

	if ( ! pFnstringToGame )
		pFnstringToGame = (UFunction*) UObject::GObjObjects()->Data[ 54933 ];

	USanctumSapituGame_execstringToGame_Parms stringToGame_Parms;

	this->ProcessEvent ( pFnstringToGame, &stringToGame_Parms, NULL );

	return stringToGame_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapituGame.gameToString
// [0x00020002] 
// Parameters infos:

void USanctumSapituGame::gameToString ( )
{
	static UFunction* pFngameToString = NULL;

	if ( ! pFngameToString )
		pFngameToString = (UFunction*) UObject::GObjObjects()->Data[ 55032 ];

	USanctumSapituGame_execgameToString_Parms gameToString_Parms;

	this->ProcessEvent ( pFngameToString, &gameToString_Parms, NULL );
};

// Function Sanctum.SanctumSapitu.CreateGame
// [0x00020002] 
// Parameters infos:
// class USanctumSapituGame*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 GameID                         ( CPF_Parm | CPF_NeedCtorLink )

class USanctumSapituGame* USanctumSapitu::CreateGame ( struct FString GameID )
{
	static UFunction* pFnCreateGame = NULL;

	if ( ! pFnCreateGame )
		pFnCreateGame = (UFunction*) UObject::GObjObjects()->Data[ 45962 ];

	USanctumSapitu_execCreateGame_Parms CreateGame_Parms;
	memcpy ( &CreateGame_Parms.GameID, &GameID, 0xC );

	this->ProcessEvent ( pFnCreateGame, &CreateGame_Parms, NULL );

	return CreateGame_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapitu.SaveLastEquipment
// [0x00020002] 
// Parameters infos:
// TArray< struct FString >       Weapons                        ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FString >       Holograms                      ( CPF_Parm | CPF_NeedCtorLink )

void USanctumSapitu::SaveLastEquipment ( TArray< struct FString > Weapons, TArray< struct FString > Holograms )
{
	static UFunction* pFnSaveLastEquipment = NULL;

	if ( ! pFnSaveLastEquipment )
		pFnSaveLastEquipment = (UFunction*) UObject::GObjObjects()->Data[ 55018 ];

	USanctumSapitu_execSaveLastEquipment_Parms SaveLastEquipment_Parms;
	memcpy ( &SaveLastEquipment_Parms.Weapons, &Weapons, 0xC );
	memcpy ( &SaveLastEquipment_Parms.Holograms, &Holograms, 0xC );

	this->ProcessEvent ( pFnSaveLastEquipment, &SaveLastEquipment_Parms, NULL );
};

// Function Sanctum.SanctumSapitu.GetLastEquipment
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< struct FString >       Weapons                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FString >       Holograms                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USanctumSapitu::GetLastEquipment ( TArray< struct FString >* Weapons, TArray< struct FString >* Holograms )
{
	static UFunction* pFnGetLastEquipment = NULL;

	if ( ! pFnGetLastEquipment )
		pFnGetLastEquipment = (UFunction*) UObject::GObjObjects()->Data[ 46204 ];

	USanctumSapitu_execGetLastEquipment_Parms GetLastEquipment_Parms;

	this->ProcessEvent ( pFnGetLastEquipment, &GetLastEquipment_Parms, NULL );

	if ( Weapons )
		memcpy ( Weapons, &GetLastEquipment_Parms.Weapons, 0xC );

	if ( Holograms )
		memcpy ( Holograms, &GetLastEquipment_Parms.Holograms, 0xC );

	return GetLastEquipment_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapitu.CreateSapituFromSteamCloud
// [0x00020002] 
// Parameters infos:
// class USanctumSapitu*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// class UClass*                  SapituClass                    ( CPF_Parm )

class USanctumSapitu* USanctumSapitu::CreateSapituFromSteamCloud ( struct FString Filename, class UClass* SapituClass )
{
	static UFunction* pFnCreateSapituFromSteamCloud = NULL;

	if ( ! pFnCreateSapituFromSteamCloud )
		pFnCreateSapituFromSteamCloud = (UFunction*) UObject::GObjObjects()->Data[ 55003 ];

	USanctumSapitu_execCreateSapituFromSteamCloud_Parms CreateSapituFromSteamCloud_Parms;
	memcpy ( &CreateSapituFromSteamCloud_Parms.Filename, &Filename, 0xC );
	CreateSapituFromSteamCloud_Parms.SapituClass = SapituClass;

	this->ProcessEvent ( pFnCreateSapituFromSteamCloud, &CreateSapituFromSteamCloud_Parms, NULL );

	return CreateSapituFromSteamCloud_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapitu.GetGameSave
// [0x00020002] 
// Parameters infos:
// class USanctumSapituGame*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 GameName                       ( CPF_Parm | CPF_NeedCtorLink )

class USanctumSapituGame* USanctumSapitu::GetGameSave ( struct FString GameName )
{
	static UFunction* pFnGetGameSave = NULL;

	if ( ! pFnGetGameSave )
		pFnGetGameSave = (UFunction*) UObject::GObjObjects()->Data[ 54999 ];

	USanctumSapitu_execGetGameSave_Parms GetGameSave_Parms;
	memcpy ( &GetGameSave_Parms.GameName, &GameName, 0xC );

	this->ProcessEvent ( pFnGetGameSave, &GetGameSave_Parms, NULL );

	return GetGameSave_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapitu.UpdateGlobalSaveWithStarsRetroactively
// [0x00020002] 
// Parameters infos:
// TArray< struct FAchievementDetails > Achievements                   ( CPF_Parm | CPF_NeedCtorLink )

void USanctumSapitu::UpdateGlobalSaveWithStarsRetroactively ( TArray< struct FAchievementDetails > Achievements )
{
	static UFunction* pFnUpdateGlobalSaveWithStarsRetroactively = NULL;

	if ( ! pFnUpdateGlobalSaveWithStarsRetroactively )
		pFnUpdateGlobalSaveWithStarsRetroactively = (UFunction*) UObject::GObjObjects()->Data[ 54995 ];

	USanctumSapitu_execUpdateGlobalSaveWithStarsRetroactively_Parms UpdateGlobalSaveWithStarsRetroactively_Parms;
	memcpy ( &UpdateGlobalSaveWithStarsRetroactively_Parms.Achievements, &Achievements, 0xC );

	this->ProcessEvent ( pFnUpdateGlobalSaveWithStarsRetroactively, &UpdateGlobalSaveWithStarsRetroactively_Parms, NULL );
};

// Function Sanctum.SanctumSapitu.GetGlobalSave
// [0x00020002] 
// Parameters infos:
// class USanctumSapituGlobal*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USanctumSapituGlobal* USanctumSapitu::GetGlobalSave ( )
{
	static UFunction* pFnGetGlobalSave = NULL;

	if ( ! pFnGetGlobalSave )
		pFnGetGlobalSave = (UFunction*) UObject::GObjObjects()->Data[ 54992 ];

	USanctumSapitu_execGetGlobalSave_Parms GetGlobalSave_Parms;

	this->ProcessEvent ( pFnGetGlobalSave, &GetGlobalSave_Parms, NULL );

	return GetGlobalSave_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapitu.SetStarsForLevelByName
// [0x00820002] 
// Parameters infos:
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// int                            stars                          ( CPF_Parm )

void USanctumSapitu::SetStarsForLevelByName ( struct FString MapName, int stars )
{
	static UFunction* pFnSetStarsForLevelByName = NULL;

	if ( ! pFnSetStarsForLevelByName )
		pFnSetStarsForLevelByName = (UFunction*) UObject::GObjObjects()->Data[ 54986 ];

	USanctumSapitu_execSetStarsForLevelByName_Parms SetStarsForLevelByName_Parms;
	memcpy ( &SetStarsForLevelByName_Parms.MapName, &MapName, 0xC );
	SetStarsForLevelByName_Parms.stars = stars;

	this->ProcessEvent ( pFnSetStarsForLevelByName, &SetStarsForLevelByName_Parms, NULL );
};

// Function Sanctum.SanctumSapitu.GetStarsForLevelByName
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )

int USanctumSapitu::GetStarsForLevelByName ( struct FString MapName )
{
	static UFunction* pFnGetStarsForLevelByName = NULL;

	if ( ! pFnGetStarsForLevelByName )
		pFnGetStarsForLevelByName = (UFunction*) UObject::GObjObjects()->Data[ 52805 ];

	USanctumSapitu_execGetStarsForLevelByName_Parms GetStarsForLevelByName_Parms;
	memcpy ( &GetStarsForLevelByName_Parms.MapName, &MapName, 0xC );

	this->ProcessEvent ( pFnGetStarsForLevelByName, &GetStarsForLevelByName_Parms, NULL );

	return GetStarsForLevelByName_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapitu.SetBestWaveForLevelByNameAndDifficulty
// [0x00820002] 
// Parameters infos:
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// int                            Difficulty                     ( CPF_Parm )
// int                            Wave                           ( CPF_Parm )

void USanctumSapitu::SetBestWaveForLevelByNameAndDifficulty ( struct FString MapName, int Difficulty, int Wave )
{
	static UFunction* pFnSetBestWaveForLevelByNameAndDifficulty = NULL;

	if ( ! pFnSetBestWaveForLevelByNameAndDifficulty )
		pFnSetBestWaveForLevelByNameAndDifficulty = (UFunction*) UObject::GObjObjects()->Data[ 54975 ];

	USanctumSapitu_execSetBestWaveForLevelByNameAndDifficulty_Parms SetBestWaveForLevelByNameAndDifficulty_Parms;
	memcpy ( &SetBestWaveForLevelByNameAndDifficulty_Parms.MapName, &MapName, 0xC );
	SetBestWaveForLevelByNameAndDifficulty_Parms.Difficulty = Difficulty;
	SetBestWaveForLevelByNameAndDifficulty_Parms.Wave = Wave;

	this->ProcessEvent ( pFnSetBestWaveForLevelByNameAndDifficulty, &SetBestWaveForLevelByNameAndDifficulty_Parms, NULL );
};

// Function Sanctum.SanctumSapitu.GetBestWaveForLevelByNameAndDifficulty
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// int                            Difficulty                     ( CPF_Parm )

int USanctumSapitu::GetBestWaveForLevelByNameAndDifficulty ( struct FString MapName, int Difficulty )
{
	static UFunction* pFnGetBestWaveForLevelByNameAndDifficulty = NULL;

	if ( ! pFnGetBestWaveForLevelByNameAndDifficulty )
		pFnGetBestWaveForLevelByNameAndDifficulty = (UFunction*) UObject::GObjObjects()->Data[ 52807 ];

	USanctumSapitu_execGetBestWaveForLevelByNameAndDifficulty_Parms GetBestWaveForLevelByNameAndDifficulty_Parms;
	memcpy ( &GetBestWaveForLevelByNameAndDifficulty_Parms.MapName, &MapName, 0xC );
	GetBestWaveForLevelByNameAndDifficulty_Parms.Difficulty = Difficulty;

	this->ProcessEvent ( pFnGetBestWaveForLevelByNameAndDifficulty, &GetBestWaveForLevelByNameAndDifficulty_Parms, NULL );

	return GetBestWaveForLevelByNameAndDifficulty_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapitu.AddNewEncounteredEnemy
// [0x00020002] 
// Parameters infos:
// struct FString                 Enemy                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumSapitu::AddNewEncounteredEnemy ( struct FString Enemy )
{
	static UFunction* pFnAddNewEncounteredEnemy = NULL;

	if ( ! pFnAddNewEncounteredEnemy )
		pFnAddNewEncounteredEnemy = (UFunction*) UObject::GObjObjects()->Data[ 54967 ];

	USanctumSapitu_execAddNewEncounteredEnemy_Parms AddNewEncounteredEnemy_Parms;
	memcpy ( &AddNewEncounteredEnemy_Parms.Enemy, &Enemy, 0xC );

	this->ProcessEvent ( pFnAddNewEncounteredEnemy, &AddNewEncounteredEnemy_Parms, NULL );
};

// Function Sanctum.SanctumSapitu.NewEncounteredEnemy
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Enemy                          ( CPF_Parm | CPF_NeedCtorLink )

bool USanctumSapitu::NewEncounteredEnemy ( struct FString Enemy )
{
	static UFunction* pFnNewEncounteredEnemy = NULL;

	if ( ! pFnNewEncounteredEnemy )
		pFnNewEncounteredEnemy = (UFunction*) UObject::GObjObjects()->Data[ 46188 ];

	USanctumSapitu_execNewEncounteredEnemy_Parms NewEncounteredEnemy_Parms;
	memcpy ( &NewEncounteredEnemy_Parms.Enemy, &Enemy, 0xC );

	this->ProcessEvent ( pFnNewEncounteredEnemy, &NewEncounteredEnemy_Parms, NULL );

	return NewEncounteredEnemy_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapitu.SetLevelHasBeenStarted
// [0x00020002] 
// Parameters infos:
// struct FString                 Level                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumSapitu::SetLevelHasBeenStarted ( struct FString Level )
{
	static UFunction* pFnSetLevelHasBeenStarted = NULL;

	if ( ! pFnSetLevelHasBeenStarted )
		pFnSetLevelHasBeenStarted = (UFunction*) UObject::GObjObjects()->Data[ 54961 ];

	USanctumSapitu_execSetLevelHasBeenStarted_Parms SetLevelHasBeenStarted_Parms;
	memcpy ( &SetLevelHasBeenStarted_Parms.Level, &Level, 0xC );

	this->ProcessEvent ( pFnSetLevelHasBeenStarted, &SetLevelHasBeenStarted_Parms, NULL );
};

// Function Sanctum.SanctumSapitu.HasLevelBeenStarted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Level                          ( CPF_Parm | CPF_NeedCtorLink )

bool USanctumSapitu::HasLevelBeenStarted ( struct FString Level )
{
	static UFunction* pFnHasLevelBeenStarted = NULL;

	if ( ! pFnHasLevelBeenStarted )
		pFnHasLevelBeenStarted = (UFunction*) UObject::GObjObjects()->Data[ 46181 ];

	USanctumSapitu_execHasLevelBeenStarted_Parms HasLevelBeenStarted_Parms;
	memcpy ( &HasLevelBeenStarted_Parms.Level, &Level, 0xC );

	this->ProcessEvent ( pFnHasLevelBeenStarted, &HasLevelBeenStarted_Parms, NULL );

	return HasLevelBeenStarted_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapitu.SetLevelToCleared
// [0x00020002] 
// Parameters infos:
// struct FString                 Level                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumSapitu::SetLevelToCleared ( struct FString Level )
{
	static UFunction* pFnSetLevelToCleared = NULL;

	if ( ! pFnSetLevelToCleared )
		pFnSetLevelToCleared = (UFunction*) UObject::GObjObjects()->Data[ 54955 ];

	USanctumSapitu_execSetLevelToCleared_Parms SetLevelToCleared_Parms;
	memcpy ( &SetLevelToCleared_Parms.Level, &Level, 0xC );

	this->ProcessEvent ( pFnSetLevelToCleared, &SetLevelToCleared_Parms, NULL );
};

// Function Sanctum.SanctumSapitu.isLevelCleared
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Level                          ( CPF_Parm | CPF_NeedCtorLink )

bool USanctumSapitu::isLevelCleared ( struct FString Level )
{
	static UFunction* pFnisLevelCleared = NULL;

	if ( ! pFnisLevelCleared )
		pFnisLevelCleared = (UFunction*) UObject::GObjObjects()->Data[ 48382 ];

	USanctumSapitu_execisLevelCleared_Parms isLevelCleared_Parms;
	memcpy ( &isLevelCleared_Parms.Level, &Level, 0xC );

	this->ProcessEvent ( pFnisLevelCleared, &isLevelCleared_Parms, NULL );

	return isLevelCleared_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapitu.UnlockLevel
// [0x00020002] 
// Parameters infos:
// struct FString                 Level                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumSapitu::UnlockLevel ( struct FString Level )
{
	static UFunction* pFnUnlockLevel = NULL;

	if ( ! pFnUnlockLevel )
		pFnUnlockLevel = (UFunction*) UObject::GObjObjects()->Data[ 54949 ];

	USanctumSapitu_execUnlockLevel_Parms UnlockLevel_Parms;
	memcpy ( &UnlockLevel_Parms.Level, &Level, 0xC );

	this->ProcessEvent ( pFnUnlockLevel, &UnlockLevel_Parms, NULL );
};

// Function Sanctum.SanctumSapitu.isLevelUnlocked
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Level                          ( CPF_Parm | CPF_NeedCtorLink )

bool USanctumSapitu::isLevelUnlocked ( struct FString Level )
{
	static UFunction* pFnisLevelUnlocked = NULL;

	if ( ! pFnisLevelUnlocked )
		pFnisLevelUnlocked = (UFunction*) UObject::GObjObjects()->Data[ 46176 ];

	USanctumSapitu_execisLevelUnlocked_Parms isLevelUnlocked_Parms;
	memcpy ( &isLevelUnlocked_Parms.Level, &Level, 0xC );

	this->ProcessEvent ( pFnisLevelUnlocked, &isLevelUnlocked_Parms, NULL );

	return isLevelUnlocked_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapitu.getGames
// [0x00020002] 
// Parameters infos:
// TArray< struct FString >       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FString > USanctumSapitu::getGames ( )
{
	static UFunction* pFngetGames = NULL;

	if ( ! pFngetGames )
		pFngetGames = (UFunction*) UObject::GObjObjects()->Data[ 46222 ];

	USanctumSapitu_execgetGames_Parms getGames_Parms;

	this->ProcessEvent ( pFngetGames, &getGames_Parms, NULL );

	return getGames_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapitu.loadGame
// [0x00020002] 
// Parameters infos:
// class USanctumSapituGame*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 GameID                         ( CPF_Parm | CPF_NeedCtorLink )

class USanctumSapituGame* USanctumSapitu::loadGame ( struct FString GameID )
{
	static UFunction* pFnloadGame = NULL;

	if ( ! pFnloadGame )
		pFnloadGame = (UFunction*) UObject::GObjObjects()->Data[ 46027 ];

	USanctumSapitu_execloadGame_Parms loadGame_Parms;
	memcpy ( &loadGame_Parms.GameID, &GameID, 0xC );

	this->ProcessEvent ( pFnloadGame, &loadGame_Parms, NULL );

	return loadGame_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapitu.decrypt
// [0x00020002] 
// Parameters infos:

void USanctumSapitu::decrypt ( )
{
	static UFunction* pFndecrypt = NULL;

	if ( ! pFndecrypt )
		pFndecrypt = (UFunction*) UObject::GObjObjects()->Data[ 54921 ];

	USanctumSapitu_execdecrypt_Parms decrypt_Parms;

	this->ProcessEvent ( pFndecrypt, &decrypt_Parms, NULL );
};

// Function Sanctum.SanctumSapitu.encrypt
// [0x00020002] 
// Parameters infos:

void USanctumSapitu::encrypt ( )
{
	static UFunction* pFnencrypt = NULL;

	if ( ! pFnencrypt )
		pFnencrypt = (UFunction*) UObject::GObjObjects()->Data[ 54913 ];

	USanctumSapitu_execencrypt_Parms encrypt_Parms;

	this->ProcessEvent ( pFnencrypt, &encrypt_Parms, NULL );
};

// Function Sanctum.SanctumSapitu.GetSaveRevisonInt
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USanctumSapitu::GetSaveRevisonInt ( )
{
	static UFunction* pFnGetSaveRevisonInt = NULL;

	if ( ! pFnGetSaveRevisonInt )
		pFnGetSaveRevisonInt = (UFunction*) UObject::GObjObjects()->Data[ 54909 ];

	USanctumSapitu_execGetSaveRevisonInt_Parms GetSaveRevisonInt_Parms;

	this->ProcessEvent ( pFnGetSaveRevisonInt, &GetSaveRevisonInt_Parms, NULL );

	return GetSaveRevisonInt_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapitu.calculateChecksum
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USanctumSapitu::calculateChecksum ( )
{
	static UFunction* pFncalculateChecksum = NULL;

	if ( ! pFncalculateChecksum )
		pFncalculateChecksum = (UFunction*) UObject::GObjObjects()->Data[ 54903 ];

	USanctumSapitu_execcalculateChecksum_Parms calculateChecksum_Parms;

	this->ProcessEvent ( pFncalculateChecksum, &calculateChecksum_Parms, NULL );

	return calculateChecksum_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapitu.GetSaveName
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USanctumSapitu::GetSaveName ( )
{
	static UFunction* pFnGetSaveName = NULL;

	if ( ! pFnGetSaveName )
		pFnGetSaveName = (UFunction*) UObject::GObjObjects()->Data[ 54901 ];

	USanctumSapitu_execGetSaveName_Parms GetSaveName_Parms;

	this->ProcessEvent ( pFnGetSaveName, &GetSaveName_Parms, NULL );

	return GetSaveName_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapitu.gameToString
// [0x00020000] 
// Parameters infos:

void USanctumSapitu::gameToString ( )
{
	static UFunction* pFngameToString = NULL;

	if ( ! pFngameToString )
		pFngameToString = (UFunction*) UObject::GObjObjects()->Data[ 54900 ];

	USanctumSapitu_execgameToString_Parms gameToString_Parms;

	this->ProcessEvent ( pFngameToString, &gameToString_Parms, NULL );
};

// Function Sanctum.SanctumSapitu.stringToGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSapitu::stringToGame ( )
{
	static UFunction* pFnstringToGame = NULL;

	if ( ! pFnstringToGame )
		pFnstringToGame = (UFunction*) UObject::GObjObjects()->Data[ 54898 ];

	USanctumSapitu_execstringToGame_Parms stringToGame_Parms;

	this->ProcessEvent ( pFnstringToGame, &stringToGame_Parms, NULL );

	return stringToGame_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapitu.Save
// [0x00020002] 
// Parameters infos:

void USanctumSapitu::Save ( )
{
	static UFunction* pFnSave = NULL;

	if ( ! pFnSave )
		pFnSave = (UFunction*) UObject::GObjObjects()->Data[ 54896 ];

	USanctumSapitu_execSave_Parms Save_Parms;

	this->ProcessEvent ( pFnSave, &Save_Parms, NULL );
};

// Function Sanctum.SanctumEngine.InitializeEngine
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumEngine::eventInitializeEngine ( )
{
	static UFunction* pFnInitializeEngine = NULL;

	if ( ! pFnInitializeEngine )
		pFnInitializeEngine = (UFunction*) UObject::GObjObjects()->Data[ 47889 ];

	USanctumEngine_eventInitializeEngine_Parms InitializeEngine_Parms;

	this->ProcessEvent ( pFnInitializeEngine, &InitializeEngine_Parms, NULL );
};

// Function Sanctum.SanctumEngine.ChooseLoadMapMovie
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< struct FString >       LoadMapMovies                  ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 out_LoadMapMovieChosen         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USanctumEngine::eventChooseLoadMapMovie ( TArray< struct FString >* LoadMapMovies, struct FString* out_LoadMapMovieChosen )
{
	static UFunction* pFnChooseLoadMapMovie = NULL;

	if ( ! pFnChooseLoadMapMovie )
		pFnChooseLoadMapMovie = (UFunction*) UObject::GObjObjects()->Data[ 47884 ];

	USanctumEngine_eventChooseLoadMapMovie_Parms ChooseLoadMapMovie_Parms;

	this->ProcessEvent ( pFnChooseLoadMapMovie, &ChooseLoadMapMovie_Parms, NULL );

	if ( LoadMapMovies )
		memcpy ( LoadMapMovies, &ChooseLoadMapMovie_Parms.LoadMapMovies, 0xC );

	if ( out_LoadMapMovieChosen )
		memcpy ( out_LoadMapMovieChosen, &ChooseLoadMapMovie_Parms.out_LoadMapMovieChosen, 0xC );

	return ChooseLoadMapMovie_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfoNormal.ToggleLevelCompleteEvent
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumGameInfoNormal::eventToggleLevelCompleteEvent ( )
{
	static UFunction* pFnToggleLevelCompleteEvent = NULL;

	if ( ! pFnToggleLevelCompleteEvent )
		pFnToggleLevelCompleteEvent = (UFunction*) UObject::GObjObjects()->Data[ 48415 ];

	ASanctumGameInfoNormal_eventToggleLevelCompleteEvent_Parms ToggleLevelCompleteEvent_Parms;

	this->ProcessEvent ( pFnToggleLevelCompleteEvent, &ToggleLevelCompleteEvent_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoNormal.ToggleBuildPhase
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfoNormal::ToggleBuildPhase ( )
{
	static UFunction* pFnToggleBuildPhase = NULL;

	if ( ! pFnToggleBuildPhase )
		pFnToggleBuildPhase = (UFunction*) UObject::GObjObjects()->Data[ 48412 ];

	ASanctumGameInfoNormal_execToggleBuildPhase_Parms ToggleBuildPhase_Parms;

	this->ProcessEvent ( pFnToggleBuildPhase, &ToggleBuildPhase_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoNormal.isWavesLeft
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumGameInfoNormal::isWavesLeft ( )
{
	static UFunction* pFnisWavesLeft = NULL;

	if ( ! pFnisWavesLeft )
		pFnisWavesLeft = (UFunction*) UObject::GObjObjects()->Data[ 48410 ];

	ASanctumGameInfoNormal_execisWavesLeft_Parms isWavesLeft_Parms;

	this->ProcessEvent ( pFnisWavesLeft, &isWavesLeft_Parms, NULL );

	return isWavesLeft_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfoNormal.startWave
// [0x00020002] 
// Parameters infos:
// int                            waveNr                         ( CPF_Parm )

void ASanctumGameInfoNormal::startWave ( int waveNr )
{
	static UFunction* pFnstartWave = NULL;

	if ( ! pFnstartWave )
		pFnstartWave = (UFunction*) UObject::GObjObjects()->Data[ 48408 ];

	ASanctumGameInfoNormal_execstartWave_Parms startWave_Parms;
	startWave_Parms.waveNr = waveNr;

	this->ProcessEvent ( pFnstartWave, &startWave_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoNormal.CountDownToSave
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfoNormal::CountDownToSave ( )
{
	static UFunction* pFnCountDownToSave = NULL;

	if ( ! pFnCountDownToSave )
		pFnCountDownToSave = (UFunction*) UObject::GObjObjects()->Data[ 48401 ];

	ASanctumGameInfoNormal_execCountDownToSave_Parms CountDownToSave_Parms;

	this->ProcessEvent ( pFnCountDownToSave, &CountDownToSave_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoNormal.saveGame
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfoNormal::saveGame ( )
{
	static UFunction* pFnsaveGame = NULL;

	if ( ! pFnsaveGame )
		pFnsaveGame = (UFunction*) UObject::GObjObjects()->Data[ 48398 ];

	ASanctumGameInfoNormal_execsaveGame_Parms saveGame_Parms;

	this->ProcessEvent ( pFnsaveGame, &saveGame_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoNormal.CheckAndPlayCameraPan
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumPlayerController* SPC                            ( CPF_Parm )

bool ASanctumGameInfoNormal::CheckAndPlayCameraPan ( class ASanctumPlayerController* SPC )
{
	static UFunction* pFnCheckAndPlayCameraPan = NULL;

	if ( ! pFnCheckAndPlayCameraPan )
		pFnCheckAndPlayCameraPan = (UFunction*) UObject::GObjObjects()->Data[ 48395 ];

	ASanctumGameInfoNormal_execCheckAndPlayCameraPan_Parms CheckAndPlayCameraPan_Parms;
	CheckAndPlayCameraPan_Parms.SPC = SPC;

	this->ProcessEvent ( pFnCheckAndPlayCameraPan, &CheckAndPlayCameraPan_Parms, NULL );

	return CheckAndPlayCameraPan_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfoNormal.CameraPanWasSkipped
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfoNormal::CameraPanWasSkipped ( )
{
	static UFunction* pFnCameraPanWasSkipped = NULL;

	if ( ! pFnCameraPanWasSkipped )
		pFnCameraPanWasSkipped = (UFunction*) UObject::GObjObjects()->Data[ 48390 ];

	ASanctumGameInfoNormal_execCameraPanWasSkipped_Parms CameraPanWasSkipped_Parms;

	this->ProcessEvent ( pFnCameraPanWasSkipped, &CameraPanWasSkipped_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoNormal.PlayCameraPan
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfoNormal::PlayCameraPan ( )
{
	static UFunction* pFnPlayCameraPan = NULL;

	if ( ! pFnPlayCameraPan )
		pFnPlayCameraPan = (UFunction*) UObject::GObjObjects()->Data[ 48385 ];

	ASanctumGameInfoNormal_execPlayCameraPan_Parms PlayCameraPan_Parms;

	this->ProcessEvent ( pFnPlayCameraPan, &PlayCameraPan_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoNormal.MapIsAlwaysUnlocked
// [0x00020100] 
// Parameters infos:

void ASanctumGameInfoNormal::MapIsAlwaysUnlocked ( )
{
	static UFunction* pFnMapIsAlwaysUnlocked = NULL;

	if ( ! pFnMapIsAlwaysUnlocked )
		pFnMapIsAlwaysUnlocked = (UFunction*) UObject::GObjObjects()->Data[ 48384 ];

	ASanctumGameInfoNormal_execMapIsAlwaysUnlocked_Parms MapIsAlwaysUnlocked_Parms;

	this->ProcessEvent ( pFnMapIsAlwaysUnlocked, &MapIsAlwaysUnlocked_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoNormal.Login
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Portal                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            UniqueId                       ( CPF_Const | CPF_Parm )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class APlayerController* ASanctumGameInfoNormal::eventLogin ( struct FString Portal, struct FString Options, struct FUniqueNetId UniqueId, struct FString* ErrorMessage )
{
	static UFunction* pFnLogin = NULL;

	if ( ! pFnLogin )
		pFnLogin = (UFunction*) UObject::GObjObjects()->Data[ 48369 ];

	ASanctumGameInfoNormal_eventLogin_Parms Login_Parms;
	memcpy ( &Login_Parms.Portal, &Portal, 0xC );
	memcpy ( &Login_Parms.Options, &Options, 0xC );
	memcpy ( &Login_Parms.UniqueId, &UniqueId, 0x8 );

	this->ProcessEvent ( pFnLogin, &Login_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &Login_Parms.ErrorMessage, 0xC );

	return Login_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfoNormal.GetGameModeInt
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumGameInfoNormal::GetGameModeInt ( )
{
	static UFunction* pFnGetGameModeInt = NULL;

	if ( ! pFnGetGameModeInt )
		pFnGetGameModeInt = (UFunction*) UObject::GObjObjects()->Data[ 48367 ];

	ASanctumGameInfoNormal_execGetGameModeInt_Parms GetGameModeInt_Parms;

	this->ProcessEvent ( pFnGetGameModeInt, &GetGameModeInt_Parms, NULL );

	return GetGameModeInt_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfoNormal.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumGameInfoNormal::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 48361 ];

	ASanctumGameInfoNormal_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.TimeWeaponFiring
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASanctumWeapon::TimeWeaponFiring ( unsigned char FireModeNum )
{
	static UFunction* pFnTimeWeaponFiring = NULL;

	if ( ! pFnTimeWeaponFiring )
		pFnTimeWeaponFiring = (UFunction*) UObject::GObjObjects()->Data[ 49220 ];

	ASanctumWeapon_execTimeWeaponFiring_Parms TimeWeaponFiring_Parms;
	TimeWeaponFiring_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnTimeWeaponFiring, &TimeWeaponFiring_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.FiringPutDownWeapon
// [0x00020102] 
// Parameters infos:

void ASanctumWeapon::FiringPutDownWeapon ( )
{
	static UFunction* pFnFiringPutDownWeapon = NULL;

	if ( ! pFnFiringPutDownWeapon )
		pFnFiringPutDownWeapon = (UFunction*) UObject::GObjObjects()->Data[ 49219 ];

	ASanctumWeapon_execFiringPutDownWeapon_Parms FiringPutDownWeapon_Parms;

	this->ProcessEvent ( pFnFiringPutDownWeapon, &FiringPutDownWeapon_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.TryPutDown
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumWeapon::TryPutDown ( )
{
	static UFunction* pFnTryPutDown = NULL;

	if ( ! pFnTryPutDown )
		pFnTryPutDown = (UFunction*) UObject::GObjObjects()->Data[ 49215 ];

	ASanctumWeapon_execTryPutDown_Parms TryPutDown_Parms;

	this->ProcessEvent ( pFnTryPutDown, &TryPutDown_Parms, NULL );

	return TryPutDown_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.AllowSwitchTo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

bool ASanctumWeapon::AllowSwitchTo ( class AWeapon* NewWeapon )
{
	static UFunction* pFnAllowSwitchTo = NULL;

	if ( ! pFnAllowSwitchTo )
		pFnAllowSwitchTo = (UFunction*) UObject::GObjObjects()->Data[ 49212 ];

	ASanctumWeapon_execAllowSwitchTo_Parms AllowSwitchTo_Parms;
	AllowSwitchTo_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnAllowSwitchTo, &AllowSwitchTo_Parms, NULL );

	return AllowSwitchTo_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.TimeWeaponEquipping
// [0x00020102] 
// Parameters infos:

void ASanctumWeapon::TimeWeaponEquipping ( )
{
	static UFunction* pFnTimeWeaponEquipping = NULL;

	if ( ! pFnTimeWeaponEquipping )
		pFnTimeWeaponEquipping = (UFunction*) UObject::GObjObjects()->Data[ 49211 ];

	ASanctumWeapon_execTimeWeaponEquipping_Parms TimeWeaponEquipping_Parms;

	this->ProcessEvent ( pFnTimeWeaponEquipping, &TimeWeaponEquipping_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.GetEquipTime
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASanctumWeapon::GetEquipTime ( )
{
	static UFunction* pFnGetEquipTime = NULL;

	if ( ! pFnGetEquipTime )
		pFnGetEquipTime = (UFunction*) UObject::GObjObjects()->Data[ 49208 ];

	ASanctumWeapon_execGetEquipTime_Parms GetEquipTime_Parms;

	this->ProcessEvent ( pFnGetEquipTime, &GetEquipTime_Parms, NULL );

	return GetEquipTime_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.PlayWeaponEquip
// [0x00020102] 
// Parameters infos:

void ASanctumWeapon::PlayWeaponEquip ( )
{
	static UFunction* pFnPlayWeaponEquip = NULL;

	if ( ! pFnPlayWeaponEquip )
		pFnPlayWeaponEquip = (UFunction*) UObject::GObjObjects()->Data[ 49207 ];

	ASanctumWeapon_execPlayWeaponEquip_Parms PlayWeaponEquip_Parms;

	this->ProcessEvent ( pFnPlayWeaponEquip, &PlayWeaponEquip_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.PerformWeaponChange
// [0x00020102] 
// Parameters infos:

void ASanctumWeapon::PerformWeaponChange ( )
{
	static UFunction* pFnPerformWeaponChange = NULL;

	if ( ! pFnPerformWeaponChange )
		pFnPerformWeaponChange = (UFunction*) UObject::GObjObjects()->Data[ 49205 ];

	ASanctumWeapon_execPerformWeaponChange_Parms PerformWeaponChange_Parms;

	this->ProcessEvent ( pFnPerformWeaponChange, &PerformWeaponChange_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.ClientWeaponSet
// [0x010241C2] 
// Parameters infos:
// unsigned long                  bOptionalSet                   ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void ASanctumWeapon::ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = (UFunction*) UObject::GObjObjects()->Data[ 49201 ];

	ASanctumWeapon_execClientWeaponSet_Parms ClientWeaponSet_Parms;
	ClientWeaponSet_Parms.bOptionalSet = bOptionalSet;
	ClientWeaponSet_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.ClientEndFire
// [0x010201C2] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASanctumWeapon::ClientEndFire ( unsigned char FireModeNum )
{
	static UFunction* pFnClientEndFire = NULL;

	if ( ! pFnClientEndFire )
		pFnClientEndFire = (UFunction*) UObject::GObjObjects()->Data[ 49199 ];

	ASanctumWeapon_execClientEndFire_Parms ClientEndFire_Parms;
	ClientEndFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnClientEndFire, &ClientEndFire_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.ClientToggleReady
// [0x010201C0] 
// Parameters infos:
// unsigned long                  IsReady                        ( CPF_Parm )

void ASanctumWeapon::ClientToggleReady ( unsigned long IsReady )
{
	static UFunction* pFnClientToggleReady = NULL;

	if ( ! pFnClientToggleReady )
		pFnClientToggleReady = (UFunction*) UObject::GObjObjects()->Data[ 49197 ];

	ASanctumWeapon_execClientToggleReady_Parms ClientToggleReady_Parms;
	ClientToggleReady_Parms.IsReady = IsReady;

	this->ProcessEvent ( pFnClientToggleReady, &ClientToggleReady_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.ToggleReady
// [0x00020002] 
// Parameters infos:
// unsigned long                  IsReady                        ( CPF_Parm )

void ASanctumWeapon::ToggleReady ( unsigned long IsReady )
{
	static UFunction* pFnToggleReady = NULL;

	if ( ! pFnToggleReady )
		pFnToggleReady = (UFunction*) UObject::GObjObjects()->Data[ 49195 ];

	ASanctumWeapon_execToggleReady_Parms ToggleReady_Parms;
	ToggleReady_Parms.IsReady = IsReady;

	this->ProcessEvent ( pFnToggleReady, &ToggleReady_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.ChangeVisibility
// [0x00020102] 
// Parameters infos:
// unsigned long                  bIsVisible                     ( CPF_Parm )

void ASanctumWeapon::ChangeVisibility ( unsigned long bIsVisible )
{
	static UFunction* pFnChangeVisibility = NULL;

	if ( ! pFnChangeVisibility )
		pFnChangeVisibility = (UFunction*) UObject::GObjObjects()->Data[ 49191 ];

	ASanctumWeapon_execChangeVisibility_Parms ChangeVisibility_Parms;
	ChangeVisibility_Parms.bIsVisible = bIsVisible;

	this->ProcessEvent ( pFnChangeVisibility, &ChangeVisibility_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.ClientGotoState
// [0x010241C2] 
// Parameters infos:
// struct FName                   NewState                       ( CPF_Parm )
// struct FName                   NewLabel                       ( CPF_OptionalParm | CPF_Parm )

void ASanctumWeapon::ClientGotoState ( struct FName NewState, struct FName NewLabel )
{
	static UFunction* pFnClientGotoState = NULL;

	if ( ! pFnClientGotoState )
		pFnClientGotoState = (UFunction*) UObject::GObjObjects()->Data[ 49188 ];

	ASanctumWeapon_execClientGotoState_Parms ClientGotoState_Parms;
	memcpy ( &ClientGotoState_Parms.NewState, &NewState, 0x8 );
	memcpy ( &ClientGotoState_Parms.NewLabel, &NewLabel, 0x8 );

	this->ProcessEvent ( pFnClientGotoState, &ClientGotoState_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.GetPhysicalFireStartLoc
// [0x00824102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AimDir                         ( CPF_OptionalParm | CPF_Parm )

struct FVector ASanctumWeapon::GetPhysicalFireStartLoc ( struct FVector AimDir )
{
	static UFunction* pFnGetPhysicalFireStartLoc = NULL;

	if ( ! pFnGetPhysicalFireStartLoc )
		pFnGetPhysicalFireStartLoc = (UFunction*) UObject::GObjObjects()->Data[ 49174 ];

	ASanctumWeapon_execGetPhysicalFireStartLoc_Parms GetPhysicalFireStartLoc_Parms;
	memcpy ( &GetPhysicalFireStartLoc_Parms.AimDir, &AimDir, 0xC );

	this->ProcessEvent ( pFnGetPhysicalFireStartLoc, &GetPhysicalFireStartLoc_Parms, NULL );

	return GetPhysicalFireStartLoc_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.GetEffectLocation
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASanctumWeapon::GetEffectLocation ( )
{
	static UFunction* pFnGetEffectLocation = NULL;

	if ( ! pFnGetEffectLocation )
		pFnGetEffectLocation = (UFunction*) UObject::GObjObjects()->Data[ 49170 ];

	ASanctumWeapon_execGetEffectLocation_Parms GetEffectLocation_Parms;

	this->ProcessEvent ( pFnGetEffectLocation, &GetEffectLocation_Parms, NULL );

	return GetEffectLocation_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.StopMuzzleFlash
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeapon::eventStopMuzzleFlash ( )
{
	static UFunction* pFnStopMuzzleFlash = NULL;

	if ( ! pFnStopMuzzleFlash )
		pFnStopMuzzleFlash = (UFunction*) UObject::GObjObjects()->Data[ 49168 ];

	ASanctumWeapon_eventStopMuzzleFlash_Parms StopMuzzleFlash_Parms;

	this->ProcessEvent ( pFnStopMuzzleFlash, &StopMuzzleFlash_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.CauseMuzzleFlash
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeapon::eventCauseMuzzleFlash ( )
{
	static UFunction* pFnCauseMuzzleFlash = NULL;

	if ( ! pFnCauseMuzzleFlash )
		pFnCauseMuzzleFlash = (UFunction*) UObject::GObjObjects()->Data[ 49164 ];

	ASanctumWeapon_eventCauseMuzzleFlash_Parms CauseMuzzleFlash_Parms;

	this->ProcessEvent ( pFnCauseMuzzleFlash, &CauseMuzzleFlash_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.GetMuzzleFlashIndex
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

int ASanctumWeapon::GetMuzzleFlashIndex ( unsigned char FireModeNum )
{
	static UFunction* pFnGetMuzzleFlashIndex = NULL;

	if ( ! pFnGetMuzzleFlashIndex )
		pFnGetMuzzleFlashIndex = (UFunction*) UObject::GObjObjects()->Data[ 49161 ];

	ASanctumWeapon_execGetMuzzleFlashIndex_Parms GetMuzzleFlashIndex_Parms;
	GetMuzzleFlashIndex_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnGetMuzzleFlashIndex, &GetMuzzleFlashIndex_Parms, NULL );

	return GetMuzzleFlashIndex_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.AttachMuzzleFlash
// [0x00020102] 
// Parameters infos:

void ASanctumWeapon::AttachMuzzleFlash ( )
{
	static UFunction* pFnAttachMuzzleFlash = NULL;

	if ( ! pFnAttachMuzzleFlash )
		pFnAttachMuzzleFlash = (UFunction*) UObject::GObjObjects()->Data[ 49158 ];

	ASanctumWeapon_execAttachMuzzleFlash_Parms AttachMuzzleFlash_Parms;

	this->ProcessEvent ( pFnAttachMuzzleFlash, &AttachMuzzleFlash_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.CauseMuzzleFlashLight
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeapon::eventCauseMuzzleFlashLight ( )
{
	static UFunction* pFnCauseMuzzleFlashLight = NULL;

	if ( ! pFnCauseMuzzleFlashLight )
		pFnCauseMuzzleFlashLight = (UFunction*) UObject::GObjObjects()->Data[ 49157 ];

	ASanctumWeapon_eventCauseMuzzleFlashLight_Parms CauseMuzzleFlashLight_Parms;

	this->ProcessEvent ( pFnCauseMuzzleFlashLight, &CauseMuzzleFlashLight_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.MuzzleFlashTimer
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeapon::eventMuzzleFlashTimer ( )
{
	static UFunction* pFnMuzzleFlashTimer = NULL;

	if ( ! pFnMuzzleFlashTimer )
		pFnMuzzleFlashTimer = (UFunction*) UObject::GObjObjects()->Data[ 49155 ];

	ASanctumWeapon_eventMuzzleFlashTimer_Parms MuzzleFlashTimer_Parms;

	this->ProcessEvent ( pFnMuzzleFlashTimer, &MuzzleFlashTimer_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.SpawnWeaponTracer
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASanctumWeapon::SpawnWeaponTracer ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnSpawnWeaponTracer = NULL;

	if ( ! pFnSpawnWeaponTracer )
		pFnSpawnWeaponTracer = (UFunction*) UObject::GObjObjects()->Data[ 49151 ];

	ASanctumWeapon_execSpawnWeaponTracer_Parms SpawnWeaponTracer_Parms;
	SpawnWeaponTracer_Parms.FireModeNum = FireModeNum;
	memcpy ( &SpawnWeaponTracer_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSpawnWeaponTracer, &SpawnWeaponTracer_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.ShakeView
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASanctumWeapon::ShakeView ( unsigned char FireModeNum )
{
	static UFunction* pFnShakeView = NULL;

	if ( ! pFnShakeView )
		pFnShakeView = (UFunction*) UObject::GObjObjects()->Data[ 49148 ];

	ASanctumWeapon_execShakeView_Parms ShakeView_Parms;
	ShakeView_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnShakeView, &ShakeView_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.PlayFiringSound
// [0x00020102] 
// Parameters infos:

void ASanctumWeapon::PlayFiringSound ( )
{
	static UFunction* pFnPlayFiringSound = NULL;

	if ( ! pFnPlayFiringSound )
		pFnPlayFiringSound = (UFunction*) UObject::GObjObjects()->Data[ 49147 ];

	ASanctumWeapon_execPlayFiringSound_Parms PlayFiringSound_Parms;

	this->ProcessEvent ( pFnPlayFiringSound, &PlayFiringSound_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.ProcessViewRotation
// [0x00C20102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void ASanctumWeapon::ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 49139 ];

	ASanctumWeapon_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );
};

// Function Sanctum.SanctumWeapon.AddRecoil
// [0x00020102] 
// Parameters infos:

void ASanctumWeapon::AddRecoil ( )
{
	static UFunction* pFnAddRecoil = NULL;

	if ( ! pFnAddRecoil )
		pFnAddRecoil = (UFunction*) UObject::GObjObjects()->Data[ 49137 ];

	ASanctumWeapon_execAddRecoil_Parms AddRecoil_Parms;

	this->ProcessEvent ( pFnAddRecoil, &AddRecoil_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.PlayOwnedFireEffects
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASanctumWeapon::PlayOwnedFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayOwnedFireEffects = NULL;

	if ( ! pFnPlayOwnedFireEffects )
		pFnPlayOwnedFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 49134 ];

	ASanctumWeapon_execPlayOwnedFireEffects_Parms PlayOwnedFireEffects_Parms;
	PlayOwnedFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayOwnedFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayOwnedFireEffects, &PlayOwnedFireEffects_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.PlayFireEffects
// [0x00024102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ASanctumWeapon::PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffects = NULL;

	if ( ! pFnPlayFireEffects )
		pFnPlayFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 49130 ];

	ASanctumWeapon_execPlayFireEffects_Parms PlayFireEffects_Parms;
	PlayFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffects, &PlayFireEffects_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.WeaponStoppedFiring
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  FiringModeNum                  ( CPF_Parm )

void ASanctumWeapon::eventWeaponStoppedFiring ( unsigned char FiringModeNum )
{
	static UFunction* pFnWeaponStoppedFiring = NULL;

	if ( ! pFnWeaponStoppedFiring )
		pFnWeaponStoppedFiring = (UFunction*) UObject::GObjObjects()->Data[ 49128 ];

	ASanctumWeapon_eventWeaponStoppedFiring_Parms WeaponStoppedFiring_Parms;
	WeaponStoppedFiring_Parms.FiringModeNum = FiringModeNum;

	this->ProcessEvent ( pFnWeaponStoppedFiring, &WeaponStoppedFiring_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.WeaponFired
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ASanctumWeapon::eventWeaponFired ( unsigned char FiringMode, struct FVector HitLocation )
{
	static UFunction* pFnWeaponFired = NULL;

	if ( ! pFnWeaponFired )
		pFnWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 49125 ];

	ASanctumWeapon_eventWeaponFired_Parms WeaponFired_Parms;
	WeaponFired_Parms.FiringMode = FiringMode;
	memcpy ( &WeaponFired_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnWeaponFired, &WeaponFired_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.FlashLocationUpdated
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FVector                 FlashLocation                  ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ASanctumWeapon::FlashLocationUpdated ( unsigned char FiringMode, struct FVector FlashLocation, unsigned long bViaReplication )
{
	static UFunction* pFnFlashLocationUpdated = NULL;

	if ( ! pFnFlashLocationUpdated )
		pFnFlashLocationUpdated = (UFunction*) UObject::GObjObjects()->Data[ 49120 ];

	ASanctumWeapon_execFlashLocationUpdated_Parms FlashLocationUpdated_Parms;
	FlashLocationUpdated_Parms.FiringMode = FiringMode;
	memcpy ( &FlashLocationUpdated_Parms.FlashLocation, &FlashLocation, 0xC );
	FlashLocationUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFlashLocationUpdated, &FlashLocationUpdated_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.FlashCountUpdated
// [0x00020102] 
// Parameters infos:
// unsigned char                  FlashCount                     ( CPF_Parm )
// unsigned char                  FiringMode                     ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ASanctumWeapon::FlashCountUpdated ( unsigned char FlashCount, unsigned char FiringMode, unsigned long bViaReplication )
{
	static UFunction* pFnFlashCountUpdated = NULL;

	if ( ! pFnFlashCountUpdated )
		pFnFlashCountUpdated = (UFunction*) UObject::GObjObjects()->Data[ 49116 ];

	ASanctumWeapon_execFlashCountUpdated_Parms FlashCountUpdated_Parms;
	FlashCountUpdated_Parms.FlashCount = FlashCount;
	FlashCountUpdated_Parms.FiringMode = FiringMode;
	FlashCountUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFlashCountUpdated, &FlashCountUpdated_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.SetFlashLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASanctumWeapon::SetFlashLocation ( struct FVector HitLocation )
{
	static UFunction* pFnSetFlashLocation = NULL;

	if ( ! pFnSetFlashLocation )
		pFnSetFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 49114 ];

	ASanctumWeapon_execSetFlashLocation_Parms SetFlashLocation_Parms;
	memcpy ( &SetFlashLocation_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSetFlashLocation, &SetFlashLocation_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.CalcRemoteWeaponFire
// [0x00820102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )

struct FImpactInfo ASanctumWeapon::CalcRemoteWeaponFire ( struct FVector StartTrace, struct FVector EndTrace )
{
	static UFunction* pFnCalcRemoteWeaponFire = NULL;

	if ( ! pFnCalcRemoteWeaponFire )
		pFnCalcRemoteWeaponFire = (UFunction*) UObject::GObjObjects()->Data[ 49105 ];

	ASanctumWeapon_execCalcRemoteWeaponFire_Parms CalcRemoteWeaponFire_Parms;
	memcpy ( &CalcRemoteWeaponFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &CalcRemoteWeaponFire_Parms.EndTrace, &EndTrace, 0xC );

	this->ProcessEvent ( pFnCalcRemoteWeaponFire, &CalcRemoteWeaponFire_Parms, NULL );

	return CalcRemoteWeaponFire_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.CalcRemoteImpactEffects
// [0x00820102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 GivenHitLocation               ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ASanctumWeapon::CalcRemoteImpactEffects ( unsigned char FireModeNum, struct FVector GivenHitLocation, unsigned long bViaReplication )
{
	static UFunction* pFnCalcRemoteImpactEffects = NULL;

	if ( ! pFnCalcRemoteImpactEffects )
		pFnCalcRemoteImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 49097 ];

	ASanctumWeapon_execCalcRemoteImpactEffects_Parms CalcRemoteImpactEffects_Parms;
	CalcRemoteImpactEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &CalcRemoteImpactEffects_Parms.GivenHitLocation, &GivenHitLocation, 0xC );
	CalcRemoteImpactEffects_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnCalcRemoteImpactEffects, &CalcRemoteImpactEffects_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.SetCurrentFireMode
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringModeNum                  ( CPF_Parm )

void ASanctumWeapon::SetCurrentFireMode ( unsigned char FiringModeNum )
{
	static UFunction* pFnSetCurrentFireMode = NULL;

	if ( ! pFnSetCurrentFireMode )
		pFnSetCurrentFireMode = (UFunction*) UObject::GObjObjects()->Data[ 49095 ];

	ASanctumWeapon_execSetCurrentFireMode_Parms SetCurrentFireMode_Parms;
	SetCurrentFireMode_Parms.FiringModeNum = FiringModeNum;

	this->ProcessEvent ( pFnSetCurrentFireMode, &SetCurrentFireMode_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.OnWeaponAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeapon::eventOnWeaponAnimEnd ( )
{
	static UFunction* pFnOnWeaponAnimEnd = NULL;

	if ( ! pFnOnWeaponAnimEnd )
		pFnOnWeaponAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 49094 ];

	ASanctumWeapon_eventOnWeaponAnimEnd_Parms OnWeaponAnimEnd_Parms;

	this->ProcessEvent ( pFnOnWeaponAnimEnd, &OnWeaponAnimEnd_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.PlayWeaponAnimation
// [0x00024102] 
// Parameters infos:
// struct FName                   Sequence                       ( CPF_Parm )
// float                          fDesiredDuration               ( CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )

void ASanctumWeapon::PlayWeaponAnimation ( struct FName Sequence, float fDesiredDuration, unsigned long bLoop, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnPlayWeaponAnimation = NULL;

	if ( ! pFnPlayWeaponAnimation )
		pFnPlayWeaponAnimation = (UFunction*) UObject::GObjObjects()->Data[ 49086 ];

	ASanctumWeapon_execPlayWeaponAnimation_Parms PlayWeaponAnimation_Parms;
	memcpy ( &PlayWeaponAnimation_Parms.Sequence, &Sequence, 0x8 );
	PlayWeaponAnimation_Parms.fDesiredDuration = fDesiredDuration;
	PlayWeaponAnimation_Parms.bLoop = bLoop;
	PlayWeaponAnimation_Parms.SkelMesh = SkelMesh;

	this->ProcessEvent ( pFnPlayWeaponAnimation, &PlayWeaponAnimation_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.ShouldRegisterDamage
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool ASanctumWeapon::ShouldRegisterDamage ( class AActor* A )
{
	static UFunction* pFnShouldRegisterDamage = NULL;

	if ( ! pFnShouldRegisterDamage )
		pFnShouldRegisterDamage = (UFunction*) UObject::GObjObjects()->Data[ 49083 ];

	ASanctumWeapon_execShouldRegisterDamage_Parms ShouldRegisterDamage_Parms;
	ShouldRegisterDamage_Parms.A = A;

	this->ProcessEvent ( pFnShouldRegisterDamage, &ShouldRegisterDamage_Parms, NULL );

	return ShouldRegisterDamage_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.ProcessInstantHit_Internal
// [0x00444103] ( FUNC_Final )
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// int                            InDamage                       ( CPF_OptionalParm | CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ASanctumWeapon::ProcessInstantHit_Internal ( unsigned char FiringMode, int InDamage, struct FImpactInfo* Impact )
{
	static UFunction* pFnProcessInstantHit_Internal = NULL;

	if ( ! pFnProcessInstantHit_Internal )
		pFnProcessInstantHit_Internal = (UFunction*) UObject::GObjObjects()->Data[ 49059 ];

	ASanctumWeapon_execProcessInstantHit_Internal_Parms ProcessInstantHit_Internal_Parms;
	ProcessInstantHit_Internal_Parms.FiringMode = FiringMode;
	ProcessInstantHit_Internal_Parms.InDamage = InDamage;

	this->ProcessEvent ( pFnProcessInstantHit_Internal, &ProcessInstantHit_Internal_Parms, NULL );

	if ( Impact )
		memcpy ( Impact, &ProcessInstantHit_Internal_Parms.Impact, 0x50 );
};

// Function Sanctum.SanctumWeapon.ProcessInstantHit
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void ASanctumWeapon::ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 49064 ];

	ASanctumWeapon_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x50 );
	ProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.CheckIfHoloHit
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FImpactInfo             Impact                         ( CPF_Parm | CPF_OutParm )

bool ASanctumWeapon::CheckIfHoloHit ( struct FImpactInfo* Impact )
{
	static UFunction* pFnCheckIfHoloHit = NULL;

	if ( ! pFnCheckIfHoloHit )
		pFnCheckIfHoloHit = (UFunction*) UObject::GObjObjects()->Data[ 49060 ];

	ASanctumWeapon_execCheckIfHoloHit_Parms CheckIfHoloHit_Parms;

	this->ProcessEvent ( pFnCheckIfHoloHit, &CheckIfHoloHit_Parms, NULL );

	if ( Impact )
		memcpy ( Impact, &CheckIfHoloHit_Parms.Impact, 0x50 );

	return CheckIfHoloHit_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.ServerNotifyHit
// [0x00A240C2] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            Damage                         ( CPF_OptionalParm | CPF_Parm )

void ASanctumWeapon::ServerNotifyHit ( unsigned char FiringMode, struct FImpactInfo Impact, int Damage )
{
	static UFunction* pFnServerNotifyHit = NULL;

	if ( ! pFnServerNotifyHit )
		pFnServerNotifyHit = (UFunction*) UObject::GObjObjects()->Data[ 49051 ];

	ASanctumWeapon_execServerNotifyHit_Parms ServerNotifyHit_Parms;
	ServerNotifyHit_Parms.FiringMode = FiringMode;
	memcpy ( &ServerNotifyHit_Parms.Impact, &Impact, 0x50 );
	ServerNotifyHit_Parms.Damage = Damage;

	this->ProcessEvent ( pFnServerNotifyHit, &ServerNotifyHit_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.ProjectileFire
// [0x00820102] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* ASanctumWeapon::ProjectileFire ( )
{
	static UFunction* pFnProjectileFire = NULL;

	if ( ! pFnProjectileFire )
		pFnProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 49042 ];

	ASanctumWeapon_execProjectileFire_Parms ProjectileFire_Parms;

	this->ProcessEvent ( pFnProjectileFire, &ProjectileFire_Parms, NULL );

	return ProjectileFire_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.GetProjectileArchetype
// [0x00020002] 
// Parameters infos:
// class ASanctumProjectile*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASanctumProjectile* ASanctumWeapon::GetProjectileArchetype ( )
{
	static UFunction* pFnGetProjectileArchetype = NULL;

	if ( ! pFnGetProjectileArchetype )
		pFnGetProjectileArchetype = (UFunction*) UObject::GObjObjects()->Data[ 49040 ];

	ASanctumWeapon_execGetProjectileArchetype_Parms GetProjectileArchetype_Parms;

	this->ProcessEvent ( pFnGetProjectileArchetype, &GetProjectileArchetype_Parms, NULL );

	return GetProjectileArchetype_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.InstantFire
// [0x00820102] 
// Parameters infos:

void ASanctumWeapon::InstantFire ( )
{
	static UFunction* pFnInstantFire = NULL;

	if ( ! pFnInstantFire )
		pFnInstantFire = (UFunction*) UObject::GObjObjects()->Data[ 49033 ];

	ASanctumWeapon_execInstantFire_Parms InstantFire_Parms;

	this->ProcessEvent ( pFnInstantFire, &InstantFire_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.GetSpread
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

float ASanctumWeapon::GetSpread ( unsigned char FireModeNum )
{
	static UFunction* pFnGetSpread = NULL;

	if ( ! pFnGetSpread )
		pFnGetSpread = (UFunction*) UObject::GObjObjects()->Data[ 49030 ];

	ASanctumWeapon_execGetSpread_Parms GetSpread_Parms;
	GetSpread_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnGetSpread, &GetSpread_Parms, NULL );

	return GetSpread_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.AddSpread
// [0x00820102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                BaseAim                        ( CPF_Parm )

struct FRotator ASanctumWeapon::AddSpread ( struct FRotator BaseAim )
{
	static UFunction* pFnAddSpread = NULL;

	if ( ! pFnAddSpread )
		pFnAddSpread = (UFunction*) UObject::GObjObjects()->Data[ 49021 ];

	ASanctumWeapon_execAddSpread_Parms AddSpread_Parms;
	memcpy ( &AddSpread_Parms.BaseAim, &BaseAim, 0xC );

	this->ProcessEvent ( pFnAddSpread, &AddSpread_Parms, NULL );

	return AddSpread_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.FireAmmunition
// [0x00020102] 
// Parameters infos:

void ASanctumWeapon::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = (UFunction*) UObject::GObjObjects()->Data[ 49020 ];

	ASanctumWeapon_execFireAmmunition_Parms FireAmmunition_Parms;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.GetAmountOfShotsFired
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumWeapon::GetAmountOfShotsFired ( )
{
	static UFunction* pFnGetAmountOfShotsFired = NULL;

	if ( ! pFnGetAmountOfShotsFired )
		pFnGetAmountOfShotsFired = (UFunction*) UObject::GObjObjects()->Data[ 49018 ];

	ASanctumWeapon_execGetAmountOfShotsFired_Parms GetAmountOfShotsFired_Parms;

	this->ProcessEvent ( pFnGetAmountOfShotsFired, &GetAmountOfShotsFired_Parms, NULL );

	return GetAmountOfShotsFired_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.ServerStartFire
// [0x002200C2] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASanctumWeapon::ServerStartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnServerStartFire = NULL;

	if ( ! pFnServerStartFire )
		pFnServerStartFire = (UFunction*) UObject::GObjObjects()->Data[ 49016 ];

	ASanctumWeapon_execServerStartFire_Parms ServerStartFire_Parms;
	ServerStartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnServerStartFire, &ServerStartFire_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.InstantFireEndTrace
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartTrace                     ( CPF_Parm )

struct FVector ASanctumWeapon::InstantFireEndTrace ( struct FVector StartTrace )
{
	static UFunction* pFnInstantFireEndTrace = NULL;

	if ( ! pFnInstantFireEndTrace )
		pFnInstantFireEndTrace = (UFunction*) UObject::GObjObjects()->Data[ 49013 ];

	ASanctumWeapon_execInstantFireEndTrace_Parms InstantFireEndTrace_Parms;
	memcpy ( &InstantFireEndTrace_Parms.StartTrace, &StartTrace, 0xC );

	this->ProcessEvent ( pFnInstantFireEndTrace, &InstantFireEndTrace_Parms, NULL );

	return InstantFireEndTrace_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.InstantFireStartTrace
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASanctumWeapon::InstantFireStartTrace ( )
{
	static UFunction* pFnInstantFireStartTrace = NULL;

	if ( ! pFnInstantFireStartTrace )
		pFnInstantFireStartTrace = (UFunction*) UObject::GObjObjects()->Data[ 49011 ];

	ASanctumWeapon_execInstantFireStartTrace_Parms InstantFireStartTrace_Parms;

	this->ProcessEvent ( pFnInstantFireStartTrace, &InstantFireStartTrace_Parms, NULL );

	return InstantFireStartTrace_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.PassThroughDamage
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  HitActor                       ( CPF_Parm )

bool ASanctumWeapon::PassThroughDamage ( class AActor* HitActor )
{
	static UFunction* pFnPassThroughDamage = NULL;

	if ( ! pFnPassThroughDamage )
		pFnPassThroughDamage = (UFunction*) UObject::GObjObjects()->Data[ 49008 ];

	ASanctumWeapon_execPassThroughDamage_Parms PassThroughDamage_Parms;
	PassThroughDamage_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnPassThroughDamage, &PassThroughDamage_Parms, NULL );

	return PassThroughDamage_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.AmmoMaxed
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumWeapon::AmmoMaxed ( )
{
	static UFunction* pFnAmmoMaxed = NULL;

	if ( ! pFnAmmoMaxed )
		pFnAmmoMaxed = (UFunction*) UObject::GObjObjects()->Data[ 49006 ];

	ASanctumWeapon_execAmmoMaxed_Parms AmmoMaxed_Parms;

	this->ProcessEvent ( pFnAmmoMaxed, &AmmoMaxed_Parms, NULL );

	return AmmoMaxed_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.WeaponEmpty
// [0x00020102] 
// Parameters infos:

void ASanctumWeapon::WeaponEmpty ( )
{
	static UFunction* pFnWeaponEmpty = NULL;

	if ( ! pFnWeaponEmpty )
		pFnWeaponEmpty = (UFunction*) UObject::GObjObjects()->Data[ 49005 ];

	ASanctumWeapon_execWeaponEmpty_Parms WeaponEmpty_Parms;

	this->ProcessEvent ( pFnWeaponEmpty, &WeaponEmpty_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.HasAnyAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumWeapon::HasAnyAmmo ( )
{
	static UFunction* pFnHasAnyAmmo = NULL;

	if ( ! pFnHasAnyAmmo )
		pFnHasAnyAmmo = (UFunction*) UObject::GObjObjects()->Data[ 49001 ];

	ASanctumWeapon_execHasAnyAmmo_Parms HasAnyAmmo_Parms;

	this->ProcessEvent ( pFnHasAnyAmmo, &HasAnyAmmo_Parms, NULL );

	return HasAnyAmmo_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.ConsumeAmmo
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASanctumWeapon::ConsumeAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 48999 ];

	ASanctumWeapon_execConsumeAmmo_Parms ConsumeAmmo_Parms;
	ConsumeAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.AddAmmo
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

int ASanctumWeapon::AddAmmo ( int Amount )
{
	static UFunction* pFnAddAmmo = NULL;

	if ( ! pFnAddAmmo )
		pFnAddAmmo = (UFunction*) UObject::GObjObjects()->Data[ 48995 ];

	ASanctumWeapon_execAddAmmo_Parms AddAmmo_Parms;
	AddAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddAmmo, &AddAmmo_Parms, NULL );

	return AddAmmo_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.DrawCrosshair
// [0x00820102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void ASanctumWeapon::DrawCrosshair ( class AHUD* H )
{
	static UFunction* pFnDrawCrosshair = NULL;

	if ( ! pFnDrawCrosshair )
		pFnDrawCrosshair = (UFunction*) UObject::GObjObjects()->Data[ 48986 ];

	ASanctumWeapon_execDrawCrosshair_Parms DrawCrosshair_Parms;
	DrawCrosshair_Parms.H = H;

	this->ProcessEvent ( pFnDrawCrosshair, &DrawCrosshair_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.notifyNewHud
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class ASanctumHUD*             HUD                            ( CPF_Parm )

void ASanctumWeapon::eventnotifyNewHud ( class ASanctumHUD* HUD )
{
	static UFunction* pFnnotifyNewHud = NULL;

	if ( ! pFnnotifyNewHud )
		pFnnotifyNewHud = (UFunction*) UObject::GObjObjects()->Data[ 48984 ];

	ASanctumWeapon_eventnotifyNewHud_Parms notifyNewHud_Parms;
	notifyNewHud_Parms.HUD = HUD;

	this->ProcessEvent ( pFnnotifyNewHud, &notifyNewHud_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.DrawHUD
// [0x00020102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void ASanctumWeapon::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 48982 ];

	ASanctumWeapon_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.SetPosition
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class AUDKPawn*                Holder                         ( CPF_Parm )

void ASanctumWeapon::eventSetPosition ( class AUDKPawn* Holder )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = (UFunction*) UObject::GObjObjects()->Data[ 48969 ];

	ASanctumWeapon_eventSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.Holder = Holder;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.LagRot
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            NewValue                       ( CPF_Parm )
// int                            LastValue                      ( CPF_Parm )
// float                          MaxDiff                        ( CPF_Parm )
// int                            Index                          ( CPF_Parm )

int ASanctumWeapon::LagRot ( int NewValue, int LastValue, float MaxDiff, int Index )
{
	static UFunction* pFnLagRot = NULL;

	if ( ! pFnLagRot )
		pFnLagRot = (UFunction*) UObject::GObjObjects()->Data[ 48960 ];

	ASanctumWeapon_execLagRot_Parms LagRot_Parms;
	LagRot_Parms.NewValue = NewValue;
	LagRot_Parms.LastValue = LastValue;
	LagRot_Parms.MaxDiff = MaxDiff;
	LagRot_Parms.Index = Index;

	this->ProcessEvent ( pFnLagRot, &LagRot_Parms, NULL );

	return LagRot_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.ShouldLagRot
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumWeapon::ShouldLagRot ( )
{
	static UFunction* pFnShouldLagRot = NULL;

	if ( ! pFnShouldLagRot )
		pFnShouldLagRot = (UFunction*) UObject::GObjObjects()->Data[ 48958 ];

	ASanctumWeapon_execShouldLagRot_Parms ShouldLagRot_Parms;

	this->ProcessEvent ( pFnShouldLagRot, &ShouldLagRot_Parms, NULL );

	return ShouldLagRot_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.ToggleOwnerSee
// [0x00020102] 
// Parameters infos:
// unsigned long                  see                            ( CPF_Parm )

void ASanctumWeapon::ToggleOwnerSee ( unsigned long see )
{
	static UFunction* pFnToggleOwnerSee = NULL;

	if ( ! pFnToggleOwnerSee )
		pFnToggleOwnerSee = (UFunction*) UObject::GObjObjects()->Data[ 48956 ];

	ASanctumWeapon_execToggleOwnerSee_Parms ToggleOwnerSee_Parms;
	ToggleOwnerSee_Parms.see = see;

	this->ProcessEvent ( pFnToggleOwnerSee, &ToggleOwnerSee_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.AttachWeaponTo
// [0x00024102] 
// Parameters infos:
// class USkeletalMeshComponent*  MeshCpnt                       ( CPF_Parm | CPF_EditInline )
// struct FName                   SocketName                     ( CPF_OptionalParm | CPF_Parm )

void ASanctumWeapon::AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName )
{
	static UFunction* pFnAttachWeaponTo = NULL;

	if ( ! pFnAttachWeaponTo )
		pFnAttachWeaponTo = (UFunction*) UObject::GObjObjects()->Data[ 48952 ];

	ASanctumWeapon_execAttachWeaponTo_Parms AttachWeaponTo_Parms;
	AttachWeaponTo_Parms.MeshCpnt = MeshCpnt;
	memcpy ( &AttachWeaponTo_Parms.SocketName, &SocketName, 0x8 );

	this->ProcessEvent ( pFnAttachWeaponTo, &AttachWeaponTo_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.UpgradeTo
// [0x00820102] 
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void ASanctumWeapon::UpgradeTo ( int Level )
{
	static UFunction* pFnUpgradeTo = NULL;

	if ( ! pFnUpgradeTo )
		pFnUpgradeTo = (UFunction*) UObject::GObjObjects()->Data[ 48948 ];

	ASanctumWeapon_execUpgradeTo_Parms UpgradeTo_Parms;
	UpgradeTo_Parms.Level = Level;

	this->ProcessEvent ( pFnUpgradeTo, &UpgradeTo_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.UpgradeShotCost
// [0x00020102] 
// Parameters infos:
// int                            NewLevel                       ( CPF_Parm )

void ASanctumWeapon::UpgradeShotCost ( int NewLevel )
{
	static UFunction* pFnUpgradeShotCost = NULL;

	if ( ! pFnUpgradeShotCost )
		pFnUpgradeShotCost = (UFunction*) UObject::GObjObjects()->Data[ 48946 ];

	ASanctumWeapon_execUpgradeShotCost_Parms UpgradeShotCost_Parms;
	UpgradeShotCost_Parms.NewLevel = NewLevel;

	this->ProcessEvent ( pFnUpgradeShotCost, &UpgradeShotCost_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.UpgradeSpreadTo
// [0x00020102] 
// Parameters infos:
// int                            NewLevel                       ( CPF_Parm )

void ASanctumWeapon::UpgradeSpreadTo ( int NewLevel )
{
	static UFunction* pFnUpgradeSpreadTo = NULL;

	if ( ! pFnUpgradeSpreadTo )
		pFnUpgradeSpreadTo = (UFunction*) UObject::GObjObjects()->Data[ 48944 ];

	ASanctumWeapon_execUpgradeSpreadTo_Parms UpgradeSpreadTo_Parms;
	UpgradeSpreadTo_Parms.NewLevel = NewLevel;

	this->ProcessEvent ( pFnUpgradeSpreadTo, &UpgradeSpreadTo_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.UpgradeFireIntervalTo
// [0x00020102] 
// Parameters infos:
// int                            NewLevel                       ( CPF_Parm )

void ASanctumWeapon::UpgradeFireIntervalTo ( int NewLevel )
{
	static UFunction* pFnUpgradeFireIntervalTo = NULL;

	if ( ! pFnUpgradeFireIntervalTo )
		pFnUpgradeFireIntervalTo = (UFunction*) UObject::GObjObjects()->Data[ 48942 ];

	ASanctumWeapon_execUpgradeFireIntervalTo_Parms UpgradeFireIntervalTo_Parms;
	UpgradeFireIntervalTo_Parms.NewLevel = NewLevel;

	this->ProcessEvent ( pFnUpgradeFireIntervalTo, &UpgradeFireIntervalTo_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.GetStats
// [0x00422102] 
// Parameters infos:
// class ASanctumWeapon*          Wpn                            ( CPF_Parm )
// int                            Level                          ( CPF_Parm )
// struct FStatInfoStruct         weaponInfo                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumWeapon::GetStats ( class ASanctumWeapon* Wpn, int Level, struct FStatInfoStruct* weaponInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 48917 ];

	ASanctumWeapon_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.Wpn = Wpn;
	GetStats_Parms.Level = Level;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( weaponInfo )
		memcpy ( weaponInfo, &GetStats_Parms.weaponInfo, 0xAC );
};

// Function Sanctum.SanctumWeapon.PreloadTextures
// [0x00020102] 
// Parameters infos:
// unsigned long                  forcePreload                   ( CPF_Parm )

void ASanctumWeapon::PreloadTextures ( unsigned long forcePreload )
{
	static UFunction* pFnPreloadTextures = NULL;

	if ( ! pFnPreloadTextures )
		pFnPreloadTextures = (UFunction*) UObject::GObjObjects()->Data[ 48915 ];

	ASanctumWeapon_execPreloadTextures_Parms PreloadTextures_Parms;
	PreloadTextures_Parms.forcePreload = forcePreload;

	this->ProcessEvent ( pFnPreloadTextures, &PreloadTextures_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.HasDLC
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumWeapon::HasDLC ( )
{
	static UFunction* pFnHasDLC = NULL;

	if ( ! pFnHasDLC )
		pFnHasDLC = (UFunction*) UObject::GObjObjects()->Data[ 48913 ];

	ASanctumWeapon_execHasDLC_Parms HasDLC_Parms;

	this->ProcessEvent ( pFnHasDLC, &HasDLC_Parms, NULL );

	return HasDLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeapon.CheckCheat
// [0x00020102] 
// Parameters infos:

void ASanctumWeapon::CheckCheat ( )
{
	static UFunction* pFnCheckCheat = NULL;

	if ( ! pFnCheckCheat )
		pFnCheckCheat = (UFunction*) UObject::GObjObjects()->Data[ 48911 ];

	ASanctumWeapon_execCheckCheat_Parms CheckCheat_Parms;

	this->ProcessEvent ( pFnCheckCheat, &CheckCheat_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.DetachWeapon
// [0x00020102] 
// Parameters infos:

void ASanctumWeapon::DetachWeapon ( )
{
	static UFunction* pFnDetachWeapon = NULL;

	if ( ! pFnDetachWeapon )
		pFnDetachWeapon = (UFunction*) UObject::GObjObjects()->Data[ 48908 ];

	ASanctumWeapon_execDetachWeapon_Parms DetachWeapon_Parms;

	this->ProcessEvent ( pFnDetachWeapon, &DetachWeapon_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeapon::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 48907 ];

	ASanctumWeapon_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeapon::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 48906 ];

	ASanctumWeapon_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumWeapon.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumWeapon::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 48904 ];

	ASanctumWeapon_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.getMaxCompletion
// [0x00020100] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASanctumWeaponBuildGun::getMaxCompletion ( )
{
	static UFunction* pFngetMaxCompletion = NULL;

	if ( ! pFngetMaxCompletion )
		pFngetMaxCompletion = (UFunction*) UObject::GObjObjects()->Data[ 51139 ];

	ASanctumWeaponBuildGun_execgetMaxCompletion_Parms getMaxCompletion_Parms;

	this->ProcessEvent ( pFngetMaxCompletion, &getMaxCompletion_Parms, NULL );

	return getMaxCompletion_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponBuildGun.buildAborted
// [0x00020100] 
// Parameters infos:

void ASanctumWeaponBuildGun::buildAborted ( )
{
	static UFunction* pFnbuildAborted = NULL;

	if ( ! pFnbuildAborted )
		pFnbuildAborted = (UFunction*) UObject::GObjObjects()->Data[ 51138 ];

	ASanctumWeaponBuildGun_execbuildAborted_Parms buildAborted_Parms;

	this->ProcessEvent ( pFnbuildAborted, &buildAborted_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.playPing
// [0x00820002] 
// Parameters infos:

void ASanctumWeaponBuildGun::playPing ( )
{
	static UFunction* pFnplayPing = NULL;

	if ( ! pFnplayPing )
		pFnplayPing = (UFunction*) UObject::GObjObjects()->Data[ 51135 ];

	ASanctumWeaponBuildGun_execplayPing_Parms playPing_Parms;

	this->ProcessEvent ( pFnplayPing, &playPing_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.ClientToggleReady
// [0x010201C2] 
// Parameters infos:
// unsigned long                  IsReady                        ( CPF_Parm )

void ASanctumWeaponBuildGun::ClientToggleReady ( unsigned long IsReady )
{
	static UFunction* pFnClientToggleReady = NULL;

	if ( ! pFnClientToggleReady )
		pFnClientToggleReady = (UFunction*) UObject::GObjObjects()->Data[ 51124 ];

	ASanctumWeaponBuildGun_execClientToggleReady_Parms ClientToggleReady_Parms;
	ClientToggleReady_Parms.IsReady = IsReady;

	this->ProcessEvent ( pFnClientToggleReady, &ClientToggleReady_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.ToggleReady
// [0x00020002] 
// Parameters infos:
// unsigned long                  IsReady                        ( CPF_Parm )

void ASanctumWeaponBuildGun::ToggleReady ( unsigned long IsReady )
{
	static UFunction* pFnToggleReady = NULL;

	if ( ! pFnToggleReady )
		pFnToggleReady = (UFunction*) UObject::GObjObjects()->Data[ 51122 ];

	ASanctumWeaponBuildGun_execToggleReady_Parms ToggleReady_Parms;
	ToggleReady_Parms.IsReady = IsReady;

	this->ProcessEvent ( pFnToggleReady, &ToggleReady_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.getCurrentCompletion
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASanctumWeaponBuildGun::getCurrentCompletion ( )
{
	static UFunction* pFngetCurrentCompletion = NULL;

	if ( ! pFngetCurrentCompletion )
		pFngetCurrentCompletion = (UFunction*) UObject::GObjObjects()->Data[ 51119 ];

	ASanctumWeaponBuildGun_execgetCurrentCompletion_Parms getCurrentCompletion_Parms;

	this->ProcessEvent ( pFngetCurrentCompletion, &getCurrentCompletion_Parms, NULL );

	return getCurrentCompletion_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponBuildGun.ToggleOwnerSee
// [0x00020102] 
// Parameters infos:
// unsigned long                  see                            ( CPF_Parm )

void ASanctumWeaponBuildGun::ToggleOwnerSee ( unsigned long see )
{
	static UFunction* pFnToggleOwnerSee = NULL;

	if ( ! pFnToggleOwnerSee )
		pFnToggleOwnerSee = (UFunction*) UObject::GObjObjects()->Data[ 51117 ];

	ASanctumWeaponBuildGun_execToggleOwnerSee_Parms ToggleOwnerSee_Parms;
	ToggleOwnerSee_Parms.see = see;

	this->ProcessEvent ( pFnToggleOwnerSee, &ToggleOwnerSee_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.HologramUpgradeCountdown
// [0x00020102] 
// Parameters infos:
// float                          amountComplete                 ( CPF_Parm )
// unsigned char                  click                          ( CPF_Parm )

void ASanctumWeaponBuildGun::HologramUpgradeCountdown ( float amountComplete, unsigned char click )
{
	static UFunction* pFnHologramUpgradeCountdown = NULL;

	if ( ! pFnHologramUpgradeCountdown )
		pFnHologramUpgradeCountdown = (UFunction*) UObject::GObjObjects()->Data[ 51113 ];

	ASanctumWeaponBuildGun_execHologramUpgradeCountdown_Parms HologramUpgradeCountdown_Parms;
	HologramUpgradeCountdown_Parms.amountComplete = amountComplete;
	HologramUpgradeCountdown_Parms.click = click;

	this->ProcessEvent ( pFnHologramUpgradeCountdown, &HologramUpgradeCountdown_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.delayIdle
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PrevState                      ( CPF_Parm )

bool ASanctumWeaponBuildGun::delayIdle ( struct FName PrevState )
{
	static UFunction* pFndelayIdle = NULL;

	if ( ! pFndelayIdle )
		pFndelayIdle = (UFunction*) UObject::GObjObjects()->Data[ 51110 ];

	ASanctumWeaponBuildGun_execdelayIdle_Parms delayIdle_Parms;
	memcpy ( &delayIdle_Parms.PrevState, &PrevState, 0x8 );

	this->ProcessEvent ( pFndelayIdle, &delayIdle_Parms, NULL );

	return delayIdle_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponBuildGun.weaponCategoryChangedServer
// [0x002200C2] 
// Parameters infos:
// unsigned char                  Category                       ( CPF_Parm )

void ASanctumWeaponBuildGun::weaponCategoryChangedServer ( unsigned char Category )
{
	static UFunction* pFnweaponCategoryChangedServer = NULL;

	if ( ! pFnweaponCategoryChangedServer )
		pFnweaponCategoryChangedServer = (UFunction*) UObject::GObjObjects()->Data[ 51108 ];

	ASanctumWeaponBuildGun_execweaponCategoryChangedServer_Parms weaponCategoryChangedServer_Parms;
	weaponCategoryChangedServer_Parms.Category = Category;

	this->ProcessEvent ( pFnweaponCategoryChangedServer, &weaponCategoryChangedServer_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.DrawHUD
// [0x00020102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void ASanctumWeaponBuildGun::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 51106 ];

	ASanctumWeaponBuildGun_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.DetachWeaponHologram
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponBuildGun::DetachWeaponHologram ( )
{
	static UFunction* pFnDetachWeaponHologram = NULL;

	if ( ! pFnDetachWeaponHologram )
		pFnDetachWeaponHologram = (UFunction*) UObject::GObjObjects()->Data[ 51105 ];

	ASanctumWeaponBuildGun_execDetachWeaponHologram_Parms DetachWeaponHologram_Parms;

	this->ProcessEvent ( pFnDetachWeaponHologram, &DetachWeaponHologram_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.weaponCategoryChanged
// [0x00020102] 
// Parameters infos:
// unsigned char                  Category                       ( CPF_Parm )

void ASanctumWeaponBuildGun::weaponCategoryChanged ( unsigned char Category )
{
	static UFunction* pFnweaponCategoryChanged = NULL;

	if ( ! pFnweaponCategoryChanged )
		pFnweaponCategoryChanged = (UFunction*) UObject::GObjObjects()->Data[ 51101 ];

	ASanctumWeaponBuildGun_execweaponCategoryChanged_Parms weaponCategoryChanged_Parms;
	weaponCategoryChanged_Parms.Category = Category;

	this->ProcessEvent ( pFnweaponCategoryChanged, &weaponCategoryChanged_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.HandleFinishedFiring
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponBuildGun::HandleFinishedFiring ( )
{
	static UFunction* pFnHandleFinishedFiring = NULL;

	if ( ! pFnHandleFinishedFiring )
		pFnHandleFinishedFiring = (UFunction*) UObject::GObjObjects()->Data[ 51099 ];

	ASanctumWeaponBuildGun_execHandleFinishedFiring_Parms HandleFinishedFiring_Parms;

	this->ProcessEvent ( pFnHandleFinishedFiring, &HandleFinishedFiring_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.isInWeaponStore
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumWeaponBuildGun::isInWeaponStore ( )
{
	static UFunction* pFnisInWeaponStore = NULL;

	if ( ! pFnisInWeaponStore )
		pFnisInWeaponStore = (UFunction*) UObject::GObjObjects()->Data[ 51097 ];

	ASanctumWeaponBuildGun_execisInWeaponStore_Parms isInWeaponStore_Parms;

	this->ProcessEvent ( pFnisInWeaponStore, &isInWeaponStore_Parms, NULL );

	return isInWeaponStore_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponBuildGun.weaponStoreUpdate
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponBuildGun::weaponStoreUpdate ( )
{
	static UFunction* pFnweaponStoreUpdate = NULL;

	if ( ! pFnweaponStoreUpdate )
		pFnweaponStoreUpdate = (UFunction*) UObject::GObjObjects()->Data[ 51092 ];

	ASanctumWeaponBuildGun_execweaponStoreUpdate_Parms weaponStoreUpdate_Parms;

	this->ProcessEvent ( pFnweaponStoreUpdate, &weaponStoreUpdate_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.DoOverrideNextWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumWeaponBuildGun::DoOverrideNextWeapon ( )
{
	static UFunction* pFnDoOverrideNextWeapon = NULL;

	if ( ! pFnDoOverrideNextWeapon )
		pFnDoOverrideNextWeapon = (UFunction*) UObject::GObjObjects()->Data[ 51090 ];

	ASanctumWeaponBuildGun_execDoOverrideNextWeapon_Parms DoOverrideNextWeapon_Parms;

	this->ProcessEvent ( pFnDoOverrideNextWeapon, &DoOverrideNextWeapon_Parms, NULL );

	return DoOverrideNextWeapon_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponBuildGun.DoOverridePrevWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumWeaponBuildGun::DoOverridePrevWeapon ( )
{
	static UFunction* pFnDoOverridePrevWeapon = NULL;

	if ( ! pFnDoOverridePrevWeapon )
		pFnDoOverridePrevWeapon = (UFunction*) UObject::GObjObjects()->Data[ 51088 ];

	ASanctumWeaponBuildGun_execDoOverridePrevWeapon_Parms DoOverridePrevWeapon_Parms;

	this->ProcessEvent ( pFnDoOverridePrevWeapon, &DoOverridePrevWeapon_Parms, NULL );

	return DoOverridePrevWeapon_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponBuildGun.isUpgradeAction
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Action                         ( CPF_Parm )

bool ASanctumWeaponBuildGun::isUpgradeAction ( unsigned char Action )
{
	static UFunction* pFnisUpgradeAction = NULL;

	if ( ! pFnisUpgradeAction )
		pFnisUpgradeAction = (UFunction*) UObject::GObjObjects()->Data[ 51085 ];

	ASanctumWeaponBuildGun_execisUpgradeAction_Parms isUpgradeAction_Parms;
	isUpgradeAction_Parms.Action = Action;

	this->ProcessEvent ( pFnisUpgradeAction, &isUpgradeAction_Parms, NULL );

	return isUpgradeAction_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponBuildGun.BuildFunction
// [0x00820002] 
// Parameters infos:
// int                            FireMode                       ( CPF_Parm )

void ASanctumWeaponBuildGun::BuildFunction ( int FireMode )
{
	static UFunction* pFnBuildFunction = NULL;

	if ( ! pFnBuildFunction )
		pFnBuildFunction = (UFunction*) UObject::GObjObjects()->Data[ 51059 ];

	ASanctumWeaponBuildGun_execBuildFunction_Parms BuildFunction_Parms;
	BuildFunction_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnBuildFunction, &BuildFunction_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.AchievementsCheckSell
// [0x00020002] 
// Parameters infos:
// class UClass*                  towerClass                     ( CPF_Parm )

void ASanctumWeaponBuildGun::AchievementsCheckSell ( class UClass* towerClass )
{
	static UFunction* pFnAchievementsCheckSell = NULL;

	if ( ! pFnAchievementsCheckSell )
		pFnAchievementsCheckSell = (UFunction*) UObject::GObjObjects()->Data[ 51056 ];

	ASanctumWeaponBuildGun_execAchievementsCheckSell_Parms AchievementsCheckSell_Parms;
	AchievementsCheckSell_Parms.towerClass = towerClass;

	this->ProcessEvent ( pFnAchievementsCheckSell, &AchievementsCheckSell_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.AddBuildStats
// [0x00020002] 
// Parameters infos:
// class UClass*                  towerClass                     ( CPF_Parm )
// class APawn*                   PC                             ( CPF_Parm )

void ASanctumWeaponBuildGun::AddBuildStats ( class UClass* towerClass, class APawn* PC )
{
	static UFunction* pFnAddBuildStats = NULL;

	if ( ! pFnAddBuildStats )
		pFnAddBuildStats = (UFunction*) UObject::GObjObjects()->Data[ 51051 ];

	ASanctumWeaponBuildGun_execAddBuildStats_Parms AddBuildStats_Parms;
	AddBuildStats_Parms.towerClass = towerClass;
	AddBuildStats_Parms.PC = PC;

	this->ProcessEvent ( pFnAddBuildStats, &AddBuildStats_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.AchievementsChecksUpgrade
// [0x00020002] 
// Parameters infos:
// class UClass*                  towerClass                     ( CPF_Parm )

void ASanctumWeaponBuildGun::AchievementsChecksUpgrade ( class UClass* towerClass )
{
	static UFunction* pFnAchievementsChecksUpgrade = NULL;

	if ( ! pFnAchievementsChecksUpgrade )
		pFnAchievementsChecksUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 51047 ];

	ASanctumWeaponBuildGun_execAchievementsChecksUpgrade_Parms AchievementsChecksUpgrade_Parms;
	AchievementsChecksUpgrade_Parms.towerClass = towerClass;

	this->ProcessEvent ( pFnAchievementsChecksUpgrade, &AchievementsChecksUpgrade_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.getBuildEffectLocation
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )

struct FVector ASanctumWeaponBuildGun::getBuildEffectLocation ( class ASanctumTowerBase* TowerBase )
{
	static UFunction* pFngetBuildEffectLocation = NULL;

	if ( ! pFngetBuildEffectLocation )
		pFngetBuildEffectLocation = (UFunction*) UObject::GObjObjects()->Data[ 51038 ];

	ASanctumWeaponBuildGun_execgetBuildEffectLocation_Parms getBuildEffectLocation_Parms;
	getBuildEffectLocation_Parms.TowerBase = TowerBase;

	this->ProcessEvent ( pFngetBuildEffectLocation, &getBuildEffectLocation_Parms, NULL );

	return getBuildEffectLocation_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponBuildGun.currentTowerIsChanged
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumWeaponBuildGun::currentTowerIsChanged ( )
{
	static UFunction* pFncurrentTowerIsChanged = NULL;

	if ( ! pFncurrentTowerIsChanged )
		pFncurrentTowerIsChanged = (UFunction*) UObject::GObjObjects()->Data[ 51034 ];

	ASanctumWeaponBuildGun_execcurrentTowerIsChanged_Parms currentTowerIsChanged_Parms;

	this->ProcessEvent ( pFncurrentTowerIsChanged, &currentTowerIsChanged_Parms, NULL );

	return currentTowerIsChanged_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponBuildGun.addWeaponUpgradeListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumWeaponBuildGun::addWeaponUpgradeListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnaddWeaponUpgradeListener = NULL;

	if ( ! pFnaddWeaponUpgradeListener )
		pFnaddWeaponUpgradeListener = (UFunction*) UObject::GObjObjects()->Data[ 51032 ];

	ASanctumWeaponBuildGun_execaddWeaponUpgradeListener_Parms addWeaponUpgradeListener_Parms;
	memcpy ( &addWeaponUpgradeListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnaddWeaponUpgradeListener, &addWeaponUpgradeListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.addAimingAtTowerListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumWeaponBuildGun::addAimingAtTowerListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnaddAimingAtTowerListener = NULL;

	if ( ! pFnaddAimingAtTowerListener )
		pFnaddAimingAtTowerListener = (UFunction*) UObject::GObjObjects()->Data[ 51030 ];

	ASanctumWeaponBuildGun_execaddAimingAtTowerListener_Parms addAimingAtTowerListener_Parms;
	memcpy ( &addAimingAtTowerListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnaddAimingAtTowerListener, &addAimingAtTowerListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.addCurrentTowerListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumWeaponBuildGun::addCurrentTowerListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnaddCurrentTowerListener = NULL;

	if ( ! pFnaddCurrentTowerListener )
		pFnaddCurrentTowerListener = (UFunction*) UObject::GObjObjects()->Data[ 51028 ];

	ASanctumWeaponBuildGun_execaddCurrentTowerListener_Parms addCurrentTowerListener_Parms;
	memcpy ( &addCurrentTowerListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnaddCurrentTowerListener, &addCurrentTowerListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.addPrevWeaponListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumWeaponBuildGun::addPrevWeaponListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnaddPrevWeaponListener = NULL;

	if ( ! pFnaddPrevWeaponListener )
		pFnaddPrevWeaponListener = (UFunction*) UObject::GObjObjects()->Data[ 51026 ];

	ASanctumWeaponBuildGun_execaddPrevWeaponListener_Parms addPrevWeaponListener_Parms;
	memcpy ( &addPrevWeaponListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnaddPrevWeaponListener, &addPrevWeaponListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.addNextWeaponListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumWeaponBuildGun::addNextWeaponListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnaddNextWeaponListener = NULL;

	if ( ! pFnaddNextWeaponListener )
		pFnaddNextWeaponListener = (UFunction*) UObject::GObjObjects()->Data[ 51024 ];

	ASanctumWeaponBuildGun_execaddNextWeaponListener_Parms addNextWeaponListener_Parms;
	memcpy ( &addNextWeaponListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnaddNextWeaponListener, &addNextWeaponListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.addRightClickListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumWeaponBuildGun::addRightClickListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnaddRightClickListener = NULL;

	if ( ! pFnaddRightClickListener )
		pFnaddRightClickListener = (UFunction*) UObject::GObjObjects()->Data[ 51022 ];

	ASanctumWeaponBuildGun_execaddRightClickListener_Parms addRightClickListener_Parms;
	memcpy ( &addRightClickListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnaddRightClickListener, &addRightClickListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.addLeftClickListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumWeaponBuildGun::addLeftClickListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnaddLeftClickListener = NULL;

	if ( ! pFnaddLeftClickListener )
		pFnaddLeftClickListener = (UFunction*) UObject::GObjObjects()->Data[ 51020 ];

	ASanctumWeaponBuildGun_execaddLeftClickListener_Parms addLeftClickListener_Parms;
	memcpy ( &addLeftClickListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnaddLeftClickListener, &addLeftClickListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.addCountdownListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumWeaponBuildGun::addCountdownListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnaddCountdownListener = NULL;

	if ( ! pFnaddCountdownListener )
		pFnaddCountdownListener = (UFunction*) UObject::GObjObjects()->Data[ 51018 ];

	ASanctumWeaponBuildGun_execaddCountdownListener_Parms addCountdownListener_Parms;
	memcpy ( &addCountdownListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnaddCountdownListener, &addCountdownListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.addBuyPriceListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumWeaponBuildGun::addBuyPriceListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnaddBuyPriceListener = NULL;

	if ( ! pFnaddBuyPriceListener )
		pFnaddBuyPriceListener = (UFunction*) UObject::GObjObjects()->Data[ 51016 ];

	ASanctumWeaponBuildGun_execaddBuyPriceListener_Parms addBuyPriceListener_Parms;
	memcpy ( &addBuyPriceListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnaddBuyPriceListener, &addBuyPriceListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.addSellPriceListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumWeaponBuildGun::addSellPriceListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnaddSellPriceListener = NULL;

	if ( ! pFnaddSellPriceListener )
		pFnaddSellPriceListener = (UFunction*) UObject::GObjObjects()->Data[ 51014 ];

	ASanctumWeaponBuildGun_execaddSellPriceListener_Parms addSellPriceListener_Parms;
	memcpy ( &addSellPriceListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnaddSellPriceListener, &addSellPriceListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.addButtonUpListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumWeaponBuildGun::addButtonUpListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnaddButtonUpListener = NULL;

	if ( ! pFnaddButtonUpListener )
		pFnaddButtonUpListener = (UFunction*) UObject::GObjObjects()->Data[ 51012 ];

	ASanctumWeaponBuildGun_execaddButtonUpListener_Parms addButtonUpListener_Parms;
	memcpy ( &addButtonUpListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnaddButtonUpListener, &addButtonUpListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.addButtonDownListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumWeaponBuildGun::addButtonDownListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnaddButtonDownListener = NULL;

	if ( ! pFnaddButtonDownListener )
		pFnaddButtonDownListener = (UFunction*) UObject::GObjObjects()->Data[ 51010 ];

	ASanctumWeaponBuildGun_execaddButtonDownListener_Parms addButtonDownListener_Parms;
	memcpy ( &addButtonDownListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnaddButtonDownListener, &addButtonDownListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.setAimingAtTower
// [0x00020102] 
// Parameters infos:
// unsigned long                  NewValue                       ( CPF_Parm )

void ASanctumWeaponBuildGun::setAimingAtTower ( unsigned long NewValue )
{
	static UFunction* pFnsetAimingAtTower = NULL;

	if ( ! pFnsetAimingAtTower )
		pFnsetAimingAtTower = (UFunction*) UObject::GObjObjects()->Data[ 51008 ];

	ASanctumWeaponBuildGun_execsetAimingAtTower_Parms setAimingAtTower_Parms;
	setAimingAtTower_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnsetAimingAtTower, &setAimingAtTower_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.setWeaponUpgradeAction
// [0x00020102] 
// Parameters infos:
// unsigned char                  Action                         ( CPF_Parm )
// int                            Cost                           ( CPF_Parm )

void ASanctumWeaponBuildGun::setWeaponUpgradeAction ( unsigned char Action, int Cost )
{
	static UFunction* pFnsetWeaponUpgradeAction = NULL;

	if ( ! pFnsetWeaponUpgradeAction )
		pFnsetWeaponUpgradeAction = (UFunction*) UObject::GObjObjects()->Data[ 51005 ];

	ASanctumWeaponBuildGun_execsetWeaponUpgradeAction_Parms setWeaponUpgradeAction_Parms;
	setWeaponUpgradeAction_Parms.Action = Action;
	setWeaponUpgradeAction_Parms.Cost = Cost;

	this->ProcessEvent ( pFnsetWeaponUpgradeAction, &setWeaponUpgradeAction_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.setRightClickAction
// [0x00020102] 
// Parameters infos:
// unsigned char                  Action                         ( CPF_Parm )

void ASanctumWeaponBuildGun::setRightClickAction ( unsigned char Action )
{
	static UFunction* pFnsetRightClickAction = NULL;

	if ( ! pFnsetRightClickAction )
		pFnsetRightClickAction = (UFunction*) UObject::GObjObjects()->Data[ 51003 ];

	ASanctumWeaponBuildGun_execsetRightClickAction_Parms setRightClickAction_Parms;
	setRightClickAction_Parms.Action = Action;

	this->ProcessEvent ( pFnsetRightClickAction, &setRightClickAction_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.setLeftClickAction
// [0x00020102] 
// Parameters infos:
// unsigned char                  Action                         ( CPF_Parm )

void ASanctumWeaponBuildGun::setLeftClickAction ( unsigned char Action )
{
	static UFunction* pFnsetLeftClickAction = NULL;

	if ( ! pFnsetLeftClickAction )
		pFnsetLeftClickAction = (UFunction*) UObject::GObjObjects()->Data[ 51001 ];

	ASanctumWeaponBuildGun_execsetLeftClickAction_Parms setLeftClickAction_Parms;
	setLeftClickAction_Parms.Action = Action;

	this->ProcessEvent ( pFnsetLeftClickAction, &setLeftClickAction_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.setBuyPrice
// [0x00020102] 
// Parameters infos:
// int                            NewValue                       ( CPF_Parm )

void ASanctumWeaponBuildGun::setBuyPrice ( int NewValue )
{
	static UFunction* pFnsetBuyPrice = NULL;

	if ( ! pFnsetBuyPrice )
		pFnsetBuyPrice = (UFunction*) UObject::GObjObjects()->Data[ 50999 ];

	ASanctumWeaponBuildGun_execsetBuyPrice_Parms setBuyPrice_Parms;
	setBuyPrice_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnsetBuyPrice, &setBuyPrice_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.getAdjustedSellPrice
// [0x00420102] 
// Parameters infos:
// class UClass*                  Tower                          ( CPF_Parm )
// TArray< int >                  ownerInvestment                ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumWeaponBuildGun::getAdjustedSellPrice ( class UClass* Tower, TArray< int >* ownerInvestment )
{
	static UFunction* pFngetAdjustedSellPrice = NULL;

	if ( ! pFngetAdjustedSellPrice )
		pFngetAdjustedSellPrice = (UFunction*) UObject::GObjObjects()->Data[ 50989 ];

	ASanctumWeaponBuildGun_execgetAdjustedSellPrice_Parms getAdjustedSellPrice_Parms;
	getAdjustedSellPrice_Parms.Tower = Tower;

	this->ProcessEvent ( pFngetAdjustedSellPrice, &getAdjustedSellPrice_Parms, NULL );

	if ( ownerInvestment )
		memcpy ( ownerInvestment, &getAdjustedSellPrice_Parms.ownerInvestment, 0xC );
};

// Function Sanctum.SanctumWeaponBuildGun.setSellPrice
// [0x00020102] 
// Parameters infos:
// int                            NewValue                       ( CPF_Parm )

void ASanctumWeaponBuildGun::setSellPrice ( int NewValue )
{
	static UFunction* pFnsetSellPrice = NULL;

	if ( ! pFnsetSellPrice )
		pFnsetSellPrice = (UFunction*) UObject::GObjObjects()->Data[ 50987 ];

	ASanctumWeaponBuildGun_execsetSellPrice_Parms setSellPrice_Parms;
	setSellPrice_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnsetSellPrice, &setSellPrice_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.setAbleToUpgrade
// [0x00020102] 
// Parameters infos:
// unsigned long                  NewValue                       ( CPF_Parm )

void ASanctumWeaponBuildGun::setAbleToUpgrade ( unsigned long NewValue )
{
	static UFunction* pFnsetAbleToUpgrade = NULL;

	if ( ! pFnsetAbleToUpgrade )
		pFnsetAbleToUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 50985 ];

	ASanctumWeaponBuildGun_execsetAbleToUpgrade_Parms setAbleToUpgrade_Parms;
	setAbleToUpgrade_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnsetAbleToUpgrade, &setAbleToUpgrade_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.setAbleToSell
// [0x00020102] 
// Parameters infos:
// unsigned long                  NewValue                       ( CPF_Parm )

void ASanctumWeaponBuildGun::setAbleToSell ( unsigned long NewValue )
{
	static UFunction* pFnsetAbleToSell = NULL;

	if ( ! pFnsetAbleToSell )
		pFnsetAbleToSell = (UFunction*) UObject::GObjObjects()->Data[ 50983 ];

	ASanctumWeaponBuildGun_execsetAbleToSell_Parms setAbleToSell_Parms;
	setAbleToSell_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnsetAbleToSell, &setAbleToSell_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.setAbleToBuild
// [0x00020102] 
// Parameters infos:
// unsigned long                  NewValue                       ( CPF_Parm )

void ASanctumWeaponBuildGun::setAbleToBuild ( unsigned long NewValue )
{
	static UFunction* pFnsetAbleToBuild = NULL;

	if ( ! pFnsetAbleToBuild )
		pFnsetAbleToBuild = (UFunction*) UObject::GObjObjects()->Data[ 50981 ];

	ASanctumWeaponBuildGun_execsetAbleToBuild_Parms setAbleToBuild_Parms;
	setAbleToBuild_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnsetAbleToBuild, &setAbleToBuild_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.notifyPrevWeaponListeners
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponBuildGun::notifyPrevWeaponListeners ( )
{
	static UFunction* pFnnotifyPrevWeaponListeners = NULL;

	if ( ! pFnnotifyPrevWeaponListeners )
		pFnnotifyPrevWeaponListeners = (UFunction*) UObject::GObjObjects()->Data[ 50978 ];

	ASanctumWeaponBuildGun_execnotifyPrevWeaponListeners_Parms notifyPrevWeaponListeners_Parms;

	this->ProcessEvent ( pFnnotifyPrevWeaponListeners, &notifyPrevWeaponListeners_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.notifyNextWeaponListeners
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponBuildGun::notifyNextWeaponListeners ( )
{
	static UFunction* pFnnotifyNextWeaponListeners = NULL;

	if ( ! pFnnotifyNextWeaponListeners )
		pFnnotifyNextWeaponListeners = (UFunction*) UObject::GObjObjects()->Data[ 50975 ];

	ASanctumWeaponBuildGun_execnotifyNextWeaponListeners_Parms notifyNextWeaponListeners_Parms;

	this->ProcessEvent ( pFnnotifyNextWeaponListeners, &notifyNextWeaponListeners_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.notifyAimingAtTowerListeners
// [0x00020102] 
// Parameters infos:
// class UClass*                  towerClass                     ( CPF_Parm )
// int                            towerLevel                     ( CPF_Parm )
// class ASanctumTowerBaseAttachment* attachmentInstance             ( CPF_Parm )

void ASanctumWeaponBuildGun::notifyAimingAtTowerListeners ( class UClass* towerClass, int towerLevel, class ASanctumTowerBaseAttachment* attachmentInstance )
{
	static UFunction* pFnnotifyAimingAtTowerListeners = NULL;

	if ( ! pFnnotifyAimingAtTowerListeners )
		pFnnotifyAimingAtTowerListeners = (UFunction*) UObject::GObjObjects()->Data[ 50969 ];

	ASanctumWeaponBuildGun_execnotifyAimingAtTowerListeners_Parms notifyAimingAtTowerListeners_Parms;
	notifyAimingAtTowerListeners_Parms.towerClass = towerClass;
	notifyAimingAtTowerListeners_Parms.towerLevel = towerLevel;
	notifyAimingAtTowerListeners_Parms.attachmentInstance = attachmentInstance;

	this->ProcessEvent ( pFnnotifyAimingAtTowerListeners, &notifyAimingAtTowerListeners_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.notifyCurrentTowerListeners
// [0x00020102] 
// Parameters infos:
// class UClass*                  towerClass                     ( CPF_Parm )
// int                            towerLevel                     ( CPF_Parm )
// class ASanctumTowerBaseAttachment* attachmentInstance             ( CPF_Parm )

void ASanctumWeaponBuildGun::notifyCurrentTowerListeners ( class UClass* towerClass, int towerLevel, class ASanctumTowerBaseAttachment* attachmentInstance )
{
	static UFunction* pFnnotifyCurrentTowerListeners = NULL;

	if ( ! pFnnotifyCurrentTowerListeners )
		pFnnotifyCurrentTowerListeners = (UFunction*) UObject::GObjObjects()->Data[ 50963 ];

	ASanctumWeaponBuildGun_execnotifyCurrentTowerListeners_Parms notifyCurrentTowerListeners_Parms;
	notifyCurrentTowerListeners_Parms.towerClass = towerClass;
	notifyCurrentTowerListeners_Parms.towerLevel = towerLevel;
	notifyCurrentTowerListeners_Parms.attachmentInstance = attachmentInstance;

	this->ProcessEvent ( pFnnotifyCurrentTowerListeners, &notifyCurrentTowerListeners_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.notifyWeaponUpgradeListeners
// [0x00020102] 
// Parameters infos:
// unsigned char                  Action                         ( CPF_Parm )
// int                            Cost                           ( CPF_Parm )

void ASanctumWeaponBuildGun::notifyWeaponUpgradeListeners ( unsigned char Action, int Cost )
{
	static UFunction* pFnnotifyWeaponUpgradeListeners = NULL;

	if ( ! pFnnotifyWeaponUpgradeListeners )
		pFnnotifyWeaponUpgradeListeners = (UFunction*) UObject::GObjObjects()->Data[ 50958 ];

	ASanctumWeaponBuildGun_execnotifyWeaponUpgradeListeners_Parms notifyWeaponUpgradeListeners_Parms;
	notifyWeaponUpgradeListeners_Parms.Action = Action;
	notifyWeaponUpgradeListeners_Parms.Cost = Cost;

	this->ProcessEvent ( pFnnotifyWeaponUpgradeListeners, &notifyWeaponUpgradeListeners_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.notifyRightClickListeners
// [0x00020102] 
// Parameters infos:
// unsigned char                  Action                         ( CPF_Parm )

void ASanctumWeaponBuildGun::notifyRightClickListeners ( unsigned char Action )
{
	static UFunction* pFnnotifyRightClickListeners = NULL;

	if ( ! pFnnotifyRightClickListeners )
		pFnnotifyRightClickListeners = (UFunction*) UObject::GObjObjects()->Data[ 50954 ];

	ASanctumWeaponBuildGun_execnotifyRightClickListeners_Parms notifyRightClickListeners_Parms;
	notifyRightClickListeners_Parms.Action = Action;

	this->ProcessEvent ( pFnnotifyRightClickListeners, &notifyRightClickListeners_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.notifyLeftClickListeners
// [0x00020102] 
// Parameters infos:
// unsigned char                  Action                         ( CPF_Parm )

void ASanctumWeaponBuildGun::notifyLeftClickListeners ( unsigned char Action )
{
	static UFunction* pFnnotifyLeftClickListeners = NULL;

	if ( ! pFnnotifyLeftClickListeners )
		pFnnotifyLeftClickListeners = (UFunction*) UObject::GObjObjects()->Data[ 50950 ];

	ASanctumWeaponBuildGun_execnotifyLeftClickListeners_Parms notifyLeftClickListeners_Parms;
	notifyLeftClickListeners_Parms.Action = Action;

	this->ProcessEvent ( pFnnotifyLeftClickListeners, &notifyLeftClickListeners_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.notifyCountdownListeners
// [0x00020102] 
// Parameters infos:
// float                          NewValue                       ( CPF_Parm )
// unsigned char                  click                          ( CPF_Parm )

void ASanctumWeaponBuildGun::notifyCountdownListeners ( float NewValue, unsigned char click )
{
	static UFunction* pFnnotifyCountdownListeners = NULL;

	if ( ! pFnnotifyCountdownListeners )
		pFnnotifyCountdownListeners = (UFunction*) UObject::GObjObjects()->Data[ 50945 ];

	ASanctumWeaponBuildGun_execnotifyCountdownListeners_Parms notifyCountdownListeners_Parms;
	notifyCountdownListeners_Parms.NewValue = NewValue;
	notifyCountdownListeners_Parms.click = click;

	this->ProcessEvent ( pFnnotifyCountdownListeners, &notifyCountdownListeners_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.notifyBuyPriceListeners
// [0x00020102] 
// Parameters infos:
// int                            NewValue                       ( CPF_Parm )

void ASanctumWeaponBuildGun::notifyBuyPriceListeners ( int NewValue )
{
	static UFunction* pFnnotifyBuyPriceListeners = NULL;

	if ( ! pFnnotifyBuyPriceListeners )
		pFnnotifyBuyPriceListeners = (UFunction*) UObject::GObjObjects()->Data[ 50941 ];

	ASanctumWeaponBuildGun_execnotifyBuyPriceListeners_Parms notifyBuyPriceListeners_Parms;
	notifyBuyPriceListeners_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnnotifyBuyPriceListeners, &notifyBuyPriceListeners_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.notifySellPriceListeners
// [0x00020102] 
// Parameters infos:
// int                            NewValue                       ( CPF_Parm )

void ASanctumWeaponBuildGun::notifySellPriceListeners ( int NewValue )
{
	static UFunction* pFnnotifySellPriceListeners = NULL;

	if ( ! pFnnotifySellPriceListeners )
		pFnnotifySellPriceListeners = (UFunction*) UObject::GObjObjects()->Data[ 50937 ];

	ASanctumWeaponBuildGun_execnotifySellPriceListeners_Parms notifySellPriceListeners_Parms;
	notifySellPriceListeners_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnnotifySellPriceListeners, &notifySellPriceListeners_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.notifyButtonDownListeners
// [0x00020102] 
// Parameters infos:
// int                            NewValue                       ( CPF_Parm )

void ASanctumWeaponBuildGun::notifyButtonDownListeners ( int NewValue )
{
	static UFunction* pFnnotifyButtonDownListeners = NULL;

	if ( ! pFnnotifyButtonDownListeners )
		pFnnotifyButtonDownListeners = (UFunction*) UObject::GObjObjects()->Data[ 50933 ];

	ASanctumWeaponBuildGun_execnotifyButtonDownListeners_Parms notifyButtonDownListeners_Parms;
	notifyButtonDownListeners_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnnotifyButtonDownListeners, &notifyButtonDownListeners_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.NotifyButtonUpListeners
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireMode                       ( CPF_Parm )

void ASanctumWeaponBuildGun::NotifyButtonUpListeners ( unsigned char FireMode )
{
	static UFunction* pFnNotifyButtonUpListeners = NULL;

	if ( ! pFnNotifyButtonUpListeners )
		pFnNotifyButtonUpListeners = (UFunction*) UObject::GObjObjects()->Data[ 50929 ];

	ASanctumWeaponBuildGun_execNotifyButtonUpListeners_Parms NotifyButtonUpListeners_Parms;
	NotifyButtonUpListeners_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyButtonUpListeners, &NotifyButtonUpListeners_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.serverSetAbleToUpgrade
// [0x002200C2] 
// Parameters infos:
// unsigned long                  NewValue                       ( CPF_Parm )

void ASanctumWeaponBuildGun::serverSetAbleToUpgrade ( unsigned long NewValue )
{
	static UFunction* pFnserverSetAbleToUpgrade = NULL;

	if ( ! pFnserverSetAbleToUpgrade )
		pFnserverSetAbleToUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 50927 ];

	ASanctumWeaponBuildGun_execserverSetAbleToUpgrade_Parms serverSetAbleToUpgrade_Parms;
	serverSetAbleToUpgrade_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnserverSetAbleToUpgrade, &serverSetAbleToUpgrade_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.serverSetAbleToSell
// [0x002200C2] 
// Parameters infos:
// unsigned long                  NewValue                       ( CPF_Parm )

void ASanctumWeaponBuildGun::serverSetAbleToSell ( unsigned long NewValue )
{
	static UFunction* pFnserverSetAbleToSell = NULL;

	if ( ! pFnserverSetAbleToSell )
		pFnserverSetAbleToSell = (UFunction*) UObject::GObjObjects()->Data[ 50925 ];

	ASanctumWeaponBuildGun_execserverSetAbleToSell_Parms serverSetAbleToSell_Parms;
	serverSetAbleToSell_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnserverSetAbleToSell, &serverSetAbleToSell_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.serverSetAbleToBuild
// [0x002200C2] 
// Parameters infos:
// unsigned long                  NewValue                       ( CPF_Parm )

void ASanctumWeaponBuildGun::serverSetAbleToBuild ( unsigned long NewValue )
{
	static UFunction* pFnserverSetAbleToBuild = NULL;

	if ( ! pFnserverSetAbleToBuild )
		pFnserverSetAbleToBuild = (UFunction*) UObject::GObjObjects()->Data[ 50923 ];

	ASanctumWeaponBuildGun_execserverSetAbleToBuild_Parms serverSetAbleToBuild_Parms;
	serverSetAbleToBuild_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnserverSetAbleToBuild, &serverSetAbleToBuild_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.canUpgradeOnBase
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )
// int                            Rubel                          ( CPF_Parm )

unsigned char ASanctumWeaponBuildGun::canUpgradeOnBase ( class ASanctumTowerBase* TowerBase, int Rubel )
{
	static UFunction* pFncanUpgradeOnBase = NULL;

	if ( ! pFncanUpgradeOnBase )
		pFncanUpgradeOnBase = (UFunction*) UObject::GObjObjects()->Data[ 50906 ];

	ASanctumWeaponBuildGun_execcanUpgradeOnBase_Parms canUpgradeOnBase_Parms;
	canUpgradeOnBase_Parms.TowerBase = TowerBase;
	canUpgradeOnBase_Parms.Rubel = Rubel;

	this->ProcessEvent ( pFncanUpgradeOnBase, &canUpgradeOnBase_Parms, NULL );

	return canUpgradeOnBase_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponBuildGun.getCurrentWeaponCost
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumWeaponBuildGun::getCurrentWeaponCost ( )
{
	static UFunction* pFngetCurrentWeaponCost = NULL;

	if ( ! pFngetCurrentWeaponCost )
		pFngetCurrentWeaponCost = (UFunction*) UObject::GObjObjects()->Data[ 50917 ];

	ASanctumWeaponBuildGun_execgetCurrentWeaponCost_Parms getCurrentWeaponCost_Parms;

	this->ProcessEvent ( pFngetCurrentWeaponCost, &getCurrentWeaponCost_Parms, NULL );

	return getCurrentWeaponCost_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponBuildGun.canUpgradeWeapon
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Rubel                          ( CPF_Parm )

unsigned char ASanctumWeaponBuildGun::canUpgradeWeapon ( int Rubel )
{
	static UFunction* pFncanUpgradeWeapon = NULL;

	if ( ! pFncanUpgradeWeapon )
		pFncanUpgradeWeapon = (UFunction*) UObject::GObjObjects()->Data[ 50914 ];

	ASanctumWeaponBuildGun_execcanUpgradeWeapon_Parms canUpgradeWeapon_Parms;
	canUpgradeWeapon_Parms.Rubel = Rubel;

	this->ProcessEvent ( pFncanUpgradeWeapon, &canUpgradeWeapon_Parms, NULL );

	return canUpgradeWeapon_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponBuildGun.canSellOnBase
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )

bool ASanctumWeaponBuildGun::canSellOnBase ( class ASanctumTowerBase* TowerBase )
{
	static UFunction* pFncanSellOnBase = NULL;

	if ( ! pFncanSellOnBase )
		pFncanSellOnBase = (UFunction*) UObject::GObjObjects()->Data[ 50910 ];

	ASanctumWeaponBuildGun_execcanSellOnBase_Parms canSellOnBase_Parms;
	canSellOnBase_Parms.TowerBase = TowerBase;

	this->ProcessEvent ( pFncanSellOnBase, &canSellOnBase_Parms, NULL );

	return canSellOnBase_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponBuildGun.CheckTowerCollision
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponBuildGun::CheckTowerCollision ( )
{
	static UFunction* pFnCheckTowerCollision = NULL;

	if ( ! pFnCheckTowerCollision )
		pFnCheckTowerCollision = (UFunction*) UObject::GObjObjects()->Data[ 50893 ];

	ASanctumWeaponBuildGun_execCheckTowerCollision_Parms CheckTowerCollision_Parms;

	this->ProcessEvent ( pFnCheckTowerCollision, &CheckTowerCollision_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.getTowerBaseAttachment
// [0x00020102] 
// Parameters infos:
// class ASanctumTowerBaseAttachment* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Actor                          ( CPF_Parm )

class ASanctumTowerBaseAttachment* ASanctumWeaponBuildGun::getTowerBaseAttachment ( class AActor* Actor )
{
	static UFunction* pFngetTowerBaseAttachment = NULL;

	if ( ! pFngetTowerBaseAttachment )
		pFngetTowerBaseAttachment = (UFunction*) UObject::GObjObjects()->Data[ 50890 ];

	ASanctumWeaponBuildGun_execgetTowerBaseAttachment_Parms getTowerBaseAttachment_Parms;
	getTowerBaseAttachment_Parms.Actor = Actor;

	this->ProcessEvent ( pFngetTowerBaseAttachment, &getTowerBaseAttachment_Parms, NULL );

	return getTowerBaseAttachment_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponBuildGun.hideGroundRange
// [0x010201C2] 
// Parameters infos:

void ASanctumWeaponBuildGun::hideGroundRange ( )
{
	static UFunction* pFnhideGroundRange = NULL;

	if ( ! pFnhideGroundRange )
		pFnhideGroundRange = (UFunction*) UObject::GObjObjects()->Data[ 50889 ];

	ASanctumWeaponBuildGun_exechideGroundRange_Parms hideGroundRange_Parms;

	this->ProcessEvent ( pFnhideGroundRange, &hideGroundRange_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.HideHologram
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponBuildGun::HideHologram ( )
{
	static UFunction* pFnHideHologram = NULL;

	if ( ! pFnHideHologram )
		pFnHideHologram = (UFunction*) UObject::GObjObjects()->Data[ 50888 ];

	ASanctumWeaponBuildGun_execHideHologram_Parms HideHologram_Parms;

	this->ProcessEvent ( pFnHideHologram, &HideHologram_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.showHologram
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponBuildGun::showHologram ( )
{
	static UFunction* pFnshowHologram = NULL;

	if ( ! pFnshowHologram )
		pFnshowHologram = (UFunction*) UObject::GObjObjects()->Data[ 50887 ];

	ASanctumWeaponBuildGun_execshowHologram_Parms showHologram_Parms;

	this->ProcessEvent ( pFnshowHologram, &showHologram_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.getHologramFromTower
// [0x00020102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  Tower                          ( CPF_Parm )

class UClass* ASanctumWeaponBuildGun::getHologramFromTower ( class UClass* Tower )
{
	static UFunction* pFngetHologramFromTower = NULL;

	if ( ! pFngetHologramFromTower )
		pFngetHologramFromTower = (UFunction*) UObject::GObjObjects()->Data[ 50882 ];

	ASanctumWeaponBuildGun_execgetHologramFromTower_Parms getHologramFromTower_Parms;
	getHologramFromTower_Parms.Tower = Tower;

	this->ProcessEvent ( pFngetHologramFromTower, &getHologramFromTower_Parms, NULL );

	return getHologramFromTower_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponBuildGun.spawnNewHologram
// [0x00020002] 
// Parameters infos:
// class UClass*                  towerClass                     ( CPF_Parm )

void ASanctumWeaponBuildGun::spawnNewHologram ( class UClass* towerClass )
{
	static UFunction* pFnspawnNewHologram = NULL;

	if ( ! pFnspawnNewHologram )
		pFnspawnNewHologram = (UFunction*) UObject::GObjObjects()->Data[ 50877 ];

	ASanctumWeaponBuildGun_execspawnNewHologram_Parms spawnNewHologram_Parms;
	spawnNewHologram_Parms.towerClass = towerClass;

	this->ProcessEvent ( pFnspawnNewHologram, &spawnNewHologram_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.setTowerChoice
// [0x00020102] 
// Parameters infos:
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )

void ASanctumWeaponBuildGun::setTowerChoice ( class ASanctumTowerBase* TowerBase )
{
	static UFunction* pFnsetTowerChoice = NULL;

	if ( ! pFnsetTowerChoice )
		pFnsetTowerChoice = (UFunction*) UObject::GObjObjects()->Data[ 50869 ];

	ASanctumWeaponBuildGun_execsetTowerChoice_Parms setTowerChoice_Parms;
	setTowerChoice_Parms.TowerBase = TowerBase;

	this->ProcessEvent ( pFnsetTowerChoice, &setTowerChoice_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.changedPotentialTower
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponBuildGun::changedPotentialTower ( )
{
	static UFunction* pFnchangedPotentialTower = NULL;

	if ( ! pFnchangedPotentialTower )
		pFnchangedPotentialTower = (UFunction*) UObject::GObjObjects()->Data[ 50867 ];

	ASanctumWeaponBuildGun_execchangedPotentialTower_Parms changedPotentialTower_Parms;

	this->ProcessEvent ( pFnchangedPotentialTower, &changedPotentialTower_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.showRange
// [0x00020102] 
// Parameters infos:
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )
// class ASanctumTowerHologram*   hologram                       ( CPF_Parm )

void ASanctumWeaponBuildGun::showRange ( class ASanctumTowerBase* TowerBase, class ASanctumTowerHologram* hologram )
{
	static UFunction* pFnshowRange = NULL;

	if ( ! pFnshowRange )
		pFnshowRange = (UFunction*) UObject::GObjObjects()->Data[ 50857 ];

	ASanctumWeaponBuildGun_execshowRange_Parms showRange_Parms;
	showRange_Parms.TowerBase = TowerBase;
	showRange_Parms.hologram = hologram;

	this->ProcessEvent ( pFnshowRange, &showRange_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.setTowerBase
// [0x00020102] 
// Parameters infos:
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )

void ASanctumWeaponBuildGun::setTowerBase ( class ASanctumTowerBase* TowerBase )
{
	static UFunction* pFnsetTowerBase = NULL;

	if ( ! pFnsetTowerBase )
		pFnsetTowerBase = (UFunction*) UObject::GObjObjects()->Data[ 50852 ];

	ASanctumWeaponBuildGun_execsetTowerBase_Parms setTowerBase_Parms;
	setTowerBase_Parms.TowerBase = TowerBase;

	this->ProcessEvent ( pFnsetTowerBase, &setTowerBase_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.weaponHologramClassChanged
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponBuildGun::weaponHologramClassChanged ( )
{
	static UFunction* pFnweaponHologramClassChanged = NULL;

	if ( ! pFnweaponHologramClassChanged )
		pFnweaponHologramClassChanged = (UFunction*) UObject::GObjObjects()->Data[ 50851 ];

	ASanctumWeaponBuildGun_execweaponHologramClassChanged_Parms weaponHologramClassChanged_Parms;

	this->ProcessEvent ( pFnweaponHologramClassChanged, &weaponHologramClassChanged_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.PlayHologramEquip
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponBuildGun::PlayHologramEquip ( )
{
	static UFunction* pFnPlayHologramEquip = NULL;

	if ( ! pFnPlayHologramEquip )
		pFnPlayHologramEquip = (UFunction*) UObject::GObjObjects()->Data[ 50850 ];

	ASanctumWeaponBuildGun_execPlayHologramEquip_Parms PlayHologramEquip_Parms;

	this->ProcessEvent ( pFnPlayHologramEquip, &PlayHologramEquip_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.AnimateWeaponStore
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumWeaponBuildGun::AnimateWeaponStore ( )
{
	static UFunction* pFnAnimateWeaponStore = NULL;

	if ( ! pFnAnimateWeaponStore )
		pFnAnimateWeaponStore = (UFunction*) UObject::GObjObjects()->Data[ 50847 ];

	ASanctumWeaponBuildGun_execAnimateWeaponStore_Parms AnimateWeaponStore_Parms;

	this->ProcessEvent ( pFnAnimateWeaponStore, &AnimateWeaponStore_Parms, NULL );

	return AnimateWeaponStore_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponBuildGun.ShouldWeAnimateWeaponStore
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponBuildGun::ShouldWeAnimateWeaponStore ( )
{
	static UFunction* pFnShouldWeAnimateWeaponStore = NULL;

	if ( ! pFnShouldWeAnimateWeaponStore )
		pFnShouldWeAnimateWeaponStore = (UFunction*) UObject::GObjObjects()->Data[ 50845 ];

	ASanctumWeaponBuildGun_execShouldWeAnimateWeaponStore_Parms ShouldWeAnimateWeaponStore_Parms;

	this->ProcessEvent ( pFnShouldWeAnimateWeaponStore, &ShouldWeAnimateWeaponStore_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.setWeapon
// [0x002200C2] 
// Parameters infos:
// class ASanctumWeapon*          Weapon                         ( CPF_Parm )
// int                            Level                          ( CPF_Parm )

void ASanctumWeaponBuildGun::setWeapon ( class ASanctumWeapon* Weapon, int Level )
{
	static UFunction* pFnsetWeapon = NULL;

	if ( ! pFnsetWeapon )
		pFnsetWeapon = (UFunction*) UObject::GObjObjects()->Data[ 50842 ];

	ASanctumWeaponBuildGun_execsetWeapon_Parms setWeapon_Parms;
	setWeapon_Parms.Weapon = Weapon;
	setWeapon_Parms.Level = Level;

	this->ProcessEvent ( pFnsetWeapon, &setWeapon_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.SetPosition
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AUDKPawn*                Holder                         ( CPF_Parm )

void ASanctumWeaponBuildGun::eventSetPosition ( class AUDKPawn* Holder )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = (UFunction*) UObject::GObjObjects()->Data[ 50840 ];

	ASanctumWeaponBuildGun_eventSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.Holder = Holder;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.setTowerHologram
// [0x002200C2] 
// Parameters infos:
// class UClass*                  theHologram                    ( CPF_Parm )

void ASanctumWeaponBuildGun::setTowerHologram ( class UClass* theHologram )
{
	static UFunction* pFnsetTowerHologram = NULL;

	if ( ! pFnsetTowerHologram )
		pFnsetTowerHologram = (UFunction*) UObject::GObjObjects()->Data[ 50838 ];

	ASanctumWeaponBuildGun_execsetTowerHologram_Parms setTowerHologram_Parms;
	setTowerHologram_Parms.theHologram = theHologram;

	this->ProcessEvent ( pFnsetTowerHologram, &setTowerHologram_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.TraceForBase
// [0x00820102] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ASanctumWeaponBuildGun::TraceForBase ( )
{
	static UFunction* pFnTraceForBase = NULL;

	if ( ! pFnTraceForBase )
		pFnTraceForBase = (UFunction*) UObject::GObjObjects()->Data[ 50830 ];

	ASanctumWeaponBuildGun_execTraceForBase_Parms TraceForBase_Parms;

	this->ProcessEvent ( pFnTraceForBase, &TraceForBase_Parms, NULL );

	return TraceForBase_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponBuildGun.NotifyKismetAimedAtTower
// [0x00020102] 
// Parameters infos:
// class UClass*                  towerClass                     ( CPF_Parm )

void ASanctumWeaponBuildGun::NotifyKismetAimedAtTower ( class UClass* towerClass )
{
	static UFunction* pFnNotifyKismetAimedAtTower = NULL;

	if ( ! pFnNotifyKismetAimedAtTower )
		pFnNotifyKismetAimedAtTower = (UFunction*) UObject::GObjObjects()->Data[ 50823 ];

	ASanctumWeaponBuildGun_execNotifyKismetAimedAtTower_Parms NotifyKismetAimedAtTower_Parms;
	NotifyKismetAimedAtTower_Parms.towerClass = towerClass;

	this->ProcessEvent ( pFnNotifyKismetAimedAtTower, &NotifyKismetAimedAtTower_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.NotifyKismetUpgradedTower
// [0x00020102] 
// Parameters infos:
// class UClass*                  towerClass                     ( CPF_Parm )

void ASanctumWeaponBuildGun::NotifyKismetUpgradedTower ( class UClass* towerClass )
{
	static UFunction* pFnNotifyKismetUpgradedTower = NULL;

	if ( ! pFnNotifyKismetUpgradedTower )
		pFnNotifyKismetUpgradedTower = (UFunction*) UObject::GObjObjects()->Data[ 50816 ];

	ASanctumWeaponBuildGun_execNotifyKismetUpgradedTower_Parms NotifyKismetUpgradedTower_Parms;
	NotifyKismetUpgradedTower_Parms.towerClass = towerClass;

	this->ProcessEvent ( pFnNotifyKismetUpgradedTower, &NotifyKismetUpgradedTower_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.NotifyKismetSelectedTower
// [0x00020102] 
// Parameters infos:
// class UClass*                  HologramClass                  ( CPF_Parm )

void ASanctumWeaponBuildGun::NotifyKismetSelectedTower ( class UClass* HologramClass )
{
	static UFunction* pFnNotifyKismetSelectedTower = NULL;

	if ( ! pFnNotifyKismetSelectedTower )
		pFnNotifyKismetSelectedTower = (UFunction*) UObject::GObjObjects()->Data[ 50809 ];

	ASanctumWeaponBuildGun_execNotifyKismetSelectedTower_Parms NotifyKismetSelectedTower_Parms;
	NotifyKismetSelectedTower_Parms.HologramClass = HologramClass;

	this->ProcessEvent ( pFnNotifyKismetSelectedTower, &NotifyKismetSelectedTower_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.NotifyKismetUpgradedWeapon
// [0x00020102] 
// Parameters infos:
// class UClass*                  WeaponClass                    ( CPF_Parm )

void ASanctumWeaponBuildGun::NotifyKismetUpgradedWeapon ( class UClass* WeaponClass )
{
	static UFunction* pFnNotifyKismetUpgradedWeapon = NULL;

	if ( ! pFnNotifyKismetUpgradedWeapon )
		pFnNotifyKismetUpgradedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 50802 ];

	ASanctumWeaponBuildGun_execNotifyKismetUpgradedWeapon_Parms NotifyKismetUpgradedWeapon_Parms;
	NotifyKismetUpgradedWeapon_Parms.WeaponClass = WeaponClass;

	this->ProcessEvent ( pFnNotifyKismetUpgradedWeapon, &NotifyKismetUpgradedWeapon_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.NotifyKismetEnterWeaponStore
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponBuildGun::NotifyKismetEnterWeaponStore ( )
{
	static UFunction* pFnNotifyKismetEnterWeaponStore = NULL;

	if ( ! pFnNotifyKismetEnterWeaponStore )
		pFnNotifyKismetEnterWeaponStore = (UFunction*) UObject::GObjObjects()->Data[ 50797 ];

	ASanctumWeaponBuildGun_execNotifyKismetEnterWeaponStore_Parms NotifyKismetEnterWeaponStore_Parms;

	this->ProcessEvent ( pFnNotifyKismetEnterWeaponStore, &NotifyKismetEnterWeaponStore_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.NotifyKismetSoldTower
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponBuildGun::NotifyKismetSoldTower ( )
{
	static UFunction* pFnNotifyKismetSoldTower = NULL;

	if ( ! pFnNotifyKismetSoldTower )
		pFnNotifyKismetSoldTower = (UFunction*) UObject::GObjObjects()->Data[ 50792 ];

	ASanctumWeaponBuildGun_execNotifyKismetSoldTower_Parms NotifyKismetSoldTower_Parms;

	this->ProcessEvent ( pFnNotifyKismetSoldTower, &NotifyKismetSoldTower_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.NotifyKismetBuiltTower
// [0x00020102] 
// Parameters infos:
// class UClass*                  towerClass                     ( CPF_Parm )

void ASanctumWeaponBuildGun::NotifyKismetBuiltTower ( class UClass* towerClass )
{
	static UFunction* pFnNotifyKismetBuiltTower = NULL;

	if ( ! pFnNotifyKismetBuiltTower )
		pFnNotifyKismetBuiltTower = (UFunction*) UObject::GObjObjects()->Data[ 50785 ];

	ASanctumWeaponBuildGun_execNotifyKismetBuiltTower_Parms NotifyKismetBuiltTower_Parms;
	NotifyKismetBuiltTower_Parms.towerClass = towerClass;

	this->ProcessEvent ( pFnNotifyKismetBuiltTower, &NotifyKismetBuiltTower_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.ClientRegisterActionListeners
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponBuildGun::ClientRegisterActionListeners ( )
{
	static UFunction* pFnClientRegisterActionListeners = NULL;

	if ( ! pFnClientRegisterActionListeners )
		pFnClientRegisterActionListeners = (UFunction*) UObject::GObjObjects()->Data[ 50783 ];

	ASanctumWeaponBuildGun_execClientRegisterActionListeners_Parms ClientRegisterActionListeners_Parms;

	this->ProcessEvent ( pFnClientRegisterActionListeners, &ClientRegisterActionListeners_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.notifyNewHud
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class ASanctumHUD*             HUD                            ( CPF_Parm )

void ASanctumWeaponBuildGun::eventnotifyNewHud ( class ASanctumHUD* HUD )
{
	static UFunction* pFnnotifyNewHud = NULL;

	if ( ! pFnnotifyNewHud )
		pFnnotifyNewHud = (UFunction*) UObject::GObjObjects()->Data[ 50781 ];

	ASanctumWeaponBuildGun_eventnotifyNewHud_Parms notifyNewHud_Parms;
	notifyNewHud_Parms.HUD = HUD;

	this->ProcessEvent ( pFnnotifyNewHud, &notifyNewHud_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.cashChanged
// [0x00020102] 
// Parameters infos:
// int                            newCash                        ( CPF_Parm )

void ASanctumWeaponBuildGun::cashChanged ( int newCash )
{
	static UFunction* pFncashChanged = NULL;

	if ( ! pFncashChanged )
		pFncashChanged = (UFunction*) UObject::GObjObjects()->Data[ 50779 ];

	ASanctumWeaponBuildGun_execcashChanged_Parms cashChanged_Parms;
	cashChanged_Parms.newCash = newCash;

	this->ProcessEvent ( pFncashChanged, &cashChanged_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.AttachAudioComponent
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponBuildGun::AttachAudioComponent ( )
{
	static UFunction* pFnAttachAudioComponent = NULL;

	if ( ! pFnAttachAudioComponent )
		pFnAttachAudioComponent = (UFunction*) UObject::GObjObjects()->Data[ 50778 ];

	ASanctumWeaponBuildGun_execAttachAudioComponent_Parms AttachAudioComponent_Parms;

	this->ProcessEvent ( pFnAttachAudioComponent, &AttachAudioComponent_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.UpgradeTo
// [0x00020100] 
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void ASanctumWeaponBuildGun::UpgradeTo ( int Level )
{
	static UFunction* pFnUpgradeTo = NULL;

	if ( ! pFnUpgradeTo )
		pFnUpgradeTo = (UFunction*) UObject::GObjObjects()->Data[ 50776 ];

	ASanctumWeaponBuildGun_execUpgradeTo_Parms UpgradeTo_Parms;
	UpgradeTo_Parms.Level = Level;

	this->ProcessEvent ( pFnUpgradeTo, &UpgradeTo_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.Destroyed
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponBuildGun::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 50774 ];

	ASanctumWeaponBuildGun_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.PostBeginPlay
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeaponBuildGun::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 50770 ];

	ASanctumWeaponBuildGun_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.updatedPRI
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponBuildGun::updatedPRI ( )
{
	static UFunction* pFnupdatedPRI = NULL;

	if ( ! pFnupdatedPRI )
		pFnupdatedPRI = (UFunction*) UObject::GObjObjects()->Data[ 50768 ];

	ASanctumWeaponBuildGun_execupdatedPRI_Parms updatedPRI_Parms;

	this->ProcessEvent ( pFnupdatedPRI, &updatedPRI_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumWeaponBuildGun::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 50766 ];

	ASanctumWeaponBuildGun_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.AimedAtTower
// [0x00120000] 
// Parameters infos:
// class ASanctumTowerBaseAttachment* attachmentInstance             ( CPF_Parm )

void ASanctumWeaponBuildGun::AimedAtTower ( class ASanctumTowerBaseAttachment* attachmentInstance )
{
	static UFunction* pFnAimedAtTower = NULL;

	if ( ! pFnAimedAtTower )
		pFnAimedAtTower = (UFunction*) UObject::GObjObjects()->Data[ 50700 ];

	ASanctumWeaponBuildGun_execAimedAtTower_Parms AimedAtTower_Parms;
	AimedAtTower_Parms.attachmentInstance = attachmentInstance;

	this->ProcessEvent ( pFnAimedAtTower, &AimedAtTower_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.CurrentTowerChangedInstance
// [0x00120000] 
// Parameters infos:
// class UClass*                  towerClass                     ( CPF_Parm )
// int                            towerLevel                     ( CPF_Parm )
// class ASanctumTowerBaseAttachment* attachmentInstance             ( CPF_Parm )

void ASanctumWeaponBuildGun::CurrentTowerChangedInstance ( class UClass* towerClass, int towerLevel, class ASanctumTowerBaseAttachment* attachmentInstance )
{
	static UFunction* pFnCurrentTowerChangedInstance = NULL;

	if ( ! pFnCurrentTowerChangedInstance )
		pFnCurrentTowerChangedInstance = (UFunction*) UObject::GObjObjects()->Data[ 50674 ];

	ASanctumWeaponBuildGun_execCurrentTowerChangedInstance_Parms CurrentTowerChangedInstance_Parms;
	CurrentTowerChangedInstance_Parms.towerClass = towerClass;
	CurrentTowerChangedInstance_Parms.towerLevel = towerLevel;
	CurrentTowerChangedInstance_Parms.attachmentInstance = attachmentInstance;

	this->ProcessEvent ( pFnCurrentTowerChangedInstance, &CurrentTowerChangedInstance_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.CurrentTowerChanged
// [0x00120000] 
// Parameters infos:
// class UClass*                  towerClass                     ( CPF_Parm )
// int                            towerLevel                     ( CPF_Parm )

void ASanctumWeaponBuildGun::CurrentTowerChanged ( class UClass* towerClass, int towerLevel )
{
	static UFunction* pFnCurrentTowerChanged = NULL;

	if ( ! pFnCurrentTowerChanged )
		pFnCurrentTowerChanged = (UFunction*) UObject::GObjObjects()->Data[ 50677 ];

	ASanctumWeaponBuildGun_execCurrentTowerChanged_Parms CurrentTowerChanged_Parms;
	CurrentTowerChanged_Parms.towerClass = towerClass;
	CurrentTowerChanged_Parms.towerLevel = towerLevel;

	this->ProcessEvent ( pFnCurrentTowerChanged, &CurrentTowerChanged_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.WeaponUpgradeListener
// [0x00120000] 
// Parameters infos:
// unsigned char                  Action                         ( CPF_Parm )
// int                            Cost                           ( CPF_Parm )

void ASanctumWeaponBuildGun::WeaponUpgradeListener ( unsigned char Action, int Cost )
{
	static UFunction* pFnWeaponUpgradeListener = NULL;

	if ( ! pFnWeaponUpgradeListener )
		pFnWeaponUpgradeListener = (UFunction*) UObject::GObjObjects()->Data[ 50686 ];

	ASanctumWeaponBuildGun_execWeaponUpgradeListener_Parms WeaponUpgradeListener_Parms;
	WeaponUpgradeListener_Parms.Action = Action;
	WeaponUpgradeListener_Parms.Cost = Cost;

	this->ProcessEvent ( pFnWeaponUpgradeListener, &WeaponUpgradeListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.RightClickListener
// [0x00120000] 
// Parameters infos:
// unsigned char                  Action                         ( CPF_Parm )

void ASanctumWeaponBuildGun::RightClickListener ( unsigned char Action )
{
	static UFunction* pFnRightClickListener = NULL;

	if ( ! pFnRightClickListener )
		pFnRightClickListener = (UFunction*) UObject::GObjObjects()->Data[ 50683 ];

	ASanctumWeaponBuildGun_execRightClickListener_Parms RightClickListener_Parms;
	RightClickListener_Parms.Action = Action;

	this->ProcessEvent ( pFnRightClickListener, &RightClickListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.LeftClickListener
// [0x00120000] 
// Parameters infos:
// unsigned char                  Action                         ( CPF_Parm )

void ASanctumWeaponBuildGun::LeftClickListener ( unsigned char Action )
{
	static UFunction* pFnLeftClickListener = NULL;

	if ( ! pFnLeftClickListener )
		pFnLeftClickListener = (UFunction*) UObject::GObjObjects()->Data[ 50680 ];

	ASanctumWeaponBuildGun_execLeftClickListener_Parms LeftClickListener_Parms;
	LeftClickListener_Parms.Action = Action;

	this->ProcessEvent ( pFnLeftClickListener, &LeftClickListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.VoidChanged
// [0x00120000] 
// Parameters infos:

void ASanctumWeaponBuildGun::VoidChanged ( )
{
	static UFunction* pFnVoidChanged = NULL;

	if ( ! pFnVoidChanged )
		pFnVoidChanged = (UFunction*) UObject::GObjObjects()->Data[ 50689 ];

	ASanctumWeaponBuildGun_execVoidChanged_Parms VoidChanged_Parms;

	this->ProcessEvent ( pFnVoidChanged, &VoidChanged_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.FloatChanged
// [0x00120000] 
// Parameters infos:
// float                          Variable                       ( CPF_Parm )
// unsigned char                  click                          ( CPF_Parm )

void ASanctumWeaponBuildGun::FloatChanged ( float Variable, unsigned char click )
{
	static UFunction* pFnFloatChanged = NULL;

	if ( ! pFnFloatChanged )
		pFnFloatChanged = (UFunction*) UObject::GObjObjects()->Data[ 50671 ];

	ASanctumWeaponBuildGun_execFloatChanged_Parms FloatChanged_Parms;
	FloatChanged_Parms.Variable = Variable;
	FloatChanged_Parms.click = click;

	this->ProcessEvent ( pFnFloatChanged, &FloatChanged_Parms, NULL );
};

// Function Sanctum.SanctumWeaponBuildGun.IntChanged
// [0x00120000] 
// Parameters infos:
// int                            Variable                       ( CPF_Parm )

void ASanctumWeaponBuildGun::IntChanged ( int Variable )
{
	static UFunction* pFnIntChanged = NULL;

	if ( ! pFnIntChanged )
		pFnIntChanged = (UFunction*) UObject::GObjObjects()->Data[ 50662 ];

	ASanctumWeaponBuildGun_execIntChanged_Parms IntChanged_Parms;
	IntChanged_Parms.Variable = Variable;

	this->ProcessEvent ( pFnIntChanged, &IntChanged_Parms, NULL );
};

// Function Sanctum.SanctumWeaponMarker.ChooseOverheatAnims
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponMarker::ChooseOverheatAnims ( )
{
	static UFunction* pFnChooseOverheatAnims = NULL;

	if ( ! pFnChooseOverheatAnims )
		pFnChooseOverheatAnims = (UFunction*) UObject::GObjObjects()->Data[ 49894 ];

	ASanctumWeaponMarker_execChooseOverheatAnims_Parms ChooseOverheatAnims_Parms;

	this->ProcessEvent ( pFnChooseOverheatAnims, &ChooseOverheatAnims_Parms, NULL );
};

// Function Sanctum.SanctumWeaponMarker.GetStats
// [0x00422102] 
// Parameters infos:
// class ASanctumWeapon*          Wpn                            ( CPF_Parm )
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         weaponInfo                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumWeaponMarker::GetStats ( class ASanctumWeapon* Wpn, int lvl, struct FStatInfoStruct* weaponInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 49882 ];

	ASanctumWeaponMarker_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.Wpn = Wpn;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( weaponInfo )
		memcpy ( weaponInfo, &GetStats_Parms.weaponInfo, 0xAC );
};

// Function Sanctum.SanctumWeaponMarker.GetSecondaryProjectileArchetype
// [0x00020002] 
// Parameters infos:
// class ASanctumProjectile*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASanctumProjectile* ASanctumWeaponMarker::GetSecondaryProjectileArchetype ( )
{
	static UFunction* pFnGetSecondaryProjectileArchetype = NULL;

	if ( ! pFnGetSecondaryProjectileArchetype )
		pFnGetSecondaryProjectileArchetype = (UFunction*) UObject::GObjObjects()->Data[ 49880 ];

	ASanctumWeaponMarker_execGetSecondaryProjectileArchetype_Parms GetSecondaryProjectileArchetype_Parms;

	this->ProcessEvent ( pFnGetSecondaryProjectileArchetype, &GetSecondaryProjectileArchetype_Parms, NULL );

	return GetSecondaryProjectileArchetype_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponMarker.GetProjectileArchetype
// [0x00020002] 
// Parameters infos:
// class ASanctumProjectile*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASanctumProjectile* ASanctumWeaponMarker::GetProjectileArchetype ( )
{
	static UFunction* pFnGetProjectileArchetype = NULL;

	if ( ! pFnGetProjectileArchetype )
		pFnGetProjectileArchetype = (UFunction*) UObject::GObjObjects()->Data[ 49878 ];

	ASanctumWeaponMarker_execGetProjectileArchetype_Parms GetProjectileArchetype_Parms;

	this->ProcessEvent ( pFnGetProjectileArchetype, &GetProjectileArchetype_Parms, NULL );

	return GetProjectileArchetype_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponMarker.SetOverheat
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponMarker::SetOverheat ( )
{
	static UFunction* pFnSetOverheat = NULL;

	if ( ! pFnSetOverheat )
		pFnSetOverheat = (UFunction*) UObject::GObjObjects()->Data[ 49877 ];

	ASanctumWeaponMarker_execSetOverheat_Parms SetOverheat_Parms;

	this->ProcessEvent ( pFnSetOverheat, &SetOverheat_Parms, NULL );
};

// Function Sanctum.SanctumWeaponMarker.CalculateTotalOverheatTime
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponMarker::CalculateTotalOverheatTime ( )
{
	static UFunction* pFnCalculateTotalOverheatTime = NULL;

	if ( ! pFnCalculateTotalOverheatTime )
		pFnCalculateTotalOverheatTime = (UFunction*) UObject::GObjObjects()->Data[ 49875 ];

	ASanctumWeaponMarker_execCalculateTotalOverheatTime_Parms CalculateTotalOverheatTime_Parms;

	this->ProcessEvent ( pFnCalculateTotalOverheatTime, &CalculateTotalOverheatTime_Parms, NULL );
};

// Function Sanctum.SanctumWeaponMarker.ChooseOverheatNode
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponMarker::ChooseOverheatNode ( )
{
	static UFunction* pFnChooseOverheatNode = NULL;

	if ( ! pFnChooseOverheatNode )
		pFnChooseOverheatNode = (UFunction*) UObject::GObjObjects()->Data[ 49873 ];

	ASanctumWeaponMarker_execChooseOverheatNode_Parms ChooseOverheatNode_Parms;

	this->ProcessEvent ( pFnChooseOverheatNode, &ChooseOverheatNode_Parms, NULL );
};

// Function Sanctum.SanctumWeaponMarker.OnWeaponAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeaponMarker::eventOnWeaponAnimEnd ( )
{
	static UFunction* pFnOnWeaponAnimEnd = NULL;

	if ( ! pFnOnWeaponAnimEnd )
		pFnOnWeaponAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 49872 ];

	ASanctumWeaponMarker_eventOnWeaponAnimEnd_Parms OnWeaponAnimEnd_Parms;

	this->ProcessEvent ( pFnOnWeaponAnimEnd, &OnWeaponAnimEnd_Parms, NULL );
};

// Function Sanctum.SanctumWeaponMarker.SetupAnimNodes
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponMarker::SetupAnimNodes ( )
{
	static UFunction* pFnSetupAnimNodes = NULL;

	if ( ! pFnSetupAnimNodes )
		pFnSetupAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 49870 ];

	ASanctumWeaponMarker_execSetupAnimNodes_Parms SetupAnimNodes_Parms;

	this->ProcessEvent ( pFnSetupAnimNodes, &SetupAnimNodes_Parms, NULL );
};

// Function Sanctum.SanctumWeaponMarker.CalculateOverheatTime
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponMarker::CalculateOverheatTime ( )
{
	static UFunction* pFnCalculateOverheatTime = NULL;

	if ( ! pFnCalculateOverheatTime )
		pFnCalculateOverheatTime = (UFunction*) UObject::GObjObjects()->Data[ 49869 ];

	ASanctumWeaponMarker_execCalculateOverheatTime_Parms CalculateOverheatTime_Parms;

	this->ProcessEvent ( pFnCalculateOverheatTime, &CalculateOverheatTime_Parms, NULL );
};

// Function Sanctum.SanctumWeaponMarker.notifyNewHud
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class ASanctumHUD*             HUD                            ( CPF_Parm )

void ASanctumWeaponMarker::eventnotifyNewHud ( class ASanctumHUD* HUD )
{
	static UFunction* pFnnotifyNewHud = NULL;

	if ( ! pFnnotifyNewHud )
		pFnnotifyNewHud = (UFunction*) UObject::GObjObjects()->Data[ 49867 ];

	ASanctumWeaponMarker_eventnotifyNewHud_Parms notifyNewHud_Parms;
	notifyNewHud_Parms.HUD = HUD;

	this->ProcessEvent ( pFnnotifyNewHud, &notifyNewHud_Parms, NULL );
};

// Function Sanctum.SanctumWeaponMarker.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeaponMarker::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 49866 ];

	ASanctumWeaponMarker_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.ShouldRefire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumWeaponOverheat::ShouldRefire ( )
{
	static UFunction* pFnShouldRefire = NULL;

	if ( ! pFnShouldRefire )
		pFnShouldRefire = (UFunction*) UObject::GObjObjects()->Data[ 49391 ];

	ASanctumWeaponOverheat_execShouldRefire_Parms ShouldRefire_Parms;

	this->ProcessEvent ( pFnShouldRefire, &ShouldRefire_Parms, NULL );

	return ShouldRefire_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponOverheat.OverheatStartAnimEnded
// [0x00020100] 
// Parameters infos:

void ASanctumWeaponOverheat::OverheatStartAnimEnded ( )
{
	static UFunction* pFnOverheatStartAnimEnded = NULL;

	if ( ! pFnOverheatStartAnimEnded )
		pFnOverheatStartAnimEnded = (UFunction*) UObject::GObjObjects()->Data[ 49390 ];

	ASanctumWeaponOverheat_execOverheatStartAnimEnded_Parms OverheatStartAnimEnded_Parms;

	this->ProcessEvent ( pFnOverheatStartAnimEnded, &OverheatStartAnimEnded_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.PlayOverheatIdleAnim
// [0x00020100] 
// Parameters infos:

void ASanctumWeaponOverheat::PlayOverheatIdleAnim ( )
{
	static UFunction* pFnPlayOverheatIdleAnim = NULL;

	if ( ! pFnPlayOverheatIdleAnim )
		pFnPlayOverheatIdleAnim = (UFunction*) UObject::GObjObjects()->Data[ 49389 ];

	ASanctumWeaponOverheat_execPlayOverheatIdleAnim_Parms PlayOverheatIdleAnim_Parms;

	this->ProcessEvent ( pFnPlayOverheatIdleAnim, &PlayOverheatIdleAnim_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.HasAnyAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumWeaponOverheat::HasAnyAmmo ( )
{
	static UFunction* pFnHasAnyAmmo = NULL;

	if ( ! pFnHasAnyAmmo )
		pFnHasAnyAmmo = (UFunction*) UObject::GObjObjects()->Data[ 49381 ];

	ASanctumWeaponOverheat_execHasAnyAmmo_Parms HasAnyAmmo_Parms;

	this->ProcessEvent ( pFnHasAnyAmmo, &HasAnyAmmo_Parms, NULL );

	return HasAnyAmmo_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponOverheat.HasAmmo
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// int                            Amount                         ( CPF_OptionalParm | CPF_Parm )

bool ASanctumWeaponOverheat::HasAmmo ( unsigned char FireModeNum, int Amount )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = (UFunction*) UObject::GObjObjects()->Data[ 49377 ];

	ASanctumWeaponOverheat_execHasAmmo_Parms HasAmmo_Parms;
	HasAmmo_Parms.FireModeNum = FireModeNum;
	HasAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );

	return HasAmmo_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponOverheat.CallAllOverheatFuncs
// [0x00020102] 
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumWeaponOverheat::CallAllOverheatFuncs ( float Delta )
{
	static UFunction* pFnCallAllOverheatFuncs = NULL;

	if ( ! pFnCallAllOverheatFuncs )
		pFnCallAllOverheatFuncs = (UFunction*) UObject::GObjObjects()->Data[ 49362 ];

	ASanctumWeaponOverheat_execCallAllOverheatFuncs_Parms CallAllOverheatFuncs_Parms;
	CallAllOverheatFuncs_Parms.Delta = Delta;

	this->ProcessEvent ( pFnCallAllOverheatFuncs, &CallAllOverheatFuncs_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumWeaponOverheat::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 49360 ];

	ASanctumWeaponOverheat_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.CalculateOverheat
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponOverheat::CalculateOverheat ( )
{
	static UFunction* pFnCalculateOverheat = NULL;

	if ( ! pFnCalculateOverheat )
		pFnCalculateOverheat = (UFunction*) UObject::GObjObjects()->Data[ 49359 ];

	ASanctumWeaponOverheat_execCalculateOverheat_Parms CalculateOverheat_Parms;

	this->ProcessEvent ( pFnCalculateOverheat, &CalculateOverheat_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.SetOverheatMaterial
// [0x00020102] 
// Parameters infos:
// struct FLinearColor            overheatColor                  ( CPF_Parm )

void ASanctumWeaponOverheat::SetOverheatMaterial ( struct FLinearColor overheatColor )
{
	static UFunction* pFnSetOverheatMaterial = NULL;

	if ( ! pFnSetOverheatMaterial )
		pFnSetOverheatMaterial = (UFunction*) UObject::GObjObjects()->Data[ 49356 ];

	ASanctumWeaponOverheat_execSetOverheatMaterial_Parms SetOverheatMaterial_Parms;
	memcpy ( &SetOverheatMaterial_Parms.overheatColor, &overheatColor, 0x10 );

	this->ProcessEvent ( pFnSetOverheatMaterial, &SetOverheatMaterial_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.SetOverheat
// [0x00820102] 
// Parameters infos:

void ASanctumWeaponOverheat::SetOverheat ( )
{
	static UFunction* pFnSetOverheat = NULL;

	if ( ! pFnSetOverheat )
		pFnSetOverheat = (UFunction*) UObject::GObjObjects()->Data[ 49354 ];

	ASanctumWeaponOverheat_execSetOverheat_Parms SetOverheat_Parms;

	this->ProcessEvent ( pFnSetOverheat, &SetOverheat_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.RegainAmmo
// [0x00020002] 
// Parameters infos:

void ASanctumWeaponOverheat::RegainAmmo ( )
{
	static UFunction* pFnRegainAmmo = NULL;

	if ( ! pFnRegainAmmo )
		pFnRegainAmmo = (UFunction*) UObject::GObjObjects()->Data[ 49353 ];

	ASanctumWeaponOverheat_execRegainAmmo_Parms RegainAmmo_Parms;

	this->ProcessEvent ( pFnRegainAmmo, &RegainAmmo_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.StartAmmoRegain
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponOverheat::StartAmmoRegain ( )
{
	static UFunction* pFnStartAmmoRegain = NULL;

	if ( ! pFnStartAmmoRegain )
		pFnStartAmmoRegain = (UFunction*) UObject::GObjObjects()->Data[ 49352 ];

	ASanctumWeaponOverheat_execStartAmmoRegain_Parms StartAmmoRegain_Parms;

	this->ProcessEvent ( pFnStartAmmoRegain, &StartAmmoRegain_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.CalculateOverheatTime
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponOverheat::CalculateOverheatTime ( )
{
	static UFunction* pFnCalculateOverheatTime = NULL;

	if ( ! pFnCalculateOverheatTime )
		pFnCalculateOverheatTime = (UFunction*) UObject::GObjObjects()->Data[ 49351 ];

	ASanctumWeaponOverheat_execCalculateOverheatTime_Parms CalculateOverheatTime_Parms;

	this->ProcessEvent ( pFnCalculateOverheatTime, &CalculateOverheatTime_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.ConsumeAmmo
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASanctumWeaponOverheat::ConsumeAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 49349 ];

	ASanctumWeaponOverheat_execConsumeAmmo_Parms ConsumeAmmo_Parms;
	ConsumeAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.WeaponEmpty
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponOverheat::WeaponEmpty ( )
{
	static UFunction* pFnWeaponEmpty = NULL;

	if ( ! pFnWeaponEmpty )
		pFnWeaponEmpty = (UFunction*) UObject::GObjObjects()->Data[ 49348 ];

	ASanctumWeaponOverheat_execWeaponEmpty_Parms WeaponEmpty_Parms;

	this->ProcessEvent ( pFnWeaponEmpty, &WeaponEmpty_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.ForceOverheat
// [0x00020100] 
// Parameters infos:

void ASanctumWeaponOverheat::ForceOverheat ( )
{
	static UFunction* pFnForceOverheat = NULL;

	if ( ! pFnForceOverheat )
		pFnForceOverheat = (UFunction*) UObject::GObjObjects()->Data[ 49347 ];

	ASanctumWeaponOverheat_execForceOverheat_Parms ForceOverheat_Parms;

	this->ProcessEvent ( pFnForceOverheat, &ForceOverheat_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.FireFinished
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponOverheat::FireFinished ( )
{
	static UFunction* pFnFireFinished = NULL;

	if ( ! pFnFireFinished )
		pFnFireFinished = (UFunction*) UObject::GObjObjects()->Data[ 49346 ];

	ASanctumWeaponOverheat_execFireFinished_Parms FireFinished_Parms;

	this->ProcessEvent ( pFnFireFinished, &FireFinished_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.FireAmmunition
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponOverheat::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = (UFunction*) UObject::GObjObjects()->Data[ 49345 ];

	ASanctumWeaponOverheat_execFireAmmunition_Parms FireAmmunition_Parms;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.NotifyCooldownListeners
// [0x00020102] 
// Parameters infos:
// float                          Percent                        ( CPF_Parm )

void ASanctumWeaponOverheat::NotifyCooldownListeners ( float Percent )
{
	static UFunction* pFnNotifyCooldownListeners = NULL;

	if ( ! pFnNotifyCooldownListeners )
		pFnNotifyCooldownListeners = (UFunction*) UObject::GObjObjects()->Data[ 49341 ];

	ASanctumWeaponOverheat_execNotifyCooldownListeners_Parms NotifyCooldownListeners_Parms;
	NotifyCooldownListeners_Parms.Percent = Percent;

	this->ProcessEvent ( pFnNotifyCooldownListeners, &NotifyCooldownListeners_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.ClearAllCooldownListeners
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponOverheat::ClearAllCooldownListeners ( )
{
	static UFunction* pFnClearAllCooldownListeners = NULL;

	if ( ! pFnClearAllCooldownListeners )
		pFnClearAllCooldownListeners = (UFunction*) UObject::GObjObjects()->Data[ 49339 ];

	ASanctumWeaponOverheat_execClearAllCooldownListeners_Parms ClearAllCooldownListeners_Parms;

	this->ProcessEvent ( pFnClearAllCooldownListeners, &ClearAllCooldownListeners_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.RemoveCooldownListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumWeaponOverheat::RemoveCooldownListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnRemoveCooldownListener = NULL;

	if ( ! pFnRemoveCooldownListener )
		pFnRemoveCooldownListener = (UFunction*) UObject::GObjObjects()->Data[ 49336 ];

	ASanctumWeaponOverheat_execRemoveCooldownListener_Parms RemoveCooldownListener_Parms;
	memcpy ( &RemoveCooldownListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnRemoveCooldownListener, &RemoveCooldownListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.AddCooldownListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumWeaponOverheat::AddCooldownListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnAddCooldownListener = NULL;

	if ( ! pFnAddCooldownListener )
		pFnAddCooldownListener = (UFunction*) UObject::GObjObjects()->Data[ 49333 ];

	ASanctumWeaponOverheat_execAddCooldownListener_Parms AddCooldownListener_Parms;
	memcpy ( &AddCooldownListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnAddCooldownListener, &AddCooldownListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.Overheat
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponOverheat::Overheat ( )
{
	static UFunction* pFnOverheat = NULL;

	if ( ! pFnOverheat )
		pFnOverheat = (UFunction*) UObject::GObjObjects()->Data[ 49332 ];

	ASanctumWeaponOverheat_execOverheat_Parms Overheat_Parms;

	this->ProcessEvent ( pFnOverheat, &Overheat_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.StopOverheatEffects
// [0x00020100] 
// Parameters infos:

void ASanctumWeaponOverheat::StopOverheatEffects ( )
{
	static UFunction* pFnStopOverheatEffects = NULL;

	if ( ! pFnStopOverheatEffects )
		pFnStopOverheatEffects = (UFunction*) UObject::GObjObjects()->Data[ 49331 ];

	ASanctumWeaponOverheat_execStopOverheatEffects_Parms StopOverheatEffects_Parms;

	this->ProcessEvent ( pFnStopOverheatEffects, &StopOverheatEffects_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.PlayOverheatEffects
// [0x00020100] 
// Parameters infos:

void ASanctumWeaponOverheat::PlayOverheatEffects ( )
{
	static UFunction* pFnPlayOverheatEffects = NULL;

	if ( ! pFnPlayOverheatEffects )
		pFnPlayOverheatEffects = (UFunction*) UObject::GObjObjects()->Data[ 49330 ];

	ASanctumWeaponOverheat_execPlayOverheatEffects_Parms PlayOverheatEffects_Parms;

	this->ProcessEvent ( pFnPlayOverheatEffects, &PlayOverheatEffects_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.notifyNewHud
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class ASanctumHUD*             HUD                            ( CPF_Parm )

void ASanctumWeaponOverheat::eventnotifyNewHud ( class ASanctumHUD* HUD )
{
	static UFunction* pFnnotifyNewHud = NULL;

	if ( ! pFnnotifyNewHud )
		pFnnotifyNewHud = (UFunction*) UObject::GObjObjects()->Data[ 49328 ];

	ASanctumWeaponOverheat_eventnotifyNewHud_Parms notifyNewHud_Parms;
	notifyNewHud_Parms.HUD = HUD;

	this->ProcessEvent ( pFnnotifyNewHud, &notifyNewHud_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.CalculateTotalOverheatTime
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponOverheat::CalculateTotalOverheatTime ( )
{
	static UFunction* pFnCalculateTotalOverheatTime = NULL;

	if ( ! pFnCalculateTotalOverheatTime )
		pFnCalculateTotalOverheatTime = (UFunction*) UObject::GObjObjects()->Data[ 49325 ];

	ASanctumWeaponOverheat_execCalculateTotalOverheatTime_Parms CalculateTotalOverheatTime_Parms;

	this->ProcessEvent ( pFnCalculateTotalOverheatTime, &CalculateTotalOverheatTime_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.UpgradeTo
// [0x00020102] 
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void ASanctumWeaponOverheat::UpgradeTo ( int Level )
{
	static UFunction* pFnUpgradeTo = NULL;

	if ( ! pFnUpgradeTo )
		pFnUpgradeTo = (UFunction*) UObject::GObjObjects()->Data[ 49323 ];

	ASanctumWeaponOverheat_execUpgradeTo_Parms UpgradeTo_Parms;
	UpgradeTo_Parms.Level = Level;

	this->ProcessEvent ( pFnUpgradeTo, &UpgradeTo_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.PlayCustomWeaponAnimByDuration
// [0x00024102] 
// Parameters infos:
// struct FName                   Sequence                       ( CPF_Parm )
// float                          desiredDuration                ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  loop                           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  override                       ( CPF_OptionalParm | CPF_Parm )

void ASanctumWeaponOverheat::PlayCustomWeaponAnimByDuration ( struct FName Sequence, float desiredDuration, float BlendInTime, float BlendOutTime, unsigned long loop, unsigned long override )
{
	static UFunction* pFnPlayCustomWeaponAnimByDuration = NULL;

	if ( ! pFnPlayCustomWeaponAnimByDuration )
		pFnPlayCustomWeaponAnimByDuration = (UFunction*) UObject::GObjObjects()->Data[ 49316 ];

	ASanctumWeaponOverheat_execPlayCustomWeaponAnimByDuration_Parms PlayCustomWeaponAnimByDuration_Parms;
	memcpy ( &PlayCustomWeaponAnimByDuration_Parms.Sequence, &Sequence, 0x8 );
	PlayCustomWeaponAnimByDuration_Parms.desiredDuration = desiredDuration;
	PlayCustomWeaponAnimByDuration_Parms.BlendInTime = BlendInTime;
	PlayCustomWeaponAnimByDuration_Parms.BlendOutTime = BlendOutTime;
	PlayCustomWeaponAnimByDuration_Parms.loop = loop;
	PlayCustomWeaponAnimByDuration_Parms.override = override;

	this->ProcessEvent ( pFnPlayCustomWeaponAnimByDuration, &PlayCustomWeaponAnimByDuration_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.OnWeaponAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeaponOverheat::eventOnWeaponAnimEnd ( )
{
	static UFunction* pFnOnWeaponAnimEnd = NULL;

	if ( ! pFnOnWeaponAnimEnd )
		pFnOnWeaponAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 49315 ];

	ASanctumWeaponOverheat_eventOnWeaponAnimEnd_Parms OnWeaponAnimEnd_Parms;

	this->ProcessEvent ( pFnOnWeaponAnimEnd, &OnWeaponAnimEnd_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.PlayWeaponAnimation
// [0x00024102] 
// Parameters infos:
// struct FName                   Sequence                       ( CPF_Parm )
// float                          fDesiredDuration               ( CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )

void ASanctumWeaponOverheat::PlayWeaponAnimation ( struct FName Sequence, float fDesiredDuration, unsigned long bLoop, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnPlayWeaponAnimation = NULL;

	if ( ! pFnPlayWeaponAnimation )
		pFnPlayWeaponAnimation = (UFunction*) UObject::GObjObjects()->Data[ 49310 ];

	ASanctumWeaponOverheat_execPlayWeaponAnimation_Parms PlayWeaponAnimation_Parms;
	memcpy ( &PlayWeaponAnimation_Parms.Sequence, &Sequence, 0x8 );
	PlayWeaponAnimation_Parms.fDesiredDuration = fDesiredDuration;
	PlayWeaponAnimation_Parms.bLoop = bLoop;
	PlayWeaponAnimation_Parms.SkelMesh = SkelMesh;

	this->ProcessEvent ( pFnPlayWeaponAnimation, &PlayWeaponAnimation_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeaponOverheat::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 49307 ];

	ASanctumWeaponOverheat_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeaponOverheat::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 49305 ];

	ASanctumWeaponOverheat_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.SetupAnimNodes
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponOverheat::SetupAnimNodes ( )
{
	static UFunction* pFnSetupAnimNodes = NULL;

	if ( ! pFnSetupAnimNodes )
		pFnSetupAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 49303 ];

	ASanctumWeaponOverheat_execSetupAnimNodes_Parms SetupAnimNodes_Parms;

	this->ProcessEvent ( pFnSetupAnimNodes, &SetupAnimNodes_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumWeaponOverheat::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 49301 ];

	ASanctumWeaponOverheat_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumWeaponOverheat.CooldownChanged
// [0x00120000] 
// Parameters infos:
// float                          cooldownPercent                ( CPF_Parm )

void ASanctumWeaponOverheat::CooldownChanged ( float cooldownPercent )
{
	static UFunction* pFnCooldownChanged = NULL;

	if ( ! pFnCooldownChanged )
		pFnCooldownChanged = (UFunction*) UObject::GObjObjects()->Data[ 49277 ];

	ASanctumWeaponOverheat_execCooldownChanged_Parms CooldownChanged_Parms;
	CooldownChanged_Parms.cooldownPercent = cooldownPercent;

	this->ProcessEvent ( pFnCooldownChanged, &CooldownChanged_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAssault.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumWeaponAssault::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 49483 ];

	ASanctumWeaponAssault_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAssault.StopOverheatWarningSound
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponAssault::StopOverheatWarningSound ( )
{
	static UFunction* pFnStopOverheatWarningSound = NULL;

	if ( ! pFnStopOverheatWarningSound )
		pFnStopOverheatWarningSound = (UFunction*) UObject::GObjObjects()->Data[ 49482 ];

	ASanctumWeaponAssault_execStopOverheatWarningSound_Parms StopOverheatWarningSound_Parms;

	this->ProcessEvent ( pFnStopOverheatWarningSound, &StopOverheatWarningSound_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAssault.StartOverheatWarningSound
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponAssault::StartOverheatWarningSound ( )
{
	static UFunction* pFnStartOverheatWarningSound = NULL;

	if ( ! pFnStartOverheatWarningSound )
		pFnStartOverheatWarningSound = (UFunction*) UObject::GObjObjects()->Data[ 49481 ];

	ASanctumWeaponAssault_execStartOverheatWarningSound_Parms StartOverheatWarningSound_Parms;

	this->ProcessEvent ( pFnStartOverheatWarningSound, &StartOverheatWarningSound_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAssault.PlayOverheatWarning
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponAssault::PlayOverheatWarning ( )
{
	static UFunction* pFnPlayOverheatWarning = NULL;

	if ( ! pFnPlayOverheatWarning )
		pFnPlayOverheatWarning = (UFunction*) UObject::GObjObjects()->Data[ 49480 ];

	ASanctumWeaponAssault_execPlayOverheatWarning_Parms PlayOverheatWarning_Parms;

	this->ProcessEvent ( pFnPlayOverheatWarning, &PlayOverheatWarning_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAssault.FireAmmunition
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponAssault::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = (UFunction*) UObject::GObjObjects()->Data[ 49479 ];

	ASanctumWeaponAssault_execFireAmmunition_Parms FireAmmunition_Parms;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAssault.AddAmmo
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

int ASanctumWeaponAssault::AddAmmo ( int Amount )
{
	static UFunction* pFnAddAmmo = NULL;

	if ( ! pFnAddAmmo )
		pFnAddAmmo = (UFunction*) UObject::GObjObjects()->Data[ 49475 ];

	ASanctumWeaponAssault_execAddAmmo_Parms AddAmmo_Parms;
	AddAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddAmmo, &AddAmmo_Parms, NULL );

	return AddAmmo_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponAssault.DeattachSmokeHeat
// [0x00020102] 
// Parameters infos:
// int                            Socket                         ( CPF_Parm )

void ASanctumWeaponAssault::DeattachSmokeHeat ( int Socket )
{
	static UFunction* pFnDeattachSmokeHeat = NULL;

	if ( ! pFnDeattachSmokeHeat )
		pFnDeattachSmokeHeat = (UFunction*) UObject::GObjObjects()->Data[ 49472 ];

	ASanctumWeaponAssault_execDeattachSmokeHeat_Parms DeattachSmokeHeat_Parms;
	DeattachSmokeHeat_Parms.Socket = Socket;

	this->ProcessEvent ( pFnDeattachSmokeHeat, &DeattachSmokeHeat_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAssault.AttachHeatSmoke
// [0x00020102] 
// Parameters infos:
// int                            Socket                         ( CPF_Parm )

void ASanctumWeaponAssault::AttachHeatSmoke ( int Socket )
{
	static UFunction* pFnAttachHeatSmoke = NULL;

	if ( ! pFnAttachHeatSmoke )
		pFnAttachHeatSmoke = (UFunction*) UObject::GObjObjects()->Data[ 49469 ];

	ASanctumWeaponAssault_execAttachHeatSmoke_Parms AttachHeatSmoke_Parms;
	AttachHeatSmoke_Parms.Socket = Socket;

	this->ProcessEvent ( pFnAttachHeatSmoke, &AttachHeatSmoke_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAssault.GetSpread
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

float ASanctumWeaponAssault::GetSpread ( unsigned char FireModeNum )
{
	static UFunction* pFnGetSpread = NULL;

	if ( ! pFnGetSpread )
		pFnGetSpread = (UFunction*) UObject::GObjObjects()->Data[ 49466 ];

	ASanctumWeaponAssault_execGetSpread_Parms GetSpread_Parms;
	GetSpread_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnGetSpread, &GetSpread_Parms, NULL );

	return GetSpread_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponAssault.CalcSpreadMod
// [0x00020102] 
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumWeaponAssault::CalcSpreadMod ( float Delta )
{
	static UFunction* pFnCalcSpreadMod = NULL;

	if ( ! pFnCalcSpreadMod )
		pFnCalcSpreadMod = (UFunction*) UObject::GObjObjects()->Data[ 49464 ];

	ASanctumWeaponAssault_execCalcSpreadMod_Parms CalcSpreadMod_Parms;
	CalcSpreadMod_Parms.Delta = Delta;

	this->ProcessEvent ( pFnCalcSpreadMod, &CalcSpreadMod_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAssault.StopOverheatEffects
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponAssault::StopOverheatEffects ( )
{
	static UFunction* pFnStopOverheatEffects = NULL;

	if ( ! pFnStopOverheatEffects )
		pFnStopOverheatEffects = (UFunction*) UObject::GObjObjects()->Data[ 49463 ];

	ASanctumWeaponAssault_execStopOverheatEffects_Parms StopOverheatEffects_Parms;

	this->ProcessEvent ( pFnStopOverheatEffects, &StopOverheatEffects_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAssault.PlayOverheatEffects
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponAssault::PlayOverheatEffects ( )
{
	static UFunction* pFnPlayOverheatEffects = NULL;

	if ( ! pFnPlayOverheatEffects )
		pFnPlayOverheatEffects = (UFunction*) UObject::GObjObjects()->Data[ 49462 ];

	ASanctumWeaponAssault_execPlayOverheatEffects_Parms PlayOverheatEffects_Parms;

	this->ProcessEvent ( pFnPlayOverheatEffects, &PlayOverheatEffects_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAssault.SetOverheatMaterial
// [0x00020102] 
// Parameters infos:
// struct FLinearColor            overheatColor                  ( CPF_Parm )

void ASanctumWeaponAssault::SetOverheatMaterial ( struct FLinearColor overheatColor )
{
	static UFunction* pFnSetOverheatMaterial = NULL;

	if ( ! pFnSetOverheatMaterial )
		pFnSetOverheatMaterial = (UFunction*) UObject::GObjObjects()->Data[ 49459 ];

	ASanctumWeaponAssault_execSetOverheatMaterial_Parms SetOverheatMaterial_Parms;
	memcpy ( &SetOverheatMaterial_Parms.overheatColor, &overheatColor, 0x10 );

	this->ProcessEvent ( pFnSetOverheatMaterial, &SetOverheatMaterial_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAssault.PlayCooldownedSound
// [0x00020102] 
// Parameters infos:
// float                          Cooldown                       ( CPF_Parm )

void ASanctumWeaponAssault::PlayCooldownedSound ( float Cooldown )
{
	static UFunction* pFnPlayCooldownedSound = NULL;

	if ( ! pFnPlayCooldownedSound )
		pFnPlayCooldownedSound = (UFunction*) UObject::GObjObjects()->Data[ 49454 ];

	ASanctumWeaponAssault_execPlayCooldownedSound_Parms PlayCooldownedSound_Parms;
	PlayCooldownedSound_Parms.Cooldown = Cooldown;

	this->ProcessEvent ( pFnPlayCooldownedSound, &PlayCooldownedSound_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAssault.notifyNewHud
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class ASanctumHUD*             HUD                            ( CPF_Parm )

void ASanctumWeaponAssault::eventnotifyNewHud ( class ASanctumHUD* HUD )
{
	static UFunction* pFnnotifyNewHud = NULL;

	if ( ! pFnnotifyNewHud )
		pFnnotifyNewHud = (UFunction*) UObject::GObjObjects()->Data[ 49452 ];

	ASanctumWeaponAssault_eventnotifyNewHud_Parms notifyNewHud_Parms;
	notifyNewHud_Parms.HUD = HUD;

	this->ProcessEvent ( pFnnotifyNewHud, &notifyNewHud_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAssault.HasAmmo
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// int                            Amount                         ( CPF_OptionalParm | CPF_Parm )

bool ASanctumWeaponAssault::HasAmmo ( unsigned char FireModeNum, int Amount )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = (UFunction*) UObject::GObjObjects()->Data[ 49448 ];

	ASanctumWeaponAssault_execHasAmmo_Parms HasAmmo_Parms;
	HasAmmo_Parms.FireModeNum = FireModeNum;
	HasAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );

	return HasAmmo_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponAssault.GetStats
// [0x00422102] 
// Parameters infos:
// class ASanctumWeapon*          Wpn                            ( CPF_Parm )
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         weaponInfo                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumWeaponAssault::GetStats ( class ASanctumWeapon* Wpn, int lvl, struct FStatInfoStruct* weaponInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 49441 ];

	ASanctumWeaponAssault_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.Wpn = Wpn;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( weaponInfo )
		memcpy ( weaponInfo, &GetStats_Parms.weaponInfo, 0xAC );
};

// Function Sanctum.SanctumWeaponAssault.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumWeaponAssault::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 49439 ];

	ASanctumWeaponAssault_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumWeaponSniper.Destroyed
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponSniper::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 49643 ];

	ASanctumWeaponSniper_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumWeaponSniper.GetStats
// [0x00422102] 
// Parameters infos:
// class ASanctumWeapon*          Wpn                            ( CPF_Parm )
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         weaponInfo                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumWeaponSniper::GetStats ( class ASanctumWeapon* Wpn, int lvl, struct FStatInfoStruct* weaponInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 49627 ];

	ASanctumWeaponSniper_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.Wpn = Wpn;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( weaponInfo )
		memcpy ( weaponInfo, &GetStats_Parms.weaponInfo, 0xAC );
};

// Function Sanctum.SanctumWeaponSniper.DrawZoomedCrosshair
// [0x00820102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void ASanctumWeaponSniper::DrawZoomedCrosshair ( class AHUD* H )
{
	static UFunction* pFnDrawZoomedCrosshair = NULL;

	if ( ! pFnDrawZoomedCrosshair )
		pFnDrawZoomedCrosshair = (UFunction*) UObject::GObjObjects()->Data[ 49616 ];

	ASanctumWeaponSniper_execDrawZoomedCrosshair_Parms DrawZoomedCrosshair_Parms;
	DrawZoomedCrosshair_Parms.H = H;

	this->ProcessEvent ( pFnDrawZoomedCrosshair, &DrawZoomedCrosshair_Parms, NULL );
};

// Function Sanctum.SanctumWeaponSniper.DrawCrosshair
// [0x00020102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void ASanctumWeaponSniper::DrawCrosshair ( class AHUD* H )
{
	static UFunction* pFnDrawCrosshair = NULL;

	if ( ! pFnDrawCrosshair )
		pFnDrawCrosshair = (UFunction*) UObject::GObjObjects()->Data[ 49613 ];

	ASanctumWeaponSniper_execDrawCrosshair_Parms DrawCrosshair_Parms;
	DrawCrosshair_Parms.H = H;

	this->ProcessEvent ( pFnDrawCrosshair, &DrawCrosshair_Parms, NULL );
};

// Function Sanctum.SanctumWeaponSniper.CheckZoom
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool ASanctumWeaponSniper::CheckZoom ( unsigned char FireModeNum )
{
	static UFunction* pFnCheckZoom = NULL;

	if ( ! pFnCheckZoom )
		pFnCheckZoom = (UFunction*) UObject::GObjObjects()->Data[ 49607 ];

	ASanctumWeaponSniper_execCheckZoom_Parms CheckZoom_Parms;
	CheckZoom_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnCheckZoom, &CheckZoom_Parms, NULL );

	return CheckZoom_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponSniper.EndZoom
// [0x00020102] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ASanctumWeaponSniper::EndZoom ( class APlayerController* PC )
{
	static UFunction* pFnEndZoom = NULL;

	if ( ! pFnEndZoom )
		pFnEndZoom = (UFunction*) UObject::GObjObjects()->Data[ 49603 ];

	ASanctumWeaponSniper_execEndZoom_Parms EndZoom_Parms;
	EndZoom_Parms.PC = PC;

	this->ProcessEvent ( pFnEndZoom, &EndZoom_Parms, NULL );
};

// Function Sanctum.SanctumWeaponSniper.ForceEndZoom
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponSniper::ForceEndZoom ( )
{
	static UFunction* pFnForceEndZoom = NULL;

	if ( ! pFnForceEndZoom )
		pFnForceEndZoom = (UFunction*) UObject::GObjObjects()->Data[ 49602 ];

	ASanctumWeaponSniper_execForceEndZoom_Parms ForceEndZoom_Parms;

	this->ProcessEvent ( pFnForceEndZoom, &ForceEndZoom_Parms, NULL );
};

// Function Sanctum.SanctumWeaponSniper.GetZoomedState
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ASanctumWeaponSniper::GetZoomedState ( )
{
	static UFunction* pFnGetZoomedState = NULL;

	if ( ! pFnGetZoomedState )
		pFnGetZoomedState = (UFunction*) UObject::GObjObjects()->Data[ 49599 ];

	ASanctumWeaponSniper_execGetZoomedState_Parms GetZoomedState_Parms;

	this->ProcessEvent ( pFnGetZoomedState, &GetZoomedState_Parms, NULL );

	return GetZoomedState_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponSniper.StartZoom
// [0x00020102] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ASanctumWeaponSniper::StartZoom ( class APlayerController* PC )
{
	static UFunction* pFnStartZoom = NULL;

	if ( ! pFnStartZoom )
		pFnStartZoom = (UFunction*) UObject::GObjObjects()->Data[ 49592 ];

	ASanctumWeaponSniper_execStartZoom_Parms StartZoom_Parms;
	StartZoom_Parms.PC = PC;

	this->ProcessEvent ( pFnStartZoom, &StartZoom_Parms, NULL );
};

// Function Sanctum.SanctumWeaponSniper.SendToFiringState
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASanctumWeaponSniper::SendToFiringState ( unsigned char FireModeNum )
{
	static UFunction* pFnSendToFiringState = NULL;

	if ( ! pFnSendToFiringState )
		pFnSendToFiringState = (UFunction*) UObject::GObjObjects()->Data[ 49590 ];

	ASanctumWeaponSniper_execSendToFiringState_Parms SendToFiringState_Parms;
	SendToFiringState_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnSendToFiringState, &SendToFiringState_Parms, NULL );
};

// Function Sanctum.SanctumWeaponSniper.FireAmmunition
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponSniper::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = (UFunction*) UObject::GObjObjects()->Data[ 49589 ];

	ASanctumWeaponSniper_execFireAmmunition_Parms FireAmmunition_Parms;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );
};

// Function Sanctum.SanctumWeaponSniper.SniperWeakspotKill
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponSniper::SniperWeakspotKill ( )
{
	static UFunction* pFnSniperWeakspotKill = NULL;

	if ( ! pFnSniperWeakspotKill )
		pFnSniperWeakspotKill = (UFunction*) UObject::GObjObjects()->Data[ 49585 ];

	ASanctumWeaponSniper_execSniperWeakspotKill_Parms SniperWeakspotKill_Parms;

	this->ProcessEvent ( pFnSniperWeakspotKill, &SniperWeakspotKill_Parms, NULL );
};

// Function Sanctum.SanctumWeaponSniper.SetOverheat
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponSniper::SetOverheat ( )
{
	static UFunction* pFnSetOverheat = NULL;

	if ( ! pFnSetOverheat )
		pFnSetOverheat = (UFunction*) UObject::GObjObjects()->Data[ 49584 ];

	ASanctumWeaponSniper_execSetOverheat_Parms SetOverheat_Parms;

	this->ProcessEvent ( pFnSetOverheat, &SetOverheat_Parms, NULL );
};

// Function Sanctum.SanctumWeaponSniper.HasAmmo
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// int                            Amount                         ( CPF_OptionalParm | CPF_Parm )

bool ASanctumWeaponSniper::HasAmmo ( unsigned char FireModeNum, int Amount )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = (UFunction*) UObject::GObjObjects()->Data[ 49580 ];

	ASanctumWeaponSniper_execHasAmmo_Parms HasAmmo_Parms;
	HasAmmo_Parms.FireModeNum = FireModeNum;
	HasAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );

	return HasAmmo_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponSniper.notifyNewHud
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class ASanctumHUD*             HUD                            ( CPF_Parm )

void ASanctumWeaponSniper::eventnotifyNewHud ( class ASanctumHUD* HUD )
{
	static UFunction* pFnnotifyNewHud = NULL;

	if ( ! pFnnotifyNewHud )
		pFnnotifyNewHud = (UFunction*) UObject::GObjObjects()->Data[ 49578 ];

	ASanctumWeaponSniper_eventnotifyNewHud_Parms notifyNewHud_Parms;
	notifyNewHud_Parms.HUD = HUD;

	this->ProcessEvent ( pFnnotifyNewHud, &notifyNewHud_Parms, NULL );
};

// Function Sanctum.SanctumWeaponSniper.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumWeaponSniper::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 49575 ];

	ASanctumWeaponSniper_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumWeaponUsingAmmo.UpgradeTo
// [0x00020102] 
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void ASanctumWeaponUsingAmmo::UpgradeTo ( int Level )
{
	static UFunction* pFnUpgradeTo = NULL;

	if ( ! pFnUpgradeTo )
		pFnUpgradeTo = (UFunction*) UObject::GObjObjects()->Data[ 49559 ];

	ASanctumWeaponUsingAmmo_execUpgradeTo_Parms UpgradeTo_Parms;
	UpgradeTo_Parms.Level = Level;

	this->ProcessEvent ( pFnUpgradeTo, &UpgradeTo_Parms, NULL );
};

// Function Sanctum.SanctumWeaponUsingAmmo.NotifyAmmoListeners
// [0x00020102] 
// Parameters infos:
// int                            ammoLeft                       ( CPF_Parm )
// class ASanctumWeaponUsingAmmo* Wpn                            ( CPF_Parm )

void ASanctumWeaponUsingAmmo::NotifyAmmoListeners ( int ammoLeft, class ASanctumWeaponUsingAmmo* Wpn )
{
	static UFunction* pFnNotifyAmmoListeners = NULL;

	if ( ! pFnNotifyAmmoListeners )
		pFnNotifyAmmoListeners = (UFunction*) UObject::GObjObjects()->Data[ 49554 ];

	ASanctumWeaponUsingAmmo_execNotifyAmmoListeners_Parms NotifyAmmoListeners_Parms;
	NotifyAmmoListeners_Parms.ammoLeft = ammoLeft;
	NotifyAmmoListeners_Parms.Wpn = Wpn;

	this->ProcessEvent ( pFnNotifyAmmoListeners, &NotifyAmmoListeners_Parms, NULL );
};

// Function Sanctum.SanctumWeaponUsingAmmo.ClearAllAmmoListeners
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponUsingAmmo::ClearAllAmmoListeners ( )
{
	static UFunction* pFnClearAllAmmoListeners = NULL;

	if ( ! pFnClearAllAmmoListeners )
		pFnClearAllAmmoListeners = (UFunction*) UObject::GObjObjects()->Data[ 49552 ];

	ASanctumWeaponUsingAmmo_execClearAllAmmoListeners_Parms ClearAllAmmoListeners_Parms;

	this->ProcessEvent ( pFnClearAllAmmoListeners, &ClearAllAmmoListeners_Parms, NULL );
};

// Function Sanctum.SanctumWeaponUsingAmmo.RemoveAmmoListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumWeaponUsingAmmo::RemoveAmmoListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnRemoveAmmoListener = NULL;

	if ( ! pFnRemoveAmmoListener )
		pFnRemoveAmmoListener = (UFunction*) UObject::GObjObjects()->Data[ 49549 ];

	ASanctumWeaponUsingAmmo_execRemoveAmmoListener_Parms RemoveAmmoListener_Parms;
	memcpy ( &RemoveAmmoListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnRemoveAmmoListener, &RemoveAmmoListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponUsingAmmo.AddAmmoListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumWeaponUsingAmmo::AddAmmoListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnAddAmmoListener = NULL;

	if ( ! pFnAddAmmoListener )
		pFnAddAmmoListener = (UFunction*) UObject::GObjObjects()->Data[ 49546 ];

	ASanctumWeaponUsingAmmo_execAddAmmoListener_Parms AddAmmoListener_Parms;
	memcpy ( &AddAmmoListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnAddAmmoListener, &AddAmmoListener_Parms, NULL );
};

// Function Sanctum.SanctumWeaponUsingAmmo.AddAmmo
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

int ASanctumWeaponUsingAmmo::AddAmmo ( int Amount )
{
	static UFunction* pFnAddAmmo = NULL;

	if ( ! pFnAddAmmo )
		pFnAddAmmo = (UFunction*) UObject::GObjObjects()->Data[ 49542 ];

	ASanctumWeaponUsingAmmo_execAddAmmo_Parms AddAmmo_Parms;
	AddAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddAmmo, &AddAmmo_Parms, NULL );

	return AddAmmo_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponUsingAmmo.RegainAmmo
// [0x00020002] 
// Parameters infos:

void ASanctumWeaponUsingAmmo::RegainAmmo ( )
{
	static UFunction* pFnRegainAmmo = NULL;

	if ( ! pFnRegainAmmo )
		pFnRegainAmmo = (UFunction*) UObject::GObjObjects()->Data[ 49541 ];

	ASanctumWeaponUsingAmmo_execRegainAmmo_Parms RegainAmmo_Parms;

	this->ProcessEvent ( pFnRegainAmmo, &RegainAmmo_Parms, NULL );
};

// Function Sanctum.SanctumWeaponUsingAmmo.StartAmmoRegain
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponUsingAmmo::StartAmmoRegain ( )
{
	static UFunction* pFnStartAmmoRegain = NULL;

	if ( ! pFnStartAmmoRegain )
		pFnStartAmmoRegain = (UFunction*) UObject::GObjObjects()->Data[ 49540 ];

	ASanctumWeaponUsingAmmo_execStartAmmoRegain_Parms StartAmmoRegain_Parms;

	this->ProcessEvent ( pFnStartAmmoRegain, &StartAmmoRegain_Parms, NULL );
};

// Function Sanctum.SanctumWeaponUsingAmmo.DrawHUD
// [0x00820102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void ASanctumWeaponUsingAmmo::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 49525 ];

	ASanctumWeaponUsingAmmo_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Sanctum.SanctumWeaponUsingAmmo.GetCrosshairTextureForAmmo
// [0x00020102] 
// Parameters infos:
// class UTexture2D*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ammoIndex                      ( CPF_Parm )

class UTexture2D* ASanctumWeaponUsingAmmo::GetCrosshairTextureForAmmo ( int ammoIndex )
{
	static UFunction* pFnGetCrosshairTextureForAmmo = NULL;

	if ( ! pFnGetCrosshairTextureForAmmo )
		pFnGetCrosshairTextureForAmmo = (UFunction*) UObject::GObjObjects()->Data[ 49521 ];

	ASanctumWeaponUsingAmmo_execGetCrosshairTextureForAmmo_Parms GetCrosshairTextureForAmmo_Parms;
	GetCrosshairTextureForAmmo_Parms.ammoIndex = ammoIndex;

	this->ProcessEvent ( pFnGetCrosshairTextureForAmmo, &GetCrosshairTextureForAmmo_Parms, NULL );

	return GetCrosshairTextureForAmmo_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponUsingAmmo.CalculateOverheat
// [0x00020100] 
// Parameters infos:

void ASanctumWeaponUsingAmmo::CalculateOverheat ( )
{
	static UFunction* pFnCalculateOverheat = NULL;

	if ( ! pFnCalculateOverheat )
		pFnCalculateOverheat = (UFunction*) UObject::GObjObjects()->Data[ 49520 ];

	ASanctumWeaponUsingAmmo_execCalculateOverheat_Parms CalculateOverheat_Parms;

	this->ProcessEvent ( pFnCalculateOverheat, &CalculateOverheat_Parms, NULL );
};

// Function Sanctum.SanctumWeaponUsingAmmo.notifyNewHud
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class ASanctumHUD*             HUD                            ( CPF_Parm )

void ASanctumWeaponUsingAmmo::eventnotifyNewHud ( class ASanctumHUD* HUD )
{
	static UFunction* pFnnotifyNewHud = NULL;

	if ( ! pFnnotifyNewHud )
		pFnnotifyNewHud = (UFunction*) UObject::GObjObjects()->Data[ 49518 ];

	ASanctumWeaponUsingAmmo_eventnotifyNewHud_Parms notifyNewHud_Parms;
	notifyNewHud_Parms.HUD = HUD;

	this->ProcessEvent ( pFnnotifyNewHud, &notifyNewHud_Parms, NULL );
};

// Function Sanctum.SanctumWeaponUsingAmmo.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeaponUsingAmmo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 49517 ];

	ASanctumWeaponUsingAmmo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumWeaponUsingAmmo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumWeaponUsingAmmo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 49515 ];

	ASanctumWeaponUsingAmmo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumWeaponUsingAmmo.AmmoChanged
// [0x00120000] 
// Parameters infos:
// int                            ammoLeft                       ( CPF_Parm )
// class ASanctumWeaponUsingAmmo* Wpn                            ( CPF_Parm )

void ASanctumWeaponUsingAmmo::AmmoChanged ( int ammoLeft, class ASanctumWeaponUsingAmmo* Wpn )
{
	static UFunction* pFnAmmoChanged = NULL;

	if ( ! pFnAmmoChanged )
		pFnAmmoChanged = (UFunction*) UObject::GObjObjects()->Data[ 49504 ];

	ASanctumWeaponUsingAmmo_execAmmoChanged_Parms AmmoChanged_Parms;
	AmmoChanged_Parms.ammoLeft = ammoLeft;
	AmmoChanged_Parms.Wpn = Wpn;

	this->ProcessEvent ( pFnAmmoChanged, &AmmoChanged_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.GetCrosshairTextureForAmmo
// [0x00020102] 
// Parameters infos:
// class UTexture2D*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ammoIndex                      ( CPF_Parm )

class UTexture2D* ASanctumWeaponShotgun::GetCrosshairTextureForAmmo ( int ammoIndex )
{
	static UFunction* pFnGetCrosshairTextureForAmmo = NULL;

	if ( ! pFnGetCrosshairTextureForAmmo )
		pFnGetCrosshairTextureForAmmo = (UFunction*) UObject::GObjObjects()->Data[ 49788 ];

	ASanctumWeaponShotgun_execGetCrosshairTextureForAmmo_Parms GetCrosshairTextureForAmmo_Parms;
	GetCrosshairTextureForAmmo_Parms.ammoIndex = ammoIndex;

	this->ProcessEvent ( pFnGetCrosshairTextureForAmmo, &GetCrosshairTextureForAmmo_Parms, NULL );

	return GetCrosshairTextureForAmmo_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponShotgun.GetStats
// [0x00422102] 
// Parameters infos:
// class ASanctumWeapon*          Wpn                            ( CPF_Parm )
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         weaponInfo                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumWeaponShotgun::GetStats ( class ASanctumWeapon* Wpn, int lvl, struct FStatInfoStruct* weaponInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 49783 ];

	ASanctumWeaponShotgun_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.Wpn = Wpn;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( weaponInfo )
		memcpy ( weaponInfo, &GetStats_Parms.weaponInfo, 0xAC );
};

// Function Sanctum.SanctumWeaponShotgun.PlayChargeIdleSound
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponShotgun::PlayChargeIdleSound ( )
{
	static UFunction* pFnPlayChargeIdleSound = NULL;

	if ( ! pFnPlayChargeIdleSound )
		pFnPlayChargeIdleSound = (UFunction*) UObject::GObjObjects()->Data[ 49781 ];

	ASanctumWeaponShotgun_execPlayChargeIdleSound_Parms PlayChargeIdleSound_Parms;

	this->ProcessEvent ( pFnPlayChargeIdleSound, &PlayChargeIdleSound_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.StopOverheatEffects
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponShotgun::StopOverheatEffects ( )
{
	static UFunction* pFnStopOverheatEffects = NULL;

	if ( ! pFnStopOverheatEffects )
		pFnStopOverheatEffects = (UFunction*) UObject::GObjObjects()->Data[ 49780 ];

	ASanctumWeaponShotgun_execStopOverheatEffects_Parms StopOverheatEffects_Parms;

	this->ProcessEvent ( pFnStopOverheatEffects, &StopOverheatEffects_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.PlayOverheatEffects
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponShotgun::PlayOverheatEffects ( )
{
	static UFunction* pFnPlayOverheatEffects = NULL;

	if ( ! pFnPlayOverheatEffects )
		pFnPlayOverheatEffects = (UFunction*) UObject::GObjObjects()->Data[ 49779 ];

	ASanctumWeaponShotgun_execPlayOverheatEffects_Parms PlayOverheatEffects_Parms;

	this->ProcessEvent ( pFnPlayOverheatEffects, &PlayOverheatEffects_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.PlayWeaponAnimation
// [0x00024102] 
// Parameters infos:
// struct FName                   Sequence                       ( CPF_Parm )
// float                          fDesiredDuration               ( CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )

void ASanctumWeaponShotgun::PlayWeaponAnimation ( struct FName Sequence, float fDesiredDuration, unsigned long bLoop, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnPlayWeaponAnimation = NULL;

	if ( ! pFnPlayWeaponAnimation )
		pFnPlayWeaponAnimation = (UFunction*) UObject::GObjObjects()->Data[ 49774 ];

	ASanctumWeaponShotgun_execPlayWeaponAnimation_Parms PlayWeaponAnimation_Parms;
	memcpy ( &PlayWeaponAnimation_Parms.Sequence, &Sequence, 0x8 );
	PlayWeaponAnimation_Parms.fDesiredDuration = fDesiredDuration;
	PlayWeaponAnimation_Parms.bLoop = bLoop;
	PlayWeaponAnimation_Parms.SkelMesh = SkelMesh;

	this->ProcessEvent ( pFnPlayWeaponAnimation, &PlayWeaponAnimation_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.HitNumberOfTimes
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumPawn*            HitPawn                        ( CPF_Parm )

int ASanctumWeaponShotgun::HitNumberOfTimes ( class ASanctumPawn* HitPawn )
{
	static UFunction* pFnHitNumberOfTimes = NULL;

	if ( ! pFnHitNumberOfTimes )
		pFnHitNumberOfTimes = (UFunction*) UObject::GObjObjects()->Data[ 47011 ];

	ASanctumWeaponShotgun_execHitNumberOfTimes_Parms HitNumberOfTimes_Parms;
	HitNumberOfTimes_Parms.HitPawn = HitPawn;

	this->ProcessEvent ( pFnHitNumberOfTimes, &HitNumberOfTimes_Parms, NULL );

	return HitNumberOfTimes_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponShotgun.ConsumeAmmo
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASanctumWeaponShotgun::ConsumeAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 49770 ];

	ASanctumWeaponShotgun_execConsumeAmmo_Parms ConsumeAmmo_Parms;
	ConsumeAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.OnWeaponAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeaponShotgun::eventOnWeaponAnimEnd ( )
{
	static UFunction* pFnOnWeaponAnimEnd = NULL;

	if ( ! pFnOnWeaponAnimEnd )
		pFnOnWeaponAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 49769 ];

	ASanctumWeaponShotgun_eventOnWeaponAnimEnd_Parms OnWeaponAnimEnd_Parms;

	this->ProcessEvent ( pFnOnWeaponAnimEnd, &OnWeaponAnimEnd_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.FireAmmunition
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponShotgun::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = (UFunction*) UObject::GObjObjects()->Data[ 49768 ];

	ASanctumWeaponShotgun_execFireAmmunition_Parms FireAmmunition_Parms;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.KnockBackPlayer
// [0x00820102] 
// Parameters infos:

void ASanctumWeaponShotgun::KnockBackPlayer ( )
{
	static UFunction* pFnKnockBackPlayer = NULL;

	if ( ! pFnKnockBackPlayer )
		pFnKnockBackPlayer = (UFunction*) UObject::GObjObjects()->Data[ 49764 ];

	ASanctumWeaponShotgun_execKnockBackPlayer_Parms KnockBackPlayer_Parms;

	this->ProcessEvent ( pFnKnockBackPlayer, &KnockBackPlayer_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.DeattachHeatSmoke
// [0x00020102] 
// Parameters infos:
// int                            Socket                         ( CPF_Parm )

void ASanctumWeaponShotgun::DeattachHeatSmoke ( int Socket )
{
	static UFunction* pFnDeattachHeatSmoke = NULL;

	if ( ! pFnDeattachHeatSmoke )
		pFnDeattachHeatSmoke = (UFunction*) UObject::GObjObjects()->Data[ 49761 ];

	ASanctumWeaponShotgun_execDeattachHeatSmoke_Parms DeattachHeatSmoke_Parms;
	DeattachHeatSmoke_Parms.Socket = Socket;

	this->ProcessEvent ( pFnDeattachHeatSmoke, &DeattachHeatSmoke_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.AttachHeatSmoke
// [0x00020102] 
// Parameters infos:
// int                            Socket                         ( CPF_Parm )

void ASanctumWeaponShotgun::AttachHeatSmoke ( int Socket )
{
	static UFunction* pFnAttachHeatSmoke = NULL;

	if ( ! pFnAttachHeatSmoke )
		pFnAttachHeatSmoke = (UFunction*) UObject::GObjObjects()->Data[ 49757 ];

	ASanctumWeaponShotgun_execAttachHeatSmoke_Parms AttachHeatSmoke_Parms;
	AttachHeatSmoke_Parms.Socket = Socket;

	this->ProcessEvent ( pFnAttachHeatSmoke, &AttachHeatSmoke_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.CallAllOverheatFuncs
// [0x00820102] 
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumWeaponShotgun::CallAllOverheatFuncs ( float Delta )
{
	static UFunction* pFnCallAllOverheatFuncs = NULL;

	if ( ! pFnCallAllOverheatFuncs )
		pFnCallAllOverheatFuncs = (UFunction*) UObject::GObjObjects()->Data[ 49754 ];

	ASanctumWeaponShotgun_execCallAllOverheatFuncs_Parms CallAllOverheatFuncs_Parms;
	CallAllOverheatFuncs_Parms.Delta = Delta;

	this->ProcessEvent ( pFnCallAllOverheatFuncs, &CallAllOverheatFuncs_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.CoolDownOverheat
// [0x00020102] 
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumWeaponShotgun::CoolDownOverheat ( float Delta )
{
	static UFunction* pFnCoolDownOverheat = NULL;

	if ( ! pFnCoolDownOverheat )
		pFnCoolDownOverheat = (UFunction*) UObject::GObjObjects()->Data[ 49752 ];

	ASanctumWeaponShotgun_execCoolDownOverheat_Parms CoolDownOverheat_Parms;
	CoolDownOverheat_Parms.Delta = Delta;

	this->ProcessEvent ( pFnCoolDownOverheat, &CoolDownOverheat_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.SetOverheat
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponShotgun::SetOverheat ( )
{
	static UFunction* pFnSetOverheat = NULL;

	if ( ! pFnSetOverheat )
		pFnSetOverheat = (UFunction*) UObject::GObjObjects()->Data[ 49751 ];

	ASanctumWeaponShotgun_execSetOverheat_Parms SetOverheat_Parms;

	this->ProcessEvent ( pFnSetOverheat, &SetOverheat_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.CalculateOverheat
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponShotgun::CalculateOverheat ( )
{
	static UFunction* pFnCalculateOverheat = NULL;

	if ( ! pFnCalculateOverheat )
		pFnCalculateOverheat = (UFunction*) UObject::GObjObjects()->Data[ 49750 ];

	ASanctumWeaponShotgun_execCalculateOverheat_Parms CalculateOverheat_Parms;

	this->ProcessEvent ( pFnCalculateOverheat, &CalculateOverheat_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.FireAllPellets
// [0x00820103] ( FUNC_Final )
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FRotator                inAimRot                       ( CPF_Parm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASanctumWeaponShotgun::FireAllPellets ( struct FVector StartLocation, struct FRotator inAimRot, unsigned char FireModeNum )
{
	static UFunction* pFnFireAllPellets = NULL;

	if ( ! pFnFireAllPellets )
		pFnFireAllPellets = (UFunction*) UObject::GObjObjects()->Data[ 49718 ];

	ASanctumWeaponShotgun_execFireAllPellets_Parms FireAllPellets_Parms;
	memcpy ( &FireAllPellets_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &FireAllPellets_Parms.inAimRot, &inAimRot, 0xC );
	FireAllPellets_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnFireAllPellets, &FireAllPellets_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.AttachAudioComponent
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponShotgun::AttachAudioComponent ( )
{
	static UFunction* pFnAttachAudioComponent = NULL;

	if ( ! pFnAttachAudioComponent )
		pFnAttachAudioComponent = (UFunction*) UObject::GObjObjects()->Data[ 49727 ];

	ASanctumWeaponShotgun_execAttachAudioComponent_Parms AttachAudioComponent_Parms;

	this->ProcessEvent ( pFnAttachAudioComponent, &AttachAudioComponent_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.FlashLocationUpdated
// [0x00820102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FVector                 FlashLocation                  ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ASanctumWeaponShotgun::FlashLocationUpdated ( unsigned char FiringMode, struct FVector FlashLocation, unsigned long bViaReplication )
{
	static UFunction* pFnFlashLocationUpdated = NULL;

	if ( ! pFnFlashLocationUpdated )
		pFnFlashLocationUpdated = (UFunction*) UObject::GObjObjects()->Data[ 49721 ];

	ASanctumWeaponShotgun_execFlashLocationUpdated_Parms FlashLocationUpdated_Parms;
	FlashLocationUpdated_Parms.FiringMode = FiringMode;
	memcpy ( &FlashLocationUpdated_Parms.FlashLocation, &FlashLocation, 0xC );
	FlashLocationUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFlashLocationUpdated, &FlashLocationUpdated_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.notifyNewHud
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class ASanctumHUD*             HUD                            ( CPF_Parm )

void ASanctumWeaponShotgun::eventnotifyNewHud ( class ASanctumHUD* HUD )
{
	static UFunction* pFnnotifyNewHud = NULL;

	if ( ! pFnnotifyNewHud )
		pFnnotifyNewHud = (UFunction*) UObject::GObjObjects()->Data[ 49719 ];

	ASanctumWeaponShotgun_eventnotifyNewHud_Parms notifyNewHud_Parms;
	notifyNewHud_Parms.HUD = HUD;

	this->ProcessEvent ( pFnnotifyNewHud, &notifyNewHud_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.CustomFire
// [0x00820102] 
// Parameters infos:

void ASanctumWeaponShotgun::CustomFire ( )
{
	static UFunction* pFnCustomFire = NULL;

	if ( ! pFnCustomFire )
		pFnCustomFire = (UFunction*) UObject::GObjObjects()->Data[ 49709 ];

	ASanctumWeaponShotgun_execCustomFire_Parms CustomFire_Parms;

	this->ProcessEvent ( pFnCustomFire, &CustomFire_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.GetAdjustedAim
// [0x00820102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator ASanctumWeaponShotgun::GetAdjustedAim ( struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAim = NULL;

	if ( ! pFnGetAdjustedAim )
		pFnGetAdjustedAim = (UFunction*) UObject::GObjObjects()->Data[ 49705 ];

	ASanctumWeaponShotgun_execGetAdjustedAim_Parms GetAdjustedAim_Parms;
	memcpy ( &GetAdjustedAim_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAim, &GetAdjustedAim_Parms, NULL );

	return GetAdjustedAim_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponShotgun.GetAmountOfShotsFired
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumWeaponShotgun::GetAmountOfShotsFired ( )
{
	static UFunction* pFnGetAmountOfShotsFired = NULL;

	if ( ! pFnGetAmountOfShotsFired )
		pFnGetAmountOfShotsFired = (UFunction*) UObject::GObjObjects()->Data[ 49703 ];

	ASanctumWeaponShotgun_execGetAmountOfShotsFired_Parms GetAmountOfShotsFired_Parms;

	this->ProcessEvent ( pFnGetAmountOfShotsFired, &GetAmountOfShotsFired_Parms, NULL );

	return GetAmountOfShotsFired_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponShotgun.Destroyed
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponShotgun::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 49701 ];

	ASanctumWeaponShotgun_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumWeaponShotgun.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeaponShotgun::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 49700 ];

	ASanctumWeaponShotgun_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumWeaponRocketLauncher.notifyNewHud
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class ASanctumHUD*             HUD                            ( CPF_Parm )

void ASanctumWeaponRocketLauncher::eventnotifyNewHud ( class ASanctumHUD* HUD )
{
	static UFunction* pFnnotifyNewHud = NULL;

	if ( ! pFnnotifyNewHud )
		pFnnotifyNewHud = (UFunction*) UObject::GObjObjects()->Data[ 50037 ];

	ASanctumWeaponRocketLauncher_eventnotifyNewHud_Parms notifyNewHud_Parms;
	notifyNewHud_Parms.HUD = HUD;

	this->ProcessEvent ( pFnnotifyNewHud, &notifyNewHud_Parms, NULL );
};

// Function Sanctum.SanctumWeaponRocketLauncher.GetCrosshairTextureForAmmo
// [0x00020102] 
// Parameters infos:
// class UTexture2D*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ammoIndex                      ( CPF_Parm )

class UTexture2D* ASanctumWeaponRocketLauncher::GetCrosshairTextureForAmmo ( int ammoIndex )
{
	static UFunction* pFnGetCrosshairTextureForAmmo = NULL;

	if ( ! pFnGetCrosshairTextureForAmmo )
		pFnGetCrosshairTextureForAmmo = (UFunction*) UObject::GObjObjects()->Data[ 49978 ];

	ASanctumWeaponRocketLauncher_execGetCrosshairTextureForAmmo_Parms GetCrosshairTextureForAmmo_Parms;
	GetCrosshairTextureForAmmo_Parms.ammoIndex = ammoIndex;

	this->ProcessEvent ( pFnGetCrosshairTextureForAmmo, &GetCrosshairTextureForAmmo_Parms, NULL );

	return GetCrosshairTextureForAmmo_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponRocketLauncher.GetEnemyTrackingInformation
// [0x00C20102] 
// Parameters infos:
// class UCanvas*                 inCanvas                       ( CPF_Parm )
// class ASanctumEnemy*           Enemy                          ( CPF_Parm )
// struct FVector2D               out_enemyScreenLocation        ( CPF_Parm | CPF_OutParm )
// struct FVector2D               out_enemyHitSize               ( CPF_Parm | CPF_OutParm )

void ASanctumWeaponRocketLauncher::GetEnemyTrackingInformation ( class UCanvas* inCanvas, class ASanctumEnemy* Enemy, struct FVector2D* out_enemyScreenLocation, struct FVector2D* out_enemyHitSize )
{
	static UFunction* pFnGetEnemyTrackingInformation = NULL;

	if ( ! pFnGetEnemyTrackingInformation )
		pFnGetEnemyTrackingInformation = (UFunction*) UObject::GObjObjects()->Data[ 49968 ];

	ASanctumWeaponRocketLauncher_execGetEnemyTrackingInformation_Parms GetEnemyTrackingInformation_Parms;
	GetEnemyTrackingInformation_Parms.inCanvas = inCanvas;
	GetEnemyTrackingInformation_Parms.Enemy = Enemy;

	this->ProcessEvent ( pFnGetEnemyTrackingInformation, &GetEnemyTrackingInformation_Parms, NULL );

	if ( out_enemyScreenLocation )
		memcpy ( out_enemyScreenLocation, &GetEnemyTrackingInformation_Parms.out_enemyScreenLocation, 0x8 );

	if ( out_enemyHitSize )
		memcpy ( out_enemyHitSize, &GetEnemyTrackingInformation_Parms.out_enemyHitSize, 0x8 );
};

// Function Sanctum.SanctumWeaponRocketLauncher.CheckForDeadTrackedEnemies
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponRocketLauncher::CheckForDeadTrackedEnemies ( )
{
	static UFunction* pFnCheckForDeadTrackedEnemies = NULL;

	if ( ! pFnCheckForDeadTrackedEnemies )
		pFnCheckForDeadTrackedEnemies = (UFunction*) UObject::GObjObjects()->Data[ 49965 ];

	ASanctumWeaponRocketLauncher_execCheckForDeadTrackedEnemies_Parms CheckForDeadTrackedEnemies_Parms;

	this->ProcessEvent ( pFnCheckForDeadTrackedEnemies, &CheckForDeadTrackedEnemies_Parms, NULL );
};

// Function Sanctum.SanctumWeaponRocketLauncher.UpgradeSpreadTo
// [0x00020102] 
// Parameters infos:
// int                            NewLevel                       ( CPF_Parm )

void ASanctumWeaponRocketLauncher::UpgradeSpreadTo ( int NewLevel )
{
	static UFunction* pFnUpgradeSpreadTo = NULL;

	if ( ! pFnUpgradeSpreadTo )
		pFnUpgradeSpreadTo = (UFunction*) UObject::GObjObjects()->Data[ 49963 ];

	ASanctumWeaponRocketLauncher_execUpgradeSpreadTo_Parms UpgradeSpreadTo_Parms;
	UpgradeSpreadTo_Parms.NewLevel = NewLevel;

	this->ProcessEvent ( pFnUpgradeSpreadTo, &UpgradeSpreadTo_Parms, NULL );
};

// Function Sanctum.SanctumWeaponRocketLauncher.UpgradeShotCost
// [0x00020102] 
// Parameters infos:
// int                            NewLevel                       ( CPF_Parm )

void ASanctumWeaponRocketLauncher::UpgradeShotCost ( int NewLevel )
{
	static UFunction* pFnUpgradeShotCost = NULL;

	if ( ! pFnUpgradeShotCost )
		pFnUpgradeShotCost = (UFunction*) UObject::GObjObjects()->Data[ 49961 ];

	ASanctumWeaponRocketLauncher_execUpgradeShotCost_Parms UpgradeShotCost_Parms;
	UpgradeShotCost_Parms.NewLevel = NewLevel;

	this->ProcessEvent ( pFnUpgradeShotCost, &UpgradeShotCost_Parms, NULL );
};

// Function Sanctum.SanctumWeaponRocketLauncher.UpgradeFireIntervalTo
// [0x00020102] 
// Parameters infos:
// int                            NewLevel                       ( CPF_Parm )

void ASanctumWeaponRocketLauncher::UpgradeFireIntervalTo ( int NewLevel )
{
	static UFunction* pFnUpgradeFireIntervalTo = NULL;

	if ( ! pFnUpgradeFireIntervalTo )
		pFnUpgradeFireIntervalTo = (UFunction*) UObject::GObjObjects()->Data[ 49959 ];

	ASanctumWeaponRocketLauncher_execUpgradeFireIntervalTo_Parms UpgradeFireIntervalTo_Parms;
	UpgradeFireIntervalTo_Parms.NewLevel = NewLevel;

	this->ProcessEvent ( pFnUpgradeFireIntervalTo, &UpgradeFireIntervalTo_Parms, NULL );
};

// Function Sanctum.SanctumWeaponRocketLauncher.GetStats
// [0x00422102] 
// Parameters infos:
// class ASanctumWeapon*          Wpn                            ( CPF_Parm )
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         weaponInfo                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumWeaponRocketLauncher::GetStats ( class ASanctumWeapon* Wpn, int lvl, struct FStatInfoStruct* weaponInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 49948 ];

	ASanctumWeaponRocketLauncher_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.Wpn = Wpn;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( weaponInfo )
		memcpy ( weaponInfo, &GetStats_Parms.weaponInfo, 0xAC );
};

// Function Sanctum.SanctumWeaponRocketLauncher.SetNormalCrosshair
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponRocketLauncher::SetNormalCrosshair ( )
{
	static UFunction* pFnSetNormalCrosshair = NULL;

	if ( ! pFnSetNormalCrosshair )
		pFnSetNormalCrosshair = (UFunction*) UObject::GObjObjects()->Data[ 49947 ];

	ASanctumWeaponRocketLauncher_execSetNormalCrosshair_Parms SetNormalCrosshair_Parms;

	this->ProcessEvent ( pFnSetNormalCrosshair, &SetNormalCrosshair_Parms, NULL );
};

// Function Sanctum.SanctumWeaponRocketLauncher.SetTrackingCrosshair
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponRocketLauncher::SetTrackingCrosshair ( )
{
	static UFunction* pFnSetTrackingCrosshair = NULL;

	if ( ! pFnSetTrackingCrosshair )
		pFnSetTrackingCrosshair = (UFunction*) UObject::GObjObjects()->Data[ 49946 ];

	ASanctumWeaponRocketLauncher_execSetTrackingCrosshair_Parms SetTrackingCrosshair_Parms;

	this->ProcessEvent ( pFnSetTrackingCrosshair, &SetTrackingCrosshair_Parms, NULL );
};

// Function Sanctum.SanctumWeaponRocketLauncher.ServerSetTrackedEnemy
// [0x002200C2] 
// Parameters infos:
// class ASanctumEnemy*           Enemy                          ( CPF_Parm )
// unsigned char                  Index                          ( CPF_Parm )

void ASanctumWeaponRocketLauncher::ServerSetTrackedEnemy ( class ASanctumEnemy* Enemy, unsigned char Index )
{
	static UFunction* pFnServerSetTrackedEnemy = NULL;

	if ( ! pFnServerSetTrackedEnemy )
		pFnServerSetTrackedEnemy = (UFunction*) UObject::GObjObjects()->Data[ 49943 ];

	ASanctumWeaponRocketLauncher_execServerSetTrackedEnemy_Parms ServerSetTrackedEnemy_Parms;
	ServerSetTrackedEnemy_Parms.Enemy = Enemy;
	ServerSetTrackedEnemy_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSetTrackedEnemy, &ServerSetTrackedEnemy_Parms, NULL );
};

// Function Sanctum.SanctumWeaponRocketLauncher.SetTrackedEnemy
// [0x00020102] 
// Parameters infos:
// class ASanctumEnemy*           Enemy                          ( CPF_Parm )

void ASanctumWeaponRocketLauncher::SetTrackedEnemy ( class ASanctumEnemy* Enemy )
{
	static UFunction* pFnSetTrackedEnemy = NULL;

	if ( ! pFnSetTrackedEnemy )
		pFnSetTrackedEnemy = (UFunction*) UObject::GObjObjects()->Data[ 49941 ];

	ASanctumWeaponRocketLauncher_execSetTrackedEnemy_Parms SetTrackedEnemy_Parms;
	SetTrackedEnemy_Parms.Enemy = Enemy;

	this->ProcessEvent ( pFnSetTrackedEnemy, &SetTrackedEnemy_Parms, NULL );
};

// Function Sanctum.SanctumWeaponRocketLauncher.GetProjectileArchetype
// [0x00020002] 
// Parameters infos:
// class ASanctumProjectile*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASanctumProjectile* ASanctumWeaponRocketLauncher::GetProjectileArchetype ( )
{
	static UFunction* pFnGetProjectileArchetype = NULL;

	if ( ! pFnGetProjectileArchetype )
		pFnGetProjectileArchetype = (UFunction*) UObject::GObjObjects()->Data[ 49937 ];

	ASanctumWeaponRocketLauncher_execGetProjectileArchetype_Parms GetProjectileArchetype_Parms;

	this->ProcessEvent ( pFnGetProjectileArchetype, &GetProjectileArchetype_Parms, NULL );

	return GetProjectileArchetype_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentAntiAir.PlayIdleAnimation
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentAntiAir::PlayIdleAnimation ( )
{
	static UFunction* pFnPlayIdleAnimation = NULL;

	if ( ! pFnPlayIdleAnimation )
		pFnPlayIdleAnimation = (UFunction*) UObject::GObjObjects()->Data[ 56406 ];

	ASanctumTowerBaseAttachmentAntiAir_execPlayIdleAnimation_Parms PlayIdleAnimation_Parms;

	this->ProcessEvent ( pFnPlayIdleAnimation, &PlayIdleAnimation_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentAntiAir.PlayShootingAnimation
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentAntiAir::PlayShootingAnimation ( )
{
	static UFunction* pFnPlayShootingAnimation = NULL;

	if ( ! pFnPlayShootingAnimation )
		pFnPlayShootingAnimation = (UFunction*) UObject::GObjObjects()->Data[ 56405 ];

	ASanctumTowerBaseAttachmentAntiAir_execPlayShootingAnimation_Parms PlayShootingAnimation_Parms;

	this->ProcessEvent ( pFnPlayShootingAnimation, &PlayShootingAnimation_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentAntiAir.OnAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ASanctumTowerBaseAttachmentAntiAir::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 56401 ];

	ASanctumTowerBaseAttachmentAntiAir_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentAntiAir.GetStats
// [0x00422102] 
// Parameters infos:
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         statInfo                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumTowerBaseAttachmentAntiAir::GetStats ( int lvl, struct FStatInfoStruct* statInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 56393 ];

	ASanctumTowerBaseAttachmentAntiAir_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( statInfo )
		memcpy ( statInfo, &GetStats_Parms.statInfo, 0xAC );
};

// Function Sanctum.SanctumTowerBaseAttachmentAntiAir.AddBlockMaterialToArray
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentAntiAir::AddBlockMaterialToArray ( )
{
	static UFunction* pFnAddBlockMaterialToArray = NULL;

	if ( ! pFnAddBlockMaterialToArray )
		pFnAddBlockMaterialToArray = (UFunction*) UObject::GObjObjects()->Data[ 56391 ];

	ASanctumTowerBaseAttachmentAntiAir_execAddBlockMaterialToArray_Parms AddBlockMaterialToArray_Parms;

	this->ProcessEvent ( pFnAddBlockMaterialToArray, &AddBlockMaterialToArray_Parms, NULL );

	return AddBlockMaterialToArray_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentAntiAir.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentAntiAir::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 56390 ];

	ASanctumTowerBaseAttachmentAntiAir_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentScatterLaser.UpgradeMesh
// [0x00820102] 
// Parameters infos:
// int                            toLevel                        ( CPF_Parm )

void ASanctumTowerBaseAttachmentScatterLaser::UpgradeMesh ( int toLevel )
{
	static UFunction* pFnUpgradeMesh = NULL;

	if ( ! pFnUpgradeMesh )
		pFnUpgradeMesh = (UFunction*) UObject::GObjObjects()->Data[ 57078 ];

	ASanctumTowerBaseAttachmentScatterLaser_execUpgradeMesh_Parms UpgradeMesh_Parms;
	UpgradeMesh_Parms.toLevel = toLevel;

	this->ProcessEvent ( pFnUpgradeMesh, &UpgradeMesh_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentScatterLaser.findNewTarget
// [0x00020002] 
// Parameters infos:
// class ASanctumEnemy*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASanctumEnemy* ASanctumTowerBaseAttachmentScatterLaser::findNewTarget ( )
{
	static UFunction* pFnfindNewTarget = NULL;

	if ( ! pFnfindNewTarget )
		pFnfindNewTarget = (UFunction*) UObject::GObjObjects()->Data[ 57072 ];

	ASanctumTowerBaseAttachmentScatterLaser_execfindNewTarget_Parms findNewTarget_Parms;

	this->ProcessEvent ( pFnfindNewTarget, &findNewTarget_Parms, NULL );

	return findNewTarget_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentScatterLaser.PlayShootingAnimation
// [0x00020100] 
// Parameters infos:

void ASanctumTowerBaseAttachmentScatterLaser::PlayShootingAnimation ( )
{
	static UFunction* pFnPlayShootingAnimation = NULL;

	if ( ! pFnPlayShootingAnimation )
		pFnPlayShootingAnimation = (UFunction*) UObject::GObjObjects()->Data[ 57071 ];

	ASanctumTowerBaseAttachmentScatterLaser_execPlayShootingAnimation_Parms PlayShootingAnimation_Parms;

	this->ProcessEvent ( pFnPlayShootingAnimation, &PlayShootingAnimation_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentScatterLaser.GetStats
// [0x00422102] 
// Parameters infos:
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         statInfo                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumTowerBaseAttachmentScatterLaser::GetStats ( int lvl, struct FStatInfoStruct* statInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 57063 ];

	ASanctumTowerBaseAttachmentScatterLaser_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( statInfo )
		memcpy ( statInfo, &GetStats_Parms.statInfo, 0xAC );
};

// Function Sanctum.SanctumTowerBaseAttachmentScatterLaser.AddBlockMaterialToArray
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentScatterLaser::AddBlockMaterialToArray ( )
{
	static UFunction* pFnAddBlockMaterialToArray = NULL;

	if ( ! pFnAddBlockMaterialToArray )
		pFnAddBlockMaterialToArray = (UFunction*) UObject::GObjObjects()->Data[ 57061 ];

	ASanctumTowerBaseAttachmentScatterLaser_execAddBlockMaterialToArray_Parms AddBlockMaterialToArray_Parms;

	this->ProcessEvent ( pFnAddBlockMaterialToArray, &AddBlockMaterialToArray_Parms, NULL );

	return AddBlockMaterialToArray_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentScatterLaser.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentScatterLaser::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57060 ];

	ASanctumTowerBaseAttachmentScatterLaser_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentGatling.MuzzleFourFired
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentGatling::eventMuzzleFourFired ( )
{
	static UFunction* pFnMuzzleFourFired = NULL;

	if ( ! pFnMuzzleFourFired )
		pFnMuzzleFourFired = (UFunction*) UObject::GObjObjects()->Data[ 56584 ];

	ASanctumTowerBaseAttachmentGatling_eventMuzzleFourFired_Parms MuzzleFourFired_Parms;

	this->ProcessEvent ( pFnMuzzleFourFired, &MuzzleFourFired_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentGatling.MuzzleThreeFired
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentGatling::eventMuzzleThreeFired ( )
{
	static UFunction* pFnMuzzleThreeFired = NULL;

	if ( ! pFnMuzzleThreeFired )
		pFnMuzzleThreeFired = (UFunction*) UObject::GObjObjects()->Data[ 56583 ];

	ASanctumTowerBaseAttachmentGatling_eventMuzzleThreeFired_Parms MuzzleThreeFired_Parms;

	this->ProcessEvent ( pFnMuzzleThreeFired, &MuzzleThreeFired_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentGatling.MuzzleTwoFired
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentGatling::eventMuzzleTwoFired ( )
{
	static UFunction* pFnMuzzleTwoFired = NULL;

	if ( ! pFnMuzzleTwoFired )
		pFnMuzzleTwoFired = (UFunction*) UObject::GObjObjects()->Data[ 56582 ];

	ASanctumTowerBaseAttachmentGatling_eventMuzzleTwoFired_Parms MuzzleTwoFired_Parms;

	this->ProcessEvent ( pFnMuzzleTwoFired, &MuzzleTwoFired_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentGatling.MuzzleOneFired
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentGatling::eventMuzzleOneFired ( )
{
	static UFunction* pFnMuzzleOneFired = NULL;

	if ( ! pFnMuzzleOneFired )
		pFnMuzzleOneFired = (UFunction*) UObject::GObjObjects()->Data[ 56581 ];

	ASanctumTowerBaseAttachmentGatling_eventMuzzleOneFired_Parms MuzzleOneFired_Parms;

	this->ProcessEvent ( pFnMuzzleOneFired, &MuzzleOneFired_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentGatling.MuzzleZeroFired
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentGatling::eventMuzzleZeroFired ( )
{
	static UFunction* pFnMuzzleZeroFired = NULL;

	if ( ! pFnMuzzleZeroFired )
		pFnMuzzleZeroFired = (UFunction*) UObject::GObjObjects()->Data[ 56580 ];

	ASanctumTowerBaseAttachmentGatling_eventMuzzleZeroFired_Parms MuzzleZeroFired_Parms;

	this->ProcessEvent ( pFnMuzzleZeroFired, &MuzzleZeroFired_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentGatling.GetStats
// [0x00422102] 
// Parameters infos:
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         statInfo                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumTowerBaseAttachmentGatling::GetStats ( int lvl, struct FStatInfoStruct* statInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 56572 ];

	ASanctumTowerBaseAttachmentGatling_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( statInfo )
		memcpy ( statInfo, &GetStats_Parms.statInfo, 0xAC );
};

// Function Sanctum.SanctumTowerBaseAttachmentGatling.OnAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ASanctumTowerBaseAttachmentGatling::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 56568 ];

	ASanctumTowerBaseAttachmentGatling_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentGatling.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentGatling::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 56567 ];

	ASanctumTowerBaseAttachmentGatling_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentLightning.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentLightning::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 56879 ];

	ASanctumTowerBaseAttachmentLightning_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentLightning.UpgradeMesh
// [0x00820102] 
// Parameters infos:
// int                            toLevel                        ( CPF_Parm )

void ASanctumTowerBaseAttachmentLightning::UpgradeMesh ( int toLevel )
{
	static UFunction* pFnUpgradeMesh = NULL;

	if ( ! pFnUpgradeMesh )
		pFnUpgradeMesh = (UFunction*) UObject::GObjObjects()->Data[ 56871 ];

	ASanctumTowerBaseAttachmentLightning_execUpgradeMesh_Parms UpgradeMesh_Parms;
	UpgradeMesh_Parms.toLevel = toLevel;

	this->ProcessEvent ( pFnUpgradeMesh, &UpgradeMesh_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentLightning.GetStats
// [0x00422102] 
// Parameters infos:
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         statInfo                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumTowerBaseAttachmentLightning::GetStats ( int lvl, struct FStatInfoStruct* statInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 56863 ];

	ASanctumTowerBaseAttachmentLightning_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( statInfo )
		memcpy ( statInfo, &GetStats_Parms.statInfo, 0xAC );
};

// Function Sanctum.SanctumTowerBaseAttachmentLightning.PlayShootingAnimation
// [0x00020100] 
// Parameters infos:

void ASanctumTowerBaseAttachmentLightning::PlayShootingAnimation ( )
{
	static UFunction* pFnPlayShootingAnimation = NULL;

	if ( ! pFnPlayShootingAnimation )
		pFnPlayShootingAnimation = (UFunction*) UObject::GObjObjects()->Data[ 56862 ];

	ASanctumTowerBaseAttachmentLightning_execPlayShootingAnimation_Parms PlayShootingAnimation_Parms;

	this->ProcessEvent ( pFnPlayShootingAnimation, &PlayShootingAnimation_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentLightning.AddBlockMaterialToArray
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentLightning::AddBlockMaterialToArray ( )
{
	static UFunction* pFnAddBlockMaterialToArray = NULL;

	if ( ! pFnAddBlockMaterialToArray )
		pFnAddBlockMaterialToArray = (UFunction*) UObject::GObjObjects()->Data[ 56860 ];

	ASanctumTowerBaseAttachmentLightning_execAddBlockMaterialToArray_Parms AddBlockMaterialToArray_Parms;

	this->ProcessEvent ( pFnAddBlockMaterialToArray, &AddBlockMaterialToArray_Parms, NULL );

	return AddBlockMaterialToArray_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentLightning.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentLightning::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 56859 ];

	ASanctumTowerBaseAttachmentLightning_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentMortar.GetStats
// [0x00422102] 
// Parameters infos:
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         statInfo                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumTowerBaseAttachmentMortar::GetStats ( int lvl, struct FStatInfoStruct* statInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 56942 ];

	ASanctumTowerBaseAttachmentMortar_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( statInfo )
		memcpy ( statInfo, &GetStats_Parms.statInfo, 0xAC );
};

// Function Sanctum.SanctumTowerBaseAttachmentMortar.isValidTarget
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumEnemy*           Target                         ( CPF_Parm )

bool ASanctumTowerBaseAttachmentMortar::isValidTarget ( class ASanctumEnemy* Target )
{
	static UFunction* pFnisValidTarget = NULL;

	if ( ! pFnisValidTarget )
		pFnisValidTarget = (UFunction*) UObject::GObjObjects()->Data[ 56938 ];

	ASanctumTowerBaseAttachmentMortar_execisValidTarget_Parms isValidTarget_Parms;
	isValidTarget_Parms.Target = Target;

	this->ProcessEvent ( pFnisValidTarget, &isValidTarget_Parms, NULL );

	return isValidTarget_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentMortar.OnAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ASanctumTowerBaseAttachmentMortar::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 56934 ];

	ASanctumTowerBaseAttachmentMortar_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentMortar.UpgradeMesh
// [0x00820102] 
// Parameters infos:
// int                            toLevel                        ( CPF_Parm )

void ASanctumTowerBaseAttachmentMortar::UpgradeMesh ( int toLevel )
{
	static UFunction* pFnUpgradeMesh = NULL;

	if ( ! pFnUpgradeMesh )
		pFnUpgradeMesh = (UFunction*) UObject::GObjObjects()->Data[ 56926 ];

	ASanctumTowerBaseAttachmentMortar_execUpgradeMesh_Parms UpgradeMesh_Parms;
	UpgradeMesh_Parms.toLevel = toLevel;

	this->ProcessEvent ( pFnUpgradeMesh, &UpgradeMesh_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentMortar.AddBlockMaterialToArray
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentMortar::AddBlockMaterialToArray ( )
{
	static UFunction* pFnAddBlockMaterialToArray = NULL;

	if ( ! pFnAddBlockMaterialToArray )
		pFnAddBlockMaterialToArray = (UFunction*) UObject::GObjObjects()->Data[ 56924 ];

	ASanctumTowerBaseAttachmentMortar_execAddBlockMaterialToArray_Parms AddBlockMaterialToArray_Parms;

	this->ProcessEvent ( pFnAddBlockMaterialToArray, &AddBlockMaterialToArray_Parms, NULL );

	return AddBlockMaterialToArray_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentMortar.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentMortar::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 56923 ];

	ASanctumTowerBaseAttachmentMortar_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentHolo.getDamageMultiplier
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            numberOfHoloHits               ( CPF_Parm )

float ASanctumTowerBaseAttachmentHolo::getDamageMultiplier ( int numberOfHoloHits )
{
	static UFunction* pFngetDamageMultiplier = NULL;

	if ( ! pFngetDamageMultiplier )
		pFngetDamageMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 47580 ];

	ASanctumTowerBaseAttachmentHolo_execgetDamageMultiplier_Parms getDamageMultiplier_Parms;
	getDamageMultiplier_Parms.numberOfHoloHits = numberOfHoloHits;

	this->ProcessEvent ( pFngetDamageMultiplier, &getDamageMultiplier_Parms, NULL );

	return getDamageMultiplier_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentHolo.GetShotThrough
// [0x00820102] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASanctumTowerBaseAttachmentHolo::GetShotThrough ( struct FImpactInfo Impact )
{
	static UFunction* pFnGetShotThrough = NULL;

	if ( ! pFnGetShotThrough )
		pFnGetShotThrough = (UFunction*) UObject::GObjObjects()->Data[ 56688 ];

	ASanctumTowerBaseAttachmentHolo_execGetShotThrough_Parms GetShotThrough_Parms;
	memcpy ( &GetShotThrough_Parms.Impact, &Impact, 0x50 );

	this->ProcessEvent ( pFnGetShotThrough, &GetShotThrough_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentHolo.GetStats
// [0x00422102] 
// Parameters infos:
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         statInfo                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumTowerBaseAttachmentHolo::GetStats ( int lvl, struct FStatInfoStruct* statInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 56682 ];

	ASanctumTowerBaseAttachmentHolo_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( statInfo )
		memcpy ( statInfo, &GetStats_Parms.statInfo, 0xAC );
};

// Function Sanctum.SanctumTowerBaseAttachmentHolo.Upgrade
// [0x00020002] 
// Parameters infos:
// int                            NewLevel                       ( CPF_Parm )

void ASanctumTowerBaseAttachmentHolo::Upgrade ( int NewLevel )
{
	static UFunction* pFnUpgrade = NULL;

	if ( ! pFnUpgrade )
		pFnUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 56680 ];

	ASanctumTowerBaseAttachmentHolo_execUpgrade_Parms Upgrade_Parms;
	Upgrade_Parms.NewLevel = NewLevel;

	this->ProcessEvent ( pFnUpgrade, &Upgrade_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentHolo.UpgradeMesh
// [0x00820102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentHolo::UpgradeMesh ( )
{
	static UFunction* pFnUpgradeMesh = NULL;

	if ( ! pFnUpgradeMesh )
		pFnUpgradeMesh = (UFunction*) UObject::GObjObjects()->Data[ 56677 ];

	ASanctumTowerBaseAttachmentHolo_execUpgradeMesh_Parms UpgradeMesh_Parms;

	this->ProcessEvent ( pFnUpgradeMesh, &UpgradeMesh_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentHolo.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASanctumTowerBaseAttachmentHolo::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 56672 ];

	ASanctumTowerBaseAttachmentHolo_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentHolo.PlayBuildSound
// [0x00020002] 
// Parameters infos:

void ASanctumTowerBaseAttachmentHolo::PlayBuildSound ( )
{
	static UFunction* pFnPlayBuildSound = NULL;

	if ( ! pFnPlayBuildSound )
		pFnPlayBuildSound = (UFunction*) UObject::GObjObjects()->Data[ 56671 ];

	ASanctumTowerBaseAttachmentHolo_execPlayBuildSound_Parms PlayBuildSound_Parms;

	this->ProcessEvent ( pFnPlayBuildSound, &PlayBuildSound_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentHolo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumTowerBaseAttachmentHolo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 56669 ];

	ASanctumTowerBaseAttachmentHolo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentHolo.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentHolo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 56668 ];

	ASanctumTowerBaseAttachmentHolo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentPenetrator.GetStats
// [0x00422102] 
// Parameters infos:
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         statInfo                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumTowerBaseAttachmentPenetrator::GetStats ( int lvl, struct FStatInfoStruct* statInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 57024 ];

	ASanctumTowerBaseAttachmentPenetrator_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( statInfo )
		memcpy ( statInfo, &GetStats_Parms.statInfo, 0xAC );
};

// Function Sanctum.SanctumTowerBaseAttachmentPenetrator.UpgradeMesh
// [0x00820102] 
// Parameters infos:
// int                            toLevel                        ( CPF_Parm )

void ASanctumTowerBaseAttachmentPenetrator::UpgradeMesh ( int toLevel )
{
	static UFunction* pFnUpgradeMesh = NULL;

	if ( ! pFnUpgradeMesh )
		pFnUpgradeMesh = (UFunction*) UObject::GObjObjects()->Data[ 57016 ];

	ASanctumTowerBaseAttachmentPenetrator_execUpgradeMesh_Parms UpgradeMesh_Parms;
	UpgradeMesh_Parms.toLevel = toLevel;

	this->ProcessEvent ( pFnUpgradeMesh, &UpgradeMesh_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentPenetrator.OnAnimEnd
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ASanctumTowerBaseAttachmentPenetrator::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 57012 ];

	ASanctumTowerBaseAttachmentPenetrator_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentPenetrator.HasDLC
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentPenetrator::HasDLC ( )
{
	static UFunction* pFnHasDLC = NULL;

	if ( ! pFnHasDLC )
		pFnHasDLC = (UFunction*) UObject::GObjObjects()->Data[ 57010 ];

	ASanctumTowerBaseAttachmentPenetrator_execHasDLC_Parms HasDLC_Parms;

	this->ProcessEvent ( pFnHasDLC, &HasDLC_Parms, NULL );

	return HasDLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentPenetrator.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentPenetrator::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57008 ];

	ASanctumTowerBaseAttachmentPenetrator_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentGauss.PlayIdleAnimation
// [0x00020100] 
// Parameters infos:

void ASanctumTowerBaseAttachmentGauss::PlayIdleAnimation ( )
{
	static UFunction* pFnPlayIdleAnimation = NULL;

	if ( ! pFnPlayIdleAnimation )
		pFnPlayIdleAnimation = (UFunction*) UObject::GObjObjects()->Data[ 56651 ];

	ASanctumTowerBaseAttachmentGauss_execPlayIdleAnimation_Parms PlayIdleAnimation_Parms;

	this->ProcessEvent ( pFnPlayIdleAnimation, &PlayIdleAnimation_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentGauss.PlayShootingAnimation
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentGauss::PlayShootingAnimation ( )
{
	static UFunction* pFnPlayShootingAnimation = NULL;

	if ( ! pFnPlayShootingAnimation )
		pFnPlayShootingAnimation = (UFunction*) UObject::GObjObjects()->Data[ 56650 ];

	ASanctumTowerBaseAttachmentGauss_execPlayShootingAnimation_Parms PlayShootingAnimation_Parms;

	this->ProcessEvent ( pFnPlayShootingAnimation, &PlayShootingAnimation_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentGauss.OnAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ASanctumTowerBaseAttachmentGauss::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 56646 ];

	ASanctumTowerBaseAttachmentGauss_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentGauss.UpgradeMesh
// [0x00820102] 
// Parameters infos:
// int                            toLevel                        ( CPF_Parm )

void ASanctumTowerBaseAttachmentGauss::UpgradeMesh ( int toLevel )
{
	static UFunction* pFnUpgradeMesh = NULL;

	if ( ! pFnUpgradeMesh )
		pFnUpgradeMesh = (UFunction*) UObject::GObjObjects()->Data[ 56638 ];

	ASanctumTowerBaseAttachmentGauss_execUpgradeMesh_Parms UpgradeMesh_Parms;
	UpgradeMesh_Parms.toLevel = toLevel;

	this->ProcessEvent ( pFnUpgradeMesh, &UpgradeMesh_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentGauss.GetStats
// [0x00422102] 
// Parameters infos:
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         statInfo                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumTowerBaseAttachmentGauss::GetStats ( int lvl, struct FStatInfoStruct* statInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 56630 ];

	ASanctumTowerBaseAttachmentGauss_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( statInfo )
		memcpy ( statInfo, &GetStats_Parms.statInfo, 0xAC );
};

// Function Sanctum.SanctumTowerBaseAttachmentGauss.HasDLC
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentGauss::HasDLC ( )
{
	static UFunction* pFnHasDLC = NULL;

	if ( ! pFnHasDLC )
		pFnHasDLC = (UFunction*) UObject::GObjObjects()->Data[ 56628 ];

	ASanctumTowerBaseAttachmentGauss_execHasDLC_Parms HasDLC_Parms;

	this->ProcessEvent ( pFnHasDLC, &HasDLC_Parms, NULL );

	return HasDLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentGauss.AddBlockMaterialToArray
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentGauss::AddBlockMaterialToArray ( )
{
	static UFunction* pFnAddBlockMaterialToArray = NULL;

	if ( ! pFnAddBlockMaterialToArray )
		pFnAddBlockMaterialToArray = (UFunction*) UObject::GObjObjects()->Data[ 56626 ];

	ASanctumTowerBaseAttachmentGauss_execAddBlockMaterialToArray_Parms AddBlockMaterialToArray_Parms;

	this->ProcessEvent ( pFnAddBlockMaterialToArray, &AddBlockMaterialToArray_Parms, NULL );

	return AddBlockMaterialToArray_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentGauss.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentGauss::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 56625 ];

	ASanctumTowerBaseAttachmentGauss_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentAmpField.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentAmpField::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 56352 ];

	ASanctumTowerBaseAttachmentAmpField_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentAmpField.HandleUntouch
// [0x00020102] 
// Parameters infos:
// class ASanctumPawn*            P                              ( CPF_Parm )

void ASanctumTowerBaseAttachmentAmpField::HandleUntouch ( class ASanctumPawn* P )
{
	static UFunction* pFnHandleUntouch = NULL;

	if ( ! pFnHandleUntouch )
		pFnHandleUntouch = (UFunction*) UObject::GObjObjects()->Data[ 56350 ];

	ASanctumTowerBaseAttachmentAmpField_execHandleUntouch_Parms HandleUntouch_Parms;
	HandleUntouch_Parms.P = P;

	this->ProcessEvent ( pFnHandleUntouch, &HandleUntouch_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentAmpField.HandleTouchingPawn
// [0x00020102] 
// Parameters infos:
// class ASanctumPawn*            P                              ( CPF_Parm )

void ASanctumTowerBaseAttachmentAmpField::HandleTouchingPawn ( class ASanctumPawn* P )
{
	static UFunction* pFnHandleTouchingPawn = NULL;

	if ( ! pFnHandleTouchingPawn )
		pFnHandleTouchingPawn = (UFunction*) UObject::GObjObjects()->Data[ 56348 ];

	ASanctumTowerBaseAttachmentAmpField_execHandleTouchingPawn_Parms HandleTouchingPawn_Parms;
	HandleTouchingPawn_Parms.P = P;

	this->ProcessEvent ( pFnHandleTouchingPawn, &HandleTouchingPawn_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentAmpField.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ASanctumTowerBaseAttachmentAmpField::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 56345 ];

	ASanctumTowerBaseAttachmentAmpField_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentAmpField.GetStats
// [0x00422102] 
// Parameters infos:
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         statInfo                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumTowerBaseAttachmentAmpField::GetStats ( int lvl, struct FStatInfoStruct* statInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 56339 ];

	ASanctumTowerBaseAttachmentAmpField_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( statInfo )
		memcpy ( statInfo, &GetStats_Parms.statInfo, 0xAC );
};

// Function Sanctum.SanctumTowerBaseAttachmentKillingFloor.GetStats
// [0x00422102] 
// Parameters infos:
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         statInfo                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumTowerBaseAttachmentKillingFloor::GetStats ( int lvl, struct FStatInfoStruct* statInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 56787 ];

	ASanctumTowerBaseAttachmentKillingFloor_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( statInfo )
		memcpy ( statInfo, &GetStats_Parms.statInfo, 0xAC );
};

// Function Sanctum.SanctumTowerBaseAttachmentKillingFloor.UpgradeMesh
// [0x00820102] 
// Parameters infos:
// int                            toLevel                        ( CPF_Parm )

void ASanctumTowerBaseAttachmentKillingFloor::UpgradeMesh ( int toLevel )
{
	static UFunction* pFnUpgradeMesh = NULL;

	if ( ! pFnUpgradeMesh )
		pFnUpgradeMesh = (UFunction*) UObject::GObjObjects()->Data[ 56784 ];

	ASanctumTowerBaseAttachmentKillingFloor_execUpgradeMesh_Parms UpgradeMesh_Parms;
	UpgradeMesh_Parms.toLevel = toLevel;

	this->ProcessEvent ( pFnUpgradeMesh, &UpgradeMesh_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentKillingFloor.createParticleSystem
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentKillingFloor::createParticleSystem ( )
{
	static UFunction* pFncreateParticleSystem = NULL;

	if ( ! pFncreateParticleSystem )
		pFncreateParticleSystem = (UFunction*) UObject::GObjObjects()->Data[ 56783 ];

	ASanctumTowerBaseAttachmentKillingFloor_execcreateParticleSystem_Parms createParticleSystem_Parms;

	this->ProcessEvent ( pFncreateParticleSystem, &createParticleSystem_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentKillingFloor.Kill
// [0x00820102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentKillingFloor::Kill ( )
{
	static UFunction* pFnKill = NULL;

	if ( ! pFnKill )
		pFnKill = (UFunction*) UObject::GObjObjects()->Data[ 56777 ];

	ASanctumTowerBaseAttachmentKillingFloor_execKill_Parms Kill_Parms;

	this->ProcessEvent ( pFnKill, &Kill_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentKillingFloor.SetFanSpeed
// [0x00020002] 
// Parameters infos:
// float                          Scale                          ( CPF_Parm )

void ASanctumTowerBaseAttachmentKillingFloor::SetFanSpeed ( float Scale )
{
	static UFunction* pFnSetFanSpeed = NULL;

	if ( ! pFnSetFanSpeed )
		pFnSetFanSpeed = (UFunction*) UObject::GObjObjects()->Data[ 56773 ];

	ASanctumTowerBaseAttachmentKillingFloor_execSetFanSpeed_Parms SetFanSpeed_Parms;
	SetFanSpeed_Parms.Scale = Scale;

	this->ProcessEvent ( pFnSetFanSpeed, &SetFanSpeed_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentKillingFloor.HandleTouchingPawn
// [0x00020102] 
// Parameters infos:
// class ASanctumPawn*            P                              ( CPF_Parm )

void ASanctumTowerBaseAttachmentKillingFloor::HandleTouchingPawn ( class ASanctumPawn* P )
{
	static UFunction* pFnHandleTouchingPawn = NULL;

	if ( ! pFnHandleTouchingPawn )
		pFnHandleTouchingPawn = (UFunction*) UObject::GObjObjects()->Data[ 56771 ];

	ASanctumTowerBaseAttachmentKillingFloor_execHandleTouchingPawn_Parms HandleTouchingPawn_Parms;
	HandleTouchingPawn_Parms.P = P;

	this->ProcessEvent ( pFnHandleTouchingPawn, &HandleTouchingPawn_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentKillingFloor.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumTowerBaseAttachmentKillingFloor::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 56769 ];

	ASanctumTowerBaseAttachmentKillingFloor_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentKillingFloor.HasDLC
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentKillingFloor::HasDLC ( )
{
	static UFunction* pFnHasDLC = NULL;

	if ( ! pFnHasDLC )
		pFnHasDLC = (UFunction*) UObject::GObjObjects()->Data[ 56767 ];

	ASanctumTowerBaseAttachmentKillingFloor_execHasDLC_Parms HasDLC_Parms;

	this->ProcessEvent ( pFnHasDLC, &HasDLC_Parms, NULL );

	return HasDLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentKillingFloor.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentKillingFloor::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 56766 ];

	ASanctumTowerBaseAttachmentKillingFloor_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentKillingFloor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentKillingFloor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 56765 ];

	ASanctumTowerBaseAttachmentKillingFloor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentKairos.UpgradeMesh
// [0x00820102] 
// Parameters infos:
// int                            toLevel                        ( CPF_Parm )

void ASanctumTowerBaseAttachmentKairos::UpgradeMesh ( int toLevel )
{
	static UFunction* pFnUpgradeMesh = NULL;

	if ( ! pFnUpgradeMesh )
		pFnUpgradeMesh = (UFunction*) UObject::GObjObjects()->Data[ 56739 ];

	ASanctumTowerBaseAttachmentKairos_execUpgradeMesh_Parms UpgradeMesh_Parms;
	UpgradeMesh_Parms.toLevel = toLevel;

	this->ProcessEvent ( pFnUpgradeMesh, &UpgradeMesh_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentKairos.GetStats
// [0x00422102] 
// Parameters infos:
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         statInfo                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumTowerBaseAttachmentKairos::GetStats ( int lvl, struct FStatInfoStruct* statInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 56729 ];

	ASanctumTowerBaseAttachmentKairos_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( statInfo )
		memcpy ( statInfo, &GetStats_Parms.statInfo, 0xAC );
};

// Function Sanctum.SanctumTowerBaseAttachmentKairos.ShootAnimDone
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentKairos::eventShootAnimDone ( )
{
	static UFunction* pFnShootAnimDone = NULL;

	if ( ! pFnShootAnimDone )
		pFnShootAnimDone = (UFunction*) UObject::GObjObjects()->Data[ 56728 ];

	ASanctumTowerBaseAttachmentKairos_eventShootAnimDone_Parms ShootAnimDone_Parms;

	this->ProcessEvent ( pFnShootAnimDone, &ShootAnimDone_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentKairos.PlayShootingAnimation
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentKairos::PlayShootingAnimation ( )
{
	static UFunction* pFnPlayShootingAnimation = NULL;

	if ( ! pFnPlayShootingAnimation )
		pFnPlayShootingAnimation = (UFunction*) UObject::GObjObjects()->Data[ 56727 ];

	ASanctumTowerBaseAttachmentKairos_execPlayShootingAnimation_Parms PlayShootingAnimation_Parms;

	this->ProcessEvent ( pFnPlayShootingAnimation, &PlayShootingAnimation_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentKairos.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentKairos::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 56726 ];

	ASanctumTowerBaseAttachmentKairos_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentKairos.AddBlockMaterialToArray
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentKairos::AddBlockMaterialToArray ( )
{
	static UFunction* pFnAddBlockMaterialToArray = NULL;

	if ( ! pFnAddBlockMaterialToArray )
		pFnAddBlockMaterialToArray = (UFunction*) UObject::GObjObjects()->Data[ 56724 ];

	ASanctumTowerBaseAttachmentKairos_execAddBlockMaterialToArray_Parms AddBlockMaterialToArray_Parms;

	this->ProcessEvent ( pFnAddBlockMaterialToArray, &AddBlockMaterialToArray_Parms, NULL );

	return AddBlockMaterialToArray_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentKairos.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentKairos::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 56723 ];

	ASanctumTowerBaseAttachmentKairos_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentAccelerator.GetStats
// [0x00422102] 
// Parameters infos:
// int                            lvl                            ( CPF_Parm )
// struct FStatInfoStruct         statInfo                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumTowerBaseAttachmentAccelerator::GetStats ( int lvl, struct FStatInfoStruct* statInfo )
{
	static UFunction* pFnGetStats = NULL;

	if ( ! pFnGetStats )
		pFnGetStats = (UFunction*) UObject::GObjObjects()->Data[ 56285 ];

	ASanctumTowerBaseAttachmentAccelerator_execGetStats_Parms GetStats_Parms;
	GetStats_Parms.lvl = lvl;

	this->ProcessEvent ( pFnGetStats, &GetStats_Parms, NULL );

	if ( statInfo )
		memcpy ( statInfo, &GetStats_Parms.statInfo, 0xAC );
};

// Function Sanctum.SanctumTowerBaseAttachmentAccelerator.PlayShootingAnimation
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentAccelerator::PlayShootingAnimation ( )
{
	static UFunction* pFnPlayShootingAnimation = NULL;

	if ( ! pFnPlayShootingAnimation )
		pFnPlayShootingAnimation = (UFunction*) UObject::GObjObjects()->Data[ 56283 ];

	ASanctumTowerBaseAttachmentAccelerator_execPlayShootingAnimation_Parms PlayShootingAnimation_Parms;

	this->ProcessEvent ( pFnPlayShootingAnimation, &PlayShootingAnimation_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentAccelerator.PlayIdleAnimation
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentAccelerator::PlayIdleAnimation ( )
{
	static UFunction* pFnPlayIdleAnimation = NULL;

	if ( ! pFnPlayIdleAnimation )
		pFnPlayIdleAnimation = (UFunction*) UObject::GObjObjects()->Data[ 56282 ];

	ASanctumTowerBaseAttachmentAccelerator_execPlayIdleAnimation_Parms PlayIdleAnimation_Parms;

	this->ProcessEvent ( pFnPlayIdleAnimation, &PlayIdleAnimation_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentAccelerator.OnAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ASanctumTowerBaseAttachmentAccelerator::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 56278 ];

	ASanctumTowerBaseAttachmentAccelerator_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentAccelerator.AddBlockMaterialToArray
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentAccelerator::AddBlockMaterialToArray ( )
{
	static UFunction* pFnAddBlockMaterialToArray = NULL;

	if ( ! pFnAddBlockMaterialToArray )
		pFnAddBlockMaterialToArray = (UFunction*) UObject::GObjObjects()->Data[ 56276 ];

	ASanctumTowerBaseAttachmentAccelerator_execAddBlockMaterialToArray_Parms AddBlockMaterialToArray_Parms;

	this->ProcessEvent ( pFnAddBlockMaterialToArray, &AddBlockMaterialToArray_Parms, NULL );

	return AddBlockMaterialToArray_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentAccelerator.HasDLC
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentAccelerator::HasDLC ( )
{
	static UFunction* pFnHasDLC = NULL;

	if ( ! pFnHasDLC )
		pFnHasDLC = (UFunction*) UObject::GObjObjects()->Data[ 56274 ];

	ASanctumTowerBaseAttachmentAccelerator_execHasDLC_Parms HasDLC_Parms;

	this->ProcessEvent ( pFnHasDLC, &HasDLC_Parms, NULL );

	return HasDLC_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentAccelerator.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentAccelerator::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 56272 ];

	ASanctumTowerBaseAttachmentAccelerator_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologramAntiAir.alignWithTower
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBaseAttachmentOffensive* offensive                      ( CPF_Parm )

bool ASanctumTowerHologramAntiAir::alignWithTower ( class ASanctumTowerBaseAttachmentOffensive* offensive )
{
	static UFunction* pFnalignWithTower = NULL;

	if ( ! pFnalignWithTower )
		pFnalignWithTower = (UFunction*) UObject::GObjObjects()->Data[ 57191 ];

	ASanctumTowerHologramAntiAir_execalignWithTower_Parms alignWithTower_Parms;
	alignWithTower_Parms.offensive = offensive;

	this->ProcessEvent ( pFnalignWithTower, &alignWithTower_Parms, NULL );

	return alignWithTower_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramAntiAir.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerHologramAntiAir::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57190 ];

	ASanctumTowerHologramAntiAir_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologramOffensive.alignWithTower
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBaseAttachmentOffensive* offensive                      ( CPF_Parm )

bool ASanctumTowerHologramOffensive::alignWithTower ( class ASanctumTowerBaseAttachmentOffensive* offensive )
{
	static UFunction* pFnalignWithTower = NULL;

	if ( ! pFnalignWithTower )
		pFnalignWithTower = (UFunction*) UObject::GObjObjects()->Data[ 57158 ];

	ASanctumTowerHologramOffensive_execalignWithTower_Parms alignWithTower_Parms;
	alignWithTower_Parms.offensive = offensive;

	this->ProcessEvent ( pFnalignWithTower, &alignWithTower_Parms, NULL );

	return alignWithTower_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramOffensive.AbleToBuildOnBase
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )
// int                            Rubel                          ( CPF_Parm )

unsigned char ASanctumTowerHologramOffensive::AbleToBuildOnBase ( class ASanctumTowerBase* TowerBase, int Rubel )
{
	static UFunction* pFnAbleToBuildOnBase = NULL;

	if ( ! pFnAbleToBuildOnBase )
		pFnAbleToBuildOnBase = (UFunction*) UObject::GObjObjects()->Data[ 57152 ];

	ASanctumTowerHologramOffensive_execAbleToBuildOnBase_Parms AbleToBuildOnBase_Parms;
	AbleToBuildOnBase_Parms.TowerBase = TowerBase;
	AbleToBuildOnBase_Parms.Rubel = Rubel;

	this->ProcessEvent ( pFnAbleToBuildOnBase, &AbleToBuildOnBase_Parms, NULL );

	return AbleToBuildOnBase_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramOffensive.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerHologramOffensive::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57151 ];

	ASanctumTowerHologramOffensive_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologramScatterLaser.alignWithTower
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBaseAttachmentOffensive* offensive                      ( CPF_Parm )

bool ASanctumTowerHologramScatterLaser::alignWithTower ( class ASanctumTowerBaseAttachmentOffensive* offensive )
{
	static UFunction* pFnalignWithTower = NULL;

	if ( ! pFnalignWithTower )
		pFnalignWithTower = (UFunction*) UObject::GObjObjects()->Data[ 57316 ];

	ASanctumTowerHologramScatterLaser_execalignWithTower_Parms alignWithTower_Parms;
	alignWithTower_Parms.offensive = offensive;

	this->ProcessEvent ( pFnalignWithTower, &alignWithTower_Parms, NULL );

	return alignWithTower_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramScatterLaser.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerHologramScatterLaser::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57315 ];

	ASanctumTowerHologramScatterLaser_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologramBlock.AbleToBuildOnBase
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )
// int                            Rubel                          ( CPF_Parm )

unsigned char ASanctumTowerHologramBlock::AbleToBuildOnBase ( class ASanctumTowerBase* TowerBase, int Rubel )
{
	static UFunction* pFnAbleToBuildOnBase = NULL;

	if ( ! pFnAbleToBuildOnBase )
		pFnAbleToBuildOnBase = (UFunction*) UObject::GObjObjects()->Data[ 57210 ];

	ASanctumTowerHologramBlock_execAbleToBuildOnBase_Parms AbleToBuildOnBase_Parms;
	AbleToBuildOnBase_Parms.TowerBase = TowerBase;
	AbleToBuildOnBase_Parms.Rubel = Rubel;

	this->ProcessEvent ( pFnAbleToBuildOnBase, &AbleToBuildOnBase_Parms, NULL );

	return AbleToBuildOnBase_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramBlock.AllDummysCanFindGoal
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )

bool ASanctumTowerHologramBlock::AllDummysCanFindGoal ( class ASanctumTowerBase* TowerBase )
{
	static UFunction* pFnAllDummysCanFindGoal = NULL;

	if ( ! pFnAllDummysCanFindGoal )
		pFnAllDummysCanFindGoal = (UFunction*) UObject::GObjObjects()->Data[ 57205 ];

	ASanctumTowerHologramBlock_execAllDummysCanFindGoal_Parms AllDummysCanFindGoal_Parms;
	AllDummysCanFindGoal_Parms.TowerBase = TowerBase;

	this->ProcessEvent ( pFnAllDummysCanFindGoal, &AllDummysCanFindGoal_Parms, NULL );

	return AllDummysCanFindGoal_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramBlock.fillArrayWithDummies
// [0x00020102] 
// Parameters infos:

void ASanctumTowerHologramBlock::fillArrayWithDummies ( )
{
	static UFunction* pFnfillArrayWithDummies = NULL;

	if ( ! pFnfillArrayWithDummies )
		pFnfillArrayWithDummies = (UFunction*) UObject::GObjObjects()->Data[ 57203 ];

	ASanctumTowerHologramBlock_execfillArrayWithDummies_Parms fillArrayWithDummies_Parms;

	this->ProcessEvent ( pFnfillArrayWithDummies, &fillArrayWithDummies_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologramBlock.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerHologramBlock::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57202 ];

	ASanctumTowerHologramBlock_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologramGatling.alignWithTower
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBaseAttachmentOffensive* offensive                      ( CPF_Parm )

bool ASanctumTowerHologramGatling::alignWithTower ( class ASanctumTowerBaseAttachmentOffensive* offensive )
{
	static UFunction* pFnalignWithTower = NULL;

	if ( ! pFnalignWithTower )
		pFnalignWithTower = (UFunction*) UObject::GObjObjects()->Data[ 57237 ];

	ASanctumTowerHologramGatling_execalignWithTower_Parms alignWithTower_Parms;
	alignWithTower_Parms.offensive = offensive;

	this->ProcessEvent ( pFnalignWithTower, &alignWithTower_Parms, NULL );

	return alignWithTower_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramGatling.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerHologramGatling::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57236 ];

	ASanctumTowerHologramGatling_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologramElevator.AbleToBuildOnBase
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )
// int                            Rubel                          ( CPF_Parm )

unsigned char ASanctumTowerHologramElevator::AbleToBuildOnBase ( class ASanctumTowerBase* TowerBase, int Rubel )
{
	static UFunction* pFnAbleToBuildOnBase = NULL;

	if ( ! pFnAbleToBuildOnBase )
		pFnAbleToBuildOnBase = (UFunction*) UObject::GObjObjects()->Data[ 57222 ];

	ASanctumTowerHologramElevator_execAbleToBuildOnBase_Parms AbleToBuildOnBase_Parms;
	AbleToBuildOnBase_Parms.TowerBase = TowerBase;
	AbleToBuildOnBase_Parms.Rubel = Rubel;

	this->ProcessEvent ( pFnAbleToBuildOnBase, &AbleToBuildOnBase_Parms, NULL );

	return AbleToBuildOnBase_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramElevator.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASanctumTowerHologramElevator::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57221 ];

	ASanctumTowerHologramElevator_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologramLightning.alignWithTower
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBaseAttachmentOffensive* offensive                      ( CPF_Parm )

bool ASanctumTowerHologramLightning::alignWithTower ( class ASanctumTowerBaseAttachmentOffensive* offensive )
{
	static UFunction* pFnalignWithTower = NULL;

	if ( ! pFnalignWithTower )
		pFnalignWithTower = (UFunction*) UObject::GObjObjects()->Data[ 57284 ];

	ASanctumTowerHologramLightning_execalignWithTower_Parms alignWithTower_Parms;
	alignWithTower_Parms.offensive = offensive;

	this->ProcessEvent ( pFnalignWithTower, &alignWithTower_Parms, NULL );

	return alignWithTower_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramLightning.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerHologramLightning::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57283 ];

	ASanctumTowerHologramLightning_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologramMortar.alignWithTower
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBaseAttachmentOffensive* offensive                      ( CPF_Parm )

bool ASanctumTowerHologramMortar::alignWithTower ( class ASanctumTowerBaseAttachmentOffensive* offensive )
{
	static UFunction* pFnalignWithTower = NULL;

	if ( ! pFnalignWithTower )
		pFnalignWithTower = (UFunction*) UObject::GObjObjects()->Data[ 57294 ];

	ASanctumTowerHologramMortar_execalignWithTower_Parms alignWithTower_Parms;
	alignWithTower_Parms.offensive = offensive;

	this->ProcessEvent ( pFnalignWithTower, &alignWithTower_Parms, NULL );

	return alignWithTower_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramMortar.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerHologramMortar::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57293 ];

	ASanctumTowerHologramMortar_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologramSlowField.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerHologramSlowField::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57331 ];

	ASanctumTowerHologramSlowField_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologramField.AbleToBuildOnBase
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )
// int                            Rubel                          ( CPF_Parm )

unsigned char ASanctumTowerHologramField::AbleToBuildOnBase ( class ASanctumTowerBase* TowerBase, int Rubel )
{
	static UFunction* pFnAbleToBuildOnBase = NULL;

	if ( ! pFnAbleToBuildOnBase )
		pFnAbleToBuildOnBase = (UFunction*) UObject::GObjObjects()->Data[ 57175 ];

	ASanctumTowerHologramField_execAbleToBuildOnBase_Parms AbleToBuildOnBase_Parms;
	AbleToBuildOnBase_Parms.TowerBase = TowerBase;
	AbleToBuildOnBase_Parms.Rubel = Rubel;

	this->ProcessEvent ( pFnAbleToBuildOnBase, &AbleToBuildOnBase_Parms, NULL );

	return AbleToBuildOnBase_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramHolo.AbleToBuildOnBase
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )
// int                            Rubel                          ( CPF_Parm )

unsigned char ASanctumTowerHologramHolo::AbleToBuildOnBase ( class ASanctumTowerBase* TowerBase, int Rubel )
{
	static UFunction* pFnAbleToBuildOnBase = NULL;

	if ( ! pFnAbleToBuildOnBase )
		pFnAbleToBuildOnBase = (UFunction*) UObject::GObjObjects()->Data[ 57261 ];

	ASanctumTowerHologramHolo_execAbleToBuildOnBase_Parms AbleToBuildOnBase_Parms;
	AbleToBuildOnBase_Parms.TowerBase = TowerBase;
	AbleToBuildOnBase_Parms.Rubel = Rubel;

	this->ProcessEvent ( pFnAbleToBuildOnBase, &AbleToBuildOnBase_Parms, NULL );

	return AbleToBuildOnBase_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramHolo.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASanctumTowerHologramHolo::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57260 ];

	ASanctumTowerHologramHolo_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologramPenetrator.alignWithTower
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBaseAttachmentOffensive* offensive                      ( CPF_Parm )

bool ASanctumTowerHologramPenetrator::alignWithTower ( class ASanctumTowerBaseAttachmentOffensive* offensive )
{
	static UFunction* pFnalignWithTower = NULL;

	if ( ! pFnalignWithTower )
		pFnalignWithTower = (UFunction*) UObject::GObjObjects()->Data[ 57304 ];

	ASanctumTowerHologramPenetrator_execalignWithTower_Parms alignWithTower_Parms;
	alignWithTower_Parms.offensive = offensive;

	this->ProcessEvent ( pFnalignWithTower, &alignWithTower_Parms, NULL );

	return alignWithTower_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramPenetrator.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerHologramPenetrator::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57303 ];

	ASanctumTowerHologramPenetrator_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologramGauss.alignWithTower
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBaseAttachmentOffensive* offensive                      ( CPF_Parm )

bool ASanctumTowerHologramGauss::alignWithTower ( class ASanctumTowerBaseAttachmentOffensive* offensive )
{
	static UFunction* pFnalignWithTower = NULL;

	if ( ! pFnalignWithTower )
		pFnalignWithTower = (UFunction*) UObject::GObjObjects()->Data[ 57250 ];

	ASanctumTowerHologramGauss_execalignWithTower_Parms alignWithTower_Parms;
	alignWithTower_Parms.offensive = offensive;

	this->ProcessEvent ( pFnalignWithTower, &alignWithTower_Parms, NULL );

	return alignWithTower_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramGauss.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerHologramGauss::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57249 ];

	ASanctumTowerHologramGauss_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologramAmpField.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerHologramAmpField::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57182 ];

	ASanctumTowerHologramAmpField_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologramKillingFloor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerHologramKillingFloor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57279 ];

	ASanctumTowerHologramKillingFloor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologramKairos.alignWithTower
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBaseAttachmentOffensive* offensive                      ( CPF_Parm )

bool ASanctumTowerHologramKairos::alignWithTower ( class ASanctumTowerBaseAttachmentOffensive* offensive )
{
	static UFunction* pFnalignWithTower = NULL;

	if ( ! pFnalignWithTower )
		pFnalignWithTower = (UFunction*) UObject::GObjObjects()->Data[ 57272 ];

	ASanctumTowerHologramKairos_execalignWithTower_Parms alignWithTower_Parms;
	alignWithTower_Parms.offensive = offensive;

	this->ProcessEvent ( pFnalignWithTower, &alignWithTower_Parms, NULL );

	return alignWithTower_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramKairos.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerHologramKairos::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57271 ];

	ASanctumTowerHologramKairos_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologramAccelerator.alignWithTower
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBaseAttachmentOffensive* offensive                      ( CPF_Parm )

bool ASanctumTowerHologramAccelerator::alignWithTower ( class ASanctumTowerBaseAttachmentOffensive* offensive )
{
	static UFunction* pFnalignWithTower = NULL;

	if ( ! pFnalignWithTower )
		pFnalignWithTower = (UFunction*) UObject::GObjObjects()->Data[ 57166 ];

	ASanctumTowerHologramAccelerator_execalignWithTower_Parms alignWithTower_Parms;
	alignWithTower_Parms.offensive = offensive;

	this->ProcessEvent ( pFnalignWithTower, &alignWithTower_Parms, NULL );

	return alignWithTower_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramAccelerator.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerHologramAccelerator::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57165 ];

	ASanctumTowerHologramAccelerator_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumPlayerInput.PlayerInput
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void USanctumPlayerInput::eventPlayerInput ( float DeltaTime )
{
	static UFunction* pFnPlayerInput = NULL;

	if ( ! pFnPlayerInput )
		pFnPlayerInput = (UFunction*) UObject::GObjObjects()->Data[ 54321 ];

	USanctumPlayerInput_eventPlayerInput_Parms PlayerInput_Parms;
	PlayerInput_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerInput, &PlayerInput_Parms, NULL );
};

// Function Sanctum.SanctumPlayerInput.Save
// [0x00020002] 
// Parameters infos:

void USanctumPlayerInput::Save ( )
{
	static UFunction* pFnSave = NULL;

	if ( ! pFnSave )
		pFnSave = (UFunction*) UObject::GObjObjects()->Data[ 54320 ];

	USanctumPlayerInput_execSave_Parms Save_Parms;

	this->ProcessEvent ( pFnSave, &Save_Parms, NULL );
};

// Function Sanctum.SanctumPlayerInput.ResetKeybind
// [0x00820002] 
// Parameters infos:

void USanctumPlayerInput::ResetKeybind ( )
{
	static UFunction* pFnResetKeybind = NULL;

	if ( ! pFnResetKeybind )
		pFnResetKeybind = (UFunction*) UObject::GObjObjects()->Data[ 54316 ];

	USanctumPlayerInput_execResetKeybind_Parms ResetKeybind_Parms;

	this->ProcessEvent ( pFnResetKeybind, &ResetKeybind_Parms, NULL );
};

// Function Sanctum.SanctumPlayerInput.notifyKeyListeners
// [0x00020102] 
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )

void USanctumPlayerInput::notifyKeyListeners ( struct FName Key )
{
	static UFunction* pFnnotifyKeyListeners = NULL;

	if ( ! pFnnotifyKeyListeners )
		pFnnotifyKeyListeners = (UFunction*) UObject::GObjObjects()->Data[ 54312 ];

	USanctumPlayerInput_execnotifyKeyListeners_Parms notifyKeyListeners_Parms;
	memcpy ( &notifyKeyListeners_Parms.Key, &Key, 0x8 );

	this->ProcessEvent ( pFnnotifyKeyListeners, &notifyKeyListeners_Parms, NULL );
};

// Function Sanctum.SanctumPlayerInput.unregisterKeyListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         keyListener                    ( CPF_Parm | CPF_NeedCtorLink )

void USanctumPlayerInput::unregisterKeyListener ( struct FScriptDelegate keyListener )
{
	static UFunction* pFnunregisterKeyListener = NULL;

	if ( ! pFnunregisterKeyListener )
		pFnunregisterKeyListener = (UFunction*) UObject::GObjObjects()->Data[ 54310 ];

	USanctumPlayerInput_execunregisterKeyListener_Parms unregisterKeyListener_Parms;
	memcpy ( &unregisterKeyListener_Parms.keyListener, &keyListener, 0xC );

	this->ProcessEvent ( pFnunregisterKeyListener, &unregisterKeyListener_Parms, NULL );
};

// Function Sanctum.SanctumPlayerInput.registerKeyListener
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         Listener                       ( CPF_Parm | CPF_NeedCtorLink )

void USanctumPlayerInput::registerKeyListener ( struct FScriptDelegate Listener )
{
	static UFunction* pFnregisterKeyListener = NULL;

	if ( ! pFnregisterKeyListener )
		pFnregisterKeyListener = (UFunction*) UObject::GObjObjects()->Data[ 54308 ];

	USanctumPlayerInput_execregisterKeyListener_Parms registerKeyListener_Parms;
	memcpy ( &registerKeyListener_Parms.Listener, &Listener, 0xC );

	this->ProcessEvent ( pFnregisterKeyListener, &registerKeyListener_Parms, NULL );
};

// Function Sanctum.SanctumPlayerInput.KeyChanged
// [0x00120000] 
// Parameters infos:
// struct FName                   newKey                         ( CPF_Parm )

void USanctumPlayerInput::KeyChanged ( struct FName newKey )
{
	static UFunction* pFnKeyChanged = NULL;

	if ( ! pFnKeyChanged )
		pFnKeyChanged = (UFunction*) UObject::GObjObjects()->Data[ 54295 ];

	USanctumPlayerInput_execKeyChanged_Parms KeyChanged_Parms;
	memcpy ( &KeyChanged_Parms.newKey, &newKey, 0x8 );

	this->ProcessEvent ( pFnKeyChanged, &KeyChanged_Parms, NULL );
};

// Function Sanctum.SanctumFamilyInfo.GetCharacterMesh
// [0x00022002] 
// Parameters infos:
// class USkeletalMesh*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USkeletalMesh* USanctumFamilyInfo::GetCharacterMesh ( )
{
	static UFunction* pFnGetCharacterMesh = NULL;

	if ( ! pFnGetCharacterMesh )
		pFnGetCharacterMesh = (UFunction*) UObject::GObjObjects()->Data[ 47901 ];

	USanctumFamilyInfo_execGetCharacterMesh_Parms GetCharacterMesh_Parms;

	this->ProcessEvent ( pFnGetCharacterMesh, &GetCharacterMesh_Parms, NULL );

	return GetCharacterMesh_Parms.ReturnValue;
};

// Function Sanctum.SanctumFamilyInfo.GetSlotColor
// [0x00022002] 
// Parameters infos:
// struct FLinearColor            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Slot                           ( CPF_Parm )

struct FLinearColor USanctumFamilyInfo::GetSlotColor ( int Slot )
{
	static UFunction* pFnGetSlotColor = NULL;

	if ( ! pFnGetSlotColor )
		pFnGetSlotColor = (UFunction*) UObject::GObjObjects()->Data[ 47898 ];

	USanctumFamilyInfo_execGetSlotColor_Parms GetSlotColor_Parms;
	GetSlotColor_Parms.Slot = Slot;

	this->ProcessEvent ( pFnGetSlotColor, &GetSlotColor_Parms, NULL );

	return GetSlotColor_Parms.ReturnValue;
};

// Function Sanctum.SanctumVersion.GetBuildVersion
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USanctumVersion::GetBuildVersion ( )
{
	static UFunction* pFnGetBuildVersion = NULL;

	if ( ! pFnGetBuildVersion )
		pFnGetBuildVersion = (UFunction*) UObject::GObjObjects()->Data[ 57389 ];

	USanctumVersion_execGetBuildVersion_Parms GetBuildVersion_Parms;

	this->ProcessEvent ( pFnGetBuildVersion, &GetBuildVersion_Parms, NULL );

	return GetBuildVersion_Parms.ReturnValue;
};

// Function Sanctum.SanctumVersion.GetMinorVersion
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USanctumVersion::GetMinorVersion ( )
{
	static UFunction* pFnGetMinorVersion = NULL;

	if ( ! pFnGetMinorVersion )
		pFnGetMinorVersion = (UFunction*) UObject::GObjObjects()->Data[ 57387 ];

	USanctumVersion_execGetMinorVersion_Parms GetMinorVersion_Parms;

	this->ProcessEvent ( pFnGetMinorVersion, &GetMinorVersion_Parms, NULL );

	return GetMinorVersion_Parms.ReturnValue;
};

// Function Sanctum.SanctumVersion.GetMajorVersion
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USanctumVersion::GetMajorVersion ( )
{
	static UFunction* pFnGetMajorVersion = NULL;

	if ( ! pFnGetMajorVersion )
		pFnGetMajorVersion = (UFunction*) UObject::GObjObjects()->Data[ 57385 ];

	USanctumVersion_execGetMajorVersion_Parms GetMajorVersion_Parms;

	this->ProcessEvent ( pFnGetMajorVersion, &GetMajorVersion_Parms, NULL );

	return GetMajorVersion_Parms.ReturnValue;
};

// Function Sanctum.SanctumVersion.GetVersionString
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USanctumVersion::GetVersionString ( )
{
	static UFunction* pFnGetVersionString = NULL;

	if ( ! pFnGetVersionString )
		pFnGetVersionString = (UFunction*) UObject::GObjObjects()->Data[ 46360 ];

	USanctumVersion_execGetVersionString_Parms GetVersionString_Parms;

	this->ProcessEvent ( pFnGetVersionString, &GetVersionString_Parms, NULL );

	return GetVersionString_Parms.ReturnValue;
};

// Function Sanctum.SanctumLocalizationHelper.FindIdInArray
// [0x00422002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< struct FLocalizedUIContent > idArray                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Id                             ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 LocalizedName                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USanctumLocalizationHelper::FindIdInArray ( TArray< struct FLocalizedUIContent > idArray, struct FString Id, struct FString* LocalizedName )
{
	static UFunction* pFnFindIdInArray = NULL;

	if ( ! pFnFindIdInArray )
		pFnFindIdInArray = (UFunction*) UObject::GObjObjects()->Data[ 52404 ];

	USanctumLocalizationHelper_execFindIdInArray_Parms FindIdInArray_Parms;
	memcpy ( &FindIdInArray_Parms.idArray, &idArray, 0xC );
	memcpy ( &FindIdInArray_Parms.Id, &Id, 0xC );

	this->ProcessEvent ( pFnFindIdInArray, &FindIdInArray_Parms, NULL );

	if ( LocalizedName )
		memcpy ( LocalizedName, &FindIdInArray_Parms.LocalizedName, 0xC );

	return FindIdInArray_Parms.ReturnValue;
};

// Function Sanctum.SanctumLocalizationHelper.FindLocalizedName
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Id                             ( CPF_Parm | CPF_NeedCtorLink )

struct FString USanctumLocalizationHelper::FindLocalizedName ( struct FString Id )
{
	static UFunction* pFnFindLocalizedName = NULL;

	if ( ! pFnFindLocalizedName )
		pFnFindLocalizedName = (UFunction*) UObject::GObjObjects()->Data[ 46435 ];

	USanctumLocalizationHelper_execFindLocalizedName_Parms FindLocalizedName_Parms;
	memcpy ( &FindLocalizedName_Parms.Id, &Id, 0xC );

	this->ProcessEvent ( pFnFindLocalizedName, &FindLocalizedName_Parms, NULL );

	return FindLocalizedName_Parms.ReturnValue;
};

// Function Sanctum.SanctumLocalizationHelper.SetLocalizedText
// [0x00026002] 
// Parameters infos:
// class UGFxObject*              Obj                            ( CPF_Parm )
// struct FString                 Id                             ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 VarName                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void USanctumLocalizationHelper::SetLocalizedText ( class UGFxObject* Obj, struct FString Id, struct FString VarName )
{
	static UFunction* pFnSetLocalizedText = NULL;

	if ( ! pFnSetLocalizedText )
		pFnSetLocalizedText = (UFunction*) UObject::GObjObjects()->Data[ 52398 ];

	USanctumLocalizationHelper_execSetLocalizedText_Parms SetLocalizedText_Parms;
	SetLocalizedText_Parms.Obj = Obj;
	memcpy ( &SetLocalizedText_Parms.Id, &Id, 0xC );
	memcpy ( &SetLocalizedText_Parms.VarName, &VarName, 0xC );

	this->ProcessEvent ( pFnSetLocalizedText, &SetLocalizedText_Parms, NULL );
};

// Function Sanctum.SanctumLocalizationHelper.HandleLocalizedObject
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool USanctumLocalizationHelper::HandleLocalizedObject ( class UGFxObject* Widget )
{
	static UFunction* pFnHandleLocalizedObject = NULL;

	if ( ! pFnHandleLocalizedObject )
		pFnHandleLocalizedObject = (UFunction*) UObject::GObjObjects()->Data[ 50643 ];

	USanctumLocalizationHelper_execHandleLocalizedObject_Parms HandleLocalizedObject_Parms;
	HandleLocalizedObject_Parms.Widget = Widget;

	this->ProcessEvent ( pFnHandleLocalizedObject, &HandleLocalizedObject_Parms, NULL );

	return HandleLocalizedObject_Parms.ReturnValue;
};

// Function Sanctum.SanctumCustomInput.SetButtonNames
// [0x00020002] 
// Parameters infos:

void USanctumCustomInput::SetButtonNames ( )
{
	static UFunction* pFnSetButtonNames = NULL;

	if ( ! pFnSetButtonNames )
		pFnSetButtonNames = (UFunction*) UObject::GObjObjects()->Data[ 46493 ];

	USanctumCustomInput_execSetButtonNames_Parms SetButtonNames_Parms;

	this->ProcessEvent ( pFnSetButtonNames, &SetButtonNames_Parms, NULL );
};

// Function Sanctum.SanctumCustomInput.CallActionFunc
// [0x00020002] 
// Parameters infos:
// struct FString                 KeyName                        ( CPF_Parm | CPF_NeedCtorLink )
// class UGFxObject*              Button                         ( CPF_Parm )

void USanctumCustomInput::CallActionFunc ( struct FString KeyName, class UGFxObject* Button )
{
	static UFunction* pFnCallActionFunc = NULL;

	if ( ! pFnCallActionFunc )
		pFnCallActionFunc = (UFunction*) UObject::GObjObjects()->Data[ 46490 ];

	USanctumCustomInput_execCallActionFunc_Parms CallActionFunc_Parms;
	memcpy ( &CallActionFunc_Parms.KeyName, &KeyName, 0xC );
	CallActionFunc_Parms.Button = Button;

	this->ProcessEvent ( pFnCallActionFunc, &CallActionFunc_Parms, NULL );
};

// Function Sanctum.SanctumCustomInput.StartBindKey
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              Button                         ( CPF_Parm )

void USanctumCustomInput::StartBindKey ( class UGFxObject* Button )
{
	static UFunction* pFnStartBindKey = NULL;

	if ( ! pFnStartBindKey )
		pFnStartBindKey = (UFunction*) UObject::GObjObjects()->Data[ 46488 ];

	USanctumCustomInput_execStartBindKey_Parms StartBindKey_Parms;
	StartBindKey_Parms.Button = Button;

	this->ProcessEvent ( pFnStartBindKey, &StartBindKey_Parms, NULL );
};

// Function Sanctum.SanctumCustomInput.FindKey
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

struct FString USanctumCustomInput::FindKey ( struct FString Command )
{
	static UFunction* pFnFindKey = NULL;

	if ( ! pFnFindKey )
		pFnFindKey = (UFunction*) UObject::GObjObjects()->Data[ 46485 ];

	USanctumCustomInput_execFindKey_Parms FindKey_Parms;
	memcpy ( &FindKey_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnFindKey, &FindKey_Parms, NULL );

	return FindKey_Parms.ReturnValue;
};

// Function Sanctum.SanctumCustomInput.Init
// [0x00024002] 
// Parameters infos:
// class ULocalPlayer*            LocPlay                        ( CPF_OptionalParm | CPF_Parm )

void USanctumCustomInput::Init ( class ULocalPlayer* LocPlay )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 46483 ];

	USanctumCustomInput_execInit_Parms Init_Parms;
	Init_Parms.LocPlay = LocPlay;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumDamageType.SpawnGibEffects
// [0x00022000] 
// Parameters infos:
// class ASanctumGib*             Gib                            ( CPF_Parm )

void USanctumDamageType::SpawnGibEffects ( class ASanctumGib* Gib )
{
	static UFunction* pFnSpawnGibEffects = NULL;

	if ( ! pFnSpawnGibEffects )
		pFnSpawnGibEffects = (UFunction*) UObject::GObjObjects()->Data[ 46507 ];

	USanctumDamageType_execSpawnGibEffects_Parms SpawnGibEffects_Parms;
	SpawnGibEffects_Parms.Gib = Gib;

	this->ProcessEvent ( pFnSpawnGibEffects, &SpawnGibEffects_Parms, NULL );
};

// Function Sanctum.SanctumDamageType.ShouldGib
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumPawn*            Pawn                           ( CPF_Parm )

bool USanctumDamageType::ShouldGib ( class ASanctumPawn* Pawn )
{
	static UFunction* pFnShouldGib = NULL;

	if ( ! pFnShouldGib )
		pFnShouldGib = (UFunction*) UObject::GObjObjects()->Data[ 46504 ];

	USanctumDamageType_execShouldGib_Parms ShouldGib_Parms;
	ShouldGib_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnShouldGib, &ShouldGib_Parms, NULL );

	return ShouldGib_Parms.ReturnValue;
};

// Function Sanctum.SanctumSettingsCommon.UpdateFromURL
// [0x00420002] 
// Parameters infos:
// class AGameInfo*               Game                           ( CPF_Parm )
// struct FString                 URL                            ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USanctumSettingsCommon::UpdateFromURL ( class AGameInfo* Game, struct FString* URL )
{
	static UFunction* pFnUpdateFromURL = NULL;

	if ( ! pFnUpdateFromURL )
		pFnUpdateFromURL = (UFunction*) UObject::GObjObjects()->Data[ 55490 ];

	USanctumSettingsCommon_execUpdateFromURL_Parms UpdateFromURL_Parms;
	UpdateFromURL_Parms.Game = Game;

	this->ProcessEvent ( pFnUpdateFromURL, &UpdateFromURL_Parms, NULL );

	if ( URL )
		memcpy ( URL, &UpdateFromURL_Parms.URL, 0xC );
};

// Function Sanctum.SanctumEmitter.SetLightEnvironment
// [0x00020002] 
// Parameters infos:
// class ULightEnvironmentComponent* Light                          ( CPF_Parm | CPF_EditInline )

void ASanctumEmitter::SetLightEnvironment ( class ULightEnvironmentComponent* Light )
{
	static UFunction* pFnSetLightEnvironment = NULL;

	if ( ! pFnSetLightEnvironment )
		pFnSetLightEnvironment = (UFunction*) UObject::GObjObjects()->Data[ 46581 ];

	ASanctumEmitter_execSetLightEnvironment_Parms SetLightEnvironment_Parms;
	SetLightEnvironment_Parms.Light = Light;

	this->ProcessEvent ( pFnSetLightEnvironment, &SetLightEnvironment_Parms, NULL );
};

// Function Sanctum.SanctumEmitter.SetTemplate
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// class UParticleSystem*         NewTemplate                    ( CPF_Parm )
// unsigned long                  bDestroyOnFinish               ( CPF_OptionalParm | CPF_Parm )

void ASanctumEmitter::eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = (UFunction*) UObject::GObjObjects()->Data[ 46576 ];

	ASanctumEmitter_eventSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;
	SetTemplate_Parms.bDestroyOnFinish = bDestroyOnFinish;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );
};

// Function Sanctum.SanctumEmitter.GetTemplateForDistance
// [0x00422003] ( FUNC_Final )
// Parameters infos:
// class UParticleSystem*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// class AWorldInfo*              WI                             ( CPF_Parm )
// TArray< struct FDistanceBasedParticleTemplate > TemplateList                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class UParticleSystem* ASanctumEmitter::GetTemplateForDistance ( struct FVector SpawnLocation, class AWorldInfo* WI, TArray< struct FDistanceBasedParticleTemplate >* TemplateList )
{
	static UFunction* pFnGetTemplateForDistance = NULL;

	if ( ! pFnGetTemplateForDistance )
		pFnGetTemplateForDistance = (UFunction*) UObject::GObjObjects()->Data[ 46567 ];

	ASanctumEmitter_execGetTemplateForDistance_Parms GetTemplateForDistance_Parms;
	memcpy ( &GetTemplateForDistance_Parms.SpawnLocation, &SpawnLocation, 0xC );
	GetTemplateForDistance_Parms.WI = WI;

	this->ProcessEvent ( pFnGetTemplateForDistance, &GetTemplateForDistance_Parms, NULL );

	if ( TemplateList )
		memcpy ( TemplateList, &GetTemplateForDistance_Parms.TemplateList, 0xC );

	return GetTemplateForDistance_Parms.ReturnValue;
};

// Function Sanctum.SanctumReplicatedEmitter.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASanctumReplicatedEmitter::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 46588 ];

	ASanctumReplicatedEmitter_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumEmit_Teleport.Timer
// [0x00020102] 
// Parameters infos:

void ASanctumEmit_Teleport::Timer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 46603 ];

	ASanctumEmit_Teleport_execTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Sanctum.SanctumEmit_Teleport.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASanctumEmit_Teleport::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 46602 ];

	ASanctumEmit_Teleport_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumEmit_Teleport.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumEmit_Teleport::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 46594 ];

	ASanctumEmit_Teleport_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Sanctum.SanctumEmitterPool.ClearPathingPool
// [0x00020102] 
// Parameters infos:

void ASanctumEmitterPool::ClearPathingPool ( )
{
	static UFunction* pFnClearPathingPool = NULL;

	if ( ! pFnClearPathingPool )
		pFnClearPathingPool = (UFunction*) UObject::GObjObjects()->Data[ 46625 ];

	ASanctumEmitterPool_execClearPathingPool_Parms ClearPathingPool_Parms;

	this->ProcessEvent ( pFnClearPathingPool, &ClearPathingPool_Parms, NULL );
};

// Function Sanctum.SanctumEmitterPool.SpawnPathingEmitter
// [0x00024102] 
// Parameters infos:
// class UParticleSystemComponent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UParticleSystem*         EmitterTemplate                ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  AttachToActor                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_OptionalParm | CPF_Parm )
// int                            MaxDLEPooledReuses             ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bInheritScaleFromBase          ( CPF_OptionalParm | CPF_Parm )

class UParticleSystemComponent* ASanctumEmitterPool::SpawnPathingEmitter ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* AttachToActor, class AActor* InInstigator, int MaxDLEPooledReuses, unsigned long bInheritScaleFromBase )
{
	static UFunction* pFnSpawnPathingEmitter = NULL;

	if ( ! pFnSpawnPathingEmitter )
		pFnSpawnPathingEmitter = (UFunction*) UObject::GObjObjects()->Data[ 46616 ];

	ASanctumEmitterPool_execSpawnPathingEmitter_Parms SpawnPathingEmitter_Parms;
	SpawnPathingEmitter_Parms.EmitterTemplate = EmitterTemplate;
	memcpy ( &SpawnPathingEmitter_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &SpawnPathingEmitter_Parms.SpawnRotation, &SpawnRotation, 0xC );
	SpawnPathingEmitter_Parms.AttachToActor = AttachToActor;
	SpawnPathingEmitter_Parms.InInstigator = InInstigator;
	SpawnPathingEmitter_Parms.MaxDLEPooledReuses = MaxDLEPooledReuses;
	SpawnPathingEmitter_Parms.bInheritScaleFromBase = bInheritScaleFromBase;

	this->ProcessEvent ( pFnSpawnPathingEmitter, &SpawnPathingEmitter_Parms, NULL );

	return SpawnPathingEmitter_Parms.ReturnValue;
};

// Function Sanctum.SanctumEmitterPool.PreBeginPlay
// [0x00020102] 
// Parameters infos:

void ASanctumEmitterPool::PreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 46615 ];

	ASanctumEmitterPool_execPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSlow.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumProjectileSlow::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 54740 ];

	ASanctumProjectileSlow_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSlow.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectileSlow::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 54737 ];

	ASanctumProjectileSlow_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSlow.RevertSlow
// [0x00020102] 
// Parameters infos:

void ASanctumProjectileSlow::RevertSlow ( )
{
	static UFunction* pFnRevertSlow = NULL;

	if ( ! pFnRevertSlow )
		pFnRevertSlow = (UFunction*) UObject::GObjObjects()->Data[ 54735 ];

	ASanctumProjectileSlow_execRevertSlow_Parms RevertSlow_Parms;

	this->ProcessEvent ( pFnRevertSlow, &RevertSlow_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSlow.SlowedDied
// [0x00020102] 
// Parameters infos:
// class ASanctumEnemy*           Enemy                          ( CPF_Parm )

void ASanctumProjectileSlow::SlowedDied ( class ASanctumEnemy* Enemy )
{
	static UFunction* pFnSlowedDied = NULL;

	if ( ! pFnSlowedDied )
		pFnSlowedDied = (UFunction*) UObject::GObjObjects()->Data[ 54733 ];

	ASanctumProjectileSlow_execSlowedDied_Parms SlowedDied_Parms;
	SlowedDied_Parms.Enemy = Enemy;

	this->ProcessEvent ( pFnSlowedDied, &SlowedDied_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSlow.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumProjectileSlow::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 54727 ];

	ASanctumProjectileSlow_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSlow.RemoveFromAffected
// [0x00020102] 
// Parameters infos:
// class ASanctumEnemy*           Enemy                          ( CPF_Parm )

void ASanctumProjectileSlow::RemoveFromAffected ( class ASanctumEnemy* Enemy )
{
	static UFunction* pFnRemoveFromAffected = NULL;

	if ( ! pFnRemoveFromAffected )
		pFnRemoveFromAffected = (UFunction*) UObject::GObjObjects()->Data[ 54725 ];

	ASanctumProjectileSlow_execRemoveFromAffected_Parms RemoveFromAffected_Parms;
	RemoveFromAffected_Parms.Enemy = Enemy;

	this->ProcessEvent ( pFnRemoveFromAffected, &RemoveFromAffected_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSlow.AddToAffected
// [0x00020102] 
// Parameters infos:
// class ASanctumEnemy*           Enemy                          ( CPF_Parm )

void ASanctumProjectileSlow::AddToAffected ( class ASanctumEnemy* Enemy )
{
	static UFunction* pFnAddToAffected = NULL;

	if ( ! pFnAddToAffected )
		pFnAddToAffected = (UFunction*) UObject::GObjObjects()->Data[ 54723 ];

	ASanctumProjectileSlow_execAddToAffected_Parms AddToAffected_Parms;
	AddToAffected_Parms.Enemy = Enemy;

	this->ProcessEvent ( pFnAddToAffected, &AddToAffected_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSlow.stickProjectile
// [0x00020102] 
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )

void ASanctumProjectileSlow::stickProjectile ( struct FVector NewLocation )
{
	static UFunction* pFnstickProjectile = NULL;

	if ( ! pFnstickProjectile )
		pFnstickProjectile = (UFunction*) UObject::GObjObjects()->Data[ 54721 ];

	ASanctumProjectileSlow_execstickProjectile_Parms stickProjectile_Parms;
	memcpy ( &stickProjectile_Parms.NewLocation, &NewLocation, 0xC );

	this->ProcessEvent ( pFnstickProjectile, &stickProjectile_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSlow.ProcessTouch
// [0x00820102] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 NewLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectileSlow::ProcessTouch ( class AActor* Other, struct FVector NewLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 54715 ];

	ASanctumProjectileSlow_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.NewLocation, &NewLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSlow.HitWall
// [0x00020922] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ASanctumProjectileSlow::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 54711 ];

	ASanctumProjectileSlow_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSlow.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumProjectileSlow::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 54710 ];

	ASanctumProjectileSlow_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumHealthbar.SetHealthPercent
// [0x00820102] 
// Parameters infos:
// float                          healthPercent                  ( CPF_Parm )

void ASanctumHealthbar::SetHealthPercent ( float healthPercent )
{
	static UFunction* pFnSetHealthPercent = NULL;

	if ( ! pFnSetHealthPercent )
		pFnSetHealthPercent = (UFunction*) UObject::GObjObjects()->Data[ 50123 ];

	ASanctumHealthbar_execSetHealthPercent_Parms SetHealthPercent_Parms;
	SetHealthPercent_Parms.healthPercent = healthPercent;

	this->ProcessEvent ( pFnSetHealthPercent, &SetHealthPercent_Parms, NULL );
};

// Function Sanctum.SanctumHealthbar.SetSize
// [0x00020102] 
// Parameters infos:
// float                          Width                          ( CPF_Parm )
// float                          Height                         ( CPF_Parm )

void ASanctumHealthbar::SetSize ( float Width, float Height )
{
	static UFunction* pFnSetSize = NULL;

	if ( ! pFnSetSize )
		pFnSetSize = (UFunction*) UObject::GObjObjects()->Data[ 50120 ];

	ASanctumHealthbar_execSetSize_Parms SetSize_Parms;
	SetSize_Parms.Width = Width;
	SetSize_Parms.Height = Height;

	this->ProcessEvent ( pFnSetSize, &SetSize_Parms, NULL );
};

// Function Sanctum.SanctumHealthbar.UpdateDamagebar
// [0x00820102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASanctumHealthbar::UpdateDamagebar ( float DeltaTime )
{
	static UFunction* pFnUpdateDamagebar = NULL;

	if ( ! pFnUpdateDamagebar )
		pFnUpdateDamagebar = (UFunction*) UObject::GObjObjects()->Data[ 50117 ];

	ASanctumHealthbar_execUpdateDamagebar_Parms UpdateDamagebar_Parms;
	UpdateDamagebar_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateDamagebar, &UpdateDamagebar_Parms, NULL );
};

// Function Sanctum.SanctumHealthbar.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASanctumHealthbar::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 50115 ];

	ASanctumHealthbar_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumHealthbar.SetEnabled
// [0x00020102] 
// Parameters infos:
// unsigned long                  Enabled                        ( CPF_Parm )

void ASanctumHealthbar::SetEnabled ( unsigned long Enabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 50113 ];

	ASanctumHealthbar_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.Enabled = Enabled;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );
};

// Function Sanctum.SanctumHealthbar.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASanctumHealthbar::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 50110 ];

	ASanctumHealthbar_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.EndFire
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentWeapon::EndFire ( )
{
	static UFunction* pFnEndFire = NULL;

	if ( ! pFnEndFire )
		pFnEndFire = (UFunction*) UObject::GObjObjects()->Data[ 56209 ];

	ASanctumTowerBaseAttachmentWeapon_execEndFire_Parms EndFire_Parms;

	this->ProcessEvent ( pFnEndFire, &EndFire_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.BeginFire
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentWeapon::BeginFire ( )
{
	static UFunction* pFnBeginFire = NULL;

	if ( ! pFnBeginFire )
		pFnBeginFire = (UFunction*) UObject::GObjObjects()->Data[ 56208 ];

	ASanctumTowerBaseAttachmentWeapon_execBeginFire_Parms BeginFire_Parms;

	this->ProcessEvent ( pFnBeginFire, &BeginFire_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.aimAt
// [0x00020102] 
// Parameters infos:
// struct FVector                 aimAt                          ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeapon::aimAt ( struct FVector aimAt )
{
	static UFunction* pFnaimAt = NULL;

	if ( ! pFnaimAt )
		pFnaimAt = (UFunction*) UObject::GObjObjects()->Data[ 56206 ];

	ASanctumTowerBaseAttachmentWeapon_execaimAt_Parms aimAt_Parms;
	memcpy ( &aimAt_Parms.aimAt, &aimAt, 0xC );

	this->ProcessEvent ( pFnaimAt, &aimAt_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.CauseMuzzleFlash
// [0x00020102] 
// Parameters infos:
// struct FVector                 From                           ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeapon::CauseMuzzleFlash ( struct FVector From )
{
	static UFunction* pFnCauseMuzzleFlash = NULL;

	if ( ! pFnCauseMuzzleFlash )
		pFnCauseMuzzleFlash = (UFunction*) UObject::GObjObjects()->Data[ 56204 ];

	ASanctumTowerBaseAttachmentWeapon_execCauseMuzzleFlash_Parms CauseMuzzleFlash_Parms;
	memcpy ( &CauseMuzzleFlash_Parms.From, &From, 0xC );

	this->ProcessEvent ( pFnCauseMuzzleFlash, &CauseMuzzleFlash_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.spawnMuzzleFlash
// [0x00020102] 
// Parameters infos:
// struct FVector                 FlashLocation                  ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeapon::spawnMuzzleFlash ( struct FVector FlashLocation )
{
	static UFunction* pFnspawnMuzzleFlash = NULL;

	if ( ! pFnspawnMuzzleFlash )
		pFnspawnMuzzleFlash = (UFunction*) UObject::GObjObjects()->Data[ 56202 ];

	ASanctumTowerBaseAttachmentWeapon_execspawnMuzzleFlash_Parms spawnMuzzleFlash_Parms;
	memcpy ( &spawnMuzzleFlash_Parms.FlashLocation, &FlashLocation, 0xC );

	this->ProcessEvent ( pFnspawnMuzzleFlash, &spawnMuzzleFlash_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.spawnTracer
// [0x00820102] 
// Parameters infos:
// struct FVector                 From                           ( CPF_Parm )
// struct FVector                 to                             ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeapon::spawnTracer ( struct FVector From, struct FVector to )
{
	static UFunction* pFnspawnTracer = NULL;

	if ( ! pFnspawnTracer )
		pFnspawnTracer = (UFunction*) UObject::GObjObjects()->Data[ 56197 ];

	ASanctumTowerBaseAttachmentWeapon_execspawnTracer_Parms spawnTracer_Parms;
	memcpy ( &spawnTracer_Parms.From, &From, 0xC );
	memcpy ( &spawnTracer_Parms.to, &to, 0xC );

	this->ProcessEvent ( pFnspawnTracer, &spawnTracer_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.upgradeToLevel
// [0x00020102] 
// Parameters infos:
// int                            NewLevel                       ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeapon::upgradeToLevel ( int NewLevel )
{
	static UFunction* pFnupgradeToLevel = NULL;

	if ( ! pFnupgradeToLevel )
		pFnupgradeToLevel = (UFunction*) UObject::GObjObjects()->Data[ 56195 ];

	ASanctumTowerBaseAttachmentWeapon_execupgradeToLevel_Parms upgradeToLevel_Parms;
	upgradeToLevel_Parms.NewLevel = NewLevel;

	this->ProcessEvent ( pFnupgradeToLevel, &upgradeToLevel_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.PreFire
// [0x00020100] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentWeapon::PreFire ( )
{
	static UFunction* pFnPreFire = NULL;

	if ( ! pFnPreFire )
		pFnPreFire = (UFunction*) UObject::GObjObjects()->Data[ 56193 ];

	ASanctumTowerBaseAttachmentWeapon_execPreFire_Parms PreFire_Parms;

	this->ProcessEvent ( pFnPreFire, &PreFire_Parms, NULL );

	return PreFire_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.InstantFire
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 traceDirection                 ( CPF_Parm )
// struct FVector                 fireLocation                   ( CPF_Parm )

struct FVector ASanctumTowerBaseAttachmentWeapon::InstantFire ( struct FVector traceDirection, struct FVector fireLocation )
{
	static UFunction* pFnInstantFire = NULL;

	if ( ! pFnInstantFire )
		pFnInstantFire = (UFunction*) UObject::GObjObjects()->Data[ 56178 ];

	ASanctumTowerBaseAttachmentWeapon_execInstantFire_Parms InstantFire_Parms;
	memcpy ( &InstantFire_Parms.traceDirection, &traceDirection, 0xC );
	memcpy ( &InstantFire_Parms.fireLocation, &fireLocation, 0xC );

	this->ProcessEvent ( pFnInstantFire, &InstantFire_Parms, NULL );

	return InstantFire_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.SpawnHoloEffects
// [0x00C20102] 
// Parameters infos:
// TArray< struct FImpactInfo >   impactInfos                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumTowerBaseAttachmentWeapon::SpawnHoloEffects ( TArray< struct FImpactInfo >* impactInfos )
{
	static UFunction* pFnSpawnHoloEffects = NULL;

	if ( ! pFnSpawnHoloEffects )
		pFnSpawnHoloEffects = (UFunction*) UObject::GObjObjects()->Data[ 56173 ];

	ASanctumTowerBaseAttachmentWeapon_execSpawnHoloEffects_Parms SpawnHoloEffects_Parms;

	this->ProcessEvent ( pFnSpawnHoloEffects, &SpawnHoloEffects_Parms, NULL );

	if ( impactInfos )
		memcpy ( impactInfos, &SpawnHoloEffects_Parms.impactInfos, 0xC );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.BulletTrace
// [0x00C24102] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 fromLoction                    ( CPF_Parm )
// struct FVector                 toLocation                     ( CPF_Parm )
// struct FVector                 out_HitLocation                ( CPF_Parm | CPF_OutParm )
// struct FVector                 out_HitNormal                  ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           out_hitInfo                    ( CPF_Parm | CPF_OutParm )
// float                          out_damageMultiplier           ( CPF_Parm | CPF_OutParm )
// TArray< struct FImpactInfo >   out_holoImpactInfo             ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class AActor* ASanctumTowerBaseAttachmentWeapon::BulletTrace ( struct FVector fromLoction, struct FVector toLocation, struct FVector* out_HitLocation, struct FVector* out_HitNormal, struct FTraceHitInfo* out_hitInfo, float* out_damageMultiplier, TArray< struct FImpactInfo >* out_holoImpactInfo )
{
	static UFunction* pFnBulletTrace = NULL;

	if ( ! pFnBulletTrace )
		pFnBulletTrace = (UFunction*) UObject::GObjObjects()->Data[ 56159 ];

	ASanctumTowerBaseAttachmentWeapon_execBulletTrace_Parms BulletTrace_Parms;
	memcpy ( &BulletTrace_Parms.fromLoction, &fromLoction, 0xC );
	memcpy ( &BulletTrace_Parms.toLocation, &toLocation, 0xC );

	this->ProcessEvent ( pFnBulletTrace, &BulletTrace_Parms, NULL );

	if ( out_HitLocation )
		memcpy ( out_HitLocation, &BulletTrace_Parms.out_HitLocation, 0xC );

	if ( out_HitNormal )
		memcpy ( out_HitNormal, &BulletTrace_Parms.out_HitNormal, 0xC );

	if ( out_hitInfo )
		memcpy ( out_hitInfo, &BulletTrace_Parms.out_hitInfo, 0x1C );

	if ( out_damageMultiplier )
		*out_damageMultiplier = BulletTrace_Parms.out_damageMultiplier;

	if ( out_holoImpactInfo )
		memcpy ( out_holoImpactInfo, &BulletTrace_Parms.out_holoImpactInfo, 0xC );

	return BulletTrace_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.spawnHitEffect
// [0x00820102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeapon::spawnHitEffect ( struct FVector HitLocation )
{
	static UFunction* pFnspawnHitEffect = NULL;

	if ( ! pFnspawnHitEffect )
		pFnspawnHitEffect = (UFunction*) UObject::GObjObjects()->Data[ 56155 ];

	ASanctumTowerBaseAttachmentWeapon_execspawnHitEffect_Parms spawnHitEffect_Parms;
	memcpy ( &spawnHitEffect_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnspawnHitEffect, &spawnHitEffect_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.ResetTowerFired
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentWeapon::ResetTowerFired ( )
{
	static UFunction* pFnResetTowerFired = NULL;

	if ( ! pFnResetTowerFired )
		pFnResetTowerFired = (UFunction*) UObject::GObjObjects()->Data[ 48239 ];

	ASanctumTowerBaseAttachmentWeapon_execResetTowerFired_Parms ResetTowerFired_Parms;

	this->ProcessEvent ( pFnResetTowerFired, &ResetTowerFired_Parms, NULL );

	return ResetTowerFired_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.PlayFireSound
// [0x00020102] 
// Parameters infos:
// struct FVector                 fireLocation                   ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeapon::PlayFireSound ( struct FVector fireLocation )
{
	static UFunction* pFnPlayFireSound = NULL;

	if ( ! pFnPlayFireSound )
		pFnPlayFireSound = (UFunction*) UObject::GObjObjects()->Data[ 56153 ];

	ASanctumTowerBaseAttachmentWeapon_execPlayFireSound_Parms PlayFireSound_Parms;
	memcpy ( &PlayFireSound_Parms.fireLocation, &fireLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireSound, &PlayFireSound_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.CanShootAir
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentWeapon::CanShootAir ( )
{
	static UFunction* pFnCanShootAir = NULL;

	if ( ! pFnCanShootAir )
		pFnCanShootAir = (UFunction*) UObject::GObjObjects()->Data[ 56052 ];

	ASanctumTowerBaseAttachmentWeapon_execCanShootAir_Parms CanShootAir_Parms;

	this->ProcessEvent ( pFnCanShootAir, &CanShootAir_Parms, NULL );

	return CanShootAir_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.canShootGround
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentWeapon::canShootGround ( )
{
	static UFunction* pFncanShootGround = NULL;

	if ( ! pFncanShootGround )
		pFncanShootGround = (UFunction*) UObject::GObjObjects()->Data[ 56028 ];

	ASanctumTowerBaseAttachmentWeapon_execcanShootGround_Parms canShootGround_Parms;

	this->ProcessEvent ( pFncanShootGround, &canShootGround_Parms, NULL );

	return canShootGround_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.getFireLocation
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASanctumTowerBaseAttachmentWeapon::getFireLocation ( )
{
	static UFunction* pFngetFireLocation = NULL;

	if ( ! pFngetFireLocation )
		pFngetFireLocation = (UFunction*) UObject::GObjObjects()->Data[ 56043 ];

	ASanctumTowerBaseAttachmentWeapon_execgetFireLocation_Parms getFireLocation_Parms;

	this->ProcessEvent ( pFngetFireLocation, &getFireLocation_Parms, NULL );

	return getFireLocation_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeapon::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 56150 ];

	ASanctumTowerBaseAttachmentWeapon_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.SetNewCooldown
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentWeapon::SetNewCooldown ( )
{
	static UFunction* pFnSetNewCooldown = NULL;

	if ( ! pFnSetNewCooldown )
		pFnSetNewCooldown = (UFunction*) UObject::GObjObjects()->Data[ 56149 ];

	ASanctumTowerBaseAttachmentWeapon_execSetNewCooldown_Parms SetNewCooldown_Parms;

	this->ProcessEvent ( pFnSetNewCooldown, &SetNewCooldown_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.GetAirRange
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASanctumTowerBaseAttachmentWeapon::GetAirRange ( )
{
	static UFunction* pFnGetAirRange = NULL;

	if ( ! pFnGetAirRange )
		pFnGetAirRange = (UFunction*) UObject::GObjObjects()->Data[ 56050 ];

	ASanctumTowerBaseAttachmentWeapon_execGetAirRange_Parms GetAirRange_Parms;

	this->ProcessEvent ( pFnGetAirRange, &GetAirRange_Parms, NULL );

	return GetAirRange_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.GetMinRange
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASanctumTowerBaseAttachmentWeapon::GetMinRange ( )
{
	static UFunction* pFnGetMinRange = NULL;

	if ( ! pFnGetMinRange )
		pFnGetMinRange = (UFunction*) UObject::GObjObjects()->Data[ 56026 ];

	ASanctumTowerBaseAttachmentWeapon_execGetMinRange_Parms GetMinRange_Parms;

	this->ProcessEvent ( pFnGetMinRange, &GetMinRange_Parms, NULL );

	return GetMinRange_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.GetRange
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASanctumTowerBaseAttachmentWeapon::GetRange ( )
{
	static UFunction* pFnGetRange = NULL;

	if ( ! pFnGetRange )
		pFnGetRange = (UFunction*) UObject::GObjObjects()->Data[ 56030 ];

	ASanctumTowerBaseAttachmentWeapon_execGetRange_Parms GetRange_Parms;

	this->ProcessEvent ( pFnGetRange, &GetRange_Parms, NULL );

	return GetRange_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.CauseMuzzleEffect
// [0x00020100] 
// Parameters infos:
// int                            muzzleNum                      ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeapon::CauseMuzzleEffect ( int muzzleNum )
{
	static UFunction* pFnCauseMuzzleEffect = NULL;

	if ( ! pFnCauseMuzzleEffect )
		pFnCauseMuzzleEffect = (UFunction*) UObject::GObjObjects()->Data[ 56147 ];

	ASanctumTowerBaseAttachmentWeapon_execCauseMuzzleEffect_Parms CauseMuzzleEffect_Parms;
	CauseMuzzleEffect_Parms.muzzleNum = muzzleNum;

	this->ProcessEvent ( pFnCauseMuzzleEffect, &CauseMuzzleEffect_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.SetParent
// [0x00020002] 
// Parameters infos:
// class ASanctumTowerBaseAttachmentOffensive* Parent                         ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeapon::SetParent ( class ASanctumTowerBaseAttachmentOffensive* Parent )
{
	static UFunction* pFnSetParent = NULL;

	if ( ! pFnSetParent )
		pFnSetParent = (UFunction*) UObject::GObjObjects()->Data[ 56145 ];

	ASanctumTowerBaseAttachmentWeapon_execSetParent_Parms SetParent_Parms;
	SetParent_Parms.Parent = Parent;

	this->ProcessEvent ( pFnSetParent, &SetParent_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.EffectIsRelevant
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// unsigned long                  bForceDedicated                ( CPF_Parm )
// float                          VisibleCullDistance            ( CPF_OptionalParm | CPF_Parm )
// float                          HiddenCullDistance             ( CPF_OptionalParm | CPF_Parm )

bool ASanctumTowerBaseAttachmentWeapon::EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float VisibleCullDistance, float HiddenCullDistance )
{
	static UFunction* pFnEffectIsRelevant = NULL;

	if ( ! pFnEffectIsRelevant )
		pFnEffectIsRelevant = (UFunction*) UObject::GObjObjects()->Data[ 56137 ];

	ASanctumTowerBaseAttachmentWeapon_execEffectIsRelevant_Parms EffectIsRelevant_Parms;
	memcpy ( &EffectIsRelevant_Parms.SpawnLocation, &SpawnLocation, 0xC );
	EffectIsRelevant_Parms.bForceDedicated = bForceDedicated;
	EffectIsRelevant_Parms.VisibleCullDistance = VisibleCullDistance;
	EffectIsRelevant_Parms.HiddenCullDistance = HiddenCullDistance;

	this->ProcessEvent ( pFnEffectIsRelevant, &EffectIsRelevant_Parms, NULL );

	return EffectIsRelevant_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentWeapon::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 56136 ];

	ASanctumTowerBaseAttachmentWeapon_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeapon.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeapon::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 56134 ];

	ASanctumTowerBaseAttachmentWeapon_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumEnemyArmoured.SetGlowScale
// [0x00020102] 
// Parameters infos:
// float                          Scale                          ( CPF_Parm )

void ASanctumEnemyArmoured::SetGlowScale ( float Scale )
{
	static UFunction* pFnSetGlowScale = NULL;

	if ( ! pFnSetGlowScale )
		pFnSetGlowScale = (UFunction*) UObject::GObjObjects()->Data[ 47281 ];

	ASanctumEnemyArmoured_execSetGlowScale_Parms SetGlowScale_Parms;
	SetGlowScale_Parms.Scale = Scale;

	this->ProcessEvent ( pFnSetGlowScale, &SetGlowScale_Parms, NULL );
};

// Function Sanctum.SanctumEnemyArmoured.IsImmune
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )
// int                            Damage                         ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  DamageType                     ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

bool ASanctumEnemyArmoured::IsImmune ( struct FVector HitLocation, struct FVector Momentum, struct FTraceHitInfo HitInfo, int Damage, class UClass* DamageType, class AActor* DamageCauser )
{
	static UFunction* pFnIsImmune = NULL;

	if ( ! pFnIsImmune )
		pFnIsImmune = (UFunction*) UObject::GObjObjects()->Data[ 47264 ];

	ASanctumEnemyArmoured_execIsImmune_Parms IsImmune_Parms;
	memcpy ( &IsImmune_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &IsImmune_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &IsImmune_Parms.HitInfo, &HitInfo, 0x1C );
	IsImmune_Parms.Damage = Damage;
	IsImmune_Parms.DamageType = DamageType;
	IsImmune_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnIsImmune, &IsImmune_Parms, NULL );

	return IsImmune_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemyArmoured.SetEndlessData
// [0x00020002] 
// Parameters infos:
// int                            totalWaves                     ( CPF_Parm )
// int                            waveNr                         ( CPF_Parm )
// unsigned long                  isSpGame                       ( CPF_Parm )
// float                          TotalResources                 ( CPF_Parm )
// float                          Difficulty                     ( CPF_Parm )

void ASanctumEnemyArmoured::SetEndlessData ( int totalWaves, int waveNr, unsigned long isSpGame, float TotalResources, float Difficulty )
{
	static UFunction* pFnSetEndlessData = NULL;

	if ( ! pFnSetEndlessData )
		pFnSetEndlessData = (UFunction*) UObject::GObjObjects()->Data[ 47258 ];

	ASanctumEnemyArmoured_execSetEndlessData_Parms SetEndlessData_Parms;
	SetEndlessData_Parms.totalWaves = totalWaves;
	SetEndlessData_Parms.waveNr = waveNr;
	SetEndlessData_Parms.isSpGame = isSpGame;
	SetEndlessData_Parms.TotalResources = TotalResources;
	SetEndlessData_Parms.Difficulty = Difficulty;

	this->ProcessEvent ( pFnSetEndlessData, &SetEndlessData_Parms, NULL );
};

// Function Sanctum.SanctumEnemyArmoured.TookThreshholdHit
// [0x00020102] 
// Parameters infos:

void ASanctumEnemyArmoured::TookThreshholdHit ( )
{
	static UFunction* pFnTookThreshholdHit = NULL;

	if ( ! pFnTookThreshholdHit )
		pFnTookThreshholdHit = (UFunction*) UObject::GObjObjects()->Data[ 47257 ];

	ASanctumEnemyArmoured_execTookThreshholdHit_Parms TookThreshholdHit_Parms;

	this->ProcessEvent ( pFnTookThreshholdHit, &TookThreshholdHit_Parms, NULL );
};

// Function Sanctum.SanctumEnemyArmoured.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumEnemyArmoured::eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 47248 ];

	ASanctumEnemyArmoured_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Sanctum.SanctumEnemyArmoured.WeakSpotHit
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

bool ASanctumEnemyArmoured::WeakSpotHit ( struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType )
{
	static UFunction* pFnWeakSpotHit = NULL;

	if ( ! pFnWeakSpotHit )
		pFnWeakSpotHit = (UFunction*) UObject::GObjObjects()->Data[ 47243 ];

	ASanctumEnemyArmoured_execWeakSpotHit_Parms WeakSpotHit_Parms;
	memcpy ( &WeakSpotHit_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &WeakSpotHit_Parms.Momentum, &Momentum, 0xC );
	WeakSpotHit_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnWeakSpotHit, &WeakSpotHit_Parms, NULL );

	return WeakSpotHit_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemyArmoured.PlayerKilledEnemyStats
// [0x00020002] 
// Parameters infos:
// class ASanctumPlayerReplicationInfo* PRI                            ( CPF_Parm )

void ASanctumEnemyArmoured::PlayerKilledEnemyStats ( class ASanctumPlayerReplicationInfo* PRI )
{
	static UFunction* pFnPlayerKilledEnemyStats = NULL;

	if ( ! pFnPlayerKilledEnemyStats )
		pFnPlayerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47240 ];

	ASanctumEnemyArmoured_execPlayerKilledEnemyStats_Parms PlayerKilledEnemyStats_Parms;
	PlayerKilledEnemyStats_Parms.PRI = PRI;

	this->ProcessEvent ( pFnPlayerKilledEnemyStats, &PlayerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyArmoured.TowerKilledEnemyStats
// [0x00020002] 
// Parameters infos:

void ASanctumEnemyArmoured::TowerKilledEnemyStats ( )
{
	static UFunction* pFnTowerKilledEnemyStats = NULL;

	if ( ! pFnTowerKilledEnemyStats )
		pFnTowerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47237 ];

	ASanctumEnemyArmoured_execTowerKilledEnemyStats_Parms TowerKilledEnemyStats_Parms;

	this->ProcessEvent ( pFnTowerKilledEnemyStats, &TowerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyArmoured.DisableShield
// [0x00020102] 
// Parameters infos:

void ASanctumEnemyArmoured::DisableShield ( )
{
	static UFunction* pFnDisableShield = NULL;

	if ( ! pFnDisableShield )
		pFnDisableShield = (UFunction*) UObject::GObjObjects()->Data[ 47236 ];

	ASanctumEnemyArmoured_execDisableShield_Parms DisableShield_Parms;

	this->ProcessEvent ( pFnDisableShield, &DisableShield_Parms, NULL );
};

// Function Sanctum.SanctumEnemyArmoured.EnableShield
// [0x00020102] 
// Parameters infos:

void ASanctumEnemyArmoured::EnableShield ( )
{
	static UFunction* pFnEnableShield = NULL;

	if ( ! pFnEnableShield )
		pFnEnableShield = (UFunction*) UObject::GObjObjects()->Data[ 47235 ];

	ASanctumEnemyArmoured_execEnableShield_Parms EnableShield_Parms;

	this->ProcessEvent ( pFnEnableShield, &EnableShield_Parms, NULL );
};

// Function Sanctum.SanctumEnemyArmoured.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumEnemyArmoured::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47234 ];

	ASanctumEnemyArmoured_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumEnemyArmoured.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumEnemyArmoured::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 47232 ];

	ASanctumEnemyArmoured_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumEnemyBaman.PlayerKilledEnemyStats
// [0x00020002] 
// Parameters infos:
// class ASanctumPlayerReplicationInfo* PRI                            ( CPF_Parm )

void ASanctumEnemyBaman::PlayerKilledEnemyStats ( class ASanctumPlayerReplicationInfo* PRI )
{
	static UFunction* pFnPlayerKilledEnemyStats = NULL;

	if ( ! pFnPlayerKilledEnemyStats )
		pFnPlayerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47317 ];

	ASanctumEnemyBaman_execPlayerKilledEnemyStats_Parms PlayerKilledEnemyStats_Parms;
	PlayerKilledEnemyStats_Parms.PRI = PRI;

	this->ProcessEvent ( pFnPlayerKilledEnemyStats, &PlayerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyBaman.TowerKilledEnemyStats
// [0x00020002] 
// Parameters infos:

void ASanctumEnemyBaman::TowerKilledEnemyStats ( )
{
	static UFunction* pFnTowerKilledEnemyStats = NULL;

	if ( ! pFnTowerKilledEnemyStats )
		pFnTowerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47314 ];

	ASanctumEnemyBaman_execTowerKilledEnemyStats_Parms TowerKilledEnemyStats_Parms;

	this->ProcessEvent ( pFnTowerKilledEnemyStats, &TowerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyBaman.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumEnemyBaman::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47313 ];

	ASanctumEnemyBaman_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumEnemyBobbleHead.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASanctumEnemyBobbleHead::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 47375 ];

	ASanctumEnemyBobbleHead_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumEnemyBobbleHead.TakeRadiusDamage
// [0x00824102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// float                          DamageFalloffExponent          ( CPF_OptionalParm | CPF_Parm )

void ASanctumEnemyBobbleHead::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 47358 ];

	ASanctumEnemyBobbleHead_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;
	TakeRadiusDamage_Parms.DamageFalloffExponent = DamageFalloffExponent;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Sanctum.SanctumEnemyBobbleHead.IsImmune
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )
// int                            Damage                         ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  DamageType                     ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

bool ASanctumEnemyBobbleHead::IsImmune ( struct FVector HitLocation, struct FVector Momentum, struct FTraceHitInfo HitInfo, int Damage, class UClass* DamageType, class AActor* DamageCauser )
{
	static UFunction* pFnIsImmune = NULL;

	if ( ! pFnIsImmune )
		pFnIsImmune = (UFunction*) UObject::GObjObjects()->Data[ 47350 ];

	ASanctumEnemyBobbleHead_execIsImmune_Parms IsImmune_Parms;
	memcpy ( &IsImmune_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &IsImmune_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &IsImmune_Parms.HitInfo, &HitInfo, 0x1C );
	IsImmune_Parms.Damage = Damage;
	IsImmune_Parms.DamageType = DamageType;
	IsImmune_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnIsImmune, &IsImmune_Parms, NULL );

	return IsImmune_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemyBobbleHead.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumEnemyBobbleHead::eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 47342 ];

	ASanctumEnemyBobbleHead_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Sanctum.SanctumEnemyBobbleHead.PlayerKilledEnemyStats
// [0x00020002] 
// Parameters infos:
// class ASanctumPlayerReplicationInfo* PRI                            ( CPF_Parm )

void ASanctumEnemyBobbleHead::PlayerKilledEnemyStats ( class ASanctumPlayerReplicationInfo* PRI )
{
	static UFunction* pFnPlayerKilledEnemyStats = NULL;

	if ( ! pFnPlayerKilledEnemyStats )
		pFnPlayerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47339 ];

	ASanctumEnemyBobbleHead_execPlayerKilledEnemyStats_Parms PlayerKilledEnemyStats_Parms;
	PlayerKilledEnemyStats_Parms.PRI = PRI;

	this->ProcessEvent ( pFnPlayerKilledEnemyStats, &PlayerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyBobbleHead.TowerKilledEnemyStats
// [0x00020002] 
// Parameters infos:

void ASanctumEnemyBobbleHead::TowerKilledEnemyStats ( )
{
	static UFunction* pFnTowerKilledEnemyStats = NULL;

	if ( ! pFnTowerKilledEnemyStats )
		pFnTowerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47336 ];

	ASanctumEnemyBobbleHead_execTowerKilledEnemyStats_Parms TowerKilledEnemyStats_Parms;

	this->ProcessEvent ( pFnTowerKilledEnemyStats, &TowerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyBobbleHead.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumEnemyBobbleHead::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47335 ];

	ASanctumEnemyBobbleHead_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumEnemyCharger.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumEnemyCharger::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 47416 ];

	ASanctumEnemyCharger_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumEnemyCharger.PlayerKilledEnemyStats
// [0x00020002] 
// Parameters infos:
// class ASanctumPlayerReplicationInfo* PRI                            ( CPF_Parm )

void ASanctumEnemyCharger::PlayerKilledEnemyStats ( class ASanctumPlayerReplicationInfo* PRI )
{
	static UFunction* pFnPlayerKilledEnemyStats = NULL;

	if ( ! pFnPlayerKilledEnemyStats )
		pFnPlayerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47413 ];

	ASanctumEnemyCharger_execPlayerKilledEnemyStats_Parms PlayerKilledEnemyStats_Parms;
	PlayerKilledEnemyStats_Parms.PRI = PRI;

	this->ProcessEvent ( pFnPlayerKilledEnemyStats, &PlayerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyCharger.TowerKilledEnemyStats
// [0x00020002] 
// Parameters infos:

void ASanctumEnemyCharger::TowerKilledEnemyStats ( )
{
	static UFunction* pFnTowerKilledEnemyStats = NULL;

	if ( ! pFnTowerKilledEnemyStats )
		pFnTowerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47410 ];

	ASanctumEnemyCharger_execTowerKilledEnemyStats_Parms TowerKilledEnemyStats_Parms;

	this->ProcessEvent ( pFnTowerKilledEnemyStats, &TowerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyCharger.GetSpeedForStuckCheck
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASanctumEnemyCharger::GetSpeedForStuckCheck ( )
{
	static UFunction* pFnGetSpeedForStuckCheck = NULL;

	if ( ! pFnGetSpeedForStuckCheck )
		pFnGetSpeedForStuckCheck = (UFunction*) UObject::GObjObjects()->Data[ 47408 ];

	ASanctumEnemyCharger_execGetSpeedForStuckCheck_Parms GetSpeedForStuckCheck_Parms;

	this->ProcessEvent ( pFnGetSpeedForStuckCheck, &GetSpeedForStuckCheck_Parms, NULL );

	return GetSpeedForStuckCheck_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemyCharger.PostBeginPlay
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void ASanctumEnemyCharger::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47406 ];

	ASanctumEnemyCharger_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumEnemyDebuffer.AdditionalDamageChanged
// [0x00020102] 
// Parameters infos:
// float                          BlendScale                     ( CPF_Parm )

void ASanctumEnemyDebuffer::AdditionalDamageChanged ( float BlendScale )
{
	static UFunction* pFnAdditionalDamageChanged = NULL;

	if ( ! pFnAdditionalDamageChanged )
		pFnAdditionalDamageChanged = (UFunction*) UObject::GObjObjects()->Data[ 47468 ];

	ASanctumEnemyDebuffer_execAdditionalDamageChanged_Parms AdditionalDamageChanged_Parms;
	AdditionalDamageChanged_Parms.BlendScale = BlendScale;

	this->ProcessEvent ( pFnAdditionalDamageChanged, &AdditionalDamageChanged_Parms, NULL );
};

// Function Sanctum.SanctumEnemyDebuffer.calculateBlendScale
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          AdditionalHits                 ( CPF_Parm )

float ASanctumEnemyDebuffer::calculateBlendScale ( float AdditionalHits )
{
	static UFunction* pFncalculateBlendScale = NULL;

	if ( ! pFncalculateBlendScale )
		pFncalculateBlendScale = (UFunction*) UObject::GObjObjects()->Data[ 47465 ];

	ASanctumEnemyDebuffer_execcalculateBlendScale_Parms calculateBlendScale_Parms;
	calculateBlendScale_Parms.AdditionalHits = AdditionalHits;

	this->ProcessEvent ( pFncalculateBlendScale, &calculateBlendScale_Parms, NULL );

	return calculateBlendScale_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemyDebuffer.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumEnemyDebuffer::eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 47453 ];

	ASanctumEnemyDebuffer_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Sanctum.SanctumEnemyDebuffer.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASanctumEnemyDebuffer::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 47450 ];

	ASanctumEnemyDebuffer_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumEnemyDebuffer.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumEnemyDebuffer::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47449 ];

	ASanctumEnemyDebuffer_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumEnemyDebuffer.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumEnemyDebuffer::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 47447 ];

	ASanctumEnemyDebuffer_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumEnemyDebuffer.PlayerKilledEnemyStats
// [0x00020002] 
// Parameters infos:
// class ASanctumPlayerReplicationInfo* PRI                            ( CPF_Parm )

void ASanctumEnemyDebuffer::PlayerKilledEnemyStats ( class ASanctumPlayerReplicationInfo* PRI )
{
	static UFunction* pFnPlayerKilledEnemyStats = NULL;

	if ( ! pFnPlayerKilledEnemyStats )
		pFnPlayerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47444 ];

	ASanctumEnemyDebuffer_execPlayerKilledEnemyStats_Parms PlayerKilledEnemyStats_Parms;
	PlayerKilledEnemyStats_Parms.PRI = PRI;

	this->ProcessEvent ( pFnPlayerKilledEnemyStats, &PlayerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyDebuffer.TowerKilledEnemyStats
// [0x00020002] 
// Parameters infos:

void ASanctumEnemyDebuffer::TowerKilledEnemyStats ( )
{
	static UFunction* pFnTowerKilledEnemyStats = NULL;

	if ( ! pFnTowerKilledEnemyStats )
		pFnTowerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47441 ];

	ASanctumEnemyDebuffer_execTowerKilledEnemyStats_Parms TowerKilledEnemyStats_Parms;

	this->ProcessEvent ( pFnTowerKilledEnemyStats, &TowerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyHover.IsImmune
// [0x00824102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )
// int                            Damage                         ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  DamageType                     ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

bool ASanctumEnemyHover::IsImmune ( struct FVector HitLocation, struct FVector Momentum, struct FTraceHitInfo HitInfo, int Damage, class UClass* DamageType, class AActor* DamageCauser )
{
	static UFunction* pFnIsImmune = NULL;

	if ( ! pFnIsImmune )
		pFnIsImmune = (UFunction*) UObject::GObjObjects()->Data[ 47537 ];

	ASanctumEnemyHover_execIsImmune_Parms IsImmune_Parms;
	memcpy ( &IsImmune_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &IsImmune_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &IsImmune_Parms.HitInfo, &HitInfo, 0x1C );
	IsImmune_Parms.Damage = Damage;
	IsImmune_Parms.DamageType = DamageType;
	IsImmune_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnIsImmune, &IsImmune_Parms, NULL );

	return IsImmune_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemyHover.TakeDamage
// [0x00824802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumEnemyHover::eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 47524 ];

	ASanctumEnemyHover_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Sanctum.SanctumEnemyHover.HitDummyCylinder
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

bool ASanctumEnemyHover::HitDummyCylinder ( struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnHitDummyCylinder = NULL;

	if ( ! pFnHitDummyCylinder )
		pFnHitDummyCylinder = (UFunction*) UObject::GObjObjects()->Data[ 47521 ];

	ASanctumEnemyHover_execHitDummyCylinder_Parms HitDummyCylinder_Parms;
	memcpy ( &HitDummyCylinder_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnHitDummyCylinder, &HitDummyCylinder_Parms, NULL );

	return HitDummyCylinder_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemyHover.PlayerKilledEnemyStats
// [0x00020002] 
// Parameters infos:
// class ASanctumPlayerReplicationInfo* PRI                            ( CPF_Parm )

void ASanctumEnemyHover::PlayerKilledEnemyStats ( class ASanctumPlayerReplicationInfo* PRI )
{
	static UFunction* pFnPlayerKilledEnemyStats = NULL;

	if ( ! pFnPlayerKilledEnemyStats )
		pFnPlayerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47518 ];

	ASanctumEnemyHover_execPlayerKilledEnemyStats_Parms PlayerKilledEnemyStats_Parms;
	PlayerKilledEnemyStats_Parms.PRI = PRI;

	this->ProcessEvent ( pFnPlayerKilledEnemyStats, &PlayerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyHover.TowerKilledEnemyStats
// [0x00020002] 
// Parameters infos:

void ASanctumEnemyHover::TowerKilledEnemyStats ( )
{
	static UFunction* pFnTowerKilledEnemyStats = NULL;

	if ( ! pFnTowerKilledEnemyStats )
		pFnTowerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47515 ];

	ASanctumEnemyHover_execTowerKilledEnemyStats_Parms TowerKilledEnemyStats_Parms;

	this->ProcessEvent ( pFnTowerKilledEnemyStats, &TowerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyHover.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumEnemyHover::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47514 ];

	ASanctumEnemyHover_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumProjectileFreeze.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            DamageTaken                    ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumProjectileFreeze::eventTakeDamage ( int DamageTaken, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 54512 ];

	ASanctumProjectileFreeze_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.DamageTaken = DamageTaken;
	TakeDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Sanctum.SanctumProjectileFreeze.CheckAchievement
// [0x00020002] 
// Parameters infos:
// class ASanctumEnemy*           Enemy                          ( CPF_Parm )

void ASanctumProjectileFreeze::CheckAchievement ( class ASanctumEnemy* Enemy )
{
	static UFunction* pFnCheckAchievement = NULL;

	if ( ! pFnCheckAchievement )
		pFnCheckAchievement = (UFunction*) UObject::GObjObjects()->Data[ 54509 ];

	ASanctumProjectileFreeze_execCheckAchievement_Parms CheckAchievement_Parms;
	CheckAchievement_Parms.Enemy = Enemy;

	this->ProcessEvent ( pFnCheckAchievement, &CheckAchievement_Parms, NULL );
};

// Function Sanctum.SanctumProjectileFreeze.slowEnemies
// [0x00020002] 
// Parameters infos:

void ASanctumProjectileFreeze::slowEnemies ( )
{
	static UFunction* pFnslowEnemies = NULL;

	if ( ! pFnslowEnemies )
		pFnslowEnemies = (UFunction*) UObject::GObjObjects()->Data[ 54506 ];

	ASanctumProjectileFreeze_execslowEnemies_Parms slowEnemies_Parms;

	this->ProcessEvent ( pFnslowEnemies, &slowEnemies_Parms, NULL );
};

// Function Sanctum.SanctumProjectileFreeze.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumProjectileFreeze::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 54505 ];

	ASanctumProjectileFreeze_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumProjectileFreeze.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectileFreeze::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 54502 ];

	ASanctumProjectileFreeze_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Sanctum.SanctumProjectileFreeze.Landed
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ASanctumProjectileFreeze::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 54499 ];

	ASanctumProjectileFreeze_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSpit.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectileSpit::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 47638 ];

	ASanctumProjectileSpit_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSpit.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            DamageTaken                    ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumProjectileSpit::eventTakeDamage ( int DamageTaken, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 47630 ];

	ASanctumProjectileSpit_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.DamageTaken = DamageTaken;
	TakeDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSpit.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectileSpit::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 47627 ];

	ASanctumProjectileSpit_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSpit.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumProjectileSpit::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 47626 ];

	ASanctumProjectileSpit_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSpit.Landed
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ASanctumProjectileSpit::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 47623 ];

	ASanctumProjectileSpit_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSpit.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumProjectileSpit::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 47620 ];

	ASanctumProjectileSpit_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSpit.HitAnEnemy
// [0x00020000] 
// Parameters infos:

void ASanctumProjectileSpit::HitAnEnemy ( )
{
	static UFunction* pFnHitAnEnemy = NULL;

	if ( ! pFnHitAnEnemy )
		pFnHitAnEnemy = (UFunction*) UObject::GObjObjects()->Data[ 47619 ];

	ASanctumProjectileSpit_execHitAnEnemy_Parms HitAnEnemy_Parms;

	this->ProcessEvent ( pFnHitAnEnemy, &HitAnEnemy_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSpit.Launch
// [0x00020002] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )
// class ASanctumPlayer*          Target                         ( CPF_Parm )

void ASanctumProjectileSpit::Launch ( struct FVector Direction, class ASanctumPlayer* Target )
{
	static UFunction* pFnLaunch = NULL;

	if ( ! pFnLaunch )
		pFnLaunch = (UFunction*) UObject::GObjObjects()->Data[ 47616 ];

	ASanctumProjectileSpit_execLaunch_Parms Launch_Parms;
	memcpy ( &Launch_Parms.Direction, &Direction, 0xC );
	Launch_Parms.Target = Target;

	this->ProcessEvent ( pFnLaunch, &Launch_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSpit.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void ASanctumProjectileSpit::Init ( struct FVector Direction )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 47614 ];

	ASanctumProjectileSpit_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSpit.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumProjectileSpit::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47613 ];

	ASanctumProjectileSpit_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumEnemySpitter.SpitNotification
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumEnemySpitter::eventSpitNotification ( )
{
	static UFunction* pFnSpitNotification = NULL;

	if ( ! pFnSpitNotification )
		pFnSpitNotification = (UFunction*) UObject::GObjObjects()->Data[ 47678 ];

	ASanctumEnemySpitter_eventSpitNotification_Parms SpitNotification_Parms;

	this->ProcessEvent ( pFnSpitNotification, &SpitNotification_Parms, NULL );
};

// Function Sanctum.SanctumEnemySpitter.WalkCycleEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumEnemySpitter::eventWalkCycleEnd ( )
{
	static UFunction* pFnWalkCycleEnd = NULL;

	if ( ! pFnWalkCycleEnd )
		pFnWalkCycleEnd = (UFunction*) UObject::GObjObjects()->Data[ 47677 ];

	ASanctumEnemySpitter_eventWalkCycleEnd_Parms WalkCycleEnd_Parms;

	this->ProcessEvent ( pFnWalkCycleEnd, &WalkCycleEnd_Parms, NULL );
};

// Function Sanctum.SanctumEnemySpitter.Spit
// [0x00820002] 
// Parameters infos:

void ASanctumEnemySpitter::Spit ( )
{
	static UFunction* pFnSpit = NULL;

	if ( ! pFnSpit )
		pFnSpit = (UFunction*) UObject::GObjObjects()->Data[ 47669 ];

	ASanctumEnemySpitter_execSpit_Parms Spit_Parms;

	this->ProcessEvent ( pFnSpit, &Spit_Parms, NULL );
};

// Function Sanctum.SanctumEnemySpitter.PreSpit
// [0x00020002] 
// Parameters infos:

void ASanctumEnemySpitter::PreSpit ( )
{
	static UFunction* pFnPreSpit = NULL;

	if ( ! pFnPreSpit )
		pFnPreSpit = (UFunction*) UObject::GObjObjects()->Data[ 47668 ];

	ASanctumEnemySpitter_execPreSpit_Parms PreSpit_Parms;

	this->ProcessEvent ( pFnPreSpit, &PreSpit_Parms, NULL );
};

// Function Sanctum.SanctumEnemySpitter.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumEnemySpitter::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47667 ];

	ASanctumEnemySpitter_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumEnemyIsraphel.FireEnded
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumEnemyIsraphel::eventFireEnded ( )
{
	static UFunction* pFnFireEnded = NULL;

	if ( ! pFnFireEnded )
		pFnFireEnded = (UFunction*) UObject::GObjObjects()->Data[ 47727 ];

	ASanctumEnemyIsraphel_eventFireEnded_Parms FireEnded_Parms;

	this->ProcessEvent ( pFnFireEnded, &FireEnded_Parms, NULL );
};

// Function Sanctum.SanctumEnemyIsraphel.WalkCycleEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumEnemyIsraphel::eventWalkCycleEnd ( )
{
	static UFunction* pFnWalkCycleEnd = NULL;

	if ( ! pFnWalkCycleEnd )
		pFnWalkCycleEnd = (UFunction*) UObject::GObjObjects()->Data[ 47726 ];

	ASanctumEnemyIsraphel_eventWalkCycleEnd_Parms WalkCycleEnd_Parms;

	this->ProcessEvent ( pFnWalkCycleEnd, &WalkCycleEnd_Parms, NULL );
};

// Function Sanctum.SanctumEnemyIsraphel.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASanctumEnemyIsraphel::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 47720 ];

	ASanctumEnemyIsraphel_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumEnemyIsraphel.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )

void ASanctumEnemyIsraphel::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 47718 ];

	ASanctumEnemyIsraphel_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelMesh = SkelMesh;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function Sanctum.SanctumEnemyIsraphel.ActivateEvent
// [0x00020102] 
// Parameters infos:
// class UClass*                  eventToActivate                ( CPF_Parm )

void ASanctumEnemyIsraphel::ActivateEvent ( class UClass* eventToActivate )
{
	static UFunction* pFnActivateEvent = NULL;

	if ( ! pFnActivateEvent )
		pFnActivateEvent = (UFunction*) UObject::GObjObjects()->Data[ 47713 ];

	ASanctumEnemyIsraphel_execActivateEvent_Parms ActivateEvent_Parms;
	ActivateEvent_Parms.eventToActivate = eventToActivate;

	this->ProcessEvent ( pFnActivateEvent, &ActivateEvent_Parms, NULL );
};

// Function Sanctum.SanctumEnemyIsraphel.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumEnemyIsraphel::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47711 ];

	ASanctumEnemyIsraphel_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_IsraphelSpawned.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_IsraphelSpawned::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55306 ];

	USanctumSeqEvent_IsraphelSpawned_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumEnemyRunner.PlayerKilledEnemyStats
// [0x00020002] 
// Parameters infos:
// class ASanctumPlayerReplicationInfo* PRI                            ( CPF_Parm )

void ASanctumEnemyRunner::PlayerKilledEnemyStats ( class ASanctumPlayerReplicationInfo* PRI )
{
	static UFunction* pFnPlayerKilledEnemyStats = NULL;

	if ( ! pFnPlayerKilledEnemyStats )
		pFnPlayerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47757 ];

	ASanctumEnemyRunner_execPlayerKilledEnemyStats_Parms PlayerKilledEnemyStats_Parms;
	PlayerKilledEnemyStats_Parms.PRI = PRI;

	this->ProcessEvent ( pFnPlayerKilledEnemyStats, &PlayerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyRunner.TowerKilledEnemyStats
// [0x00020002] 
// Parameters infos:

void ASanctumEnemyRunner::TowerKilledEnemyStats ( )
{
	static UFunction* pFnTowerKilledEnemyStats = NULL;

	if ( ! pFnTowerKilledEnemyStats )
		pFnTowerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47754 ];

	ASanctumEnemyRunner_execTowerKilledEnemyStats_Parms TowerKilledEnemyStats_Parms;

	this->ProcessEvent ( pFnTowerKilledEnemyStats, &TowerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyRunner.SwitchMesh
// [0x00020102] 
// Parameters infos:

void ASanctumEnemyRunner::SwitchMesh ( )
{
	static UFunction* pFnSwitchMesh = NULL;

	if ( ! pFnSwitchMesh )
		pFnSwitchMesh = (UFunction*) UObject::GObjObjects()->Data[ 47741 ];

	ASanctumEnemyRunner_execSwitchMesh_Parms SwitchMesh_Parms;

	this->ProcessEvent ( pFnSwitchMesh, &SwitchMesh_Parms, NULL );
};

// Function Sanctum.SanctumEnemyRunner.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASanctumEnemyRunner::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47740 ];

	ASanctumEnemyRunner_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumEnemySpawner.isFinished
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumEnemySpawner::isFinished ( )
{
	static UFunction* pFnisFinished = NULL;

	if ( ! pFnisFinished )
		pFnisFinished = (UFunction*) UObject::GObjObjects()->Data[ 47817 ];

	ASanctumEnemySpawner_execisFinished_Parms isFinished_Parms;

	this->ProcessEvent ( pFnisFinished, &isFinished_Parms, NULL );

	return isFinished_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemySpawner.spawnEnemy
// [0x00020002] 
// Parameters infos:

void ASanctumEnemySpawner::spawnEnemy ( )
{
	static UFunction* pFnspawnEnemy = NULL;

	if ( ! pFnspawnEnemy )
		pFnspawnEnemy = (UFunction*) UObject::GObjObjects()->Data[ 47809 ];

	ASanctumEnemySpawner_execspawnEnemy_Parms spawnEnemy_Parms;

	this->ProcessEvent ( pFnspawnEnemy, &spawnEnemy_Parms, NULL );
};

// Function Sanctum.SanctumEnemySpawner.setEnemyConfig
// [0x00020002] 
// Parameters infos:
// struct FEnemyConfig            EnemyConfig                    ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumEnemySpawner::setEnemyConfig ( struct FEnemyConfig EnemyConfig )
{
	static UFunction* pFnsetEnemyConfig = NULL;

	if ( ! pFnsetEnemyConfig )
		pFnsetEnemyConfig = (UFunction*) UObject::GObjObjects()->Data[ 47804 ];

	ASanctumEnemySpawner_execsetEnemyConfig_Parms setEnemyConfig_Parms;
	memcpy ( &setEnemyConfig_Parms.EnemyConfig, &EnemyConfig, 0x1C );

	this->ProcessEvent ( pFnsetEnemyConfig, &setEnemyConfig_Parms, NULL );
};

// Function Sanctum.SanctumEnemySpawner.Clear
// [0x00020002] 
// Parameters infos:

void ASanctumEnemySpawner::Clear ( )
{
	static UFunction* pFnClear = NULL;

	if ( ! pFnClear )
		pFnClear = (UFunction*) UObject::GObjObjects()->Data[ 47799 ];

	ASanctumEnemySpawner_execClear_Parms Clear_Parms;

	this->ProcessEvent ( pFnClear, &Clear_Parms, NULL );
};

// Function Sanctum.SanctumEnemySpawner.setEndlessMode
// [0x00020002] 
// Parameters infos:
// unsigned long                  endless                        ( CPF_Parm )
// unsigned long                  isSpGame                       ( CPF_Parm )
// float                          resourceMod                    ( CPF_Parm )

void ASanctumEnemySpawner::setEndlessMode ( unsigned long endless, unsigned long isSpGame, float resourceMod )
{
	static UFunction* pFnsetEndlessMode = NULL;

	if ( ! pFnsetEndlessMode )
		pFnsetEndlessMode = (UFunction*) UObject::GObjObjects()->Data[ 47795 ];

	ASanctumEnemySpawner_execsetEndlessMode_Parms setEndlessMode_Parms;
	setEndlessMode_Parms.endless = endless;
	setEndlessMode_Parms.isSpGame = isSpGame;
	setEndlessMode_Parms.resourceMod = resourceMod;

	this->ProcessEvent ( pFnsetEndlessMode, &setEndlessMode_Parms, NULL );
};

// Function Sanctum.SanctumEnemySpawner.startWave
// [0x00020002] 
// Parameters infos:

void ASanctumEnemySpawner::startWave ( )
{
	static UFunction* pFnstartWave = NULL;

	if ( ! pFnstartWave )
		pFnstartWave = (UFunction*) UObject::GObjObjects()->Data[ 47791 ];

	ASanctumEnemySpawner_execstartWave_Parms startWave_Parms;

	this->ProcessEvent ( pFnstartWave, &startWave_Parms, NULL );
};

// Function Sanctum.SanctumWaveSpawner.giveReward
// [0x00020002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void ASanctumWaveSpawner::giveReward ( int Wave )
{
	static UFunction* pFngiveReward = NULL;

	if ( ! pFngiveReward )
		pFngiveReward = (UFunction*) UObject::GObjObjects()->Data[ 57444 ];

	ASanctumWaveSpawner_execgiveReward_Parms giveReward_Parms;
	giveReward_Parms.Wave = Wave;

	this->ProcessEvent ( pFngiveReward, &giveReward_Parms, NULL );
};

// Function Sanctum.SanctumWaveSpawner.waveComplete
// [0x00020002] 
// Parameters infos:

void ASanctumWaveSpawner::waveComplete ( )
{
	static UFunction* pFnwaveComplete = NULL;

	if ( ! pFnwaveComplete )
		pFnwaveComplete = (UFunction*) UObject::GObjObjects()->Data[ 57439 ];

	ASanctumWaveSpawner_execwaveComplete_Parms waveComplete_Parms;

	this->ProcessEvent ( pFnwaveComplete, &waveComplete_Parms, NULL );
};

// Function Sanctum.SanctumWaveSpawner.startWave
// [0x00820002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void ASanctumWaveSpawner::startWave ( int Wave )
{
	static UFunction* pFnstartWave = NULL;

	if ( ! pFnstartWave )
		pFnstartWave = (UFunction*) UObject::GObjObjects()->Data[ 57433 ];

	ASanctumWaveSpawner_execstartWave_Parms startWave_Parms;
	startWave_Parms.Wave = Wave;

	this->ProcessEvent ( pFnstartWave, &startWave_Parms, NULL );
};

// Function Sanctum.SanctumWaveSpawner.PlanWave
// [0x00020002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void ASanctumWaveSpawner::PlanWave ( int Wave )
{
	static UFunction* pFnPlanWave = NULL;

	if ( ! pFnPlanWave )
		pFnPlanWave = (UFunction*) UObject::GObjObjects()->Data[ 57427 ];

	ASanctumWaveSpawner_execPlanWave_Parms PlanWave_Parms;
	PlanWave_Parms.Wave = Wave;

	this->ProcessEvent ( pFnPlanWave, &PlanWave_Parms, NULL );
};

// Function Sanctum.SanctumWaveSpawner.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWaveSpawner::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57425 ];

	ASanctumWaveSpawner_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumSpawner.giveReward
// [0x00020000] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void ASanctumSpawner::giveReward ( int Wave )
{
	static UFunction* pFngiveReward = NULL;

	if ( ! pFngiveReward )
		pFngiveReward = (UFunction*) UObject::GObjObjects()->Data[ 55533 ];

	ASanctumSpawner_execgiveReward_Parms giveReward_Parms;
	giveReward_Parms.Wave = Wave;

	this->ProcessEvent ( pFngiveReward, &giveReward_Parms, NULL );
};

// Function Sanctum.SanctumSpawner.waveComplete
// [0x00020000] 
// Parameters infos:

void ASanctumSpawner::waveComplete ( )
{
	static UFunction* pFnwaveComplete = NULL;

	if ( ! pFnwaveComplete )
		pFnwaveComplete = (UFunction*) UObject::GObjObjects()->Data[ 55532 ];

	ASanctumSpawner_execwaveComplete_Parms waveComplete_Parms;

	this->ProcessEvent ( pFnwaveComplete, &waveComplete_Parms, NULL );
};

// Function Sanctum.SanctumSpawner.startWave
// [0x00020002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void ASanctumSpawner::startWave ( int Wave )
{
	static UFunction* pFnstartWave = NULL;

	if ( ! pFnstartWave )
		pFnstartWave = (UFunction*) UObject::GObjObjects()->Data[ 55530 ];

	ASanctumSpawner_execstartWave_Parms startWave_Parms;
	startWave_Parms.Wave = Wave;

	this->ProcessEvent ( pFnstartWave, &startWave_Parms, NULL );
};

// Function Sanctum.SanctumSpawner.isFinished
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumSpawner::isFinished ( )
{
	static UFunction* pFnisFinished = NULL;

	if ( ! pFnisFinished )
		pFnisFinished = (UFunction*) UObject::GObjObjects()->Data[ 48022 ];

	ASanctumSpawner_execisFinished_Parms isFinished_Parms;

	this->ProcessEvent ( pFnisFinished, &isFinished_Parms, NULL );

	return isFinished_Parms.ReturnValue;
};

// Function Sanctum.SanctumSpawner.findLocation
// [0x00020002] 
// Parameters infos:
// class ASanctumSpawnLocation*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Id                             ( CPF_Parm )

class ASanctumSpawnLocation* ASanctumSpawner::findLocation ( int Id )
{
	static UFunction* pFnfindLocation = NULL;

	if ( ! pFnfindLocation )
		pFnfindLocation = (UFunction*) UObject::GObjObjects()->Data[ 55526 ];

	ASanctumSpawner_execfindLocation_Parms findLocation_Parms;
	findLocation_Parms.Id = Id;

	this->ProcessEvent ( pFnfindLocation, &findLocation_Parms, NULL );

	return findLocation_Parms.ReturnValue;
};

// Function Sanctum.SanctumSpawner.PlanWave
// [0x00020000] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void ASanctumSpawner::PlanWave ( int Wave )
{
	static UFunction* pFnPlanWave = NULL;

	if ( ! pFnPlanWave )
		pFnPlanWave = (UFunction*) UObject::GObjObjects()->Data[ 55524 ];

	ASanctumSpawner_execPlanWave_Parms PlanWave_Parms;
	PlanWave_Parms.Wave = Wave;

	this->ProcessEvent ( pFnPlanWave, &PlanWave_Parms, NULL );
};

// Function Sanctum.SanctumSpawner.laneComplete
// [0x00020002] 
// Parameters infos:
// class ASanctumSpawnLocation*   Loc                            ( CPF_Parm )

void ASanctumSpawner::laneComplete ( class ASanctumSpawnLocation* Loc )
{
	static UFunction* pFnlaneComplete = NULL;

	if ( ! pFnlaneComplete )
		pFnlaneComplete = (UFunction*) UObject::GObjObjects()->Data[ 55519 ];

	ASanctumSpawner_execlaneComplete_Parms laneComplete_Parms;
	laneComplete_Parms.Loc = Loc;

	this->ProcessEvent ( pFnlaneComplete, &laneComplete_Parms, NULL );
};

// Function Sanctum.SanctumSpawner.findLane
// [0x00020002] 
// Parameters infos:
// class ASanctumSpawnLocation*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< class ASanctumSpawnLocation* > locations                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            Id                             ( CPF_Parm )

class ASanctumSpawnLocation* ASanctumSpawner::findLane ( TArray< class ASanctumSpawnLocation* > locations, int Id )
{
	static UFunction* pFnfindLane = NULL;

	if ( ! pFnfindLane )
		pFnfindLane = (UFunction*) UObject::GObjObjects()->Data[ 55513 ];

	ASanctumSpawner_execfindLane_Parms findLane_Parms;
	memcpy ( &findLane_Parms.locations, &locations, 0xC );
	findLane_Parms.Id = Id;

	this->ProcessEvent ( pFnfindLane, &findLane_Parms, NULL );

	return findLane_Parms.ReturnValue;
};

// Function Sanctum.SanctumSpawner.setCurrentWave
// [0x00020002] 
// Parameters infos:
// int                            currentWave                    ( CPF_Parm )

void ASanctumSpawner::setCurrentWave ( int currentWave )
{
	static UFunction* pFnsetCurrentWave = NULL;

	if ( ! pFnsetCurrentWave )
		pFnsetCurrentWave = (UFunction*) UObject::GObjObjects()->Data[ 55511 ];

	ASanctumSpawner_execsetCurrentWave_Parms setCurrentWave_Parms;
	setCurrentWave_Parms.currentWave = currentWave;

	this->ProcessEvent ( pFnsetCurrentWave, &setCurrentWave_Parms, NULL );
};

// Function Sanctum.SanctumSpawner.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumSpawner::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 55509 ];

	ASanctumSpawner_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumSpawnLocation.setFinishedCallback
// [0x00020102] 
// Parameters infos:
// struct FScriptDelegate         CompleteDelegate               ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumSpawnLocation::setFinishedCallback ( struct FScriptDelegate CompleteDelegate )
{
	static UFunction* pFnsetFinishedCallback = NULL;

	if ( ! pFnsetFinishedCallback )
		pFnsetFinishedCallback = (UFunction*) UObject::GObjObjects()->Data[ 55576 ];

	ASanctumSpawnLocation_execsetFinishedCallback_Parms setFinishedCallback_Parms;
	memcpy ( &setFinishedCallback_Parms.CompleteDelegate, &CompleteDelegate, 0xC );

	this->ProcessEvent ( pFnsetFinishedCallback, &setFinishedCallback_Parms, NULL );
};

// Function Sanctum.SanctumSpawnLocation.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumSpawnLocation::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 55574 ];

	ASanctumSpawnLocation_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumSpawnLocation.spawnerFinished
// [0x00020002] 
// Parameters infos:
// class ASanctumEnemySpawner*    Spawner                        ( CPF_Parm )

void ASanctumSpawnLocation::spawnerFinished ( class ASanctumEnemySpawner* Spawner )
{
	static UFunction* pFnspawnerFinished = NULL;

	if ( ! pFnspawnerFinished )
		pFnspawnerFinished = (UFunction*) UObject::GObjObjects()->Data[ 55571 ];

	ASanctumSpawnLocation_execspawnerFinished_Parms spawnerFinished_Parms;
	spawnerFinished_Parms.Spawner = Spawner;

	this->ProcessEvent ( pFnspawnerFinished, &spawnerFinished_Parms, NULL );
};

// Function Sanctum.SanctumSpawnLocation.isFinished
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumSpawnLocation::isFinished ( )
{
	static UFunction* pFnisFinished = NULL;

	if ( ! pFnisFinished )
		pFnisFinished = (UFunction*) UObject::GObjObjects()->Data[ 55522 ];

	ASanctumSpawnLocation_execisFinished_Parms isFinished_Parms;

	this->ProcessEvent ( pFnisFinished, &isFinished_Parms, NULL );

	return isFinished_Parms.ReturnValue;
};

// Function Sanctum.SanctumSpawnLocation.startWave
// [0x00020002] 
// Parameters infos:

void ASanctumSpawnLocation::startWave ( )
{
	static UFunction* pFnstartWave = NULL;

	if ( ! pFnstartWave )
		pFnstartWave = (UFunction*) UObject::GObjObjects()->Data[ 55563 ];

	ASanctumSpawnLocation_execstartWave_Parms startWave_Parms;

	this->ProcessEvent ( pFnstartWave, &startWave_Parms, NULL );
};

// Function Sanctum.SanctumSpawnLocation.addEnemyConfig
// [0x00020002] 
// Parameters infos:
// struct FEnemyConfig            enemyConf                      ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumSpawnLocation::addEnemyConfig ( struct FEnemyConfig enemyConf )
{
	static UFunction* pFnaddEnemyConfig = NULL;

	if ( ! pFnaddEnemyConfig )
		pFnaddEnemyConfig = (UFunction*) UObject::GObjObjects()->Data[ 55560 ];

	ASanctumSpawnLocation_execaddEnemyConfig_Parms addEnemyConfig_Parms;
	memcpy ( &addEnemyConfig_Parms.enemyConf, &enemyConf, 0x1C );

	this->ProcessEvent ( pFnaddEnemyConfig, &addEnemyConfig_Parms, NULL );
};

// Function Sanctum.SanctumSpawnLocation.setEndlessMode
// [0x00020002] 
// Parameters infos:
// unsigned long                  endless                        ( CPF_Parm )
// unsigned long                  isSpGame                       ( CPF_Parm )
// float                          resourceMod                    ( CPF_Parm )

void ASanctumSpawnLocation::setEndlessMode ( unsigned long endless, unsigned long isSpGame, float resourceMod )
{
	static UFunction* pFnsetEndlessMode = NULL;

	if ( ! pFnsetEndlessMode )
		pFnsetEndlessMode = (UFunction*) UObject::GObjObjects()->Data[ 55555 ];

	ASanctumSpawnLocation_execsetEndlessMode_Parms setEndlessMode_Parms;
	setEndlessMode_Parms.endless = endless;
	setEndlessMode_Parms.isSpGame = isSpGame;
	setEndlessMode_Parms.resourceMod = resourceMod;

	this->ProcessEvent ( pFnsetEndlessMode, &setEndlessMode_Parms, NULL );
};

// Function Sanctum.SanctumSpawnLocation.clearEnemies
// [0x00020002] 
// Parameters infos:

void ASanctumSpawnLocation::clearEnemies ( )
{
	static UFunction* pFnclearEnemies = NULL;

	if ( ! pFnclearEnemies )
		pFnclearEnemies = (UFunction*) UObject::GObjObjects()->Data[ 55553 ];

	ASanctumSpawnLocation_execclearEnemies_Parms clearEnemies_Parms;

	this->ProcessEvent ( pFnclearEnemies, &clearEnemies_Parms, NULL );
};

// Function Sanctum.SanctumSpawnLocation.CompleteDelegate
// [0x00120000] 
// Parameters infos:
// class ASanctumSpawnLocation*   Loc                            ( CPF_Parm )

void ASanctumSpawnLocation::CompleteDelegate ( class ASanctumSpawnLocation* Loc )
{
	static UFunction* pFnCompleteDelegate = NULL;

	if ( ! pFnCompleteDelegate )
		pFnCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 55542 ];

	ASanctumSpawnLocation_execCompleteDelegate_Parms CompleteDelegate_Parms;
	CompleteDelegate_Parms.Loc = Loc;

	this->ProcessEvent ( pFnCompleteDelegate, &CompleteDelegate_Parms, NULL );
};

// Function Sanctum.SanctumEnemySporePod.SetWeakbonesScale
// [0x00020100] 
// Parameters infos:
// float                          NewScale                       ( CPF_Parm )

void ASanctumEnemySporePod::SetWeakbonesScale ( float NewScale )
{
	static UFunction* pFnSetWeakbonesScale = NULL;

	if ( ! pFnSetWeakbonesScale )
		pFnSetWeakbonesScale = (UFunction*) UObject::GObjObjects()->Data[ 47829 ];

	ASanctumEnemySporePod_execSetWeakbonesScale_Parms SetWeakbonesScale_Parms;
	SetWeakbonesScale_Parms.NewScale = NewScale;

	this->ProcessEvent ( pFnSetWeakbonesScale, &SetWeakbonesScale_Parms, NULL );
};

// Function Sanctum.SanctumEnemySporePod.PlayerKilledEnemyStats
// [0x00020002] 
// Parameters infos:
// class ASanctumPlayerReplicationInfo* PRI                            ( CPF_Parm )

void ASanctumEnemySporePod::PlayerKilledEnemyStats ( class ASanctumPlayerReplicationInfo* PRI )
{
	static UFunction* pFnPlayerKilledEnemyStats = NULL;

	if ( ! pFnPlayerKilledEnemyStats )
		pFnPlayerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47826 ];

	ASanctumEnemySporePod_execPlayerKilledEnemyStats_Parms PlayerKilledEnemyStats_Parms;
	PlayerKilledEnemyStats_Parms.PRI = PRI;

	this->ProcessEvent ( pFnPlayerKilledEnemyStats, &PlayerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemySporePod.TowerKilledEnemyStats
// [0x00020002] 
// Parameters infos:

void ASanctumEnemySporePod::TowerKilledEnemyStats ( )
{
	static UFunction* pFnTowerKilledEnemyStats = NULL;

	if ( ! pFnTowerKilledEnemyStats )
		pFnTowerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47823 ];

	ASanctumEnemySporePod_execTowerKilledEnemyStats_Parms TowerKilledEnemyStats_Parms;

	this->ProcessEvent ( pFnTowerKilledEnemyStats, &TowerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemySporePod.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumEnemySporePod::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47822 ];

	ASanctumEnemySporePod_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumEnemyWalker.PlayerKilledEnemyStats
// [0x00020002] 
// Parameters infos:
// class ASanctumPlayerReplicationInfo* PRI                            ( CPF_Parm )

void ASanctumEnemyWalker::PlayerKilledEnemyStats ( class ASanctumPlayerReplicationInfo* PRI )
{
	static UFunction* pFnPlayerKilledEnemyStats = NULL;

	if ( ! pFnPlayerKilledEnemyStats )
		pFnPlayerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47856 ];

	ASanctumEnemyWalker_execPlayerKilledEnemyStats_Parms PlayerKilledEnemyStats_Parms;
	PlayerKilledEnemyStats_Parms.PRI = PRI;

	this->ProcessEvent ( pFnPlayerKilledEnemyStats, &PlayerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyWalker.TowerKilledEnemyStats
// [0x00020002] 
// Parameters infos:

void ASanctumEnemyWalker::TowerKilledEnemyStats ( )
{
	static UFunction* pFnTowerKilledEnemyStats = NULL;

	if ( ! pFnTowerKilledEnemyStats )
		pFnTowerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47853 ];

	ASanctumEnemyWalker_execTowerKilledEnemyStats_Parms TowerKilledEnemyStats_Parms;

	this->ProcessEvent ( pFnTowerKilledEnemyStats, &TowerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyWalker.SpawnGibs
// [0x00020102] 
// Parameters infos:
// class UClass*                  sanctumDamageTypeClass         ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASanctumEnemyWalker::SpawnGibs ( class UClass* sanctumDamageTypeClass, struct FVector HitLocation )
{
	static UFunction* pFnSpawnGibs = NULL;

	if ( ! pFnSpawnGibs )
		pFnSpawnGibs = (UFunction*) UObject::GObjObjects()->Data[ 47850 ];

	ASanctumEnemyWalker_execSpawnGibs_Parms SpawnGibs_Parms;
	SpawnGibs_Parms.sanctumDamageTypeClass = sanctumDamageTypeClass;
	memcpy ( &SpawnGibs_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSpawnGibs, &SpawnGibs_Parms, NULL );
};

// Function Sanctum.SanctumEnemyWalker.ShouldDropChristmasPresent
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumEnemyWalker::ShouldDropChristmasPresent ( )
{
	static UFunction* pFnShouldDropChristmasPresent = NULL;

	if ( ! pFnShouldDropChristmasPresent )
		pFnShouldDropChristmasPresent = (UFunction*) UObject::GObjObjects()->Data[ 47848 ];

	ASanctumEnemyWalker_execShouldDropChristmasPresent_Parms ShouldDropChristmasPresent_Parms;

	this->ProcessEvent ( pFnShouldDropChristmasPresent, &ShouldDropChristmasPresent_Parms, NULL );

	return ShouldDropChristmasPresent_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemyWalker.ShouldBeChristmasEnemy
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumEnemyWalker::ShouldBeChristmasEnemy ( )
{
	static UFunction* pFnShouldBeChristmasEnemy = NULL;

	if ( ! pFnShouldBeChristmasEnemy )
		pFnShouldBeChristmasEnemy = (UFunction*) UObject::GObjObjects()->Data[ 47845 ];

	ASanctumEnemyWalker_execShouldBeChristmasEnemy_Parms ShouldBeChristmasEnemy_Parms;

	this->ProcessEvent ( pFnShouldBeChristmasEnemy, &ShouldBeChristmasEnemy_Parms, NULL );

	return ShouldBeChristmasEnemy_Parms.ReturnValue;
};

// Function Sanctum.SanctumEnemyWalker.AttachChristmas
// [0x00020102] 
// Parameters infos:

void ASanctumEnemyWalker::AttachChristmas ( )
{
	static UFunction* pFnAttachChristmas = NULL;

	if ( ! pFnAttachChristmas )
		pFnAttachChristmas = (UFunction*) UObject::GObjObjects()->Data[ 47844 ];

	ASanctumEnemyWalker_execAttachChristmas_Parms AttachChristmas_Parms;

	this->ProcessEvent ( pFnAttachChristmas, &AttachChristmas_Parms, NULL );
};

// Function Sanctum.SanctumEnemyWalker.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumEnemyWalker::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 47842 ];

	ASanctumEnemyWalker_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumEnemyWalkerBig.PlayerKilledEnemyStats
// [0x00020002] 
// Parameters infos:
// class ASanctumPlayerReplicationInfo* PRI                            ( CPF_Parm )

void ASanctumEnemyWalkerBig::PlayerKilledEnemyStats ( class ASanctumPlayerReplicationInfo* PRI )
{
	static UFunction* pFnPlayerKilledEnemyStats = NULL;

	if ( ! pFnPlayerKilledEnemyStats )
		pFnPlayerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47873 ];

	ASanctumEnemyWalkerBig_execPlayerKilledEnemyStats_Parms PlayerKilledEnemyStats_Parms;
	PlayerKilledEnemyStats_Parms.PRI = PRI;

	this->ProcessEvent ( pFnPlayerKilledEnemyStats, &PlayerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyWalkerBig.TowerKilledEnemyStats
// [0x00020002] 
// Parameters infos:

void ASanctumEnemyWalkerBig::TowerKilledEnemyStats ( )
{
	static UFunction* pFnTowerKilledEnemyStats = NULL;

	if ( ! pFnTowerKilledEnemyStats )
		pFnTowerKilledEnemyStats = (UFunction*) UObject::GObjObjects()->Data[ 47870 ];

	ASanctumEnemyWalkerBig_execTowerKilledEnemyStats_Parms TowerKilledEnemyStats_Parms;

	this->ProcessEvent ( pFnTowerKilledEnemyStats, &TowerKilledEnemyStats_Parms, NULL );
};

// Function Sanctum.SanctumEnemyWalkerBig.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumEnemyWalkerBig::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47869 ];

	ASanctumEnemyWalkerBig_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumRubelAlgorithm.GetRubelForKilledEnemy
// [0x00024002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Wave                           ( CPF_Parm )
// class ASanctumEnemy*           killedEnemy                    ( CPF_Parm )
// unsigned long                  turboMode                      ( CPF_OptionalParm | CPF_Parm )

int USanctumRubelAlgorithm::GetRubelForKilledEnemy ( int Wave, class ASanctumEnemy* killedEnemy, unsigned long turboMode )
{
	static UFunction* pFnGetRubelForKilledEnemy = NULL;

	if ( ! pFnGetRubelForKilledEnemy )
		pFnGetRubelForKilledEnemy = (UFunction*) UObject::GObjObjects()->Data[ 48018 ];

	USanctumRubelAlgorithm_execGetRubelForKilledEnemy_Parms GetRubelForKilledEnemy_Parms;
	GetRubelForKilledEnemy_Parms.Wave = Wave;
	GetRubelForKilledEnemy_Parms.killedEnemy = killedEnemy;
	GetRubelForKilledEnemy_Parms.turboMode = turboMode;

	this->ProcessEvent ( pFnGetRubelForKilledEnemy, &GetRubelForKilledEnemy_Parms, NULL );

	return GetRubelForKilledEnemy_Parms.ReturnValue;
};

// Function Sanctum.SanctumRubelAlgorithm.GetRubelAmountAfterWave
// [0x00020000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Wave                           ( CPF_Parm )
// unsigned long                  turboMode                      ( CPF_Parm )

int USanctumRubelAlgorithm::GetRubelAmountAfterWave ( int Wave, unsigned long turboMode )
{
	static UFunction* pFnGetRubelAmountAfterWave = NULL;

	if ( ! pFnGetRubelAmountAfterWave )
		pFnGetRubelAmountAfterWave = (UFunction*) UObject::GObjObjects()->Data[ 48007 ];

	USanctumRubelAlgorithm_execGetRubelAmountAfterWave_Parms GetRubelAmountAfterWave_Parms;
	GetRubelAmountAfterWave_Parms.Wave = Wave;
	GetRubelAmountAfterWave_Parms.turboMode = turboMode;

	this->ProcessEvent ( pFnGetRubelAmountAfterWave, &GetRubelAmountAfterWave_Parms, NULL );

	return GetRubelAmountAfterWave_Parms.ReturnValue;
};

// Function Sanctum.SanctumRubelAlgorithm.GetInitialRubel
// [0x00020000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  turboMode                      ( CPF_Parm )

int USanctumRubelAlgorithm::GetInitialRubel ( struct FString MapName, unsigned long turboMode )
{
	static UFunction* pFnGetInitialRubel = NULL;

	if ( ! pFnGetInitialRubel )
		pFnGetInitialRubel = (UFunction*) UObject::GObjObjects()->Data[ 47972 ];

	USanctumRubelAlgorithm_execGetInitialRubel_Parms GetInitialRubel_Parms;
	memcpy ( &GetInitialRubel_Parms.MapName, &MapName, 0xC );
	GetInitialRubel_Parms.turboMode = turboMode;

	this->ProcessEvent ( pFnGetInitialRubel, &GetInitialRubel_Parms, NULL );

	return GetInitialRubel_Parms.ReturnValue;
};

// Function Sanctum.SanctumRubelAlgorithm.Init
// [0x00020000] 
// Parameters infos:
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  turboMode                      ( CPF_Parm )

void USanctumRubelAlgorithm::Init ( struct FString MapName, unsigned long turboMode )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 54805 ];

	USanctumRubelAlgorithm_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.MapName, &MapName, 0xC );
	Init_Parms.turboMode = turboMode;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumRubelAlgorithmClassic.GetRubelForKilledEnemy
// [0x00024002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Wave                           ( CPF_Parm )
// class ASanctumEnemy*           killedEnemy                    ( CPF_Parm )
// unsigned long                  turboMode                      ( CPF_OptionalParm | CPF_Parm )

int USanctumRubelAlgorithmClassic::GetRubelForKilledEnemy ( int Wave, class ASanctumEnemy* killedEnemy, unsigned long turboMode )
{
	static UFunction* pFnGetRubelForKilledEnemy = NULL;

	if ( ! pFnGetRubelForKilledEnemy )
		pFnGetRubelForKilledEnemy = (UFunction*) UObject::GObjObjects()->Data[ 54828 ];

	USanctumRubelAlgorithmClassic_execGetRubelForKilledEnemy_Parms GetRubelForKilledEnemy_Parms;
	GetRubelForKilledEnemy_Parms.Wave = Wave;
	GetRubelForKilledEnemy_Parms.killedEnemy = killedEnemy;
	GetRubelForKilledEnemy_Parms.turboMode = turboMode;

	this->ProcessEvent ( pFnGetRubelForKilledEnemy, &GetRubelForKilledEnemy_Parms, NULL );

	return GetRubelForKilledEnemy_Parms.ReturnValue;
};

// Function Sanctum.SanctumRubelAlgorithmClassic.GetRubelAmountAfterWave
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Wave                           ( CPF_Parm )
// unsigned long                  turboMode                      ( CPF_Parm )

int USanctumRubelAlgorithmClassic::GetRubelAmountAfterWave ( int Wave, unsigned long turboMode )
{
	static UFunction* pFnGetRubelAmountAfterWave = NULL;

	if ( ! pFnGetRubelAmountAfterWave )
		pFnGetRubelAmountAfterWave = (UFunction*) UObject::GObjObjects()->Data[ 54824 ];

	USanctumRubelAlgorithmClassic_execGetRubelAmountAfterWave_Parms GetRubelAmountAfterWave_Parms;
	GetRubelAmountAfterWave_Parms.Wave = Wave;
	GetRubelAmountAfterWave_Parms.turboMode = turboMode;

	this->ProcessEvent ( pFnGetRubelAmountAfterWave, &GetRubelAmountAfterWave_Parms, NULL );

	return GetRubelAmountAfterWave_Parms.ReturnValue;
};

// Function Sanctum.SanctumRubelAlgorithmClassic.GetInitialRubel
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  turboMode                      ( CPF_Parm )

int USanctumRubelAlgorithmClassic::GetInitialRubel ( struct FString MapName, unsigned long turboMode )
{
	static UFunction* pFnGetInitialRubel = NULL;

	if ( ! pFnGetInitialRubel )
		pFnGetInitialRubel = (UFunction*) UObject::GObjObjects()->Data[ 54819 ];

	USanctumRubelAlgorithmClassic_execGetInitialRubel_Parms GetInitialRubel_Parms;
	memcpy ( &GetInitialRubel_Parms.MapName, &MapName, 0xC );
	GetInitialRubel_Parms.turboMode = turboMode;

	this->ProcessEvent ( pFnGetInitialRubel, &GetInitialRubel_Parms, NULL );

	return GetInitialRubel_Parms.ReturnValue;
};

// Function Sanctum.SanctumRubelAlgorithmClassic.Init
// [0x00020002] 
// Parameters infos:
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  turboMode                      ( CPF_Parm )

void USanctumRubelAlgorithmClassic::Init ( struct FString MapName, unsigned long turboMode )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 54816 ];

	USanctumRubelAlgorithmClassic_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.MapName, &MapName, 0xC );
	Init_Parms.turboMode = turboMode;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumRubelAlgorithmOnslaught.GetRubelForKilledEnemy
// [0x00024002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Wave                           ( CPF_Parm )
// class ASanctumEnemy*           killedEnemy                    ( CPF_Parm )
// unsigned long                  turboMode                      ( CPF_OptionalParm | CPF_Parm )

int USanctumRubelAlgorithmOnslaught::GetRubelForKilledEnemy ( int Wave, class ASanctumEnemy* killedEnemy, unsigned long turboMode )
{
	static UFunction* pFnGetRubelForKilledEnemy = NULL;

	if ( ! pFnGetRubelForKilledEnemy )
		pFnGetRubelForKilledEnemy = (UFunction*) UObject::GObjObjects()->Data[ 54876 ];

	USanctumRubelAlgorithmOnslaught_execGetRubelForKilledEnemy_Parms GetRubelForKilledEnemy_Parms;
	GetRubelForKilledEnemy_Parms.Wave = Wave;
	GetRubelForKilledEnemy_Parms.killedEnemy = killedEnemy;
	GetRubelForKilledEnemy_Parms.turboMode = turboMode;

	this->ProcessEvent ( pFnGetRubelForKilledEnemy, &GetRubelForKilledEnemy_Parms, NULL );

	return GetRubelForKilledEnemy_Parms.ReturnValue;
};

// Function Sanctum.SanctumRubelAlgorithmOnslaught.GetRubelAmountAfterWave
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Wave                           ( CPF_Parm )
// unsigned long                  turboMode                      ( CPF_Parm )

int USanctumRubelAlgorithmOnslaught::GetRubelAmountAfterWave ( int Wave, unsigned long turboMode )
{
	static UFunction* pFnGetRubelAmountAfterWave = NULL;

	if ( ! pFnGetRubelAmountAfterWave )
		pFnGetRubelAmountAfterWave = (UFunction*) UObject::GObjObjects()->Data[ 54872 ];

	USanctumRubelAlgorithmOnslaught_execGetRubelAmountAfterWave_Parms GetRubelAmountAfterWave_Parms;
	GetRubelAmountAfterWave_Parms.Wave = Wave;
	GetRubelAmountAfterWave_Parms.turboMode = turboMode;

	this->ProcessEvent ( pFnGetRubelAmountAfterWave, &GetRubelAmountAfterWave_Parms, NULL );

	return GetRubelAmountAfterWave_Parms.ReturnValue;
};

// Function Sanctum.SanctumRubelAlgorithmOnslaught.GetInitialRubel
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  turboMode                      ( CPF_Parm )

int USanctumRubelAlgorithmOnslaught::GetInitialRubel ( struct FString MapName, unsigned long turboMode )
{
	static UFunction* pFnGetInitialRubel = NULL;

	if ( ! pFnGetInitialRubel )
		pFnGetInitialRubel = (UFunction*) UObject::GObjObjects()->Data[ 54868 ];

	USanctumRubelAlgorithmOnslaught_execGetInitialRubel_Parms GetInitialRubel_Parms;
	memcpy ( &GetInitialRubel_Parms.MapName, &MapName, 0xC );
	GetInitialRubel_Parms.turboMode = turboMode;

	this->ProcessEvent ( pFnGetInitialRubel, &GetInitialRubel_Parms, NULL );

	return GetInitialRubel_Parms.ReturnValue;
};

// Function Sanctum.SanctumRubelAlgorithmOnslaught.Init
// [0x00020002] 
// Parameters infos:
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  turboMode                      ( CPF_Parm )

void USanctumRubelAlgorithmOnslaught::Init ( struct FString MapName, unsigned long turboMode )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 54863 ];

	USanctumRubelAlgorithmOnslaught_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.MapName, &MapName, 0xC );
	Init_Parms.turboMode = turboMode;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_StartGame.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USanctumSeqEvent_StartGame::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 55344 ];

	USanctumSeqEvent_StartGame_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Sanctum.SanctumSeqEvent_StartGame.notifyStartGame
// [0x00020002] 
// Parameters infos:
// float                          Diff                           ( CPF_Parm )
// unsigned long                  turbo                          ( CPF_Parm )
// class AActor*                  FromActor                      ( CPF_Parm )

void USanctumSeqEvent_StartGame::notifyStartGame ( float Diff, unsigned long turbo, class AActor* FromActor )
{
	static UFunction* pFnnotifyStartGame = NULL;

	if ( ! pFnnotifyStartGame )
		pFnnotifyStartGame = (UFunction*) UObject::GObjObjects()->Data[ 55338 ];

	USanctumSeqEvent_StartGame_execnotifyStartGame_Parms notifyStartGame_Parms;
	notifyStartGame_Parms.Diff = Diff;
	notifyStartGame_Parms.turbo = turbo;
	notifyStartGame_Parms.FromActor = FromActor;

	this->ProcessEvent ( pFnnotifyStartGame, &notifyStartGame_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_StartGame.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_StartGame::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55337 ];

	USanctumSeqEvent_StartGame_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumLocalMessageHeavyWave.GetColor
// [0x00026002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FColor USanctumLocalMessageHeavyWave::GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetColor = NULL;

	if ( ! pFnGetColor )
		pFnGetColor = (UFunction*) UObject::GObjObjects()->Data[ 52447 ];

	USanctumLocalMessageHeavyWave_execGetColor_Parms GetColor_Parms;
	GetColor_Parms.Switch = Switch;
	GetColor_Parms.RelatedPRI = RelatedPRI;
	GetColor_Parms.RelatedPRI01 = RelatedPRI01;
	GetColor_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetColor, &GetColor_Parms, NULL );

	return GetColor_Parms.ReturnValue;
};

// Function Sanctum.SanctumLocalMessageHeavyWave.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString USanctumLocalMessageHeavyWave::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 52440 ];

	USanctumLocalMessageHeavyWave_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Sanctum.SanctumLocalMessage.GetColor
// [0x00026002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FColor USanctumLocalMessage::GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetColor = NULL;

	if ( ! pFnGetColor )
		pFnGetColor = (UFunction*) UObject::GObjObjects()->Data[ 52420 ];

	USanctumLocalMessage_execGetColor_Parms GetColor_Parms;
	GetColor_Parms.Switch = Switch;
	GetColor_Parms.RelatedPRI = RelatedPRI;
	GetColor_Parms.RelatedPRI01 = RelatedPRI01;
	GetColor_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetColor, &GetColor_Parms, NULL );

	return GetColor_Parms.ReturnValue;
};

// Function Sanctum.SanctumLocalMessage.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString USanctumLocalMessage::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 52413 ];

	USanctumLocalMessage_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfoEndlessLimited.ActivateLevelCompleteScene
// [0x00020002] 
// Parameters infos:

void ASanctumGameInfoEndlessLimited::ActivateLevelCompleteScene ( )
{
	static UFunction* pFnActivateLevelCompleteScene = NULL;

	if ( ! pFnActivateLevelCompleteScene )
		pFnActivateLevelCompleteScene = (UFunction*) UObject::GObjObjects()->Data[ 48352 ];

	ASanctumGameInfoEndlessLimited_execActivateLevelCompleteScene_Parms ActivateLevelCompleteScene_Parms;

	this->ProcessEvent ( pFnActivateLevelCompleteScene, &ActivateLevelCompleteScene_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoEndlessLimited.ToggleLevelCompleteEvent
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumGameInfoEndlessLimited::eventToggleLevelCompleteEvent ( )
{
	static UFunction* pFnToggleLevelCompleteEvent = NULL;

	if ( ! pFnToggleLevelCompleteEvent )
		pFnToggleLevelCompleteEvent = (UFunction*) UObject::GObjObjects()->Data[ 48350 ];

	ASanctumGameInfoEndlessLimited_eventToggleLevelCompleteEvent_Parms ToggleLevelCompleteEvent_Parms;

	this->ProcessEvent ( pFnToggleLevelCompleteEvent, &ToggleLevelCompleteEvent_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoEndlessLimited.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumGameInfoEndlessLimited::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 48349 ];

	ASanctumGameInfoEndlessLimited_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumGameInfoEndlessLimited.GetGameModeInt
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumGameInfoEndlessLimited::GetGameModeInt ( )
{
	static UFunction* pFnGetGameModeInt = NULL;

	if ( ! pFnGetGameModeInt )
		pFnGetGameModeInt = (UFunction*) UObject::GObjObjects()->Data[ 48347 ];

	ASanctumGameInfoEndlessLimited_execGetGameModeInt_Parms GetGameModeInt_Parms;

	this->ProcessEvent ( pFnGetGameModeInt, &GetGameModeInt_Parms, NULL );

	return GetGameModeInt_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfoEndlessLimited.difficultyToString
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  Difficulty                     ( CPF_Parm )

struct FString ASanctumGameInfoEndlessLimited::difficultyToString ( unsigned char Difficulty )
{
	static UFunction* pFndifficultyToString = NULL;

	if ( ! pFndifficultyToString )
		pFndifficultyToString = (UFunction*) UObject::GObjObjects()->Data[ 48344 ];

	ASanctumGameInfoEndlessLimited_execdifficultyToString_Parms difficultyToString_Parms;
	difficultyToString_Parms.Difficulty = Difficulty;

	this->ProcessEvent ( pFndifficultyToString, &difficultyToString_Parms, NULL );

	return difficultyToString_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameInfoEndlessLimited.InitGame
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumGameInfoEndlessLimited::eventInitGame ( struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnInitGame = NULL;

	if ( ! pFnInitGame )
		pFnInitGame = (UFunction*) UObject::GObjObjects()->Data[ 48341 ];

	ASanctumGameInfoEndlessLimited_eventInitGame_Parms InitGame_Parms;
	memcpy ( &InitGame_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnInitGame, &InitGame_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &InitGame_Parms.ErrorMessage, 0xC );
};

// Function Sanctum.SanctumGameInfoEndlessLimited.isWavesLeft
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumGameInfoEndlessLimited::isWavesLeft ( )
{
	static UFunction* pFnisWavesLeft = NULL;

	if ( ! pFnisWavesLeft )
		pFnisWavesLeft = (UFunction*) UObject::GObjObjects()->Data[ 48339 ];

	ASanctumGameInfoEndlessLimited_execisWavesLeft_Parms isWavesLeft_Parms;

	this->ProcessEvent ( pFnisWavesLeft, &isWavesLeft_Parms, NULL );

	return isWavesLeft_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameMessage.GetColor
// [0x00026002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FColor USanctumGameMessage::GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetColor = NULL;

	if ( ! pFnGetColor )
		pFnGetColor = (UFunction*) UObject::GObjObjects()->Data[ 48461 ];

	USanctumGameMessage_execGetColor_Parms GetColor_Parms;
	GetColor_Parms.Switch = Switch;
	GetColor_Parms.RelatedPRI = RelatedPRI;
	GetColor_Parms.RelatedPRI01 = RelatedPRI01;
	GetColor_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetColor, &GetColor_Parms, NULL );

	return GetColor_Parms.ReturnValue;
};

// Function Sanctum.SanctumGameMessage.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString USanctumGameMessage::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 48454 ];

	USanctumGameMessage_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Sanctum.SanctumSeqEvent_StartGameEndless.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USanctumSeqEvent_StartGameEndless::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 55347 ];

	USanctumSeqEvent_StartGameEndless_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Sanctum.SanctumRubelAlgorithmEndless.GetRubelAmountAfterWave
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Wave                           ( CPF_Parm )
// unsigned long                  turboMode                      ( CPF_Parm )

int USanctumRubelAlgorithmEndless::GetRubelAmountAfterWave ( int Wave, unsigned long turboMode )
{
	static UFunction* pFnGetRubelAmountAfterWave = NULL;

	if ( ! pFnGetRubelAmountAfterWave )
		pFnGetRubelAmountAfterWave = (UFunction*) UObject::GObjObjects()->Data[ 54843 ];

	USanctumRubelAlgorithmEndless_execGetRubelAmountAfterWave_Parms GetRubelAmountAfterWave_Parms;
	GetRubelAmountAfterWave_Parms.Wave = Wave;
	GetRubelAmountAfterWave_Parms.turboMode = turboMode;

	this->ProcessEvent ( pFnGetRubelAmountAfterWave, &GetRubelAmountAfterWave_Parms, NULL );

	return GetRubelAmountAfterWave_Parms.ReturnValue;
};

// Function Sanctum.SanctumRubelAlgorithmEndless.GetInitialRubel
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  turboMode                      ( CPF_Parm )

int USanctumRubelAlgorithmEndless::GetInitialRubel ( struct FString MapName, unsigned long turboMode )
{
	static UFunction* pFnGetInitialRubel = NULL;

	if ( ! pFnGetInitialRubel )
		pFnGetInitialRubel = (UFunction*) UObject::GObjObjects()->Data[ 54838 ];

	USanctumRubelAlgorithmEndless_execGetInitialRubel_Parms GetInitialRubel_Parms;
	memcpy ( &GetInitialRubel_Parms.MapName, &MapName, 0xC );
	GetInitialRubel_Parms.turboMode = turboMode;

	this->ProcessEvent ( pFnGetInitialRubel, &GetInitialRubel_Parms, NULL );

	return GetInitialRubel_Parms.ReturnValue;
};

// Function Sanctum.SanctumRubelAlgorithmEndless.Init
// [0x00020002] 
// Parameters infos:
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  turboMode                      ( CPF_Parm )

void USanctumRubelAlgorithmEndless::Init ( struct FString MapName, unsigned long turboMode )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 54835 ];

	USanctumRubelAlgorithmEndless_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.MapName, &MapName, 0xC );
	Init_Parms.turboMode = turboMode;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_LevelComplete.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_LevelComplete::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55308 ];

	USanctumSeqEvent_LevelComplete_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_StartCameraPan.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_StartCameraPan::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55335 ];

	USanctumSeqEvent_StartCameraPan_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_CameraPanWasSkipped.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_CameraPanWasSkipped::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55285 ];

	USanctumSeqEvent_CameraPanWasSkipped_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumLocalMessageSave.GetColor
// [0x00026002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FColor USanctumLocalMessageSave::GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetColor = NULL;

	if ( ! pFnGetColor )
		pFnGetColor = (UFunction*) UObject::GObjObjects()->Data[ 52522 ];

	USanctumLocalMessageSave_execGetColor_Parms GetColor_Parms;
	GetColor_Parms.Switch = Switch;
	GetColor_Parms.RelatedPRI = RelatedPRI;
	GetColor_Parms.RelatedPRI01 = RelatedPRI01;
	GetColor_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetColor, &GetColor_Parms, NULL );

	return GetColor_Parms.ReturnValue;
};

// Function Sanctum.SanctumLocalMessageSave.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString USanctumLocalMessageSave::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 52515 ];

	USanctumLocalMessageSave_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Sanctum.SanctumRubelAlgorithmNormal.GetRubelAmountAfterWave
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Wave                           ( CPF_Parm )
// unsigned long                  turboMode                      ( CPF_Parm )

int USanctumRubelAlgorithmNormal::GetRubelAmountAfterWave ( int Wave, unsigned long turboMode )
{
	static UFunction* pFnGetRubelAmountAfterWave = NULL;

	if ( ! pFnGetRubelAmountAfterWave )
		pFnGetRubelAmountAfterWave = (UFunction*) UObject::GObjObjects()->Data[ 54856 ];

	USanctumRubelAlgorithmNormal_execGetRubelAmountAfterWave_Parms GetRubelAmountAfterWave_Parms;
	GetRubelAmountAfterWave_Parms.Wave = Wave;
	GetRubelAmountAfterWave_Parms.turboMode = turboMode;

	this->ProcessEvent ( pFnGetRubelAmountAfterWave, &GetRubelAmountAfterWave_Parms, NULL );

	return GetRubelAmountAfterWave_Parms.ReturnValue;
};

// Function Sanctum.SanctumRubelAlgorithmNormal.GetInitialRubel
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  turboMode                      ( CPF_Parm )

int USanctumRubelAlgorithmNormal::GetInitialRubel ( struct FString MapName, unsigned long turboMode )
{
	static UFunction* pFnGetInitialRubel = NULL;

	if ( ! pFnGetInitialRubel )
		pFnGetInitialRubel = (UFunction*) UObject::GObjObjects()->Data[ 54852 ];

	USanctumRubelAlgorithmNormal_execGetInitialRubel_Parms GetInitialRubel_Parms;
	memcpy ( &GetInitialRubel_Parms.MapName, &MapName, 0xC );
	GetInitialRubel_Parms.turboMode = turboMode;

	this->ProcessEvent ( pFnGetInitialRubel, &GetInitialRubel_Parms, NULL );

	return GetInitialRubel_Parms.ReturnValue;
};

// Function Sanctum.SanctumRubelAlgorithmNormal.Init
// [0x00020002] 
// Parameters infos:
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  turboMode                      ( CPF_Parm )

void USanctumRubelAlgorithmNormal::Init ( struct FString MapName, unsigned long turboMode )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 54849 ];

	USanctumRubelAlgorithmNormal_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.MapName, &MapName, 0xC );
	Init_Parms.turboMode = turboMode;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumWikiObject.LookupEnemyId
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 EnemyName                      ( CPF_Parm | CPF_NeedCtorLink )

int USanctumWikiObject::LookupEnemyId ( struct FString EnemyName )
{
	static UFunction* pFnLookupEnemyId = NULL;

	if ( ! pFnLookupEnemyId )
		pFnLookupEnemyId = (UFunction*) UObject::GObjObjects()->Data[ 48545 ];

	USanctumWikiObject_execLookupEnemyId_Parms LookupEnemyId_Parms;
	memcpy ( &LookupEnemyId_Parms.EnemyName, &EnemyName, 0xC );

	this->ProcessEvent ( pFnLookupEnemyId, &LookupEnemyId_Parms, NULL );

	return LookupEnemyId_Parms.ReturnValue;
};

// Function Sanctum.SanctumSeqEvent_LifeChanged.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_LifeChanged::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55310 ];

	USanctumSeqEvent_LifeChanged_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumInfo.getNameWithPostfix
// [0x00022102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USanctumInfo::getNameWithPostfix ( )
{
	static UFunction* pFngetNameWithPostfix = NULL;

	if ( ! pFngetNameWithPostfix )
		pFngetNameWithPostfix = (UFunction*) UObject::GObjObjects()->Data[ 52194 ];

	USanctumInfo_execgetNameWithPostfix_Parms getNameWithPostfix_Parms;

	this->ProcessEvent ( pFngetNameWithPostfix, &getNameWithPostfix_Parms, NULL );

	return getNameWithPostfix_Parms.ReturnValue;
};

// Function Sanctum.SanctumInfo.getNameWithPrefixAndPostfix
// [0x00022102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USanctumInfo::getNameWithPrefixAndPostfix ( )
{
	static UFunction* pFngetNameWithPrefixAndPostfix = NULL;

	if ( ! pFngetNameWithPrefixAndPostfix )
		pFngetNameWithPrefixAndPostfix = (UFunction*) UObject::GObjObjects()->Data[ 52192 ];

	USanctumInfo_execgetNameWithPrefixAndPostfix_Parms getNameWithPrefixAndPostfix_Parms;

	this->ProcessEvent ( pFngetNameWithPrefixAndPostfix, &getNameWithPrefixAndPostfix_Parms, NULL );

	return getNameWithPrefixAndPostfix_Parms.ReturnValue;
};

// Function Sanctum.SanctumInfo.getNameWithPrefix
// [0x00022102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USanctumInfo::getNameWithPrefix ( )
{
	static UFunction* pFngetNameWithPrefix = NULL;

	if ( ! pFngetNameWithPrefix )
		pFngetNameWithPrefix = (UFunction*) UObject::GObjObjects()->Data[ 52190 ];

	USanctumInfo_execgetNameWithPrefix_Parms getNameWithPrefix_Parms;

	this->ProcessEvent ( pFngetNameWithPrefix, &getNameWithPrefix_Parms, NULL );

	return getNameWithPrefix_Parms.ReturnValue;
};

// Function Sanctum.SanctumInfo.getName
// [0x00022102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USanctumInfo::getName ( )
{
	static UFunction* pFngetName = NULL;

	if ( ! pFngetName )
		pFngetName = (UFunction*) UObject::GObjObjects()->Data[ 51365 ];

	USanctumInfo_execgetName_Parms getName_Parms;

	this->ProcessEvent ( pFngetName, &getName_Parms, NULL );

	return getName_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponHologram.GetWeaponAnimNodeSeq
// [0x00020102] 
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimNodeSequence* ASanctumWeaponHologram::GetWeaponAnimNodeSeq ( )
{
	static UFunction* pFnGetWeaponAnimNodeSeq = NULL;

	if ( ! pFnGetWeaponAnimNodeSeq )
		pFnGetWeaponAnimNodeSeq = (UFunction*) UObject::GObjObjects()->Data[ 57789 ];

	ASanctumWeaponHologram_execGetWeaponAnimNodeSeq_Parms GetWeaponAnimNodeSeq_Parms;

	this->ProcessEvent ( pFnGetWeaponAnimNodeSeq, &GetWeaponAnimNodeSeq_Parms, NULL );

	return GetWeaponAnimNodeSeq_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponHologram.PlayWeaponAnimation
// [0x00024102] 
// Parameters infos:
// struct FName                   Sequence                       ( CPF_Parm )
// float                          fDesiredDuration               ( CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )

void ASanctumWeaponHologram::PlayWeaponAnimation ( struct FName Sequence, float fDesiredDuration, unsigned long bLoop, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnPlayWeaponAnimation = NULL;

	if ( ! pFnPlayWeaponAnimation )
		pFnPlayWeaponAnimation = (UFunction*) UObject::GObjObjects()->Data[ 57782 ];

	ASanctumWeaponHologram_execPlayWeaponAnimation_Parms PlayWeaponAnimation_Parms;
	memcpy ( &PlayWeaponAnimation_Parms.Sequence, &Sequence, 0x8 );
	PlayWeaponAnimation_Parms.fDesiredDuration = fDesiredDuration;
	PlayWeaponAnimation_Parms.bLoop = bLoop;
	PlayWeaponAnimation_Parms.SkelMesh = SkelMesh;

	this->ProcessEvent ( pFnPlayWeaponAnimation, &PlayWeaponAnimation_Parms, NULL );
};

// Function Sanctum.SanctumWeaponHologram.Equipped
// [0x00020002] 
// Parameters infos:

void ASanctumWeaponHologram::Equipped ( )
{
	static UFunction* pFnEquipped = NULL;

	if ( ! pFnEquipped )
		pFnEquipped = (UFunction*) UObject::GObjObjects()->Data[ 57781 ];

	ASanctumWeaponHologram_execEquipped_Parms Equipped_Parms;

	this->ProcessEvent ( pFnEquipped, &Equipped_Parms, NULL );
};

// Function Sanctum.SanctumWeaponHologram.Unequipped
// [0x00020000] 
// Parameters infos:

void ASanctumWeaponHologram::Unequipped ( )
{
	static UFunction* pFnUnequipped = NULL;

	if ( ! pFnUnequipped )
		pFnUnequipped = (UFunction*) UObject::GObjObjects()->Data[ 57780 ];

	ASanctumWeaponHologram_execUnequipped_Parms Unequipped_Parms;

	this->ProcessEvent ( pFnUnequipped, &Unequipped_Parms, NULL );
};

// Function Sanctum.SanctumWeaponHologram.TimeWeaponUnequip
// [0x00020002] 
// Parameters infos:

void ASanctumWeaponHologram::TimeWeaponUnequip ( )
{
	static UFunction* pFnTimeWeaponUnequip = NULL;

	if ( ! pFnTimeWeaponUnequip )
		pFnTimeWeaponUnequip = (UFunction*) UObject::GObjObjects()->Data[ 57778 ];

	ASanctumWeaponHologram_execTimeWeaponUnequip_Parms TimeWeaponUnequip_Parms;

	this->ProcessEvent ( pFnTimeWeaponUnequip, &TimeWeaponUnequip_Parms, NULL );
};

// Function Sanctum.SanctumWeaponHologram.TimeWeaponEquip
// [0x00020002] 
// Parameters infos:

void ASanctumWeaponHologram::TimeWeaponEquip ( )
{
	static UFunction* pFnTimeWeaponEquip = NULL;

	if ( ! pFnTimeWeaponEquip )
		pFnTimeWeaponEquip = (UFunction*) UObject::GObjObjects()->Data[ 57776 ];

	ASanctumWeaponHologram_execTimeWeaponEquip_Parms TimeWeaponEquip_Parms;

	this->ProcessEvent ( pFnTimeWeaponEquip, &TimeWeaponEquip_Parms, NULL );
};

// Function Sanctum.SanctumWeaponHologram.ShouldLagRot
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumWeaponHologram::ShouldLagRot ( )
{
	static UFunction* pFnShouldLagRot = NULL;

	if ( ! pFnShouldLagRot )
		pFnShouldLagRot = (UFunction*) UObject::GObjObjects()->Data[ 57774 ];

	ASanctumWeaponHologram_execShouldLagRot_Parms ShouldLagRot_Parms;

	this->ProcessEvent ( pFnShouldLagRot, &ShouldLagRot_Parms, NULL );

	return ShouldLagRot_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponHologram.LagRot
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            NewValue                       ( CPF_Parm )
// int                            LastValue                      ( CPF_Parm )
// float                          MaxDiff                        ( CPF_Parm )
// int                            Index                          ( CPF_Parm )

int ASanctumWeaponHologram::LagRot ( int NewValue, int LastValue, float MaxDiff, int Index )
{
	static UFunction* pFnLagRot = NULL;

	if ( ! pFnLagRot )
		pFnLagRot = (UFunction*) UObject::GObjObjects()->Data[ 57765 ];

	ASanctumWeaponHologram_execLagRot_Parms LagRot_Parms;
	LagRot_Parms.NewValue = NewValue;
	LagRot_Parms.LastValue = LastValue;
	LagRot_Parms.MaxDiff = MaxDiff;
	LagRot_Parms.Index = Index;

	this->ProcessEvent ( pFnLagRot, &LagRot_Parms, NULL );

	return LagRot_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponHologram.SetPosition
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class AUDKPawn*                Holder                         ( CPF_Parm )

void ASanctumWeaponHologram::eventSetPosition ( class AUDKPawn* Holder )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = (UFunction*) UObject::GObjObjects()->Data[ 57754 ];

	ASanctumWeaponHologram_eventSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.Holder = Holder;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );
};

// Function Sanctum.SanctumWeaponHologram.detachFrom
// [0x00020002] 
// Parameters infos:
// class ASanctumPlayer*          Player                         ( CPF_Parm )

void ASanctumWeaponHologram::detachFrom ( class ASanctumPlayer* Player )
{
	static UFunction* pFndetachFrom = NULL;

	if ( ! pFndetachFrom )
		pFndetachFrom = (UFunction*) UObject::GObjObjects()->Data[ 57752 ];

	ASanctumWeaponHologram_execdetachFrom_Parms detachFrom_Parms;
	detachFrom_Parms.Player = Player;

	this->ProcessEvent ( pFndetachFrom, &detachFrom_Parms, NULL );
};

// Function Sanctum.SanctumWeaponHologram.HideHologram
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponHologram::HideHologram ( )
{
	static UFunction* pFnHideHologram = NULL;

	if ( ! pFnHideHologram )
		pFnHideHologram = (UFunction*) UObject::GObjObjects()->Data[ 57751 ];

	ASanctumWeaponHologram_execHideHologram_Parms HideHologram_Parms;

	this->ProcessEvent ( pFnHideHologram, &HideHologram_Parms, NULL );
};

// Function Sanctum.SanctumWeaponHologram.SetEnabled
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponHologram::SetEnabled ( )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 57749 ];

	ASanctumWeaponHologram_execSetEnabled_Parms SetEnabled_Parms;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );
};

// Function Sanctum.SanctumWeaponHologram.SetDisabled
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponHologram::SetDisabled ( )
{
	static UFunction* pFnSetDisabled = NULL;

	if ( ! pFnSetDisabled )
		pFnSetDisabled = (UFunction*) UObject::GObjObjects()->Data[ 57747 ];

	ASanctumWeaponHologram_execSetDisabled_Parms SetDisabled_Parms;

	this->ProcessEvent ( pFnSetDisabled, &SetDisabled_Parms, NULL );
};

// Function Sanctum.SanctumWeaponHologram.ToggleOwnerSee
// [0x00020102] 
// Parameters infos:
// unsigned long                  see                            ( CPF_Parm )

void ASanctumWeaponHologram::ToggleOwnerSee ( unsigned long see )
{
	static UFunction* pFnToggleOwnerSee = NULL;

	if ( ! pFnToggleOwnerSee )
		pFnToggleOwnerSee = (UFunction*) UObject::GObjObjects()->Data[ 57745 ];

	ASanctumWeaponHologram_execToggleOwnerSee_Parms ToggleOwnerSee_Parms;
	ToggleOwnerSee_Parms.see = see;

	this->ProcessEvent ( pFnToggleOwnerSee, &ToggleOwnerSee_Parms, NULL );
};

// Function Sanctum.SanctumWeaponHologram.setWeaponColor
// [0x00020002] 
// Parameters infos:
// struct FLinearColor            C                              ( CPF_Parm )

void ASanctumWeaponHologram::setWeaponColor ( struct FLinearColor C )
{
	static UFunction* pFnsetWeaponColor = NULL;

	if ( ! pFnsetWeaponColor )
		pFnsetWeaponColor = (UFunction*) UObject::GObjObjects()->Data[ 57742 ];

	ASanctumWeaponHologram_execsetWeaponColor_Parms setWeaponColor_Parms;
	memcpy ( &setWeaponColor_Parms.C, &C, 0x10 );

	this->ProcessEvent ( pFnsetWeaponColor, &setWeaponColor_Parms, NULL );
};

// Function Sanctum.SanctumWeaponHologram.setCountdownChange
// [0x00020002] 
// Parameters infos:
// float                          percentComplete                ( CPF_Parm )

void ASanctumWeaponHologram::setCountdownChange ( float percentComplete )
{
	static UFunction* pFnsetCountdownChange = NULL;

	if ( ! pFnsetCountdownChange )
		pFnsetCountdownChange = (UFunction*) UObject::GObjObjects()->Data[ 57739 ];

	ASanctumWeaponHologram_execsetCountdownChange_Parms setCountdownChange_Parms;
	setCountdownChange_Parms.percentComplete = percentComplete;

	this->ProcessEvent ( pFnsetCountdownChange, &setCountdownChange_Parms, NULL );
};

// Function Sanctum.SanctumWeaponHologram.attachTo
// [0x00020002] 
// Parameters infos:
// class ASanctumPlayer*          Player                         ( CPF_Parm )

void ASanctumWeaponHologram::attachTo ( class ASanctumPlayer* Player )
{
	static UFunction* pFnattachTo = NULL;

	if ( ! pFnattachTo )
		pFnattachTo = (UFunction*) UObject::GObjObjects()->Data[ 57737 ];

	ASanctumWeaponHologram_execattachTo_Parms attachTo_Parms;
	attachTo_Parms.Player = Player;

	this->ProcessEvent ( pFnattachTo, &attachTo_Parms, NULL );
};

// Function Sanctum.SanctumWeaponHologram.PlayUnequip
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumWeaponHologram::PlayUnequip ( )
{
	static UFunction* pFnPlayUnequip = NULL;

	if ( ! pFnPlayUnequip )
		pFnPlayUnequip = (UFunction*) UObject::GObjObjects()->Data[ 57735 ];

	ASanctumWeaponHologram_execPlayUnequip_Parms PlayUnequip_Parms;

	this->ProcessEvent ( pFnPlayUnequip, &PlayUnequip_Parms, NULL );

	return PlayUnequip_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponHologram.PlayEquip
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponHologram::PlayEquip ( )
{
	static UFunction* pFnPlayEquip = NULL;

	if ( ! pFnPlayEquip )
		pFnPlayEquip = (UFunction*) UObject::GObjObjects()->Data[ 57734 ];

	ASanctumWeaponHologram_execPlayEquip_Parms PlayEquip_Parms;

	this->ProcessEvent ( pFnPlayEquip, &PlayEquip_Parms, NULL );
};

// Function Sanctum.SanctumWeaponHologram.PlayUnequipWhenEquipIsDone
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponHologram::PlayUnequipWhenEquipIsDone ( )
{
	static UFunction* pFnPlayUnequipWhenEquipIsDone = NULL;

	if ( ! pFnPlayUnequipWhenEquipIsDone )
		pFnPlayUnequipWhenEquipIsDone = (UFunction*) UObject::GObjObjects()->Data[ 57733 ];

	ASanctumWeaponHologram_execPlayUnequipWhenEquipIsDone_Parms PlayUnequipWhenEquipIsDone_Parms;

	this->ProcessEvent ( pFnPlayUnequipWhenEquipIsDone, &PlayUnequipWhenEquipIsDone_Parms, NULL );
};

// Function Sanctum.SanctumWeaponHologram.OnAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ASanctumWeaponHologram::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 57729 ];

	ASanctumWeaponHologram_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function Sanctum.SanctumWeaponHologram.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeaponHologram::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57728 ];

	ASanctumWeaponHologram_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.FireModeUpdated
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ASanctumWeaponAttachment::FireModeUpdated ( unsigned char FiringMode, unsigned long bViaReplication )
{
	static UFunction* pFnFireModeUpdated = NULL;

	if ( ! pFnFireModeUpdated )
		pFnFireModeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 57665 ];

	ASanctumWeaponAttachment_execFireModeUpdated_Parms FireModeUpdated_Parms;
	FireModeUpdated_Parms.FiringMode = FiringMode;
	FireModeUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFireModeUpdated, &FireModeUpdated_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.ChangeVisibility
// [0x00020102] 
// Parameters infos:
// unsigned long                  bIsVisible                     ( CPF_Parm )

void ASanctumWeaponAttachment::ChangeVisibility ( unsigned long bIsVisible )
{
	static UFunction* pFnChangeVisibility = NULL;

	if ( ! pFnChangeVisibility )
		pFnChangeVisibility = (UFunction*) UObject::GObjObjects()->Data[ 57663 ];

	ASanctumWeaponAttachment_execChangeVisibility_Parms ChangeVisibility_Parms;
	ChangeVisibility_Parms.bIsVisible = bIsVisible;

	this->ProcessEvent ( pFnChangeVisibility, &ChangeVisibility_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.detachFrom
// [0x00020102] 
// Parameters infos:
// class USkeletalMeshComponent*  MeshCpnt                       ( CPF_Parm | CPF_EditInline )

void ASanctumWeaponAttachment::detachFrom ( class USkeletalMeshComponent* MeshCpnt )
{
	static UFunction* pFndetachFrom = NULL;

	if ( ! pFndetachFrom )
		pFndetachFrom = (UFunction*) UObject::GObjObjects()->Data[ 57661 ];

	ASanctumWeaponAttachment_execdetachFrom_Parms detachFrom_Parms;
	detachFrom_Parms.MeshCpnt = MeshCpnt;

	this->ProcessEvent ( pFndetachFrom, &detachFrom_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.stopThirdPersonFireEffects
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeaponAttachment::eventstopThirdPersonFireEffects ( )
{
	static UFunction* pFnstopThirdPersonFireEffects = NULL;

	if ( ! pFnstopThirdPersonFireEffects )
		pFnstopThirdPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 57660 ];

	ASanctumWeaponAttachment_eventstopThirdPersonFireEffects_Parms stopThirdPersonFireEffects_Parms;

	this->ProcessEvent ( pFnstopThirdPersonFireEffects, &stopThirdPersonFireEffects_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.stopFirstPersonFireEffects
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 pawnWeapon                     ( CPF_Parm )

void ASanctumWeaponAttachment::stopFirstPersonFireEffects ( class AWeapon* pawnWeapon )
{
	static UFunction* pFnstopFirstPersonFireEffects = NULL;

	if ( ! pFnstopFirstPersonFireEffects )
		pFnstopFirstPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 57658 ];

	ASanctumWeaponAttachment_execstopFirstPersonFireEffects_Parms stopFirstPersonFireEffects_Parms;
	stopFirstPersonFireEffects_Parms.pawnWeapon = pawnWeapon;

	this->ProcessEvent ( pFnstopFirstPersonFireEffects, &stopFirstPersonFireEffects_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.StopMuzzleFlash
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponAttachment::StopMuzzleFlash ( )
{
	static UFunction* pFnStopMuzzleFlash = NULL;

	if ( ! pFnStopMuzzleFlash )
		pFnStopMuzzleFlash = (UFunction*) UObject::GObjObjects()->Data[ 57657 ];

	ASanctumWeaponAttachment_execStopMuzzleFlash_Parms StopMuzzleFlash_Parms;

	this->ProcessEvent ( pFnStopMuzzleFlash, &StopMuzzleFlash_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.MuzzleFlashTimer
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponAttachment::MuzzleFlashTimer ( )
{
	static UFunction* pFnMuzzleFlashTimer = NULL;

	if ( ! pFnMuzzleFlashTimer )
		pFnMuzzleFlashTimer = (UFunction*) UObject::GObjObjects()->Data[ 57656 ];

	ASanctumWeaponAttachment_execMuzzleFlashTimer_Parms MuzzleFlashTimer_Parms;

	this->ProcessEvent ( pFnMuzzleFlashTimer, &MuzzleFlashTimer_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.CauseMuzzleFlash
// [0x00020102] 
// Parameters infos:

void ASanctumWeaponAttachment::CauseMuzzleFlash ( )
{
	static UFunction* pFnCauseMuzzleFlash = NULL;

	if ( ! pFnCauseMuzzleFlash )
		pFnCauseMuzzleFlash = (UFunction*) UObject::GObjObjects()->Data[ 57654 ];

	ASanctumWeaponAttachment_execCauseMuzzleFlash_Parms CauseMuzzleFlash_Parms;

	this->ProcessEvent ( pFnCauseMuzzleFlash, &CauseMuzzleFlash_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.setMuzzleFlashParams
// [0x00020100] 
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void ASanctumWeaponAttachment::setMuzzleFlashParams ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnsetMuzzleFlashParams = NULL;

	if ( ! pFnsetMuzzleFlashParams )
		pFnsetMuzzleFlashParams = (UFunction*) UObject::GObjObjects()->Data[ 57652 ];

	ASanctumWeaponAttachment_execsetMuzzleFlashParams_Parms setMuzzleFlashParams_Parms;
	setMuzzleFlashParams_Parms.PSC = PSC;

	this->ProcessEvent ( pFnsetMuzzleFlashParams, &setMuzzleFlashParams_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.ThirdPersonFireEffects
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASanctumWeaponAttachment::ThirdPersonFireEffects ( struct FVector HitLocation )
{
	static UFunction* pFnThirdPersonFireEffects = NULL;

	if ( ! pFnThirdPersonFireEffects )
		pFnThirdPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 57650 ];

	ASanctumWeaponAttachment_execThirdPersonFireEffects_Parms ThirdPersonFireEffects_Parms;
	memcpy ( &ThirdPersonFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnThirdPersonFireEffects, &ThirdPersonFireEffects_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.SpawnWeaponTracer
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASanctumWeaponAttachment::SpawnWeaponTracer ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnSpawnWeaponTracer = NULL;

	if ( ! pFnSpawnWeaponTracer )
		pFnSpawnWeaponTracer = (UFunction*) UObject::GObjObjects()->Data[ 57646 ];

	ASanctumWeaponAttachment_execSpawnWeaponTracer_Parms SpawnWeaponTracer_Parms;
	SpawnWeaponTracer_Parms.FireModeNum = FireModeNum;
	memcpy ( &SpawnWeaponTracer_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSpawnWeaponTracer, &SpawnWeaponTracer_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.firstPersonFireEffects
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 pawnWeapon                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASanctumWeaponAttachment::firstPersonFireEffects ( class AWeapon* pawnWeapon, struct FVector HitLocation )
{
	static UFunction* pFnfirstPersonFireEffects = NULL;

	if ( ! pFnfirstPersonFireEffects )
		pFnfirstPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 57643 ];

	ASanctumWeaponAttachment_execfirstPersonFireEffects_Parms firstPersonFireEffects_Parms;
	firstPersonFireEffects_Parms.pawnWeapon = pawnWeapon;
	memcpy ( &firstPersonFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnfirstPersonFireEffects, &firstPersonFireEffects_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.setLevel
// [0x00820102] 
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void ASanctumWeaponAttachment::setLevel ( int Level )
{
	static UFunction* pFnsetLevel = NULL;

	if ( ! pFnsetLevel )
		pFnsetLevel = (UFunction*) UObject::GObjObjects()->Data[ 57640 ];

	ASanctumWeaponAttachment_execsetLevel_Parms setLevel_Parms;
	setLevel_Parms.Level = Level;

	this->ProcessEvent ( pFnsetLevel, &setLevel_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.getInstantHitDamage
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASanctumWeaponAttachment::getInstantHitDamage ( )
{
	static UFunction* pFngetInstantHitDamage = NULL;

	if ( ! pFngetInstantHitDamage )
		pFngetInstantHitDamage = (UFunction*) UObject::GObjObjects()->Data[ 57638 ];

	ASanctumWeaponAttachment_execgetInstantHitDamage_Parms getInstantHitDamage_Parms;

	this->ProcessEvent ( pFngetInstantHitDamage, &getInstantHitDamage_Parms, NULL );

	return getInstantHitDamage_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponAttachment.PlayImpactFX
// [0x00820102] 
// Parameters infos:
// unsigned char                  FiringModeNum                  ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASanctumWeaponAttachment::PlayImpactFX ( unsigned char FiringModeNum, struct FImpactInfo Impact )
{
	static UFunction* pFnPlayImpactFX = NULL;

	if ( ! pFnPlayImpactFX )
		pFnPlayImpactFX = (UFunction*) UObject::GObjObjects()->Data[ 57630 ];

	ASanctumWeaponAttachment_execPlayImpactFX_Parms PlayImpactFX_Parms;
	PlayImpactFX_Parms.FiringModeNum = FiringModeNum;
	memcpy ( &PlayImpactFX_Parms.Impact, &Impact, 0x50 );

	this->ProcessEvent ( pFnPlayImpactFX, &PlayImpactFX_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.ShouldPlayImpactEffectsOn
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  impactActor                    ( CPF_Parm )

bool ASanctumWeaponAttachment::ShouldPlayImpactEffectsOn ( class AActor* impactActor )
{
	static UFunction* pFnShouldPlayImpactEffectsOn = NULL;

	if ( ! pFnShouldPlayImpactEffectsOn )
		pFnShouldPlayImpactEffectsOn = (UFunction*) UObject::GObjObjects()->Data[ 57627 ];

	ASanctumWeaponAttachment_execShouldPlayImpactEffectsOn_Parms ShouldPlayImpactEffectsOn_Parms;
	ShouldPlayImpactEffectsOn_Parms.impactActor = impactActor;

	this->ProcessEvent ( pFnShouldPlayImpactEffectsOn, &ShouldPlayImpactEffectsOn_Parms, NULL );

	return ShouldPlayImpactEffectsOn_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponAttachment.GetEffectLocation
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASanctumWeaponAttachment::GetEffectLocation ( )
{
	static UFunction* pFnGetEffectLocation = NULL;

	if ( ! pFnGetEffectLocation )
		pFnGetEffectLocation = (UFunction*) UObject::GObjObjects()->Data[ 57624 ];

	ASanctumWeaponAttachment_execGetEffectLocation_Parms GetEffectLocation_Parms;

	this->ProcessEvent ( pFnGetEffectLocation, &GetEffectLocation_Parms, NULL );

	return GetEffectLocation_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponAttachment.updateOverheat
// [0x00020000] 
// Parameters infos:
// float                          Overheat                       ( CPF_Parm )

void ASanctumWeaponAttachment::updateOverheat ( float Overheat )
{
	static UFunction* pFnupdateOverheat = NULL;

	if ( ! pFnupdateOverheat )
		pFnupdateOverheat = (UFunction*) UObject::GObjObjects()->Data[ 57622 ];

	ASanctumWeaponAttachment_execupdateOverheat_Parms updateOverheat_Parms;
	updateOverheat_Parms.Overheat = Overheat;

	this->ProcessEvent ( pFnupdateOverheat, &updateOverheat_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.AllowImpactEffects
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  HitActor                       ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool ASanctumWeaponAttachment::AllowImpactEffects ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnAllowImpactEffects = NULL;

	if ( ! pFnAllowImpactEffects )
		pFnAllowImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 57617 ];

	ASanctumWeaponAttachment_execAllowImpactEffects_Parms AllowImpactEffects_Parms;
	AllowImpactEffects_Parms.HitActor = HitActor;
	memcpy ( &AllowImpactEffects_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &AllowImpactEffects_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnAllowImpactEffects, &AllowImpactEffects_Parms, NULL );

	return AllowImpactEffects_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponAttachment.getImpactEffect
// [0x00020102] 
// Parameters infos:
// struct FMaterialImpactEffect   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class UPhysicalMaterial*       hitMaterial                    ( CPF_Parm )

struct FMaterialImpactEffect ASanctumWeaponAttachment::getImpactEffect ( class UPhysicalMaterial* hitMaterial )
{
	static UFunction* pFngetImpactEffect = NULL;

	if ( ! pFngetImpactEffect )
		pFngetImpactEffect = (UFunction*) UObject::GObjObjects()->Data[ 57614 ];

	ASanctumWeaponAttachment_execgetImpactEffect_Parms getImpactEffect_Parms;
	getImpactEffect_Parms.hitMaterial = hitMaterial;

	this->ProcessEvent ( pFngetImpactEffect, &getImpactEffect_Parms, NULL );

	return getImpactEffect_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponAttachment.attachTo
// [0x00020102] 
// Parameters infos:
// class ASanctumPlayer*          ownerPawn                      ( CPF_Parm )

void ASanctumWeaponAttachment::attachTo ( class ASanctumPlayer* ownerPawn )
{
	static UFunction* pFnattachTo = NULL;

	if ( ! pFnattachTo )
		pFnattachTo = (UFunction*) UObject::GObjObjects()->Data[ 57612 ];

	ASanctumWeaponAttachment_execattachTo_Parms attachTo_Parms;
	attachTo_Parms.ownerPawn = ownerPawn;

	this->ProcessEvent ( pFnattachTo, &attachTo_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.ToggleOwnerSee
// [0x00020102] 
// Parameters infos:
// unsigned long                  see                            ( CPF_Parm )

void ASanctumWeaponAttachment::ToggleOwnerSee ( unsigned long see )
{
	static UFunction* pFnToggleOwnerSee = NULL;

	if ( ! pFnToggleOwnerSee )
		pFnToggleOwnerSee = (UFunction*) UObject::GObjObjects()->Data[ 57610 ];

	ASanctumWeaponAttachment_execToggleOwnerSee_Parms ToggleOwnerSee_Parms;
	ToggleOwnerSee_Parms.see = see;

	this->ProcessEvent ( pFnToggleOwnerSee, &ToggleOwnerSee_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.GetTraceOwner
// [0x00020102] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ASanctumWeaponAttachment::GetTraceOwner ( )
{
	static UFunction* pFnGetTraceOwner = NULL;

	if ( ! pFnGetTraceOwner )
		pFnGetTraceOwner = (UFunction*) UObject::GObjObjects()->Data[ 57608 ];

	ASanctumWeaponAttachment_execGetTraceOwner_Parms GetTraceOwner_Parms;

	this->ProcessEvent ( pFnGetTraceOwner, &GetTraceOwner_Parms, NULL );

	return GetTraceOwner_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponAttachment.CalcRemoteWeaponFire
// [0x00820102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )

struct FImpactInfo ASanctumWeaponAttachment::CalcRemoteWeaponFire ( struct FVector StartTrace, struct FVector EndTrace )
{
	static UFunction* pFnCalcRemoteWeaponFire = NULL;

	if ( ! pFnCalcRemoteWeaponFire )
		pFnCalcRemoteWeaponFire = (UFunction*) UObject::GObjObjects()->Data[ 57599 ];

	ASanctumWeaponAttachment_execCalcRemoteWeaponFire_Parms CalcRemoteWeaponFire_Parms;
	memcpy ( &CalcRemoteWeaponFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &CalcRemoteWeaponFire_Parms.EndTrace, &EndTrace, 0xC );

	this->ProcessEvent ( pFnCalcRemoteWeaponFire, &CalcRemoteWeaponFire_Parms, NULL );

	return CalcRemoteWeaponFire_Parms.ReturnValue;
};

// Function Sanctum.SanctumWeaponAttachment.CalcRemoteImpactEffects
// [0x00820102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 GivenHitLocation               ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ASanctumWeaponAttachment::CalcRemoteImpactEffects ( unsigned char FireModeNum, struct FVector GivenHitLocation, unsigned long bViaReplication )
{
	static UFunction* pFnCalcRemoteImpactEffects = NULL;

	if ( ! pFnCalcRemoteImpactEffects )
		pFnCalcRemoteImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 57591 ];

	ASanctumWeaponAttachment_execCalcRemoteImpactEffects_Parms CalcRemoteImpactEffects_Parms;
	CalcRemoteImpactEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &CalcRemoteImpactEffects_Parms.GivenHitLocation, &GivenHitLocation, 0xC );
	CalcRemoteImpactEffects_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnCalcRemoteImpactEffects, &CalcRemoteImpactEffects_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.FlashLocationUpdated
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FVector                 FlashLocation                  ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ASanctumWeaponAttachment::FlashLocationUpdated ( unsigned char FiringMode, struct FVector FlashLocation, unsigned long bViaReplication )
{
	static UFunction* pFnFlashLocationUpdated = NULL;

	if ( ! pFnFlashLocationUpdated )
		pFnFlashLocationUpdated = (UFunction*) UObject::GObjObjects()->Data[ 57586 ];

	ASanctumWeaponAttachment_execFlashLocationUpdated_Parms FlashLocationUpdated_Parms;
	FlashLocationUpdated_Parms.FiringMode = FiringMode;
	memcpy ( &FlashLocationUpdated_Parms.FlashLocation, &FlashLocation, 0xC );
	FlashLocationUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFlashLocationUpdated, &FlashLocationUpdated_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachment.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeaponAttachment::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57584 ];

	ASanctumWeaponAttachment_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachmentAssault.updateOverheat
// [0x00820002] 
// Parameters infos:
// float                          Overheat                       ( CPF_Parm )

void ASanctumWeaponAttachmentAssault::updateOverheat ( float Overheat )
{
	static UFunction* pFnupdateOverheat = NULL;

	if ( ! pFnupdateOverheat )
		pFnupdateOverheat = (UFunction*) UObject::GObjObjects()->Data[ 57674 ];

	ASanctumWeaponAttachmentAssault_execupdateOverheat_Parms updateOverheat_Parms;
	updateOverheat_Parms.Overheat = Overheat;

	this->ProcessEvent ( pFnupdateOverheat, &updateOverheat_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachmentAssault.PostBeginPlay
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeaponAttachmentAssault::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57672 ];

	ASanctumWeaponAttachmentAssault_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachmentShotgun.updateOverheat
// [0x00820002] 
// Parameters infos:
// float                          Overheat                       ( CPF_Parm )

void ASanctumWeaponAttachmentShotgun::updateOverheat ( float Overheat )
{
	static UFunction* pFnupdateOverheat = NULL;

	if ( ! pFnupdateOverheat )
		pFnupdateOverheat = (UFunction*) UObject::GObjObjects()->Data[ 57692 ];

	ASanctumWeaponAttachmentShotgun_execupdateOverheat_Parms updateOverheat_Parms;
	updateOverheat_Parms.Overheat = Overheat;

	this->ProcessEvent ( pFnupdateOverheat, &updateOverheat_Parms, NULL );
};

// Function Sanctum.SanctumWeaponAttachmentShotgun.PostBeginPlay
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeaponAttachmentShotgun::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57690 ];

	ASanctumWeaponAttachmentShotgun_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumWeaponHologramMarker.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWeaponHologramMarker::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57819 ];

	ASanctumWeaponHologramMarker_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumProjectileRocket.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectileRocket::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 54691 ];

	ASanctumProjectileRocket_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Sanctum.SanctumProjectileRocket.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumProjectileRocket::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 54690 ];

	ASanctumProjectileRocket_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumProjectileRocket.KilledAnEnemy
// [0x00020002] 
// Parameters infos:
// class UClass*                  Enemyclass                     ( CPF_Parm )

void ASanctumProjectileRocket::KilledAnEnemy ( class UClass* Enemyclass )
{
	static UFunction* pFnKilledAnEnemy = NULL;

	if ( ! pFnKilledAnEnemy )
		pFnKilledAnEnemy = (UFunction*) UObject::GObjObjects()->Data[ 54688 ];

	ASanctumProjectileRocket_execKilledAnEnemy_Parms KilledAnEnemy_Parms;
	KilledAnEnemy_Parms.Enemyclass = Enemyclass;

	this->ProcessEvent ( pFnKilledAnEnemy, &KilledAnEnemy_Parms, NULL );
};

// Function Sanctum.SanctumProjectileRocket.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void ASanctumProjectileRocket::Init ( struct FVector Direction )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 54686 ];

	ASanctumProjectileRocket_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumProjectileRocket.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumProjectileRocket::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 54685 ];

	ASanctumProjectileRocket_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumProjectileContainer.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectileContainer::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 54488 ];

	ASanctumProjectileContainer_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Sanctum.SanctumProjectileContainer.SpawnSmallProjectiles
// [0x00820002] 
// Parameters infos:

void ASanctumProjectileContainer::SpawnSmallProjectiles ( )
{
	static UFunction* pFnSpawnSmallProjectiles = NULL;

	if ( ! pFnSpawnSmallProjectiles )
		pFnSpawnSmallProjectiles = (UFunction*) UObject::GObjObjects()->Data[ 54484 ];

	ASanctumProjectileContainer_execSpawnSmallProjectiles_Parms SpawnSmallProjectiles_Parms;

	this->ProcessEvent ( pFnSpawnSmallProjectiles, &SpawnSmallProjectiles_Parms, NULL );
};

// Function Sanctum.SanctumProjectileContainer.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumProjectileContainer::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 54482 ];

	ASanctumProjectileContainer_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumProjectileContainer.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void ASanctumProjectileContainer::Init ( struct FVector Direction )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 54480 ];

	ASanctumProjectileContainer_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumProjectileContainer.Launch
// [0x00020002] 
// Parameters infos:
// class ASanctumEnemy*           Enemy                          ( CPF_Parm )
// int                            Level                          ( CPF_Parm )

void ASanctumProjectileContainer::Launch ( class ASanctumEnemy* Enemy, int Level )
{
	static UFunction* pFnLaunch = NULL;

	if ( ! pFnLaunch )
		pFnLaunch = (UFunction*) UObject::GObjObjects()->Data[ 54477 ];

	ASanctumProjectileContainer_execLaunch_Parms Launch_Parms;
	Launch_Parms.Enemy = Enemy;
	Launch_Parms.Level = Level;

	this->ProcessEvent ( pFnLaunch, &Launch_Parms, NULL );
};

// Function Sanctum.SanctumProjectileContainer.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumProjectileContainer::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 54476 ];

	ASanctumProjectileContainer_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumProjectileContainer.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumProjectileContainer::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 54475 ];

	ASanctumProjectileContainer_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSmallRocket.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectileSmallRocket::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 54777 ];

	ASanctumProjectileSmallRocket_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSmallRocket.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumProjectileSmallRocket::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 54774 ];

	ASanctumProjectileSmallRocket_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSmallRocket.SetNoTargetLifeSpan
// [0x00020102] 
// Parameters infos:

void ASanctumProjectileSmallRocket::SetNoTargetLifeSpan ( )
{
	static UFunction* pFnSetNoTargetLifeSpan = NULL;

	if ( ! pFnSetNoTargetLifeSpan )
		pFnSetNoTargetLifeSpan = (UFunction*) UObject::GObjObjects()->Data[ 54773 ];

	ASanctumProjectileSmallRocket_execSetNoTargetLifeSpan_Parms SetNoTargetLifeSpan_Parms;

	this->ProcessEvent ( pFnSetNoTargetLifeSpan, &SetNoTargetLifeSpan_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSmallRocket.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectileSmallRocket::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 54770 ];

	ASanctumProjectileSmallRocket_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSmallRocket.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumProjectileSmallRocket::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 54769 ];

	ASanctumProjectileSmallRocket_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSmallRocket.Launch
// [0x00020102] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )
// class ASanctumEnemy*           Target                         ( CPF_Parm )
// class APawn*                   newInstigator                  ( CPF_Parm )
// int                            Level                          ( CPF_Parm )

void ASanctumProjectileSmallRocket::Launch ( struct FVector Direction, class ASanctumEnemy* Target, class APawn* newInstigator, int Level )
{
	static UFunction* pFnLaunch = NULL;

	if ( ! pFnLaunch )
		pFnLaunch = (UFunction*) UObject::GObjObjects()->Data[ 54764 ];

	ASanctumProjectileSmallRocket_execLaunch_Parms Launch_Parms;
	memcpy ( &Launch_Parms.Direction, &Direction, 0xC );
	Launch_Parms.Target = Target;
	Launch_Parms.newInstigator = newInstigator;
	Launch_Parms.Level = Level;

	this->ProcessEvent ( pFnLaunch, &Launch_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSmallRocket.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void ASanctumProjectileSmallRocket::Init ( struct FVector Direction )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 54762 ];

	ASanctumProjectileSmallRocket_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumProjectileSmallRocket.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumProjectileSmallRocket::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 54761 ];

	ASanctumProjectileSmallRocket_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxCredits.CreditsFinished
// [0x00020002] 
// Parameters infos:

void USanctumHUDGfxCredits::CreditsFinished ( )
{
	static UFunction* pFnCreditsFinished = NULL;

	if ( ! pFnCreditsFinished )
		pFnCreditsFinished = (UFunction*) UObject::GObjObjects()->Data[ 51615 ];

	USanctumHUDGfxCredits_execCreditsFinished_Parms CreditsFinished_Parms;

	this->ProcessEvent ( pFnCreditsFinished, &CreditsFinished_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxCredits.Init
// [0x00024002] 
// Parameters infos:
// class ULocalPlayer*            P                              ( CPF_OptionalParm | CPF_Parm )

void USanctumHUDGfxCredits::Init ( class ULocalPlayer* P )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 51613 ];

	USanctumHUDGfxCredits_execInit_Parms Init_Parms;
	Init_Parms.P = P;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxStatScreen.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool USanctumHUDGfxStatScreen::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 52128 ];

	USanctumHUDGfxStatScreen_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function Sanctum.SanctumHUDGfxStatScreen.SetTimeLabel
// [0x00020002] 
// Parameters infos:

void USanctumHUDGfxStatScreen::SetTimeLabel ( )
{
	static UFunction* pFnSetTimeLabel = NULL;

	if ( ! pFnSetTimeLabel )
		pFnSetTimeLabel = (UFunction*) UObject::GObjObjects()->Data[ 52119 ];

	USanctumHUDGfxStatScreen_execSetTimeLabel_Parms SetTimeLabel_Parms;

	this->ProcessEvent ( pFnSetTimeLabel, &SetTimeLabel_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxStatScreen.RestartLevel
// [0x00020002] 
// Parameters infos:

void USanctumHUDGfxStatScreen::RestartLevel ( )
{
	static UFunction* pFnRestartLevel = NULL;

	if ( ! pFnRestartLevel )
		pFnRestartLevel = (UFunction*) UObject::GObjObjects()->Data[ 52118 ];

	USanctumHUDGfxStatScreen_execRestartLevel_Parms RestartLevel_Parms;

	this->ProcessEvent ( pFnRestartLevel, &RestartLevel_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxStatScreen.ExitToMain
// [0x00020002] 
// Parameters infos:

void USanctumHUDGfxStatScreen::ExitToMain ( )
{
	static UFunction* pFnExitToMain = NULL;

	if ( ! pFnExitToMain )
		pFnExitToMain = (UFunction*) UObject::GObjObjects()->Data[ 52117 ];

	USanctumHUDGfxStatScreen_execExitToMain_Parms ExitToMain_Parms;

	this->ProcessEvent ( pFnExitToMain, &ExitToMain_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxStatScreen.loadCheckpoint
// [0x00020002] 
// Parameters infos:

void USanctumHUDGfxStatScreen::loadCheckpoint ( )
{
	static UFunction* pFnloadCheckpoint = NULL;

	if ( ! pFnloadCheckpoint )
		pFnloadCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 52116 ];

	USanctumHUDGfxStatScreen_execloadCheckpoint_Parms loadCheckpoint_Parms;

	this->ProcessEvent ( pFnloadCheckpoint, &loadCheckpoint_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxStatScreen.callOpenPopup
// [0x00020002] 
// Parameters infos:
// struct FString                 popupName                      ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGfxStatScreen::callOpenPopup ( struct FString popupName )
{
	static UFunction* pFncallOpenPopup = NULL;

	if ( ! pFncallOpenPopup )
		pFncallOpenPopup = (UFunction*) UObject::GObjObjects()->Data[ 52114 ];

	USanctumHUDGfxStatScreen_execcallOpenPopup_Parms callOpenPopup_Parms;
	memcpy ( &callOpenPopup_Parms.popupName, &popupName, 0xC );

	this->ProcessEvent ( pFncallOpenPopup, &callOpenPopup_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxStatScreen.StartCredits
// [0x00020002] 
// Parameters infos:

void USanctumHUDGfxStatScreen::StartCredits ( )
{
	static UFunction* pFnStartCredits = NULL;

	if ( ! pFnStartCredits )
		pFnStartCredits = (UFunction*) UObject::GObjObjects()->Data[ 52113 ];

	USanctumHUDGfxStatScreen_execStartCredits_Parms StartCredits_Parms;

	this->ProcessEvent ( pFnStartCredits, &StartCredits_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxStatScreen.disableCinematic
// [0x00020002] 
// Parameters infos:

void USanctumHUDGfxStatScreen::disableCinematic ( )
{
	static UFunction* pFndisableCinematic = NULL;

	if ( ! pFndisableCinematic )
		pFndisableCinematic = (UFunction*) UObject::GObjObjects()->Data[ 52112 ];

	USanctumHUDGfxStatScreen_execdisableCinematic_Parms disableCinematic_Parms;

	this->ProcessEvent ( pFndisableCinematic, &disableCinematic_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxStatScreen.NextLevel
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGfxStatScreen::NextLevel ( struct FEventData ev )
{
	static UFunction* pFnNextLevel = NULL;

	if ( ! pFnNextLevel )
		pFnNextLevel = (UFunction*) UObject::GObjObjects()->Data[ 52107 ];

	USanctumHUDGfxStatScreen_execNextLevel_Parms NextLevel_Parms;
	memcpy ( &NextLevel_Parms.ev, &ev, 0x30 );

	this->ProcessEvent ( pFnNextLevel, &NextLevel_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxStatScreen.ClickedButton
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGfxStatScreen::ClickedButton ( struct FEventData ev )
{
	static UFunction* pFnClickedButton = NULL;

	if ( ! pFnClickedButton )
		pFnClickedButton = (UFunction*) UObject::GObjObjects()->Data[ 52105 ];

	USanctumHUDGfxStatScreen_execClickedButton_Parms ClickedButton_Parms;
	memcpy ( &ClickedButton_Parms.ev, &ev, 0x30 );

	this->ProcessEvent ( pFnClickedButton, &ClickedButton_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxStatScreen.SetList
// [0x00020000] 
// Parameters infos:
// class UGFxObject*              InList                         ( CPF_Parm )

void USanctumHUDGfxStatScreen::SetList ( class UGFxObject* InList )
{
	static UFunction* pFnSetList = NULL;

	if ( ! pFnSetList )
		pFnSetList = (UFunction*) UObject::GObjObjects()->Data[ 52103 ];

	USanctumHUDGfxStatScreen_execSetList_Parms SetList_Parms;
	SetList_Parms.InList = InList;

	this->ProcessEvent ( pFnSetList, &SetList_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxStatScreen.OnListItemPress
// [0x00040001] ( FUNC_Final )
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGfxStatScreen::OnListItemPress ( struct FEventData ev )
{
	static UFunction* pFnOnListItemPress = NULL;

	if ( ! pFnOnListItemPress )
		pFnOnListItemPress = (UFunction*) UObject::GObjObjects()->Data[ 52101 ];

	USanctumHUDGfxStatScreen_execOnListItemPress_Parms OnListItemPress_Parms;
	memcpy ( &OnListItemPress_Parms.ev, &ev, 0x30 );

	this->ProcessEvent ( pFnOnListItemPress, &OnListItemPress_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxStatScreen.setTowerEntryStats
// [0x00020002] 
// Parameters infos:

void USanctumHUDGfxStatScreen::setTowerEntryStats ( )
{
	static UFunction* pFnsetTowerEntryStats = NULL;

	if ( ! pFnsetTowerEntryStats )
		pFnsetTowerEntryStats = (UFunction*) UObject::GObjObjects()->Data[ 52094 ];

	USanctumHUDGfxStatScreen_execsetTowerEntryStats_Parms setTowerEntryStats_Parms;

	this->ProcessEvent ( pFnsetTowerEntryStats, &setTowerEntryStats_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxStatScreen.setPlayerEntryStats
// [0x00020002] 
// Parameters infos:

void USanctumHUDGfxStatScreen::setPlayerEntryStats ( )
{
	static UFunction* pFnsetPlayerEntryStats = NULL;

	if ( ! pFnsetPlayerEntryStats )
		pFnsetPlayerEntryStats = (UFunction*) UObject::GObjObjects()->Data[ 52076 ];

	USanctumHUDGfxStatScreen_execsetPlayerEntryStats_Parms setPlayerEntryStats_Parms;

	this->ProcessEvent ( pFnsetPlayerEntryStats, &setPlayerEntryStats_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxStatScreen.UpdateListDataProvider
// [0x00020002] 
// Parameters infos:

void USanctumHUDGfxStatScreen::UpdateListDataProvider ( )
{
	static UFunction* pFnUpdateListDataProvider = NULL;

	if ( ! pFnUpdateListDataProvider )
		pFnUpdateListDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 52071 ];

	USanctumHUDGfxStatScreen_execUpdateListDataProvider_Parms UpdateListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateListDataProvider, &UpdateListDataProvider_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxStatScreen.PlaySound
// [0x00020002] 
// Parameters infos:
// struct FString                 snd                            ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGfxStatScreen::PlaySound ( struct FString snd )
{
	static UFunction* pFnPlaySound = NULL;

	if ( ! pFnPlaySound )
		pFnPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 52069 ];

	USanctumHUDGfxStatScreen_execPlaySound_Parms PlaySound_Parms;
	memcpy ( &PlaySound_Parms.snd, &snd, 0xC );

	this->ProcessEvent ( pFnPlaySound, &PlaySound_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxStatScreen.FadeToStats
// [0x00024002] 
// Parameters infos:
// unsigned long                  forced                         ( CPF_OptionalParm | CPF_Parm )

void USanctumHUDGfxStatScreen::FadeToStats ( unsigned long forced )
{
	static UFunction* pFnFadeToStats = NULL;

	if ( ! pFnFadeToStats )
		pFnFadeToStats = (UFunction*) UObject::GObjObjects()->Data[ 52067 ];

	USanctumHUDGfxStatScreen_execFadeToStats_Parms FadeToStats_Parms;
	FadeToStats_Parms.forced = forced;

	this->ProcessEvent ( pFnFadeToStats, &FadeToStats_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxStatScreen.Init
// [0x00024002] 
// Parameters infos:
// class ULocalPlayer*            LocPlay                        ( CPF_OptionalParm | CPF_Parm )

void USanctumHUDGfxStatScreen::Init ( class ULocalPlayer* LocPlay )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 52057 ];

	USanctumHUDGfxStatScreen_execInit_Parms Init_Parms;
	Init_Parms.LocPlay = LocPlay;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool USanctumMainMenu::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 53193 ];

	USanctumMainMenu_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function Sanctum.SanctumMainMenu.SetPopupText
// [0x00024002] 
// Parameters infos:
// struct FString                 Id                             ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 insertTxt                      ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::SetPopupText ( struct FString Id, struct FString insertTxt )
{
	static UFunction* pFnSetPopupText = NULL;

	if ( ! pFnSetPopupText )
		pFnSetPopupText = (UFunction*) UObject::GObjObjects()->Data[ 53188 ];

	USanctumMainMenu_execSetPopupText_Parms SetPopupText_Parms;
	memcpy ( &SetPopupText_Parms.Id, &Id, 0xC );
	memcpy ( &SetPopupText_Parms.insertTxt, &insertTxt, 0xC );

	this->ProcessEvent ( pFnSetPopupText, &SetPopupText_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.SetBackButtonText
// [0x00020002] 
// Parameters infos:
// struct FString                 txt                            ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::SetBackButtonText ( struct FString txt )
{
	static UFunction* pFnSetBackButtonText = NULL;

	if ( ! pFnSetBackButtonText )
		pFnSetBackButtonText = (UFunction*) UObject::GObjObjects()->Data[ 53185 ];

	USanctumMainMenu_execSetBackButtonText_Parms SetBackButtonText_Parms;
	memcpy ( &SetBackButtonText_Parms.txt, &txt, 0xC );

	this->ProcessEvent ( pFnSetBackButtonText, &SetBackButtonText_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.ClearLobbyInfo
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::ClearLobbyInfo ( )
{
	static UFunction* pFnClearLobbyInfo = NULL;

	if ( ! pFnClearLobbyInfo )
		pFnClearLobbyInfo = (UFunction*) UObject::GObjObjects()->Data[ 53184 ];

	USanctumMainMenu_execClearLobbyInfo_Parms ClearLobbyInfo_Parms;

	this->ProcessEvent ( pFnClearLobbyInfo, &ClearLobbyInfo_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.SetWikiButtonBarNames
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::SetWikiButtonBarNames ( )
{
	static UFunction* pFnSetWikiButtonBarNames = NULL;

	if ( ! pFnSetWikiButtonBarNames )
		pFnSetWikiButtonBarNames = (UFunction*) UObject::GObjObjects()->Data[ 53181 ];

	USanctumMainMenu_execSetWikiButtonBarNames_Parms SetWikiButtonBarNames_Parms;

	this->ProcessEvent ( pFnSetWikiButtonBarNames, &SetWikiButtonBarNames_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.SetLobbyLocalization
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::SetLobbyLocalization ( )
{
	static UFunction* pFnSetLobbyLocalization = NULL;

	if ( ! pFnSetLobbyLocalization )
		pFnSetLobbyLocalization = (UFunction*) UObject::GObjObjects()->Data[ 53178 ];

	USanctumMainMenu_execSetLobbyLocalization_Parms SetLobbyLocalization_Parms;

	this->ProcessEvent ( pFnSetLobbyLocalization, &SetLobbyLocalization_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.SetLocalizedGameAddons
// [0x00020002] 
// Parameters infos:
// struct FString                 Mode                           ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::SetLocalizedGameAddons ( struct FString Mode )
{
	static UFunction* pFnSetLocalizedGameAddons = NULL;

	if ( ! pFnSetLocalizedGameAddons )
		pFnSetLocalizedGameAddons = (UFunction*) UObject::GObjObjects()->Data[ 53173 ];

	USanctumMainMenu_execSetLocalizedGameAddons_Parms SetLocalizedGameAddons_Parms;
	memcpy ( &SetLocalizedGameAddons_Parms.Mode, &Mode, 0xC );

	this->ProcessEvent ( pFnSetLocalizedGameAddons, &SetLocalizedGameAddons_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.SetLocalizedDifficultyProvider
// [0x00020002] 
// Parameters infos:
// struct FString                 Mode                           ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::SetLocalizedDifficultyProvider ( struct FString Mode )
{
	static UFunction* pFnSetLocalizedDifficultyProvider = NULL;

	if ( ! pFnSetLocalizedDifficultyProvider )
		pFnSetLocalizedDifficultyProvider = (UFunction*) UObject::GObjObjects()->Data[ 53169 ];

	USanctumMainMenu_execSetLocalizedDifficultyProvider_Parms SetLocalizedDifficultyProvider_Parms;
	memcpy ( &SetLocalizedDifficultyProvider_Parms.Mode, &Mode, 0xC );

	this->ProcessEvent ( pFnSetLocalizedDifficultyProvider, &SetLocalizedDifficultyProvider_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.SetLocalizedWaveCount
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::SetLocalizedWaveCount ( )
{
	static UFunction* pFnSetLocalizedWaveCount = NULL;

	if ( ! pFnSetLocalizedWaveCount )
		pFnSetLocalizedWaveCount = (UFunction*) UObject::GObjObjects()->Data[ 53162 ];

	USanctumMainMenu_execSetLocalizedWaveCount_Parms SetLocalizedWaveCount_Parms;

	this->ProcessEvent ( pFnSetLocalizedWaveCount, &SetLocalizedWaveCount_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.SetLocalizeedLevelLockedText
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::SetLocalizeedLevelLockedText ( )
{
	static UFunction* pFnSetLocalizeedLevelLockedText = NULL;

	if ( ! pFnSetLocalizeedLevelLockedText )
		pFnSetLocalizeedLevelLockedText = (UFunction*) UObject::GObjObjects()->Data[ 53160 ];

	USanctumMainMenu_execSetLocalizeedLevelLockedText_Parms SetLocalizeedLevelLockedText_Parms;

	this->ProcessEvent ( pFnSetLocalizeedLevelLockedText, &SetLocalizeedLevelLockedText_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.SetLocalizedText
// [0x00024002] 
// Parameters infos:
// class UGFxObject*              Obj                            ( CPF_Parm )
// struct FString                 Id                             ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 VarName                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::SetLocalizedText ( class UGFxObject* Obj, struct FString Id, struct FString VarName )
{
	static UFunction* pFnSetLocalizedText = NULL;

	if ( ! pFnSetLocalizedText )
		pFnSetLocalizedText = (UFunction*) UObject::GObjObjects()->Data[ 53156 ];

	USanctumMainMenu_execSetLocalizedText_Parms SetLocalizedText_Parms;
	SetLocalizedText_Parms.Obj = Obj;
	memcpy ( &SetLocalizedText_Parms.Id, &Id, 0xC );
	memcpy ( &SetLocalizedText_Parms.VarName, &VarName, 0xC );

	this->ProcessEvent ( pFnSetLocalizedText, &SetLocalizedText_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.OnCommunityPressed
// [0x00020002] 
// Parameters infos:
// struct FEventData              Event                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::OnCommunityPressed ( struct FEventData Event )
{
	static UFunction* pFnOnCommunityPressed = NULL;

	if ( ! pFnOnCommunityPressed )
		pFnOnCommunityPressed = (UFunction*) UObject::GObjObjects()->Data[ 53154 ];

	USanctumMainMenu_execOnCommunityPressed_Parms OnCommunityPressed_Parms;
	memcpy ( &OnCommunityPressed_Parms.Event, &Event, 0x30 );

	this->ProcessEvent ( pFnOnCommunityPressed, &OnCommunityPressed_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.OnLeaderboardsPressed
// [0x00020002] 
// Parameters infos:
// struct FEventData              Event                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::OnLeaderboardsPressed ( struct FEventData Event )
{
	static UFunction* pFnOnLeaderboardsPressed = NULL;

	if ( ! pFnOnLeaderboardsPressed )
		pFnOnLeaderboardsPressed = (UFunction*) UObject::GObjObjects()->Data[ 53152 ];

	USanctumMainMenu_execOnLeaderboardsPressed_Parms OnLeaderboardsPressed_Parms;
	memcpy ( &OnLeaderboardsPressed_Parms.Event, &Event, 0x30 );

	this->ProcessEvent ( pFnOnLeaderboardsPressed, &OnLeaderboardsPressed_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.OnAchievementsPressed
// [0x00020002] 
// Parameters infos:
// struct FEventData              Event                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::OnAchievementsPressed ( struct FEventData Event )
{
	static UFunction* pFnOnAchievementsPressed = NULL;

	if ( ! pFnOnAchievementsPressed )
		pFnOnAchievementsPressed = (UFunction*) UObject::GObjObjects()->Data[ 53150 ];

	USanctumMainMenu_execOnAchievementsPressed_Parms OnAchievementsPressed_Parms;
	memcpy ( &OnAchievementsPressed_Parms.Event, &Event, 0x30 );

	this->ProcessEvent ( pFnOnAchievementsPressed, &OnAchievementsPressed_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.OnFacebookPressed
// [0x00020002] 
// Parameters infos:
// struct FEventData              Event                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::OnFacebookPressed ( struct FEventData Event )
{
	static UFunction* pFnOnFacebookPressed = NULL;

	if ( ! pFnOnFacebookPressed )
		pFnOnFacebookPressed = (UFunction*) UObject::GObjObjects()->Data[ 53148 ];

	USanctumMainMenu_execOnFacebookPressed_Parms OnFacebookPressed_Parms;
	memcpy ( &OnFacebookPressed_Parms.Event, &Event, 0x30 );

	this->ProcessEvent ( pFnOnFacebookPressed, &OnFacebookPressed_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.SetCommunityButtons
// [0x00024002] 
// Parameters infos:
// unsigned long                  Visible                        ( CPF_OptionalParm | CPF_Parm )

void USanctumMainMenu::SetCommunityButtons ( unsigned long Visible )
{
	static UFunction* pFnSetCommunityButtons = NULL;

	if ( ! pFnSetCommunityButtons )
		pFnSetCommunityButtons = (UFunction*) UObject::GObjObjects()->Data[ 53146 ];

	USanctumMainMenu_execSetCommunityButtons_Parms SetCommunityButtons_Parms;
	SetCommunityButtons_Parms.Visible = Visible;

	this->ProcessEvent ( pFnSetCommunityButtons, &SetCommunityButtons_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.applyGfxSettings
// [0x00820002] 
// Parameters infos:

void USanctumMainMenu::applyGfxSettings ( )
{
	static UFunction* pFnapplyGfxSettings = NULL;

	if ( ! pFnapplyGfxSettings )
		pFnapplyGfxSettings = (UFunction*) UObject::GObjObjects()->Data[ 53131 ];

	USanctumMainMenu_execapplyGfxSettings_Parms applyGfxSettings_Parms;

	this->ProcessEvent ( pFnapplyGfxSettings, &applyGfxSettings_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.getDefaultGfxOptions
// [0x00820002] 
// Parameters infos:

void USanctumMainMenu::getDefaultGfxOptions ( )
{
	static UFunction* pFngetDefaultGfxOptions = NULL;

	if ( ! pFngetDefaultGfxOptions )
		pFngetDefaultGfxOptions = (UFunction*) UObject::GObjObjects()->Data[ 53066 ];

	USanctumMainMenu_execgetDefaultGfxOptions_Parms getDefaultGfxOptions_Parms;

	this->ProcessEvent ( pFngetDefaultGfxOptions, &getDefaultGfxOptions_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.applyGameplaySettings
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::applyGameplaySettings ( )
{
	static UFunction* pFnapplyGameplaySettings = NULL;

	if ( ! pFnapplyGameplaySettings )
		pFnapplyGameplaySettings = (UFunction*) UObject::GObjObjects()->Data[ 53058 ];

	USanctumMainMenu_execapplyGameplaySettings_Parms applyGameplaySettings_Parms;

	this->ProcessEvent ( pFnapplyGameplaySettings, &applyGameplaySettings_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.getDefaultGameplayOptions
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::getDefaultGameplayOptions ( )
{
	static UFunction* pFngetDefaultGameplayOptions = NULL;

	if ( ! pFngetDefaultGameplayOptions )
		pFngetDefaultGameplayOptions = (UFunction*) UObject::GObjObjects()->Data[ 53051 ];

	USanctumMainMenu_execgetDefaultGameplayOptions_Parms getDefaultGameplayOptions_Parms;

	this->ProcessEvent ( pFngetDefaultGameplayOptions, &getDefaultGameplayOptions_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.getDefaultControlsOptions
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::getDefaultControlsOptions ( )
{
	static UFunction* pFngetDefaultControlsOptions = NULL;

	if ( ! pFngetDefaultControlsOptions )
		pFngetDefaultControlsOptions = (UFunction*) UObject::GObjObjects()->Data[ 53044 ];

	USanctumMainMenu_execgetDefaultControlsOptions_Parms getDefaultControlsOptions_Parms;

	this->ProcessEvent ( pFngetDefaultControlsOptions, &getDefaultControlsOptions_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.applySoundSettings
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::applySoundSettings ( )
{
	static UFunction* pFnapplySoundSettings = NULL;

	if ( ! pFnapplySoundSettings )
		pFnapplySoundSettings = (UFunction*) UObject::GObjObjects()->Data[ 53034 ];

	USanctumMainMenu_execapplySoundSettings_Parms applySoundSettings_Parms;

	this->ProcessEvent ( pFnapplySoundSettings, &applySoundSettings_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.getDefaultSoundOptions
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::getDefaultSoundOptions ( )
{
	static UFunction* pFngetDefaultSoundOptions = NULL;

	if ( ! pFngetDefaultSoundOptions )
		pFngetDefaultSoundOptions = (UFunction*) UObject::GObjObjects()->Data[ 53022 ];

	USanctumMainMenu_execgetDefaultSoundOptions_Parms getDefaultSoundOptions_Parms;

	this->ProcessEvent ( pFngetDefaultSoundOptions, &getDefaultSoundOptions_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.pushSoundOptionBool
// [0x00020002] 
// Parameters infos:
// struct FString                 Label                          ( CPF_Parm | CPF_NeedCtorLink )
// int                            optValue                       ( CPF_Parm )
// unsigned long                  fromUnreal                     ( CPF_Parm )
// TArray< struct FString >       entrys                         ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::pushSoundOptionBool ( struct FString Label, int optValue, unsigned long fromUnreal, TArray< struct FString > entrys )
{
	static UFunction* pFnpushSoundOptionBool = NULL;

	if ( ! pFnpushSoundOptionBool )
		pFnpushSoundOptionBool = (UFunction*) UObject::GObjObjects()->Data[ 53016 ];

	USanctumMainMenu_execpushSoundOptionBool_Parms pushSoundOptionBool_Parms;
	memcpy ( &pushSoundOptionBool_Parms.Label, &Label, 0xC );
	pushSoundOptionBool_Parms.optValue = optValue;
	pushSoundOptionBool_Parms.fromUnreal = fromUnreal;
	memcpy ( &pushSoundOptionBool_Parms.entrys, &entrys, 0xC );

	this->ProcessEvent ( pFnpushSoundOptionBool, &pushSoundOptionBool_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.pushSoundOption
// [0x00020002] 
// Parameters infos:
// struct FString                 Label                          ( CPF_Parm | CPF_NeedCtorLink )
// int                            optValue                       ( CPF_Parm )
// unsigned long                  fromUnreal                     ( CPF_Parm )

void USanctumMainMenu::pushSoundOption ( struct FString Label, int optValue, unsigned long fromUnreal )
{
	static UFunction* pFnpushSoundOption = NULL;

	if ( ! pFnpushSoundOption )
		pFnpushSoundOption = (UFunction*) UObject::GObjObjects()->Data[ 53012 ];

	USanctumMainMenu_execpushSoundOption_Parms pushSoundOption_Parms;
	memcpy ( &pushSoundOption_Parms.Label, &Label, 0xC );
	pushSoundOption_Parms.optValue = optValue;
	pushSoundOption_Parms.fromUnreal = fromUnreal;

	this->ProcessEvent ( pFnpushSoundOption, &pushSoundOption_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.pushOption
// [0x00020002] 
// Parameters infos:
// struct FString                 Label                          ( CPF_Parm | CPF_NeedCtorLink )
// int                            optValue                       ( CPF_Parm )
// unsigned long                  fromUnreal                     ( CPF_Parm )
// TArray< struct FString >       entrys                         ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::pushOption ( struct FString Label, int optValue, unsigned long fromUnreal, TArray< struct FString > entrys )
{
	static UFunction* pFnpushOption = NULL;

	if ( ! pFnpushOption )
		pFnpushOption = (UFunction*) UObject::GObjObjects()->Data[ 53006 ];

	USanctumMainMenu_execpushOption_Parms pushOption_Parms;
	memcpy ( &pushOption_Parms.Label, &Label, 0xC );
	pushOption_Parms.optValue = optValue;
	pushOption_Parms.fromUnreal = fromUnreal;
	memcpy ( &pushOption_Parms.entrys, &entrys, 0xC );

	this->ProcessEvent ( pFnpushOption, &pushOption_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.setImage
// [0x00024002] 
// Parameters infos:
// struct FString                 theName                        ( CPF_Parm | CPF_NeedCtorLink )
// int                            wikiTab                        ( CPF_Parm )
// int                            Index                          ( CPF_OptionalParm | CPF_Parm )

void USanctumMainMenu::setImage ( struct FString theName, int wikiTab, int Index )
{
	static UFunction* pFnsetImage = NULL;

	if ( ! pFnsetImage )
		pFnsetImage = (UFunction*) UObject::GObjObjects()->Data[ 52997 ];

	USanctumMainMenu_execsetImage_Parms setImage_Parms;
	memcpy ( &setImage_Parms.theName, &theName, 0xC );
	setImage_Parms.wikiTab = wikiTab;
	setImage_Parms.Index = Index;

	this->ProcessEvent ( pFnsetImage, &setImage_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.setWavePreview
// [0x00020002] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void USanctumMainMenu::setWavePreview ( int Index )
{
	static UFunction* pFnsetWavePreview = NULL;

	if ( ! pFnsetWavePreview )
		pFnsetWavePreview = (UFunction*) UObject::GObjObjects()->Data[ 52986 ];

	USanctumMainMenu_execsetWavePreview_Parms setWavePreview_Parms;
	setWavePreview_Parms.Index = Index;

	this->ProcessEvent ( pFnsetWavePreview, &setWavePreview_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.getNextInfo
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::getNextInfo ( )
{
	static UFunction* pFngetNextInfo = NULL;

	if ( ! pFngetNextInfo )
		pFngetNextInfo = (UFunction*) UObject::GObjObjects()->Data[ 52977 ];

	USanctumMainMenu_execgetNextInfo_Parms getNextInfo_Parms;

	this->ProcessEvent ( pFngetNextInfo, &getNextInfo_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.markWikiItem
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::markWikiItem ( )
{
	static UFunction* pFnmarkWikiItem = NULL;

	if ( ! pFnmarkWikiItem )
		pFnmarkWikiItem = (UFunction*) UObject::GObjObjects()->Data[ 52976 ];

	USanctumMainMenu_execmarkWikiItem_Parms markWikiItem_Parms;

	this->ProcessEvent ( pFnmarkWikiItem, &markWikiItem_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.sortWikiList
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::sortWikiList ( )
{
	static UFunction* pFnsortWikiList = NULL;

	if ( ! pFnsortWikiList )
		pFnsortWikiList = (UFunction*) UObject::GObjObjects()->Data[ 52975 ];

	USanctumMainMenu_execsortWikiList_Parms sortWikiList_Parms;

	this->ProcessEvent ( pFnsortWikiList, &sortWikiList_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.gotoWikiWaveIndex
// [0x00020002] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// struct FString                 Desc                           ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::gotoWikiWaveIndex ( int Index, struct FString Desc )
{
	static UFunction* pFngotoWikiWaveIndex = NULL;

	if ( ! pFngotoWikiWaveIndex )
		pFngotoWikiWaveIndex = (UFunction*) UObject::GObjObjects()->Data[ 52972 ];

	USanctumMainMenu_execgotoWikiWaveIndex_Parms gotoWikiWaveIndex_Parms;
	gotoWikiWaveIndex_Parms.Index = Index;
	memcpy ( &gotoWikiWaveIndex_Parms.Desc, &Desc, 0xC );

	this->ProcessEvent ( pFngotoWikiWaveIndex, &gotoWikiWaveIndex_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.gotoWikiIndex
// [0x00020002] 
// Parameters infos:
// struct FString                 Selected                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Desc                           ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::gotoWikiIndex ( struct FString Selected, struct FString Desc )
{
	static UFunction* pFngotoWikiIndex = NULL;

	if ( ! pFngotoWikiIndex )
		pFngotoWikiIndex = (UFunction*) UObject::GObjObjects()->Data[ 52968 ];

	USanctumMainMenu_execgotoWikiIndex_Parms gotoWikiIndex_Parms;
	memcpy ( &gotoWikiIndex_Parms.Selected, &Selected, 0xC );
	memcpy ( &gotoWikiIndex_Parms.Desc, &Desc, 0xC );

	this->ProcessEvent ( pFngotoWikiIndex, &gotoWikiIndex_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.ChangedWikiTab
// [0x00024002] 
// Parameters infos:
// int                            selectedTab                    ( CPF_Parm )
// int                            ListIndex                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  gotoQuick                      ( CPF_OptionalParm | CPF_Parm )

void USanctumMainMenu::ChangedWikiTab ( int selectedTab, int ListIndex, unsigned long gotoQuick )
{
	static UFunction* pFnChangedWikiTab = NULL;

	if ( ! pFnChangedWikiTab )
		pFnChangedWikiTab = (UFunction*) UObject::GObjObjects()->Data[ 52953 ];

	USanctumMainMenu_execChangedWikiTab_Parms ChangedWikiTab_Parms;
	ChangedWikiTab_Parms.selectedTab = selectedTab;
	ChangedWikiTab_Parms.ListIndex = ListIndex;
	ChangedWikiTab_Parms.gotoQuick = gotoQuick;

	this->ProcessEvent ( pFnChangedWikiTab, &ChangedWikiTab_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.checkPrevBind
// [0x00020002] 
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )

void USanctumMainMenu::checkPrevBind ( struct FName Key )
{
	static UFunction* pFncheckPrevBind = NULL;

	if ( ! pFncheckPrevBind )
		pFncheckPrevBind = (UFunction*) UObject::GObjObjects()->Data[ 52948 ];

	USanctumMainMenu_execcheckPrevBind_Parms checkPrevBind_Parms;
	memcpy ( &checkPrevBind_Parms.Key, &Key, 0x8 );

	this->ProcessEvent ( pFncheckPrevBind, &checkPrevBind_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.CheckBind
// [0x00020002] 
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )

void USanctumMainMenu::CheckBind ( struct FName Key )
{
	static UFunction* pFnCheckBind = NULL;

	if ( ! pFnCheckBind )
		pFnCheckBind = (UFunction*) UObject::GObjObjects()->Data[ 52944 ];

	USanctumMainMenu_execCheckBind_Parms CheckBind_Parms;
	memcpy ( &CheckBind_Parms.Key, &Key, 0x8 );

	this->ProcessEvent ( pFnCheckBind, &CheckBind_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.cancelKeybind
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::cancelKeybind ( )
{
	static UFunction* pFncancelKeybind = NULL;

	if ( ! pFncancelKeybind )
		pFncancelKeybind = (UFunction*) UObject::GObjObjects()->Data[ 52942 ];

	USanctumMainMenu_execcancelKeybind_Parms cancelKeybind_Parms;

	this->ProcessEvent ( pFncancelKeybind, &cancelKeybind_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.callCancelKeybind
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::callCancelKeybind ( )
{
	static UFunction* pFncallCancelKeybind = NULL;

	if ( ! pFncallCancelKeybind )
		pFncallCancelKeybind = (UFunction*) UObject::GObjObjects()->Data[ 52941 ];

	USanctumMainMenu_execcallCancelKeybind_Parms callCancelKeybind_Parms;

	this->ProcessEvent ( pFncallCancelKeybind, &callCancelKeybind_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.KeyToBind
// [0x00020002] 
// Parameters infos:
// struct FName                   newKey                         ( CPF_Parm )

void USanctumMainMenu::KeyToBind ( struct FName newKey )
{
	static UFunction* pFnKeyToBind = NULL;

	if ( ! pFnKeyToBind )
		pFnKeyToBind = (UFunction*) UObject::GObjObjects()->Data[ 52936 ];

	USanctumMainMenu_execKeyToBind_Parms KeyToBind_Parms;
	memcpy ( &KeyToBind_Parms.newKey, &newKey, 0x8 );

	this->ProcessEvent ( pFnKeyToBind, &KeyToBind_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.Bind
// [0x00020002] 
// Parameters infos:
// int                            Idx                            ( CPF_Parm )
// struct FString                 prevKey                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::Bind ( int Idx, struct FString prevKey, struct FString Command )
{
	static UFunction* pFnBind = NULL;

	if ( ! pFnBind )
		pFnBind = (UFunction*) UObject::GObjObjects()->Data[ 52930 ];

	USanctumMainMenu_execBind_Parms Bind_Parms;
	Bind_Parms.Idx = Idx;
	memcpy ( &Bind_Parms.prevKey, &prevKey, 0xC );
	memcpy ( &Bind_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnBind, &Bind_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.setCommand
// [0x00020002] 
// Parameters infos:
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Key                            ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::setCommand ( struct FString Command, struct FString Key )
{
	static UFunction* pFnsetCommand = NULL;

	if ( ! pFnsetCommand )
		pFnsetCommand = (UFunction*) UObject::GObjObjects()->Data[ 52927 ];

	USanctumMainMenu_execsetCommand_Parms setCommand_Parms;
	memcpy ( &setCommand_Parms.Command, &Command, 0xC );
	memcpy ( &setCommand_Parms.Key, &Key, 0xC );

	this->ProcessEvent ( pFnsetCommand, &setCommand_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.SetData
// [0x00020002] 
// Parameters infos:
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Key                            ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::SetData ( struct FString Command, struct FString Key )
{
	static UFunction* pFnSetData = NULL;

	if ( ! pFnSetData )
		pFnSetData = (UFunction*) UObject::GObjObjects()->Data[ 52924 ];

	USanctumMainMenu_execSetData_Parms SetData_Parms;
	memcpy ( &SetData_Parms.Command, &Command, 0xC );
	memcpy ( &SetData_Parms.Key, &Key, 0xC );

	this->ProcessEvent ( pFnSetData, &SetData_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.ResetControlsAndKeybind
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::ResetControlsAndKeybind ( )
{
	static UFunction* pFnResetControlsAndKeybind = NULL;

	if ( ! pFnResetControlsAndKeybind )
		pFnResetControlsAndKeybind = (UFunction*) UObject::GObjObjects()->Data[ 52922 ];

	USanctumMainMenu_execResetControlsAndKeybind_Parms ResetControlsAndKeybind_Parms;

	this->ProcessEvent ( pFnResetControlsAndKeybind, &ResetControlsAndKeybind_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.applyControlsSettings
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::applyControlsSettings ( )
{
	static UFunction* pFnapplyControlsSettings = NULL;

	if ( ! pFnapplyControlsSettings )
		pFnapplyControlsSettings = (UFunction*) UObject::GObjObjects()->Data[ 52913 ];

	USanctumMainMenu_execapplyControlsSettings_Parms applyControlsSettings_Parms;

	this->ProcessEvent ( pFnapplyControlsSettings, &applyControlsSettings_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.SetControlsData
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::SetControlsData ( )
{
	static UFunction* pFnSetControlsData = NULL;

	if ( ! pFnSetControlsData )
		pFnSetControlsData = (UFunction*) UObject::GObjObjects()->Data[ 52909 ];

	USanctumMainMenu_execSetControlsData_Parms SetControlsData_Parms;

	this->ProcessEvent ( pFnSetControlsData, &SetControlsData_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.callShowLevelSelect
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::callShowLevelSelect ( )
{
	static UFunction* pFncallShowLevelSelect = NULL;

	if ( ! pFncallShowLevelSelect )
		pFncallShowLevelSelect = (UFunction*) UObject::GObjObjects()->Data[ 52908 ];

	USanctumMainMenu_execcallShowLevelSelect_Parms callShowLevelSelect_Parms;

	this->ProcessEvent ( pFncallShowLevelSelect, &callShowLevelSelect_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.CancelJoin
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::CancelJoin ( )
{
	static UFunction* pFnCancelJoin = NULL;

	if ( ! pFnCancelJoin )
		pFnCancelJoin = (UFunction*) UObject::GObjObjects()->Data[ 52907 ];

	USanctumMainMenu_execCancelJoin_Parms CancelJoin_Parms;

	this->ProcessEvent ( pFnCancelJoin, &CancelJoin_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.showConnectionErrorPopup
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::showConnectionErrorPopup ( )
{
	static UFunction* pFnshowConnectionErrorPopup = NULL;

	if ( ! pFnshowConnectionErrorPopup )
		pFnshowConnectionErrorPopup = (UFunction*) UObject::GObjObjects()->Data[ 52906 ];

	USanctumMainMenu_execshowConnectionErrorPopup_Parms showConnectionErrorPopup_Parms;

	this->ProcessEvent ( pFnshowConnectionErrorPopup, &showConnectionErrorPopup_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.JoinGame
// [0x00020002] 
// Parameters infos:
// struct FString                 adr                            ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::JoinGame ( struct FString adr )
{
	static UFunction* pFnJoinGame = NULL;

	if ( ! pFnJoinGame )
		pFnJoinGame = (UFunction*) UObject::GObjObjects()->Data[ 52904 ];

	USanctumMainMenu_execJoinGame_Parms JoinGame_Parms;
	memcpy ( &JoinGame_Parms.adr, &adr, 0xC );

	this->ProcessEvent ( pFnJoinGame, &JoinGame_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.getMode
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::getMode ( )
{
	static UFunction* pFngetMode = NULL;

	if ( ! pFngetMode )
		pFngetMode = (UFunction*) UObject::GObjObjects()->Data[ 52901 ];

	USanctumMainMenu_execgetMode_Parms getMode_Parms;

	this->ProcessEvent ( pFngetMode, &getMode_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.callShowValidIP
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::callShowValidIP ( )
{
	static UFunction* pFncallShowValidIP = NULL;

	if ( ! pFncallShowValidIP )
		pFncallShowValidIP = (UFunction*) UObject::GObjObjects()->Data[ 52900 ];

	USanctumMainMenu_execcallShowValidIP_Parms callShowValidIP_Parms;

	this->ProcessEvent ( pFncallShowValidIP, &callShowValidIP_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.callStartJoin
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::callStartJoin ( )
{
	static UFunction* pFncallStartJoin = NULL;

	if ( ! pFncallStartJoin )
		pFncallStartJoin = (UFunction*) UObject::GObjObjects()->Data[ 52899 ];

	USanctumMainMenu_execcallStartJoin_Parms callStartJoin_Parms;

	this->ProcessEvent ( pFncallStartJoin, &callStartJoin_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.CheckJoinString
// [0x00020002] 
// Parameters infos:
// struct FString                 Str                            ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::CheckJoinString ( struct FString Str )
{
	static UFunction* pFnCheckJoinString = NULL;

	if ( ! pFnCheckJoinString )
		pFnCheckJoinString = (UFunction*) UObject::GObjObjects()->Data[ 52895 ];

	USanctumMainMenu_execCheckJoinString_Parms CheckJoinString_Parms;
	memcpy ( &CheckJoinString_Parms.Str, &Str, 0xC );

	this->ProcessEvent ( pFnCheckJoinString, &CheckJoinString_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.TogglePause
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::TogglePause ( )
{
	static UFunction* pFnTogglePause = NULL;

	if ( ! pFnTogglePause )
		pFnTogglePause = (UFunction*) UObject::GObjObjects()->Data[ 52894 ];

	USanctumMainMenu_execTogglePause_Parms TogglePause_Parms;

	this->ProcessEvent ( pFnTogglePause, &TogglePause_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.RestartLevel
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::RestartLevel ( )
{
	static UFunction* pFnRestartLevel = NULL;

	if ( ! pFnRestartLevel )
		pFnRestartLevel = (UFunction*) UObject::GObjObjects()->Data[ 52889 ];

	USanctumMainMenu_execRestartLevel_Parms RestartLevel_Parms;

	this->ProcessEvent ( pFnRestartLevel, &RestartLevel_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.ExitToWindows
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::ExitToWindows ( )
{
	static UFunction* pFnExitToWindows = NULL;

	if ( ! pFnExitToWindows )
		pFnExitToWindows = (UFunction*) UObject::GObjObjects()->Data[ 52888 ];

	USanctumMainMenu_execExitToWindows_Parms ExitToWindows_Parms;

	this->ProcessEvent ( pFnExitToWindows, &ExitToWindows_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.ExitToMain
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::ExitToMain ( )
{
	static UFunction* pFnExitToMain = NULL;

	if ( ! pFnExitToMain )
		pFnExitToMain = (UFunction*) UObject::GObjObjects()->Data[ 52885 ];

	USanctumMainMenu_execExitToMain_Parms ExitToMain_Parms;

	this->ProcessEvent ( pFnExitToMain, &ExitToMain_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.ResumeGameFromPause
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::ResumeGameFromPause ( )
{
	static UFunction* pFnResumeGameFromPause = NULL;

	if ( ! pFnResumeGameFromPause )
		pFnResumeGameFromPause = (UFunction*) UObject::GObjObjects()->Data[ 52883 ];

	USanctumMainMenu_execResumeGameFromPause_Parms ResumeGameFromPause_Parms;

	this->ProcessEvent ( pFnResumeGameFromPause, &ResumeGameFromPause_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.JoinLobby
// [0x00020002] 
// Parameters infos:
// struct FString                 Id                             ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::JoinLobby ( struct FString Id )
{
	static UFunction* pFnJoinLobby = NULL;

	if ( ! pFnJoinLobby )
		pFnJoinLobby = (UFunction*) UObject::GObjObjects()->Data[ 52881 ];

	USanctumMainMenu_execJoinLobby_Parms JoinLobby_Parms;
	memcpy ( &JoinLobby_Parms.Id, &Id, 0xC );

	this->ProcessEvent ( pFnJoinLobby, &JoinLobby_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.UncagePlayer
// [0x00020002] 
// Parameters infos:
// int                            Slot                           ( CPF_Parm )

void USanctumMainMenu::UncagePlayer ( int Slot )
{
	static UFunction* pFnUncagePlayer = NULL;

	if ( ! pFnUncagePlayer )
		pFnUncagePlayer = (UFunction*) UObject::GObjObjects()->Data[ 52877 ];

	USanctumMainMenu_execUncagePlayer_Parms UncagePlayer_Parms;
	UncagePlayer_Parms.Slot = Slot;

	this->ProcessEvent ( pFnUncagePlayer, &UncagePlayer_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.CagePlayer
// [0x00020002] 
// Parameters infos:
// int                            Slot                           ( CPF_Parm )

void USanctumMainMenu::CagePlayer ( int Slot )
{
	static UFunction* pFnCagePlayer = NULL;

	if ( ! pFnCagePlayer )
		pFnCagePlayer = (UFunction*) UObject::GObjObjects()->Data[ 52873 ];

	USanctumMainMenu_execCagePlayer_Parms CagePlayer_Parms;
	CagePlayer_Parms.Slot = Slot;

	this->ProcessEvent ( pFnCagePlayer, &CagePlayer_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.KickComplete
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::KickComplete ( )
{
	static UFunction* pFnKickComplete = NULL;

	if ( ! pFnKickComplete )
		pFnKickComplete = (UFunction*) UObject::GObjObjects()->Data[ 52872 ];

	USanctumMainMenu_execKickComplete_Parms KickComplete_Parms;

	this->ProcessEvent ( pFnKickComplete, &KickComplete_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.KickPlayer
// [0x00020002] 
// Parameters infos:
// int                            Slot                           ( CPF_Parm )

void USanctumMainMenu::KickPlayer ( int Slot )
{
	static UFunction* pFnKickPlayer = NULL;

	if ( ! pFnKickPlayer )
		pFnKickPlayer = (UFunction*) UObject::GObjObjects()->Data[ 52867 ];

	USanctumMainMenu_execKickPlayer_Parms KickPlayer_Parms;
	KickPlayer_Parms.Slot = Slot;

	this->ProcessEvent ( pFnKickPlayer, &KickPlayer_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.GetPlayerNames
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::GetPlayerNames ( )
{
	static UFunction* pFnGetPlayerNames = NULL;

	if ( ! pFnGetPlayerNames )
		pFnGetPlayerNames = (UFunction*) UObject::GObjObjects()->Data[ 52858 ];

	USanctumMainMenu_execGetPlayerNames_Parms GetPlayerNames_Parms;

	this->ProcessEvent ( pFnGetPlayerNames, &GetPlayerNames_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.RefreshFriends
// [0x00020002] 
// Parameters infos:
// int                            mapIdx                         ( CPF_Parm )
// int                            diffIdx                        ( CPF_Parm )
// int                            playersIdx                     ( CPF_Parm )
// unsigned long                  hideFullGames                  ( CPF_Parm )
// int                            addonIdx                       ( CPF_Parm )

void USanctumMainMenu::RefreshFriends ( int mapIdx, int diffIdx, int playersIdx, unsigned long hideFullGames, int addonIdx )
{
	static UFunction* pFnRefreshFriends = NULL;

	if ( ! pFnRefreshFriends )
		pFnRefreshFriends = (UFunction*) UObject::GObjObjects()->Data[ 52852 ];

	USanctumMainMenu_execRefreshFriends_Parms RefreshFriends_Parms;
	RefreshFriends_Parms.mapIdx = mapIdx;
	RefreshFriends_Parms.diffIdx = diffIdx;
	RefreshFriends_Parms.playersIdx = playersIdx;
	RefreshFriends_Parms.hideFullGames = hideFullGames;
	RefreshFriends_Parms.addonIdx = addonIdx;

	this->ProcessEvent ( pFnRefreshFriends, &RefreshFriends_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.RefreshLobby
// [0x00020002] 
// Parameters infos:
// int                            mapIdx                         ( CPF_Parm )
// int                            diffIdx                        ( CPF_Parm )
// int                            playersIdx                     ( CPF_Parm )
// unsigned long                  hideFullGames                  ( CPF_Parm )
// int                            lobbyDistance                  ( CPF_Parm )
// int                            addonIdx                       ( CPF_Parm )

void USanctumMainMenu::RefreshLobby ( int mapIdx, int diffIdx, int playersIdx, unsigned long hideFullGames, int lobbyDistance, int addonIdx )
{
	static UFunction* pFnRefreshLobby = NULL;

	if ( ! pFnRefreshLobby )
		pFnRefreshLobby = (UFunction*) UObject::GObjObjects()->Data[ 52845 ];

	USanctumMainMenu_execRefreshLobby_Parms RefreshLobby_Parms;
	RefreshLobby_Parms.mapIdx = mapIdx;
	RefreshLobby_Parms.diffIdx = diffIdx;
	RefreshLobby_Parms.playersIdx = playersIdx;
	RefreshLobby_Parms.hideFullGames = hideFullGames;
	RefreshLobby_Parms.lobbyDistance = lobbyDistance;
	RefreshLobby_Parms.addonIdx = addonIdx;

	this->ProcessEvent ( pFnRefreshLobby, &RefreshLobby_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.callNoLobbiesFoundPopup
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::callNoLobbiesFoundPopup ( )
{
	static UFunction* pFncallNoLobbiesFoundPopup = NULL;

	if ( ! pFncallNoLobbiesFoundPopup )
		pFncallNoLobbiesFoundPopup = (UFunction*) UObject::GObjObjects()->Data[ 52844 ];

	USanctumMainMenu_execcallNoLobbiesFoundPopup_Parms callNoLobbiesFoundPopup_Parms;

	this->ProcessEvent ( pFncallNoLobbiesFoundPopup, &callNoLobbiesFoundPopup_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.CallSetSaveInfo
// [0x00020002] 
// Parameters infos:
// unsigned long                  Save                           ( CPF_Parm )
// TArray< int >                  unlocked                       ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::CallSetSaveInfo ( unsigned long Save, TArray< int > unlocked )
{
	static UFunction* pFnCallSetSaveInfo = NULL;

	if ( ! pFnCallSetSaveInfo )
		pFnCallSetSaveInfo = (UFunction*) UObject::GObjObjects()->Data[ 52840 ];

	USanctumMainMenu_execCallSetSaveInfo_Parms CallSetSaveInfo_Parms;
	CallSetSaveInfo_Parms.Save = Save;
	memcpy ( &CallSetSaveInfo_Parms.unlocked, &unlocked, 0xC );

	this->ProcessEvent ( pFnCallSetSaveInfo, &CallSetSaveInfo_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.getSaveInfo
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::getSaveInfo ( )
{
	static UFunction* pFngetSaveInfo = NULL;

	if ( ! pFngetSaveInfo )
		pFngetSaveInfo = (UFunction*) UObject::GObjObjects()->Data[ 52833 ];

	USanctumMainMenu_execgetSaveInfo_Parms getSaveInfo_Parms;

	this->ProcessEvent ( pFngetSaveInfo, &getSaveInfo_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.getContinueInfo
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::getContinueInfo ( )
{
	static UFunction* pFngetContinueInfo = NULL;

	if ( ! pFngetContinueInfo )
		pFngetContinueInfo = (UFunction*) UObject::GObjObjects()->Data[ 52822 ];

	USanctumMainMenu_execgetContinueInfo_Parms getContinueInfo_Parms;

	this->ProcessEvent ( pFngetContinueInfo, &getContinueInfo_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.clearLevelArray
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::clearLevelArray ( )
{
	static UFunction* pFnclearLevelArray = NULL;

	if ( ! pFnclearLevelArray )
		pFnclearLevelArray = (UFunction*) UObject::GObjObjects()->Data[ 52821 ];

	USanctumMainMenu_execclearLevelArray_Parms clearLevelArray_Parms;

	this->ProcessEvent ( pFnclearLevelArray, &clearLevelArray_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.ChangePreviewImage
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              Obj                            ( CPF_Parm )
// struct FString                 frameName                      ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::ChangePreviewImage ( class UGFxObject* Obj, struct FString frameName )
{
	static UFunction* pFnChangePreviewImage = NULL;

	if ( ! pFnChangePreviewImage )
		pFnChangePreviewImage = (UFunction*) UObject::GObjObjects()->Data[ 52818 ];

	USanctumMainMenu_execChangePreviewImage_Parms ChangePreviewImage_Parms;
	ChangePreviewImage_Parms.Obj = Obj;
	memcpy ( &ChangePreviewImage_Parms.frameName, &frameName, 0xC );

	this->ProcessEvent ( pFnChangePreviewImage, &ChangePreviewImage_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.insertEndlessLevels
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::insertEndlessLevels ( )
{
	static UFunction* pFninsertEndlessLevels = NULL;

	if ( ! pFninsertEndlessLevels )
		pFninsertEndlessLevels = (UFunction*) UObject::GObjObjects()->Data[ 52813 ];

	USanctumMainMenu_execinsertEndlessLevels_Parms insertEndlessLevels_Parms;

	this->ProcessEvent ( pFninsertEndlessLevels, &insertEndlessLevels_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.SetLevelIDArray
// [0x00020000] 
// Parameters infos:
// class UGFxObject*              idArray                        ( CPF_Parm )

void USanctumMainMenu::SetLevelIDArray ( class UGFxObject* idArray )
{
	static UFunction* pFnSetLevelIDArray = NULL;

	if ( ! pFnSetLevelIDArray )
		pFnSetLevelIDArray = (UFunction*) UObject::GObjObjects()->Data[ 52811 ];

	USanctumMainMenu_execSetLevelIDArray_Parms SetLevelIDArray_Parms;
	SetLevelIDArray_Parms.idArray = idArray;

	this->ProcessEvent ( pFnSetLevelIDArray, &SetLevelIDArray_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.OpenMapDLCPage
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::OpenMapDLCPage ( )
{
	static UFunction* pFnOpenMapDLCPage = NULL;

	if ( ! pFnOpenMapDLCPage )
		pFnOpenMapDLCPage = (UFunction*) UObject::GObjObjects()->Data[ 52810 ];

	USanctumMainMenu_execOpenMapDLCPage_Parms OpenMapDLCPage_Parms;

	this->ProcessEvent ( pFnOpenMapDLCPage, &OpenMapDLCPage_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.CallUpdateLevelSelectedData
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::CallUpdateLevelSelectedData ( )
{
	static UFunction* pFnCallUpdateLevelSelectedData = NULL;

	if ( ! pFnCallUpdateLevelSelectedData )
		pFnCallUpdateLevelSelectedData = (UFunction*) UObject::GObjObjects()->Data[ 52809 ];

	USanctumMainMenu_execCallUpdateLevelSelectedData_Parms CallUpdateLevelSelectedData_Parms;

	this->ProcessEvent ( pFnCallUpdateLevelSelectedData, &CallUpdateLevelSelectedData_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.UpdateLevelListData
// [0x00024002] 
// Parameters infos:
// class UGFxObject*              levelList                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  isSurvival                     ( CPF_OptionalParm | CPF_Parm )
// int                            Difficulty                     ( CPF_OptionalParm | CPF_Parm )
// int                            gameModeIndex                  ( CPF_OptionalParm | CPF_Parm )

void USanctumMainMenu::UpdateLevelListData ( class UGFxObject* levelList, unsigned long isSurvival, int Difficulty, int gameModeIndex )
{
	static UFunction* pFnUpdateLevelListData = NULL;

	if ( ! pFnUpdateLevelListData )
		pFnUpdateLevelListData = (UFunction*) UObject::GObjObjects()->Data[ 52788 ];

	USanctumMainMenu_execUpdateLevelListData_Parms UpdateLevelListData_Parms;
	UpdateLevelListData_Parms.levelList = levelList;
	UpdateLevelListData_Parms.isSurvival = isSurvival;
	UpdateLevelListData_Parms.Difficulty = Difficulty;
	UpdateLevelListData_Parms.gameModeIndex = gameModeIndex;

	this->ProcessEvent ( pFnUpdateLevelListData, &UpdateLevelListData_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.PurchasedLevelDLC
// [0x00020002] 
// Parameters infos:
// int                            AppID                          ( CPF_Parm )

void USanctumMainMenu::PurchasedLevelDLC ( int AppID )
{
	static UFunction* pFnPurchasedLevelDLC = NULL;

	if ( ! pFnPurchasedLevelDLC )
		pFnPurchasedLevelDLC = (UFunction*) UObject::GObjObjects()->Data[ 52784 ];

	USanctumMainMenu_execPurchasedLevelDLC_Parms PurchasedLevelDLC_Parms;
	PurchasedLevelDLC_Parms.AppID = AppID;

	this->ProcessEvent ( pFnPurchasedLevelDLC, &PurchasedLevelDLC_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.RemoveDLCDelegate
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::RemoveDLCDelegate ( )
{
	static UFunction* pFnRemoveDLCDelegate = NULL;

	if ( ! pFnRemoveDLCDelegate )
		pFnRemoveDLCDelegate = (UFunction*) UObject::GObjObjects()->Data[ 52783 ];

	USanctumMainMenu_execRemoveDLCDelegate_Parms RemoveDLCDelegate_Parms;

	this->ProcessEvent ( pFnRemoveDLCDelegate, &RemoveDLCDelegate_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.AddLevelDLCDelegate
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::AddLevelDLCDelegate ( )
{
	static UFunction* pFnAddLevelDLCDelegate = NULL;

	if ( ! pFnAddLevelDLCDelegate )
		pFnAddLevelDLCDelegate = (UFunction*) UObject::GObjObjects()->Data[ 52782 ];

	USanctumMainMenu_execAddLevelDLCDelegate_Parms AddLevelDLCDelegate_Parms;

	this->ProcessEvent ( pFnAddLevelDLCDelegate, &AddLevelDLCDelegate_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.PopulateLevelList
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              listMC                         ( CPF_Parm )
// struct FString                 Type                           ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::PopulateLevelList ( class UGFxObject* listMC, struct FString Type )
{
	static UFunction* pFnPopulateLevelList = NULL;

	if ( ! pFnPopulateLevelList )
		pFnPopulateLevelList = (UFunction*) UObject::GObjObjects()->Data[ 52775 ];

	USanctumMainMenu_execPopulateLevelList_Parms PopulateLevelList_Parms;
	PopulateLevelList_Parms.listMC = listMC;
	memcpy ( &PopulateLevelList_Parms.Type, &Type, 0xC );

	this->ProcessEvent ( pFnPopulateLevelList, &PopulateLevelList_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.setLevelUnlocked
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::setLevelUnlocked ( )
{
	static UFunction* pFnsetLevelUnlocked = NULL;

	if ( ! pFnsetLevelUnlocked )
		pFnsetLevelUnlocked = (UFunction*) UObject::GObjObjects()->Data[ 52774 ];

	USanctumMainMenu_execsetLevelUnlocked_Parms setLevelUnlocked_Parms;

	this->ProcessEvent ( pFnsetLevelUnlocked, &setLevelUnlocked_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.ApplyGraphicSettings
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::ApplyGraphicSettings ( )
{
	static UFunction* pFnApplyGraphicSettings = NULL;

	if ( ! pFnApplyGraphicSettings )
		pFnApplyGraphicSettings = (UFunction*) UObject::GObjObjects()->Data[ 52773 ];

	USanctumMainMenu_execApplyGraphicSettings_Parms ApplyGraphicSettings_Parms;

	this->ProcessEvent ( pFnApplyGraphicSettings, &ApplyGraphicSettings_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.loadCheckpoint
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::loadCheckpoint ( )
{
	static UFunction* pFnloadCheckpoint = NULL;

	if ( ! pFnloadCheckpoint )
		pFnloadCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 52772 ];

	USanctumMainMenu_execloadCheckpoint_Parms loadCheckpoint_Parms;

	this->ProcessEvent ( pFnloadCheckpoint, &loadCheckpoint_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.resumeGame
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::resumeGame ( )
{
	static UFunction* pFnresumeGame = NULL;

	if ( ! pFnresumeGame )
		pFnresumeGame = (UFunction*) UObject::GObjObjects()->Data[ 52771 ];

	USanctumMainMenu_execresumeGame_Parms resumeGame_Parms;

	this->ProcessEvent ( pFnresumeGame, &resumeGame_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.PlaySound
// [0x00020002] 
// Parameters infos:
// struct FString                 snd                            ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::PlaySound ( struct FString snd )
{
	static UFunction* pFnPlaySound = NULL;

	if ( ! pFnPlaySound )
		pFnPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 52768 ];

	USanctumMainMenu_execPlaySound_Parms PlaySound_Parms;
	memcpy ( &PlaySound_Parms.snd, &snd, 0xC );

	this->ProcessEvent ( pFnPlaySound, &PlaySound_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.returnCurrentWave
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::returnCurrentWave ( )
{
	static UFunction* pFnreturnCurrentWave = NULL;

	if ( ! pFnreturnCurrentWave )
		pFnreturnCurrentWave = (UFunction*) UObject::GObjObjects()->Data[ 52767 ];

	USanctumMainMenu_execreturnCurrentWave_Parms returnCurrentWave_Parms;

	this->ProcessEvent ( pFnreturnCurrentWave, &returnCurrentWave_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.StartLevel
// [0x00020002] 
// Parameters infos:
// struct FString                 Level                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::StartLevel ( struct FString Level )
{
	static UFunction* pFnStartLevel = NULL;

	if ( ! pFnStartLevel )
		pFnStartLevel = (UFunction*) UObject::GObjObjects()->Data[ 52765 ];

	USanctumMainMenu_execStartLevel_Parms StartLevel_Parms;
	memcpy ( &StartLevel_Parms.Level, &Level, 0xC );

	this->ProcessEvent ( pFnStartLevel, &StartLevel_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.setMode
// [0x00020002] 
// Parameters infos:
// struct FString                 Mode                           ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::setMode ( struct FString Mode )
{
	static UFunction* pFnsetMode = NULL;

	if ( ! pFnsetMode )
		pFnsetMode = (UFunction*) UObject::GObjObjects()->Data[ 52763 ];

	USanctumMainMenu_execsetMode_Parms setMode_Parms;
	memcpy ( &setMode_Parms.Mode, &Mode, 0xC );

	this->ProcessEvent ( pFnsetMode, &setMode_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.Write
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::Write ( struct FString Text )
{
	static UFunction* pFnWrite = NULL;

	if ( ! pFnWrite )
		pFnWrite = (UFunction*) UObject::GObjObjects()->Data[ 52761 ];

	USanctumMainMenu_execWrite_Parms Write_Parms;
	memcpy ( &Write_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnWrite, &Write_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.callShowConnectingToHost
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::callShowConnectingToHost ( )
{
	static UFunction* pFncallShowConnectingToHost = NULL;

	if ( ! pFncallShowConnectingToHost )
		pFncallShowConnectingToHost = (UFunction*) UObject::GObjObjects()->Data[ 52760 ];

	USanctumMainMenu_execcallShowConnectingToHost_Parms callShowConnectingToHost_Parms;

	this->ProcessEvent ( pFncallShowConnectingToHost, &callShowConnectingToHost_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.callOpenPopup
// [0x00020002] 
// Parameters infos:
// struct FString                 frame                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::callOpenPopup ( struct FString frame )
{
	static UFunction* pFncallOpenPopup = NULL;

	if ( ! pFncallOpenPopup )
		pFncallOpenPopup = (UFunction*) UObject::GObjObjects()->Data[ 52758 ];

	USanctumMainMenu_execcallOpenPopup_Parms callOpenPopup_Parms;
	memcpy ( &callOpenPopup_Parms.frame, &frame, 0xC );

	this->ProcessEvent ( pFncallOpenPopup, &callOpenPopup_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.callShowLocalizedPopup
// [0x00020002] 
// Parameters infos:
// struct FString                 localizedText                  ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::callShowLocalizedPopup ( struct FString localizedText )
{
	static UFunction* pFncallShowLocalizedPopup = NULL;

	if ( ! pFncallShowLocalizedPopup )
		pFncallShowLocalizedPopup = (UFunction*) UObject::GObjObjects()->Data[ 52756 ];

	USanctumMainMenu_execcallShowLocalizedPopup_Parms callShowLocalizedPopup_Parms;
	memcpy ( &callShowLocalizedPopup_Parms.localizedText, &localizedText, 0xC );

	this->ProcessEvent ( pFncallShowLocalizedPopup, &callShowLocalizedPopup_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.callShowDisconnectMessage
// [0x00020002] 
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  kicked                         ( CPF_Parm )

void USanctumMainMenu::callShowDisconnectMessage ( struct FString msg, unsigned long kicked )
{
	static UFunction* pFncallShowDisconnectMessage = NULL;

	if ( ! pFncallShowDisconnectMessage )
		pFncallShowDisconnectMessage = (UFunction*) UObject::GObjObjects()->Data[ 52753 ];

	USanctumMainMenu_execcallShowDisconnectMessage_Parms callShowDisconnectMessage_Parms;
	memcpy ( &callShowDisconnectMessage_Parms.msg, &msg, 0xC );
	callShowDisconnectMessage_Parms.kicked = kicked;

	this->ProcessEvent ( pFncallShowDisconnectMessage, &callShowDisconnectMessage_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.getKickMessage
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::getKickMessage ( )
{
	static UFunction* pFngetKickMessage = NULL;

	if ( ! pFngetKickMessage )
		pFngetKickMessage = (UFunction*) UObject::GObjObjects()->Data[ 52750 ];

	USanctumMainMenu_execgetKickMessage_Parms getKickMessage_Parms;

	this->ProcessEvent ( pFngetKickMessage, &getKickMessage_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.switchMap
// [0x00020002] 
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::switchMap ( struct FString URL )
{
	static UFunction* pFnswitchMap = NULL;

	if ( ! pFnswitchMap )
		pFnswitchMap = (UFunction*) UObject::GObjObjects()->Data[ 52747 ];

	USanctumMainMenu_execswitchMap_Parms switchMap_Parms;
	memcpy ( &switchMap_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnswitchMap, &switchMap_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.getDifficulty
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::getDifficulty ( )
{
	static UFunction* pFngetDifficulty = NULL;

	if ( ! pFngetDifficulty )
		pFngetDifficulty = (UFunction*) UObject::GObjObjects()->Data[ 52745 ];

	USanctumMainMenu_execgetDifficulty_Parms getDifficulty_Parms;

	this->ProcessEvent ( pFngetDifficulty, &getDifficulty_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.ShowSteamFriends
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::ShowSteamFriends ( )
{
	static UFunction* pFnShowSteamFriends = NULL;

	if ( ! pFnShowSteamFriends )
		pFnShowSteamFriends = (UFunction*) UObject::GObjObjects()->Data[ 52743 ];

	USanctumMainMenu_execShowSteamFriends_Parms ShowSteamFriends_Parms;

	this->ProcessEvent ( pFnShowSteamFriends, &ShowSteamFriends_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.showAchievements
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::showAchievements ( )
{
	static UFunction* pFnshowAchievements = NULL;

	if ( ! pFnshowAchievements )
		pFnshowAchievements = (UFunction*) UObject::GObjObjects()->Data[ 52742 ];

	USanctumMainMenu_execshowAchievements_Parms showAchievements_Parms;

	this->ProcessEvent ( pFnshowAchievements, &showAchievements_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.showLeaderboard
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::showLeaderboard ( )
{
	static UFunction* pFnshowLeaderboard = NULL;

	if ( ! pFnshowLeaderboard )
		pFnshowLeaderboard = (UFunction*) UObject::GObjObjects()->Data[ 52741 ];

	USanctumMainMenu_execshowLeaderboard_Parms showLeaderboard_Parms;

	this->ProcessEvent ( pFnshowLeaderboard, &showLeaderboard_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.CreditRollCalled
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::CreditRollCalled ( )
{
	static UFunction* pFnCreditRollCalled = NULL;

	if ( ! pFnCreditRollCalled )
		pFnCreditRollCalled = (UFunction*) UObject::GObjObjects()->Data[ 52740 ];

	USanctumMainMenu_execCreditRollCalled_Parms CreditRollCalled_Parms;

	this->ProcessEvent ( pFnCreditRollCalled, &CreditRollCalled_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.CreditsWin
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::CreditsWin ( )
{
	static UFunction* pFnCreditsWin = NULL;

	if ( ! pFnCreditsWin )
		pFnCreditsWin = (UFunction*) UObject::GObjObjects()->Data[ 52739 ];

	USanctumMainMenu_execCreditsWin_Parms CreditsWin_Parms;

	this->ProcessEvent ( pFnCreditsWin, &CreditsWin_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.callUpdateWebData
// [0x00020002] 
// Parameters infos:
// struct FString                 newsData                       ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::callUpdateWebData ( struct FString newsData )
{
	static UFunction* pFncallUpdateWebData = NULL;

	if ( ! pFncallUpdateWebData )
		pFncallUpdateWebData = (UFunction*) UObject::GObjObjects()->Data[ 52737 ];

	USanctumMainMenu_execcallUpdateWebData_Parms callUpdateWebData_Parms;
	memcpy ( &callUpdateWebData_Parms.newsData, &newsData, 0xC );

	this->ProcessEvent ( pFncallUpdateWebData, &callUpdateWebData_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.PollUpdateData
// [0x00020002] 
// Parameters infos:

void USanctumMainMenu::PollUpdateData ( )
{
	static UFunction* pFnPollUpdateData = NULL;

	if ( ! pFnPollUpdateData )
		pFnPollUpdateData = (UFunction*) UObject::GObjObjects()->Data[ 52736 ];

	USanctumMainMenu_execPollUpdateData_Parms PollUpdateData_Parms;

	this->ProcessEvent ( pFnPollUpdateData, &PollUpdateData_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.openSteamLink
// [0x00020002] 
// Parameters infos:
// struct FString                 callType                       ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::openSteamLink ( struct FString callType )
{
	static UFunction* pFnopenSteamLink = NULL;

	if ( ! pFnopenSteamLink )
		pFnopenSteamLink = (UFunction*) UObject::GObjObjects()->Data[ 52734 ];

	USanctumMainMenu_execopenSteamLink_Parms openSteamLink_Parms;
	memcpy ( &openSteamLink_Parms.callType, &callType, 0xC );

	this->ProcessEvent ( pFnopenSteamLink, &openSteamLink_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.SetCheckpointButton
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              Button                         ( CPF_Parm )

void USanctumMainMenu::SetCheckpointButton ( class UGFxObject* Button )
{
	static UFunction* pFnSetCheckpointButton = NULL;

	if ( ! pFnSetCheckpointButton )
		pFnSetCheckpointButton = (UFunction*) UObject::GObjObjects()->Data[ 52732 ];

	USanctumMainMenu_execSetCheckpointButton_Parms SetCheckpointButton_Parms;
	SetCheckpointButton_Parms.Button = Button;

	this->ProcessEvent ( pFnSetCheckpointButton, &SetCheckpointButton_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.SetLevelNames
// [0x00020002] 
// Parameters infos:
// struct FString                 Mode                           ( CPF_Parm | CPF_NeedCtorLink )

void USanctumMainMenu::SetLevelNames ( struct FString Mode )
{
	static UFunction* pFnSetLevelNames = NULL;

	if ( ! pFnSetLevelNames )
		pFnSetLevelNames = (UFunction*) UObject::GObjObjects()->Data[ 52727 ];

	USanctumMainMenu_execSetLevelNames_Parms SetLevelNames_Parms;
	memcpy ( &SetLevelNames_Parms.Mode, &Mode, 0xC );

	this->ProcessEvent ( pFnSetLevelNames, &SetLevelNames_Parms, NULL );
};

// Function Sanctum.SanctumMainMenu.Init
// [0x00824002] 
// Parameters infos:
// class ULocalPlayer*            LocPlay                        ( CPF_OptionalParm | CPF_Parm )

void USanctumMainMenu::Init ( class ULocalPlayer* LocPlay )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 52724 ];

	USanctumMainMenu_execInit_Parms Init_Parms;
	Init_Parms.LocPlay = LocPlay;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumHUDTeleport.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool USanctumHUDTeleport::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 52180 ];

	USanctumHUDTeleport_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function Sanctum.SanctumHUDTeleport.switchHUD
// [0x00020002] 
// Parameters infos:

void USanctumHUDTeleport::switchHUD ( )
{
	static UFunction* pFnswitchHUD = NULL;

	if ( ! pFnswitchHUD )
		pFnswitchHUD = (UFunction*) UObject::GObjObjects()->Data[ 52177 ];

	USanctumHUDTeleport_execswitchHUD_Parms switchHUD_Parms;

	this->ProcessEvent ( pFnswitchHUD, &switchHUD_Parms, NULL );
};

// Function Sanctum.SanctumHUDTeleport.Visible
// [0x00020002] 
// Parameters infos:
// unsigned long                  hide                           ( CPF_Parm )

void USanctumHUDTeleport::Visible ( unsigned long hide )
{
	static UFunction* pFnVisible = NULL;

	if ( ! pFnVisible )
		pFnVisible = (UFunction*) UObject::GObjObjects()->Data[ 52175 ];

	USanctumHUDTeleport_execVisible_Parms Visible_Parms;
	Visible_Parms.hide = hide;

	this->ProcessEvent ( pFnVisible, &Visible_Parms, NULL );
};

// Function Sanctum.SanctumHUDTeleport.SetUpdateCursorDelegate
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDTeleport::SetUpdateCursorDelegate ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnSetUpdateCursorDelegate = NULL;

	if ( ! pFnSetUpdateCursorDelegate )
		pFnSetUpdateCursorDelegate = (UFunction*) UObject::GObjObjects()->Data[ 52172 ];

	USanctumHUDTeleport_execSetUpdateCursorDelegate_Parms SetUpdateCursorDelegate_Parms;
	memcpy ( &SetUpdateCursorDelegate_Parms.InDelegate, &InDelegate, 0xC );

	this->ProcessEvent ( pFnSetUpdateCursorDelegate, &SetUpdateCursorDelegate_Parms, NULL );
};

// Function Sanctum.SanctumHUDTeleport.UpdateCursor
// [0x00020002] 
// Parameters infos:

void USanctumHUDTeleport::UpdateCursor ( )
{
	static UFunction* pFnUpdateCursor = NULL;

	if ( ! pFnUpdateCursor )
		pFnUpdateCursor = (UFunction*) UObject::GObjObjects()->Data[ 52170 ];

	USanctumHUDTeleport_execUpdateCursor_Parms UpdateCursor_Parms;

	this->ProcessEvent ( pFnUpdateCursor, &UpdateCursor_Parms, NULL );
};

// Function Sanctum.SanctumHUDTeleport.setCursorPosition
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void USanctumHUDTeleport::setCursorPosition ( float X, float Y )
{
	static UFunction* pFnsetCursorPosition = NULL;

	if ( ! pFnsetCursorPosition )
		pFnsetCursorPosition = (UFunction*) UObject::GObjObjects()->Data[ 52167 ];

	USanctumHUDTeleport_execsetCursorPosition_Parms setCursorPosition_Parms;
	setCursorPosition_Parms.X = X;
	setCursorPosition_Parms.Y = Y;

	this->ProcessEvent ( pFnsetCursorPosition, &setCursorPosition_Parms, NULL );
};

// Function Sanctum.SanctumHUDTeleport.Init
// [0x00024002] 
// Parameters infos:
// class ULocalPlayer*            LocPlay                        ( CPF_OptionalParm | CPF_Parm )

void USanctumHUDTeleport::Init ( class ULocalPlayer* LocPlay )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 52164 ];

	USanctumHUDTeleport_execInit_Parms Init_Parms;
	Init_Parms.LocPlay = LocPlay;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumHUDTeleport.TeleportCursorUpdated
// [0x00120000] 
// Parameters infos:

void USanctumHUDTeleport::TeleportCursorUpdated ( )
{
	static UFunction* pFnTeleportCursorUpdated = NULL;

	if ( ! pFnTeleportCursorUpdated )
		pFnTeleportCursorUpdated = (UFunction*) UObject::GObjObjects()->Data[ 52160 ];

	USanctumHUDTeleport_execTeleportCursorUpdated_Parms TeleportCursorUpdated_Parms;

	this->ProcessEvent ( pFnTeleportCursorUpdated, &TeleportCursorUpdated_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxTutorial.callSetEntry
// [0x00020002] 
// Parameters infos:
// struct FString                 entrypoint                     ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxTutorial::callSetEntry ( struct FString entrypoint )
{
	static UFunction* pFncallSetEntry = NULL;

	if ( ! pFncallSetEntry )
		pFncallSetEntry = (UFunction*) UObject::GObjObjects()->Data[ 52155 ];

	USanctumHUDGFxTutorial_execcallSetEntry_Parms callSetEntry_Parms;
	memcpy ( &callSetEntry_Parms.entrypoint, &entrypoint, 0xC );

	this->ProcessEvent ( pFncallSetEntry, &callSetEntry_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxTutorial.callEnterPopup
// [0x00020002] 
// Parameters infos:
// struct FString                 header                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 body                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Footer                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ExitCommand                    ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  clickable                      ( CPF_Parm )

void USanctumHUDGFxTutorial::callEnterPopup ( struct FString header, struct FString body, struct FString Footer, struct FString ExitCommand, unsigned long clickable )
{
	static UFunction* pFncallEnterPopup = NULL;

	if ( ! pFncallEnterPopup )
		pFncallEnterPopup = (UFunction*) UObject::GObjObjects()->Data[ 52149 ];

	USanctumHUDGFxTutorial_execcallEnterPopup_Parms callEnterPopup_Parms;
	memcpy ( &callEnterPopup_Parms.header, &header, 0xC );
	memcpy ( &callEnterPopup_Parms.body, &body, 0xC );
	memcpy ( &callEnterPopup_Parms.Footer, &Footer, 0xC );
	memcpy ( &callEnterPopup_Parms.ExitCommand, &ExitCommand, 0xC );
	callEnterPopup_Parms.clickable = clickable;

	this->ProcessEvent ( pFncallEnterPopup, &callEnterPopup_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxTutorial.Write
// [0x00020000] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxTutorial::Write ( struct FString Text )
{
	static UFunction* pFnWrite = NULL;

	if ( ! pFnWrite )
		pFnWrite = (UFunction*) UObject::GObjObjects()->Data[ 52147 ];

	USanctumHUDGFxTutorial_execWrite_Parms Write_Parms;
	memcpy ( &Write_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnWrite, &Write_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxTutorial.Start
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  StartPaused                    ( CPF_OptionalParm | CPF_Parm )

bool USanctumHUDGFxTutorial::Start ( unsigned long StartPaused )
{
	static UFunction* pFnStart = NULL;

	if ( ! pFnStart )
		pFnStart = (UFunction*) UObject::GObjObjects()->Data[ 52144 ];

	USanctumHUDGFxTutorial_execStart_Parms Start_Parms;
	Start_Parms.StartPaused = StartPaused;

	this->ProcessEvent ( pFnStart, &Start_Parms, NULL );

	return Start_Parms.ReturnValue;
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool USanctumHUDGFxEquipmentSelection::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 52000 ];

	USanctumHUDGFxEquipmentSelection_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.Write
// [0x00020002] 
// Parameters infos:
// struct FString                 Str                            ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::Write ( struct FString Str )
{
	static UFunction* pFnWrite = NULL;

	if ( ! pFnWrite )
		pFnWrite = (UFunction*) UObject::GObjObjects()->Data[ 51998 ];

	USanctumHUDGFxEquipmentSelection_execWrite_Parms Write_Parms;
	memcpy ( &Write_Parms.Str, &Str, 0xC );

	this->ProcessEvent ( pFnWrite, &Write_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.SetListIndex
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxEquipmentSelection::SetListIndex ( )
{
	static UFunction* pFnSetListIndex = NULL;

	if ( ! pFnSetListIndex )
		pFnSetListIndex = (UFunction*) UObject::GObjObjects()->Data[ 51997 ];

	USanctumHUDGFxEquipmentSelection_execSetListIndex_Parms SetListIndex_Parms;

	this->ProcessEvent ( pFnSetListIndex, &SetListIndex_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.SetFocus
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxEquipmentSelection::SetFocus ( )
{
	static UFunction* pFnSetFocus = NULL;

	if ( ! pFnSetFocus )
		pFnSetFocus = (UFunction*) UObject::GObjObjects()->Data[ 51996 ];

	USanctumHUDGFxEquipmentSelection_execSetFocus_Parms SetFocus_Parms;

	this->ProcessEvent ( pFnSetFocus, &SetFocus_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.UpdateWiki
// [0x00020002] 
// Parameters infos:
// int                            Idx                            ( CPF_Parm )
// struct FString                 Type                           ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::UpdateWiki ( int Idx, struct FString Type )
{
	static UFunction* pFnUpdateWiki = NULL;

	if ( ! pFnUpdateWiki )
		pFnUpdateWiki = (UFunction*) UObject::GObjObjects()->Data[ 51977 ];

	USanctumHUDGFxEquipmentSelection_execUpdateWiki_Parms UpdateWiki_Parms;
	UpdateWiki_Parms.Idx = Idx;
	memcpy ( &UpdateWiki_Parms.Type, &Type, 0xC );

	this->ProcessEvent ( pFnUpdateWiki, &UpdateWiki_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.CreateWikiObject
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxEquipmentSelection::CreateWikiObject ( )
{
	static UFunction* pFnCreateWikiObject = NULL;

	if ( ! pFnCreateWikiObject )
		pFnCreateWikiObject = (UFunction*) UObject::GObjObjects()->Data[ 51974 ];

	USanctumHUDGFxEquipmentSelection_execCreateWikiObject_Parms CreateWikiObject_Parms;

	this->ProcessEvent ( pFnCreateWikiObject, &CreateWikiObject_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.SetHitArea
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              btn                            ( CPF_Parm )
// int                            numElements                    ( CPF_Parm )

void USanctumHUDGFxEquipmentSelection::SetHitArea ( class UGFxObject* btn, int numElements )
{
	static UFunction* pFnSetHitArea = NULL;

	if ( ! pFnSetHitArea )
		pFnSetHitArea = (UFunction*) UObject::GObjObjects()->Data[ 51970 ];

	USanctumHUDGFxEquipmentSelection_execSetHitArea_Parms SetHitArea_Parms;
	SetHitArea_Parms.btn = btn;
	SetHitArea_Parms.numElements = numElements;

	this->ProcessEvent ( pFnSetHitArea, &SetHitArea_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.ShowSelectedWeapons
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxEquipmentSelection::ShowSelectedWeapons ( )
{
	static UFunction* pFnShowSelectedWeapons = NULL;

	if ( ! pFnShowSelectedWeapons )
		pFnShowSelectedWeapons = (UFunction*) UObject::GObjObjects()->Data[ 51968 ];

	USanctumHUDGFxEquipmentSelection_execShowSelectedWeapons_Parms ShowSelectedWeapons_Parms;

	this->ProcessEvent ( pFnShowSelectedWeapons, &ShowSelectedWeapons_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.ShowSelectedTowers
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxEquipmentSelection::ShowSelectedTowers ( )
{
	static UFunction* pFnShowSelectedTowers = NULL;

	if ( ! pFnShowSelectedTowers )
		pFnShowSelectedTowers = (UFunction*) UObject::GObjObjects()->Data[ 51960 ];

	USanctumHUDGFxEquipmentSelection_execShowSelectedTowers_Parms ShowSelectedTowers_Parms;

	this->ProcessEvent ( pFnShowSelectedTowers, &ShowSelectedTowers_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.OnCustomizeRollOut
// [0x00020002] 
// Parameters infos:
// struct FEventData              Event                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::OnCustomizeRollOut ( struct FEventData Event )
{
	static UFunction* pFnOnCustomizeRollOut = NULL;

	if ( ! pFnOnCustomizeRollOut )
		pFnOnCustomizeRollOut = (UFunction*) UObject::GObjObjects()->Data[ 51958 ];

	USanctumHUDGFxEquipmentSelection_execOnCustomizeRollOut_Parms OnCustomizeRollOut_Parms;
	memcpy ( &OnCustomizeRollOut_Parms.Event, &Event, 0x30 );

	this->ProcessEvent ( pFnOnCustomizeRollOut, &OnCustomizeRollOut_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.HighlightLabels
// [0x00024002] 
// Parameters infos:
// struct FString                 markedList                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::HighlightLabels ( struct FString markedList )
{
	static UFunction* pFnHighlightLabels = NULL;

	if ( ! pFnHighlightLabels )
		pFnHighlightLabels = (UFunction*) UObject::GObjObjects()->Data[ 51955 ];

	USanctumHUDGFxEquipmentSelection_execHighlightLabels_Parms HighlightLabels_Parms;
	memcpy ( &HighlightLabels_Parms.markedList, &markedList, 0xC );

	this->ProcessEvent ( pFnHighlightLabels, &HighlightLabels_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.OnCustomizeRollOver
// [0x00820002] 
// Parameters infos:
// struct FEventData              Event                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::OnCustomizeRollOver ( struct FEventData Event )
{
	static UFunction* pFnOnCustomizeRollOver = NULL;

	if ( ! pFnOnCustomizeRollOver )
		pFnOnCustomizeRollOver = (UFunction*) UObject::GObjObjects()->Data[ 51950 ];

	USanctumHUDGFxEquipmentSelection_execOnCustomizeRollOver_Parms OnCustomizeRollOver_Parms;
	memcpy ( &OnCustomizeRollOver_Parms.Event, &Event, 0x30 );

	this->ProcessEvent ( pFnOnCustomizeRollOver, &OnCustomizeRollOver_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.CancelCustomize
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxEquipmentSelection::CancelCustomize ( )
{
	static UFunction* pFnCancelCustomize = NULL;

	if ( ! pFnCancelCustomize )
		pFnCancelCustomize = (UFunction*) UObject::GObjObjects()->Data[ 51949 ];

	USanctumHUDGFxEquipmentSelection_execCancelCustomize_Parms CancelCustomize_Parms;

	this->ProcessEvent ( pFnCancelCustomize, &CancelCustomize_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.OnCustomizeClicked
// [0x00020002] 
// Parameters infos:
// struct FEventData              Event                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::OnCustomizeClicked ( struct FEventData Event )
{
	static UFunction* pFnOnCustomizeClicked = NULL;

	if ( ! pFnOnCustomizeClicked )
		pFnOnCustomizeClicked = (UFunction*) UObject::GObjObjects()->Data[ 51947 ];

	USanctumHUDGFxEquipmentSelection_execOnCustomizeClicked_Parms OnCustomizeClicked_Parms;
	memcpy ( &OnCustomizeClicked_Parms.Event, &Event, 0x30 );

	this->ProcessEvent ( pFnOnCustomizeClicked, &OnCustomizeClicked_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.OnSlotClicked
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::OnSlotClicked ( struct FEventData ev )
{
	static UFunction* pFnOnSlotClicked = NULL;

	if ( ! pFnOnSlotClicked )
		pFnOnSlotClicked = (UFunction*) UObject::GObjObjects()->Data[ 51940 ];

	USanctumHUDGFxEquipmentSelection_execOnSlotClicked_Parms OnSlotClicked_Parms;
	memcpy ( &OnSlotClicked_Parms.ev, &ev, 0x30 );

	this->ProcessEvent ( pFnOnSlotClicked, &OnSlotClicked_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.OnSlotOut
// [0x00020002] 
// Parameters infos:
// struct FEventData              Event                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::OnSlotOut ( struct FEventData Event )
{
	static UFunction* pFnOnSlotOut = NULL;

	if ( ! pFnOnSlotOut )
		pFnOnSlotOut = (UFunction*) UObject::GObjObjects()->Data[ 51938 ];

	USanctumHUDGFxEquipmentSelection_execOnSlotOut_Parms OnSlotOut_Parms;
	memcpy ( &OnSlotOut_Parms.Event, &Event, 0x30 );

	this->ProcessEvent ( pFnOnSlotOut, &OnSlotOut_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.OnSlotOver
// [0x00020002] 
// Parameters infos:
// struct FEventData              Event                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::OnSlotOver ( struct FEventData Event )
{
	static UFunction* pFnOnSlotOver = NULL;

	if ( ! pFnOnSlotOver )
		pFnOnSlotOver = (UFunction*) UObject::GObjObjects()->Data[ 51935 ];

	USanctumHUDGFxEquipmentSelection_execOnSlotOver_Parms OnSlotOver_Parms;
	memcpy ( &OnSlotOver_Parms.Event, &Event, 0x30 );

	this->ProcessEvent ( pFnOnSlotOver, &OnSlotOver_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.AttachWeaponSlots
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxEquipmentSelection::AttachWeaponSlots ( )
{
	static UFunction* pFnAttachWeaponSlots = NULL;

	if ( ! pFnAttachWeaponSlots )
		pFnAttachWeaponSlots = (UFunction*) UObject::GObjObjects()->Data[ 51930 ];

	USanctumHUDGFxEquipmentSelection_execAttachWeaponSlots_Parms AttachWeaponSlots_Parms;

	this->ProcessEvent ( pFnAttachWeaponSlots, &AttachWeaponSlots_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.PopupDestroyed
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxEquipmentSelection::PopupDestroyed ( )
{
	static UFunction* pFnPopupDestroyed = NULL;

	if ( ! pFnPopupDestroyed )
		pFnPopupDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 51929 ];

	USanctumHUDGFxEquipmentSelection_execPopupDestroyed_Parms PopupDestroyed_Parms;

	this->ProcessEvent ( pFnPopupDestroyed, &PopupDestroyed_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.CallCancelPopup
// [0x00024002] 
// Parameters infos:
// struct FString                 Data                           ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::CallCancelPopup ( struct FString Data )
{
	static UFunction* pFnCallCancelPopup = NULL;

	if ( ! pFnCallCancelPopup )
		pFnCallCancelPopup = (UFunction*) UObject::GObjObjects()->Data[ 51927 ];

	USanctumHUDGFxEquipmentSelection_execCallCancelPopup_Parms CallCancelPopup_Parms;
	memcpy ( &CallCancelPopup_Parms.Data, &Data, 0xC );

	this->ProcessEvent ( pFnCallCancelPopup, &CallCancelPopup_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.LocalSaveSlotChoice
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxEquipmentSelection::LocalSaveSlotChoice ( )
{
	static UFunction* pFnLocalSaveSlotChoice = NULL;

	if ( ! pFnLocalSaveSlotChoice )
		pFnLocalSaveSlotChoice = (UFunction*) UObject::GObjObjects()->Data[ 51925 ];

	USanctumHUDGFxEquipmentSelection_execLocalSaveSlotChoice_Parms LocalSaveSlotChoice_Parms;

	this->ProcessEvent ( pFnLocalSaveSlotChoice, &LocalSaveSlotChoice_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.SetSelectedTowers
// [0x00020002] 
// Parameters infos:
// class UClass*                  towerHologramClasses           ( CPF_Parm )
// int                            slotNr                         ( CPF_Parm )
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::SetSelectedTowers ( class UClass** towerHologramClasses, int slotNr, struct FString PlayerName )
{
	static UFunction* pFnSetSelectedTowers = NULL;

	if ( ! pFnSetSelectedTowers )
		pFnSetSelectedTowers = (UFunction*) UObject::GObjObjects()->Data[ 51916 ];

	USanctumHUDGFxEquipmentSelection_execSetSelectedTowers_Parms SetSelectedTowers_Parms;
	memcpy ( &SetSelectedTowers_Parms.towerHologramClasses, &towerHologramClasses, 0x20 );
	SetSelectedTowers_Parms.slotNr = slotNr;
	memcpy ( &SetSelectedTowers_Parms.PlayerName, &PlayerName, 0xC );

	this->ProcessEvent ( pFnSetSelectedTowers, &SetSelectedTowers_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.SetSelectedWeapons
// [0x00020002] 
// Parameters infos:
// class UClass*                  weaponClasses                  ( CPF_Parm )
// int                            slotNr                         ( CPF_Parm )
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::SetSelectedWeapons ( class UClass** weaponClasses, int slotNr, struct FString PlayerName )
{
	static UFunction* pFnSetSelectedWeapons = NULL;

	if ( ! pFnSetSelectedWeapons )
		pFnSetSelectedWeapons = (UFunction*) UObject::GObjObjects()->Data[ 51906 ];

	USanctumHUDGFxEquipmentSelection_execSetSelectedWeapons_Parms SetSelectedWeapons_Parms;
	memcpy ( &SetSelectedWeapons_Parms.weaponClasses, &weaponClasses, 0xC );
	SetSelectedWeapons_Parms.slotNr = slotNr;
	memcpy ( &SetSelectedWeapons_Parms.PlayerName, &PlayerName, 0xC );

	this->ProcessEvent ( pFnSetSelectedWeapons, &SetSelectedWeapons_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.CallSetTextColor
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              mc                             ( CPF_Parm )
// int                            R                              ( CPF_Parm )
// int                            G                              ( CPF_Parm )
// int                            B                              ( CPF_Parm )

void USanctumHUDGFxEquipmentSelection::CallSetTextColor ( class UGFxObject* mc, int R, int G, int B )
{
	static UFunction* pFnCallSetTextColor = NULL;

	if ( ! pFnCallSetTextColor )
		pFnCallSetTextColor = (UFunction*) UObject::GObjObjects()->Data[ 51901 ];

	USanctumHUDGFxEquipmentSelection_execCallSetTextColor_Parms CallSetTextColor_Parms;
	CallSetTextColor_Parms.mc = mc;
	CallSetTextColor_Parms.R = R;
	CallSetTextColor_Parms.G = G;
	CallSetTextColor_Parms.B = B;

	this->ProcessEvent ( pFnCallSetTextColor, &CallSetTextColor_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.SetTextColor
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              mc                             ( CPF_Parm )
// struct FColor                  playerColor                    ( CPF_Parm )

void USanctumHUDGFxEquipmentSelection::SetTextColor ( class UGFxObject* mc, struct FColor playerColor )
{
	static UFunction* pFnSetTextColor = NULL;

	if ( ! pFnSetTextColor )
		pFnSetTextColor = (UFunction*) UObject::GObjObjects()->Data[ 51895 ];

	USanctumHUDGFxEquipmentSelection_execSetTextColor_Parms SetTextColor_Parms;
	SetTextColor_Parms.mc = mc;
	memcpy ( &SetTextColor_Parms.playerColor, &playerColor, 0x4 );

	this->ProcessEvent ( pFnSetTextColor, &SetTextColor_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.RemoveFromOthers
// [0x00020002] 
// Parameters infos:
// int                            slotNr                         ( CPF_Parm )

void USanctumHUDGFxEquipmentSelection::RemoveFromOthers ( int slotNr )
{
	static UFunction* pFnRemoveFromOthers = NULL;

	if ( ! pFnRemoveFromOthers )
		pFnRemoveFromOthers = (UFunction*) UObject::GObjObjects()->Data[ 51887 ];

	USanctumHUDGFxEquipmentSelection_execRemoveFromOthers_Parms RemoveFromOthers_Parms;
	RemoveFromOthers_Parms.slotNr = slotNr;

	this->ProcessEvent ( pFnRemoveFromOthers, &RemoveFromOthers_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.AddToBufferedTowers
// [0x00820002] 
// Parameters infos:
// class UClass*                  towerHologramClasses           ( CPF_Parm )
// int                            slotNr                         ( CPF_Parm )
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::AddToBufferedTowers ( class UClass** towerHologramClasses, int slotNr, struct FString PlayerName )
{
	static UFunction* pFnAddToBufferedTowers = NULL;

	if ( ! pFnAddToBufferedTowers )
		pFnAddToBufferedTowers = (UFunction*) UObject::GObjObjects()->Data[ 51881 ];

	USanctumHUDGFxEquipmentSelection_execAddToBufferedTowers_Parms AddToBufferedTowers_Parms;
	memcpy ( &AddToBufferedTowers_Parms.towerHologramClasses, &towerHologramClasses, 0x20 );
	AddToBufferedTowers_Parms.slotNr = slotNr;
	memcpy ( &AddToBufferedTowers_Parms.PlayerName, &PlayerName, 0xC );

	this->ProcessEvent ( pFnAddToBufferedTowers, &AddToBufferedTowers_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.AddToBufferedWeapons
// [0x00820002] 
// Parameters infos:
// class UClass*                  weaponClasses                  ( CPF_Parm )
// int                            slotNr                         ( CPF_Parm )
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::AddToBufferedWeapons ( class UClass** weaponClasses, int slotNr, struct FString PlayerName )
{
	static UFunction* pFnAddToBufferedWeapons = NULL;

	if ( ! pFnAddToBufferedWeapons )
		pFnAddToBufferedWeapons = (UFunction*) UObject::GObjObjects()->Data[ 51875 ];

	USanctumHUDGFxEquipmentSelection_execAddToBufferedWeapons_Parms AddToBufferedWeapons_Parms;
	memcpy ( &AddToBufferedWeapons_Parms.weaponClasses, &weaponClasses, 0xC );
	AddToBufferedWeapons_Parms.slotNr = slotNr;
	memcpy ( &AddToBufferedWeapons_Parms.PlayerName, &PlayerName, 0xC );

	this->ProcessEvent ( pFnAddToBufferedWeapons, &AddToBufferedWeapons_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.UpdateSelectedWeaponsAndTowers
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxEquipmentSelection::UpdateSelectedWeaponsAndTowers ( )
{
	static UFunction* pFnUpdateSelectedWeaponsAndTowers = NULL;

	if ( ! pFnUpdateSelectedWeaponsAndTowers )
		pFnUpdateSelectedWeaponsAndTowers = (UFunction*) UObject::GObjObjects()->Data[ 51870 ];

	USanctumHUDGFxEquipmentSelection_execUpdateSelectedWeaponsAndTowers_Parms UpdateSelectedWeaponsAndTowers_Parms;

	this->ProcessEvent ( pFnUpdateSelectedWeaponsAndTowers, &UpdateSelectedWeaponsAndTowers_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.CloseEQPopup
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::CloseEQPopup ( struct FEventData ev )
{
	static UFunction* pFnCloseEQPopup = NULL;

	if ( ! pFnCloseEQPopup )
		pFnCloseEQPopup = (UFunction*) UObject::GObjObjects()->Data[ 51868 ];

	USanctumHUDGFxEquipmentSelection_execCloseEQPopup_Parms CloseEQPopup_Parms;
	memcpy ( &CloseEQPopup_Parms.ev, &ev, 0x30 );

	this->ProcessEvent ( pFnCloseEQPopup, &CloseEQPopup_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.UpdateListWithNewPurchase
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxEquipmentSelection::UpdateListWithNewPurchase ( )
{
	static UFunction* pFnUpdateListWithNewPurchase = NULL;

	if ( ! pFnUpdateListWithNewPurchase )
		pFnUpdateListWithNewPurchase = (UFunction*) UObject::GObjObjects()->Data[ 51860 ];

	USanctumHUDGFxEquipmentSelection_execUpdateListWithNewPurchase_Parms UpdateListWithNewPurchase_Parms;

	this->ProcessEvent ( pFnUpdateListWithNewPurchase, &UpdateListWithNewPurchase_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.PurchasedDLC
// [0x00020002] 
// Parameters infos:
// int                            AppID                          ( CPF_Parm )

void USanctumHUDGFxEquipmentSelection::PurchasedDLC ( int AppID )
{
	static UFunction* pFnPurchasedDLC = NULL;

	if ( ! pFnPurchasedDLC )
		pFnPurchasedDLC = (UFunction*) UObject::GObjObjects()->Data[ 51856 ];

	USanctumHUDGFxEquipmentSelection_execPurchasedDLC_Parms PurchasedDLC_Parms;
	PurchasedDLC_Parms.AppID = AppID;

	this->ProcessEvent ( pFnPurchasedDLC, &PurchasedDLC_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.GotoDLCWebsite
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::GotoDLCWebsite ( struct FEventData ev )
{
	static UFunction* pFnGotoDLCWebsite = NULL;

	if ( ! pFnGotoDLCWebsite )
		pFnGotoDLCWebsite = (UFunction*) UObject::GObjObjects()->Data[ 51854 ];

	USanctumHUDGFxEquipmentSelection_execGotoDLCWebsite_Parms GotoDLCWebsite_Parms;
	memcpy ( &GotoDLCWebsite_Parms.ev, &ev, 0x30 );

	this->ProcessEvent ( pFnGotoDLCWebsite, &GotoDLCWebsite_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.DisableEQAccept
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< class UGFxObject* >    Slots                          ( CPF_Parm | CPF_NeedCtorLink )

bool USanctumHUDGFxEquipmentSelection::DisableEQAccept ( TArray< class UGFxObject* > Slots )
{
	static UFunction* pFnDisableEQAccept = NULL;

	if ( ! pFnDisableEQAccept )
		pFnDisableEQAccept = (UFunction*) UObject::GObjObjects()->Data[ 51849 ];

	USanctumHUDGFxEquipmentSelection_execDisableEQAccept_Parms DisableEQAccept_Parms;
	memcpy ( &DisableEQAccept_Parms.Slots, &Slots, 0xC );

	this->ProcessEvent ( pFnDisableEQAccept, &DisableEQAccept_Parms, NULL );

	return DisableEQAccept_Parms.ReturnValue;
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.AttachTowerSlots
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxEquipmentSelection::AttachTowerSlots ( )
{
	static UFunction* pFnAttachTowerSlots = NULL;

	if ( ! pFnAttachTowerSlots )
		pFnAttachTowerSlots = (UFunction*) UObject::GObjObjects()->Data[ 51837 ];

	USanctumHUDGFxEquipmentSelection_execAttachTowerSlots_Parms AttachTowerSlots_Parms;

	this->ProcessEvent ( pFnAttachTowerSlots, &AttachTowerSlots_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.OnListItemPress
// [0x00020002] 
// Parameters infos:
// struct FEventData              Event                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::OnListItemPress ( struct FEventData Event )
{
	static UFunction* pFnOnListItemPress = NULL;

	if ( ! pFnOnListItemPress )
		pFnOnListItemPress = (UFunction*) UObject::GObjObjects()->Data[ 51833 ];

	USanctumHUDGFxEquipmentSelection_execOnListItemPress_Parms OnListItemPress_Parms;
	memcpy ( &OnListItemPress_Parms.Event, &Event, 0x30 );

	this->ProcessEvent ( pFnOnListItemPress, &OnListItemPress_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.GetRendererAt
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxObject*              listMC                         ( CPF_Parm )
// int                            SelectedIndex                  ( CPF_Parm )

class UGFxObject* USanctumHUDGFxEquipmentSelection::GetRendererAt ( class UGFxObject* listMC, int SelectedIndex )
{
	static UFunction* pFnGetRendererAt = NULL;

	if ( ! pFnGetRendererAt )
		pFnGetRendererAt = (UFunction*) UObject::GObjObjects()->Data[ 51829 ];

	USanctumHUDGFxEquipmentSelection_execGetRendererAt_Parms GetRendererAt_Parms;
	GetRendererAt_Parms.listMC = listMC;
	GetRendererAt_Parms.SelectedIndex = SelectedIndex;

	this->ProcessEvent ( pFnGetRendererAt, &GetRendererAt_Parms, NULL );

	return GetRendererAt_Parms.ReturnValue;
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.OnListItemRollOver
// [0x00020002] 
// Parameters infos:
// struct FEventData              Event                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::OnListItemRollOver ( struct FEventData Event )
{
	static UFunction* pFnOnListItemRollOver = NULL;

	if ( ! pFnOnListItemRollOver )
		pFnOnListItemRollOver = (UFunction*) UObject::GObjObjects()->Data[ 51825 ];

	USanctumHUDGFxEquipmentSelection_execOnListItemRollOver_Parms OnListItemRollOver_Parms;
	memcpy ( &OnListItemRollOver_Parms.Event, &Event, 0x30 );

	this->ProcessEvent ( pFnOnListItemRollOver, &OnListItemRollOver_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.OnListItemClick
// [0x00020002] 
// Parameters infos:
// struct FEventData              Event                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::OnListItemClick ( struct FEventData Event )
{
	static UFunction* pFnOnListItemClick = NULL;

	if ( ! pFnOnListItemClick )
		pFnOnListItemClick = (UFunction*) UObject::GObjObjects()->Data[ 51819 ];

	USanctumHUDGFxEquipmentSelection_execOnListItemClick_Parms OnListItemClick_Parms;
	memcpy ( &OnListItemClick_Parms.Event, &Event, 0x30 );

	this->ProcessEvent ( pFnOnListItemClick, &OnListItemClick_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.HasBlockChosen
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumHUDGFxEquipmentSelection::HasBlockChosen ( )
{
	static UFunction* pFnHasBlockChosen = NULL;

	if ( ! pFnHasBlockChosen )
		pFnHasBlockChosen = (UFunction*) UObject::GObjObjects()->Data[ 51816 ];

	USanctumHUDGFxEquipmentSelection_execHasBlockChosen_Parms HasBlockChosen_Parms;

	this->ProcessEvent ( pFnHasBlockChosen, &HasBlockChosen_Parms, NULL );

	return HasBlockChosen_Parms.ReturnValue;
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.FilledAllSlots
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumHUDGFxEquipmentSelection::FilledAllSlots ( )
{
	static UFunction* pFnFilledAllSlots = NULL;

	if ( ! pFnFilledAllSlots )
		pFnFilledAllSlots = (UFunction*) UObject::GObjObjects()->Data[ 51813 ];

	USanctumHUDGFxEquipmentSelection_execFilledAllSlots_Parms FilledAllSlots_Parms;

	this->ProcessEvent ( pFnFilledAllSlots, &FilledAllSlots_Parms, NULL );

	return FilledAllSlots_Parms.ReturnValue;
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.StartGame
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxEquipmentSelection::StartGame ( )
{
	static UFunction* pFnStartGame = NULL;

	if ( ! pFnStartGame )
		pFnStartGame = (UFunction*) UObject::GObjObjects()->Data[ 51806 ];

	USanctumHUDGFxEquipmentSelection_execStartGame_Parms StartGame_Parms;

	this->ProcessEvent ( pFnStartGame, &StartGame_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.GiveListFocus
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxEquipmentSelection::GiveListFocus ( )
{
	static UFunction* pFnGiveListFocus = NULL;

	if ( ! pFnGiveListFocus )
		pFnGiveListFocus = (UFunction*) UObject::GObjObjects()->Data[ 51805 ];

	USanctumHUDGFxEquipmentSelection_execGiveListFocus_Parms GiveListFocus_Parms;

	this->ProcessEvent ( pFnGiveListFocus, &GiveListFocus_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.OnEquipOut
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::OnEquipOut ( struct FEventData ev )
{
	static UFunction* pFnOnEquipOut = NULL;

	if ( ! pFnOnEquipOut )
		pFnOnEquipOut = (UFunction*) UObject::GObjObjects()->Data[ 51803 ];

	USanctumHUDGFxEquipmentSelection_execOnEquipOut_Parms OnEquipOut_Parms;
	memcpy ( &OnEquipOut_Parms.ev, &ev, 0x30 );

	this->ProcessEvent ( pFnOnEquipOut, &OnEquipOut_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.OnEquipOver
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::OnEquipOver ( struct FEventData ev )
{
	static UFunction* pFnOnEquipOver = NULL;

	if ( ! pFnOnEquipOver )
		pFnOnEquipOver = (UFunction*) UObject::GObjObjects()->Data[ 51801 ];

	USanctumHUDGFxEquipmentSelection_execOnEquipOver_Parms OnEquipOver_Parms;
	memcpy ( &OnEquipOver_Parms.ev, &ev, 0x30 );

	this->ProcessEvent ( pFnOnEquipOver, &OnEquipOver_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.HasServerStarted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumHUDGFxEquipmentSelection::HasServerStarted ( )
{
	static UFunction* pFnHasServerStarted = NULL;

	if ( ! pFnHasServerStarted )
		pFnHasServerStarted = (UFunction*) UObject::GObjObjects()->Data[ 51798 ];

	USanctumHUDGFxEquipmentSelection_execHasServerStarted_Parms HasServerStarted_Parms;

	this->ProcessEvent ( pFnHasServerStarted, &HasServerStarted_Parms, NULL );

	return HasServerStarted_Parms.ReturnValue;
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.OnEquipPressed
// [0x00020002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::OnEquipPressed ( struct FEventData ev )
{
	static UFunction* pFnOnEquipPressed = NULL;

	if ( ! pFnOnEquipPressed )
		pFnOnEquipPressed = (UFunction*) UObject::GObjObjects()->Data[ 51795 ];

	USanctumHUDGFxEquipmentSelection_execOnEquipPressed_Parms OnEquipPressed_Parms;
	memcpy ( &OnEquipPressed_Parms.ev, &ev, 0x30 );

	this->ProcessEvent ( pFnOnEquipPressed, &OnEquipPressed_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.ExitToMain
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxEquipmentSelection::ExitToMain ( )
{
	static UFunction* pFnExitToMain = NULL;

	if ( ! pFnExitToMain )
		pFnExitToMain = (UFunction*) UObject::GObjObjects()->Data[ 51794 ];

	USanctumHUDGFxEquipmentSelection_execExitToMain_Parms ExitToMain_Parms;

	this->ProcessEvent ( pFnExitToMain, &ExitToMain_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.CallShowPopup
// [0x00020002] 
// Parameters infos:
// struct FString                 popupFrame                     ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::CallShowPopup ( struct FString popupFrame )
{
	static UFunction* pFnCallShowPopup = NULL;

	if ( ! pFnCallShowPopup )
		pFnCallShowPopup = (UFunction*) UObject::GObjObjects()->Data[ 51792 ];

	USanctumHUDGFxEquipmentSelection_execCallShowPopup_Parms CallShowPopup_Parms;
	memcpy ( &CallShowPopup_Parms.popupFrame, &popupFrame, 0xC );

	this->ProcessEvent ( pFnCallShowPopup, &CallShowPopup_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.PopulateWeaponList
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              List                           ( CPF_Parm )

void USanctumHUDGFxEquipmentSelection::PopulateWeaponList ( class UGFxObject* List )
{
	static UFunction* pFnPopulateWeaponList = NULL;

	if ( ! pFnPopulateWeaponList )
		pFnPopulateWeaponList = (UFunction*) UObject::GObjObjects()->Data[ 51783 ];

	USanctumHUDGFxEquipmentSelection_execPopulateWeaponList_Parms PopulateWeaponList_Parms;
	PopulateWeaponList_Parms.List = List;

	this->ProcessEvent ( pFnPopulateWeaponList, &PopulateWeaponList_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.EntryChosen
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 entryLabel                     ( CPF_Parm | CPF_NeedCtorLink )

bool USanctumHUDGFxEquipmentSelection::EntryChosen ( struct FString entryLabel )
{
	static UFunction* pFnEntryChosen = NULL;

	if ( ! pFnEntryChosen )
		pFnEntryChosen = (UFunction*) UObject::GObjObjects()->Data[ 51779 ];

	USanctumHUDGFxEquipmentSelection_execEntryChosen_Parms EntryChosen_Parms;
	memcpy ( &EntryChosen_Parms.entryLabel, &entryLabel, 0xC );

	this->ProcessEvent ( pFnEntryChosen, &EntryChosen_Parms, NULL );

	return EntryChosen_Parms.ReturnValue;
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.UpdateWeaponListProvider
// [0x00024002] 
// Parameters infos:
// class UGFxObject*              selectedRenderer               ( CPF_OptionalParm | CPF_Parm )

void USanctumHUDGFxEquipmentSelection::UpdateWeaponListProvider ( class UGFxObject* selectedRenderer )
{
	static UFunction* pFnUpdateWeaponListProvider = NULL;

	if ( ! pFnUpdateWeaponListProvider )
		pFnUpdateWeaponListProvider = (UFunction*) UObject::GObjObjects()->Data[ 51771 ];

	USanctumHUDGFxEquipmentSelection_execUpdateWeaponListProvider_Parms UpdateWeaponListProvider_Parms;
	UpdateWeaponListProvider_Parms.selectedRenderer = selectedRenderer;

	this->ProcessEvent ( pFnUpdateWeaponListProvider, &UpdateWeaponListProvider_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.SetDefaultEquipment
// [0x00024002] 
// Parameters infos:
// struct FEventData              ev                             ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::SetDefaultEquipment ( struct FEventData ev )
{
	static UFunction* pFnSetDefaultEquipment = NULL;

	if ( ! pFnSetDefaultEquipment )
		pFnSetDefaultEquipment = (UFunction*) UObject::GObjObjects()->Data[ 51767 ];

	USanctumHUDGFxEquipmentSelection_execSetDefaultEquipment_Parms SetDefaultEquipment_Parms;
	memcpy ( &SetDefaultEquipment_Parms.ev, &ev, 0x30 );

	this->ProcessEvent ( pFnSetDefaultEquipment, &SetDefaultEquipment_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.UpdateTowerListProvider
// [0x00024002] 
// Parameters infos:
// class UGFxObject*              selectedRenderer               ( CPF_OptionalParm | CPF_Parm )

void USanctumHUDGFxEquipmentSelection::UpdateTowerListProvider ( class UGFxObject* selectedRenderer )
{
	static UFunction* pFnUpdateTowerListProvider = NULL;

	if ( ! pFnUpdateTowerListProvider )
		pFnUpdateTowerListProvider = (UFunction*) UObject::GObjObjects()->Data[ 51758 ];

	USanctumHUDGFxEquipmentSelection_execUpdateTowerListProvider_Parms UpdateTowerListProvider_Parms;
	UpdateTowerListProvider_Parms.selectedRenderer = selectedRenderer;

	this->ProcessEvent ( pFnUpdateTowerListProvider, &UpdateTowerListProvider_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.PopulateTowerList
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              List                           ( CPF_Parm )

void USanctumHUDGFxEquipmentSelection::PopulateTowerList ( class UGFxObject* List )
{
	static UFunction* pFnPopulateTowerList = NULL;

	if ( ! pFnPopulateTowerList )
		pFnPopulateTowerList = (UFunction*) UObject::GObjObjects()->Data[ 51743 ];

	USanctumHUDGFxEquipmentSelection_execPopulateTowerList_Parms PopulateTowerList_Parms;
	PopulateTowerList_Parms.List = List;

	this->ProcessEvent ( pFnPopulateTowerList, &PopulateTowerList_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.SaveLastEquipment
// [0x00020002] 
// Parameters infos:
// int                            Weapons                        ( CPF_Parm )
// int                            Towers                         ( CPF_Parm )

void USanctumHUDGFxEquipmentSelection::SaveLastEquipment ( int* Weapons, int* Towers )
{
	static UFunction* pFnSaveLastEquipment = NULL;

	if ( ! pFnSaveLastEquipment )
		pFnSaveLastEquipment = (UFunction*) UObject::GObjObjects()->Data[ 51733 ];

	USanctumHUDGFxEquipmentSelection_execSaveLastEquipment_Parms SaveLastEquipment_Parms;
	memcpy ( &SaveLastEquipment_Parms.Weapons, &Weapons, 0xC );
	memcpy ( &SaveLastEquipment_Parms.Towers, &Towers, 0x20 );

	this->ProcessEvent ( pFnSaveLastEquipment, &SaveLastEquipment_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.GetLastEquipmentInts
// [0x00420002] 
// Parameters infos:
// TArray< int >                  weaponsInt                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< int >                  towersInt                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::GetLastEquipmentInts ( TArray< int >* weaponsInt, TArray< int >* towersInt )
{
	static UFunction* pFnGetLastEquipmentInts = NULL;

	if ( ! pFnGetLastEquipmentInts )
		pFnGetLastEquipmentInts = (UFunction*) UObject::GObjObjects()->Data[ 51715 ];

	USanctumHUDGFxEquipmentSelection_execGetLastEquipmentInts_Parms GetLastEquipmentInts_Parms;

	this->ProcessEvent ( pFnGetLastEquipmentInts, &GetLastEquipmentInts_Parms, NULL );

	if ( weaponsInt )
		memcpy ( weaponsInt, &GetLastEquipmentInts_Parms.weaponsInt, 0xC );

	if ( towersInt )
		memcpy ( towersInt, &GetLastEquipmentInts_Parms.towersInt, 0xC );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.PlaySound
// [0x00020002] 
// Parameters infos:
// struct FString                 snd                            ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxEquipmentSelection::PlaySound ( struct FString snd )
{
	static UFunction* pFnPlaySound = NULL;

	if ( ! pFnPlaySound )
		pFnPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 51713 ];

	USanctumHUDGFxEquipmentSelection_execPlaySound_Parms PlaySound_Parms;
	memcpy ( &PlaySound_Parms.snd, &snd, 0xC );

	this->ProcessEvent ( pFnPlaySound, &PlaySound_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.AttachOtherPlayersInfo
// [0x00820002] 
// Parameters infos:

void USanctumHUDGFxEquipmentSelection::AttachOtherPlayersInfo ( )
{
	static UFunction* pFnAttachOtherPlayersInfo = NULL;

	if ( ! pFnAttachOtherPlayersInfo )
		pFnAttachOtherPlayersInfo = (UFunction*) UObject::GObjObjects()->Data[ 51707 ];

	USanctumHUDGFxEquipmentSelection_execAttachOtherPlayersInfo_Parms AttachOtherPlayersInfo_Parms;

	this->ProcessEvent ( pFnAttachOtherPlayersInfo, &AttachOtherPlayersInfo_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.CheckPlayersBuffers
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxEquipmentSelection::CheckPlayersBuffers ( )
{
	static UFunction* pFnCheckPlayersBuffers = NULL;

	if ( ! pFnCheckPlayersBuffers )
		pFnCheckPlayersBuffers = (UFunction*) UObject::GObjObjects()->Data[ 51705 ];

	USanctumHUDGFxEquipmentSelection_execCheckPlayersBuffers_Parms CheckPlayersBuffers_Parms;

	this->ProcessEvent ( pFnCheckPlayersBuffers, &CheckPlayersBuffers_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.CallSetFocus
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              focusTarget                    ( CPF_Parm )

void USanctumHUDGFxEquipmentSelection::CallSetFocus ( class UGFxObject* focusTarget )
{
	static UFunction* pFnCallSetFocus = NULL;

	if ( ! pFnCallSetFocus )
		pFnCallSetFocus = (UFunction*) UObject::GObjObjects()->Data[ 51703 ];

	USanctumHUDGFxEquipmentSelection_execCallSetFocus_Parms CallSetFocus_Parms;
	CallSetFocus_Parms.focusTarget = focusTarget;

	this->ProcessEvent ( pFnCallSetFocus, &CallSetFocus_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.SetArrowPos
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxEquipmentSelection::SetArrowPos ( )
{
	static UFunction* pFnSetArrowPos = NULL;

	if ( ! pFnSetArrowPos )
		pFnSetArrowPos = (UFunction*) UObject::GObjObjects()->Data[ 51696 ];

	USanctumHUDGFxEquipmentSelection_execSetArrowPos_Parms SetArrowPos_Parms;

	this->ProcessEvent ( pFnSetArrowPos, &SetArrowPos_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxEquipmentSelection.Init
// [0x00824002] 
// Parameters infos:
// class ULocalPlayer*            LocPlay                        ( CPF_OptionalParm | CPF_Parm )

void USanctumHUDGFxEquipmentSelection::Init ( class ULocalPlayer* LocPlay )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 51689 ];

	USanctumHUDGFxEquipmentSelection_execInit_Parms Init_Parms;
	Init_Parms.LocPlay = LocPlay;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool USanctumHUDGFxAction::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 50635 ];

	USanctumHUDGFxAction_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function Sanctum.SanctumHUDGFxAction.ExitHUD
// [0x00020000] 
// Parameters infos:
// struct FString                 State                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxAction::ExitHUD ( struct FString State )
{
	static UFunction* pFnExitHUD = NULL;

	if ( ! pFnExitHUD )
		pFnExitHUD = (UFunction*) UObject::GObjObjects()->Data[ 50633 ];

	USanctumHUDGFxAction_execExitHUD_Parms ExitHUD_Parms;
	memcpy ( &ExitHUD_Parms.State, &State, 0xC );

	this->ProcessEvent ( pFnExitHUD, &ExitHUD_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.getLife
// [0x00020002] 
// Parameters infos:
// int                            life                           ( CPF_Parm )

void USanctumHUDGFxAction::getLife ( int life )
{
	static UFunction* pFngetLife = NULL;

	if ( ! pFngetLife )
		pFngetLife = (UFunction*) UObject::GObjObjects()->Data[ 50629 ];

	USanctumHUDGFxAction_execgetLife_Parms getLife_Parms;
	getLife_Parms.life = life;

	this->ProcessEvent ( pFngetLife, &getLife_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.updateEnemies
// [0x00020002] 
// Parameters infos:
// int                            NewValue                       ( CPF_Parm )

void USanctumHUDGFxAction::updateEnemies ( int NewValue )
{
	static UFunction* pFnupdateEnemies = NULL;

	if ( ! pFnupdateEnemies )
		pFnupdateEnemies = (UFunction*) UObject::GObjObjects()->Data[ 50627 ];

	USanctumHUDGFxAction_execupdateEnemies_Parms updateEnemies_Parms;
	updateEnemies_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnupdateEnemies, &updateEnemies_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.updateWave
// [0x00020002] 
// Parameters infos:
// int                            NewValue                       ( CPF_Parm )

void USanctumHUDGFxAction::updateWave ( int NewValue )
{
	static UFunction* pFnupdateWave = NULL;

	if ( ! pFnupdateWave )
		pFnupdateWave = (UFunction*) UObject::GObjObjects()->Data[ 50623 ];

	USanctumHUDGFxAction_execupdateWave_Parms updateWave_Parms;
	updateWave_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnupdateWave, &updateWave_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.getCash
// [0x00020002] 
// Parameters infos:
// int                            NewValue                       ( CPF_Parm )

void USanctumHUDGFxAction::getCash ( int NewValue )
{
	static UFunction* pFngetCash = NULL;

	if ( ! pFngetCash )
		pFngetCash = (UFunction*) UObject::GObjObjects()->Data[ 50621 ];

	USanctumHUDGFxAction_execgetCash_Parms getCash_Parms;
	getCash_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFngetCash, &getCash_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.ShowClassicCashGained
// [0x00024002] 
// Parameters infos:
// unsigned long                  show                           ( CPF_OptionalParm | CPF_Parm )

void USanctumHUDGFxAction::ShowClassicCashGained ( unsigned long show )
{
	static UFunction* pFnShowClassicCashGained = NULL;

	if ( ! pFnShowClassicCashGained )
		pFnShowClassicCashGained = (UFunction*) UObject::GObjObjects()->Data[ 50619 ];

	USanctumHUDGFxAction_execShowClassicCashGained_Parms ShowClassicCashGained_Parms;
	ShowClassicCashGained_Parms.show = show;

	this->ProcessEvent ( pFnShowClassicCashGained, &ShowClassicCashGained_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.Visible
// [0x00020002] 
// Parameters infos:
// unsigned long                  hide                           ( CPF_Parm )

void USanctumHUDGFxAction::Visible ( unsigned long hide )
{
	static UFunction* pFnVisible = NULL;

	if ( ! pFnVisible )
		pFnVisible = (UFunction*) UObject::GObjObjects()->Data[ 50616 ];

	USanctumHUDGFxAction_execVisible_Parms Visible_Parms;
	Visible_Parms.hide = hide;

	this->ProcessEvent ( pFnVisible, &Visible_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.CallExit
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxAction::CallExit ( )
{
	static UFunction* pFnCallExit = NULL;

	if ( ! pFnCallExit )
		pFnCallExit = (UFunction*) UObject::GObjObjects()->Data[ 50615 ];

	USanctumHUDGFxAction_execCallExit_Parms CallExit_Parms;

	this->ProcessEvent ( pFnCallExit, &CallExit_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.switchState
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxAction::switchState ( )
{
	static UFunction* pFnswitchState = NULL;

	if ( ! pFnswitchState )
		pFnswitchState = (UFunction*) UObject::GObjObjects()->Data[ 50612 ];

	USanctumHUDGFxAction_execswitchState_Parms switchState_Parms;

	this->ProcessEvent ( pFnswitchState, &switchState_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.switchHUD
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxAction::switchHUD ( )
{
	static UFunction* pFnswitchHUD = NULL;

	if ( ! pFnswitchHUD )
		pFnswitchHUD = (UFunction*) UObject::GObjObjects()->Data[ 50611 ];

	USanctumHUDGFxAction_execswitchHUD_Parms switchHUD_Parms;

	this->ProcessEvent ( pFnswitchHUD, &switchHUD_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.markerCooldown
// [0x00020002] 
// Parameters infos:
// float                          cooldownPercent                ( CPF_Parm )

void USanctumHUDGFxAction::markerCooldown ( float cooldownPercent )
{
	static UFunction* pFnmarkerCooldown = NULL;

	if ( ! pFnmarkerCooldown )
		pFnmarkerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 50607 ];

	USanctumHUDGFxAction_execmarkerCooldown_Parms markerCooldown_Parms;
	markerCooldown_Parms.cooldownPercent = cooldownPercent;

	this->ProcessEvent ( pFnmarkerCooldown, &markerCooldown_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.AmmoChanged
// [0x00020002] 
// Parameters infos:
// int                            ammoLeft                       ( CPF_Parm )
// class ASanctumWeaponUsingAmmo* Wpn                            ( CPF_Parm )

void USanctumHUDGFxAction::AmmoChanged ( int ammoLeft, class ASanctumWeaponUsingAmmo* Wpn )
{
	static UFunction* pFnAmmoChanged = NULL;

	if ( ! pFnAmmoChanged )
		pFnAmmoChanged = (UFunction*) UObject::GObjObjects()->Data[ 50602 ];

	USanctumHUDGFxAction_execAmmoChanged_Parms AmmoChanged_Parms;
	AmmoChanged_Parms.ammoLeft = ammoLeft;
	AmmoChanged_Parms.Wpn = Wpn;

	this->ProcessEvent ( pFnAmmoChanged, &AmmoChanged_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.REXReload
// [0x00020002] 
// Parameters infos:
// float                          reloadPercent                  ( CPF_Parm )

void USanctumHUDGFxAction::REXReload ( float reloadPercent )
{
	static UFunction* pFnREXReload = NULL;

	if ( ! pFnREXReload )
		pFnREXReload = (UFunction*) UObject::GObjObjects()->Data[ 50598 ];

	USanctumHUDGFxAction_execREXReload_Parms REXReload_Parms;
	REXReload_Parms.reloadPercent = reloadPercent;

	this->ProcessEvent ( pFnREXReload, &REXReload_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.shotgunReload
// [0x00020002] 
// Parameters infos:
// float                          reloadPercent                  ( CPF_Parm )

void USanctumHUDGFxAction::shotgunReload ( float reloadPercent )
{
	static UFunction* pFnshotgunReload = NULL;

	if ( ! pFnshotgunReload )
		pFnshotgunReload = (UFunction*) UObject::GObjObjects()->Data[ 50594 ];

	USanctumHUDGFxAction_execshotgunReload_Parms shotgunReload_Parms;
	shotgunReload_Parms.reloadPercent = reloadPercent;

	this->ProcessEvent ( pFnshotgunReload, &shotgunReload_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.sniperReload
// [0x00020002] 
// Parameters infos:
// float                          reloadPercent                  ( CPF_Parm )

void USanctumHUDGFxAction::sniperReload ( float reloadPercent )
{
	static UFunction* pFnsniperReload = NULL;

	if ( ! pFnsniperReload )
		pFnsniperReload = (UFunction*) UObject::GObjObjects()->Data[ 50590 ];

	USanctumHUDGFxAction_execsniperReload_Parms sniperReload_Parms;
	sniperReload_Parms.reloadPercent = reloadPercent;

	this->ProcessEvent ( pFnsniperReload, &sniperReload_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.assaultOverheat
// [0x00020002] 
// Parameters infos:
// float                          overheatPercent                ( CPF_Parm )

void USanctumHUDGFxAction::assaultOverheat ( float overheatPercent )
{
	static UFunction* pFnassaultOverheat = NULL;

	if ( ! pFnassaultOverheat )
		pFnassaultOverheat = (UFunction*) UObject::GObjObjects()->Data[ 50586 ];

	USanctumHUDGFxAction_execassaultOverheat_Parms assaultOverheat_Parms;
	assaultOverheat_Parms.overheatPercent = overheatPercent;

	this->ProcessEvent ( pFnassaultOverheat, &assaultOverheat_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.weaponClassChanged
// [0x00020002] 
// Parameters infos:
// class UClass*                  NewWeapon                      ( CPF_Parm )

void USanctumHUDGFxAction::weaponClassChanged ( class UClass* NewWeapon )
{
	static UFunction* pFnweaponClassChanged = NULL;

	if ( ! pFnweaponClassChanged )
		pFnweaponClassChanged = (UFunction*) UObject::GObjObjects()->Data[ 50584 ];

	USanctumHUDGFxAction_execweaponClassChanged_Parms weaponClassChanged_Parms;
	weaponClassChanged_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnweaponClassChanged, &weaponClassChanged_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.CallShowWave
// [0x00020002] 
// Parameters infos:
// int                            Max                            ( CPF_Parm )

void USanctumHUDGFxAction::CallShowWave ( int Max )
{
	static UFunction* pFnCallShowWave = NULL;

	if ( ! pFnCallShowWave )
		pFnCallShowWave = (UFunction*) UObject::GObjObjects()->Data[ 50582 ];

	USanctumHUDGFxAction_execCallShowWave_Parms CallShowWave_Parms;
	CallShowWave_Parms.Max = Max;

	this->ProcessEvent ( pFnCallShowWave, &CallShowWave_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.CallChangeWeapon
// [0x00020002] 
// Parameters infos:
// struct FString                 NewWeapon                      ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxAction::CallChangeWeapon ( struct FString NewWeapon )
{
	static UFunction* pFnCallChangeWeapon = NULL;

	if ( ! pFnCallChangeWeapon )
		pFnCallChangeWeapon = (UFunction*) UObject::GObjObjects()->Data[ 50580 ];

	USanctumHUDGFxAction_execCallChangeWeapon_Parms CallChangeWeapon_Parms;
	memcpy ( &CallChangeWeapon_Parms.NewWeapon, &NewWeapon, 0xC );

	this->ProcessEvent ( pFnCallChangeWeapon, &CallChangeWeapon_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.CashGained
// [0x00020002] 
// Parameters infos:
// int                            newCash                        ( CPF_Parm )

void USanctumHUDGFxAction::CashGained ( int newCash )
{
	static UFunction* pFnCashGained = NULL;

	if ( ! pFnCashGained )
		pFnCashGained = (UFunction*) UObject::GObjObjects()->Data[ 50577 ];

	USanctumHUDGFxAction_execCashGained_Parms CashGained_Parms;
	CashGained_Parms.newCash = newCash;

	this->ProcessEvent ( pFnCashGained, &CashGained_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.Write
// [0x00020000] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxAction::Write ( struct FString Text )
{
	static UFunction* pFnWrite = NULL;

	if ( ! pFnWrite )
		pFnWrite = (UFunction*) UObject::GObjObjects()->Data[ 50575 ];

	USanctumHUDGFxAction_execWrite_Parms Write_Parms;
	memcpy ( &Write_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnWrite, &Write_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.callSetHUDPosition
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxAction::callSetHUDPosition ( )
{
	static UFunction* pFncallSetHUDPosition = NULL;

	if ( ! pFncallSetHUDPosition )
		pFncallSetHUDPosition = (UFunction*) UObject::GObjObjects()->Data[ 50574 ];

	USanctumHUDGFxAction_execcallSetHUDPosition_Parms callSetHUDPosition_Parms;

	this->ProcessEvent ( pFncallSetHUDPosition, &callSetHUDPosition_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.setInitDoneVal
// [0x00020000] 
// Parameters infos:
// unsigned long                  val                            ( CPF_Parm )

void USanctumHUDGFxAction::setInitDoneVal ( unsigned long val )
{
	static UFunction* pFnsetInitDoneVal = NULL;

	if ( ! pFnsetInitDoneVal )
		pFnsetInitDoneVal = (UFunction*) UObject::GObjObjects()->Data[ 50572 ];

	USanctumHUDGFxAction_execsetInitDoneVal_Parms setInitDoneVal_Parms;
	setInitDoneVal_Parms.val = val;

	this->ProcessEvent ( pFnsetInitDoneVal, &setInitDoneVal_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.InitPartyColors
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxAction::InitPartyColors ( )
{
	static UFunction* pFnInitPartyColors = NULL;

	if ( ! pFnInitPartyColors )
		pFnInitPartyColors = (UFunction*) UObject::GObjObjects()->Data[ 50571 ];

	USanctumHUDGFxAction_execInitPartyColors_Parms InitPartyColors_Parms;

	this->ProcessEvent ( pFnInitPartyColors, &InitPartyColors_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.SetupAmmoWeapon
// [0x00020002] 
// Parameters infos:
// class ASanctumWeapon*          Wpn                            ( CPF_Parm )
// int                            lvl                            ( CPF_Parm )
// class UGFxObject*              wpnIcon                        ( CPF_Parm )

void USanctumHUDGFxAction::SetupAmmoWeapon ( class ASanctumWeapon* Wpn, int lvl, class UGFxObject* wpnIcon )
{
	static UFunction* pFnSetupAmmoWeapon = NULL;

	if ( ! pFnSetupAmmoWeapon )
		pFnSetupAmmoWeapon = (UFunction*) UObject::GObjObjects()->Data[ 50563 ];

	USanctumHUDGFxAction_execSetupAmmoWeapon_Parms SetupAmmoWeapon_Parms;
	SetupAmmoWeapon_Parms.Wpn = Wpn;
	SetupAmmoWeapon_Parms.lvl = lvl;
	SetupAmmoWeapon_Parms.wpnIcon = wpnIcon;

	this->ProcessEvent ( pFnSetupAmmoWeapon, &SetupAmmoWeapon_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.SetupWeapon
// [0x00820002] 
// Parameters infos:
// class ASanctumWeapon*          Wpn                            ( CPF_Parm )
// int                            lvl                            ( CPF_Parm )
// int                            Index                          ( CPF_Parm )

void USanctumHUDGFxAction::SetupWeapon ( class ASanctumWeapon* Wpn, int lvl, int Index )
{
	static UFunction* pFnSetupWeapon = NULL;

	if ( ! pFnSetupWeapon )
		pFnSetupWeapon = (UFunction*) UObject::GObjObjects()->Data[ 50558 ];

	USanctumHUDGFxAction_execSetupWeapon_Parms SetupWeapon_Parms;
	SetupWeapon_Parms.Wpn = Wpn;
	SetupWeapon_Parms.lvl = lvl;
	SetupWeapon_Parms.Index = Index;

	this->ProcessEvent ( pFnSetupWeapon, &SetupWeapon_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.SetupWeapons
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxAction::SetupWeapons ( )
{
	static UFunction* pFnSetupWeapons = NULL;

	if ( ! pFnSetupWeapons )
		pFnSetupWeapons = (UFunction*) UObject::GObjObjects()->Data[ 50553 ];

	USanctumHUDGFxAction_execSetupWeapons_Parms SetupWeapons_Parms;

	this->ProcessEvent ( pFnSetupWeapons, &SetupWeapons_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.RemoveWeaponIcons
// [0x00820002] 
// Parameters infos:

void USanctumHUDGFxAction::RemoveWeaponIcons ( )
{
	static UFunction* pFnRemoveWeaponIcons = NULL;

	if ( ! pFnRemoveWeaponIcons )
		pFnRemoveWeaponIcons = (UFunction*) UObject::GObjObjects()->Data[ 50548 ];

	USanctumHUDGFxAction_execRemoveWeaponIcons_Parms RemoveWeaponIcons_Parms;

	this->ProcessEvent ( pFnRemoveWeaponIcons, &RemoveWeaponIcons_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxAction.Init
// [0x00024002] 
// Parameters infos:
// class ULocalPlayer*            LocPlay                        ( CPF_OptionalParm | CPF_Parm )

void USanctumHUDGFxAction::Init ( class ULocalPlayer* LocPlay )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 50544 ];

	USanctumHUDGFxAction_execInit_Parms Init_Parms;
	Init_Parms.LocPlay = LocPlay;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxPhase.setReady
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              mc                             ( CPF_Parm )
// unsigned long                  Ready                          ( CPF_Parm )

void USanctumHUDGfxPhase::setReady ( class UGFxObject* mc, unsigned long Ready )
{
	static UFunction* pFnsetReady = NULL;

	if ( ! pFnsetReady )
		pFnsetReady = (UFunction*) UObject::GObjObjects()->Data[ 50509 ];

	USanctumHUDGfxPhase_execsetReady_Parms setReady_Parms;
	setReady_Parms.mc = mc;
	setReady_Parms.Ready = Ready;

	this->ProcessEvent ( pFnsetReady, &setReady_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxPhase.InitPartyColors
// [0x00020002] 
// Parameters infos:

void USanctumHUDGfxPhase::InitPartyColors ( )
{
	static UFunction* pFnInitPartyColors = NULL;

	if ( ! pFnInitPartyColors )
		pFnInitPartyColors = (UFunction*) UObject::GObjObjects()->Data[ 50505 ];

	USanctumHUDGfxPhase_execInitPartyColors_Parms InitPartyColors_Parms;

	this->ProcessEvent ( pFnInitPartyColors, &InitPartyColors_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxPhase.callSetEntryColor
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              mc                             ( CPF_Parm )
// int                            R                              ( CPF_Parm )
// int                            G                              ( CPF_Parm )
// int                            B                              ( CPF_Parm )

void USanctumHUDGfxPhase::callSetEntryColor ( class UGFxObject* mc, int R, int G, int B )
{
	static UFunction* pFncallSetEntryColor = NULL;

	if ( ! pFncallSetEntryColor )
		pFncallSetEntryColor = (UFunction*) UObject::GObjObjects()->Data[ 50500 ];

	USanctumHUDGfxPhase_execcallSetEntryColor_Parms callSetEntryColor_Parms;
	callSetEntryColor_Parms.mc = mc;
	callSetEntryColor_Parms.R = R;
	callSetEntryColor_Parms.G = G;
	callSetEntryColor_Parms.B = B;

	this->ProcessEvent ( pFncallSetEntryColor, &callSetEntryColor_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxPhase.setEntryColor
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              mc                             ( CPF_Parm )
// struct FColor                  playerColor                    ( CPF_Parm )

void USanctumHUDGfxPhase::setEntryColor ( class UGFxObject* mc, struct FColor playerColor )
{
	static UFunction* pFnsetEntryColor = NULL;

	if ( ! pFnsetEntryColor )
		pFnsetEntryColor = (UFunction*) UObject::GObjObjects()->Data[ 50494 ];

	USanctumHUDGfxPhase_execsetEntryColor_Parms setEntryColor_Parms;
	setEntryColor_Parms.mc = mc;
	memcpy ( &setEntryColor_Parms.playerColor, &playerColor, 0x4 );

	this->ProcessEvent ( pFnsetEntryColor, &setEntryColor_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxPhase.setPartyStats
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              mc                             ( CPF_Parm )
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 statVal                        ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGfxPhase::setPartyStats ( class UGFxObject* mc, struct FString PlayerName, struct FString statVal )
{
	static UFunction* pFnsetPartyStats = NULL;

	if ( ! pFnsetPartyStats )
		pFnsetPartyStats = (UFunction*) UObject::GObjObjects()->Data[ 50490 ];

	USanctumHUDGfxPhase_execsetPartyStats_Parms setPartyStats_Parms;
	setPartyStats_Parms.mc = mc;
	memcpy ( &setPartyStats_Parms.PlayerName, &PlayerName, 0xC );
	memcpy ( &setPartyStats_Parms.statVal, &statVal, 0xC );

	this->ProcessEvent ( pFnsetPartyStats, &setPartyStats_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxPhase.changePartyType
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              mc                             ( CPF_Parm )
// struct FString                 Phase                          ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGfxPhase::changePartyType ( class UGFxObject* mc, struct FString Phase )
{
	static UFunction* pFnchangePartyType = NULL;

	if ( ! pFnchangePartyType )
		pFnchangePartyType = (UFunction*) UObject::GObjObjects()->Data[ 50487 ];

	USanctumHUDGfxPhase_execchangePartyType_Parms changePartyType_Parms;
	changePartyType_Parms.mc = mc;
	memcpy ( &changePartyType_Parms.Phase, &Phase, 0xC );

	this->ProcessEvent ( pFnchangePartyType, &changePartyType_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// struct FName                   WidgetPath                     ( CPF_Parm )
// class UGFxObject*              Widget                         ( CPF_Parm )

bool USanctumHUDGFxCircle::eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = (UFunction*) UObject::GObjObjects()->Data[ 51593 ];

	USanctumHUDGFxCircle_eventWidgetInitialized_Parms WidgetInitialized_Parms;
	memcpy ( &WidgetInitialized_Parms.WidgetName, &WidgetName, 0x8 );
	memcpy ( &WidgetInitialized_Parms.WidgetPath, &WidgetPath, 0x8 );
	WidgetInitialized_Parms.Widget = Widget;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );

	return WidgetInitialized_Parms.ReturnValue;
};

// Function Sanctum.SanctumHUDGFxCircle.SetLocalizedText
// [0x00024002] 
// Parameters infos:
// class UGFxObject*              Obj                            ( CPF_Parm )
// struct FString                 Id                             ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 VarName                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxCircle::SetLocalizedText ( class UGFxObject* Obj, struct FString Id, struct FString VarName )
{
	static UFunction* pFnSetLocalizedText = NULL;

	if ( ! pFnSetLocalizedText )
		pFnSetLocalizedText = (UFunction*) UObject::GObjObjects()->Data[ 51589 ];

	USanctumHUDGFxCircle_execSetLocalizedText_Parms SetLocalizedText_Parms;
	SetLocalizedText_Parms.Obj = Obj;
	memcpy ( &SetLocalizedText_Parms.Id, &Id, 0xC );
	memcpy ( &SetLocalizedText_Parms.VarName, &VarName, 0xC );

	this->ProcessEvent ( pFnSetLocalizedText, &SetLocalizedText_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.AS_SetLabelColor
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              Label                          ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )

void USanctumHUDGFxCircle::AS_SetLabelColor ( class UGFxObject* Label, unsigned char R, unsigned char G, unsigned char B )
{
	static UFunction* pFnAS_SetLabelColor = NULL;

	if ( ! pFnAS_SetLabelColor )
		pFnAS_SetLabelColor = (UFunction*) UObject::GObjObjects()->Data[ 51584 ];

	USanctumHUDGFxCircle_execAS_SetLabelColor_Parms AS_SetLabelColor_Parms;
	AS_SetLabelColor_Parms.Label = Label;
	AS_SetLabelColor_Parms.R = R;
	AS_SetLabelColor_Parms.G = G;
	AS_SetLabelColor_Parms.B = B;

	this->ProcessEvent ( pFnAS_SetLabelColor, &AS_SetLabelColor_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.SetLabelColor
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              Label                          ( CPF_Parm )
// struct FColor                  playerColor                    ( CPF_Parm )

void USanctumHUDGFxCircle::SetLabelColor ( class UGFxObject* Label, struct FColor playerColor )
{
	static UFunction* pFnSetLabelColor = NULL;

	if ( ! pFnSetLabelColor )
		pFnSetLabelColor = (UFunction*) UObject::GObjObjects()->Data[ 51578 ];

	USanctumHUDGFxCircle_execSetLabelColor_Parms SetLabelColor_Parms;
	SetLabelColor_Parms.Label = Label;
	memcpy ( &SetLabelColor_Parms.playerColor, &playerColor, 0x4 );

	this->ProcessEvent ( pFnSetLabelColor, &SetLabelColor_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.SetDPSData
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              playerLabel                    ( CPF_Parm )
// class UGFxObject*              playerTitle                    ( CPF_Parm )

void USanctumHUDGFxCircle::SetDPSData ( class UGFxObject* playerLabel, class UGFxObject* playerTitle )
{
	static UFunction* pFnSetDPSData = NULL;

	if ( ! pFnSetDPSData )
		pFnSetDPSData = (UFunction*) UObject::GObjObjects()->Data[ 51574 ];

	USanctumHUDGFxCircle_execSetDPSData_Parms SetDPSData_Parms;
	SetDPSData_Parms.playerLabel = playerLabel;
	SetDPSData_Parms.playerTitle = playerTitle;

	this->ProcessEvent ( pFnSetDPSData, &SetDPSData_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.UpdateDPSStatus
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::UpdateDPSStatus ( )
{
	static UFunction* pFnUpdateDPSStatus = NULL;

	if ( ! pFnUpdateDPSStatus )
		pFnUpdateDPSStatus = (UFunction*) UObject::GObjObjects()->Data[ 51572 ];

	USanctumHUDGFxCircle_execUpdateDPSStatus_Parms UpdateDPSStatus_Parms;

	this->ProcessEvent ( pFnUpdateDPSStatus, &UpdateDPSStatus_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.getNextInfo
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::getNextInfo ( )
{
	static UFunction* pFngetNextInfo = NULL;

	if ( ! pFngetNextInfo )
		pFngetNextInfo = (UFunction*) UObject::GObjObjects()->Data[ 51563 ];

	USanctumHUDGFxCircle_execgetNextInfo_Parms getNextInfo_Parms;

	this->ProcessEvent ( pFngetNextInfo, &getNextInfo_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.updateWave
// [0x00020002] 
// Parameters infos:
// int                            NewValue                       ( CPF_Parm )

void USanctumHUDGFxCircle::updateWave ( int NewValue )
{
	static UFunction* pFnupdateWave = NULL;

	if ( ! pFnupdateWave )
		pFnupdateWave = (UFunction*) UObject::GObjObjects()->Data[ 51561 ];

	USanctumHUDGFxCircle_execupdateWave_Parms updateWave_Parms;
	updateWave_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnupdateWave, &updateWave_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.getLife
// [0x00020002] 
// Parameters infos:
// int                            life                           ( CPF_Parm )

void USanctumHUDGFxCircle::getLife ( int life )
{
	static UFunction* pFngetLife = NULL;

	if ( ! pFngetLife )
		pFngetLife = (UFunction*) UObject::GObjObjects()->Data[ 51557 ];

	USanctumHUDGFxCircle_execgetLife_Parms getLife_Parms;
	getLife_Parms.life = life;

	this->ProcessEvent ( pFngetLife, &getLife_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.EnterDone
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::EnterDone ( )
{
	static UFunction* pFnEnterDone = NULL;

	if ( ! pFnEnterDone )
		pFnEnterDone = (UFunction*) UObject::GObjObjects()->Data[ 51555 ];

	USanctumHUDGFxCircle_execEnterDone_Parms EnterDone_Parms;

	this->ProcessEvent ( pFnEnterDone, &EnterDone_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.switchHUD
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::switchHUD ( )
{
	static UFunction* pFnswitchHUD = NULL;

	if ( ! pFnswitchHUD )
		pFnswitchHUD = (UFunction*) UObject::GObjObjects()->Data[ 51552 ];

	USanctumHUDGFxCircle_execswitchHUD_Parms switchHUD_Parms;

	this->ProcessEvent ( pFnswitchHUD, &switchHUD_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.ShowClassicTimer
// [0x00024002] 
// Parameters infos:
// unsigned long                  show                           ( CPF_OptionalParm | CPF_Parm )

void USanctumHUDGFxCircle::ShowClassicTimer ( unsigned long show )
{
	static UFunction* pFnShowClassicTimer = NULL;

	if ( ! pFnShowClassicTimer )
		pFnShowClassicTimer = (UFunction*) UObject::GObjObjects()->Data[ 51550 ];

	USanctumHUDGFxCircle_execShowClassicTimer_Parms ShowClassicTimer_Parms;
	ShowClassicTimer_Parms.show = show;

	this->ProcessEvent ( pFnShowClassicTimer, &ShowClassicTimer_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.setTutorialHUD
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::setTutorialHUD ( )
{
	static UFunction* pFnsetTutorialHUD = NULL;

	if ( ! pFnsetTutorialHUD )
		pFnsetTutorialHUD = (UFunction*) UObject::GObjObjects()->Data[ 51549 ];

	USanctumHUDGFxCircle_execsetTutorialHUD_Parms setTutorialHUD_Parms;

	this->ProcessEvent ( pFnsetTutorialHUD, &setTutorialHUD_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.setInitDoneVal
// [0x00020000] 
// Parameters infos:
// unsigned long                  val                            ( CPF_Parm )

void USanctumHUDGFxCircle::setInitDoneVal ( unsigned long val )
{
	static UFunction* pFnsetInitDoneVal = NULL;

	if ( ! pFnsetInitDoneVal )
		pFnsetInitDoneVal = (UFunction*) UObject::GObjObjects()->Data[ 51547 ];

	USanctumHUDGFxCircle_execsetInitDoneVal_Parms setInitDoneVal_Parms;
	setInitDoneVal_Parms.val = val;

	this->ProcessEvent ( pFnsetInitDoneVal, &setInitDoneVal_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.InitphaseDone
// [0x00020000] 
// Parameters infos:

void USanctumHUDGFxCircle::InitphaseDone ( )
{
	static UFunction* pFnInitphaseDone = NULL;

	if ( ! pFnInitphaseDone )
		pFnInitphaseDone = (UFunction*) UObject::GObjObjects()->Data[ 51546 ];

	USanctumHUDGFxCircle_execInitphaseDone_Parms InitphaseDone_Parms;

	this->ProcessEvent ( pFnInitphaseDone, &InitphaseDone_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.CallShowBuildStart
// [0x00020002] 
// Parameters infos:
// int                            newCash                        ( CPF_Parm )
// int                            WaveNumber                     ( CPF_Parm )
// int                            Max                            ( CPF_Parm )

void USanctumHUDGFxCircle::CallShowBuildStart ( int newCash, int WaveNumber, int Max )
{
	static UFunction* pFnCallShowBuildStart = NULL;

	if ( ! pFnCallShowBuildStart )
		pFnCallShowBuildStart = (UFunction*) UObject::GObjObjects()->Data[ 51542 ];

	USanctumHUDGFxCircle_execCallShowBuildStart_Parms CallShowBuildStart_Parms;
	CallShowBuildStart_Parms.newCash = newCash;
	CallShowBuildStart_Parms.WaveNumber = WaveNumber;
	CallShowBuildStart_Parms.Max = Max;

	this->ProcessEvent ( pFnCallShowBuildStart, &CallShowBuildStart_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.CallResetWaveBanner
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::CallResetWaveBanner ( )
{
	static UFunction* pFnCallResetWaveBanner = NULL;

	if ( ! pFnCallResetWaveBanner )
		pFnCallResetWaveBanner = (UFunction*) UObject::GObjObjects()->Data[ 51541 ];

	USanctumHUDGFxCircle_execCallResetWaveBanner_Parms CallResetWaveBanner_Parms;

	this->ProcessEvent ( pFnCallResetWaveBanner, &CallResetWaveBanner_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.MAXUPGRADED
// [0x00020002] 
// Parameters infos:
// unsigned long                  MAXUPGRADED                    ( CPF_Parm )

void USanctumHUDGFxCircle::MAXUPGRADED ( unsigned long MAXUPGRADED )
{
	static UFunction* pFnMAXUPGRADED = NULL;

	if ( ! pFnMAXUPGRADED )
		pFnMAXUPGRADED = (UFunction*) UObject::GObjObjects()->Data[ 51539 ];

	USanctumHUDGFxCircle_execMAXUPGRADED_Parms MAXUPGRADED_Parms;
	MAXUPGRADED_Parms.MAXUPGRADED = MAXUPGRADED;

	this->ProcessEvent ( pFnMAXUPGRADED, &MAXUPGRADED_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.lowMoneyUpgrade
// [0x00020002] 
// Parameters infos:
// unsigned long                  lowMoneyUpgrade                ( CPF_Parm )

void USanctumHUDGFxCircle::lowMoneyUpgrade ( unsigned long lowMoneyUpgrade )
{
	static UFunction* pFnlowMoneyUpgrade = NULL;

	if ( ! pFnlowMoneyUpgrade )
		pFnlowMoneyUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 51537 ];

	USanctumHUDGFxCircle_execlowMoneyUpgrade_Parms lowMoneyUpgrade_Parms;
	lowMoneyUpgrade_Parms.lowMoneyUpgrade = lowMoneyUpgrade;

	this->ProcessEvent ( pFnlowMoneyUpgrade, &lowMoneyUpgrade_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.lowMoneyBuy
// [0x00020002] 
// Parameters infos:
// unsigned long                  lowMoneyBuy                    ( CPF_Parm )

void USanctumHUDGFxCircle::lowMoneyBuy ( unsigned long lowMoneyBuy )
{
	static UFunction* pFnlowMoneyBuy = NULL;

	if ( ! pFnlowMoneyBuy )
		pFnlowMoneyBuy = (UFunction*) UObject::GObjObjects()->Data[ 51535 ];

	USanctumHUDGFxCircle_execlowMoneyBuy_Parms lowMoneyBuy_Parms;
	lowMoneyBuy_Parms.lowMoneyBuy = lowMoneyBuy;

	this->ProcessEvent ( pFnlowMoneyBuy, &lowMoneyBuy_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.aimingAtTower
// [0x00020002] 
// Parameters infos:
// unsigned long                  aimingAtTower                  ( CPF_Parm )

void USanctumHUDGFxCircle::aimingAtTower ( unsigned long aimingAtTower )
{
	static UFunction* pFnaimingAtTower = NULL;

	if ( ! pFnaimingAtTower )
		pFnaimingAtTower = (UFunction*) UObject::GObjObjects()->Data[ 51533 ];

	USanctumHUDGFxCircle_execaimingAtTower_Parms aimingAtTower_Parms;
	aimingAtTower_Parms.aimingAtTower = aimingAtTower;

	this->ProcessEvent ( pFnaimingAtTower, &aimingAtTower_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.WeaponChanged
// [0x00020002] 
// Parameters infos:
// unsigned char                  Weapon                         ( CPF_Parm )

void USanctumHUDGFxCircle::WeaponChanged ( unsigned char Weapon )
{
	static UFunction* pFnWeaponChanged = NULL;

	if ( ! pFnWeaponChanged )
		pFnWeaponChanged = (UFunction*) UObject::GObjObjects()->Data[ 51531 ];

	USanctumHUDGFxCircle_execWeaponChanged_Parms WeaponChanged_Parms;
	WeaponChanged_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnWeaponChanged, &WeaponChanged_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.PrevWeapon
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::PrevWeapon ( )
{
	static UFunction* pFnPrevWeapon = NULL;

	if ( ! pFnPrevWeapon )
		pFnPrevWeapon = (UFunction*) UObject::GObjObjects()->Data[ 51530 ];

	USanctumHUDGFxCircle_execPrevWeapon_Parms PrevWeapon_Parms;

	this->ProcessEvent ( pFnPrevWeapon, &PrevWeapon_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.NextWeapon
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::NextWeapon ( )
{
	static UFunction* pFnNextWeapon = NULL;

	if ( ! pFnNextWeapon )
		pFnNextWeapon = (UFunction*) UObject::GObjObjects()->Data[ 51529 ];

	USanctumHUDGFxCircle_execNextWeapon_Parms NextWeapon_Parms;

	this->ProcessEvent ( pFnNextWeapon, &NextWeapon_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.setIconPos
// [0x00020002] 
// Parameters infos:
// struct FString                 Icon                           ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxCircle::setIconPos ( struct FString Icon )
{
	static UFunction* pFnsetIconPos = NULL;

	if ( ! pFnsetIconPos )
		pFnsetIconPos = (UFunction*) UObject::GObjObjects()->Data[ 51527 ];

	USanctumHUDGFxCircle_execsetIconPos_Parms setIconPos_Parms;
	memcpy ( &setIconPos_Parms.Icon, &Icon, 0xC );

	this->ProcessEvent ( pFnsetIconPos, &setIconPos_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.buyPriceChanged
// [0x00020002] 
// Parameters infos:
// int                            newBuyPrice                    ( CPF_Parm )

void USanctumHUDGFxCircle::buyPriceChanged ( int newBuyPrice )
{
	static UFunction* pFnbuyPriceChanged = NULL;

	if ( ! pFnbuyPriceChanged )
		pFnbuyPriceChanged = (UFunction*) UObject::GObjObjects()->Data[ 51525 ];

	USanctumHUDGFxCircle_execbuyPriceChanged_Parms buyPriceChanged_Parms;
	buyPriceChanged_Parms.newBuyPrice = newBuyPrice;

	this->ProcessEvent ( pFnbuyPriceChanged, &buyPriceChanged_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.sellPriceChanged
// [0x00020002] 
// Parameters infos:
// int                            newSellPrice                   ( CPF_Parm )

void USanctumHUDGFxCircle::sellPriceChanged ( int newSellPrice )
{
	static UFunction* pFnsellPriceChanged = NULL;

	if ( ! pFnsellPriceChanged )
		pFnsellPriceChanged = (UFunction*) UObject::GObjObjects()->Data[ 51523 ];

	USanctumHUDGFxCircle_execsellPriceChanged_Parms sellPriceChanged_Parms;
	sellPriceChanged_Parms.newSellPrice = newSellPrice;

	this->ProcessEvent ( pFnsellPriceChanged, &sellPriceChanged_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.CallUpdateBar
// [0x00020002] 
// Parameters infos:
// float                          Percent                        ( CPF_Parm )
// int                            click                          ( CPF_Parm )
// unsigned long                  Upgrade                        ( CPF_Parm )

void USanctumHUDGFxCircle::CallUpdateBar ( float Percent, int click, unsigned long Upgrade )
{
	static UFunction* pFnCallUpdateBar = NULL;

	if ( ! pFnCallUpdateBar )
		pFnCallUpdateBar = (UFunction*) UObject::GObjObjects()->Data[ 51519 ];

	USanctumHUDGFxCircle_execCallUpdateBar_Parms CallUpdateBar_Parms;
	CallUpdateBar_Parms.Percent = Percent;
	CallUpdateBar_Parms.click = click;
	CallUpdateBar_Parms.Upgrade = Upgrade;

	this->ProcessEvent ( pFnCallUpdateBar, &CallUpdateBar_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.countdownTimeChanged
// [0x00020002] 
// Parameters infos:
// float                          Percent                        ( CPF_Parm )
// unsigned char                  click                          ( CPF_Parm )

void USanctumHUDGFxCircle::countdownTimeChanged ( float Percent, unsigned char click )
{
	static UFunction* pFncountdownTimeChanged = NULL;

	if ( ! pFncountdownTimeChanged )
		pFncountdownTimeChanged = (UFunction*) UObject::GObjObjects()->Data[ 51516 ];

	USanctumHUDGFxCircle_execcountdownTimeChanged_Parms countdownTimeChanged_Parms;
	countdownTimeChanged_Parms.Percent = Percent;
	countdownTimeChanged_Parms.click = click;

	this->ProcessEvent ( pFncountdownTimeChanged, &countdownTimeChanged_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.setAimingAtTowerData
// [0x00020002] 
// Parameters infos:
// class ASanctumTowerBaseAttachment* attachmentInstance             ( CPF_Parm )

void USanctumHUDGFxCircle::setAimingAtTowerData ( class ASanctumTowerBaseAttachment* attachmentInstance )
{
	static UFunction* pFnsetAimingAtTowerData = NULL;

	if ( ! pFnsetAimingAtTowerData )
		pFnsetAimingAtTowerData = (UFunction*) UObject::GObjObjects()->Data[ 51514 ];

	USanctumHUDGFxCircle_execsetAimingAtTowerData_Parms setAimingAtTowerData_Parms;
	setAimingAtTowerData_Parms.attachmentInstance = attachmentInstance;

	this->ProcessEvent ( pFnsetAimingAtTowerData, &setAimingAtTowerData_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.buttonUp
// [0x00020002] 
// Parameters infos:
// int                            Button                         ( CPF_Parm )

void USanctumHUDGFxCircle::buttonUp ( int Button )
{
	static UFunction* pFnbuttonUp = NULL;

	if ( ! pFnbuttonUp )
		pFnbuttonUp = (UFunction*) UObject::GObjObjects()->Data[ 51512 ];

	USanctumHUDGFxCircle_execbuttonUp_Parms buttonUp_Parms;
	buttonUp_Parms.Button = Button;

	this->ProcessEvent ( pFnbuttonUp, &buttonUp_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.buttonDown
// [0x00020002] 
// Parameters infos:
// int                            Button                         ( CPF_Parm )

void USanctumHUDGFxCircle::buttonDown ( int Button )
{
	static UFunction* pFnbuttonDown = NULL;

	if ( ! pFnbuttonDown )
		pFnbuttonDown = (UFunction*) UObject::GObjObjects()->Data[ 51510 ];

	USanctumHUDGFxCircle_execbuttonDown_Parms buttonDown_Parms;
	buttonDown_Parms.Button = Button;

	this->ProcessEvent ( pFnbuttonDown, &buttonDown_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.ableToUpgradeChanged
// [0x00020002] 
// Parameters infos:
// unsigned long                  NewValue                       ( CPF_Parm )

void USanctumHUDGFxCircle::ableToUpgradeChanged ( unsigned long NewValue )
{
	static UFunction* pFnableToUpgradeChanged = NULL;

	if ( ! pFnableToUpgradeChanged )
		pFnableToUpgradeChanged = (UFunction*) UObject::GObjObjects()->Data[ 51508 ];

	USanctumHUDGFxCircle_execableToUpgradeChanged_Parms ableToUpgradeChanged_Parms;
	ableToUpgradeChanged_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnableToUpgradeChanged, &ableToUpgradeChanged_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.ableToSellChanged
// [0x00020002] 
// Parameters infos:
// unsigned long                  NewValue                       ( CPF_Parm )

void USanctumHUDGFxCircle::ableToSellChanged ( unsigned long NewValue )
{
	static UFunction* pFnableToSellChanged = NULL;

	if ( ! pFnableToSellChanged )
		pFnableToSellChanged = (UFunction*) UObject::GObjObjects()->Data[ 51506 ];

	USanctumHUDGFxCircle_execableToSellChanged_Parms ableToSellChanged_Parms;
	ableToSellChanged_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnableToSellChanged, &ableToSellChanged_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.ableToBuildChanged
// [0x00020002] 
// Parameters infos:
// unsigned long                  NewValue                       ( CPF_Parm )
// unsigned long                  aimingAtTower                  ( CPF_Parm )

void USanctumHUDGFxCircle::ableToBuildChanged ( unsigned long NewValue, unsigned long aimingAtTower )
{
	static UFunction* pFnableToBuildChanged = NULL;

	if ( ! pFnableToBuildChanged )
		pFnableToBuildChanged = (UFunction*) UObject::GObjObjects()->Data[ 51503 ];

	USanctumHUDGFxCircle_execableToBuildChanged_Parms ableToBuildChanged_Parms;
	ableToBuildChanged_Parms.NewValue = NewValue;
	ableToBuildChanged_Parms.aimingAtTower = aimingAtTower;

	this->ProcessEvent ( pFnableToBuildChanged, &ableToBuildChanged_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.CallRightClickActionChanged
// [0x00020002] 
// Parameters infos:
// struct FString                 actionType                     ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxCircle::CallRightClickActionChanged ( struct FString actionType )
{
	static UFunction* pFnCallRightClickActionChanged = NULL;

	if ( ! pFnCallRightClickActionChanged )
		pFnCallRightClickActionChanged = (UFunction*) UObject::GObjObjects()->Data[ 51501 ];

	USanctumHUDGFxCircle_execCallRightClickActionChanged_Parms CallRightClickActionChanged_Parms;
	memcpy ( &CallRightClickActionChanged_Parms.actionType, &actionType, 0xC );

	this->ProcessEvent ( pFnCallRightClickActionChanged, &CallRightClickActionChanged_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.CallLeftClickActionChanged
// [0x00020002] 
// Parameters infos:
// struct FString                 actionType                     ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxCircle::CallLeftClickActionChanged ( struct FString actionType )
{
	static UFunction* pFnCallLeftClickActionChanged = NULL;

	if ( ! pFnCallLeftClickActionChanged )
		pFnCallLeftClickActionChanged = (UFunction*) UObject::GObjObjects()->Data[ 51499 ];

	USanctumHUDGFxCircle_execCallLeftClickActionChanged_Parms CallLeftClickActionChanged_Parms;
	memcpy ( &CallLeftClickActionChanged_Parms.actionType, &actionType, 0xC );

	this->ProcessEvent ( pFnCallLeftClickActionChanged, &CallLeftClickActionChanged_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.rightClickActionChanged
// [0x00020002] 
// Parameters infos:
// unsigned char                  actionType                     ( CPF_Parm )

void USanctumHUDGFxCircle::rightClickActionChanged ( unsigned char actionType )
{
	static UFunction* pFnrightClickActionChanged = NULL;

	if ( ! pFnrightClickActionChanged )
		pFnrightClickActionChanged = (UFunction*) UObject::GObjObjects()->Data[ 51497 ];

	USanctumHUDGFxCircle_execrightClickActionChanged_Parms rightClickActionChanged_Parms;
	rightClickActionChanged_Parms.actionType = actionType;

	this->ProcessEvent ( pFnrightClickActionChanged, &rightClickActionChanged_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.leftClickActionChanged
// [0x00020002] 
// Parameters infos:
// unsigned char                  actionType                     ( CPF_Parm )

void USanctumHUDGFxCircle::leftClickActionChanged ( unsigned char actionType )
{
	static UFunction* pFnleftClickActionChanged = NULL;

	if ( ! pFnleftClickActionChanged )
		pFnleftClickActionChanged = (UFunction*) UObject::GObjObjects()->Data[ 51494 ];

	USanctumHUDGFxCircle_execleftClickActionChanged_Parms leftClickActionChanged_Parms;
	leftClickActionChanged_Parms.actionType = actionType;

	this->ProcessEvent ( pFnleftClickActionChanged, &leftClickActionChanged_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.CallSetWeapons
// [0x00020002] 
// Parameters infos:
// TArray< struct FString >       Weapons                        ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxCircle::CallSetWeapons ( TArray< struct FString > Weapons )
{
	static UFunction* pFnCallSetWeapons = NULL;

	if ( ! pFnCallSetWeapons )
		pFnCallSetWeapons = (UFunction*) UObject::GObjObjects()->Data[ 51491 ];

	USanctumHUDGFxCircle_execCallSetWeapons_Parms CallSetWeapons_Parms;
	memcpy ( &CallSetWeapons_Parms.Weapons, &Weapons, 0xC );

	this->ProcessEvent ( pFnCallSetWeapons, &CallSetWeapons_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.CallSetTowers
// [0x00020002] 
// Parameters infos:
// TArray< struct FString >       Towers                         ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxCircle::CallSetTowers ( TArray< struct FString > Towers )
{
	static UFunction* pFnCallSetTowers = NULL;

	if ( ! pFnCallSetTowers )
		pFnCallSetTowers = (UFunction*) UObject::GObjObjects()->Data[ 51488 ];

	USanctumHUDGFxCircle_execCallSetTowers_Parms CallSetTowers_Parms;
	memcpy ( &CallSetTowers_Parms.Towers, &Towers, 0xC );

	this->ProcessEvent ( pFnCallSetTowers, &CallSetTowers_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.CheckActiveWeapons
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::CheckActiveWeapons ( )
{
	static UFunction* pFnCheckActiveWeapons = NULL;

	if ( ! pFnCheckActiveWeapons )
		pFnCheckActiveWeapons = (UFunction*) UObject::GObjObjects()->Data[ 51480 ];

	USanctumHUDGFxCircle_execCheckActiveWeapons_Parms CheckActiveWeapons_Parms;

	this->ProcessEvent ( pFnCheckActiveWeapons, &CheckActiveWeapons_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.CheckActiveTowers
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::CheckActiveTowers ( )
{
	static UFunction* pFnCheckActiveTowers = NULL;

	if ( ! pFnCheckActiveTowers )
		pFnCheckActiveTowers = (UFunction*) UObject::GObjObjects()->Data[ 51472 ];

	USanctumHUDGFxCircle_execCheckActiveTowers_Parms CheckActiveTowers_Parms;

	this->ProcessEvent ( pFnCheckActiveTowers, &CheckActiveTowers_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.Write
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxCircle::Write ( struct FString Text )
{
	static UFunction* pFnWrite = NULL;

	if ( ! pFnWrite )
		pFnWrite = (UFunction*) UObject::GObjObjects()->Data[ 51470 ];

	USanctumHUDGFxCircle_execWrite_Parms Write_Parms;
	memcpy ( &Write_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnWrite, &Write_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.UpdateSelected
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::UpdateSelected ( )
{
	static UFunction* pFnUpdateSelected = NULL;

	if ( ! pFnUpdateSelected )
		pFnUpdateSelected = (UFunction*) UObject::GObjObjects()->Data[ 51469 ];

	USanctumHUDGFxCircle_execUpdateSelected_Parms UpdateSelected_Parms;

	this->ProcessEvent ( pFnUpdateSelected, &UpdateSelected_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.HUDRight
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::HUDRight ( )
{
	static UFunction* pFnHUDRight = NULL;

	if ( ! pFnHUDRight )
		pFnHUDRight = (UFunction*) UObject::GObjObjects()->Data[ 51468 ];

	USanctumHUDGFxCircle_execHUDRight_Parms HUDRight_Parms;

	this->ProcessEvent ( pFnHUDRight, &HUDRight_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.HUDLeft
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::HUDLeft ( )
{
	static UFunction* pFnHUDLeft = NULL;

	if ( ! pFnHUDLeft )
		pFnHUDLeft = (UFunction*) UObject::GObjObjects()->Data[ 51466 ];

	USanctumHUDGFxCircle_execHUDLeft_Parms HUDLeft_Parms;

	this->ProcessEvent ( pFnHUDLeft, &HUDLeft_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.CallGreyAllEntries
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::CallGreyAllEntries ( )
{
	static UFunction* pFnCallGreyAllEntries = NULL;

	if ( ! pFnCallGreyAllEntries )
		pFnCallGreyAllEntries = (UFunction*) UObject::GObjObjects()->Data[ 51464 ];

	USanctumHUDGFxCircle_execCallGreyAllEntries_Parms CallGreyAllEntries_Parms;

	this->ProcessEvent ( pFnCallGreyAllEntries, &CallGreyAllEntries_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.CallDownlight
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::CallDownlight ( )
{
	static UFunction* pFnCallDownlight = NULL;

	if ( ! pFnCallDownlight )
		pFnCallDownlight = (UFunction*) UObject::GObjObjects()->Data[ 51462 ];

	USanctumHUDGFxCircle_execCallDownlight_Parms CallDownlight_Parms;

	this->ProcessEvent ( pFnCallDownlight, &CallDownlight_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.CallHighlight
// [0x00020002] 
// Parameters infos:
// int                            Idx                            ( CPF_Parm )

void USanctumHUDGFxCircle::CallHighlight ( int Idx )
{
	static UFunction* pFnCallHighlight = NULL;

	if ( ! pFnCallHighlight )
		pFnCallHighlight = (UFunction*) UObject::GObjObjects()->Data[ 51459 ];

	USanctumHUDGFxCircle_execCallHighlight_Parms CallHighlight_Parms;
	CallHighlight_Parms.Idx = Idx;

	this->ProcessEvent ( pFnCallHighlight, &CallHighlight_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.CallGotoWeaponIndex
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              mc                             ( CPF_Parm )
// int                            Idx                            ( CPF_Parm )

void USanctumHUDGFxCircle::CallGotoWeaponIndex ( class UGFxObject* mc, int Idx )
{
	static UFunction* pFnCallGotoWeaponIndex = NULL;

	if ( ! pFnCallGotoWeaponIndex )
		pFnCallGotoWeaponIndex = (UFunction*) UObject::GObjObjects()->Data[ 51455 ];

	USanctumHUDGFxCircle_execCallGotoWeaponIndex_Parms CallGotoWeaponIndex_Parms;
	CallGotoWeaponIndex_Parms.mc = mc;
	CallGotoWeaponIndex_Parms.Idx = Idx;

	this->ProcessEvent ( pFnCallGotoWeaponIndex, &CallGotoWeaponIndex_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.CallGotoTowerIndex
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              mc                             ( CPF_Parm )
// int                            Idx                            ( CPF_Parm )

void USanctumHUDGFxCircle::CallGotoTowerIndex ( class UGFxObject* mc, int Idx )
{
	static UFunction* pFnCallGotoTowerIndex = NULL;

	if ( ! pFnCallGotoTowerIndex )
		pFnCallGotoTowerIndex = (UFunction*) UObject::GObjObjects()->Data[ 51451 ];

	USanctumHUDGFxCircle_execCallGotoTowerIndex_Parms CallGotoTowerIndex_Parms;
	CallGotoTowerIndex_Parms.mc = mc;
	CallGotoTowerIndex_Parms.Idx = Idx;

	this->ProcessEvent ( pFnCallGotoTowerIndex, &CallGotoTowerIndex_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.CallDisableBlockDependent
// [0x00020002] 
// Parameters infos:
// unsigned long                  dis                            ( CPF_Parm )

void USanctumHUDGFxCircle::CallDisableBlockDependent ( unsigned long dis )
{
	static UFunction* pFnCallDisableBlockDependent = NULL;

	if ( ! pFnCallDisableBlockDependent )
		pFnCallDisableBlockDependent = (UFunction*) UObject::GObjObjects()->Data[ 51449 ];

	USanctumHUDGFxCircle_execCallDisableBlockDependent_Parms CallDisableBlockDependent_Parms;
	CallDisableBlockDependent_Parms.dis = dis;

	this->ProcessEvent ( pFnCallDisableBlockDependent, &CallDisableBlockDependent_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.callClearInfoClips
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::callClearInfoClips ( )
{
	static UFunction* pFncallClearInfoClips = NULL;

	if ( ! pFncallClearInfoClips )
		pFncallClearInfoClips = (UFunction*) UObject::GObjObjects()->Data[ 51448 ];

	USanctumHUDGFxCircle_execcallClearInfoClips_Parms callClearInfoClips_Parms;

	this->ProcessEvent ( pFncallClearInfoClips, &callClearInfoClips_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.ChangedTower
// [0x00020002] 
// Parameters infos:
// struct FString                 twr                            ( CPF_Parm | CPF_NeedCtorLink )
// int                            lvl                            ( CPF_Parm )
// unsigned long                  towerTab                       ( CPF_Parm )

void USanctumHUDGFxCircle::ChangedTower ( struct FString twr, int lvl, unsigned long towerTab )
{
	static UFunction* pFnChangedTower = NULL;

	if ( ! pFnChangedTower )
		pFnChangedTower = (UFunction*) UObject::GObjObjects()->Data[ 51443 ];

	USanctumHUDGFxCircle_execChangedTower_Parms ChangedTower_Parms;
	memcpy ( &ChangedTower_Parms.twr, &twr, 0xC );
	ChangedTower_Parms.lvl = lvl;
	ChangedTower_Parms.towerTab = towerTab;

	this->ProcessEvent ( pFnChangedTower, &ChangedTower_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.weaponStoreAction
// [0x00020002] 
// Parameters infos:
// unsigned char                  actionType                     ( CPF_Parm )
// int                            Cost                           ( CPF_Parm )

void USanctumHUDGFxCircle::weaponStoreAction ( unsigned char actionType, int Cost )
{
	static UFunction* pFnweaponStoreAction = NULL;

	if ( ! pFnweaponStoreAction )
		pFnweaponStoreAction = (UFunction*) UObject::GObjObjects()->Data[ 51440 ];

	USanctumHUDGFxCircle_execweaponStoreAction_Parms weaponStoreAction_Parms;
	weaponStoreAction_Parms.actionType = actionType;
	weaponStoreAction_Parms.Cost = Cost;

	this->ProcessEvent ( pFnweaponStoreAction, &weaponStoreAction_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.callSetFloatVarAppend
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              Obj                            ( CPF_Parm )
// float                          val                            ( CPF_Parm )
// struct FString                 append                         ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxCircle::callSetFloatVarAppend ( class UGFxObject* Obj, float val, struct FString append )
{
	static UFunction* pFncallSetFloatVarAppend = NULL;

	if ( ! pFncallSetFloatVarAppend )
		pFncallSetFloatVarAppend = (UFunction*) UObject::GObjObjects()->Data[ 51436 ];

	USanctumHUDGFxCircle_execcallSetFloatVarAppend_Parms callSetFloatVarAppend_Parms;
	callSetFloatVarAppend_Parms.Obj = Obj;
	callSetFloatVarAppend_Parms.val = val;
	memcpy ( &callSetFloatVarAppend_Parms.append, &append, 0xC );

	this->ProcessEvent ( pFncallSetFloatVarAppend, &callSetFloatVarAppend_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.callSetFloatVar
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              Obj                            ( CPF_Parm )
// float                          val                            ( CPF_Parm )

void USanctumHUDGFxCircle::callSetFloatVar ( class UGFxObject* Obj, float val )
{
	static UFunction* pFncallSetFloatVar = NULL;

	if ( ! pFncallSetFloatVar )
		pFncallSetFloatVar = (UFunction*) UObject::GObjObjects()->Data[ 51433 ];

	USanctumHUDGFxCircle_execcallSetFloatVar_Parms callSetFloatVar_Parms;
	callSetFloatVar_Parms.Obj = Obj;
	callSetFloatVar_Parms.val = val;

	this->ProcessEvent ( pFncallSetFloatVar, &callSetFloatVar_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.CallWeaponActionChanged
// [0x00020002] 
// Parameters infos:
// struct FString                 actionType                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Cost                           ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxCircle::CallWeaponActionChanged ( struct FString actionType, struct FString Cost )
{
	static UFunction* pFnCallWeaponActionChanged = NULL;

	if ( ! pFnCallWeaponActionChanged )
		pFnCallWeaponActionChanged = (UFunction*) UObject::GObjObjects()->Data[ 51430 ];

	USanctumHUDGFxCircle_execCallWeaponActionChanged_Parms CallWeaponActionChanged_Parms;
	memcpy ( &CallWeaponActionChanged_Parms.actionType, &actionType, 0xC );
	memcpy ( &CallWeaponActionChanged_Parms.Cost, &Cost, 0xC );

	this->ProcessEvent ( pFnCallWeaponActionChanged, &CallWeaponActionChanged_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.CallSetSpeed
// [0x00020002] 
// Parameters infos:
// int                            varType                        ( CPF_Parm )
// int                            val                            ( CPF_Parm )

void USanctumHUDGFxCircle::CallSetSpeed ( int varType, int val )
{
	static UFunction* pFnCallSetSpeed = NULL;

	if ( ! pFnCallSetSpeed )
		pFnCallSetSpeed = (UFunction*) UObject::GObjObjects()->Data[ 51427 ];

	USanctumHUDGFxCircle_execCallSetSpeed_Parms CallSetSpeed_Parms;
	CallSetSpeed_Parms.varType = varType;
	CallSetSpeed_Parms.val = val;

	this->ProcessEvent ( pFnCallSetSpeed, &CallSetSpeed_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.FillStatInfo
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::FillStatInfo ( )
{
	static UFunction* pFnFillStatInfo = NULL;

	if ( ! pFnFillStatInfo )
		pFnFillStatInfo = (UFunction*) UObject::GObjObjects()->Data[ 51425 ];

	USanctumHUDGFxCircle_execFillStatInfo_Parms FillStatInfo_Parms;

	this->ProcessEvent ( pFnFillStatInfo, &FillStatInfo_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.GetTowerInstanceStats
// [0x00420002] 
// Parameters infos:
// int                            damageTotal                    ( CPF_Parm | CPF_OutParm )
// int                            damageLast                     ( CPF_Parm | CPF_OutParm )

void USanctumHUDGFxCircle::GetTowerInstanceStats ( int* damageTotal, int* damageLast )
{
	static UFunction* pFnGetTowerInstanceStats = NULL;

	if ( ! pFnGetTowerInstanceStats )
		pFnGetTowerInstanceStats = (UFunction*) UObject::GObjObjects()->Data[ 51419 ];

	USanctumHUDGFxCircle_execGetTowerInstanceStats_Parms GetTowerInstanceStats_Parms;

	this->ProcessEvent ( pFnGetTowerInstanceStats, &GetTowerInstanceStats_Parms, NULL );

	if ( damageTotal )
		*damageTotal = GetTowerInstanceStats_Parms.damageTotal;

	if ( damageLast )
		*damageLast = GetTowerInstanceStats_Parms.damageLast;
};

// Function Sanctum.SanctumHUDGFxCircle.ChangedWeapon
// [0x00020002] 
// Parameters infos:
// unsigned long                  towerTab                       ( CPF_Parm )

void USanctumHUDGFxCircle::ChangedWeapon ( unsigned long towerTab )
{
	static UFunction* pFnChangedWeapon = NULL;

	if ( ! pFnChangedWeapon )
		pFnChangedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 51417 ];

	USanctumHUDGFxCircle_execChangedWeapon_Parms ChangedWeapon_Parms;
	ChangedWeapon_Parms.towerTab = towerTab;

	this->ProcessEvent ( pFnChangedWeapon, &ChangedWeapon_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.setTowerData
// [0x00020002] 
// Parameters infos:
// class UClass*                  towerClass                     ( CPF_Parm )
// int                            towerLevel                     ( CPF_Parm )
// class ASanctumTowerBaseAttachment* attachmentInstance             ( CPF_Parm )

void USanctumHUDGFxCircle::setTowerData ( class UClass* towerClass, int towerLevel, class ASanctumTowerBaseAttachment* attachmentInstance )
{
	static UFunction* pFnsetTowerData = NULL;

	if ( ! pFnsetTowerData )
		pFnsetTowerData = (UFunction*) UObject::GObjObjects()->Data[ 51412 ];

	USanctumHUDGFxCircle_execsetTowerData_Parms setTowerData_Parms;
	setTowerData_Parms.towerClass = towerClass;
	setTowerData_Parms.towerLevel = towerLevel;
	setTowerData_Parms.attachmentInstance = attachmentInstance;

	this->ProcessEvent ( pFnsetTowerData, &setTowerData_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.SetTowerInstanceStats
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::SetTowerInstanceStats ( )
{
	static UFunction* pFnSetTowerInstanceStats = NULL;

	if ( ! pFnSetTowerInstanceStats )
		pFnSetTowerInstanceStats = (UFunction*) UObject::GObjObjects()->Data[ 51409 ];

	USanctumHUDGFxCircle_execSetTowerInstanceStats_Parms SetTowerInstanceStats_Parms;

	this->ProcessEvent ( pFnSetTowerInstanceStats, &SetTowerInstanceStats_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.getCash
// [0x00020002] 
// Parameters infos:
// int                            Cash                           ( CPF_Parm )

void USanctumHUDGFxCircle::getCash ( int Cash )
{
	static UFunction* pFngetCash = NULL;

	if ( ! pFngetCash )
		pFngetCash = (UFunction*) UObject::GObjObjects()->Data[ 51407 ];

	USanctumHUDGFxCircle_execgetCash_Parms getCash_Parms;
	getCash_Parms.Cash = Cash;

	this->ProcessEvent ( pFngetCash, &getCash_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.setWeaponData
// [0x00020002] 
// Parameters infos:
// struct FWeaponData             Weapons                        ( CPF_Parm )

void USanctumHUDGFxCircle::setWeaponData ( struct FWeaponData* Weapons )
{
	static UFunction* pFnsetWeaponData = NULL;

	if ( ! pFnsetWeaponData )
		pFnsetWeaponData = (UFunction*) UObject::GObjObjects()->Data[ 51404 ];

	USanctumHUDGFxCircle_execsetWeaponData_Parms setWeaponData_Parms;
	memcpy ( &setWeaponData_Parms.Weapons, &Weapons, 0x18 );

	this->ProcessEvent ( pFnsetWeaponData, &setWeaponData_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.unregisterWeaponListener
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         callback                       ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxCircle::unregisterWeaponListener ( struct FScriptDelegate callback )
{
	static UFunction* pFnunregisterWeaponListener = NULL;

	if ( ! pFnunregisterWeaponListener )
		pFnunregisterWeaponListener = (UFunction*) UObject::GObjObjects()->Data[ 51401 ];

	USanctumHUDGFxCircle_execunregisterWeaponListener_Parms unregisterWeaponListener_Parms;
	memcpy ( &unregisterWeaponListener_Parms.callback, &callback, 0xC );

	this->ProcessEvent ( pFnunregisterWeaponListener, &unregisterWeaponListener_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.registerWeaponListener
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         callback                       ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxCircle::registerWeaponListener ( struct FScriptDelegate callback )
{
	static UFunction* pFnregisterWeaponListener = NULL;

	if ( ! pFnregisterWeaponListener )
		pFnregisterWeaponListener = (UFunction*) UObject::GObjObjects()->Data[ 51399 ];

	USanctumHUDGFxCircle_execregisterWeaponListener_Parms registerWeaponListener_Parms;
	memcpy ( &registerWeaponListener_Parms.callback, &callback, 0xC );

	this->ProcessEvent ( pFnregisterWeaponListener, &registerWeaponListener_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.setWeaponInfo
// [0x00020002] 
// Parameters infos:
// class ASanctumWeapon*          Wpn                            ( CPF_Parm )
// int                            lvl                            ( CPF_Parm )

void USanctumHUDGFxCircle::setWeaponInfo ( class ASanctumWeapon* Wpn, int lvl )
{
	static UFunction* pFnsetWeaponInfo = NULL;

	if ( ! pFnsetWeaponInfo )
		pFnsetWeaponInfo = (UFunction*) UObject::GObjObjects()->Data[ 51396 ];

	USanctumHUDGFxCircle_execsetWeaponInfo_Parms setWeaponInfo_Parms;
	setWeaponInfo_Parms.Wpn = Wpn;
	setWeaponInfo_Parms.lvl = lvl;

	this->ProcessEvent ( pFnsetWeaponInfo, &setWeaponInfo_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.notifyWeaponListener
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::notifyWeaponListener ( )
{
	static UFunction* pFnnotifyWeaponListener = NULL;

	if ( ! pFnnotifyWeaponListener )
		pFnnotifyWeaponListener = (UFunction*) UObject::GObjObjects()->Data[ 51393 ];

	USanctumHUDGFxCircle_execnotifyWeaponListener_Parms notifyWeaponListener_Parms;

	this->ProcessEvent ( pFnnotifyWeaponListener, &notifyWeaponListener_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.notifyHologramListener
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::notifyHologramListener ( )
{
	static UFunction* pFnnotifyHologramListener = NULL;

	if ( ! pFnnotifyHologramListener )
		pFnnotifyHologramListener = (UFunction*) UObject::GObjObjects()->Data[ 51388 ];

	USanctumHUDGFxCircle_execnotifyHologramListener_Parms notifyHologramListener_Parms;

	this->ProcessEvent ( pFnnotifyHologramListener, &notifyHologramListener_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.unregisterHologramListener
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         callback                       ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxCircle::unregisterHologramListener ( struct FScriptDelegate callback )
{
	static UFunction* pFnunregisterHologramListener = NULL;

	if ( ! pFnunregisterHologramListener )
		pFnunregisterHologramListener = (UFunction*) UObject::GObjObjects()->Data[ 51385 ];

	USanctumHUDGFxCircle_execunregisterHologramListener_Parms unregisterHologramListener_Parms;
	memcpy ( &unregisterHologramListener_Parms.callback, &callback, 0xC );

	this->ProcessEvent ( pFnunregisterHologramListener, &unregisterHologramListener_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.registerHologramListener
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         callback                       ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxCircle::registerHologramListener ( struct FScriptDelegate callback )
{
	static UFunction* pFnregisterHologramListener = NULL;

	if ( ! pFnregisterHologramListener )
		pFnregisterHologramListener = (UFunction*) UObject::GObjObjects()->Data[ 51382 ];

	USanctumHUDGFxCircle_execregisterHologramListener_Parms registerHologramListener_Parms;
	memcpy ( &registerHologramListener_Parms.callback, &callback, 0xC );

	this->ProcessEvent ( pFnregisterHologramListener, &registerHologramListener_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.PlaySound
// [0x00020002] 
// Parameters infos:
// struct FString                 snd                            ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxCircle::PlaySound ( struct FString snd )
{
	static UFunction* pFnPlaySound = NULL;

	if ( ! pFnPlaySound )
		pFnPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 51379 ];

	USanctumHUDGFxCircle_execPlaySound_Parms PlaySound_Parms;
	memcpy ( &PlaySound_Parms.snd, &snd, 0xC );

	this->ProcessEvent ( pFnPlaySound, &PlaySound_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.callSetHUDResolution
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::callSetHUDResolution ( )
{
	static UFunction* pFncallSetHUDResolution = NULL;

	if ( ! pFncallSetHUDResolution )
		pFncallSetHUDResolution = (UFunction*) UObject::GObjObjects()->Data[ 51378 ];

	USanctumHUDGFxCircle_execcallSetHUDResolution_Parms callSetHUDResolution_Parms;

	this->ProcessEvent ( pFncallSetHUDResolution, &callSetHUDResolution_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.setBuildThingsVisible
// [0x00020002] 
// Parameters infos:
// unsigned long                  hide                           ( CPF_Parm )

void USanctumHUDGFxCircle::setBuildThingsVisible ( unsigned long hide )
{
	static UFunction* pFnsetBuildThingsVisible = NULL;

	if ( ! pFnsetBuildThingsVisible )
		pFnsetBuildThingsVisible = (UFunction*) UObject::GObjObjects()->Data[ 51376 ];

	USanctumHUDGFxCircle_execsetBuildThingsVisible_Parms setBuildThingsVisible_Parms;
	setBuildThingsVisible_Parms.hide = hide;

	this->ProcessEvent ( pFnsetBuildThingsVisible, &setBuildThingsVisible_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.Visible
// [0x00020002] 
// Parameters infos:
// unsigned long                  hide                           ( CPF_Parm )

void USanctumHUDGFxCircle::Visible ( unsigned long hide )
{
	static UFunction* pFnVisible = NULL;

	if ( ! pFnVisible )
		pFnVisible = (UFunction*) UObject::GObjObjects()->Data[ 51374 ];

	USanctumHUDGFxCircle_execVisible_Parms Visible_Parms;
	Visible_Parms.hide = hide;

	this->ProcessEvent ( pFnVisible, &Visible_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.setNotifierText
// [0x00020002] 
// Parameters infos:
// struct FString                 txt                            ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxCircle::setNotifierText ( struct FString txt )
{
	static UFunction* pFnsetNotifierText = NULL;

	if ( ! pFnsetNotifierText )
		pFnsetNotifierText = (UFunction*) UObject::GObjObjects()->Data[ 51372 ];

	USanctumHUDGFxCircle_execsetNotifierText_Parms setNotifierText_Parms;
	memcpy ( &setNotifierText_Parms.txt, &txt, 0xC );

	this->ProcessEvent ( pFnsetNotifierText, &setNotifierText_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.ClassicTimeChanged
// [0x00020002] 
// Parameters infos:
// int                            TimeLeft                       ( CPF_Parm )

void USanctumHUDGFxCircle::ClassicTimeChanged ( int TimeLeft )
{
	static UFunction* pFnClassicTimeChanged = NULL;

	if ( ! pFnClassicTimeChanged )
		pFnClassicTimeChanged = (UFunction*) UObject::GObjObjects()->Data[ 51369 ];

	USanctumHUDGFxCircle_execClassicTimeChanged_Parms ClassicTimeChanged_Parms;
	ClassicTimeChanged_Parms.TimeLeft = TimeLeft;

	this->ProcessEvent ( pFnClassicTimeChanged, &ClassicTimeChanged_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.callSetHUDPosition
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::callSetHUDPosition ( )
{
	static UFunction* pFncallSetHUDPosition = NULL;

	if ( ! pFncallSetHUDPosition )
		pFncallSetHUDPosition = (UFunction*) UObject::GObjObjects()->Data[ 51368 ];

	USanctumHUDGFxCircle_execcallSetHUDPosition_Parms callSetHUDPosition_Parms;

	this->ProcessEvent ( pFncallSetHUDPosition, &callSetHUDPosition_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.InitPartyColors
// [0x00020002] 
// Parameters infos:

void USanctumHUDGFxCircle::InitPartyColors ( )
{
	static UFunction* pFnInitPartyColors = NULL;

	if ( ! pFnInitPartyColors )
		pFnInitPartyColors = (UFunction*) UObject::GObjObjects()->Data[ 51367 ];

	USanctumHUDGFxCircle_execInitPartyColors_Parms InitPartyColors_Parms;

	this->ProcessEvent ( pFnInitPartyColors, &InitPartyColors_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.Init
// [0x00024002] 
// Parameters infos:
// class ULocalPlayer*            LocPlay                        ( CPF_OptionalParm | CPF_Parm )

void USanctumHUDGFxCircle::Init ( class ULocalPlayer* LocPlay )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 51358 ];

	USanctumHUDGFxCircle_execInit_Parms Init_Parms;
	Init_Parms.LocPlay = LocPlay;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.WeaponUpdated
// [0x00120000] 
// Parameters infos:
// class ASanctumWeapon*          Weapon                         ( CPF_Parm )
// int                            CurrentLevel                   ( CPF_Parm )

void USanctumHUDGFxCircle::WeaponUpdated ( class ASanctumWeapon* Weapon, int CurrentLevel )
{
	static UFunction* pFnWeaponUpdated = NULL;

	if ( ! pFnWeaponUpdated )
		pFnWeaponUpdated = (UFunction*) UObject::GObjObjects()->Data[ 51275 ];

	USanctumHUDGFxCircle_execWeaponUpdated_Parms WeaponUpdated_Parms;
	WeaponUpdated_Parms.Weapon = Weapon;
	WeaponUpdated_Parms.CurrentLevel = CurrentLevel;

	this->ProcessEvent ( pFnWeaponUpdated, &WeaponUpdated_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxCircle.HologramUpdated
// [0x00120000] 
// Parameters infos:
// class UClass*                  hologram                       ( CPF_Parm )

void USanctumHUDGFxCircle::HologramUpdated ( class UClass* hologram )
{
	static UFunction* pFnHologramUpdated = NULL;

	if ( ! pFnHologramUpdated )
		pFnHologramUpdated = (UFunction*) UObject::GObjObjects()->Data[ 51272 ];

	USanctumHUDGFxCircle_execHologramUpdated_Parms HologramUpdated_Parms;
	HologramUpdated_Parms.hologram = hologram;

	this->ProcessEvent ( pFnHologramUpdated, &HologramUpdated_Parms, NULL );
};

// Function Sanctum.SanctumTowerInterface.StopOverview
// [0x00020100] 
// Parameters infos:

void USanctumTowerInterface::StopOverview ( )
{
	static UFunction* pFnStopOverview = NULL;

	if ( ! pFnStopOverview )
		pFnStopOverview = (UFunction*) UObject::GObjObjects()->Data[ 55823 ];

	USanctumTowerInterface_execStopOverview_Parms StopOverview_Parms;

	this->ProcessEvent ( pFnStopOverview, &StopOverview_Parms, NULL );
};

// Function Sanctum.SanctumTowerInterface.StartOverview
// [0x00020100] 
// Parameters infos:

void USanctumTowerInterface::StartOverview ( )
{
	static UFunction* pFnStartOverview = NULL;

	if ( ! pFnStartOverview )
		pFnStartOverview = (UFunction*) UObject::GObjObjects()->Data[ 55822 ];

	USanctumTowerInterface_execStartOverview_Parms StartOverview_Parms;

	this->ProcessEvent ( pFnStartOverview, &StartOverview_Parms, NULL );
};

// Function Sanctum.SanctumTowerInterface.StopHighlight
// [0x00020100] 
// Parameters infos:

void USanctumTowerInterface::StopHighlight ( )
{
	static UFunction* pFnStopHighlight = NULL;

	if ( ! pFnStopHighlight )
		pFnStopHighlight = (UFunction*) UObject::GObjObjects()->Data[ 55821 ];

	USanctumTowerInterface_execStopHighlight_Parms StopHighlight_Parms;

	this->ProcessEvent ( pFnStopHighlight, &StopHighlight_Parms, NULL );
};

// Function Sanctum.SanctumTowerInterface.StartHighlight
// [0x00020100] 
// Parameters infos:

void USanctumTowerInterface::StartHighlight ( )
{
	static UFunction* pFnStartHighlight = NULL;

	if ( ! pFnStartHighlight )
		pFnStartHighlight = (UFunction*) UObject::GObjObjects()->Data[ 55820 ];

	USanctumTowerInterface_execStartHighlight_Parms StartHighlight_Parms;

	this->ProcessEvent ( pFnStartHighlight, &StartHighlight_Parms, NULL );
};

// Function Sanctum.SanctumHUDGfxBase.ShowPopup
// [0x00020002] 
// Parameters infos:
// struct FString                 popupFrame                     ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGfxBase::ShowPopup ( struct FString popupFrame )
{
	static UFunction* pFnShowPopup = NULL;

	if ( ! pFnShowPopup )
		pFnShowPopup = (UFunction*) UObject::GObjObjects()->Data[ 50649 ];

	USanctumHUDGfxBase_execShowPopup_Parms ShowPopup_Parms;
	memcpy ( &ShowPopup_Parms.popupFrame, &popupFrame, 0xC );

	this->ProcessEvent ( pFnShowPopup, &ShowPopup_Parms, NULL );
};

// Function Sanctum.SanctumRangeIndicator.SetRange
// [0x00020002] 
// Parameters infos:
// float                          MaxRange                       ( CPF_Parm )
// float                          minRange                       ( CPF_Parm )

void ASanctumRangeIndicator::SetRange ( float MaxRange, float minRange )
{
	static UFunction* pFnSetRange = NULL;

	if ( ! pFnSetRange )
		pFnSetRange = (UFunction*) UObject::GObjObjects()->Data[ 54797 ];

	ASanctumRangeIndicator_execSetRange_Parms SetRange_Parms;
	SetRange_Parms.MaxRange = MaxRange;
	SetRange_Parms.minRange = minRange;

	this->ProcessEvent ( pFnSetRange, &SetRange_Parms, NULL );
};

// Function Sanctum.SanctumRangeIndicator.SetOwningTowerBase
// [0x00824002] 
// Parameters infos:
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )
// class UClass*                  plannedTower                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumRangeIndicator::SetOwningTowerBase ( class ASanctumTowerBase* TowerBase, class UClass* plannedTower )
{
	static UFunction* pFnSetOwningTowerBase = NULL;

	if ( ! pFnSetOwningTowerBase )
		pFnSetOwningTowerBase = (UFunction*) UObject::GObjObjects()->Data[ 54790 ];

	ASanctumRangeIndicator_execSetOwningTowerBase_Parms SetOwningTowerBase_Parms;
	SetOwningTowerBase_Parms.TowerBase = TowerBase;
	SetOwningTowerBase_Parms.plannedTower = plannedTower;

	this->ProcessEvent ( pFnSetOwningTowerBase, &SetOwningTowerBase_Parms, NULL );
};

// Function Sanctum.SanctumRangeIndicator.CreateAndSetMaterialInstanceConstant
// [0x00020002] 
// Parameters infos:
// class UMaterialInstanceConstant* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UMaterialInstanceConstant* ASanctumRangeIndicator::CreateAndSetMaterialInstanceConstant ( )
{
	static UFunction* pFnCreateAndSetMaterialInstanceConstant = NULL;

	if ( ! pFnCreateAndSetMaterialInstanceConstant )
		pFnCreateAndSetMaterialInstanceConstant = (UFunction*) UObject::GObjObjects()->Data[ 54787 ];

	ASanctumRangeIndicator_execCreateAndSetMaterialInstanceConstant_Parms CreateAndSetMaterialInstanceConstant_Parms;

	this->ProcessEvent ( pFnCreateAndSetMaterialInstanceConstant, &CreateAndSetMaterialInstanceConstant_Parms, NULL );

	return CreateAndSetMaterialInstanceConstant_Parms.ReturnValue;
};

// Function Sanctum.SanctumRangeIndicator.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumRangeIndicator::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 54786 ];

	ASanctumRangeIndicator_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_BuiltTower.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_BuiltTower::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55283 ];

	USanctumSeqEvent_BuiltTower_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_SoldTower.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_SoldTower::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55333 ];

	USanctumSeqEvent_SoldTower_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_EnterWeaponStore.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_EnterWeaponStore::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55291 ];

	USanctumSeqEvent_EnterWeaponStore_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_UpgradedWeapon.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_UpgradedWeapon::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55356 ];

	USanctumSeqEvent_UpgradedWeapon_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_SelectedTower.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_SelectedTower::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55327 ];

	USanctumSeqEvent_SelectedTower_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_UpgradedTower.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_UpgradedTower::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55354 ];

	USanctumSeqEvent_UpgradedTower_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_AimedAtTower.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_AimedAtTower::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55281 ];

	USanctumSeqEvent_AimedAtTower_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumTowerEffect.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASanctumTowerEffect::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57137 ];

	ASanctumTowerEffect_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumLocalMessageSell.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString USanctumLocalMessageSell::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 52529 ];

	USanctumLocalMessageSell_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Sanctum.SanctumLocalMessageHelpBuild.GetColor
// [0x00026002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FColor USanctumLocalMessageHelpBuild::GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetColor = NULL;

	if ( ! pFnGetColor )
		pFnGetColor = (UFunction*) UObject::GObjObjects()->Data[ 52465 ];

	USanctumLocalMessageHelpBuild_execGetColor_Parms GetColor_Parms;
	GetColor_Parms.Switch = Switch;
	GetColor_Parms.RelatedPRI = RelatedPRI;
	GetColor_Parms.RelatedPRI01 = RelatedPRI01;
	GetColor_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetColor, &GetColor_Parms, NULL );

	return GetColor_Parms.ReturnValue;
};

// Function Sanctum.SanctumLocalMessageHelpBuild.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString USanctumLocalMessageHelpBuild::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 52454 ];

	USanctumLocalMessageHelpBuild_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Sanctum.SanctumLocalMessageHelpUpgrade.GetColor
// [0x00026002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FColor USanctumLocalMessageHelpUpgrade::GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetColor = NULL;

	if ( ! pFnGetColor )
		pFnGetColor = (UFunction*) UObject::GObjObjects()->Data[ 52483 ];

	USanctumLocalMessageHelpUpgrade_execGetColor_Parms GetColor_Parms;
	GetColor_Parms.Switch = Switch;
	GetColor_Parms.RelatedPRI = RelatedPRI;
	GetColor_Parms.RelatedPRI01 = RelatedPRI01;
	GetColor_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetColor, &GetColor_Parms, NULL );

	return GetColor_Parms.ReturnValue;
};

// Function Sanctum.SanctumLocalMessageHelpUpgrade.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString USanctumLocalMessageHelpUpgrade::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 52472 ];

	USanctumLocalMessageHelpUpgrade_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Sanctum.SanctumHUDGFxSplash.switchTexture
// [0x00020002] 
// Parameters infos:
// struct FString                 TextureName                    ( CPF_Parm | CPF_NeedCtorLink )

void USanctumHUDGFxSplash::switchTexture ( struct FString TextureName )
{
	static UFunction* pFnswitchTexture = NULL;

	if ( ! pFnswitchTexture )
		pFnswitchTexture = (UFunction*) UObject::GObjObjects()->Data[ 52024 ];

	USanctumHUDGFxSplash_execswitchTexture_Parms switchTexture_Parms;
	memcpy ( &switchTexture_Parms.TextureName, &TextureName, 0xC );

	this->ProcessEvent ( pFnswitchTexture, &switchTexture_Parms, NULL );
};

// Function Sanctum.SanctumHUDGFxSplash.Start
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  StartPaused                    ( CPF_OptionalParm | CPF_Parm )

bool USanctumHUDGFxSplash::Start ( unsigned long StartPaused )
{
	static UFunction* pFnStart = NULL;

	if ( ! pFnStart )
		pFnStart = (UFunction*) UObject::GObjObjects()->Data[ 52021 ];

	USanctumHUDGFxSplash_execStart_Parms Start_Parms;
	Start_Parms.StartPaused = StartPaused;

	this->ProcessEvent ( pFnStart, &Start_Parms, NULL );

	return Start_Parms.ReturnValue;
};

// Function Sanctum.SanctumLocalMessageRecord.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString USanctumLocalMessageRecord::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 52505 ];

	USanctumLocalMessageRecord_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Sanctum.SanctumLocalMessageBuild.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString USanctumLocalMessageBuild::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 52428 ];

	USanctumLocalMessageBuild_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Sanctum.SanctumLocalMessagePickup.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString USanctumLocalMessagePickup::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 52493 ];

	USanctumLocalMessagePickup_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Sanctum.SanctumLocalMessageUpgrade.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString USanctumLocalMessageUpgrade::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 52542 ];

	USanctumLocalMessageUpgrade_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Sanctum.SanctumLocalMessageUpgradeWeapon.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString USanctumLocalMessageUpgradeWeapon::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 52555 ];

	USanctumLocalMessageUpgradeWeapon_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Sanctum.SanctumMenuController.CanCommunicate
// [0x00080102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumMenuController::CanCommunicate ( )
{
	static UFunction* pFnCanCommunicate = NULL;

	if ( ! pFnCanCommunicate )
		pFnCanCommunicate = (UFunction*) UObject::GObjObjects()->Data[ 53253 ];

	ASanctumMenuController_execCanCommunicate_Parms CanCommunicate_Parms;

	this->ProcessEvent ( pFnCanCommunicate, &CanCommunicate_Parms, NULL );

	return CanCommunicate_Parms.ReturnValue;
};

// Function Sanctum.SanctumMenuController.changeState
// [0x00020002] 
// Parameters infos:
// struct FName                   StateName                      ( CPF_Parm )

void ASanctumMenuController::changeState ( struct FName StateName )
{
	static UFunction* pFnchangeState = NULL;

	if ( ! pFnchangeState )
		pFnchangeState = (UFunction*) UObject::GObjObjects()->Data[ 53251 ];

	ASanctumMenuController_execchangeState_Parms changeState_Parms;
	memcpy ( &changeState_Parms.StateName, &StateName, 0x8 );

	this->ProcessEvent ( pFnchangeState, &changeState_Parms, NULL );
};

// Function Sanctum.SanctumMenuController.ShowSteamFriends
// [0x00020002] 
// Parameters infos:

void ASanctumMenuController::ShowSteamFriends ( )
{
	static UFunction* pFnShowSteamFriends = NULL;

	if ( ! pFnShowSteamFriends )
		pFnShowSteamFriends = (UFunction*) UObject::GObjObjects()->Data[ 53249 ];

	ASanctumMenuController_execShowSteamFriends_Parms ShowSteamFriends_Parms;

	this->ProcessEvent ( pFnShowSteamFriends, &ShowSteamFriends_Parms, NULL );
};

// Function Sanctum.SanctumMenuController.updateWebData
// [0x00020002] 
// Parameters infos:

void ASanctumMenuController::updateWebData ( )
{
	static UFunction* pFnupdateWebData = NULL;

	if ( ! pFnupdateWebData )
		pFnupdateWebData = (UFunction*) UObject::GObjObjects()->Data[ 53248 ];

	ASanctumMenuController_execupdateWebData_Parms updateWebData_Parms;

	this->ProcessEvent ( pFnupdateWebData, &updateWebData_Parms, NULL );
};

// Function Sanctum.SanctumMenuController.Save
// [0x00020002] 
// Parameters infos:

void ASanctumMenuController::Save ( )
{
	static UFunction* pFnSave = NULL;

	if ( ! pFnSave )
		pFnSave = (UFunction*) UObject::GObjObjects()->Data[ 53247 ];

	ASanctumMenuController_execSave_Parms Save_Parms;

	this->ProcessEvent ( pFnSave, &Save_Parms, NULL );
};

// Function Sanctum.SanctumMenuController.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASanctumMenuController::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 53245 ];

	ASanctumMenuController_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumMenuController.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumMenuController::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 53244 ];

	ASanctumMenuController_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTeleportInterface.getLocation
// [0x00020100] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector USanctumTeleportInterface::getLocation ( )
{
	static UFunction* pFngetLocation = NULL;

	if ( ! pFngetLocation )
		pFngetLocation = (UFunction*) UObject::GObjObjects()->Data[ 53887 ];

	USanctumTeleportInterface_execgetLocation_Parms getLocation_Parms;

	this->ProcessEvent ( pFngetLocation, &getLocation_Parms, NULL );

	return getLocation_Parms.ReturnValue;
};

// Function Sanctum.SanctumPathingCommonRoute.UpdatePath
// [0x00020102] 
// Parameters infos:

void USanctumPathingCommonRoute::UpdatePath ( )
{
	static UFunction* pFnUpdatePath = NULL;

	if ( ! pFnUpdatePath )
		pFnUpdatePath = (UFunction*) UObject::GObjObjects()->Data[ 53376 ];

	USanctumPathingCommonRoute_execUpdatePath_Parms UpdatePath_Parms;

	this->ProcessEvent ( pFnUpdatePath, &UpdatePath_Parms, NULL );
};

// Function Sanctum.SanctumPathingCommonRoute.CheckIfPathShouldUpdate
// [0x00020102] 
// Parameters infos:

void USanctumPathingCommonRoute::CheckIfPathShouldUpdate ( )
{
	static UFunction* pFnCheckIfPathShouldUpdate = NULL;

	if ( ! pFnCheckIfPathShouldUpdate )
		pFnCheckIfPathShouldUpdate = (UFunction*) UObject::GObjObjects()->Data[ 53375 ];

	USanctumPathingCommonRoute_execCheckIfPathShouldUpdate_Parms CheckIfPathShouldUpdate_Parms;

	this->ProcessEvent ( pFnCheckIfPathShouldUpdate, &CheckIfPathShouldUpdate_Parms, NULL );
};

// Function Sanctum.SanctumPathingCommonRoute.SetPathingLOD
// [0x00020102] 
// Parameters infos:
// unsigned long                  inOverview                     ( CPF_Parm )

void USanctumPathingCommonRoute::SetPathingLOD ( unsigned long inOverview )
{
	static UFunction* pFnSetPathingLOD = NULL;

	if ( ! pFnSetPathingLOD )
		pFnSetPathingLOD = (UFunction*) UObject::GObjObjects()->Data[ 53371 ];

	USanctumPathingCommonRoute_execSetPathingLOD_Parms SetPathingLOD_Parms;
	SetPathingLOD_Parms.inOverview = inOverview;

	this->ProcessEvent ( pFnSetPathingLOD, &SetPathingLOD_Parms, NULL );
};

// Function Sanctum.SanctumPathingCommonRoute.ShowPath
// [0x00020102] 
// Parameters infos:

void USanctumPathingCommonRoute::ShowPath ( )
{
	static UFunction* pFnShowPath = NULL;

	if ( ! pFnShowPath )
		pFnShowPath = (UFunction*) UObject::GObjObjects()->Data[ 53364 ];

	USanctumPathingCommonRoute_execShowPath_Parms ShowPath_Parms;

	this->ProcessEvent ( pFnShowPath, &ShowPath_Parms, NULL );
};

// Function Sanctum.SanctumPathingCommonRoute.CalculateNewCommonPath
// [0x00020102] 
// Parameters infos:
// TArray< class ANavigationPoint* > newRoute                       ( CPF_Parm | CPF_NeedCtorLink )

void USanctumPathingCommonRoute::CalculateNewCommonPath ( TArray< class ANavigationPoint* > newRoute )
{
	static UFunction* pFnCalculateNewCommonPath = NULL;

	if ( ! pFnCalculateNewCommonPath )
		pFnCalculateNewCommonPath = (UFunction*) UObject::GObjObjects()->Data[ 53358 ];

	USanctumPathingCommonRoute_execCalculateNewCommonPath_Parms CalculateNewCommonPath_Parms;
	memcpy ( &CalculateNewCommonPath_Parms.newRoute, &newRoute, 0xC );

	this->ProcessEvent ( pFnCalculateNewCommonPath, &CalculateNewCommonPath_Parms, NULL );
};

// Function Sanctum.SanctumPathingCommonRoute.AddDummyAI
// [0x00020102] 
// Parameters infos:
// class ASanctumAIDummy*         newDummy                       ( CPF_Parm )

void USanctumPathingCommonRoute::AddDummyAI ( class ASanctumAIDummy* newDummy )
{
	static UFunction* pFnAddDummyAI = NULL;

	if ( ! pFnAddDummyAI )
		pFnAddDummyAI = (UFunction*) UObject::GObjObjects()->Data[ 53356 ];

	USanctumPathingCommonRoute_execAddDummyAI_Parms AddDummyAI_Parms;
	AddDummyAI_Parms.newDummy = newDummy;

	this->ProcessEvent ( pFnAddDummyAI, &AddDummyAI_Parms, NULL );
};

// Function Sanctum.SanctumWavespawnerEndless.isHeavyWave
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Difficulty                     ( CPF_Parm )
// int                            Wave                           ( CPF_Parm )

bool ASanctumWavespawnerEndless::isHeavyWave ( unsigned char Difficulty, int Wave )
{
	static UFunction* pFnisHeavyWave = NULL;

	if ( ! pFnisHeavyWave )
		pFnisHeavyWave = (UFunction*) UObject::GObjObjects()->Data[ 57547 ];

	ASanctumWavespawnerEndless_execisHeavyWave_Parms isHeavyWave_Parms;
	isHeavyWave_Parms.Difficulty = Difficulty;
	isHeavyWave_Parms.Wave = Wave;

	this->ProcessEvent ( pFnisHeavyWave, &isHeavyWave_Parms, NULL );

	return isHeavyWave_Parms.ReturnValue;
};

// Function Sanctum.SanctumWavespawnerEndless.GetNumberOfEnemytypes
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Difficulty                     ( CPF_Parm )
// int                            Wave                           ( CPF_Parm )

int ASanctumWavespawnerEndless::GetNumberOfEnemytypes ( unsigned char Difficulty, int Wave )
{
	static UFunction* pFnGetNumberOfEnemytypes = NULL;

	if ( ! pFnGetNumberOfEnemytypes )
		pFnGetNumberOfEnemytypes = (UFunction*) UObject::GObjObjects()->Data[ 57542 ];

	ASanctumWavespawnerEndless_execGetNumberOfEnemytypes_Parms GetNumberOfEnemytypes_Parms;
	GetNumberOfEnemytypes_Parms.Difficulty = Difficulty;
	GetNumberOfEnemytypes_Parms.Wave = Wave;

	this->ProcessEvent ( pFnGetNumberOfEnemytypes, &GetNumberOfEnemytypes_Parms, NULL );

	return GetNumberOfEnemytypes_Parms.ReturnValue;
};

// Function Sanctum.SanctumWavespawnerEndless.notifyHeavyWave
// [0x00020002] 
// Parameters infos:

void ASanctumWavespawnerEndless::notifyHeavyWave ( )
{
	static UFunction* pFnnotifyHeavyWave = NULL;

	if ( ! pFnnotifyHeavyWave )
		pFnnotifyHeavyWave = (UFunction*) UObject::GObjObjects()->Data[ 57538 ];

	ASanctumWavespawnerEndless_execnotifyHeavyWave_Parms notifyHeavyWave_Parms;

	this->ProcessEvent ( pFnnotifyHeavyWave, &notifyHeavyWave_Parms, NULL );
};

// Function Sanctum.SanctumWavespawnerEndless.test__rouletteWheelSelectionTest
// [0x00820002] 
// Parameters infos:
// int                            attempts                       ( CPF_Parm )

void ASanctumWavespawnerEndless::test__rouletteWheelSelectionTest ( int attempts )
{
	static UFunction* pFntest__rouletteWheelSelectionTest = NULL;

	if ( ! pFntest__rouletteWheelSelectionTest )
		pFntest__rouletteWheelSelectionTest = (UFunction*) UObject::GObjObjects()->Data[ 57531 ];

	ASanctumWavespawnerEndless_exectest__rouletteWheelSelectionTest_Parms test__rouletteWheelSelectionTest_Parms;
	test__rouletteWheelSelectionTest_Parms.attempts = attempts;

	this->ProcessEvent ( pFntest__rouletteWheelSelectionTest, &test__rouletteWheelSelectionTest_Parms, NULL );
};

// Function Sanctum.SanctumWavespawnerEndless.test__enemyChosen
// [0x00420002] 
// Parameters infos:
// class ASanctumEnemy*           E                              ( CPF_Parm )
// TArray< struct FTestData >     Data                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumWavespawnerEndless::test__enemyChosen ( class ASanctumEnemy* E, TArray< struct FTestData >* Data )
{
	static UFunction* pFntest__enemyChosen = NULL;

	if ( ! pFntest__enemyChosen )
		pFntest__enemyChosen = (UFunction*) UObject::GObjObjects()->Data[ 57526 ];

	ASanctumWavespawnerEndless_exectest__enemyChosen_Parms test__enemyChosen_Parms;
	test__enemyChosen_Parms.E = E;

	this->ProcessEvent ( pFntest__enemyChosen, &test__enemyChosen_Parms, NULL );

	if ( Data )
		memcpy ( Data, &test__enemyChosen_Parms.Data, 0xC );
};

// Function Sanctum.SanctumWavespawnerEndless.giveReward
// [0x00020002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void ASanctumWavespawnerEndless::giveReward ( int Wave )
{
	static UFunction* pFngiveReward = NULL;

	if ( ! pFngiveReward )
		pFngiveReward = (UFunction*) UObject::GObjObjects()->Data[ 57521 ];

	ASanctumWavespawnerEndless_execgiveReward_Parms giveReward_Parms;
	giveReward_Parms.Wave = Wave;

	this->ProcessEvent ( pFngiveReward, &giveReward_Parms, NULL );
};

// Function Sanctum.SanctumWavespawnerEndless.GenerateNewWave
// [0x00820002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void ASanctumWavespawnerEndless::GenerateNewWave ( int Wave )
{
	static UFunction* pFnGenerateNewWave = NULL;

	if ( ! pFnGenerateNewWave )
		pFnGenerateNewWave = (UFunction*) UObject::GObjObjects()->Data[ 57508 ];

	ASanctumWavespawnerEndless_execGenerateNewWave_Parms GenerateNewWave_Parms;
	GenerateNewWave_Parms.Wave = Wave;

	this->ProcessEvent ( pFnGenerateNewWave, &GenerateNewWave_Parms, NULL );
};

// Function Sanctum.SanctumWavespawnerEndless.MapHaveBossWave
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumWavespawnerEndless::MapHaveBossWave ( )
{
	static UFunction* pFnMapHaveBossWave = NULL;

	if ( ! pFnMapHaveBossWave )
		pFnMapHaveBossWave = (UFunction*) UObject::GObjObjects()->Data[ 57505 ];

	ASanctumWavespawnerEndless_execMapHaveBossWave_Parms MapHaveBossWave_Parms;

	this->ProcessEvent ( pFnMapHaveBossWave, &MapHaveBossWave_Parms, NULL );

	return MapHaveBossWave_Parms.ReturnValue;
};

// Function Sanctum.SanctumWavespawnerEndless.waveComplete
// [0x00020002] 
// Parameters infos:

void ASanctumWavespawnerEndless::waveComplete ( )
{
	static UFunction* pFnwaveComplete = NULL;

	if ( ! pFnwaveComplete )
		pFnwaveComplete = (UFunction*) UObject::GObjObjects()->Data[ 57500 ];

	ASanctumWavespawnerEndless_execwaveComplete_Parms waveComplete_Parms;

	this->ProcessEvent ( pFnwaveComplete, &waveComplete_Parms, NULL );
};

// Function Sanctum.SanctumWavespawnerEndless.chooseRandomEnemy
// [0x00020002] 
// Parameters infos:
// struct FEnemyConfigEndless     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// TArray< struct FEnemyConfigEndless > Enemies                        ( CPF_Parm | CPF_NeedCtorLink )

struct FEnemyConfigEndless ASanctumWavespawnerEndless::chooseRandomEnemy ( TArray< struct FEnemyConfigEndless > Enemies )
{
	static UFunction* pFnchooseRandomEnemy = NULL;

	if ( ! pFnchooseRandomEnemy )
		pFnchooseRandomEnemy = (UFunction*) UObject::GObjObjects()->Data[ 57493 ];

	ASanctumWavespawnerEndless_execchooseRandomEnemy_Parms chooseRandomEnemy_Parms;
	memcpy ( &chooseRandomEnemy_Parms.Enemies, &Enemies, 0xC );

	this->ProcessEvent ( pFnchooseRandomEnemy, &chooseRandomEnemy_Parms, NULL );

	return chooseRandomEnemy_Parms.ReturnValue;
};

// Function Sanctum.SanctumWavespawnerEndless.delaySpawnStart
// [0x00420002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            NumEnemyTypes                  ( CPF_Parm )
// TArray< struct FEnemyConfigEndless > out_existingEnemies            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FEnemyConfigEndless     out_enemyConfig                ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

float ASanctumWavespawnerEndless::delaySpawnStart ( int NumEnemyTypes, TArray< struct FEnemyConfigEndless >* out_existingEnemies, struct FEnemyConfigEndless* out_enemyConfig )
{
	static UFunction* pFndelaySpawnStart = NULL;

	if ( ! pFndelaySpawnStart )
		pFndelaySpawnStart = (UFunction*) UObject::GObjObjects()->Data[ 57485 ];

	ASanctumWavespawnerEndless_execdelaySpawnStart_Parms delaySpawnStart_Parms;
	delaySpawnStart_Parms.NumEnemyTypes = NumEnemyTypes;

	this->ProcessEvent ( pFndelaySpawnStart, &delaySpawnStart_Parms, NULL );

	if ( out_existingEnemies )
		memcpy ( out_existingEnemies, &delaySpawnStart_Parms.out_existingEnemies, 0xC );

	if ( out_enemyConfig )
		memcpy ( out_enemyConfig, &delaySpawnStart_Parms.out_enemyConfig, 0x10 );

	return delaySpawnStart_Parms.ReturnValue;
};

// Function Sanctum.SanctumWavespawnerEndless.startWave
// [0x00820002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )

void ASanctumWavespawnerEndless::startWave ( int Wave )
{
	static UFunction* pFnstartWave = NULL;

	if ( ! pFnstartWave )
		pFnstartWave = (UFunction*) UObject::GObjObjects()->Data[ 57477 ];

	ASanctumWavespawnerEndless_execstartWave_Parms startWave_Parms;
	startWave_Parms.Wave = Wave;

	this->ProcessEvent ( pFnstartWave, &startWave_Parms, NULL );
};

// Function Sanctum.SanctumWavespawnerEndless.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWavespawnerEndless::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57471 ];

	ASanctumWavespawnerEndless_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumWavespawnerEndless.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWavespawnerEndless::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57469 ];

	ASanctumWavespawnerEndless_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumMenuInfo.Pause
// [0x00020000] 
// Parameters infos:
// class ULocalPlayer*            ownedByLocalPlayer             ( CPF_Parm )

void ASanctumMenuInfo::Pause ( class ULocalPlayer* ownedByLocalPlayer )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = (UFunction*) UObject::GObjObjects()->Data[ 53326 ];

	ASanctumMenuInfo_execPause_Parms Pause_Parms;
	Pause_Parms.ownedByLocalPlayer = ownedByLocalPlayer;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );
};

// Function Sanctum.SanctumMenuInfo.RestartPlayer
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AController*             NewPlayer                      ( CPF_Parm )

void ASanctumMenuInfo::eventRestartPlayer ( class AController* NewPlayer )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 53324 ];

	ASanctumMenuInfo_eventRestartPlayer_Parms RestartPlayer_Parms;
	RestartPlayer_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function Sanctum.SanctumMenuInfo.PostLogin
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       NewPlayer                      ( CPF_Parm )

void ASanctumMenuInfo::eventPostLogin ( class APlayerController* NewPlayer )
{
	static UFunction* pFnPostLogin = NULL;

	if ( ! pFnPostLogin )
		pFnPostLogin = (UFunction*) UObject::GObjObjects()->Data[ 53322 ];

	ASanctumMenuInfo_eventPostLogin_Parms PostLogin_Parms;
	PostLogin_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnPostLogin, &PostLogin_Parms, NULL );
};

// Function Sanctum.SanctumMenuInfo.AllowCheats
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )

bool ASanctumMenuInfo::AllowCheats ( class APlayerController* P )
{
	static UFunction* pFnAllowCheats = NULL;

	if ( ! pFnAllowCheats )
		pFnAllowCheats = (UFunction*) UObject::GObjObjects()->Data[ 53319 ];

	ASanctumMenuInfo_execAllowCheats_Parms AllowCheats_Parms;
	AllowCheats_Parms.P = P;

	this->ProcessEvent ( pFnAllowCheats, &AllowCheats_Parms, NULL );

	return AllowCheats_Parms.ReturnValue;
};

// Function Sanctum.SanctumMenuInfo.Login
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Portal                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            UniqueId                       ( CPF_Const | CPF_Parm )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class APlayerController* ASanctumMenuInfo::eventLogin ( struct FString Portal, struct FString Options, struct FUniqueNetId UniqueId, struct FString* ErrorMessage )
{
	static UFunction* pFnLogin = NULL;

	if ( ! pFnLogin )
		pFnLogin = (UFunction*) UObject::GObjObjects()->Data[ 53310 ];

	ASanctumMenuInfo_eventLogin_Parms Login_Parms;
	memcpy ( &Login_Parms.Portal, &Portal, 0xC );
	memcpy ( &Login_Parms.Options, &Options, 0xC );
	memcpy ( &Login_Parms.UniqueId, &UniqueId, 0x8 );

	this->ProcessEvent ( pFnLogin, &Login_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &Login_Parms.ErrorMessage, 0xC );

	return Login_Parms.ReturnValue;
};

// Function Sanctum.SanctumMenuInfo.PreLogin
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Address                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            UniqueId                       ( CPF_Const | CPF_Parm )
// unsigned long                  bSupportsAuth                  ( CPF_Parm )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASanctumMenuInfo::eventPreLogin ( struct FString Options, struct FString Address, struct FUniqueNetId UniqueId, unsigned long bSupportsAuth, struct FString* ErrorMessage )
{
	static UFunction* pFnPreLogin = NULL;

	if ( ! pFnPreLogin )
		pFnPreLogin = (UFunction*) UObject::GObjObjects()->Data[ 53304 ];

	ASanctumMenuInfo_eventPreLogin_Parms PreLogin_Parms;
	memcpy ( &PreLogin_Parms.Options, &Options, 0xC );
	memcpy ( &PreLogin_Parms.Address, &Address, 0xC );
	memcpy ( &PreLogin_Parms.UniqueId, &UniqueId, 0x8 );
	PreLogin_Parms.bSupportsAuth = bSupportsAuth;

	this->ProcessEvent ( pFnPreLogin, &PreLogin_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &PreLogin_Parms.ErrorMessage, 0xC );
};

// Function Sanctum.SanctumMenuInfo.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumMenuInfo::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 53303 ];

	ASanctumMenuInfo_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumMenuInfo.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumMenuInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 53302 ];

	ASanctumMenuInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTcpLinkClient.ReceivedText
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void ASanctumTcpLinkClient::eventReceivedText ( struct FString Text )
{
	static UFunction* pFnReceivedText = NULL;

	if ( ! pFnReceivedText )
		pFnReceivedText = (UFunction*) UObject::GObjObjects()->Data[ 55798 ];

	ASanctumTcpLinkClient_eventReceivedText_Parms ReceivedText_Parms;
	memcpy ( &ReceivedText_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnReceivedText, &ReceivedText_Parms, NULL );
};

// Function Sanctum.SanctumTcpLinkClient.Closed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumTcpLinkClient::eventClosed ( )
{
	static UFunction* pFnClosed = NULL;

	if ( ! pFnClosed )
		pFnClosed = (UFunction*) UObject::GObjObjects()->Data[ 55797 ];

	ASanctumTcpLinkClient_eventClosed_Parms Closed_Parms;

	this->ProcessEvent ( pFnClosed, &Closed_Parms, NULL );
};

// Function Sanctum.SanctumTcpLinkClient.Opened
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumTcpLinkClient::eventOpened ( )
{
	static UFunction* pFnOpened = NULL;

	if ( ! pFnOpened )
		pFnOpened = (UFunction*) UObject::GObjObjects()->Data[ 55796 ];

	ASanctumTcpLinkClient_eventOpened_Parms Opened_Parms;

	this->ProcessEvent ( pFnOpened, &Opened_Parms, NULL );
};

// Function Sanctum.SanctumTcpLinkClient.ResolveFailed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumTcpLinkClient::eventResolveFailed ( )
{
	static UFunction* pFnResolveFailed = NULL;

	if ( ! pFnResolveFailed )
		pFnResolveFailed = (UFunction*) UObject::GObjObjects()->Data[ 55795 ];

	ASanctumTcpLinkClient_eventResolveFailed_Parms ResolveFailed_Parms;

	this->ProcessEvent ( pFnResolveFailed, &ResolveFailed_Parms, NULL );
};

// Function Sanctum.SanctumTcpLinkClient.Resolved
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FIpAddr                 Addr                           ( CPF_Parm )

void ASanctumTcpLinkClient::eventResolved ( struct FIpAddr Addr )
{
	static UFunction* pFnResolved = NULL;

	if ( ! pFnResolved )
		pFnResolved = (UFunction*) UObject::GObjObjects()->Data[ 55792 ];

	ASanctumTcpLinkClient_eventResolved_Parms Resolved_Parms;
	memcpy ( &Resolved_Parms.Addr, &Addr, 0x8 );

	this->ProcessEvent ( pFnResolved, &Resolved_Parms, NULL );
};

// Function Sanctum.SanctumTcpLinkClient.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASanctumTcpLinkClient::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 55791 ];

	ASanctumTcpLinkClient_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_ShouldTeleportFromPathnode.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USanctumSeqEvent_ShouldTeleportFromPathnode::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 55330 ];

	USanctumSeqEvent_ShouldTeleportFromPathnode_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Sanctum.SanctumSeqEvent_ShouldTeleportFromPathnode.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_ShouldTeleportFromPathnode::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55329 ];

	USanctumSeqEvent_ShouldTeleportFromPathnode_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumPing.createParticleSystem
// [0x00020102] 
// Parameters infos:

void ASanctumPing::createParticleSystem ( )
{
	static UFunction* pFncreateParticleSystem = NULL;

	if ( ! pFncreateParticleSystem )
		pFncreateParticleSystem = (UFunction*) UObject::GObjObjects()->Data[ 53546 ];

	ASanctumPing_execcreateParticleSystem_Parms createParticleSystem_Parms;

	this->ProcessEvent ( pFncreateParticleSystem, &createParticleSystem_Parms, NULL );
};

// Function Sanctum.SanctumPing.setLinearColor
// [0x00820102] 
// Parameters infos:
// struct FLinearColor            linCol                         ( CPF_Parm )

void ASanctumPing::setLinearColor ( struct FLinearColor linCol )
{
	static UFunction* pFnsetLinearColor = NULL;

	if ( ! pFnsetLinearColor )
		pFnsetLinearColor = (UFunction*) UObject::GObjObjects()->Data[ 53543 ];

	ASanctumPing_execsetLinearColor_Parms setLinearColor_Parms;
	memcpy ( &setLinearColor_Parms.linCol, &linCol, 0x10 );

	this->ProcessEvent ( pFnsetLinearColor, &setLinearColor_Parms, NULL );
};

// Function Sanctum.SanctumPing.SetColor
// [0x00020102] 
// Parameters infos:
// struct FColor                  Col                            ( CPF_Parm )

void ASanctumPing::SetColor ( struct FColor Col )
{
	static UFunction* pFnSetColor = NULL;

	if ( ! pFnSetColor )
		pFnSetColor = (UFunction*) UObject::GObjObjects()->Data[ 53541 ];

	ASanctumPing_execSetColor_Parms SetColor_Parms;
	memcpy ( &SetColor_Parms.Col, &Col, 0x4 );

	this->ProcessEvent ( pFnSetColor, &SetColor_Parms, NULL );
};

// Function Sanctum.SanctumPing.deactivate
// [0x00020102] 
// Parameters infos:

void ASanctumPing::deactivate ( )
{
	static UFunction* pFndeactivate = NULL;

	if ( ! pFndeactivate )
		pFndeactivate = (UFunction*) UObject::GObjObjects()->Data[ 53540 ];

	ASanctumPing_execdeactivate_Parms deactivate_Parms;

	this->ProcessEvent ( pFndeactivate, &deactivate_Parms, NULL );
};

// Function Sanctum.SanctumPing.changeActive
// [0x00020102] 
// Parameters infos:

void ASanctumPing::changeActive ( )
{
	static UFunction* pFnchangeActive = NULL;

	if ( ! pFnchangeActive )
		pFnchangeActive = (UFunction*) UObject::GObjObjects()->Data[ 53539 ];

	ASanctumPing_execchangeActive_Parms changeActive_Parms;

	this->ProcessEvent ( pFnchangeActive, &changeActive_Parms, NULL );
};

// Function Sanctum.SanctumPing.Activate
// [0x00020102] 
// Parameters infos:

void ASanctumPing::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = (UFunction*) UObject::GObjObjects()->Data[ 53538 ];

	ASanctumPing_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function Sanctum.SanctumPing.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumPing::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 53536 ];

	ASanctumPing_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_ResumeGame.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_ResumeGame::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55323 ];

	USanctumSeqEvent_ResumeGame_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_EscapeMenu.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_EscapeMenu::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55293 ];

	USanctumSeqEvent_EscapeMenu_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_GameEnded.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USanctumSeqEvent_GameEnded::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 55298 ];

	USanctumSeqEvent_GameEnded_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Sanctum.SanctumSeqEvent_GameEnded.notifyGameEnded
// [0x00020002] 
// Parameters infos:
// class ASanctumPlayerController* PC                             ( CPF_Parm )

void USanctumSeqEvent_GameEnded::notifyGameEnded ( class ASanctumPlayerController* PC )
{
	static UFunction* pFnnotifyGameEnded = NULL;

	if ( ! pFnnotifyGameEnded )
		pFnnotifyGameEnded = (UFunction*) UObject::GObjObjects()->Data[ 55296 ];

	USanctumSeqEvent_GameEnded_execnotifyGameEnded_Parms notifyGameEnded_Parms;
	notifyGameEnded_Parms.PC = PC;

	this->ProcessEvent ( pFnnotifyGameEnded, &notifyGameEnded_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_GameEnded.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_GameEnded::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55295 ];

	USanctumSeqEvent_GameEnded_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_CoreDestroyed.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_CoreDestroyed::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55287 ];

	USanctumSeqEvent_CoreDestroyed_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_TeleportedOverview.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_TeleportedOverview::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55352 ];

	USanctumSeqEvent_TeleportedOverview_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_OverviewOpened.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_OverviewOpened::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55321 ];

	USanctumSeqEvent_OverviewOpened_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_WaveStarted.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USanctumSeqEvent_WaveStarted::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 55381 ];

	USanctumSeqEvent_WaveStarted_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Sanctum.SanctumSeqEvent_WaveStarted.notifyWaveStarted
// [0x00020002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )
// class AActor*                  FromActor                      ( CPF_Parm )

void USanctumSeqEvent_WaveStarted::notifyWaveStarted ( int Wave, class AActor* FromActor )
{
	static UFunction* pFnnotifyWaveStarted = NULL;

	if ( ! pFnnotifyWaveStarted )
		pFnnotifyWaveStarted = (UFunction*) UObject::GObjObjects()->Data[ 55377 ];

	USanctumSeqEvent_WaveStarted_execnotifyWaveStarted_Parms notifyWaveStarted_Parms;
	notifyWaveStarted_Parms.Wave = Wave;
	notifyWaveStarted_Parms.FromActor = FromActor;

	this->ProcessEvent ( pFnnotifyWaveStarted, &notifyWaveStarted_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_WaveStarted.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_WaveStarted::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55376 ];

	USanctumSeqEvent_WaveStarted_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumProjectileAntiAir.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectileAntiAir::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 54459 ];

	ASanctumProjectileAntiAir_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Sanctum.SanctumProjectileAntiAir.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectileAntiAir::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 54456 ];

	ASanctumProjectileAntiAir_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Sanctum.SanctumProjectileAntiAir.Launch
// [0x00020002] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )
// class ASanctumEnemy*           Target                         ( CPF_Parm )
// float                          newDamage                      ( CPF_Parm )
// float                          newDamageRadius                ( CPF_Parm )

void ASanctumProjectileAntiAir::Launch ( struct FVector Direction, class ASanctumEnemy* Target, float newDamage, float newDamageRadius )
{
	static UFunction* pFnLaunch = NULL;

	if ( ! pFnLaunch )
		pFnLaunch = (UFunction*) UObject::GObjObjects()->Data[ 54451 ];

	ASanctumProjectileAntiAir_execLaunch_Parms Launch_Parms;
	memcpy ( &Launch_Parms.Direction, &Direction, 0xC );
	Launch_Parms.Target = Target;
	Launch_Parms.newDamage = newDamage;
	Launch_Parms.newDamageRadius = newDamageRadius;

	this->ProcessEvent ( pFnLaunch, &Launch_Parms, NULL );
};

// Function Sanctum.SanctumProjectileAntiAir.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumProjectileAntiAir::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 54450 ];

	ASanctumProjectileAntiAir_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumProjectileAntiAir.HitAnEnemy
// [0x00020000] 
// Parameters infos:

void ASanctumProjectileAntiAir::HitAnEnemy ( )
{
	static UFunction* pFnHitAnEnemy = NULL;

	if ( ! pFnHitAnEnemy )
		pFnHitAnEnemy = (UFunction*) UObject::GObjObjects()->Data[ 54449 ];

	ASanctumProjectileAntiAir_execHitAnEnemy_Parms HitAnEnemy_Parms;

	this->ProcessEvent ( pFnHitAnEnemy, &HitAnEnemy_Parms, NULL );
};

// Function Sanctum.SanctumProjectileAntiAir.SearchForNewTarget
// [0x00020102] 
// Parameters infos:

void ASanctumProjectileAntiAir::SearchForNewTarget ( )
{
	static UFunction* pFnSearchForNewTarget = NULL;

	if ( ! pFnSearchForNewTarget )
		pFnSearchForNewTarget = (UFunction*) UObject::GObjObjects()->Data[ 54444 ];

	ASanctumProjectileAntiAir_execSearchForNewTarget_Parms SearchForNewTarget_Parms;

	this->ProcessEvent ( pFnSearchForNewTarget, &SearchForNewTarget_Parms, NULL );
};

// Function Sanctum.SanctumProjectileAntiAir.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumProjectileAntiAir::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 54441 ];

	ASanctumProjectileAntiAir_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumProjectileAntiAir.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumProjectileAntiAir::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 54439 ];

	ASanctumProjectileAntiAir_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumProjectileKairos.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectileKairos::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 54605 ];

	ASanctumProjectileKairos_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Sanctum.SanctumProjectileKairos.SpawnExplosionEffects
// [0x00820102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectileKairos::SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnSpawnExplosionEffects = NULL;

	if ( ! pFnSpawnExplosionEffects )
		pFnSpawnExplosionEffects = (UFunction*) UObject::GObjObjects()->Data[ 54597 ];

	ASanctumProjectileKairos_execSpawnExplosionEffects_Parms SpawnExplosionEffects_Parms;
	memcpy ( &SpawnExplosionEffects_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &SpawnExplosionEffects_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnSpawnExplosionEffects, &SpawnExplosionEffects_Parms, NULL );
};

// Function Sanctum.SanctumProjectileKairos.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectileKairos::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 54591 ];

	ASanctumProjectileKairos_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Sanctum.SanctumProjectileKairos.FindAndAssignNewTarget
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumProjectileKairos::FindAndAssignNewTarget ( )
{
	static UFunction* pFnFindAndAssignNewTarget = NULL;

	if ( ! pFnFindAndAssignNewTarget )
		pFnFindAndAssignNewTarget = (UFunction*) UObject::GObjObjects()->Data[ 54585 ];

	ASanctumProjectileKairos_execFindAndAssignNewTarget_Parms FindAndAssignNewTarget_Parms;

	this->ProcessEvent ( pFnFindAndAssignNewTarget, &FindAndAssignNewTarget_Parms, NULL );

	return FindAndAssignNewTarget_Parms.ReturnValue;
};

// Function Sanctum.SanctumProjectileKairos.HitAnEnemy
// [0x00020000] 
// Parameters infos:

void ASanctumProjectileKairos::HitAnEnemy ( )
{
	static UFunction* pFnHitAnEnemy = NULL;

	if ( ! pFnHitAnEnemy )
		pFnHitAnEnemy = (UFunction*) UObject::GObjObjects()->Data[ 54584 ];

	ASanctumProjectileKairos_execHitAnEnemy_Parms HitAnEnemy_Parms;

	this->ProcessEvent ( pFnHitAnEnemy, &HitAnEnemy_Parms, NULL );
};

// Function Sanctum.SanctumProjectileKairos.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumProjectileKairos::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 54581 ];

	ASanctumProjectileKairos_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumProjectileKairos.Launch
// [0x00020102] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )
// class ASanctumEnemyFlying*     Target                         ( CPF_Parm )
// int                            Level                          ( CPF_Parm )

void ASanctumProjectileKairos::Launch ( struct FVector Direction, class ASanctumEnemyFlying* Target, int Level )
{
	static UFunction* pFnLaunch = NULL;

	if ( ! pFnLaunch )
		pFnLaunch = (UFunction*) UObject::GObjObjects()->Data[ 54577 ];

	ASanctumProjectileKairos_execLaunch_Parms Launch_Parms;
	memcpy ( &Launch_Parms.Direction, &Direction, 0xC );
	Launch_Parms.Target = Target;
	Launch_Parms.Level = Level;

	this->ProcessEvent ( pFnLaunch, &Launch_Parms, NULL );
};

// Function Sanctum.SanctumProjectileKairos.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumProjectileKairos::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 54576 ];

	ASanctumProjectileKairos_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumProjectileKairos.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void ASanctumProjectileKairos::Init ( struct FVector Direction )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 54574 ];

	ASanctumProjectileKairos_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Sanctum.SanctumProjectileKairos.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumProjectileKairos::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 54573 ];

	ASanctumProjectileKairos_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumProjectileKairos.ReplicatedEvent
// [0x00020102] 
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumProjectileKairos::ReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 54571 ];

	ASanctumProjectileKairos_execReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumProjectileMortar.ProcessTouch
// [0x00020102] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectileMortar::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 54672 ];

	ASanctumProjectileMortar_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function Sanctum.SanctumProjectileMortar.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectileMortar::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 54667 ];

	ASanctumProjectileMortar_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Sanctum.SanctumProjectileMortar.Landed
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ASanctumProjectileMortar::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 54664 ];

	ASanctumProjectileMortar_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function Sanctum.SanctumProjectileMortar.Explode
// [0x00820102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumProjectileMortar::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 54657 ];

	ASanctumProjectileMortar_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Sanctum.SanctumProjectileMortar.Destroyed
// [0x00020102] 
// Parameters infos:

void ASanctumProjectileMortar::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 54656 ];

	ASanctumProjectileMortar_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Sanctum.SanctumProjectileMortar.deattachBeam
// [0x00020102] 
// Parameters infos:

void ASanctumProjectileMortar::deattachBeam ( )
{
	static UFunction* pFndeattachBeam = NULL;

	if ( ! pFndeattachBeam )
		pFndeattachBeam = (UFunction*) UObject::GObjObjects()->Data[ 54655 ];

	ASanctumProjectileMortar_execdeattachBeam_Parms deattachBeam_Parms;

	this->ProcessEvent ( pFndeattachBeam, &deattachBeam_Parms, NULL );
};

// Function Sanctum.SanctumProjectileMortar.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumProjectileMortar::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 54653 ];

	ASanctumProjectileMortar_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumProjectileMortar.SetToMaster
// [0x00820102] 
// Parameters infos:

void ASanctumProjectileMortar::SetToMaster ( )
{
	static UFunction* pFnSetToMaster = NULL;

	if ( ! pFnSetToMaster )
		pFnSetToMaster = (UFunction*) UObject::GObjObjects()->Data[ 54651 ];

	ASanctumProjectileMortar_execSetToMaster_Parms SetToMaster_Parms;

	this->ProcessEvent ( pFnSetToMaster, &SetToMaster_Parms, NULL );
};

// Function Sanctum.SanctumProjectileMortar.SetBuddy
// [0x00020102] 
// Parameters infos:
// class ASanctumProjectileMortar* buddy                          ( CPF_Parm )

void ASanctumProjectileMortar::SetBuddy ( class ASanctumProjectileMortar* buddy )
{
	static UFunction* pFnSetBuddy = NULL;

	if ( ! pFnSetBuddy )
		pFnSetBuddy = (UFunction*) UObject::GObjObjects()->Data[ 54649 ];

	ASanctumProjectileMortar_execSetBuddy_Parms SetBuddy_Parms;
	SetBuddy_Parms.buddy = buddy;

	this->ProcessEvent ( pFnSetBuddy, &SetBuddy_Parms, NULL );
};

// Function Sanctum.SanctumProjectileMortar.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASanctumProjectileMortar::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 54648 ];

	ASanctumProjectileMortar_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumProjectileMortar.HitAnEnemy
// [0x00020000] 
// Parameters infos:

void ASanctumProjectileMortar::HitAnEnemy ( )
{
	static UFunction* pFnHitAnEnemy = NULL;

	if ( ! pFnHitAnEnemy )
		pFnHitAnEnemy = (UFunction*) UObject::GObjObjects()->Data[ 54647 ];

	ASanctumProjectileMortar_execHitAnEnemy_Parms HitAnEnemy_Parms;

	this->ProcessEvent ( pFnHitAnEnemy, &HitAnEnemy_Parms, NULL );
};

// Function Sanctum.SanctumProjectileMortar.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumProjectileMortar::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 54645 ];

	ASanctumProjectileMortar_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumSapituGlobal.UpdateWithStars
// [0x00820002] 
// Parameters infos:
// TArray< struct FAchievementDetails > Achievements                   ( CPF_Parm | CPF_NeedCtorLink )

void USanctumSapituGlobal::UpdateWithStars ( TArray< struct FAchievementDetails > Achievements )
{
	static UFunction* pFnUpdateWithStars = NULL;

	if ( ! pFnUpdateWithStars )
		pFnUpdateWithStars = (UFunction*) UObject::GObjObjects()->Data[ 55102 ];

	USanctumSapituGlobal_execUpdateWithStars_Parms UpdateWithStars_Parms;
	memcpy ( &UpdateWithStars_Parms.Achievements, &Achievements, 0xC );

	this->ProcessEvent ( pFnUpdateWithStars, &UpdateWithStars_Parms, NULL );
};

// Function Sanctum.SanctumSapituGlobal.GetStarsForLevelFromAchievements
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Index                          ( CPF_Parm )
// TArray< struct FAchievementDetails > Achievements                   ( CPF_Parm | CPF_NeedCtorLink )

int USanctumSapituGlobal::GetStarsForLevelFromAchievements ( int Index, TArray< struct FAchievementDetails > Achievements )
{
	static UFunction* pFnGetStarsForLevelFromAchievements = NULL;

	if ( ! pFnGetStarsForLevelFromAchievements )
		pFnGetStarsForLevelFromAchievements = (UFunction*) UObject::GObjObjects()->Data[ 55097 ];

	USanctumSapituGlobal_execGetStarsForLevelFromAchievements_Parms GetStarsForLevelFromAchievements_Parms;
	GetStarsForLevelFromAchievements_Parms.Index = Index;
	memcpy ( &GetStarsForLevelFromAchievements_Parms.Achievements, &Achievements, 0xC );

	this->ProcessEvent ( pFnGetStarsForLevelFromAchievements, &GetStarsForLevelFromAchievements_Parms, NULL );

	return GetStarsForLevelFromAchievements_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapituGlobal.LaunchRetroActiveCheck
// [0x00020002] 
// Parameters infos:

void USanctumSapituGlobal::LaunchRetroActiveCheck ( )
{
	static UFunction* pFnLaunchRetroActiveCheck = NULL;

	if ( ! pFnLaunchRetroActiveCheck )
		pFnLaunchRetroActiveCheck = (UFunction*) UObject::GObjObjects()->Data[ 55094 ];

	USanctumSapituGlobal_execLaunchRetroActiveCheck_Parms LaunchRetroActiveCheck_Parms;

	this->ProcessEvent ( pFnLaunchRetroActiveCheck, &LaunchRetroActiveCheck_Parms, NULL );
};

// Function Sanctum.SanctumSapituGlobal.stringToGame
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USanctumSapituGlobal::stringToGame ( )
{
	static UFunction* pFnstringToGame = NULL;

	if ( ! pFnstringToGame )
		pFnstringToGame = (UFunction*) UObject::GObjObjects()->Data[ 54946 ];

	USanctumSapituGlobal_execstringToGame_Parms stringToGame_Parms;

	this->ProcessEvent ( pFnstringToGame, &stringToGame_Parms, NULL );

	return stringToGame_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapituGlobal.GetSaveName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USanctumSapituGlobal::GetSaveName ( )
{
	static UFunction* pFnGetSaveName = NULL;

	if ( ! pFnGetSaveName )
		pFnGetSaveName = (UFunction*) UObject::GObjObjects()->Data[ 55085 ];

	USanctumSapituGlobal_execGetSaveName_Parms GetSaveName_Parms;

	this->ProcessEvent ( pFnGetSaveName, &GetSaveName_Parms, NULL );

	return GetSaveName_Parms.ReturnValue;
};

// Function Sanctum.SanctumSapituGlobal.gameToString
// [0x00020002] 
// Parameters infos:

void USanctumSapituGlobal::gameToString ( )
{
	static UFunction* pFngameToString = NULL;

	if ( ! pFngameToString )
		pFngameToString = (UFunction*) UObject::GObjObjects()->Data[ 55075 ];

	USanctumSapituGlobal_execgameToString_Parms gameToString_Parms;

	this->ProcessEvent ( pFngameToString, &gameToString_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_ActivateHUD.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_ActivateHUD::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55117 ];

	USanctumSeqAct_ActivateHUD_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_ActivatePopup.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_ActivatePopup::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55124 ];

	USanctumSeqAct_ActivatePopup_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_ActivatePopupMovie.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_ActivatePopupMovie::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55133 ];

	USanctumSeqAct_ActivatePopupMovie_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_BringUpBuildHUD.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_BringUpBuildHUD::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55139 ];

	USanctumSeqAct_BringUpBuildHUD_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_ClosePopupMovie.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_ClosePopupMovie::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55144 ];

	USanctumSeqAct_ClosePopupMovie_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_ForceOverview.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_ForceOverview::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55150 ];

	USanctumSeqAct_ForceOverview_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_GiefRubel.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_GiefRubel::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55157 ];

	USanctumSeqAct_GiefRubel_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_KillAllEnemies.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_KillAllEnemies::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55163 ];

	USanctumSeqAct_KillAllEnemies_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_LockBuildgun.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_LockBuildgun::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55167 ];

	USanctumSeqAct_LockBuildgun_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_LockNextWave.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_LockNextWave::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55173 ];

	USanctumSeqAct_LockNextWave_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_LockOverview.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_LockOverview::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55177 ];

	USanctumSeqAct_LockOverview_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_LockSellTower.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_LockSellTower::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55181 ];

	USanctumSeqAct_LockSellTower_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_LockWeaponstore.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_LockWeaponstore::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55187 ];

	USanctumSeqAct_LockWeaponstore_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_RemoveOverview.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_RemoveOverview::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55194 ];

	USanctumSeqAct_RemoveOverview_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_SaveAuto.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_SaveAuto::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55199 ];

	USanctumSeqAct_SaveAuto_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_SaveCheckpoint.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_SaveCheckpoint::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55204 ];

	USanctumSeqAct_SaveCheckpoint_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_SetLife.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_SetLife::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55212 ];

	USanctumSeqAct_SetLife_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_SetNumEnemytypes.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_SetNumEnemytypes::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55217 ];

	USanctumSeqAct_SetNumEnemytypes_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_ShowGameOver.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_ShowGameOver::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55222 ];

	USanctumSeqAct_ShowGameOver_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_ShowMenu.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_ShowMenu::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55227 ];

	USanctumSeqAct_ShowMenu_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_TogglePathNode.Activated
// [0x00020002] 
// Parameters infos:

void USanctumSeqAct_TogglePathNode::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55236 ];

	USanctumSeqAct_TogglePathNode_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_ToggleTowerBaseHologram.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_ToggleTowerBaseHologram::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55245 ];

	USanctumSeqAct_ToggleTowerBaseHologram_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_UnlockAchievements.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_UnlockAchievements::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55251 ];

	USanctumSeqAct_UnlockAchievements_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_UnlockBuildgun.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_UnlockBuildgun::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55256 ];

	USanctumSeqAct_UnlockBuildgun_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_UnlockNextWave.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_UnlockNextWave::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55262 ];

	USanctumSeqAct_UnlockNextWave_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_UnlockOverview.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_UnlockOverview::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55266 ];

	USanctumSeqAct_UnlockOverview_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_UnlockSellTower.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_UnlockSellTower::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55270 ];

	USanctumSeqAct_UnlockSellTower_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqAct_UnlockWeaponstore.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqAct_UnlockWeaponstore::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55276 ];

	USanctumSeqAct_UnlockWeaponstore_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_HeavyWave.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USanctumSeqEvent_HeavyWave::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 55303 ];

	USanctumSeqEvent_HeavyWave_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Sanctum.SanctumSeqEvent_HeavyWave.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_HeavyWave::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55302 ];

	USanctumSeqEvent_HeavyWave_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_LoadNextLevel.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USanctumSeqEvent_LoadNextLevel::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 55318 ];

	USanctumSeqEvent_LoadNextLevel_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Sanctum.SanctumSeqEvent_LoadNextLevel.notifyLoadLevel
// [0x00020002] 
// Parameters infos:
// struct FString                 Level                          ( CPF_Parm | CPF_NeedCtorLink )
// class AActor*                  FromActor                      ( CPF_Parm )

void USanctumSeqEvent_LoadNextLevel::notifyLoadLevel ( struct FString Level, class AActor* FromActor )
{
	static UFunction* pFnnotifyLoadLevel = NULL;

	if ( ! pFnnotifyLoadLevel )
		pFnnotifyLoadLevel = (UFunction*) UObject::GObjObjects()->Data[ 55314 ];

	USanctumSeqEvent_LoadNextLevel_execnotifyLoadLevel_Parms notifyLoadLevel_Parms;
	memcpy ( &notifyLoadLevel_Parms.Level, &Level, 0xC );
	notifyLoadLevel_Parms.FromActor = FromActor;

	this->ProcessEvent ( pFnnotifyLoadLevel, &notifyLoadLevel_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_LoadNextLevel.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_LoadNextLevel::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55313 ];

	USanctumSeqEvent_LoadNextLevel_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_WaveComplete.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USanctumSeqEvent_WaveComplete::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 55364 ];

	USanctumSeqEvent_WaveComplete_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Sanctum.SanctumSeqEvent_WaveComplete.notifyWaveComplete
// [0x00020002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )
// class AActor*                  FromActor                      ( CPF_Parm )

void USanctumSeqEvent_WaveComplete::notifyWaveComplete ( int Wave, class AActor* FromActor )
{
	static UFunction* pFnnotifyWaveComplete = NULL;

	if ( ! pFnnotifyWaveComplete )
		pFnnotifyWaveComplete = (UFunction*) UObject::GObjObjects()->Data[ 55360 ];

	USanctumSeqEvent_WaveComplete_execnotifyWaveComplete_Parms notifyWaveComplete_Parms;
	notifyWaveComplete_Parms.Wave = Wave;
	notifyWaveComplete_Parms.FromActor = FromActor;

	this->ProcessEvent ( pFnnotifyWaveComplete, &notifyWaveComplete_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_WaveComplete.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_WaveComplete::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55359 ];

	USanctumSeqEvent_WaveComplete_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_WaveCompleteEndless.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USanctumSeqEvent_WaveCompleteEndless::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 55373 ];

	USanctumSeqEvent_WaveCompleteEndless_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Sanctum.SanctumSeqEvent_WaveCompleteEndless.notifyWaveComplete
// [0x00020002] 
// Parameters infos:
// int                            Wave                           ( CPF_Parm )
// class AActor*                  FromActor                      ( CPF_Parm )

void USanctumSeqEvent_WaveCompleteEndless::notifyWaveComplete ( int Wave, class AActor* FromActor )
{
	static UFunction* pFnnotifyWaveComplete = NULL;

	if ( ! pFnnotifyWaveComplete )
		pFnnotifyWaveComplete = (UFunction*) UObject::GObjObjects()->Data[ 55369 ];

	USanctumSeqEvent_WaveCompleteEndless_execnotifyWaveComplete_Parms notifyWaveComplete_Parms;
	notifyWaveComplete_Parms.Wave = Wave;
	notifyWaveComplete_Parms.FromActor = FromActor;

	this->ProcessEvent ( pFnnotifyWaveComplete, &notifyWaveComplete_Parms, NULL );
};

// Function Sanctum.SanctumSeqEvent_WaveCompleteEndless.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USanctumSeqEvent_WaveCompleteEndless::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55368 ];

	USanctumSeqEvent_WaveCompleteEndless_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Sanctum.SanctumSpawnLocationGround.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumSpawnLocationGround::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 55583 ];

	ASanctumSpawnLocationGround_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumStrawberryfish.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            DamageAmount                   ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASanctumStrawberryfish::eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 55612 ];

	ASanctumStrawberryfish_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.DamageAmount = DamageAmount;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Sanctum.SanctumTeleporter.getLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASanctumTeleporter::getLocation ( )
{
	static UFunction* pFngetLocation = NULL;

	if ( ! pFngetLocation )
		pFngetLocation = (UFunction*) UObject::GObjObjects()->Data[ 55815 ];

	ASanctumTeleporter_execgetLocation_Parms getLocation_Parms;

	this->ProcessEvent ( pFngetLocation, &getLocation_Parms, NULL );

	return getLocation_Parms.ReturnValue;
};

// Function Sanctum.SanctumTeleporter.StopHighlight
// [0x00820102] 
// Parameters infos:

void ASanctumTeleporter::StopHighlight ( )
{
	static UFunction* pFnStopHighlight = NULL;

	if ( ! pFnStopHighlight )
		pFnStopHighlight = (UFunction*) UObject::GObjObjects()->Data[ 55813 ];

	ASanctumTeleporter_execStopHighlight_Parms StopHighlight_Parms;

	this->ProcessEvent ( pFnStopHighlight, &StopHighlight_Parms, NULL );
};

// Function Sanctum.SanctumTeleporter.StartHighlight
// [0x00820102] 
// Parameters infos:

void ASanctumTeleporter::StartHighlight ( )
{
	static UFunction* pFnStartHighlight = NULL;

	if ( ! pFnStartHighlight )
		pFnStartHighlight = (UFunction*) UObject::GObjObjects()->Data[ 55811 ];

	ASanctumTeleporter_execStartHighlight_Parms StartHighlight_Parms;

	this->ProcessEvent ( pFnStartHighlight, &StartHighlight_Parms, NULL );
};

// Function Sanctum.SanctumTeleporter.StopOverview
// [0x00020102] 
// Parameters infos:

void ASanctumTeleporter::StopOverview ( )
{
	static UFunction* pFnStopOverview = NULL;

	if ( ! pFnStopOverview )
		pFnStopOverview = (UFunction*) UObject::GObjObjects()->Data[ 55810 ];

	ASanctumTeleporter_execStopOverview_Parms StopOverview_Parms;

	this->ProcessEvent ( pFnStopOverview, &StopOverview_Parms, NULL );
};

// Function Sanctum.SanctumTeleporter.StartOverview
// [0x00820102] 
// Parameters infos:

void ASanctumTeleporter::StartOverview ( )
{
	static UFunction* pFnStartOverview = NULL;

	if ( ! pFnStartOverview )
		pFnStartOverview = (UFunction*) UObject::GObjObjects()->Data[ 55808 ];

	ASanctumTeleporter_execStartOverview_Parms StartOverview_Parms;

	this->ProcessEvent ( pFnStartOverview, &StartOverview_Parms, NULL );
};

// Function Sanctum.SanctumTeleporter.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTeleporter::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 55807 ];

	ASanctumTeleporter_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponAccelerator.getFireLocation
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASanctumTowerBaseAttachmentWeaponAccelerator::getFireLocation ( )
{
	static UFunction* pFngetFireLocation = NULL;

	if ( ! pFngetFireLocation )
		pFngetFireLocation = (UFunction*) UObject::GObjObjects()->Data[ 56257 ];

	ASanctumTowerBaseAttachmentWeaponAccelerator_execgetFireLocation_Parms getFireLocation_Parms;

	this->ProcessEvent ( pFngetFireLocation, &getFireLocation_Parms, NULL );

	return getFireLocation_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponAccelerator.spawnTracer
// [0x00820102] 
// Parameters infos:
// struct FVector                 From                           ( CPF_Parm )
// struct FVector                 to                             ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponAccelerator::spawnTracer ( struct FVector From, struct FVector to )
{
	static UFunction* pFnspawnTracer = NULL;

	if ( ! pFnspawnTracer )
		pFnspawnTracer = (UFunction*) UObject::GObjObjects()->Data[ 56251 ];

	ASanctumTowerBaseAttachmentWeaponAccelerator_execspawnTracer_Parms spawnTracer_Parms;
	memcpy ( &spawnTracer_Parms.From, &From, 0xC );
	memcpy ( &spawnTracer_Parms.to, &to, 0xC );

	this->ProcessEvent ( pFnspawnTracer, &spawnTracer_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponAccelerator.SetNewCooldown
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentWeaponAccelerator::SetNewCooldown ( )
{
	static UFunction* pFnSetNewCooldown = NULL;

	if ( ! pFnSetNewCooldown )
		pFnSetNewCooldown = (UFunction*) UObject::GObjObjects()->Data[ 56250 ];

	ASanctumTowerBaseAttachmentWeaponAccelerator_execSetNewCooldown_Parms SetNewCooldown_Parms;

	this->ProcessEvent ( pFnSetNewCooldown, &SetNewCooldown_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponAccelerator.PreFire
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentWeaponAccelerator::PreFire ( )
{
	static UFunction* pFnPreFire = NULL;

	if ( ! pFnPreFire )
		pFnPreFire = (UFunction*) UObject::GObjObjects()->Data[ 56245 ];

	ASanctumTowerBaseAttachmentWeaponAccelerator_execPreFire_Parms PreFire_Parms;

	this->ProcessEvent ( pFnPreFire, &PreFire_Parms, NULL );

	return PreFire_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponAccelerator.PlayFireSound
// [0x00020102] 
// Parameters infos:
// struct FVector                 fireLocation                   ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponAccelerator::PlayFireSound ( struct FVector fireLocation )
{
	static UFunction* pFnPlayFireSound = NULL;

	if ( ! pFnPlayFireSound )
		pFnPlayFireSound = (UFunction*) UObject::GObjObjects()->Data[ 56243 ];

	ASanctumTowerBaseAttachmentWeaponAccelerator_execPlayFireSound_Parms PlayFireSound_Parms;
	memcpy ( &PlayFireSound_Parms.fireLocation, &fireLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireSound, &PlayFireSound_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponAccelerator.CalculateNewPitch
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASanctumTowerBaseAttachmentWeaponAccelerator::CalculateNewPitch ( )
{
	static UFunction* pFnCalculateNewPitch = NULL;

	if ( ! pFnCalculateNewPitch )
		pFnCalculateNewPitch = (UFunction*) UObject::GObjObjects()->Data[ 56238 ];

	ASanctumTowerBaseAttachmentWeaponAccelerator_execCalculateNewPitch_Parms CalculateNewPitch_Parms;

	this->ProcessEvent ( pFnCalculateNewPitch, &CalculateNewPitch_Parms, NULL );

	return CalculateNewPitch_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponAccelerator.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponAccelerator::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 56236 ];

	ASanctumTowerBaseAttachmentWeaponAccelerator_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponAccelerator.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseAttachmentWeaponAccelerator::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 56235 ];

	ASanctumTowerBaseAttachmentWeaponAccelerator_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponAntiAir.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponAntiAir::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 56379 ];

	ASanctumTowerBaseAttachmentWeaponAntiAir_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponAntiAir.fireRocket
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentWeaponAntiAir::fireRocket ( )
{
	static UFunction* pFnfireRocket = NULL;

	if ( ! pFnfireRocket )
		pFnfireRocket = (UFunction*) UObject::GObjObjects()->Data[ 56377 ];

	ASanctumTowerBaseAttachmentWeaponAntiAir_execfireRocket_Parms fireRocket_Parms;

	this->ProcessEvent ( pFnfireRocket, &fireRocket_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponAntiAir.getFireLocation
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASanctumTowerBaseAttachmentWeaponAntiAir::getFireLocation ( )
{
	static UFunction* pFngetFireLocation = NULL;

	if ( ! pFngetFireLocation )
		pFngetFireLocation = (UFunction*) UObject::GObjObjects()->Data[ 56373 ];

	ASanctumTowerBaseAttachmentWeaponAntiAir_execgetFireLocation_Parms getFireLocation_Parms;

	this->ProcessEvent ( pFngetFireLocation, &getFireLocation_Parms, NULL );

	return getFireLocation_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponAntiAir.PreFire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentWeaponAntiAir::PreFire ( )
{
	static UFunction* pFnPreFire = NULL;

	if ( ! pFnPreFire )
		pFnPreFire = (UFunction*) UObject::GObjObjects()->Data[ 56369 ];

	ASanctumTowerBaseAttachmentWeaponAntiAir_execPreFire_Parms PreFire_Parms;

	this->ProcessEvent ( pFnPreFire, &PreFire_Parms, NULL );

	return PreFire_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponGatling.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponGatling::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 56560 ];

	ASanctumTowerBaseAttachmentWeaponGatling_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponGatling.upgradeToLevel
// [0x00020102] 
// Parameters infos:
// int                            NewLevel                       ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponGatling::upgradeToLevel ( int NewLevel )
{
	static UFunction* pFnupgradeToLevel = NULL;

	if ( ! pFnupgradeToLevel )
		pFnupgradeToLevel = (UFunction*) UObject::GObjObjects()->Data[ 56558 ];

	ASanctumTowerBaseAttachmentWeaponGatling_execupgradeToLevel_Parms upgradeToLevel_Parms;
	upgradeToLevel_Parms.NewLevel = NewLevel;

	this->ProcessEvent ( pFnupgradeToLevel, &upgradeToLevel_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponGatling.CauseMuzzleEffect
// [0x00820102] 
// Parameters infos:
// int                            muzzleNum                      ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponGatling::CauseMuzzleEffect ( int muzzleNum )
{
	static UFunction* pFnCauseMuzzleEffect = NULL;

	if ( ! pFnCauseMuzzleEffect )
		pFnCauseMuzzleEffect = (UFunction*) UObject::GObjObjects()->Data[ 56555 ];

	ASanctumTowerBaseAttachmentWeaponGatling_execCauseMuzzleEffect_Parms CauseMuzzleEffect_Parms;
	CauseMuzzleEffect_Parms.muzzleNum = muzzleNum;

	this->ProcessEvent ( pFnCauseMuzzleEffect, &CauseMuzzleEffect_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponGatling.PlayFireSound
// [0x00020102] 
// Parameters infos:
// struct FVector                 fireLocation                   ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponGatling::PlayFireSound ( struct FVector fireLocation )
{
	static UFunction* pFnPlayFireSound = NULL;

	if ( ! pFnPlayFireSound )
		pFnPlayFireSound = (UFunction*) UObject::GObjObjects()->Data[ 56553 ];

	ASanctumTowerBaseAttachmentWeaponGatling_execPlayFireSound_Parms PlayFireSound_Parms;
	memcpy ( &PlayFireSound_Parms.fireLocation, &fireLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireSound, &PlayFireSound_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponGatling.getFireLocation
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASanctumTowerBaseAttachmentWeaponGatling::getFireLocation ( )
{
	static UFunction* pFngetFireLocation = NULL;

	if ( ! pFngetFireLocation )
		pFngetFireLocation = (UFunction*) UObject::GObjObjects()->Data[ 56549 ];

	ASanctumTowerBaseAttachmentWeaponGatling_execgetFireLocation_Parms getFireLocation_Parms;

	this->ProcessEvent ( pFngetFireLocation, &getFireLocation_Parms, NULL );

	return getFireLocation_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponGatling.PreFire
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentWeaponGatling::PreFire ( )
{
	static UFunction* pFnPreFire = NULL;

	if ( ! pFnPreFire )
		pFnPreFire = (UFunction*) UObject::GObjObjects()->Data[ 56544 ];

	ASanctumTowerBaseAttachmentWeaponGatling_execPreFire_Parms PreFire_Parms;

	this->ProcessEvent ( pFnPreFire, &PreFire_Parms, NULL );

	return PreFire_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponGauss.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponGauss::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 56611 ];

	ASanctumTowerBaseAttachmentWeaponGauss_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponGauss.spawnMuzzleFlash
// [0x00820102] 
// Parameters infos:
// struct FVector                 FlashLocation                  ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponGauss::spawnMuzzleFlash ( struct FVector FlashLocation )
{
	static UFunction* pFnspawnMuzzleFlash = NULL;

	if ( ! pFnspawnMuzzleFlash )
		pFnspawnMuzzleFlash = (UFunction*) UObject::GObjObjects()->Data[ 56607 ];

	ASanctumTowerBaseAttachmentWeaponGauss_execspawnMuzzleFlash_Parms spawnMuzzleFlash_Parms;
	memcpy ( &spawnMuzzleFlash_Parms.FlashLocation, &FlashLocation, 0xC );

	this->ProcessEvent ( pFnspawnMuzzleFlash, &spawnMuzzleFlash_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponGauss.spawnTracer
// [0x00820102] 
// Parameters infos:
// struct FVector                 From                           ( CPF_Parm )
// struct FVector                 to                             ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponGauss::spawnTracer ( struct FVector From, struct FVector to )
{
	static UFunction* pFnspawnTracer = NULL;

	if ( ! pFnspawnTracer )
		pFnspawnTracer = (UFunction*) UObject::GObjObjects()->Data[ 56601 ];

	ASanctumTowerBaseAttachmentWeaponGauss_execspawnTracer_Parms spawnTracer_Parms;
	memcpy ( &spawnTracer_Parms.From, &From, 0xC );
	memcpy ( &spawnTracer_Parms.to, &to, 0xC );

	this->ProcessEvent ( pFnspawnTracer, &spawnTracer_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponGauss.PreFire
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentWeaponGauss::PreFire ( )
{
	static UFunction* pFnPreFire = NULL;

	if ( ! pFnPreFire )
		pFnPreFire = (UFunction*) UObject::GObjObjects()->Data[ 56596 ];

	ASanctumTowerBaseAttachmentWeaponGauss_execPreFire_Parms PreFire_Parms;

	this->ProcessEvent ( pFnPreFire, &PreFire_Parms, NULL );

	return PreFire_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponKairos.fireProjectile
// [0x00820102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentWeaponKairos::fireProjectile ( )
{
	static UFunction* pFnfireProjectile = NULL;

	if ( ! pFnfireProjectile )
		pFnfireProjectile = (UFunction*) UObject::GObjObjects()->Data[ 56711 ];

	ASanctumTowerBaseAttachmentWeaponKairos_execfireProjectile_Parms fireProjectile_Parms;

	this->ProcessEvent ( pFnfireProjectile, &fireProjectile_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponKairos.getFireLocation
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASanctumTowerBaseAttachmentWeaponKairos::getFireLocation ( )
{
	static UFunction* pFngetFireLocation = NULL;

	if ( ! pFngetFireLocation )
		pFngetFireLocation = (UFunction*) UObject::GObjObjects()->Data[ 56707 ];

	ASanctumTowerBaseAttachmentWeaponKairos_execgetFireLocation_Parms getFireLocation_Parms;

	this->ProcessEvent ( pFngetFireLocation, &getFireLocation_Parms, NULL );

	return getFireLocation_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponKairos.PreFire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentWeaponKairos::PreFire ( )
{
	static UFunction* pFnPreFire = NULL;

	if ( ! pFnPreFire )
		pFnPreFire = (UFunction*) UObject::GObjObjects()->Data[ 56705 ];

	ASanctumTowerBaseAttachmentWeaponKairos_execPreFire_Parms PreFire_Parms;

	this->ProcessEvent ( pFnPreFire, &PreFire_Parms, NULL );

	return PreFire_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponLightning.spawnTracer
// [0x00820102] 
// Parameters infos:
// struct FVector                 From                           ( CPF_Parm )
// struct FVector                 to                             ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponLightning::spawnTracer ( struct FVector From, struct FVector to )
{
	static UFunction* pFnspawnTracer = NULL;

	if ( ! pFnspawnTracer )
		pFnspawnTracer = (UFunction*) UObject::GObjObjects()->Data[ 56845 ];

	ASanctumTowerBaseAttachmentWeaponLightning_execspawnTracer_Parms spawnTracer_Parms;
	memcpy ( &spawnTracer_Parms.From, &From, 0xC );
	memcpy ( &spawnTracer_Parms.to, &to, 0xC );

	this->ProcessEvent ( pFnspawnTracer, &spawnTracer_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponLightning.bounceLightning
// [0x00820102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentWeaponLightning::bounceLightning ( )
{
	static UFunction* pFnbounceLightning = NULL;

	if ( ! pFnbounceLightning )
		pFnbounceLightning = (UFunction*) UObject::GObjObjects()->Data[ 56831 ];

	ASanctumTowerBaseAttachmentWeaponLightning_execbounceLightning_Parms bounceLightning_Parms;

	this->ProcessEvent ( pFnbounceLightning, &bounceLightning_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponLightning.PreFire
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentWeaponLightning::PreFire ( )
{
	static UFunction* pFnPreFire = NULL;

	if ( ! pFnPreFire )
		pFnPreFire = (UFunction*) UObject::GObjObjects()->Data[ 56824 ];

	ASanctumTowerBaseAttachmentWeaponLightning_execPreFire_Parms PreFire_Parms;

	this->ProcessEvent ( pFnPreFire, &PreFire_Parms, NULL );

	return PreFire_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponLightning.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponLightning::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 56822 ];

	ASanctumTowerBaseAttachmentWeaponLightning_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponMortar.getFireLocation
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASanctumTowerBaseAttachmentWeaponMortar::getFireLocation ( )
{
	static UFunction* pFngetFireLocation = NULL;

	if ( ! pFngetFireLocation )
		pFngetFireLocation = (UFunction*) UObject::GObjObjects()->Data[ 56917 ];

	ASanctumTowerBaseAttachmentWeaponMortar_execgetFireLocation_Parms getFireLocation_Parms;

	this->ProcessEvent ( pFngetFireLocation, &getFireLocation_Parms, NULL );

	return getFireLocation_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponMortar.EndFire
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentWeaponMortar::EndFire ( )
{
	static UFunction* pFnEndFire = NULL;

	if ( ! pFnEndFire )
		pFnEndFire = (UFunction*) UObject::GObjObjects()->Data[ 56916 ];

	ASanctumTowerBaseAttachmentWeaponMortar_execEndFire_Parms EndFire_Parms;

	this->ProcessEvent ( pFnEndFire, &EndFire_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponMortar.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponMortar::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 56914 ];

	ASanctumTowerBaseAttachmentWeaponMortar_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponMortar.fireSecondMortarRound
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentWeaponMortar::fireSecondMortarRound ( )
{
	static UFunction* pFnfireSecondMortarRound = NULL;

	if ( ! pFnfireSecondMortarRound )
		pFnfireSecondMortarRound = (UFunction*) UObject::GObjObjects()->Data[ 56912 ];

	ASanctumTowerBaseAttachmentWeaponMortar_execfireSecondMortarRound_Parms fireSecondMortarRound_Parms;

	this->ProcessEvent ( pFnfireSecondMortarRound, &fireSecondMortarRound_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponMortar.fireFirstMortarRound
// [0x00020102] 
// Parameters infos:

void ASanctumTowerBaseAttachmentWeaponMortar::fireFirstMortarRound ( )
{
	static UFunction* pFnfireFirstMortarRound = NULL;

	if ( ! pFnfireFirstMortarRound )
		pFnfireFirstMortarRound = (UFunction*) UObject::GObjObjects()->Data[ 56910 ];

	ASanctumTowerBaseAttachmentWeaponMortar_execfireFirstMortarRound_Parms fireFirstMortarRound_Parms;

	this->ProcessEvent ( pFnfireFirstMortarRound, &fireFirstMortarRound_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponMortar.PreFire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentWeaponMortar::PreFire ( )
{
	static UFunction* pFnPreFire = NULL;

	if ( ! pFnPreFire )
		pFnPreFire = (UFunction*) UObject::GObjObjects()->Data[ 56906 ];

	ASanctumTowerBaseAttachmentWeaponMortar_execPreFire_Parms PreFire_Parms;

	this->ProcessEvent ( pFnPreFire, &PreFire_Parms, NULL );

	return PreFire_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponMortar.AbleToHit
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Target                         ( CPF_Parm )

bool ASanctumTowerBaseAttachmentWeaponMortar::AbleToHit ( struct FVector Target )
{
	static UFunction* pFnAbleToHit = NULL;

	if ( ! pFnAbleToHit )
		pFnAbleToHit = (UFunction*) UObject::GObjObjects()->Data[ 56900 ];

	ASanctumTowerBaseAttachmentWeaponMortar_execAbleToHit_Parms AbleToHit_Parms;
	memcpy ( &AbleToHit_Parms.Target, &Target, 0xC );

	this->ProcessEvent ( pFnAbleToHit, &AbleToHit_Parms, NULL );

	return AbleToHit_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponPenetrator.spawnTracer
// [0x00820102] 
// Parameters infos:
// struct FVector                 From                           ( CPF_Parm )
// struct FVector                 to                             ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponPenetrator::spawnTracer ( struct FVector From, struct FVector to )
{
	static UFunction* pFnspawnTracer = NULL;

	if ( ! pFnspawnTracer )
		pFnspawnTracer = (UFunction*) UObject::GObjObjects()->Data[ 56998 ];

	ASanctumTowerBaseAttachmentWeaponPenetrator_execspawnTracer_Parms spawnTracer_Parms;
	memcpy ( &spawnTracer_Parms.From, &From, 0xC );
	memcpy ( &spawnTracer_Parms.to, &to, 0xC );

	this->ProcessEvent ( pFnspawnTracer, &spawnTracer_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponPenetrator.PenetratingFire
// [0x00820102] 
// Parameters infos:
// struct FVector                 traceDirection                 ( CPF_Parm )
// struct FVector                 fireLocation                   ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponPenetrator::PenetratingFire ( struct FVector traceDirection, struct FVector fireLocation )
{
	static UFunction* pFnPenetratingFire = NULL;

	if ( ! pFnPenetratingFire )
		pFnPenetratingFire = (UFunction*) UObject::GObjObjects()->Data[ 56977 ];

	ASanctumTowerBaseAttachmentWeaponPenetrator_execPenetratingFire_Parms PenetratingFire_Parms;
	memcpy ( &PenetratingFire_Parms.traceDirection, &traceDirection, 0xC );
	memcpy ( &PenetratingFire_Parms.fireLocation, &fireLocation, 0xC );

	this->ProcessEvent ( pFnPenetratingFire, &PenetratingFire_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponPenetrator.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponPenetrator::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 56975 ];

	ASanctumTowerBaseAttachmentWeaponPenetrator_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponPenetrator.PreFire
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentWeaponPenetrator::PreFire ( )
{
	static UFunction* pFnPreFire = NULL;

	if ( ! pFnPreFire )
		pFnPreFire = (UFunction*) UObject::GObjObjects()->Data[ 56964 ];

	ASanctumTowerBaseAttachmentWeaponPenetrator_execPreFire_Parms PreFire_Parms;

	this->ProcessEvent ( pFnPreFire, &PreFire_Parms, NULL );

	return PreFire_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponScatterLaser.spawnTracer
// [0x00820102] 
// Parameters infos:
// struct FVector                 From                           ( CPF_Parm )
// struct FVector                 to                             ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponScatterLaser::spawnTracer ( struct FVector From, struct FVector to )
{
	static UFunction* pFnspawnTracer = NULL;

	if ( ! pFnspawnTracer )
		pFnspawnTracer = (UFunction*) UObject::GObjObjects()->Data[ 57051 ];

	ASanctumTowerBaseAttachmentWeaponScatterLaser_execspawnTracer_Parms spawnTracer_Parms;
	memcpy ( &spawnTracer_Parms.From, &From, 0xC );
	memcpy ( &spawnTracer_Parms.to, &to, 0xC );

	this->ProcessEvent ( pFnspawnTracer, &spawnTracer_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponScatterLaser.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASanctumTowerBaseAttachmentWeaponScatterLaser::eventTick ( float Delta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 57046 ];

	ASanctumTowerBaseAttachmentWeaponScatterLaser_eventTick_Parms Tick_Parms;
	Tick_Parms.Delta = Delta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Sanctum.SanctumTowerBaseAttachmentWeaponScatterLaser.PreFire
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASanctumTowerBaseAttachmentWeaponScatterLaser::PreFire ( )
{
	static UFunction* pFnPreFire = NULL;

	if ( ! pFnPreFire )
		pFnPreFire = (UFunction*) UObject::GObjObjects()->Data[ 57042 ];

	ASanctumTowerBaseAttachmentWeaponScatterLaser_execPreFire_Parms PreFire_Parms;

	this->ProcessEvent ( pFnPreFire, &PreFire_Parms, NULL );

	return PreFire_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerBaseElevator.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumTowerBaseElevator::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57127 ];

	ASanctumTowerBaseElevator_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTowerHologramSell.AbleToSellOnBase
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )

bool ASanctumTowerHologramSell::AbleToSellOnBase ( class ASanctumTowerBase* TowerBase )
{
	static UFunction* pFnAbleToSellOnBase = NULL;

	if ( ! pFnAbleToSellOnBase )
		pFnAbleToSellOnBase = (UFunction*) UObject::GObjObjects()->Data[ 57326 ];

	ASanctumTowerHologramSell_execAbleToSellOnBase_Parms AbleToSellOnBase_Parms;
	AbleToSellOnBase_Parms.TowerBase = TowerBase;

	this->ProcessEvent ( pFnAbleToSellOnBase, &AbleToSellOnBase_Parms, NULL );

	return AbleToSellOnBase_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramSell.getTowerClass
// [0x00020102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ASanctumTowerHologramSell::getTowerClass ( )
{
	static UFunction* pFngetTowerClass = NULL;

	if ( ! pFngetTowerClass )
		pFngetTowerClass = (UFunction*) UObject::GObjObjects()->Data[ 57324 ];

	ASanctumTowerHologramSell_execgetTowerClass_Parms getTowerClass_Parms;

	this->ProcessEvent ( pFngetTowerClass, &getTowerClass_Parms, NULL );

	return getTowerClass_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramUpgrade.AbleToUpgradeOnBase
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASanctumTowerBase*       TowerBase                      ( CPF_Parm )
// int                            Rubel                          ( CPF_Parm )

unsigned char ASanctumTowerHologramUpgrade::AbleToUpgradeOnBase ( class ASanctumTowerBase* TowerBase, int Rubel )
{
	static UFunction* pFnAbleToUpgradeOnBase = NULL;

	if ( ! pFnAbleToUpgradeOnBase )
		pFnAbleToUpgradeOnBase = (UFunction*) UObject::GObjObjects()->Data[ 57337 ];

	ASanctumTowerHologramUpgrade_execAbleToUpgradeOnBase_Parms AbleToUpgradeOnBase_Parms;
	AbleToUpgradeOnBase_Parms.TowerBase = TowerBase;
	AbleToUpgradeOnBase_Parms.Rubel = Rubel;

	this->ProcessEvent ( pFnAbleToUpgradeOnBase, &AbleToUpgradeOnBase_Parms, NULL );

	return AbleToUpgradeOnBase_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerHologramUpgrade.getTowerClass
// [0x00020102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ASanctumTowerHologramUpgrade::getTowerClass ( )
{
	static UFunction* pFngetTowerClass = NULL;

	if ( ! pFngetTowerClass )
		pFngetTowerClass = (UFunction*) UObject::GObjObjects()->Data[ 57335 ];

	ASanctumTowerHologramUpgrade_execgetTowerClass_Parms getTowerClass_Parms;

	this->ProcessEvent ( pFngetTowerClass, &getTowerClass_Parms, NULL );

	return getTowerClass_Parms.ReturnValue;
};

// Function Sanctum.SanctumTowerNavMeshObstacle.ToggleOff
// [0x00020002] 
// Parameters infos:

void ASanctumTowerNavMeshObstacle::ToggleOff ( )
{
	static UFunction* pFnToggleOff = NULL;

	if ( ! pFnToggleOff )
		pFnToggleOff = (UFunction*) UObject::GObjObjects()->Data[ 57366 ];

	ASanctumTowerNavMeshObstacle_execToggleOff_Parms ToggleOff_Parms;

	this->ProcessEvent ( pFnToggleOff, &ToggleOff_Parms, NULL );
};

// Function Sanctum.SanctumTowerNavMeshObstacle.ToggleOn
// [0x00020002] 
// Parameters infos:

void ASanctumTowerNavMeshObstacle::ToggleOn ( )
{
	static UFunction* pFnToggleOn = NULL;

	if ( ! pFnToggleOn )
		pFnToggleOn = (UFunction*) UObject::GObjObjects()->Data[ 57365 ];

	ASanctumTowerNavMeshObstacle_execToggleOn_Parms ToggleOn_Parms;

	this->ProcessEvent ( pFnToggleOn, &ToggleOn_Parms, NULL );
};

// Function Sanctum.SanctumTowerNavMeshObstacle.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ASanctumTowerNavMeshObstacle::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57363 ];

	ASanctumTowerNavMeshObstacle_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Sanctum.SanctumTrigger.UsedBy
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   User                           ( CPF_Parm )

bool ASanctumTrigger::UsedBy ( class APawn* User )
{
	static UFunction* pFnUsedBy = NULL;

	if ( ! pFnUsedBy )
		pFnUsedBy = (UFunction*) UObject::GObjObjects()->Data[ 57374 ];

	ASanctumTrigger_execUsedBy_Parms UsedBy_Parms;
	UsedBy_Parms.User = User;

	this->ProcessEvent ( pFnUsedBy, &UsedBy_Parms, NULL );

	return UsedBy_Parms.ReturnValue;
};

// Function Sanctum.SanctumTrigger.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASanctumTrigger::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 57369 ];

	ASanctumTrigger_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Sanctum.SanctumWaveSpawnerSinglePlayerAutoScaling.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASanctumWaveSpawnerSinglePlayerAutoScaling::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57554 ];

	ASanctumWaveSpawnerSinglePlayerAutoScaling_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif