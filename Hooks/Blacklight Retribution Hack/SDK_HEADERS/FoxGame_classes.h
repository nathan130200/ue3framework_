/*
#############################################################################################
# Blacklight: Retribution (0.951) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: FoxGame_classes.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_LoadoutID_Unset                                    255
#define CONST_MAX_SECRET_CODES                                   64
#define CONST_MAX_UNLOCK_HANGERS                                 100
#define CONST_MAX_BADGE_RANKS                                    3
#define CONST_MaxTraceCacheRange                                 16384
#define CONST_SMF_Changed                                        0x02
#define CONST_SMF_InEnded                                        0x01
#define CONST_UNLOCK_INVALID_ID                                  0
#define CONST_UNLOCK_ID_RANDOM_HANGER                            1
#define CONST_UNLOCK_LOADOUT_SLOT_ID                             70
#define CONST_UNLOCK_NAME_CHANGE_ID                              71
#define CONST_UNLOCK_GENDER_CHANGE_ID                            72
#define CONST_UNLOCK_SKILL_POINT_RESET_ID                        73
#define CONST_UNLOCK_CLAN_REGISTRATION_ID                        74
#define CONST_UNLOCK_BLINDBOX_GEM                                75
#define CONST_UNLOCK_SKILL_POINT_ID                              99
#define CONST_UNLOCK_COMIC_ID_START                              100
#define CONST_UNLOCK_COMIC_ID_END                                199
#define CONST_UNLOCK_TAUNT_ID_START                              300
#define CONST_UNLOCK_TAUNT_ID_END                                399
#define CONST_UNLOCK_PACK_ID_START                               700
#define CONST_UNLOCK_PACK_ID_END                                 999
#define CONST_UNLOCK_XP_BOOST_ID_START                           1000
#define CONST_UNLOCK_XP_BOOST_ID_END                             1009
#define CONST_UNLOCK_CP_BOOST_ID_START                           1010
#define CONST_UNLOCK_CP_BOOST_ID_END                             1019
#define CONST_UNLOCK_GP_BOOST_ID_START                           1020
#define CONST_UNLOCK_GP_BOOST_ID_END                             1029
#define CONST_UNLOCK_SKILL_ID_START                              1200
#define CONST_UNLOCK_SKILL_ID_END                                1250
#define CONST_UNLOCK_KEY_ID_START                                1300
#define CONST_UNLOCK_KEY_ID_END                                  1499
#define CONST_UNLOCK_LOCKBOX_ID_START                            1500
#define CONST_UNLOCK_LOCKBOX_ID_END                              1799
#define CONST_UNLOCK_GEM_START                                   2000
#define CONST_UNLOCK_GEM_END                                     3999
#define CONST_UNLOCK_GEM_REINFORCEMENT_START                     4000
#define CONST_UNLOCK_GEM_REINFORCEMENT_END                       4010
#define CONST_UNLOCK_HANGER_ID_START                             5000
#define CONST_UNLOCK_HANGER_ID_END                               5999
#define CONST_UNLOCK_PRIMARY_PRESET_ID_START                     10000
#define CONST_UNLOCK_PRIMARY_PRESET_ID_END                       10999
#define CONST_UNLOCK_SECONDARY_PRESET_ID_START                   11000
#define CONST_UNLOCK_SECONDARY_PRESET_ID_END                     11999
#define CONST_UNLOCK_GEAR_ATTACHMENT_START                       12000
#define CONST_UNLOCK_GEAR_ATTACHMENT_END                         12099
#define CONST_UNLOCK_TACTICAL_ATTACHMENT_START                   13000
#define CONST_UNLOCK_TACTICAL_ATTACHMENT_END                     13099
#define CONST_UNLOCK_DEPOT_ITEM_START                            20000
#define CONST_UNLOCK_DEPOT_ITEM_END                              20099
#define CONST_UNLOCK_LOWERBODY_START                             30100
#define CONST_UNLOCK_LOWERBODY_END                               30199
#define CONST_UNLOCK_UPPERBODY_START                             30200
#define CONST_UNLOCK_UPPERBODY_END                               30299
#define CONST_UNLOCK_HELMET_START                                30300
#define CONST_UNLOCK_HELMENT_END                                 30399
#define CONST_UNLOCK_GRENADE_START                               30500
#define CONST_UNLOCK_GRENADE_END                                 30599
#define CONST_UNLOCK_RECEIVER_START                              40000
#define CONST_UNLOCK_RECEIVER_END                                40999
#define CONST_UNLOCK_BARREL_START                                41000
#define CONST_UNLOCK_BARREL_END                                  41999
#define CONST_UNLOCK_STOCK_START                                 42000
#define CONST_UNLOCK_STOCK_END                                   42999
#define CONST_UNLOCK_MUZZLE_START                                43000
#define CONST_UNLOCK_MUZZLE_END                                  43999
#define CONST_UNLOCK_MAGAZINE_START                              44000
#define CONST_UNLOCK_MAGAZINE_END                                44999
#define CONST_UNLOCK_SCOPE_START                                 45000
#define CONST_UNLOCK_SCOPE_END                                   45999
#define CONST_UNLOCK_BADGE_START                                 46000
#define CONST_UNLOCK_BADGE_END                                   46999
#define CONST_UNLOCK_AVATAR_START                                50000
#define CONST_UNLOCK_AVATAR_END                                  50100
#define CONST_UNLOCK_CROSSHAIR_START                             60000
#define CONST_UNLOCK_CROSSHAIR_END                               60099
#define CONST_UNLOCK_TITLE_START                                 61000
#define CONST_UNLOCK_TITLE_END                                   61499
#define CONST_UNLOCK_GRIP_START                                  62000
#define CONST_UNLOCK_GRIP_END                                    62999
#define CONST_UNLOCK_DIALOG_PACK_ANNOUNCER_START                 63000
#define CONST_UNLOCK_DIALOG_PACK_ANNOUNCER_END                   63049
#define CONST_UNLOCK_DIALOG_PACK_PLAYER_START                    63050
#define CONST_UNLOCK_DIALOG_PACK_PLAYER_END                      63099
#define CONST_UNLOCK_EMBLEM_ICON_START                           64000
#define CONST_UNLOCK_EMBLEM_ICON_END                             64279
#define CONST_UNLOCK_EMBLEM_ALPHA_START                          64280
#define CONST_UNLOCK_EMBLEM_ALPHA_END                            64639
#define CONST_UNLOCK_EMBLEM_SHAPE_START                          64640
#define CONST_UNLOCK_EMBLEM_SHAPE_END                            64739
#define CONST_UNLOCK_EMBLEM_BACKGROUND_START                     64740
#define CONST_UNLOCK_EMBLEM_BACKGROUND_END                       64749
#define CONST_UNLOCK_EMBLEM_COLOR_START                          64750
#define CONST_UNLOCK_EMBLEM_COLOR_END                            64999
#define CONST_UNLOCK_AVATARSKIN_START                            65000
#define CONST_UNLOCK_AVATARSKIN_END                              74999
#define CONST_UNLOCK_BODYCAMO_ID_START                           630100
#define CONST_UNLOCK_BODYCAMO_ID_END                             630299
#define CONST_UNLOCK_WEAPONCAMO_ID_START                         630300
#define CONST_UNLOCK_WEAPONCAMO_ID_END                           630599
#define CONST_UNLOCK_GPTOKENS_START                              76000
#define CONST_UNLOCK_GPTOKENS_END                                76499
#define CONST_UNLOCK_XPTOKENS_START                              76500
#define CONST_UNLOCK_XPTOKENS_END                                76599
#define CONST_UNLOCK_PMTOKENS_START                              77000
#define CONST_UNLOCK_PMTOKENS_END                                77099
#define CONST_UNLOCK_TKTOKENS_START                              78000
#define CONST_UNLOCK_TKTOKENS_END                                78999
#define CONST_RANK_ID_FIELD_OFFICER                              7
#define CONST_RANK_ID_COMMISIONED_OFFER                          38
#define CONST_RANK_ID_COMMAND_OFFICER                            50
#define CONST_RANK_ID_GENERAL                                    62
#define CONST_KILLSTREAK_BeastMode                               20
#define CONST_KILLSTREAK_GodLike                                 10
#define CONST_KILLSTREAK_Unstoppable                             7
#define CONST_KILLSTREAK_Dominating                              5
#define CONST_KILLSTREAK_KillSpree                               3
#define CONST_ControlPointLevelRange                             100
#define CONST_GEM_QUALITY_LEVELS                                 5
#define CONST_NUM_LISTINGS_PER_PAGE                              17
#define CONST_DEATHMSG_Suicide                                   0
#define CONST_DEATHMSG_Headshot                                  1
#define CONST_DEATHMSG_Fall                                      2
#define CONST_DEATHMSG_Smite                                     3
#define CONST_DEATHMSG_Kill                                      4
#define CONST_DEATHMSG_KillWeapon                                5
#define CONST_DEATHMSG_ICON_WIDTH                                32
#define CONST_DEATHMSG_ICON_HEIGHT                               16
#define CONST_NUM_GEM_SLOTS                                      12
#define CONST_GEM_DURABILITY_LEVELS                              5
#define CONST_GEM_TYPE_OFFSET                                    10
#define CONST_Max_Gem_Sockets                                    5
#define CONST_MAX_SERVER_HISTORY                                 5
#define CONST_HudPanel_Width                                     1280
#define CONST_HudPanel_Height                                    720
#define CONST_HudPanel_HalfWidth                                 640
#define CONST_HudPanel_HalfHeight                                360
#define CONST_NumRotationTicks                                   48
#define CONST_Max_Gear_Slots                                     4
#define CONST_OWNERSHIP_DURATION                                 10000
#define CONST_PawnImpulse                                        200
#define CONST_KILLMSG_Invalid                                    -1
#define CONST_KILLMSG_KillingSpree                               0
#define CONST_KILLMSG_Dominating                                 1
#define CONST_KILLMSG_Unstoppable                                2
#define CONST_KILLMSG_Godlike                                    3
#define CONST_KILLMSG_BeastMode                                  4
#define CONST_KILLMSG_DoubleKill                                 5
#define CONST_KILLMSG_TripleKill                                 6
#define CONST_KILLMSG_OverKill                                   7
#define CONST_KILLMSG_MonsterKill                                8
#define CONST_KILLMSG_EndKillingSpree                            9
#define CONST_KILLMSG_KillNormal                                 10
#define CONST_KILLMSG_KillHeadshot                               11
#define CONST_KILLMSG_Assist                                     12
#define CONST_MAX_LOADOUT_SLOTS                                  5
#define CONST_MAX_DEPOT_ITEMS                                    5
#define CONST_TACTICAL_HS_WEAK_POINT_RESET_INDEX                 8
#define CONST_MAX_SKILL_TIERS                                    4
#define CONST_SKILLID_HRV_DECOY                                  1200
#define CONST_SKILLID_DIGI_GRENADE                               1201
#define CONST_SKILLID_EMP_GRENADE                                1202
#define CONST_SKILLID_TOXIC_GRENADE                              1203
#define CONST_SKILLID_SHOCK_GRENADE                              1204
#define CONST_SKILLID_STUN_MINE                                  1205
#define CONST_SKILLID_PROX_MINE                                  1206
#define CONST_SKILLID_HEFRAG_GRENADE                             1207
#define CONST_SKILLID_HRV_JAMMER                                 1208
#define CONST_SKILLID_HEAL                                       1209
#define CONST_SKILLID_REPAIR                                     1210
#define CONST_SKILLID_REVIVE                                     1211
#define CONST_SKILLID_AMMO_PACK                                  1212
#define CONST_SKILLID_ELECTRO_AMMO                               1213
#define CONST_SKILLID_INCENDIARY_AMMO                            1214
#define CONST_SKILLID_TOXIC_AMMO                                 1215
#define CONST_SKILLID_EXPLOSIVE_AMMO                             1216
#define CONST_SKILLID_SHOTGUN_HAMMER                             1217
#define CONST_SKILLID_BARRICADE                                  1218
#define CONST_SKILLID_SONIC_KNIFE                                1219
#define CONST_SKILLID_MACHETE                                    1220
#define CONST_SKILLID_HS_WEAK_POINT_RESET                        1221
#define CONST_SKILLID_HS_HRV_PING                                1222
#define CONST_SKILLID_STEALTH_CAMO                               1223
#define CONST_SKILL_ID_HACK                                      1224
#define CONST_TACTICAL_HS_PING_INDEX                             7
#define CONST_MaxPlayersPerList                                  8
#define CONST_MAX_EMITTERS                                       100
#define CONST_MAX_KACTORS                                        20
#define CONST_MAX_TRACERS                                        20
#define CONST_MAX_TEAM_BEACONS                                   6
#define CONST_STRINGPROP_SCORPTANK                               "scorpiontank"
#define CONST_STRINGPROP_REVENGE                                 "revenge"
#define CONST_STRINGPROP_HIGHTHREAT                              "highthreat"
#define CONST_STRINGPROP_CLOAKED                                 "cloaked"
#define CONST_STRINGPROP_EMP                                     "emp"
#define CONST_STRINGPROP_STUNNED                                 "stunned"
#define CONST_STRINGPROP_SUICIDE                                 "suicide"
#define CONST_STRINGPROP_MELEE                                   "melee"
#define CONST_STRINGPROP_HEADSHOT                                "headshot"
#define CONST_STRINGPROP_WASBOT                                  "killedbybot"
#define CONST_STRINGPROP_HRV                                     "hrv"
#define CONST_STRINGPROP_ADS                                     "ads"
#define CONST_STRINGPROP_HARDSUIT                                "hardsuit"
#define CONST_PROPERTY_FATALITY_CONDITION                        0x20000008
#define CONST_PROPERTY_FATALITY_DAMAGETYPE                       0x20000007
#define CONST_PROPERTY_FATALITY_WEAPONID                         0x20000006
#define CONST_PROPERTY_FATALITY_PLAYER_LOCATION_Z                0x20000005
#define CONST_PROPERTY_FATALITY_PLAYER_LOCATION_Y                0x20000004
#define CONST_PROPERTY_FATALITY_PLAYER_LOCATION_X                0x20000003
#define CONST_PROPERTY_FATALITY_TIMEOFDEATH                      0x20000002
#define CONST_PROPERTY_FATALITY_PLAYERID                         0x20000001
#define CONST_PROPERTY_FATALITY_WASKILLED                        0x20000000
#define CONST_PROPERTY_GAMECP_CAPTURES                           0x20000101
#define CONST_PROPERTY_GAMECP_TIMECAPTURING                      0x20000102
#define CONST_PROPERTY_GAMECP_ATTACKKILLS                        0x20000103
#define CONST_PROPERTY_GAMECP_DEFENSEKILLS                       0x20000104
#define CONST_PROPERTY_GAMECTF_CAPTURES                          0x20000101
#define CONST_PROPERTY_GAMECTF_GRABS                             0x20000102
#define CONST_PROPERTY_GAMECTF_CARRIERKILLS                      0x20000103
#define CONST_PROPERTY_GAMECTF_INITIALTOUCHES                    0x20000104
#define CONST_PROPERTY_GAMECTF_RETURNS                           0x20000105
#define CONST_PROPERTY_GAMETKOTH_CAPTURES                        0x20000101
#define CONST_PROPERTY_GAMETKOTH_TIMECAPTURING                   0x20000102
#define CONST_PROPERTY_GAMETKOTH_ATTACKKILLS                     0x20000103
#define CONST_PROPERTY_GAMETKOTH_DEFENSEKILLS                    0x20000104
#define CONST_PROPERTY_RANKEDMATCH_USERID                        0x20000001
#define CONST_PROPERTY_RANKEDMATCH_KILLS                         0x20000002
#define CONST_PROPERTY_RANKEDMATCH_DEATHS                        0x20000003
#define CONST_PROPERTY_RANKEDMATCH_ASSISTS                       0x20000004
#define CONST_PROPERTY_SKILLS_TOTALPOINTS                        0x20000010
#define CONST_PROPERTY_SKILLS_POINTSSPENT                        0x20000011
#define CONST_PROPERTY_SKILLS_SKILLID                            0x20000012
#define CONST_PROPERTY_TAUNT_UNLOCKID                            0x20000010
#define CONST_PROPERTY_TAUNT_COMPLETED_TIME                      0x20000011
#define CONST_PROPERTY_WPNUSAGE_KILLSINHARDSUIT                  0x20000110
#define CONST_STRINGPROP_KILLSINHARDSUIT                         "killsinhardsuit"
#define CONST_PROPERTY_WPNUSAGE_KILLS                            0x20000109
#define CONST_STRINGPROP_KILLS                                   "kills"
#define CONST_PROPERTY_WPNUSAGE_TIME_HARDSUIT_STOP               0x20000108
#define CONST_STRINGPROP_TIME_HARDSUIT_STOP                      "hardsuitstop"
#define CONST_PROPERTY_WPNUSAGE_TIME_HARDSUIT_START              0x20000107
#define CONST_STRINGPROP_TIME_HARDSUIT_START                     "hardsuitstart"
#define CONST_PROPERTY_WPNUSAGE_TIME_HRV_STOP                    0x20000106
#define CONST_STRINGPROP_TIME_HRV_STOP                           "hrvstop"
#define CONST_PROPERTY_WPNUSAGE_TIME_HRV_START                   0x20000105
#define CONST_STRINGPROP_TIME_HRV_START                          "hrvstart"
#define CONST_PROPERTY_WPNUSAGE_TIME_ADS_STOP                    0x20000104
#define CONST_STRINGPROP_TIME_ADS_STOP                           "adsstop"
#define CONST_PROPERTY_WPNUSAGE_TIME_ADS_START                   0x20000103
#define CONST_STRINGPROP_TIME_ADS_START                          "adsstart"
#define CONST_PROPERTY_WPNUSAGE_TIME_EQUIPPED_STOP               0x20000102
#define CONST_STRINGPROP_TIME_EQUIPPED_STOP                      "equippedstop"
#define CONST_PROPERTY_WPNUSAGE_TIME_EQUIPPED_START              0x20000101
#define CONST_STRINGPROP_TIME_EQUIPPED_START                     "equippedstart"
#define CONST_PROPERTY_WPNUSAGE_REVIVAL_COUNT                    0x200000d5
#define CONST_STRINGPROP_REVIVAL_COUNT                           "revivals"
#define CONST_PROPERTY_WPNUSAGE_HEALED_AMOUNT                    0x200000d4
#define CONST_STRINGPROP_HEALED_AMOUNT                           "healedamount"
#define CONST_PROPERTY_WPNUSAGE_HEALED_PLAYER                    0x200000d3
#define CONST_STRINGPROP_HEALED_PLAYER                           "healedcount"
#define CONST_PROPERTY_WPNUSAGE_REPAIRED_BARRICADES              0x200000c4
#define CONST_STRINGPROP_REPAIRED_BARRICADES                     "repairedbarricades"
#define CONST_PROPERTY_WPNUSAGE_REPAIRED_TURRETS                 0x200000c2
#define CONST_STRINGPROP_REPAIRED_TURRETS                        "repairedturrets"
#define CONST_PROPERTY_WPNUSAGE_REPAIRED_HARDSUITS               0x200000c1
#define CONST_STRINGPROP_REPAIRED_HARDSUITS                      "repairedhardsuits"
#define CONST_PROPERTY_WPNUSAGE_DESTROYED_TURRET                 0x200000b2
#define CONST_STRINGPROP_DESTROYED_TURRET                        "destroyedturrets"
#define CONST_PROPERTY_WPNUSAGE_DESTROYED_EQUIPMENT              0x200000b1
#define CONST_STRINGPROP_DESTROYED_EQUIPMENT                     "destroyedequipment"
#define CONST_PROPERTY_WPNUSAGE_DAMAGERECEIVED_INHARDSUIT        0x20000072
#define CONST_STRINGPROP_DAMAGERECEIVED_INHARDSUIT               "damagereceivedinhardsuit"
#define CONST_PROPERTY_WPNUSAGE_DAMAGERECEIVED                   0x20000071
#define CONST_STRINGPROP_DAMAGERECEIVED                          "damagereceived"
#define CONST_PROPERTY_WPNUSAGE_DAMAGEDEALT_INHARDSUIT           0x20000063
#define CONST_STRINGPROP_DAMAGEDEALT_INHARDSUIT                  "damagedealtinhardsuit"
#define CONST_PROPERTY_WPNUSAGE_DAMAGEDEALT_ADS                  0x20000062
#define CONST_STRINGPROP_DAMAGEDEALT_ADS                         "damagedealtads"
#define CONST_PROPERTY_WPNUSAGE_DAMAGEDEALT                      0x20000061
#define CONST_STRINGPROP_DAMAGEDEALT                             "damagedealt"
#define CONST_PROPERTY_WPNUSAGE_HEADSHOTS_INHARDSUIT             0x20000053
#define CONST_STRINGPROP_HEADSHOTS_INHARDSUIT                    "headshotsinhardsuit"
#define CONST_PROPERTY_WPNUSAGE_HEADSHOTS_ADS                    0x20000052
#define CONST_STRINGPROP_HEADSHOTS_ADS                           "headshotsads"
#define CONST_PROPERTY_WPNUSAGE_HEADSHOTS                        0x20000051
#define CONST_STRINGPROP_HEADSHOTS                               "headshots"
#define CONST_PROPERTY_WPNUSAGE_ROUNDSHIT_INHARDSUIT             0x20000043
#define CONST_STRINGPROP_ROUNDSHIT_INHARDSUIT                    "roundshitinhardsuit"
#define CONST_PROPERTY_WPNUSAGE_ROUNDSHIT_ADS                    0x20000042
#define CONST_STRINGPROP_ROUNDSHIT_ADS                           "roundshitads"
#define CONST_PROPERTY_WPNUSAGE_ROUNDSHIT                        0x20000041
#define CONST_STRINGPROP_ROUNDSHIT                               "roundshit"
#define CONST_PROPERTY_WPNUSAGE_MELEE_ATTEMPTS                   0x20000034
#define CONST_STRINGPROP_MELEE_ATTEMPTS                          "meleeattempts"
#define CONST_PROPERTY_WPNUSAGE_ROUNDSFIRED_INHARDSUIT           0x20000033
#define CONST_STRINGPROP_ROUNDSFIRED_INHARDSUIT                  "roundsfiredinhardsuit"
#define CONST_PROPERTY_WPNUSAGE_ROUNDSFIRED_ADS                  0x20000032
#define CONST_STRINGPROP_ROUNDSFIRED_ADS                         "roundsfiredads"
#define CONST_PROPERTY_WPNUSAGE_ROUNDSFIRED                      0x20000031
#define CONST_STRINGPROP_ROUNDSFIRED                             "roundsfired"
#define CONST_PROPERTY_WPNUSAGE_ASSISTSINHARDSUIT                0x20000022
#define CONST_STRINGPROP_ASSISTSINHARDSUIT                       "assistsinhardsuit"
#define CONST_PROPERTY_WPNUSAGE_ASSISTS                          0x20000021
#define CONST_STRINGPROP_ASSISTS                                 "assists"
#define CONST_PROPERTY_WPN_CONFIGID                              0x20000001
#define CONST_PROPERTY_RANKEDMATCH_WINNING_TEAM_NAME             0x20000001
#define CONST_ID_InGameTime                                      0
#define CONST_ID_Version                                         1
#define CONST_PSI_AutoReload                                     33
#define CONST_PSI_AutoSwitch                                     34
#define CONST_ID_Sensitivity                                     35
#define CONST_ID_ControlSchemeIndex                              38
#define CONST_ID_AvatarIndex                                     39
#define CONST_ID_Version01                                       48
#define CONST_ID_SecretCodeReserved0                             60
#define CONST_ID_SecretCodeReserved1                             61
#define CONST_ID_LoadoutIndex                                    67
#define CONST_ID_GameTime                                        68
#define CONST_ID_SelectedDevice                                  69
#define CONST_ID_GameTypeFilter                                  70
#define CONST_ID_PurchaseSettings                                80
#define CONST_ID_ToggleCrouch                                    90
#define CONST_ID_InvertControls                                  91
#define CONST_ID_TightAimToggle                                  92
#define CONST_ID_AimAssist                                       93
#define CONST_ID_TightAimSensitivity                             94
#define CONST_ID_SprintToggle                                    95
#define CONST_ID_HRVToggle                                       96
#define CONST_ID_SSDMovies                                       100
#define CONST_ID_ScoreBoardToggle                                101
#define CONST_ID_SmartReticleOpacity                             102
#define CONST_ID_NumCrosshairTicks                               103
#define CONST_ID_CrosshairRotation                               104
#define CONST_ID_CrosshairOpacity                                105
#define CONST_ID_CrosshairTickLength                             106
#define CONST_ID_CrosshairNeutralColorIndex                      107
#define CONST_ID_CrosshairFriendlyColorIndex                     108
#define CONST_ID_CrosshairEnemyInRangeColorIndex                 109
#define CONST_ID_CrosshairEnemyOutOfRangeColorIndex              110
#define CONST_ID_FOV                                             111
#define CONST_ID_GoreLevel                                       112
#define CONST_ID_HiddenHud                                       113
#define CONST_ID_SocialNotifications                             114
#define CONST_ID_StaticCrosshairs                                115
#define CONST_ID_HudChat                                         116
#define CONST_ID_DepotPing                                       117
#define CONST_ID_Subtitles                                       120
#define CONST_ID_MusicVolume                                     121
#define CONST_ID_SFXVolume                                       122
#define CONST_ID_DialogVolume                                    123
#define CONST_ID_DamageCauseVolume                               129
#define CONST_ID_DamageTakeVolume                                130
#define CONST_ID_LowStaminaAudio                                 131
#define CONST_ID_GammaLevel                                      150
#define CONST_ID_3DMode                                          151
#define CONST_ID_LetterBox                                       152
#define CONST_ID_HangerUnlockSlot0                               401
#define CONST_ID_HangerUnlockSlot1                               402
#define CONST_ID_HangerUnlockSlot2                               403
#define CONST_ID_HangerUnlockSlot3                               404
#define CONST_ID_HangerUnlockSlot4                               405
#define CONST_ID_HangerUnlockSlot5                               406
#define CONST_ID_HangerUnlockSlot6                               407
#define CONST_ID_HangerUnlockSlot7                               408
#define CONST_ID_DLCReserved0                                    500
#define CONST_ID_DLCReserved1                                    501
#define CONST_ID_DLCReserved2                                    502
#define CONST_ID_DLCReserved3                                    503
#define CONST_ID_DLCReserved4                                    504
#define CONST_ID_DLCReserved5                                    505
#define CONST_ID_DLCReserved6                                    506
#define CONST_ID_DLCReserved7                                    507
#define CONST_ID_DLCReserved8                                    508
#define CONST_ID_DLCReserved9                                    509
#define CONST_ID_LoadoutReserved0                                600
#define CONST_ID_LoadoutReserved1                                601
#define CONST_ID_LoadoutReserved2                                602
#define CONST_ID_LoadoutReserved3                                603
#define CONST_ID_LoadoutReserved4                                604
#define CONST_ID_LoadoutReserved5                                605
#define CONST_ID_LoadoutReserved6                                606
#define CONST_ID_LoadoutReserved7                                607
#define CONST_ID_LoadoutReserved8                                608
#define CONST_ID_LoadoutReserved9                                609
#define CONST_ID_LoadoutReserved10                               610
#define CONST_ID_LoadoutReserved11                               611
#define CONST_ID_LoadoutReserved12                               612
#define CONST_ID_LoadoutReserved13                               613
#define CONST_ID_LoadoutReserved14                               614
#define CONST_ID_LoadoutReserved15                               615
#define CONST_ID_LoadoutReserved16                               616
#define CONST_ID_LoadoutReserved17                               617
#define CONST_ID_LoadoutReserved18                               618
#define CONST_ID_LoadoutReserved19                               619
#define CONST_ID_LoadoutReserved20                               620
#define CONST_ID_LoadoutReserved21                               621
#define CONST_ID_LoadoutReserved22                               622
#define CONST_ID_LoadoutReserved23                               623
#define CONST_ID_LoadoutReserved24                               624
#define CONST_ID_DepotReserved0                                  650
#define CONST_ID_GearReserved0                                   660
#define CONST_ID_GearReserved1                                   661
#define CONST_ID_GearReserved2                                   662
#define CONST_ID_TauntReserved0                                  670
#define CONST_ID_TauntReserved1                                  671
#define CONST_ID_DialogPackReserved0                             672
#define CONST_ID_TutorialEnabled                                 700
#define CONST_ID_TutorialReserved0                               701
#define CONST_ID_TutorialReserved1                               702
#define CONST_ID_EULAAcceptVersion                               710
#define CONST_ID_NewsReadTime0                                   711
#define CONST_ID_NewsReadTime1                                   712
#define CONST_LoadoutID_BYTE_UNSET                               255
#define CONST_LoadoutID_SHORT_UNSET                              65535
#define CONST_ID_NoiseCancelling                                 128
#define CONST_ID_EchoCancelling                                  127
#define CONST_ID_VOIPActivationLevel                             126
#define CONST_ID_VOIPVolume                                      125
#define CONST_ID_PushToTalk                                      124
#define CONST_ID_HardDriveScore                                  901
#define CONST_ID_FastHardDrive                                   900
#define CONST_MAX_KeyBindings                                    16
#define CONST_ID_KeySecondaryBinding_Reserved7                   10015
#define CONST_ID_KeySecondaryBinding_Reserved6                   10014
#define CONST_ID_KeySecondaryBinding_Reserved5                   10013
#define CONST_ID_KeySecondaryBinding_Reserved4                   10012
#define CONST_ID_KeySecondaryBinding_Reserved3                   10011
#define CONST_ID_KeySecondaryBinding_Reserved2                   10010
#define CONST_ID_KeySecondaryBinding_Reserved1                   10009
#define CONST_ID_KeySecondaryBinding_Reserved0                   10008
#define CONST_ID_KeyPrimaryBinding_Reserved7                     10007
#define CONST_ID_KeyPrimaryBinding_Reserved6                     10006
#define CONST_ID_KeyPrimaryBinding_Reserved5                     10005
#define CONST_ID_KeyPrimaryBinding_Reserved4                     10004
#define CONST_ID_KeyPrimaryBinding_Reserved3                     10003
#define CONST_ID_KeyPrimaryBinding_Reserved2                     10002
#define CONST_ID_KeyPrimaryBinding_Reserved1                     10001
#define CONST_ID_KeyPrimaryBinding_Reserved0                     10000
#define CONST_NUM_MENU_CROSSHAIRS                                4
#define CONST_CROSSHAIR_LENGTH_MULTIPLIER                        2
#define CONST_MaxTesselationLevels                               5
#define CONST_TesselationMaxValue                                100
#define CONST_TesselationMinValue                                2100
#define CONST_NUM_GEM_SOCKETS_PER_TIER                           3
#define CONST_LensFadeInTime                                     0.2
#define CONST_LensEffectShowTime                                 8.8
#define CONST_LensFadeOutTime                                    1.0
#define CONST_DistFullLensFlare                                  2000.0
#define CONST_MaxSelectedEmotes                                  8
#define CONST_MIN_ENTRIES                                        10
#define CONST_ZoomAlphaExp                                       3.0f
#define CONST_WeaponStatInfoByteSize                             36
#define CONST_RELOADSHORT_FIREMODE                               3
#define CONST_MELEE_FIREMODE                                     2
#define CONST_RELOAD_FIREMODE                                    1
#define CONST_BULLET_FIREMODE                                    0

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum FoxGame.FoxTypes.EDamageZone
/*enum EDamageZone
{
	DZ_Invalid                                         = 0,
	DZ_Head                                            = 1,
	DZ_Stomach                                         = 2,
	DZ_Chest                                           = 3,
	DZ_LUArm                                           = 4,
	DZ_LLArm                                           = 5,
	DZ_RUArm                                           = 6,
	DZ_RLArm                                           = 7,
	DZ_LLeg                                            = 8,
	DZ_RLeg                                            = 9,
	DZ_MAX                                             = 10
};*/

// Enum FoxGame.FoxTypes.EInjureDirection
/*enum EInjureDirection
{
	EID_Any                                            = 0,
	EID_Left                                           = 1,
	EID_Right                                          = 2,
	EID_Front                                          = 3,
	EID_Back                                           = 4,
	EID_MAX                                            = 5
};*/

// Enum FoxGame.FoxTypes.ESpecialMove
/*enum ESpecialMove
{
	FSM_None                                           = 0,
	FSM_EnterCoverMid                                  = 1,
	FSM_EnterCoverStd                                  = 2,
	FSM_PushOutOfCover                                 = 3,
	FSM_EnterPipe                                      = 4,
	FSM_ExitPipe                                       = 5,
	FSM_EnterLadder                                    = 6,
	FSM_ExitLadder                                     = 7,
	FSM_EnterZipline                                   = 8,
	FSM_ExitZipline                                    = 9,
	FSM_EnterRope                                      = 10,
	FSM_ExitRope                                       = 11,
	FSM_Mantle                                         = 12,
	FSM_Vault                                          = 13,
	FSM_WallClimb                                      = 14,
	FSM_VaultTall                                      = 15,
	FSM_Jump                                           = 16,
	FSM_MantleDown                                     = 17,
	FSM_Land                                           = 18,
	FSM_SpawnLand                                      = 19,
	FSM_TauntGo                                        = 20,
	FSM_TauntPump                                      = 21,
	FSM_TauntCutIt                                     = 22,
	FSM_TauntThroatSlit                                = 23,
	FSM_TauntThumbsDown                                = 24,
	FSM_TauntThumbsUp                                  = 25,
	FSM_TauntWag                                       = 26,
	FSM_TauntAOK                                       = 27,
	FSM_TauntMetal                                     = 28,
	FSM_TauntPoint                                     = 29,
	FSM_TauntRainbow                                   = 30,
	FSM_TauntPolaroid                                  = 31,
	FSM_TauntTroll                                     = 32,
	FSM_TauntAirPlane                                  = 33,
	FSM_TauntGunPump                                   = 34,
	FSM_TauntUpYours                                   = 35,
	FSM_TauntShhh                                      = 36,
	FSM_TauntGo_Emote                                  = 37,
	FSM_TauntPump_Emote                                = 38,
	FSM_TauntCutIt_Emote                               = 39,
	FSM_TauntThroatSlit_Emote                          = 40,
	FSM_TauntThumbsDown_Emote                          = 41,
	FSM_TauntThumbsUp_Emote                            = 42,
	FSM_TauntWag_Emote                                 = 43,
	FSM_TauntAOK_Emote                                 = 44,
	FSM_TauntMetal_Emote                               = 45,
	FSM_TauntPoint_Emote                               = 46,
	FSM_TauntRainbow_Emote                             = 47,
	FSM_TauntPolaroid_Emote                            = 48,
	FSM_TauntTroll_Emote                               = 49,
	FSM_TauntAirPlane_Emote                            = 50,
	FSM_TauntGunPump_Emote                             = 51,
	FSM_TauntUpYours_Emote                             = 52,
	FSM_TauntShhh_Emote                                = 53,
	FSM_TauntBow                                       = 54,
	FSM_TauntCaution                                   = 55,
	FSM_TauntClap                                      = 56,
	FSM_TauntCrane                                     = 57,
	FSM_TauntSalute                                    = 58,
	FSM_TauntTeabag                                    = 59,
	FSM_TauntRoar                                      = 60,
	FSM_TauntHush                                      = 61,
	FSM_TauntUpperCut                                  = 62,
	FSM_TauntCraneKick                                 = 63,
	FSM_TauntRobot                                     = 64,
	FSM_TauntFlex                                      = 65,
	FSM_TauntTebow                                     = 66,
	FSM_TauntFancyBow                                  = 67,
	FSM_TauntBringIt                                   = 68,
	FSM_TauntGunWave                                   = 69,
	FSM_TauntLaugh                                     = 70,
	FSM_TauntPosedPoint                                = 71,
	FSM_TauntKiss                                      = 72,
	FSM_TauntGroundPound                               = 73,
	FSM_TauntRock                                      = 74,
	FSM_TauntPaper                                     = 75,
	FSM_TauntScissors                                  = 76,
	FSM_TauntBow_Emote                                 = 77,
	FSM_TauntCaution_Emote                             = 78,
	FSM_TauntClap_Emote                                = 79,
	FSM_TauntCrane_Emote                               = 80,
	FSM_TauntSalute_Emote                              = 81,
	FSM_TauntTeabag_Emote                              = 82,
	FSM_TauntRoar_Emote                                = 83,
	FSM_TauntHush_Emote                                = 84,
	FSM_TauntUpperCut_Emote                            = 85,
	FSM_TauntCraneKick_Emote                           = 86,
	FSM_TauntRobot_Emote                               = 87,
	FSM_TauntFlex_Emote                                = 88,
	FSM_TauntTebow_Emote                               = 89,
	FSM_TauntFancyBow_Emote                            = 90,
	FSM_TauntBringIt_Emote                             = 91,
	FSM_TauntGunWave_Emote                             = 92,
	FSM_TauntLaugh_Emote                               = 93,
	FSM_TauntPosedPoint_Emote                          = 94,
	FSM_TauntKiss_Emote                                = 95,
	FSM_TauntGroundPound_Emote                         = 96,
	FSM_TauntRock_Emote                                = 97,
	FSM_TauntPaper_Emote                               = 98,
	FSM_TauntScissors_Emote                            = 99,
	FSM_Injured                                        = 100,
	FSM_Revive                                         = 101,
	FSM_Idle                                           = 102,
	FSM_Sprint                                         = 103,
	FSM_DeathAnim                                      = 104,
	FSM_ToggleVisorOn                                  = 105,
	FSM_ToggleVisorOff                                 = 106,
	FSM_Melee_Lunge                                    = 107,
	FSM_CP_Capture                                     = 108,
	FSM_CP_HackFail                                    = 109,
	FSM_Possess                                        = 110,
	FSM_AIEntry                                        = 111,
	FSM_DET_PlantBomb                                  = 112,
	FSM_DET_RemoveBomb                                 = 113,
	FSM_TauntSumo                                      = 114,
	FSM_MAX                                            = 115
};*/

// Enum FoxGame.FoxTypes.EGoreType
/*enum EGoreType
{
	GoreType_None                                      = 0,
	GoreType_Mild                                      = 1,
	GoreType_Full                                      = 2,
	GoreType_MAX                                       = 3
};*/

// Enum FoxGame.FoxTypes.EFriendAddResponse
/*enum EFriendAddResponse
{
	EFAR_Success                                       = 0,
	EFAR_UnknownPlayer                                 = 1,
	EFAR_AlreadyPending                                = 2,
	EFAR_AlreadyFriend                                 = 3,
	EFAR_AlreadyDenied                                 = 4,
	EFAR_YourListFull                                  = 5,
	EFAR_TheirListFull                                 = 6,
	EFAR_FriendYourself                                = 7,
	EFAR_UnknownError                                  = 8,
	EFAR_MAX                                           = 9
};*/

// Enum FoxGame.FoxTypes.ESocialNotificationType
/*enum ESocialNotificationType
{
	ESNT_Invalid                                       = 0,
	ESNT_FriendOnline                                  = 1,
	ESNT_FriendOffline                                 = 2,
	ESNT_FriendInviteReceived                          = 3,
	ESNT_FriendInviteAccepted                          = 4,
	ESNT_PartyJoin                                     = 5,
	ESNT_PartyInviteSent                               = 6,
	ESNT_PartyInvite                                   = 7,
	ESNT_PartyLeft                                     = 8,
	ESNT_PartyInviteDecline                            = 9,
	ESNT_PartyRemovedYou                               = 10,
	ESNT_PartyRemovedOther                             = 11,
	ESNT_PartyPromote                                  = 12,
	ESNT_PartyDisband                                  = 13,
	ESNT_PartyPublicGame                               = 14,
	ESNT_PartyRankedGame                               = 15,
	ESNT_PartyRankedGameJoinQueue                      = 16,
	ESNT_PartyRankedGameReady                          = 17,
	ESNT_GameInviteSent                                = 18,
	ESNT_GameInviteReceived                            = 19,
	ESNT_Mail                                          = 20,
	ESNT_ClanOnline                                    = 21,
	ESNT_ClanOffline                                   = 22,
	ESNT_ClanJoin                                      = 23,
	ESNT_ClanLeave                                     = 24,
	ESNT_ClanPromote                                   = 25,
	ESNT_ClanDemote                                    = 26,
	ESNT_MAX                                           = 27
};*/

// Enum FoxGame.FoxTypes.ENotificationPlacement
/*enum ENotificationPlacement
{
	ENP_Off                                            = 0,
	ENP_TopRight                                       = 1,
	ENP_TopLeft                                        = 2,
	ENP_BottomLeft                                     = 3,
	ENP_BottomRight                                    = 4,
	ENP_MAX                                            = 5
};*/

// Enum FoxGame.FoxTypes.EHitType
/*enum EHitType
{
	EHT_None                                           = 0,
	EHT_BodyHit                                        = 1,
	EHT_HeadHit                                        = 2,
	EHT_ElectroAmmo                                    = 3,
	EHT_ExplosiveAmmo                                  = 4,
	EHT_IncendiaryAmmo                                 = 5,
	EHT_ToxicAmmo                                      = 6,
	EHT_MiniGun                                        = 7,
	EHT_RailGun                                        = 8,
	EHT_Hammer                                         = 9,
	EHT_Knife                                          = 10,
	EHT_Crowbar                                        = 11,
	EHT_Melee                                          = 12,
	EHT_HardSuitMelee                                  = 13,
	EHT_HardSuitMeleeWP                                = 14,
	EHT_Projectile                                     = 15,
	EHT_MAX                                            = 16
};*/

// Enum FoxGame.FoxTypes.EMutatorToggleType
/*enum EMutatorToggleType
{
	EMTT_TeamRebalance                                 = 0,
	EMTT_PartySorted                                   = 1,
	EMTT_ClanSorted                                    = 2,
	EMTT_AllowDepots                                   = 3,
	EMTT_AllowHRV                                      = 4,
	EMTT_TournamentMode                                = 5,
	EMTT_AllowDataNodes                                = 6,
	EMTT_AllowHeadShots                                = 7,
	EMTT_PrimariesOnly                                 = 8,
	EMTT_SecondariesOnly                               = 9,
	EMTT_MeleeOnly                                     = 10,
	EMTT_Max                                           = 11
};*/

// Enum FoxGame.FoxTypes.EStatIndex
/*enum EStatIndex
{
	ESI_Health                                         = 0,
	ESI_DamageReduction                                = 1,
	ESI_Stamina                                        = 2,
	ESI_Speed                                          = 3,
	ESI_HRVDuration                                    = 4,
	ESI_HRVRecharge                                    = 5,
	ESI_Damage                                         = 6,
	ESI_FireRate                                       = 7,
	ESI_Ammo                                           = 8,
	ESI_Reload                                         = 9,
	ESI_Zoom                                           = 10,
	ESI_ScopeIn                                        = 11,
	ESI_BaseSpread                                     = 12,
	ESI_MaxSpread                                      = 13,
	ESI_ADSSpread                                      = 14,
	ESI_MaxADSSpread                                   = 15,
	ESI_Recoil                                         = 16,
	ESI_Range                                          = 17,
	ESI_Type                                           = 18,
	ESI_Class                                          = 19,
	ESI_Effect                                         = 20,
	ESI_Radius                                         = 21,
	ESI_Delay                                          = 22,
	ESI_Amount                                         = 23,
	ESI_Uses                                           = 24,
	ESI_MultiAmount                                    = 25,
	ESI_AmountOverTime                                 = 26,
	ESI_MultiAmountOverTime                            = 27,
	ESI_CPCost                                         = 28,
	ESI_DamageOverTime                                 = 29,
	ESI_MAX                                            = 30
};*/

// Enum FoxGame.FoxTypes.EListUpdateState
/*enum EListUpdateState
{
	ELUS_Empty                                         = 0,
	ELUS_Complete                                      = 1,
	ELUS_Clear                                         = 2,
	ELUS_Failure                                       = 3,
	ELUS_MAX                                           = 4
};*/

// Enum FoxGame.FoxTypes.EGemType
/*enum EGemType
{
	EGT_Invalid                                        = 0,
	EGT_HRVDuration                                    = 1,
	EGT_HRVRecharge                                    = 2,
	EGT_StaminaDuration                                = 3,
	EGT_StaminaRecharge                                = 4,
	EGT_XPBoost                                        = 5,
	EGT_CPBoost                                        = 6,
	EGT_GPBoost                                        = 7,
	EGT_HealthRecoveryCap                              = 8,
	EGT_HealthRecoverySpeed                            = 9,
	EGT_WeaponSwitchSpeed                              = 10,
	EGT_MeleeDamage                                    = 11,
	EGT_WeaponSpread                                   = 12,
	EGT_WeaponRecoil                                   = 13,
	EGT_StartingCP                                     = 14,
	EGT_FallDamageReduction                            = 15,
	EGT_MovementSpeed                                  = 16,
	EGT_EMPRecovery                                    = 17,
	EGT_RepairDuration                                 = 18,
	EGT_ToxicAmmoDamageIncrease                        = 19,
	EGT_ExplosiveAmmoDamageIncrease                    = 20,
	EGT_ElectricAmmoDamageIncrease                     = 21,
	EGT_IncendiaryAmmoDamageIncrease                   = 22,
	EGT_NormalAmmoDamageIncrease                       = 23,
	EGT_ToxicDamageReduction                           = 24,
	EGT_IncendiaryDamageReduction                      = 25,
	EGT_ExplosiveDamageReduction                       = 26,
	EGT_TightAimMovePenaltyReduction                   = 27,
	EGT_ScopeBlackout                                  = 28,
	EGT_ElectroDamageReduction                         = 29,
	EGT_NormalAmmoDamageReduction                      = 30,
	EGT_StunMineRecovery                               = 31,
	EGT_TightAimAccuracy                               = 32,
	EGT_HipFireAccuracy                                = 33,
	EGT_MagnumAmmoDamageIncrease                       = 34,
	EGT_MagnumDamageReduction                          = 35,
	EGT_MAX                                            = 36
};*/

// Enum FoxGame.FoxTypes.EUnlockState
/*enum EUnlockState
{
	EUS_Default                                        = 0,
	EUS_Unlocked                                       = 1,
	EUS_Locked                                         = 2,
	EUS_Premium                                        = 3,
	EUS_Award                                          = 4,
	EUS_Hidden                                         = 5,
	EUS_MAX                                            = 6
};*/

// Enum FoxGame.FoxTypes.EUnlockIcon
/*enum EUnlockIcon
{
	EUI_None                                           = 0,
	EUI_Cart                                           = 1,
	EUI_Lock                                           = 2,
	EUI_Trophy                                         = 3,
	EUI_MAX                                            = 4
};*/

// Enum FoxGame.FoxTypes.EPurchaseState
/*enum EPurchaseState
{
	EPS_NotOwned                                       = 0,
	EPS_NotActivated                                   = 1,
	EPS_Expired                                        = 2,
	EPS_Rented                                         = 3,
	EPS_Owned                                          = 4,
	EPS_MAX                                            = 5
};*/

// Enum FoxGame.FoxTypes.EFoxUnlockType
/*enum EFoxUnlockType
{
	UT_Unspecified                                     = 0,
	UT_LoadoutSlot                                     = 1,
	UT_NameChange                                      = 2,
	UT_GenderChange                                    = 3,
	UT_SkillReset                                      = 4,
	UT_ClanRegistration                                = 5,
	UT_BodyCamo                                        = 6,
	UT_WeaponCamo                                      = 7,
	UT_SkillPoint                                      = 8,
	UT_Gem                                             = 9,
	UT_GemReinforcement                                = 10,
	UT_Taunt                                           = 11,
	UT_Hanger                                          = 12,
	UT_Pack                                            = 13,
	UT_XPBoost                                         = 14,
	UT_CPBoost                                         = 15,
	UT_GPBoost                                         = 16,
	UT_Preset                                          = 17,
	UT_Gear                                            = 18,
	UT_Tactical                                        = 19,
	UT_Depot                                           = 20,
	UT_LowerBody                                       = 21,
	UT_UpperBody                                       = 22,
	UT_Helmet                                          = 23,
	UT_Receiver                                        = 24,
	UT_Barrel                                          = 25,
	UT_Stock                                           = 26,
	UT_Muzzle                                          = 27,
	UT_Magazine                                        = 28,
	UT_Scope                                           = 29,
	UT_Badge                                           = 30,
	UT_AvatarSkin                                      = 31,
	UT_Avatar                                          = 32,
	UT_Crosshair                                       = 33,
	UT_Title                                           = 34,
	UT_EmblemIcon                                      = 35,
	UT_EmblemAlpha                                     = 36,
	UT_EmblemShape                                     = 37,
	UT_EmblemBackground                                = 38,
	UT_EmblemColor                                     = 39,
	UT_DialogPackAnnouncer                             = 40,
	UT_DialogPackPlayer                                = 41,
	UT_Grip                                            = 42,
	UT_GPToken                                         = 43,
	UT_XPToken                                         = 44,
	UT_PMToken                                         = 45,
	UT_TKToken                                         = 46,
	UT_Key                                             = 47,
	UT_Lockbox                                         = 48,
	UT_MAX                                             = 49
};*/

// Enum FoxGame.FoxTypes.EItemUpdateType
/*enum EItemUpdateType
{
	ETUT_None                                          = 0,
	ETUT_Added                                         = 1,
	ETUT_Updated                                       = 2,
	ETUT_Removed                                       = 3,
	ETUT_MAX                                           = 4
};*/

// Enum FoxGame.FoxTypes.EClanMemberUpdateType
/*enum EClanMemberUpdateType
{
	ECMUT_JoinClan                                     = 0,
	ECMUT_Presence                                     = 1,
	ECMUT_LeaveClan                                    = 2,
	ECMUT_RankChange                                   = 3,
	ECMUT_Other                                        = 4,
	ECMUT_MAX                                          = 5
};*/

// Enum FoxGame.FoxTypes.EImpactTypes
/*enum EImpactTypes
{
	EIT_Standard                                       = 0,
	EIT_Electro                                        = 1,
	EIT_Explosive                                      = 2,
	EIT_Incendiary                                     = 3,
	EIT_Toxic                                          = 4,
	EIT_Magnum                                         = 5,
	EIT_MAX                                            = 6
};*/

// Enum FoxGame.FoxTypes.EThreatLevel
/*enum EThreatLevel
{
	ETL_NoThreat                                       = 0,
	ETL_LowThreat                                      = 1,
	ETL_MediumThreat                                   = 2,
	ETL_HighThreat                                     = 3,
	ETL_MAX                                            = 4
};*/

// Enum FoxGame.FoxTypes.EPawnUseDialogEvent
/*enum EPawnUseDialogEvent
{
	DialogEvent_FlagGrab                               = 0,
	DialogEvent_FlagDrop                               = 1,
	DialogEvent_DomPointCapture                        = 2,
	DialogEvent_DomPointHack                           = 3,
	DialogEvent_HillPointCapturing                     = 4,
	DialogEvent_HillPointCaptured                      = 5,
	DialogEvent_DepotUse                               = 6,
	DialogEvent_HardsuitHack                           = 7,
	DialogEvent_MAX                                    = 8
};*/

// Enum FoxGame.FoxTypes.EDamageType
/*enum EDamageType
{
	DamageType_Normal                                  = 0,
	DamageType_Repair                                  = 1,
	DamageType_Heal                                    = 2,
	DamageType_MAX                                     = 3
};*/

// Enum FoxGame.FoxTypes.EScoreEvents
/*enum EScoreEvents
{
	ScoreEvent_Invalid                                 = 0,
	ScoreEvent_FlagGrab                                = 1,
	ScoreEvent_FlagCapture                             = 2,
	ScoreEvent_FlagCarrierKill                         = 3,
	ScoreEvent_FlagReturn                              = 4,
	ScoreEvent_FlagTeamCapture                         = 5,
	ScoreEvent_AttackPoint                             = 6,
	ScoreEvent_DefendPoint                             = 7,
	ScoreEvent_CapturePoint                            = 8,
	ScoreEvent_CaptureAssist                           = 9,
	ScoreEvent_HackPoint                               = 10,
	ScoreEvent_HoldPoint                               = 11,
	ScoreEvent_AssistCapturePoint                      = 12,
	ScoreEvent_BecomeHighThreat                        = 13,
	ScoreEvent_BecomeWarlord                           = 14,
	ScoreEvent_MoraleBoost                             = 15,
	ScoreEvent_Revive                                  = 16,
	ScoreEvent_Heal                                    = 17,
	ScoreEvent_Repair                                  = 18,
	ScoreEvent_SupplyAmmo                              = 19,
	ScoreEvent_KillPayloadPilot                        = 20,
	ScoreEvent_BecomePayloadPilot                      = 21,
	ScoreEvent_DisablePayload                          = 22,
	ScoreEvent_DisablePayloadTeam                      = 23,
	ScoreEvent_RepairPayload                           = 24,
	ScoreEvent_FixPayload                              = 25,
	ScoreEvent_FixPayloadTeam                          = 26,
	ScoreEvent_ClearPayloadCheckPoint                  = 27,
	ScoreEvent_KilledHardSuit                          = 28,
	ScoreEvent_DestroyBarricade                        = 29,
	ScoreEvent_DestroyProxMine                         = 30,
	ScoreEvent_DestroyStunMine                         = 31,
	ScoreEvent_DestroyDecoy                            = 32,
	ScoreEvent_DestroyHRVJammer                        = 33,
	ScoreEvent_KillTurret                              = 34,
	ScoreEvent_GrabYourKillTag                         = 35,
	ScoreEvent_GrabOtherKillTag                        = 36,
	ScoreEvent_OtherGrabYourKillTag                    = 37,
	ScoreEvent_DenyKillTag                             = 38,
	ScoreEvent_TeamDenyKillTag                         = 39,
	ScoreEvent_GriefTauntUnder2Sec                     = 40,
	ScoreEvent_GriefTauntUnder3Sec                     = 41,
	ScoreEvent_GriefTauntUnder4Sec                     = 42,
	ScoreEvent_GriefTauntUnder5Sec                     = 43,
	ScoreEvent_GriefTauntOver5Sec                      = 44,
	ScoreEvent_DestroyBeacon                           = 45,
	ScoreEvent_MAX                                     = 46
};*/

// Enum FoxGame.FoxTypes.EAimingResult
/*enum EAimingResult
{
	AR_None                                            = 0,
	AR_Friendly                                        = 1,
	AR_MedicFriendly                                   = 2,
	AR_EnemyInIdealRange                               = 3,
	AR_EnemyInMaxRange                                 = 4,
	AR_EnemyOutOfRange                                 = 5,
	AR_MAX                                             = 6
};*/

// Enum FoxGame.FoxTypes.EEmblemLayer
/*enum EEmblemLayer
{
	EEL_Any                                            = 0,
	EEL_Top                                            = 1,
	EEL_Middle                                         = 2,
	EEL_Bottom                                         = 3,
	EEL_MAX                                            = 4
};*/

// Enum FoxGame.FoxTypes.EClanRank
/*enum EClanRank
{
	ECR_Leader                                         = 0,
	ECR_Officer                                        = 1,
	ECR_Member                                         = 2,
	ECR_MAX                                            = 3
};*/

// Enum FoxGame.FoxTypes.EAttachSlot
/*enum EAttachSlot
{
	EASlot_RightHand                                   = 0,
	EASlot_LeftHand                                    = 1,
	EASlot_Primary                                     = 2,
	EASlot_Secondary                                   = 3,
	EASlot_Inventory1                                  = 4,
	EASlot_Inventory2                                  = 5,
	EASlot_Melee                                       = 6,
	EASlot_None                                        = 7,
	EASlot_MAX                                         = 8
};*/

// Enum FoxGame.FoxTypes.EGearType
/*enum EGearType
{
	GearType_R1                                        = 0,
	GearType_L1                                        = 1,
	GearType_R2                                        = 2,
	GearType_L2                                        = 3,
	GearType_MAX                                       = 4
};*/

// Enum FoxGame.FoxTypes.PayloadProgressBarDirections_UIMode
/*enum PayloadProgressBarDirections_UIMode
{
	PPBDUI_NotMoving                                   = 0,
	PPBDUI_Left                                        = 1,
	PPBDUI_Right                                       = 2,
	PPBDUI_MAX                                         = 3
};*/

// Enum FoxGame.FoxTypes.PayloadProgressBarDirections_GameMode
/*enum PayloadProgressBarDirections_GameMode
{
	PPBDGM_NotMoving                                   = 0,
	PPBDGM_DefendersMoving                             = 1,
	PPBDGM_AttackersMoving                             = 2,
	PPBDGM_MAX                                         = 3
};*/

// Enum FoxGame.FoxTypes.EHardSuitWeakPointUIState
/*enum EHardSuitWeakPointUIState
{
	HSWPUS_READY                                       = 0,
	HSWPUS_ACTIVE                                      = 1,
	HSWPUS_COOLDOWN                                    = 2,
	HSWPUS_MAX                                         = 3
};*/

// Enum FoxGame.FoxTypes.ClanInfoTypes
/*enum ClanInfoTypes
{
	CIT_TAG                                            = 0,
	CIT_NAME                                           = 1,
	CIT_BOTH                                           = 2,
	CIT_MAX                                            = 3
};*/

// Enum FoxGame.FoxTypes.EUnlockType
/*enum EUnlockType
{
	EUN_Count                                          = 0,
	EUN_BitMask                                        = 1,
	EUN_MAX                                            = 2
};*/

// Enum FoxGame.FoxDialogBox.EDialogBoxType
/*enum EDialogBoxType
{
	EDBT_INFO                                          = 0,
	EDBT_OK                                            = 1,
	EDBT_OKCANCEL                                      = 2,
	EDBT_CANCEL                                        = 3,
	EDBT_INPUTSTRING                                   = 4,
	EDBT_NEWITEMLIST                                   = 5,
	EDBT_NEWITEMLISTCONTENTS                           = 6,
	EDBT_EXPIREDITEMLIST                               = 7,
	EDBT_MAX                                           = 8
};*/

// Enum FoxGame.FoxPawn.EDialogInstigator
/*enum EDialogInstigator
{
	EDS_Any                                            = 0,
	EDS_Neutral                                        = 1,
	EDS_Friendly                                       = 2,
	EDS_Enemy                                          = 3,
	EDS_MAX                                            = 4
};*/

// Enum FoxGame.FoxPawn.ETraceType
/*enum ETraceType
{
	ETT_PlayerViewpoint                                = 0,
	ETT_PawnUnderCursor                                = 1,
	ETT_MAX                                            = 2
};*/

// Enum FoxGame.FoxPawn.MeshVisibilityMode
/*enum MeshVisibilityMode
{
	EMVM_FirstPerson                                   = 0,
	EMVM_ThirdPerson                                   = 1,
	EMVM_HideAll                                       = 2,
	EMVM_MAX                                           = 3
};*/

// Enum FoxGame.FoxPawn.EntryType
/*enum EntryType
{
	EET_None                                           = 0,
	EET_Rappel                                         = 1,
	EET_Rappel01                                       = 2,
	EET_FallOverWall                                   = 3,
	EET_ClimbDownWall                                  = 4,
	EET_JumpDown                                       = 5,
	EET_DeadJump                                       = 6,
	EET_GarageRoll                                     = 7,
	EET_KickDoor                                       = 8,
	EET_SquatStand                                     = 9,
	EET_WindowDive                                     = 10,
	EET_WindowExit                                     = 11,
	EET_DropDown                                       = 12,
	EET_WallJump                                       = 13,
	EET_HandRailJump                                   = 14,
	EET_SlideDownPipe                                  = 15,
	EETCrawlOut                                        = 16,
	EET_Max                                            = 17,
	EntryType_MAX                                      = 18
};*/

// Enum FoxGame.FoxPawn.EStealthState
/*enum EStealthState
{
	ESS_Inactive                                       = 0,
	ESS_TranslucentIn                                  = 1,
	ESS_TransparentIn                                  = 2,
	ESS_Active                                         = 3,
	ESS_TransparentOut                                 = 4,
	ESS_TranslucentOut                                 = 5,
	ESS_MAX                                            = 6
};*/

// Enum FoxGame.FoxPawn.EWeaponSwitch
/*enum EWeaponSwitch
{
	WS_None                                            = 0,
	WS_Deselect                                        = 1,
	WS_Select                                          = 2,
	WS_MAX                                             = 3
};*/

// Enum FoxGame.FoxPawn.EWeaponType
/*enum EWeaponType
{
	WT_Primary                                         = 0,
	WT_Secondary                                       = 1,
	WT_Melee                                           = 2,
	WT_Candy                                           = 3,
	WT_Grenade                                         = 4,
	WT_Special                                         = 5,
	WT_Invalid                                         = 6,
	WT_Max                                             = 7
};*/

// Enum FoxGame.FoxPawn.ZoomState
/*enum ZoomState
{
	EZS_Normal                                         = 0,
	EZS_TightAim                                       = 1,
	EZS_Scoped                                         = 2,
	EZS_MAX                                            = 3
};*/

// Enum FoxGame.FoxPawn.EBodyStance
/*enum EBodyStance
{
	BS_FullBody                                        = 0,
	BS_Head                                            = 1,
	BS_UpperBody                                       = 2,
	BS_LowerBody                                       = 3,
	BS_LeftArm                                         = 4,
	BS_RightArm                                        = 5,
	BS_MAX                                             = 6
};*/

// Enum FoxGame.FoxSquadInfo.ESquadCommandType
/*enum ESquadCommandType
{
	SCT_GoToArea                                       = 0,
	SCT_Regroup                                        = 1,
	SCT_MAX                                            = 2
};*/

// Enum FoxGame.FoxSquadInfo.ESquadBehaviorSetting
/*enum ESquadBehaviorSetting
{
	SBS_Passive                                        = 0,
	SBS_Aggressive                                     = 1,
	SBS_MAX                                            = 2
};*/

// Enum FoxGame.FoxSquadInfo.ESquadFormationMode
/*enum ESquadFormationMode
{
	SFM_Circle                                         = 0,
	SFM_MAX                                            = 1
};*/

// Enum FoxGame.FoxGame.ModifierCombination
/*enum ModifierCombination
{
	EMC_Add                                            = 0,
	EMC_Multiply                                       = 1,
	EMC_Max                                            = 2
};*/

// Enum FoxGame.FoxGame.EventRecurrance
/*enum EventRecurrance
{
	EER_Once                                           = 0,
	EER_Weekly                                         = 1,
	EER_MonthlyDate                                    = 2,
	EER_MonthlyDayOfWeek                               = 3,
	EER_AnnuallyDate                                   = 4,
	EER_AnuallyDayOfWeek                               = 5,
	EER_Max                                            = 6
};*/

// Enum FoxGame.FoxGame.RankEvents
/*enum RankEvents
{
	ERMS_Kill                                          = 0,
	ERMS_Death                                         = 1,
	ERMS_Assist                                        = 2,
	ERMS_MAX                                           = 3
};*/

// Enum FoxGame.FoxPC.EPlayerSpectateMode
/*enum EPlayerSpectateMode
{
	PSM_Corpse                                         = 0,
	PSM_KillCam                                        = 1,
	PSM_Team                                           = 2,
	PSM_FreeCam                                        = 3,
	PSM_Viewpoints                                     = 4,
	PSM_Max                                            = 5
};*/

// Enum FoxGame.FoxPC.EMessageBoxType
/*enum EMessageBoxType
{
	EMBT_OK                                            = 0,
	EMBT_YesNo                                         = 1,
	EMBT_Cancel                                        = 2,
	EMBT_Max                                           = 3
};*/

// Enum FoxGame.FoxPC.EHRVState
/*enum EHRVState
{
	EHRVS_Ready                                        = 0,
	EHRVS_Recharging                                   = 1,
	EHRVS_TurningOn                                    = 2,
	EHRVS_Active                                       = 3,
	EHRVS_TurningOff                                   = 4,
	EHRVS_MAX                                          = 5
};*/

// Enum FoxGame.FoxAIAction_FollowController.FollowTarget
/*enum FollowTarget
{
	FT_Leader                                          = 0,
	FT_Enemy                                           = 1,
	FT_MAX                                             = 2
};*/

// Enum FoxGame.FoxAICondition_Group.ConditionOperation
/*enum ConditionOperation
{
	CO_AND                                             = 0,
	CO_OR                                              = 1,
	CO_MAX                                             = 2
};*/

// Enum FoxGame.FoxAICondition_TargetAligned.AlignmentType
/*enum AlignmentType
{
	ALT_Enemy                                          = 0,
	ALT_Squad                                          = 1,
	ALT_Specified                                      = 2,
	ALT_MAX                                            = 3
};*/

// Enum FoxGame.FoxAICondition_TargetRange.RangeEnum
/*enum RangeEnum
{
	RE_LessThan                                        = 0,
	RE_GreaterThan                                     = 1,
	RE_MAX                                             = 2
};*/

// Enum FoxGame.FoxAICondition_TargetRange.RangeType
/*enum RangeType
{
	RT_ActiveTarget                                    = 0,
	RT_AnyEnemy                                        = 1,
	RT_Leader                                          = 2,
	RT_SquadPosition                                   = 3,
	RT_Vector                                          = 4,
	RT_MAX                                             = 5
};*/

// Enum FoxGame.FoxAICondition_TargetDirection.TargetDirection
/*enum TargetDirection
{
	TD_Front                                           = 0,
	TD_Rear                                            = 1,
	TD_Right                                           = 2,
	TD_Left                                            = 3,
	TD_MAX                                             = 4
};*/

// Enum FoxGame.FoxAnimNode_Movement.EMoveTransChannel
/*enum EMoveTransChannel
{
	EMTC_Idle                                          = 0,
	EMTC_Walk                                          = 1,
	EMTC_Run                                           = 2,
	EMTC_Sprint                                        = 3,
	EMTC_MAX                                           = 4
};*/

// Enum FoxGame.FoxArmoryUI.ECustomizationType
/*enum ECustomizationType
{
	ECT_Primary                                        = 0,
	ECT_Secondary                                      = 1,
	ECT_Hero                                           = 2,
	ECT_Emotes                                         = 3,
	ECT_Armor                                          = 4,
	ECT_Gear                                           = 5,
	ECT_Depot                                          = 6,
	ECT_MAX                                            = 7
};*/

// Enum FoxGame.FoxArmoryUI.EWeaponCustomizationItem
/*enum EWeaponCustomizationItem
{
	ECI_Preset                                         = 0,
	ECI_Receiver                                       = 1,
	ECI_Muzzle                                         = 2,
	ECI_Barrel                                         = 3,
	ECI_Grip                                           = 4,
	ECI_Magazine                                       = 5,
	ECI_Scope                                          = 6,
	ECI_Stock                                          = 7,
	ECI_Hanger                                         = 8,
	ECI_WeaponCamo                                     = 9,
	ECI_MAX                                            = 10
};*/

// Enum FoxGame.FoxArmoryUI.EArmorItem
/*enum EArmorItem
{
	EAI_Helmet                                         = 0,
	EAI_UpperBody                                      = 1,
	EAI_LowerBody                                      = 2,
	EAI_Badge                                          = 3,
	EAI_ArmorCamo                                      = 4,
	EAI_Tactical                                       = 5,
	EAI_R1                                             = 6,
	EAI_L1                                             = 7,
	EAI_R2                                             = 8,
	EAI_L2                                             = 9,
	EAI_ButtPack                                       = 10,
	EAI_Loadout                                        = 11,
	EAI_AARLoadout                                     = 12,
	EAI_OffScreen                                      = 13,
	EAI_CreateCharacter                                = 14,
	EAI_Emote                                          = 15,
	EAI_Emblem                                         = 16,
	EAI_MAX                                            = 17
};*/

// Enum FoxGame.FoxGameObject.EOwningTeam
/*enum EOwningTeam
{
	EOT_Any                                            = 0,
	EOT_Red                                            = 1,
	EOT_Blue                                           = 2,
	EOT_Max                                            = 3
};*/

// Enum FoxGame.FoxCameraLensEffect_Fading.EFadeState
/*enum EFadeState
{
	EFS_None                                           = 0,
	EFS_FadingIn                                       = 1,
	EFS_FadedIn                                        = 2,
	EFS_FadingOut                                      = 3,
	EFS_FadedOut                                       = 4,
	EFS_MAX                                            = 5
};*/

// Enum FoxGame.FoxChatUI.FoxUIChatMode
/*enum FoxUIChatMode
{
	FCM_GLOBAL                                         = 0,
	FCM_LOBBY                                          = 1,
	FCM_TEAM                                           = 2,
	FCM_CLAN                                           = 3,
	FCM_PARTY                                          = 4,
	FCM_WHISPER                                        = 5,
	FCM_HELP                                           = 6,
	FCM_MAX                                            = 7
};*/

// Enum FoxGame.FoxDeployable_Base.EDeployableState
/*enum EDeployableState
{
	DS_UnDeployed                                      = 0,
	DS_Deployed                                        = 1,
	DS_Lowered                                         = 2,
	DS_Destroyed                                       = 3,
	DS_MAX                                             = 4
};*/

// Enum FoxGame.FoxDialogBoxCreatePlayer.EPlayerNameVerifyTags
/*enum EPlayerNameVerifyTags
{
	EPNVT_Valid                                        = 0,
	EPNVT_InvalidChars                                 = 1,
	EPNVT_InUse                                        = 2,
	EPNVT_Unknown                                      = 3,
	EPNVT_InvalidWords                                 = 4,
	EPNVT_TooShort                                     = 5,
	EPNVT_MAX                                          = 6
};*/

// Enum FoxGame.FoxDialogBoxCreateClan.ClanValidationEnum
/*enum ClanValidationEnum
{
	CVE_Available                                      = 0,
	CVE_Taken                                          = 1,
	CVE_InvalidChars                                   = 2,
	CVE_BadWords                                       = 3,
	CVE_MAX                                            = 4
};*/

// Enum FoxGame.FoxDialogBoxItemsExpired.EExpiredItemAction
/*enum EExpiredItemAction
{
	EEIA_None                                          = 0,
	EEIA_Renew                                         = 1,
	EEIA_Trash                                         = 2,
	EEIA_MAX                                           = 3
};*/

// Enum FoxGame.FoxGameObject_Bomb.EBombStatus
/*enum EBombStatus
{
	BOMB_AT_BASE                                       = 0,
	BOMB_DROPPED                                       = 1,
	BOMB_PLANTED                                       = 2,
	BOMB_CARRIED                                       = 3,
	BOMB_MAX                                           = 4
};*/

// Enum FoxGame.FoxGameObject_ControlPoint.EControlPointType
/*enum EControlPointType
{
	ECPT_UNSET                                         = 0,
	ECPT_CONTROL_POINT_A                               = 1,
	ECPT_CONTROL_POINT_B                               = 2,
	ECPT_CONTROL_POINT_C                               = 3,
	ECPT_CONTROL_POINT_D                               = 4,
	ECPT_CONTROL_POINT_E                               = 5,
	ECPT_MAX                                           = 6
};*/

// Enum FoxGame.FoxGRI.EMapSkipVoteStatus
/*enum EMapSkipVoteStatus
{
	EMSVS_Unset                                        = 0,
	EMSVS_Open                                         = 1,
	EMSVS_Closed                                       = 2,
	EMSVS_MAX                                          = 3
};*/

// Enum FoxGame.FoxGRI.EGameStatus
/*enum EGameStatus
{
	GS_None                                            = 0,
	GS_Intermission                                    = 1,
	GS_PreMatch                                        = 2,
	GS_RoundInProgress                                 = 3,
	GS_RoundOver                                       = 4,
	GS_MAX                                             = 5
};*/

// Enum FoxGame.FoxHostMigration.ESessionState
/*enum ESessionState
{
	ESS_None                                           = 0,
	ESS_CleaningUpForNextSession                       = 1,
	ESS_TravellingToNextSession                        = 2,
	ESS_WaitingToMigrateHost                           = 3,
	ESS_HostMigrationTimer                             = 4,
	ESS_CleaningUpForHostMigration                     = 5,
	ESS_TravellingForMigrateHost                       = 6,
	ESS_SearchingForNewGames                           = 7,
	ESS_MAX                                            = 8
};*/

// Enum FoxGame.FoxHUD.EHudState
/*enum EHudState
{
	HudState_None                                      = 0,
	HudState_Main                                      = 1,
	HudState_Spectator                                 = 2,
	HudState_MAX                                       = 3
};*/

// Enum FoxGame.FoxHUD.EGameLobbyType
/*enum EGameLobbyType
{
	LobbyType_Intermission                             = 0,
	LobbyType_PreGame                                  = 1,
	LobbyType_Pause                                    = 2,
	LobbyType_RoundEnd                                 = 3,
	LobbyType_MAX                                      = 4
};*/

// Enum FoxGame.FoxHUDBO.EHudTalkState
/*enum EHudTalkState
{
	EHTS_NOT_TALKING                                   = 0,
	EHTS_TALKING                                       = 1,
	EHTS_GAME_MUTED                                    = 2,
	EHTS_LIVE_MUTED                                    = 3,
	EHTS_MAX                                           = 4
};*/

// Enum FoxGame.FoxHudMiniGameUse.UseMiniGameAction
/*enum UseMiniGameAction
{
	UMGA_HardSuit                                      = 0,
	UMGA_Payload                                       = 1,
	UMGA_HardSuitWeakPoint                             = 2,
	UMGA_UseObject                                     = 3,
	UMGA_UseSyringe                                    = 4,
	UMGA_Revive                                        = 5,
	UMGA_Reload                                        = 6,
	UMGA_Heal                                          = 7,
	UMGA_Barricade                                     = 8,
	UMGA_Turret                                        = 9,
	UMGA_HackOverload                                  = 10,
	UMGA_HackInUse                                     = 11,
	UMGA_Max                                           = 12
};*/

// Enum FoxGame.FoxHudUI.EFoxRespawnFocus
/*enum EFoxRespawnFocus
{
	FRF_Respawn                                        = 0,
	FRF_Revive                                         = 1,
	FRF_Beacon                                         = 2,
	FRF_MAX                                            = 3
};*/

// Enum FoxGame.FoxItemPurchaseDialogBox.EPricingCriteria
/*enum EPricingCriteria
{
	EPC_None                                           = 0,
	EPC_Rank                                           = 1,
	EPC_Skill                                          = 2,
	EPC_Award                                          = 3,
	EPC_NoPrice                                        = 4,
	EPC_Unavailable                                    = 5,
	EPC_MAX                                            = 6
};*/

// Enum FoxGame.FoxLensFlare_Explosion.ELensExplosionState
/*enum ELensExplosionState
{
	ELES_Stage1                                        = 0,
	ELES_Stage2                                        = 1,
	ELES_MAX                                           = 2
};*/

// Enum FoxGame.FoxUIServerListWidget.EServerAccessType
/*enum EServerAccessType
{
	ESAT_Public                                        = 0,
	ESAT_Private                                       = 1,
	ESAT_Clan                                          = 2,
	ESAT_Level                                         = 3,
	ESAT_MAX                                           = 4
};*/

// Enum FoxGame.FoxUIServerListWidget.EServerDesignationIcon
/*enum EServerDesignationIcon
{
	ESDI_None                                          = 0,
	ESDI_Trophy                                        = 1,
	ESDI_Star                                          = 2,
	ESDI_MAX                                           = 3
};*/

// Enum FoxGame.FoxUIServerListWidget.EServerDesignationType
/*enum EServerDesignationType
{
	ESDT_Official                                      = 0,
	ESDT_Standard                                      = 1,
	EDST_Premium                                       = 2,
	EServerDesignationType_MAX                         = 3
};*/

// Enum FoxGame.FoxUIServerListWidget.EServerListSortType
/*enum EServerListSortType
{
	ESLST_Map                                          = 0,
	ESLST_Agent                                        = 1,
	ESLST_GameMode                                     = 2,
	ESLST_Latency                                      = 3,
	ESLST_MAX                                          = 4
};*/

// Enum FoxGame.FoxLobbyUIIntermission.IntermissionMusicState
/*enum IntermissionMusicState
{
	EIMS_None                                          = 0,
	EIMS_FadingOut                                     = 1,
	EIMS_Waiting                                       = 2,
	EIMS_Full                                          = 3,
	EIMS_MAX                                           = 4
};*/

// Enum FoxGame.FoxRegionInfo.EGameRegionDesignation
/*enum EGameRegionDesignation
{
	EGRD_Production                                    = 0,
	EGRD_Staging                                       = 1,
	EGRD_Development                                   = 2,
	EGRD_MAX                                           = 3
};*/

// Enum FoxGame.FoxLoginUI.ELoginNoticeType
/*enum ELoginNoticeType
{
	ELNT_Error                                         = 0,
	ELNT_Warning                                       = 1,
	ELNT_MAX                                           = 2
};*/

// Enum FoxGame.FoxMiniGame_Align.EButtonPresses
/*enum EButtonPresses
{
	BP_Right                                           = 0,
	BP_Left                                            = 1,
	BP_MAX                                             = 2
};*/

// Enum FoxGame.FoxOnlineStatsWriteFatalityBase.FatalityEnum
/*enum FatalityEnum
{
	FTE_HardSuit                                       = 0,
	FTE_ADS                                            = 1,
	FTE_HRV                                            = 2,
	FTE_KilledByBot                                    = 3,
	FTE_HeadShot                                       = 4,
	FTE_Melee                                          = 5,
	FTE_Suicide                                        = 6,
	FTE_Stunned                                        = 7,
	FTE_EMP                                            = 8,
	FTE_Cloaked                                        = 9,
	FTE_HighThreat                                     = 10,
	FTE_Revenge                                        = 11,
	FTE_ScorpTank                                      = 12,
	FTE_Max                                            = 13
};*/

// Enum FoxGame.FoxOnlineStatsWriteWeaponUse.ERepairType
/*enum ERepairType
{
	EREPAIR_Hardsuit                                   = 0,
	EREPAIR_Turret                                     = 1,
	EREPAIR_Barricade                                  = 2,
	EREPAIR_MAX                                        = 3
};*/

// Enum FoxGame.FoxOnlineStatsWriteWeaponUse.WeaponUseTimeEventEnum
/*enum WeaponUseTimeEventEnum
{
	WUTE_Equipped_Start                                = 0,
	WUTE_Equipped_Stop                                 = 1,
	WUTE_HRV_Start                                     = 2,
	WUTE_HRV_Stop                                      = 3,
	WUTE_ADS_Start                                     = 4,
	WUTE_ADS_Stop                                      = 5,
	WUTE_HardSuit_Start                                = 6,
	WUTE_HardSuit_Stop                                 = 7,
	WUTE_Max                                           = 8
};*/

// Enum FoxGame.FoxPawn_HardSuit.HardSuitBurnState
/*enum HardSuitBurnState
{
	EHSBS_NotBurning                                   = 0,
	EHSBS_RampingUp                                    = 1,
	EHSBS_Burning                                      = 2,
	EHSBS_RampingDown                                  = 3,
	EHSBS_MAX                                          = 4
};*/

// Enum FoxGame.FoxProfileSettings.EOnOffOption
/*enum EOnOffOption
{
	OOO_Off                                            = 0,
	OOO_On                                             = 1,
	OOO_Unset                                          = 2,
	OOO_MAX                                            = 3
};*/

// Enum FoxGame.FoxProfileSettingsPC.EFoxBindableKeys
/*enum EFoxBindableKeys
{
	FOXBND_Unbound                                     = 0,
	FOXBND_MouseX                                      = 1,
	FOXBND_MouseY                                      = 2,
	FOXBND_LeftMouseButton                             = 3,
	FOXBND_RightMouseButton                            = 4,
	FOXBND_MiddleMouseButton                           = 5,
	FOXBND_ThumbMouseButton                            = 6,
	FOXBND_ThumbMouseButton2                           = 7,
	FOXBND_MouseWheelUp                                = 8,
	FOXBND_MouseWheelDown                              = 9,
	FOXBND_BackSpace                                   = 10,
	FOXBND_Enter                                       = 11,
	FOXBND_Pause                                       = 12,
	FOXBND_CapsLock                                    = 13,
	FOXBND_SpaceBar                                    = 14,
	FOXBND_PageUp                                      = 15,
	FOXBND_PageDown                                    = 16,
	FOXBND_End                                         = 17,
	FOXBND_Left                                        = 18,
	FOXBND_Up                                          = 19,
	FOXBND_Right                                       = 20,
	FOXBND_Down                                        = 21,
	FOXBND_Delete                                      = 22,
	FOXBND_Zero                                        = 23,
	FOXBND_One                                         = 24,
	FOXBND_Two                                         = 25,
	FOXBND_Three                                       = 26,
	FOXBND_Four                                        = 27,
	FOXBND_Five                                        = 28,
	FOXBND_Six                                         = 29,
	FOXBND_Seven                                       = 30,
	FOXBND_Eight                                       = 31,
	FOXBND_Nine                                        = 32,
	FOXBND_A                                           = 33,
	FOXBND_B                                           = 34,
	FOXBND_C                                           = 35,
	FOXBND_D                                           = 36,
	FOXBND_E                                           = 37,
	FOXBND_F                                           = 38,
	FOXBND_G                                           = 39,
	FOXBND_H                                           = 40,
	FOXBND_I                                           = 41,
	FOXBND_J                                           = 42,
	FOXBND_K                                           = 43,
	FOXBND_L                                           = 44,
	FOXBND_M                                           = 45,
	FOXBND_N                                           = 46,
	FOXBND_O                                           = 47,
	FOXBND_P                                           = 48,
	FOXBND_Q                                           = 49,
	FOXBND_R                                           = 50,
	FOXBND_S                                           = 51,
	FOXBND_T                                           = 52,
	FOXBND_U                                           = 53,
	FOXBND_V                                           = 54,
	FOXBND_W                                           = 55,
	FOXBND_X                                           = 56,
	FOXBND_Y                                           = 57,
	FOXBND_Z                                           = 58,
	FOXBND_NumPadZero                                  = 59,
	FOXBND_NumPadOne                                   = 60,
	FOXBND_NumPadTwo                                   = 61,
	FOXBND_NumPadThree                                 = 62,
	FOXBND_NumPadFour                                  = 63,
	FOXBND_NumPadFive                                  = 64,
	FOXBND_NumPadSix                                   = 65,
	FOXBND_NumPadSeven                                 = 66,
	FOXBND_NumPadEight                                 = 67,
	FOXBND_NumPadNine                                  = 68,
	FOXBND_Multiply                                    = 69,
	FOXBND_Add                                         = 70,
	FOXBND_Subtract                                    = 71,
	FOXBND_Decimal                                     = 72,
	FOXBND_Divide                                      = 73,
	FOXBND_F1                                          = 74,
	FOXBND_F2                                          = 75,
	FOXBND_F3                                          = 76,
	FOXBND_F4                                          = 77,
	FOXBND_F5                                          = 78,
	FOXBND_F6                                          = 79,
	FOXBND_F7                                          = 80,
	FOXBND_F8                                          = 81,
	FOXBND_F9                                          = 82,
	FOXBND_F10                                         = 83,
	FOXBND_F11                                         = 84,
	FOXBND_F12                                         = 85,
	FOXBND_NumLock                                     = 86,
	FOXBND_ScrollLock                                  = 87,
	FOXBND_LeftShift                                   = 88,
	FOXBND_RightShift                                  = 89,
	FOXBND_LeftControl                                 = 90,
	FOXBND_RightControl                                = 91,
	FOXBND_LeftAlt                                     = 92,
	FOXBND_RightAlt                                    = 93,
	FOXBND_Semicolon                                   = 94,
	FOXBND_Equals                                      = 95,
	FOXBND_Comma                                       = 96,
	FOXBND_Underscore                                  = 97,
	FOXBND_Period                                      = 98,
	FOXBND_Slash                                       = 99,
	FOXBND_Tilde                                       = 100,
	FOXBND_LeftBracket                                 = 101,
	FOXBND_Backslash                                   = 102,
	FOXBND_RightBracket                                = 103,
	FOXBND_Quote                                       = 104,
	FOXBND_Tab                                         = 105,
	FOXBND_Home                                        = 106,
	FOXBND_Insert                                      = 107,
	FOXBND_MAX                                         = 108
};*/

// Enum FoxGame.FoxProfileSettingsPC.EDigitalButtonActions
/*enum EDigitalButtonActions
{
	DBA_MoveForward                                    = 0,
	DBA_MoveBackward                                   = 1,
	DBA_StrafeLeft                                     = 2,
	DBA_StrafeRight                                    = 3,
	DBA_SelectInventory1                               = 4,
	DBA_SelectInventory2                               = 5,
	DBA_LastWeapon                                     = 6,
	DBA_PrevWeapon                                     = 7,
	DBA_NextWeapon                                     = 8,
	DBA_Fire                                           = 9,
	DBA_Sprint                                         = 10,
	DBA_Visor                                          = 11,
	DBA_Melee                                          = 12,
	DBA_PickupWeapon                                   = 13,
	DBA_Reload                                         = 14,
	DBA_Crouch                                         = 15,
	DBA_Jump                                           = 16,
	DBA_Use                                            = 17,
	DBA_ToggleZoom                                     = 18,
	DBA_PushToTalk                                     = 19,
	DBA_PrimaryWeapon                                  = 20,
	DBA_SecondaryWeapon                                = 21,
	DBA_SelectTactical                                 = 22,
	DBA_SelectInventory3                               = 23,
	DBA_SelectInventory4                               = 24,
	DBA_ChangeLoadout                                  = 25,
	DBA_Taunt                                          = 26,
	DBA_Chat                                           = 27,
	DBA_QuickGear                                      = 28,
	DBA_INVALID                                        = 29,
	DBA_MAX                                            = 30
};*/

// Enum FoxGame.FoxServerBrowserUI.EServerListUpdateStatus
/*enum EServerListUpdateStatus
{
	ESLUS_Complete                                     = 0,
	ESLUS_Failure                                      = 1,
	ESLUS_Clear                                        = 2,
	ESLUS_MAX                                          = 3
};*/

// Enum FoxGame.FoxSettingsUIAccount.EAccountSettings
/*enum EAccountSettings
{
	EACS_PurchaseLength                                = 0,
	EACS_PurchaseCurrency                              = 1,
	EACS_PurchaseAutoEquip                             = 2,
	EACS_MAX                                           = 3
};*/

// Enum FoxGame.FoxSettingsUIAudio.EAudioSettings
/*enum EAudioSettings
{
	EAS_GameVolume                                     = 0,
	EAS_MusicVolume                                    = 1,
	EAS_FXVolume                                       = 2,
	EAS_DamageCauseAudio                               = 3,
	EAS_DamageTakenAudio                               = 4,
	EAS_StaminaAudio                                   = 5,
	EAS_Subtitles                                      = 6,
	EAS_PushToTalk                                     = 7,
	EAS_PlaybackVolume                                 = 8,
	EAS_VOIPActivationLevel                            = 9,
	EAS_NoiseCancelling                                = 10,
	EAS_Max                                            = 11
};*/

// Enum FoxGame.FoxSettingsUIControls.EControlsSettings
/*enum EControlsSettings
{
	ECS_InvertMouse                                    = 0,
	ECS_Crouch                                         = 1,
	ECS_TightAim                                       = 2,
	ECS_Sprint                                         = 3,
	ECS_HRVToggle                                      = 4,
	ECS_MouseSmoothing                                 = 5,
	ESC_MouseSensitivity                               = 6,
	ESC_TightAimSensitivity                            = 7,
	ECS_Max                                            = 8,
	EControlsSettings_MAX                              = 9
};*/

// Enum FoxGame.FoxSettingsUIGameplay.EGameSettings
/*enum EGameSettings
{
	EGS_SSDVideo                                       = 0,
	EGS_ScoreBoardToggle                               = 1,
	EGS_AutoReload                                     = 2,
	EGS_AutoWeaponSwitch                               = 3,
	EGS_FOV                                            = 4,
	EGS_GoreLevel                                      = 5,
	EGS_HiddenHud                                      = 6,
	EGS_HudChat                                        = 7,
	EGS_SocialNotifications                            = 8,
	EGS_TutorialsEnabled                               = 9,
	EGS_TutorialHistoryClear                           = 10,
	EGS_SmartReticleOpacity                            = 11,
	EGS_StaticCrosshair                                = 12,
	EGS_DepotPing                                      = 13,
	EGS_CrosshairTickMarks                             = 14,
	EGS_CrosshairTickLength                            = 15,
	EGS_CrosshairRotation                              = 16,
	EGS_CrosshairOpacity                               = 17,
	EGS_CrosshairNeutralColor                          = 18,
	EGS_CrosshairFriendlyColor                         = 19,
	EGS_CrosshairEnemyInRangeColor                     = 20,
	EGS_CrosshairEnemyOutOfRangeColor                  = 21,
	EGS_MAX                                            = 22
};*/

// Enum FoxGame.FoxSettingsUIVideo.EAspectRatio
/*enum EAspectRatio
{
	EAR_16x10                                          = 0,
	EAR_16x9                                           = 1,
	EAR_4x3                                            = 2,
	EAR_MAX                                            = 3
};*/

// Enum FoxGame.FoxSettingsUIVideo.EScreenMode
/*enum EScreenMode
{
	SCREENMODE_FULL                                    = 0,
	SCREENMODE_WINDOWED                                = 1,
	SCREENMODE_BORDERLESS                              = 2,
	SCREENMODE_MAX                                     = 3
};*/

// Enum FoxGame.FoxSettingsUIVideo.EVideoSettings
/*enum EVideoSettings
{
	VS_Resolution                                      = 0,
	VS_Gamma                                           = 1,
	VS_WindowMode                                      = 2,
	VS_ShaderDetail                                    = 3,
	VS_WorldDetail                                     = 4,
	VS_CharacterDetail                                 = 5,
	VS_ParticleDetail                                  = 6,
	VS_VSync                                           = 7,
	VS_LetterBox                                       = 8,
	VS_DynamicShadows                                  = 9,
	VS_DecalCullDistance                               = 10,
	VS_StaticDecals                                    = 11,
	VS_DynamicDecals                                   = 12,
	VS_FogVolumes                                      = 13,
	VS_DynamicLights                                   = 14,
	VS_Distortion                                      = 15,
	VS_Bloom                                           = 16,
	VS_AllowMotionBlur                                 = 17,
	VS_DOFType                                         = 18,
	VS_AllowAmbientOcclusion                           = 19,
	VS_AllowLensFlare                                  = 20,
	VS_AllowPostProcessMLAA                            = 21,
	VS_AllowLightShafts                                = 22,
	VS_SmoothFrameRate                                 = 23,
	VS_AllowDirectX                                    = 24,
	VS_ScreenDoorFade                                  = 25,
	VS_Tesselation                                     = 26,
	VS_ImageReflections                                = 27,
	VS_MAX                                             = 28
};*/

// Enum FoxGame.FoxTeamInfo.EDSPStatus
/*enum EDSPStatus
{
	DSP_WAIT                                           = 0,
	DSP_FOUND                                          = 1,
	DSP_NOTFOUND                                       = 2,
	DSP_MAX                                            = 3
};*/

// Enum FoxGame.FoxSkillTreeGemSelection.EGemListFilter
/*enum EGemListFilter
{
	EGLF_All                                           = 0,
	EGLF_Quality1                                      = 1,
	EGLF_Quality2                                      = 2,
	EGLF_Quality3                                      = 3,
	EGLF_Quality4                                      = 4,
	EGLF_Quality5                                      = 5,
	EGLF_MAX                                           = 6
};*/

// Enum FoxGame.FoxSmokeLensFlare.ELensEffectFadeState
/*enum ELensEffectFadeState
{
	ELEFS_FadingIn                                     = 0,
	ELEFS_FadedIn                                      = 1,
	ELEFS_FadingOut                                    = 2,
	ELEFS_MAX                                          = 3
};*/

// Enum FoxGame.FoxSocialCategoryFriends.EFriendSocialTab
/*enum EFriendSocialTab
{
	EFST_FriendList                                    = 0,
	EFST_FindFriend                                    = 1,
	EFST_IgnoredList                                   = 2,
	EFST_MAX                                           = 3
};*/

// Enum FoxGame.FoxSocialCategoryParty.EPartySocialTab
/*enum EPartySocialTab
{
	EPST_PartyList                                     = 0,
	EPST_FriendList                                    = 1,
	EPST_ClanList                                      = 2,
	EPST_PlayerSearch                                  = 3,
	EPST_MAX                                           = 4
};*/

// Enum FoxGame.FoxSocialCategoryProfile.EGameStatType
/*enum EGameStatType
{
	ESTAT_Int                                          = 0,
	ESTAT_Float                                        = 1,
	ESTAT_Percent                                      = 2,
	ESTAT_CP                                           = 3,
	ESTAT_MAX                                          = 4
};*/

// Enum FoxGame.FoxSocialUpdateWidget.ESocialWidgetState
/*enum ESocialWidgetState
{
	ESWS_None                                          = 0,
	ESWS_Visible                                       = 1,
	ESWS_Fading                                        = 2,
	ESWS_MAX                                           = 3
};*/

// Enum FoxGame.FoxSpecialMove_EnterLadder.SpecialMove_EnterLadder_Index
/*enum SpecialMove_EnterLadder_Index
{
	ESMELI_Enter                                       = 0,
	ESMELI_Max                                         = 1
};*/

// Enum FoxGame.FoxSpecialMove_ExitLadder.SpecialMove_ExitLadder_Index
/*enum SpecialMove_ExitLadder_Index
{
	ESMExLI_Exit                                       = 0,
	ESMExLI_Max                                        = 1
};*/

// Enum FoxGame.FoxSpecialMove_Jump.SpecialMove_Jump_Index
/*enum SpecialMove_Jump_Index
{
	ESMJI_Standing                                     = 0,
	ESMJI_Crouched                                     = 1,
	ESMJI_Max                                          = 2
};*/

// Enum FoxGame.FoxSpecialMove_Land.SpecialMove_Land_Index
/*enum SpecialMove_Land_Index
{
	ESMLI_Standing                                     = 0,
	ESMLI_Crouched                                     = 1,
	ESMLI_Max                                          = 2
};*/

// Enum FoxGame.FoxSpecialMove_PlantBomb.SpecialMove_PlantBomb_Index
/*enum SpecialMove_PlantBomb_Index
{
	ESMPBI_PlantingBomb                                = 0,
	ESMPBI_Idle                                        = 1,
	ESMPBI_Max                                         = 2
};*/

// Enum FoxGame.FoxSpecialMove_RemoveBomb.SpecialMove_RemoveBomb_Index
/*enum SpecialMove_RemoveBomb_Index
{
	ESMRBI_PlantBomb                                   = 0,
	ESMRBI_RemoveBomb                                  = 1,
	ESMRBI_Max                                         = 2
};*/

// Enum FoxGame.FoxStoreUITagListWidget.ETagHierarchyState
/*enum ETagHierarchyState
{
	ETHS_None                                          = 0,
	ETHS_Collapsed                                     = 1,
	ETHS_Expanded                                      = 2,
	ETHS_MAX                                           = 3
};*/

// Enum FoxGame.FoxTutorialUI.ETutorialPromptPosition
/*enum ETutorialPromptPosition
{
	ETPP_Center                                        = 0,
	ETPP_TopLeft                                       = 1,
	ETPP_Top                                           = 2,
	ETPP_TopRight                                      = 3,
	ETPP_Right                                         = 4,
	ETPP_BottomRight                                   = 5,
	ETPP_Bottom                                        = 6,
	ETPP_BottomLeft                                    = 7,
	ETPP_Left                                          = 8,
	ETPP_MAX                                           = 9
};*/

// Enum FoxGame.FoxUIEmblemPanelWidget.EEmblemComponentType
/*enum EEmblemComponentType
{
	EECT_Icon                                          = 0,
	EECT_Color                                         = 1,
	EECT_MAX                                           = 2
};*/

// Enum FoxGame.FoxUIUnlockProgressionWidget.EUnlockCriteria
/*enum EUnlockCriteria
{
	EUC_None                                           = 0,
	EUC_Rank                                           = 1,
	EUC_Skill                                          = 2,
	EUC_Award                                          = 3,
	EUC_MAX                                            = 4
};*/

// Enum FoxGame.FoxWeapon.WeaponSocketOffsetReference
/*enum WeaponSocketOffsetReference
{
	WSO_RightHand                                      = 0,
	WSO_LeftHand                                       = 1,
	WSO_IronSight                                      = 2,
	WSO_MAX                                            = 3
};*/

// Enum FoxGame.FoxWeapon.WeaponAttachLocation
/*enum WeaponAttachLocation
{
	WAL_RightHand                                      = 0,
	WAL_Camera                                         = 1,
	WAL_LeftHand                                       = 2,
	WAL_MAX                                            = 3
};*/

// Enum FoxGame.FoxWeapon_TargeterBase.ETargetingState
/*enum ETargetingState
{
	ETS_Aquiring                                       = 0,
	ETS_Targeting                                      = 1,
	ETS_Failed                                         = 2,
	ETS_Succeed                                        = 3,
	ETS_MAX                                            = 4
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class FoxGame.FoxAnimNotify_PlayTauntEmote
// 0x0000 (0x0064 - 0x0064)
class UFoxAnimNotify_PlayTauntEmote : public UAnimNotify_PlayParticleEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1418 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNotify_PlayTauntEmote::pClassPointer = NULL;

// Class FoxGame.FoxAnimNotify_Sound
// 0x0004 (0x0060 - 0x005C)
class UFoxAnimNotify_Sound : public UAnimNotify_Sound
{
public:
	unsigned long                                      bPlayOnlyForOwner : 1;                            		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1419 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNotify_Sound::pClassPointer = NULL;

// Class FoxGame.FoxBlockingVolume
// 0x0004 (0x01FC - 0x01F8)
class AFoxBlockingVolume : public ABlockingVolume
{
public:
	unsigned long                                      bBlockProjectiles : 1;                            		// 0x01F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBlockVehicles : 1;                               		// 0x01F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockCharacters : 1;                             		// 0x01F8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1420 ];

		return pClassPointer;
	};

};

UClass* AFoxBlockingVolume::pClassPointer = NULL;

// Class FoxGame.FoxBOCheckpointTriggerVolume
// 0x0018 (0x0210 - 0x01F8)
class AFoxBOCheckpointTriggerVolume : public ADynamicTriggerVolume
{
public:
	TArray< class APlayerStart* >                      RespawnPoints;                                    		// 0x01F8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bForceLiveRespawn : 1;                            		// 0x0204 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	class AVolume*                                     ForceRespawnVolume;                               		// 0x0208 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ValidTeamIndex;                                   		// 0x020C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1421 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* AFoxBOCheckpointTriggerVolume::pClassPointer = NULL;

// Class FoxGame.FoxCameraLensEffect_Base
// 0x0001 (0x0201 - 0x0200)
class AFoxCameraLensEffect_Base : public AEmitterCameraLensEffectBase
{
public:
	unsigned char                                      TargetDPG;                                        		// 0x0200 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1422 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
};

UClass* AFoxCameraLensEffect_Base::pClassPointer = NULL;

// Class FoxGame.FoxCameraLensEffect_TightAim
// 0x0003 (0x0204 - 0x0201)
class AFoxCameraLensEffect_TightAim : public AFoxCameraLensEffect_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1423 ];

		return pClassPointer;
	};

	void SetStrength ( float EffectRatio );
};

UClass* AFoxCameraLensEffect_TightAim::pClassPointer = NULL;

// Class FoxGame.FoxDamageType
// 0x0079 (0x00DD - 0x0064)
class UFoxDamageType : public UDamageType
{
public:
	unsigned long                                      bIgnoreCover : 1;                                 		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIgnoreDamageMultipliers : 1;                     		// 0x0064 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsSuicideDamageType : 1;                         		// 0x0064 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bCanInjure : 1;                                   		// 0x0064 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bAllowDecapitation : 1;                           		// 0x0064 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bIndirectDamage : 1;                              		// 0x0064 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bSpecialtyDamage : 1;                             		// 0x0064 (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	TArray< float >                                    DamageZoneMultipliers;                            		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    DamageZoneMomentumMultipliers;                    		// 0x0074 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              DamagePercentageConsumed;                         		// 0x0080 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CameraShakeMultipler;                             		// 0x0084 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      InstigatingClass;                                 		// 0x0088 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           KillStrings;                                      		// 0x008C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           SuicideStrings;                                   		// 0x0098 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StatusDialogName;                                 		// 0x00A4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UClass*                                      LensEffectClass;                                  		// 0x00B0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     IndirectColor;                                    		// 0x00B4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     IndirectGlow;                                     		// 0x00C0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     IndirectIcon;                                     		// 0x00CC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      GemIncreaseType;                                  		// 0x00D8 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      GemDecreaseType;                                  		// 0x00D9 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      BodyHitType;                                      		// 0x00DA (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      HardSuitHitType;                                  		// 0x00DB (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      HardSuitWPHitType;                                		// 0x00DC (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1424 ];

		return pClassPointer;
	};

	unsigned char GetHardSuitHitType ( unsigned long bWeakPoint );
	unsigned char GetHitType ( unsigned long bHeadShot );
	float GetGemDamageMultipler ( class AController* ControllerInstigator );
	float GetGemDamageReduction ( class AController* ControllerInstigator );
	void AddLensEffect ( class AFoxPawn* VictimPawn, int DamageAmount );
	void ApplyEffect ( class AFoxPawn* VictimPawn, class AController* ControllerInstigator, int* DamageAmount );
	struct FString GetSuicideString ( );
	struct FString GetKillString ( class AFoxPRI* KilledPRI, class APlayerController* PC, unsigned long bHTMLText );
	float GetMomentumMultiplier ( int DamageZone );
	float GetDamageMultiplier ( int DamageZone );
};

UClass* UFoxDamageType::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_Corrosive
// 0x003F (0x011C - 0x00DD)
class UFoxDamageType_Corrosive : public UFoxDamageType
{
public:
	float                                              DamagePercentageUsed;                             		// 0x00E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DistributionExp;                                  		// 0x00E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DotTime;                                          		// 0x00E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              PercentageToDriver;                               		// 0x00EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      DotDamageType;                                    		// 0x00F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       AttachBoneName;                                   		// 0x00F4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystem*                             ThirdPersonEffectPS;                              		// 0x00FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      FirstPersonLensEffect;                            		// 0x0100 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    StartAudioEvent;                                  		// 0x0104 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    StopAudioEvent;                                   		// 0x0108 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MinDotTime;                                       		// 0x010C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxDotTime;                                       		// 0x0110 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MinDamage;                                        		// 0x0114 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MaxDamage;                                        		// 0x0118 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1425 ];

		return pClassPointer;
	};

	float CalculateDotTime ( int DamageAmount );
	void ApplyEffect ( class AFoxPawn* VictimPawn, class AController* ControllerInstigator, int* DamageAmount );
	void eventEffectEnded ( class AFoxPawn* VictimPawn, struct FDOTInfo* CurrentDOTInfo );
	void eventEffectStarted ( class AFoxPawn* VictimPawn, struct FDOTInfo* CurrentDOTInfo );
	void eventApplyDamage ( float Delta, class AFoxPawn* VictimPawn, struct FDOTInfo* CurrentDOTInfo );
};

UClass* UFoxDamageType_Corrosive::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_AIPresets
// 0x008C (0x00F4 - 0x0068)
class UFoxDataProvider_AIPresets : public UUIResourceDataProvider
{
public:
	struct FString                                     AIArchetype;                                      		// 0x0068 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PawnArchetype;                                    		// 0x0074 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PlayerName;                                       		// 0x0080 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bRandomName : 1;                                  		// 0x008C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bRespawnAfterDeath : 1;                           		// 0x008C (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bRandomEmblem : 1;                                		// 0x008C (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	struct FString                                     DialogName;                                       		// 0x0090 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                TauntUnlockID;                                    		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     PrimaryPreset;                                    		// 0x00A0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     SecondaryPreset;                                  		// 0x00AC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FName                                       Gear1Provider;                                    		// 0x00B8 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       Gear2Provider;                                    		// 0x00C0 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       TacticalProvider;                                 		// 0x00C8 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       AvatarProvider;                                   		// 0x00D0 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       HelmetProvider;                                   		// 0x00D8 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       UpperBodyProvider;                                		// 0x00E0 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       LowerBodyProvider;                                		// 0x00E8 (0x0008) [0x0000000000004000]              ( CPF_Config )
	int                                                BodyCamoIndex;                                    		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1426 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_AIPresets::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_Controls
// 0x001C (0x0084 - 0x0068)
class UFoxDataProvider_Controls : public UUIResourceDataProvider
{
public:
	struct FString                                     FriendlyName;                                     		// 0x0068 (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FControlBinding >                   Bindings;                                         		// 0x0074 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bIsSouthPawControl : 1;                           		// 0x0080 (0x0004) [0x0000000000004002] [0x00000001] ( CPF_Const | CPF_Config )
	unsigned long                                      bIsLeftyControl : 1;                              		// 0x0080 (0x0004) [0x0000000000004002] [0x00000002] ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1427 ];

		return pClassPointer;
	};

	struct FString GetControlBindingStringFromCommand ( struct FString CommandString );
	struct FString GetCommandNameFromBinding ( struct FName Key );
	struct FString GetBindingString ( struct FName Key );
};

UClass* UFoxDataProvider_Controls::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_GameModeInfo
// 0x0094 (0x00FC - 0x0068)
class UFoxDataProvider_GameModeInfo : public UUIResourceDataProvider
{
public:
	struct FString                                     GameMode;                                         		// 0x0068 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultMap;                                       		// 0x0074 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     GameSettingsClass;                                		// 0x0080 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     GameSearchClass;                                  		// 0x008C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     OptionSet;                                        		// 0x0098 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FriendlyName;                                     		// 0x00A4 (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x00B0 (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PreviewImageMarkup;                               		// 0x00BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     Prefixes;                                         		// 0x00C8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     IconImage;                                        		// 0x00D4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FName                                       AbbreviatedName;                                  		// 0x00E0 (0x0008) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bMultiplayer : 1;                                 		// 0x00E8 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	float                                              IconU;                                            		// 0x00EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              IconV;                                            		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              IconUL;                                           		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              IconVL;                                           		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1428 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_GameModeInfo::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_GemInfo
// 0x0040 (0x00A8 - 0x0068)
class UFoxDataProvider_GemInfo : public UUIResourceDataProvider
{
public:
	unsigned char                                      GemType;                                          		// 0x0068 (0x0001) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              QualityValues[ 0x5 ];                             		// 0x006C (0x0014) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FString                                     FriendlyTag;                                      		// 0x0080 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyDesc;                                     		// 0x008C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ShortDesc;                                        		// 0x0098 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bIntVal : 1;                                      		// 0x00A4 (0x0004) [0x0000000000004002] [0x00000001] ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1429 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_GemInfo::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_KeyBindings
// 0x0034 (0x009C - 0x0068)
class UFoxDataProvider_KeyBindings : public UUIResourceDataProvider
{
public:
	struct FString                                     FriendlyName;                                     		// 0x0068 (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyToolTip;                                  		// 0x0074 (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CmdName;                                          		// 0x0080 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FName                                       DefaultPrimaryKey;                                		// 0x008C (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       DefaultAlternateKey;                              		// 0x0094 (0x0008) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1430 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_KeyBindings::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_Loadout
// 0x0030 (0x0098 - 0x0068)
class UFoxDataProvider_Loadout : public UUIResourceDataProvider
{
public:
	struct FString                                     PrimaryWeaponClassName;                           		// 0x0068 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     SecondaryWeaponClassName;                         		// 0x0074 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           GrenadeClassNames;                                		// 0x0080 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     VariantIconImageMarkup;                           		// 0x008C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1431 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_Loadout::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_MapInfo
// 0x00B0 (0x0118 - 0x0068)
class UFoxDataProvider_MapInfo : public UUIResourceDataProvider
{
public:
	struct FString                                     MapName;                                          		// 0x0068 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NumPlayers;                                       		// 0x0074 (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyName;                                     		// 0x0080 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x008C (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PreviewImageMarkup;                               		// 0x0098 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             SupportedGameModes;                               		// 0x00A4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bTrialLocked : 1;                                 		// 0x00B0 (0x0004) [0x0000000000004002] [0x00000001] ( CPF_Const | CPF_Config )
	int                                                PresenceContext;                                  		// 0x00B4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	TArray< struct FName >                             BaseLevelStreamNames;                             		// 0x00B8 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DMStreamNames;                                    		// 0x00C4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             TDMStreamNames;                                   		// 0x00D0 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DomStreamNames;                                   		// 0x00DC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             KOTHStreamNames;                                  		// 0x00E8 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             CTFStreamNames;                                   		// 0x00F4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             EOTSStreamNames;                                  		// 0x0100 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             PLStreamNames;                                    		// 0x010C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1432 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_MapInfo::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_Playlist
// 0x0034 (0x009C - 0x0068)
class UFoxDataProvider_Playlist : public UUIResourceDataProvider
{
public:
	TArray< struct FPlaylistPairing >                  PlaylistPairings;                                 		// 0x0068 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FriendlyName;                                     		// 0x0074 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bRandomCycle : 1;                                 		// 0x0080 (0x0004) [0x0000000000004002] [0x00000001] ( CPF_Const | CPF_Config )
	unsigned long                                      bTournament : 1;                                  		// 0x0080 (0x0004) [0x0000000000004002] [0x00000002] ( CPF_Const | CPF_Config )
	unsigned long                                      bClanSorting : 1;                                 		// 0x0080 (0x0004) [0x0000000000004002] [0x00000004] ( CPF_Const | CPF_Config )
	int                                                MaxLevel;                                         		// 0x0084 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                MinLevel;                                         		// 0x0088 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                InitialCombatPoints;                              		// 0x008C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              XPMultiplier;                                     		// 0x0090 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              CPMultiplier;                                     		// 0x0094 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              GPMultiplier;                                     		// 0x0098 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1433 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_Playlist::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_PlaylistGameInfo
// 0x0030 (0x0098 - 0x0068)
class UFoxDataProvider_PlaylistGameInfo : public UUIResourceDataProvider
{
public:
	struct FName                                       GameType;                                         		// 0x0068 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FString                                     URL;                                              		// 0x0070 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FriendlyName;                                     		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                GoalScore;                                        		// 0x0088 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                TimeLimit;                                        		// 0x008C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FName                                       InventoryProviderName;                            		// 0x0090 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1434 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_PlaylistGameInfo::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_PlaylistInventoryInfo
// 0x0000 (0x0068 - 0x0068)
class UFoxDataProvider_PlaylistInventoryInfo : public UUIResourceDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1435 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_PlaylistInventoryInfo::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_Tutorial
// 0x0024 (0x008C - 0x0068)
class UFoxDataProvider_Tutorial : public UUIResourceDataProvider
{
public:
	int                                                PositionPreset;                                   		// 0x0068 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FString                                     ArrowDirection;                                   		// 0x006C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FName                                       NextTutorial;                                     		// 0x0078 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	TArray< struct FTutorialMessageInfo >              TutorialSequence;                                 		// 0x0080 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1436 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_Tutorial::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_Unlockable
// 0x0044 (0x00AC - 0x0068)
class UFoxDataProvider_Unlockable : public UUIResourceDataProvider
{
public:
	int                                                UnlockID;                                         		// 0x0068 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                ParentID;                                         		// 0x006C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FString                                     FriendlyName;                                     		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyDesc;                                     		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ImageIconRef;                                     		// 0x0088 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FriendlyTag;                                      		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyToolTip;                                  		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1437 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_Unlockable::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_AvatarType
// 0x0110 (0x01BC - 0x00AC)
class UFoxDataProvider_AvatarType : public UFoxDataProvider_Unlockable
{
public:
	struct FString                                     BackgroundStory;                                  		// 0x00AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PrimaryWeaponName;                                		// 0x00B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SecondaryWeaponName;                              		// 0x00C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HelmetName;                                       		// 0x00D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HelmetIcon;                                       		// 0x00DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HelmetTag;                                        		// 0x00E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UpperBodyName;                                    		// 0x00F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UpperBodyIcon;                                    		// 0x0100 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UpperBodyTag;                                     		// 0x010C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LowerBodyName;                                    		// 0x0118 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LowerBodyIcon;                                    		// 0x0124 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LowerBodyTag;                                     		// 0x0130 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           Skills;                                           		// 0x013C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	int                                                TauntUnlockID;                                    		// 0x0148 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FString                                     BodyCamoNameID;                                   		// 0x014C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     LowerBodyProviderName;                            		// 0x0158 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           GearAttachments;                                  		// 0x0164 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TacticalGearName;                                 		// 0x0170 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PrimaryWeaponPresetName;                          		// 0x017C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     SecondaryWeaponPresetName;                        		// 0x0188 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DepotPresetName;                                  		// 0x0194 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bIsFemale : 1;                                    		// 0x01A0 (0x0004) [0x0000000000004002] [0x00000001] ( CPF_Const | CPF_Config )
	TArray< struct FString >                           TPAnimSetName;                                    		// 0x01A4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           FPAnimSetName;                                    		// 0x01B0 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1438 ];

		return pClassPointer;
	};

	TArray< class UAnimSet* > GetAdditionalFPAnimSets ( );
	TArray< class UAnimSet* > GetAdditionalTPAnimSets ( );
	struct FProfileGearInfo BuildProfileGearSlot ( );
};

UClass* UFoxDataProvider_AvatarType::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_Crosshairs
// 0x000C (0x00B8 - 0x00AC)
class UFoxDataProvider_Crosshairs : public UFoxDataProvider_Unlockable
{
public:
	int                                                NumTicks;                                         		// 0x00AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TickLength;                                       		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bRotated : 1;                                     		// 0x00B4 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1439 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_Crosshairs::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_GearInfo
// 0x0080 (0x012C - 0x00AC)
class UFoxDataProvider_GearInfo : public UFoxDataProvider_Unlockable
{
public:
	struct FString                                     MAssetPath;                                       		// 0x00AC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FAssetPath;                                       		// 0x00B8 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TranslucentMatPath;                               		// 0x00C4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TransparentMatPath;                               		// 0x00D0 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ItemType;                                         		// 0x00DC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ItemClass;                                        		// 0x00E8 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	int                                                UnlockSkillID;                                    		// 0x00F4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FFoxPawnModInfo                             PawnMods;                                         		// 0x00F8 (0x0034) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1440 ];

		return pClassPointer;
	};

	class UMaterialInstance* GetTransparentMaterial ( );
	class UMaterialInstance* GetTranslucentMaterial ( );
	class UStaticMesh* GetStaticMeshAsset ( unsigned long bIsFemale );
	class USkeletalMesh* GetSkelMeshAsset ( unsigned long bIsFemale );
};

UClass* UFoxDataProvider_GearInfo::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_Gear_Attachment
// 0x0010 (0x013C - 0x012C)
class UFoxDataProvider_Gear_Attachment : public UFoxDataProvider_GearInfo
{
public:
	struct FString                                     WeaponClassName;                                  		// 0x012C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      WeaponClass;                                      		// 0x0138 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1441 ];

		return pClassPointer;
	};

	class UClass* GetWeaponClass ( );
};

UClass* UFoxDataProvider_Gear_Attachment::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_Gear_Tactical
// 0x000C (0x0148 - 0x013C)
class UFoxDataProvider_Gear_Tactical : public UFoxDataProvider_Gear_Attachment
{
public:
	struct FString                                     PhysicalAssetName;                                		// 0x013C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1442 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_Gear_Tactical::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_Gear_Badge
// 0x0000 (0x012C - 0x012C)
class UFoxDataProvider_Gear_Badge : public UFoxDataProvider_GearInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1443 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_Gear_Badge::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_Gear_Helmet
// 0x0000 (0x012C - 0x012C)
class UFoxDataProvider_Gear_Helmet : public UFoxDataProvider_GearInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1444 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_Gear_Helmet::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_Gear_LowerBody
// 0x0008 (0x0134 - 0x012C)
class UFoxDataProvider_Gear_LowerBody : public UFoxDataProvider_GearInfo
{
public:
	unsigned char                                      NumberOfGearSlots;                                		// 0x012C (0x0001) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bQuickStepEffect : 1;                             		// 0x0130 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1445 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_Gear_LowerBody::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_Avatar
// 0x0050 (0x0184 - 0x0134)
class UFoxDataProvider_Avatar : public UFoxDataProvider_Gear_LowerBody
{
public:
	TArray< struct FMaterialSwapPaths >                MaterialSwaps;                                    		// 0x0134 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FMaterialSwapPaths >                FPMaterialSwaps;                                  		// 0x0140 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     AvatarTypeName;                                   		// 0x014C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                AvatarTypeUnlockID;                               		// 0x0158 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bDefaultSkin : 1;                                 		// 0x015C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	int                                                VersionNumber;                                    		// 0x0160 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UFoxDataProvider_AvatarType*                 MyAvatarType;                                     		// 0x0164 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                OverlayColor;                                     		// 0x0168 (0x0010) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FString                                     FirstPersonArms;                                  		// 0x0178 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1446 ];

		return pClassPointer;
	};

	class UFoxDataProvider_AvatarType* GetAvatarTypeProvider ( );
	void SetAvatarTypeProvider ( );
	void SetAvatarSkin ( unsigned long bPreview, class USkeletalMeshComponent** SMC );
	bool SetFirstPersonSkeletalMesh ( class USkeletalMeshComponent* SMC );
	class USkeletalMesh* GetSkelMeshAsset ( unsigned long bIsFemale );
	TArray< class UAnimSet* > GetAdditionalTPAnimSets ( );
	TArray< class UAnimSet* > GetAdditionalFPAnimSets ( );
	struct FProfileGearInfo BuildProfileGearSlot ( );
};

UClass* UFoxDataProvider_Avatar::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_Gear_Patch
// 0x0000 (0x012C - 0x012C)
class UFoxDataProvider_Gear_Patch : public UFoxDataProvider_GearInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1447 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_Gear_Patch::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_Gear_UpperBody
// 0x0000 (0x012C - 0x012C)
class UFoxDataProvider_Gear_UpperBody : public UFoxDataProvider_GearInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1448 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_Gear_UpperBody::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_ModBase
// 0x0094 (0x0140 - 0x00AC)
class UFoxDataProvider_ModBase : public UFoxDataProvider_Unlockable
{
public:
	struct FString                                     FPMesh;                                           		// 0x00AC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TPMesh;                                           		// 0x00B8 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FFoxPawnModInfo                             PawnModifiers;                                    		// 0x00C4 (0x0034) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FFoxWeaponModInfo                           WeaponModifiers;                                  		// 0x00F8 (0x0024) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FRotator                                    PreviewRotation;                                  		// 0x011C (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	TArray< struct FString >                           WhiteRecievers;                                   		// 0x0128 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DescriptorName;                                   		// 0x0134 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1449 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_ModBase::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_Hangers
// 0x000C (0x014C - 0x0140)
class UFoxDataProvider_Hangers : public UFoxDataProvider_ModBase
{
public:
	struct FString                                     HangerMIC;                                        		// 0x0140 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1450 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_Hangers::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_Magazine
// 0x0020 (0x0160 - 0x0140)
class UFoxDataProvider_Magazine : public UFoxDataProvider_ModBase
{
public:
	struct FName                                       ReloadType;                                       		// 0x0140 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FName                                       ReloadName;                                       		// 0x0148 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FName                                       HangerReloadName;                                 		// 0x0150 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                AmmoType;                                         		// 0x0158 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned long                                      bAllowShortReload : 1;                            		// 0x015C (0x0004) [0x0000000000004002] [0x00000001] ( CPF_Const | CPF_Config )
	unsigned long                                      bAllowCamo : 1;                                   		// 0x015C (0x0004) [0x0000000000004002] [0x00000002] ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1451 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_Magazine::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_Preset
// 0x00DC (0x0188 - 0x00AC)
class UFoxDataProvider_Preset : public UFoxDataProvider_Unlockable
{
public:
	struct FFoxWeaponPresetInfo                        PresetInfo;                                       		// 0x00AC (0x00B0) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bModifierOverride : 1;                            		// 0x015C (0x0004) [0x0000000000004002] [0x00000001] ( CPF_Const | CPF_Config )
	struct FFoxWeaponModInfo                           WeaponModifiers;                                  		// 0x0160 (0x0024) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                BurstFire;                                        		// 0x0184 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1452 ];

		return pClassPointer;
	};

	bool ValidityCheckPreset ( class UFoxDataStore_Unlockables* UnlockablesDataStore, struct FFoxWeaponConfigInfo* CheckWeaponConfig );
	struct FFoxWeaponConfigInfo GetPresetConfig ( );
};

UClass* UFoxDataProvider_Preset::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_PrimaryPreset
// 0x0000 (0x0188 - 0x0188)
class UFoxDataProvider_PrimaryPreset : public UFoxDataProvider_Preset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1453 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_PrimaryPreset::pClassPointer = NULL;

// Class FoxGame.FoxDataProvider_SecondaryPreset
// 0x0000 (0x0188 - 0x0188)
class UFoxDataProvider_SecondaryPreset : public UFoxDataProvider_Preset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1454 ];

		return pClassPointer;
	};

};

UClass* UFoxDataProvider_SecondaryPreset::pClassPointer = NULL;

// Class FoxGame.FoxDataStore_AIPresets
// 0x000C (0x00C0 - 0x00B4)
class UFoxDataStore_AIPresets : public UUIDataStore_GameResource
{
public:
	TArray< class UFoxDataProvider_AIPresets* >        AIProviders;                                      		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1455 ];

		return pClassPointer;
	};

	int GetProviderIndexByName ( struct FName AIName );
	bool GetProviderByName ( struct FName AIName, class UFoxDataProvider_AIPresets** OutProvider, int* OutIndex );
	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
};

UClass* UFoxDataStore_AIPresets::pClassPointer = NULL;

// Class FoxGame.FoxDataStore_GameSearchAll
// 0x0038 (0x00CC - 0x0094)
class UFoxDataStore_GameSearchAll : public UUIDataStore_OnlineGameSearch
{
public:
	TArray< struct FUniqueNetId >                      HostBlackList;                                    		// 0x0094 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                LastSearchedGameType;                             		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      FilteredGameSearchIndices;                        		// 0x00A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UOnlineGameSearch*                           RankedGameSearch;                                 		// 0x00B0 (0x0004) [0x0000000000000000]              
	class UOnlineGameSearch*                           RankedPartyGameSearch;                            		// 0x00B4 (0x0004) [0x0000000000000000]              
	class UOnlineGameInterfaceEx*                      GameInterfaceEx;                                  		// 0x00B8 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00BC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	int                                                StoredRankedQueuePlacement;                       		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              RankedQueueStoredTimeStamp;                       		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              StoredRankedTimeRemaining;                        		// 0x00C8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1456 ];

		return pClassPointer;
	};

	class UClass* GetGameSearchClassForIndex ( int SearchIndex );
	bool eventAreGameSettingsFiltered ( class UFoxGameSettingsCommon* GameSettingsQuery, int QueryIndex );
	void SortSearchResults ( class UOnlineGameSearch* OnlineSearch, class AFoxPC* ForPC );
	int GetBestGameFromSearch ( class UOnlineGameSearch* OnlineSearch );
	void ClearSearchResultsFor ( class UOnlineGameSearch* OnlineSearch );
	void OnRankedMatchFound ( unsigned long bWasSuccessful );
	void OnRankedMatchQueueJoin ( unsigned long bSuccess, int QueuePlacement, int EstimatedWaitSeconds );
	bool BeginRankedMatchSearch ( );
	bool BeginGameSearch ( class UOnlineGameSearch* OnlineSearch, unsigned long bInvalidateExistingSearchResults );
	void ClearOnlineDelegates ( );
	void SetOnlineDelegates ( );
	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
	void eventInit ( );
};

UClass* UFoxDataStore_GameSearchAll::pClassPointer = NULL;

// Class FoxGame.FoxDataStore_GameSettings
// 0x0000 (0x007C - 0x007C)
class UFoxDataStore_GameSettings : public UUIDataStore_OnlineGameSettings
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1457 ];

		return pClassPointer;
	};

	bool eventBeginGame ( unsigned char ControllerIndex, unsigned long bPrivateMatch, struct FString NewMapName );
};

UClass* UFoxDataStore_GameSettings::pClassPointer = NULL;

// Class FoxGame.FoxDataStore_MenuItems
// 0x00C0 (0x0174 - 0x00B4)
class UFoxDataStore_MenuItems : public UUIDataStore_GameResource
{
public:
	TArray< struct FUniqueNetId >                      MutedNetIDs;                                      		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FIgnoredPlayer >                    IgnoreList;                                       		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBannedPlayer >                     BannedPlayers;                                    		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SavedPartyChat;                                   		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SavedGlobalChat;                                  		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SavedClanChat;                                    		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SavedWhisperChat;                                 		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SavedHelpChat;                                    		// 0x0108 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastPlayedMapName;                                		// 0x0114 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPlayedMapInfo >                    PlayedMaps;                                       		// 0x0120 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ReturnToMenuCommandGroup;                         		// 0x012C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UUIResourceDataProvider* >           GameModeProviders;                                		// 0x0138 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           GameModeNames;                                    		// 0x0144 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UUIResourceDataProvider* >           MapProviders;                                     		// 0x0150 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UUIResourceDataProvider* >           KeyBindingProviders;                              		// 0x015C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UUIResourceDataProvider* >           ControlProviders;                                 		// 0x0168 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1458 ];

		return pClassPointer;
	};

	void UpdateBans ( float CurrentTimeSeconds );
	bool IsPlayerBanned ( struct FUniqueNetId IDToCheck );
	void AddBannedPlayer ( float CurrentTimeSeconds, float TimeToBan, struct FUniqueNetId BannedID );
	void eventPlayMap ( int MapIndex );
	int eventGetNextMapIndex ( class UClass* GameClass );
	TArray< class UFoxDataProvider_KeyBindings* > eventGetKeyBindingProviders ( );
	bool eventWasPlayerNameIgnored ( struct FString PlayerName );
	bool eventWasPlayerIdIgnored ( struct FUniqueNetId UniqueId );
	void RemoveIgnoredPlayerByName ( struct FString PlayerName );
	void RemoveIgnoredPlayerByID ( struct FUniqueNetId UniqueId );
	void eventAddIgnoredPlayerInfo ( struct FIgnoredPlayer NewIgnoredPlayerInfo );
	void eventAddIgnoredPlayer ( struct FUniqueNetId UniqueId, struct FString PlayerName );
	void eventAddIgnoredPlayerByName ( struct FString PlayerName );
	void eventAddIgnoredPlayerByID ( struct FUniqueNetId UniqueId );
	bool WasPlayerMuted ( struct FUniqueNetId UniqueId );
	void RemoveMutedPlayerID ( struct FUniqueNetId UniqueId );
	void AddMutedPlayerID ( struct FUniqueNetId UniqueId );
	TArray< struct FName > eventGetGameTypeLevelStreamNames ( class UClass* GameClass, int MapIndex );
	TArray< struct FName > eventGetBaseLevelStreamNames ( int MapIndex );
	TArray< struct FName > eventGetAllStreamLevelNames ( class UClass* GameClass, int MapIndex );
	TArray< class UFoxDataProvider_MapInfo* > eventGetValidMapsForGameType ( class UClass* GameClass );
	class UFoxDataProvider_MapInfo* eventGetMapInfoByMapName ( struct FString MapName );
	class UFoxDataProvider_MapInfo* eventGetMapDataProviderAtIndex ( int Index );
	struct FString eventGetMapNameByIndex ( int Index );
	int GetMapIndexByProviderName ( struct FName MapProviderName );
	int eventGetMapIndex ( struct FString MapName );
	void GetAllGameModeProviders ( TArray< class UFoxDataProvider_GameModeInfo* >* Providers );
	int GetGameModeProviderIndexByGameClass ( class UClass* GameClass );
	void GetAllGameModeAbbreviatedNames ( TArray< struct FString >* AbbrNames );
	struct FString GetGameModeAbbreviatedName ( int Index );
	class UFoxDataProvider_GameModeInfo* GetGameModeInfo ( int GameModeIndex );
	void GetAllResourceDataProviders ( class UClass* ProviderClass, TArray< class UUIResourceDataProvider* >* Providers );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
};

UClass* UFoxDataStore_MenuItems::pClassPointer = NULL;

// Class FoxGame.FoxDataStore_Playlists
// 0x0030 (0x00E4 - 0x00B4)
class UFoxDataStore_Playlists : public UUIDataStore_GameResource
{
public:
	class UFoxDataProvider_Playlist*                   CachedPlaylistInfo;                               		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                PlaylistCycleIndex;                               		// 0x00B8 (0x0004) [0x0000000000000000]              
	TArray< struct FGameMapPair >                      GameMapPairs;                                     		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UFoxDataStore_MenuItems*                     MenuItemsDataStore;                               		// 0x00C8 (0x0004) [0x0000000000000000]              
	TArray< class UFoxDataProvider_Playlist* >         PlayListProviders;                                		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UFoxDataProvider_PlaylistGameInfo* > PlaylistGameInfoProviders;                        		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1459 ];

		return pClassPointer;
	};

	bool ShouldFilterGameMode ( struct FName GameModeProviderName );
	bool ShouldFilteredMap ( struct FString MapName );
	TArray< struct FPlaylistPairing > BuildPlaylistPairingsFromSettings ( int* SettingsData );
	bool eventBuildAndSetPlaylistProviderFromSettings ( int* SettingsData );
	struct FName GetPlaylistGameProviderNameFromGameModeIndex ( int GameModeIndex );
	void BuildPlaylistSettingsFromProvider ( class UFoxDataProvider_Playlist* PlaylistProvider, int* OutSettingsData );
	int GetIndexOfPlaylistGameInfoProvider ( struct FName PlaylistGameProviderName );
	bool CanSortByClan ( );
	int GetMaxSupportedLevelOfPlaylist ( );
	int GetMinSupportedLevelOfPlaylist ( );
	float GetGPMultiplier ( );
	float GetCPMultiplier ( );
	float GetXPMultiplier ( );
	int GetInitialCombatPoints ( );
	bool IsPlaylistTournament ( );
	bool DoesPlaylistSupportMapSkip ( );
	class UFoxDataProvider_PlaylistGameInfo* eventGetGameInfo ( );
	class UClass* GetGameClassFromGameProvider ( class UFoxDataProvider_PlaylistGameInfo* GameProvider );
	class UClass* GetNextGameClass ( );
	class UClass* eventGetGameClass ( );
	struct FString GetPlaylistNextMapName ( );
	struct FString GetPlaylistMapName ( int Index );
	bool eventHasPlaylist ( );
	struct FString eventGetGameModeAbbreviatedNameByIndex ( int Index );
	int GetGameModeIndexByClass ( class UClass* GameClass );
	class UFoxDataProvider_Playlist* GetPlaylistByIndex ( int PlaylistIndex );
	bool IsRandomProvider ( struct FName ProviderName );
	void CyclePlaylist ( );
	bool BuildPlaylistInfo ( class UFoxDataProvider_Playlist* PlaylistInfo, TArray< struct FGameMapPair >* OutGameMapPairs );
	bool RebuildPlaylistInfo ( );
	class UFoxDataProvider_Playlist* GetPlaylistByName ( struct FName PlaylistName );
	bool eventSelectPlaylistByName ( struct FName PlaylistName );
	void SelectPlaylistByIndex ( int PlaylistIndex );
	struct FName GetCachedPlaylistName ( );
	class UFoxDataProvider_Playlist* GetCachedPlaylist ( );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
};

UClass* UFoxDataStore_Playlists::pClassPointer = NULL;

// Class FoxGame.FoxDataStore_StoreData
// 0x0040 (0x00F4 - 0x00B4)
class UFoxDataStore_StoreData : public UUIDataStore_GameResource
{
public:
	class UFoxItemCacheStore*                          StoreCache;                                       		// 0x00B4 (0x0004) [0x0000000000000000]              
	class UFoxItemCacheInventory*                      InventoryCache;                                   		// 0x00B8 (0x0004) [0x0000000000000000]              
	class UFoxItemCacheMail*                           MailCache;                                        		// 0x00BC (0x0004) [0x0000000000000000]              
	class UFoxItemCacheClan*                           ClanCache;                                        		// 0x00C0 (0x0004) [0x0000000000000000]              
	class UFoxItemCacheFriends*                        FriendCache;                                      		// 0x00C4 (0x0004) [0x0000000000000000]              
	class UFoxCacheParty*                              PartyCache;                                       		// 0x00C8 (0x0004) [0x0000000000000000]              
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x00CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CachedLoginStatus;                                		// 0x00D0 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedXP;                                         		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedGP;                                         		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedZP;                                         		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      CachedSkills;                                     		// 0x00E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FUniqueNetId                                OwnerNetId;                                       		// 0x00EC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1460 ];

		return pClassPointer;
	};

	void QuerySkillsComplete ( struct FUniqueNetId ForId, unsigned char LocalUserNum, unsigned long bResult, TArray< unsigned char >* SkillData );
	void QueryXPComplete ( struct FUniqueNetId ForId, unsigned char LocalUserNum, int XPAmount, unsigned long bResult );
	void QueryFundsZPComplete ( struct FUniqueNetId ForId, unsigned char LocalUserNum, int ZPBalance );
	void QueryFundsGPComplete ( struct FUniqueNetId ForId, unsigned char LocalUserNum, int GPBalance );
	void QueryFundsComplete ( struct FUniqueNetId ForId, unsigned char LocalUserNum, int ZPBalance, int GPBalance );
	void NotifyPlayerLoggedOut ( unsigned long bWasSuccessful );
	void NotifyPlayerLoggedIn ( unsigned char LocalUserNum );
	bool eventGetDataStore ( class UFoxDataStore_StoreData** DataStore );
	void eventApplySkill ( int SkillID );
	void eventResetSkills ( );
	void eventSaveCachedSkills ( TArray< unsigned char > SkillData );
	bool eventHasUnlockedSkill ( int SkillID );
	bool eventRetrieveCachedSkills ( class AFoxPRI* PRI );
	bool eventGetCachedParty ( class UFoxCacheParty** Cache );
	bool eventGetCachedFriends ( class UFoxItemCacheFriends** Cache );
	bool eventGetCachedClan ( class UFoxItemCacheClan** Cache );
	bool eventGetCachedMail ( class UFoxItemCacheMail** Cache );
	bool eventIsStoreItemVisible ( int UnlockID );
	bool eventGetCachedStore ( class UFoxItemCacheStore** Cache );
	bool eventGetCachedInventory ( class UFoxItemCacheInventory** Cache );
	bool IsOwner ( struct FUniqueNetId* NetId );
	void ClearOnlineDelegates ( );
	void SetupOnlineDelegates ( );
	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
};

UClass* UFoxDataStore_StoreData::pClassPointer = NULL;

// Class FoxGame.FoxDataStore_Tutorials
// 0x000C (0x00C0 - 0x00B4)
class UFoxDataStore_Tutorials : public UUIDataStore_GameResource
{
public:
	TArray< class UFoxDataProvider_Tutorial* >         TutorialProviders;                                		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1461 ];

		return pClassPointer;
	};

	int GetTutorialIndexByName ( struct FName TutorialName );
	bool GetTutorialProviderByName ( struct FName TutorialName, class UFoxDataProvider_Tutorial** TutorialProvider, int* TutorialIndex );
	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
};

UClass* UFoxDataStore_Tutorials::pClassPointer = NULL;

// Class FoxGame.FoxDataStore_Unlockables
// 0x012C (0x01E0 - 0x00B4)
class UFoxDataStore_Unlockables : public UUIDataStore_GameResource
{
public:
	TArray< class UUIResourceDataProvider* >           UpperBodyProviderArray;                           		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UUIResourceDataProvider* >           LowerBodyProviderArray;                           		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UUIResourceDataProvider* >           HelmetProviderArray;                              		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UUIResourceDataProvider* >           BadgeProviderArray;                               		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UUIResourceDataProvider* >           TacticalProviderArray;                            		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UUIResourceDataProvider* >           AttachmentProviderArray;                          		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UUIResourceDataProvider* >           PatchProviderArray;                               		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UUIResourceDataProvider* >           MagazineProviderArray;                            		// 0x0108 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UFoxDataProvider_Avatar* >           AvatarProviderArray;                              		// 0x0114 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UFoxDataProvider_AvatarType* >       AvatarTypeProviderArray;                          		// 0x0120 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UUIResourceDataProvider* >           CrosshairProviderArray;                           		// 0x012C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UFoxDataProvider_Hangers* >          HangerProviderArray;                              		// 0x0138 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UFoxDataProvider_Preset* >           PrimaryPresetProviderArray;                       		// 0x0144 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UFoxDataProvider_Preset* >           SecondaryPresetProviderArray;                     		// 0x0150 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UFoxDataProvider_GemInfo* >          GemProviders;                                     		// 0x015C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0168 (0x003C) UNKNOWN PROPERTY: MapProperty FoxGame.FoxDataStore_Unlockables.CachedUnlockInfo
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x01A4 (0x003C) UNKNOWN PROPERTY: MapProperty FoxGame.FoxDataStore_Unlockables.CachedUnlockIDs

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1462 ];

		return pClassPointer;
	};

	class UFoxDataProvider_GemInfo* GetGemProviderByType ( unsigned char GemType );
	int GetMagazineIndexByName ( struct FString MagName );
	class UFoxDataProvider_Magazine* GetMagazineProviderFromUnlockID ( int UnlockID );
	TArray< class UFoxDataProvider_Magazine* > GetAllMagazineProviders ( );
	class UFoxDataProvider_GearInfo* GetGearProviderFromUnlockID ( int UnlockID );
	struct FFoxWeaponConfigInfo GetPresetWeaponConfigFromUnlockID ( int UnlockID );
	int GetIndexOfProviderByName ( struct FName ProviderName, TArray< class UUIResourceDataProvider* >* Providers );
	int GetUnlockableSkillID ( int UnlockID );
	class UFoxDataProvider_Unlockable* GetUnlockableProviderFromID ( int UnlockID );
	bool GetUnlockInfoForCachedItem ( int UnlockID, struct FString* FriendlyName, struct FString* FriendlyDesc, struct FString* FriendlyTag, struct FString* ImageIconRef, struct FString* FriendlyToolTip );
	bool GetCachedUnlocksByType ( unsigned char UnlockType, TArray< int >* UnlockIDs );
	void AddCachedUnlockInfoForWeaponModClass ( struct FString WeaponModName );
	void AddCachedUnlockInfoForWeaponModClasses ( TArray< struct FString >* WeaponModClassNames );
	void AddCachedUnlockInfoForWeaponClass ( struct FString WeaponName );
	void AddCachedUnlockInfoForWeaponClasses ( TArray< struct FString >* WeaponClassNames );
	void GenerateCachedUnlocks ( );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
};

UClass* UFoxDataStore_Unlockables::pClassPointer = NULL;

// Class FoxGame.FoxDateTime
// 0x0000 (0x003C - 0x003C)
class UFoxDateTime : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1463 ];

		return pClassPointer;
	};

	int Compare ( struct FDateTime* InA, struct FDateTime* InB );
	void Unpack ( int Date, int Time, struct FDateTime* OutDateTime );
	void Pack ( struct FDateTime* InDateTime, int* OutDate, int* OutTime );
	struct FString GetTimeString ( struct FDateTime InDateTime, unsigned long bShowSeconds );
	struct FString GetDateString ( struct FDateTime InDateTime );
	bool GetTimeLeft ( struct FDateTime* EndDate, int* Days, int* Hours, int* Minutes );
	void GetTimeSpan ( struct FDateTime* BeginDate, struct FDateTime* EndDate, int* Days, int* Hours, int* Minutes );
	void GetCurrentDateTime ( struct FDateTime* CurrentTime );
	struct FDateTime ParseFromString ( struct FString DateTimeStr );
	struct FString GetString ( struct FDateTime InDateTime, unsigned long bShowSeconds );
};

UClass* UFoxDateTime::pClassPointer = NULL;

// Class FoxGame.FoxDecalComponent
// 0x0014 (0x0344 - 0x0330)
class UFoxDecalComponent : public UDecalComponent
{
public:
	unsigned long                                      bRandomizeRotation : 1;                           		// 0x0330 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bRandomizeScaling : 1;                            		// 0x0330 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      ClipDecalsUsingFastPath : 1;                      		// 0x0330 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FVector2D                                   RandomScalingRange;                               		// 0x0334 (0x0008) [0x0000000000000000]              
	float                                              LifeSpan;                                         		// 0x033C (0x0004) [0x0000000000000000]              
	float                                              PercentToSpawnOnFracturedMesh;                    		// 0x0340 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1464 ];

		return pClassPointer;
	};

	void CopyFromSource ( class UFoxPMPInfo_Decals* Source, struct FImpactInfo* Impact );
	class UFoxDecalComponent* StaticAttachFromImpact ( class APawn* InInstigator, class UFoxPMPInfo_Decals* SourceDecal, struct FImpactInfo* Impact );
	void AttachFromImpact ( class APawn* InInstigator, struct FImpactInfo* Impact );
	void SharedAttachmentInit ( class AActor* TargetAttachment, struct FVector RayDir );
};

UClass* UFoxDecalComponent::pClassPointer = NULL;

// Class FoxGame.FoxDestructibleSkeletalMeshActor
// 0x0024 (0x022C - 0x0208)
class AFoxDestructibleSkeletalMeshActor : public ASkeletalMeshActor
{
public:
	unsigned long                                      bBroken : 1;                                      		// 0x0208 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bParticlesAcceptLights : 1;                       		// 0x0208 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bParticlesAcceptDynamicLights : 1;                		// 0x0208 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	TArray< class UClass* >                            DamageTypes;                                      		// 0x020C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FBreakableStepSkeletal >            BreakableSteps;                                   		// 0x0218 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                CurrentBreakableStep;                             		// 0x0224 (0x0004) [0x0000000000000000]              
	struct FLightingChannelContainer                   ParticleLightingChannels;                         		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1465 ];

		return pClassPointer;
	};

	void HideAndDestroy ( );
	void BreakLastApart ( class AController* EventInstigator );
	void BreakStepApart ( int BrokenStep );
	bool IsValidDamageType ( class UClass* inDamageType );
	void TakeStepDamage ( int Damage, class AController* EventInstigator, unsigned long bIsBroken, int BrokenStep );
	void TakeLastDamage ( int Damage, class AController* EventInstigator, unsigned long bIsBroken, int BrokenStep );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	void SetParticlesLighting ( class AEmitter* Emit );
	struct FVector GetOffsetToWorld ( struct FVector Offset );
};

UClass* AFoxDestructibleSkeletalMeshActor::pClassPointer = NULL;

// Class FoxGame.FoxDroppedPickup
// 0x0000 (0x01D8 - 0x01D8)
class AFoxDroppedPickup : public ADroppedPickup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1466 ];

		return pClassPointer;
	};

	void GiveTo ( class APawn* P );
};

UClass* AFoxDroppedPickup::pClassPointer = NULL;

// Class FoxGame.FoxDroppedPickup_KillTag
// 0x002C (0x0204 - 0x01D8)
class AFoxDroppedPickup_KillTag : public ADroppedPickup
{
public:
	class AFoxPRI*                                     OwnerPRI;                                         		// 0x01D8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AFoxPRI*                                     KilledByPRI;                                      		// 0x01DC (0x0004) [0x0000000000000000]              
	class AFoxPRI*                                     PickedUpPRI;                                      		// 0x01E0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bLanded : 1;                                      		// 0x01E4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPendingDestroy : 1;                              		// 0x01E4 (0x0004) [0x0000000000000000] [0x00000002] 
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x01E8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAkEvent*                                    DropSound;                                        		// 0x01EC (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    StopDropLoop;                                     		// 0x01F0 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    EnemyTPPickupSound;                               		// 0x01F4 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    FriendTPPickupSound;                              		// 0x01F8 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    EnemyFPPickupSound;                               		// 0x01FC (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    FriendFPPickupSound;                              		// 0x0200 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1467 ];

		return pClassPointer;
	};

	void NotifyPickedUpByPRI ( );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void DelayedDestroy ( );
	void PickedUpBy ( class APawn* P );
	void Destroyed ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AFoxDroppedPickup_KillTag::pClassPointer = NULL;

// Class FoxGame.FoxDynamicSMActor
// 0x0008 (0x020C - 0x0204)
class AFoxDynamicSMActor : public ADynamicSMActor
{
public:
	unsigned long                                      bShowInHRV : 1;                                   		// 0x0204 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	class UMaterial*                                   HRVMaterial;                                      		// 0x0208 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1468 ];

		return pClassPointer;
	};

	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventToggleHRVEffects ( unsigned long bEnabled );
};

UClass* AFoxDynamicSMActor::pClassPointer = NULL;

// Class FoxGame.FoxKOTHDomeActor
// 0x0004 (0x0210 - 0x020C)
class AFoxKOTHDomeActor : public AFoxDynamicSMActor
{
public:
	class AFoxGameObject_HillPoint*                    HillPoint;                                        		// 0x020C (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1469 ];

		return pClassPointer;
	};

	void ToggleHRVEffects ( unsigned long bEnabled );
};

UClass* AFoxKOTHDomeActor::pClassPointer = NULL;

// Class FoxGame.FoxFirstPersonParticleSystemComponent
// 0x0004 (0x02E0 - 0x02DC)
class UFoxFirstPersonParticleSystemComponent : public UParticleSystemComponent
{
public:
	float                                              FOV;                                              		// 0x02DC (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1470 ];

		return pClassPointer;
	};

	void SetFOV ( float NewFOV );
};

UClass* UFoxFirstPersonParticleSystemComponent::pClassPointer = NULL;

// Class FoxGame.FoxFirstPersonSkeletalMeshComponent
// 0x0007 (0x05FC - 0x05F5)
class UFoxFirstPersonSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	float                                              FOV;                                              		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1471 ];

		return pClassPointer;
	};

	void SetFOV ( float NewFOV );
};

UClass* UFoxFirstPersonSkeletalMeshComponent::pClassPointer = NULL;

// Class FoxGame.FoxGame
// 0x0228 (0x059C - 0x0374)
class AFoxGame : public AZEGameInfo
{
public:
	int                                                NumTeams;                                         		// 0x0374 (0x0004) [0x0000000000000000]              
	TArray< class AFoxTeamInfo* >                      Teams;                                            		// 0x0378 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bAutoRespawn : 1;                                 		// 0x0384 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSpawnFacingNearestPawn : 1;                      		// 0x0384 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFriendlyFire : 1;                                		// 0x0384 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bBackupHostInPlace : 1;                           		// 0x0384 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bAwaitingBackupHostResponse : 1;                  		// 0x0384 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bVIPDirty : 1;                                    		// 0x0384 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bThreatDirty : 1;                                 		// 0x0384 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bAllowClanSorting : 1;                            		// 0x0384 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bTechDemo : 1;                                    		// 0x0384 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bPrivateMatch : 1;                                		// 0x0384 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bRoundEndsByTime : 1;                             		// 0x0384 (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bSupportsBots : 1;                                		// 0x0384 (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bForceTeamBalance : 1;                            		// 0x0384 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bAllowInjury : 1;                                 		// 0x0384 (0x0004) [0x0000000000004002] [0x00002000] ( CPF_Const | CPF_Config )
	unsigned long                                      bDisplayKillSpreeMessages : 1;                    		// 0x0384 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bDisplayAIDeathMessages : 1;                      		// 0x0384 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bReadyToStart : 1;                                		// 0x0384 (0x0004) [0x0000000000000000] [0x00010000] 
	struct FString                                     EntryMapName;                                     		// 0x0388 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      GameTypeStatsClass;                               		// 0x0394 (0x0004) [0x0000000000000000]              
	int                                                GameModeContext;                                  		// 0x0398 (0x0004) [0x0000000000000000]              
	float                                              GameRespawnTime;                                  		// 0x039C (0x0004) [0x0000000000000000]              
	float                                              GameForceRespawnTime;                             		// 0x03A0 (0x0004) [0x0000000000000000]              
	struct FString                                     GameTypeString;                                   		// 0x03A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GameTypeTooltip;                                  		// 0x03B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringHasBeenVoteKicked;                       		// 0x03BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned char                                      BackupHostPlatformInfo[ 0x50 ];                   		// 0x03C8 (0x0050) [0x0000000000000000]              
	int                                                InitialCombatPoints;                              		// 0x0418 (0x0004) [0x0000000000000000]              
	float                                              PlaylistCPModifier;                               		// 0x041C (0x0004) [0x0000000000000000]              
	float                                              PlaylistGPModifier;                               		// 0x0420 (0x0004) [0x0000000000000000]              
	float                                              PlaylistXPModifier;                               		// 0x0424 (0x0004) [0x0000000000000000]              
	float                                              SpawnInvincibilityTime;                           		// 0x0428 (0x0004) [0x0000000000000000]              
	struct FString                                     GameTypeAbbreviatedName;                          		// 0x042C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UOnlineStoreInterface*                       StoreInterface;                                   		// 0x0438 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x043C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UFoxDataStore_MenuItems*                     MenuItemsDataStore;                               		// 0x0440 (0x0004) [0x0000000000000000]              
	class UFoxDataStore_Playlists*                     PlaylistsDataStore;                               		// 0x0444 (0x0004) [0x0000000000000000]              
	int                                                SpectateTeamIndex;                                		// 0x0448 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                GPEarnedPerKill;                                  		// 0x044C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                MaxGPKillEarn;                                    		// 0x0450 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              GPEarnedPerSecond;                                		// 0x0454 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                MaxPlayerLevel;                                   		// 0x0458 (0x0004) [0x0000000000000000]              
	int                                                MinPlayerLevel;                                   		// 0x045C (0x0004) [0x0000000000000000]              
	float                                              MatchElapsedTimeStamp;                            		// 0x0460 (0x0004) [0x0000000000000000]              
	float                                              GameSettingsUpdateInterval;                       		// 0x0464 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FUniqueNetId                                PrivateMatchOwnerID;                              		// 0x0468 (0x0008) [0x0000000000000000]              
	float                                              PrivateMatchGPMultiplier;                         		// 0x0470 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              PrivateMatchXPMultiplier;                         		// 0x0474 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              PrivateMatchMaxIntermissionIdle;                  		// 0x0478 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                MaxRounds;                                        		// 0x047C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FAIBotInfo >                        BotInfo;                                          		// 0x0480 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           RandomBotNames;                                   		// 0x048C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	int                                                MaxBotCount;                                      		// 0x0498 (0x0004) [0x0000000000000000]              
	struct FPlayerStartVariables                       PSV_Current;                                      		// 0x049C (0x005C) [0x0000000000000000]              
	TArray< struct FPlayerDeathLocation >              RecentPlayerDeathLocations;                       		// 0x04F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              NumReadyPlayersToStart;                           		// 0x0504 (0x0004) [0x0000000000000000]              
	TArray< struct FMultiKill >                        MultiKillInfo;                                    		// 0x0508 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              TimeBetweenMultiKill;                             		// 0x0514 (0x0004) [0x0000000000000000]              
	class UClass*                                      KillSpreeMessageClass;                            		// 0x0518 (0x0004) [0x0000000000000000]              
	float                                              OnlineGameSettingsUpdateTime;                     		// 0x051C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< class ANavigationPoint* >                  TempBadPlayerStarts;                              		// 0x0520 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FModifierDateBucket >               GXPMods;                                          		// 0x052C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UFoxRemoteInterface*                         RemoteInterface;                                  		// 0x0538 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             FilteredMapProviders;                             		// 0x053C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             FilteredGameProviders;                            		// 0x0548 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FRankedPlayerInfo >                 RankedPlayers;                                    		// 0x0554 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              PendingRankMatchStartTimeout;                     		// 0x0560 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UZeStatsManager*                             RankedStatsManager;                               		// 0x0564 (0x0004) [0x0000000000000000]              
	TArray< struct FVoteKickEntry >                    VoteKickList;                                     		// 0x0568 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NumEnemyVotesRequiredForKick;                     		// 0x0574 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                NumFriendlyVotesRequiredForKick;                  		// 0x0578 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                VoteKickBanSeconds;                               		// 0x057C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	TArray< struct FReserveInfo >                      ReservedPlayers;                                  		// 0x0580 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ReserveMaxTime;                                   		// 0x058C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FScriptDelegate                             __HeroActorSortDelegate__Delegate;                		// 0x0590 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1472 ];

		return pClassPointer;
	};

	bool IsServerFullForPreLogin ( unsigned long bSpectator, struct FUniqueNetId UniqueId, int NumExtraPlayers );
	bool IsReserved ( struct FUniqueNetId UniqueId );
	int GetNumPlayers ( );
	int GetNumReservedPlayers ( );
	void RemovePartyReserveForPlayer ( struct FUniqueNetId PlayerID );
	TArray< struct FUniqueNetId > BuildPartyMembersFromOptions ( struct FString InOptions );
	void ReserveSlotForPlayer ( struct FUniqueNetId PlayerUniqueId, struct FString InOptions );
	void RemoveReserveByInstigator ( class AFoxPC* ReserveInstigator );
	void UpdateBans ( );
	bool IsPlayerBanned ( struct FUniqueNetId IDToCheck );
	void BanPlayer ( struct FUniqueNetId UniqueId, float TimeToBanSeconds );
	void AdminKickPlayer ( class AFoxPC* PlayerToKick );
	void VoteKickPlayer ( class AFoxPC* PlayerToKick );
	void CheckKickVoteWithTeams ( );
	void CheckKickVotesNoTeams ( );
	void CheckKickVotes ( );
	void RequestVoteKick ( class AFoxPRI* PRIToKick, class AFoxPC* Requester );
	void ChangeName ( class AController* Other, struct FString S, unsigned long bNameChange );
	void SetPlayerSkillbyScore ( );
	void AddTime ( int AmountToAdd );
	void DiscardInventory ( class APawn* Other, class AController* Killer );
	void DestroyDeployables ( );
	void DestroyAllProjectiles ( );
	TArray< class AFoxHeroPoseActor* > GetPlayerActorList ( );
	int HeroActorSortDelegate ( class AFoxHeroPoseActor* A, class AFoxHeroPoseActor* B );
	void SetupHeroPose ( );
	void CalculateHighestThreat ( );
	void RecalculateHighestThreat ( );
	void RecalculateVIPs ( );
	void CalculateVIPs ( );
	bool AllowCheats ( class APlayerController* P );
	struct FString eventGetAdminPassword ( );
	class AFoxGRI* GetGRI ( );
	int GetNumPlayerControllersActive ( );
	struct FRotator RotationToClosestPawn ( class ANavigationPoint* StartSpot );
	void eventTimer ( );
	bool eventIsGamePublic ( );
	void PunkBustPlayer ( class APlayerController* PC, struct FString Reason );
	void eventKickIdler ( class APlayerController* PC );
	bool IsInEntryMap ( );
	float CalculateTotalActiveModifier ( unsigned char CombinationRule, TArray< struct FModifierDateBucket >* Modifiers );
	bool IsModifierActive ( struct FModifierDateBucket* Modifier );
	float CalculateCachedGPModifier ( );
	float CalculateCachedCPModifier ( );
	float CalculateCachedXPModifier ( );
	class AFoxPawn* eventSpawnAIBotByProviderName ( struct FName ProviderName, struct FVector InLocation, struct FRotator InRotation, class APlayerStart* SpecifiedStart, int DesiredTeamIdx, unsigned long bRespawn );
	void SpawnRandomBots ( int Count );
	struct FName ChooseRandomBotProvider ( TArray< struct FAIBotInfo >* FromList );
	void KillRandomBot ( );
	void CheckBotCount ( );
	void StartBots ( );
	float GetAIHealthModifier ( );
	float GetAIDamageModifier ( );
	float GetAIAccuracyModifier ( );
	void BroadcastPawnUseDialog ( unsigned char DialogEvent, class AFoxPawn* PawnAnnouncer, unsigned char InstigatingTeamIndex );
	bool CheckScore ( class APlayerReplicationInfo* TestPRI );
	void ScoreKill ( class AController* Killer, class AController* Victim );
	bool MultiKillCheck ( class AController* Killer, class AController* KilledPlayer );
	void ScoreValidKill ( class AController* Killer, class AController* KilledPlayer );
	void ScoreSuicide ( class AController* SuicidedPlayer );
	void BroadcastKillSpreeMessage ( class AController* Killer, class AController* Killed );
	void NotifyMultiKillEnded ( class AFoxPRI* ForPRI );
	void BroadcastTheDeathMessage ( class AController* Killer, class AFoxPawn* KilledPawn, class AController* Other, class UClass* DamageType );
	void DirtyThreatFlag ( int TeamIndex );
	void CheckThreatKill ( class AFoxPRI* KillerPRI, class AFoxPRI* KilledPRI );
	void BroadcastCombatUpdate ( class AFoxPRI* InstigatingPRI, unsigned char EventType );
	void BroadcastDialog ( struct FName ActionParam, struct FName ActionName );
	void BroadcastEvent ( int ScoringTeamNum, unsigned char EventType, class AController* DoNotSendTo );
	void TeamScoreEvent ( int ScoringTeamNum, unsigned char EventType, class AController* DoNotSendTo );
	void ScoreEvent ( class AFoxPRI* Scorer, unsigned char EventType );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* TheDamageType );
	void LogFatalityStats ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* TheDamageType );
	void ReduceDamage ( class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum );
	void ToggleGamePlayMuteForPlayers ( class AFoxPC* Player1, class AFoxPC* Player2, unsigned long bMute );
	bool ShouldPlayersMute ( class AFoxPC* PC1, class AFoxPC* PC2 );
	void ToggleMuteForPlayer ( class AFoxPC* PCPlayer );
	void UpdateMuteForAllPlayers ( );
	void ToggleMuteForGameplayBegin ( );
	void MuteDeadPlayer ( class AFoxPC* Deadguy );
	int FindSpectateTeam ( );
	bool CheckPendingTeamSwitches ( );
	void TryTeamChange ( class AFoxPC* PC, unsigned long bWantsTeamChange );
	bool PerformTeamSwitch ( class AController* Other, int NewTeamIndex, unsigned long bUserRequest );
	unsigned char GetTeamIndexForRankedPlayer ( struct FUniqueNetId UniqueId );
	bool ChangeTeam ( class AController* Other, int DesiredTeamIndex, unsigned long bNewTeam );
	int GetForcedTeam ( class AController* Other, int Team );
	void eventInitializeTeams ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	struct FPlayerStartVariables GetPlayerStartVariables ( );
	float RateForPathing ( class APlayerStart* P, class AController* Player, struct FPlayerStartVariables* PSV );
	float RateAlreadyClaimed ( class APlayerStart* P, class AController* Player, struct FPlayerStartVariables* PSV );
	float RateForTeam ( class APlayerStart* P, unsigned char Team, struct FPlayerStartVariables* PSV );
	float RateNearByPlayers ( class APlayerStart* P, unsigned char Team, struct FPlayerStartVariables* PSV );
	float RatePlayerStartFlags ( class APlayerStart* P, struct FPlayerStartVariables* PSV );
	float RateForGameType ( class APlayerStart* P, class AController* Player, struct FPlayerStartVariables* PSV );
	float RateForRecentDeathLocations ( class APlayerStart* P, unsigned char Team, struct FPlayerStartVariables* PSV );
	float GetInitialRating ( struct FPlayerStartVariables* PSV );
	float RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player );
	float ClosestPawnDistance ( class APlayerStart* P, unsigned char Team );
	class APlayerStart* ChoosePlayerStart ( class AController* Player, unsigned char InTeam );
	void StartInProgressSpawn ( );
	bool PlayerCanRestartGame ( class APlayerController* aPlayer );
	void SetPlayerDefaults ( class APawn* PlayerPawn );
	void eventAddDefaultInventory ( class APawn* P );
	float GetRespawnTimeForPlayer ( class AController* Player );
	class UClass* GetDefaultPlayerClass ( class AController* C );
	class APawn* SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot );
	void eventInventoryReadForPlayer ( struct FUniqueNetId ForId );
	void ReadInventoryForPlayerStart ( class AFoxPC* PC );
	void RestartPlayer ( class AController* NewPlayer );
	void FillGameSettingsPlayerLists ( );
	void NotifyGotBackupHost ( );
	class AFoxPC* GetBackupHost ( );
	void ChooseBackupHost ( class AFoxPC* OldBackupHost );
	void CleanupMinesForPlayer ( class AFoxPC* ForPlayer );
	void PlayerChangedTeam ( class AFoxPC* TeamChanger );
	void CleanupPawns ( );
	void CleanupDroppedPickups ( );
	void GiveEndGameGPToPlayers ( );
	void HandleEndGameScoring ( );
	void AddWinningsToScore ( );
	void ClearAssistPoints ( );
	void NotifyArbitratedMatchEnd ( );
	void WriteOnlinePlayerScores ( );
	void AddMatchIncompleteStats ( class APlayerController* PC, struct FString Reason );
	void WriteOnlineStats ( );
	class ATeamInfo* eventGetWinningTeam ( );
	void PerformEndGameHandling ( );
	void DelayedBeginRoundEnd ( );
	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void OnRoundEnd ( int TeamRoundWinIndex, unsigned long bGameShouldEnd );
	unsigned char GetIndexOfTeamForRoundWin ( );
	void EndRound ( );
	void OnRankMatchStartTimeout ( );
	void CheckGameReadyToStart ( );
	bool IsLevelReadyToStart ( );
	void NotifyLevelKismetReadyToStart ( );
	bool MatchIsInProgress ( );
	void UpdateCacheFromGameSettings ( );
	void OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void StartOnlineGame ( );
	void StartHumans ( );
	void NotifyLevelStreamedIn ( );
	void StartMatch ( );
	bool CanJoinGame ( unsigned long bSpectator );
	void NotifyNewPlayerLoggedIn ( class AController* NewPlayer );
	void UnregisterPlayer ( class APlayerController* PC );
	bool FindInactivePRI ( class APlayerController* PC );
	void AddInactivePRI ( class APlayerReplicationInfo* PRI, class APlayerController* PC );
	void RecoverInactivePRIStats ( class APlayerController* PC );
	void ReplicateStreamingStatus ( class APlayerController* PC );
	void DelayedEndPrivateMatch ( );
	void Logout ( class AController* Exiting );
	void OnClanTagQueryComplete ( struct FUniqueNetId ForId, struct FString ClanTag );
	void ApplyBasicProfileInfoForPlayer ( class AFoxPC* PC, struct FString NewPlayerName, int Experience, unsigned long bFemaleChar, struct FQWord EmblemData, int TitleIndex, struct FString LastSeenTime );
	void OnQueryBasicProfileComplete ( struct FUniqueNetId ForId, unsigned long bSuccess, struct FString PlayerName, int Experience, unsigned long bFemaleChar, struct FQWord BadgeData, int TitleIndex, struct FString LastSeenTime );
	void ReadBasicProfileForPlayer ( class AFoxPRI* NewPRI );
	void eventPostLogin ( class APlayerController* NewPlayer );
	bool IsPlayerAllowedInRankedMatch ( struct FUniqueNetId PlayerUniqueId );
	class APlayerController* eventLogin ( struct FString Portal, struct FString Options, struct FUniqueNetId UniqueId, struct FString* ErrorMessage );
	class UClass* GetPlayerControllerClass ( struct FString Options );
	void eventPreLogin ( struct FString Options, struct FString Address, struct FString* ErrorMessage );
	void UpdateGameSettingsNow ( );
	void UpdateGameSettingsCounts ( );
	void UpdateGameSettings ( );
	class UFoxGameSettingsCommon* GetGameSettings ( );
	void PostBeginPlay ( );
	void UnloadStreams ( );
	void eventDestroyed ( );
	float GetTickRate ( );
	void UpdateGameProperties ( );
	void InitGameReplicationInfo ( );
	void eventInitNewGame ( struct FString Options );
	void SetupGameFromPlaylistInfo ( );
	struct FUniqueNetId ConvertStringToUniqueID ( struct FString InString );
	void IncrementRankedStat ( struct FQWord Uid, unsigned char TheEvent );
	void BuildRankedPlayerList ( struct FString Options );
	void StreamLevelsForRankedMatch ( struct FString MapName );
	void CheckForEmptyServer ( );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	void PreBeginPlay ( );
};

UClass* AFoxGame::pClassPointer = NULL;

// Class FoxGame.FoxGameMP_DM
// 0x0010 (0x05AC - 0x059C)
class AFoxGameMP_DM : public AFoxGame
{
public:
	int                                                GPEarnedWinFirst;                                 		// 0x059C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                GPEarnedWinSecond;                                		// 0x05A0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                GPEarnedWinThird;                                 		// 0x05A4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                GPEarnedGameEnd;                                  		// 0x05A8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1473 ];

		return pClassPointer;
	};

	bool ShouldPlayersMute ( class AFoxPC* PC1, class AFoxPC* PC2 );
	void CalculateHighestThreat ( );
	void RecalculateHighestThreat ( );
	void RecalculateVIPs ( );
	void CalculateVIPs ( );
	void HandleEndGameScoring ( );
	void eventPostLogin ( class APlayerController* NewPlayer );
	void InitGameReplicationInfo ( );
	bool CheckScore ( class APlayerReplicationInfo* TestPRI );
	void InitializeTeams ( );
};

UClass* AFoxGameMP_DM::pClassPointer = NULL;

// Class FoxGame.FoxGameMP_BO
// 0x0014 (0x05C0 - 0x05AC)
class AFoxGameMP_BO : public AFoxGameMP_DM
{
public:
	TArray< struct FDeadBodyInfo >                     DeadBodies;                                       		// 0x05AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              DeadBodyExpirationTime;                           		// 0x05B8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMissionCompleted : 1;                            		// 0x05BC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1474 ];

		return pClassPointer;
	};

	bool CanJoinGame ( unsigned long bSpectator );
	void NotifyGameHasEnded ( );
	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
};

UClass* AFoxGameMP_BO::pClassPointer = NULL;

// Class FoxGame.FoxGameMP_LMS
// 0x000C (0x05B8 - 0x05AC)
class AFoxGameMP_LMS : public AFoxGameMP_DM
{
public:
	float                                              VictoryTimer;                                     		// 0x05AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      AllowRestartPlayer : 1;                           		// 0x05B0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class AController*                                 Winner;                                           		// 0x05B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1475 ];

		return pClassPointer;
	};

	void MuteDeadPlayer ( class AFoxPC* Deadguy );
	void NotifyPlayerGotPawn ( class AFoxPC* PCPlayer );
	void EndCurrentRound ( );
	void RoundScoring ( class AFoxPC* RoundWinner );
	void eventTimer ( );
	void ScoreSuicide ( class AController* SuicidedPlayer );
	void BroadcastKillSpreeMessage ( class AController* Killer, class AController* Killed );
	void StartHumans ( );
	void RestartRound ( );
	void RestartPlayer ( class AController* NewPlayer );
	void ScoreValidKill ( class AController* Killer, class AController* KilledPlayer );
	void EndGameAfterVictory ( );
	void ScoreKill ( class AController* Killer, class AController* Victim );
};

UClass* AFoxGameMP_LMS::pClassPointer = NULL;

// Class FoxGame.FoxGameMP_TDM
// 0x0080 (0x062C - 0x05AC)
class AFoxGameMP_TDM : public AFoxGameMP_DM
{
public:
	struct FPlayerStartVariables                       PSV_InProgress;                                   		// 0x05AC (0x005C) [0x0000000000000002]              ( CPF_Const )
	int                                                WinningTeamIndex;                                 		// 0x0608 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     LocStringTeam1Name;                               		// 0x060C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringTeam2Name;                               		// 0x0618 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                GPEarnedGameWin;                                  		// 0x0624 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                GPEarnedGameLose;                                 		// 0x0628 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1476 ];

		return pClassPointer;
	};

	bool ShouldPlayersMute ( class AFoxPC* PC1, class AFoxPC* PC2 );
	void CalculateHighestThreat ( );
	void CheckThreatKill ( class AFoxPRI* KillerPRI, class AFoxPRI* KilledPRI );
	void RecalculateHighestThreat ( );
	void RecalculateVIPs ( );
	void CalculateVIPs ( );
	void StartInProgressSpawn ( );
	void debugBalanceTeams ( );
	void BalanceTeams ( );
	void HandleEndGameScoring ( );
	void InitGameReplicationInfo ( );
	bool CheckScore ( class APlayerReplicationInfo* TestPRI );
	void ScoreValidKill ( class AController* Killer, class AController* KilledPlayer );
	class AFoxPC* GetFirstPendingTeamChange ( int TeamIndex );
	bool CheckPendingTeamSwitches ( );
	void TryTeamChange ( class AFoxPC* PC, unsigned long bWantsTeamChange );
	void InitializeTeams ( );
	int ChooseBestTeamToJoin ( );
	unsigned char PickTeam ( unsigned char Current, class AController* C );
	int GetForcedTeam ( class AController* Other, int Team );
};

UClass* AFoxGameMP_TDM::pClassPointer = NULL;

// Class FoxGame.FoxGameMP_CP
// 0x0014 (0x0640 - 0x062C)
class AFoxGameMP_CP : public AFoxGameMP_TDM
{
public:
	TArray< class AFoxGameObject_ControlPoint* >       ControlPoints;                                    		// 0x062C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              LastTickTime;                                     		// 0x0638 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsGameEnd : 1;                                   		// 0x063C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1477 ];

		return pClassPointer;
	};

	float RateForGameType ( class APlayerStart* P, class AController* Player, struct FPlayerStartVariables* PSV );
	void ScoreEvent ( class AFoxPRI* Scorer, unsigned char EventType );
	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType );
	void ScoreValidKill ( class AController* Killer, class AController* KilledPlayer );
	void UpdatePointCaptureScore ( );
	void eventTimer ( );
	bool IsGameEnd ( );
	void CancelCapture ( class AFoxGameObject_ControlPoint* Point, class AFoxPRI* FoxPRI );
	void CompleteCapture ( class AFoxGameObject_ControlPoint* Point, class AFoxPRI* PRI );
	void LostCapture ( class AFoxGameObject_ControlPoint* Point, class AFoxPRI* FoxPRI );
	void BeginLoseCapture ( class AFoxGameObject_ControlPoint* Point, class AFoxPRI* FoxPRI );
	void StartCapture ( class AFoxGameObject_ControlPoint* Point, class AFoxPRI* FoxPRI );
	void RegisterControlPoint ( class AFoxGameObject_ControlPoint* NewPoint );
};

UClass* AFoxGameMP_CP::pClassPointer = NULL;

// Class FoxGame.FoxGameMP_CTF
// 0x001C (0x0648 - 0x062C)
class AFoxGameMP_CTF : public AFoxGameMP_TDM
{
public:
	float                                              CapturePersonalScoreAdjustment;                   		// 0x062C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DefensePersonalScoreAdjustment;                   		// 0x0630 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ReturnPersonalScoreAdjustment;                    		// 0x0634 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GrabPersonalScoreAdjustment;                      		// 0x0638 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class AFoxGameObject_Flag*                         RedFlag;                                          		// 0x063C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxGameObject_Flag*                         BlueFlag;                                         		// 0x0640 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bHasFirstTouch : 1;                               		// 0x0644 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1478 ];

		return pClassPointer;
	};

	float RateForGameType ( class APlayerStart* P, class AController* Player, struct FPlayerStartVariables* PSV );
	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType );
	void ScoreEvent ( class AFoxPRI* Scorer, unsigned char EventType );
	void InitializeTeams ( );
	void NotifyFlagSpawned ( class AFoxGameObject_Flag* NewFlag );
	void ScoreGrab ( class AFoxPRI* FoxPRI );
	void ScoreReturn ( class AFoxPRI* FoxPRI );
	void ScoreDefense ( class AFoxPRI* FoxPRI );
	bool ScoreCapture ( class AFoxPRI* PRI );
	void ScoreValidKill ( class AController* Killer, class AController* KilledPlayer );
	class ATeamInfo* GetFlagTeam ( class AFoxGameObject_Flag* Flag );
	void FlagLost ( class AFoxGameObject_Flag* LostFlag );
	void FlagDropped ( class AFoxGameObject_Flag* Flag, class AFoxPRI* FoxPRI );
	void FlagPickedUp ( class AFoxGameObject_Flag* Flag, class AFoxPRI* FoxPRI );
	void FlagReturned ( class AFoxGameObject_Flag* Flag, class AFoxPRI* Returner );
	void FlagCaptured ( class AFoxGameObject_Flag* Flag, class AFoxPRI* FoxPRI );
};

UClass* AFoxGameMP_CTF::pClassPointer = NULL;

// Class FoxGame.FoxGameMP_KC
// 0x000C (0x0638 - 0x062C)
class AFoxGameMP_KC : public AFoxGameMP_TDM
{
public:
	TArray< class AFoxDroppedPickup_KillTag* >         KillTags;                                         		// 0x062C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1479 ];

		return pClassPointer;
	};

	void ScoreValidKill ( class AController* Killer, class AController* KilledPlayer );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType );
	void KillTagPickedUp ( class AFoxPRI* PRI, class AFoxDroppedPickup_KillTag* KillTag );
};

UClass* AFoxGameMP_KC::pClassPointer = NULL;

// Class FoxGame.FoxGameMP_LTS
// 0x0008 (0x0634 - 0x062C)
class AFoxGameMP_LTS : public AFoxGameMP_TDM
{
public:
	float                                              VictoryTimer;                                     		// 0x062C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      AllowRestartPlayer : 1;                           		// 0x0630 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1480 ];

		return pClassPointer;
	};

	void MuteDeadPlayer ( class AFoxPC* Deadguy );
	void NotifyPlayerGotPawn ( class AFoxPC* PCPlayer );
	void RoundScoring ( );
	void eventTimer ( );
	void ResetRemainingPlayers ( );
	void StartHumans ( );
	void RestartRound ( );
	void RestartPlayer ( class AController* NewPlayer );
	void ScoreValidKill ( class AController* Killer, class AController* KilledPlayer );
	void ScoreKill ( class AController* Killer, class AController* Victim );
};

UClass* AFoxGameMP_LTS::pClassPointer = NULL;

// Class FoxGame.FoxGameMP_PL
// 0x003C (0x0668 - 0x062C)
class AFoxGameMP_PL : public AFoxGameMP_TDM
{
public:
	class AController*                                 PayloadPilot;                                     		// 0x062C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AController* >                       PastPilots;                                       		// 0x0630 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AFoxPawn_ScorpionTank*                       PayloadObject;                                    		// 0x063C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxPayloadStopVolume*                       CurrentVolume;                                    		// 0x0640 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RoundCompletionTime;                              		// 0x0644 (0x0004) [0x0000000000000000]              
	class AFoxSiegeTeamInfo*                           AttackTeam;                                       		// 0x0648 (0x0004) [0x0000000000000000]              
	class AFoxSiegeTeamInfo*                           DefendTeam;                                       		// 0x064C (0x0004) [0x0000000000000000]              
	int                                                StartingCPForDefenders;                           		// 0x0650 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     PayloadDestinationReason;                         		// 0x0654 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ScorpionTankAttackDefendBonusRange;               		// 0x0660 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              DisableRewardTimer;                               		// 0x0664 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1481 ];

		return pClassPointer;
	};

	void eventInitializeTeams ( );
	bool IsInSecondRound ( );
	bool IsInFirstRound ( );
	void eventKilled ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType );
	bool CanJoinGame ( unsigned long bSpectator );
	bool ShouldReset ( class AActor* ActorToReset );
	void ResetLevel ( );
	void StartInProgressSpawn ( );
	void AddTime ( int AmountToAdd );
	int GetForcedTeam ( class AController* Other, int Team );
	bool PerformTeamSwitch ( class AController* Other, int NewTeamIndex, unsigned long bUserRequest );
	void OnRoundEnd ( int TeamRoundWinIndex, unsigned long bGameShouldEnd );
	unsigned char GetIndexOfTeamForRoundWin ( );
	bool eventIsOnAttackingTeam ( int ToCheck );
	class ATeamInfo* GetWinningTeam ( );
	void PayloadReachedDestination ( );
	void SetCurrentVolume ( class AFoxPayloadStopVolume* NewVolume );
	bool PawnIsPayloadObject ( class APawn* Other );
	void eventUpdatePayloadMovement ( );
	void UpdateProgressBarControlPoint ( );
	void UpdateProgressBarDirection ( int Direction );
	void UpdateProgressBarPosition ( float Progress );
	void DoorHacked ( class AController* Hacker );
	void PayloadFixed ( class AController* Healer );
	void PayloadRepaired ( class AController* Healer );
	void PayloadPilotLeave ( );
	void PayloadRepairedTimer ( );
	void PayloadDestroyed ( class AController* Killer );
	void BecomePayloadPilot ( class AController* Pilot );
	void ScoreValidKill ( class AController* Killer, class AController* KilledPlayer );
	void ScoreKill ( class AController* Killer, class AController* Victim );
	void RegisterPayloadObject ( class AFoxPawn_ScorpionTank* ThePayload );
};

UClass* AFoxGameMP_PL::pClassPointer = NULL;

// Class FoxGame.FoxGameMP_TKOTH
// 0x0024 (0x0650 - 0x062C)
class AFoxGameMP_TKOTH : public AFoxGameMP_TDM
{
public:
	TArray< class AFoxGameObject_HillPoint* >          HillPoints;                                       		// 0x062C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                scoreForHillCapture;                              		// 0x0638 (0x0004) [0x0000000000000000]              
	class AFoxGameObject_HillPoint*                    activeHillPoint;                                  		// 0x063C (0x0004) [0x0000000000000000]              
	int                                                activeHillIndex;                                  		// 0x0640 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsGameEnd : 1;                                   		// 0x0644 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              TimeBetweenPoints;                                		// 0x0648 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              PointInactiveTime;                                		// 0x064C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1482 ];

		return pClassPointer;
	};

	void ScoreEvent ( class AFoxPRI* Scorer, unsigned char EventType );
	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	float RateForGameType ( class APlayerStart* P, class AController* Player, struct FPlayerStartVariables* PSV );
	void eventKilled ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType );
	void SetNextHill ( );
	void OnDelayedReadyNewPoint ( );
	void OnDelayedChooseNextPoint ( );
	void ChooseNextPoint ( );
	bool IsGameEnd ( );
	void eventScoreHillCapture ( );
	void eventScoreValidKill ( class AController* Killer, class AController* KilledPlayer );
	void StartMatch ( );
	void RegisterControlPoint ( class AFoxGameObject_HillPoint* NewHillPoint );
};

UClass* AFoxGameMP_TKOTH::pClassPointer = NULL;

// Class FoxGame.FoxGRI
// 0x0194 (0x03C8 - 0x0234)
class AFoxGRI : public AGameReplicationInfo
{
public:
	unsigned char                                      GameStatus;                                       		// 0x0234 (0x0001) [0x0000000000000000]              
	unsigned char                                      MaxDeadPawns;                                     		// 0x0235 (0x0001) [0x0000000000000000]              
	unsigned char                                      NextGamePlatformInfo[ 0x50 ];                     		// 0x0236 (0x0050) [0x0000000000000000]              
	unsigned char                                      NumPendingJoinPlayersTeam1;                       		// 0x0286 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      NumPendingJoinPlayersTeam2;                       		// 0x0287 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      NextMapIndex;                                     		// 0x0288 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      NextNextMapIndex;                                 		// 0x0289 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      CurrentRoundNum;                                  		// 0x028A (0x0001) [0x0000000000000020]              ( CPF_Net )
	struct FMapSkipVote                                MapSkipInfo;                                      		// 0x028C (0x0008) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      ScoringInfoClass;                                 		// 0x0294 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AFoxObjectPool*                              ObjectPool;                                       		// 0x0298 (0x0004) [0x0000000000000000]              
	TArray< class AFoxPawn* >                          DeadPawnQueue;                                    		// 0x029C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AFoxPawn* >                          PendingDestroyPawnQueue;                          		// 0x02A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              DeadPawnUpdateTime;                               		// 0x02B4 (0x0004) [0x0000000000000000]              
	float                                              NumNodes;                                         		// 0x02B8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bAggressiveLOD_Test : 1;                          		// 0x02BC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDropDetail_Test : 1;                             		// 0x02BC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFriendlyFire : 1;                                		// 0x02BC (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bTeamOneWinning : 1;                              		// 0x02BC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bMigratingHost : 1;                               		// 0x02BC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bSwitchingToNextMatch : 1;                        		// 0x02BC (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	TArray< struct FString >                           CreatedServerNameHistory;                         		// 0x02C0 (0x000C) [0x0000000040444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< class UAkBank* >                           GameTypeAudioBanks;                               		// 0x02CC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UAkBank* >                           AlwaysLoadedAudioBanks;                           		// 0x02D8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UAkBank* >                           PossiblyLoadedAudioBanks;                         		// 0x02E4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UObject* >                           LoadedUIPackages;                                 		// 0x02F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                LastRemainingTime;                                		// 0x02FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GameXPModifier;                                   		// 0x0300 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              GameCPModifier;                                   		// 0x0304 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              GameGPModifier;                                   		// 0x0308 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              PlaylistXPModifier;                               		// 0x030C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              PlaylistGPModifier;                               		// 0x0310 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              PlaylistCPModifier;                               		// 0x0314 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ExperienceToGamePointsMultiplier;                 		// 0x0318 (0x0004) [0x0000000000000000]              
	float                                              ExperienceToCombatPointsMultiplier;               		// 0x031C (0x0004) [0x0000000000000000]              
	TArray< class ULevelStreaming* >                   ExtraStreamedLevels;                              		// 0x0320 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DialogActionCategory;                             		// 0x032C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                MaxPlayers;                                       		// 0x0338 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     GamePassword;                                     		// 0x033C (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	class UFoxDataStore_MenuItems*                     MenuItemsDataStore;                               		// 0x0348 (0x0004) [0x0000000000000000]              
	class UFoxDataStore_Playlists*                     PlaylistsDataStore;                               		// 0x034C (0x0004) [0x0000000000000000]              
	float                                              PrivateMatchXPModifier;                           		// 0x0350 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              PrivateMatchGPModifier;                           		// 0x0354 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FUniqueNetId                                PrivateMatchOwnerID;                              		// 0x0358 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      NextGameClass;                                    		// 0x0360 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                FirstPlaceID;                                     		// 0x0364 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SecondPlaceID;                                    		// 0x0368 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ThirdPlaceID;                                     		// 0x036C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxGameFlowBase*                            GameFlow;                                         		// 0x0370 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MenuTimeRemaining;                                		// 0x0374 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FString                                     DefaultAnnouncerName;                             		// 0x0378 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GameTypeCode;                                     		// 0x0384 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       MatchIntensityRTPCName;                           		// 0x0390 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       MatchClosenessRTPCName;                           		// 0x0398 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     AdminName;                                        		// 0x03A0 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	int                                                MutatorSetting;                                   		// 0x03AC (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FScriptDelegate                             __OnMenuTimerFinished__Delegate;                  		// 0x03B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __IsWithinMaxEffectDistance__Delegate;            		// 0x03BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1483 ];

		return pClassPointer;
	};

	void DumpGPCPStats ( );
	bool IsMutatorEnabled ( unsigned char MutatorToggleType );
	void SetMutatorEnabled ( unsigned char MutatorToggleType, unsigned long bEnabled );
	int GetNumPlayers ( );
	float GetTeamGPMultiplier ( class AFoxPRI* PRI );
	float GetTotalGPModifierForPlayer ( class AFoxPRI* PRI );
	float GetTeamCPMultiplier ( class AFoxPRI* PRI );
	float GetTotalCPModifierForPlayer ( class AFoxPRI* PRI );
	float GetTeamXPMultiplier ( class AFoxPRI* PRI );
	float GetTotalXPModifierForPlayer ( class AFoxPRI* PRI );
	class AFoxPRI* GetPRIByPlayerID ( int PlayerID );
	int GetPRIThreatLevel ( class AFoxPRI* PRI );
	class AFoxPRI* GetVIPPRI ( int TeamIndex );
	class AFoxPRI* GetHighestThreatPRI ( int TeamIndex );
	float GetIntervalForEvent ( unsigned char EventType );
	int GetScoreForEvent ( unsigned char EventType );
	int GetMoraleBoostPoints ( );
	int GetBecomeThreatPoints ( );
	int eventGetThreatKillPoints ( );
	int eventGetKillStreakKillPoints ( int KillStreak );
	int eventGetVIPKillPoints ( );
	int GetRivalKillPoints ( );
	int GetRevengePoints ( int NumKills );
	int GetHeadshotPoints ( );
	int eventGetKillPoints ( );
	int GetAssistPoints ( );
	void NativeResetWorld ( );
	void ResetActors ( );
	void LaunchRoundEnd ( );
	void EndGameLobby ( );
	void LaunchGameLobby ( );
	void LaunchIntermission ( );
	class AFoxPC* GetTheLocalPlayerController ( );
	bool IsInEntryMap ( );
	bool eventIsGamePublic ( );
	void StoreGameSpecificSettings ( );
	bool DoesGameTrackExperience ( );
	TArray< class AFoxPRI* > GetPRIWithHighestKills ( );
	TArray< class AFoxPRI* > GetPRIWithHighestScore ( );
	void EndGame ( );
	void DisplayGameAction ( struct FName TeamName, struct FName ActionName, struct FName TeamReaction, struct FName EnemyReaction, int XP );
	void GameAction ( struct FName TeamName, struct FName ActionName );
	TArray< class AFoxPRI* > GetSortedPRIs ( unsigned char TeamIndex );
	TArray< class AFoxPRI* > GetValidPlayerPRIs ( );
	bool CheckEndGame ( );
	float GetMatchScoreCloseness ( );
	float GetMatchScoreRatio ( );
	float GetMatchTimeRatio ( );
	void RemovePRI ( class APlayerReplicationInfo* PRI );
	bool OnSameTeam ( class AActor* A, class AActor* B );
	struct FColor eventGetColorForTeam ( class AActor* TeamActor );
	struct FLinearColor eventGetEmissiveColorForTeam ( class AActor* TeamActor );
	bool IsActorFriendlyToLocalPlayer ( class AActor* TeamActor );
	struct FLinearColor GetTeamHUDColor ( int TeamIndex );
	void OnDumpStatsTimer ( );
	void StartMatch ( );
	void ReceivedGameClass ( );
	void UpdateDeadPawnList ( );
	void RemoveDeadPawn ( int Index );
	void RegisterDeadPawn ( class AFoxPawn* P );
	int GetLODLevelToUse ( class UParticleSystem* PS, struct FVector EffectLocation );
	bool ShouldDisableEffectsDueToFramerate ( class APawn* InInstigator );
	bool IsEffectRelevant ( class APawn* InInstigator, struct FVector EffectLocation, float CullDistance, unsigned long bForceRelevant, struct FScriptDelegate DistanceFunc );
	bool CheckEffectDistance_SpawnWithinCullDistance ( float CullDistance, class APlayerController** PC, struct FVector* EffectLocation );
	bool CheckEffectDistance_SpawnWithinCullDistanceAndInFront ( float CullDistance, class APlayerController** PC, struct FVector* EffectLocation );
	bool CheckEffectDistance_SpawnBehindIfNear ( float CullDistance, class APlayerController** PC, struct FVector* EffectLocation );
	bool IsWithinMaxEffectDistance ( float CullDistance, class APlayerController** PC, struct FVector* EffectLocation );
	void SetSavedTeamScore ( int TeamIndex, class ATeamInfo* TI );
	class UFoxGameSettingsCommon* GetGameSettings ( struct FName GameName );
	void SetTeam ( int Index, class ATeamInfo* TI );
	void SetupSavedTime ( );
	void ChangeGameType ( struct FString NewGameOption );
	bool WasCurrentMapStreamedIn ( );
	void ClearPreparingLevels ( );
	void eventNotifyLevelsStreamedOut ( );
	void eventNotifyLevelsStreamedIn ( );
	void RemoveLevelStreams ( );
	void AddLevelStreams ( TArray< struct FName > LevelStreamNames );
	void HideExtraStreams ( );
	void CheckStreamsNeeded ( );
	void SetupLobby ( unsigned long bEntryMap );
	void ApplyServerNameFromCommandLine ( class UFoxGameSettingsCommon* GameSettings );
	void ApplyServerName ( struct FString NewServerName, class UFoxGameSettingsCommon* GameSettings );
	void ApplyAdminNameFromCommandLine ( class UFoxGameSettingsCommon* GameSettings );
	void ApplyAdminName ( struct FString NewAdminName, class UFoxGameSettingsCommon* GameSettings );
	void AddPRI ( class APlayerReplicationInfo* PRI );
	void SetVoipInfo ( );
	void ApplyMutators ( );
	void PostBeginPlay ( );
	void PreBeginPlay ( );
	void UnloadAllUIPackages ( );
	void UnloadUIPackage ( struct FString PackageName );
	void LoadUIPackage ( struct FString PackageName );
	void UnloadAllGameAudioBanks ( );
	void UnloadContentPackages ( );
	void LoadContentPackages ( );
	void Destroyed ( );
	struct FString eventGetAnnouncerName ( );
	void eventReplicatedEvent ( struct FName VarName );
	void OnMenuTimerFinished ( );
};

UClass* AFoxGRI::pClassPointer = NULL;

// Class FoxGame.FoxGameFlowBase
// 0x0000 (0x003C - 0x003C)
class UFoxGameFlowBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1484 ];

		return pClassPointer;
	};

	class UFoxLobbyUIBase* GetLobbyUI ( );
	void Initialize ( );
};

UClass* UFoxGameFlowBase::pClassPointer = NULL;

// Class FoxGame.FoxIntermission
// 0x003C (0x0078 - 0x003C)
class UFoxIntermission : public UFoxGameFlowBase
{
public:
	int                                                MinRequiredPlayersToStart;                        		// 0x003C (0x0004) [0x0000000000000000]              
	float                                              PlayerSearchTime;                                 		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              MorePlayerSearchTime;                             		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              MatchStartCountDownTime;                          		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                CachedNumPlayers;                                 		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bMatchCountdownStarted : 1;                       		// 0x0050 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                ForcedMapIndex;                                   		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkEvent*                                    TimerBeepSound;                                   		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              ChildMenuCloseWarnTimer;                          		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              PlayerWaitTimer;                                  		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                MatchStartTimeRemaining;                          		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              VoteSkipWindow;                                   		// 0x0068 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MinSkipVotesPercentage;                           		// 0x006C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MinSkipVotes;                                     		// 0x0070 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                CachedNumVotesRequiredForMapSkip;                 		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1485 ];

		return pClassPointer;
	};

	int GetRemainingVotesRequiredForMapSkip ( );
	void CloseMapSkipVoting ( );
	void eventSkipNextMap ( );
	void OnVoteSkipTimerWindowExpired ( );
	void DelayedCloseGame ( );
	void OnPrivateMatchIdle ( );
	void PlayTimerBeep ( );
	void MatchStartingTick ( );
	void BeginMatchCountdown ( );
	void eventGameReadyToStart ( );
	void SwitchToPreLobby ( );
	void MapStreamedIn ( );
	void DelayedBeginStream ( );
	void IntermissionEnd ( );
	void BeginTransitionToNewMap ( );
	void SetMapIndex ( );
	void ChangeGameAdvertisement ( unsigned long bShow );
	void eventNumPlayersChanged ( int NewNumPlayers );
	void StartFindPlayers ( );
	void Initialize ( );
};

UClass* UFoxIntermission::pClassPointer = NULL;

// Class FoxGame.FoxPreGameLobby
// 0x0004 (0x0040 - 0x003C)
class UFoxPreGameLobby : public UFoxGameFlowBase
{
public:
	int                                                MenuTimer;                                        		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1486 ];

		return pClassPointer;
	};

	void ClientJoinGame ( );
	void NotifyMatchStarted ( );
	void StartGame ( );
	void Initialize ( );
};

UClass* UFoxPreGameLobby::pClassPointer = NULL;

// Class FoxGame.FoxRoundEnd
// 0x0004 (0x0040 - 0x003C)
class UFoxRoundEnd : public UFoxGameFlowBase
{
public:
	float                                              RoundEndTimer;                                    		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1487 ];

		return pClassPointer;
	};

	void eventNextMatch ( );
	void Initialize ( );
};

UClass* UFoxRoundEnd::pClassPointer = NULL;

// Class FoxGame.FoxGameObject
// 0x001C (0x01E4 - 0x01C8)
class AFoxGameObject : public AActor
{
public:
	class UMeshComponent*                              ObjectMesh;                                       		// 0x01C8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMesh*                                 ReplicatedMesh;                                   		// 0x01CC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      UsableByTeam;                                     		// 0x01D0 (0x0001) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	class UMaterial*                                   HRVMaterial;                                      		// 0x01D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowInHRV : 1;                                   		// 0x01D8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnabled : 1;                                     		// 0x01D8 (0x0004) [0x0000000000000021] [0x00000002] ( CPF_Edit | CPF_Net )
	unsigned long                                      bHideGameObject : 1;                              		// 0x01D8 (0x0004) [0x0000000000000021] [0x00000004] ( CPF_Edit | CPF_Net )
	float                                              SpawningRadius;                                   		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDrawSphereComponent*                        DrawSpawningRadius;                               		// 0x01E0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1488 ];

		return pClassPointer;
	};

	unsigned char eventScriptGetTeamNum ( );
	void NotifyLocalPlayerTeamReceived ( );
	void SetEmissives ( );
	void OnToggle ( class USeqAct_Toggle* Action );
	void eventToggleHRVEffects ( unsigned long bHRVEnabled );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	bool eventCanInteractWith ( class AFoxPawn* InteractingPawn );
	void HideGameObject ( unsigned long bHideObject );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AFoxGameObject::pClassPointer = NULL;

// Class FoxGame.FoxGameObject_Carry
// 0x0050 (0x0234 - 0x01E4)
class AFoxGameObject_Carry : public AFoxGameObject
{
public:
	class AFoxPawn*                                    CarriedByPawn;                                    		// 0x01E4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AFoxPawn*                                    LastCarriedPawn;                                  		// 0x01E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       AttachSocketName;                                 		// 0x01EC (0x0008) [0x0000000000000000]              
	unsigned long                                      bCarried : 1;                                     		// 0x01F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCanSprint : 1;                                   		// 0x01F4 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	float                                              MovementMultiplier;                               		// 0x01F8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UMaterial*                                   ObjectMaterial;                                   		// 0x01FC (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   ObjectMaterialInstance;                           		// 0x0200 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   RedMIC;                                           		// 0x0204 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   BlueMIC;                                          		// 0x0208 (0x0004) [0x0000000000000000]              
	struct FLinearColor                                ObjectColor;                                      		// 0x020C (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UPointLightComponent*                        ObjectLight;                                      		// 0x021C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UCylinderComponent*                          ObjectCylinder;                                   		// 0x0220 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     SpawnLocation;                                    		// 0x0224 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              DroppedObjectReturnTime;                          		// 0x0230 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1489 ];

		return pClassPointer;
	};

	void TakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void ReturnToBase ( class AFoxPRI* ReturningPRI );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventDestroyed ( );
	void Drop ( );
	void Pickup ( class AFoxPawn* PickedUpPawn );
	bool IsPickupTouchPossible ( class AFoxPawn* PlayerTouched );
	bool InTeamSpawn ( class AFoxPawn* PawnToCheck );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AFoxGameObject_Carry::pClassPointer = NULL;

// Class FoxGame.FoxGameObject_Flag
// 0x0004 (0x0238 - 0x0234)
class AFoxGameObject_Flag : public AFoxGameObject_Carry
{
public:
	unsigned long                                      bIsAtBase : 1;                                    		// 0x0234 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1490 ];

		return pClassPointer;
	};

	unsigned char eventScriptGetTeamNum ( );
	void ToggleHRVEffects ( unsigned long bHRVEnabled );
	void SetEmissives ( );
	void eventDestroyed ( );
	void Drop ( );
	void Pickup ( class AFoxPawn* PickedUpPawn );
	void ReturnToBase ( class AFoxPRI* ReturningPRI );
	void Capture ( );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventPostBeginPlay ( );
	bool CanInteractWith ( class AFoxPawn* InteractingPawn );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AFoxGameObject_Flag::pClassPointer = NULL;

// Class FoxGame.FoxGameObject_EOTSFlag
// 0x0000 (0x0238 - 0x0238)
class AFoxGameObject_EOTSFlag : public AFoxGameObject_Flag
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1491 ];

		return pClassPointer;
	};

	void Drop ( );
	void Pickup ( class AFoxPawn* PickedUpPawn );
	void Capture ( );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* AFoxGameObject_EOTSFlag::pClassPointer = NULL;

// Class FoxGame.FoxGameObject_Use
// 0x0030 (0x0214 - 0x01E4)
class AFoxGameObject_Use : public AFoxGameObject
{
public:
	class UAkEvent*                                    UseEvent;                                         		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawUseText : 1;                                 		// 0x01E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAllowMultipleUsers : 1;                          		// 0x01E8 (0x0004) [0x0000000000000000] [0x00000002] 
	class AFoxPawn*                                    CurrentlyUsingPawn;                               		// 0x01EC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AFoxMiniGame_Base*                           CurrentMiniGame;                                  		// 0x01F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UClass* >                            MiniGames;                                        		// 0x01F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AFoxUseVolume*                               UseVolume;                                        		// 0x0200 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	struct FString                                     LocStringUse;                                     		// 0x0204 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              UseHoldTime;                                      		// 0x0210 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1492 ];

		return pClassPointer;
	};

	void NotifyUseObjectInterval ( class AFoxPawn* Pawn );
	bool IsPawnUsingObject ( class AFoxPawn* Pawn );
	bool IsInUse ( );
	bool CanInteractWith ( class AFoxPawn* InteractingPawn );
	void CancelMinigame ( class AFoxPawn* InteractingPawn );
	void OnFailedUse ( class AFoxPawn* InteractingPawn );
	void OnSuccessfulUse ( class AFoxPawn* InteractingPawn );
	void CompletedMinigame ( class AFoxPawn* InteractingPawn, unsigned long bSuccess );
	void StopUsingLocal ( class AFoxPawn* UsingPawn );
	void StopUsingServer ( class AFoxPawn* UsingPawn );
	void StartUsingLocal ( class AFoxPawn* UsingPawn );
	void StartUsingServer ( class AFoxPawn* UsingPawn );
	void SpawnRandomMiniGame ( class AFoxPawn* UsingPawn );
	void PawnLeavingUseVolume ( class APawn* LeavingPawn );
	void PawnEnteredUseVolume ( class APawn* EnteringPawn );
	void eventPostBeginPlay ( );
	void ReplicatedEvent ( struct FName VarName );
};

UClass* AFoxGameObject_Use::pClassPointer = NULL;

// Class FoxGame.FoxStation_Base
// 0x0028 (0x023C - 0x0214)
class AFoxStation_Base : public AFoxGameObject_Use
{
public:
	float                                              PingTime;                                         		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AFoxPawn* >                          PawnsInVolume;                                    		// 0x0218 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       LookAtSocketName;                                 		// 0x0224 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UMaterialInstanceConstant*                   HRVMaterialTemplate;                              		// 0x022C (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   HRVMIC;                                           		// 0x0230 (0x0004) [0x0000000000000000]              
	int                                                HRVParamVal;                                      		// 0x0234 (0x0004) [0x0000000000000000]              
	unsigned long                                      HRVTurnedOn : 1;                                  		// 0x0238 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1493 ];

		return pClassPointer;
	};

	void ToggleHRVEffects ( unsigned long bHRVEnabled );
	bool CanInteractWith ( class AFoxPawn* InteractingPawn );
	bool IsLookingAtObject ( class AFoxPawn* InteractingPawn );
	struct FName GetLookAtSocketName ( );
	void OnSuccessfulUse ( class AFoxPawn* InteractingPawn );
	void Ping ( );
	void PawnLeavingUseVolume ( class APawn* LeavingPawn );
	void PawnEnteredUseVolume ( class APawn* EnteringPawn );
};

UClass* AFoxStation_Base::pClassPointer = NULL;

// Class FoxGame.FoxGameObject_BombTarget
// 0x007C (0x02B8 - 0x023C)
class AFoxGameObject_BombTarget : public AFoxStation_Base
{
public:
	float                                              PlantBombTimer;                                   		// 0x023C (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	unsigned char                                      TeamTarget;                                       		// 0x0240 (0x0001) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	class UMeshComponent*                              DestroyedBombTarget;                              		// 0x0244 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      BombTarget;                                       		// 0x0248 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMeshComponent*                              BombPlacementMesh;                                		// 0x024C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AFoxGameObject_Bomb*                         PlantedBomb;                                      		// 0x0250 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UParticleSystemComponent*                    ExplosionPSComp;                                  		// 0x0254 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   BaseIconMIC;                                      		// 0x0258 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   PostRenderBaseIconMIC;                            		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   BaseHRVIconMIC;                                   		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   PostRenderBaseHRVIconMIC;                         		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInterface*                          PostRenderMaterial;                               		// 0x0268 (0x0004) [0x0000000000000000]              
	struct FName                                       TeamBaseColorParameterName;                       		// 0x026C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       TeamIconColorParameterName;                       		// 0x0274 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       BombOrTargetName;                                 		// 0x027C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FLinearColor                                TargetColor;                                      		// 0x0284 (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UAkEvent*                                    BombPlantedAudioEvent;                            		// 0x0294 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    StopAudioEvent;                                   		// 0x0298 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    ExplosionEvent;                                   		// 0x029C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     UserOffset;                                       		// 0x02A0 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ExplosionSocketName;                              		// 0x02AC (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bHRVIsEnabled : 1;                                		// 0x02B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bBombExploded : 1;                                		// 0x02B4 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1494 ];

		return pClassPointer;
	};

	void StopExplosionEffect ( );
	float TimeRemaining ( );
	void HideBombPlacement ( unsigned long bShown );
	void SetTargetColor ( );
	void ToggleHRVEffects ( unsigned long bHRVEnabled );
	void Tick ( float DeltaTime );
	void BombExplode ( );
	void OnSuccessfulUse ( class AFoxPawn* InteractingPawn );
	bool CanInteractWith ( class AFoxPawn* InteractingPawn );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void ReplicatedEvent ( struct FName VarName );
};

UClass* AFoxGameObject_BombTarget::pClassPointer = NULL;

// Class FoxGame.FoxGameObject_ControlPoint
// 0x00AC (0x02E8 - 0x023C)
class AFoxGameObject_ControlPoint : public AFoxStation_Base
{
public:
	unsigned char                                      ControlPointType;                                 		// 0x023C (0x0001) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	struct FName                                       TeamColorParameterName;                           		// 0x0240 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       CaptureAmountParameterName;                       		// 0x0248 (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              ScorePerSecondWhenOwned;                          		// 0x0250 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              HackedCaptureTime;                                		// 0x0254 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              HackOverloadTime;                                 		// 0x0258 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              MultipleCaptureMultiplier;                        		// 0x025C (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	class UAnimNodeSequence*                           CaptureAnimNode;                                  		// 0x0260 (0x0004) [0x0000000000000000]              
	struct FName                                       CaptureAnimName;                                  		// 0x0264 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystem*                             CaptureParticleSystem;                            		// 0x026C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       CapturedParticleSystemColorParamName;             		// 0x0270 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystemComponent*                    CapturedPSComp;                                   		// 0x0278 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              CapturedPSFadeTime;                               		// 0x027C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       CaptureParticleSystemAttachSocketName;            		// 0x0280 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    StartCaptureEvent;                                		// 0x0288 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    CompleteCaptureEvent;                             		// 0x028C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    StopCaptureEvent;                                 		// 0x0290 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FPresentTeamInfo >                  CaptureInfo;                                      		// 0x0294 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CPOwner;                                          		// 0x02A0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CurrentCapturingTeam;                             		// 0x02A4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                PointHackedTeam;                                  		// 0x02A8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              CaptureTime;                                      		// 0x02AC (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              CaptureRatio;                                     		// 0x02B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CaptureRate;                                      		// 0x02B4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              CaptureMeshAnimRate;                              		// 0x02B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CaptureAnimTime;                                  		// 0x02BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HackOverloadTimeRemaining;                        		// 0x02C0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< class UMaterialInstanceConstant* >         CaptureMeshMICs;                                  		// 0x02C4 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FName                                       CurrentStateName;                                 		// 0x02D0 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AFoxPRI*                                     HackedPRI;                                        		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bHRVIsEnabled : 1;                                		// 0x02DC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bForceToCapturedState : 1;                        		// 0x02DC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bCaptureDisabled : 1;                             		// 0x02DC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bAwaitingTeamColor : 1;                           		// 0x02DC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	class AFoxPawn*                                    LastUsingPawn;                                    		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastCPOwner;                                      		// 0x02E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1495 ];

		return pClassPointer;
	};

	void OnFailedUse ( class AFoxPawn* InteractingPawn );
	void NotifyUseObjectInterval ( class AFoxPawn* Pawn );
	bool IsHackOverloadedFor ( class AFoxPC* ForPC, float* TimeRemaining );
	void CompletedMinigame ( class AFoxPawn* InteractingPawn, unsigned long bSuccess );
	void StartUsingServer ( class AFoxPawn* UsingPawn );
	void NotifyLocalPlayerTeamReceived ( );
	int GetCurrentCapturingTeam ( );
	unsigned char eventScriptGetTeamNum ( );
	int GetCPOwner ( );
	int GetSavedCPTeam ( );
	void GetSavedCPStatus ( );
	void UseSuccessfullDialog ( );
	void ToggleHRVEffects ( unsigned long bHRVEnabled );
	struct FLinearColor GetLerpedControlColor ( );
	void PawnLeavingUseVolume ( class APawn* LeavingPawn );
	void PawnEnteredUseVolume ( class APawn* EnteringPawn );
	bool IsPawnInRadius ( class APawn* P, int* bOnOwningTeam );
	void EndCaptureParticleSystemTimer ( );
	void UpdateCaptureParticleSystem ( float DT );
	void StartCaptureParticleSystem ( );
	int eventGetPointHackedTeam ( );
	struct FColor GetControlColorAlphaLerp ( float Alpha );
	struct FLinearColor GetControlColor ( );
	float GetCaptureRatio ( );
	void AddPointsToCapturingTeam ( int Amount );
	void CapturedTimer ( );
	bool AnyTeamsPresent ( TArray< int >* IndicesPresent );
	bool OnlyOneTeamPresent ( int* TeamPresent );
	void UpdateControlColor ( );
	void OwningStatusChanged ( int OldOwningTeamIndex, int NewOwningTeamIndex );
	void ChangeOwner ( int NewOwnerIndex );
	void Tick ( float DeltaTime );
	void UpdateCaptureEffects ( float DeltaTime );
	void UpdateControlPoint ( float DT );
	bool IsCapturing ( );
	bool eventIsContested ( );
	bool IsUncapturing ( );
	bool IsUncontrolled ( );
	bool IsCaptured ( );
	bool CanInteractWith ( class AFoxPawn* InteractingPawn );
	class AFoxTeamInfo* GetOwningTeam ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void ReplicatedEvent ( struct FName VarName );
};

UClass* AFoxGameObject_ControlPoint::pClassPointer = NULL;

// Class FoxGame.FoxGameObject_Generic
// 0x0008 (0x0244 - 0x023C)
class AFoxGameObject_Generic : public AFoxStation_Base
{
public:
	class UClass*                                      MiniGameClass;                                    		// 0x023C (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	class UDynamicLightEnvironmentComponent*           LightEnv;                                         		// 0x0240 (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1496 ];

		return pClassPointer;
	};

	void ToggleHRVEffects ( unsigned long bHRVEnabled );
	void StartUsingLocal ( class AFoxPawn* UsingPawn );
	void SpawnMiniGame ( class AFoxPawn* UsingPawn );
	void PostBeginPlay ( );
	void OnSuccessfulUse ( class AFoxPawn* InteractingPawn );
};

UClass* AFoxGameObject_Generic::pClassPointer = NULL;

// Class FoxGame.FoxGameObject_HillPoint
// 0x00B8 (0x02F4 - 0x023C)
class AFoxGameObject_HillPoint : public AFoxStation_Base
{
public:
	float                                              requiredTimeForCapture;                           		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      isHillActive : 1;                                 		// 0x0240 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bCapturable : 1;                                  		// 0x0240 (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned long                                      coolDownAnimTrigger : 1;                          		// 0x0240 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsGameEnd : 1;                                   		// 0x0240 (0x0004) [0x0000000000002020] [0x00000008] ( CPF_Net | CPF_Transient )
	unsigned long                                      bAwaitingTeamColor : 1;                           		// 0x0240 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bHRVIsEnabled : 1;                                		// 0x0240 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	struct FhillZoneInfo                               whoIsOnTheHillInfo[ 0x2 ];                        		// 0x0244 (0x0018) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FhillZoneInfo                               whoWasOnTheHillInfo[ 0x2 ];                       		// 0x025C (0x0018) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CurrentCapturingTeam;                             		// 0x0274 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              timeOnHill_team0;                                 		// 0x0278 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              timeOnHill_team1;                                 		// 0x027C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              captureCoolDown;                                  		// 0x0280 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CountMultiplier;                                  		// 0x0284 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UAnimNodeSequence*                           CaptureAnimNode;                                  		// 0x0288 (0x0004) [0x0000000000000000]              
	float                                              CaptureAnimTime;                                  		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    BeaconPSComp;                                     		// 0x0290 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    BeaconRingsPSComp;                                		// 0x0294 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULensFlareComponent*                         BlinkingAllyLFComp;                               		// 0x0298 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULensFlareComponent*                         BlinkingFoeLFComp;                                		// 0x029C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULensFlareComponent*                         AllyCaptLFComp;                                   		// 0x02A0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULensFlareComponent*                         FoeCaptLFComp;                                    		// 0x02A4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       CaptureParticleSystemAttachSocketName;            		// 0x02A8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       CurrentStateName;                                 		// 0x02B0 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FName                                       TeamColorParameterName;                           		// 0x02B8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       CaptureAmountParameterName;                       		// 0x02C0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       CapturedParticleSystemColorParamName;             		// 0x02C8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              CapturedPSFadeTime;                               		// 0x02D0 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    StartCaptureEvent;                                		// 0x02D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    CompleteCaptureEvent;                             		// 0x02D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    StopCaptureEvent;                                 		// 0x02DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              IconMinDrawScale;                                 		// 0x02E0 (0x0004) [0x0000000000000000]              
	float                                              IconMaxDrawScale;                                 		// 0x02E4 (0x0004) [0x0000000000000000]              
	float                                              DistForMinIconDrawScale;                          		// 0x02E8 (0x0004) [0x0000000000000000]              
	float                                              DistForMaxIconDrawScale;                          		// 0x02EC (0x0004) [0x0000000000000000]              
	float                                              MultipleCaptureMultiplier;                        		// 0x02F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1497 ];

		return pClassPointer;
	};

	void ReadyPoint ( );
	void UpdateState ( float DT );
	void NotifyUseObjectInterval ( class AFoxPawn* Pawn );
	void ToggleHRVEffects ( unsigned long bHRVEnabled );
	struct FLinearColor GetControlColor ( );
	void UpdateEffectStates ( );
	void AddPointsToCapturingTeam ( int Amount );
	void CapturingTimer ( );
	void AnimationTimer_EndCoolDown ( );
	void AnimationTimer_StartCoolDown ( );
	void AnimationTimer_InitiateCapturedCoolDown ( );
	void AnnounceCapture ( );
	bool IsPlayerOnControllingTeam ( );
	bool UpdateTeamHillTime ( float DT, int* TeamIndex );
	unsigned char eventScriptGetTeamNum ( );
	float GetTeamCaptureRatio ( int teamNumber );
	float GetCaptureRatio ( int* Team );
	int GetNumActiveCapturingPawnsForTeam ( int TeamIndex );
	int DominantTeamPawnDifference ( int* dominantTeam );
	class AFoxTeamInfo* GetWinningTeamByTime ( );
	class AFoxTeamInfo* GetControllingTeam ( );
	int GetCurrentCapturingTeam ( );
	void PawnLeavingUseVolume ( class APawn* LeavingPawn );
	void PawnEnteredUseVolume ( class APawn* EnteringPawn );
	bool IsPawnInRadius ( class APawn* P, int* bOnOwningTeam );
	void eventDestroyed ( );
	void Deactivate ( );
	class AFoxGameObject_HillPoint* Activate ( );
	void Tick ( float DeltaTime );
	bool CanInteractWith ( class AFoxPawn* InteractingPawn );
	void eventPostBeginPlay ( );
	void GetSavedTKOTHStatus ( );
	void ReplicatedEvent ( struct FName VarName );
};

UClass* AFoxGameObject_HillPoint::pClassPointer = NULL;

// Class FoxGame.FoxGameObject_WeaponDepot
// 0x0048 (0x0284 - 0x023C)
class AFoxGameObject_WeaponDepot : public AFoxStation_Base
{
public:
	TArray< class UMaterialInterface* >                DepotMaterialOverrides;                           		// 0x023C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMaterialInstanceConstant* >         WeaponDepotMICs;                                  		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       DepotOnOffMaterialParameterName;                  		// 0x0254 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystemComponent*                    UsedParticleSystemComponent;                      		// 0x025C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class AFoxPawn* >                          UsingPawns;                                       		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       CurrentStateName;                                 		// 0x026C (0x0008) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bLocallyActiveUsing : 1;                          		// 0x0274 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< struct FString >                           DepotItemNames;                                   		// 0x0278 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1498 ];

		return pClassPointer;
	};

	bool IsDepotAllowed ( );
	void ToggleHRVEffects ( unsigned long bHRVEnabled );
	bool IsLocalPawn ( class APawn* P );
	bool IsPawnUsingObject ( class AFoxPawn* Pawn );
	bool CanInteractWith ( class AFoxPawn* InteractingPawn );
	void RemovePawnFromUsingList ( class AFoxPawn* Pawn );
	void AddPawnToUsingList ( class AFoxPawn* Pawn );
	void PawnLeavingUseVolume ( class APawn* LeavingPawn );
	void StopUsingLocal ( class AFoxPawn* UsingPawn );
	void StopUsingServer ( class AFoxPawn* UsingPawn );
	void StartUsingLocal ( class AFoxPawn* UsingPawn );
	void StartUsingServer ( class AFoxPawn* UsingPawn );
	void DeActivateDepotLocally ( );
	void ActivateDepotLocally ( );
	void Ping ( );
	void TurnDepotOff ( );
	void TurnDepotOn ( );
	void PostBeginPlay ( );
	void ReplicatedEvent ( struct FName VarName );
};

UClass* AFoxGameObject_WeaponDepot::pClassPointer = NULL;

// Class FoxGame.FoxObjectiveMarker_Base
// 0x0004 (0x01E8 - 0x01E4)
class AFoxObjectiveMarker_Base : public AFoxGameObject
{
public:
	unsigned long                                      bActive : 1;                                      		// 0x01E4 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1499 ];

		return pClassPointer;
	};

	void NotifyObjectiveCompleted ( );
	void NotifyObjectiveAdded ( );
	void HideMarker ( class AFoxHUD* HUD );
	void ShowMarker ( class AFoxHUD* HUD );
	void CompleteObjective ( );
	void ActivateObjective ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventDestroyed ( );
};

UClass* AFoxObjectiveMarker_Base::pClassPointer = NULL;

// Class FoxGame.FoxObjectiveMarker
// 0x0040 (0x0228 - 0x01E8)
class AFoxObjectiveMarker : public AFoxObjectiveMarker_Base
{
public:
	struct FString                                     TitleLabel;                                       		// 0x01E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DescriptionLabel;                                 		// 0x01F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SectionName;                                      		// 0x0200 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     PackageName;                                      		// 0x020C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              DisplayTime;                                      		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DisplayIndex;                                     		// 0x021C (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                ExperienceReward;                                 		// 0x0220 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	unsigned long                                      bHiddenObjective : 1;                             		// 0x0224 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1500 ];

		return pClassPointer;
	};

	void NotifyObjectiveCompleted ( );
	void GetObjectiveInfo ( struct FString* Title, struct FString* Description );
	void ShowMarker ( class AFoxHUD* HUD );
};

UClass* AFoxObjectiveMarker::pClassPointer = NULL;

// Class FoxGame.FoxTeamObjectiveMarker
// 0x0010 (0x01F8 - 0x01E8)
class AFoxTeamObjectiveMarker : public AFoxObjectiveMarker_Base
{
public:
	int                                                FriendlyTeamIndex;                                		// 0x01E8 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	struct FString                                     Label;                                            		// 0x01EC (0x000C) [0x0000000000400021]              ( CPF_Edit | CPF_Net | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1501 ];

		return pClassPointer;
	};

	void SetNewFriendlyTeam ( int NewTeam );
};

UClass* AFoxTeamObjectiveMarker::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchCommon
// 0x0000 (0x00F4 - 0x00F4)
class UFoxGameSearchCommon : public UOnlineGameSearch
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1502 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSearchCommon::pClassPointer = NULL;

// Class FoxGame.FoxGameSettingsCommon
// 0x0054 (0x0108 - 0x00B4)
class UFoxGameSettingsCommon : public UOnlineGameSettings
{
public:
	unsigned long                                      bIsDirty : 1;                                     		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWasHostMigrated : 1;                             		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FString                                     GameType;                                         		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      Team1PlayerIDs;                                   		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      Team2PlayerIDs;                                   		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FUniqueNetId                                BackupHostID;                                     		// 0x00DC (0x0008) [0x0000000000000000]              
	unsigned char                                      DefaultMutatorSettings[ 0xB ];                    		// 0x00E4 (0x000B) [0x0000000000000002]              ( CPF_Const )
	int                                                TimeRemaining;                                    		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              Team1Score;                                       		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              Team2Score;                                       		// 0x00F8 (0x0004) [0x0000000000000000]              
	TArray< struct FSavedPRIInfo >                     SavedPRIs;                                        		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1503 ];

		return pClassPointer;
	};

	bool IsMutatorSettingEnabled ( unsigned char Mutator );
	bool GetMutatorSetting ( int* OutSetting );
	bool IsMutatorSettingEnabledByDefault ( unsigned char Mutator );
	int GetDefaultMutatorSetting ( );
	TArray< struct FPlaylistPairing > BuildPlaylistPairingsFromSettings ( );
	void BuildPlaylistSettingsFromProvider ( class UFoxDataProvider_Playlist* PlaylistProvider );
	void CopyProperties ( class UOnlineGameSettings* OtherSettings );
	bool ContainsNetID ( struct FUniqueNetId UniqueId );
	bool GetSavedPRI ( struct FUniqueNetId PlayerID, int* XPGained, int* Kills, int* Deaths, int* Score );
	void AddSavedPRI ( class AFoxPRI* PRI );
	bool SetPropertyFromStringByName ( struct FName PropertyName, struct FString* NewValue );
	bool IsGameOpen ( );
	bool eventIsPublicGame ( );
	bool GetMaxServerTickRate ( int* OutRate );
	float GetAdvertisedCPMultiplier ( );
	float GetAdvertisedGPMultiplier ( );
	float GetAdvertisedXPMultiplier ( );
	float GetXPMultipler ( );
	float GetGPMultipler ( );
	float GetCPMultipler ( );
	float eventGetGameVersionPropertyValue ( );
	struct FString eventGetAdminPasswordPropertyValue ( );
	struct FString eventGetGamePasswordPropertyValue ( );
	struct FString eventGetServerDescriptionPropertyValue ( );
	struct FString eventGetOwnerNamePropertyValue ( );
	struct FString eventGetGameTypePropertyValue ( );
	void eventSetPlaylistNamePropertyValue ( struct FString PlaylistName );
	struct FString eventGetPlaylistNamePropertyValue ( );
	struct FString eventGetMapNamePropertyValue ( );
	void SetGamePublic ( );
	void SetGamePrivate ( );
	void SetGameVersion ( float NewGameVersion );
	void SetGameStatus ( unsigned long bGameIsOpen );
	void SetAdminPassword ( struct FString NewAdminPassword );
	void SetGameModeIndex ( int NewIndex );
	int GetGameModeIndex ( );
	void SetMapIndex ( int NewIndex );
	int GetMapIndex ( );
	void SetMapContextByIndex ( int NewIndex );
	void SetMapContextFromMapName ( struct FString NewMapName );
	void SetMapName ( struct FString NewMapName );
	void UpdateFromURL ( class AGameInfo* Game, struct FString* URL );
	void BuildURL ( struct FString* OutURL );
	struct FString BlobToString ( struct FString* InBlob );
	bool StringToBlob ( struct FString* InString, struct FString* OutBlob );
	void ResetSavedSettings ( );
	void EraseAllSettings ( );
};

UClass* UFoxGameSettingsCommon::pClassPointer = NULL;

// Class FoxGame.FoxGameViewportClient
// 0x0008 (0x0134 - 0x012C)
class UFoxGameViewportClient : public UGameViewportClient
{
public:
	float                                              InputLockTimeOnGainFocus;                         		// 0x012C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              InputLockTimeRemaining;                           		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1504 ];

		return pClassPointer;
	};

	void NotifyGainFocus ( );
	void GameSessionEnded ( );
	void NotifyConnectionError ( unsigned char MessageType, struct FString Message, struct FString Title );
	void eventSetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title, unsigned long bIgnoreFutureNetworkMessages );
	void DrawTransition ( class UCanvas* Canvas );
};

UClass* UFoxGameViewportClient::pClassPointer = NULL;

// Class FoxGame.FoxGemInfo
// 0x0384 (0x03C0 - 0x003C)
class UFoxGemInfo : public UObject
{
public:
	struct FString                                     LocStringDataNode;                                		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRank;                                    		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           GemQualities;                                     		// 0x0054 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GemDescriptions[ 0x24 ];                          		// 0x0060 (0x01B0) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GemTags[ 0x24 ];                                  		// 0x0210 (0x01B0) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1505 ];

		return pClassPointer;
	};

	struct FString GetShortDesciption ( unsigned char GemType, int Quality );
	struct FString GetDescription ( unsigned char GemType, int GemQuality );
	struct FString GetFriendlyTag ( unsigned char GemType );
	struct FString eventGetGeneratedName ( struct FGemInfo Info );
	int eventCalculateValueOfGem ( struct FGemInfo Info );
	bool GetDisplayPropertiesForGem ( int UnlockID, int Duration, struct FString* NodeColor, struct FString* Durability );
	int GetValueFromGem ( unsigned char GemType, int GemQuality );
	int GetValueFromGemInfo ( struct FGemInfo Info );
	int GetValueFromGems ( unsigned char GemType, TArray< struct FGemSlot >* GemSlots );
	float GetMutiplierFromGem ( unsigned char GemType, int GemQuality );
	float GetMultiplierFromGemInfo ( struct FGemInfo Info );
	float GetMultiplierFromGems ( unsigned char GemType, TArray< struct FGemSlot >* GemSlots );
	int GetUnlockIDFromGemInfo ( struct FGemInfo Info );
	struct FGemInfo GetGemInfo ( int GemUnlockID, unsigned char PurchaseLength );
	int GetNumGemTypes ( );
};

UClass* UFoxGemInfo::pClassPointer = NULL;

// Class FoxGame.FoxGRI_BO
// 0x0010 (0x03D8 - 0x03C8)
class AFoxGRI_BO : public AFoxGRI
{
public:
	float                                              LastTimeSpotted;                                  		// 0x03C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastTimeSpottedLimit;                             		// 0x03CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bIsReadyToSpotEnemy : 1;                          		// 0x03D0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                BODifficulty;                                     		// 0x03D4 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1506 ];

		return pClassPointer;
	};

	bool CheckEndGame ( );
	bool DoesGameTrackExperience ( );
	bool ShouldBeSpotted ( );
	void eventTimer ( );
};

UClass* AFoxGRI_BO::pClassPointer = NULL;

// Class FoxGame.FoxGRI_DM
// 0x0004 (0x03CC - 0x03C8)
class AFoxGRI_DM : public AFoxGRI
{
public:
	int                                                LastCheckHighScore;                               		// 0x03C8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1507 ];

		return pClassPointer;
	};

	bool IsActorFriendlyToLocalPlayer ( class AActor* TeamActor );
	class AFoxPRI* GetVIPPRI ( int TeamIndex );
	class AFoxPRI* GetHighestThreatPRI ( int TeamIndex );
	int GetPlacementBonus ( int Placement );
	TArray< class AFoxPRI* > GetSortedPRIs ( unsigned char TeamIndex );
	void GameAction ( struct FName TeamName, struct FName ActionName );
	void eventTimer ( );
	float GetMatchScoreCloseness ( );
	float GetMatchScoreRatio ( );
	void CheckScore ( class AController* PC );
	void CheckDialog ( class AController* PC );
};

UClass* AFoxGRI_DM::pClassPointer = NULL;

// Class FoxGame.FoxGRI_TDM
// 0x0008 (0x03D4 - 0x03CC)
class AFoxGRI_TDM : public AFoxGRI_DM
{
public:
	float                                              LastGameStatusDialog;                             		// 0x03CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GameStatusDialogInterval;                         		// 0x03D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1508 ];

		return pClassPointer;
	};

	float GetTeamGPMultiplier ( class AFoxPRI* PRI );
	float GetTeamCPMultiplier ( class AFoxPRI* PRI );
	float GetTeamXPMultiplier ( class AFoxPRI* PRI );
	class AFoxPRI* GetVIPPRI ( int TeamIndex );
	class AFoxPRI* GetHighestThreatPRI ( int TeamIndex );
	int GetTeamPostGameExperience ( unsigned long bWon );
	bool GameStatusDialog ( );
	int GetScoreForTeam ( int TeamIndex );
	TArray< class AFoxPRI* > GetSortedPRIs ( unsigned char TeamIndex );
	void eventTimer ( );
	float GetMatchScoreCloseness ( );
	float GetMatchScoreRatio ( );
	void CheckLeadChange ( class AController* PC );
	void CheckScore ( class AController* PC );
};

UClass* AFoxGRI_TDM::pClassPointer = NULL;

// Class FoxGame.FoxGRI_CP
// 0x0000 (0x03D4 - 0x03D4)
class AFoxGRI_CP : public AFoxGRI_TDM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1509 ];

		return pClassPointer;
	};

	float GetIntervalForEvent ( unsigned char EventType );
	int GetScoreForEvent ( unsigned char EventType );
	void NotifyCapturePointChange ( int OldTeamIndex, int NewTeamIndex );
	int GetPRIThreatLevel ( class AFoxPRI* PRI );
	void StoreGameSpecificSettings ( );
	void GameAction ( struct FName CPLetter, struct FName ActionName );
	void CheckScore ( class AController* PC );
};

UClass* AFoxGRI_CP::pClassPointer = NULL;

// Class FoxGame.FoxGRI_CTDM
// 0x0000 (0x03D4 - 0x03D4)
class AFoxGRI_CTDM : public AFoxGRI_TDM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1510 ];

		return pClassPointer;
	};

	int GetScoreForTeam ( int TeamIndex );
	TArray< class AFoxPRI* > GetSortedPRIs ( unsigned char TeamIndex );
};

UClass* AFoxGRI_CTDM::pClassPointer = NULL;

// Class FoxGame.FoxGRI_CTF
// 0x0000 (0x03D4 - 0x03D4)
class AFoxGRI_CTF : public AFoxGRI_TDM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1511 ];

		return pClassPointer;
	};

	int GetPRIThreatLevel ( class AFoxPRI* PRI );
	int GetScoreForEvent ( unsigned char EventType );
	void CheckScore ( class AController* PC );
};

UClass* AFoxGRI_CTF::pClassPointer = NULL;

// Class FoxGame.FoxGRI_DET
// 0x0014 (0x03E8 - 0x03D4)
class AFoxGRI_DET : public AFoxGRI_CTF
{
public:
	unsigned long                                      bBombPlanted : 1;                                 		// 0x03D4 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	float                                              ExplodeTimer;                                     		// 0x03D8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     WinningTeam;                                      		// 0x03DC (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1512 ];

		return pClassPointer;
	};

	void CheckScore ( class AController* PC );
	void SetExplodeTimer ( float Time );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AFoxGRI_DET::pClassPointer = NULL;

// Class FoxGame.FoxGRI_KC
// 0x0000 (0x03D4 - 0x03D4)
class AFoxGRI_KC : public AFoxGRI_TDM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1513 ];

		return pClassPointer;
	};

	int GetScoreForEvent ( unsigned char EventType );
	int GetPRIThreatLevel ( class AFoxPRI* PRI );
};

UClass* AFoxGRI_KC::pClassPointer = NULL;

// Class FoxGame.FoxGRI_LTS
// 0x0014 (0x03E8 - 0x03D4)
class AFoxGRI_LTS : public AFoxGRI_TDM
{
public:
	struct FString                                     WinningTeamName;                                  		// 0x03D4 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	int                                                Team1RemainingPlayers;                            		// 0x03E0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                Team2RemainingPlayers;                            		// 0x03E4 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1514 ];

		return pClassPointer;
	};

	void CheckScore ( class AController* PC );
};

UClass* AFoxGRI_LTS::pClassPointer = NULL;

// Class FoxGame.FoxGRI_PL
// 0x0010 (0x03E4 - 0x03D4)
class AFoxGRI_PL : public AFoxGRI_TDM
{
public:
	int                                                ControlPointCount;                                		// 0x03D4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CurrentControlPointIndex;                         		// 0x03D8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              AttackingTeamProgress;                            		// 0x03DC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ProgressBarMoverDirection;                        		// 0x03E0 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1515 ];

		return pClassPointer;
	};

	void GameAction ( struct FName ObjName, struct FName ActionName );
	struct FString GetTeamDialogName ( int TeamIndex );
	int GetScoreForEvent ( unsigned char EventType );
	void CheckScore ( class AController* PC );
};

UClass* AFoxGRI_PL::pClassPointer = NULL;

// Class FoxGame.FoxGRI_TKOTH
// 0x0004 (0x03D8 - 0x03D4)
class AFoxGRI_TKOTH : public AFoxGRI_TDM
{
public:
	class AFoxGameObject_HillPoint*                    griCachedActiveHillPoint;                         		// 0x03D4 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1516 ];

		return pClassPointer;
	};

	float GetIntervalForEvent ( unsigned char EventType );
	int GetScoreForEvent ( unsigned char EventType );
	int GetPRIThreatLevel ( class AFoxPRI* PRI );
	void GameAction ( struct FName hillName, struct FName ActionName );
};

UClass* AFoxGRI_TKOTH::pClassPointer = NULL;

// Class FoxGame.FoxInventoryManager
// 0x001C (0x0200 - 0x01E4)
class AFoxInventoryManager : public AInventoryManager
{
public:
	unsigned char                                      WeaponActionSemaphore;                            		// 0x01E4 (0x0001) [0x0000000000000000]              
	unsigned char                                      SelectedInventoryIndex;                           		// 0x01E5 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class AFoxWeapon*                                  CurrWeapon;                                       		// 0x01E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedWeaponIndex;                                		// 0x01EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastWeaponIndex;                                  		// 0x01F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AInventory*                                  SelectedInventoryItem;                            		// 0x01F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                QuickSelectGearIndex;                             		// 0x01F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bHoldWithoutAmmoOverride : 1;                     		// 0x01FC (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1517 ];

		return pClassPointer;
	};

	bool DoAllWeaponsHaveInstigators ( );
	class AFoxWeapon* GetCurrWeapon ( );
	void AddCandyWeapon ( class AFoxWeapon* NewWeapon );
	void ReplacePrimaryWeapon ( class AFoxWeapon* NewWeapon );
	void ReplaceWeapon ( class AFoxWeapon* NewWeapon );
	void AddWeapon ( class AFoxWeapon* NewWeapon );
	void UnLockWeaponActionSemaphore ( );
	void LockWeaponActionSemaphore ( );
	void SetCurrWeapon ( );
	bool CanSelectWeapon ( class AFoxWeapon* W );
	void GetInfoForGearSlot ( int GearSlotIndex, int* NumDuplicates, struct FName* WeaponName );
	class AFoxWeapon* GetWeaponAtGearSlot ( int GearSlot );
	int GetWeaponIndexOfGearSlot ( int GearSlot );
	int GetDuplicateWeaponPlacementIndex ( class AFoxWeapon* W );
	int GetIndexFromWeapon ( class AWeapon* W );
	class AFoxWeapon* GetWeaponByClass ( class UClass* WeaponClass );
	class AFoxWeapon* GetWeaponFromIndex ( int Index );
	void ChangedWeapon ( class AWeapon* DesiredWeapon );
	void WeaponIsDown ( );
	void WeaponEquipped ( );
	void PuttingWeaponDown ( );
	void ReplicateCurrentWeaponToRemoteClients ( class AWeapon* CurrentWeapon );
	void SetCachedWeapon ( class AWeapon* DesiredWeapon );
	void ServerSetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void SetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void SelectWeaponReleaseByIndex ( int ReleasedWeaponIndex );
	class AFoxWeapon* GetTacticalWeapon ( int* NewIndex );
	void SelectTactical ( );
	void SelectBestValidWeapon ( );
	void SelectLastWeapon ( );
	void SelectWeaponByIndex ( int NewWeaponIndex, unsigned long bNotifyWeapon );
	void ActivateSelectedItem ( unsigned long bReleased );
	class AInventory* GetSelectedInventory ( );
	void SelectGearByIndex ( int GearIndex );
	void SetInventoryIndex ( int NewIndex );
	void ThrowCandyWeapon ( );
	void NextWeapon ( );
	void PrevWeapon ( );
	class AWeapon* GetNextWeapon ( class AWeapon* StartInv );
	class AWeapon* GetPreviousWeapon ( class AWeapon* StartInv );
	void AutoSwitchWeapon ( );
	void SwitchToBestWeapon ( unsigned long bForceADifferentWeapon );
	void RemoveFromInventory ( class AInventory* ItemToRemove );
	void ClearAllPendingFire ( class AWeapon* InWeapon );
	bool IsPendingFire ( class AWeapon* InWeapon, int InFiringMode );
	void ClearPendingFire ( class AWeapon* InWeapon, int InFiringMode );
	void SetPendingFire ( class AWeapon* InWeapon, int InFiringMode );
	int GetPendingFireLength ( class AWeapon* InWeapon );
	void eventSetCurrentWeaponNative ( class AWeapon* NewWeapon );
};

UClass* AFoxInventoryManager::pClassPointer = NULL;

// Class FoxGame.FoxInventoryMetaData
// 0x0000 (0x003C - 0x003C)
class UFoxInventoryMetaData : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1518 ];

		return pClassPointer;
	};

	int GetNumDaysFromPurchaseLength ( unsigned char PurchaseLength );
	bool IsExpired ( struct FInventoryMetaData* InItem );
	TArray< struct FInventoryMetaData > ParseFromXML ( struct FString InXMLData, int* InventoryCap );
	unsigned char GetPurchaseState ( struct FInventoryMetaData* InventoryItem );
};

UClass* UFoxInventoryMetaData::pClassPointer = NULL;

// Class FoxGame.FoxItemCacheBase
// 0x0044 (0x0080 - 0x003C)
class UFoxItemCacheBase : public UObject
{
public:
	unsigned long                                      bIsDirty : 1;                                     		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bInitialized : 1;                                 		// 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x0040 (0x0004) [0x0000000000000000]              
	class UOnlinePlayerInterface*                      PlayerInterface;                                  		// 0x0044 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0048 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineStoreInterface*                       StoreInterface;                                   		// 0x004C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0050 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineClanInterface*                        ClanInterface;                                    		// 0x0054 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0058 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineFriendInterface*                      FriendInterface;                                  		// 0x005C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x0060 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePartyInterface*                       PartyInterface;                                   		// 0x0064 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x0068 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UFoxDataStore_MenuItems*                     MenuItemsDataStore;                               		// 0x006C (0x0004) [0x0000000000000000]              
	class UFoxDataStore_Playlists*                     PlaylistsDataStore;                               		// 0x0070 (0x0004) [0x0000000000000000]              
	class UFoxDataStore_Unlockables*                   UnlockablesDataStore;                             		// 0x0074 (0x0004) [0x0000000000000000]              
	struct FUniqueNetId                                OwnerNetId;                                       		// 0x0078 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1519 ];

		return pClassPointer;
	};

	bool RefreshCache ( );
	bool IsOwner ( struct FUniqueNetId* NetId );
	bool IsDirty ( );
	bool Refresh ( );
	void Invalidate ( );
	void CleanupDelegates ( );
	void SetupDelegates ( );
	void Cleanup ( );
	void Initialize ( struct FUniqueNetId NetId );
};

UClass* UFoxItemCacheBase::pClassPointer = NULL;

// Class FoxGame.FoxCacheSocialBase
// 0x0000 (0x0080 - 0x0080)
class UFoxCacheSocialBase : public UFoxItemCacheBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1520 ];

		return pClassPointer;
	};

	struct FString ApplyOnlineColor ( struct FString InStatus );
	void BuildDisplayInfoFromFriend ( struct FOnlineFriend* FriendItem, struct FPlayerDisplayInfo* OutDisplayInfo );
	struct FString GetLastSeenStringFor ( struct FString* LastSeenTime, int* LastSeenDays, int* LastSeenHours, int* LastSeenMinutes );
};

UClass* UFoxCacheSocialBase::pClassPointer = NULL;

// Class FoxGame.FoxCacheParty
// 0x0038 (0x00B8 - 0x0080)
class UFoxCacheParty : public UFoxCacheSocialBase
{
public:
	struct FUniqueNetId                                PartyLeaderID;                                    		// 0x0080 (0x0008) [0x0000000000000000]              
	TArray< struct FOnlineFriend >                     PartyMembers;                                     		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPartyDisplayInfo >                 DisplayedPartyList;                               		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PendingPartyInviterName;                          		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPartyChanged__Delegate;                       		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1521 ];

		return pClassPointer;
	};

	void PushSocialNotificationToLocalPlayer ( unsigned char EventType, int InstigatorMemberIndex );
	int GetMemberIndexFromID ( struct FUniqueNetId UniqueId );
	bool AreWeInAParty ( );
	bool DoWeHavePartyInvitePending ( struct FString* InviterName );
	bool AreWeLeader ( );
	int GetPartySize ( );
	TArray< struct FPartyDisplayInfo > GetPartyList ( );
	bool BuildPartyMember ( struct FOnlineFriend* FriendItem, struct FPartyDisplayInfo* NewFriend );
	void OnPartyInviteRespond ( unsigned long bSuccessful, unsigned char ResponseCode );
	void OnPartyInviteReceived ( struct FString InviterName );
	void OnPartyDisbanded ( );
	void OnPartyMemberUpdated ( TArray< struct FOnlineFriend > UpdatedMembers );
	void OnPartyMemberAdded ( TArray< struct FOnlineFriend > AddedMembers );
	void OnPartyMemberRemoved ( struct FUniqueNetId Remover, struct FUniqueNetId RemovedPlayer );
	void CleanupDelegates ( );
	void SetupDelegates ( );
	void Initialize ( struct FUniqueNetId NetId );
	void OnPartyChanged ( );
};

UClass* UFoxCacheParty::pClassPointer = NULL;

// Class FoxGame.FoxItemCacheClan
// 0x0064 (0x00E4 - 0x0080)
class UFoxItemCacheClan : public UFoxCacheSocialBase
{
public:
	struct FClanInfo                                   CachedClanInfo;                                   		// 0x0080 (0x0048) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIsRefreshing : 1;                                		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FScriptDelegate                             __PostRefresh__Delegate;                          		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __PostMemberUpdate__Delegate;                     		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1522 ];

		return pClassPointer;
	};

	void OnClanGameInviteExpired ( struct FUniqueNetId InviterId );
	void OnClanGameInviteReceived ( struct FUniqueNetId InviterId );
	void eventMarkUpClanMember ( struct FClanMemberDisplayInfo* ClanMember );
	struct FClanMemberDisplayInfo ParseUpdatedClanMember ( struct FString MemberInfo );
	void UpdateClanMember ( unsigned char UpdateType, struct FString MemberInfo );
	void ClearPostRefreshDelegate ( );
	void SetPostUpdateMemberDelegate ( struct FScriptDelegate InDel );
	void SetPostRefreshDelegate ( struct FScriptDelegate InDel );
	void ParseClanInfo ( struct FString ClanInfoString );
	void DetermineClanPermissions ( struct FString ToFind );
	bool RefreshCache ( );
	struct FClanInfo GetClanCache ( );
	void Invalidate ( );
	void CleanupDelegates ( );
	void SetupDelegates ( );
	bool IsDirty ( );
	void Cleanup ( );
	void PostMemberUpdate ( unsigned char UpdateType, struct FClanMemberDisplayInfo OldInfo, struct FClanMemberDisplayInfo NewInfo );
	void PostRefresh ( class UFoxItemCacheClan* ClanCache );
};

UClass* UFoxItemCacheClan::pClassPointer = NULL;

// Class FoxGame.FoxItemCacheFriends
// 0x0024 (0x00A4 - 0x0080)
class UFoxItemCacheFriends : public UFoxCacheSocialBase
{
public:
	TArray< struct FOnlineFriend >                     OnlineFriends;                                    		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FFriendDisplayInfo >                DisplayedFriendList;                              		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPlayerNameAndID >                  IgnoreList;                                       		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1523 ];

		return pClassPointer;
	};

	void ParseFriendsList ( );
	bool ParseFriendItem ( struct FOnlineFriend* FriendItem, struct FFriendDisplayInfo* NewFriend );
	TArray< struct FPlayerNameAndID > GetIgnoreList ( );
	TArray< struct FFriendDisplayInfo > GetDisplayedFriendInfo ( );
	void OnFriendsListReadComplete ( unsigned long bSuccessful );
	bool ReadFriends ( );
	bool RefreshCache ( );
	void CleanupDelegates ( );
	void SetupDelegates ( );
	bool IsDirty ( );
};

UClass* UFoxItemCacheFriends::pClassPointer = NULL;

// Class FoxGame.FoxItemCacheInventory
// 0x0024 (0x00A4 - 0x0080)
class UFoxItemCacheInventory : public UFoxItemCacheBase
{
public:
	int                                                DefaultInventoryItemCap;                          		// 0x0080 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	TArray< struct FInventoryMetaData >                CachedInventoryItems;                             		// 0x0084 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FInventoryMetaData >                UpdatedInventoryItems;                            		// 0x0090 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CachedInventoryItemCap;                           		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsRefreshing : 1;                                		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNeedsMerge : 1;                                  		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1524 ];

		return pClassPointer;
	};

	bool GetDataForItemID ( int ItemId, struct FInventoryMetaData* OutData );
	TArray< int > GetExpiredItems ( );
	void PurgeUpdatedItems ( );
	void MergeUpdatedItems ( unsigned long bPurge );
	bool HasExpiredItems ( TArray< struct FInventoryMetaData >* OutItems );
	bool HasUpdatedItems ( struct FString InstanceId, unsigned long bFilterRemoved, unsigned long bGeneratedByReferenceId, TArray< struct FInventoryMetaData >* OutItems );
	void AddUpdateItems ( struct FUniqueNetId NetId, struct FString ReadData, int* ItemCap );
	void InventoryUpdated ( struct FUniqueNetId NetId, struct FString ReadData );
	void ReadInventoryComplete ( struct FUniqueNetId NetId, unsigned long bResult, struct FString InventoryMeta );
	bool ReadInventory ( );
	bool RefreshCache ( );
	bool GetCachedItemCap ( int* InventoryCap );
	bool GetCachedItemCount ( int* InventoryCount );
	bool GetCachedItems ( int UnlockID, unsigned char PurchaseState, TArray< unsigned char > IncludedUnlockTypes, TArray< struct FInventoryMetaData >* InventoryItems );
	bool GetCachedItemWithBestPurchaseState ( int UnlockID, int StartIndex, struct FInventoryMetaData* InventoryItem, unsigned char* BestPurchaseState );
	bool eventGetCachedItemByGuid ( struct FString InstanceId, struct FInventoryMetaData* InventoryItem, unsigned char* PurchaseState );
	void CleanupDelegates ( );
	void SetupDelegates ( );
	void Cleanup ( );
	void Initialize ( struct FUniqueNetId NetId );
};

UClass* UFoxItemCacheInventory::pClassPointer = NULL;

// Class FoxGame.FoxItemCacheMail
// 0x001C (0x009C - 0x0080)
class UFoxItemCacheMail : public UFoxItemCacheBase
{
public:
	TArray< struct FMailMetaData >                     CachedItems;                                      		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMailMetaData >                     CachedNewsItems;                                  		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIsRefreshing : 1;                                		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1525 ];

		return pClassPointer;
	};

	void OnMailNotification ( struct FString MailData );
	void QueryMailComplete ( unsigned char LocalUserNum, struct FString MailData );
	void AppendMailItems ( struct FString MailMetaData );
	TArray< struct FMailMetaData > GetNews ( struct FDateTime LastReadTime );
	TArray< struct FMailMetaData > GetMail ( );
	void LocalMailDestroyed ( struct FString MailGuid );
	void LocalMailOpened ( struct FString MailGuid );
	void LocalMarkMailRead ( struct FString MailGuid );
	bool HasNewMail ( );
	bool HasMail ( );
	int GetNumMailItems ( );
	bool ReadMail ( );
	bool RefreshCache ( );
	void CleanupDelegates ( );
	void SetupDelegates ( );
	void Cleanup ( );
};

UClass* UFoxItemCacheMail::pClassPointer = NULL;

// Class FoxGame.FoxItemCacheStore
// 0x0044 (0x00C4 - 0x0080)
class UFoxItemCacheStore : public UFoxItemCacheBase
{
public:
	int                                                NewItemTimeDays;                                  		// 0x0080 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FDateTime                                   DefaultTimePadding;                               		// 0x0084 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	TArray< struct FStoreTagMetaData >                 CachedStoreTags;                                  		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FStoreOfferMetaData >               CachedStoreOffers;                                		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FStoreMetaData >                    CachedStoreItems;                                 		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FDateTime                                   NextRefreshTime;                                  		// 0x00B4 (0x000C) [0x0000000000000000]              
	unsigned long                                      bIsRefreshing : 1;                                		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1526 ];

		return pClassPointer;
	};

	void ReadStoreComplete ( struct FString StoreMeta );
	bool ReadStore ( struct FString Filter );
	bool RefreshCache ( );
	int CheckStorePrice ( unsigned char PurchaseLength, unsigned char CurrencyToUse, TArray< struct FString >* StoreItemIDs, TArray< struct FString >* InvalidItems );
	void ApplyRelevantOffers ( struct FStoreMetaData* StoreItem );
	bool GetCachedItems ( TArray< struct FString > ExclusiveTags, TArray< struct FString > InclusiveTags, TArray< unsigned char > ExcludedUnlockTypes, unsigned long bIgnoreHidden, TArray< struct FStoreMetaData >* FilteredStoreItems );
	bool GetCachedItemsByUnlockType ( unsigned char UnlockType, TArray< struct FStoreMetaData >* StoreItems );
	bool GetCachedItemByUnlockID ( int UnlockID, struct FStoreMetaData* StoreItem );
	bool GetCachedItemByGuid ( struct FString ItemGuid, struct FStoreMetaData* StoreItem );
	bool IsRenewableByUnlockID ( int UnlockID, struct FStoreMetaData* StoreItem );
	bool IsPurchasableByGuid ( struct FString ItemGuid, struct FStoreMetaData* StoreItem );
	bool IsPurchaseableByUnlockID ( int UnlockID, struct FStoreMetaData* StoreItem );
	bool HasExpiredOffers ( struct FString ItemGuid, struct FDateTime* RelativeTime );
	bool IsOfferActive ( struct FStoreOfferMetaData* OfferItem, struct FDateTime* RelativeTime );
	bool HasOfferEnded ( struct FStoreOfferMetaData* OfferItem, struct FDateTime* RelativeTime );
	bool HasOfferStarted ( struct FStoreOfferMetaData* OfferItem, struct FDateTime* RelativeTime );
	bool GetCachedOffers ( TArray< struct FString > OfferTags, struct FString StoreGuid, unsigned long bEnforceTime, TArray< struct FStoreOfferMetaData >* StoreOffers );
	bool GetCachedItemTags ( TArray< struct FStoreTagMetaData >* StoreTags );
	void CleanupDelegates ( );
	void SetupDelegates ( );
	void Cleanup ( );
};

UClass* UFoxItemCacheStore::pClassPointer = NULL;

// Class FoxGame.FoxLadderVolume
// 0x000C (0x0274 - 0x0268)
class AFoxLadderVolume : public ALadderVolume
{
public:
	struct FVector                                     LadderTop;                                        		// 0x0268 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1527 ];

		return pClassPointer;
	};

	void eventPawnLeavingVolume ( class APawn* P );
	void eventPawnEnteredVolume ( class APawn* P );
	void FindWallandLookDir ( );
	void eventPostBeginPlay ( );
};

UClass* AFoxLadderVolume::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardWriteBase
// 0x0000 (0x009C - 0x009C)
class UFoxLeaderboardWriteBase : public UOnlineStatsWrite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1528 ];

		return pClassPointer;
	};

	void PrintDebugInformation ( class UOnlineSubsystem* OnlineSubsystem );
	bool GetPropertyIdFromStatType ( struct FName StatName, int* StatId, unsigned char* StatType );
	bool SetFloatStatFromMapping ( struct FName StatName, float StatValue );
	bool SetIntStatFromMapping ( struct FName StatName, int StatValue );
	void CopyAllStats ( class AFoxPRI* PRI );
};

UClass* UFoxLeaderboardWriteBase::pClassPointer = NULL;

// Class FoxGame.FoxLensFlare_Explosion
// 0x0028 (0x01F8 - 0x01D0)
class AFoxLensFlare_Explosion : public ALensFlareSource
{
public:
	struct FName                                       OpacityParamName;                                 		// 0x01D0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              Stage1ValueStart;                                 		// 0x01D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Stage1ValueEnd;                                   		// 0x01DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Stage2ValueEnd;                                   		// 0x01E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Stage1TimeEnd;                                    		// 0x01E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Stage2TimeEnd;                                    		// 0x01E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      CurrentState;                                     		// 0x01EC (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              StateElapsedTime;                                 		// 0x01F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   LensFlareMIC;                                     		// 0x01F4 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1529 ];

		return pClassPointer;
	};

	void ApplyMaterials ( );
	void PostBeginPlay ( );
};

UClass* AFoxLensFlare_Explosion::pClassPointer = NULL;

// Class FoxGame.FoxMailMetaData
// 0x0000 (0x003C - 0x003C)
class UFoxMailMetaData : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1530 ];

		return pClassPointer;
	};

	TArray< struct FMailMetaData > ParseFromXML ( struct FString InXMLData );
};

UClass* UFoxMailMetaData::pClassPointer = NULL;

// Class FoxGame.FoxMovieStaticMeshActor
// 0x0010 (0x0214 - 0x0204)
class AFoxMovieStaticMeshActor : public ADynamicSMActor
{
public:
	class UTextureMovie*                               PlayingMovie;                                     		// 0x0204 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FName                                       TextureParamName;                                 		// 0x0208 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureParamMaterialIndex;                        		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1531 ];

		return pClassPointer;
	};

};

UClass* AFoxMovieStaticMeshActor::pClassPointer = NULL;

// Class FoxGame.FoxObjectPool
// 0x0278 (0x0440 - 0x01C8)
class AFoxObjectPool : public AActor
{
public:
	struct FEmitterCacheType                           EmitterCache;                                     		// 0x01C8 (0x0198) [0x0000000000000001]              ( CPF_Edit )
	struct FKActorCacheType                            KActorCache;                                      		// 0x0360 (0x0054) [0x0000000000000000]              
	struct FTracerCacheType                            TracerCache;                                      		// 0x03B4 (0x0054) [0x0000000000000000]              
	struct FDecalPool                                  DecalPool_Bullet;                                 		// 0x0408 (0x001C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct FTeamBeaconCacheType                        TeamBeaconCache;                                  		// 0x0424 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1532 ];

		return pClassPointer;
	};

	void CreateTeamBeacon ( int BeaconIndex );
	class AFoxTeamBeacon* GetTeamBeacon ( struct FVector NewLocation, struct FRotator NewRotation );
	void CleanupDecals ( );
	class UFoxDecalComponent* GetDecal_Worker ( int* CurrIdx, struct FDecalPool* TheDecalPool, TArray< struct FDecalDatum >* DecalList, struct FVector* SpawnLocation );
	class UFoxDecalComponent* GetDecal_Bullet ( struct FVector* SpawnLocation );
	void CreateDecals ( );
	void CreateTracer ( int EffectIndex );
	class AFoxProjectile_Tracer* GetTracer ( struct FVector SpawnLocation, struct FRotator SpawnRotation, class UClass* TracerClass );
	class AKActorSpawnable* GetKActorSpawnable ( struct FVector SpawnLocation, struct FRotator SpawnRotation, float Lifetime );
	void CreateKActor ( int KActorIndex, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	void CreateEmitter ( int EffectIndex, class UParticleSystem* PSTemplate );
	class AEmitterSpawnable* GetEmitter ( class UParticleSystem* PSTemplate, struct FVector NewLocation, struct FRotator NewRotation );
	void Destroyed ( );
	void CreatePools ( );
	void eventPreBeginPlay ( );
};

UClass* AFoxObjectPool::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteButtonClick
// 0x0000 (0x00A4 - 0x00A4)
class UFoxOnlineStatsWriteButtonClick : public UZeOnlineStatsWrite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1533 ];

		return pClassPointer;
	};

	void SetConfig ( struct FString ButtonID );
};

UClass* UFoxOnlineStatsWriteButtonClick::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteDepot
// 0x0000 (0x00A4 - 0x00A4)
class UFoxOnlineStatsWriteDepot : public UZeOnlineStatsWrite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1534 ];

		return pClassPointer;
	};

	void PurchasedItemAtIndex ( int SlotIdx, int cpSpent );
	void StartedUsing ( );
	void SetConfig ( int slotone, int slottwo, int slotthree, int slotfour, int slotfive );
};

UClass* UFoxOnlineStatsWriteDepot::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteFatalityBase
// 0x0000 (0x00A4 - 0x00A4)
class UFoxOnlineStatsWriteFatalityBase : public UZeOnlineStatsWrite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1535 ];

		return pClassPointer;
	};

	void AddCondition ( unsigned char DeathState );
	void AddDamageType ( struct FName DamageType );
	void SetFatality ( unsigned long bWasKilled, struct FQWord OtherPlayer, float ToD, struct FVector PlayerLocation, int WeaponID );
};

UClass* UFoxOnlineStatsWriteFatalityBase::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteGameTypeBase
// 0x000C (0x00B0 - 0x00A4)
class UFoxOnlineStatsWriteGameTypeBase : public UZeOnlineStatsWrite
{
public:
	struct FString                                     GameTypeName;                                     		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1536 ];

		return pClassPointer;
	};

	void SetDeathStreak ( int NewStreak );
	void SetKillStreak ( int NewStreak );
	void SetBeforeAfterRanks ( int RankBefore, int RankAfter );
	void InitGameType ( );
	void eventAddHardsuitDistanceTravelled ( int theDistance );
	void eventAddDistanceSprinted ( int theDistance );
	void eventAddDistanceTraveled ( int theDistance );
	void AddEarnedXP ( int theData );
	void AddEarnedGP ( int theData );
	void AddEarnedCP ( int theData );
	void SetMatchRank ( int thePlayerRank, int theTotalPlayers );
	void UpdateTimePlayed ( );
	void SetStopTime ( float StopTime );
	void SetStartTime ( float StartTime );
	void SetMapName ( struct FString theData );
};

UClass* UFoxOnlineStatsWriteGameTypeBase::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteGameTypeCTDM
// 0x0000 (0x00B0 - 0x00B0)
class UFoxOnlineStatsWriteGameTypeCTDM : public UFoxOnlineStatsWriteGameTypeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1537 ];

		return pClassPointer;
	};

};

UClass* UFoxOnlineStatsWriteGameTypeCTDM::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteGameTypeDM
// 0x0000 (0x00B0 - 0x00B0)
class UFoxOnlineStatsWriteGameTypeDM : public UFoxOnlineStatsWriteGameTypeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1538 ];

		return pClassPointer;
	};

};

UClass* UFoxOnlineStatsWriteGameTypeDM::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteGameTypeTeamBase
// 0x0000 (0x00B0 - 0x00B0)
class UFoxOnlineStatsWriteGameTypeTeamBase : public UFoxOnlineStatsWriteGameTypeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1539 ];

		return pClassPointer;
	};

	void SetTeamBoostGPGiven ( int theData );
	void SetTeamBoostCPGiven ( int theData );
	void SetTeamBoostXPGiven ( int theData );
	void SetTeamRank ( int theData );
};

UClass* UFoxOnlineStatsWriteGameTypeTeamBase::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteGameTypeCP
// 0x0004 (0x00B4 - 0x00B0)
class UFoxOnlineStatsWriteGameTypeCP : public UFoxOnlineStatsWriteGameTypeTeamBase
{
public:
	float                                              CaptureStartTime;                                 		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1540 ];

		return pClassPointer;
	};

	void IncrementDefenseKills ( );
	void IncrementAttackKills ( );
	void StopTimeCapturing ( float StopTime );
	void StartTimeCapturing ( float StartTime );
	void IncrementCaptures ( );
};

UClass* UFoxOnlineStatsWriteGameTypeCP::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteGameTypeCTF
// 0x0000 (0x00B0 - 0x00B0)
class UFoxOnlineStatsWriteGameTypeCTF : public UFoxOnlineStatsWriteGameTypeTeamBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1541 ];

		return pClassPointer;
	};

	void IncrementReturns ( );
	void IncrementInitialTouches ( );
	void IncrementCarrierKills ( );
	void IncrementGrabs ( );
	void IncrementCaptures ( );
};

UClass* UFoxOnlineStatsWriteGameTypeCTF::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteGameTypePL
// 0x0000 (0x00B0 - 0x00B0)
class UFoxOnlineStatsWriteGameTypePL : public UFoxOnlineStatsWriteGameTypeTeamBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1542 ];

		return pClassPointer;
	};

};

UClass* UFoxOnlineStatsWriteGameTypePL::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteGameTypeTDM
// 0x0000 (0x00B0 - 0x00B0)
class UFoxOnlineStatsWriteGameTypeTDM : public UFoxOnlineStatsWriteGameTypeTeamBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1543 ];

		return pClassPointer;
	};

};

UClass* UFoxOnlineStatsWriteGameTypeTDM::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteGameTypeTKOTH
// 0x0004 (0x00B4 - 0x00B0)
class UFoxOnlineStatsWriteGameTypeTKOTH : public UFoxOnlineStatsWriteGameTypeTeamBase
{
public:
	float                                              CaptureStartTime;                                 		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1544 ];

		return pClassPointer;
	};

	void IncrementDefenseKills ( );
	void IncrementAttackKills ( );
	void StopTimeCapturing ( float StopTime );
	void StartTimeCapturing ( float StartTime );
	void IncrementCaptures ( );
};

UClass* UFoxOnlineStatsWriteGameTypeTKOTH::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteGearConfig
// 0x0000 (0x00A4 - 0x00A4)
class UFoxOnlineStatsWriteGearConfig : public UZeOnlineStatsWrite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1545 ];

		return pClassPointer;
	};

	void SetConfig ( struct FLoadoutGearConfigIDSInfo ourGearInfo );
};

UClass* UFoxOnlineStatsWriteGearConfig::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteGearEquip
// 0x0000 (0x00A4 - 0x00A4)
class UFoxOnlineStatsWriteGearEquip : public UZeOnlineStatsWrite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1546 ];

		return pClassPointer;
	};

	void SetConfig ( struct FLoadoutGearConfigIDSInfo ourGearInfo, struct FString ChangedVar );
};

UClass* UFoxOnlineStatsWriteGearEquip::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteHardsuitUse
// 0x0000 (0x00A4 - 0x00A4)
class UFoxOnlineStatsWriteHardsuitUse : public UZeOnlineStatsWrite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1547 ];

		return pClassPointer;
	};

};

UClass* UFoxOnlineStatsWriteHardsuitUse::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteMatchIncomplete
// 0x0000 (0x00A4 - 0x00A4)
class UFoxOnlineStatsWriteMatchIncomplete : public UZeOnlineStatsWrite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1548 ];

		return pClassPointer;
	};

	void InitializeStats ( class UFoxOnlineStatsWriteGameTypeBase* MatchStats, struct FString Reason, float StopTime );
};

UClass* UFoxOnlineStatsWriteMatchIncomplete::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteRankedPlayer
// 0x0000 (0x00A4 - 0x00A4)
class UFoxOnlineStatsWriteRankedPlayer : public UZeOnlineStatsWrite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1549 ];

		return pClassPointer;
	};

	void Init ( struct FQWord UserId );
	void AddAssist ( );
	void AddDeath ( );
	void AddKill ( );
};

UClass* UFoxOnlineStatsWriteRankedPlayer::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteSkills
// 0x0000 (0x00A4 - 0x00A4)
class UFoxOnlineStatsWriteSkills : public UZeOnlineStatsWrite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1550 ];

		return pClassPointer;
	};

	void AddUnlockedSkill ( int theSkillID );
	void SetNumPointsSpent ( int SkillPoints );
	void SetTotalPoints ( int SkillPoints );
};

UClass* UFoxOnlineStatsWriteSkills::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteTurretUse
// 0x0000 (0x00A4 - 0x00A4)
class UFoxOnlineStatsWriteTurretUse : public UZeOnlineStatsWrite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1551 ];

		return pClassPointer;
	};

};

UClass* UFoxOnlineStatsWriteTurretUse::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteWeaponBase
// 0x0000 (0x00A4 - 0x00A4)
class UFoxOnlineStatsWriteWeaponBase : public UZeOnlineStatsWrite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1552 ];

		return pClassPointer;
	};

};

UClass* UFoxOnlineStatsWriteWeaponBase::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteWeaponConfig
// 0x0000 (0x00A4 - 0x00A4)
class UFoxOnlineStatsWriteWeaponConfig : public UZeOnlineStatsWrite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1553 ];

		return pClassPointer;
	};

	void SetConfig ( struct FWeaponConfigIDsInfo ourWpnInfo );
};

UClass* UFoxOnlineStatsWriteWeaponConfig::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteWeaponEquip
// 0x0000 (0x00A4 - 0x00A4)
class UFoxOnlineStatsWriteWeaponEquip : public UZeOnlineStatsWrite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1554 ];

		return pClassPointer;
	};

	void SetConfig ( struct FWeaponConfigIDsInfo ourWpnInfo, struct FString ChangedVariable, int PresetID );
};

UClass* UFoxOnlineStatsWriteWeaponEquip::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteWeaponUse
// 0x0008 (0x00AC - 0x00A4)
class UFoxOnlineStatsWriteWeaponUse : public UZeOnlineStatsWrite
{
public:
	int                                                CachedConfigID;                                   		// 0x00A4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bHasIncludedAssists : 1;                          		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHasIncludedAssistsInHardSuit : 1;                		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bHasIncludedRoundsFired : 1;                      		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bHasIncludedRoundsFiredADS : 1;                   		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bHasIncludedRoundsFiredHardSuit : 1;              		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bHasIncludedMeleeAttempts : 1;                    		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bHasIncludedRoundsHit : 1;                        		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bHasIncludedRoundsHitADS : 1;                     		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bHasIncludedRoundsHitHardSuit : 1;                		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bHasIncludedHeadShots : 1;                        		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bHasIncludedHeadShotsADS : 1;                     		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bHasIncludedHeadShotsHardSuit : 1;                		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bHasIncludedDamageDealt : 1;                      		// 0x00A8 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bHasIncludedDamageDealtADS : 1;                   		// 0x00A8 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bHasIncludedDamageDealtHardSuit : 1;              		// 0x00A8 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bHasIncludedDamageReceived : 1;                   		// 0x00A8 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bHasIncludedDamageReceivedInHardSuit : 1;         		// 0x00A8 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bHasIncludedDestroyedEquipment : 1;               		// 0x00A8 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bHasIncludedDestroyedTurrets : 1;                 		// 0x00A8 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bHasIncludedRepairedHardSuits : 1;                		// 0x00A8 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bHasIncludedRepairedTurrets : 1;                  		// 0x00A8 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bHasIncludedRepairedBarricades : 1;               		// 0x00A8 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bHasIncludedNumHealedPlayers : 1;                 		// 0x00A8 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bHasIncludedHealedAmount : 1;                     		// 0x00A8 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bHasIncludedRevivals : 1;                         		// 0x00A8 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bHasIncludedKills : 1;                            		// 0x00A8 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bHasIncludedKillsInHardSuit : 1;                  		// 0x00A8 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bIsInADS : 1;                                     		// 0x00A8 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bIsInHardSuit : 1;                                		// 0x00A8 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bIsInHRV : 1;                                     		// 0x00A8 (0x0004) [0x0000000000000000] [0x20000000] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1555 ];

		return pClassPointer;
	};

	void SetConfig ( int configID );
	void IncrementRepairAmount ( int theIncrementValue, unsigned char RepairType );
	void IncrementDestroyedTurret ( );
	void IncrementDestroyedEquipment ( );
	void IncrementMeleeAttempts ( );
	void IncrementHeadshots ( );
	void IncrementRoundsHit ( );
	void IncrementRoundsFired ( );
	void IncrementKills ( );
	void IncrementAssists ( );
	void IncrementRevivals ( );
	void IncrementHealAmount ( int theIncrementValue );
	void IncrementDamageReceived ( int TheDamage );
	void IncrementDamageDealt ( int TheDamage );
	void AddProperty ( int PropertyId );
	void AddTimedEvent ( unsigned char TheEvent, float TimeOfEvent );
};

UClass* UFoxOnlineStatsWriteWeaponUse::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteWinningPlayer
// 0x0000 (0x00A4 - 0x00A4)
class UFoxOnlineStatsWriteWinningPlayer : public UZeOnlineStatsWrite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1556 ];

		return pClassPointer;
	};

	void SetTeamName ( struct FString WinningTeamName );
};

UClass* UFoxOnlineStatsWriteWinningPlayer::pClassPointer = NULL;

// Class FoxGame.FoxPawn
// 0x0960 (0x0DC4 - 0x0464)
class AFoxPawn : public AGamePawn
{
public:
	unsigned long                                      bWasAIControlled : 1;                             		// 0x0464 (0x0004) [0x0000000000002021] [0x00000001] ( CPF_Edit | CPF_Net | CPF_Transient )
	unsigned long                                      bHideTactical : 1;                                		// 0x0464 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bIsMachine : 1;                                   		// 0x0464 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bHealIfNoPRI : 1;                                 		// 0x0464 (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned long                                      bWasInCover : 1;                                  		// 0x0464 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bInForceWalk : 1;                                 		// 0x0464 (0x0004) [0x0000000000002021] [0x00000020] ( CPF_Edit | CPF_Net | CPF_Transient )
	unsigned long                                      bInCombatWith : 1;                                		// 0x0464 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bRecentlyDamaged : 1;                             		// 0x0464 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bIsUpdatingAimOffset : 1;                         		// 0x0464 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bIsFlashBanged : 1;                               		// 0x0464 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bIsElectrified : 1;                               		// 0x0464 (0x0004) [0x0000000000002020] [0x00000400] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsStunned : 1;                                   		// 0x0464 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bIsInDigiField : 1;                               		// 0x0464 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bCarryingObject : 1;                              		// 0x0464 (0x0004) [0x0000000000000020] [0x00002000] ( CPF_Net )
	unsigned long                                      bHasGore : 1;                                     		// 0x0464 (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned long                                      bUseWeaponAnimOverrides : 1;                      		// 0x0464 (0x0004) [0x0000000000000003] [0x00008000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFootPlacementStepDown : 1;                       		// 0x0464 (0x0004) [0x0000000000002001] [0x00010000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bDoingCoverActionAnimTransition : 1;              		// 0x0464 (0x0004) [0x0000000000002002] [0x00020000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bPlayingTransitionAnimations : 1;                 		// 0x0464 (0x0004) [0x0000000000002002] [0x00040000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bIsLeftSide : 1;                                  		// 0x0464 (0x0004) [0x0000000000000002] [0x00080000] ( CPF_Const )
	unsigned long                                      bWantsToBeLeftSide : 1;                           		// 0x0464 (0x0004) [0x0000000000002020] [0x00100000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bDoingLeftSideTransition : 1;                     		// 0x0464 (0x0004) [0x0000000000002002] [0x00200000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bReachedPrecisePosition : 1;                      		// 0x0464 (0x0004) [0x0000000000002020] [0x00400000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bUseCameraRotation : 1;                           		// 0x0464 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bFPCameraLocIsSocket : 1;                         		// 0x0464 (0x0004) [0x0000000000000003] [0x01000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTPCameraLocIsSocket : 1;                         		// 0x0464 (0x0004) [0x0000000000000003] [0x02000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bWantsThirdPersonCamera : 1;                      		// 0x0464 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bCoverEnabled : 1;                                		// 0x0464 (0x0004) [0x0000000000000002] [0x08000000] ( CPF_Const )
	unsigned long                                      bCanBeLungeTarget : 1;                            		// 0x0464 (0x0004) [0x0000000000000002] [0x10000000] ( CPF_Const )
	unsigned long                                      bPlayDefaultBlindFireStance : 1;                  		// 0x0464 (0x0004) [0x0000000000002020] [0x20000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bCanDo360AimingInCover : 1;                       		// 0x0464 (0x0004) [0x0000000000000002] [0x40000000] ( CPF_Const )
	unsigned long                                      bDoing360Aiming : 1;                              		// 0x0464 (0x0004) [0x0000000000002002] [0x80000000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDebugAimAttractors : 1;                          		// 0x0468 (0x0004) [0x0000000000044001] [0x00000001] ( CPF_Edit | CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bSwitchingWeapons : 1;                            		// 0x0468 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bOverrideZoomKey : 1;                             		// 0x0468 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bPawnIsAWeapon : 1;                               		// 0x0468 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bAwaitingUseResponse : 1;                         		// 0x0468 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bHealthIsRecharging : 1;                          		// 0x0468 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bBelowHealthThreshold : 1;                        		// 0x0468 (0x0004) [0x0000000000002021] [0x00000040] ( CPF_Edit | CPF_Net | CPF_Transient )
	unsigned long                                      bInvincible : 1;                                  		// 0x0468 (0x0004) [0x0000000000000020] [0x00000080] ( CPF_Net )
	unsigned long                                      bTempInvincible : 1;                              		// 0x0468 (0x0004) [0x0000000000002020] [0x00000100] ( CPF_Net | CPF_Transient )
	unsigned long                                      bDeathEffectPSIsSocket : 1;                       		// 0x0468 (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bHRVMaterialsApplied : 1;                         		// 0x0468 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bPendingTightAimAfterHRV : 1;                     		// 0x0468 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bHRVActive : 1;                                   		// 0x0468 (0x0004) [0x0000000000002020] [0x00001000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bDLC : 1;                                         		// 0x0468 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bGearIsSetup : 1;                                 		// 0x0468 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      isWeaponTriggerPulled : 1;                        		// 0x0468 (0x0004) [0x0000000000000020] [0x00008000] ( CPF_Net )
	unsigned long                                      bStealthCamoOn : 1;                               		// 0x0468 (0x0004) [0x0000000000000020] [0x00010000] ( CPF_Net )
	unsigned long                                      bHasBeenBagged : 1;                               		// 0x0468 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned char                                      MyAIEntryType;                                    		// 0x046C (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      ReplicatedStamina;                                		// 0x046D (0x0001) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	unsigned char                                      LastCoverActionAnim;                              		// 0x046E (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      ReplicatedAimOffsetPitch;                         		// 0x046F (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      ReplicatedAimOffsetYaw;                           		// 0x0470 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      CurrentZoomState;                                 		// 0x0471 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      SpecialMove;                                      		// 0x0472 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      LastSpecialMove;                                  		// 0x0473 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ReplicatedSpecialMove;                            		// 0x0474 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      CoverType;                                        		// 0x0475 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      CoverAction;                                      		// 0x0476 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      CurrentSlotDirection;                             		// 0x0477 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CoverDirection;                                   		// 0x0478 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ReplicatedCoverDirection;                         		// 0x0479 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CurrentWeaponSwitchType;                          		// 0x047A (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      DownAnimIndex;                                    		// 0x047B (0x0001) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	unsigned char                                      DiedPhysics;                                      		// 0x047C (0x0001) [0x0000000000000000]              
	unsigned char                                      StealthState;                                     		// 0x047D (0x0001) [0x0000000000000000]              
	class USkeletalMeshComponent*                      FirstPersonMesh;                                  		// 0x0480 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      UpperBodyMesh;                                    		// 0x0484 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      HelmetMesh;                                       		// 0x0488 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      Gear_Tactical;                                    		// 0x048C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        Gear_R1;                                          		// 0x0490 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        Gear_R2;                                          		// 0x0494 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        Gear_L1;                                          		// 0x0498 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        Gear_L2;                                          		// 0x049C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        Badge;                                            		// 0x04A0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        Patch;                                            		// 0x04A4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    LeftFootPS;                                       		// 0x04A8 (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    RightFootPS;                                      		// 0x04AC (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FName                                       HelmetSocketName;                                 		// 0x04B0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       Gear_R1SocketName;                                		// 0x04B8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       Gear_R2SocketName;                                		// 0x04C0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       Gear_L1SocketName;                                		// 0x04C8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       Gear_L2SocketName;                                		// 0x04D0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       Gear_BadgeSocketName;                             		// 0x04D8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       Gear_TacticalSocketName;                          		// 0x04E0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       Gear_ButtPackSocketName;                          		// 0x04E8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       Gear_PatchSocketName;                             		// 0x04F0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              TacticalDamageReduction;                          		// 0x04F8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FProfileGearInfo                            GearInfo;                                         		// 0x04FC (0x0024) [0x0000000000000020]              ( CPF_Net )
	class USkeletalMeshComponent*                      FPSyringe;                                        		// 0x0520 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   EnemyHVTMaterialInstance;                         		// 0x0524 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UMaterialInstanceConstant*                   FriendlyHVTMaterialInstance;                      		// 0x0528 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UMaterialInstanceConstant*                   NuetralHVTMaterialInstance;                       		// 0x052C (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FLinearColor                                CachedHUDColor;                                   		// 0x0530 (0x0010) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class AFoxWeapon*                                  MyFoxWeapon;                                      		// 0x0540 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0544 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FGameBalanceRange                           GroundSpeedRange;                                 		// 0x0548 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FGameBalanceRange                           HealthRange;                                      		// 0x0554 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FGameBalanceRange                           HRVDurationRange;                                 		// 0x0560 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FGameBalanceRange                           HRVRechargeRateRange;                             		// 0x056C (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FGameBalanceRange                           StaminaRange;                                     		// 0x0578 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FGameBalanceRange                           ArmorStaminaRange;                                		// 0x0584 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FGameBalanceRange                           DamageReductionRange;                             		// 0x0590 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FGameBalanceRange                           WeaponSwitchRateRange;                            		// 0x059C (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	TArray< float >                                    DamageZoneReduction;                              		// 0x05A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MovementPct;                                      		// 0x05B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZoomMovementPct;                                  		// 0x05B8 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	TArray< float >                                    CoverMovementPct;                                 		// 0x05BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ForceWalkMovementPct;                             		// 0x05C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LastShotAtTime;                                   		// 0x05CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxAssistedSuicideTime;                           		// 0x05D0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastShotTime;                                     		// 0x05D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CombatTimeout;                                    		// 0x05D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UCameraShake*                                TakeDamageCameraShake;                            		// 0x05DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       LastBodyPartHit;                                  		// 0x05E0 (0x0008) [0x0000000000000020]              ( CPF_Net )
	float                                              CrouchedCylinderHeight;                           		// 0x05E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BlendedEyeHeight;                                 		// 0x05EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              EyeHeightBlendAccel;                              		// 0x05F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CrouchEyeHeightAdjust;                            		// 0x05F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     AimOffsetProfileNamePostfix;                      		// 0x05F8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	float                                              AimOffsetInterpSpeed;                             		// 0x0604 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AimOffsetMaxPawnDot;                              		// 0x0608 (0x0004) [0x0000000000000000]              
	float                                              TargetJumpHeight;                                 		// 0x060C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Stamina;                                          		// 0x0610 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StaminaMax;                                       		// 0x0614 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              StaminaRegenRatePerSecond;                        		// 0x0618 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumStaminaToJump;                             		// 0x061C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinimumStaminaToSprint;                           		// 0x0620 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              JumpStaminaUsage;                                 		// 0x0624 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SprintingStaminaUsagePerSecond;                   		// 0x0628 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SprintMultiplier;                                 		// 0x062C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UAkEvent*                                    FlashBangEventStart;                              		// 0x0630 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    FlashBangEventStop;                               		// 0x0634 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    StunEventStart;                                   		// 0x0638 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    StunEventStop;                                    		// 0x063C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    ElectrifiedEventStart;                            		// 0x0640 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    ElectrifiedEventStop;                             		// 0x0644 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxElectrifiedEffectLength;                       		// 0x0648 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ElectrifiedMovementMultiplier;                    		// 0x064C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ElectrifiedLookMultiplier;                        		// 0x0650 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              StunnedMovementMultiplier;                        		// 0x0654 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              StunnedLookMultiplier;                            		// 0x0658 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     StunMineEffectClassName;                          		// 0x065C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UClass*                                      StunMineEffectClass;                              		// 0x0668 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastResupplyTime;                                 		// 0x066C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DistanceTraveled;                                 		// 0x0670 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLFXAction                                  LFXAction_Spawn;                                  		// 0x0674 (0x002C) [0x0000000000000001]              ( CPF_Edit )
	struct FLFXAction                                  LFXAction_TakeDamage;                             		// 0x06A0 (0x002C) [0x0000000000000001]              ( CPF_Edit )
	struct FLFXAction                                  LFXAction_HRVEnabled;                             		// 0x06CC (0x002C) [0x0000000000000001]              ( CPF_Edit )
	struct FLFXAction                                  LFXAction_Died;                                   		// 0x06F8 (0x002C) [0x0000000000000001]              ( CPF_Edit )
	struct FLFXAction                                  LFXAction_Flash;                                  		// 0x0724 (0x002C) [0x0000000000000001]              ( CPF_Edit )
	struct FLFXAction                                  LFXAction_EMP;                                    		// 0x0750 (0x002C) [0x0000000000000001]              ( CPF_Edit )
	float                                              PawnRotationInterpolationTime;                    		// 0x077C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PawnRotationBlendTimeToGo;                        		// 0x0780 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          MFPAnimSets;                                      		// 0x0784 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          FFPAnimSets;                                      		// 0x0790 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          MTPAnimSets;                                      		// 0x079C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          FTPAnimSets;                                      		// 0x07A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UPhysicsAsset*                               MPhysAsset;                                       		// 0x07B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPhysicsAsset*                               FPhysAsset;                                       		// 0x07B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       FullBodyNodeName;                                 		// 0x07BC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       HeadSlotName;                                     		// 0x07C4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       UpperBodySlotName;                                		// 0x07CC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       LowerBodySlotName;                                		// 0x07D4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       LeftArmSlotName;                                  		// 0x07DC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       RightArmSlotName;                                 		// 0x07E4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAnimNodeSlot*                               FirstPersonCustomAnimNode;                        		// 0x07EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeSequence*                           FirstPersonIdleAnimNode;                          		// 0x07F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeSequence*                           FirstPersonSprintAnimNode;                        		// 0x07F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimNodeAimOffset* >                FPAimOffsetNodes;                                 		// 0x07F8 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	TArray< class UAnimNodeAimOffset* >                TPAimOffsetNodes;                                 		// 0x0804 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	TArray< class UAnimNodeSlot* >                     BodyStanceNodes;                                  		// 0x0810 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	class UParticleSystem*                             QuickStepPS;                                      		// 0x081C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       QuickStepLeftBoneName;                            		// 0x0820 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       QuickStepRightBoneName;                           		// 0x0828 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGameSkelControlLimb*                        FP_IKBoneCtrl_LeftHand;                           		// 0x0830 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UGameSkelControlLimb*                        FP_IKBoneCtrl_RightHand;                          		// 0x0834 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UGameSkelControlLimb*                        TP_IKBoneCtrl_LeftHand;                           		// 0x0838 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class USkelControlFootPlacement*                   TP_IKBoneCtrl_LeftFoot;                           		// 0x083C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class USkelControlFootPlacement*                   TP_IKBoneCtrl_RightFoot;                          		// 0x0840 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              FirstPersonMeshOffsetFromIK;                      		// 0x0844 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FVector                                     oldLocation;                                      		// 0x0848 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FVector                                     OldVelocity;                                      		// 0x0854 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              oldMeshVelocity_WS;                               		// 0x0860 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              OldCollisionHeight;                               		// 0x0864 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UGameSkelCtrl_Recoil* >              RecoilNodes;                                      		// 0x0868 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	class UFoxAnimNode_CoverDirection*                 CoverDirectionNode;                               		// 0x0874 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UFoxAnimNode_Movement*                       MovementNode;                                     		// 0x0878 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              LastCoverActionAnimUpdateTime;                    		// 0x087C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              PlayingTransitionAnimationsUpdateTime;            		// 0x0880 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     SpecialMoveLocation;                              		// 0x0884 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< class UClass* >                            SpecialMoveClasses;                               		// 0x0890 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UFoxSpecialMove* >                   SpecialMoves;                                     		// 0x089C (0x000C) [0x0000000004422001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	int                                                SpecialMoveStatus;                                		// 0x08A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxPawn*                                    MeleeLungeTarget;                                 		// 0x08AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MeleePRI_ID;                                      		// 0x08B0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AFoxPawn*                                    ReviveTarget;                                     		// 0x08B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxReviveDistance;                                		// 0x08B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              StartLadderExitDistance;                          		// 0x08BC (0x0004) [0x0000000000000000]              
	struct FName                                       FPCameraLocName;                                  		// 0x08C0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       TPCameraLocName;                                  		// 0x08C8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       FreeCamLivingBoneName;                            		// 0x08D0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       FreeCamDeadBoneName;                              		// 0x08D8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     FreeCamLivingBoneTranslation;                     		// 0x08E0 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     FreeCamDeadBoneTranslation;                       		// 0x08EC (0x000C) [0x0000000000000002]              ( CPF_Const )
	class ACoverLink*                                  CurrentLink;                                      		// 0x08F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentSlotIdx;                                   		// 0x08FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TargetSlotIdx;                                    		// 0x0900 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PreviousSlotIdx;                                  		// 0x0904 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LeftSlotIdx;                                      		// 0x0908 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RightSlotIdx;                                     		// 0x090C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentSlotPct;                                   		// 0x0910 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FCovPosInfo                                 AcquiredCoverInfo;                                		// 0x0914 (0x0034) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector2D                                   CoverProtectionFOV;                               		// 0x0948 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FCoverInfo                                  NearbyCoverSlot;                                  		// 0x0950 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	TArray< struct FAimAttractor >                     AimAttractors;                                    		// 0x0958 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              WeaponSwitchRate;                                 		// 0x0964 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              WeaponReloadRate;                                 		// 0x0968 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FFoxPawnModInfo                             CoalescedPawnMods;                                		// 0x096C (0x0034) [0x0000000000000000]              
	float                                              PercentageOfMovementFromGear;                     		// 0x09A0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              PercentageOfMovementFromWeapon;                   		// 0x09A4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	class UClass*                                      AttachClass_RightHand;                            		// 0x09A8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      AttachClass_LeftHand;                             		// 0x09AC (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      AttachClass_Primary;                              		// 0x09B0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      AttachClass_Secondary;                            		// 0x09B4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      AttachClass_Inventory1;                           		// 0x09B8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      AttachClass_Inventory2;                           		// 0x09BC (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      AttachClass_Melee;                                		// 0x09C0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< class AFoxWeaponAttachment* >              ThirdPersonWeaponAttachments;                     		// 0x09C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSAttachSlot >                      AttachSlots;                                      		// 0x09D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector2D                                   AimOffsetPct;                                     		// 0x09DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AFoxGameObject_Carry*                        CarriedObject;                                    		// 0x09E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxGameObject_Use*                          NearbyUseObject;                                  		// 0x09E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    HVTPSC;                                           		// 0x09EC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FCylinder                                   CrouchedFrictionCylinder;                         		// 0x09F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              RechargingHealthAmount;                           		// 0x09F8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              HealthRechargeDelay;                              		// 0x09FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HealthRechargePercentPerSecond;                   		// 0x0A00 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealthRechargeMaxPercent;                         		// 0x0A04 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealthThreshold;                                  		// 0x0A08 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxInjury;                                        		// 0x0A0C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FInjureMap >                        InjureCases;                                      		// 0x0A10 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FInjureMap >                        DeathCases;                                       		// 0x0A1C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                CurrentInjury;                                    		// 0x0A28 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FDamageZoneParentSet >              DamageZoneParents;                                		// 0x0A2C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              FallDistanceMin;                                  		// 0x0A38 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FallDamageExp;                                    		// 0x0A3C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FallDamageMax;                                    		// 0x0A40 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FallDamageDistanceMax;                            		// 0x0A44 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     FallDamageEffectClassName;                        		// 0x0A48 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UClass*                                      FallDamageEffectClass;                            		// 0x0A54 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FTraceHitInfo                               TakeDamageHitInfo;                                		// 0x0A58 (0x001C) [0x0000000000080000]              ( CPF_Component )
	struct FVector                                     TakeDamageStartLoc;                               		// 0x0A74 (0x000C) [0x0000000000000020]              ( CPF_Net )
	float                                              TakeDamageMomentumMultiplier;                     		// 0x0A80 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UPhysicalMaterial*                           ArmorMaterial;                                    		// 0x0A84 (0x0004) [0x0000000000000000]              
	class UPhysicalMaterial*                           FleshMaterial;                                    		// 0x0A88 (0x0004) [0x0000000000000000]              
	float                                              DamagedMovementPct;                               		// 0x0A8C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DamagedEffectTime;                                		// 0x0A90 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FDamageTaken >                      DamageInfo;                                       		// 0x0A94 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UParticleSystem*                             FlameEffectPS;                                    		// 0x0AA0 (0x0004) [0x0000000000000000]              
	struct FName                                       FlameEffectsPSBoneName;                           		// 0x0AA4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       FlameImpactBoneName;                              		// 0x0AAC (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystem*                             HeadshotPS;                                       		// 0x0AB4 (0x0004) [0x0000000000000000]              
	struct FName                                       HeadshotPSBoneName;                               		// 0x0AB8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                HeadShotDamage;                                   		// 0x0AC0 (0x0004) [0x0000000000000000]              
	float                                              LastDOTInterval;                                  		// 0x0AC4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DOTInterval;                                      		// 0x0AC8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FDOTInfo >                          MyDOTs;                                           		// 0x0ACC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AFoxPRI*                                     InjuredPRI;                                       		// 0x0AD8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InjuredPRI_ID;                                    		// 0x0ADC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              InvincibilityTime;                                		// 0x0AE0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< class UMaterialInstance* >                 TPDeathFXMaterials;                               		// 0x0AE4 (0x000C) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FName                                       DeathFXInterpParamName;                           		// 0x0AF0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	TArray< class UMaterialInstance* >                 FPSpawnFXStageOne;                                		// 0x0AF8 (0x000C) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstance* >                 FPSpawnFXStageTwo;                                		// 0x0B04 (0x000C) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstance* >                 TPSpawnFXStageOne;                                		// 0x0B10 (0x000C) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstance* >                 TPSpawnFXStageTwo;                                		// 0x0B1C (0x000C) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                SpawnEffectStage;                                 		// 0x0B28 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       SpawnEffectInterpParamName;                       		// 0x0B2C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      SpawnHudEffectClass;                              		// 0x0B34 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             DeathEffectPS;                                    		// 0x0B38 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             DeathEffectPSNames;                               		// 0x0B3C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UAkEvent* >                          DeathEffectAudio;                                 		// 0x0B48 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	float                                              DeathEffectMinTime;                               		// 0x0B54 (0x0004) [0x0000000000000000]              
	float                                              DeathEffectMaxTime;                               		// 0x0B58 (0x0004) [0x0000000000000000]              
	float                                              DeathEffectMaxImpulse;                            		// 0x0B5C (0x0004) [0x0000000000000000]              
	TArray< struct FTraceCacheData >                   TraceCacheArray;                                  		// 0x0B60 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	class UParticleSystemComponent*                    HardSuitPingPSC;                                  		// 0x0B6C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             HardSuitPingPS;                                   		// 0x0B70 (0x0004) [0x0000000000000000]              
	struct FName                                       HardSuitPingPSAttachName;                         		// 0x0B74 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    HardSuitPingAudio;                                		// 0x0B7C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              HRVRechargeRate;                                  		// 0x0B80 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HRVUseRate;                                       		// 0x0B84 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HRVCurrent;                                       		// 0x0B88 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              HRVLast;                                          		// 0x0B8C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HRVMax;                                           		// 0x0B90 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AFoxProjectile_HRVJammerBase*                NearHRVJammer;                                    		// 0x0B94 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     HRVJammerEffectClassName;                         		// 0x0B98 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      HRVJammerLensEffectClass;                         		// 0x0BA4 (0x0004) [0x0000000000000000]              
	class AFoxCameraLensEffect_HRVJammerBase*          HRVJammerLensEffect;                              		// 0x0BA8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     DialogPawnName;                                   		// 0x0BAC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     DialogFriendlyTeamName;                           		// 0x0BB8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     DialogEnemyTeamName;                              		// 0x0BC4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                UnderFireDialogTimeLimit;                         		// 0x0BD0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     ImageIconRef;                                     		// 0x0BD4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                UnlockID;                                         		// 0x0BE0 (0x0004) [0x0000000000000000]              
	struct FString                                     FriendlyName;                                     		// 0x0BE4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< class UMaterialInstanceConstant* >         FPCamoSwapMICs;                                   		// 0x0BF0 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         TPCamoSwapHelmetMeshMICs;                         		// 0x0BFC (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         TPCamoSwapUpperBodyMeshMICs;                      		// 0x0C08 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         TPCamoSwapLowerBodyMeshMICs;                      		// 0x0C14 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         TacticalMICs;                                     		// 0x0C20 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         PatchMeshMICs;                                    		// 0x0C2C (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         BadgeMeshMICs;                                    		// 0x0C38 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         R1MeshMICs;                                       		// 0x0C44 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         R2MeshMICs;                                       		// 0x0C50 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         L1MeshMICs;                                       		// 0x0C5C (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         L2MeshMICs;                                       		// 0x0C68 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FName                                       CamoTextureParmName;                              		// 0x0C74 (0x0008) [0x0000000000000000]              
	struct FName                                       CamoMetallicTextureParmName;                      		// 0x0C7C (0x0008) [0x0000000000000000]              
	struct FName                                       CamoColorOverlayParmName;                         		// 0x0C84 (0x0008) [0x0000000000000000]              
	struct FName                                       CamoTilesParamName;                               		// 0x0C8C (0x0008) [0x0000000000000000]              
	struct FName                                       CamoUseBaseColorParamName;                        		// 0x0C94 (0x0008) [0x0000000000000000]              
	struct FName                                       CamoBaseColorParamName;                           		// 0x0C9C (0x0008) [0x0000000000000000]              
	struct FName                                       EmissiveParamName;                                		// 0x0CA4 (0x0008) [0x0000000000000000]              
	struct FName                                       PatchTextureParamName;                            		// 0x0CAC (0x0008) [0x0000000000000000]              
	struct FName                                       PatchColorOverrideParamName;                      		// 0x0CB4 (0x0008) [0x0000000000000000]              
	struct FName                                       PatchIconColorParamName;                          		// 0x0CBC (0x0008) [0x0000000000000000]              
	struct FName                                       PatchShapeColorParamName;                         		// 0x0CC4 (0x0008) [0x0000000000000000]              
	struct FName                                       GreyParamName;                                    		// 0x0CCC (0x0008) [0x0000000000000002]              ( CPF_Const )
	TArray< class UMaterialInstanceConstant* >         FPArmTranslucentMaterials;                        		// 0x0CD4 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         FPArmTransparentMaterials;                        		// 0x0CE0 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         GearTranslucentMaterials;                         		// 0x0CEC (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         GearTransparentMaterials;                         		// 0x0CF8 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UMaterialInstanceConstant*                   PackTranslucentMaterial;                          		// 0x0D04 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UMaterialInstanceConstant*                   PackTransparentMaterial;                          		// 0x0D08 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         BadgeTranslucentMICs;                             		// 0x0D0C (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         BadgeTransparentMICs;                             		// 0x0D18 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UMaterialInstanceConstant*                   PatchTranslucentMIC;                              		// 0x0D24 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UMaterialInstanceConstant*                   PatchTransparentMIC;                              		// 0x0D28 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         TPHelmetTranslucentMICs;                          		// 0x0D2C (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         TPUpperBodyTranslucentMICs;                       		// 0x0D38 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         TPLowerBodyTranslucentMICs;                       		// 0x0D44 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         TPHelmetTransparentMICs;                          		// 0x0D50 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         TPUpperBodyTransparentMICs;                       		// 0x0D5C (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         TPLowerBodyTransparentMICs;                       		// 0x0D68 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FName                                       PhaseInterpParamName;                             		// 0x0D74 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ScanlineIntensityParamName;                       		// 0x0D7C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       StealthInterpParamName;                           		// 0x0D84 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TranslucentInterpTime;                            		// 0x0D8C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TranslucentPhaseInterpRampUpStartTime;            		// 0x0D90 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TranslucentPhaseInterpRampDownStartTime;          		// 0x0D94 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TransparentInterpTime;                            		// 0x0D98 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CurrentStealthStateTime;                          		// 0x0D9C (0x0004) [0x0000000000000000]              
	float                                              PhaseInterpStartVal;                              		// 0x0DA0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PhaseInterpEndVal;                                		// 0x0DA4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ScanlineInterpDownVal;                            		// 0x0DA8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ScanlineInterpUpVal;                              		// 0x0DAC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StealthInterpStartVal;                            		// 0x0DB0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StealthInterpEndVal;                              		// 0x0DB4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FDamageProfile >                    DamageProfiles;                                   		// 0x0DB8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1557 ];

		return pClassPointer;
	};

	class USkeletalMeshComponent* eventGetMeshForBoneName ( struct FName BoneName );
	void SetDyingPhysics ( );
	void SetMeleeTarget ( int NewMeleePRI_ID );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void ChangeInventoryOnlyRelevantToOwner ( unsigned long bOnlyRelevant );
	void ClampPawnModInfo ( float Lower, float upper, struct FFoxPawnModInfo* ModInfo );
	void AddToPawnModInfo ( struct FFoxPawnModInfo* ModInfo, struct FFoxPawnModInfo* AddedMod );
	void AddWeaponAttributesToPawn ( int WeaponMovementSpeed );
	void SetPawnAttributes ( );
	void CalculatePawnMods ( );
	class UMaterialInstanceConstant* GetHRVMaterial ( );
	bool IsFriendlyToLocalPlayer ( );
	bool IsEnemySpotted ( );
	void ServerPawnUseDialog ( unsigned char DialogEventType, unsigned char InstigatorTeamIndex );
	void BroadcastPawnDialog ( struct FString ActionName, unsigned char InInstigator, struct FString ItemType );
	void LocalPawnDialog ( struct FString ActionName, unsigned char InInstigator, struct FString ItemType );
	void ClimbLadder ( class ALadderVolume* L );
	void SetHVTPSVisibility ( unsigned long bShow );
	void AttachHVTPS ( );
	void PlayTeleportEffect ( unsigned long bOut, unsigned long bSound );
	void Teleport ( class AActor* destActor );
	void OnAIMoveTo ( class UFoxAISeqAct_MoveTo* Action );
	void AIDrawDebugInfo ( class AHUD* H, float* out_YL );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void eventEndViewTarget ( class APlayerController* PC );
	void eventBecomeViewTarget ( class APlayerController* PC );
	bool TryConsumeStamina ( float Amount, struct FString Purpose );
	void FiringModeUpdated ( class AWeapon* InWeapon, unsigned char InFiringMode, unsigned long bViaReplication );
	void PickUpAfterLeavingVolume ( );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	bool DoJump ( unsigned long bUpdating );
	float SprintJumpStaminaUsage ( );
	bool eventCanSingleJump ( );
	void eventBaseChange ( );
	class AActor* TraceCache ( unsigned char TraceType, struct FVector TraceEnd, struct FVector TraceStart, float TimeTolerance, struct FVector Extent, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	bool IsValidEnemyTargetFor ( class APlayerReplicationInfo* PRI, unsigned long bNoPRIisEnemy );
	float GetRunSpeedRatio ( );
	void ClientRestart ( );
	void Restart ( );
	bool eventAIIsFiring ( );
	bool eventAIHasRangedAttack ( );
	bool eventAIFireOnRelease ( );
	bool eventAITooCloseToAttack ( class AActor* Other );
	bool eventAICanAttack ( class AActor* Other );
	unsigned char eventAIChooseFireMode ( );
	unsigned char ChooseFireMode ( );
	bool eventAIBotFire ( unsigned long bFinished );
	class UParticleSystem* GetSpecificFootStepParticleSystem ( class UFoxPMPInfo_FootSteps* FootStepInfo );
	class UParticleSystem* GetFootStepParticleSystem ( class UPhysicalMaterial* PhysMat );
	class UAkEvent* GetSpecificFootStepSound ( class UFoxPMPInfo_FootSteps* FootStepInfo );
	struct FName GetFootstepAudioSwitch ( class UPhysicalMaterial* PhysMat );
	class UAkEvent* GetFootStepSound ( class UPhysicalMaterial* PhysMat );
	class UPhysicalMaterial* eventGetPawnPhysMatFor ( struct FImpactInfo* Impact );
	class UAkComponent* GetAkComp ( );
	void eventPlayFootStepSound ( int FootDown );
	bool ForcePawnToWalk ( );
	bool DidCrouchUponPawn ( );
	void CrouchTimer ( );
	void eventStartCrouch ( float HeightAdjust );
	void eventEndCrouch ( float HeightAdjust );
	void ShouldCrouch ( unsigned long bCrouch );
	void eventDoCrouch ( unsigned long InbWantsToCrouch );
	void ServerToggleCrouch ( unsigned long InbWantsToCrouch );
	void ToggleCrouch ( unsigned long InbWantsToCrouch );
	bool CanLunge ( );
	bool CanCrouch ( );
	bool IsCrouched ( );
	bool IsFullyAimedAtTarget ( );
	void DoneUpdateAimOffset ( );
	void StartUpdateAimOffset ( );
	void UpdateAimOffset ( struct FVector2D NewAimOffsetPct, float DeltaTime );
	void UpdateMeshBoneControllers ( float DeltaTime );
	void eventOn360AimingChangeNotify ( );
	bool Simulate360Aiming ( unsigned long bCurrentlyDoing360Aiming, struct FVector2D TestAimOffsetPct, unsigned char TestCoverType, unsigned char* out_CoverDirection );
	bool IsPoppingUp ( );
	bool IsPeeking ( unsigned char PawnCA );
	bool IsLeaning ( unsigned char PawnCA );
	bool IsBlindFiring ( unsigned char PawnCA );
	void eventSetCoverAction ( unsigned char NewCoverAction );
	void PlayExitCover ( );
	void PlayEnterCover ( );
	void eventReachedCoverSlot ( int SlotIdx );
	void SetCoverType ( unsigned char NewCoverType );
	void SetCurrentCoverType ( unsigned long bClear );
	unsigned char eventFindCoverType ( );
	unsigned char GetCoverTypeFor ( struct FCovPosInfo Cover );
	struct FCovPosInfo MakeCovPosInfo ( class ACoverLink* Link, int SlotIndex );
	void SetCoverInfo ( class ACoverLink* Link, int SlotIdx, int LeftIdx, int RightIdx, float SlotPct, unsigned long bReplicate );
	void UseNearbyCover ( );
	void SetCovPosInfo ( struct FCovPosInfo CovInfo, unsigned long bReplicate );
	bool IsInCover ( );
	void PlayCoverExitTransition ( );
	void LeaveCover ( );
	void PlayCoverEnterTransition ( unsigned long bReplicated );
	void CoverAcquired ( struct FCovPosInfo CovInfo );
	unsigned char FindBestCoverSideFor ( struct FCovPosInfo CovInfo );
	void UpdateFirstPersonFOV ( float NewFOV );
	struct FRotator eventGetViewRotation ( );
	struct FVector eventGetPawnViewLocation ( );
	bool NativeCalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	void SetBaseEyeheight ( );
	float GetEyeHeight ( );
	void ApplyGroundSpeedModifier ( int NewModifier );
	void InterpolatePawnRotation ( );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	void ThrowActiveWeapon ( unsigned long bDestroyWeap );
	class AInventory* eventAddInventory ( class UClass* InvClass, unsigned long bActivate );
	void SetDepthPriorityGroup ( unsigned char NewDepthPriorityGroup );
	void SetViewOwnerDepthPriorityGroup ( unsigned char NewDepthPriorityGroup );
	void ReloadWeaponConfigs ( );
	void BuildScriptAnimSetList ( );
	void TestCameraShake ( );
	bool eventUsingFirstPersonCamera ( unsigned long SkipFirstPersonMeshCheck );
	void SetFirstPersonFOV ( float NewFOV );
	void UpdateWeaponSwitch ( );
	void PlayWeaponSwitch ( class AWeapon* OldWeapon, class AWeapon* NewWeapon );
	void CleanupWeaponAttachments ( );
	void UpdateWeaponAttachmentMods ( );
	class AFoxWeaponAttachment* GetWeaponAttachmentByClass ( class UClass* AttachClass );
	unsigned char FindDesiredSlotFromClass ( class UClass* AttachClass );
	unsigned char FindCurrentSlotFromClass ( class UClass* AttachClass );
	void AttachSlotToSocket ( unsigned char Slot );
	void SetSlotAttachment ( unsigned char Slot, class UClass* AttachClass );
	void CheckForDroppedWeapons ( unsigned char NewSlot, class AFoxWeaponAttachment* NewAttach );
	void UpdateAttachClasses ( );
	void DetachSlot ( unsigned char SlotToDetach );
	void DetachWeaponFromSlot ( class AFoxWeapon* W );
	void AttachWeapon ( class AFoxWeapon* InWeapon );
	void AttachWeaponToInactiveSlot ( class AFoxWeapon* W );
	bool DoingAnimationTransition ( );
	void PreProcessInput ( class UFoxPlayerInput* Input );
	void ZoomKeyHoldOverride ( unsigned long bReleased );
	void ZoomKeyToggleOverride ( unsigned long bReleased );
	void StepZoom ( );
	bool CanZoomWeapon ( );
	bool eventCanUseHRV ( unsigned long bTurnOn );
	bool eventCanSwitchWeapon ( );
	bool CanFireWeapon ( class AFoxWeapon* InWeapon );
	void StartReload ( );
	class AFoxWeapon* GetWeaponForFireMode ( unsigned char FireMode );
	void eventExitDigiField ( );
	void eventEnterDigiField ( );
	float GetStunnedLookMultiplier ( );
	float eventGetStunStrength ( );
	void EndStunTimer ( );
	void NotifyStunned ( float Strength, unsigned long bFriendlyFire );
	void EndElectrifiedTimer ( );
	void ToggleElectrifiedEffect ( unsigned long bTurnOn );
	void SetElectrified ( int DamageAmount );
	void EndFlashBangTimer ( );
	void NotifyFlashBanged ( float Strength, unsigned long bFriendlyFire );
	void RestoreWeaponState ( );
	void WeaponStoppedFiring ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FFlashLocData* InFlashLocation );
	void WeaponFired ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FFlashLocData* InFlashLocation );
	void ClientSetFlashLocation ( struct FFlashLocData InFlashLocation );
	struct FVector eventGetPhysicalFireStartLoc ( struct FVector FireOffset );
	bool CanDoLunge ( );
	bool CanReloadWeapon ( );
	bool IsWeaponBlockActive ( );
	bool IsMeleeing ( );
	bool CanOverrideWeaponAnimations ( );
	bool IsReloadingWeapon ( );
	bool FitCollision ( );
	void SpecialMoveEnded ( unsigned char PrevMove );
	void SpecialMoveStarted ( unsigned char NewMove, unsigned char PrevMove );
	bool HasSMFlag ( int Flag );
	void ClearSMFlag ( int Flag );
	void SetSMFlag ( int Flag );
	bool eventDoSpecialMove ( unsigned char NewMove, unsigned long bForce, unsigned long bViaReplication );
	bool IsSpecailMoveLocallySimulated ( unsigned char NewMove );
	bool IsDoingSimulatedSpecialMove ( );
	void ClientCancelSpecialMove ( );
	void ClientDoSpecialMove ( unsigned char NewMove );
	bool SpecialMoveAllowsCrouch ( );
	void DoTaunt ( unsigned char SelectedTaunt );
	bool IsDoingTaunt ( );
	bool eventIsDoingASpecialMove ( );
	bool eventIsDoingSpecialMove ( unsigned char AMove );
	bool eventCanDoSpecialMove ( unsigned char AMove );
	bool ConditionalInstanceSpecialMove ( unsigned char AMove );
	class UClass* GetSpecialMoveClass ( unsigned char AMove );
	void ReachedPrecisePosition ( );
	void eventRootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta );
	void eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void UpdateRightHandIKController ( );
	bool ShouldRightHandIKBeOn ( );
	void UpdateLeftHandIKController ( unsigned long isFP );
	bool ShouldLeftHandIKBeOn ( unsigned long checkFirstPerson );
	void UpdateHandsIK ( );
	void UpdateFootIKControllers ( float DeltaSeconds );
	bool ShouldFootIKBeOn ( );
	void UpdateFootIK ( float DeltaSeconds );
	void StopFirstAndThirdPersonAnim ( struct FName FP_Anim, struct FBodyStance TP_Anim, float BlendOutTime );
	void PlayFirstAndThirdPersonAnimByDuration ( struct FBodyStance TP_Stance, struct FName FP_AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	float PlayFirstAndThirdPersonAnim ( struct FBodyStance TP_Stance, struct FName FP_AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	void StopFirstPersonCustomAnim ( struct FName AnimName, float BlendOutTime );
	void PlayFirstPersonCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	float PlayFirstPersonCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	void eventOnLeftSideBlendOutNotify ( );
	void eventOnLeftSideNotify ( );
	void eventSetLeftSide ( unsigned long bDesireLeftSide );
	void BS_AddToSynchGroup ( struct FBodyStance Stance, struct FName GroupName );
	void BS_SetLeftSideOptions ( struct FBodyStance Stance, unsigned long bTransitionToLeftSide, unsigned long bBeginTransition );
	void SetBodyStanceRootBoneAxisOption ( struct FBodyStance Stance, unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	void StopBodyStance ( struct FBodyStance Stance, float BlendOutTime );
	bool IsPlayingBodyStance ( struct FBodyStance Stance );
	void PlayBodyStanceByDuration ( struct FBodyStance Stance, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	float PlayBodyStance ( struct FBodyStance Stance, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride, unsigned long bKeepRBASettings );
	void SpecialMoveTimerFinished ( );
	void SpecialMoveEventTimer ( );
	void ClearSpecailMoveTimer ( unsigned char ClearMove );
	bool SetSpecialMoveTimer ( float SpecialMoveTime );
	void SetAimOffsetProfile ( struct FName NewProfileName );
	void ClearAnimNodes ( );
	void CacheAnimNodes ( );
	bool IsInjured ( );
	void GiveRevive ( class AFoxPRI* InstigatingPRI );
	int GetInjureCaseIndex ( unsigned char DamageZone, unsigned char Direction, struct FName DamageTypeName, TArray< struct FInjureMap >* Cases );
	unsigned char LocationToDirection ( struct FVector DamageSource );
	void KillInjuredPawn ( );
	void EndAllDOTS ( );
	void StopAllAnimations ( );
	struct FVector PlayRagDollDeath ( class UClass* DamageType, struct FVector HitLoc );
	void DeathAnimFinished ( );
	float PlayHeadshotDeath ( );
	float CalcDeathEffectTime ( struct FVector DeathImpulse );
	void PlayDeathFX ( class UClass* DamageType, struct FVector HitLoc, float DeathEffectTime );
	float PlayDeathAnimation ( class UClass* DamageType, struct FVector HitLoc );
	void PlayDeathAudio ( class UClass* DamageType, struct FVector HitLoc, float DeathEffectTime );
	void DeathEffectsEnd ( );
	void UpdateDeathEffects ( );
	void PlayDeathEffects ( class UClass* DamageType, struct FVector HitLoc );
	void TurnOffGearCollision ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void ClearPlayerEffects ( );
	void PlayInjured ( class UClass* DamageType, struct FVector HitLoc );
	void HandlePickup ( class AInventory* Inv );
	void ServerCancelMinigame ( class AFoxGameObject_Use* UseObject );
	void FinishUseMinigame ( );
	void CancelUseMinigame ( class AFoxGameObject_Use* UseObject, unsigned long bNotifyServer );
	void ServerCompleteUseMinigame ( class AFoxGameObject_Use* UseObject, unsigned long bSuccess );
	void CompleteUseMinigame ( class AFoxGameObject_Use* UseObject, unsigned long bSuccess );
	void ClientUseObjectResponse ( class AFoxGameObject_Use* NewUseObject );
	void ServerUseNearbyUseObject ( class AFoxGameObject_Use* NewUseObject );
	bool UseNearbyObject ( );
	void StopUseInterval ( );
	void OnUseObjectInterval ( );
	void StartUseInterval ( float IntervalTime );
	void LeaveUseVolume ( );
	void EnterUseVolume ( class AFoxUseVolume* UseVolume );
	bool IsUsingAnObject ( );
	void AdjustZPos ( float ZAmount );
	void ClientAdjustZPos ( float ZDiff );
	bool ShouldGoToInjured ( class UClass* DamageType );
	void PlayerChangedTeam ( );
	void OnChangeTeam ( );
	void NotifyGameKilled ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	class AController* GetKillerFromSuicide ( class UClass** DamageTypeClass );
	class AController* GetHighestDamageCauser ( int DamageThreshold, class UClass** DamageTypeClass );
	void eventEventKilledBy ( class APawn* EventInstigator );
	void eventKilledBy ( class APawn* EventInstigator );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void DamageEffectEnd ( );
	void CalculateCameraShake ( int DamageAmount, class UCameraShake** NewCameraShake );
	void ApplyDamageDrivenCameraShake ( int DamageAmount );
	bool eventIsInCombat ( );
	void EndCombatTimer ( );
	void SetInCombat ( );
	void ClientNotifyDamaged ( struct FVector FromLocation, unsigned char NormalizedDamageAmount, class UClass* DamageType );
	void NotifyDamaged ( struct FVector FromLocation, unsigned char NormalizedDamageAmount, class UClass* DamageType );
	int NormalizedDamageToActualDamage ( unsigned char NormalizedDamageAmount );
	unsigned char ActualDamageToNormalizedDamage ( int DamageAmount );
	void PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo );
	int GetBoneDamageZone ( class APawn* P, struct FName BoneName );
	bool ShouldDrawCrosshair ( );
	void DrawDebugAimAttractors ( );
	bool IsProtectedByCover ( struct FVector ShotDirection );
	int MultiplayerCoverDamageAdjust ( struct FVector ShotDirection, class APawn* InstigatedBy, struct FVector HitLocation, float Damage );
	struct FFoxWeaponConfigInfo GetWeaponConfigInfoFromDamageType ( class UClass* DamageType );
	float GetDamageReduction ( int DamageZone );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, int* InDamage, struct FVector* Momentum );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void eventNotifyDamageOverTimeFinished ( class UClass* DamageTypeClass );
	void eventNotifyNewDamageOverTime ( class UClass* DamageTypeClass );
	void TakeFallingDamage ( );
	void TrackDamage ( class AController* Causer, int DamageAmount, class UClass* DamageTypeClass );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void PlayHitMarkerSound ( class AFoxPC* InstigatedBy, class UClass* DamageType );
	void TakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	class AController* SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType );
	void CrushedBy ( class APawn* OtherPawn );
	void HurtSplashRadius ( int Damage, float DamageRadius, class AController* InstigatedBy, class UClass* DamageType, unsigned long bFlatDamage );
	void ResetHRVJammerLensEffect ( );
	void eventOnLeaveHRVJammer ( );
	void eventOnEnteredHRVJammer ( );
	bool IsInvincible ( );
	void CreateHardSuitHRVPS ( );
	void DoApplyHRVMaterials ( );
	bool IsHRVActive ( );
	void OnVisorToggled ( unsigned long bTurnOn );
	void ServerUseHRVPing ( );
	bool AuthorityTryUseHRV ( unsigned long bEnable );
	void eventToggleHRVEffects ( unsigned long bEnabled, unsigned long bFriendly, unsigned long bHardSuitHRV );
	void UnPossessed ( );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void StopMeshEffects ( );
	void InvincibilityEnded ( );
	void StartInvincibility ( float Duration );
	void EnableHealthRecharge ( );
	void ResetHealthRecharge ( );
	void Tick ( float DeltaTime );
	void Destroyed ( );
	void UpdateTransparentStealthParams ( float StealthParamVal, TArray< class UMaterialInstanceConstant* >* Materials );
	void UpdateTranslucentStealthParams ( float PhaseParamVal, float ScanlineParamVal, TArray< class UMaterialInstanceConstant* >* Materials );
	float GetStealthInterpValFromPawnSpeed ( );
	void UpdateStealthCamoTransition ( float ElapsedTime );
	void ServerApplyStealth ( unsigned long bTurnOn );
	void ApplyStealth ( unsigned long bTurnOn );
	void ApplyStealthCamoStage2 ( );
	void ApplyStealthCamoStage1 ( );
	void ApplyNormalCamo ( );
	class AFoxWeapon_CloakBase* GetSteathWeapon ( );
	void eventUpdateCamo ( );
	void StealthCamoChanged ( );
	void SetEmissives ( );
	void SetPatchParams ( );
	void SetupCamoParams ( );
	void SetFirstWeaponHidden ( unsigned long bhide );
	void SetFPMeshVisibility ( unsigned long bFirstPersonSetHidden );
	void SetThirdPersonWeaponHidden ( unsigned long bhide );
	void SetTPMeshVisibility ( unsigned long bThirdPersonSetHidden );
	void RestoreMeshVisibility ( );
	void SetMeshVisibility ( unsigned char NewMode );
	void NotifyLocalPlayerTeamReceived ( );
	void NotifyTeamChanged ( );
	void CopySkeletalMeshSockets ( class USkeletalMesh* FromMesh, class USkeletalMesh* ToMesh );
	void RemoveTactical ( );
	void HideTactical ( unsigned long bhide );
	void eventSetGear ( struct FProfileGearInfo NewGearInfo );
	unsigned char GetTeamNum ( );
	void SetWeaponTriggerState ( unsigned long isPulled );
	struct FString eventGetDialogPlayerName ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AFoxPawn::pClassPointer = NULL;

// Class FoxGame.FoxGame_AITurretPawn
// 0x0014 (0x0DD8 - 0x0DC4)
class AFoxGame_AITurretPawn : public AFoxPawn
{
public:
	class UAkEvent*                                    StartAimEvent;                                    		// 0x0DC4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    StopAimEvent;                                     		// 0x0DC8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     LocStringTurretName;                              		// 0x0DCC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1558 ];

		return pClassPointer;
	};

	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void ThrowWeaponOnDeath ( );
	void DoneUpdateAimOffset ( );
	void StartUpdateAimOffset ( );
};

UClass* AFoxGame_AITurretPawn::pClassPointer = NULL;

// Class FoxGame.FoxPawn_DeployableTurret
// 0x0064 (0x0E3C - 0x0DD8)
class AFoxPawn_DeployableTurret : public AFoxGame_AITurretPawn
{
public:
	class AFoxPRI*                                     OwningPlayerPRI;                                  		// 0x0DD8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AFoxPC*                                      OwningPlayer;                                     		// 0x0DDC (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      TurretWeaponClass;                                		// 0x0DE0 (0x0004) [0x0000000000000000]              
	struct FName                                       DeployingAnimName;                                		// 0x0DE4 (0x0008) [0x0000000000000000]              
	struct FName                                       DeathAnimName;                                    		// 0x0DEC (0x0008) [0x0000000000000000]              
	struct FName                                       FiringAnimName;                                   		// 0x0DF4 (0x0008) [0x0000000000000000]              
	float                                              AnimRate;                                         		// 0x0DFC (0x0004) [0x0000000000000000]              
	float                                              AnimBlendInTime;                                  		// 0x0E00 (0x0004) [0x0000000000000000]              
	float                                              AnimBlendOutTime;                                 		// 0x0E04 (0x0004) [0x0000000000000000]              
	struct FBodyStance                                 OurBodyStance;                                    		// 0x0E08 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UMaterialInstanceConstant*                   NormalMIC;                                        		// 0x0E14 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    PSComp_LaserEye;                                  		// 0x0E18 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             DeathEffectPS_Secondary;                          		// 0x0E1C (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             DeathEffectPSNames_Secondary;                     		// 0x0E20 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bDeathEffectPSIsSocket_Secondary : 1;             		// 0x0E2C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	float                                              ExplosionTime_First;                              		// 0x0E30 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ExplosionTime_Second;                             		// 0x0E34 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DestroyTurretTime;                                		// 0x0E38 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1559 ];

		return pClassPointer;
	};

	bool ShouldGoToInjured ( class UClass* DamageType );
	void ToggleHRVEffects ( unsigned long bEnabled, unsigned long bFriendly, unsigned long bHardSuitHRV );
	void DestroyTurret ( );
	void FinalExplosion ( );
	void PlaySecondaryExplosion ( );
	void PlayDeathFX ( class UClass* DamageType, struct FVector HitLoc, float DeathEffectTime );
	void PlayDeathAudio ( class UClass* DamageType, struct FVector HitLoc, float DeathEffectTime );
	float PlayDeathAnimation ( class UClass* DamageType, struct FVector HitLoc );
	void KillLaserFX ( );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void eventDestroyed ( );
	void OnChangeTeam ( );
	bool StartLaserFX ( );
	bool eventCanDoSpecialMove ( unsigned char AMove );
	void DeployedFinished ( );
	void PostBeginPlay ( );
};

UClass* AFoxPawn_DeployableTurret::pClassPointer = NULL;

// Class FoxGame.FoxPC
// 0x0484 (0x0A3C - 0x05B8)
class AFoxPC : public AGamePlayerController
{
public:
	class AFoxPawn*                                    MyFoxPawn;                                        		// 0x05B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bHasSyringe : 1;                                  		// 0x05BC (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bHasBeacon : 1;                                   		// 0x05BC (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned long                                      bRespawnReady : 1;                                		// 0x05BC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bAtRoundEndRespawn : 1;                           		// 0x05BC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bTravelBlocked : 1;                               		// 0x05BC (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bAlreadyShownSellScreen : 1;                      		// 0x05BC (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bJoinInfoValid : 1;                               		// 0x05BC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bIsDisconnected : 1;                              		// 0x05BC (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bExitingServer : 1;                               		// 0x05BC (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bBeganExitServer : 1;                             		// 0x05BC (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bMapLoadInProgress : 1;                           		// 0x05BC (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bReceivedPlayer : 1;                              		// 0x05BC (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bCancelledInvite : 1;                             		// 0x05BC (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bPCDestroyed : 1;                                 		// 0x05BC (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bTrialTimeRanOut : 1;                             		// 0x05BC (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bWasInLastGame : 1;                               		// 0x05BC (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bHasRecentKill : 1;                               		// 0x05BC (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bHasSpawnedIn : 1;                                		// 0x05BC (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bRequiresInventoryRefresh : 1;                    		// 0x05BC (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bRequiresSkillRefresh : 1;                        		// 0x05BC (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bInventoryRefreshPending : 1;                     		// 0x05BC (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bIsFemale : 1;                                    		// 0x05BC (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bLetterBoxEnabled : 1;                            		// 0x05BC (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bHiddenHud : 1;                                   		// 0x05BC (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bLensFlareEnabled : 1;                            		// 0x05BC (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bStaticCrosshairs : 1;                            		// 0x05BC (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bEnableHudChat : 1;                               		// 0x05BC (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bEnableDepotPing : 1;                             		// 0x05BC (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bEnableLowStaminaAudio : 1;                       		// 0x05BC (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bExplosiveDeath : 1;                              		// 0x05BC (0x0004) [0x0000000000002020] [0x20000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bHasSpectatedKiller : 1;                          		// 0x05BC (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      bAllowSearchCancel : 1;                           		// 0x05BC (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bHostHasQuit : 1;                                 		// 0x05C0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bBackupHost : 1;                                  		// 0x05C0 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bWaitingForBackupComplete : 1;                    		// 0x05C0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bGotBackupHostInfo : 1;                           		// 0x05C0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bGotNextSessionInfo : 1;                          		// 0x05C0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bRegisteredOurselvesAsTalker : 1;                 		// 0x05C0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bAddingSpread : 1;                                		// 0x05C0 (0x0004) [0x0000000000002001] [0x00000040] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bEnableAngularVelocity : 1;                       		// 0x05C0 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHRVFXApplied : 1;                                		// 0x05C0 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bLogSent : 1;                                     		// 0x05C0 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bReplicateHealthTo : 1;                           		// 0x05C0 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bReplicateVehicleHealthTo : 1;                    		// 0x05C0 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bAutoWeaponReload : 1;                            		// 0x05C0 (0x0004) [0x0000000000002001] [0x00001000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bAutoWeaponSwitch : 1;                            		// 0x05C0 (0x0004) [0x0000000000002001] [0x00002000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bUseCrosshairOverride : 1;                        		// 0x05C0 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      OneClickUseGP : 1;                                		// 0x05C0 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bDynamicLightsForced : 1;                         		// 0x05C0 (0x0004) [0x0000000000000000] [0x00010000] 
	class UAkEvent*                                    RoundEndSound;                                    		// 0x05C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AFoxHUD*                                     MyFoxHud;                                         		// 0x05C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxPlayerInput*                             MyFoxInput;                                       		// 0x05CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxCamera*                                  FoxCam;                                           		// 0x05D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RemappedJoyRight;                                 		// 0x05D4 (0x0004) [0x0000000000000000]              
	float                                              RemappedJoyUp;                                    		// 0x05D8 (0x0004) [0x0000000000000000]              
	int                                                PlayerNearMissDistance;                           		// 0x05DC (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	class APawn*                                       ScreenshotModeOldPawn;                            		// 0x05E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastKillTime;                                     		// 0x05E4 (0x0004) [0x0000000000000000]              
	struct FName                                       MotionBlurNodeName;                               		// 0x05E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       UberEffectName;                                   		// 0x05F0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       DyingEffectNodeName;                              		// 0x05F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DyingEffectParmName;                              		// 0x0600 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   DyingEffectRange;                                 		// 0x0608 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DyingEffectStartPct;                              		// 0x0610 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DyingEffectInterpTime;                            		// 0x0614 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DyingEffectInterpValue;                           		// 0x0618 (0x0004) [0x0000000000000000]              
	float                                              TargetSceneDesaturation;                          		// 0x061C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SceneDesatSpeedMultiplier;                        		// 0x0620 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CachedSensitivityMultiplier;                      		// 0x0624 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedTotalTimePlayed;                            		// 0x0628 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineStoreInterface*                       StoreInterface;                                   		// 0x062C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0630 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineClanInterface*                        ClanInterface;                                    		// 0x0634 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0638 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineChatInterface*                        ChatInterface;                                    		// 0x063C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0640 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineFriendInterface*                      FriendInterface;                                  		// 0x0644 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x0648 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePartyInterface*                       PartyInterface;                                   		// 0x064C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x0650 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FOnlineFriend                               JoiningFriendInfo;                                		// 0x0654 (0x0084) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              SpawnTime;                                        		// 0x06D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastOnlineStatusId;                               		// 0x06DC (0x0004) [0x0000000000000000]              
	struct FString                                     LastPresenceLocation;                             		// 0x06E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UFoxProfileSettings*                         ProfileSettings;                                  		// 0x06EC (0x0004) [0x0000000000000000]              
	class UFoxPlayerStorage*                           PlayerStorage;                                    		// 0x06F0 (0x0004) [0x0000000000000000]              
	float                                              LastStorageWriteTime;                             		// 0x06F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinStorageWriteDelay;                             		// 0x06F8 (0x0004) [0x0000000000000000]              
	float                                              LastPossessTime;                                  		// 0x06FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastTimePlayedSaveTime;                           		// 0x0700 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      GoreLevel;                                        		// 0x0704 (0x0001) [0x0000000000000000]              
	unsigned char                                      SocialNotificationPlacement;                      		// 0x0705 (0x0001) [0x0000000000000000]              
	unsigned char                                      BackupHostInfo[ 0x50 ];                           		// 0x0706 (0x0050) [0x0000000000000000]              
	unsigned char                                      CurrentSpectateMode;                              		// 0x0756 (0x0001) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	unsigned char                                      HRVState;                                         		// 0x0757 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      OneClickLength;                                   		// 0x0758 (0x0001) [0x0000000000000000]              
	class AFoxPawn*                                    KilledByPawn;                                     		// 0x075C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UAkEvent*                                    PauseAudio;                                       		// 0x0760 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    ResumeAudio;                                      		// 0x0764 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              StartSpectatingKillerTime;                        		// 0x0768 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              KilledByMaxWatchTime;                             		// 0x076C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UFoxHostMigration*                           HostMigration;                                    		// 0x0770 (0x0004) [0x0000000000000000]              
	struct FString                                     HostMigrateMovieName;                             		// 0x0774 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UFoxVoice*                                   Voice;                                            		// 0x0780 (0x0004) [0x0000000000000000]              
	float                                              NearbyCoverUseDistance;                           		// 0x0784 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	class AFoxMiniGame_Base*                           CurrentMiniGame;                                  		// 0x0788 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxPawn_HardSuit*                           NearHardSuit;                                     		// 0x078C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxPawn_DeployableTurret*                   NearTurret;                                       		// 0x0790 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxPawn_ScorpionTank*                       NearPayload;                                      		// 0x0794 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxDeployable_Base*                         NearDeployable;                                   		// 0x0798 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      NearPickup;                                       		// 0x079C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PickupProxmity;                                   		// 0x07A0 (0x0004) [0x0000000000000000]              
	float                                              STAT_ViewFriction;                                		// 0x07A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              STAT_ViewAdhesion;                                		// 0x07A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxPawn*                                    LastFrictionTarget;                               		// 0x07AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastFrictionTargetTime;                           		// 0x07B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FrictionTargetUpdateRate;                         		// 0x07B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SmartReticleOpacityVal;                           		// 0x07B8 (0x0004) [0x0000000000000000]              
	int                                                NumCrosshairTickMarks;                            		// 0x07BC (0x0004) [0x0000000000000000]              
	int                                                CrosshairRotation;                                		// 0x07C0 (0x0004) [0x0000000000000000]              
	int                                                CrosshairOpacity;                                 		// 0x07C4 (0x0004) [0x0000000000000000]              
	int                                                CrosshairTickLength;                              		// 0x07C8 (0x0004) [0x0000000000000000]              
	int                                                CrosshairFriendlyColorIndex;                      		// 0x07CC (0x0004) [0x0000000000000000]              
	int                                                CrosshairNeutralColorIndex;                       		// 0x07D0 (0x0004) [0x0000000000000000]              
	int                                                CrosshairEnemyInRangeColorIndex;                  		// 0x07D4 (0x0004) [0x0000000000000000]              
	int                                                CrosshairEnemyOutOfRangeColorIndex;               		// 0x07D8 (0x0004) [0x0000000000000000]              
	struct FRotator                                    AccumulatedSpreadOffset;                          		// 0x07DC (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FRotator                                    TargetSpreadOffset;                               		// 0x07E8 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              SpreadOffsetStartTime;                            		// 0x07F4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              SpreadOffsetInterpTime;                           		// 0x07F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    CurrentWeaponRecoil;                              		// 0x07FC (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FRotator                                    TargetWeaponRecoil;                               		// 0x0808 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              RecoilAddInterpSpeed;                             		// 0x0814 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RecoilRecoverInterpSpeed;                         		// 0x0818 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinWhipSoundRepeatDelay;                          		// 0x081C (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              SpectateCorpseTime;                               		// 0x0820 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FName                                       SpectatorCamPPEName;                              		// 0x0824 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              WaitingViewPointTime;                             		// 0x082C (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	class AFoxPawn*                                    MyDeadPawn;                                       		// 0x0830 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TechDemoCamInterpTime;                            		// 0x0834 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxCameraActor_HeroPose*                    PendingHeroPoseActor;                             		// 0x0838 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastFocusDistance;                                		// 0x083C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxProjectile_BeaconBase*                   MyRespawnBeacon;                                  		// 0x0840 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       HRVNodeName;                                      		// 0x0844 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPostProcessSettings                        HRVPPSettings;                                    		// 0x084C (0x00E0) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              HRVRampTime;                                      		// 0x092C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HRVSpawnInvisibilityTime;                         		// 0x0930 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    HRVReadyEvent;                                    		// 0x0934 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    HRVLoopStart;                                     		// 0x0938 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    HRVLoopStop;                                      		// 0x093C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class AActor* >                            HRVActors;                                        		// 0x0940 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	float                                              HardSuitHRVTotalRange;                            		// 0x094C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HardSuitHRVRangeExtent;                           		// 0x0950 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HardSuitHRVElapsedTime;                           		// 0x0954 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              HardSuitHRVCurrentRangeBegin;                     		// 0x0958 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class AFoxCameraLensEffect_HardSuitHRVPingBase*    HardSuitHRVLensEffect;                            		// 0x095C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkEvent*                                    RegenEventStart;                                  		// 0x0960 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    RegenEventStop;                                   		// 0x0964 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    LowHealthEventStart;                              		// 0x0968 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    LowHealthEventStop;                               		// 0x096C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LastPawnHealthRatio;                              		// 0x0970 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UAkEvent*                                    SprintDepletedStart[ 0x2 ];                       		// 0x0974 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    SprintDepletedStop[ 0x2 ];                        		// 0x097C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    EnterVehicleEvent;                                		// 0x0984 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    ExitVehicleEvent;                                 		// 0x0988 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FHudCrosshairInfo                           CrosshairOverride;                                		// 0x098C (0x0014) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    BodyHitSound;                                     		// 0x09A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    HeadHitSound;                                     		// 0x09A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    BodyHitBySound;                                   		// 0x09A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    MiniGunHitBySound;                                		// 0x09AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    ElectroHitBySound;                                		// 0x09B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    ExplosiveHitBySound;                              		// 0x09B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    IncendiaryHitBySound;                             		// 0x09B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    ToxicHitBySound;                                  		// 0x09BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    RailGunHitBySound;                                		// 0x09C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    HammerImpactSound;                                		// 0x09C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    KnifeImpactSound;                                 		// 0x09C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    CrowbarImpactSount;                               		// 0x09CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    MeleeHitBySound;                                  		// 0x09D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    MeleeHardSuitSound;                               		// 0x09D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    MeleeHardSuitWPSound;                             		// 0x09D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    ProjectileImpactSound;                            		// 0x09DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MySkillRating;                                    		// 0x09E0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	TArray< struct FRevengeEntry >                     RevengeList;                                      		// 0x09E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UFoxUI*                                      DynamicUI;                                        		// 0x09F0 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UFoxMenuBackgroundUI*                        MenuBG;                                           		// 0x09F4 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UFoxUIModalDialogWidget*                     AdminWidget;                                      		// 0x09F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             HDPerfDelegate;                                   		// 0x09FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedMapName;                                    		// 0x0A08 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CachedGameMode;                                   		// 0x0A14 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UAkEvent*                                    AdminMessageEvent;                                		// 0x0A20 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnDialogCloseDelegate__Delegate;                		// 0x0A24 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnHDPerfProgressUpdate__Delegate;               		// 0x0A30 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1560 ];

		return pClassPointer;
	};

	void ClientReceiveSocialMessage ( struct FString SocialMessage );
	bool Tweet ( struct FString NewStatus );
	bool TwitterLogin ( struct FString UserName, struct FString pass );
	void eventShowScoreWarningCritical ( unsigned long bIsMyTeamWinning, unsigned long IsTeamGame );
	void eventShowScoreWarningClose ( unsigned long bIsMyTeamWinning, unsigned long IsTeamGame );
	bool eventIsTechDemo ( );
	void ClientShowRoundEndUI ( unsigned char WinningTeamIndex, int Team1Score, int Team2Score );
	void ClearHasRecentKill ( );
	void SetHasRecentKill ( );
	void eventOnSocialNotification ( unsigned char EventType, struct FPlayerDisplayInfo InstigatorDisplayInfo );
	bool ShouldShowGearPacks ( );
	int GetTextureLevelSetting ( );
	struct FString GetPlayerNameFromId ( struct FUniqueNetId UniqueId );
	class AFoxPRI* GetPRIFromUniqueNetId ( struct FUniqueNetId UniqueId );
	bool ShouldDisableHeadshotAnim ( );
	bool ShouldDisableBlood ( );
	void ServerPrivateMatchKick ( class AFoxPRI* PRIToKick );
	void ServerRequestVoteKick ( class AFoxPRI* PRIToKick );
	void SetDOF ( );
	void ForceDynamicLights ( unsigned long bTurnOn );
	int GetValueForGem ( unsigned char GemType );
	float GetMultiplierForGem ( unsigned char GemType );
	bool eventIsMoveInputIgnored ( );
	bool IsActorOccludedByDigi ( class AActor* TestActor );
	bool IsActorAffectedByHRVJammer ( class AActor* TestActor, class AFoxProjectile_HRVJammerBase* Jammer );
	bool IsPawnVisibleToUs ( class AFoxPawn* aPawn );
	void UnPauseGame ( );
	void DelayedPauseGame ( );
	void StopAllPawnFireEffects ( );
	void ClientSetPauseGame ( unsigned long bPause );
	void SetPauseGame ( unsigned long bPause );
	void ShowLensFlare ( unsigned long bTurnOn );
	void UpdateLCD ( );
	void SetLCDPage ( int Page );
	void ServerFullDepotAmmo ( );
	void RefreshGearWidget ( );
	void ServerFullRegularAmmo ( );
	void ServerFullHealth ( );
	void eventHDPerfProgressUpdate ( float CurrentScore, float Progress );
	void OnHDPerfProgressUpdate ( float CurrentScore, float Progress );
	bool StartTestHDPerf ( );
	class UFoxDataStore_Playlists* GetPlaylistsDataStore ( );
	class UFoxDataStore_MenuItems* GetMenuItemsDataStore ( );
	void ClientShowAfterAction ( );
	bool WantsIntermission ( );
	void SwitchToIntermission ( );
	void InitializeBackgroundUI ( );
	void InitializeDynamicUI ( );
	void NotifyLevelStreamedOut ( );
	void OnDelayedNotifyStreamedIn ( );
	void NotifyLevelStreamedIn ( );
	void ClientPrepareMapChange ( struct FName LevelName, unsigned long bFirst, unsigned long bLast );
	void ClientUnloadStreams ( );
	void ClientNotifyMapName ( struct FString MapName, unsigned long bSpectator, unsigned long bIsTournamentMode, unsigned long bRankedMatch, unsigned long bMatchStarted );
	void NotifyWeaponTriggerPulledState ( unsigned long isPulled );
	void ClientSetHUD ( class UClass* newHUDType );
	void OnJoinDirectConnectGameComplete ( struct FName SessionName, unsigned long bSuccessful );
	void OnRetrievedGameSettingsForIP ( unsigned long bSuccessful, struct FOnlineGameSearchResult* ConnectResult );
	void ConnectByIP ( struct FString IPAddress );
	void ServerGiveDepotItem ( struct FString DepotPresetName );
	void OnGetNumberOfCurrentPlayersComplete ( int TotalPlayers );
	void OnContentChanged ( );
	void LockDLCIndex ( int DLCIndex );
	void UnlockDLCIndex ( int DLCIndex );
	void ShowDLCUI ( unsigned long bAcceped );
	void LaunchDLCUpdateMessageBox ( );
	bool CheckNeedDLCUpdate ( );
	void CancelPending ( );
	void OnCancelGameJoin ( );
	void ClientNotifyJoinGameAtEnd ( unsigned long bTeamGame );
	void ClientChangeGameAdvertisement ( );
	bool IsGamePublicInProgress ( );
	bool eventIsGamePublic ( );
	bool IsNotIdle ( );
	void PawnUseDialogEvent ( unsigned char DialogEvent, class AFoxPawn* ForPawn, unsigned char InstigatingTeamIndex );
	void ClientNotifyAllPawnUseDialog ( unsigned char DialogEvent, unsigned char InstigatingTeamIndex );
	void ClientNotifyPawnUseDialog ( unsigned char DialogEvent, class AFoxPawn* PawnAnnouncer, unsigned char InstigatingTeamIndex );
	void ClientPawnDialog ( class AFoxPawn* DialogPawn, struct FString ActionName, unsigned char InInstigator, struct FString ItemType );
	bool IsMenuActive ( );
	void eventWwiseClientHearSound ( class UAkEvent* ASound, class AActor* SourceActor, struct FVector SourceLocation, unsigned long bStopWhenOwnerDestroyed, unsigned long bIsOccluded );
	void PostAkEvent ( class UAkEvent* InAkEvent, unsigned long bGlobal );
	void PostAkDialog ( TArray< struct FString > Arguments, unsigned long bGlobal );
	void OnWriteProfileComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void OnWriteStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void SaveProfile ( struct FString Reason );
	void AddNewsTickerItem ( struct FString ItemText, int NumPlays );
	void ShowInviteMessage ( struct FString Message );
	bool IsAwardUnlocked ( int AwardID );
	void UnlockAward ( int AchievementId );
	bool AreAllRandomHangersUnlocked ( );
	bool IsEverythingUnlocked ( );
	bool IsHangerUnlocked ( class UClass* HangerClass );
	void UnlockRandomHanger ( );
	void ClientNotifyRankedUp ( int CurrentRankIndex, int PreviousRank );
	void ClientNotifyDestructibleDestroyed ( int AwardPoints );
	void ClientNotifyMultiKill ( unsigned char MultiKillType );
	void ClientNotifyKillSpreeMsg ( unsigned char KillSpreeType );
	void ClientNotifyKillMsg ( unsigned char MsgID, int Exp, struct FString KilledName );
	void WriteScoreAndStatsForPlayer ( class AFoxPRI* FoxPRI );
	void WriteOnlineStatsForPlayer ( class AFoxPRI* FoxPRI );
	void ClientWriteLeaderboardStats ( class UClass* OnlineStatsWriteClass, unsigned long bIsIncomplete );
	void WriteOnlineScoreForPlayer ( class AFoxPRI* FoxPRI );
	void ClientWriteOnlinePlayerScores ( int LeaderboardId );
	void ModifyStatsSession ( unsigned long bStatsSessionOK );
	void ServerRegisterClientStatGuid ( struct FString StatGuid );
	void OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful );
	void ClientRegisterHostStatGuid ( struct FString StatGuid );
	void SetInactiveControllersToIdle ( int ActiveId );
	void SetPropertyString ( struct FString InString, struct FSettingsProperty* Property );
	struct FString GetNetConnectionString ( );
	void ClientSetOnlineStatus ( );
	void NotifyGotGameType ( );
	void ServerSetWantsTeamChange ( unsigned long bWantsTeamChange );
	void SetWantsTeamChange ( unsigned long bWantsTeamChange );
	void ServerPlayerReadyForMatch ( unsigned long bReady );
	void PlayerReadyForMatch ( unsigned long bReady );
	void ClearClanTag ( );
	void ChangeClanTag ( struct FString ClanTag );
	void SetClanTag ( struct FString ClanTag );
	void ServerNotifyLoaded ( );
	void KillLoadMovieTimer ( );
	void NotifyKillLoadMovie ( float Delay );
	void ClientNotifyMapChanging ( struct FString NewMapName, unsigned long bIsPrivateMatch );
	void HandleTravelError ( );
	void ClientAdminKicked ( );
	void ClientVoteKicked ( );
	void ClientPunkBusted ( struct FString Reason );
	void ClientKickedForIdle ( );
	void KickWarning ( );
	void eventClientWasKicked ( );
	void WriteOutAllStats ( );
	void LaunchHostMigrateMovie ( );
	void NotifyHostQuit ( );
	void HandleHostDisconnect ( );
	void ClientSetBackupSessionInfo ( unsigned char* PlatformSpecificInfo );
	void ServerSetBackupSessionInfo ( unsigned char* PlatformSpecificInfo );
	bool IsInSession ( struct FName SessionName );
	void ClientTravelToNextSession ( );
	void ClientSetNextSessionInfo ( unsigned char* NextGameInfo );
	void NotifyDeviceSelectComplete ( unsigned long bWasSuccessful );
	void ShowMenuDisconnectError ( struct FString MessageName, unsigned long bConnectionLost );
	bool CheckMenuConnectionError ( unsigned long bConnectionLost );
	void OnStorageDeviceChanged ( );
	void OnLinkStatusChange ( unsigned long bIsConnected );
	void OnConnectionStatusChange ( unsigned char ConnectionStatus );
	void NotifyLogoutCompleted ( unsigned long bWasSuccessful );
	void NotifyGlobalLoginChange ( unsigned char LocalUserNum );
	bool WasProfileChange ( );
	bool WasSignedOut ( );
	void ClearOnlineDelegates ( );
	void NotifyInviteFailed ( );
	bool IsTrialLockedMap ( struct FString MapName );
	bool IsTrialLockedGame ( class UOnlineGameSettings** GameSettings );
	void ReplaceGameSettings ( class UFoxGameSettingsCommon* NewGameSettings, struct FName SessionName );
	void CheckSwapGameSettings ( );
	void NotifyNotEnoughSpaceInInvite ( );
	void NotifyNotAllPlayersCanJoinInvite ( );
	void OnGameInviteCancelled ( unsigned long bCancelled );
	void OnSignInAccept ( );
	bool CheckSignedInForInvite ( );
	void OnInviteJoinComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnGameInviteAccepted ( struct FOnlineGameSearchResult* InviteResult );
	void OnReceiveInvite ( unsigned char LocalUserNum, struct FString InviterName );
	void OnReadStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void OnAdminMessageTimer ( );
	void DisplayAdminMessage ( struct FString AlertName, struct FString MessageLine1, struct FString MessageLine2, unsigned long MajorBroadCast );
	void eventDisplayMOTD ( );
	void OnReadFileComplete ( unsigned long bWasSuccessful, struct FString FileName );
	bool IsUnsetName ( struct FString ExistingName );
	bool IsFemale ( );
	void ServerRequeryBasicProfile ( );
	void OnGenderChanged ( unsigned char LocalUserNum, unsigned long bSuccess );
	void OnNameChanged ( unsigned char LocalUserNum, unsigned long bSuccess );
	void OnQueryXPComplete ( struct FUniqueNetId ForId, unsigned char LocalUserNum, int XPAmount, unsigned long bSuccess );
	void OnReadProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void OnExternalUIChanged ( unsigned long bIsOpening );
	void RegisterOnlineDelegates ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void ServerSuicide ( );
	void LightFXRemove ( struct FLFXAction* Action );
	void LightFXFlush ( );
	void LightFXAction ( struct FLFXAction* Action );
	void eventSendClientLog ( struct FString LogName );
	void ReportCheat ( class APlayerReplicationInfo* CheatPRI, struct FString CheatType );
	void eventClientTravel ( struct FString URL, unsigned char TravelType, unsigned long bSeamless, struct FGuid MapPackageGuid );
	void ShowLostConnectionToHostMessage ( );
	void ShowDisconnectMessage ( unsigned long bConnectionLost );
	void OnQuitAccept ( );
	void eventShowQuitGameDialog ( );
	bool FindVehicleToDrive ( );
	class AFoxVehicle* FindNearbyDrivableVehicle ( );
	bool PerformedUseAction ( );
	void SetCameraMode ( struct FName NewCamMode );
	class UFoxDialogBox* LaunchMessageBox ( unsigned char DialogBoxType, struct FString TitleText, struct FString BodyText, struct FScriptDelegate OnDialogCloseDelegate, unsigned long bIsError );
	void NotifyGameMaxed ( );
	void NotifyLiveConnectionLost ( unsigned long bConnectionLost );
	void ClientNotifyIdleMatchClosing ( );
	void NotifyConnectionToHostLost ( unsigned long bRankedMatch );
	void NotifyBanned ( );
	void NotifyAdminKicked ( );
	void NotifyVoteKicked ( );
	void NotifyPunkBusted ( );
	void NotifyIdleKick ( unsigned long bSpawned );
	void NotifyPendingConnectError ( );
	void NotifyTravelError ( );
	void eventNotifyConnectionToServerLost ( );
	void HandleTrialInvalidTravel ( );
	void HandleTrialLockedGame ( );
	struct FString GetLanguageExtension ( );
	void LaunchCorruptedInstallMessage ( );
	void LaunchInvalidLevelMessage ( struct FString ErrorMessage );
	void LaunchSteamMismatchMessage ( );
	void HandleSteamMismatchError ( struct FString Message );
	void ClientHandleInvalidLevel ( struct FString Message );
	void LaunchInvalidJoinMessage ( );
	void HandleInvalidJoin ( );
	void HandleBanned ( );
	void HandleGameAtCapacity ( );
	void ShowWrongPassword ( );
	void ShowNeedPassword ( );
	void HandleVersionMismatch ( );
	void HandleQuickMatchJoinFail ( );
	void OnDestroyForNewSearch ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnDestroyForBackupSessionForSearch ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnEndForNewSearch ( struct FName SessionName, unsigned long bWasSuccessful );
	void TrySearchForNewGames ( );
	struct FString GetConnectionError ( );
	void SetConnectionError ( struct FString NewError );
	void HandleStandaloneConnectionFail ( struct FString Message );
	void HandleConnectionFailure ( unsigned char MessageType, struct FString Message, struct FString Title, unsigned long bIgnoreFutureNetworkMessages );
	void ClientSetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title, unsigned long bIgnoreFutureNetworkMessages );
	bool IsEntryMap ( struct FString MapName );
	bool IsInEntryMap ( );
	void OnDestroyForReturnToMenuComplete ( struct FName SessionName, unsigned long bSuccessful );
	void OnEndForReturnToMainMenu ( struct FName SessionName, unsigned long bWasSuccessful );
	void HandleConnectionLostCleanup ( unsigned long bUnused );
	void HandleJoinFailedCleanup ( unsigned long bUnused );
	void eventReturnToMainMenu ( );
	void OnReturnToMainMenu ( unsigned long bReturn );
	void ReturnToTitle ( );
	void OnReturnToTitle ( unsigned long bReturn );
	void ExitAllFromServer ( );
	void NotifyHostDisconnect ( );
	void HandleHostGracefulExit ( );
	void OnReturnToMenuTimerComplete ( );
	void ExitServer ( );
	void FindCursorWorldInfo ( struct FVector* HitLoc, struct FVector* HitNormal );
	class AActor* ActorPawnIsLookingAt ( );
	class AFoxPawn* FindPawnUnderCursor ( int TraceRange );
	class AActor* FindActorUnderPlayerCursor ( int TraceRange );
	bool eventUsingFirstPersonCameraWithOptionalMeshCheck ( unsigned long SkipFirstPersonMeshCheck );
	bool eventUsingFirstPersonCamera ( );
	class AFoxPawn* GetPawnUnderCrosshair ( );
	void eventForceUpdateCamera ( );
	void eventSpawnPlayerCamera ( );
	void FadeFromHeroPose ( );
	void FadeToHeroPose ( );
	void eventClientSetViewTarget ( class AActor* A, struct FViewTargetTransitionParams TransitionParams );
	void ToggleSpectatorCamPPE ( unsigned long bShow );
	void KillCamTimerExpire ( );
	void SpectateCorpseTimerExpire ( );
	void TransitionToSpectateMode ( );
	bool CycleSpectateView ( unsigned long bCycleForward );
	bool CyclePlayerSpectateMode ( );
	void ClientPlayTaunt ( class AFoxHeroPoseActor* HA, unsigned char Taunt );
	void ServerAttemptHeroTaunt ( unsigned char Taunt );
	void ClientGameEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void MoveToRoundEndCamera ( );
	void GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	bool SwitchToHeroPoseCamera ( );
	class AFoxPreviewSpawnPoint* GetPreviewSpawnPoint ( );
	class AFoxCameraActor_Armory* GetArmoryCamera ( );
	bool SwitchToArmoryCamera ( );
	class AActor* CycleViewpointSpectate ( unsigned long bCycleForward, unsigned long bRandom );
	int eventGetCurrentViewpointIndex ( );
	bool CanSpectatePlayer ( class APlayerReplicationInfo* PRI );
	class AActor* CycleTeamSpectate ( unsigned long bCycleForward );
	struct FString GetCurrentSpectatingPlayerName ( );
	void ServerCycleCurrentSpectateMode ( unsigned long bCycleForward );
	bool CanSpectateArmory ( );
	bool CanSpectateHeroPose ( );
	bool CanSpectateFreeCam ( );
	bool CanSpectateViewpoints ( );
	bool CanSpectateTeam ( );
	void ChangeSpectatedKiller ( class AFoxPawn* NewKiller );
	bool CanSpectateKiller ( );
	bool IsValidSpectateMode ( unsigned char NewSpectateMode );
	void PerformSpectateModeSwitch ( unsigned long bCycleForward, unsigned long bRandom );
	void ServerSwitchToNewSpectateMode ( );
	void SetGamma ( float NewGammaValue );
	void ServerSetEmblem ( struct FProfileEmblemInfo EmblemData );
	void SetEmblem ( struct FProfileEmblemInfo EmblemData );
	void UpdateEmblem ( );
	void ServerSetTitle ( int NewTitleUnlockID );
	void SetTitle ( int NewTitleUnlockID );
	void UpdateTitle ( );
	bool SetPCKeyBinding ( struct FString Command, struct FName KeyName, unsigned long bPrimaryBinding );
	void UpdateControlBindings ( );
	void ServerReQueryClanTag ( );
	void ServerSetClanTag ( struct FString NewClanTag );
	void ServerSetSkillRating ( float TrueSkillRating );
	void UpdatePlayerStorageSettings ( );
	void ServerSetAutoWeaponSwitch ( unsigned long bAutoSwitch );
	void ApplyGameplaySettings ( );
	void ApplyControlsSettings ( );
	void ApplyNativeVideoSettings ( );
	void eventApplyVideoSettings ( );
	void SetNoiseCancellingEnabled ( unsigned long bEnabled );
	void SetVoipActivationLevel ( int NewActivationLevel );
	void SetVoipPlaybackVolume ( int NewVolumeLevel );
	void ApplyNativeAudioSettings ( );
	void ApplyAudioSettings ( );
	void ApplyAllSettings ( );
	float eventGetTextureMovieVolumeMod ( );
	float eventGetFullScreenMovieVolumeMod ( );
	void RegisterCustomPlayerDataStores ( );
	void RegisterOurselfAsLocalTalker ( );
	void eventReceivedPlayer ( );
	void ServerNotifyRdyForSpawn ( );
	void NotifyReadyToStartGame ( );
	void WaitingViewPointTimer ( );
	void ServerStartSpectatingViewpoints ( );
	void ServerSetStatePlayerWaiting ( );
	void UnLoadSoundBanks ( );
	void eventTeamMessage ( class APlayerReplicationInfo* PRI, struct FString Message, struct FName Type, float MsgLifeTime );
	void ServerSendChatMsg ( struct FString S, struct FName ChatMode );
	bool IsFailureConditionForSPOrCoop ( );
	void SetMyBeacon ( class AFoxProjectile_BeaconBase* NewBeacon );
	void KillMiniGame ( );
	void ServerStartRevive ( );
	void OnUseSyringe ( );
	void eventShowUseSyringe ( struct FString UseText );
	void OnStartRevive ( );
	bool HasHardSuitPingTacticalItem ( );
	bool HasBattleModeTacticalItem ( );
	void OnWeakPointMiniGameComplete ( );
	void SpawnWeakPointMiniGame ( );
	void ServerEnterPayload ( class AFoxVehicle* Payload );
	void ServerEnterHardSuit ( class AFoxPawn_HardSuit* HardSuit );
	void OnEnterPayload ( );
	void OnEnterHardSuit ( );
	void ShowReloadUI ( float ReloadTime );
	void ServerPickupTurret ( class AFoxPawn_DeployableTurret* Turret );
	void OnPickupTurret ( );
	void eventShowPickupTurret ( struct FString UseText );
	void eventShowUseRevive ( struct FString UseText );
	void eventKillBarricadeMiniGame ( );
	void ServerUseBarricade ( class AFoxDeployable_Base* NewDeployable );
	void OnUseBarricade ( );
	bool eventShowUseBarricade ( struct FString UseText, class AFoxDeployable_Base* NewDeployable );
	void eventShowUsePayload ( struct FString UseText, class AFoxPawn_ScorpionTank* Payload );
	void eventShowUseHardSuit ( struct FString UseText, class AFoxPawn_HardSuit* HardSuit );
	void OnUseGameObject ( );
	void eventShowUseGameObject ( class AFoxGameObject_Use* UseObject );
	bool UseNearbyObject ( );
	void TogglePostProcessByName ( struct FName PostProcessEffectName, unsigned long bToggleOn );
	void UpdateHyperRealityRampEffect ( float DeltaTime );
	class UMaterialEffect* eventGetHyperRealityMaterialEffectNode ( );
	void ReapplyHRVMaterials ( );
	bool IsActorInHRVRange ( class AActor* HRVActor );
	bool IsHRVActorInList ( class AActor* HRVActor );
	void ApplyHRVMaterialsFor ( class AActor* HRVActor, unsigned long bHRVEnabled, unsigned long bHardSuitHRV, unsigned long bFriendly );
	void ApplyHRVMaterials ( unsigned long bHRVEnabled );
	bool AreHRVFXOn ( );
	void ToggleHRVEffects ( unsigned long bHRVEnabled );
	float GetHRVRechargeRatio ( );
	void eventUpdateHRVEffects ( float NewAmount );
	void ResetHyperRealityEffect ( );
	void VisorRampTimer ( );
	void OnVisorToggled ( unsigned long bTurnedOn );
	void ToggleVisorMode ( unsigned long bTurnOn, unsigned long bPlaySpecialMove );
	bool IsHRVActive ( );
	bool CanUseHRV ( unsigned long bTurnOn );
	void ClientSetCinematicMode ( unsigned long bInCinematicMode, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsHUD );
	void ResetDyingEffect ( );
	void UpdateDyingEffect ( float DeltaTime );
	class UUberPostProcessEffect* GetUberPPEffect ( );
	class UMaterialEffect* eventGetDyingEffectNode ( );
	class UMotionBlurEffect* eventGetMotionBlurNode ( );
	class UMaterialEffect* GetSpectatorCamPPE ( );
	void ClientRestart ( class APawn* NewPawn );
	void ClientReset ( );
	void Reset ( );
	void Restart ( unsigned long bVehicleTransition );
	bool CanRestartPlayer ( );
	bool IsInScorpionTank ( );
	bool IsInHardSuit ( );
	void eventNotifyRemoteTalkerRegistered ( struct FUniqueNetId UniqueId );
	bool IsPlayerNameIgnored ( struct FString PlayerName );
	bool eventIsPlayerIdIgnored ( struct FUniqueNetId UniqueId );
	void ServerUnIgnorePlayer ( struct FUniqueNetId UniqueId );
	void eventUnIgnorePlayer ( struct FUniqueNetId UniqueId );
	void ServerIgnorePlayer ( struct FUniqueNetId UniqueId );
	void eventIgnorePlayer ( struct FUniqueNetId UniqueId );
	void ServerPrivilegeUnmutePLayer ( struct FUniqueNetId UniqueId );
	void eventPrivilegeUnmutePlayer ( struct FUniqueNetId UniqueId );
	void ServerPrivilegeMutePlayer ( struct FUniqueNetId UniqueId );
	void eventPrivilegeMutePlayer ( struct FUniqueNetId UniqueId );
	void ServerLiveUnmutePLayer ( struct FUniqueNetId UniqueId );
	void eventLiveUnmutePlayer ( struct FUniqueNetId UniqueId );
	void ServerLiveMutePlayer ( struct FUniqueNetId UniqueId );
	void eventLiveMutePlayer ( struct FUniqueNetId UniqueId );
	void ServerUnmuteAll ( );
	void ServerMuteAll ( );
	void ServerLocalUnmutePlayer ( struct FUniqueNetId UniqueId );
	void ServerLocalMutePlayer ( struct FUniqueNetId UniqueId );
	void eventServerSetVoipId ( int NewVoipID );
	void eventClientMutePlayer ( struct FUniqueNetId UniqueId );
	void eventClientUnmutePlayer ( struct FUniqueNetId UniqueId );
	void ClientStartNetworkedVoice ( );
	void AddHudEffect ( class UClass* EffectClass );
	void AddDamageIndicator ( struct FVector FromLocation, class UClass* DamageType );
	void NotifyStartedFiring ( );
	void NotifyStoppedFiring ( );
	void ClearWeaponRecoil ( );
	void AddWeaponRecoil ( int PitchRecoil );
	void ClientNotifyTeamScoreEvent ( unsigned char EventType, unsigned char TeamIndex );
	void ClientNotifyScoreEvent ( unsigned char EventType );
	class AFoxPRI* GetRivalPRI ( );
	void ResetRevengeList ( );
	void RemoveRevenge ( class AFoxPRI* KilledPRI );
	int RetrieveRevengeKillsForPRI ( class AFoxPRI* RevengePRI );
	int AddToRevengeList ( class AFoxPRI* KillerPRI );
	void PlayHitBySound ( unsigned char HitSound );
	void ClientNotifyDidDamage ( unsigned char HitSound );
	void NotifyLocalPlayerDidDamage ( class AFoxPawn* P, class UClass* DamageType, struct FName HitBoneName );
	void NotifyDidDamage ( unsigned char HitSound );
	void ClearSpectateInfo ( );
	void SetSpectatePlayerInfo ( class AFoxPawn* SpectatingPawn );
	void ClientNotifyDamageMessage ( class AFoxPRI* Other, unsigned char TypeOfDamage, class UClass* DamageTypeClass, int TotalDamage, unsigned long bWeInstigated, unsigned long bHeadShot );
	void ClientNotifyCombatGameplayMessage ( class AFoxPRI* PRI, unsigned char EventType );
	void ClientNotifyCombatKillSpreeMessage ( class AFoxPRI* KillSpreePRI, unsigned char KillSpreeType );
	void ClientNotifyCombatKillMessage ( class AFoxPRI* KillerPRI, class AFoxPRI* KilledPRI, class UClass* DamageType, class UClass* WeaponClass, unsigned long bHeadShot, unsigned long bMultikillEnd );
	void ClientNotifyGotKill ( class AFoxPRI* KilledPRI, class UClass* DamageType, unsigned long bHeadShot, unsigned long bVIP, unsigned char KilledKillStreak, unsigned long bThreat );
	void ClientNotifyKilled ( class AFoxPRI* KillerPRI, unsigned char KillerStreakCount, unsigned long bVIP, unsigned long bHighThreat, struct FFoxWeaponConfigInfo WeaponConfigInfo, int Health, int HealthMax, class UClass* DamageType, unsigned long bKillerIsBot );
	void NotifyWeGotKilled ( class AController* Killer, class AFoxPawn* OurKilledPawn, class UClass* DamageType );
	void NotifyWeGotAKill ( class AController* KilledPlayer, class AFoxPawn* KilledPawn, class UClass* DamageType );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void NotifyAmmoChanged ( class AFoxWeapon* W );
	void NotifyWeaponPutDown ( );
	void NotifyWeaponEquipped ( class AFoxWeapon* W );
	void SpawnDefaultHUD ( );
	void ClientNotifyTDMGameEnd ( unsigned char WinningTeamIndex, int Team1Score, int Team2Score, int Team1RunningTotalScore, int Team2RunningTotalScore, int inFirstPlaceID, int inSecondPlaceID, int inThirdPlaceID );
	void ClientNotifyDMGameEnd ( unsigned char Placement, int FirstPlaceID, int SecondPlaceID, int ThirdPlaceID );
	void eventCancelSprintButtonPress ( );
	void IgnoreLookInput ( unsigned long bNewLookInput );
	void IgnoreMoveInput ( unsigned long bNewMoveInput );
	void eventInitInputSystem ( );
	bool IsKeyPressed ( struct FName DefaultKey );
	struct FVector CalcAngularVelocity ( struct FRotator OldRotation, struct FRotator NewRotation, float DT );
	class AFoxPawn* GetFrictionTarget ( float MaxDistance );
	void ApplyAdhesion ( float DeltaTime, int* out_YawRot, int* out_PitchRot );
	void SprintServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View );
	void DebugNoRecoil ( );
	void AdminGodMode ( );
	void CheckNearMiss ( class APawn* Shooter, class AWeapon* W, struct FVector WeapLoc, struct FVector LineDir, struct FVector HitLocation );
	bool CanUseWeapon ( );
	bool WeaponHasAnyAmmo ( );
	bool CanZoomWeapon ( );
	bool CanSwitchWeapon ( );
	bool CanFireWeapon ( class AFoxWeapon* InWeapon );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void ClientGenericDialog ( struct FName ActionParam, struct FName ActionName );
	void GameObjectDroppedDialog ( unsigned long bIsTeamZero );
	void GameObjectReturnedDialog ( unsigned long bIsTeamZero );
	void GameObjectCompleteDialog ( unsigned long bIsTeamZero );
	struct FString eventGetDialogPlayerName ( );
	float eventGetDefaultFOV ( );
	void ClearTargetSpreadOffset ( );
	void SetTargetSpreadOffset ( class AFoxWeapon* InWeapon, struct FRotator NewOffset );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void KillSprintSpecialMove ( );
	void TryASpecialMove ( );
	void SpecialMoveStarted ( unsigned char NewMove );
	void ClientDictatedSpecialMove ( unsigned char AMove );
	void eventServerDictateSpecialMove ( unsigned char AMove );
	void ServerStopCurrentSpecialMove ( unsigned long bForce );
	void ClientStopSimulatedSpecialMove ( unsigned char StopMove, unsigned long bForce );
	void eventStopCurrentSpecialMove ( unsigned long bForce );
	void ServerDoSpecialMove ( unsigned char NewMove, float PlayerJoyUp, float PlayerJoyRight, int RotYaw );
	void eventDoSpecialMove ( unsigned char NewMove, unsigned long bForce, unsigned long bViaReplication );
	bool CanDoSpecialMove ( unsigned char AMove );
	bool IsDoingSpecialMove ( unsigned char AMove );
	bool IsDoingASpecialMove ( );
	void HandleWalking ( );
	bool ServerMoveShouldSetPawnRot ( );
	void UpdateRotation ( float DeltaTime );
	void ProcessViewRotation ( float DeltaTime, struct FRotator DeltaRot, struct FRotator* out_ViewRotation );
	void SetTargetDesat ( float NewDesat );
	void UpdateDesat ( float DT );
	void NativePlayerTick ( float DeltaTime );
	void eventPlayerTick ( float DeltaTime );
	void eventExitDigiField ( );
	void eventEnterDigiField ( );
	void ClientNotifyFallDamage ( );
	void ClientRemoveFadingCameraLensEffect ( class UClass* EffectToRemove, class UAkEvent* AudioEvent );
	void ClientAddFadingCameraLensEffect ( class UClass* EffectToAdd, class UAkEvent* AudioEvent );
	void HandlePickup ( class AInventory* Inv );
	void ServerGrabPickup ( class AActor* PickupToGrab );
	void GrabPickup ( );
	void ServerChangeSelectedAvatar ( int NewAvatarIndex );
	void ChangeSelectedAvatar ( int NewAvatarIndex );
	void ServerChangeSelectedLoadoutIndex ( unsigned char NewLoadoutIndex );
	void ChangeSelectedLoadoutIndex ( int NewLoadoutIndex );
	void ServerSetLoadout ( struct FProfileLoadoutSlot* NewWeaponLoadouts, struct FProfileGearInfo NewGearInfo, struct FProfileTauntInfo NewTauntInfo, struct FProfileDialogInfo NewDialogInfo, struct FProfileDepotInfo NewDepotInfo, unsigned char SelectedLoadoutIndex, int SelectedAvatarIndex );
	void SetupLoadout ( );
	void RefreshLoadout ( );
	struct FProfileLoadoutSlot ReadLoadoutFromProfile ( int LoadoutIndex );
	class AFoxLoadoutInfo* GetLoadoutInfo ( );
	void ToggleAutoReload ( );
	void ClientShowBetweenRoundText ( );
	void ServerSelectBeacon ( );
	void ServerSelectSpawn ( );
	void SelfTerminateInjuredPawn ( );
	void ClientNotifySprintDepletedStop ( );
	void ClientNotifySprintDepletedStart ( );
	void ClientNotifyLowHealthStop ( );
	void ClientNotifyLowHealthStart ( );
	void ClientNotifyDroppedObject ( );
	void ClientNotifyHRVExpired ( );
	void ClientNotifyHRVReady ( );
	void ClientNotifyStoppedRegen ( );
	void ClientNotifyStartedRegen ( );
	void TriggerRespawn ( );
	float eventGetRespawnReadyTimeRemaining ( );
	void OnRespawnReady ( );
	void ClearRespawnTimer ( );
	void ClientSetForceRespawnTimer ( float ForceRespawnTime, float AllowedRespawnTime );
	void ClientSetRespawnTimer ( float RespawnTime );
	void StartRespawnTimer ( );
	void StartRoundEndRespawnTimer ( );
	bool IsSellScreenActive ( );
	bool ConditionalShowSellScreen ( class UObject* ParentMenu );
	void NotifyCouldNotSpawnPawn ( );
	void PawnDied ( class APawn* inPawn );
	void ServerChangeName ( struct FString S );
	void SetName ( struct FString S );
	void PostControllerIdChange ( );
	void UpdateTimePlayed ( );
	void AddTimePlayed ( float Amount );
	float GetTimePlayed ( );
	void eventUnPossess ( );
	void ResetAudioEvents ( );
	void eventPossess ( class APawn* aPawn, unsigned long bVehicleTransition );
	void ServerNotifyPCSpawned ( );
	void ClientNotifyPCSpawned ( );
	void ServerNotifyReceivedPlayer ( );
	void ResetPC ( );
	void CleanupPawn ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void OnDialogCloseDelegate ( unsigned long bAccepted );
};

UClass* AFoxPC::pClassPointer = NULL;

// Class FoxGame.FoxPickupFactory
// 0x0000 (0x02BC - 0x02BC)
class AFoxPickupFactory : public APickupFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1561 ];

		return pClassPointer;
	};

};

UClass* AFoxPickupFactory::pClassPointer = NULL;

// Class FoxGame.FoxPlayerInput
// 0x0160 (0x02DC - 0x017C)
class UFoxPlayerInput : public UPlayerInput
{
public:
	float                                              ZoomModeViewScalePct;                             		// 0x017C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              TightAimSensitivityScale;                         		// 0x0180 (0x0004) [0x0000000000000000]              
	unsigned long                                      bForceController : 1;                             		// 0x0184 (0x0004) [0x0000000000004002] [0x00000001] ( CPF_Const | CPF_Config )
	unsigned long                                      bViewAccelEnabled : 1;                            		// 0x0184 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAppliedFriction : 1;                             		// 0x0184 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDebugFriction : 1;                               		// 0x0184 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bDebugAdhesion : 1;                               		// 0x0184 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bUsePresets : 1;                                  		// 0x0184 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bSouthPawControl : 1;                             		// 0x0184 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bLeftyControl : 1;                                		// 0x0184 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bHoldingButton_Sprint : 1;                        		// 0x0184 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bHoldingButton_Taunt : 1;                         		// 0x0184 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bHoldingButton_QuickGear : 1;                     		// 0x0184 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bSprintToggled : 1;                               		// 0x0184 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bHoldingButton_Reload : 1;                        		// 0x0184 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bHoldingButton_Jump : 1;                          		// 0x0184 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bHoldingButton_Crouch : 1;                        		// 0x0184 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bHoldingButton_HRV : 1;                           		// 0x0184 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bHoldingButton_SwitchWeapon : 1;                  		// 0x0184 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bHoldingZoom : 1;                                 		// 0x0184 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bHoldingFiringButton : 1;                         		// 0x0184 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bHoldingCurrentGrenadeIndex : 1;                  		// 0x0184 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bCrouchToggled : 1;                               		// 0x0184 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bTightAimToggle : 1;                              		// 0x0184 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bAimAssistOn : 1;                                 		// 0x0184 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bScoreboardToggle : 1;                            		// 0x0184 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bSprintToggle : 1;                                		// 0x0184 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bHRVToggle : 1;                                   		// 0x0184 (0x0004) [0x0000000000000000] [0x02000000] 
	float                                              SprintInputThreshold;                             		// 0x0188 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              YawAccelMultiplier;                               		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              YawAccelThreshold;                                		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              YawAccelRampUpTime;                               		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              YawAccelPct;                                      		// 0x0198 (0x0004) [0x0000000000000000]              
	float                                              FrictionTargetMultiplier;                         		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastDistToTarget;                                 		// 0x01A0 (0x0004) [0x0000000000000000]              
	float                                              LastDistMultiplier;                               		// 0x01A4 (0x0004) [0x0000000000000000]              
	float                                              LastDistFromAimZ;                                 		// 0x01A8 (0x0004) [0x0000000000000000]              
	float                                              LastDistFromAimY;                                 		// 0x01AC (0x0004) [0x0000000000000000]              
	float                                              LastFrictionMultiplier;                           		// 0x01B0 (0x0004) [0x0000000000000000]              
	float                                              LastAdhesionAmtY;                                 		// 0x01B4 (0x0004) [0x0000000000000000]              
	float                                              LastAdhesionAmtZ;                                 		// 0x01B8 (0x0004) [0x0000000000000000]              
	float                                              LastTargetRadius;                                 		// 0x01BC (0x0004) [0x0000000000000000]              
	float                                              LastTargetHeight;                                 		// 0x01C0 (0x0004) [0x0000000000000000]              
	float                                              LastDistFromAimYa;                                		// 0x01C4 (0x0004) [0x0000000000000000]              
	float                                              LastDistFromAimZa;                                		// 0x01C8 (0x0004) [0x0000000000000000]              
	float                                              LastAdjustY;                                      		// 0x01CC (0x0004) [0x0000000000000000]              
	float                                              LastAdjustZ;                                      		// 0x01D0 (0x0004) [0x0000000000000000]              
	struct FVector                                     LastCamLoc;                                       		// 0x01D4 (0x000C) [0x0000000000000000]              
	struct FRotator                                    LastDeltaRot;                                     		// 0x01E0 (0x000C) [0x0000000000000000]              
	int                                                PresetIndex;                                      		// 0x01EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ReloadButtonDownTime;                             		// 0x01F0 (0x0004) [0x0000000000000000]              
	float                                              UseObjectHoldTime;                                		// 0x01F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              JumpButtonDownTime;                               		// 0x01F8 (0x0004) [0x0000000000000000]              
	float                                              SwitchWeaponButtonDownTime;                       		// 0x01FC (0x0004) [0x0000000000000000]              
	float                                              PickupWeaponHoldTime;                             		// 0x0200 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                GrenadeIndex;                                     		// 0x0204 (0x0004) [0x0000000000000000]              
	struct FName                                       PushToTalkKeyName;                                		// 0x0208 (0x0008) [0x0000000000000000]              
	struct FName                                       PushToTalkAltKeyName;                             		// 0x0210 (0x0008) [0x0000000000000000]              
	struct FName                                       TauntKeyName;                                     		// 0x0218 (0x0008) [0x0000000000000000]              
	struct FName                                       TauntAltKeyName;                                  		// 0x0220 (0x0008) [0x0000000000000000]              
	struct FName                                       TauntControllerKeyName;                           		// 0x0228 (0x0008) [0x0000000000000000]              
	struct FName                                       LoadoutKeyName;                                   		// 0x0230 (0x0008) [0x0000000000000000]              
	struct FName                                       LoadoutAltKeyName;                                		// 0x0238 (0x0008) [0x0000000000000000]              
	struct FName                                       UseKeyName;                                       		// 0x0240 (0x0008) [0x0000000000000000]              
	struct FName                                       UseAltKeyName;                                    		// 0x0248 (0x0008) [0x0000000000000000]              
	struct FName                                       UseControllerKeyName;                             		// 0x0250 (0x0008) [0x0000000000000000]              
	struct FName                                       StrafeLeftKeyName;                                		// 0x0258 (0x0008) [0x0000000000000000]              
	struct FName                                       StrafeRightKeyName;                               		// 0x0260 (0x0008) [0x0000000000000000]              
	struct FName                                       FireKeyName;                                      		// 0x0268 (0x0008) [0x0000000000000000]              
	struct FName                                       FireAltKeyName;                                   		// 0x0270 (0x0008) [0x0000000000000000]              
	struct FName                                       FireControllerKeyName;                            		// 0x0278 (0x0008) [0x0000000000000000]              
	struct FName                                       GearSelectKeyNames[ 0x4 ];                        		// 0x0280 (0x0020) [0x0000000000000000]              
	struct FName                                       QuickGearSelectKeyName;                           		// 0x02A0 (0x0008) [0x0000000000000000]              
	struct FName                                       QuickGearSelectAltKeyName;                        		// 0x02A8 (0x0008) [0x0000000000000000]              
	TArray< struct FKeyBind >                          CommandMappings;                                  		// 0x02B0 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FKeyBind >                          PreDefinedBindings;                               		// 0x02BC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FKeyBind >                          ControllerBindings;                               		// 0x02C8 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	float                                              ControllerSensitivityMultiplier;                  		// 0x02D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ControllerADSSensitivityMultiplier;               		// 0x02D8 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1562 ];

		return pClassPointer;
	};

	struct FString GetBindNameFromCommand ( struct FString KeyCommand );
	void QuickGearTimer ( );
	void QuickGearKey ( unsigned long bReleased );
	void TauntTimer ( );
	void TauntKey ( unsigned long bReleased );
	void SetGamepadKeyBind ( struct FName KeyName, struct FString Command );
	void SetSecondaryKeyBind ( struct FName KeyName, struct FString Command );
	void SetPrimaryKeyBind ( struct FName KeyName, struct FString Command );
	void SetBind ( struct FString Command, struct FName* BindName );
	void ExponentialTurning ( float Exp );
	bool IsPS3 ( );
	void RightBumperPressed ( unsigned long bUpper, unsigned long bReleased );
	void LeftBumperPressed ( unsigned long bUpper, unsigned long bReleased );
	void ToggleLoadoutMenu ( unsigned long bReleased );
	void BackKey ( unsigned long bReleased );
	void HudChat ( );
	void PauseIntoChat ( );
	void PauseKey ( );
	void DrawHUD ( class AHUD* H );
	void DebugAdhesion ( );
	void DebugFriction ( );
	void TightAimAcceleration ( float DeltaTime );
	void ViewAcceleration ( float DeltaTime );
	void ViewAdhesion ( float DeltaTime, class AFoxWeapon* W, int* out_YawRot, int* out_PitchRot );
	void ViewFriction ( float DeltaTime, class AFoxWeapon* W );
	void SetupPCKeyBindings ( );
	void SetControlBindings ( int LayoutIndex );
	bool ToggleTightAim ( );
	bool InvertMouse ( );
	void ToggleZoomKey ( unsigned long bReleased );
	void HoldZoomKey ( unsigned long bReleased );
	void ToggleCrouchKey ( );
	void HoldCrouchKey ( unsigned long bReleased );
	void JumpKey ( );
	void SprintKey ( unsigned long bReleased );
	void PushToTalk ( unsigned long bReleased );
	void PrevWeaponKey ( );
	void NextWeaponKey ( );
	void CycleSpectateKey ( );
	void MeleeKey ( unsigned long bReleased );
	void ReloadKey ( );
	bool ConditionalStopHRVMode ( );
	void InternalToggleHRV ( );
	void ToggleHRVMode ( unsigned long bReleased );
	void UseObjectKey ( );
	void UseCover ( );
	bool CoverAvailable ( );
	bool PickupWeaponAvailable ( );
	bool UseObjectAvailable ( );
	void SwitchWeaponKeyAction ( unsigned long bReleased, unsigned long bDoHoldAction );
	void JumpKeyAction ( unsigned long bReleased, unsigned long bDoHoldAction );
	void PressHoldUseAction ( unsigned long bReleased, unsigned long bDoHoldAction );
	bool HasPossibleSwitchWeaponHoldAction ( );
	bool HasPossibleReloadKeyHoldAction ( );
	bool HasPossibleJumpKeyHoldAction ( );
	void SwitchWeaponWithNotify ( int NewWeaponIndex, unsigned long bReleased );
	void ActivateSelectedItem ( unsigned long bReleased );
	void SelectGear ( int NewSelectedInventoryIndex );
	void ReleaseTactical ( );
	void SelectTactical ( );
	void SelectLastWeapon ( );
	void SwitchWeapon ( int NewWeaponIndex );
	bool IsKeyPressed ( struct FName DefaultKey );
	bool ShouldDoButtonPressInput ( struct FName ButtonName );
	void AdjustMouseSensitivity ( float FOVScale );
	void PlayerInput ( float DeltaTime );
	void PreProcessInput ( float DeltaTime );
	void eventCheckInputEvents ( struct FString Command );
	void InitializeBindings ( );
};

UClass* UFoxPlayerInput::pClassPointer = NULL;

// Class FoxGame.FoxPRI
// 0x00F0 (0x0380 - 0x0290)
class AFoxPRI : public APlayerReplicationInfo
{
public:
	class UZeStatsManager*                             PlayerStatsManager;                               		// 0x0290 (0x0004) [0x0000000000000000]              
	class UFoxOnlineStatsWriteWeaponUse*               WeaponUsageStats;                                 		// 0x0294 (0x0004) [0x0000000000000000]              
	class UFoxOnlineStatsWriteGameTypeBase*            GameTypeStats;                                    		// 0x0298 (0x0004) [0x0000000000000000]              
	class UFoxOnlineStatsWriteDepot*                   DepotUsageStats;                                  		// 0x029C (0x0004) [0x0000000000000000]              
	int                                                Suicides;                                         		// 0x02A0 (0x0004) [0x0000000040000021]              ( CPF_Edit | CPF_Net | CPF_EditInlineNotify )
	int                                                KillStreak;                                       		// 0x02A4 (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	int                                                MultiKills;                                       		// 0x02A8 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                DeathStreak;                                      		// 0x02AC (0x0004) [0x0000000000000000]              
	unsigned char                                      NumFlagCaptures;                                  		// 0x02B0 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      NumPointCaptures;                                 		// 0x02B1 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      Assists;                                          		// 0x02B2 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      NumGameHacks;                                     		// 0x02B3 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      NumGameDefends;                                   		// 0x02B4 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      NumGameAttacks;                                   		// 0x02B5 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      NumGameCaptures;                                  		// 0x02B6 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      NumTagsGrabbed;                                   		// 0x02B7 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      NumTagsDenied;                                    		// 0x02B8 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      NumGamesTagCollected;                             		// 0x02B9 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      CurrentRankIndex;                                 		// 0x02BA (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      ThreatLevel;                                      		// 0x02BB (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AFoxLoadoutInfo*                             Loadout;                                          		// 0x02BC (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      KillSpreeMessageClass;                            		// 0x02C0 (0x0004) [0x0000000000000000]              
	struct FString                                     ClanTag;                                          		// 0x02C4 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	int                                                InitialExperiencePoints;                          		// 0x02D0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CurrentExperiencePoints;                          		// 0x02D4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bHasInitialExperienceRead : 1;                    		// 0x02D8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bOnWinningTeam : 1;                               		// 0x02D8 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bIsDemoPlayer : 1;                                		// 0x02D8 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bHasWrittenStats : 1;                             		// 0x02D8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bPlayerIsLoaded : 1;                              		// 0x02D8 (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      bHostPRI : 1;                                     		// 0x02D8 (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	unsigned long                                      bWasInactive : 1;                                 		// 0x02D8 (0x0004) [0x0000000000000020] [0x00000040] ( CPF_Net )
	unsigned long                                      bIsVIP : 1;                                       		// 0x02D8 (0x0004) [0x0000000000002020] [0x00000080] ( CPF_Net | CPF_Transient )
	unsigned long                                      bMapSkipVoted : 1;                                		// 0x02D8 (0x0004) [0x0000000000002020] [0x00000100] ( CPF_Net | CPF_Transient )
	unsigned long                                      bHasInitialCP : 1;                                		// 0x02D8 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bPlayerBot : 1;                                   		// 0x02D8 (0x0004) [0x0000000000000000] [0x00000400] 
	int                                                InitialGamePoints;                                		// 0x02DC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CurrentGamePoints;                                		// 0x02E0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CombatPoints;                                     		// 0x02E4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                TotalCombatPointsEarned;                          		// 0x02E8 (0x0004) [0x0000000000000000]              
	struct FString                                     CurrentRankString;                                		// 0x02EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CurrentTitleUnlockID;                             		// 0x02F8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FProfileEmblemInfo                          CurrentEmblem;                                    		// 0x02FC (0x0018) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     CurrentTitleString;                               		// 0x0314 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ScorePlacement;                                   		// 0x0320 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                PreviousKills;                                    		// 0x0324 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                PreviousDeaths;                                   		// 0x0328 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                PreviousExp;                                      		// 0x032C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     StatGuid;                                         		// 0x0330 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	int                                                StoredKills;                                      		// 0x033C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                StoredDeaths;                                     		// 0x0340 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              StoredTimePlayed;                                 		// 0x0344 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CachedThreatLevel;                                		// 0x0348 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPersonalBoost                              PersonalXPModifier;                               		// 0x034C (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FPersonalBoost                              PersonalCPModifier;                               		// 0x0354 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FPersonalBoost                              PersonalGPModifier;                               		// 0x035C (0x0008) [0x0000000000000020]              ( CPF_Net )
	float                                              PendingTeamChangeTimeStamp;                       		// 0x0364 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                TeamXPBoostWeHaveGiven;                           		// 0x0368 (0x0004) [0x0000000000000000]              
	int                                                TeamGPBoostWeHaveGiven;                           		// 0x036C (0x0004) [0x0000000000000000]              
	int                                                TeamCPBoostWeHaveGiven;                           		// 0x0370 (0x0004) [0x0000000000000000]              
	int                                                BonusExperience;                                  		// 0x0374 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                MatchEndExperience;                               		// 0x0378 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                BonusGP;                                          		// 0x037C (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1563 ];

		return pClassPointer;
	};

	void OnMultiKillExpire ( );
	void StopMultiKillTimer ( );
	void StartMultiKillTimer ( float MultiKillTime );
	void NotifyLocalPlayerTeamReceived ( );
	void TryToRegisterTalker ( );
	void UnregisterPlayerFromSession ( );
	void RegisterPlayerWithSession ( );
	bool ShouldBroadCastWelcomeMessage ( unsigned long bExiting );
	int GetNumAvailableSkillPoints ( );
	void ServerSkipMapVote ( );
	int GetThreatLevel ( );
	unsigned char GetTeamNum ( );
	void SetPlayerTeam ( class ATeamInfo* NewTeam );
	void IncrementDeaths ( int Amt );
	void eventSetMuteStatus ( );
	void eventSetInitialXP ( int Amount );
	void ApplyCurrentXPToTotal ( );
	void ServerApplyCurrentXPToTotal ( );
	struct FString eventGetReadableName ( );
	struct FString GetHumanReadableName ( );
	int GetNextRankScore ( );
	float GetRankProgress ( );
	void eventSetClanTag ( struct FString NewClanTag );
	bool IsItemUnlocked ( int UnlockID );
	void CalculateRankIndex ( );
	void eventSetPlayerTitleString ( );
	int eventGetTitleUnlockID ( );
	void eventSetPlayerRankString ( );
	int GetRankIndex ( );
	int GetFinalGPGained ( );
	int GetFinalXPGained ( );
	int GetTotalGamePoints ( );
	int GetCurrentGamePoints ( );
	int GetInitialGamePoints ( );
	void ApplyCurrentGamePointsToTotal ( );
	void eventSetInitialGamePoints ( int Amount );
	int GetCurrentTotalExperience ( );
	int GetInitialExperience ( );
	int GetCurrentExperience ( );
	int GetCombatPoints ( );
	bool TrySpendCombatPoints ( int Amount );
	void ServerSpendCombatPoints ( int Amount );
	void SetInitialCombatPoints ( int Amount );
	void eventAddCombatPoints ( int Amount, unsigned long IgnoreBoosts );
	void AddGamePoints ( int Amount );
	void eventAddExperience ( int Amount );
	bool IsInvalidName ( );
	void SetUniqueId ( struct FUniqueNetId PlayerUniqueId );
	bool IsValidPlayer ( );
	void HandleStatsWriting ( );
	void RoundReset ( );
	void Reset ( );
	void AddStatsStartedUsingDepot ( );
	void ServerAddDepotPurchaseStats ( int ItemIdx, int Amount );
	void ClearStatGroups ( );
	void CloseGameTypeStatsGroup ( );
	void AddGameTypeStatsGroup ( class UClass* theGameType );
	void eventDestroyed ( );
	void CopyProperties ( class APlayerReplicationInfo* PRI );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AFoxPRI::pClassPointer = NULL;

// Class FoxGame.FoxProfileFlagInfo
// 0x003C (0x0078 - 0x003C)
class UFoxProfileFlagInfo : public UObject
{
public:
	TArray< struct FProfileFlagInfo >                  ProfileFlags;                                     		// 0x003C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     LocalizationPackageName;                          		// 0x0048 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     NameLocalizationSectionName;                      		// 0x0054 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     DescriptionLocalizationSectionName;               		// 0x0060 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     TagLocalizationSectionName;                       		// 0x006C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1564 ];

		return pClassPointer;
	};

	bool GetProfileFlagInfoFromID ( unsigned char FlagID, struct FProfileFlagInfo* FlagInfo );
};

UClass* UFoxProfileFlagInfo::pClassPointer = NULL;

// Class FoxGame.FoxProfileSettings
// 0x0004 (0x0090 - 0x008C)
class UFoxProfileSettings : public UOnlineProfileSettings
{
public:
	int                                                ProfileVersion;                                   		// 0x008C (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1565 ];

		return pClassPointer;
	};

	void SetCurrentDeviceID ( int InDeviceID );
	void eventSetTutorialAsSeen ( int Index );
	void eventResetTutorialHistory ( );
	void UnlockHanger ( int HangerUnlockID );
	void eventSaveDepot ( struct FProfileDepotInfo LoadoutData );
	void eventSaveGear ( struct FProfileGearInfo LoadoutData );
	bool eventSaveDialogPacks ( struct FProfileDialogInfo DialogData );
	bool eventSaveTaunts ( struct FProfileTauntInfo TauntData );
	void eventSaveProfileLoadoutSlot ( int SlotIndex, struct FProfileLoadoutSlot LoadoutData );
	void eventSetLastNewsReadTime ( struct FDateTime InDateTime );
	void eventSetAcceptedEULAVersion ( int NewEULAVersion );
	void eventSetSelectedLoadoutIndex ( int NewLoadoutIndex );
	void eventSaveDefaultPurchaseSettings ( struct FProfilePurchaseInfo NewPurchaseData );
	void eventSetGameFilterIndex ( int NewIndex );
	void eventSetToggleCrouch ( unsigned long bEnabled );
	void eventSetAvatarIndex ( int NewValue );
	void eventSetControlSchemeIndex ( int NewValue );
	void eventSetAimAssist ( unsigned long bEnabled );
	void eventSetAutoSwitch ( unsigned long bEnabled );
	void eventSetAutoReload ( unsigned long bEnabled );
	void eventSetTightAimToggleEnabled ( unsigned long bEnabled );
	void eventSetInvertYEnabled ( unsigned long bEnabled );
	void eventSet3DModeEnabled ( unsigned long bEnabled );
	void eventSetSubtitlesEnabled ( unsigned long bEnabled );
	void eventSetMusicVolume ( int Value );
	void eventSetSFXVolume ( int Value );
	void eventSetDialogVolume ( int Value );
	void eventSetSensitivitySetting ( float Value );
	void eventAddInGameTimePlayed ( float NewTime );
	void eventSetGammaLevel ( float Value );
	void eventSetSettingEnabled ( int SettingId, unsigned long bEnabled );
	void eventSetSettingValueInt ( int SettingId, int Value );
	bool eventCheckProfileVersionMismatch ( );
	bool eventRetrieveDefaultPurchaseSettings ( struct FProfilePurchaseInfo* PurchaseData );
	int eventGetGameTypeFilter ( );
	bool eventIsCrouchToggle ( );
	bool CanShowHangerInUI ( class UClass* HangerClass );
	void eventGetLastNewsReadTime ( struct FDateTime* OutDateTime );
	int eventGetAcceptedEULAVersion ( );
	int eventGetSelectedLoadoutIndex ( );
	bool eventRetrieveLoadoutSlot ( int SlotIndex, struct FProfileLoadoutSlot* LoadoutData );
	bool eventHasSeenTutorial ( int Index );
	bool eventRetrieveDepot ( struct FProfileDepotInfo* DepotInfo );
	bool eventRetrieveGear ( struct FProfileGearInfo* GearData );
	struct FQWord MakeQWORD ( int A, int B );
	struct FQWord EncodeEmblem ( struct FProfileEmblemInfo EmblemData );
	bool eventDecodeEmblem ( struct FQWord InData, struct FProfileEmblemInfo* EmblemData );
	bool eventRetrieveDialogPacks ( struct FProfileDialogInfo* DialogData );
	int TauntOffsetToUnlockID ( int OffsetID );
	int TauntUnlockIDToOffset ( int UnlockID );
	bool eventRetrieveTaunts ( struct FProfileTauntInfo* TauntData );
	bool IsHangerUnlocked ( int HangerUnlockID );
	int eventGetAvatarIndex ( );
	int eventGetControlSchemeIndex ( );
	bool eventIsAimAssistToggled ( );
	bool eventIsAutoSwitchToggled ( );
	bool eventIsAutoReloadToggled ( );
	float eventGetSensitivityValue ( );
	float eventGetInGameTimePlayed ( );
	float eventGetGammaValue ( unsigned long bRawValue );
	int eventGetDialogVolume ( );
	int eventGetSFXVolume ( );
	int eventGetMusicVolume ( );
	int eventGetDefaultInt ( int SettingId );
	bool eventIsDefaultSettingEnabled ( int SettingId );
	int eventGetSettingInt ( int SettingId );
	bool eventIsSettingEnabled ( int SettingId );
	bool eventIs3DModeEnabled ( );
	bool eventIsSubtitlesEnabled ( );
	bool eventIsTightAimToggleOn ( );
	bool eventIsMouseYInverted ( );
	void eventSetToDefaults ( );
	int OffsetToUnlockID ( int OffsetID, int StartRange, int EndRange );
	int UnlockIDToOffset ( int UnlockID, int StartRange, int EndRange );
};

UClass* UFoxProfileSettings::pClassPointer = NULL;

// Class FoxGame.FoxProfileSettingsPC
// 0x0018 (0x00A8 - 0x0090)
class UFoxProfileSettingsPC : public UFoxProfileSettings
{
public:
	TArray< struct FName >                             KeyMappingArray;                                  		// 0x0090 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           DigitalButtonActionsToCommandMapping;             		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1566 ];

		return pClassPointer;
	};

	void SetFastHardDrive ( unsigned long bNewFastHardDrive );
	void SetHardDriveScore ( float NewScore );
	float GetHardDriveScore ( );
	bool HasFastHardDrive ( );
	struct FName RetrieveKeyFromCommand ( struct FString Command, unsigned long bPrimaryKey );
	bool StoreBinding ( struct FString Command, struct FName Key, unsigned long bPrimaryKey );
	int GetDBAFromCommand ( struct FString Command );
	int FindKeyEnum ( struct FName KeyName );
	struct FName FindKeyName ( unsigned char KeyEnum );
	void eventSetToDefaults ( );
	bool eventIsPushToTalkEnabled ( );
	void eventSetPushToTalk ( unsigned long bEnabled );
};

UClass* UFoxProfileSettingsPC::pClassPointer = NULL;

// Class FoxGame.FoxRegionInfo
// 0x0030 (0x006C - 0x003C)
class UFoxRegionInfo : public UObject
{
public:
	struct FString                                     LocalizationPackageName;                          		// 0x003C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     NameLocalizationSectionName;                      		// 0x0048 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     DescriptionLocalizationSectionName;               		// 0x0054 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FRegionListEntry >                  RegionList;                                       		// 0x0060 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1567 ];

		return pClassPointer;
	};

	void GetAllRegionEntries ( unsigned long bFilterInvisible, unsigned char RegionID, TArray< struct FRegionListEntry >* OutRegions );
	bool GetRegionEntryFromID ( unsigned char RegionID, struct FRegionListEntry* OutInfo );
};

UClass* UFoxRegionInfo::pClassPointer = NULL;

// Class FoxGame.FoxRemoteInterface
// 0x0008 (0x0044 - 0x003C)
class UFoxRemoteInterface : public UObject
{
public:
	class UClass*                                      InstantKillDamageType;                            		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InstantKillDamageAmount;                          		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1568 ];

		return pClassPointer;
	};

	void KillPlayer ( struct FString PlayerTarget );
	void KickBanPlayer ( struct FString PlayerTarget );
	void KickPlayer ( struct FString PlayerTarget );
	void EndGame ( );
	void EndIntermission ( );
	void BroadcastMessage ( struct FString Message );
};

UClass* UFoxRemoteInterface::pClassPointer = NULL;

// Class FoxGame.FoxServerConnection
// 0x0100 (0x02DC - 0x01DC)
class AFoxServerConnection : public AServerConnection
{
public:
	TArray< int >                                      DefaultTaunts;                                    		// 0x01DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      DefaultHangers;                                   		// 0x01E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      DefaultDialogPacks;                               		// 0x01F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      DefaultBodyCamos;                                 		// 0x0200 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      DefaultWeaponCamos;                               		// 0x020C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      DefaultPresets;                                   		// 0x0218 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      DefaultDepotItems;                                		// 0x0224 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPurchasedItemInfo >                DefaultPurchasedGrenades;                         		// 0x0230 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      DefaultTactical;                                  		// 0x023C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      DefaultBadges;                                    		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      DefaultEmblemIcons;                               		// 0x0254 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      DefaultEmblemColors;                              		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      DefaultReceivers;                                 		// 0x026C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      DefaultScopes;                                    		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      DefaultMagazines;                                 		// 0x0284 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      DefaultStocks;                                    		// 0x0290 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      DefaultBarrels;                                   		// 0x029C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      DefaultMuzzles;                                   		// 0x02A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      DefaultGrips;                                     		// 0x02B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DefaultNumProfileLoadoutSlots;                    		// 0x02C0 (0x0004) [0x0000000000000000]              
	int                                                DefaultHelmet;                                    		// 0x02C4 (0x0004) [0x0000000000000000]              
	int                                                DefaultUpperBody;                                 		// 0x02C8 (0x0004) [0x0000000000000000]              
	int                                                DefaultLowerBody;                                 		// 0x02CC (0x0004) [0x0000000000000000]              
	TArray< struct FStorePurchasedInfo >               PurchasedInfo;                                    		// 0x02D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1569 ];

		return pClassPointer;
	};

	bool IsItemPurchased ( int ItemId, class AFoxPRI* ForPRI );
	bool HasUnlockedSkill ( int SkillID, class AFoxPRI* ForPRI );
	int GetValueFromGems ( unsigned char GemType, class AFoxPRI* ForPRI );
	float GetMultiplierFromGems ( unsigned char GemType, class AFoxPRI* ForPRI );
	void SocketGem ( struct FGemInfo GemInfo, int GemSocketIndex, class AFoxPRI* ForPRI );
	struct FString GetGemSocketGuidForIndex ( int GemSocketIndex );
	TArray< struct FGemSlot > GetSocketedGems ( class AFoxPRI* ForPRI );
	TArray< struct FGemInfo > GetGemInventory ( class AFoxPRI* ForPRI );
	bool HasSkillPointReset ( class AFoxPRI* ForPRI );
	bool HasGenderChange ( class AFoxPRI* ForPRI );
	bool HasNameChange ( class AFoxPRI* ForPRI );
	int GetNumAvailableProfileLoadoutSlots ( class AFoxPRI* ForPRI );
	bool IsTitlePurchased ( int UnlockID, class AFoxPRI* PRI );
	TArray< int > GetPurchasedTitles ( class AFoxPRI* PRI );
	bool IsCrosshairPurchased ( int UnlockID, class AFoxPRI* PRI );
	TArray< int > GetPurchasedCrosshairMods ( class AFoxPRI* PRI );
	bool IsAvatarPurchased ( int UnlockID, class AFoxPRI* PRI );
	TArray< unsigned char > GetPurchasedTaunts ( class AFoxPRI* PRI );
	bool IsDialogPackPurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsHangerPurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsTauntPurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsGripPurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsBarrelPurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsMagazinePurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsScopePurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsStockPurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsMuzzlePurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsReceiverPurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsHelmetPurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsLowerBodyPurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsUpperBodyPurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsEmblemColorPurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsEmblemIconPurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsBadgePurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsTacticalPurchased ( int UnlockID, class AFoxPRI* PRI );
	int GetNumPurchasedGrenades ( int UnlockID, class AFoxPRI* PRI );
	bool IsGrenadePurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsDepotItemPurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsWeaponCamoPurchased ( int CamoID, class AFoxPRI* PRI );
	bool IsBodyCamoPurchased ( int CamoID, class AFoxPRI* PRI );
	bool IsWeaponPresetIDPurchased ( int UnlockID, class AFoxPRI* PRI );
	bool IsWeaponPresetNamePurchased ( struct FString PresetName, class AFoxPRI* PRI );
	void ReApplyTeamBoosts ( );
	void ApplyActivatedItem ( class AFoxPRI* PRI, int ItemId );
	void OnSkillReadComlete ( struct FUniqueNetId ForId, unsigned char LocalUserNum, unsigned long bSuccess, TArray< unsigned char >* SkillData );
	void InventoryQueryComplete ( struct FUniqueNetId ForId, unsigned long bResult, struct FString InventoryData );
	class AFoxPRI* GetPRIFromUniqueID ( struct FUniqueNetId UniqueId );
	void GetPurchasedInfoForPlayer ( class AFoxPRI* OwningPRI, struct FStorePurchasedInfo* OutPurchaseInfo );
	void ApplyInventoryFromCache ( );
	void ApplyReadInventory ( class AFoxPRI* PRI );
	void ResetCachedInventory ( class AFoxPRI* ForPRI );
	void RemoveInfoForPRI ( class AFoxPRI* ForPRI );
	void ClearDelgates ( );
	void SetupDelegates ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
};

UClass* AFoxServerConnection::pClassPointer = NULL;

// Class FoxGame.FoxSkillTreeInfo
// 0x001C (0x0058 - 0x003C)
class UFoxSkillTreeInfo : public UObject
{
public:
	TArray< struct FSkillItemInfo >                    Skills;                                           		// 0x003C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	int                                                PointsToUnlockEachTier[ 0x4 ];                    		// 0x0048 (0x0010) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1570 ];

		return pClassPointer;
	};

	int GetNumSkillPointsFromRank ( int RankIndex );
	TArray< struct FSkillItemInfo > GetSkillsForTier ( int TierIndex );
	TArray< int > GetSkillIDsForTier ( int TierIndex );
	bool GetSkillItemInfoFromNameID ( struct FString SkillName, struct FSkillItemInfo* SkillInfo );
	bool GetSkillItemInfoFromSkillID ( int SkillID, struct FSkillItemInfo* SkillInfo );
};

UClass* UFoxSkillTreeInfo::pClassPointer = NULL;

// Class FoxGame.FoxSmokeLensFlare
// 0x000C (0x01DC - 0x01D0)
class AFoxSmokeLensFlare : public ALensFlareSource
{
public:
	unsigned char                                      CurrentFadeState;                                 		// 0x01D0 (0x0001) [0x0000000000000000]              
	float                                              CurrentTime;                                      		// 0x01D4 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   LensFlareMIC;                                     		// 0x01D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1571 ];

		return pClassPointer;
	};

	void SetLensMaterialParameter ( struct FName ParamName, float Scale );
};

UClass* AFoxSmokeLensFlare::pClassPointer = NULL;

// Class FoxGame.FoxStatsInfo
// 0x00AC (0x0274 - 0x01C8)
class AFoxStatsInfo : public AReplicationInfo
{
public:
	TArray< struct FWeaponStatsStruct >                FoxWeaponStats;                                   		// 0x01C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FVector >                           KillLocations;                                    		// 0x01D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FVector >                           KilledLocations;                                  		// 0x01E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      NumDoubleKills;                                   		// 0x01EC (0x0001) [0x0000000000000000]              
	unsigned char                                      NumTripleKills;                                   		// 0x01ED (0x0001) [0x0000000000000000]              
	unsigned char                                      NumOverKills;                                     		// 0x01EE (0x0001) [0x0000000000000000]              
	unsigned char                                      NumMonsterKills;                                  		// 0x01EF (0x0001) [0x0000000000000000]              
	unsigned char                                      NumKillingSprees;                                 		// 0x01F0 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumDominatingSprees;                              		// 0x01F1 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumUnstoppableSprees;                             		// 0x01F2 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumGodlikeSprees;                                 		// 0x01F3 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumBeastModeSprees;                               		// 0x01F4 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumMeleeKills;                                    		// 0x01F5 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumAssists;                                       		// 0x01F6 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumTeabags;                                       		// 0x01F7 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumFlagCaptures;                                  		// 0x01F8 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumFlagSaves;                                     		// 0x01F9 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumFlagPickups;                                   		// 0x01FA (0x0001) [0x0000000000000000]              
	unsigned char                                      NumDeathsAsFlagCarrier;                           		// 0x01FB (0x0001) [0x0000000000000000]              
	unsigned char                                      NumFlagCarrierKills;                              		// 0x01FC (0x0001) [0x0000000000000000]              
	unsigned char                                      NumKillsDefending;                                		// 0x01FD (0x0001) [0x0000000000000000]              
	unsigned char                                      NumKillsAttacking;                                		// 0x01FE (0x0001) [0x0000000000000000]              
	unsigned char                                      NumMiniGamesCompleted;                            		// 0x01FF (0x0001) [0x0000000000000000]              
	unsigned char                                      NumMiniGamesFailed;                               		// 0x0200 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumCPCaptures;                                    		// 0x0201 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumCPAssists;                                     		// 0x0202 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumBombPlants;                                    		// 0x0203 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumBombDefuse;                                    		// 0x0204 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumCarrierKills;                                  		// 0x0205 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumTargetsDestroyed;                              		// 0x0206 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumTKOTHCaptures;                                 		// 0x0207 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumTKOTHAssists;                                  		// 0x0208 (0x0001) [0x0000000000000000]              
	unsigned char                                      SMGKills;                                         		// 0x0209 (0x0001) [0x0000000000000000]              
	unsigned char                                      AssaultKills;                                     		// 0x020A (0x0001) [0x0000000000000000]              
	unsigned char                                      SniperKills;                                      		// 0x020B (0x0001) [0x0000000000000000]              
	unsigned char                                      ShotgunKills;                                     		// 0x020C (0x0001) [0x0000000000000000]              
	unsigned char                                      BKTKills;                                         		// 0x020D (0x0001) [0x0000000000000000]              
	unsigned char                                      Pistol9MMKills;                                   		// 0x020E (0x0001) [0x0000000000000000]              
	unsigned char                                      Pistol45Kills;                                    		// 0x020F (0x0001) [0x0000000000000000]              
	unsigned char                                      RevolverKills;                                    		// 0x0210 (0x0001) [0x0000000000000000]              
	unsigned char                                      SMGDeaths;                                        		// 0x0211 (0x0001) [0x0000000000000000]              
	unsigned char                                      AssaultDeaths;                                    		// 0x0212 (0x0001) [0x0000000000000000]              
	unsigned char                                      SniperDeaths;                                     		// 0x0213 (0x0001) [0x0000000000000000]              
	unsigned char                                      ShotgunDeaths;                                    		// 0x0214 (0x0001) [0x0000000000000000]              
	unsigned char                                      BKTDeaths;                                        		// 0x0215 (0x0001) [0x0000000000000000]              
	unsigned char                                      Pistol9MMDeaths;                                  		// 0x0216 (0x0001) [0x0000000000000000]              
	unsigned char                                      Pistol45Deaths;                                   		// 0x0217 (0x0001) [0x0000000000000000]              
	unsigned char                                      RevolverDeaths;                                   		// 0x0218 (0x0001) [0x0000000000000000]              
	unsigned char                                      SMGHeadshots;                                     		// 0x0219 (0x0001) [0x0000000000000000]              
	unsigned char                                      AssaultHeadshots;                                 		// 0x021A (0x0001) [0x0000000000000000]              
	unsigned char                                      SniperHeadshots;                                  		// 0x021B (0x0001) [0x0000000000000000]              
	unsigned char                                      ShotgunHeadshots;                                 		// 0x021C (0x0001) [0x0000000000000000]              
	unsigned char                                      BKTHeadshots;                                     		// 0x021D (0x0001) [0x0000000000000000]              
	unsigned char                                      Pistol9MMHeadshots;                               		// 0x021E (0x0001) [0x0000000000000000]              
	unsigned char                                      Pistol45Headshots;                                		// 0x021F (0x0001) [0x0000000000000000]              
	unsigned char                                      RevolverHeadshots;                                		// 0x0220 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumFragThrown;                                    		// 0x0221 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumFlashThrown;                                   		// 0x0222 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumDigiThrown;                                    		// 0x0223 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumProxThrown;                                    		// 0x0224 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumFragKills;                                     		// 0x0225 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumFlashKills;                                    		// 0x0226 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumDigiKills;                                     		// 0x0227 (0x0001) [0x0000000000000000]              
	unsigned char                                      NumProxKills;                                     		// 0x0228 (0x0001) [0x0000000000000000]              
	int                                                NumMeleeAttempts;                                 		// 0x022C (0x0004) [0x0000000000000000]              
	int                                                MeleeDamageDealt;                                 		// 0x0230 (0x0004) [0x0000000000000000]              
	int                                                SMGRoundsFired;                                   		// 0x0234 (0x0004) [0x0000000000000000]              
	int                                                AssaultRoundsFired;                               		// 0x0238 (0x0004) [0x0000000000000000]              
	int                                                SniperRoundsFired;                                		// 0x023C (0x0004) [0x0000000000000000]              
	int                                                ShotgunRoundsFired;                               		// 0x0240 (0x0004) [0x0000000000000000]              
	int                                                BKTRoundsFired;                                   		// 0x0244 (0x0004) [0x0000000000000000]              
	int                                                Pistol9MMRoundsFired;                             		// 0x0248 (0x0004) [0x0000000000000000]              
	int                                                Pistol45RoundsFired;                              		// 0x024C (0x0004) [0x0000000000000000]              
	int                                                RevolverRoundsFired;                              		// 0x0250 (0x0004) [0x0000000000000000]              
	int                                                SMGRoundsHit;                                     		// 0x0254 (0x0004) [0x0000000000000000]              
	int                                                AssaultRoundsHit;                                 		// 0x0258 (0x0004) [0x0000000000000000]              
	int                                                SniperRoundsHit;                                  		// 0x025C (0x0004) [0x0000000000000000]              
	int                                                ShotgunRoundsHit;                                 		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                BKTRoundsHit;                                     		// 0x0264 (0x0004) [0x0000000000000000]              
	int                                                Pistol9MMRoundsHit;                               		// 0x0268 (0x0004) [0x0000000000000000]              
	int                                                Pistol45RoundsHit;                                		// 0x026C (0x0004) [0x0000000000000000]              
	int                                                RevolverRoundsHit;                                		// 0x0270 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1572 ];

		return pClassPointer;
	};

	void IncrementMultiKill ( int MultiKillType );
	void IncrementKillSpree ( int KillSpreeType );
	void IncrementWeaponStatsDamageDealt ( class UClass* DamageType, float Damage );
	void IncrementWeaponHeadshots ( class UClass* WeaponClass );
	void IncrementWeaponStatsRoundsHit ( class UClass* WeaponClass );
	void IncrementWeaponStatRoundsFired ( class UClass* WeaponClass );
	void IncrementWeaponStatDeaths ( class UClass* WeaponClass );
	void IncrementKillStatsByDamageType ( class UClass* inDamageType );
	void RegisterWeapons ( );
};

UClass* AFoxStatsInfo::pClassPointer = NULL;

// Class FoxGame.FoxStatTypes
// 0x0000 (0x003C - 0x003C)
class UFoxStatTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1573 ];

		return pClassPointer;
	};

};

UClass* UFoxStatTypes::pClassPointer = NULL;

// Class FoxGame.FoxStoreMetaData
// 0x0000 (0x003C - 0x003C)
class UFoxStoreMetaData : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1574 ];

		return pClassPointer;
	};

	int GetNumPriceLevels ( );
	int GetNumCurrencyTypes ( );
	void GetCheapestPriceForCurrency ( unsigned char CurrencyType, struct FStoreMetaData* ItemMeta, int* Price, int* Index );
	void GetCheapestPrice ( struct FStoreMetaData* ItemMeta, int* Price, unsigned char* CurrencyType, int* Index );
	bool IsRenewable ( struct FStoreMetaData* StoreItem );
	bool IsPurchasable ( struct FStoreMetaData* StoreItem );
	TArray< struct FStoreTagMetaData > ParseTagsFromXML ( struct FString InXMLData );
	TArray< struct FStoreOfferMetaData > ParseOffersFromXML ( struct FString InXMLData );
	TArray< struct FStoreMetaData > ParseItemsFromXML ( struct FString InXMLData, struct FDateTime* NextRefreshTime );
};

UClass* UFoxStoreMetaData::pClassPointer = NULL;

// Class FoxGame.FoxTeamBalance
// 0x0034 (0x0070 - 0x003C)
class UFoxTeamBalance : public UObject
{
public:
	TArray< class AFoxPC* >                            PCList;                                           		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPCGroup >                          GroupList;                                        		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              MaxSkillDifference;                               		// 0x0054 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bForceAcceptTeam : 1;                             		// 0x0058 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              MostSkilledPlayer;                                		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                LoopCounter;                                      		// 0x0060 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __PCGroupSortDelegate__Delegate;                  		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1575 ];

		return pClassPointer;
	};

	void DebugTeamBalance ( );
	int PCGroupSortDelegate ( struct FPCGroup A, struct FPCGroup B );
	float CalculateSkill ( TArray< int > TryTeam );
	int CalculateSize ( TArray< int > TryTeam );
	bool TryBalanceTeams ( int TotalPlayers, float TeamGoalSkill, TArray< int >* BestTeam );
	void SplitIntoTeams ( );
	void AssignGroups ( unsigned long bGroupClans );
};

UClass* UFoxTeamBalance::pClassPointer = NULL;

// Class FoxGame.FoxTypes
// 0x0000 (0x003C - 0x003C)
class UFoxTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1576 ];

		return pClassPointer;
	};

};

UClass* UFoxTypes::pClassPointer = NULL;

// Class FoxGame.FoxUIInteraction
// 0x0000 (0x0168 - 0x0168)
class UFoxUIInteraction : public UUIInteraction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1577 ];

		return pClassPointer;
	};

};

UClass* UFoxUIInteraction::pClassPointer = NULL;

// Class FoxGame.FoxUnlockInfo
// 0x036C (0x03D8 - 0x006C)
class UFoxUnlockInfo : public USettings
{
public:
	TArray< int >                                      HiddenUnlocks;                                    		// 0x006C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< unsigned char >                            DefaultUnlockTypes;                               		// 0x0078 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      DefaultUnlocks;                                   		// 0x0084 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FScoreRank >                        RankData;                                         		// 0x0090 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FProfileFlagUnlock >                ProfileFlagUnlocks;                               		// 0x009C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FTitleUnlockInfo >                  TitleUnlocks;                                     		// 0x00A8 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FEmblemLayerUnlockInfo >            EmblemIconUnlocks;                                		// 0x00B4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FEmblemLayerUnlockInfo >            EmblemAlphaUnlocks;                               		// 0x00C0 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FEmblemLayerUnlockInfo >            EmblemShapeUnlocks;                               		// 0x00CC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FEmblemLayerUnlockInfo >            EmblemBackgroundUnlocks;                          		// 0x00D8 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FEmblemLayerUnlockInfo >            EmblemColorUnlocks;                               		// 0x00E4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FDialogPackUnlockInfo >             DialogPackAnnouncerUnlocks;                       		// 0x00F0 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FDialogPackUnlockInfo >             DialogPackPlayerUnlocks;                          		// 0x00FC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FPackUnlockInfo >                   PackUnlocks;                                      		// 0x0108 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FFoxWeaponPresetInfo >              WeaponPresets;                                    		// 0x0114 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FFoxWeaponPresetInfo >              SecondaryWeaponPresets;                           		// 0x0120 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FFoxWeaponPresetInfo >              DefaultWeaponPresets;                             		// 0x012C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FFoxDepotPresetInfo >               DepotPresets;                                     		// 0x0138 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCamoUnlockInfo >                   BodyCamoUnlocks;                                  		// 0x0144 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCamoUnlockInfo >                   WeaponCamoUnlocks;                                		// 0x0150 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FComicUnlockInfo >                  ComicUnlocks;                                     		// 0x015C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FXPBoostUnlockInfo >                XPBoostUnlocks;                                   		// 0x0168 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCPBoostUnlockInfo >                CPBoostUnlocks;                                   		// 0x0174 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FGPBoostUnlockInfo >                GPBoostUnlocks;                                   		// 0x0180 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FGPTokenUnlockInfo >                GPTokens;                                         		// 0x018C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FXPTokenUnlockInfo >                XPTokens;                                         		// 0x0198 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FPMTokenUnlockInfo >                PMTokens;                                         		// 0x01A4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FTKTokenUnlockInfo >                TKTokens;                                         		// 0x01B0 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FKeyUnlockInfo >                    KeyUnlocks;                                       		// 0x01BC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FLockboxUnlockInfo >                LockboxUnlocks;                                   		// 0x01C8 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FTauntUnlockInfo >                  TauntUnlocks;                                     		// 0x01D4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ExtraProfileLoadoutSlotFriendlyName;              		// 0x01E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ExtraProfileLoadoutSlotDescription;               		// 0x01EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ExtraProfileLoadoutSlotTag;                       		// 0x01F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ExtraProfileLoadoutSlotToolTip;                   		// 0x0204 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ExtraProfileLoadoutSlotIconRef;                   		// 0x0210 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NameChangeFriendlyName;                           		// 0x021C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NameChangeDescription;                            		// 0x0228 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NameChangeTag;                                    		// 0x0234 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NameChangeToolTip;                                		// 0x0240 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NameChangeIconRef;                                		// 0x024C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     GenderChangeFriendlyName;                         		// 0x0258 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GenderChangeDescription;                          		// 0x0264 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GenderChangeTag;                                  		// 0x0270 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GenderChangeToolTip;                              		// 0x027C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GenderChangeIconRef;                              		// 0x0288 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     SkillPointResetFriendlyName;                      		// 0x0294 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SkillPointResetFriendlyTag;                       		// 0x02A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SkillPointResetDescription;                       		// 0x02AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SkillPointResetToolTip;                           		// 0x02B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SkillPointResetIconRef;                           		// 0x02C4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     SkillPointFriendlyName;                           		// 0x02D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SkillPointDescription;                            		// 0x02DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SkillPointTag;                                    		// 0x02E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SkillPointToolTip;                                		// 0x02F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SkillPointIconRef;                                		// 0x0300 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RegisterClanFriendlyName;                         		// 0x030C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RegisterClanDescription;                          		// 0x0318 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RegisterClanFriendlyTag;                          		// 0x0324 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RegisterClanToolTip;                              		// 0x0330 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RegisterClanIconRef;                              		// 0x033C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     BlindBoxGemFriendlyName;                          		// 0x0348 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BlindBoxGemDescription;                           		// 0x0354 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BlindBoxGemFriendlyTag;                           		// 0x0360 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BlindBoxGemIconRef;                               		// 0x036C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CharClassIconRef;                                 		// 0x0378 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     BadgeIconRef;                                     		// 0x0384 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CamoIconRef;                                      		// 0x0390 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     HangerIconRef;                                    		// 0x039C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RankUpIconRef;                                    		// 0x03A8 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PresetIconRef;                                    		// 0x03B4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PackIconRef;                                      		// 0x03C0 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     LocalizationFileName;                             		// 0x03CC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1578 ];

		return pClassPointer;
	};

	unsigned char GetUnlockTypeFromID ( int ItemId );
	bool IsBoostForTeam ( int BoostUnlockID );
	float GetBoostMultiplierFromID ( int BoostUnlockID );
	bool IsForceUnlocked ( int UnlockID );
	bool IsGearUnlockedBySkill ( class UFoxDataProvider_GearInfo* GearProvider, class AFoxPRI* PRI );
	bool IsGearIDLockedBySkill ( int GearUnlockID, class AFoxPRI* PRI );
	int GetNumUnlockedLoadoutSlots ( class AFoxPRI* ForPRI );
	int GetNumUnlockedOfItem ( int UnlockID, class AFoxPRI* ForPRI );
	int GetNumAvailableGear ( int GearUnlockID, class AFoxPRI* PRI );
	bool CanUseDialogPackForGender ( int UnlockID, unsigned char PlayerGender );
	class UAkEvent* GetDialogPreviewEvent ( int UnlockID, unsigned char PlayerGender );
	struct FString GetDialogNameFromUnlockID ( int UnlockID, unsigned char PlayerGender );
	struct FString GetPreviewAssetPathFromUnlockID ( int UnlockID );
	bool ShouldTauntPlayParticleFX ( unsigned char SpecialMoveType );
	int GetUnlockIDFromTauntEnum ( unsigned char TauntEnum );
	unsigned char GetTauntEnumFromUnlockID ( int UnlockID );
	void GetUnlocksForEmblemLayer ( unsigned char UnlockType, TArray< int >* Unlocks );
	bool IsRandomHangerUnlocked ( class UClass* HangerClass, class UFoxProfileSettings* ProfileSettings );
	int GetUnlockIdFromString ( struct FString UnlockName );
	struct FString MarkupIcon ( struct FString IconRef );
	struct FString GetImageIconRefFromInfo ( struct FBaseUnlockInfo* ItemUnlockInfo );
	struct FString GetUnlockLocalizedStringFromKey ( struct FString Key, struct FString SectionName );
	int GetParentIDFromInfo ( struct FBaseUnlockInfo* ItemUnlockInfo );
	struct FString GetTooltipFromInfo ( struct FBaseUnlockInfo* ItemUnlockInfo );
	struct FString GetTagFromInfo ( struct FBaseUnlockInfo* ItemUnlockInfo );
	struct FString GetDescriptionFromInfo ( struct FBaseUnlockInfo* ItemUnlockInfo );
	struct FString GetFriendlyNameFromInfo ( struct FBaseUnlockInfo* ItemUnlockInfo );
	void GetUnlockInfoFromBaseInfo ( struct FBaseUnlockInfo ItemUnlockInfo, struct FString* FriendlyName, struct FString* IconRef, struct FString* Description, struct FString* FriendlyTag, struct FString* FriendlyToolTip, int* ParentID );
	void GetUnlockInfoFromUnlockProvider ( class UFoxDataProvider_Unlockable* Provider, struct FString* FriendlyName, struct FString* IconRef, struct FString* Description, struct FString* FriendlyTag, struct FString* FriendlyToolTip, int* ParentID );
	bool GetUnlockInfoFromProvider ( int UnlockID, struct FString* FriendlyName, struct FString* IconRef, struct FString* Description, struct FString* FriendlyTag, struct FString* FriendlyToolTip, int* ParentID );
	void GetUnlockInfoFromWeaponMod ( class UFoxWeaponModObjectBase* WeaponMod, struct FString* FriendlyName, struct FString* IconRef, struct FString* Description, struct FString* FriendlyTag, struct FString* FriendlyToolTip, int* ParentID );
	void GetUnlockInfoFromWeapon ( class AFoxWeapon* Weapon, struct FString* FriendlyName, struct FString* IconRef, struct FString* Description, struct FString* FriendlyTag, struct FString* FriendlyToolTip, int* ParentID );
	bool GetUnlockInfoForCachedItem ( int UnlockID, struct FString* FriendlyName, struct FString* IconRef, struct FString* Description, struct FString* FriendlyTag, struct FString* FriendlyToolTip, int* ParentID );
	bool GetUnlockIDsFromParentID ( int ParentID, TArray< int >* UnlockIDs );
	bool GetUnlockInfoFromID ( int UnlockID, struct FString* FriendlyName, struct FString* IconRef, struct FString* Description, struct FString* FriendlyTag, struct FString* FriendlyToolTip, int* ParentID );
	unsigned char GetItemPurchasedStateFromInventoryItem ( struct FInventoryMetaData InventoryItem, class AFoxPRI* PlayerReplicationInfo );
	unsigned char GetItemPurchasedStateFromID ( int UnlockID, class AFoxPRI* PlayerReplicationInfo, int NumUsed, unsigned long bUseCachedInventory, struct FInventoryMetaData* InventoryItem );
	unsigned char GetItemUnlockedStateFromStoreItem ( class AFoxPRI* PlayerReplicationInfo, struct FStoreMetaData* StoreItem, int* RequiredRank, int* RequiredSkill, int* RequiredProfileFlag );
	unsigned char GetItemUnlockedStateFromID ( int UnlockID, class AFoxPRI* PlayerReplicationInfo, unsigned long bUseCachedStore, int* RequiredRank, int* RequiredSkill, int* RequiredProfileFlag, struct FStoreMetaData* StoreItem );
	bool GetUnlockCriteria ( int UnlockID, int* RequiredRank, int* RequiredSkill, int* RequiredProfileFlag );
	struct FString GetCategoryIconFromID ( int UnlockID );
	int GetProfileFlagItemUnlocksAt ( int UnlockID );
	int GetRankItemIsGiftedAt ( int UnlockID );
	int GetRankItemUnlocksAt ( int UnlockID );
	bool eventIsItemUnlockedForProfileFlag ( int UnlockID, int ProfileFlag );
	bool IsItemGiftedForRank ( int UnlockID, int Rank, int* RequiredRank );
	bool IsItemUnlockedForRank ( int UnlockID, int Rank, int* RequiredRank );
	bool IsItemHidden ( int UnlockID );
	bool IsItemDefault ( int UnlockID );
	void GetWeaponCamoTexture ( int CamoIndex, class UTexture** BaseTexture, int* NumTiles );
	void GetBodyCamoTextures ( int CamoIndex, class UTexture** BaseTexture, int* NumTiles );
	struct FString GetRankIconRef ( int RankIndex, int EmblemID );
	void GetEmblemColorParam ( int EmblemIndex, struct FLinearColor* BaseColor );
	void GetEmblemTextureParam ( int UnlockID, class UTexture** BaseTexture, float* bColorOverride );
	int GetEmblemShapeID ( int UnlockID );
	int GetEmblemComponentIndexFromUnlockID ( int UnlockID );
	bool GetEmblemComponentFromUnlockID ( int UnlockID, struct FString* ComponentValue, int* bColorOverride );
	struct FString GetTitleFromUnlockID ( int UnlockID, int RankIndex );
	struct FString GetRankNameFromIndex ( int Index );
	TArray< int > GetGiftedItemsFromRank ( int RankIndex );
	TArray< int > GetUnlockIDsFromRank ( int RankIndex );
	float CalcRankPercentageRawRank ( int Rank );
	int eventCalcRankIndexFromRawRank ( int Rank );
	struct FFoxWeaponPresetInfo GetDefaultPresetForWeapon ( class UClass* WeaponClass );
	void GetDepotPresetClasses ( struct FFoxDepotPresetInfo Preset, class UClass** WeaponClass, class UClass** BarrelClass, class UClass** MuzzleClass, class UClass** ScopeClass, class UClass** StockClass, unsigned char* MagazineIndex, class UClass** GripClass, class UClass** AmmoClass );
	void GetPresetClasses ( struct FFoxWeaponPresetInfo Preset, class UClass** WeaponClass, class UClass** BarrelClass, class UClass** MuzzleClass, class UClass** ScopeClass, class UClass** StockClass, class UClass** MagazineClass, class UClass** GripClass );
	bool CanWeaponTypeBeUnlocked ( class UClass* WeaponClass );
	void GetDefaultPresetForWeaponClass ( class UClass* WeaponClass, struct FFoxWeaponPresetInfo* Preset );
	void GetUnlockablePresetListForWeapon ( class UClass* WeaponClass, TArray< struct FFoxWeaponPresetInfo >* PresetList );
	TArray< struct FFoxWeaponPresetInfo > GetPresetListForWeapon ( class UClass* WeaponClass );
	struct FFoxDepotPresetInfo GetDepotPresetFromID ( int UnlockID );
	int GetWeaponCamoIndexFromID ( int UnlockID );
	int GetBodyCamoIndexFromID ( int UnlockID );
	struct FString GetDepotPresetFriendlyNameFromWeapon ( class UClass* WeaponClass, struct FString* FriendlyTag, struct FString* IconRef );
	bool GetDepotPresetFromName ( struct FString PresetName, struct FFoxDepotPresetInfo* PresetInfo );
	bool GetPresetFromName ( struct FString PresetName, struct FFoxWeaponPresetInfo* PresetInfo );
	bool eventDoesPresetContainMod ( class UClass* ModClass, int PresetIndex );
	bool eventDoesPresetContainWeapon ( class UClass* WeaponClass, int PresetIndex );
	int GetRankWeaponUnlocksAt ( class UClass* WeaponClass );
	bool IsReceiverUnlocked ( class UClass* WeaponClass, class AFoxPRI* PRI );
	int NativeGetRankModIsUnlockedAt ( class UClass* WeaponModClass, class UClass* WeaponClass );
	int GetRankModIsUnlockedAt ( class UClass* WeaponModClass, class UClass* WeaponClass );
	bool NativeIsWeaponModUnlockedForWeaponAtRank ( class UClass* WeaponModClass, class UClass* WeaponClass, int RankIndex );
	bool NativeIsWeaponModUnlockedForWeapon ( class UClass* WeaponModClass, class UClass* WeaponClass, int Rank );
	bool IsWeaponModUnlockedForWeapon ( class UClass* WeaponModClass, class UClass* WeaponClass, int Rank );
	int eventGetExperienceCap ( );
	bool GetUnlocksForUnlockType ( unsigned char UnlockType, TArray< int >* Unlocks );
};

UClass* UFoxUnlockInfo::pClassPointer = NULL;

// Class FoxGame.FoxVisorSMActor
// 0x0010 (0x0214 - 0x0204)
class AFoxVisorSMActor : public ADynamicSMActor
{
public:
	float                                              DistFromCam;                                      		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFoxVisorStaticMeshComponent*                VisorComp;                                        		// 0x0208 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       VisorColorParameterName;                          		// 0x020C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1579 ];

		return pClassPointer;
	};

	void BumpVisor ( struct FRotator Force );
	void TickVisor ( struct FVector InLocation, struct FRotator InRotation, float InFOV, float DT );
	void SetHudColor ( struct FLinearColor InColor );
	void ResetMaterials ( );
	void OverrideMaterials ( class UMaterialInstance* MainMaterial, TArray< class UMaterial* > AdditionalMaterials );
	void ChangeVisorScale ( struct FVector InScale );
	void SetNewVisor ( class UStaticMesh* InMesh, float InDistFromCamera, struct FVector InScale, unsigned long InbOverrideWithPawnMaterials );
	void UpdateLocation ( struct FVector CamLocation, struct FRotator CamRotation, float CamFOVDeg );
};

UClass* AFoxVisorSMActor::pClassPointer = NULL;

// Class FoxGame.FoxVisorStaticMeshComponent
// 0x0080 (0x02D4 - 0x0254)
class UFoxVisorStaticMeshComponent : public UStaticMeshComponent
{
public:
	struct FVector                                     HudMeshOffset;                                    		// 0x0254 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    HudMeshRotation;                                  		// 0x0260 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    LastPushRotation;                                 		// 0x026C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HudMeshScale;                                     		// 0x0278 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableHudSpring : 1;                             		// 0x0284 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOverrideWithPawnMaterials : 1;                   		// 0x0284 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bScaleForAspectRatio : 1;                         		// 0x0284 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FRotator                                    LastCameraRotation;                               		// 0x0288 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FRotator                                    LastHudRotVelocity;                               		// 0x0294 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FRotator                                    HudMeshForce;                                     		// 0x02A0 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              HudSpringConstant;                                		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HudDampingFactor;                                 		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HudMeshForceDamping;                              		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HudMass;                                          		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxHudMousePushX;                                 		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MousePushConstant;                                		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AspectRatioFactor;                                		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotationDiffClamp;                                		// 0x02C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1580 ];

		return pClassPointer;
	};

	void BumpHudMesh ( struct FRotator Force );
	struct FRotator MousePush ( class AFoxPC* PC, struct FRotator* FSpringOut );
	void TickMesh ( class AFoxPC* PC, float DT );
};

UClass* UFoxVisorStaticMeshComponent::pClassPointer = NULL;

// Class FoxGame.FoxVoice
// 0x0060 (0x009C - 0x003C)
class UFoxVoice : public UObject
{
public:
	TArray< struct FUniqueNetId >                      LocalMutedPlayers;                                		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      LiveMutedPlayers;                                 		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      PrivilegeMutedPlayers;                            		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      IgnoredPlayers;                                   		// 0x0060 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      GameplayMutedPlayers;                             		// 0x006C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      CurrentMutedPlayers;                              		// 0x0078 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      QueuedMutePlayers;                                		// 0x0084 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bPushToTalk : 1;                                  		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 
	class UAkEvent*                                    PushToTalkAkSound;                                		// 0x0094 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UFoxDataStore_MenuItems*                     MenuItemsDataStore;                               		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1581 ];

		return pClassPointer;
	};

	bool IsMutable ( );
	void UnMutePlayer ( struct FUniqueNetId UniqueId );
	void MutePlayer ( struct FUniqueNetId UniqueId );
	bool IsPlayerInMuteList ( struct FUniqueNetId UniqueId );
	bool ShouldMuteInUI ( struct FUniqueNetId UniqueId );
	bool eventIsPlayerMuted ( struct FUniqueNetId* Sender );
	bool RemovePlayerFromGameplayMuteList ( struct FUniqueNetId UniqueId );
	bool RemovePlayerFromIgnoreList ( struct FUniqueNetId UniqueId );
	bool RemovePlayerFromPrivilegeMuteList ( struct FUniqueNetId UniqueId );
	bool RemovePlayerFromLiveMuteList ( struct FUniqueNetId UniqueId );
	bool RemovePlayerFromLocalMuteList ( struct FUniqueNetId UniqueId );
	bool AddPlayerToGamePlayMuteList ( struct FUniqueNetId UniqueId );
	bool AddPlayerToIgnoreList ( struct FUniqueNetId UniqueId );
	bool AddPlayerToPrivilegeMuteList ( struct FUniqueNetId UniqueId );
	bool AddPlayerToLiveMuteList ( struct FUniqueNetId UniqueId );
	bool AddPlayerToLocalMuteList ( struct FUniqueNetId UniqueId );
	bool IsPlayerGameplayMuted ( struct FUniqueNetId UniqueId );
	bool IsPlayerIgnored ( struct FUniqueNetId UniqueId );
	bool IsPlayerPrivilegeMuted ( struct FUniqueNetId UniqueId );
	bool IsPlayerLiveMuted ( struct FUniqueNetId UniqueId );
	bool IsPlayerLocallyMuted ( struct FUniqueNetId UniqueId );
	bool IsInMuteList ( TArray< struct FUniqueNetId >* IDList, struct FUniqueNetId* UniqueId );
	void ConditionalUnmutePair ( unsigned long bWasMuted, struct FUniqueNetId OtherID );
	void ConditionalMutePair ( unsigned long bWasMuted, struct FUniqueNetId OtherID );
	void GameplayUnmutePlayer ( struct FUniqueNetId UniqueId );
	void GameplayMutePlayer ( struct FUniqueNetId UniqueId );
	void ServerSideUnIgnorePlayer ( struct FUniqueNetId UniqueId );
	void UnIgnorePlayer ( struct FUniqueNetId UniqueId );
	void ServerSideIgnorePlayer ( struct FUniqueNetId UniqueId );
	void IgnorePlayer ( struct FUniqueNetId UniqueId );
	void ServerSidePrivilegeUnmutePLayer ( struct FUniqueNetId UniqueId );
	void PrivilegeUnmutePlayer ( struct FUniqueNetId UniqueId );
	void ServerSidePrivilegeMutePlayer ( struct FUniqueNetId UniqueId );
	void PrivilegeMutePlayer ( struct FUniqueNetId UniqueId );
	void ServerSideLiveUnmutePLayer ( struct FUniqueNetId UniqueId );
	void LiveUnmutePlayer ( struct FUniqueNetId UniqueId );
	void ServerSideLiveMutePlayer ( struct FUniqueNetId UniqueId );
	void LiveMutePlayer ( struct FUniqueNetId UniqueId );
	void ServerSideUnmuteAll ( );
	void LocalUnMuteAll ( );
	void ServerSideMuteAll ( );
	void LocalMuteAll ( );
	void ServerSideLocalUnmutePlayer ( struct FUniqueNetId UniqueId );
	void LocalUnmutePlayer ( struct FUniqueNetId UniqueId );
	void ServerSideLocalMutePlayer ( struct FUniqueNetId UniqueId );
	void LocalMutePlayer ( struct FUniqueNetId UniqueId );
	void UpdateLocalMuteListFor ( struct FUniqueNetId UniqueId );
	void NotifyRemoteTalkerRegistered ( struct FUniqueNetId UniqueId );
	void ClientSideNotifyPRIDestroyed ( class APlayerReplicationInfo* PRI );
	void ServerSideNotifyPRIDestroyed ( class AFoxPRI* PRI );
	void NotifyIsMutable ( );
	void eventToggleVoice ( unsigned long bTurnOffVoice );
};

UClass* UFoxVoice::pClassPointer = NULL;

// Class FoxGame.FoxActorFactoryAI
// 0x0010 (0x0098 - 0x0088)
class UFoxActorFactoryAI : public UActorFactoryAI
{
public:
	unsigned char                                      AIEntryType;                                      		// 0x0088 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       AIProviderName;                                   		// 0x008C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bRespawnAfterDeath : 1;                           		// 0x0094 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1582 ];

		return pClassPointer;
	};

};

UClass* UFoxActorFactoryAI::pClassPointer = NULL;

// Class FoxGame.FoxActorFactory_CustomAI
// 0x0004 (0x009C - 0x0098)
class UFoxActorFactory_CustomAI : public UFoxActorFactoryAI
{
public:
	class UFoxAIHierarchicalAbility*                   BaseAbility;                                      		// 0x0098 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1583 ];

		return pClassPointer;
	};

};

UClass* UFoxActorFactory_CustomAI::pClassPointer = NULL;

// Class FoxGame.FoxActorFactorySquad
// 0x0024 (0x0080 - 0x005C)
class UFoxActorFactorySquad : public UActorFactory
{
public:
	struct FString                                     SquadName;                                        		// 0x005C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      SquadTeam;                                        		// 0x0068 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      SquadBehavior;                                    		// 0x0069 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UFoxAISquadFormation*                        SquadFormation;                                   		// 0x006C (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	int                                                SquadLeaderIndex;                                 		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FSquadMemberConstructionInfo >      SquadMembers;                                     		// 0x0074 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1584 ];

		return pClassPointer;
	};

};

UClass* UFoxActorFactorySquad::pClassPointer = NULL;

// Class FoxGame.FoxAICondition
// 0x0008 (0x0044 - 0x003C)
class UFoxAICondition : public UObject
{
public:
	float                                              Weight;                                           		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNegateResult : 1;                                		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1585 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_Bumped
// 0x0000 (0x0044 - 0x0044)
class UFoxAICondition_Bumped : public UFoxAICondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1586 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_Bumped::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_Constant
// 0x0004 (0x0048 - 0x0044)
class UFoxAICondition_Constant : public UFoxAICondition
{
public:
	unsigned long                                      bEvaluatesTo : 1;                                 		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1587 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_Constant::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_CurrentWeaponType
// 0x0001 (0x0045 - 0x0044)
class UFoxAICondition_CurrentWeaponType : public UFoxAICondition
{
public:
	unsigned char                                      CheckWeaponType;                                  		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1588 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_CurrentWeaponType::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_DeadBodyThreat
// 0x0008 (0x004C - 0x0044)
class UFoxAICondition_DeadBodyThreat : public UFoxAICondition
{
public:
	float                                              DeadBodyWeight;                                   		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DeadBodyMaxRangeSquared;                          		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1589 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_DeadBodyThreat::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_EnemyFire
// 0x0000 (0x0044 - 0x0044)
class UFoxAICondition_EnemyFire : public UFoxAICondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1590 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_EnemyFire::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_EnemyRangeFuzzy
// 0x0010 (0x0054 - 0x0044)
class UFoxAICondition_EnemyRangeFuzzy : public UFoxAICondition
{
public:
	float                                              MinRange;                                         		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRange;                                         		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IdealRange;                                       		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RangeExp;                                         		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1591 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_EnemyRangeFuzzy::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_EnemySeen
// 0x0004 (0x0048 - 0x0044)
class UFoxAICondition_EnemySeen : public UFoxAICondition
{
public:
	float                                              HowRecently;                                      		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1592 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_EnemySeen::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_FiredAt
// 0x0004 (0x0048 - 0x0044)
class UFoxAICondition_FiredAt : public UFoxAICondition
{
public:
	float                                              NearMissTime;                                     		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1593 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_FiredAt::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_FriendlyFire
// 0x0000 (0x0044 - 0x0044)
class UFoxAICondition_FriendlyFire : public UFoxAICondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1594 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_FriendlyFire::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_Group
// 0x000D (0x0051 - 0x0044)
class UFoxAICondition_Group : public UFoxAICondition
{
public:
	TArray< class UFoxAICondition* >                   Conditions;                                       		// 0x0044 (0x000C) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned char                                      Operation;                                        		// 0x0050 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1595 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_Group::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_HasCoverChoice
// 0x0000 (0x0044 - 0x0044)
class UFoxAICondition_HasCoverChoice : public UFoxAICondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1596 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_HasCoverChoice::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_HasEnemy
// 0x0000 (0x0044 - 0x0044)
class UFoxAICondition_HasEnemy : public UFoxAICondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1597 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_HasEnemy::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_HasPathToTarget
// 0x0000 (0x0044 - 0x0044)
class UFoxAICondition_HasPathToTarget : public UFoxAICondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1598 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_HasPathToTarget::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_HeardFirefight
// 0x0000 (0x0044 - 0x0044)
class UFoxAICondition_HeardFirefight : public UFoxAICondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1599 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_HeardFirefight::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_HRVReady
// 0x0000 (0x0044 - 0x0044)
class UFoxAICondition_HRVReady : public UFoxAICondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1600 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_HRVReady::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_IsInCover
// 0x0004 (0x0048 - 0x0044)
class UFoxAICondition_IsInCover : public UFoxAICondition
{
public:
	unsigned long                                      bInCover : 1;                                     		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1601 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_IsInCover::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_KilledEnemy
// 0x0004 (0x0048 - 0x0044)
class UFoxAICondition_KilledEnemy : public UFoxAICondition
{
public:
	float                                              HowRecently;                                      		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1602 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_KilledEnemy::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_TargetAligned
// 0x0005 (0x0049 - 0x0044)
class UFoxAICondition_TargetAligned : public UFoxAICondition
{
public:
	float                                              Accuracy;                                         		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TargetAlignmentType;                              		// 0x0048 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1603 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_TargetAligned::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_TargetDirection
// 0x0008 (0x004C - 0x0044)
class UFoxAICondition_TargetDirection : public UFoxAICondition
{
public:
	unsigned char                                      TargetRangeType;                                  		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Comparison;                                       		// 0x0045 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              Accuracy;                                         		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1604 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_TargetDirection::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_TargetRange
// 0x0008 (0x004C - 0x0044)
class UFoxAICondition_TargetRange : public UFoxAICondition
{
public:
	unsigned char                                      TargetRangeType;                                  		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Comparison;                                       		// 0x0045 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              Range;                                            		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1605 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_TargetRange::pClassPointer = NULL;

// Class FoxGame.FoxAICondition_TargetThreat
// 0x000C (0x0050 - 0x0044)
class UFoxAICondition_TargetThreat : public UFoxAICondition
{
public:
	float                                              TargetBeyondEnemyWeight;                          		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AdvanceWeight;                                    		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RetreatWeight;                                    		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1606 ];

		return pClassPointer;
	};

};

UClass* UFoxAICondition_TargetThreat::pClassPointer = NULL;

// Class FoxGame.FoxAIControllerInterface
// 0x00C0 (0x0448 - 0x0388)
class AFoxAIControllerInterface : public AAIController
{
public:
	class AFoxPawn*                                    MyFoxPawn;                                        		// 0x0388 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxPawn*                                    LastKilledPawn;                                   		// 0x038C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastKilledPawnTime;                               		// 0x0390 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastBumpedTime;                                   		// 0x0394 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bRespawnAfterDeath : 1;                           		// 0x0398 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAIActive : 1;                                    		// 0x0398 (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bBehaviorTickSleep : 1;                           		// 0x0398 (0x0004) [0x0000000000002001] [0x00000004] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bAnchoredMode : 1;                                		// 0x0398 (0x0004) [0x0000000000002001] [0x00000008] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bDEBUG_CoverChoices : 1;                          		// 0x0398 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	TArray< struct FManualLookTarget >                 ManualLookTargets;                                		// 0x039C (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	int                                                MinLookTargetPriority;                            		// 0x03A8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	TArray< class AFoxPawn* >                          NearbyEnemies;                                    		// 0x03AC (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	TArray< class UFoxAIHierarchicalAbility* >         Behaviors;                                        		// 0x03B8 (0x000C) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UFoxAIHierarchicalAbility*                   DefaultBehavior;                                  		// 0x03C4 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UFoxAIHierarchicalAbility*                   ScriptedBehavior;                                 		// 0x03C8 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              EvaluationInterval;                               		// 0x03CC (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UFoxAIHierarchicalAbility*                   CurrentBehavior;                                  		// 0x03D0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UFoxAIHierarchicalAbility*                   NextBehavior;                                     		// 0x03D4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              BehaviorChangeDelayTime;                          		// 0x03D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              NearMissDistance;                                 		// 0x03DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AggressionRange;                                  		// 0x03E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FAccuracyInfo                               Accuracy;                                         		// 0x03E4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                ActiveTargetIndex;                                		// 0x03F4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class AFoxBeacon*                                  CurrentBeacon;                                    		// 0x03F8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	TArray< class UFoxAICondition* >                   CoverConditions;                                  		// 0x03FC (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct FCoverInfo                                  CurrentCover;                                     		// 0x0408 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FVector                                     CurrentDestination;                               		// 0x0410 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FVector                                     LastDestination;                                  		// 0x041C (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FVector                                     IntermediateDestination;                          		// 0x0428 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              LastGetNextMoveTime;                              		// 0x0434 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              GetNextMoveMinDelay;                              		// 0x0438 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AIErrorLevel;                                     		// 0x043C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              AIErrorDecay;                                     		// 0x0440 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AIErrorKillThreshold;                             		// 0x0444 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1607 ];

		return pClassPointer;
	};

	bool eventIsTransitioning ( );
	bool eventCanFireAt ( class AActor* ChkTarget, struct FVector ViewPt, unsigned long bUseRotation );
	bool eventShouldDo360Aiming ( struct FVector TargetLoc );
	void ResetCoverType ( );
	bool NotifyCoverClaimViolation ( class AController* NewClaim, class ACoverLink* Link, int SlotIdx );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void CheckNearMiss ( class APawn* Shooter, class AWeapon* W, struct FVector WeapLoc, struct FVector LineDir, struct FVector HitLocation );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void DrawDebug ( class AHUD* H, float* out_YL );
	void eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FName NoiseType );
	bool ShouldReactToNoise ( struct FName NoiseType );
	void OnFoxAISeqAct_GenericEvent ( class UFoxAISeqAct_GenericEvent* Action );
	void OnFoxAISeqAct_MoveTo ( class UFoxAISeqAct_MoveTo* Action );
	void ProcessBehaviorEvent ( struct FString EventName, class AActor* EventInstigator, class AActor* EventRecipient, struct FVector EventLocation );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType );
	void eventSpawnTeamBeacon ( int Type, struct FVector InLocation, struct FRotator InRotation );
	void eventSetPawnRunning ( unsigned long bRunning );
	struct FVector GetCurrentLookTarget ( );
	void StopLookAt ( struct FVector LookLocation );
	void LookAt ( struct FVector NewLookTarget, int Priority );
	void PawnDied ( class APawn* inPawn );
	void eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition );
	void eventNotifyBehaviorSettingChanged ( unsigned char NewBehaviorSetting );
	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	void eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void eventChooseNavMeshGoal ( struct FVector Destination );
	void eventAIErrorThresholdReached ( );
	void ReportAIError ( float Severity, struct FString* Description );
	class AFoxTeamInfo* GetTeamInfo ( );
	class AFoxSquadInfo* GetSquadInfo ( );
	void DiscoverObjectsInVicinity ( );
	bool GetPlayerCover ( class AFoxPawn* ChkPlayer, struct FCoverInfo* out_Cover );
	bool GetAvailableCoverActions ( class AActor* TestTarget, TArray< int >* Actions );
	struct FVector GetCoverGotoPosition ( struct FCoverInfo Info );
	class AFoxPawn* GetActiveTarget ( struct FEnemyInfo* FoundInfo );
	struct FRotator NativeGetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void SetNextBehavior ( class UFoxAIHierarchicalAbility* InNextBehavior, unsigned long bForceRestart );
	void EvaluateBehaviors ( );
	void RunCurrentBehavior ( );
	bool CanSeePawn ( class APawn* Test, unsigned long bMaySkipChecks );
};

UClass* AFoxAIControllerInterface::pClassPointer = NULL;

// Class FoxGame.FoxAIControllerInterface_Idler
// 0x0000 (0x0448 - 0x0448)
class AFoxAIControllerInterface_Idler : public AFoxAIControllerInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1608 ];

		return pClassPointer;
	};

};

UClass* AFoxAIControllerInterface_Idler::pClassPointer = NULL;

// Class FoxGame.FoxAIControllerInterface_Turret
// 0x0000 (0x0448 - 0x0448)
class AFoxAIControllerInterface_Turret : public AFoxAIControllerInterface_Idler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1609 ];

		return pClassPointer;
	};

};

UClass* AFoxAIControllerInterface_Turret::pClassPointer = NULL;

// Class FoxGame.FoxAIHierarchicalAbility
// 0x005C (0x0098 - 0x003C)
class UFoxAIHierarchicalAbility : public UObject
{
public:
	unsigned long                                      bNeedsCleanup : 1;                                		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCanAbort : 1;                                    		// 0x003C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInitialized : 1;                                 		// 0x003C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bFinished : 1;                                    		// 0x003C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bAborting : 1;                                    		// 0x003C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bCleanedUp : 1;                                   		// 0x003C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	struct FString                                     AbilityName;                                      		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UFoxAICondition*                             PreCondition;                                     		// 0x004C (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UFoxAICondition*                             PostCondition;                                    		// 0x0050 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UFoxAIModifier*                              Modifier;                                         		// 0x0054 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UFoxAIHierarchicalAbility* >         SubActions;                                       		// 0x0058 (0x000C) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UFoxAIHierarchicalAbility* >         CleanUpActions;                                   		// 0x0064 (0x000C) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class AFoxAIControllerInterface*                   Owner;                                            		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AbilityTimer;                                     		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AbilityStart;                                     		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AbilityEnd;                                       		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     StateString;                                      		// 0x0080 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UFoxAIHierarchicalAbility*                   Next;                                             		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxAIHierarchicalAbility*                   Prev;                                             		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxAIHierarchicalAbility*                   CurrentSubAction;                                 		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1610 ];

		return pClassPointer;
	};

	struct FVector GetRotationTarget ( );
	struct FVector GetLookTarget ( );
	bool IsEnabled ( );
	bool VerifyPostConditions ( );
	bool VerifyPreConditions ( );
	class UFoxAIHierarchicalAbility* GetCurrentAbility ( );
	class UFoxAIHierarchicalAbility* ChooseNextAbility ( class UFoxAIHierarchicalAbility* PreviousAbility );
	bool ParseEventParam ( struct FString EventName, struct FString Param );
	bool ProcessBehaviorEvent ( struct FString EventName, class AActor* EventInstigator, class AActor* EventRecipient, struct FVector EventLocation );
	struct FString GetStateString ( );
	void SetOwner ( class AFoxAIControllerInterface* NewOwner );
	float AbilityRunTime ( );
	bool CanAbort ( );
	bool IsCleanedUp ( );
	bool IsFinished ( );
	bool IsInitialized ( );
	void TimerFinished ( );
	void StartTimer ( float TotalTime );
	void SetFinished ( );
	void Abort ( unsigned long bOverrideCanAbort );
	bool HasValidOwner ( );
	bool CanSwitchToWithoutCleanup ( class UFoxAIHierarchicalAbility* CurrentBehavior );
	void Cleanup ( );
	bool NeedsCleanup ( );
	void Tick ( float DeltaTime );
	bool Initialize ( );
};

UClass* UFoxAIHierarchicalAbility::pClassPointer = NULL;

// Class FoxGame.FoxAIAction
// 0x0004 (0x009C - 0x0098)
class UFoxAIAction : public UFoxAIHierarchicalAbility
{
public:
	float                                              Duration;                                         		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1611 ];

		return pClassPointer;
	};

	void TimerFinished ( );
	bool Initialize ( );
};

UClass* UFoxAIAction::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_FireWeapon
// 0x003C (0x00D8 - 0x009C)
class UFoxAIAction_FireWeapon : public UFoxAIAction
{
public:
	TArray< class UFoxAICondition* >                   SuppressionConditions;                            		// 0x009C (0x000C) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              BurstMin;                                         		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BurstMax;                                         		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BurstPauseMin;                                    		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BurstPauseMax;                                    		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuppressReactionTimeMin;                          		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuppressReactionTimeMax;                          		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlindFireChance;                                  		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PopUpChance;                                      		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyNotVisibleAbortTime;                         		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStopFiringIfSuppressed : 1;                      		// 0x00CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStopFiringIfNotAimedAtEnemy : 1;                 		// 0x00CC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bShouldTightAim : 1;                              		// 0x00CC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bFiring : 1;                                      		// 0x00CC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	float                                              FireTime;                                         		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SuppressTime;                                     		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1612 ];

		return pClassPointer;
	};

	unsigned char ChoosePendingCoverAction ( );
	void StopAIFiring ( );
	void SuppressTimeFinished ( );
	void FireTimeFinished ( );
	bool IsSuppressed ( );
	void Cleanup ( );
	void Tick ( float DeltaTime );
	bool Initialize ( );
};

UClass* UFoxAIAction_FireWeapon::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_Flee
// 0x0000 (0x009C - 0x009C)
class UFoxAIAction_Flee : public UFoxAIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1613 ];

		return pClassPointer;
	};

	void Cleanup ( );
	void UpdateFleeFrom ( );
	void TimerFinished ( );
	void Tick ( float DeltaTime );
	bool Initialize ( );
};

UClass* UFoxAIAction_Flee::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_FollowPawn
// 0x0010 (0x00AC - 0x009C)
class UFoxAIAction_FollowPawn : public UFoxAIAction
{
public:
	unsigned long                                      bAbortIfReached : 1;                              		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLeadTarget : 1;                                  		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRunToDestination : 1;                            		// 0x009C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              FollowUpdateRate;                                 		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastFollowUpdateTime;                             		// 0x00A4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class AFoxPawn*                                    FollowingPawn;                                    		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1614 ];

		return pClassPointer;
	};

	bool ProcessBehaviorEvent ( struct FString EventName, class AActor* EventInstigator, class AActor* EventRecipient, struct FVector EventLocation );
	void Tick ( float DeltaTime );
	void SetGotoLocation ( struct FVector Loc );
	bool Initialize ( );
};

UClass* UFoxAIAction_FollowPawn::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_GoTo
// 0x0010 (0x00AC - 0x009C)
class UFoxAIAction_GoTo : public UFoxAIAction
{
public:
	struct FVector                                     TargetLocation;                                   		// 0x009C (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bBlocking : 1;                                    		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRunToDestination : 1;                            		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1615 ];

		return pClassPointer;
	};

	struct FVector GetRotationTarget ( );
	struct FVector GetLookTarget ( );
	bool ProcessBehaviorEvent ( struct FString EventName, class AActor* EventInstigator, class AActor* EventRecipient, struct FVector EventLocation );
	void TimerFinished ( );
	void Tick ( float DeltaTime );
	bool Initialize ( );
};

UClass* UFoxAIAction_GoTo::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_Wander
// 0x0038 (0x00E4 - 0x00AC)
class UFoxAIAction_Wander : public UFoxAIAction_GoTo
{
public:
	TArray< struct FVector >                           NavHistory;                                       		// 0x00AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FVector >                           Blacklist;                                        		// 0x00B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              MaxNavHistoryWeight;                              		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                MaxNavHistoryDepth;                               		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              TurnWeight;                                       		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              DistanceWeight;                                   		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              MinDistance;                                      		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              MaxDistance;                                      		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              VisibleWeight;                                    		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              EnemyNearbyWeight;                                		// 0x00E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1616 ];

		return pClassPointer;
	};

	void Cleanup ( );
	bool ProcessBehaviorEvent ( struct FString EventName, class AActor* EventInstigator, class AActor* EventRecipient, struct FVector EventLocation );
	bool Initialize ( );
};

UClass* UFoxAIAction_Wander::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_LookRandom
// 0x0034 (0x00D0 - 0x009C)
class UFoxAIAction_LookRandom : public UFoxAIAction
{
public:
	float                                              MinYaw;                                           		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxYaw;                                           		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinPitch;                                         		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxPitch;                                         		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinRoll;                                          		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRoll;                                          		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookDistance;                                     		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LastLookTarget;                                   		// 0x00B8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CurrentLookTarget;                                		// 0x00C4 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1617 ];

		return pClassPointer;
	};

	bool ProcessBehaviorEvent ( struct FString EventName, class AActor* EventInstigator, class AActor* EventRecipient, struct FVector EventLocation );
	void Tick ( float DeltaTime );
	void Cleanup ( );
	bool Initialize ( );
};

UClass* UFoxAIAction_LookRandom::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_Melee
// 0x0000 (0x009C - 0x009C)
class UFoxAIAction_Melee : public UFoxAIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1618 ];

		return pClassPointer;
	};

	void Cleanup ( );
	void Tick ( float DeltaTime );
	bool Initialize ( );
};

UClass* UFoxAIAction_Melee::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_PlayAnimation
// 0x0000 (0x009C - 0x009C)
class UFoxAIAction_PlayAnimation : public UFoxAIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1619 ];

		return pClassPointer;
	};

};

UClass* UFoxAIAction_PlayAnimation::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_ScanHorizontal
// 0x0004 (0x00A0 - 0x009C)
class UFoxAIAction_ScanHorizontal : public UFoxAIAction
{
public:
	float                                              MaxLookRange;                                     		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1620 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
	bool Initialize ( );
};

UClass* UFoxAIAction_ScanHorizontal::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_Sleep
// 0x0020 (0x00BC - 0x009C)
class UFoxAIAction_Sleep : public UFoxAIAction
{
public:
	struct FString                                     AbortTriggerString;                               		// 0x009C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FinishedTriggerString;                            		// 0x00A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bRandomizeDuration : 1;                           		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              Durationmax;                                      		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1621 ];

		return pClassPointer;
	};

	bool ProcessBehaviorEvent ( struct FString EventName, class AActor* EventInstigator, class AActor* EventRecipient, struct FVector EventLocation );
	bool Initialize ( );
};

UClass* UFoxAIAction_Sleep::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_TeaBag
// 0x000C (0x00A8 - 0x009C)
class UFoxAIAction_TeaBag : public UFoxAIAction
{
public:
	int                                                MaxCrouches;                                      		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MinCrouches;                                      		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                RandomCrouches;                                   		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1622 ];

		return pClassPointer;
	};

	void TimerFinished ( );
	bool Initialize ( );
};

UClass* UFoxAIAction_TeaBag::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_ThrowGrenade
// 0x0000 (0x009C - 0x009C)
class UFoxAIAction_ThrowGrenade : public UFoxAIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1623 ];

		return pClassPointer;
	};

	void Cleanup ( );
	void Tick ( float DeltaTime );
	bool Initialize ( );
};

UClass* UFoxAIAction_ThrowGrenade::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_ToggleCrouch
// 0x0004 (0x00A0 - 0x009C)
class UFoxAIAction_ToggleCrouch : public UFoxAIAction
{
public:
	unsigned long                                      bDoCrouch : 1;                                    		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1624 ];

		return pClassPointer;
	};

	bool Initialize ( );
};

UClass* UFoxAIAction_ToggleCrouch::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_CelebrateKill
// 0x0000 (0x0098 - 0x0098)
class UFoxAIAction_CelebrateKill : public UFoxAIHierarchicalAbility
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1625 ];

		return pClassPointer;
	};

	bool Initialize ( );
};

UClass* UFoxAIAction_CelebrateKill::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_ChangeWeapon
// 0x0001 (0x0099 - 0x0098)
class UFoxAIAction_ChangeWeapon : public UFoxAIHierarchicalAbility
{
public:
	unsigned char                                      DesiredWeaponType;                                		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1626 ];

		return pClassPointer;
	};

	bool Initialize ( );
};

UClass* UFoxAIAction_ChangeWeapon::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_FightMelee
// 0x0000 (0x0098 - 0x0098)
class UFoxAIAction_FightMelee : public UFoxAIHierarchicalAbility
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1627 ];

		return pClassPointer;
	};

	bool Initialize ( );
};

UClass* UFoxAIAction_FightMelee::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_FightStationary
// 0x0000 (0x0098 - 0x0098)
class UFoxAIAction_FightStationary : public UFoxAIHierarchicalAbility
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1628 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
};

UClass* UFoxAIAction_FightStationary::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_FollowController
// 0x000C (0x00A4 - 0x0098)
class UFoxAIAction_FollowController : public UFoxAIHierarchicalAbility
{
public:
	unsigned char                                      FollowSpecifier;                                  		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UFoxAIAction_FollowPawn*                     FollowAction;                                     		// 0x009C (0x0004) [0x0000000000000000]              
	class UFoxAIAction_GoTo*                           GoToAction;                                       		// 0x00A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1629 ];

		return pClassPointer;
	};

	bool Initialize ( );
};

UClass* UFoxAIAction_FollowController::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_GetToCover
// 0x0004 (0x009C - 0x0098)
class UFoxAIAction_GetToCover : public UFoxAIHierarchicalAbility
{
public:
	unsigned long                                      bSpawnTeamBeacon : 1;                             		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1630 ];

		return pClassPointer;
	};

	bool ProcessBehaviorEvent ( struct FString EventName, class AActor* EventInstigator, class AActor* EventRecipient, struct FVector EventLocation );
	bool NeedsCleanup ( );
	bool Initialize ( );
	bool CanSwitchToWithoutCleanup ( class UFoxAIHierarchicalAbility* CurrentBehavior );
	class UFoxAIHierarchicalAbility* ChooseNextAbility ( class UFoxAIHierarchicalAbility* PreviousAction );
};

UClass* UFoxAIAction_GetToCover::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_FightFromCover
// 0x0024 (0x00C0 - 0x009C)
class UFoxAIAction_FightFromCover : public UFoxAIAction_GetToCover
{
public:
	float                                              CoverThreat;                                      		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InitialThreatLevel;                               		// 0x00A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CoverThreatAdvanceThreshold;                      		// 0x00A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CoverThreatRetreatThreshold;                      		// 0x00A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ThreatReductionPerSecond;                         		// 0x00AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ThreatPerSecondSuppressed;                        		// 0x00B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ThreatPerSecondEnemyRange;                        		// 0x00B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              EnemyRangeMax;                                    		// 0x00B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              EnemyNotVisibleThreatPerSecond;                   		// 0x00BC (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1631 ];

		return pClassPointer;
	};

	bool ProcessBehaviorEvent ( struct FString EventName, class AActor* EventInstigator, class AActor* EventRecipient, struct FVector EventLocation );
	void UpdateCoverThreat ( float DeltaTime );
	void Tick ( float DeltaTime );
	class UFoxAIHierarchicalAbility* ChooseNextAbility ( class UFoxAIHierarchicalAbility* PreviousAction );
	bool Initialize ( );
};

UClass* UFoxAIAction_FightFromCover::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_GetToRangeFromTarget
// 0x0008 (0x00A0 - 0x0098)
class UFoxAIAction_GetToRangeFromTarget : public UFoxAIHierarchicalAbility
{
public:
	float                                              MinDistance;                                      		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistance;                                      		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1632 ];

		return pClassPointer;
	};

	bool Initialize ( );
};

UClass* UFoxAIAction_GetToRangeFromTarget::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_Random
// 0x0000 (0x0098 - 0x0098)
class UFoxAIAction_Random : public UFoxAIHierarchicalAbility
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1633 ];

		return pClassPointer;
	};

	class UFoxAIHierarchicalAbility* ChooseNextAbility ( class UFoxAIHierarchicalAbility* PreviousAbility );
};

UClass* UFoxAIAction_Random::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_Selection
// 0x000C (0x00A4 - 0x0098)
class UFoxAIAction_Selection : public UFoxAIHierarchicalAbility
{
public:
	struct FString                                     AbilityNameToExecute;                             		// 0x0098 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1634 ];

		return pClassPointer;
	};

	bool ProcessBehaviorEvent ( struct FString EventName, class AActor* EventInstigator, class AActor* EventRecipient, struct FVector EventLocation );
	class UFoxAIHierarchicalAbility* ChooseNextAbility ( class UFoxAIHierarchicalAbility* PreviousAbility );
};

UClass* UFoxAIAction_Selection::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_Sequence
// 0x0000 (0x0098 - 0x0098)
class UFoxAIAction_Sequence : public UFoxAIHierarchicalAbility
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1635 ];

		return pClassPointer;
	};

	class UFoxAIHierarchicalAbility* ChooseNextAbility ( class UFoxAIHierarchicalAbility* PreviousAbility );
};

UClass* UFoxAIAction_Sequence::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_SpecialMove
// 0x0008 (0x00A0 - 0x0098)
class UFoxAIAction_SpecialMove : public UFoxAIHierarchicalAbility
{
public:
	struct FName                                       SpecialMoveStateName;                             		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1636 ];

		return pClassPointer;
	};

	void Cleanup ( );
	bool Initialize ( );
};

UClass* UFoxAIAction_SpecialMove::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_EnterCover
// 0x0000 (0x00A0 - 0x00A0)
class UFoxAIAction_EnterCover : public UFoxAIAction_SpecialMove
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1637 ];

		return pClassPointer;
	};

	bool Initialize ( );
};

UClass* UFoxAIAction_EnterCover::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_LeaveCover
// 0x0000 (0x00A0 - 0x00A0)
class UFoxAIAction_LeaveCover : public UFoxAIAction_SpecialMove
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1638 ];

		return pClassPointer;
	};

	bool Initialize ( );
};

UClass* UFoxAIAction_LeaveCover::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_UseHRV
// 0x0000 (0x0098 - 0x0098)
class UFoxAIAction_UseHRV : public UFoxAIHierarchicalAbility
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1639 ];

		return pClassPointer;
	};

	bool Initialize ( );
};

UClass* UFoxAIAction_UseHRV::pClassPointer = NULL;

// Class FoxGame.FoxAIModifier
// 0x0014 (0x0050 - 0x003C)
class UFoxAIModifier : public UObject
{
public:
	float                                              LastActivationDuration;                           		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TotalActivationDuration;                          		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastActivtionTime;                                		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastDeactivationTime;                             		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bEnabled : 1;                                     		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1640 ];

		return pClassPointer;
	};

};

UClass* UFoxAIModifier::pClassPointer = NULL;

// Class FoxGame.FoxAIModifier_ActivationCounter
// 0x0004 (0x0054 - 0x0050)
class UFoxAIModifier_ActivationCounter : public UFoxAIModifier
{
public:
	int                                                NumActivations;                                   		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1641 ];

		return pClassPointer;
	};

};

UClass* UFoxAIModifier_ActivationCounter::pClassPointer = NULL;

// Class FoxGame.FoxAIModifier_TimeLimit
// 0x0004 (0x0054 - 0x0050)
class UFoxAIModifier_TimeLimit : public UFoxAIModifier
{
public:
	float                                              TimeLimit;                                        		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1642 ];

		return pClassPointer;
	};

};

UClass* UFoxAIModifier_TimeLimit::pClassPointer = NULL;

// Class FoxGame.FoxAISquadFormation
// 0x0004 (0x0040 - 0x003C)
class UFoxAISquadFormation : public UObject
{
public:
	float                                              MinAdditionalSpacing;                             		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1643 ];

		return pClassPointer;
	};

	struct FVector CalculateValidPosition ( class AFoxSquadInfo* Squad, struct FVector TestPosition );
	TArray< struct FSquadFormationNode > RemoveOverlappingNodes ( TArray< struct FSquadFormationNode > InNodes, float MinSpacing );
	TArray< struct FSquadFormationNode > CalculateSquadPositions ( class AFoxSquadInfo* InSquad, struct FRotator FormationOrientation );
	TArray< struct FSquadFormationNode > GetSquadPositions ( class AFoxSquadInfo* InSquad );
};

UClass* UFoxAISquadFormation::pClassPointer = NULL;

// Class FoxGame.FoxAISquadFormation_Circle
// 0x0004 (0x0044 - 0x0040)
class UFoxAISquadFormation_Circle : public UFoxAISquadFormation
{
public:
	float                                              Radius;                                           		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1644 ];

		return pClassPointer;
	};

	TArray< struct FSquadFormationNode > CalculateSquadPositions ( class AFoxSquadInfo* InSquad, struct FRotator FormationOrientation );
};

UClass* UFoxAISquadFormation_Circle::pClassPointer = NULL;

// Class FoxGame.FoxSquadInfo
// 0x00E0 (0x02A8 - 0x01C8)
class AFoxSquadInfo : public AActor
{
public:
	class AFoxTeamInfo*                                Team;                                             		// 0x01C8 (0x0004) [0x0000000000000000]              
	struct FName                                       SquadName;                                        		// 0x01CC (0x0008) [0x0000000000000000]              
	int                                                SquadIndex;                                       		// 0x01D4 (0x0004) [0x0000000000000000]              
	class AController*                                 SquadLeader;                                      		// 0x01D8 (0x0004) [0x0000000000000000]              
	TArray< struct FSquadMemberInfo >                  SquadMembers;                                     		// 0x01DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      SquadBehavior;                                    		// 0x01E8 (0x0001) [0x0000000000000000]              
	unsigned long                                      bSquadGod : 1;                                    		// 0x01EC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAnchored : 1;                                    		// 0x01EC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSquadLocationChanged : 1;                        		// 0x01EC (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              SquadTightRadius;                                 		// 0x01F0 (0x0004) [0x0000000000000000]              
	float                                              SquadRadiusBuffer;                                		// 0x01F4 (0x0004) [0x0000000000000000]              
	float                                              SquadRadius;                                      		// 0x01F8 (0x0004) [0x0000000000000000]              
	struct FVector                                     PreviousSquadLocation;                            		// 0x01FC (0x000C) [0x0000000000000000]              
	struct FVector                                     SquadLocation;                                    		// 0x0208 (0x000C) [0x0000000000000000]              
	struct FVector                                     SquadColor;                                       		// 0x0214 (0x000C) [0x0000000000000000]              
	float                                              UpdateFollowDestInterval;                         		// 0x0220 (0x0004) [0x0000000000000000]              
	float                                              LeadingDirectionDist;                             		// 0x0224 (0x0004) [0x0000000000000000]              
	float                                              SquadUpdateFrequency;                             		// 0x0228 (0x0004) [0x0000000000000000]              
	float                                              NextSquadUpdate;                                  		// 0x022C (0x0004) [0x0000000000000000]              
	class AActor*                                      AnchorActor;                                      		// 0x0230 (0x0004) [0x0000000000000000]              
	struct FVector                                     AnchorLocation;                                   		// 0x0234 (0x000C) [0x0000000000000000]              
	struct FRotator                                    AnchorDirection;                                  		// 0x0240 (0x000C) [0x0000000000000000]              
	struct FVector                                     LastSquadLocation;                                		// 0x024C (0x000C) [0x0000000000000000]              
	struct FRotator                                    SquadDirection;                                   		// 0x0258 (0x000C) [0x0000000000000000]              
	TArray< struct FEnemyInfo >                        EnemyInfoList;                                    		// 0x0264 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              EnemyNotVisibleRemoveTime;                        		// 0x0270 (0x0004) [0x0000000000000000]              
	float                                              EnemyNotAttackingRemoveTime;                      		// 0x0274 (0x0004) [0x0000000000000000]              
	TArray< int >                                      AreaCover;                                        		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ProcessingIndex;                                  		// 0x0284 (0x0004) [0x0000000000000000]              
	class UFoxAISquadFormation*                        CurrentFormation;                                 		// 0x0288 (0x0004) [0x0000000000000000]              
	TArray< struct FSquadFormationNode >               CurrentSquadFormationLocations;                   		// 0x028C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DefaultFormationIndex;                            		// 0x0298 (0x0004) [0x0000000000000000]              
	TArray< class UFoxAISquadFormation* >              AvailableFormations;                              		// 0x029C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1645 ];

		return pClassPointer;
	};

	void OnFoxAISeqAct_MoveTo ( class UFoxAISeqAct_MoveTo* Action );
	void eventPostBeginPlay ( );
	bool AnyEnemyAttacking ( float HowReciently );
	bool EnemyAttacking ( int EnemyIndex, int SquadMemberIndex, float HowRecently );
	bool EnemyVisible ( int EnemyIndex, int SquadMemberIndex, float HowRecently );
	struct FVector GetFollowLocation ( class AController* Other );
	void UpdateFollowDestinations ( );
	void ToggleSquadGod ( );
	void ClearAnchor ( );
	void SetAnchor ( class AActor* InAnchorActor, struct FVector InAnchorLocation );
	void SetSquadBehavior ( unsigned char NewSquadBehavior );
	int FindSquadMember ( class AController* Other, class AFoxPawn* Pawn );
	void RemoveMemberFromSquad ( class AController* Other );
	void AddMemberToSquad ( class AController* Other );
	void ConditionalAddNewEnemy ( class AController* Squadmate, class AFoxPawn* NewEnemy, unsigned long bEngaged );
};

UClass* AFoxSquadInfo::pClassPointer = NULL;

// Class FoxGame.FoxTeamInfo
// 0x00E8 (0x02D0 - 0x01E8)
class AFoxTeamInfo : public ATeamInfo
{
public:
	TArray< class ACoverLink* >                        FoundCover;                                       		// 0x01E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AFoxSquadInfo* >                     Squads;                                           		// 0x01F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      DspStatus;                                        		// 0x0200 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                HudColor;                                         		// 0x0204 (0x0010) [0x0000000000000020]              ( CPF_Net )
	int                                                LastCheckScore;                                   		// 0x0214 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FLinearColor                                EnemyTeamEmissive;                                		// 0x0218 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLinearColor                                FriendlyTeamEmissive;                             		// 0x0228 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      FriendlyTeamColor;                                		// 0x0238 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      EnemyTeamColor;                                   		// 0x023C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLinearColor                                BlueTeamHVTColor;                                 		// 0x0240 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                RedTeamHVTColor;                                  		// 0x0250 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HVTColorParameterName;                            		// 0x0260 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                BlueTeamHVTIconColor;                             		// 0x0268 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                RedTeamHVTIconColor;                              		// 0x0278 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HVTIconParameterName;                             		// 0x0288 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           DialogNames;                                      		// 0x0290 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                HumanSize;                                        		// 0x029C (0x0004) [0x0000000000000000]              
	int                                                NumCapturedPoints;                                		// 0x02A0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FTeamBoost                                  TeamXPBoost;                                      		// 0x02A4 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FTeamBoost                                  TeamCPBoost;                                      		// 0x02B0 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FTeamBoost                                  TeamGPBoost;                                      		// 0x02BC (0x000C) [0x0000000000000020]              ( CPF_Net )
	float                                              RoundScore;                                       		// 0x02C8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                RunningTotalScore;                                		// 0x02CC (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1646 ];

		return pClassPointer;
	};

	struct FString GetDialogName ( );
	void CleanupFoundCover ( );
	void LevelCleanupFoundCover ( );
	bool ShouldCleanupFoundCover ( );
	void IssueSquadCommand ( int SquadIndex, unsigned char Cmd, class AActor* ActorRef, struct FVector VectorRef );
	int FindNamedSquad ( struct FName SquadName );
	int FindFreeSquad ( int MinMembers );
	void eventReset ( );
	void RemoveFromSquad ( class AController* Other, int SquadIndex );
	bool AddToSquad ( class AController* Other, int SquadIndex );
	void RemoveFromTeam ( class AController* Other );
	bool AddToTeam ( class AController* Other );
	struct FLinearColor GetFoxHUDColor ( );
	void eventDestroyed ( );
};

UClass* AFoxTeamInfo::pClassPointer = NULL;

// Class FoxGame.FoxCamera
// 0x0040 (0x04E0 - 0x04A0)
class AFoxCamera : public AGamePlayerCamera
{
public:
	class UFoxCamMod_Zoom*                             FoxCamMod_Zoom;                                   		// 0x04A0 (0x0004) [0x0000000000000000]              
	class AFoxPC*                                      FoxPCOwner;                                       		// 0x04A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NarcissistTimer;                                  		// 0x04A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxNarcissistTimer;                               		// 0x04AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGameCameraBase*                             CorpseCam;                                        		// 0x04B0 (0x0004) [0x0000000004002001]              ( CPF_Edit | CPF_Transient | CPF_EditInline )
	class UClass*                                      CorpseCamClass;                                   		// 0x04B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGameCameraBase*                             FirstPersonCam;                                   		// 0x04B8 (0x0004) [0x0000000004002001]              ( CPF_Edit | CPF_Transient | CPF_EditInline )
	class UClass*                                      FirstPersonCamClass;                              		// 0x04BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGameCameraBase*                             SpectatePlayerCam;                                		// 0x04C0 (0x0004) [0x0000000004002001]              ( CPF_Edit | CPF_Transient | CPF_EditInline )
	class UClass*                                      SpectatePlayerCamClass;                           		// 0x04C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGameCameraBase*                             PreviewCam;                                       		// 0x04C8 (0x0004) [0x0000000004002001]              ( CPF_Edit | CPF_Transient | CPF_EditInline )
	class UClass*                                      PreviewCamClass;                                  		// 0x04CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGameCameraBase*                             HeroCam;                                          		// 0x04D0 (0x0004) [0x0000000004002001]              ( CPF_Edit | CPF_Transient | CPF_EditInline )
	class UClass*                                      HeroCamClass;                                     		// 0x04D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGameCameraBase*                             BeaconCam;                                        		// 0x04D8 (0x0004) [0x0000000004002001]              ( CPF_Edit | CPF_Transient | CPF_EditInline )
	class UClass*                                      BeaconCamClass;                                   		// 0x04DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1647 ];

		return pClassPointer;
	};

	void DoUpdateCamera ( float DeltaTime );
	void RemoveCameraLensEffect ( class AEmitterCameraLensEffectBase* Emitter );
	void OnCameraModeChanged ( );
	void eventUpdateCamera ( float DeltaTime );
	void InitializeFor ( class APlayerController* PC );
	class UGameCameraBase* FindBestCameraType ( class AActor* CameraTarget );
	bool IsFirstPerson ( );
	void PostBeginPlay ( );
};

UClass* AFoxCamera::pClassPointer = NULL;

// Class FoxGame.FoxCameraActor_Armory
// 0x0000 (0x02C0 - 0x02C0)
class AFoxCameraActor_Armory : public ACameraActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1648 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};

UClass* AFoxCameraActor_Armory::pClassPointer = NULL;

// Class FoxGame.FoxCamMod_Zoom
// 0x0004 (0x005C - 0x0058)
class UFoxCamMod_Zoom : public UCameraModifier
{
public:
	class AFoxCamera*                                  MyFoxCamera;                                      		// 0x0058 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1649 ];

		return pClassPointer;
	};

	bool RemoveCameraModifier ( class ACamera* Camera );
	bool AddCameraModifier ( class ACamera* Camera );
	bool ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV );
};

UClass* UFoxCamMod_Zoom::pClassPointer = NULL;

// Class FoxGame.FoxPreviewSpawnPoint
// 0x0000 (0x01CC - 0x01CC)
class AFoxPreviewSpawnPoint : public AKeypoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1650 ];

		return pClassPointer;
	};

};

UClass* AFoxPreviewSpawnPoint::pClassPointer = NULL;

// Class FoxGame.FoxVehicle
// 0x0078 (0x0E3C - 0x0DC4)
class AFoxVehicle : public AFoxPawn
{
public:
	class AFoxPawn*                                    Driver;                                           		// 0x0DC4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bDriving : 1;                                     		// 0x0DC8 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bDriverIsVisible : 1;                             		// 0x0DC8 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bAttachDriver : 1;                                		// 0x0DC8 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bDoExtraNetRelevancyTraces : 1;                   		// 0x0DC8 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	float                                              Steering;                                         		// 0x0DCC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Throttle;                                         		// 0x0DD0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Rise;                                             		// 0x0DD4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ExitRadius;                                       		// 0x0DD8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FVector >                           ExitPositions;                                    		// 0x0DDC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FVector                                     ExitOffset;                                       		// 0x0DE8 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     TargetLocationAdjustment;                         		// 0x0DF4 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              DriverDamageMult;                                 		// 0x0E00 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MomentumMult;                                     		// 0x0E04 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      CrushedDamageType;                                		// 0x0E08 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      RunOverDamageType;                                		// 0x0E0C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MinCrushSpeed;                                    		// 0x0E10 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ForceCrushPenetration;                            		// 0x0E14 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystem*                             LandParticleSystem;                               		// 0x0E18 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystem*                             SpawnLandParticleSystem;                          		// 0x0E1C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AActor*                                      CachedActorLandedOn;                              		// 0x0E20 (0x0004) [0x0000000000000000]              
	int                                                HudMode;                                          		// 0x0E24 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    EnterSound;                                       		// 0x0E28 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    ExitSound;                                        		// 0x0E2C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     UIMarkerOffset;                                   		// 0x0E30 (0x000C) [0x0000000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1651 ];

		return pClassPointer;
	};

	void CalculatePawnMods ( );
	void SetPawnAttributes ( );
	void SetEmissives ( );
	void SetGearFromLoadout ( );
	void ToggleHRVEffects ( unsigned long bEnabled, unsigned long bFriendly, unsigned long bHardSuitHRV );
	class AFoxPawn* GetDriver ( );
	void ZeroMovementVariables ( );
	void NotifyDriverTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	bool IsDriven ( );
	void PlaySpawnLandEffects ( );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void DrivingStatusChanged ( );
	void HandleDeadVehicleDriver ( );
	void SetDriving ( unsigned long bNewDriving );
	struct FVector eventGetEntryLocation ( );
	void CrushedBy ( class APawn* OtherPawn );
	void PancakeOther ( class APawn* Other );
	bool eventEncroachingOn ( class AActor* Other );
	bool CheckRanInto ( class AActor* Other );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void eventRanInto ( class AActor* Other );
	class AController* GetCollisionDamageInstigator ( );
	void eventEncroachedBy ( class AActor* Other );
	void NotifyGameKilled ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void DriverDied ( class UClass* DamageType );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void ThrowActiveWeapon ( unsigned long bDestroyWeap );
	void AdjustDriverDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	class AController* SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType );
	void UnPossessed ( );
	bool TryExitPos ( class APawn* ExitingDriver, struct FVector ExitPos, unsigned long bMustFindGround );
	bool FindAutoExit ( class APawn* ExitingDriver );
	bool PlaceExitingDriver ( class APawn* ExitingDriver );
	void DriverLeft ( );
	void SetInputs ( float InForward, float InStrafe, float InUp );
	bool eventDriverLeave ( unsigned long bForceLeave );
	struct FRotator GetExitRotation ( class AController* C );
	void DetachDriver ( class APawn* P );
	void AttachDriver ( class APawn* P );
	void EntryAnnouncement ( class AController* C );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	bool DriverEnter ( class APawn* P );
	bool TryToDrive ( class APawn* P );
	bool AnySeatAvailable ( );
	bool CanLeaveVehicle ( );
	bool CanEnterVehicle ( class APawn* P );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void SetBaseEyeheight ( );
	void PlayerChangedTeam ( );
	void DriverTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType );
	void DriverRadiusDamage ( float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, struct FVector HitLocation, class AActor* DamageCauser, float DamageFalloffExponent );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	void Suicide ( );
	void NotifyTeamChanged ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AFoxVehicle::pClassPointer = NULL;

// Class FoxGame.FoxPawn_CrewServedWeapon
// 0x0004 (0x0E40 - 0x0E3C)
class AFoxPawn_CrewServedWeapon : public AFoxVehicle
{
public:
	class UClass*                                      DefaultWeaponClass;                               		// 0x0E3C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1652 ];

		return pClassPointer;
	};

	void ThrowWeaponOnDeath ( );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	void AttachDriver ( class APawn* P );
	bool eventDriverLeave ( unsigned long bForceLeave );
	bool TryToDrive ( class APawn* P );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void Tick ( float DeltaTime );
	void PostBeginPlay ( );
};

UClass* AFoxPawn_CrewServedWeapon::pClassPointer = NULL;

// Class FoxGame.FoxPawn_HardSuit
// 0x0180 (0x0FBC - 0x0E3C)
class AFoxPawn_HardSuit : public AFoxVehicle
{
public:
	class UParticleSystemComponent*                    LeftEnginePSComp;                                 		// 0x0E3C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             LeftEngineNormalSystem;                           		// 0x0E40 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystem*                             LeftEngineBoostSystem;                            		// 0x0E44 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       LeftEnginePSSocketName;                           		// 0x0E48 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystem*                             LeftEngineBoostShutdownSystem;                    		// 0x0E50 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystemComponent*                    RightEnginePSComp;                                		// 0x0E54 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             RightEngineNormalSystem;                          		// 0x0E58 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystem*                             RightEngineBoostSystem;                           		// 0x0E5C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       RightEnginePSSocketName;                          		// 0x0E60 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystem*                             RightEngineBoostShutdownSystem;                   		// 0x0E68 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystemComponent*                    LeftFootPSComp;                                   		// 0x0E6C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       LeftFootPSSocketName;                             		// 0x0E70 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystemComponent*                    RightFootPSComp;                                  		// 0x0E78 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       RightFootPSSocketName;                            		// 0x0E7C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystemComponent*                    BaseBoostPSComp;                                  		// 0x0E84 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       BaseBoostPSCompName;                              		// 0x0E88 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystemComponent*                    SpawnDropPSComp;                                  		// 0x0E90 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       SpawnDropPSCompName;                              		// 0x0E94 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UMaterialInstanceConstant*                   LowerBodyBurnMIC;                                 		// 0x0E9C (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UMaterialInstanceConstant*                   UpperBodyBurnMIC;                                 		// 0x0EA0 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UMaterialInstanceConstant*                   FPBurnMIC;                                        		// 0x0EA4 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FLinearColor                                FriendlyFlameColor;                               		// 0x0EA8 (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FLinearColor                                EnemyFlameColor;                                  		// 0x0EB8 (0x0010) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      CamoIndex;                                        		// 0x0EC8 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      BurnState;                                        		// 0x0EC9 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentVulnerablePointIndex;                      		// 0x0ECA (0x0001) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	unsigned char                                      BattleModeState;                                  		// 0x0ECB (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              HardSuitBurnStateTime;                            		// 0x0ECC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bOnFire : 1;                                      		// 0x0ED0 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bBoostEnabled : 1;                                		// 0x0ED0 (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned long                                      bTriggerSpawnEffects : 1;                         		// 0x0ED0 (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsUsingWeakPointArmor : 1;                       		// 0x0ED0 (0x0004) [0x0000000000002001] [0x00000008] ( CPF_Edit | CPF_Transient )
	struct FName                                       HeatInterpParamName;                              		// 0x0ED4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              HeatInterpTime;                                   		// 0x0EDC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              HeatInterpBeginVal;                               		// 0x0EE0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              HeatInterpEndVal;                                 		// 0x0EE4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      LeftWeaponClass;                                  		// 0x0EE8 (0x0004) [0x0000000000000000]              
	class UClass*                                      RightWeaponClass;                                 		// 0x0EEC (0x0004) [0x0000000000000000]              
	float                                              FrictionCoefficient;                              		// 0x0EF0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FVulnerablePoint >                  VulnerablePoints;                                 		// 0x0EF4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UPhysicalMaterial*                           VulnerablePhysMat;                                		// 0x0F00 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVulnerablePoint                            CurrentVulnerablePoint;                           		// 0x0F04 (0x001C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	float                                              BattleModeDamageModifier;                         		// 0x0F20 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	class UStaticMeshComponent*                        VulnerableMeshComp;                               		// 0x0F24 (0x0004) [0x000000000408200B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class AFoxWeapon*                                  LeftWeapon;                                       		// 0x0F28 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxWeapon*                                  RightWeapon;                                      		// 0x0F2C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TurnScale;                                        		// 0x0F30 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      VisorMeshComp;                                    		// 0x0F34 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        VisorMeshCompInner;                               		// 0x0F38 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       CenterWindowSocketName;                           		// 0x0F3C (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                VisorMeshMaxPitch;                                		// 0x0F44 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                VisorMeshMinPitch;                                		// 0x0F48 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                VisorPitchDeadZone;                               		// 0x0F4C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                VisorPitchPerSecond;                              		// 0x0F50 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              VisorYawDeltaDegMax;                              		// 0x0F54 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              VisorYawDeltaDegMin;                              		// 0x0F58 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    AmbientHumStart;                                  		// 0x0F5C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    AmbientHumStop;                                   		// 0x0F60 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    FlameThrowerDamageAkEvent;                        		// 0x0F64 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    FlameThrowerDamageEndAkEvent;                     		// 0x0F68 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    WeakPointArmorStart;                              		// 0x0F6C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    WeakPointArmorStop;                               		// 0x0F70 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    WeakPointArmorCooledDown;                         		// 0x0F74 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       AmbientHumRTPCName;                               		// 0x0F78 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    FPWeakPointImpact;                                		// 0x0F80 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    FPNormalImpact;                                   		// 0x0F84 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    SpawnEvent;                                       		// 0x0F88 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MyHardSuitEnterTime;                              		// 0x0F8C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              OtherHardSuitEnterTime;                           		// 0x0F90 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UPointLightComponent*                        DeathLightComp;                                   		// 0x0F94 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              DeathLightRampUpTime;                             		// 0x0F98 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DeathLightRampUpIntensity;                        		// 0x0F9C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DeathLightRampDownStartIntensity;                 		// 0x0FA0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DeathLightRampDownTime;                           		// 0x0FA4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              WeakPointDuration;                                		// 0x0FA8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              WeakPointCooldown;                                		// 0x0FAC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              WeakPointTimer;                                   		// 0x0FB0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AFoxPawn*                                    LastDriver;                                       		// 0x0FB4 (0x0004) [0x0000000000000000]              
	int                                                OwningPlayerId;                                   		// 0x0FB8 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1653 ];

		return pClassPointer;
	};

	void PancakeOther ( class APawn* Other );
	void NotifyFlashBanged ( float Strength, unsigned long bFriendlyFire );
	void PlayHitMarkerSound ( class AFoxPC* InstigatedBy, class UClass* DamageType );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	struct FFoxWeaponConfigInfo GetWeaponConfigInfoFromDamageType ( class UClass* DamageType );
	bool ShouldGoToInjured ( class UClass* DamageType );
	void eventEndViewTarget ( class APlayerController* PC );
	void eventBecomeViewTarget ( class APlayerController* PC );
	struct FVector GetCenterWindowLocation ( );
	void PlaySpawnLandEffects ( );
	void SetEmissives ( );
	class AFoxWeapon* GetRightWeapon ( );
	class AFoxWeapon* GetLeftWeapon ( );
	void ShouldCrouch ( unsigned long bCrouch );
	void ToggleSprintEffects ( unsigned long bEnabled );
	void DrivingStatusChanged ( );
	void ServerDetachDriver ( class APawn* P );
	void ServerAttachDriver ( class APawn* P );
	void DetachDriver ( class APawn* P );
	void AttachDriver ( class APawn* P );
	void RampDownFinished ( );
	void RampUpFinished ( );
	void PlayDeathFX ( class UClass* DamageType, struct FVector HitLoc, float DeathEffectTime );
	void PlayDeathAudio ( class UClass* DamageType, struct FVector HitLoc, float DeathEffectTime );
	float PlayDeathAnimation ( class UClass* DamageType, struct FVector HitLoc );
	void PreProcessInput ( class UFoxPlayerInput* Input );
	float PlayBodyStance ( struct FBodyStance Stance, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride, unsigned long bKeepRBASettings );
	void ZoomKeyHoldOverride ( unsigned long bReleased );
	bool IsFiring ( );
	void ZoomKeyToggleOverride ( unsigned long bReleased );
	void StopFire ( unsigned char FireModeNum );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	class AFoxWeapon* GetWeaponForFireMode ( unsigned char FireMode );
	void StartReload ( );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void DoTaunt ( unsigned char SelectedTaunt );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void StartFire ( unsigned char FireModeNum );
	bool StopFiring ( );
	void ServerUseHRVPing ( );
	bool CanUseHRV ( unsigned long bTurnOn );
	bool CanSwitchWeapon ( );
	class UPhysicalMaterial* eventGetPawnPhysMatFor ( struct FImpactInfo* Impact );
	struct FName GetVulnerableBone ( );
	bool IsVulnerableBone ( struct FName InBoneName, struct FVector OppVector );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, int* InDamage, struct FVector* Momentum );
	void AdjustDriverDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum );
	bool IsReloadingWeapon ( );
	void FlashLocationUpdated ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FFlashLocData* InFlashLocation );
	void ClearFlashLocation ( class AWeapon* InWeapon );
	void SetFlashLocation ( class AWeapon* InWeapon, unsigned char InFiringMode, struct FVector NewLoc );
	void SetGearFromLoadout ( );
	void ToggleHRVEffects ( unsigned long bEnabled, unsigned long bFriendly, unsigned long bHardSuitHRV );
	void eventBattleModeStateChange ( unsigned char NewState );
	void ServerActivateBattleMode ( );
	bool IsBattleModeReady ( );
	bool IsBattleModeActive ( );
	void UpdateVulnerableWeakPoint ( );
	void SetDesiredRotationHard ( struct FRotator NewRotation );
	void StartDropEffects ( );
	void AttachWeapon ( class AFoxWeapon* InWeapon );
	void PostBeginPlay ( );
	class UParticleSystem* GetSpecificFootStepParticleSystem ( class UFoxPMPInfo_FootSteps* FootStepInfo );
	class UAkEvent* GetSpecificFootStepSound ( class UFoxPMPInfo_FootSteps* FootStepInfo );
	void eventSwapBurnMICs ( unsigned long bBurnOn );
	void eventNotifyDamageOverTimeFinished ( class UClass* DamageTypeClass );
	void UpdateBurn ( );
	void eventNotifyNewDamageOverTime ( class UClass* DamageTypeClass );
	void ClientNotifyBurnDamage ( );
	void ClientNotifyPlayHitBone ( struct FName BoneName, struct FVector OppVector );
	void PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo );
	void eventDestroyed ( );
	struct FLinearColor GetFlameColorsFor ( unsigned long bFriendly );
	void SetCamoIndex ( unsigned char NewCamoIndex );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AFoxPawn_HardSuit::pClassPointer = NULL;

// Class FoxGame.FoxPawn_ScorpionTank
// 0x003C (0x0FF8 - 0x0FBC)
class AFoxPawn_ScorpionTank : public AFoxPawn_HardSuit
{
public:
	class AFoxGameMP_PL*                               GameMode;                                         		// 0x0FBC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                FriendlyTeamIndex;                                		// 0x0FC0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bInjured : 1;                                     		// 0x0FC4 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsPlayingTurningSound : 1;                       		// 0x0FC4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              OccupiedCollisionHeight;                          		// 0x0FC8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              UnoccupiedCollisionHeight;                        		// 0x0FCC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SelfRepairTime;                                   		// 0x0FD0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              SelfRepairHealthPerc;                             		// 0x0FD4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              RotationAdjustmentPerc;                           		// 0x0FD8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                MeshRotYaw;                                       		// 0x0FDC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UAkEvent*                                    ScorpionTankTurningStartAkEvent;                  		// 0x0FE0 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    ScorpionTankTurningStopAKEvent;                   		// 0x0FE4 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    ScorpionTankActiveAkEvent;                        		// 0x0FE8 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    ScorpionTankInactiveAkEvent;                      		// 0x0FEC (0x0004) [0x0000000000000000]              
	struct FName                                       BaseSocketName;                                   		// 0x0FF0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1654 ];

		return pClassPointer;
	};

	int GetBoneDamageZone ( class APawn* P, struct FName BoneName );
	void StartDropEffects ( );
	void eventEndViewTarget ( class APlayerController* PC );
	void eventBecomeViewTarget ( class APlayerController* PC );
	bool IsEnabled ( );
	unsigned char GetTeamNum ( );
	void UpdateVulnerableWeakPoint ( );
	void ToggleHRVEffects ( unsigned long bEnabled, unsigned long bFriendly, unsigned long bHardSuitHRV );
	void Reset ( );
	bool CheckRanInto ( class AActor* Other );
	void LocalPawnDialog ( struct FString ActionName, unsigned char InInstigator, struct FString ItemType );
	void EndFlashBangTimer ( );
	void NotifyFlashBanged ( float Strength, unsigned long bFriendlyFire );
	void StopTurningSound ( );
	void TimerStopTurningSound ( );
	void StartTurningSound ( );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void SetEmissives ( );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void DriverDied ( class UClass* DamageType );
	void SelfRepair ( );
	void PostBeginPlay ( );
	void SetInjured ( unsigned long bInInjured );
	void UpdateInjured ( );
	void DrivingStatusChanged ( );
	bool CanEnterVehicle ( class APawn* P );
	bool eventDriverLeave ( unsigned long bForceLeave );
	bool DriverEnter ( class APawn* P );
	bool TryToDrive ( class APawn* P );
	void ClientClearNoiseEffect ( );
	void DetachDriver ( class APawn* P );
	void AttachDriver ( class APawn* P );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void Tick ( float DeltaSeconds );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AFoxPawn_ScorpionTank::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_AimOffset
// 0x0014 (0x0150 - 0x013C)
class UFoxAnimNode_AimOffset : public UAnimNodeAimOffset
{
public:
	class AFoxPawn*                                    FoxPawnOwner;                                     		// 0x013C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              TurnInPlaceOffset;                                		// 0x0140 (0x0004) [0x0000000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )
	unsigned long                                      bIsMirrorTransition : 1;                          		// 0x0144 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOnlyUpdateIn360Aiming : 1;                       		// 0x0144 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInterpolating : 1;                               		// 0x0144 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	float                                              LastAimX;                                         		// 0x0148 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              InterpSpeed;                                      		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1655 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_AimOffset::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_AimOffsetAngularVelocity
// 0x0004 (0x0154 - 0x0150)
class UFoxAnimNode_AimOffsetAngularVelocity : public UFoxAnimNode_AimOffset
{
public:
	float                                              VelocityScalar;                                   		// 0x0150 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1656 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_AimOffsetAngularVelocity::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_BlendByCoverDirection
// 0x0014 (0x0160 - 0x014C)
class UFoxAnimNode_BlendByCoverDirection : public UAnimNodeSequenceBlendBase
{
public:
	class AFoxPawn*                                    FoxPawnOwner;                                     		// 0x014C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              BlendSpeed;                                       		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsLeftSide : 1;                                  		// 0x0154 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              SliderValue;                                      		// 0x0158 (0x0004) [0x0000000000000000]              
	float                                              LastRelevantTime;                                 		// 0x015C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1657 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_BlendByCoverDirection::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_BlendByDirection
// 0x0010 (0x015C - 0x014C)
class UFoxAnimNode_BlendByDirection : public UAnimNodeSequenceBlendBase
{
public:
	float                                              BlendSpeed;                                       		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UseZMovementInSpeed : 1;                          		// 0x0150 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInterpolateWeights : 1;                          		// 0x0150 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	float                                              DirAngle;                                         		// 0x0154 (0x0004) [0x0000000000000000]              
	float                                              LastRelevantTime;                                 		// 0x0158 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1658 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_BlendByDirection::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_BlendByRandom
// 0x0000 (0x0104 - 0x0104)
class UFoxAnimNode_BlendByRandom : public UAnimNodeBlend
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1659 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_BlendByRandom::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_BlendList
// 0x000C (0x0120 - 0x0114)
class UFoxAnimNode_BlendList : public UAnimNodeBlendList
{
public:
	TArray< float >                                    ChildBlendInTime;                                 		// 0x0114 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1660 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_BlendList::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_BaseBlend
// 0x000C (0x012C - 0x0120)
class UFoxAnimNode_BaseBlend : public UFoxAnimNode_BlendList
{
public:
	unsigned long                                      bInitialized : 1;                                 		// 0x0120 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class AFoxPawn*                                    FoxPawnOwner;                                     		// 0x0124 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AFoxCustomPlayerActor*                       FoxCustomPlayerActorOwner;                        		// 0x0128 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1661 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_BaseBlend::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_BlendByAimAccuracy
// 0x0000 (0x012C - 0x012C)
class UFoxAnimNode_BlendByAimAccuracy : public UFoxAnimNode_BaseBlend
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1662 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_BlendByAimAccuracy::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_BlendByAimState
// 0x0000 (0x012C - 0x012C)
class UFoxAnimNode_BlendByAimState : public UFoxAnimNode_BaseBlend
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1663 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_BlendByAimState::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_BlendByBlindStance
// 0x0000 (0x012C - 0x012C)
class UFoxAnimNode_BlendByBlindStance : public UFoxAnimNode_BaseBlend
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1664 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_BlendByBlindStance::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_BlendByCoverAction
// 0x0005 (0x0131 - 0x012C)
class UFoxAnimNode_BlendByCoverAction : public UFoxAnimNode_BaseBlend
{
public:
	unsigned long                                      bUpdatePawnActionFiringFlag : 1;                  		// 0x012C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned char                                      AnimCoverAction;                                  		// 0x0130 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1665 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_BlendByCoverAction::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_BlendByCoverType
// 0x0000 (0x012C - 0x012C)
class UFoxAnimNode_BlendByCoverType : public UFoxAnimNode_BaseBlend
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1666 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_BlendByCoverType::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_BlendByDeployable
// 0x0004 (0x0130 - 0x012C)
class UFoxAnimNode_BlendByDeployable : public UFoxAnimNode_BaseBlend
{
public:
	class AFoxDeployable_Base*                         Deployable;                                       		// 0x012C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1667 ];

		return pClassPointer;
	};

	class UAnimNodeSequence* GetCurrentChildNode ( );
};

UClass* UFoxAnimNode_BlendByDeployable::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_BlendByFallback
// 0x0004 (0x0130 - 0x012C)
class UFoxAnimNode_BlendByFallback : public UFoxAnimNode_BaseBlend
{
public:
	int                                                TargetIndex;                                      		// 0x012C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1668 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_BlendByFallback::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_BlendByInjured
// 0x0000 (0x012C - 0x012C)
class UFoxAnimNode_BlendByInjured : public UFoxAnimNode_BaseBlend
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1669 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_BlendByInjured::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_BlendByPostState
// 0x0004 (0x0130 - 0x012C)
class UFoxAnimNode_BlendByPostState : public UFoxAnimNode_BaseBlend
{
public:
	unsigned long                                      bIsForArmory : 1;                                 		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsForFirstPerson : 1;                            		// 0x012C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1670 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_BlendByPostState::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_BlendByPosture
// 0x0000 (0x012C - 0x012C)
class UFoxAnimNode_BlendByPosture : public UFoxAnimNode_BaseBlend
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1671 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_BlendByPosture::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_BlendByTransition
// 0x0004 (0x0130 - 0x012C)
class UFoxAnimNode_BlendByTransition : public UFoxAnimNode_BaseBlend
{
public:
	unsigned long                                      bPlayingIntro : 1;                                		// 0x012C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bPlayingOutro : 1;                                		// 0x012C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bPlayedOutro : 1;                                 		// 0x012C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1672 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_BlendByTransition::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_BlendWeaponDepot
// 0x0004 (0x0130 - 0x012C)
class UFoxAnimNode_BlendWeaponDepot : public UFoxAnimNode_BaseBlend
{
public:
	class AFoxGameObject_WeaponDepot*                  Depot;                                            		// 0x012C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1673 ];

		return pClassPointer;
	};

	class UAnimNodeSequence* GetCurrentChildNode ( );
};

UClass* UFoxAnimNode_BlendWeaponDepot::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_CoverDirectionBlend
// 0x0000 (0x012C - 0x012C)
class UFoxAnimNode_CoverDirectionBlend : public UFoxAnimNode_BaseBlend
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1674 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_CoverDirectionBlend::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_CoverDirectionTransition
// 0x0018 (0x0144 - 0x012C)
class UFoxAnimNode_CoverDirectionTransition : public UFoxAnimNode_BaseBlend
{
public:
	TArray< class UAnimNodeSequence* >                 RightSeqNodes;                                    		// 0x012C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class UAnimNodeSequence* >                 LeftSeqNodes;                                     		// 0x0138 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1675 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_CoverDirectionTransition::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_IsControlled
// 0x0000 (0x012C - 0x012C)
class UFoxAnimNode_IsControlled : public UFoxAnimNode_BaseBlend
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1676 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_IsControlled::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_IsStunned
// 0x0000 (0x012C - 0x012C)
class UFoxAnimNode_IsStunned : public UFoxAnimNode_BaseBlend
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1677 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_IsStunned::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_CoverDirection
// 0x005B (0x014C - 0x00F1)
class UFoxAnimNode_CoverDirection : public UAnimNodeBlendBase
{
public:
	float                                              BlendInTime;                                      		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTime;                                     		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTimeToGo;                                 		// 0x00FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AFoxPawn*                                    FoxPawnOwner;                                     		// 0x0100 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bPlayingTransition : 1;                           		// 0x0104 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDelayUntilMasterRelevant : 1;                    		// 0x0104 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bBlendingOut : 1;                                 		// 0x0104 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bEditorLeftSide : 1;                              		// 0x0104 (0x0004) [0x0000000000002003] [0x00000008] ( CPF_Edit | CPF_Const | CPF_Transient )
	unsigned long                                      bEditorInCover : 1;                               		// 0x0104 (0x0004) [0x0000000000002003] [0x00000010] ( CPF_Edit | CPF_Const | CPF_Transient )
	unsigned long                                      bPendingIsLeftSide : 1;                           		// 0x0104 (0x0004) [0x0000000000002002] [0x00000020] ( CPF_Const | CPF_Transient )
	unsigned long                                      bIsLeftSide : 1;                                  		// 0x0104 (0x0004) [0x0000000000002002] [0x00000040] ( CPF_Const | CPF_Transient )
	unsigned long                                      bToggledLeftSideStatus : 1;                       		// 0x0104 (0x0004) [0x0000000000002002] [0x00000080] ( CPF_Const | CPF_Transient )
	TArray< class UFoxAnimNode_CoverDirectionTransition* > TransitionNodes;                                  		// 0x0108 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UAnimNodeSynch*                              SynchNode;                                        		// 0x0114 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FName                                       GroupName;                                        		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimNodeSlot* >                     BodyStanceNodes;                                  		// 0x0120 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       MidCoverTransitionNode;                           		// 0x012C (0x0008) [0x0000000000000000]              
	struct FName                                       StdCoverTransitionNode;                           		// 0x0134 (0x0008) [0x0000000000000000]              
	struct FName                                       MidCover360TransitionNode;                        		// 0x013C (0x0008) [0x0000000000000000]              
	struct FName                                       StdCover360TransitionNode;                        		// 0x0144 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1678 ];

		return pClassPointer;
	};

	void SwitchSideBodyStanceNode ( class UAnimNodeSlot* SlotNode, unsigned long bBeginTransition );
};

UClass* UFoxAnimNode_CoverDirection::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_Movement
// 0x0044 (0x0158 - 0x0114)
class UFoxAnimNode_Movement : public UAnimNodeBlendList
{
public:
	unsigned long                                      bScaleAnimationsPlayRateBySpeed : 1;              		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bScaleConstraintsByBaseSpeed : 1;                 		// 0x0114 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      UseZMovementInSpeed : 1;                          		// 0x0114 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class AFoxPawn*                                    FoxPawnOwner;                                     		// 0x0118 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              Speed;                                            		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              IdleToMoveBlendTime;                              		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MoveToIdleBlendTime;                              		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendUpTime;                                      		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDownTime;                                    		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDownPerc;                                    		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MoveCycleFirstStepStartPosition;                  		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeSynch*                              SynchNode;                                        		// 0x0138 (0x0004) [0x0000000000000000]              
	struct FName                                       Name_SynchNode;                                   		// 0x013C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       Name_SynchGroupName;                              		// 0x0144 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FMovementDef >                      Movements;                                        		// 0x014C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1679 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_Movement::pClassPointer = NULL;

// Class FoxGame.FoxAnimNode_Physics
// 0x0004 (0x0118 - 0x0114)
class UFoxAnimNode_Physics : public UAnimNodeBlendByPhysics
{
public:
	class AFoxPawn*                                    FoxPawnOwner;                                     		// 0x0114 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1680 ];

		return pClassPointer;
	};

};

UClass* UFoxAnimNode_Physics::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove
// 0x0042 (0x007E - 0x003C)
class UFoxSpecialMove : public UObject
{
public:
	class AFoxPawn*                                    PawnOwner;                                        		// 0x003C (0x0004) [0x0000000000000000]              
	float                                              SpeedModifier;                                    		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanFireWeapon : 1;                               		// 0x0044 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bCanChangeCrouchState : 1;                        		// 0x0044 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bCanCrouchInState : 1;                            		// 0x0044 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bShouldAbortWeaponReload : 1;                     		// 0x0044 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bShouldAbortTightAim : 1;                         		// 0x0044 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bIsAbortedByTightAim : 1;                         		// 0x0044 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bLockPawnRotation : 1;                            		// 0x0044 (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      bBreakFromCover : 1;                              		// 0x0044 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bDisableMovement : 1;                             		// 0x0044 (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	unsigned long                                      bDisableLook : 1;                                 		// 0x0044 (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bDisableCollision : 1;                            		// 0x0044 (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bDisablePhysics : 1;                              		// 0x0044 (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bDisableLedgeDetection : 1;                       		// 0x0044 (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bCameraFocusOnPawn : 1;                           		// 0x0044 (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	unsigned long                                      bDisableAI : 1;                                   		// 0x0044 (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned long                                      bDisableAITimeout : 1;                            		// 0x0044 (0x0004) [0x0000000000000002] [0x00008000] ( CPF_Const )
	unsigned long                                      bLastCanDoSpecialMove : 1;                        		// 0x0044 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bIgnoreInputForSpecialMove : 1;                   		// 0x0044 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bHideWeapon : 1;                                  		// 0x0044 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bReachPreciseDestination : 1;                     		// 0x0044 (0x0004) [0x0000000000000002] [0x00080000] ( CPF_Const )
	unsigned long                                      bReachedPreciseDestination : 1;                   		// 0x0044 (0x0004) [0x0000000000000002] [0x00100000] ( CPF_Const )
	unsigned long                                      bReachPreciseRotation : 1;                        		// 0x0044 (0x0004) [0x0000000000000002] [0x00200000] ( CPF_Const )
	unsigned long                                      bReachedPreciseRotation : 1;                      		// 0x0044 (0x0004) [0x0000000000000002] [0x00400000] ( CPF_Const )
	unsigned long                                      bReachPreciseViewRotation : 1;                    		// 0x0044 (0x0004) [0x0000000000000002] [0x00800000] ( CPF_Const )
	unsigned long                                      bReachedPreciseViewRotation : 1;                  		// 0x0044 (0x0004) [0x0000000000000002] [0x01000000] ( CPF_Const )
	unsigned long                                      bForcePrecisePosition : 1;                        		// 0x0044 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bCleaningUp : 1;                                  		// 0x0044 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      bLocallySimulated : 1;                            		// 0x0044 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bDebug : 1;                                       		// 0x0044 (0x0004) [0x0000000000000000] [0x10000000] 
	float                                              MotionBlurAmount;                                 		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastCanDoSpecialMoveTime;                         		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     PreciseDestination;                               		// 0x0050 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              PreciseRotationInterpolationTime;                 		// 0x005C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FRotator                                    PreciseRotation;                                  		// 0x0060 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              PreciseViewRotationInterpolationTime;             		// 0x006C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FRotator                                    PreciseViewRotation;                              		// 0x0070 (0x000C) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      ServerChainedMove;                                		// 0x007C (0x0001) [0x0000000000000000]              
	unsigned char                                      SpecialMoveType;                                  		// 0x007D (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1681 ];

		return pClassPointer;
	};

	void TimerEvent ( );
	void PawnLeftCover ( );
	void RootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta );
	void RootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void TogglePawnCollision ( unsigned long bToggleOn );
	void eventReachedPrecisePosition ( );
	void SetFacePreciseViewRotation ( struct FRotator ViewRotationToFace, float InterpolationTime );
	void SetFacePreciseRotation ( struct FRotator RotationToFace, float InterpolationTime );
	void SetReachPreciseDestination ( struct FVector DestinationToReach );
	void AnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void PreProcessInput ( class UFoxPlayerInput* Input );
	void CleanUpSpecialMove ( );
	bool CanFireWeapon ( );
	void StartSpecialMove ( );
	bool CanCrouchInState ( );
	bool RequestEndSpecialMove ( );
	bool InternalCanDoSpecialMove ( );
	bool CanDoSpecialMove ( );
	bool CanChainMove ( unsigned char NextMove );
	void ClearChainedMove ( );
};

UClass* UFoxSpecialMove::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_AnimationBase
// 0x002E (0x00AC - 0x007E)
class UFoxSpecialMove_AnimationBase : public UFoxSpecialMove
{
public:
	TArray< struct FWeaponAnimSet >                    Anims;                                            		// 0x0080 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                MotionVariation;                                  		// 0x008C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bUseRandomMotionVariation : 1;                    		// 0x0090 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsLoopingAnimation : 1;                          		// 0x0090 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableRootMotion : 1;                            		// 0x0090 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFPVisibleInHRV : 1;                              		// 0x0090 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	float                                              BlendInSpeed;                                     		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendOutSpeed;                                    		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     StartOffset;                                      		// 0x009C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CachedAnimTime;                                   		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1682 ];

		return pClassPointer;
	};

	bool GetAnimsToPlay ( struct FWeaponAnimSet* OutAnims );
	void SeedMotionVariation ( );
	void StopAnimation ( );
	void StartAnimation ( );
	void CleanUpSpecialMove ( );
	void StartSpecialMove ( );
	void SetMotion ( int Index );
	bool InternalCanDoSpecialMove ( );
	float GetCachedAnimTime ( );
	bool CanChainMove ( unsigned char NextMove );
};

UClass* UFoxSpecialMove_AnimationBase::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_ExitLadder
// 0x0004 (0x00B0 - 0x00AC)
class UFoxSpecialMove_ExitLadder : public UFoxSpecialMove_AnimationBase
{
public:
	unsigned long                                      bUseTop : 1;                                      		// 0x00AC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1683 ];

		return pClassPointer;
	};

	bool GetAnimsToPlay ( struct FWeaponAnimSet* OutAnims );
	void StartSpecialMove ( );
	bool InternalCanDoSpecialMove ( );
};

UClass* UFoxSpecialMove_ExitLadder::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_PlantBomb
// 0x0014 (0x00C0 - 0x00AC)
class UFoxSpecialMove_PlantBomb : public UFoxSpecialMove_AnimationBase
{
public:
	struct FVector                                     BombLocationOffset;                               		// 0x00AC (0x000C) [0x0000000000000000]              
	class AFoxGameObject_BombTarget*                   BombTarg;                                         		// 0x00B8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bfinishedFirstAnim : 1;                           		// 0x00BC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1684 ];

		return pClassPointer;
	};

	bool GetAnimsToPlay ( struct FWeaponAnimSet* OutAnims );
	void AnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StartSpecialMove ( );
	bool CanChainMove ( unsigned char NextMove );
	bool InternalCanDoSpecialMove ( );
};

UClass* UFoxSpecialMove_PlantBomb::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_TauntBase
// 0x0028 (0x00D4 - 0x00AC)
class UFoxSpecialMove_TauntBase : public UFoxSpecialMove_AnimationBase
{
public:
	unsigned char                                      ValidTauntRangeBegin;                             		// 0x00AC (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      ValidTauntRangeEnd;                               		// 0x00AD (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      ValidTauntRangeBeginEmote;                        		// 0x00AE (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      ValidTauntRangeEndEmote;                          		// 0x00AF (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bHasEmote : 1;                                    		// 0x00B0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bAwardGrief : 1;                                  		// 0x00B0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bMeleeTaunt : 1;                                  		// 0x00B0 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	int                                                TauntUnlockID;                                    		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< unsigned char >                            HiddenWeaponTaunts;                               		// 0x00B8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	float                                              MeleeRange;                                       		// 0x00C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MeleeDamage;                                      		// 0x00C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MeleeImpulse;                                     		// 0x00CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      TauntDamageType;                                  		// 0x00D0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1685 ];

		return pClassPointer;
	};

	void AnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void SpawnImpactSounds ( struct FImpactInfo Impact, class AActor* PlayingActor, class UPhysicalMaterial* PhysMaterial, unsigned char FiringMode );
	class AActor* SpawnImpactEffects ( struct FImpactInfo Impact, class UPhysicalMaterial* PhysMaterial, unsigned char FiringMode );
	void PlayImpactEffects ( struct FVector HitLocation );
	bool ShouldRegisterDamage ( class AActor* A );
	void SetFlashLocation ( struct FVector HitLocation );
	class AFoxPawn* GetPawnToMelee ( struct FImpactInfo* Impact );
	void BeginTauntMelee ( );
	void TimerEvent ( );
	void StartSpecialMove ( );
	bool DoesTauntHaveEmote ( );
	bool InternalCanDoSpecialMove ( );
	bool GetAnimsToPlay ( struct FWeaponAnimSet* OutAnims );
	bool GetDefaultAnimsToPlay ( unsigned char SpecialMoveIndex, struct FWeaponAnimSet* OutAnims );
};

UClass* UFoxSpecialMove_TauntBase::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_MeleeLunge
// 0x0006 (0x0084 - 0x007E)
class UFoxSpecialMove_MeleeLunge : public UFoxSpecialMove
{
public:
	float                                              TurnPerSecond;                                    		// 0x0080 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1686 ];

		return pClassPointer;
	};

	void StartAnimation ( );
	float GetTurnDirectionToTarget ( );
	bool IsCloseEnough ( );
	void eventAttackTarget ( );
	void CleanUpSpecialMove ( );
	void ServerFlipAccel ( );
	void StartSpecialMove ( );
	bool GetAnimsToPlay ( struct FWeaponAnimSet* OutAnims );
	bool CanChainMove ( unsigned char NextMove );
	bool InternalCanDoSpecialMove ( );
};

UClass* UFoxSpecialMove_MeleeLunge::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_Sprint
// 0x000A (0x0088 - 0x007E)
class UFoxSpecialMove_Sprint : public UFoxSpecialMove
{
public:
	float                                              TurnScale;                                        		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StrafeScale;                                      		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1687 ];

		return pClassPointer;
	};

	void CleanUpSpecialMove ( );
	void StartSpecialMove ( );
	void PreProcessInput ( class UFoxPlayerInput* Input );
	bool InternalCanDoSpecialMove ( );
	bool CanChainMove ( unsigned char NextMove );
};

UClass* UFoxSpecialMove_Sprint::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_SprintDash
// 0x0014 (0x009C - 0x0088)
class UFoxSpecialMove_SprintDash : public UFoxSpecialMove_Sprint
{
public:
	float                                              DecelerationTime;                                 		// 0x0088 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DecelerationTimeLeft;                             		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bStopping : 1;                                    		// 0x0090 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class UAkEvent*                                    StartEvent;                                       		// 0x0094 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    StopEvent;                                        		// 0x0098 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1688 ];

		return pClassPointer;
	};

	bool RequestEndSpecialMove ( );
	void StartSpecialMove ( );
};

UClass* UFoxSpecialMove_SprintDash::pClassPointer = NULL;

// Class FoxGame.FoxDestructible
// 0x0054 (0x030C - 0x02B8)
class AFoxDestructible : public AKActor
{
public:
	TArray< struct FDamageStage >                      DamageStages;                                     		// 0x02B8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      CurrentStage;                                     		// 0x02C4 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UParticleSystem*                             BurningParticleSystemTemplate;                    		// 0x02C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AEmitter*                                    BurnEmitter;                                      		// 0x02CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BurnDamagePerSecond;                              		// 0x02D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BurnThresholdPct;                                 		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHasBeganBurning : 1;                             		// 0x02D8 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bDisablePhysics : 1;                              		// 0x02D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                Health;                                           		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AController*                                 LastPersonToDamageUs;                             		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStaticMesh*                                 CashedOriginalMesh;                               		// 0x02E4 (0x0004) [0x0000000000000000]              
	float                                              Damage;                                           		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageRadiusInner;                                		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageRadiusOuter;                                		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MomentumTransfer;                                 		// 0x02F4 (0x0004) [0x0000000000000000]              
	class UClass*                                      ExplosionDamageType;                              		// 0x02F8 (0x0004) [0x0000000000000000]              
	class UDrawSphereComponent*                        DrawDamageRadiusInner;                            		// 0x02FC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDrawSphereComponent*                        DrawDamageRadiusOuter;                            		// 0x0300 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              RespawnTime;                                      		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadiusDamageExplodePercentage;                    		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1689 ];

		return pClassPointer;
	};

	void HurtDoubleRadius ( );
	void HurtVictimDoubleRadiusDamage ( class AActor* Victim, struct FVector HurtOrigin );
	void Reset ( );
	void TurnOffBurning ( );
	void ChangeDamageStage ( int Index, class AController* EventInstigator );
	void TakeBurnDamage ( );
	void BeginBurning ( );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* AFoxDestructible::pClassPointer = NULL;

// Class FoxGame.FoxCustomActor
// 0x01A0 (0x03A8 - 0x0208)
class AFoxCustomActor : public ASkeletalMeshActor
{
public:
	class AFoxPC*                                      OwnerPC;                                          		// 0x0208 (0x0004) [0x0000000000000000]              
	float                                              ScreenWidth;                                      		// 0x020C (0x0004) [0x0000000000000000]              
	float                                              ScreenHeight;                                     		// 0x0210 (0x0004) [0x0000000000000000]              
	struct FBox                                        MyBoundingBox;                                    		// 0x0214 (0x001C) [0x0000000000000000]              
	struct FVector                                     StartingLocation;                                 		// 0x0230 (0x000C) [0x0000000000000000]              
	struct FVector                                     FinishLocation;                                   		// 0x023C (0x000C) [0x0000000000000000]              
	struct FRotator                                    StartingRotation;                                 		// 0x0248 (0x000C) [0x0000000000000000]              
	struct FRotator                                    FinishedRotation;                                 		// 0x0254 (0x000C) [0x0000000000000000]              
	unsigned long                                      bValidLocation : 1;                               		// 0x0260 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWasHighlighted : 1;                              		// 0x0260 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bForceIdealDistance : 1;                          		// 0x0260 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCamDistanceOverride : 1;                         		// 0x0260 (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              MinDistance;                                      		// 0x0264 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TimeToReachLocation;                              		// 0x0268 (0x0004) [0x0000000000000000]              
	int                                                CustomItemType;                                   		// 0x026C (0x0004) [0x0000000000000000]              
	int                                                HighlightItemType;                                		// 0x0270 (0x0004) [0x0000000000000000]              
	float                                              ForcedIdealDistance;                              		// 0x0274 (0x0004) [0x0000000000000000]              
	struct FCamoUnlockInfo                             CamoInfo;                                         		// 0x0278 (0x0098) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTexture*                                    BaseCamoTexture;                                  		// 0x0310 (0x0004) [0x0000000000000000]              
	int                                                NumOfCamoTiles;                                   		// 0x0314 (0x0004) [0x0000000000000000]              
	struct FVector                                     StartingCameraOffset;                             		// 0x0318 (0x000C) [0x0000000000000000]              
	struct FVector                                     IdealCameraOffset;                                		// 0x0324 (0x000C) [0x0000000000000000]              
	struct FVector                                     CameraOffset;                                     		// 0x0330 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartingRotatedOffset;                            		// 0x033C (0x000C) [0x0000000000000000]              
	struct FVector                                     RotatedOffset;                                    		// 0x0348 (0x000C) [0x0000000000000000]              
	struct FVector                                     IdealRotatedOffset;                               		// 0x0354 (0x000C) [0x0000000000000000]              
	struct FRotator                                    BaseRotation;                                     		// 0x0360 (0x000C) [0x0000000000000000]              
	struct FRotator                                    RotationFromOffset;                               		// 0x036C (0x000C) [0x0000000000000000]              
	float                                              StartingCameraDistance;                           		// 0x0378 (0x0004) [0x0000000000000000]              
	float                                              IdealCameraDistance;                              		// 0x037C (0x0004) [0x0000000000000000]              
	float                                              CameraDistance;                                   		// 0x0380 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinCameraDistance;                                		// 0x0384 (0x0004) [0x0000000000000000]              
	float                                              MaxCameraDistance;                                		// 0x0388 (0x0004) [0x0000000000000000]              
	float                                              DistanceAdjustmentRate;                           		// 0x038C (0x0004) [0x0000000000000000]              
	float                                              RotationAdjustmentRate;                           		// 0x0390 (0x0004) [0x0000000000000000]              
	int                                                MaxPitch;                                         		// 0x0394 (0x0004) [0x0000000000000000]              
	int                                                MinPitch;                                         		// 0x0398 (0x0004) [0x0000000000000000]              
	int                                                MaxYaw;                                           		// 0x039C (0x0004) [0x0000000000000000]              
	int                                                MinYaw;                                           		// 0x03A0 (0x0004) [0x0000000000000000]              
	float                                              PreviewFOV;                                       		// 0x03A4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1690 ];

		return pClassPointer;
	};

	void SetIdealCameraRotation ( struct FRotator NewCameraRotation );
	void SetIdealCameraDistance ( float NewCameraDistance );
	void SetIdealCameraPosition ( float OffsetX, float OffsetY, float IdealWidth, float IdealHeight );
	void SetMeshByName ( struct FString MeshName );
	void ShowPreviewActor ( );
	void ReachedDesiredLocation ( );
	struct FRotator GetPreviewRotation ( struct FRotator OffsetRotation );
	void TickSpecial ( float DeltaSeconds );
	void MoveWeaponToIdealPosition ( float OffsetX, float OffsetY, float IdealWidth, float IdealHeight, struct FRotator OffsetRotation );
	void AddComponentToBoundingBox ( class USkeletalMeshComponent* NewSMC );
	void SetCustomBoundingBox ( );
	struct FVector CalculateIdealVectorFromCamera ( float OffsetX, float OffsetY, float IdealWidth, float IdealHeight );
};

UClass* AFoxCustomActor::pClassPointer = NULL;

// Class FoxGame.FoxCustomPlayerActor
// 0x00EC (0x0494 - 0x03A8)
class AFoxCustomPlayerActor : public AFoxCustomActor
{
public:
	class USkeletalMeshComponent*                      UpperBodyMesh;                                    		// 0x03A8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      HelmetMesh;                                       		// 0x03AC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      Gear_Tactical;                                    		// 0x03B0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        Gear_R1;                                          		// 0x03B4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        Gear_R2;                                          		// 0x03B8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        Gear_L1;                                          		// 0x03BC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        Gear_L2;                                          		// 0x03C0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        Badge;                                            		// 0x03C4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        Patch;                                            		// 0x03C8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UFoxSkeletalMesh3rdPersonWeapon*             MyWeapon;                                         		// 0x03CC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UClass*                                      MyWeaponClass;                                    		// 0x03D0 (0x0004) [0x0000000000000000]              
	class UTexture*                                    PatchTexture;                                     		// 0x03D4 (0x0004) [0x0000000000000000]              
	float                                              PatchTextureColorOverride;                        		// 0x03D8 (0x0004) [0x0000000000000000]              
	class UTexture*                                    OverlayCamoTexture;                               		// 0x03DC (0x0004) [0x0000000000000000]              
	struct FLinearColor                                EmissiveColor;                                    		// 0x03E0 (0x0010) [0x0000000000000000]              
	struct FProfileGearInfo                            GearInfo;                                         		// 0x03F0 (0x0024) [0x0000000000000000]              
	TArray< class UMaterialInstanceConstant* >         TPCamoSwapMICs;                                   		// 0x0414 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              IdealHelmetDistance;                              		// 0x0420 (0x0004) [0x0000000000000000]              
	float                                              IdealBadgeDistance;                               		// 0x0424 (0x0004) [0x0000000000000000]              
	float                                              IdealGearDistance;                                		// 0x0428 (0x0004) [0x0000000000000000]              
	float                                              IdealPatchDistance;                               		// 0x042C (0x0004) [0x0000000000000000]              
	TArray< struct FVector >                           PlayerOffsetArray;                                		// 0x0430 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FRotator >                          PlayerRotationArray;                              		// 0x043C (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< float >                                    CameraDistanceArray;                              		// 0x0448 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FName                                       TP_IKBoneCtrl_Male_LeftHand_Name;                 		// 0x0454 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       TP_IKBoneCtrl_Female_LeftHand_Name;               		// 0x045C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       IdleAnimName;                                     		// 0x0464 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FullBodySlotName;                                 		// 0x046C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       UpperBodySlotName;                                		// 0x0474 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LowerBodySlotName;                                		// 0x047C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeSlot*                               FullBodyAnimNode;                                 		// 0x0484 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodeSlot*                               UpperBodyAnimNode;                                		// 0x0488 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodeSlot*                               LowerBodyAnimNode;                                		// 0x048C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsFemale : 1;                                    		// 0x0490 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1691 ];

		return pClassPointer;
	};

	void ForceUpdatePlayerPosition ( );
	void SetBaseColor ( float R, float G, float B );
	void SetOverlayColor ( float R, float G, float B );
	void RedoAllCamo ( );
	void SetDepthPriorityGroup ( unsigned char NewDepthPriorityGroup );
	void StartIdleAnimation ( float BlendTime );
	void BlendToIdleAnimation ( );
	void StartFullBodyAnimation ( struct FName CustomAnimationName, float BlendTime, unsigned long bLooping );
	void SetupAnimNodeSlots ( );
	bool ShouldRefreshIdle ( class UClass* OldWeaponClass );
	void SetupLoadoutPreview ( class AFoxLoadoutInfo* Loadout );
	bool SupportsGearSlot ( unsigned char ArmorID );
	void SetNewCamoTextures ( int CamoIndex );
	void SetNewPatchTexture ( int UnlockID );
	void SetMeshMaterialsAndCamo ( class UMeshComponent* MyMeshComponent, unsigned long bDefocus );
	void UpdateGearInfo ( struct FProfileGearInfo NewGearInfo );
	struct FRotator GetPreviewRotation ( struct FRotator OffsetRotation );
	void SetCustomBoundingBox ( );
	void SetIdealCameraPosition ( float OffsetX, float OffsetY, float IdealWidth, float IdealHeight );
	struct FVector CalculateIdealVectorFromCamera ( float OffsetX, float OffsetY, float IdealWidth, float IdealHeight );
	void eventInitIK ( );
	void TickSpecial ( float DeltaSeconds );
	void eventPostBeginPlay ( );
};

UClass* AFoxCustomPlayerActor::pClassPointer = NULL;

// Class FoxGame.FoxHeroPoseActor
// 0x0015 (0x04A9 - 0x0494)
class AFoxHeroPoseActor : public AFoxCustomPlayerActor
{
public:
	class AFoxPRI*                                     PRI;                                              		// 0x0494 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                PlayerRank;                                       		// 0x0498 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	struct FName                                       HeroAnimName;                                     		// 0x049C (0x0008) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	unsigned long                                      bTauntPlaying : 1;                                		// 0x04A4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      CurrentTauntPlaying;                              		// 0x04A8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1692 ];

		return pClassPointer;
	};

	void PlayTaunt ( unsigned char TauntEnum );
	bool CanPlayTaunt ( );
	void StartHeroAnimations ( );
	bool ShouldRefreshIdle ( class UClass* OldWeaponClass );
	void SetPRI ( class APlayerReplicationInfo* NewPRI );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AFoxHeroPoseActor::pClassPointer = NULL;

// Class FoxGame.FoxCustomSkeletalActor
// 0x0018 (0x03C0 - 0x03A8)
class AFoxCustomSkeletalActor : public AFoxCustomActor
{
public:
	struct FString                                     MeshAssetPath;                                    		// 0x03A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     BaseCameraOffset;                                 		// 0x03B4 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1693 ];

		return pClassPointer;
	};

	void SetIdealCameraPosition ( float OffsetX, float OffsetY, float IdealWidth, float IdealHeight );
	void SetPreviewMesh ( );
	void PostBeginPlay ( );
};

UClass* AFoxCustomSkeletalActor::pClassPointer = NULL;

// Class FoxGame.FoxCustomPackActor
// 0x0000 (0x03C0 - 0x03C0)
class AFoxCustomPackActor : public AFoxCustomSkeletalActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1694 ];

		return pClassPointer;
	};

	void SetMeshMaterialsAndCamo ( class UMeshComponent* MyMeshComponent, int CamoUnlockID );
	void SetPackFromUnlockID ( int UnlockID, int CamoUnlockID );
	void PostBeginPlay ( );
};

UClass* AFoxCustomPackActor::pClassPointer = NULL;

// Class FoxGame.FoxCustomWeaponActor
// 0x0064 (0x040C - 0x03A8)
class AFoxCustomWeaponActor : public AFoxCustomActor
{
public:
	class UClass*                                      CurrWeaponClass;                                  		// 0x03A8 (0x0004) [0x0000000000000000]              
	struct FFoxWeaponConfigInfo                        CurrentWeaponInfo;                                		// 0x03AC (0x002C) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      BarrelModMesh;                                    		// 0x03D8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      MuzzleModMesh;                                    		// 0x03DC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      StockModMesh;                                     		// 0x03E0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      ScopeModMesh;                                     		// 0x03E4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      MagazineModMesh;                                  		// 0x03E8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      GripModMesh;                                      		// 0x03EC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      RailMeshComponent;                                		// 0x03F0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      HangerMesh;                                       		// 0x03F4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       WeaponName;                                       		// 0x03F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    CurrBaseCamoTex;                                  		// 0x0400 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumTexureTiles;                                   		// 0x0404 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMagazineCamo : 1;                                		// 0x0408 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1695 ];

		return pClassPointer;
	};

	void SetDepthPriorityGroup ( unsigned char NewDepthPriorityGroup );
	void AttachWeaponTo ( class AFoxCustomizableCharacterActor* CustomizableCharacterActor );
	void UpdateSkeletalMeshCamo ( class USkeletalMeshComponent* CamoMesh, int NumTiles );
	void SetWeaponCamo ( class UTexture* BaseCamoTex, int NumTiles );
	void RedoWeaponCamo ( );
	void SetWeaponCamoByIndex ( int CamoIndex );
	void DetachModMeshFromWeaponMesh ( class UMeshComponent* ModMesh, class USkeletalMeshComponent* WeaponMesh );
	void DetachMods ( class USkeletalMeshComponent* ModMesh );
	void DetachAllMods ( );
	void RebuildWeapon ( );
	void AttachMod ( class UClass* ModClassBase );
	void SetForModPreview ( class UClass* ModClass );
	void OffsetBySocketBase ( );
	void SetWeapon ( class UClass* NewWeaponClass );
	void UpdateConfigInfo ( struct FFoxWeaponConfigInfo NewWeaponInfo );
	struct FRotator GetPreviewRotation ( struct FRotator OffsetRotation );
	void MoveWeaponToIdealPosition ( float OffsetX, float OffsetY, float IdealWidth, float IdealHeight, struct FRotator OffsetRotation );
	void SetMeshMaterialsAndCamo ( class UMeshComponent* MyMeshComponent, unsigned long bDefocus );
	void SetWeaponCamoTextures ( int CamoIndex );
	void SetFlushToCamera ( );
	void SetCustomBoundingBox ( );
};

UClass* AFoxCustomWeaponActor::pClassPointer = NULL;

// Class FoxGame.FoxDeployable_Base
// 0x004C (0x0214 - 0x01C8)
class AFoxDeployable_Base : public AActor
{
public:
	int                                                Health;                                           		// 0x01C8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                DeployablePRI_ID;                                 		// 0x01CC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class APlayerReplicationInfo*                      DeployablePRI;                                    		// 0x01D0 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x01D4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x01D8 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      DeployableState;                                  		// 0x01DC (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      DestroyedScoreEvent;                              		// 0x01DD (0x0001) [0x0000000000000002]              ( CPF_Const )
	float                                              DestroyDelay;                                     		// 0x01E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LookExtent;                                       		// 0x01E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxPawnInteractionDistance;                       		// 0x01E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AFoxPawn*                                    TouchingPawn;                                     		// 0x01EC (0x0004) [0x0000000000000000]              
	unsigned long                                      bMiniGameOpen : 1;                                		// 0x01F0 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     UseString;                                        		// 0x01F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UseOwnString;                                     		// 0x0200 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FName                                       CenterSocketName;                                 		// 0x020C (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1696 ];

		return pClassPointer;
	};

	void Destroyed ( );
	unsigned char eventScriptGetTeamNum ( );
	struct FVector GetMeshCenter ( );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	bool LocalPawnLookingAtBase ( );
	void SetPRI ( class APlayerReplicationInfo* PRI );
	void NotifyLocalPlayerTeamReceived ( );
	void SetEmissives ( );
	void TryApplyEmissives ( );
	void DelayedGiveBackTactical ( );
	void PlayPackingUp ( class AFoxPawn* NewPawn );
	void PlayRising ( unsigned long bInitial );
	void PlayLowered ( );
	void eventPlayDying ( );
	void SetRemovalTimer ( float RemovalTime );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool TouchingAPawn ( class AFoxPawn* IgnorePawn );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AFoxDeployable_Base::pClassPointer = NULL;

// Class FoxGame.FoxDroppedPickup_Weapon
// 0x003C (0x0214 - 0x01D8)
class AFoxDroppedPickup_Weapon : public AFoxDroppedPickup
{
public:
	int                                                AmmoLeftCount;                                    		// 0x01D8 (0x0004) [0x0000000000000000]              
	int                                                AmmoUsedCount;                                    		// 0x01DC (0x0004) [0x0000000000000000]              
	int                                                SpareAmmoCount;                                   		// 0x01E0 (0x0004) [0x0000000000000000]              
	struct FFoxWeaponConfigInfo                        PickupConfig;                                     		// 0x01E4 (0x002C) [0x0000000000000020]              ( CPF_Net )
	class AFoxPC*                                      PreviousOwner;                                    		// 0x0210 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1697 ];

		return pClassPointer;
	};

	void SetWeaponCamo ( class UMeshComponent* CamoApplyMesh );
	void eventSetPickupMesh ( class UPrimitiveComponent* PickupMesh );
	void eventReplicatedEvent ( struct FName VarName );
	void GiveTo ( class APawn* P );
	void Destroyed ( );
};

UClass* AFoxDroppedPickup_Weapon::pClassPointer = NULL;

// Class FoxGame.FoxDSMActor_Hanger
// 0x0020 (0x0224 - 0x0204)
class AFoxDSMActor_Hanger : public ADynamicSMActor
{
public:
	class AFoxWeapon*                                  BaseWeapon;                                       		// 0x0204 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUpdateRotation : 1;                              		// 0x0208 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FRotator                                    PreviousRotation;                                 		// 0x020C (0x000C) [0x0000000000000000]              
	float                                              MaxRotationSize;                                  		// 0x0218 (0x0004) [0x0000000000000000]              
	class AKActor*                                     HangerActor;                                      		// 0x021C (0x0004) [0x0000000000000000]              
	float                                              MaxNegativeY;                                     		// 0x0220 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1698 ];

		return pClassPointer;
	};

};

UClass* AFoxDSMActor_Hanger::pClassPointer = NULL;

// Class FoxGame.FoxLoadoutInfo
// 0x077C (0x0944 - 0x01C8)
class AFoxLoadoutInfo : public AReplicationInfo
{
public:
	struct FString                                     DefaultPawnName;                                  		// 0x01C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           WeaponPackages;                                   		// 0x01D4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           PrimaryWeaponNames;                               		// 0x01E0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           SecondaryWeaponNames;                             		// 0x01EC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           DepotPresetNames;                                 		// 0x01F8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           GrenadeNames;                                     		// 0x0204 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           MuzzleModNames;                                   		// 0x0210 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           StockModNames;                                    		// 0x021C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           BarrelModNames;                                   		// 0x0228 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           ScopeModNames;                                    		// 0x0234 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           GripModNames;                                     		// 0x0240 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           AmmoModNames;                                     		// 0x024C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FDefaultLoadout >                   TheDefaultLoadouts;                               		// 0x0258 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FProfileGearInfo                            TheDefaultGear;                                   		// 0x0264 (0x0024) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FProfileTauntInfo                           TheDefaultTaunts;                                 		// 0x0288 (0x0020) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FProfileDialogInfo                          TheDefaultDialog;                                 		// 0x02A8 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FProfileDepotInfo                           TheDefaultDepotInfo;                              		// 0x02B0 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FProfileEmblemInfo                          TheDefaultEmblemInfo;                             		// 0x02B8 (0x0018) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	class UClass*                                      DefaultPawnClass;                                 		// 0x02D0 (0x0004) [0x0000000000000000]              
	class UFoxDataStore_Unlockables*                   UnlockablesDataStore;                             		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxDataStore_StoreData*                     StoreDataStore;                                   		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FFoxWeaponConfigInfo                        PrimaryWeaponInfo;                                		// 0x02DC (0x002C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FFoxWeaponConfigInfo                        SecondaryWeaponInfo;                              		// 0x0308 (0x002C) [0x0000000000002000]              ( CPF_Transient )
	struct FFoxWeaponConfigInfo                        CurrentPrimaryWeaponInfo;                         		// 0x0334 (0x002C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FFoxWeaponConfigInfo                        CurrentSecondaryWeaponInfo;                       		// 0x0360 (0x002C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FFoxWeaponConfigInfo                        CurrentCandyWeaponInfo;                           		// 0x038C (0x002C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FFoxDepotPresetInfo                         DepotItems[ 0x5 ];                                		// 0x03B8 (0x03FC) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	TArray< int >                                      DepotTiers;                                       		// 0x07B4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      SelectedTaunt;                                    		// 0x07C0 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentLoadoutIndex;                              		// 0x07C1 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FProfileGearInfo                            GearInfo;                                         		// 0x07C4 (0x0024) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FGearStatsMapping >                 GearStatsMappingIDs;                              		// 0x07E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FProfileTauntInfo                           TauntInfo;                                        		// 0x07F4 (0x0020) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FProfileDialogInfo                          DialogInfo;                                       		// 0x0814 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FProfileLoadoutSlot                         WeaponLoadouts[ 0x5 ];                            		// 0x081C (0x0078) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FLoadoutStatTrackingIdStruct                LoadoutStatsIds[ 0x6 ];                           		// 0x0894 (0x00A8) [0x0000000000002000]              ( CPF_Transient )
	class UFoxDataProvider_Avatar*                     AvatarInfo;                                       		// 0x093C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AvatarIndex;                                      		// 0x0940 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1699 ];

		return pClassPointer;
	};

	bool eventGetPresetModifiers ( struct FFoxWeaponConfigInfo WeaponConfig, struct FFoxWeaponModInfo* WeaponModifiers );
	void SuppressWeapon ( unsigned long bSuppress );
	bool HasTacticalClass ( struct FString TacticalClassName );
	void LogGearInfo ( struct FProfileGearInfo NewGear );
	void LogWeaponConfig ( struct FFoxWeaponConfigInfo Config );
	class UClass* GetModClassById ( int ItemId, unsigned char MyNodeType );
	int GetUnlockableIndex ( int ItemId, TArray< class UUIResourceDataProvider* >* ProviderArray );
	int GetGearIndexById ( int ItemId, unsigned char MyNodeType );
	class UFoxDataProvider_Avatar* GetAvatarProviderById ( int ItemId );
	class UFoxDataProvider_Magazine* GetMagazineProviderById ( int ItemId, int* MagazineIndex );
	unsigned char GetSecondaryWeaponIDbyName ( struct FString WeaponName );
	unsigned char GetPrimaryWeaponIDbyName ( struct FString WeaponName );
	class UClass* GetWeaponClassById ( int ItemId );
	int CreateNewDepotConfigStats ( );
	void SetLoadoutInstanceIDs ( int LoadoutSlot, unsigned char WeaponType, int CfgID, int UseID );
	bool DoSecondariesMatch ( struct FProfileLoadoutSlot LHS, struct FProfileLoadoutSlot RHS, struct FString* ChangedVar );
	bool DoPrimariesMatch ( struct FProfileLoadoutSlot LHS, struct FProfileLoadoutSlot RHS, struct FString* ChangedVar );
	void LogNewEquippedWeapon ( struct FFoxWeaponConfigInfo Wpn, int LoadoutSlot, struct FString ChangedVar, int PresetID );
	void CreateNewWeaponConfigStats ( struct FFoxWeaponConfigInfo Wpn, int LoadoutSlot, unsigned char WeaponSlot );
	void eventSetCurrentWeaponConfig ( unsigned char WeaponType, struct FFoxWeaponConfigInfo Wpn );
	void CreateGearWeaponStats ( class AFoxWeapon* FW, unsigned char WeaponType );
	int FindGearStats ( class AFoxWeapon* FW );
	void InitializeWeaponStats ( class AFoxWeapon* FW, unsigned char WeaponType );
	bool ValidityCheckAvatarInfo ( class UFoxDataProvider_Avatar** CheckAvatarInfo );
	bool ValidityCheckTitle ( );
	bool ValidityCheckDepotItem ( );
	bool ValidityCheckGearInfo ( struct FProfileGearInfo* CheckGearInfo );
	bool ValidityCheckEmblemInfo ( );
	bool ValidityCheckDialogInfo ( struct FProfileDialogInfo* CheckDialogInfo );
	bool ValidityCheckTauntInfo ( struct FProfileTauntInfo* CheckTauntInfo );
	bool ValidityCheckWeaponConfig ( unsigned char WeaponType, struct FFoxWeaponConfigInfo* CheckWeaponConfig );
	bool ValidityCheckLoadoutIndex ( int SelectedLoadoutIndex );
	bool ValidityCheckLoadoutSlot ( int Index, struct FProfileLoadoutSlot* CheckWeaponLoadout );
	bool ValidityCheckLoadoutInfo ( );
	int GetSkillTier ( );
	int GetPointsSpentInTier ( int TierIndex );
	TArray< int > GetUnlockedSkillsForTier ( int TierIndex );
	int GetNumSkillPointsSpent ( );
	TArray< int > GetUnlockedSkillIDs ( );
	int GetNumUnlockedSkills ( );
	bool eventHasUnlockedSkill ( int SkillID );
	void AddSkill ( int SkillID );
	void ResetSkills ( );
	void ChangeAvatar ( int NewIndex );
	void ChangeTactical ( int TacIndex );
	void ChangeGearSlot2 ( int NewGearIndex );
	void ChangeGearSlot1 ( int NewGearIndex );
	void ChangeCamo ( int CamoIndex );
	void ChangeLowerBody ( int Index );
	void ChangeUpperBody ( int Index );
	void ChangeHelmet ( int Index );
	TArray< unsigned char > GetTaunts ( );
	void SaveDepot ( TArray< int > NewDepotIndices );
	int GetAvatarTauntUnlockID ( );
	int GetAvatarIndex ( );
	bool IsWeaponDepotIndexAvatarSlot ( int DepotIndex );
	float CalculateProgressToNextTier ( int CombatPoints );
	int CalculateDepotTierFromPoints ( int CombatPoints );
	struct FFoxDepotPresetInfo GetDepotPresetFromIndex ( int DepotItemIndex );
	struct FFoxDepotPresetInfo GetDepotSlotAtIndex ( int DepotIndex );
	int GetNumDepotSlots ( );
	bool HasAvatarDepotSlot ( );
	bool IsWeaponLoadoutIndexAvatarSlot ( int LoadoutIndex );
	void SaveDialogPacks ( struct FProfileDialogInfo NewDialogInfo );
	void SaveTaunts ( TArray< int > NewTauntUnlocks, struct FProfileTauntInfo* OutputTauntInfo );
	void SaveGear ( struct FProfileGearInfo NewGearInfo );
	void SaveLoadoutAtIndex ( struct FProfileLoadoutSlot NewLoadoutSlotInfo, int LoadoutIndex );
	struct FProfileLoadoutSlot GetLoadoutSlotAtIndex ( int LoadoutIndex );
	int GetNumLoadoutSlots ( );
	bool HasAvatarLoadoutSlot ( );
	void SetupAvatar ( );
	bool HasAvatar ( );
	bool MeshSupportsSocket ( struct FName SocketName, class USkeletalMesh* TestMesh );
	struct FString GetGeneratedWeaponName ( class UClass* ReceiverClass, class UClass* ScopeClass, class UClass* MuzzleClass, class UClass* StockClass, class UClass* BarrelClass, class UClass* GripClass, class UFoxDataProvider_Magazine* MagazineDataProvider, struct FString* FriendlyTag, struct FString* IconRef );
	void CalculateMods ( struct FFoxWeaponConfigInfo ConfigInfo, struct FFoxWeaponModInfo PawnMod, struct FFoxWeaponModInfo* ModInfo );
	void CalculateSecondaryLoadOutRatings ( struct FProfileLoadoutSlot NewLoadout, unsigned long bIncludePawn, unsigned long bIsOrder, float* DamageRating, float* SpeedRating, float* SurvivalRating );
	void CalculateLoadOutRatings ( struct FProfileLoadoutSlot NewLoadout, unsigned long bIncludePawn, unsigned long bIsOrder, float* DamageRating, float* SpeedRating, float* SurvivalRating );
	void CalculateWeaponRatings ( struct FFoxWeaponConfigInfo ConfigInfo, struct FFoxWeaponModInfo PawnMod, float* DamageRating, float* SpeedRating, float* SurvivalRating );
	class UClass* GetDefaultPawn ( );
	bool IsModValidForWeapon ( class UClass* TestMod, class UClass* TestWeapon, class AFoxPC* PlayerOwner );
	bool IsValidForPlayer ( int ItemId, int PlayerRank, class AFoxPRI* ForPlayer );
	bool IsValidForType ( class UClass* TestWeapon, TArray< unsigned char > SlotTypes );
	bool ValidateItem ( int TestItemId, class AFoxPRI* ForPlayer );
	bool TryChangeSecondaryMod ( class UClass* NewModClass );
	bool TryChangePrimaryMod ( class UClass* NewModClass );
	bool TryChangeModForWeaponConfig ( class UClass* NewModClass, struct FFoxWeaponConfigInfo* WeaponConfigInfo );
	bool TryChangeCurrentModByName ( struct FString NewModName, unsigned long bPrimary );
	class UClass* SetCurrentConfigToPreset ( struct FString InPresetName );
	bool TryChangeCurrentWeaponConfig ( class UClass* NewWeaponClass, struct FFoxWeaponPresetInfo FoundInfo );
	struct FFoxWeaponConfigInfo BuildWeaponConfigInfoFromPreset ( struct FFoxWeaponPresetInfo PresetInfo );
	struct FFoxWeaponConfigInfo BuildWeaponConfigInfoFromPresetName ( struct FString PresetName );
	bool IsGearValid ( struct FProfileGearInfo* TheGearInfo );
	bool GetNewWeaponConfigInfoFor ( unsigned char WeaponType, struct FFoxWeaponConfigInfo* OutConfigInfo );
	class UClass* ResolveCharContentByName ( struct FString CharClassName );
	class UClass* ResolveWpnContentByName ( struct FString ClassName );
	class AFoxPawn* FindMyPawn ( );
	int GetMagIDFromName ( struct FString ModName );
	int GetIndexFromList ( struct FString ItemName, TArray< struct FString >* NameList );
	int GetClassIndexFromList ( class UClass* Item, TArray< struct FString >* NameList );
	void SetDepotToDefaults ( struct FProfileDepotInfo* DepotData );
	void SetEmblemToDefaults ( struct FProfileEmblemInfo* EmblemData );
	void SetDialogPacksToDefaults ( struct FProfileDialogInfo* DialogData );
	void SetTauntsToDefaults ( struct FProfileTauntInfo* TauntData );
	void SetGearToDefaults ( struct FProfileGearInfo* GearData );
	void SetLoadoutToDefaults ( int LoadoutIndex, struct FProfileLoadoutSlot* LoadoutData );
	int GetDepotIndexFromNameID ( struct FString NameID );
	TArray< int > GetCurrentDepotInfo ( );
	struct FString GetDialogAnnouncerName ( );
	struct FString GetDialogPlayerName ( );
	struct FProfileDialogInfo GetCurrentDialogPacks ( );
	unsigned char GetSelectedTaunt ( );
	TArray< int > GetCurrentTauntInfo ( );
	struct FProfileGearInfo GetCurrentGearInfo ( );
	struct FProfileLoadoutSlot BuildProfileLoadoutSlotFromInfo ( struct FFoxWeaponConfigInfo PrimaryInfo, struct FFoxWeaponConfigInfo SecondaryInfo );
	void BuildWeaponConfigInfoFromProfileSlot ( struct FProfileLoadoutSlot NewLoadout, struct FFoxWeaponConfigInfo* PrimaryInfo, struct FFoxWeaponConfigInfo* SecondaryInfo );
	void SetupDepotItemAtIndex ( int DepotIndex, int DepotPresetID );
	void SetCurrentDepot ( struct FProfileDepotInfo DepotData );
	void SetCurrentDialogPacks ( struct FProfileDialogInfo DialogData );
	void SetCurrentTaunts ( struct FProfileTauntInfo TauntData );
	void SetCurrentGear ( struct FProfileGearInfo GearData );
	void SetCurrentLoadouts ( struct FProfileLoadoutSlot* NewWeaponLoadouts );
	void SelectAvatarIndex ( int NewAvatarIndex );
	void ChangeLoadoutIndex ( unsigned char NewIndex );
	void SetLoadoutInfo ( struct FProfileLoadoutSlot* NewWeaponLoadouts, struct FProfileGearInfo NewGearInfo, struct FProfileTauntInfo NewTauntInfo, struct FProfileDialogInfo NewDialogInfo, struct FProfileDepotInfo NewDepotInfo, unsigned char SelectedLoadoutIndex, int SelectedAvatarIndex );
	void SetAllLoadoutInfoToDefaults ( );
	void CreateUnlockedSkillsStats ( );
	void LogNewEquippedGear ( struct FProfileGearInfo LogGearInfo, struct FString ChangedVar );
	void CreateNewGearConfigStats ( );
	void SetDefaultWeaponConfigs ( );
	bool ChangeAmmoType ( unsigned char WeaponType, int AmmoType );
	bool ChangeHangerIndex ( int HangerIndex );
	bool ChangeCurrentMagazine ( unsigned char WeaponType, struct FString MagazineClassName );
	bool ChangeCurrentScope ( unsigned char WeaponType, struct FString ScopeClassName );
	void eventReplicatedEvent ( struct FName VarName );
	void PostBeginPlay ( );
};

UClass* AFoxLoadoutInfo::pClassPointer = NULL;

// Class FoxGame.FoxPickupFactoryWeapon
// 0x0045 (0x0301 - 0x02BC)
class AFoxPickupFactoryWeapon : public AFoxPickupFactory
{
public:
	struct FFoxWeaponConfigInfo                        PickupConfig;                                     		// 0x02BC (0x002C) [0x0000000000000000]              
	class USkeletalMeshComponent*                      EditorWeaponComponent;                            		// 0x02E8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FString                                     WeaponPreset;                                     		// 0x02EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              RespawnTime;                                      		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRandomPickupConfig : 1;                          		// 0x02FC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLocalPickup : 1;                                 		// 0x02FC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      WorldPickupIndex;                                 		// 0x0300 (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1700 ];

		return pClassPointer;
	};

	bool eventGetPresetFromName ( struct FString PresetName, struct FFoxWeaponPresetInfo* NewPresetInfo );
	void eventSetWeaponConfigFromPresetInfo ( struct FFoxWeaponPresetInfo* NewPresetInfo, struct FFoxWeaponConfigInfo* NewConfig );
	void SetRespawn ( );
	void SetPickupConfigByPresetName ( struct FString NewPresetName );
	void SetPickupConfig ( int MapInfoIndex );
	void ResetPickUpConfig ( );
	void SetPickupVisible ( );
	void SetPickupHidden ( );
	float GetRespawnTime ( );
	void SpawnCopyFor ( class APawn* Recipient );
	void SetWeaponCamo ( class UMeshComponent* CamoApplyMesh );
	void SetPickupMesh ( );
	void SetPickupMeshByPickupConfig ( );
	void eventPreBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AFoxPickupFactoryWeapon::pClassPointer = NULL;

// Class FoxGame.FoxPlaceableCharacterActor
// 0x0058 (0x0260 - 0x0208)
class AFoxPlaceableCharacterActor : public ASkeletalMeshActor
{
public:
	class USkeletalMesh*                               LowerMesh;                                        		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               UpperMesh;                                        		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               HelmetMesh;                                       		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 TacticalMesh;                                     		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 ButtPackMesh;                                     		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 R1Mesh;                                           		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 R2Mesh;                                           		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 L1Mesh;                                           		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 L2Mesh;                                           		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CamoIndex;                                        		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                EmissiveColor;                                    		// 0x0230 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      UpperMeshComponent;                               		// 0x0240 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      HelmetMeshComponent;                              		// 0x0244 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        TacticalMeshComponent;                            		// 0x0248 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        ButtPackMeshComponent;                            		// 0x024C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        R1MeshComponent;                                  		// 0x0250 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        R2MeshComponent;                                  		// 0x0254 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        L1MeshComponent;                                  		// 0x0258 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        L2MeshComponent;                                  		// 0x025C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1701 ];

		return pClassPointer;
	};

	void BuildCharacter ( );
	void eventPostBeginPlay ( );
};

UClass* AFoxPlaceableCharacterActor::pClassPointer = NULL;

// Class FoxGame.FoxPlaceableWeaponActor
// 0x0040 (0x0248 - 0x0208)
class AFoxPlaceableWeaponActor : public ASkeletalMeshActor
{
public:
	class USkeletalMesh*                               RecieverMesh;                                     		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               MuzzleMesh;                                       		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               BarrelMesh;                                       		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               MagazineMesh;                                     		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               GripMesh;                                         		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               StockMesh;                                        		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               ScopeMesh;                                        		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      StockMeshComponent;                               		// 0x0224 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      ScopeMeshComponent;                               		// 0x0228 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      BarrelMeshComponent;                              		// 0x022C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      MagazineMeshComponent;                            		// 0x0230 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      MuzzleMeshComponent;                              		// 0x0234 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      GripMeshComponent;                                		// 0x0238 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FString                                     WeaponPreset;                                     		// 0x023C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1702 ];

		return pClassPointer;
	};

	void GetMeshesFromPreset ( struct FString PresetName );
	void BuildWeapon ( );
};

UClass* AFoxPlaceableWeaponActor::pClassPointer = NULL;

// Class FoxGame.FoxProjectile
// 0x002C (0x0234 - 0x0208)
class AFoxProjectile : public AProjectile
{
public:
	float                                              GravityScale;                                     		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    InFlightStartEvent;                               		// 0x020C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    InFlightStopEvent;                                		// 0x0210 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bAutoStartInFlightAudio : 1;                      		// 0x0214 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAddBaseVelocity : 1;                             		// 0x0214 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FVector                                     InitialFrameOfRefVelocity;                        		// 0x0218 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystem*                             TrailTemplate;                                    		// 0x0224 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AEmitterSpawnable*                           TrailEmitter;                                     		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDynamicLightEnvironmentComponent*           ProjLightEnvironment;                             		// 0x022C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              FluidForceRadius;                                 		// 0x0230 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1703 ];

		return pClassPointer;
	};

	void ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation );
	void StopTrailEmitter ( );
	void StopSimulating ( );
	void Init ( struct FVector Direction );
	void Destroyed ( );
	void StartInFlightAudio ( );
	void StopInFlightAudio ( );
	void SpawnTrail ( );
	void PostBeginPlay ( );
};

UClass* AFoxProjectile::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_GrenadeBase
// 0x00D4 (0x0308 - 0x0234)
class AFoxProjectile_GrenadeBase : public AFoxProjectile
{
public:
	class UMeshComponent*                              Mesh;                                             		// 0x0234 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bPerformGravity : 1;                              		// 0x0238 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHasExploded : 1;                                 		// 0x0238 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bHasExplodedServer : 1;                           		// 0x0238 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bExplodeOnImpact : 1;                             		// 0x0238 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSpotGrenade : 1;                                 		// 0x0238 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bFlatDamage : 1;                                  		// 0x0238 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bHasExplosiveLensFlare : 1;                       		// 0x0238 (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      bStickToTarget : 1;                               		// 0x0238 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bTraceStickToWorld : 1;                           		// 0x0238 (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	unsigned long                                      bStickWithVelocityRotation : 1;                   		// 0x0238 (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	int                                                MaxBounceCount;                                   		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BounceCount;                                      		// 0x0240 (0x0004) [0x0000000000000000]              
	float                                              VelocityDampingFactor;                            		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Bounciness;                                       		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    BounceEvent;                                      		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ExplosionFX;                                      		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstance*                           ExplosionDecal;                                   		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalWidth;                                       		// 0x0258 (0x0004) [0x0000000000000000]              
	float                                              DecalHeight;                                      		// 0x025C (0x0004) [0x0000000000000000]              
	float                                              GrenadeTimerLength;                               		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotationSpeed;                                    		// 0x0264 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              GrenadeSpeed;                                     		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFoxPawn*                                    GrenadeSpotter;                                   		// 0x0274 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APlayerReplicationInfo*                      GrenadePRI;                                       		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                GrenadePRI_ID;                                    		// 0x027C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FString                                     DialogName;                                       		// 0x0280 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	float                                              LastSpotterCheck;                                 		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   GrenadeWarningIcon;                               		// 0x0290 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UMaterialInstanceConstant*                   HRVMaterial;                                      		// 0x0294 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              MaxGrenadeIconDimensions;                         		// 0x0298 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MinGrenadeIconDimensions;                         		// 0x029C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DamageFalloff;                                    		// 0x02A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystemComponent*                    TrailEmitterComponent;                            		// 0x02A4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AEmitter*                                    ExplosionEmitter;                                 		// 0x02A8 (0x0004) [0x0000000000000000]              
	TArray< class UMaterialInstanceConstant* >         MICs;                                             		// 0x02AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       EmissiveColorParamName;                           		// 0x02B8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       TrailColorParamName;                              		// 0x02C0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       HRVColorParamName;                                		// 0x02C8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DestructionTimer;                                 		// 0x02D0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AFoxLensFlare_Explosion*                     ExplosionLensFlare;                               		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FirstBounceDamage;                                		// 0x02D8 (0x0004) [0x0000000000000000]              
	struct FStickToDetails                             StickToInfo;                                      		// 0x02DC (0x0028) [0x0000000000000020]              ( CPF_Net )
	class UPhysicalMaterial*                           FallBackMaterial;                                 		// 0x0304 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1704 ];

		return pClassPointer;
	};

	struct FRotator eventGetAdjustedRotation ( );
	void eventSpawnStickToEffects ( struct FStickToDetails STD, class UPhysicalMaterial* PhysMaterial );
	void PlayImpactSound ( class UPhysicalMaterial* PhysMat );
	class UParticleSystem* eventGetImpactParticleSystem ( class UPhysicalMaterial* PhysMat );
	void HandleStickTo ( struct FStickToDetails NewStickToInfo );
	void StickTo ( struct FStickToDetails NewStickToInfo );
	struct FStickToDetails GetStickToDetailsForSkeletalMesh ( class USkeletalMeshComponent* HitMesh );
	struct FStickToDetails GetStickToDetailsForActor ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal );
	void GrenadeDestroyedBy ( class AController* EventInstigator );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void SetRemovalTimer ( float RemovalTime );
	void StopTrailEmitterComponent ( );
	void DrawGrenadeWarning ( class UCanvas* Canvas, struct FVector PlayerLocation, struct FVector ScreenLoc );
	bool HurtRadius ( float BaseDamage, float HRDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	void CheckGrenadeSpotted ( );
	void eventSpotGrenade ( );
	bool ShouldBounce ( class AActor* Touched, struct FVector HitNormal );
	void eventStopBounce ( struct FVector HitNormal, struct FVector HitLocation );
	void Bounce ( struct FVector HitLocation, struct FVector HitNormal );
	void HandleCollision ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void Init ( struct FVector Direction );
	unsigned char eventScriptGetTeamNum ( );
	void SetEmissives ( );
	void NotifyLocalPlayerTeamReceived ( );
	void TryApplyEmissives ( );
	void SetPRI ( class APlayerReplicationInfo* PRI );
	void HideProjectile ( );
	struct FRotator GetDecalOrientation ( struct FVector HitLocation, struct FVector HitNormal );
	class AEmitter* GrenadeExplosion ( struct FVector HitLocation, struct FVector HitNormal, unsigned long bOnGround );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void DoExplosion ( );
	void eventToggleHRVEffects ( unsigned long bEnabled, unsigned long bHardSuitHRV );
	void StartGrenadeTimer ( float CookedTime );
	float GetEffectTime ( );
	void ReplicatedEvent ( struct FName VarName );
	void eventDestroyed ( );
	void PostBeginPlay ( );
};

UClass* AFoxProjectile_GrenadeBase::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_AirStrikeRocketBase
// 0x0020 (0x0328 - 0x0308)
class AFoxProjectile_AirStrikeRocketBase : public AFoxProjectile_GrenadeBase
{
public:
	int                                                NumProjectiles;                                   		// 0x0308 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              StrikeRadius;                                     		// 0x030C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              StrikeDuration;                                   		// 0x0310 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      ProjectileClass;                                  		// 0x0314 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             TrailParticleSystemTemplate;                      		// 0x0318 (0x0004) [0x0000000000000000]              
	TArray< float >                                    SpawnTimes;                                       		// 0x031C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1705 ];

		return pClassPointer;
	};

	void ProjectileSpawnTimer ( );
	void SortTimes ( );
	struct FVector FragmentDirection ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void SpawnProjectile ( );
};

UClass* AFoxProjectile_AirStrikeRocketBase::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_CloudBase
// 0x0014 (0x031C - 0x0308)
class AFoxProjectile_CloudBase : public AFoxProjectile_GrenadeBase
{
public:
	float                                              LastCloudUpdate;                                  		// 0x0308 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CloudUpdatePeriod;                                		// 0x030C (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bActive : 1;                                      		// 0x0310 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              CloudExpirationTime;                              		// 0x0314 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CloudFadeoutTime;                                 		// 0x0318 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1706 ];

		return pClassPointer;
	};

	void CloudExpire ( );
	class AEmitter* GrenadeExplosion ( struct FVector HitLocation, struct FVector HitNormal, unsigned long bOnGround );
	void StopTrailEmitterComponent ( );
	void HideProjectile ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	float GetEffectTime ( );
	void Tick ( float DeltaTime );
};

UClass* AFoxProjectile_CloudBase::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_FlashGrenadeBase
// 0x0008 (0x0310 - 0x0308)
class AFoxProjectile_FlashGrenadeBase : public AFoxProjectile_GrenadeBase
{
public:
	float                                              MaxDuration;                                      		// 0x0308 (0x0004) [0x0000000000000000]              
	float                                              IdealRadius;                                      		// 0x030C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1707 ];

		return pClassPointer;
	};

	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	float GetEffectTime ( );
};

UClass* AFoxProjectile_FlashGrenadeBase::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_MineBase
// 0x0061 (0x0369 - 0x0308)
class AFoxProjectile_MineBase : public AFoxProjectile_GrenadeBase
{
public:
	float                                              TriggerDistance;                                  		// 0x0308 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bProximityMine : 1;                               		// 0x030C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      TweenToStopLocation : 1;                          		// 0x030C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bActive : 1;                                      		// 0x030C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              ActivationTime;                                   		// 0x0310 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    LandEvent;                                        		// 0x0314 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    ActivateEvent;                                    		// 0x0318 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    ProximityEvent;                                   		// 0x031C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    ExplodeEvent;                                     		// 0x0320 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    DestroyedEvent;                                   		// 0x0324 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ExplosionWarmupTime;                              		// 0x0328 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       BlinkSpeedParameterName;                          		// 0x032C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystemComponent*                    HardSuitPingPSC;                                  		// 0x0334 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             HardSuitPingPS;                                   		// 0x0338 (0x0004) [0x0000000000000000]              
	struct FName                                       HardSuitPingPSAttachName;                         		// 0x033C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     StopLocation;                                     		// 0x0344 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    StopRotation;                                     		// 0x0350 (0x000C) [0x0000000000000020]              ( CPF_Net )
	float                                              LocationTweenSpeed;                               		// 0x035C (0x0004) [0x0000000000000000]              
	class AFoxProjectile_HRVJammerBase*                NearJammer;                                       		// 0x0360 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxWeapon*                                  WeaponOwner;                                      		// 0x0364 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      DestroyedScoreEvent;                              		// 0x0368 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1708 ];

		return pClassPointer;
	};

	void HandleStickTo ( struct FStickToDetails NewStickToInfo );
	struct FRotator eventGetAdjustedRotation ( );
	void GrenadeDestroyedBy ( class AController* EventInstigator );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void Init ( struct FVector Direction );
	bool ShouldBounce ( class AActor* Touched, struct FVector HitNormal );
	void Destroyed ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void ProximityCheck ( );
	void FindNearbyJammer ( );
	float GetEffectTime ( );
	void Activate ( );
	class USkeletalMeshComponent* GetHardSuitHRVPSAttachMesh ( );
	void CreateHardSuitHRVPS ( );
	void ToggleHRVEffects ( unsigned long bEnabled, unsigned long bHardSuitHRV );
	void SetBlinkSpeed ( float NewBlinkSpeed );
	void ResizeCylinderComponent ( float NewRadius, float NewHeight );
	void StopBounce ( struct FVector HitNormal, struct FVector HitLocation );
	void OnMineDeployed ( );
	void PostBeginPlay ( );
	void ReplicatedEvent ( struct FName VarName );
};

UClass* AFoxProjectile_MineBase::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_DecoyBase
// 0x003F (0x03A8 - 0x0369)
class AFoxProjectile_DecoyBase : public AFoxProjectile_MineBase
{
public:
	class UClass*                                      DecoyActorClass;                                  		// 0x036C (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bHRVDecoy : 1;                                    		// 0x0370 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	TArray< struct FName >                             AnimNames;                                        		// 0x0374 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      DecoyMeshComponent;                               		// 0x0380 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       ColorParameterName;                               		// 0x0384 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UMaterialInstanceConstant*                   EnemyHVTMaterialInstance;                         		// 0x038C (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UMaterialInstanceConstant*                   FriendlyHVTMaterialInstance;                      		// 0x0390 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UMaterialInstanceConstant*                   DecoyHVTMaterialInstanceOff;                      		// 0x0394 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UMaterialInstanceConstant*                   DecoyPlayerMarker;                                		// 0x0398 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UAnimNodeSlot*                               CachedAnimNodeSlot;                               		// 0x039C (0x0004) [0x0000000000000000]              
	unsigned char                                      AnimationNodeSequenceIndex;                       		// 0x03A0 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UParticleSystemComponent*                    DecoyPSC;                                         		// 0x03A4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1709 ];

		return pClassPointer;
	};

	void SetEmissives ( );
	unsigned char eventScriptGetTeamNum ( );
	void SetDepthPriorityGroup ( unsigned char NewDepthPriorityGroup );
	float GetEffectTime ( );
	void Destroyed ( );
	bool IsLocalPlayersTeam ( );
	class USkeletalMeshComponent* GetHardSuitHRVPSAttachMesh ( );
	void SetDecoyMeshMaterials ( class UMaterialInstanceConstant* Material );
	void ToggleHRVEffects ( unsigned long bEnable, unsigned long bHardSuitHRV );
	void SetupAnimation ( );
	void SetHRVMaterial ( );
	bool ShouldBounce ( class AActor* Touched, struct FVector HitNormal );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void Activate ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* AFoxProjectile_DecoyBase::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_HRVJammerBase
// 0x000F (0x0378 - 0x0369)
class AFoxProjectile_HRVJammerBase : public AFoxProjectile_MineBase
{
public:
	unsigned long                                      bPawnsDetectableInHRV : 1;                        		// 0x036C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPawnsCanUseHRV : 1;                              		// 0x036C (0x0004) [0x0000000000000000] [0x00000002] 
	class UParticleSystemComponent*                    JammerPSC;                                        		// 0x0370 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    JammerHRVPSC;                                     		// 0x0374 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1710 ];

		return pClassPointer;
	};

	bool IsActorInRangeOfHRVJammer ( class AActor* TestActor );
	void ToggleHRVEffects ( unsigned long bEnable, unsigned long bHardSuitHRV );
	void StopParticleFX ( );
	void Destroyed ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void StartGrenadeTimer ( float CookedTime );
	bool ShouldBounce ( class AActor* Touched, struct FVector HitNormal );
	void FindNearbyJammer ( );
	void Activate ( );
	float GetEffectTime ( );
};

UClass* AFoxProjectile_HRVJammerBase::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_PackBase
// 0x000F (0x0378 - 0x0369)
class AFoxProjectile_PackBase : public AFoxProjectile_MineBase
{
public:
	int                                                MaxUses;                                          		// 0x036C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                UsesLeft;                                         		// 0x0370 (0x0004) [0x0000000000000000]              
	int                                                PackLevel;                                        		// 0x0374 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1711 ];

		return pClassPointer;
	};

	bool ShouldBounce ( class AActor* Touched, struct FVector HitNormal );
	void StopBounce ( struct FVector HitNormal, struct FVector HitLocation );
	void DoUseEffect ( class AFoxPawn* Other );
	void Touch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void Activate ( );
	void DoExplosion ( );
};

UClass* AFoxProjectile_PackBase::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_AmmoPackBase
// 0x0000 (0x0378 - 0x0378)
class AFoxProjectile_AmmoPackBase : public AFoxProjectile_PackBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1712 ];

		return pClassPointer;
	};

	bool AddAmmoToWeapon ( class AFoxWeapon* Wep, class AFoxPawn* WepOwner );
	void DoUseEffect ( class AFoxPawn* Other );
	void StopBounce ( struct FVector HitNormal, struct FVector HitLocation );
	void Activate ( );
};

UClass* AFoxProjectile_AmmoPackBase::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_StunMineBase
// 0x000B (0x0374 - 0x0369)
class AFoxProjectile_StunMineBase : public AFoxProjectile_MineBase
{
public:
	float                                              FriendlyFireDuration;                             		// 0x036C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxDuration;                                      		// 0x0370 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1713 ];

		return pClassPointer;
	};

	class AEmitter* GrenadeExplosion ( struct FVector HitLocation, struct FVector HitNormal, unsigned long bOnGround );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	float GetEffectTime ( );
};

UClass* AFoxProjectile_StunMineBase::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_RocketBase
// 0x0040 (0x0348 - 0x0308)
class AFoxProjectile_RocketBase : public AFoxProjectile_GrenadeBase
{
public:
	unsigned long                                      bFragment : 1;                                    		// 0x0308 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHasFragmented : 1;                               		// 0x0308 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bArmed : 1;                                       		// 0x0308 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bIsDud : 1;                                       		// 0x0308 (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      bRocketOn : 1;                                    		// 0x0308 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bCheckForDud : 1;                                 		// 0x0308 (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              LastFragmentLineCheck;                            		// 0x030C (0x0004) [0x0000000000000000]              
	float                                              TimeBetweenFragmentLineChecks;                    		// 0x0310 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ArmingTimerLength;                                		// 0x0314 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AccelerationSpeed;                                		// 0x0318 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BounceVelocity;                                   		// 0x031C (0x0004) [0x0000000000000000]              
	float                                              RocketOffVelocity;                                		// 0x0320 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      FragmentClass;                                    		// 0x0324 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FragmentCollisionDeltaTime;                       		// 0x0328 (0x0004) [0x0000000000000000]              
	float                                              DudTestDistance;                                  		// 0x032C (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             FragmentFX;                                       		// 0x0330 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             DudTrailFX;                                       		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    StartLoopEvent;                                   		// 0x0338 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    StopLoopEvent;                                    		// 0x033C (0x0004) [0x0000000000000000]              
	struct FName                                       DopplerRTPCName;                                  		// 0x0340 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1714 ];

		return pClassPointer;
	};

	void eventMakeDud ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void Bounce ( struct FVector HitLocation, struct FVector HitNormal );
	void StopBounce ( struct FVector HitNormal, struct FVector HitLocation );
	void Tick ( float DeltaTime );
	void eventFragmentRocket ( );
	void ArmingTimer ( );
	void StartArmingTimer ( );
	void PostBeginPlay ( );
	void ReplicatedEvent ( struct FName VarName );
	void UpdateDopplerEffect ( float DeltaTime );
};

UClass* AFoxProjectile_RocketBase::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_RocketFragmentBase
// 0x0010 (0x0318 - 0x0308)
class AFoxProjectile_RocketFragmentBase : public AFoxProjectile_GrenadeBase
{
public:
	float                                              ExpandRate;                                       		// 0x0308 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     LastOffset;                                       		// 0x030C (0x000C) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1715 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
	void InitFragment ( struct FVector InitalVelocity );
	void StartGrenadeTimer ( float CookedTime );
};

UClass* AFoxProjectile_RocketFragmentBase::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_SmokeGrenadeBase
// 0x0008 (0x0310 - 0x0308)
class AFoxProjectile_SmokeGrenadeBase : public AFoxProjectile_GrenadeBase
{
public:
	class AFoxSmokeLensFlare*                          LensFlareEffect;                                  		// 0x0308 (0x0004) [0x0000000000000000]              
	class UClass*                                      LensFlareClass;                                   		// 0x030C (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1716 ];

		return pClassPointer;
	};

	bool IsTraceObstructed ( struct FVector* StartLoc, struct FVector* EndLoc );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void eventDestroyed ( );
	class AEmitter* GrenadeExplosion ( struct FVector HitLocation, struct FVector HitNormal, unsigned long bOnGround );
	float GetEffectTime ( );
};

UClass* AFoxProjectile_SmokeGrenadeBase::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_ThrownBase
// 0x001C (0x0324 - 0x0308)
class AFoxProjectile_ThrownBase : public AFoxProjectile_GrenadeBase
{
public:
	class UClass*                                      WeaponClass;                                      		// 0x0308 (0x0004) [0x0000000000000000]              
	int                                                RandPitchRange;                                   		// 0x030C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                RandYawRange;                                     		// 0x0310 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                RandRollRange;                                    		// 0x0314 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    PickUpAmmoSound;                                  		// 0x0318 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    StartLoopEvent;                                   		// 0x031C (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    StopLoopEvent;                                    		// 0x0320 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1717 ];

		return pClassPointer;
	};

	void HandleStickTo ( struct FStickToDetails NewStickToInfo );
	void eventDestroyed ( );
	void PlayImpactSound ( class UPhysicalMaterial* PhysMat );
	class UParticleSystem* eventGetImpactParticleSystem ( class UPhysicalMaterial* PhysMat );
	void eventInstigatorPickup ( );
	void Bounce ( struct FVector HitLocation, struct FVector HitNormal );
	void StopBounce ( struct FVector HitNormal, struct FVector HitLocation );
	void eventPostBeginPlay ( );
};

UClass* AFoxProjectile_ThrownBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon
// 0x0930 (0x0BE8 - 0x02B8)
class AFoxWeapon : public AWeapon
{
public:
	unsigned long                                      bInfiniteSpareAmmo : 1;                           		// 0x02B8 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bInstantReload : 1;                               		// 0x02B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDLC : 1;                                         		// 0x02B8 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bIsDepotWeapon : 1;                               		// 0x02B8 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bShouldReloadWithInfiniteAmmo : 1;                		// 0x02B8 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bCanMelee : 1;                                    		// 0x02B8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bCanMeleeTeammates : 1;                           		// 0x02B8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bCanWieldWithoutAmmo : 1;                         		// 0x02B8 (0x0004) [0x0000000000004003] [0x00000080] ( CPF_Edit | CPF_Const | CPF_Config )
	unsigned long                                      bInitializedAmmo : 1;                             		// 0x02B8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bIsPendingReloadInfo : 1;                         		// 0x02B8 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bHasAimingColor : 1;                              		// 0x02B8 (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bDamageZoomOut : 1;                               		// 0x02B8 (0x0004) [0x0000000000004003] [0x00000800] ( CPF_Edit | CPF_Const | CPF_Config )
	unsigned long                                      bOverrideTightAimTime : 1;                        		// 0x02B8 (0x0004) [0x0000000000004002] [0x00001000] ( CPF_Const | CPF_Config )
	unsigned long                                      bFrictionEnabled : 1;                             		// 0x02B8 (0x0004) [0x0000000000004001] [0x00002000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bAdhesionEnabled : 1;                             		// 0x02B8 (0x0004) [0x0000000000004001] [0x00004000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseTABaseSpread : 1;                             		// 0x02B8 (0x0004) [0x0000000000004001] [0x00008000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDrawSpreadDebug : 1;                             		// 0x02B8 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bSupportsBarrelMods : 1;                          		// 0x02B8 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bSupportsMagazineMods : 1;                        		// 0x02B8 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bSupportsMuzzleMods : 1;                          		// 0x02B8 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bSupportsScopeMods : 1;                           		// 0x02B8 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bSupportsStockMods : 1;                           		// 0x02B8 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bSupportsGripMods : 1;                            		// 0x02B8 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bSupportsCamo : 1;                                		// 0x02B8 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bAutomaticWeapon : 1;                             		// 0x02B8 (0x0004) [0x0000000000000003] [0x01000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bWaitingForPRI : 1;                               		// 0x02B8 (0x0004) [0x0000000000002001] [0x02000000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bHasPostGrip : 1;                                 		// 0x02B8 (0x0004) [0x0000000000002001] [0x04000000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bLoopMuzzleFlashLight : 1;                        		// 0x02B8 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bPlayBrassEjectionWithFiring : 1;                 		// 0x02B8 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bPlayingFiringSound : 1;                          		// 0x02B8 (0x0004) [0x0000000000002001] [0x20000000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bAllowShortReload : 1;                            		// 0x02B8 (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      bForceIKDisabled : 1;                             		// 0x02B8 (0x0004) [0x0000000000000000] [0x80000000] 
	class UClass*                                      WeaponAttachmentClass;                            		// 0x02BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxPC*                                      PreviousOwner;                                    		// 0x02C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     PreviousOwnerName;                                		// 0x02C4 (0x000C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	int                                                JumpStaminaAmount;                                		// 0x02D0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MinPreviewDistance;                               		// 0x02D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FRotator                                    FaceCameraRotation;                               		// 0x02D8 (0x000C) [0x0000000000000002]              ( CPF_Const )
	int                                                UnlockSkillID;                                    		// 0x02E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                UnlockID;                                         		// 0x02E8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                ParentID;                                         		// 0x02EC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FString                                     ImageIconRef;                                     		// 0x02F0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FriendlyName;                                     		// 0x02FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyDesc;                                     		// 0x0308 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyTag;                                      		// 0x0314 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyToolTip;                                  		// 0x0320 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeaponTypeLabel;                                  		// 0x032C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     WeaponClassLabel;                                 		// 0x0338 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FAnimNameSwapInfo >                 AnimNameSwap;                                     		// 0x0344 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FName                                       WeaponIronSightName;                              		// 0x0350 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              FirstPersonFOV;                                   		// 0x0358 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FString                                     TightAimLensEffectClassName;                      		// 0x035C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AFoxCameraLensEffect_TightAim*               TightAimLensEffect;                               		// 0x0368 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KillMomentumScalar;                               		// 0x036C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FGameBalanceRange                           DamageRange;                                      		// 0x0370 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FGameBalanceRange                           BaseSpreadRange;                                  		// 0x037C (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FGameBalanceRange                           TABaseSpreadRange;                                		// 0x0388 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FGameBalanceRange                           SpreadPerShotRange;                               		// 0x0394 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FGameBalanceRange                           SpreadPerShotExpRange;                            		// 0x03A0 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FGameBalanceRange                           MaxSpreadRange;                                   		// 0x03AC (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FGameBalanceRange                           DecayRateRange;                                   		// 0x03B8 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FGameBalanceRange                           RecoilModifierRange;                              		// 0x03C4 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FGameBalanceRange                           MaxDistanceRange;                                 		// 0x03D0 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FGameBalanceRange                           IdealDistanceRange;                               		// 0x03DC (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FGameBalanceRange                           ReloadRateRange;                                  		// 0x03E8 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FGameBalanceRange                           RecoilReloadRateRange;                            		// 0x03F4 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FGameBalanceRange                           MagazineSizeRange;                                		// 0x0400 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FGameBalanceRange                           MaxSpeedRange;                                    		// 0x040C (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FGameBalanceRange                           RateOfFireRange;                                  		// 0x0418 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FGameBalanceRange                           MovementSpeedRange;                               		// 0x0424 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                MovementModifier;                                 		// 0x0430 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FFoxWeaponModInfo                           CoalescedWeaponModInfo;                           		// 0x0434 (0x0024) [0x0000000000004000]              ( CPF_Config )
	struct FGameBalanceRange                           SpreadStatRange;                                  		// 0x0458 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FGameBalanceRange                           RecoilStatRange;                                  		// 0x0464 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	TArray< struct FString >                           StatHeaders;                                      		// 0x0470 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           Stats;                                            		// 0x047C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      PreviousFiringMode;                               		// 0x0488 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      weaponAttachLoc;                                  		// 0x0489 (0x0001) [0x0000000000000000]              
	unsigned char                                      WeaponType;                                       		// 0x048A (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      WeaponSlot;                                       		// 0x048B (0x0001) [0x0000000000000000]              
	int                                                RateOfFire;                                       		// 0x048C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                BurstFireMax;                                     		// 0x0490 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                BurstFiredRounds;                                 		// 0x0494 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	TArray< int >                                      PendingFireStates;                                		// 0x0498 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	float                                              RechargeTimer;                                    		// 0x04A4 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	int                                                AmmoUsedCount;                                    		// 0x04A8 (0x0004) [0x0000000040000021]              ( CPF_Edit | CPF_Net | CPF_EditInlineNotify )
	int                                                SimulatedAmmoUsedCount;                           		// 0x04AC (0x0004) [0x0000000040000001]              ( CPF_Edit | CPF_EditInlineNotify )
	int                                                AmmoLeftCount;                                    		// 0x04B0 (0x0004) [0x0000000040000021]              ( CPF_Edit | CPF_Net | CPF_EditInlineNotify )
	int                                                SpareAmmoCount;                                   		// 0x04B4 (0x0004) [0x0000000040004021]              ( CPF_Edit | CPF_Net | CPF_Config | CPF_EditInlineNotify )
	int                                                MaxSpareAmmo;                                     		// 0x04B8 (0x0004) [0x0000000000004021]              ( CPF_Edit | CPF_Net | CPF_Config )
	float                                              MagSize;                                          		// 0x04BC (0x0004) [0x0000000040004021]              ( CPF_Edit | CPF_Net | CPF_Config | CPF_EditInlineNotify )
	float                                              MagSizeModifier;                                  		// 0x04C0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                InitialMagazines;                                 		// 0x04C4 (0x0004) [0x0000000040004023]              ( CPF_Edit | CPF_Const | CPF_Net | CPF_Config | CPF_EditInlineNotify )
	float                                              ReloadDuration;                                   		// 0x04C8 (0x0004) [0x0000000040000001]              ( CPF_Edit | CPF_EditInlineNotify )
	int                                                PendingReloadAmount;                              		// 0x04CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                IdealRange;                                       		// 0x04D0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxRange;                                         		// 0x04D4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxTraceRange;                                    		// 0x04D8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxRangeDamageMultiplier;                         		// 0x04DC (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              MeleeRange;                                       		// 0x04E0 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              MeleeLungeRange;                                  		// 0x04E4 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              MeleeOuterSearchStepSize;                         		// 0x04E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeInnerSearchStepSize;                         		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZoomCurrentFOV;                                   		// 0x04F0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UMaterialInstanceConstant*                   BlackOutMaterial;                                 		// 0x04F4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FName                                       ZoomTimerName;                                    		// 0x04F8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              WeaponTightAimTime;                               		// 0x0500 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MaxFrictionDistance;                              		// 0x0504 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PeakFrictionDistance;                             		// 0x0508 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinFrictionDistance;                              		// 0x050C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   FrictionMultiplierRange;                          		// 0x0510 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PeakFrictionRadiusScale;                          		// 0x0518 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PeakFrictionHeightScale;                          		// 0x051C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TightTrackingFrictionMultipler;                   		// 0x0520 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector                                     FrictionTargetOffset;                             		// 0x0524 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxAdhesionTime;                                  		// 0x0530 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinAdhesionDistance;                              		// 0x0534 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxAdhesionDistance;                              		// 0x0538 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxAdhesionAimDistY;                              		// 0x053C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxAdhesionAimDistZ;                              		// 0x0540 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   AdhesionScaleRange;                               		// 0x0544 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinAdhesionScaleAmount;                           		// 0x054C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinAdhesionLookAmount;                            		// 0x0550 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinAdhesionTargetVelocity;                        		// 0x0554 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinAdhesionPlayerVelocity;                        		// 0x0558 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AimAssistScale;                                   		// 0x055C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AimAssistScaleWhileZoomed;                        		// 0x0560 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	TArray< float >                                    BaseSpread;                                       		// 0x0564 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< float >                                    TABaseSpread;                                     		// 0x0570 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	float                                              SpreadAccumulationRate;                           		// 0x057C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SpreadRecoveryRate;                               		// 0x0580 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaximumSpread;                                    		// 0x0584 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SpreadZoomMultiplier;                             		// 0x0588 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SpreadCrouchMultiplier;                           		// 0x058C (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              SpreadJumpMultiplier;                             		// 0x0590 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              SpreadJumpConstant;                               		// 0x0594 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              MovementSpreadConstant;                           		// 0x0598 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              MovementSpreadMultiplier;                         		// 0x059C (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              SpreadCenter;                                     		// 0x05A0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SpreadCenterWeight;                               		// 0x05A4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SpreadPerShot;                                    		// 0x05A8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SpreadPerShotExp;                                 		// 0x05AC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SpreadShotCount;                                  		// 0x05B0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                SpreadShotCountDecayRate;                         		// 0x05B4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SpreadShotCountDecayExp;                          		// 0x05B8 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              SpreadLastFireTime;                               		// 0x05BC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              ModSpreadMultipler;                               		// 0x05C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpreadAccumulationModifier;                       		// 0x05C4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	TArray< struct FVector2D >                         SpreadData;                                       		// 0x05C8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FRotator                                    SpreadCameraOffset;                               		// 0x05D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxOffsetMagnitude;                               		// 0x05E0 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              SpreadOffsetNormalWeight;                         		// 0x05E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpreadOffsetTightAimWeight;                       		// 0x05E8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                SpreadSeed;                                       		// 0x05EC (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                PendingSpreadSeed;                                		// 0x05F0 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                SeedIndex;                                        		// 0x05F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ClientSeedIndex;                                  		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FImpactDetails >                    ServerQueuedImpacts;                              		// 0x05FC (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	TArray< struct FImpactDetails >                    ClientQueuedImpacts;                              		// 0x0608 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	float                                              RecoilSizeModifier;                               		// 0x0614 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RecoilSize;                                       		// 0x0618 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilAccumulation;                               		// 0x061C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilZoomMultiplier;                             		// 0x0620 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilRecoveryTime;                               		// 0x0624 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FTARecoil_Loc_Property                      TAR_Loc_Range;                                    		// 0x0628 (0x0020) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FTARecoil_Rot_Property                      TAR_Rot_Range;                                    		// 0x0648 (0x0020) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FTARecoil_Current_Property                  TAR_Current;                                      		// 0x0668 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	class UForceFeedbackWaveform*                      FireFeedbackWaveform;                             		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCameraShake*                                TightAimCameraShake;                              		// 0x068C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       CamoSwapParamName;                                		// 0x0690 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CamoTileParamName;                                		// 0x0698 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CamoUseSpecularParamName;                         		// 0x06A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CamoUseMetallicParamName;                         		// 0x06A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CamoUseBaseColorParamName;                        		// 0x06B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CamoBaseColorParamName;                           		// 0x06B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GreyParamName;                                    		// 0x06C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FStatDescriptor >                   StatDescriptors;                                  		// 0x06C8 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< class UMaterialInstanceConstant* >         TranslucentMaterials;                             		// 0x06D4 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         TransparentMaterials;                             		// 0x06E0 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FName                                       MuzzleSocketName;                                 		// 0x06EC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       StockSocketName;                                  		// 0x06F4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BarrelSocketName;                                 		// 0x06FC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       MagazineSocketName;                               		// 0x0704 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ScopeSocketName;                                  		// 0x070C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       HangerSocketName;                                 		// 0x0714 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       GripSocketName;                                   		// 0x071C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BrassEjectionName;                                		// 0x0724 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       RailSocketName;                                   		// 0x072C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       LeftHandSocketName;                               		// 0x0734 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       RightHandSocketName;                              		// 0x073C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FFoxWeaponConfigInfo                        WeaponConfig;                                     		// 0x0744 (0x002C) [0x0000000000002000]              ( CPF_Transient )
	struct FFoxWeaponModInfo                           WeaponModifiers;                                  		// 0x0770 (0x0024) [0x0000000000002000]              ( CPF_Transient )
	class UFoxWeaponMuzzle_Base*                       MuzzleMod;                                        		// 0x0794 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxWeaponStock_Base*                        StockMod;                                         		// 0x0798 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxWeaponBarrel_Base*                       BarrelMod;                                        		// 0x079C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxWeaponMagazine_Base*                     MagazineMod;                                      		// 0x07A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxWeaponScope_Base*                        ScopeMod;                                         		// 0x07A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxWeaponHanger_Base*                       HangerMod;                                        		// 0x07A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxWeaponGrip_Base*                         GripMod;                                          		// 0x07AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxWeaponAmmo_Base*                         AmmoMod;                                          		// 0x07B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMeshComponent*                              RailMeshComponent;                                		// 0x07B4 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      HangerMesh;                                       		// 0x07B8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UPointLightComponent*                        MuzzleFlashLight;                                 		// 0x07BC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              MuzzleLightDuration;                              		// 0x07C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MuzzleLightPulseTime;                             		// 0x07C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MuzzleLightOffsetFromCannon;                      		// 0x07C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    MuzFlashEmitter;                                  		// 0x07D4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    MuzFlashBreakEmitter;                             		// 0x07D8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             BrassEjectionPS;                                  		// 0x07DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MuzFlashBreakScale;                               		// 0x07E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeToHideMuzzleFlashPS;                          		// 0x07E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ULensFlareComponent*                         MuzzleLensFlare;                                  		// 0x07E8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     MuzzleFlashColor;                                 		// 0x07EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMaterialInstance* >                 SpawnFXStageOne;                                  		// 0x07F8 (0x000C) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstance* >                 SpawnFXStageTwo;                                  		// 0x0804 (0x000C) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              ShowTracerDistance;                               		// 0x0810 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UClass*                                      TracerClass;                                      		// 0x0814 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    FireSound;                                        		// 0x0818 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    TailSound;                                        		// 0x081C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    SuppressedFireSound;                              		// 0x0820 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    SuppressedTailSound;                              		// 0x0824 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    WhipSound;                                        		// 0x0828 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    FireNoAmmoSound;                                  		// 0x082C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    ReloadSound;                                      		// 0x0830 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UAnimSet* >                          MCustomAnimSets;                                  		// 0x0834 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          FCustomAnimSets;                                  		// 0x0840 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAnimNodeSlot*                               CustomAnimNode;                                   		// 0x084C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CustomAnimNodeName;                               		// 0x0850 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAnimNodeSlot*                               HangerAnimNode;                                   		// 0x0858 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HangerAnimNodeName;                               		// 0x085C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FWeaponAnimSet                              AN_Select;                                        		// 0x0864 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_Deselect;                                      		// 0x0898 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_InsertAmmo;                                    		// 0x08CC (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_Melee;                                         		// 0x0900 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_Melee_Lunge;                                   		// 0x0934 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_KnifeMelee;                                    		// 0x0968 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_KnifeMelee_Lunge;                              		// 0x099C (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_Sprint;                                        		// 0x09D0 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_FlashBanged;                                   		// 0x0A04 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_FullReload;                                    		// 0x0A38 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_ShortReload;                                   		// 0x0A6C (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_StartReload;                                   		// 0x0AA0 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_EndReload;                                     		// 0x0AD4 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_NormalFire;                                    		// 0x0B08 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_ScopedFire;                                    		// 0x0B3C (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_TightAimFire;                                  		// 0x0B70 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_CrouchedFire;                                  		// 0x0BA4 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              WeaponReloadRate;                                 		// 0x0BD8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UMaterialInstanceConstant* >         CamoMICs;                                         		// 0x0BDC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1718 ];

		return pClassPointer;
	};

	struct FName GetAdjustedAnimName ( struct FName InAnimName );
	bool StillFiring ( unsigned char FireMode );
	void ClearFlashLocation ( );
	bool StopSprintForFireMode ( unsigned char FireModeNum );
	float GetMuzzleLightBrightness ( float TimeSinceFired );
	void SetUpWeaponStats ( );
	bool GetFormattedWeaponStats ( TArray< struct FStatPanelEntry >* StatEntries );
	void OnRechargeFinished ( );
	bool BeginRecharge ( );
	float GetRechargeRatio ( );
	float GetRechargeTimeLeft ( );
	bool IsRecharging ( );
	bool GetConfigInfoForWeapon ( class UClass* DamageType, struct FFoxWeaponConfigInfo* ConfigInfo );
	struct FString GetStatDescriptor ( int MagazineScore, int ScopeScore, int MuzzleScore, int StockScore, int BarrelGripScore );
	void OnReleaseWeaponSelect ( );
	void OnWeaponSelect ( );
	TArray< struct FWeaponImpactInfo > GetCollidingPawns ( struct FVector StartTrace, struct FVector EndTrace, float Extent, float* FarthestPawnDist );
	void NotifyDamaged ( );
	bool IsModClassSupported ( class UClass* ModClass );
	bool CalculateWeaponModifiers ( unsigned long bPresetOverride );
	bool IsAGrenade ( );
	void StartFireRumble ( );
	unsigned char GetAimingStatus ( float* OutRange );
	bool ShouldDrawCrosshair ( );
	void PropagateSeed ( int Seed );
	void ClientSeedSpread ( int InSeed, int NewPendingSeed, int NewUsedAmmoCount );
	void SeedSpread ( );
	struct FRotator AddSpread ( struct FRotator BaseAim );
	void PawnWeaponStoppedFiring ( );
	void PawnWeaponFired ( );
	float GetSpreadConstant ( );
	float GetSpreadMultiplier ( );
	void TickSpread ( float DeltaTime, unsigned char FireModeNum );
	float GetFOVRatio ( );
	void FadeScopeStage2 ( );
	void FadeScopeStage1 ( );
	void ToggleZoomMesh ( unsigned long bNoFadeIn );
	void UpdateZoomEffects ( );
	void eventStopZoomMode ( );
	void ServerSetZoomState ( unsigned char NewZoomStep );
	void StepZoom ( );
	void UpdateTightAimByWeaponRecoil ( float DeltaTime );
	void SetZoomedPosition ( float DeltaTime );
	void SetZoomedFOV ( );
	bool ForceSetWalking ( );
	float eventGetAdjustedFOVAngle ( float FOVAngle );
	bool CanScope ( );
	bool CanTightAim ( );
	bool IsScoped ( );
	bool InZoom ( );
	void TimeWeaponEquipping ( );
	void PutDownAbortWeaponAnimation ( );
	void TimeWeaponPutDown ( );
	void FireAmmunition ( );
	void GiveTo ( class APawn* Other );
	void DropFrom ( struct FVector StartLocation, struct FVector StartVelocity );
	void ClientWeaponThrown ( );
	void StopEffectsForWeaponDrop ( );
	void DetachWeapon ( );
	void AbortWeaponSwitch ( );
	class USkeletalMeshComponent* GetMeshComponent ( );
	void SetAmmoModAttributes ( );
	void SetGripModAttributes ( );
	void SetHangerModAttributes ( );
	void SetScopeModAttributes ( );
	void SetMuzzleModAttributes ( );
	void ChangeReloadName ( struct FName NewName, struct FName HangerReloadName );
	void SetMagazineModAttributes ( );
	void SetStockModAttributes ( );
	void SetBarrelModAttributes ( );
	void eventApplyReloadSpeed ( struct FFoxWeaponModInfo* ReloadModInfo );
	void eventApplyRecoil ( );
	void eventApplyRateofFire ( );
	void eventApplyRange ( );
	void eventApplyMovement ( );
	void eventApplyDamage ( );
	void eventApplyAmmo ( );
	void eventApplyAccuracy ( );
	void ClampWeaponModInfo ( float Lower, float upper, struct FFoxWeaponModInfo* ModInfo );
	void AddToWeaponModInfo ( struct FFoxWeaponModInfo* ModInfo, struct FFoxWeaponModInfo* AddedMod );
	void ChangeBurstFire ( int PresetIndex );
	void SetWeaponModifierAttributes ( );
	void SetPawnModifierAttributes ( );
	void eventAttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName );
	void ItemRemovedFromInvManager ( );
	void ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate );
	void TryToGetBackToZoom ( );
	void FinishedZooming ( );
	float eventGetTimeToTightAim ( );
	void StartZooming ( );
	bool CanMelee ( );
	void DoMeleeDamage ( );
	void FaceMeleeTarget ( );
	class AFoxPawn* GetPawnToMelee ( unsigned long bPreLunge, struct FImpactInfo* Impact );
	void BeginMelee ( );
	float StartFPMeleeAnim ( unsigned long bHitSomething );
	void SetMeleeTarget ( class APawn* NewMeleeTarget, struct FImpactInfo Impact );
	void eventStartMelee ( );
	void ServerStartMeleeAnim ( );
	void ClearQueuedImpacts ( );
	void PerformReload ( int AmountToReload );
	void PutDownWeapon ( );
	bool eventIsReloadBlockActive ( );
	bool IsMeleeing ( );
	bool IsReloading ( );
	bool ShouldAutoSwitchWhenOutOfAmmo ( );
	bool ShouldAutoReload ( );
	void TryToAutoReload ( );
	bool CanReload ( );
	void eventStartReload ( );
	void ClientForceReload ( );
	bool CanFireWeapon ( );
	bool ShouldRefire ( );
	void ClearAllPendingFire ( );
	void ClearPendingFire ( int FireMode );
	void SetPendingFire ( int FireMode );
	bool PendingFire ( int FireMode );
	int GetPendingFireLength ( );
	void eventAutoSwitchWeapon ( );
	void GetWeaponDebug ( TArray< struct FString >* DebugInfo );
	void ResetTightAimRecoil ( );
	void AddTightAimRecoil ( );
	void CalculateRecoilEffects ( );
	float GetRecoilMultiplier ( );
	void eventUpdateFirstPersonFOV ( float NewFOV );
	void TryToGetBackToFiringState ( );
	void FireModeUpdated ( unsigned char FiringMode, unsigned long bViaReplication );
	bool ShouldRegisterDamage ( class AActor* A );
	struct FWeaponStatInfo BuildStatInfo ( struct FImpactDetails Details );
	struct FImpactDetails GetStatInfo ( struct FWeaponStatInfo StatInfo );
	void AddKillMomentum ( class AFoxPawn* Victum, struct FVector TraceStart );
	void eventServerProcessInstantHit ( struct FImpactInfo Impact, unsigned char MyFireMode );
	void ServerFireBullet ( int inSeedIndex );
	void SetStatInfo ( struct FWeaponStatInfo StatInfo );
	void ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits );
	void InstantFire ( );
	class AProjectile* ProjectileFire ( );
	bool eventIsInstantFire ( unsigned char FireModeNum );
	bool DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup );
	bool HasAnyAmmo ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	bool HasSpareAmmo ( );
	int FillAmmo ( );
	int AddAmmo ( int Amount );
	void ConsumeAmmo ( unsigned char FireModeNum );
	void InitializeAmmo ( );
	struct FVector eventGetMuzzleLoc ( );
	float ModifyMeleeDamage ( float InDamage, struct FVector HitLocation, class AActor* HitActor );
	float ModifyBulletDamage ( float InDamage, struct FVector HitLocation, class AActor* HitActor );
	float GetFireModeDamage ( unsigned char FiringMode, struct FVector HitLocation, class AActor* HitActor );
	float GetTraceRange ( );
	float GetFireInterval ( unsigned char FireModeNum );
	float GetRateOfFire ( );
	bool HasInfiniteSpareAmmo ( );
	void SetInfiniteSpareAmmo ( );
	int GetMaxSpareAmmoSize ( );
	int GetTotalAmmoInGun ( );
	int eventGetAmmoUsedCount ( );
	int GetAmmoLeftInMagazine ( );
	float GetMagazineSize ( );
	bool ShouldShowMuzzleFlash ( );
	void eventDestroyed ( );
	void GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate );
	void eventPostBeginPlay ( );
	bool IsWeapon ( );
	void eventReplicatedEvent ( struct FName VarName );
	bool GetWeaponSocketOffsetFromRoot ( unsigned char offsetRef, struct FVector* theOffset, struct FQuat* TheRotation );
	bool GetLeftHandOffset ( struct FVector* theOffset );
	bool GetIronSightOffset ( struct FVector* theOffset, struct FQuat* TheRotation );
	bool SupportsRHandIK ( );
	bool SupportsLHandIK ( );
	void ChangeWeaponFireAnimName ( struct FName NewName );
	TArray< class UAnimSet* > GetAnimSets ( unsigned long bIsFemale );
	void AppendAnimSets ( unsigned long bIsFemale, TArray< class UAnimSet* >* OutAnimSets );
	void DeactivateEmissive ( );
	void ActivateEmissive ( );
	void SetDepthPriorityGroup ( unsigned char NewDepthPriorityGroup );
	bool eventHasPostGrip ( );
	void ApplyStealthMaterials ( );
	void ToggleHRVEffects ( unsigned long bEnabled );
	void SetupWeaponCamo ( );
	void SetupWeaponCamoMIC ( );
	void UpdateSpawnEffectMaterials ( struct FName ParamName, float Value, int stage );
	void SetSpawnEffectStage ( int stage, struct FLinearColor SpawnInColor );
	void PlayWeaponSound ( class UAkEvent* Sound, float NoiseLoudness );
	void StopFiringSound ( unsigned char FireModeNum );
	void StartFiringSound ( unsigned char FireModeNum );
	void SpawnTracerEffect ( struct FVector HitLocation, float HitDistance );
	void HideMuzzleFlashEmitter ( );
	void StopMuzzleFlashEffect ( );
	bool IsMuzzleFlashRelevant ( );
	void PlayBrassEjection ( );
	void StartMuzzleFlashEffect ( );
	struct FVector GetMeshMuzzleLocation ( class USkeletalMeshComponent* SkelMesh );
	void eventAttachMuzzleEffectsComponents ( class USkeletalMeshComponent* SkelMesh );
	void UpdateMuzzleEffects ( );
	void SetModsVisible ( unsigned long bShowFP, unsigned long bShowTP );
	void SetupCamoForMods ( );
	void ResetSpawnEffects ( );
	void eventInitializeAttachments ( );
	bool ShouldInitializeAttachments ( );
	bool IsCameraWithinRadius ( struct FVector TestLocation, float Radius );
	void AbortAnyAnim ( );
	void AbortReload ( );
	void StopWeaponEquipAnim ( );
	void AbortWeaponEquipAnim ( );
	float StartWeaponEquipAnim ( );
	void StopWeaponPutDownAnim ( );
	float StartWeaponPutDownAnim ( );
	void AbortMelee ( );
	void StopMeleeAnim ( );
	float StartMeleeAnim ( );
	void StopFlashedAnim ( );
	void StartFlashedAnim ( );
	void StopShortReloadAnim ( );
	void StopReloadAnim ( );
	void StartReloadAnim ( unsigned char FireMode );
	void ReloadDialog ( class AFoxPawn* FP );
	void StopFireAnim ( unsigned char FireNodeNum );
	bool IsMovingCrouched ( );
	void StartFireAnim ( unsigned char FireNodeNum );
	void StopFireEffects ( unsigned char FireModeNum );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	bool IsFirstPerson ( );
	bool ShouldPlayEffect ( );
	void StopWeaponAnim ( float BlendOutTime );
	void StopHangerAnim ( float BlendOutTime );
	float PlayHangerAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	void PlayWeaponAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	float PlayWeaponAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	void StopSyncWeaponSet ( struct FWeaponAnimSet* Set );
	void StartSyncWeaponSet ( struct FName Label, struct FWeaponAnimSet* Set );
	void StopWeaponSet ( struct FWeaponAnimSet* Set );
	void PlayWeaponSetByDuration ( float Duration, unsigned long bLooping, unsigned long bOverride, struct FWeaponAnimSet* Set );
	float PlayWeaponSet ( float Rate, unsigned long bLooping, unsigned long bOverride, struct FWeaponAnimSet* Set );
};

UClass* AFoxWeapon::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_AutomaticRifleBase
// 0x0000 (0x0BE8 - 0x0BE8)
class AFoxWeapon_AutomaticRifleBase : public AFoxWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1719 ];

		return pClassPointer;
	};

	void ChangeBurstFire ( int PresetIndex );
	void TryToGetBackToFiringState ( );
};

UClass* AFoxWeapon_AutomaticRifleBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_FlameThrowerBase
// 0x0040 (0x0C28 - 0x0BE8)
class AFoxWeapon_FlameThrowerBase : public AFoxWeapon_AutomaticRifleBase
{
public:
	float                                              FlameExtent;                                      		// 0x0BE8 (0x0004) [0x0000000000000000]              
	struct FName                                       ActionSocketName;                                 		// 0x0BEC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              timeToMaxFlameLength;                             		// 0x0BF4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned long                                      bshouldCalcFiring : 1;                            		// 0x0BF8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsFlameImpacting : 1;                            		// 0x0BF8 (0x0004) [0x0000000000000000] [0x00000002] 
	class UParticleSystemComponent*                    FlameEmitter;                                     		// 0x0BFC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    FlameStarterStopper;                              		// 0x0C00 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAkEvent*                                    FlameStarterStartEvent;                           		// 0x0C04 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    FlameStarterStopEvent;                            		// 0x0C08 (0x0004) [0x0000000000000000]              
	float                                              flameGrowthTime;                                  		// 0x0C0C (0x0004) [0x0000000000000000]              
	float                                              flameLength;                                      		// 0x0C10 (0x0004) [0x0000000000000000]              
	float                                              maxImpactFXDistance;                              		// 0x0C14 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     worldImpactLocation;                              		// 0x0C18 (0x000C) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   flameTrailMat;                                    		// 0x0C24 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1720 ];

		return pClassPointer;
	};

	void PropagateSeed ( int Seed );
	struct FRotator AddSpread ( struct FRotator BaseAim );
	void CustomFire ( );
	void StopEffectsForWeaponDrop ( );
	bool eventIsInstantFire ( unsigned char FireModeNum );
	float StartWeaponEquipAnim ( );
	float StartWeaponPutDownAnim ( );
	void StopReloadAnim ( );
	void StartReloadAnim ( unsigned char FireMode );
	bool IsMuzzleFlashRelevant ( );
	void StopFlameStarterEffect ( );
	void StopMuzzleFlashEffect ( );
	void StartMuzzleFlashEffect ( );
	void HideMuzzleFlashEmitter ( );
	void StartFlameStarterEffect ( );
	void AttachMuzzleEffectsComponents ( class USkeletalMeshComponent* SkelMesh );
	void eventSetFlameParameters ( float flameMaxDistance, float flameDip, float flameDistance );
	class UAkEvent* GetWeaponSpecificImpactSound ( class UFoxPMPInfo_ImpactFX* ImpactFX_Info, unsigned char FiringMode );
	class UParticleSystem* GetWeaponSpecificImpactEffect ( class UFoxPMPInfo_ImpactFX* ImpactFX_Info, unsigned char FiringMode );
	void CalcAndSetFlameParms ( float DeltaSeconds );
};

UClass* AFoxWeapon_FlameThrowerBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_DeployableBase
// 0x0074 (0x0C5C - 0x0BE8)
class AFoxWeapon_DeployableBase : public AFoxWeapon
{
public:
	unsigned char                                      DeploySpecialMove;                                		// 0x0BE8 (0x0001) [0x0000000000000002]              ( CPF_Const )
	class USkeletalMeshComponent*                      DeployableTestMesh;                               		// 0x0BEC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       TestMeshIdleName;                                 		// 0x0BF0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      DeployActorClass;                                 		// 0x0BF8 (0x0004) [0x0000000000000000]              
	float                                              DeployDistance;                                   		// 0x0BFC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DeployDepth;                                      		// 0x0C00 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              WidthExtent;                                      		// 0x0C04 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bDeploying : 1;                                   		// 0x0C08 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bValidLocation : 1;                               		// 0x0C08 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bTryToEquip : 1;                                  		// 0x0C08 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	struct FVector                                     TestMeshModifiedLocation;                         		// 0x0C0C (0x000C) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   TestMIC;                                          		// 0x0C18 (0x0004) [0x0000000000000000]              
	struct FLinearColor                                GoodColor;                                        		// 0x0C1C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLinearColor                                BadColor;                                         		// 0x0C2C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       PlacementMaterialColorName;                       		// 0x0C3C (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxDistanceToDeployablesSquared;                  		// 0x0C44 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class AActor* >                            ActorsToRadiusCheck;                              		// 0x0C48 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UParticleSystemComponent*                    DeployableHalo;                                   		// 0x0C54 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                UsedHealth;                                       		// 0x0C58 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1721 ];

		return pClassPointer;
	};

	class AActor* GetPlacementLocation ( struct FVector* DeployLocation, struct FRotator* DeployRotation );
	bool GetFormattedWeaponStats ( TArray< struct FStatPanelEntry >* StatEntries );
	bool IsBlockedByOtherActors ( );
	void SetRadiusCheckActors ( );
	int AddAmmo ( int Amount );
	void KillOtherDeployablesByInstigator ( );
	void eventSetTestMeshMIC ( unsigned long bNewValidLocation );
	void eventSetUpTestMIC ( );
	void SpawnDeployable ( struct FVector DeployLocation, struct FRotator DeployRotation );
	void ServerDeploy ( struct FVector DeployLocation, struct FRotator DeployRotation );
	void Deploy ( struct FVector DeployLocation, struct FRotator DeployRotation );
	void TimedDeploy ( );
	void EndFire ( unsigned char FireModeNum );
	void eventStartReload ( );
	void ShowPreview ( unsigned long bShow );
	void AbortReload ( );
	void StopFire ( unsigned char FireModeNum );
	void eventStopZoomMode ( );
	void StepZoom ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AFoxWeapon_DeployableBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_DeployableTurret
// 0x000C (0x0C68 - 0x0C5C)
class AFoxWeapon_DeployableTurret : public AFoxWeapon_DeployableBase
{
public:
	struct FString                                     DeployActorClassName;                             		// 0x0C5C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1722 ];

		return pClassPointer;
	};

	void SpawnDeployable ( struct FVector DesiredLocation, struct FRotator DesiredRotation );
	void eventPostBeginPlay ( );
};

UClass* AFoxWeapon_DeployableTurret::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_GrenadeBase
// 0x013C (0x0D24 - 0x0BE8)
class AFoxWeapon_GrenadeBase : public AFoxWeapon
{
public:
	struct FWeaponAnimSet                              AN_Release;                                       		// 0x0BE8 (0x0034) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_ReequipGrenade;                                		// 0x0C1C (0x0034) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_PullPin;                                       		// 0x0C50 (0x0034) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_PinPulledIdle;                                 		// 0x0C84 (0x0034) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       FPGrenadeLocName;                                 		// 0x0CB8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     FPGrenadeLocOffset;                               		// 0x0CC0 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       TPGrenadeLocName;                                 		// 0x0CCC (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              ThrowAnimLength;                                  		// 0x0CD4 (0x0004) [0x0000000000000000]              
	float                                              CookStartTime;                                    		// 0x0CD8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FinalCookTime;                                    		// 0x0CDC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bStartedCooking : 1;                              		// 0x0CE0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDoNotCook : 1;                                   		// 0x0CE0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bWantsToThrowGrenade : 1;                         		// 0x0CE0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCantCook : 1;                                    		// 0x0CE0 (0x0004) [0x0000000000004001] [0x00000008] ( CPF_Edit | CPF_Config )
	unsigned long                                      bQuickThrow : 1;                                  		// 0x0CE0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bReadyToThrow : 1;                                		// 0x0CE0 (0x0004) [0x0000000000000000] [0x00000020] 
	struct FRotator                                    AdditionalTossRotation;                           		// 0x0CE4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     HUDIconTextureMarkup;                             		// 0x0CF0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAkEvent*                                    PullPinEvent;                                     		// 0x0CFC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    CookEvent;                                        		// 0x0D00 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    StopCookEvent;                                    		// 0x0D04 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              GrenadeResupplySeconds;                           		// 0x0D08 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastResupplyTime;                                 		// 0x0D0C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AProjectile*                                 ProjectileList;                                   		// 0x0D10 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ProjectilesAllowed;                               		// 0x0D14 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              ThrowAnimTime;                                    		// 0x0D18 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              PrepareThrowTime;                                 		// 0x0D1C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                ReleasePitch;                                     		// 0x0D20 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1723 ];

		return pClassPointer;
	};

	bool GetFormattedWeaponStats ( TArray< struct FStatPanelEntry >* StatEntries );
	int eventGetAmmoUsedCount ( );
	bool CanFireWeapon ( );
	bool ShouldRefire ( );
	void OnReleaseWeaponSelect ( );
	void BeginFire ( unsigned char FireModeNum );
	void EndFire ( unsigned char FireModeNum );
	void OnWeaponSelect ( );
	void AddProjectile ( class AProjectile* P );
	int AddAmmo ( int Amount );
	void eventToggleZoomCard ( unsigned long bSetHidden );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	struct FVector GetMuzzleLoc ( );
	struct FVector GetPhysicalFireStartLoc ( struct FVector AimDir );
	struct FVector GetGrenadeTossLocation ( );
	struct FVector GetGrenadeTossDirection ( struct FVector StartFireLoc );
	void PutDownWeapon ( );
	void GrenadeReEquipped ( );
	void AttachNewGrenade ( );
	void AnimNotifyAttachGrenade ( );
	void DropGrenade ( );
	void TransferAudioTo ( class AActor* NewActor );
	class AFoxProjectile_GrenadeBase* ThrowGrenade ( );
	void AnimNotifyThrow ( );
	void CookTimeOut ( );
	class UClass* GetGrenadeClass ( );
	void PullPinOut ( );
	void PullPinFinished ( );
	void ReleaseCookFinished ( );
	void PrepareCookFinished ( );
};

UClass* AFoxWeapon_GrenadeBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_CloakBase
// 0x0008 (0x0D2C - 0x0D24)
class AFoxWeapon_CloakBase : public AFoxWeapon_GrenadeBase
{
public:
	float                                              LastActivationTime;                               		// 0x0D24 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastDeactivationTime;                             		// 0x0D28 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1724 ];

		return pClassPointer;
	};

	void StopFiringSound ( unsigned char FireModeNum );
	void StartFiringSound ( unsigned char FireModeNum );
	void ServerStopStealth ( );
	void StopStealth ( );
	void ServerStartStealth ( );
	void StartStealth ( );
	void OnStealthExpire ( );
	void StartFire ( unsigned char FireModeNum );
	void TimeWeaponEquipping ( );
	void TimeWeaponPutDown ( );
	bool GetFormattedWeaponStats ( TArray< struct FStatPanelEntry >* StatEntries );
};

UClass* AFoxWeapon_CloakBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_MeleeBase
// 0x0000 (0x0D24 - 0x0D24)
class AFoxWeapon_MeleeBase : public AFoxWeapon_GrenadeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1725 ];

		return pClassPointer;
	};

	bool GetFormattedWeaponStats ( TArray< struct FStatPanelEntry >* StatEntries );
	void StepZoom ( );
};

UClass* AFoxWeapon_MeleeBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_MineBase
// 0x0004 (0x0D28 - 0x0D24)
class AFoxWeapon_MineBase : public AFoxWeapon_GrenadeBase
{
public:
	float                                              LifeSpanAfterDeath;                               		// 0x0D24 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1726 ];

		return pClassPointer;
	};

	bool GetFormattedWeaponStats ( TArray< struct FStatPanelEntry >* StatEntries );
	void Destroyed ( );
};

UClass* AFoxWeapon_MineBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_PackBase
// 0x0000 (0x0D28 - 0x0D28)
class AFoxWeapon_PackBase : public AFoxWeapon_MineBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1727 ];

		return pClassPointer;
	};

	bool GetFormattedWeaponStats ( TArray< struct FStatPanelEntry >* StatEntries );
};

UClass* AFoxWeapon_PackBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_AmmoPackBase
// 0x0000 (0x0D28 - 0x0D28)
class AFoxWeapon_AmmoPackBase : public AFoxWeapon_PackBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1728 ];

		return pClassPointer;
	};

};

UClass* AFoxWeapon_AmmoPackBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_SyringeBase
// 0x0014 (0x0D38 - 0x0D24)
class AFoxWeapon_SyringeBase : public AFoxWeapon_GrenadeBase
{
public:
	class AFoxPawn*                                    ReviveTarget;                                     		// 0x0D24 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RechargeTime;                                     		// 0x0D28 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastUsedTime;                                     		// 0x0D2C (0x0004) [0x0000000000000000]              
	float                                              TossDistance;                                     		// 0x0D30 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TossExtent;                                       		// 0x0D34 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1729 ];

		return pClassPointer;
	};

	bool GetFormattedWeaponStats ( TArray< struct FStatPanelEntry >* StatEntries );
	unsigned char GetAimingStatus ( float* OutRange );
	class AFoxPawn* FindClosestInjuredPawn ( float MaxDistance, float Extent );
	void TimerAddAmmo ( );
	void ConsumeAmmo ( unsigned char FireModeNum );
	bool CanUseSyringe ( );
	void ServerSetReviveTarget ( class AFoxPawn* NewTarget );
	struct FVector GetGrenadeTossDirection ( struct FVector StartFireLoc );
	void StartFire ( unsigned char FireModeNum );
};

UClass* AFoxWeapon_SyringeBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_SemiAutomaticRifleBase
// 0x0000 (0x0BE8 - 0x0BE8)
class AFoxWeapon_SemiAutomaticRifleBase : public AFoxWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1730 ];

		return pClassPointer;
	};

	void FireAmmunition ( );
	bool ShouldRefire ( );
};

UClass* AFoxWeapon_SemiAutomaticRifleBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_RailGunBase
// 0x0000 (0x0BE8 - 0x0BE8)
class AFoxWeapon_RailGunBase : public AFoxWeapon_SemiAutomaticRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1731 ];

		return pClassPointer;
	};

	int FillAmmo ( );
	struct FImpactInfo CalcRailFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, TArray< struct FImpactInfo >* ImpactList );
	void CustomFire ( );
};

UClass* AFoxWeapon_RailGunBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_ShotgunBase
// 0x0010 (0x0BF8 - 0x0BE8)
class AFoxWeapon_ShotgunBase : public AFoxWeapon_SemiAutomaticRifleBase
{
public:
	unsigned long                                      bAutoShotgun : 1;                                 		// 0x0BE8 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                FragmentsPerShell;                                		// 0x0BEC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ShellsToInsert;                                   		// 0x0BF0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FragmentSpread;                                   		// 0x0BF4 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1732 ];

		return pClassPointer;
	};

	void SetModsVisible ( unsigned long bShowFP, unsigned long bShowTP );
	TArray< class AActor* > GetAdditionalActorsToDamage ( struct FVector HitLocation, struct FVector TraceStart );
	float GetCollidingPawnDistance ( struct FVector StartTrace, struct FVector EndTrace );
	struct FRotator AddFragmentSpread ( struct FRotator BaseAim );
	void FireAmmunition ( );
	float GetTraceRange ( );
	void SetGripModAttributes ( );
	void AppendAnimSets ( unsigned long bIsFemale, TArray< class UAnimSet* >* OutAnimSets );
	void TryAbortReload ( unsigned long bStartFiring );
	void AbortReload ( );
	void SetStatInfo ( struct FWeaponStatInfo StatInfo );
	void QueueMisses ( int MissesToAdd, int MissSeedIndex, struct FVector TraceStartLoc, struct FVector HitLoc, unsigned long bFromClient );
	void CustomFire ( );
	bool eventIsInstantFire ( unsigned char FireModeNum );
};

UClass* AFoxWeapon_ShotgunBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_TargetBase
// 0x0024 (0x0C0C - 0x0BE8)
class AFoxWeapon_TargetBase : public AFoxWeapon
{
public:
	class AActor*                                      WeaponTarget;                                     		// 0x0BE8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RechargeTime;                                     		// 0x0BEC (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bCanHurtMachines : 1;                             		// 0x0BF0 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bCanHelpMachines : 1;                             		// 0x0BF0 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bCanHelpFleshies : 1;                             		// 0x0BF0 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bCanHurtFleshies : 1;                             		// 0x0BF0 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bCanHelpInstigator : 1;                           		// 0x0BF0 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	struct FString                                     HelpString;                                       		// 0x0BF4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     HurtString;                                       		// 0x0C00 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1733 ];

		return pClassPointer;
	};

	bool eventShouldHurtWeaponTarget ( );
	bool eventShouldHelpWeaponTarget ( );
	bool IsWeaponTargetValid ( );
	int eventGetAmmoUsedCount ( );
	void TimerAddAmmo ( );
	void ConsumeAmmo ( unsigned char FireModeNum );
	bool ShouldRefire ( );
	bool HasSpareAmmo ( );
	float GetUseTime ( );
	struct FString GetUseIcon ( );
	struct FString GetUseText ( );
};

UClass* AFoxWeapon_TargetBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_HealBase
// 0x0014 (0x0C20 - 0x0C0C)
class AFoxWeapon_HealBase : public AFoxWeapon_TargetBase
{
public:
	class UClass*                                      EnemyDamageType;                                  		// 0x0C0C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      FriendlyDamageType;                               		// 0x0C10 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                FriendlyHealAmount;                               		// 0x0C14 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                SelfHealAmount;                                   		// 0x0C18 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                EnemyHealAmount;                                  		// 0x0C1C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1734 ];

		return pClassPointer;
	};

	void ServerStartMeleeAnim ( );
	void DoSelfHeal ( );
	void StepZoom ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	void eventStartMelee ( );
	void CustomFire ( );
	void ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits );
	bool GetFormattedWeaponStats ( TArray< struct FStatPanelEntry >* StatEntries );
};

UClass* AFoxWeapon_HealBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_RepairGunBase
// 0x0070 (0x0C7C - 0x0C0C)
class AFoxWeapon_RepairGunBase : public AFoxWeapon_TargetBase
{
public:
	class UClass*                                      EnemyDamageType;                                  		// 0x0C0C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      FriendlyDamageType;                               		// 0x0C10 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FWeaponAnimSet                              AN_StartFire;                                     		// 0x0C14 (0x0034) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_EndFire;                                       		// 0x0C48 (0x0034) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1735 ];

		return pClassPointer;
	};

	bool IsGainingRepairPoints ( );
	void OnRepairInterval ( );
	void StopRepairPoints ( );
	void StartRepairPoints ( );
	bool ShouldGivePointsForRepair ( class AFoxPawn* RepairPawn );
	void ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits );
	void PerformReload ( int AmountToReload );
	void WarmedDown ( );
	void WarmedUp ( );
	void EndRepairAnim ( );
	void StartRepairAnim ( );
	void InstantFire ( );
	bool CanFireWeapon ( );
	void StartFire ( unsigned char FireModeNum );
	void TryToGetBackToFiringState ( );
	bool BeginRecharge ( );
	bool IsRecharging ( );
	bool IsActorRepairable ( class AActor* TheMachine );
	void ConsumeAmmo ( unsigned char FireModeNum );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	bool GetFormattedWeaponStats ( TArray< struct FStatPanelEntry >* StatEntries );
};

UClass* AFoxWeapon_RepairGunBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_TargeterBase
// 0x0104 (0x0CEC - 0x0BE8)
class AFoxWeapon_TargeterBase : public AFoxWeapon
{
public:
	float                                              TargetWarmUpTime;                                 		// 0x0BE8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TargetWobbleMaxDistance;                          		// 0x0BEC (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     TargetStartLocation;                              		// 0x0BF0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CurrentStartLocation;                             		// 0x0BFC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FinalFireLocation;                                		// 0x0C08 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bTargetValidLastFrame : 1;                        		// 0x0C14 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bTargeting : 1;                                   		// 0x0C14 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned char                                      TargetingState;                                   		// 0x0C18 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                NumValidationLocations;                           		// 0x0C1C (0x0004) [0x0000000000000000]              
	float                                              ValidationErrorTolerance;                         		// 0x0C20 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     LocStringCountdown;                               		// 0x0C24 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                TargetNum;                                        		// 0x0C30 (0x0004) [0x0000000000000000]              
	int                                                TargetIndex;                                      		// 0x0C34 (0x0004) [0x0000000000000000]              
	float                                              RechargeTime;                                     		// 0x0C38 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxNormalRadians;                                 		// 0x0C3C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SubTargetTime;                                    		// 0x0C40 (0x0004) [0x0000000000000000]              
	TArray< class UStaticMeshComponent* >              SuccessTargetMeshComponents;                      		// 0x0C44 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class UStaticMesh*                                 SuccessMesh;                                      		// 0x0C50 (0x0004) [0x0000000000000000]              
	class UStaticMeshComponent*                        TargetMeshComponent;                              		// 0x0C54 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        TargetCenterMeshComponent;                        		// 0x0C58 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       HoloColorName;                                    		// 0x0C5C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 TargetHoloMesh;                                   		// 0x0C64 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        TargetHoloMeshComponent;                          		// 0x0C68 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   TargetHoloMeshMIC;                                		// 0x0C6C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HoloOpacityName;                                  		// 0x0C70 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    TargetHalo;                                       		// 0x0C78 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     LinearGoodColor;                                  		// 0x0C7C (0x000C) [0x0000000000000000]              
	struct FVector                                     LinearBadColor;                                   		// 0x0C88 (0x000C) [0x0000000000000000]              
	struct FLinearColor                                GoodColor;                                        		// 0x0C94 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLinearColor                                BadColor;                                         		// 0x0CA4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UMaterialInstanceConstant* >         TargetMICs;                                       		// 0x0CB4 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FName                                       TargetParamName;                                  		// 0x0CC0 (0x0008) [0x0000000000000000]              
	class UAkEvent*                                    StartTargetingSound;                              		// 0x0CC8 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    StopTargetingSound;                               		// 0x0CCC (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   TargeterScreenMIC;                                		// 0x0CD0 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FName                                       TestPositiveName;                                 		// 0x0CD4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       TestNegativeName;                                 		// 0x0CDC (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       TestBuildName;                                    		// 0x0CE4 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1736 ];

		return pClassPointer;
	};

	void ShowTargetingReticle ( unsigned long bShow );
	void CustomFire ( );
	void SetStartingLocation ( struct FVector HitLoc );
	void ServerReadyToWarmUp ( struct FVector HitLoc );
	void eventReadyToWarmUp ( struct FVector HitLoc );
	void WarmedUp ( );
	void eventTargetValidityChanged ( unsigned long bValid );
	void Reset ( );
	void StopEffectsForWeaponDrop ( );
	void Destroyed ( );
	bool ShouldRefire ( );
	void HideAllSuccessTargets ( );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AFoxWeapon_TargeterBase::pClassPointer = NULL;

// Class FoxGame.FoxWeaponAmmo_Base
// 0x0038 (0x0074 - 0x003C)
class UFoxWeaponAmmo_Base : public UObject
{
public:
	class UClass*                                      ProjectileClass;                                  		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      DamageTypeClass;                                  		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      WeaponFireType;                                   		// 0x0044 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      ImpactType;                                       		// 0x0045 (0x0001) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    FPFireSound;                                      		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    TPFireSound;                                      		// 0x004C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MomentumMultipler;                                		// 0x0050 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                UnlockSkillID;                                    		// 0x0054 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     MuzzleFlashColor;                                 		// 0x0058 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FLinearColor                                TracerColor;                                      		// 0x0064 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1737 ];

		return pClassPointer;
	};

	unsigned char GetImpactEffectType ( );
	bool SetupAmmoType ( class AFoxWeapon* SelectedWeapon );
};

UClass* UFoxWeaponAmmo_Base::pClassPointer = NULL;

// Class FoxGame.FoxWeaponAttachment
// 0x0538 (0x0700 - 0x01C8)
class AFoxWeaponAttachment : public AActor
{
public:
	class UMeshComponent*                              Mesh;                                             		// 0x01C8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       AimOffsetProfileName;                             		// 0x01CC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     DialogName;                                       		// 0x01D4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UClass*                                      WeaponClass;                                      		// 0x01E0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bBlockBullets : 1;                                		// 0x01E4 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bAutomaticWeapon : 1;                             		// 0x01E4 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bWaitingForPRI : 1;                               		// 0x01E4 (0x0004) [0x0000000000002001] [0x00000004] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bHasPostGrip : 1;                                 		// 0x01E4 (0x0004) [0x0000000000002001] [0x00000008] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bLoopMuzzleFlashLight : 1;                        		// 0x01E4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bPlayBrassEjectionWithFiring : 1;                 		// 0x01E4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bPlayingFiringSound : 1;                          		// 0x01E4 (0x0004) [0x0000000000002001] [0x00000040] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bAllowShortReload : 1;                            		// 0x01E4 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bForceIKDisabled : 1;                             		// 0x01E4 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned char                                      WeaponType;                                       		// 0x01E8 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      WeaponSlot;                                       		// 0x01E9 (0x0001) [0x0000000000000000]              
	TArray< class UMaterialInstanceConstant* >         TranslucentMaterials;                             		// 0x01EC (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         TransparentMaterials;                             		// 0x01F8 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FName                                       MuzzleSocketName;                                 		// 0x0204 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       StockSocketName;                                  		// 0x020C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BarrelSocketName;                                 		// 0x0214 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       MagazineSocketName;                               		// 0x021C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ScopeSocketName;                                  		// 0x0224 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       HangerSocketName;                                 		// 0x022C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       GripSocketName;                                   		// 0x0234 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BrassEjectionName;                                		// 0x023C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       RailSocketName;                                   		// 0x0244 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       LeftHandSocketName;                               		// 0x024C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       RightHandSocketName;                              		// 0x0254 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FFoxWeaponConfigInfo                        WeaponConfig;                                     		// 0x025C (0x002C) [0x0000000000002000]              ( CPF_Transient )
	struct FFoxWeaponModInfo                           WeaponModifiers;                                  		// 0x0288 (0x0024) [0x0000000000002000]              ( CPF_Transient )
	class UFoxWeaponMuzzle_Base*                       MuzzleMod;                                        		// 0x02AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxWeaponStock_Base*                        StockMod;                                         		// 0x02B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxWeaponBarrel_Base*                       BarrelMod;                                        		// 0x02B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxWeaponMagazine_Base*                     MagazineMod;                                      		// 0x02B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxWeaponScope_Base*                        ScopeMod;                                         		// 0x02BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxWeaponHanger_Base*                       HangerMod;                                        		// 0x02C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxWeaponGrip_Base*                         GripMod;                                          		// 0x02C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxWeaponAmmo_Base*                         AmmoMod;                                          		// 0x02C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMeshComponent*                              RailMeshComponent;                                		// 0x02CC (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      HangerMesh;                                       		// 0x02D0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UPointLightComponent*                        MuzzleFlashLight;                                 		// 0x02D4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              MuzzleLightDuration;                              		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MuzzleLightPulseTime;                             		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MuzzleLightOffsetFromCannon;                      		// 0x02E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    MuzFlashEmitter;                                  		// 0x02EC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    MuzFlashBreakEmitter;                             		// 0x02F0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             BrassEjectionPS;                                  		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MuzFlashBreakScale;                               		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeToHideMuzzleFlashPS;                          		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ULensFlareComponent*                         MuzzleLensFlare;                                  		// 0x0300 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     MuzzleFlashColor;                                 		// 0x0304 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMaterialInstance* >                 SpawnFXStageOne;                                  		// 0x0310 (0x000C) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstance* >                 SpawnFXStageTwo;                                  		// 0x031C (0x000C) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              ShowTracerDistance;                               		// 0x0328 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UClass*                                      TracerClass;                                      		// 0x032C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    FireSound;                                        		// 0x0330 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    TailSound;                                        		// 0x0334 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    SuppressedFireSound;                              		// 0x0338 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    SuppressedTailSound;                              		// 0x033C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    WhipSound;                                        		// 0x0340 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    FireNoAmmoSound;                                  		// 0x0344 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    ReloadSound;                                      		// 0x0348 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UAnimSet* >                          MCustomAnimSets;                                  		// 0x034C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          FCustomAnimSets;                                  		// 0x0358 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAnimNodeSlot*                               CustomAnimNode;                                   		// 0x0364 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CustomAnimNodeName;                               		// 0x0368 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAnimNodeSlot*                               HangerAnimNode;                                   		// 0x0370 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HangerAnimNodeName;                               		// 0x0374 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FWeaponAnimSet                              AN_Select;                                        		// 0x037C (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_Deselect;                                      		// 0x03B0 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_InsertAmmo;                                    		// 0x03E4 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_Melee;                                         		// 0x0418 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_Melee_Lunge;                                   		// 0x044C (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_KnifeMelee;                                    		// 0x0480 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_KnifeMelee_Lunge;                              		// 0x04B4 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_Sprint;                                        		// 0x04E8 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_FlashBanged;                                   		// 0x051C (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_FullReload;                                    		// 0x0550 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_ShortReload;                                   		// 0x0584 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_StartReload;                                   		// 0x05B8 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_EndReload;                                     		// 0x05EC (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_NormalFire;                                    		// 0x0620 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_ScopedFire;                                    		// 0x0654 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_TightAimFire;                                  		// 0x0688 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_CrouchedFire;                                  		// 0x06BC (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              WeaponReloadRate;                                 		// 0x06F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UMaterialInstanceConstant* >         CamoMICs;                                         		// 0x06F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1738 ];

		return pClassPointer;
	};

	void SetUpWeaponStats ( );
	void eventApplyReloadSpeed ( struct FFoxWeaponModInfo* ReloadModInfo );
	bool CalculateWeaponModifiers ( unsigned long bPresetOverride );
	bool IsAGrenade ( );
	void StartFireRumble ( );
	void DetachWeapon ( );
	class USkeletalMeshComponent* GetMeshComponent ( );
	void SetAmmoModAttributes ( );
	void SetGripModAttributes ( );
	void SetHangerModAttributes ( );
	void SetScopeModAttributes ( );
	void SetMuzzleModAttributes ( );
	void SetMagazineModAttributes ( );
	void SetStockModAttributes ( );
	void SetBarrelModAttributes ( );
	void SetPawnModifierAttributes ( );
	void SetWeaponModifierAttributes ( );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName );
	struct FVector GetMuzzleLoc ( );
	class AEmitter* GetImpactEmitter ( class UParticleSystem* PS_Type, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	class UFoxPMPInfo_Decals* GetWeaponSpecificDecalData ( class UFoxPhysicalMaterialProperty* PMP_Info, unsigned char FiringMode );
	class UAkEvent* GetWeaponSpecificImpactSound ( class UFoxPMPInfo_ImpactFX* ImpactFX_Info, unsigned char FiringMode );
	class UParticleSystem* GetWeaponSpecificImpactEffect ( class UFoxPMPInfo_ImpactFX* ImpactFX_Info, unsigned char FiringMode );
	class UAkEvent* GetImpactSound ( class UPhysicalMaterial* PhysMat, unsigned char FiringMode );
	void SpawnImpactSounds ( struct FImpactInfo Impact, class AActor* PlayingActor, class UPhysicalMaterial* PhysMaterial, unsigned char FiringMode );
	class UFoxPMPInfo_Decals* GetDecalData ( class UPhysicalMaterial* PhysMat, unsigned char FiringMode );
	void SpawnImpactDecal ( struct FImpactInfo Impact, class UPhysicalMaterial* PhysMaterial, unsigned char FiringMode );
	class UParticleSystem* GetImpactEffect ( class UPhysicalMaterial* PhysMat, unsigned char FiringMode );
	class AActor* SpawnImpactEffects ( struct FImpactInfo Impact, class UPhysicalMaterial* PhysMaterial, unsigned char FiringMode );
	bool SkipImpactEffects ( class AActor* HitActor );
	bool SkipSoundEffects ( class AActor* HitActor, unsigned char FireMode );
	void PlayImpactEffects ( struct FVector HitLocation );
	bool ShouldShowMuzzleFlash ( );
	bool eventInZoom ( );
	bool IsWeapon ( );
	void eventDestroyed ( );
	void PostBeginPlay ( );
	bool GetWeaponSocketOffsetFromRoot ( unsigned char offsetRef, struct FVector* theOffset, struct FQuat* TheRotation );
	bool GetLeftHandOffset ( struct FVector* theOffset );
	bool GetIronSightOffset ( struct FVector* theOffset, struct FQuat* TheRotation );
	bool SupportsRHandIK ( );
	bool SupportsLHandIK ( );
	void ChangeWeaponFireAnimName ( struct FName NewName );
	TArray< class UAnimSet* > GetAnimSets ( unsigned long bIsFemale );
	void AppendAnimSets ( unsigned long bIsFemale, TArray< class UAnimSet* >* OutAnimSets );
	void DeactivateEmissive ( );
	void ActivateEmissive ( );
	void SetDepthPriorityGroup ( unsigned char NewDepthPriorityGroup );
	bool eventHasPostGrip ( );
	void ApplyStealthMaterials ( );
	void ToggleHRVEffects ( unsigned long bEnabled );
	void SetupWeaponCamo ( );
	void SetupWeaponCamoMIC ( );
	void UpdateSpawnEffectMaterials ( struct FName ParamName, float Value, int stage );
	void SetSpawnEffectStage ( int stage, struct FLinearColor SpawnInColor );
	void PlayWeaponSound ( class UAkEvent* Sound, float NoiseLoudness );
	void StopFiringSound ( unsigned char FireModeNum );
	void StartFiringSound ( unsigned char FireModeNum );
	void SpawnTracerEffect ( struct FVector HitLocation, float HitDistance );
	void HideMuzzleFlashEmitter ( );
	void StopMuzzleFlashEffect ( );
	bool IsMuzzleFlashRelevant ( );
	void PlayBrassEjection ( );
	void StartMuzzleFlashEffect ( );
	struct FVector GetMeshMuzzleLocation ( class USkeletalMeshComponent* SkelMesh );
	void eventAttachMuzzleEffectsComponents ( class USkeletalMeshComponent* SkelMesh );
	void UpdateMuzzleEffects ( );
	void SetModsVisible ( unsigned long bShowFP, unsigned long bShowTP );
	void SetupCamoForMods ( );
	void ResetSpawnEffects ( );
	void eventInitializeAttachments ( );
	bool ShouldInitializeAttachments ( );
	bool IsCameraWithinRadius ( struct FVector TestLocation, float Radius );
	void AbortAnyAnim ( );
	void AbortReload ( );
	void StopWeaponEquipAnim ( );
	void AbortWeaponEquipAnim ( );
	float StartWeaponEquipAnim ( );
	void StopWeaponPutDownAnim ( );
	float StartWeaponPutDownAnim ( );
	void AbortMelee ( );
	void StopMeleeAnim ( );
	float StartMeleeAnim ( );
	void StopFlashedAnim ( );
	void StartFlashedAnim ( );
	void StopShortReloadAnim ( );
	void StopReloadAnim ( );
	void StartReloadAnim ( unsigned char FireMode );
	void ReloadDialog ( class AFoxPawn* FP );
	void StopFireAnim ( unsigned char FireNodeNum );
	bool IsMovingCrouched ( );
	void StartFireAnim ( unsigned char FireNodeNum );
	void StopFireEffects ( unsigned char FireModeNum );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	bool IsFirstPerson ( );
	bool ShouldPlayEffect ( );
	void StopWeaponAnim ( float BlendOutTime );
	void StopHangerAnim ( float BlendOutTime );
	float PlayHangerAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	void PlayWeaponAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	float PlayWeaponAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	void StopSyncWeaponSet ( struct FWeaponAnimSet* Set );
	void StartSyncWeaponSet ( struct FName Label, struct FWeaponAnimSet* Set );
	void StopWeaponSet ( struct FWeaponAnimSet* Set );
	void PlayWeaponSetByDuration ( float Duration, unsigned long bLooping, unsigned long bOverride, struct FWeaponAnimSet* Set );
	float PlayWeaponSet ( float Rate, unsigned long bLooping, unsigned long bOverride, struct FWeaponAnimSet* Set );
};

UClass* AFoxWeaponAttachment::pClassPointer = NULL;

// Class FoxGame.FoxWeaponAttachment_FlameThrowerBase
// 0x003C (0x073C - 0x0700)
class AFoxWeaponAttachment_FlameThrowerBase : public AFoxWeaponAttachment
{
public:
	struct FName                                       ActionSocketName;                                 		// 0x0700 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              timeToMaxFlameLength;                             		// 0x0708 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned long                                      bshouldCalcFiring : 1;                            		// 0x070C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsFlameImpacting : 1;                            		// 0x070C (0x0004) [0x0000000000000000] [0x00000002] 
	class UParticleSystemComponent*                    FlameEmitter;                                     		// 0x0710 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    FlameStarterStopper;                              		// 0x0714 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAkEvent*                                    FlameStarterStartEvent;                           		// 0x0718 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    FlameStarterStopEvent;                            		// 0x071C (0x0004) [0x0000000000000000]              
	float                                              flameGrowthTime;                                  		// 0x0720 (0x0004) [0x0000000000000000]              
	float                                              flameLength;                                      		// 0x0724 (0x0004) [0x0000000000000000]              
	float                                              maxImpactFXDistance;                              		// 0x0728 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     worldImpactLocation;                              		// 0x072C (0x000C) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   flameTrailMat;                                    		// 0x0738 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1739 ];

		return pClassPointer;
	};

	float StartWeaponEquipAnim ( );
	float StartWeaponPutDownAnim ( );
	void StopReloadAnim ( );
	void StartReloadAnim ( unsigned char FireMode );
	bool IsMuzzleFlashRelevant ( );
	void StopFlameStarterEffect ( );
	void StopMuzzleFlashEffect ( );
	void StartMuzzleFlashEffect ( );
	void HideMuzzleFlashEmitter ( );
	void StartFlameStarterEffect ( );
	void AttachMuzzleEffectsComponents ( class USkeletalMeshComponent* SkelMesh );
	void eventSetFlameParameters ( float flameMaxDistance, float flameDip, float flameDistance );
	class UAkEvent* GetWeaponSpecificImpactSound ( class UFoxPMPInfo_ImpactFX* ImpactFX_Info, unsigned char FiringMode );
	class UParticleSystem* GetWeaponSpecificImpactEffect ( class UFoxPMPInfo_ImpactFX* ImpactFX_Info, unsigned char FiringMode );
	void CalcAndSetFlameParms ( float DeltaSeconds );
};

UClass* AFoxWeaponAttachment_FlameThrowerBase::pClassPointer = NULL;

// Class FoxGame.FoxWeaponModObjectBase
// 0x011C (0x0158 - 0x003C)
class UFoxWeaponModObjectBase : public UObject
{
public:
	class UFoxFirstPersonSkeletalMeshComponent*        FPMesh;                                           		// 0x003C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMeshComponent*                              TPMesh;                                           		// 0x0040 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FFoxPawnModInfo                             PawnModifiers;                                    		// 0x0044 (0x0034) [0x0000000000004000]              ( CPF_Config )
	struct FFoxWeaponModInfo                           WeaponModifiers;                                  		// 0x0078 (0x0024) [0x0000000000004000]              ( CPF_Config )
	int                                                UnlockID;                                         		// 0x009C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                ParentID;                                         		// 0x00A0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FString                                     FriendlyName;                                     		// 0x00A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyDesc;                                     		// 0x00B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendlyTag;                                      		// 0x00BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ImageIconRef;                                     		// 0x00C8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FriendlyToolTip;                                  		// 0x00D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bDLC : 1;                                         		// 0x00E0 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     DescriptorName;                                   		// 0x00E4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class UMaterialInstanceConstant* >         FPSpawnFXStageOne;                                		// 0x00F0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UMaterialInstanceConstant* >         FPSpawnFXStageTwo;                                		// 0x00FC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UMaterialInstanceConstant* >         TPSpawnFXStageOne;                                		// 0x0108 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UMaterialInstanceConstant* >         TPSpawnFXStageTwo;                                		// 0x0114 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FRotator                                    PreviewRotation;                                  		// 0x0120 (0x000C) [0x0000000000004000]              ( CPF_Config )
	float                                              TightAimRecoilTranslationModifier;                		// 0x012C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              TightAimRecoilRotationModifier;                   		// 0x0130 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	TArray< class UMaterialInstanceConstant* >         FPCamoMICs;                                       		// 0x0134 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UMaterialInstanceConstant* >         TPCamoMICs;                                       		// 0x0140 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           WhiteRecievers;                                   		// 0x014C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1740 ];

		return pClassPointer;
	};

	bool BuildFromDataProvider ( class UFoxDataProvider_ModBase* ModBase );
	bool IsValidForWeapon ( class UClass* WeaponClass );
	void ToggleHRVEffects ( class UMaterialInterface* HRVMaterial );
	void SetupWeaponCamo ( int CamoIndex );
	void UpdateSpawnEffectMaterials ( struct FName ParamName, float Value, int stage );
	void SetSpawnEffectStage ( int stage, struct FLinearColor SpawnInColor );
	void SetVisibility ( unsigned long bFPVisible, unsigned long bTPVisible );
	bool HasMesh ( unsigned long bFirstPerson );
	class USkeletalMeshComponent* GetDefaultFPMesh ( );
	class UMeshComponent* GetDefaultTPMesh ( );
	class USkeletalMeshComponent* GetSkeletalTPMeshComp ( );
	class UStaticMeshComponent* GetStaticTPMeshComp ( );
	class UFoxFirstPersonSkeletalMeshComponent* GetFPMeshComp ( );
	class UMeshComponent* GetMeshComponent ( unsigned long bFirstPerson );
	void SetDepthPriorityGroup ( unsigned char NewDepthPriorityGroup );
};

UClass* UFoxWeaponModObjectBase::pClassPointer = NULL;

// Class FoxGame.FoxWeaponBarrel_Base
// 0x004C (0x01A4 - 0x0158)
class UFoxWeaponBarrel_Base : public UFoxWeaponModObjectBase
{
public:
	TArray< class UAnimSet* >                          MFPAnimSetArray;                                  		// 0x0158 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          FFPAnimSetArray;                                  		// 0x0164 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          AlternateFFPAnimSetArray;                         		// 0x0170 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          AlternateMFPAnimSetArray;                         		// 0x017C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          MTPAnimSetArray;                                  		// 0x0188 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          FTPAnimSetArray;                                  		// 0x0194 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bHasPistolGrip : 1;                               		// 0x01A0 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bHasMuzzle : 1;                                   		// 0x01A0 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1741 ];

		return pClassPointer;
	};

	bool HasAnimationSets ( );
	TArray< class UAnimSet* > GetAnimationSets ( unsigned long bIsWeapon, unsigned long bFemale, unsigned long bAlternate );
};

UClass* UFoxWeaponBarrel_Base::pClassPointer = NULL;

// Class FoxGame.FoxWeaponGrip_Base
// 0x000C (0x0164 - 0x0158)
class UFoxWeaponGrip_Base : public UFoxWeaponModObjectBase
{
public:
	unsigned long                                      bHasPistolGrip : 1;                               		// 0x0158 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	class UAnimSet*                                    FPAnimSet;                                        		// 0x015C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FireRate;                                         		// 0x0160 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1742 ];

		return pClassPointer;
	};

	class UAnimSet* GetFPAnimationSet ( );
};

UClass* UFoxWeaponGrip_Base::pClassPointer = NULL;

// Class FoxGame.FoxWeaponHanger_Base
// 0x0000 (0x0158 - 0x0158)
class UFoxWeaponHanger_Base : public UFoxWeaponModObjectBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1743 ];

		return pClassPointer;
	};

	bool BuildFromDataProvider ( class UFoxDataProvider_ModBase* ModBase );
};

UClass* UFoxWeaponHanger_Base::pClassPointer = NULL;

// Class FoxGame.FoxWeaponMagazine_Base
// 0x0020 (0x0178 - 0x0158)
class UFoxWeaponMagazine_Base : public UFoxWeaponModObjectBase
{
public:
	struct FName                                       ReloadType;                                       		// 0x0158 (0x0008) [0x0000000000000000]              
	struct FName                                       ReloadName;                                       		// 0x0160 (0x0008) [0x0000000000000000]              
	struct FName                                       HangerReloadName;                                 		// 0x0168 (0x0008) [0x0000000000000000]              
	unsigned long                                      bAllowShortReload : 1;                            		// 0x0170 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAllowCamo : 1;                                   		// 0x0170 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                DataProviderIndex;                                		// 0x0174 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1744 ];

		return pClassPointer;
	};

	void SetupWeaponCamo ( int CamoIndex );
	void UpdateSpawnEffectMaterials ( struct FName ParamName, float Value, int stage );
	bool BuildFromDataProvider ( class UFoxDataProvider_ModBase* ModBase );
};

UClass* UFoxWeaponMagazine_Base::pClassPointer = NULL;

// Class FoxGame.FoxWeaponMuzzle_Base
// 0x000C (0x0164 - 0x0158)
class UFoxWeaponMuzzle_Base : public UFoxWeaponModObjectBase
{
public:
	unsigned long                                      bIsSuppressed : 1;                                		// 0x0158 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	class UParticleSystem*                             FPMuzzleFlashTemplate;                            		// 0x015C (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             TPMuzzleFlashTemplate;                            		// 0x0160 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1745 ];

		return pClassPointer;
	};

	class UParticleSystemComponent* GetMuzzleFlashParticleSystemComp ( unsigned long bFirstPerson, unsigned long bAutomaticWeapon );
};

UClass* UFoxWeaponMuzzle_Base::pClassPointer = NULL;

// Class FoxGame.FoxWeaponScope_Base
// 0x0120 (0x0278 - 0x0158)
class UFoxWeaponScope_Base : public UFoxWeaponModObjectBase
{
public:
	float                                              SpreadZoomMultiplier;                             		// 0x0158 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              RecoilZoomMultiplier;                             		// 0x015C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ZoomX;                                            		// 0x0160 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	class UMeshComponent*                              ZoomedMesh;                                       		// 0x0164 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bEnableTightAim : 1;                              		// 0x0168 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bEnableScope : 1;                                 		// 0x0168 (0x0004) [0x0000000000004002] [0x00000002] ( CPF_Const | CPF_Config )
	int                                                ZoomFOV;                                          		// 0x016C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MeshFOV;                                          		// 0x0170 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ZoomedRotationMultiplier;                         		// 0x0174 (0x0004) [0x0000000000000000]              
	float                                              ZoomedMovementMultiplier;                         		// 0x0178 (0x0004) [0x0000000000000000]              
	struct FVector                                     ZoomMeshTranslation;                              		// 0x017C (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FRotator                                    ZoomMeshRotation;                                 		// 0x0188 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              ZoomTime;                                         		// 0x0194 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FPostProcessSettings                        ScopePPSettings;                                  		// 0x0198 (0x00E0) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1746 ];

		return pClassPointer;
	};

};

UClass* UFoxWeaponScope_Base::pClassPointer = NULL;

// Class FoxGame.FoxWeaponStock_Base
// 0x0004 (0x015C - 0x0158)
class UFoxWeaponStock_Base : public UFoxWeaponModObjectBase
{
public:
	float                                              TightAimTime;                                     		// 0x0158 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1747 ];

		return pClassPointer;
	};

};

UClass* UFoxWeaponStock_Base::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIContainer
// 0x0024 (0x009C - 0x0078)
class UFoxBillboardUIContainer : public UGFxObject
{
public:
	int                                                BillboardCounter;                                 		// 0x0078 (0x0004) [0x0000000000000000]              
	TArray< class UFoxBillboardUIObjectBase* >         Billboards;                                       		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UFoxBillboardUIDamageIndicator* >    DamageIndicators;                                 		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AFoxPC*                                      PCOwner;                                          		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bBillboardsHidden : 1;                            		// 0x0098 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1748 ];

		return pClassPointer;
	};

	void RemoveKillTagBillboard ( class AFoxDroppedPickup_KillTag* KillTag );
	void KillTagPickedUp ( class AFoxDroppedPickup_KillTag* KillTag, unsigned long bPickedUpByLocalPlayer );
	void SpawnKillTagBillboard ( class AFoxDroppedPickup_KillTag* KillTag );
	void RemoveAmmoPackBillboard ( class AFoxProjectile_AmmoPackBase* AmmoPack );
	void SpawnAmmoPackBillboard ( class AFoxProjectile_AmmoPackBase* AmmoPack );
	void RemoveVehicleBillboard ( class AFoxVehicle* VehicleObject );
	void SpawnVehicleBillboard ( class AFoxVehicle* VehicleObject );
	void RemoveTeamObjectiveBillboard ( class AFoxTeamObjectiveMarker* MarkerObject );
	void SpawnTeamObjectiveBillboard ( class AFoxTeamObjectiveMarker* MarkerObject );
	void RemoveObjectiveBillboard ( class AFoxObjectiveMarker* MarkerObject );
	void RemoveDeployableTargetBillboard ( class AFoxDeployable_Base* Deployable );
	void SpawnDeployableTargetBillboard ( class AFoxDeployable_Base* Deployable );
	void RemoveDeployableBillboard ( class AFoxDeployable_Base* Deployable );
	void SpawnDeployableBillboard ( class AFoxDeployable_Base* Deployable );
	void SpawnObjectiveBillboard ( class AFoxObjectiveMarker* MarkerObject );
	void RemoveAllDamageIndicators ( );
	void eventRemoveDamageIndicator ( class UFoxBillboardUIDamageIndicator* IndicatorToRemove );
	void eventSpawnDamageIndicator ( struct FVector2D HitLocation, unsigned long bFallDamage );
	void RemoveRepairTargetBillboard ( class AFoxPawn* Target );
	void SpawnRepairTargetBillboard ( class AFoxPawn* Target );
	void RemoveHealTargetBillboard ( class AFoxPawn* Target );
	void SpawnHealTargetBillboard ( class AFoxPawn* Target );
	void RemoveMineBillboard ( class AFoxProjectile_MineBase* Mine );
	void SpawnMineBillboard ( class AFoxProjectile_MineBase* Mine );
	void RemoveDecoyMarkerBillboard ( class AFoxProjectile_DecoyBase* Decoy );
	void SpawnDecoyMarkerBillboard ( class AFoxProjectile_DecoyBase* Decoy );
	void RemovePlayerMarkerBillboard ( class AFoxPawn* Pawn );
	void SpawnPlayerMarkerBillboard ( class AFoxPawn* Pawn );
	void SpawnHeroPoseNameBillboard ( class AFoxHeroPoseActor* HeroPoseActor );
	void RemoveDecoyNameBillboard ( class AFoxProjectile_DecoyBase* Decoy );
	void SpawnDecoyNameBillboard ( class AFoxProjectile_DecoyBase* Decoy );
	void RemovePlayerNameBillboard ( class AFoxPawn* Pawn );
	void SpawnPlayerNameBillboard ( class AFoxPawn* Pawn );
	void RemoveTKOTHBillboard ( class AFoxGameObject_HillPoint* HillPoint );
	void SpawnTKOTHBillboard ( class AFoxGameObject_HillPoint* HillPoint );
	void RemoveFlagBillboard ( class AFoxGameObject_Flag* FlagObject );
	void SpawnFlagBillboard ( class AFoxGameObject_Flag* FlagObject );
	void SpawnControlPointBillboard ( class AFoxGameObject_ControlPoint* ControlPoint );
	void SpawnWeaponDepotBillboard ( class AFoxGameObject_WeaponDepot* Depot );
	void NotifyTeamChange ( );
	void RemoveBillboardByName ( struct FString instancename );
	void eventRemoveBillboard ( class UFoxBillboardUIObjectBase* Billboard );
	void RemoveAllBillboards ( );
	void ShowBillboards ( );
	void HideAllBillboards ( );
	class UFoxBillboardUIObjectBase* eventSpawnBillboard ( class UClass* BillboardClass );
};

UClass* UFoxBillboardUIContainer::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIObjectBase
// 0x00C0 (0x0138 - 0x0078)
class UFoxBillboardUIObjectBase : public UGFxObject
{
public:
	struct FBillboardIconInfo                          NearestBillboardInfo;                             		// 0x0078 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FBillboardIconInfo                          FurthestBillboardInfo;                            		// 0x0084 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FBillboardIconInfo                          DockedBillboardInfo;                              		// 0x0090 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FString                                     symbolname;                                       		// 0x009C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     instancename;                                     		// 0x00A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TacticalSpecificClassName;                        		// 0x00B4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class AFoxPC*                                      PCOwner;                                          		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastOpacityVal;                                   		// 0x00C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastScaleVal;                                     		// 0x00C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastInterpVal;                                    		// 0x00CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector2D                                   LastScreenPos;                                    		// 0x00D0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bWasVisible : 1;                                  		// 0x00D8 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bAlwaysShowInHRV : 1;                             		// 0x00D8 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bShowOnlyInHRV : 1;                               		// 0x00D8 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bDockable : 1;                                    		// 0x00D8 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bIsDocked : 1;                                    		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bWantsTeamColor : 1;                              		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bSupportsNoTeamColor : 1;                         		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bSetColorEachFrame : 1;                           		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bKeepOnScreen : 1;                                		// 0x00D8 (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	unsigned long                                      bLastDistanceTextDrawn : 1;                       		// 0x00D8 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bDrawDistance : 1;                                		// 0x00D8 (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bHideIfOutOfRange : 1;                            		// 0x00D8 (0x0004) [0x0000000000004002] [0x00000800] ( CPF_Const | CPF_Config )
	unsigned long                                      bSupportsOpacityChangeInTightAim : 1;             		// 0x00D8 (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	struct FString                                     BlueTeamColor;                                    		// 0x00DC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RedTeamColor;                                     		// 0x00E8 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NoTeamColor;                                      		// 0x00F4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TeamColor;                                        		// 0x0100 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector2D                                   DockLoc;                                          		// 0x010C (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              DockTime;                                         		// 0x0114 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                LastDistance;                                     		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     LocStringMeters;                                  		// 0x011C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FVector                                     WorldLocationOffset;                              		// 0x0128 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              TightAimOpacityMultiplier;                        		// 0x0134 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1749 ];

		return pClassPointer;
	};

	void eventUndockBillboard ( );
	void eventas_SetLabel ( struct FString NewLabel );
	void as_TweenBillboard ( int XPos, int YPos, float DurationSeconds );
	void eventDockBillboard ( );
	void eventTeamIsSet ( int TeamIndex );
	void eventas_SetTeamColor ( struct FString NewTeamColor );
	void NotifyTeamChange ( );
	void SetVisible ( unsigned long bVisible );
};

UClass* UFoxBillboardUIObjectBase::pClassPointer = NULL;

// Class FoxGame.FoxBillboardPlayerName
// 0x0048 (0x0180 - 0x0138)
class UFoxBillboardPlayerName : public UFoxBillboardUIObjectBase
{
public:
	class AFoxPawn*                                    Pawn;                                             		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     PlayerName;                                       		// 0x013C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     ClanTag;                                          		// 0x0148 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              FadeTimer;                                        		// 0x0154 (0x0004) [0x0000000000000000]              
	float                                              NameTagFadeTime;                                  		// 0x0158 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastFadeOpacity;                                  		// 0x015C (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsFading : 1;                                    		// 0x0160 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowHealth : 1;                                  		// 0x0160 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bWasSpectating : 1;                               		// 0x0160 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsTalking : 1;                                   		// 0x0160 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	struct FString                                     HealthParameterName;                              		// 0x0164 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	float                                              CurrentHealthRatio;                               		// 0x0170 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     LocEmptyHardSuitName;                             		// 0x0174 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1750 ];

		return pClassPointer;
	};

	void NotifyTeamChange ( );
	void eventas_SetClanTag ( struct FString NewClanTag );
	void eventas_SetPlayerName ( struct FString NewName );
};

UClass* UFoxBillboardPlayerName::pClassPointer = NULL;

// Class FoxGame.FoxBillboardDecoyName
// 0x0010 (0x0190 - 0x0180)
class UFoxBillboardDecoyName : public UFoxBillboardPlayerName
{
public:
	class AFoxProjectile_DecoyBase*                    Decoy;                                            		// 0x0180 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     LocStringDecoy;                                   		// 0x0184 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1751 ];

		return pClassPointer;
	};

};

UClass* UFoxBillboardDecoyName::pClassPointer = NULL;

// Class FoxGame.FoxBillboardDeployable
// 0x0010 (0x0190 - 0x0180)
class UFoxBillboardDeployable : public UFoxBillboardPlayerName
{
public:
	class AFoxDeployable_Base*                         Deployable;                                       		// 0x0180 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     LocStringDeployable;                              		// 0x0184 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1752 ];

		return pClassPointer;
	};

};

UClass* UFoxBillboardDeployable::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIAmmoPack
// 0x0004 (0x013C - 0x0138)
class UFoxBillboardUIAmmoPack : public UFoxBillboardUIObjectBase
{
public:
	class AFoxProjectile_AmmoPackBase*                 AmmoPack;                                         		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1753 ];

		return pClassPointer;
	};

};

UClass* UFoxBillboardUIAmmoPack::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIControlPoint
// 0x004C (0x0184 - 0x0138)
class UFoxBillboardUIControlPoint : public UFoxBillboardUIObjectBase
{
public:
	class AFoxGameObject_ControlPoint*                 ControlPoint;                                     		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCaptureRatio;                                 		// 0x013C (0x0004) [0x0000000000000000]              
	int                                                LastControllingTeamIndex;                         		// 0x0140 (0x0004) [0x0000000000000000]              
	int                                                LastCapturingTeamIndex;                           		// 0x0144 (0x0004) [0x0000000000000000]              
	struct FString                                     ControlPointLabel;                                		// 0x0148 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastDirectionString;                              		// 0x0154 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DirectionStringUp;                                		// 0x0160 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     DirectionStringDown;                              		// 0x016C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     DirectionStringLevel;                             		// 0x0178 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1754 ];

		return pClassPointer;
	};

	void eventas_SetCaptureProgress ( float NewProgress );
	void eventas_SetDirection ( struct FString NewDirectionLabel );
	void eventas_SetLabel ( struct FString NewLabel );
	void eventas_SetCapturingTeamColor ( struct FString CapturingTeamColor );
	void NotifyTeamChange ( );
};

UClass* UFoxBillboardUIControlPoint::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIDamageIndicator
// 0x0014 (0x014C - 0x0138)
class UFoxBillboardUIDamageIndicator : public UFoxBillboardUIObjectBase
{
public:
	int                                                LastRotation;                                     		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              FadeTime;                                         		// 0x013C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              ElapsedTime;                                      		// 0x0140 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   DamageLocation;                                   		// 0x0144 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1755 ];

		return pClassPointer;
	};

	void UpdateRotationAndOpacity ( );
};

UClass* UFoxBillboardUIDamageIndicator::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIFallDamageIndicator
// 0x0000 (0x014C - 0x014C)
class UFoxBillboardUIFallDamageIndicator : public UFoxBillboardUIDamageIndicator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1756 ];

		return pClassPointer;
	};

	void UpdateRotationAndOpacity ( );
};

UClass* UFoxBillboardUIFallDamageIndicator::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIDepot
// 0x0004 (0x013C - 0x0138)
class UFoxBillboardUIDepot : public UFoxBillboardUIObjectBase
{
public:
	class AFoxGameObject_WeaponDepot*                  Depot;                                            		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1757 ];

		return pClassPointer;
	};

};

UClass* UFoxBillboardUIDepot::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIFlag
// 0x0008 (0x0140 - 0x0138)
class UFoxBillboardUIFlag : public UFoxBillboardUIObjectBase
{
public:
	class AFoxGameObject_Flag*                         FlagObject;                                       		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bShowFlagIcon : 1;                                		// 0x013C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1758 ];

		return pClassPointer;
	};

	void UndockBillboard ( );
	void DockBillboard ( );
};

UClass* UFoxBillboardUIFlag::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIEOTSFLag
// 0x0001 (0x0141 - 0x0140)
class UFoxBillboardUIEOTSFLag : public UFoxBillboardUIFlag
{
public:
	unsigned char                                      LastUsableByTeam;                                 		// 0x0140 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1759 ];

		return pClassPointer;
	};

};

UClass* UFoxBillboardUIEOTSFLag::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIFlagBase
// 0x0010 (0x0148 - 0x0138)
class UFoxBillboardUIFlagBase : public UFoxBillboardUIObjectBase
{
public:
	class AFoxGameObject_Flag*                         FlagObject;                                       		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FlagLocation;                                     		// 0x013C (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1760 ];

		return pClassPointer;
	};

	void eventTeamIsSet ( int TeamIndex );
};

UClass* UFoxBillboardUIFlagBase::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIHeroPoseName
// 0x002C (0x0164 - 0x0138)
class UFoxBillboardUIHeroPoseName : public UFoxBillboardUIObjectBase
{
public:
	class AFoxHeroPoseActor*                           HeroPoseActor;                                    		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HelmetHeight;                                     		// 0x013C (0x0004) [0x0000000000000000]              
	struct FString                                     FirstPlaceIconRef;                                		// 0x0140 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     SecondPlaceIconRef;                               		// 0x014C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     ThridPlaceIconRef;                                		// 0x0158 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1761 ];

		return pClassPointer;
	};

	void as_SetClanTag ( struct FString NewClanTag );
	void as_SetPlayerName ( struct FString NewName );
};

UClass* UFoxBillboardUIHeroPoseName::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIHillPoint
// 0x0010 (0x0148 - 0x0138)
class UFoxBillboardUIHillPoint : public UFoxBillboardUIObjectBase
{
public:
	class AFoxGameObject_HillPoint*                    HillPoint;                                        		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MyTeamLastCaptureProgress;                        		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              OtherTeamLastCaptureProgress;                     		// 0x0140 (0x0004) [0x0000000000000000]              
	unsigned long                                      bTeamColorsSet : 1;                               		// 0x0144 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLastWasCapturable : 1;                           		// 0x0144 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1762 ];

		return pClassPointer;
	};

	void eventUndockBillboard ( );
	void eventDockBillboard ( );
	void eventas_SetShowProgressBars ( unsigned long bShow );
	void eventas_SetShowProgressNumbers ( unsigned long bShow );
	void eventas_SetOtherTeamColor ( struct FString ColorVal );
	void eventas_SetMyTeamColor ( struct FString ColorVal );
	void eventas_SetOtherTeamProgress ( float ProgressValue );
	void eventas_SetMyTeamProgress ( float ProgressValue );
};

UClass* UFoxBillboardUIHillPoint::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIHRVPlayerMarker
// 0x0004 (0x013C - 0x0138)
class UFoxBillboardUIHRVPlayerMarker : public UFoxBillboardUIObjectBase
{
public:
	class AFoxPawn*                                    Pawn;                                             		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1763 ];

		return pClassPointer;
	};

};

UClass* UFoxBillboardUIHRVPlayerMarker::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIHRVDecoyMarker
// 0x0004 (0x0140 - 0x013C)
class UFoxBillboardUIHRVDecoyMarker : public UFoxBillboardUIHRVPlayerMarker
{
public:
	class AFoxProjectile_DecoyBase*                    Decoy;                                            		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1764 ];

		return pClassPointer;
	};

};

UClass* UFoxBillboardUIHRVDecoyMarker::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIKillTag
// 0x0004 (0x013C - 0x0138)
class UFoxBillboardUIKillTag : public UFoxBillboardUIObjectBase
{
public:
	class AFoxDroppedPickup_KillTag*                   KillTag;                                          		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1765 ];

		return pClassPointer;
	};

	void DelayedDock ( );
	void DockBillboard ( );
	void as_PlayDeathAnimation ( );
};

UClass* UFoxBillboardUIKillTag::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIMine
// 0x0004 (0x013C - 0x0138)
class UFoxBillboardUIMine : public UFoxBillboardUIObjectBase
{
public:
	class AFoxProjectile_MineBase*                     Mine;                                             		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1766 ];

		return pClassPointer;
	};

};

UClass* UFoxBillboardUIMine::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIObjective
// 0x0010 (0x0148 - 0x0138)
class UFoxBillboardUIObjective : public UFoxBillboardUIObjectBase
{
public:
	class AFoxObjectiveMarker*                         MarkerObject;                                     		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     MarkerLabel;                                      		// 0x013C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1767 ];

		return pClassPointer;
	};

	void eventas_SetLabel ( struct FString NewLabel );
};

UClass* UFoxBillboardUIObjective::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIPawnTargetBase
// 0x0004 (0x013C - 0x0138)
class UFoxBillboardUIPawnTargetBase : public UFoxBillboardUIObjectBase
{
public:
	class AFoxPawn*                                    PawnTarget;                                       		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1768 ];

		return pClassPointer;
	};

	void eventas_SetTeamColor ( struct FString NewTeamColor );
};

UClass* UFoxBillboardUIPawnTargetBase::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIHealTarget
// 0x0000 (0x013C - 0x013C)
class UFoxBillboardUIHealTarget : public UFoxBillboardUIPawnTargetBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1769 ];

		return pClassPointer;
	};

};

UClass* UFoxBillboardUIHealTarget::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIRepairTarget
// 0x0000 (0x013C - 0x013C)
class UFoxBillboardUIRepairTarget : public UFoxBillboardUIPawnTargetBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1770 ];

		return pClassPointer;
	};

};

UClass* UFoxBillboardUIRepairTarget::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIRepairTargetDeployable
// 0x0004 (0x013C - 0x0138)
class UFoxBillboardUIRepairTargetDeployable : public UFoxBillboardUIObjectBase
{
public:
	class AFoxDeployable_Base*                         Deployable;                                       		// 0x0138 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1771 ];

		return pClassPointer;
	};

};

UClass* UFoxBillboardUIRepairTargetDeployable::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUITeamObjective
// 0x0014 (0x014C - 0x0138)
class UFoxBillboardUITeamObjective : public UFoxBillboardUIObjectBase
{
public:
	class AFoxTeamObjectiveMarker*                     MarkerObject;                                     		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastTeamIndex;                                    		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     MarkerLabel;                                      		// 0x0140 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1772 ];

		return pClassPointer;
	};

	void eventas_SetLabel ( struct FString NewLabel );
	void eventTeamIsSet ( int TeamIndex );
};

UClass* UFoxBillboardUITeamObjective::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIVehicleMarker
// 0x001C (0x0154 - 0x0138)
class UFoxBillboardUIVehicleMarker : public UFoxBillboardUIObjectBase
{
public:
	class AFoxVehicle*                                 VehicleObject;                                    		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     LastMoverName;                                    		// 0x013C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultMoverName;                                 		// 0x0148 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1773 ];

		return pClassPointer;
	};

	void eventSetMoverHealth ( float HealthPerc );
	void eventSetMoverName ( struct FString NewName );
	void UndockBillboard ( );
	void DockBillboard ( );
};

UClass* UFoxBillboardUIVehicleMarker::pClassPointer = NULL;

// Class FoxGame.FoxHardSuitWeakPointResetWidget
// 0x0000 (0x0078 - 0x0078)
class UFoxHardSuitWeakPointResetWidget : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1774 ];

		return pClassPointer;
	};

	void as_ShowResetReadyText ( );
	void as_DeactivateReset ( );
	void as_ActivateReset ( );
	void as_ShowPressKeytext ( );
	void as_HidePressKeyText ( );
	void eventas_SetWeakPointTimer ( float Progress );
	void as_ShowWeakPointReset ( struct FString KeyToPress, struct FString ReadyText, struct FString ActiveText, struct FString CooldownText, unsigned long ShouldSkipBoot );
	void eventUpdateBattleModeDisplay ( unsigned char State );
};

UClass* UFoxHardSuitWeakPointResetWidget::pClassPointer = NULL;

// Class FoxGame.FoxHUD
// 0x026C (0x06DC - 0x0470)
class AFoxHUD : public AZEGameHud
{
public:
	unsigned long                                      bShowActorOverlays : 1;                           		// 0x0470 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDebugAIStates : 1;                               		// 0x0470 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bOnlySpectator : 1;                               		// 0x0470 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bPauseMenuActive : 1;                             		// 0x0470 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bChatWindowOpen : 1;                              		// 0x0470 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bInEntryMap : 1;                                  		// 0x0470 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bMatchStarted : 1;                                		// 0x0470 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bPendingHudTransition : 1;                        		// 0x0470 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bForceDrawCrosshair : 1;                          		// 0x0470 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bShowGameHackStats : 1;                           		// 0x0470 (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bShowGameCaptureStats : 1;                        		// 0x0470 (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bShowGameAttackPoints : 1;                        		// 0x0470 (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bShowGameDefendPoints : 1;                        		// 0x0470 (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bShowGameTagCollectedPoints : 1;                  		// 0x0470 (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	class AActor*                                      SelectedDebugTarget;                              		// 0x0474 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxPC*                                      PCOwner;                                          		// 0x0478 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      GameClass;                                        		// 0x047C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      HudUIClass;                                       		// 0x0480 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     LocStringXPBonus;                                 		// 0x0484 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringFirstPlace;                              		// 0x0490 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSecondPlace;                             		// 0x049C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringThirdPlace;                              		// 0x04A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringMatchEnd;                                		// 0x04B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringGPTime;                                  		// 0x04C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringGPPerformance;                           		// 0x04CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringGPBonus;                                 		// 0x04D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                LastDepotPage;                                    		// 0x04E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxDataStore_MenuItems*                     MenuItemsDataStore;                               		// 0x04E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AFoxPRI* >                           VoteKickPRIs;                                     		// 0x04EC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     HudChatPath;                                      		// 0x04F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UFoxUI*                                      DynamicUI;                                        		// 0x0504 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpectateFadeTimer;                                		// 0x0508 (0x0004) [0x0000000000000000]              
	float                                              SpectateViewLerpTime;                             		// 0x050C (0x0004) [0x0000000000000000]              
	class UFoxCombatMessage*                           CombatMessage;                                    		// 0x0510 (0x0004) [0x0000000000000000]              
	TArray< struct FPostGameExperienceGain >           PostGameExperienceGains;                          		// 0x0514 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPostGameExperienceGain >           PostGameGPGains;                                  		// 0x0520 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LocStringMatchExperience;                         		// 0x052C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBecomeThreat;                            		// 0x0538 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringMoraleBoost;                             		// 0x0544 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringKilledHighThreat;                        		// 0x0550 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringDestructible;                            		// 0x055C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRevive;                                  		// 0x0568 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringHeal;                                    		// 0x0574 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRepair;                                  		// 0x0580 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSupplyAmmo;                              		// 0x058C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringKilledHardSuit;                          		// 0x0598 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringKilledBarricade;                         		// 0x05A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringKilledProxMine;                          		// 0x05B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringKilledStunMine;                          		// 0x05BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringKilledDecoy;                             		// 0x05C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringKilledHRVJammer;                         		// 0x05D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringKilledTurret;                            		// 0x05E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringKilledFromTurret;                        		// 0x05EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringKilledBeacon;                            		// 0x05F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringGriefLevel1;                             		// 0x0604 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringGriefLevel2;                             		// 0x0610 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringGriefLevel3;                             		// 0x061C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringGriefLevel4;                             		// 0x0628 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringGriefLevel5;                             		// 0x0634 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UIEntryPointStartup;                              		// 0x0640 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     UIHudEntryPoint;                                  		// 0x064C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     UIPauseMenuEntryPoint;                            		// 0x0658 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     UIGameLobbyEntryPoint;                            		// 0x0664 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     UIIntermissionEntryPoint;                         		// 0x0670 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FAppliedBoost >                     AppliedBoosts;                                    		// 0x067C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AFoxProjectile_HRVJammerBase* >      HRVJammers;                                       		// 0x0688 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AFoxProjectile_DecoyBase* >          HRVDecoys;                                        		// 0x0694 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AFoxProjectile_ProximityMineBase* >  ProxMines;                                        		// 0x06A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AFoxProjectile_StunMineBase* >       StunMines;                                        		// 0x06AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AFoxProjectile_AmmoPackBase* >       AmmoPacks;                                        		// 0x06B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AFoxProjectile_BeaconBase* >         RespawnBeacons;                                   		// 0x06C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AFoxProjectile_SmokeGrenadeBase* >   DigiGrenades;                                     		// 0x06D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1775 ];

		return pClassPointer;
	};

	void NotifyGotMaxPlayers ( );
	void AddNewHudBoost ( class AFoxPRI* PRIOwner, int BoostUnlockID );
	void ClearNearbyReferenceForJammer ( class AFoxProjectile_HRVJammerBase* Jammer );
	class AFoxProjectile_HRVJammerBase* GetNearbyJammerForActor ( class AActor* TestActor );
	void SetNearbyReferenceForJammer ( class AFoxProjectile_HRVJammerBase* Jammer );
	bool IsMineDeployedForWeapon ( class AFoxWeapon* W );
	void RemoveMine ( class AFoxProjectile_MineBase* Mine );
	void AddMine ( class AFoxProjectile_MineBase* Mine );
	void CenterMouse ( );
	void SetMaxDrawDistance ( float newdist );
	void SetBorderless ( unsigned long bBorderless );
	void SetFullScreen ( unsigned long bFullScreen );
	void SetResolution ( int ResX, int ResY );
	void SetVSync ( unsigned long bOn );
	void ToggleDeferredShading ( );
	void SetTesselationScale ( float NewVal );
	void SetAntiAlias ( unsigned long bOn );
	void SetAllowImageReflections ( unsigned long bOn );
	void SetMotionBlur ( unsigned long bOn );
	void OnLostFocusPause ( unsigned long bEnable );
	void OpenLoadoutMenu ( );
	void NotifyLocalPlayerTeamReceived ( );
	void NotifyLevelStreamedOut ( );
	void NotifyLevelStreamedIn ( );
	void ShowRoundEndUI ( unsigned char WinningTeamIndex, int Team1Score, int Team2Score );
	void ShowEndGameResults ( float XPos, float YPos );
	bool ShouldSkipLobby ( );
	void ClearEventTimer ( );
	void AddEventTimer ( float TimeSeconds, struct FString TimerText );
	void DestroyHud ( );
	void KillMiniGameUI ( );
	class UFoxHudMiniGameBase* SpawnMiniGameUI ( class UClass* MiniGameUIClass, class AFoxGameObject_Use* ForUseObject );
	void NotifyEMPChange ( unsigned long bEMPOn, unsigned long bFriendly );
	void OnMoviesDeleted ( );
	void PostRender ( );
	void DrawHUD ( );
	void ShowBetweenRoundText ( );
	void SetCarryingObject ( unsigned long bCarryingObject );
	void eventUpdateDisplayedGameAction ( struct FName Team, struct FName Action, struct FName Reaction, int XP );
	void AddNewGameplayUpdate ( struct FString NewMessage );
	void DisplayGameAction ( struct FName TeamName, struct FName ActionName, struct FName Reaction, int XP );
	void NotifyDestructibleDestroyed ( int AwardPoints );
	void AddNewPassivePointNotification ( unsigned char EventType );
	void AddExperienceNotification ( struct FString Message, int ExperienceGained );
	struct FString GetEventName ( unsigned char EventType, unsigned long bFriendly );
	void NotifyWeScored ( unsigned char EventType );
	void NotifyTeamScore ( unsigned char EventType, int TeamIndex );
	void NotifyKillSpreeMsg ( struct FString msg, int Exp );
	void NotifyGotRevenge ( unsigned char NumKills );
	void NotifyGotKill ( class AFoxPRI* KilledPRI, class UClass* DamageType, unsigned long bHeadShot, unsigned char RevengeKills, unsigned long bRival, unsigned long bVIP, unsigned char KilledKillStreak, unsigned long bThreat );
	void NotifyKillMsg ( unsigned char MsgID, int Exp, struct FString KilledName );
	void NotifyServerNamesChanged ( );
	void NotifyNextMapChanged ( unsigned char MapIndex );
	void NotifyNextGameModeChanged ( );
	void ShowQuickGearRadialMenu ( );
	void ShowTauntRadialMenu ( );
	void eventToggleBackScreen ( unsigned long bShow );
	void CloseChatWindow ( );
	void OpenChatWindow ( );
	void HidePauseScreen ( );
	void eventShowPauseScreen ( unsigned long bFocusOnChat );
	void SetShowScores ( unsigned long bNewValue );
	void DisplayRespawnMessage ( struct FString NewMessage, unsigned long bPersistant );
	void AdminMessageInactive ( );
	void DisplayAdminMessage ( struct FString NewMessage );
	void AddCombatLog ( class AFoxPRI* InstigatingPRI, struct FString DetailText );
	void AddHUDNotification ( struct FString NewNotification, float NotificationScale, struct FLinearColor NotificationColor );
	void LocalizedMessage ( class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, class UObject* OptionalObject );
	void SpawnDamageIndicator ( float LocX, float LocY, class UClass* dmgType );
	float ComputeIndicatorAngle ( float PosX, float PosY );
	void SwitchToMainHUD ( unsigned long bRespawn );
	bool MenuCanClose ( );
	bool ConditionalCloseMainMenu ( );
	void NotifyDroppedObject ( );
	void NotifyLeftTeamVolume ( unsigned long bSameTeam );
	void NotifyLevelReadyToStart ( );
	void NotifyEnteredTeamVolume ( unsigned long bSameTeam );
	void ShowAfterAction ( );
	void BuildExperienceAndGPCategories ( );
	TArray< struct FString > GetMVPDetail ( class AFoxPRI* PRI, struct FString Label, struct FEmblemPanelEntry* Emblem );
	void OnShowTieBreaker ( );
	void ShowRoundEndScoreboard ( );
	void GenerateMVPWidgets ( );
	void SetupHeroPose ( );
	void TransitionToEndGameResults ( );
	void KillBackgroundUI ( );
	bool CanKillBackgroundUI ( );
	void TryKillBackgroundUI ( );
	void SwitchToPreGameLobby ( );
	void CloseBackground ( );
	void ReloadUIToSplash ( );
	void ClientNotifyMapType ( unsigned long bEntryMap, unsigned long bSpectator, unsigned long bHasMatchStarted );
	void RemoveObjective ( class AFoxObjectiveMarker_Base* Marker );
	void AnnounceObjective ( class AFoxObjectiveMarker_Base* Marker );
	void ShowObjective ( class AFoxObjectiveMarker_Base* Marker );
	void AddObjective ( class AFoxObjectiveMarker_Base* Marker );
	void RemovePostRenderedActor ( class AActor* A );
	void AddPostRenderedActor ( class AActor* A );
	void AddPostRendereredActors ( );
	void InitializeUI ( );
	bool CheckForPreviousErrors ( );
	void LaunchIntermission ( );
	void LaunchGameLobby ( );
	void SetupDummyPC ( );
	void SpawnIntoGameNow ( );
	void eventDestroyed ( );
	void PostBeginPlay ( );
	void ClearGFxEngineOnMoviesDeletedDelegate ( );
	void SetGFxEngineOnMoviesDeletedDelegate ( );
};

UClass* AFoxHUD::pClassPointer = NULL;

// Class FoxGame.FoxHUDDM
// 0x0010 (0x06EC - 0x06DC)
class AFoxHUDDM : public AFoxHUD
{
public:
	struct FString                                     LocStringWins;                                    		// 0x06DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                MyEndGamePlacement;                               		// 0x06E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1776 ];

		return pClassPointer;
	};

	void ShowEndGameResults ( float XPos, float YPos );
	void BuildExperienceAndGPCategories ( );
	void NotifyGameOver ( int MyPlacement, int inFirstPlaceID, int inSecondPlaceID, int inThirdPlaceID );
};

UClass* AFoxHUDDM::pClassPointer = NULL;

// Class FoxGame.FoxHUDBO
// 0x003C (0x0728 - 0x06EC)
class AFoxHUDBO : public AFoxHUDDM
{
public:
	TArray< class AFoxObjectiveMarker* >               ActiveObjectives;                                 		// 0x06EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ObjectiveAdded;                                   		// 0x06F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ObjectiveCompleted;                               		// 0x0704 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AwaitingCheckpointToRespawn;                      		// 0x0710 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringVictory;                                 		// 0x071C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1777 ];

		return pClassPointer;
	};

	void ShowEndGameResults ( float XPos, float YPos );
	void RemoveObjective ( class AFoxObjectiveMarker_Base* Marker );
	void ShowObjective ( class AFoxObjectiveMarker_Base* Marker );
	void AddObjective ( class AFoxObjectiveMarker_Base* Marker );
};

UClass* AFoxHUDBO::pClassPointer = NULL;

// Class FoxGame.FoxHUDLMS
// 0x0030 (0x071C - 0x06EC)
class AFoxHUDLMS : public AFoxHUDDM
{
public:
	struct FString                                     WaitTillRoundEnd;                                 		// 0x06EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RoundStartMessage;                                		// 0x06F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WinnerMessage;                                    		// 0x0704 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RoundWinnerMessage;                               		// 0x0710 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1778 ];

		return pClassPointer;
	};

};

UClass* AFoxHUDLMS::pClassPointer = NULL;

// Class FoxGame.FoxHUDTDM
// 0x008C (0x0768 - 0x06DC)
class AFoxHUDTDM : public AFoxHUD
{
public:
	unsigned char                                      WinningTeamIndex;                                 		// 0x06DC (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                Team1Score;                                       		// 0x06E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Team2Score;                                       		// 0x06E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Team1FinalRunningTotalScore;                      		// 0x06E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Team2FinalRunningTotalScore;                      		// 0x06EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     LocStringVictory;                                 		// 0x06F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSubVictory;                              		// 0x06FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSubRoundVictory;                         		// 0x0708 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringDefeat;                                  		// 0x0714 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSubDefeat;                               		// 0x0720 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSubRoundDefeat;                          		// 0x072C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringMatchOver;                               		// 0x0738 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSubMatchOver;                            		// 0x0744 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRoundOver;                               		// 0x0750 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSubRoundOver;                            		// 0x075C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1779 ];

		return pClassPointer;
	};

	void GetCapturedNodes ( int* TotalNodes, int* OurCappedNodes, int* TheirCappedNodes );
	void OnShowTieBreaker ( );
	void ShowEndGameResults ( float XPos, float YPos );
	void BuildExperienceAndGPCategories ( );
	void NotifyGameOver ( unsigned char inWinningTeamIndex, int inTeam1Score, int inTeam2Score, int inTeam1RunningTotalScore, int inTeam2RunningTotalScore, int inFirstPlaceID, int inSecondPlaceID, int inThirdPlaceID );
};

UClass* AFoxHUDTDM::pClassPointer = NULL;

// Class FoxGame.FoxHudCP
// 0x0078 (0x07E0 - 0x0768)
class AFoxHudCP : public AFoxHUDTDM
{
public:
	struct FString                                     LocStringPointLost;                               		// 0x0768 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringPointTaken;                              		// 0x0774 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringPointCaptured;                           		// 0x0780 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringPointHacked;                             		// 0x078C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringAttackPoint;                             		// 0x0798 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringDefendPoint;                             		// 0x07A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringPointAssist;                             		// 0x07B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringHoldPoint;                               		// 0x07BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringEnemyPointLost;                          		// 0x07C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringEnemyPointTaken;                         		// 0x07D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1780 ];

		return pClassPointer;
	};

	void GetCapturedNodes ( int* TotalNodes, int* OurCappedNodes, int* TheirCappedNodes );
	struct FString GetEventName ( unsigned char EventType, unsigned long bFriendly );
	void NotifyControlPointTaken ( struct FName CPLetter, int NewCapturedTeamIndex );
	void NotifyControlPointLost ( struct FName CPLetter, int OldOwningTeamIndex );
};

UClass* AFoxHudCP::pClassPointer = NULL;

// Class FoxGame.FoxHUDCTF
// 0x006C (0x07D4 - 0x0768)
class AFoxHUDCTF : public AFoxHUDTDM
{
public:
	struct FString                                     LocStringFlagGrab;                                		// 0x0768 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringFlagCaptured;                            		// 0x0774 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringFlagCarrierKill;                         		// 0x0780 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringFlagReturn;                              		// 0x078C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringFlagTeamCapture;                         		// 0x0798 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringEnemyFlagGrab;                           		// 0x07A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringEnemyFlagCaptured;                       		// 0x07B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringEnemyFlagCarrierKill;                    		// 0x07BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringEnemyFlagReturn;                         		// 0x07C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1781 ];

		return pClassPointer;
	};

	struct FString GetEventName ( unsigned char EventType, unsigned long bFriendly );
	void NotifyTeamScore ( unsigned char EventType, int TeamIndex );
};

UClass* AFoxHUDCTF::pClassPointer = NULL;

// Class FoxGame.FoxHudDetonate
// 0x002C (0x0794 - 0x0768)
class AFoxHudDetonate : public AFoxHUDTDM
{
public:
	float                                              CountDownTime;                                    		// 0x0768 (0x0004) [0x0000000000000000]              
	float                                              ExplodeTime;                                      		// 0x076C (0x0004) [0x0000000000000000]              
	struct FString                                     BombTimer;                                        		// 0x0770 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WinningMsg;                                       		// 0x077C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RoundRestartTime;                                 		// 0x0788 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1782 ];

		return pClassPointer;
	};

	void SetBombTimer ( float BombTime );
	void SetCarryingObject ( unsigned long bCarryingObject );
};

UClass* AFoxHudDetonate::pClassPointer = NULL;

// Class FoxGame.FoxHUDLTS
// 0x0030 (0x0798 - 0x0768)
class AFoxHUDLTS : public AFoxHUDTDM
{
public:
	struct FString                                     WaitTillRoundEnd;                                 		// 0x0768 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RoundStartMessage;                                		// 0x0774 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WinnerMessage;                                    		// 0x0780 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RoundWinnerMessage;                               		// 0x078C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1783 ];

		return pClassPointer;
	};

};

UClass* AFoxHUDLTS::pClassPointer = NULL;

// Class FoxGame.FoxHudTKOTH
// 0x0060 (0x07C8 - 0x0768)
class AFoxHudTKOTH : public AFoxHUDTDM
{
public:
	struct FString                                     LocStringPointCaptured;                           		// 0x0768 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringPointCaptureAssist;                      		// 0x0774 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringNewPoint;                                		// 0x0780 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringPointActive;                             		// 0x078C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringPointCaptureFail;                        		// 0x0798 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringAttackPoint;                             		// 0x07A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringDefendPoint;                             		// 0x07B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringHoldPoint;                               		// 0x07BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1784 ];

		return pClassPointer;
	};

	void GetCapturedNodes ( int* TotalNodes, int* OurCappedNodes, int* TheirCappedNodes );
	void NotifyPointCapturable ( );
	void NotifyPointActive ( );
	void NotifyPointCaptureFail ( );
	void NotifyPointCaptured ( );
	struct FString GetEventName ( unsigned char EventType, unsigned long bFriendly );
};

UClass* AFoxHudTKOTH::pClassPointer = NULL;

// Class FoxGame.FoxHudMiniGameBase
// 0x0038 (0x00B0 - 0x0078)
class UFoxHudMiniGameBase : public UGFxObject
{
public:
	class AFoxPC*                                      PCOwner;                                          		// 0x0078 (0x0004) [0x0000000000000000]              
	struct FString                                     symbolname;                                       		// 0x007C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class AFoxGameObject_Use*                          UseObject;                                        		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bPushHudBackWhenOpen : 1;                         		// 0x008C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bResetInputWhenOpened : 1;                        		// 0x008C (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bResetHRVWhenOpened : 1;                          		// 0x008C (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned char                                      PawnSpecialMove;                                  		// 0x0090 (0x0001) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    StartGameAkEvent;                                 		// 0x0094 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    CorrectAkEvent;                                   		// 0x0098 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    IncorrectAkEvent;                                 		// 0x009C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    AdvanceAkEvent;                                   		// 0x00A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    FailAkEvent;                                      		// 0x00A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    SuccessAkEvent;                                   		// 0x00A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    SelectGameAkEvent;                                		// 0x00AC (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1785 ];

		return pClassPointer;
	};

	void PlayInterfaceAnim ( struct FWeaponAnimSet* Set );
	void eventMinigameFail ( );
	void eventMinigameSuccess ( );
	void eventCancelMinigame ( );
	void ShutDown ( );
	void Initialize ( );
};

UClass* UFoxHudMiniGameBase::pClassPointer = NULL;

// Class FoxGame.FoxHudMiniGameSimon
// 0x0108 (0x01B8 - 0x00B0)
class UFoxHudMiniGameSimon : public UFoxHudMiniGameBase
{
public:
	struct FString                                     LocStringMatch;                                   		// 0x00B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringCancelInstructions;                      		// 0x00BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRightInstructions;                       		// 0x00C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringLeftInstructions;                        		// 0x00D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bInputReady : 1;                                  		// 0x00E0 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              MinigameTimer;                                    		// 0x00E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FWeaponAnimSet                              LeftAnim;                                         		// 0x00E8 (0x0034) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              RightAnim;                                        		// 0x011C (0x0034) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              OpenAnim;                                         		// 0x0150 (0x0034) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              CloseAnim;                                        		// 0x0184 (0x0034) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1786 ];

		return pClassPointer;
	};

	void as_SelectRight ( );
	void as_SelectLeft ( );
	void as_RemoveMinigame ( );
	void ei_PlayMatchMinigame_Enter ( );
	void ei_PlayMatchMinigame_Advance ( );
	void ei_PlayMatchMinigame_Correct ( );
	void ei_PlayMatchMinigame_Incorrect ( );
	void ShutDown ( );
	void ei_MinigameRemoved ( );
	void ei_MatchPass ( );
	void ei_MatchFail ( );
	void ei_InputReady ( );
	void eventGoRight ( );
	void eventGoLeft ( );
	void Initialize ( );
};

UClass* UFoxHudMiniGameSimon::pClassPointer = NULL;

// Class FoxGame.FoxHudMiniGameUse
// 0x0034 (0x00E4 - 0x00B0)
class UFoxHudMiniGameUse : public UFoxHudMiniGameBase
{
public:
	float                                              TotalUseTime;                                     		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              UseTimeLeft;                                      		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUseKeyHeld : 1;                                  		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bAutoStart : 1;                                   		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bPlayingFinishAnimation : 1;                      		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FString                                     LocStringHold;                                    		// 0x00BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringPress;                                   		// 0x00C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned char                                      MiniGameType;                                     		// 0x00D4 (0x0001) [0x0000000000000000]              
	struct FScriptDelegate                             __OnUseComplete__Delegate;                        		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1787 ];

		return pClassPointer;
	};

	void eventPlayFinishAnimation ( );
	void eventSetSkillProgress ( float Progress );
	void eventSetUsetext ( struct FString UseText );
	void SetIconRef ( struct FString IconRef );
	void eventStartedUsing ( );
	void ei_UseSkillDone ( );
	void ShutDown ( );
	void InitializeUseMiniGame ( struct FString UseText, struct FString IconRef, unsigned char MiniGameActionType, struct FScriptDelegate OnUseCompleteDelegate, float UseTime, unsigned long bAutoStartMinigame );
	void OnUseComplete ( );
};

UClass* UFoxHudMiniGameUse::pClassPointer = NULL;

// Class FoxGame.FoxHudMiniGameHardSuitWeakPointReset
// 0x0000 (0x00E4 - 0x00E4)
class UFoxHudMiniGameHardSuitWeakPointReset : public UFoxHudMiniGameUse
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1788 ];

		return pClassPointer;
	};

	void InitializeUseMiniGame ( struct FString UseText, struct FString IconRef, unsigned char MiniGameActionType, struct FScriptDelegate OnUseCompleteDelegate, float UseTime, unsigned long bAutoStartMinigame );
};

UClass* UFoxHudMiniGameHardSuitWeakPointReset::pClassPointer = NULL;

// Class FoxGame.FoxHudMiniGameHeal
// 0x0000 (0x00E4 - 0x00E4)
class UFoxHudMiniGameHeal : public UFoxHudMiniGameUse
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1789 ];

		return pClassPointer;
	};

	void InitializeUseMiniGame ( struct FString UseText, struct FString IconRef, unsigned char MiniGameActionType, struct FScriptDelegate OnUseCompleteDelegate, float UseTime, unsigned long bAutoStartMinigame );
};

UClass* UFoxHudMiniGameHeal::pClassPointer = NULL;

// Class FoxGame.FoxHudMinigameInteraction
// 0x0000 (0x00E4 - 0x00E4)
class UFoxHudMinigameInteraction : public UFoxHudMiniGameUse
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1790 ];

		return pClassPointer;
	};

	void InitializeUseMiniGame ( struct FString UseText, struct FString IconRef, unsigned char MiniGameActionType, struct FScriptDelegate OnUseCompleteDelegate, float UseTime, unsigned long bAutoStartMinigame );
};

UClass* UFoxHudMinigameInteraction::pClassPointer = NULL;

// Class FoxGame.FoxHudMinigameUse_HackOverload
// 0x0010 (0x00F4 - 0x00E4)
class UFoxHudMinigameUse_HackOverload : public UFoxHudMinigameInteraction
{
public:
	int                                                LastHackTime;                                     		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     LocStringHackFirewall;                            		// 0x00E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1791 ];

		return pClassPointer;
	};

	void InitializeUseMiniGame ( struct FString UseText, struct FString IconRef, unsigned char MiniGameActionType, struct FScriptDelegate OnUseCompleteDelegate, float UseTime, unsigned long bAutoStartMinigame );
	void UpdateHackTimer ( );
};

UClass* UFoxHudMinigameUse_HackOverload::pClassPointer = NULL;

// Class FoxGame.FoxHudMiniGameWeaponDepot
// 0x0150 (0x0200 - 0x00B0)
class UFoxHudMiniGameWeaponDepot : public UFoxHudMiniGameBase
{
public:
	struct FWeaponAnimSet                              LeftAnim;                                         		// 0x00B0 (0x0034) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              RightAnim;                                        		// 0x00E4 (0x0034) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              ConfirmAnim;                                      		// 0x0118 (0x0034) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              OpenAnim;                                         		// 0x014C (0x0034) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              CloseAnim;                                        		// 0x0180 (0x0034) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UAkEvent*                                    DepotEnterAkEvent;                                		// 0x01B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    DepotPageFlipAkEvent;                             		// 0x01B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    DepotPurchaseAmmoAkEvent;                         		// 0x01BC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    DepotPurchaseHealthAkEvent;                       		// 0x01C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    DepotWeaponPurchaseAkEvent;                       		// 0x01C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    DepotFailedPurchaseAkEvent;                       		// 0x01C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     LocStringSelect;                                  		// 0x01CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringCancel;                                  		// 0x01D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringTraverseRight;                           		// 0x01E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringTraverseLeft;                            		// 0x01F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class AFoxLoadoutInfo*                             Loadout;                                          		// 0x01FC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1792 ];

		return pClassPointer;
	};

	void eventas_closeDepotScene ( );
	void ei_PlayNegativeDown ( );
	int eventas_selectCurrentDepotItem ( );
	int eventas_setDepotTraverseLeft ( );
	int eventas_setDepotTraverseRight ( );
	void eventas_setDepotDetail ( struct FString ItemDetail, struct FString Cost );
	void as_SetItemNames ( TArray< struct FString > ItemNames );
	void ei_selectDepotItem ( struct FString Level );
	void ei_getDepotDetail ( struct FString LevelName );
	void ShutDown ( );
	void Initialize ( );
};

UClass* UFoxHudMiniGameWeaponDepot::pClassPointer = NULL;

// Class FoxGame.FoxUI
// 0x0430 (0x05E8 - 0x01B8)
class UFoxUI : public UZeUIBase
{
public:
	class AFoxPC*                                      PCOwner;                                          		// 0x01B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxHUD*                                     MyFoxHud;                                         		// 0x01BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxDataStore_MenuItems*                     MenuItemsDataStore;                               		// 0x01C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxDataStore_Unlockables*                   UnlockablesDataStore;                             		// 0x01C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxDataStore_StoreData*                     StoreDataStore;                                   		// 0x01C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxDataStore_GameSearchAll*                 GameSearchDataStore;                              		// 0x01CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x01D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlinePlayerInterface*                      PlayerInterface;                                  		// 0x01D4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x01D8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineStoreInterface*                       StoreInterface;                                   		// 0x01DC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x01E0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x01E4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x01E8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineGameInterfaceEx*                      GameInterfaceEx;                                  		// 0x01EC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x01F0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineChatInterface*                        ChatInterface;                                    		// 0x01F4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x01F8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineClanInterface*                        ClanInterface;                                    		// 0x01FC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x0200 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineFriendInterface*                      FriendInterface;                                  		// 0x0204 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x0208 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePartyInterface*                       PartyInterface;                                   		// 0x020C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData07[ 0x4 ];                             		// 0x0210 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UFoxHudUI*                                   HUD;                                              		// 0x0214 (0x0004) [0x0000000000000000]              
	class UFoxMenuUI*                                  Menu;                                             		// 0x0218 (0x0004) [0x0000000000000000]              
	class UFoxChatUI*                                  Chat;                                             		// 0x021C (0x0004) [0x0000000000000000]              
	class UFoxItemDealUI*                              ItemDeal;                                         		// 0x0220 (0x0004) [0x0000000000000000]              
	class UFoxDialogBoxBase*                           DialogBox;                                        		// 0x0224 (0x0004) [0x0000000000000000]              
	class UFoxTutorialUI*                              Tutorial;                                         		// 0x0228 (0x0004) [0x0000000000000000]              
	class UFoxLoadoutChangedWidget*                    LoadoutChangedNotification;                       		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkEvent*                                    CountDownAkEvent;                                 		// 0x0230 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    MenuBeginAkEvent;                                 		// 0x0234 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    StartHudAkEvent;                                  		// 0x0238 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    NegativeAkEvent;                                  		// 0x023C (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    ChatInputAkEvent;                                 		// 0x0240 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    ToolTipShadowBoxAkEvent;                          		// 0x0244 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    ToolTipRolloverAkEvent;                           		// 0x0248 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    EndRoundMusicStart;                               		// 0x024C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    EndRoundMusicStop;                                		// 0x0250 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkBank*                                     EndRoundMusicBank;                                		// 0x0254 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAkBank* >                           LoadedMenuAudioBanks;                             		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      PingRanges;                                       		// 0x0264 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RedTeamColor;                                     		// 0x0270 (0x000C) [0x0000000000404003]              ( CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     BlueTeamColor;                                    		// 0x027C (0x000C) [0x0000000000404003]              ( CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NoTeamColor;                                      		// 0x0288 (0x000C) [0x0000000000404003]              ( CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     AdminChatColor;                                   		// 0x0294 (0x000C) [0x0000000000404003]              ( CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PlayerWhisperColor;                               		// 0x02A0 (0x000C) [0x0000000000404003]              ( CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     SocialNotificationColor;                          		// 0x02AC (0x000C) [0x0000000000404003]              ( CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RestrictedColor;                                  		// 0x02B8 (0x000C) [0x0000000000404003]              ( CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     WarningColor;                                     		// 0x02C4 (0x000C) [0x0000000000404003]              ( CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     OnlineColor;                                      		// 0x02D0 (0x000C) [0x0000000000404003]              ( CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     InviteColor;                                      		// 0x02DC (0x000C) [0x0000000000404003]              ( CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FPlayerListEntry >                  PreviousMatchResultsTeam1;                        		// 0x02E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPlayerListEntry >                  PreviousMatchResultsTeam2;                        		// 0x02F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      PreviousGameClass;                                		// 0x0300 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     PreviousMapName;                                  		// 0x0304 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      MyPreviousTeamIndex;                              		// 0x0310 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                Team1PreviousScore;                               		// 0x0314 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Team2PreviousScore;                               		// 0x0318 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Team1RunningTotalPreviousScore;                   		// 0x031C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Team2RunningTotalPreviousScore;                   		// 0x0320 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bMyPreviousTeamWon : 1;                           		// 0x0324 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bInMenuTransition : 1;                            		// 0x0324 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bInHudTransition : 1;                             		// 0x0324 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      PendingInvite : 1;                                		// 0x0324 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bPendingPasswordedGame : 1;                       		// 0x0324 (0x0004) [0x0000000000000000] [0x00000010] 
	struct FString                                     PendingCommandGroupName;                          		// 0x0328 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            PurchaseStateSortPriorities;                      		// 0x0334 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     RegionLocSectionName;                             		// 0x0340 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FUnlockStateDisplayInfo >           UnlockStateInfo;                                  		// 0x034C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FPurchaseStateDisplayInfo >         PurchaseStateInfo;                                		// 0x0358 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FActivationTypeDisplayInfo >        ActivationTypeInfo;                               		// 0x0364 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DiscountColor;                                    		// 0x0370 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     UnlockLabelColor;                                 		// 0x037C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     LocConfirmLabel;                                  		// 0x0388 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocWorkingLabel;                                  		// 0x0394 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocSuccessLabel;                                  		// 0x03A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocFailureLabel;                                  		// 0x03AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ActiveLabels;                                     		// 0x03B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           InactiveLabels;                                   		// 0x03C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           PurchaseDurationLabels;                           		// 0x03D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ExpiredLabel;                                     		// 0x03DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RenewLabel;                                       		// 0x03E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RenewTooltip;                                     		// 0x03F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrashLabel;                                       		// 0x0400 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrashTooltip;                                     		// 0x040C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           CurrencyLabels;                                   		// 0x0418 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FreeLabel;                                        		// 0x0424 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UnlockLabel;                                      		// 0x0430 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DayLabel;                                         		// 0x043C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HourLabel;                                        		// 0x0448 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MinuteLabel;                                      		// 0x0454 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RequirementDefaultLabel;                          		// 0x0460 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RequirementRankLabel;                             		// 0x046C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RequirementSkillLabel;                            		// 0x0478 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           RequirementProfileFlagLabels;                     		// 0x0484 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RequirementAwardLabel;                            		// 0x0490 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RequirementZPLabel;                               		// 0x049C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RequirementHiddenLabel;                           		// 0x04A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< class UFoxUIBaseTask* >                    UITasks;                                          		// 0x04B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PendingPartyConnectString;                        		// 0x04C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DisableInputCaptureRefCount;                      		// 0x04CC (0x0004) [0x0000000000000000]              
	float                                              RankedMatchCountdownTime;                         		// 0x04D0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	TArray< struct FString >                           AllowedCharacters;                                		// 0x04D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UIPanelPath;                                      		// 0x04E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     UISocialPanelPath;                                		// 0x04EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              MaxChatCharacters;                                		// 0x04F8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FClanInfo                                   StoredClanInfo;                                   		// 0x04FC (0x0048) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UFoxCacheParty*                              PartyCache;                                       		// 0x0544 (0x0004) [0x0000000000000000]              
	TArray< struct FQueuedSocialNotification >         QueuedSocialNotifications;                        		// 0x0548 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UFoxSocialNotification*                      CurrSocialNotification;                           		// 0x0554 (0x0004) [0x0000000000000000]              
	int                                                SocialNotificationCounter;                        		// 0x0558 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    SocialNotificationInAkEvent;                      		// 0x055C (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    SocialNotificationOutAkEvent;                     		// 0x0560 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    MailNotificationInAkEvent;                        		// 0x0564 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    MailNotificationOutAkEvent;                       		// 0x0568 (0x0004) [0x0000000000000000]              
	struct FString                                     PendingGamePassword;                              		// 0x056C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              TimerRemaining;                                   		// 0x0578 (0x0004) [0x0000000000000000]              
	TArray< struct FCrosshairColorInfo >               CrosshairColors;                                  		// 0x057C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CrosshairDefaultNeutralColor;                     		// 0x0588 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CrosshairDefaultFriendlyColor;                    		// 0x0594 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CrosshairDefaultEnemyInRangeColor;                		// 0x05A0 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CrosshairDefaultEnemyOutRangeColor;               		// 0x05AC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCrosshairColorInfo >               ButtonColors;                                     		// 0x05B8 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDialogCloseDelegate__Delegate;                		// 0x05C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnTimerFinished__Delegate;                      		// 0x05D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __StringInputDelegate__Delegate;                  		// 0x05DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1793 ];

		return pClassPointer;
	};

	void as_SetMaxChars ( float Max, struct FString Path );
	void as_DisableButton ( unsigned long ShouldBeDisabled, struct FString ButtonPath );
	bool IsPartySupportEnabled ( );
	void PurgeGFxObjects ( );
	void ei_unrealLog ( struct FString Output );
	bool PlayerInterfaceExists ( );
	void ui_DelayTransition ( unsigned long bDelay );
	void SetupPreviousMatchResults ( );
	bool eventIsPlayerSignedIn ( );
	int GetNumProfileLoadoutSlots ( );
	class AFoxServerConnection* GetServerConnection ( );
	bool IsInClan ( );
	bool IsTeamGame ( );
	class UClass* eventGetGameClass ( );
	struct FString eventWrapStringInColor ( struct FString Text, struct FString TextColor );
	class AWorldInfo* GetWorldInfo ( );
	bool IsInEntryMap ( );
	void ui_Toggle3D ( );
	void UnIgnorePlayer ( struct FString PlayerName );
	void IgnorePlayer ( struct FString PlayerName );
	void ei_AddFriend ( struct FString NewName );
	void ei_PlayToolTipText ( );
	void ei_PlayToolTipShadowBox ( );
	void ei_PlayTextInput ( );
	void PlayNegativeSound ( );
	void ui_ConsoleCommand ( struct FString Command );
	void OnLostFocusPause ( unsigned long bEnable );
	struct FString GetPlatformLocalizedString ( struct FString SectionName, struct FString KeyName, struct FString PackageName );
	struct FString GetErrorMessage ( struct FString KeyName, struct FString SectionName, struct FString PackageName );
	struct FString GetImageIconStringFromButtonName ( struct FString ButtonName, unsigned long bIgnorePS3CircleAccept );
	TArray< struct FString > GetBindName ( struct FString CommandName );
	struct FString GetImageIconFromCommandName ( struct FString CommandName );
	struct FString GetBindingKeyLocalizedString ( struct FString Key );
	struct FString ResolveLocalizationEntry ( struct FLocalizationEntry* LocEntry );
	bool TryLocalizeString ( struct FString InString, struct FString* LocString );
	struct FString GetLocalizedString ( struct FString SectionName, struct FString Key );
	struct FString ParseStringForCommands ( struct FString Parsed );
	void NotifyReceivedGameClass ( );
	bool eventPlayerIsTalking ( struct FUniqueNetId PlayerID );
	int GetNumBarsFromPing ( int PingMs );
	struct FString LocalizeChat ( struct FString Key );
	struct FString LocalizeUI ( struct FString Key );
	struct FString ei_Localize ( struct FString Key, struct FString Section );
	void UpdateTeamNames ( );
	struct FString GetEnemyTeamName ( );
	struct FString GetMyTeamName ( );
	bool eventui_isMouseOverUI ( );
	struct FString as_checkUI ( );
	void eventas_addWidget ( struct FString instName, struct FString Component, int xposition, int yposition, int PerspFOV, int YRotation, int Opacity );
	void eventas_transition ( struct FString transitionTo );
	void as_removeLobbyBack ( );
	void as_lobbyBack ( );
	void as_HudTransition ( struct FString TransitionName );
	void as_setMouseOn ( unsigned long bTurnOn );
	void eventas_SimulateBackButtonPress ( );
	bool GetItemTilePricingFromStoreItem ( unsigned long bAllowFree, struct FBaseStoreEntry* ItemEntry, struct FStoreMetaData* StoreItem );
	bool GetItemTileFromCombinedItem ( int UnlockID, unsigned long bUseCachedStore, unsigned long bUseCachedInventory, int NumUsed, unsigned long bShowTimeLabel, unsigned long bShowActiveLabel, struct FBaseInventoryEntry* ItemEntry, struct FStoreMetaData* StoreItem, struct FInventoryMetaData* InventoryItem );
	bool GetItemTileFromStoreItem ( struct FBaseInventoryEntry* ItemEntry, struct FStoreMetaData* StoreItem );
	bool GetItemTileFromInventoryItem ( struct FBaseInventoryEntry* ItemEntry, struct FInventoryMetaData* InventoryItem );
	bool GetItemTileFromUnlockID ( int UnlockID, int NumUsed, struct FBaseInventoryEntry* ItemEntry );
	bool GetBaseItemTile ( int UnlockID, struct FBaseInventoryEntry* ItemEntry );
	void GetCurrencyLabel ( unsigned char Currency, struct FString* CurrencyLabel );
	void GetPricingLabels ( int ItemCost, float CostMult, struct FString* CurrentItemCost, struct FString* OriginalItemCost, struct FString* PriceChangePercent );
	bool GetDurationLabelFromTimeSpan ( unsigned long bHoursLeft, struct FString* DurationLabel, struct FDateTime* BeginDate, struct FDateTime* EndDate );
	bool GetDurationLabelFromTimeLeft ( unsigned long bHoursLeft, struct FString* DurationLabel, struct FDateTime* EndDate );
	bool GetDurationLabel ( unsigned char Duration, struct FString* DurationLabel );
	void GetFormattedPercentage ( float Number, struct FString* FormattedNumber );
	void GetFormattedNumber ( float Number, int Precision, int Padding, struct FString* FormattedNumber );
	int GetSortPriorityForPurchaseState ( unsigned char PurchaseState );
	bool ApplyActivationTypeDisplayInfo ( unsigned long bIsActive, unsigned long bShowActiveLabel, struct FBaseInventoryEntry* ItemEntry );
	bool ApplyUseCountDisplayInfo ( int UsesLeft, struct FBaseInventoryEntry* ItemEntry );
	bool ApplyPurchaseStateDisplayInfo ( unsigned long bApplyStatusColor, unsigned long bShowActiveLabel, struct FBaseInventoryEntry* ItemEntry );
	bool ApplyUnlockStateDisplayInfo ( struct FBaseInventoryEntry* ItemEntry );
	bool ApplyHiddenRequirementLabel ( struct FBaseInventoryEntry* ItemEntry );
	bool ApplyPremiumRequirementLabel ( struct FBaseInventoryEntry* ItemEntry );
	bool ApplyAwardRequirementLabel ( struct FBaseInventoryEntry* ItemEntry );
	bool ApplyProfileFlagRequirementLabel ( struct FBaseInventoryEntry* ItemEntry );
	bool ApplySkillRequirementLabel ( struct FBaseInventoryEntry* ItemEntry );
	bool ApplyRankRequirementLabel ( struct FBaseInventoryEntry* ItemEntry );
	bool ApplyDefaultRequirementLabel ( struct FBaseInventoryEntry* ItemEntry );
	unsigned char GetItemPurchasedStateFromInventoryItem ( struct FInventoryMetaData* InventoryItem );
	unsigned char GetItemPurchasedStateFromID ( int UnlockID, int NumUsed, unsigned long bUseCachedInventory, struct FInventoryMetaData* InventoryItem );
	unsigned char GetItemUnlockedStateFromStoreItem ( struct FStoreMetaData* StoreItem, int* RequiredRank, int* RequiredSkill, int* RequiredProfileFlag );
	unsigned char GetItemUnlockedStateFromID ( int UnlockID, unsigned long bUseCachedStore, int* RequiredRank, int* RequiredSkill, int* RequiredProfileFlag, struct FStoreMetaData* StoreItem );
	void JoinGameNow ( struct FName GameSessionName, struct FString Password, unsigned long bSpectator );
	void CancelConnectToGame ( unsigned long bAccepted );
	void ConnectToFriendGameWithPassword ( struct FString InPassword );
	void OpenPasswordPrompt ( );
	void OnJoinFriendGameComplete ( struct FName SessionName, unsigned long bSuccessful );
	void SendGameInvite ( struct FUniqueNetId PlayerUniqueId );
	void JoinGameByConnectString ( struct FString ConnectString, unsigned long bRequiresPassword, struct FString InPassword );
	void OnDelayedUnloadAARMusic ( );
	void StopEndRoundMusic ( );
	void StartEndRoundMusic ( );
	void UnloadAllMenuAKSoundBanks ( );
	void UnloadMenuAkBank ( class UAkBank* BankToUnload );
	void LoadMenuAKSoundBank ( class UAkBank* BankToLoad );
	void StopMenuMusic ( class UAkEvent* MusicStopEvent, unsigned long bUnloadAllBanks );
	void StartMenuMusic ( class UAkEvent* MusicStartEvent, class UAkBank* BankToLoad );
	void OnJoinGameForRankedMatchComplete ( struct FName SessionName, unsigned long bSuccessful );
	void JoinRankedMatch ( );
	void OnRankedMatchJoinExpire ( );
	void NotifyRankedMatchReady ( );
	void NotifyJoinRankedMatchQueue ( unsigned long bSuccessful, int QueuePlacement, int EstimatedWaitSeconds );
	void eventNotifyLoadoutChanged ( );
	void HideNoticePopupWidget ( class UFoxUINoticePopupWidget* Widget );
	class UFoxUINoticePopupWidget* ShowNoticePopupWidget ( class UClass* WidgetClass, struct FString instancename, int PosX, int PosY, struct FString TitleText, struct FString BodyText, struct FString WidgetColor );
	void ei_smallDialogRemoved ( );
	void HideWorkingDialogWidget ( class UFoxUIWorkingDialogWidget* WorkingDialogWidget );
	class UFoxUIWorkingDialogWidget* ShowWorkingDialogWidget ( class UClass* WidgetClass, struct FString AttachPanelName, struct FString instancename, int PosX, int PosY, struct FString TitleText, struct FString BodyText );
	void ei_nonModalDialogRemoved ( );
	void HideModalDialogWidget ( class UFoxUIModalDialogWidget* ModalDialogWidget );
	class UFoxUIModalDialogWidget* ShowModalDialogWidget ( class UClass* WidgetClass, struct FString instancename, int PosX, int PosY, struct FString FirstLine, struct FString SecondLine, struct FString ThirdLine );
	bool TimerRunning ( );
	void eventTimerFinished ( );
	void ClearTimer ( );
	void SetTimer ( float TimeLimit, struct FScriptDelegate TimerFinishedDelegate );
	void as_addMVP ( int XPos, int YPos, TArray< struct FString > Details, struct FEmblemPanelEntry Emblem );
	void as_showMatchResults ( float XPos, float YPos, struct FString GameTypeName, struct FString ResultText, unsigned long bWeWon, int OurScore, int TheirScore, int TotalNodes, int NumOurTeamCaptures, int NumTheirTeamCaptures, struct FString ResultString, float Duration );
	void ui_ShowMatchResults ( int XPos, int YPos );
	void ui_showTutorial ( struct FString TutorialName );
	void InternalShowSocialNotificationNow ( unsigned char NotificationType, struct FString InstigatorPlayerName, struct FEmblemPanelEntry EmblemInfo, struct FString AdditionalInfo );
	void ei_SocialPopupRemoved ( );
	void OnRemoveSocialNotification ( );
	void eventPumpSocialNotification ( unsigned char NotificationType, struct FString InstigatorPlayerName, struct FEmblemPanelEntry EmblemInfo, struct FString AdditionalInfo );
	void PushFriendUpdateMessage ( struct FString Message );
	void FriendRequestAccepted ( struct FString FriendName );
	void FriendRequestSent ( struct FString FriendName );
	void FriendOffline ( struct FString FriendName );
	void FriendOnline ( struct FString FriendName );
	void FriendStatusChange ( unsigned char NotificationType, struct FOnlineFriend FriendInfo );
	void OnNotifyFriendAdded ( unsigned long bWasSuccessful, unsigned char ResponseCode, struct FOnlineFriend FriendItem );
	void OnFriendInfoChanged ( struct FOnlineFriend OldFriendInfo, struct FOnlineFriend NewFriendInfo );
	void OnNotifyGameInviteReceived ( unsigned char LocalUserNum, struct FString InviterName );
	void OnAcceptPartyTravelToPublicGame ( unsigned long bAccept );
	void OnPublicPartyGameReady ( struct FString ConnectString );
	void OnPartyInviteReceived ( struct FString InviterName );
	struct FString GetPartyErrorKey ( unsigned char ErrorType );
	void ClearClanInfo ( );
	void ClanMOTDFiltered ( struct FString PlayerName, struct FString Message, int Channel, class AFoxPRI* PRI );
	void RestoreLocalClanCache ( );
	void HandleClanRefresh ( class UFoxItemCacheClan* ClanCache );
	void ClanRefreshComplete ( unsigned long bResult, struct FString FailureReason );
	void RefreshClanCache ( );
	void ClanMemberUpdateComplete ( unsigned char UpdateType, struct FClanMemberDisplayInfo OldInfo, struct FClanMemberDisplayInfo NewInfo );
	void SetClanCacheDelegates ( );
	bool HasClanInvitePermission ( );
	void ui_ShowPendingClanInvite ( );
	void ClanMOTDChanged ( unsigned long Success, struct FString MOTD );
	void ei_SetMOTD ( struct FString MOTD );
	void LeaveClan ( unsigned long OkClicked );
	void ei_LeaveClan ( struct FString Arg );
	void DisbandClan ( unsigned long bOkClicked );
	void ei_ClanDisband ( struct FString Arg );
	void OnClanKickResponse ( unsigned long Success, unsigned char FailReason );
	void OnClanKick ( );
	void OnClanInviteResponse ( unsigned long Success, unsigned char FailReason );
	void OnClanInvite ( struct FString ClanName, struct FString ClanTag, struct FString Founded, int MemberCount, struct FString WhoInvited, struct FString ClanID );
	void OnClanDisband ( unsigned long Success );
	void OnQuitClan ( unsigned long Success );
	void OnJoinClan ( unsigned long Success, struct FString ClanTag );
	void TryRefreshClanTab ( );
	void KickFromClan ( struct FUniqueNetId PlayerID );
	void KickFromClanByName ( struct FString PlayerName );
	void InviteToClan ( struct FString PlayerName, struct FUniqueNetId PlayerID );
	void RegisterClan ( struct FScriptDelegate InputString, struct FScriptDelegate ButtonPressed );
	void ChangeName ( struct FScriptDelegate InputString, struct FScriptDelegate ButtonPressed );
	void OnClanTagRetrieved ( struct FUniqueNetId PlayerID, struct FString ClanTag );
	class UFoxDialogBoxBase* eventShowClanCreateDialog ( struct FScriptDelegate InputString, struct FScriptDelegate ButtonPressed );
	void StringInputDelegate ( struct FString Input );
	void OnMailNotification ( struct FString MailData );
	struct FString as_CreateSocialChatPanel ( int XPos, int YPos );
	void as_SelectButton ( struct FString ButtonPath );
	void as_SetBoolParam ( unsigned long VarVal, struct FString VarName, struct FString Path );
	void as_SetStringParam ( struct FString VarVal, struct FString VarName, struct FString Path );
	void as_SetNumParam ( float VarVal, struct FString VarName, struct FString Path );
	void ei_SocialBarClosed ( );
	void ei_SocialBarOpen ( );
	bool EnforceWordRestrictions ( struct FString Message );
	bool EnforceCharacterRestrictionsForClanName ( struct FString* Message );
	bool EnforceCharacterRestrictions ( struct FString Message );
	void ui_removeItemDealWidget ( );
	void ui_addItemDealWidget ( int PosX, int PosY );
	void OnDialogClosed ( unsigned long bAccepted );
	void eventCloseDialogBox ( );
	class UFoxDialogBoxBase* eventShowRenewDialogBox ( struct FRenewDialogBoxProperties Properties );
	class UFoxDialogBoxBase* eventShowPurchaseDialogBox ( struct FPurchaseDialogBoxProperties Properties );
	class UFoxDialogBoxBase* eventShowNewsDialogBox ( struct FNewsDialogBoxProperties Properties );
	class UFoxDialogBoxBase* ShowEULADialogBox ( struct FMessageDialogBoxProperties Properties );
	class UFoxDialogBoxBase* ShowPasswordDialog ( struct FPasswordDialogBoxProperties Properties );
	class UFoxDialogBoxBase* eventShowCreatePlayerDialogBox ( struct FCreatePlayerDialogBoxProperties Properties );
	class UFoxDialogBoxBase* eventShowChangeNameDialogBox ( struct FChangeNameDialogBoxProperties Properties );
	class UFoxDialogBoxBase* eventShowExpiredDialogBox ( struct FDialogBoxProperties Properties );
	class UFoxDialogBoxBase* eventShowDialogBox ( struct FDialogBoxProperties Properties );
	void DestroyHudUI ( );
	void ui_initializeHud ( );
	void ui_QueryServers ( );
	void ei_menuTransitionComplete ( struct FString TransitionType );
	void ui_toggleCaptureInput ( unsigned long bCapture, unsigned long bForce );
	void KillInGameMenu ( );
	void eventui_RunCommandGroup ( struct FString GroupName );
	void CancelAllTasks ( );
	void CancelTask ( class UClass* TaskClass );
	bool HasTask ( class UClass* TaskClass );
	void ShowMenu ( struct FString MenuEntryPoint );
	void LoggedOut ( unsigned long WasSuccesful );
	void ui_SetDepthPriority ( int NewDPG );
	void ei_exitGame ( );
	void eventas_updateSelectedIndex ( TArray< int > IndexUpdates );
	void SetOwner ( );
	void ClearUIDelegates ( );
	void SetupUIDelegates ( );
	void Cleanup ( );
	void eventOnClose ( );
	void BuildEmblemFromComponents ( struct FProfileEmblemInfo* EmblemInfo, struct FEmblemPanelEntry* EmblemObject );
	void ei_logButtonClick ( struct FString ButtonID );
	void Initialize ( );
	void OnTimerFinished ( );
	void OnDialogCloseDelegate ( unsigned long bAccepted );
};

UClass* UFoxUI::pClassPointer = NULL;

// Class FoxGame.FoxHudUI
// 0x0C14 (0x0C50 - 0x003C)
class UFoxHudUI : public UObject
{
public:
	unsigned char                                      HudState;                                         		// 0x003C (0x0001) [0x0000000000000000]              
	unsigned char                                      LastAimingStatus;                                 		// 0x003D (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      MyLastThreatLevel;                                		// 0x003E (0x0001) [0x0000000000000000]              
	unsigned char                                      LastSpecateMode;                                  		// 0x003F (0x0001) [0x0000000000000000]              
	unsigned char                                      LastBattleModeState;                              		// 0x0040 (0x0001) [0x0000000000000000]              
	unsigned char                                      RespawnFocusType;                                 		// 0x0041 (0x0001) [0x0000000000000000]              
	struct FHudWidget                                  HudPanelWidget;                                   		// 0x0044 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  HealthWidget;                                     		// 0x0064 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  AmmoWidget;                                       		// 0x0084 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  DepotWidget;                                      		// 0x00A4 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  GameTypeWidget;                                   		// 0x00C4 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  GameTypeNodesWidget;                              		// 0x00E4 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  GearSelectWidget;                                 		// 0x0104 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  KillNotificationWidget;                           		// 0x0124 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  KillSpreeWidget;                                  		// 0x0144 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  KillTextBoxWidget;                                		// 0x0164 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  ExperienceWidget;                                 		// 0x0184 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  ComboExperienceWidget;                            		// 0x01A4 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	TArray< struct FComboExperienceDisplayTime >       ComboDisplayInfo;                                 		// 0x01C4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FHudWidget                                  PassivePointNotificationWidget;                   		// 0x01D0 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  AchievementUpdateWidget;                          		// 0x01F0 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  GameplayUpdateWidget;                             		// 0x0210 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  ActionProgressWidget;                             		// 0x0230 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  InteractionsWidget;                               		// 0x0250 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  SpectateSwitchWidget;                             		// 0x0270 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  SpectateCycleWidget;                              		// 0x0290 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  LoadoutChangedWidget;                             		// 0x02B0 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  GameplayDetailWidget;                             		// 0x02D0 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  WeaponDetailWidget;                               		// 0x02F0 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  PlayerCardWidget;                                 		// 0x0310 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  SocialUpdateWidget;                               		// 0x0330 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  ChatUpdateWidget;                                 		// 0x0350 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  ChatWidget;                                       		// 0x0370 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  DepotSceneWidget;                                 		// 0x0390 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  EventTimerWidget;                                 		// 0x03B0 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  KilledByWidget;                                   		// 0x03D0 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  OurPlayerStatusUpdateWidget;                      		// 0x03F0 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  KilledPlayerInfoWidget;                           		// 0x0410 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  ScorePanelWidget;                                 		// 0x0430 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  ScoreListWidget1;                                 		// 0x0450 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  ScoreListWidget2;                                 		// 0x0470 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  RoundEndScoreListWidget1;                         		// 0x0490 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  RoundEndScoreListWidget2;                         		// 0x04B0 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FVector2D                                   TieBreakerPos;                                    		// 0x04D0 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FHudWidget                                  ScorePanelStatsLabelWidget;                       		// 0x04D8 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  MyThreatWidget;                                   		// 0x04F8 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  EnemyThreatWidget;                                		// 0x0518 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FHudWidget                                  DepotPingWidget;                                  		// 0x0538 (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              HardSuitDamageIndicatorTime;                      		// 0x0558 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              LowHealthPercentage;                              		// 0x055C (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	struct FString                                     LocStringUseInstructions;                         		// 0x0560 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringUseInstructions_X;                       		// 0x056C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringPickUpInstructions;                      		// 0x0578 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringPickupInstructions_X;                    		// 0x0584 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSelfTerminate;                           		// 0x0590 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSelfTerminateBeacon;                     		// 0x059C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringChangeLoadoutInstructions;               		// 0x05A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringEnterHardSuit;                           		// 0x05B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringEnterPayload;                            		// 0x05C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringPickupTurret;                            		// 0x05CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringUseSyringe;                              		// 0x05D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringThrowSyringe;                            		// 0x05E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringVehicleInstructions;                     		// 0x05F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringVehicleInstructions_X;                   		// 0x05FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringViewPlayers;                             		// 0x0608 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringViewCamera;                              		// 0x0614 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringFreeCamera;                              		// 0x0620 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringCyclePlayers;                            		// 0x062C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringCycleCamera;                             		// 0x0638 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringScoreBoardInstructions;                  		// 0x0644 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringAvailableInDepot;                        		// 0x0650 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBackToggle;                              		// 0x065C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringPrimary;                                 		// 0x0668 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSecondary;                               		// 0x0674 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringGrenade;                                 		// 0x0680 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringMelee;                                   		// 0x068C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSpecial;                                 		// 0x0698 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRespawnTime;                             		// 0x06A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringFireToRespawn;                           		// 0x06B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRespawn;                                 		// 0x06BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRevive;                                  		// 0x06C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBeacon;                                  		// 0x06D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRespawnWait;                             		// 0x06E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBeaconWait;                              		// 0x06EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringNeedBeacon;                              		// 0x06F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringNeedRevive;                              		// 0x0704 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSelectRevive;                            		// 0x0710 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSelectRespawn;                           		// 0x071C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSelectBeacon;                            		// 0x0728 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringUseBeacon;                               		// 0x0734 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringUseRevive;                               		// 0x0740 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringAwardedXP;                               		// 0x074C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringClearance;                               		// 0x0758 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringLevel;                                   		// 0x0764 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringCredit;                                  		// 0x0770 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSeconds;                                 		// 0x077C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringEliminatedBy;                            		// 0x0788 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSpectating;                              		// 0x0794 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringKills;                                   		// 0x07A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringHealth;                                  		// 0x07AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBonusObjectives;                         		// 0x07B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRevenge;                                 		// 0x07C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRivalEliminated;                         		// 0x07D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringWarlord;                                 		// 0x07DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBecomeWarlord;                           		// 0x07E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringWarlordEliminated;                       		// 0x07F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBounty;                                  		// 0x0800 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringMissionRival;                            		// 0x080C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringMissionWarlord;                          		// 0x0818 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringHighThreat;                              		// 0x0824 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringReload;                                  		// 0x0830 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringReloading;                               		// 0x083C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBurnEngaged;                             		// 0x0848 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringWeaponRecharged;                         		// 0x0854 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBoost;                                   		// 0x0860 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringOverheating;                             		// 0x086C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringArmor;                                   		// 0x0878 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringLeftArm;                                 		// 0x0884 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRightArm;                                		// 0x0890 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringValue;                                   		// 0x089C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringHardSuit;                                		// 0x08A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringEnemyThreatHighThreat;                   		// 0x08B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringHighThreatEliminated;                    		// 0x08C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringMyThreatLevel;                           		// 0x08CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBecomeHighThreat;                        		// 0x08D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringHigh;                                    		// 0x08E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringMedium;                                  		// 0x08F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringLow;                                     		// 0x08FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringActivateWeakPointArmor;                  		// 0x0908 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringEnemyHacking;                            		// 0x0914 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringTeammateHacking;                         		// 0x0920 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringHackFirewall;                            		// 0x092C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringHackUnable;                              		// 0x0938 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBattleModeReady;                         		// 0x0944 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBattleModeActive;                        		// 0x0950 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBattleModeDisengaged;                    		// 0x095C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBattleModeUseText;                       		// 0x0968 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringExplosion;                               		// 0x0974 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           GameplayDetailStrings;                            		// 0x0980 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UClass*                                      LastGrenadeClass;                                 		// 0x098C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                LastGrenadeCount;                                 		// 0x0990 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                LastMaxHealth;                                    		// 0x0994 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                LastHealthCount;                                  		// 0x0998 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bLastMinuteWarningShown : 1;                      		// 0x099C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLastOnWinningTeam : 1;                           		// 0x099C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsLowHealth : 1;                                 		// 0x099C (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bPlayerCardShown : 1;                             		// 0x099C (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bActionProgressBarActive : 1;                     		// 0x099C (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bCrossHairsShown : 1;                             		// 0x099C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bLastReticleEnabled : 1;                          		// 0x099C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bEventTimerShown : 1;                             		// 0x099C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bLastWereHighThreat : 1;                          		// 0x099C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bLastWereVIP : 1;                                 		// 0x099C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bPendingEnemyThreatFinishUpdate : 1;              		// 0x099C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bPendingEnemyThreatFinishRemove : 1;              		// 0x099C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bPendingMyThreatFinishUpdate : 1;                 		// 0x099C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bShowRoundSwitch : 1;                             		// 0x099C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bHardSuitLowHealth : 1;                           		// 0x099C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bHardSuitLeftWeaponNameSet : 1;                   		// 0x099C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bHardSuitRightWeaponNameSet : 1;                  		// 0x099C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bBattleModeHudActive : 1;                         		// 0x099C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bPendingBoostAdd : 1;                             		// 0x099C (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bPendingMissionIn : 1;                            		// 0x099C (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bHRVOn : 1;                                       		// 0x099C (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bPendingHudTransition : 1;                        		// 0x099C (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bDetailWidgetVisible : 1;                         		// 0x099C (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bScoreBoardOpen : 1;                              		// 0x099C (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bHardSuitHudActive : 1;                           		// 0x099C (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bEMPEffectOn : 1;                                 		// 0x099C (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bTeamGame : 1;                                    		// 0x099C (0x0004) [0x0000000000000002] [0x04000000] ( CPF_Const )
	float                                              LastMaxStamina;                                   		// 0x09A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastStamina;                                      		// 0x09A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                LastMaxSpareAmmo;                                 		// 0x09A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                LastSpareAmmoCount;                               		// 0x09AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastClipAmmoUsedPercent;                          		// 0x09B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastHRVProgress;                                  		// 0x09B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                LastMinutes;                                      		// 0x09B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                LastSeconds;                                      		// 0x09BC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                LastRedTeamScore;                                 		// 0x09C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                LastBlueTeamScore;                                		// 0x09C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     PlayerNameInView;                                 		// 0x09C8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     LastInteractionText;                              		// 0x09D4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                LastCombatPoints;                                 		// 0x09E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                LastDepotTier;                                    		// 0x09E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastDepotTierProgress;                            		// 0x09E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastCrosshairSpread;                              		// 0x09EC (0x0004) [0x0000000000000000]              
	float                                              BeginningEventTime;                               		// 0x09F0 (0x0004) [0x0000000000000000]              
	float                                              CurrentEventTime;                                 		// 0x09F4 (0x0004) [0x0000000000000000]              
	int                                                LastMyThreatKills;                                		// 0x09F8 (0x0004) [0x0000000000000000]              
	int                                                LastEnemyThreatPlayerID;                          		// 0x09FC (0x0004) [0x0000000000000000]              
	int                                                LastEnemyThreatLevel;                             		// 0x0A00 (0x0004) [0x0000000000000000]              
	int                                                LastThreatValue;                                  		// 0x0A04 (0x0004) [0x0000000000000000]              
	int                                                MyNumDrawnSkulls;                                 		// 0x0A08 (0x0004) [0x0000000000000000]              
	int                                                EnemyNumDrawnSkulls;                              		// 0x0A0C (0x0004) [0x0000000000000000]              
	float                                              HSLeftDamageIndicatorTime;                        		// 0x0A10 (0x0004) [0x0000000000000000]              
	float                                              HSRightDamageIndicatorTime;                       		// 0x0A14 (0x0004) [0x0000000000000000]              
	int                                                LastMyTeamCapturedPoints;                         		// 0x0A18 (0x0004) [0x0000000000000000]              
	int                                                LastOtherTeamCapturedPoints;                      		// 0x0A1C (0x0004) [0x0000000000000000]              
	float                                              LastBattleModeProgress;                           		// 0x0A20 (0x0004) [0x0000000000000000]              
	class UClass*                                      CurrentSpecialtyDamageType;                       		// 0x0A24 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastDepotPingCP;                                  		// 0x0A28 (0x0004) [0x0000000000000000]              
	int                                                NumNodes;                                         		// 0x0A2C (0x0004) [0x0000000000000000]              
	int                                                LastMaxArmor;                                     		// 0x0A30 (0x0004) [0x0000000000000000]              
	int                                                LastArmor;                                        		// 0x0A34 (0x0004) [0x0000000000000000]              
	int                                                LastLeftGunAmmo;                                  		// 0x0A38 (0x0004) [0x0000000000000000]              
	int                                                LastRightGunAmmo;                                 		// 0x0A3C (0x0004) [0x0000000000000000]              
	int                                                LastLeftGunAmmoProgress;                          		// 0x0A40 (0x0004) [0x0000000000000000]              
	int                                                LastRightGunAmmoProgress;                         		// 0x0A44 (0x0004) [0x0000000000000000]              
	float                                              LastBoostCharge;                                  		// 0x0A48 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   HardSuitCirclePos;                                		// 0x0A4C (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector2D                                   HardSuitLeftPanelPos;                             		// 0x0A54 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector2D                                   HardSuitRightPanelPos;                            		// 0x0A5C (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector2D                                   LastHardSuitPanelOffset;                          		// 0x0A64 (0x0008) [0x0000000000000000]              
	int                                                DamageIndicatorInstanceIndex;                     		// 0x0A6C (0x0004) [0x0000000000000000]              
	TArray< struct FHardSuitDamageIndicator >          HardSuitDamageIndicators;                         		// 0x0A70 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  HardSuitLeftPanel;                                		// 0x0A7C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  HardSuitRightPanel;                               		// 0x0A80 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  HardSuitCircleIndicator;                          		// 0x0A84 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  HardSuitBrackets;                                 		// 0x0A88 (0x0004) [0x0000000000000000]              
	class UFoxHardSuitWeakPointResetWidget*            HardSuitReticleObject;                            		// 0x0A8C (0x0004) [0x0000000000000000]              
	TArray< struct FLocalKillMsg >                     QueuedLocalKillMessages;                          		// 0x0A90 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FKilledPlayerMsg >                  QueuedKillPlayerMessages;                         		// 0x0A9C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           QueuedStatusUpdates;                              		// 0x0AA8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FCombatLogNotification >            QueuedCombatLogNotifications;                     		// 0x0AB4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           QueuedKillBoxNotifications;                       		// 0x0AC0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           QueuedExperienceNotifications;                    		// 0x0ACC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      QueuedComboMessages;                              		// 0x0AD8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FChatNotification >                 QueuedChatUpdateMessages;                         		// 0x0AE4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FGameplayNotification >             QueuedGameplayUpdateNotifications;                		// 0x0AF0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  ScoreTab;                                         		// 0x0AFC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  ScoreInteractLabel;                               		// 0x0B00 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxPlayerListWidget*                        ScoreList1;                                       		// 0x0B04 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxPlayerListWidget*                        ScoreList2;                                       		// 0x0B08 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ScoreboardElapsedTime;                            		// 0x0B0C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ScoreboardUpateInterval;                          		// 0x0B10 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPassivePointNotifyObj >            QueuedPassivePointNotifications;                  		// 0x0B14 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  PassivePointNotification;                         		// 0x0B20 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxBillboardUIContainer*                    HudPanel;                                         		// 0x0B24 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  BoostContainer;                                   		// 0x0B28 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FHudBoost >                         Boosts;                                           		// 0x0B2C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PendingBoostRemoveIndex;                          		// 0x0B38 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  MiniMissionContainer;                             		// 0x0B3C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FMiniMission >                      ObjectiveMissions;                                		// 0x0B40 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FMiniMission                                WarlordMission;                                   		// 0x0B4C (0x001C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FMiniMission                                RivalMission;                                     		// 0x0B68 (0x001C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UFoxGearHudWidget*                           GearWidget;                                       		// 0x0B84 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  RespawnObject;                                    		// 0x0B88 (0x0004) [0x0000000000000000]              
	struct FHudWidget                                  RespawnWidget;                                    		// 0x0B8C (0x0020) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	class UGFxObject*                                  DepotPing;                                        		// 0x0BAC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FString >                           QueuedDepotPings;                                 		// 0x0BB0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UFoxQuickLoadoutWidget*                      QuickLoadoutMovie;                                		// 0x0BBC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxRadialMenuBase*                          RadialMenu;                                       		// 0x0BC0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxHudMiniGameBase*                         Minigame;                                         		// 0x0BC4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  SpectateSwitchInstructions;                       		// 0x0BC8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  SpectateCycleInstructions;                        		// 0x0BCC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxSocialUpdateWidget*                      SocialUpdate;                                     		// 0x0BD0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  MinigamePanel;                                    		// 0x0BD4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  SpectatorKiller;                                  		// 0x0BD8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  NodeScore;                                        		// 0x0BDC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  ReviveBootup;                                     		// 0x0BE0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkEvent*                                    CreditsEarnAkEvent;                               		// 0x0BE4 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    BeginSpectateAkEvent;                             		// 0x0BE8 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    HardSuitHealthWarnAkEvent;                        		// 0x0BEC (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    HardSuitHealthWarnStopAkEvent;                    		// 0x0BF0 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    HardSuitEnemyTargetedAkEvent;                     		// 0x0BF4 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    HardSuitBoostReadyAkEvent;                        		// 0x0BF8 (0x0004) [0x0000000000000000]              
	TArray< class UAkEvent* >                          LowHealthAkEvents;                                		// 0x0BFC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UAkEvent*                                    GameplayUpdateAkEvent;                            		// 0x0C08 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    ReviveAvailableAkEvent;                           		// 0x0C0C (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    UseReviveAkEvent;                                 		// 0x0C10 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    RespawnAvailableAkEvent;                          		// 0x0C14 (0x0004) [0x0000000000000000]              
	class AFoxWeapon*                                  PendingWeapon;                                    		// 0x0C18 (0x0004) [0x0000000000000000]              
	int                                                NumProfileSlotsAvailable;                         		// 0x0C1C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     NodeColorMyTeam;                                  		// 0x0C20 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NodeColorEnemy;                                   		// 0x0C2C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NodeColorNeutral;                                 		// 0x0C38 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUseMiniGameComplete__Delegate;                		// 0x0C44 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1794 ];

		return pClassPointer;
	};

	struct FString as_ShowTieBreaker ( int XPos, int YPos );
	void as_UpdateNoiseEffect ( float Opacity );
	void as_ToggleNoiseEffect ( unsigned long Enabled );
	void as_showDamageTypeIcon ( struct FString Icon, struct FString IconColor, struct FString IconGlow );
	void eventas_ShowStaminaWarning ( );
	struct FString as_addGearDeploymentWidget ( int XPos, int YPos, int FOV, int YRot, int Opacity, TArray< struct FString > GearInfo );
	void as_forceCloseChat ( );
	struct FString as_placeHudChat ( float XPos, float YPos, struct FString SayText );
	void as_showBlueScreen ( struct FString PlayerName );
	void eventas_toggleLowHealthEffect ( unsigned long bShow );
	void as_showHitMarker ( int XPos, int YPos );
	void eventas_updateMyThreatString ( struct FString NewThreatString, struct FString NewThreatValue );
	void eventas_updateMyThreatLevel ( int MyThreatSkulls );
	void as_showMyThreat ( float XPos, float YPos, float FOV, float YRot, float Opacity, struct FString ThreatText, int NumThreatSkulls );
	void as_showEnemyThreatEliminated ( struct FString ThreatText, float DurationSeconds );
	void eventas_updateEnemyThreat ( int NumKills );
	void as_showNewEnemyThreat ( float XPos, float YPos, float FOV, float YRot, float Opacity, struct FString ThreatLevel, struct FString PlayerName, int KillStreak );
	void eventas_updateHardSuitPanelsOffsets ( float OffsetX, float OffsetY );
	void eventas_setHardSuitReticleSpread ( float Spread );
	void eventas_hideHardSuitBurnText ( );
	void eventas_showHardSuitBurnText ( );
	void eventas_updateHardSuitThreat ( TArray< int > TransformColors );
	void eventas_showHardSuitRechargeText ( float DurationSeconds );
	void eventas_removeHardSuitOverheat ( );
	void eventas_showHardSuitOverheat ( struct FString OverheatString );
	void eventas_updateHardSuitBoostProgress ( float Progress );
	void eventas_updateHardSuitLeftGunInfo ( float AmmoProgress, float OverHeatProgress, struct FString AmmoCount );
	void eventas_updateHardSuitRightGunInfo ( float AmmoProgress, float OverHeatProgress, struct FString AmmoCount );
	void as_SetupHardSuitLeftGun ( struct FString ArmText, struct FString WeaponName );
	void as_SetupHardSuitRightGun ( struct FString ArmText, struct FString WeaponName );
	void eventas_setHardSuitArmor ( int CurrentArmor );
	void eventas_setHardSuitMaxArmor ( int MaxArmor );
	void as_hideHardSuitReticle ( );
	struct FString as_placeHardSuitReticle ( float XPos, float YPos, struct FString ReloadString, struct FString BurnString, struct FString RechargedString, struct FString BoostString, struct FString ArmorString );
	void as_shutDownHardSuit ( );
	void eventas_removeScoreEntry ( int ListIndex, int IndexToRemove );
	void eventas_updateScoreEntry ( unsigned long bMyEntry, int ListIndex, struct FString RankIconMarkup, struct FString PlayerName, struct FString ClanName, struct FString Title, struct FString KillDeathRatio, int Score, unsigned long bIsTalking, struct FString PingMs, int NumPingBars, int IndexToUpdate );
	void eventas_addScoreEntry ( unsigned long bMyEntry, int ListIndex, int TeamColor, struct FString RankIconMarkup, struct FString PlayerName, struct FString ClanName, struct FString Title, struct FString KillDeathRatio, int Score, struct FString PingMs );
	void as_addScoreList ( int TeamIndex, float XPos, float YPos, float FOV, float YRot, float ZPos, float Opacity );
	struct FString as_addNewScoreList ( float XPos, float YPos, float FOV, float YRot, float ZPos, float Opacity );
	struct FString as_addScorePanel ( float XPos, float YPos, struct FString InteractText, unsigned long bHasScores, unsigned long bIsHeroScreen );
	void as_removeActionCircle ( );
	void as_ShowActionCircle ( struct FString UpText, struct FString DownText, struct FString LeftText, struct FString RightText );
	void as_addKilledPlayerInfo ( float XPos, float YPos, struct FString PlayerName, TArray< struct FString > InfoArray, unsigned long bHeadShot );
	void as_addMyPlayerStatusUpdate ( float XPos, float YPos, struct FString UpdateText, float DurationSeconds );
	struct FString as_addSpectatorPlayerWidget ( float XPos, float YPos, float FOV, float YRot, float Opacity, struct FString KilledText, struct FString KilledByName, struct FString KilledByClanTag, struct FString TitleName, struct FString BonusText, TArray< struct FString > BonusStrings, TArray< struct FString > ExperienceStrings, struct FEmblemPanelEntry PlayerEmblem, struct FKillerWeaponInfo WeaponInfo, struct FKillerHealthInfo HealthInfo );
	struct FString as_addSpectatorKillerWidget ( float XPos, float YPos, float FOV, float YRot, float Opacity, struct FString KilledText, struct FString KilledByName, struct FString KilledByClanTag, struct FString TitleName, struct FString BonusText, TArray< struct FString > BonusStrings, TArray< struct FString > ExperienceStrings, struct FEmblemPanelEntry PlayerEmblem, struct FKillerWeaponInfo WeaponInfo, struct FKillerHealthInfo HealthInfo );
	void eventas_removeEventTimer ( );
	void eventas_updateEventTimer ( float RemainingTime, struct FString SecondsText );
	void as_addEventTimer ( float XPos, float YPos, float FOV, float YRotation, float Opacity, struct FString EventName );
	void eventas_updateCrosshairSpread ( float Distance, TArray< int > TransformColors );
	void as_placeCrosshairs ( float XPos, float YPos, int NumTicks, float TickLength, int Alpha, int Rotation );
	void eventas_setShowCrosshair ( unsigned long bShow );
	void eventas_setShowReticle ( unsigned long bShow );
	void eventas_placeReticle ( float XPos, float YPos, int Alpha );
	void as_ToggleHRVOverlay ( unsigned long bShow );
	void as_DestroyHud ( );
	void as_addChatUpdate ( float XPos, float YPos, float FOV, float YRotation, float Opacity, struct FString SocialText, float DisplaySeconds );
	void eventas_killHRVPlayerCard ( );
	void eventas_addHRVPlayerCard ( float XPos, float YPos, float FOV, float YRotation, float Opacity, struct FString PlayerName, struct FString WeaponIconRef, unsigned long bIsVIP, float HealthPercentage, int WidgetColor, int ThreatLevel );
	void as_addWeaponDetailWidget ( float XPos, float YPos, float FOV, float YRotation, float Opacity, int CurrentAmmo, int MaxAmmo, struct FString WeaponName, struct FString WeaponType, struct FString OriginalOwnerName, float DisplayTimeSeconds );
	void as_addGameplayDetail ( float XPos, float YPos, float FOV, float YRotation, float Opacity, struct FString GameType, struct FString Objective1, struct FString Objective2, struct FString Objective3, float DispTime );
	void eventas_removeInteractionPrompt ( );
	void eventas_addInteractionPrompt ( float XPos, float YPos, float FOV, float YRotation, float Opacity, struct FString Text );
	void eventas_removeActionProgressWidget ( );
	void eventas_updateActionProgressWidget ( struct FString ActionText, float Progress );
	void as_addActionProgressWidget ( float XPos, float YPos, float FOV, float YRotation, float Opacity, struct FString ActionText, float Progress );
	void as_addGameplayUpdate ( float XPos, float YPos, float FOV, float YRotation, float Opacity, struct FString UpdateText, float DurationNumber );
	void as_addAchievementUpdate ( float XPos, float YPos, float FOV, float YRotation, float Opacity, struct FString AchievementText, float AchievementProgress, float DurationSeconds );
	void as_addComboExperienceText ( float XPos, float YPos, float FOV, float YRotation, float Opacity, int ComboNumber, float DurationSeconds );
	void as_addExperienceText ( float XPos, float YPos, float FOV, float YRotation, float Opacity, struct FString ExperienceText, float DurationSeconds );
	void as_addCombatLog ( float XPos, float YPos, float FOV, float YRotation, float Opacity, struct FString KillerName, struct FString DetailText, float DurationSeconds );
	void as_addKillBoxText ( float XPos, float YPos, float FOV, float YRotation, float Opacity, struct FString KillTextSting, float DurationSeconds );
	void as_addSpreeNotification ( float XPos, float YPos, float FOV, float YRotation, float Opacity, struct FString KillSpreeText, float SecondsDuration );
	void as_addKillNotification ( float XPos, float YPos, float FOV, float YRotation, float Opacity, struct FString KillText, struct FString VictimName );
	void eventas_updateBlueCapNodes ( int NumCappedNodes );
	void eventas_updateRedCapNodes ( int NumCappedNodes );
	void eventas_setWarnBlueTeam ( unsigned long bShow );
	void eventas_setWarnRedTeam ( unsigned long bShow );
	void eventas_updateGameTime ( struct FString Time );
	void eventas_updateBlueTeamScore ( struct FString Score, float Progress );
	void eventas_updateRedTeamScore ( struct FString Score, float Progress );
	void as_addGameTypeWidget ( float XPos, float YPos, float FOV, float YRotation, float Opacity, struct FString GameType, int NumberOfCaptureNodes, struct FString MyTeamName, struct FString EnemyTeamName, struct FString GameTypeDisplayName );
	void eventas_updateDepotWidgetTier ( struct FString TierIconMarkup, struct FString TierText );
	void eventas_updateDepotWidgetPoints ( int Amount, int TierProgress );
	void as_addDepotWidget ( float XPos, float YPos, float FOV, float YRotation, float Opacity, struct FString TierIcon, float NumCombatPoints, float TierProgressPercentage );
	void eventas_setHRV ( float HRVProgress );
	void eventas_setAmmoCount ( int CurrentSpareAmmo, float ClipAmmoPercentage );
	void eventas_setSpareMaxAmmo ( int SpareMaxAmmo );
	void as_addPlayerStatusRightWidget ( float XPos, float YPos, float FOV, float YRotation, float Opacity );
	void eventas_setStamina ( int Stamina );
	void eventas_setMaxStamina ( int MaxStamina );
	void eventas_setHealth ( int Health );
	void eventas_setMaxHealth ( int MaxHealth );
	void as_addPlayerStatusLeftWidget ( float XPos, float YPos, float FOV, float YRotation, float Opacity );
	void as_setTeamBlue ( unsigned long bBlue );
	void as_createBoostContainer ( );
	void as_removeMinigamePanel ( );
	void as_placeMinigamePanel ( float XPos, float YPos );
	void as_placeHUDPanel ( int XPos, int YPos );
	struct FString PlaceHudChat ( );
	void eventForceCloseChat ( );
	void ShowHitMarker ( int X, int Y );
	void eventUpdateMyThreat ( int ThreatLevel );
	void eventShowMyThreat ( );
	void eventStopEnemyThreat ( );
	void eventUpdateEnemyThreat ( int NumKills );
	void eventShowNewEnemyThreat ( struct FString PlayerName, int NumKills );
	void EMPRecoverHud ( );
	void EMPHud ( );
	void eventSetupHardSuitLeftGun ( struct FString WeaponName );
	void eventSetupHardSuitRightGun ( struct FString WeaponName );
	void eventShowHardSuitOverheat ( );
	struct FString PlaceHardSuitReticle ( );
	class UGFxObject* ShowTieBreaker ( );
	class UFoxPlayerListWidget* AddRoundEndScoreList2 ( );
	class UFoxPlayerListWidget* AddRoundEndScoreList1 ( );
	class UFoxPlayerListWidget* AddScoreList2 ( );
	class UFoxPlayerListWidget* AddScoreList1 ( );
	struct FString AddScorePanel ( struct FString InteractText, unsigned long bRoundEnd );
	void AddKilledPlayerInfo ( struct FString PlayerName, TArray< struct FString > InfoArray, unsigned long bHeadShot );
	struct FString AddSpectatingPlayerInfo ( struct FString PlayerName, struct FString PlayerClanTag, struct FString TitleName, struct FEmblemPanelEntry PlayerEmblem, struct FKillerWeaponInfo WeaponInfo, struct FKillerHealthInfo HealthInfo );
	struct FString AddSpectatorKillerWidget ( struct FString KilledByName, struct FString KilledByClanTag, struct FString TitleName, TArray< struct FString > BonusStrings, TArray< struct FString > ExperienceStrings, struct FEmblemPanelEntry PlayerEmblem, struct FKillerWeaponInfo WeaponInfo, struct FKillerHealthInfo HealthInfo );
	void eventUpdateEventTimer ( );
	void eventAddEventTimer ( float RemainingTime, struct FString EventName );
	void AddChatUpdate ( struct FString SocialText, float DispTime );
	void eventAddHRVPlayerCard ( struct FString PlayerName, struct FString WeaponIconRef, unsigned long bIsVIP, float HealthPercentage, int WidgetColor, int ThreatLevel );
	void AddWeaponDetailWidget ( int AmmoCount, int MaxAmmo, struct FString WeaponName, struct FString WeaponType, struct FString OriginalOwnerName );
	void AddGameplayDetail ( struct FString GameType, struct FString Obj1, struct FString Obj2, struct FString Obj3, float DispTime );
	void eventAddInteractionPrompt ( struct FString Text );
	void eventAddActionProgressWidget ( struct FString ActionText, float Progress );
	void AddGameplayUpdate ( struct FString UpdateText, float DispTime );
	struct FString AddGearDeploymentWidget ( );
	void AddAchievementUpdate ( struct FString AchievementText, float AchievementProgress );
	void AddComboExperienceWidget ( int Experience );
	void AddExperienceText ( struct FString ExperienceText );
	void AddCombatLog ( struct FString InstigatorName, struct FString DetailText );
	void AddKillSpreeNotificationWidget ( struct FString KillSpreeText );
	void AddKillNotificationWidget ( struct FString KillText, struct FString VictimName );
	void AddGameTypeWidget ( struct FString GameType, int NumberOfCaptureNodes, struct FString MyTeamName, struct FString EnemyTeamName, struct FString GameTypeDisplayName );
	void AddDepotWidget ( struct FString TierIcon, float NumCombatPoints, float TierProgressPercentage );
	void AddAmmoStatusWidget ( );
	void AddHealthStatusWidget ( );
	void PlaceHUDPanel ( );
	void DebugGamePlayUpdate ( );
	void DebugKillNotifications ( );
	void ei_RemoveKillConfirmed ( struct FString instancename );
	struct FString ei_LocalizeHudString ( struct FString Key );
	void RemoveMinigamePanel ( );
	void PlaceMinigamePanel ( );
	void ClearReviveBootup ( );
	void BeginReviveBootup ( );
	void UpdateCrosshairsAndReticle ( );
	void eventSetShowReticleAndCrosshairs ( unsigned long bShow );
	void ei_BuffRemoved ( );
	void ei_BuffTransitionDone ( );
	void eventRemoveBoost ( int BoostIndex );
	void eventAddBoost ( int BoostID, class AFoxPRI* OwningPRI );
	void ei_DepotNotifyDone ( );
	void PumpDepotPing ( struct FString DepotName );
	void CheckForDepotPing ( );
	void eventKillMiniGame ( );
	void eventSpawnInteractionUseMinigame ( unsigned char MiniGameActionType, struct FString InteractText, class UClass* MiniGameClass, class AFoxGameObject_Use* UseObject );
	void eventSpawnHealMiniGame ( class AFoxWeapon_TargetBase* HealWeapon );
	void eventSpawnReviveMiniGame ( struct FString UseText, struct FString IconRef, unsigned char MiniGameActionType, struct FScriptDelegate OnUseCompleteDelegate, float UseTime, unsigned long bAutoStart );
	void eventSpawnUseMiniGame ( struct FString UseText, struct FString IconRef, unsigned char MiniGameActionType, struct FScriptDelegate OnUseCompleteDelegate, float UseTime, unsigned long bAutoStart );
	void eventKillWeakPointMiniGame ( );
	void eventSpawnWeakPointMiniGame ( struct FScriptDelegate OnUseCompleteDelegate );
	class UFoxHudMiniGameBase* SpawnMiniGame ( class UClass* NewMiniGameClass, class AFoxGameObject_Use* ForUseObject );
	void CloseRadialMenu ( );
	void eventRadialMenuSelect ( );
	void ei_CenterMouse ( );
	void SetupGearWidget ( );
	void OpenRadialMenu ( class UClass* RadialMenuClass, struct FName CloseKeyName, struct FName CloseAltKeyName, struct FName CloseControllerKeyName );
	void HideQuickLoadout ( );
	void ShowQuickLoadout ( );
	void eventClearMiniMission ( struct FMiniMission* Mission );
	void ei_MissionRemoved ( );
	void ei_MissionTransitionDone ( );
	void eventRemoveMission ( struct FMiniMission* MissionToRemove );
	void AddMiniMission ( struct FString MissionName, struct FString MissionDescription, struct FMiniMission* Mission );
	void eventAddObjectiveMission ( class AFoxObjectiveMarker* Objective );
	void AddPlayerMiniMission ( struct FString MissionName, class AFoxPRI* ForPRI, struct FMiniMission* Mission );
	void eventAddRivalMission ( class AFoxPRI* ForPRI );
	void eventAddWarlordMission ( class AFoxPRI* ForPRI );
	void ei_TickDone ( struct FString ObjectName );
	void ShowNextPassivePointNotification ( );
	void AddNewPassivePointNotification ( unsigned char EventType );
	void NotifyTeamChange ( );
	void ToggleEMPEffect ( unsigned long bToggleOn );
	void ei_hardsuitDamageIndicatorGone ( struct FString instancename );
	void SpawnIndirectDamageIndicator ( class UClass* FDT );
	void SpawnDamageIndicator ( float LocX, float LocY, unsigned long bFallDamage );
	void KillRespawnWidget ( );
	void AddRespawnWidget ( float RespawnTime );
	void BeginEventTimer ( float RemainingTime, struct FString EventName );
	void DisplayExperienceNotify ( struct FString ExperienceText );
	void eventEnemyThreatLevelChanged ( int NewThreatLevel );
	void eventNewEnemyThreat ( int ThreatLevel, class AFoxPRI* EnemyPRI );
	struct FString GetThreatStringFromLevel ( unsigned char ThreatLevel );
	void eventUpdateMyThreatString ( );
	void eventMyThreatLevelChanged ( int NewThreatLevel );
	void ei_myThreatTransitionDone ( );
	void ei_HighThreatTransitionDone ( );
	void ei_HighThreatDone ( );
	void ei_PlayLowHealth_Noise ( int SoundIndex );
	void ei_UpdateDetailDone ( );
	void ei_UpdateNotificationDone ( );
	void ei_SocialUpdateReady ( );
	void ei_ComboDone ( );
	void ei_ExperienceReady ( );
	void ei_KillBoxReady ( );
	void ei_statusUpdateNotificationDone ( );
	void ei_killedPlayerInfoDone ( );
	void ei_KillNotificationDone ( );
	int GetCombatPoints ( );
	int GetDepotTier ( );
	void NotifyGameplayMessageComplete ( );
	void NotifyChatMessageComplete ( );
	void NotifyComboMessageComplete ( );
	void NotifyExperienceMessageComplete ( );
	void NotifyCombatLogComplete ( );
	void NotifyKillBoxMessageComplete ( );
	void NotifyStatusUpdateComplete ( );
	void NotifyKillPlayerInfoComplete ( );
	void NotifyLocalKillMessageComplete ( );
	void eventAddMyPlayerStatusUpdate ( struct FString NewUpdateText );
	void PumpGameplayUpdateMessage ( struct FString NewGameplayUpdateMessage, float DispTime );
	void PumpSocialMessage ( struct FString NewSocialMessage );
	void PumpChatMessage ( struct FString NewChatMessage, float DispTime );
	void PumpExperienceNotification ( struct FString NewNotification, int Experience );
	void PumpKillBoxNotification ( struct FString NewKillMsg );
	void PumpCombatLog ( struct FString InstigatorName, struct FString DetailText );
	void PumpKillSpreeMessage ( struct FString NewSpreeMsg );
	void eventPumpStatusUpdateNotification ( struct FString NewMessage );
	void PumpPlayerKilledInfo ( struct FString PlayerName, TArray< struct FString > KilledPlayerInfo, unsigned long bHeadShot );
	void PumpLocalKillMessage ( struct FString NewKillMsg, struct FString VictimName );
	void NotifyKilled ( class AFoxPRI* KillerPRI, unsigned char NumKillsOnMe, unsigned char KillerStreakCount, unsigned long bVIP, unsigned long bThreat, struct FFoxWeaponConfigInfo WeaponConfigInfo, int Health, int HealthMax, class UClass* DamageType );
	void NotifyWeaponChange ( class AFoxWeapon* NewWeapon );
	void ToggleHRV ( unsigned long bTurnOn );
	void ShowGameModeDetail ( );
	void SetupGameTypeWidget ( );
	void ResetCachedVars ( );
	void SetHudColor ( );
	void UpdateScoreBoard ( float ElapsedTime );
	void eventToggleScoreboardStats ( unsigned long bShow );
	void ei_ScoreboardOutDone ( );
	void HideScoreBoard ( unsigned long bForce );
	void ShowScoreBoard ( );
	void ToggleScoreBoard ( unsigned long bShow );
	void eventUpdateCappedNodes ( );
	void CreateNodeScoreWidget ( );
	void eventClearHardSuitLowHealth ( );
	void eventStartHardSuitLowHealth ( );
	void NotifyMenuClosed ( );
	void TransitionHudIn ( );
	void CleanUpGameTypeWidget ( );
	void CleanupHudUI ( );
	void DestroyHardSuitReticleObject ( );
	void ShutdownHardSuitHud ( );
	float GetBattleModeProgress ( float BattleModeTimer, unsigned char State );
	void eventSetupBattleModeDisplay ( );
	void SetHudVis ( unsigned long bShow );
	void InitializeHardSuitHud ( int HudMode );
	void OnFadeOutSpectatorKillerWidget ( );
	void eventUpdateRespawnWidget ( );
	void eventFocusOnBeacon ( );
	void eventFocusOnRevive ( );
	void eventFocusOnRespawn ( );
	struct FKillerWeaponInfo BuildWeaponInfo ( struct FFoxWeaponConfigInfo WeaponConfigInfo, class UClass* DamageType );
	struct FKillerHealthInfo BuildHealthInfo ( int Health, int HealthMax );
	void HideSpectatingPlayerInfo ( );
	void SetupSpectatorInfoForPlayer ( class AFoxPRI* PRI, struct FFoxWeaponConfigInfo WeaponConfigInfo, int Health, int HealthMax );
	void InitializeSpectatorHud ( class AFoxPRI* KillerPRI, unsigned char NumKillsOnMe, unsigned char KillerStreakCount, unsigned long bVIP, unsigned long bThreat, struct FFoxWeaponConfigInfo WeaponConfigInfo, int Health, int HealthMax, class UClass* DamageType );
	void ReInitializeMainHud ( );
	void InitializeHud ( );
	void OnUseMiniGameComplete ( );
};

UClass* UFoxHudUI::pClassPointer = NULL;

// Class FoxGame.FoxHudUI_TDM
// 0x0000 (0x0C50 - 0x0C50)
class UFoxHudUI_TDM : public UFoxHudUI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1795 ];

		return pClassPointer;
	};

	void AddGameTypeWidget ( struct FString GameType, int NumberOfCaptureNodes, struct FString FriendlyTeamName, struct FString EnemyTeamName, struct FString GameTypeDisplayName );
	void SetupGameTypeWidget ( );
};

UClass* UFoxHudUI_TDM::pClassPointer = NULL;

// Class FoxGame.FoxHudUI_CP
// 0x003C (0x0C8C - 0x0C50)
class UFoxHudUI_CP : public UFoxHudUI_TDM
{
public:
	struct FString                                     LocStringInitializeBeacon;                        		// 0x0C50 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringContestingBeacon;                        		// 0x0C5C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringCapturedBeacon;                          		// 0x0C68 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringOpposingTeamHacked;                      		// 0x0C74 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringTeamHacked;                              		// 0x0C80 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1796 ];

		return pClassPointer;
	};

	void SetupGameTypeWidget ( );
	void ResetCachedVars ( );
};

UClass* UFoxHudUI_CP::pClassPointer = NULL;

// Class FoxGame.FoxHudUI_EOTS
// 0x0004 (0x0C90 - 0x0C8C)
class UFoxHudUI_EOTS : public UFoxHudUI_CP
{
public:
	unsigned long                                      bMyTeamHudWarningOn : 1;                          		// 0x0C8C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bOtherTeamHudWarningOn : 1;                       		// 0x0C8C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1797 ];

		return pClassPointer;
	};

};

UClass* UFoxHudUI_EOTS::pClassPointer = NULL;

// Class FoxGame.FoxHudUI_CTDM
// 0x0000 (0x0C50 - 0x0C50)
class UFoxHudUI_CTDM : public UFoxHudUI_TDM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1798 ];

		return pClassPointer;
	};

};

UClass* UFoxHudUI_CTDM::pClassPointer = NULL;

// Class FoxGame.FoxHudUI_CTF
// 0x0004 (0x0C54 - 0x0C50)
class UFoxHudUI_CTF : public UFoxHudUI_TDM
{
public:
	unsigned long                                      bMyTeamHudWarningOn : 1;                          		// 0x0C50 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bOtherTeamHudWarningOn : 1;                       		// 0x0C50 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1799 ];

		return pClassPointer;
	};

	void SetupGameTypeWidget ( );
};

UClass* UFoxHudUI_CTF::pClassPointer = NULL;

// Class FoxGame.FoxHUDUI_PL
// 0x005C (0x0CAC - 0x0C50)
class UFoxHUDUI_PL : public UFoxHudUI_TDM
{
public:
	struct FString                                     LocOffenseTeamName;                               		// 0x0C50 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocDefenseTeamName;                               		// 0x0C5C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           GameplayDetailEscort;                             		// 0x0C68 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           GameplayDetailDefense;                            		// 0x0C74 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PayloadName;                                      		// 0x0C80 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UFoxProgressBarWidget*                       PayloadBarWidget;                                 		// 0x0C8C (0x0004) [0x0000000000000000]              
	struct FProgressBarStats                           CurrentBarStats;                                  		// 0x0C90 (0x0018) [0x0000000000000000]              
	int                                                CachedControlPointIndex;                          		// 0x0CA8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1800 ];

		return pClassPointer;
	};

	void ShowGameModeDetail ( );
	void eventUpdateProgressBar ( );
	bool eventIsOnAttackingTeam ( );
	void UpdateProgressBarDirection ( int Direction );
	void UpdateProgressBarPosition ( float Progress );
	void CleanUpGameTypeWidget ( );
	void SetupGameTypeWidget ( );
};

UClass* UFoxHUDUI_PL::pClassPointer = NULL;

// Class FoxGame.FoxHudUI_TKOTH
// 0x0048 (0x0C98 - 0x0C50)
class UFoxHudUI_TKOTH : public UFoxHudUI_TDM
{
public:
	struct FString                                     LocStringInitializeBeacon;                        		// 0x0C50 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringContestingBeacon;                        		// 0x0C5C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringCapturedBeacon;                          		// 0x0C68 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringOpposingTeamHacked;                      		// 0x0C74 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringTeamHacked;                              		// 0x0C80 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              LastTeam1CaptureRatio;                            		// 0x0C8C (0x0004) [0x0000000000000000]              
	float                                              LastTeam2CaptureRatio;                            		// 0x0C90 (0x0004) [0x0000000000000000]              
	class AFoxGameObject_HillPoint*                    uiCachedActiveHillPoint;                          		// 0x0C94 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1801 ];

		return pClassPointer;
	};

	void SetupGameTypeWidget ( );
};

UClass* UFoxHudUI_TKOTH::pClassPointer = NULL;

// Class FoxGame.FoxLoadoutChangedWidget
// 0x001C (0x0094 - 0x0078)
class UFoxLoadoutChangedWidget : public UGFxObject
{
public:
	struct FString                                     LocStringLoadoutSelected;                         		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringLoadoutExplanation;                      		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class AFoxPC*                                      PCOwner;                                          		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1802 ];

		return pClassPointer;
	};

	void as_TransitionOut ( );
	void as_SetLabels ( TArray< struct FString > Labels );
	void RemovedLoadoutChanged ( );
	struct FString BuildLoadoutSelectedString ( );
	void Initialize ( );
};

UClass* UFoxLoadoutChangedWidget::pClassPointer = NULL;

// Class FoxGame.FoxProgressBarWidget
// 0x0038 (0x00B0 - 0x0078)
class UFoxProgressBarWidget : public UGFxObject
{
public:
	int                                                XPos;                                             		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                YPos;                                             		// 0x007C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     BlueColor;                                        		// 0x0080 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     OrangeColor;                                      		// 0x008C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     NeutralColor;                                     		// 0x0098 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     BlackColor;                                       		// 0x00A4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1803 ];

		return pClassPointer;
	};

	void FlashMover ( );
	void SetControlPointColor ( int Index, struct FString NewColor );
	void SetNumControlPoints ( int NumCP );
	void ShowMoverArrow ( unsigned long bShouldShow );
	void SetMoverDirection ( int Direction );
	void SetMoverProgress ( float Progress );
	void SetRightTeamProgress ( float Progress );
	void SetLeftTeamProgress ( float Progress );
	void SetMoverOwnerColor ( struct FString NewColor );
	void SetRightTeamColor ( struct FString NewColor );
	void SetLeftTeamColor ( struct FString NewColor );
	void Initialize ( );
};

UClass* UFoxProgressBarWidget::pClassPointer = NULL;

// Class FoxGame.FoxQuickLoadoutWidget
// 0x0020 (0x0098 - 0x0078)
class UFoxQuickLoadoutWidget : public UGFxObject
{
public:
	struct FVector2D                                   Placement;                                        		// 0x0078 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              Delay;                                            		// 0x0080 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	class AFoxPC*                                      PCOwner;                                          		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     LocStringTitle;                                   		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                NumProfileLoadoutSlots;                           		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1804 ];

		return pClassPointer;
	};

	void as_FadeIn ( );
	void as_SetupLabels ( TArray< struct FString > LoadoutNames, TArray< struct FString > LoadoutBindings );
	void as_HighlightLoadout ( int LoadoutIndex );
	void HighlightSelectedLoadout ( );
	void SetQuickLoadout ( );
	void eventSelectNewQuickLoadout ( int NewIndex );
	void Initialize ( );
};

UClass* UFoxQuickLoadoutWidget::pClassPointer = NULL;

// Class FoxGame.FoxRadialMenuBase
// 0x002C (0x00A4 - 0x0078)
class UFoxRadialMenuBase : public UGFxObject
{
public:
	struct FString                                     symbolname;                                       		// 0x0078 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class AFoxPC*                                      PCOwner;                                          		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bTransitioningOut : 1;                            		// 0x0088 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bPushHudBackWhenOpen : 1;                         		// 0x0088 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	struct FName                                       CloseKeyReleaseName;                              		// 0x008C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       CloseAltKeyReleaseName;                           		// 0x0094 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       CloseControllerKeyReleaseName;                    		// 0x009C (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1805 ];

		return pClassPointer;
	};

	void as_removeScene ( );
	void eventCycleMenu ( unsigned long bClockWise );
	void as_SetFocusToIndex ( int FocusIndex );
	void as_setItems ( TArray< struct FRadialMenuItem > RadialMenuItems );
	void ei_SelectedItem ( struct FString FocusedItemIndexString );
	void TransitionOut ( );
	void OnSelectItem ( int NewItemIndex );
	void Initialize ( );
};

UClass* UFoxRadialMenuBase::pClassPointer = NULL;

// Class FoxGame.FoxRadialMenuLoadout
// 0x0014 (0x00B8 - 0x00A4)
class UFoxRadialMenuLoadout : public UFoxRadialMenuBase
{
public:
	int                                                NumProfileLoadoutSlots;                           		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bSelectedIndexOverride : 1;                       		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FString                                     LocStringLoadout;                                 		// 0x00AC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1806 ];

		return pClassPointer;
	};

	void as_setLoadoutItems ( TArray< struct FLoadoutRadialMenuItem > RadialMenuItems );
	void OnSelectItem ( int NewItemIndex );
	void Initialize ( );
};

UClass* UFoxRadialMenuLoadout::pClassPointer = NULL;

// Class FoxGame.FoxRadialMenuTaunt
// 0x000C (0x00B0 - 0x00A4)
class UFoxRadialMenuTaunt : public UFoxRadialMenuBase
{
public:
	TArray< unsigned char >                            AvailableTaunts;                                  		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1807 ];

		return pClassPointer;
	};

	void OnSelectItem ( int NewItemIndex );
	void Initialize ( );
};

UClass* UFoxRadialMenuTaunt::pClassPointer = NULL;

// Class FoxGame.FoxSocialUpdateWidget
// 0x0020 (0x0098 - 0x0078)
class UFoxSocialUpdateWidget : public UGFxObject
{
public:
	TArray< struct FString >                           QueuedMessages;                                   		// 0x0078 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AFoxPC*                                      PCOwner;                                          		// 0x0084 (0x0004) [0x0000000000000000]              
	unsigned char                                      WidgetState;                                      		// 0x0088 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              FadeOutTime;                                      		// 0x008C (0x0004) [0x0000000000000000]              
	float                                              MessageVisibleTime;                               		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StateElapsedTime;                                 		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1808 ];

		return pClassPointer;
	};

	void eventFadedOut ( );
	void eventShowMessageNow ( struct FString Message );
	void AddNewMessage ( struct FString Message );
	void eventSetOpacity ( float NewOpacityVal );
	void Initialize ( );
};

UClass* UFoxSocialUpdateWidget::pClassPointer = NULL;

// Class FoxGame.FoxSeqAct_ActorFactorySquadEx
// 0x0000 (0x0144 - 0x0144)
class UFoxSeqAct_ActorFactorySquadEx : public USeqAct_ActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1809 ];

		return pClassPointer;
	};

};

UClass* UFoxSeqAct_ActorFactorySquadEx::pClassPointer = NULL;

// Class FoxGame.FoxSeqAct_HUD_Base
// 0x0004 (0x00F4 - 0x00F0)
class UFoxSeqAct_HUD_Base : public USequenceAction
{
public:
	float                                              DisplayTime;                                      		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1810 ];

		return pClassPointer;
	};

	class UFoxUI* GetPlayerUI ( class UObject* InTarget );
	void eventSpawnUIElement ( class UFoxUI* DynamicUI );
	void eventActivated ( );
};

UClass* UFoxSeqAct_HUD_Base::pClassPointer = NULL;

// Class FoxGame.FoxSeqAct_HUD_DisplayDialogue
// 0x0040 (0x0134 - 0x00F4)
class UFoxSeqAct_HUD_DisplayDialogue : public UFoxSeqAct_HUD_Base
{
public:
	struct FString                                     TitleLabel;                                       		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DescriptionLabel;                                 		// 0x0100 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     UpdateLabel;                                      		// 0x010C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SectionName;                                      		// 0x0118 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     PackageName;                                      		// 0x0124 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FColor                                      TagColor;                                         		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1811 ];

		return pClassPointer;
	};

	void eventSpawnUIElement ( class UFoxUI* DynamicUI );
	struct FString MarkupFontColor ( struct FString Text, struct FColor BaseColor );
	struct FString ColorToHexString ( struct FColor BaseColor );
};

UClass* UFoxSeqAct_HUD_DisplayDialogue::pClassPointer = NULL;

// Class FoxGame.FoxMenuUI
// 0x01A8 (0x01E4 - 0x003C)
class UFoxMenuUI : public UObject
{
public:
	class UFoxSettingsUIBase*                          Settings;                                         		// 0x003C (0x0004) [0x0000000000000000]              
	struct FString                                     SettingsOutTransition;                            		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UFoxStoreUIExtended*                         StoreExtended;                                    		// 0x004C (0x0004) [0x0000000000000000]              
	class UFoxLobbyUIBase*                             Lobby;                                            		// 0x0050 (0x0004) [0x0000000000000000]              
	class UFoxArmoryUI*                                ArmoryInfo;                                       		// 0x0054 (0x0004) [0x0000000000000000]              
	class UFoxAfterActionUI*                           AAR;                                              		// 0x0058 (0x0004) [0x0000000000000000]              
	class UFoxLoginUI*                                 Login;                                            		// 0x005C (0x0004) [0x0000000000000000]              
	class UFoxSkillTreeUI*                             SkillTree;                                        		// 0x0060 (0x0004) [0x0000000000000000]              
	class UFoxServerBrowserUI*                         ServerBrowser;                                    		// 0x0064 (0x0004) [0x0000000000000000]              
	class UFoxSocialUI*                                SocialTab;                                        		// 0x0068 (0x0004) [0x0000000000000000]              
	class UFoxMatchInfoWidget*                         RankedQueueWidget;                                		// 0x006C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  LevelLoadingBar;                                  		// 0x0070 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  MailButtonObject;                                 		// 0x0074 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMailButtonFlashing : 1;                          		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bRequiresProfileSave : 1;                         		// 0x0078 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bPlayerWidgetCreated : 1;                         		// 0x0078 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bWalletWidgetCreated : 1;                         		// 0x0078 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bMenuMusicOn : 1;                                 		// 0x0078 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bWantsPreviewCharacter : 1;                       		// 0x0078 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	class UFoxReportBaseUI*                            ReportUI;                                         		// 0x007C (0x0004) [0x0000000000000000]              
	class UFoxUIInventoryCountWidget*                  InventoryCountWidget;                             		// 0x0080 (0x0004) [0x0000000000000000]              
	class UFoxGameSearchQuickJoin*                     GameSearchQuickJoin;                              		// 0x0084 (0x0004) [0x0000000000000000]              
	class UFoxGameSearchServerBrowser*                 GameSearchServerBrowser;                          		// 0x0088 (0x0004) [0x0000000000000000]              
	class UFoxGameSearchRanked*                        GameSearchRanked;                                 		// 0x008C (0x0004) [0x0000000000000000]              
	class UFoxGameSearchRanked*                        PartyGameSearchRanked;                            		// 0x0090 (0x0004) [0x0000000000000000]              
	TArray< struct FNewsItemInfo >                     NewsTickerItems;                                  		// 0x0094 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                EventWidgetUnlockID;                              		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                EventWidgetCount;                                 		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                PlayerWidgetLastRank;                             		// 0x00A8 (0x0004) [0x0000000000000000]              
	struct FProfileEmblemInfo                          PlayerWidgetLastEmblem;                           		// 0x00AC (0x0018) [0x0000000000000000]              
	int                                                PlayerWidgetLastTitle;                            		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                PlayerWidgetLastExp;                              		// 0x00C8 (0x0004) [0x0000000000000000]              
	struct FString                                     PlayerWidgetLastName;                             		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PlayerWidgetLastClanTag;                          		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PlayerWidgetLastUnreadMailNum;                    		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                PlayerWidgetLastFriendsOnline;                    		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                PlayerWidgetLastNumFriends;                       		// 0x00EC (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           EventOfferTags;                                   		// 0x00F0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                WalletLastZen;                                    		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                WalletLastGP;                                     		// 0x0100 (0x0004) [0x0000000000000000]              
	class UAkBank*                                     MainMenuAudioBank;                                		// 0x0104 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    MenuMusicStart;                                   		// 0x0108 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    MenuMusicStop;                                    		// 0x010C (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    MenuChangeAkEvent;                                		// 0x0110 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    ButtonPressAkEvent;                               		// 0x0114 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    MouseOverAkEvent;                                 		// 0x0118 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    RankedMatchReadyEvent;                            		// 0x011C (0x0004) [0x0000000000000000]              
	class UAkBank*                                     RankedMatchLobbyBank;                             		// 0x0120 (0x0004) [0x0000000000000000]              
	struct FString                                     LocalizationSectionName;                          		// 0x0124 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ExpiredItemsTitle;                                		// 0x0130 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewItemsTitle;                                    		// 0x013C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringExtWebPageTitle;                         		// 0x0148 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringExtWebPageMessage;                       		// 0x0154 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FButtonContainerWidget                      ChildMenuButtonContainer;                         		// 0x0160 (0x0028) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FButtonContainerWidget                      BaseMenuButtonContainer;                          		// 0x0188 (0x0028) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector2D                                   LoadingBarPosition;                               		// 0x01B0 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FString                                     PendingWebPageURL;                                		// 0x01B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AFoxCustomPlayerActor*                       PlayerPreviewActor;                               		// 0x01C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      BeginGamePendingViewTarget;                       		// 0x01C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __ProcessComplete__Delegate;                      		// 0x01CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __PendingWebPagePostShow__Delegate;               		// 0x01D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1812 ];

		return pClassPointer;
	};

	void CheckVideoDriver ( int PosX, int PosY );
	void ui_checkVideoDrivers ( int PosX, int PosY );
	void ei_removeStoreBox ( );
	void ei_addStoreBox ( );
	void ei_TechDemoTesselationChanged ( struct FString NewValueString );
	void ei_TechDemoWidgetChange ( struct FString WidgetIndex, struct FString NewIndex );
	void as_openSocialMenu ( int Index );
	void ui_openSocialMenu ( struct FString IndexStr );
	void as_addNewsPanel ( int XPos, int YPos, struct FString HeaderText, struct FString newsText, struct FString SubHeader, unsigned long bMakePanel );
	void ui_RemoveCharacterPreview ( );
	void ui_CharacterOut ( );
	void ei_CharacterIn ( );
	void SpawnPreviewCharacter ( unsigned char StartingPlacement, unsigned char EndingPlacement, float InterpolationTime );
	void UpdatePreviewCharacter ( );
	void ui_AddCharacterPreview ( );
	void CompleteLogout ( unsigned long confirmed );
	void ei_Logout ( struct FString ButtonID );
	void OnLostFocusPause ( unsigned long bEnable );
	void ei_StartSearch ( struct FString Param );
	struct FString eventLocalizeMenuString ( struct FString Key, struct FString SectionName );
	struct FString ei_LocalizeMenuString ( struct FString Key );
	void CloseMenuUI ( );
	void ui_KillPauseMenu ( );
	void ei_ExitMatchNow ( );
	void CompleteQuitGame ( unsigned long bQuit );
	void ei_QuitGame ( struct FString ButtonID );
	void CompleteQuickMatchExit ( unsigned long bQuit );
	void ei_QuitMatch ( struct FString ButtonID );
	void ClearMenuDelegates ( );
	void SetMenuDelegates ( );
	void Cleanup ( unsigned long bFullCleanup );
	void ei_PlayClick ( );
	void ei_PlayRollOut ( );
	void ei_PlayRollover ( );
	void OnDelayedUnloadIntermissionWaitingMusic ( );
	void OnDelayedUnloadIntermissionFullMusic ( );
	void ui_StopMainMenuMusic ( );
	void ui_StartMainMenuMusic ( );
	void ui_SetMatchInfoWidgetVisibility ( unsigned long bShow );
	void DestroyMatchInfoWidget ( );
	class UFoxMatchInfoWidget* CreateMatchInfoWidget ( struct FString Title, struct FString GameMode, int MaxPlayers );
	void ei_OnEnterRankedMatchClicked ( struct FString Arg );
	void RankedMatchReady ( );
	void ei_OnLeaveRankedQueueButtonClicked ( struct FString Arg );
	void JoinRankedMatchQueue ( int QueuePlacement, int EstimatedWaitSeconds );
	void ui_TryAddRankedMatchQueue ( );
	bool HandleGameJoinFailed ( struct FString Message );
	void CloseServerBrowserSearch ( );
	class UFoxGameSearchServerBrowser* CreateServerBrowserSearch ( int SearchIndex );
	void OnPartyGameSearchComplete ( unsigned long bSuccess );
	void ei_RankedMatch ( );
	void ei_QuickMatch ( );
	void ui_updateSettingsOutTransition ( struct FString OutTransition );
	void SaveSettings ( );
	void ei_CloseSettings ( unsigned long bForceClose, unsigned long bSkipSave );
	void OpenSettingsPage ( class UClass* SettingsUIClass );
	void ui_OpenKeyBindingSettings ( );
	void ui_OpenControlSettings ( );
	void ui_OpenGameplaySettings ( );
	void ui_OpenVideoSettings ( );
	void ui_OpenAudioSettings ( );
	void ui_openAccountSettings ( );
	void ui_openNextSettingsPage ( );
	void OnPartyQueueJoin ( );
	void OnPartyInviteDialogResponse ( unsigned long bJoin );
	void OpenPartyInviteDialogBox ( struct FString InviterName );
	void DelayedOpenPartyInvite ( );
	void CheckPartyInvitePending ( );
	void OnInviteToPartyCallback ( unsigned long bSuccessful, unsigned char ResponseCode );
	void OnGetUniqueIdOfPlayerForPartyComplete ( unsigned long bSuccess, struct FUniqueNetId ResultId );
	void InvitePlayerNameToParty ( struct FString PlayerName );
	void InvitePlayerToParty ( struct FUniqueNetId InvitePlayerId );
	void OnAddFriendByNameFinished ( unsigned long bWasSuccessful, unsigned char ResponseCode, struct FOnlineFriend FriendItem );
	void SearchForFriendByName ( struct FString PlayerName, unsigned long ShowDialog );
	void CloseLogin ( );
	void ui_SetupLogin ( );
	void CloseAAR ( );
	void OnDelayedSetMenuBGForeground ( );
	void ui_ShowAAR ( );
	void CloseLevelLoadingBar ( );
	void ShowLevelLoadingBar ( );
	void ui_closeSocialTab ( );
	void ui_openSocialTab ( );
	void ui_toggleSocialTab ( );
	void ui_closeServerBrowser ( );
	void ui_openServerBrowser ( );
	void ui_CloseSkillTree ( );
	void ui_OpenSkillTree ( );
	void ui_closeStore ( );
	void ui_openStore ( struct FString InitCmdGroup, struct FString BackTransition );
	void EnableWorldRendering ( );
	void DisableWorldRendering ( );
	void SetMenuBGPostProcess ( );
	void SetMenuBGForeground ( );
	void ei_closeArmory ( );
	void SaveAndCloseLobbyCustomization ( );
	void ui_setupArmoryInfo ( );
	void ui_preloadArmory ( struct FString PendingCommandGroup, struct FString BackTransition );
	void ui_OpenCustomizationMenu ( );
	void CloseLobby ( );
	void ui_SettingsToPreGame ( );
	void ui_StoreToPreGame ( );
	void ui_ArmoryToPreGame ( );
	void OpenLobby ( class UClass* LobbyClass );
	void ui_ShowPauseLobby ( );
	void ui_ShowPreGameLobby ( );
	void ui_ShowIntermissionLobby ( );
	void as_updateBackButton ( struct FString ToolTip, struct FString Transition, struct FString extInterfaceFunc, struct FString extInterfaceArg, struct FString extInteraceMiscFunc, struct FString ButtonID );
	void as_addBackButton ( int xposition, int yposition, struct FString Label );
	void as_AddHorizDividerRight ( int XPos, int YPos, struct FString Label );
	void as_addHorizDivider ( int XPos, int YPos, struct FString Label );
	struct FString eventas_addToggleButton ( struct FString ButtonLabel, struct FString ButtonTooltip, TArray< struct FString > DataArray, int StartingIndex, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString extRolloverInterfaceFunc, struct FString extRolloverInterfaceArg );
	void eventas_addEmptyContainer ( struct FString instName, int xposition, int yposition, int PerspFOV, int YRotation, int ZPos, int Opacity );
	void eventas_setTitle ( );
	void eventas_addTabButton ( struct FString btnLabel, struct FString Icon, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString extRolloverInterfaceFunc, struct FString extRolloverInterfaceArg, struct FString Transition );
	struct FString eventas_addOptionStepper ( struct FString btnLabel, struct FString btnTooltip, TArray< struct FString > Data, int StartingIndex, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString extRolloverInterfaceFunc, struct FString extRolloverInterfaceArg, struct FString Transition );
	struct FString eventas_addNumberStepper ( struct FString btnLabel, struct FString btnTooltip, struct FString Icon, int Min, int Max, int Value, int StepSize, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString extRolloverInterfaceFunc, struct FString extRolloverInterfaceArg, struct FString Transition );
	struct FString eventas_addSlider ( struct FString Label, struct FString ToolTip, float MinVal, float MaxVal, float interval, float StartingVal, struct FString ExternalInterfaceFunc );
	void as_addLoginButton ( struct FString ButtonLabel, struct FString ButtonTooltip, unsigned long bIsLoginButton, struct FString OnClickFunctionName, struct FString OnClickArg );
	void eventas_addSubButton ( struct FString btnLabel, struct FString btnTooltip, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString extRolloverInterfaceFunc, struct FString extRolloverInterfaceArg, struct FString Transition );
	struct FString as_InternalAddButton ( struct FString btnLabel, struct FString btnTooltip, struct FString Icon, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString extRolloverInterfaceFunc, struct FString extRolloverInterfaceArg, struct FString Transition, unsigned long bDisabled, TArray< int > ColorOffset );
	struct FString eventas_addButton ( struct FString btnLabel, struct FString btnTooltip, struct FString Icon, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString extRolloverInterfaceFunc, struct FString extRolloverInterfaceArg, struct FString Transition, unsigned long bDisabled, struct FString ColorType );
	struct FString ui_addButton ( struct FString btnLabel, struct FString btnTooltip, struct FString Icon, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString extRolloverInterfaceFunc, struct FString extRolloverInterfaceArg, struct FString Transition, unsigned long bDisabled, struct FString ColorType, struct FString ButtonID );
	void eventFlashMailButton ( int MailCount );
	void ui_addMailButton ( struct FString btnLabel, struct FString btnTooltip, struct FString Icon, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString extRolloverInterfaceFunc, struct FString extRolloverInterfaceArg, struct FString Transition, unsigned long bDisabled, struct FString ColorType, struct FString ButtonID );
	void eventas_updateSocialWidget ( int numFriendsNew, int numMaxFriendsNew );
	void eventas_addSocialWidget ( int numFriends, int numMaxFriends, int xposition, int yposition );
	void eventas_updateNewsText ( int Index, struct FString Text );
	void eventas_addNewsFeedWidget ( int xposition, int yposition, struct FString extScrollDoneInterfaceFunc, TArray< struct FString > newsText );
	void eventas_addTitleWidget ( struct FString Title, struct FString SubTitle, struct FString Icon, int xposition, int yposition );
	void eventas_addSplashWidget ( int xposition, int yposition, int PerspFOV, int YRotation, int Opacity, struct FString loginText, struct FString extClickInterfaceFunc, struct FString extClickInterfaceArg );
	void eventas_addTabWidget ( int xposition, int yposition, int PerspFOV, int YRotation, int ZPos, int Opacity, int WidgetSpacing, int MaxListWidth, int MaxListHeight, unsigned long verticalAlign );
	void eventas_addButtonContainer ( struct FString instName, int xposition, int yposition, int PerspFOV, int YRotation, int ZPos, int Opacity, struct FString Title, struct FString SubTitle, struct FString Icon, int WidgetSpacing, int MaxListWidth, int MaxListHeight, unsigned long verticalAlign, struct FString CloseInterfaceFunc );
	void eventas_placeStagePanel ( struct FString instName, int xposition, int yposition );
	void eventas_showInventoryPanel ( int XPos, int YPos, struct FString HeaderText, struct FString InventoryText );
	void eventei_ShowInventory ( );
	void eventas_updateEventWidget ( struct FString IconRef, int Count );
	void eventas_UpdatePartyCount ( int NumPartyMembers );
	void eventas_updateFriendCount ( int FriendsOnline, int TotalFriends );
	void eventas_updateUnreadMail ( int NumUnread );
	void eventas_updateMyPlayerWidgetClan ( struct FString PlayerClan, int ClanMembersOnline );
	void eventas_updateMyPlayerWidgeTitle ( struct FString PlayerTitle );
	void eventas_updateMyPlayerWidgetName ( struct FString PlayerName );
	void eventas_updateMyPlayerWidgetExp ( int RankProgress, int Experience );
	void eventas_updateMyPlayerWidgetRank ( struct FString RankNum, struct FEmblemPanelEntry Emblem );
	void eventas_addMyPlayerWidget ( struct FString rankString, struct FString RankNum, float RankProgress, int Experience, struct FEmblemPanelEntry Emblem, struct FString PlayerName, struct FString PlayerTitle, struct FString PlayerClan, int XPos, int YPos, struct FString ClickFunc, struct FString ClickArg, struct FString LocHideString );
	void ClearCachedPlayerWidget ( );
	void as_addAdditionalButtonContainerWithRoot ( struct FString instName, int xposition, int yposition, int PerspFOV, int YRotation, int ZPos, int Opacity, struct FString Title, struct FString SubTitle, int WidgetSpacing, int MaxListWidth, int MaxListHeight, unsigned long verticalAlign, struct FString RootSceneName );
	void as_addAdditionalButtonContainer ( struct FString instName, int xposition, int yposition, int PerspFOV, int YRotation, int ZPos, int Opacity, struct FString Title, struct FString SubTitle, int WidgetSpacing, int MaxListWidth, int MaxListHeight, unsigned long verticalAlign );
	void as_addLegal ( );
	void eventui_addChildButtonContainer ( struct FString Title, struct FString SubTitle, struct FString Icon, struct FString CloseInterfaceFunc );
	void eventui_addBaseButtonContainer ( struct FString Title, struct FString SubTitle, struct FString Icon, struct FString CloseInterfaceFunc );
	void ui_generateMyPlayerWidget ( struct FString rankString, int xposition, int yposition );
	void ui_generateNewsFeedWidget ( );
	struct FString as_AddReportDialogPanel ( );
	void CloseReportUIDialog ( );
	void ShowReportPlayerDialog ( struct FUniqueNetId ForAccountID );
	class UFoxDialogBoxBase* ShowPurchaseFailure ( unsigned char InPurchaseResult );
	void ShowUpdatedItems ( TArray< struct FInventoryMetaData > UpdatedItems );
	void ShowUpdatedItemsComplete ( unsigned long bResult );
	void ui_CheckItems ( );
	void CheckItems ( unsigned long bResult );
	struct FNewsItemEntry GetNewsEntry ( struct FMailMetaData MailData );
	void ui_CheckNews ( );
	void CheckNews ( unsigned long bResult, unsigned long bEquip );
	bool ui_CheckUpdatedItems ( );
	void ei_AddFunds ( );
	void ei_OnSupportButtonClicked ( );
	void ei_OnForumsButtonClicked ( );
	void ei_OnRegisterButtonClicked ( );
	void ei_sendLink ( struct FString Link );
	void ShowExpiredItemComplete ( unsigned long bAccepted );
	void ShowExpiredItems ( TArray< struct FInventoryMetaData > ExpiredItems );
	void FilterInvalidItemsForRenew ( TArray< struct FInventoryMetaData >* Items );
	void ui_CheckExpiredItems ( );
	void ResetNewsItems ( );
	void AddNewsItem ( struct FString ItemText, int NumPlays );
	void ei_newsFeedFinished ( int Index );
	void OnShowWebPageConfirmed ( unsigned long bAccepted );
	bool ShouldShowWebPageWarning ( );
	void eventShowWebPage ( struct FString URL, struct FScriptDelegate PostShow );
	void as_updateWalletWidget ( int GPAmount, int ZenAmount );
	void eventUpdateWalletWidget ( int ZenAmount, int GPAmount );
	void ui_addWalletWidget ( int xposition, int yposition, struct FString ToolTip );
	void as_addWalletWidget ( int GPAmount, int ZPAmount, int xposition, int Tposition, struct FString ToolTip, struct FString ClickFuncName );
	void ui_addInventoryWidget ( int PosX, int PosY );
	struct FString as_addInventoryWidget ( int PosX, int PosY );
	void InitializeMenu ( );
	void PendingWebPagePostShow ( );
	void ProcessComplete ( );
};

UClass* UFoxMenuUI::pClassPointer = NULL;

// Class FoxGame.FoxAfterActionUI
// 0x0174 (0x01B0 - 0x003C)
class UFoxAfterActionUI : public UObject
{
public:
	struct FString                                     LocStringRank;                                    		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRankUp;                                  		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringMatchTotal;                              		// 0x0054 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSpoilsOfWar;                             		// 0x0060 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocUnlocked;                                      		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocReceived;                                      		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSeconds;                                 		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringGemHeader;                               		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringEventItemHeader;                         		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FVector2D                                   PlayerWidgetPos;                                  		// 0x00A8 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector2D                                   ExperienceGainWidgetPos;                          		// 0x00B0 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector2D                                   UnlockWidgetPos;                                  		// 0x00B8 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector2D                                   MyPlayerDockWidgetPos;                            		// 0x00C0 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector2D                                   SpoilsOfWarWidgetPos;                             		// 0x00C8 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector2D                                   GPEarnedWidgetPos;                                		// 0x00D0 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector2D                                   GemListWidgetPos;                                 		// 0x00D8 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                AARTotalTime;                                     		// 0x00E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                AARElapsedTime;                                   		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              RankPercentageProgressGain;                       		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                CurrentRankIndex;                                 		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                CurrentTitleUnlockID;                             		// 0x00F0 (0x0004) [0x0000000000000000]              
	struct FProfileEmblemInfo                          CurrentEmblem;                                    		// 0x00F4 (0x0018) [0x0000000000000000]              
	unsigned long                                      bExperienceApplied : 1;                           		// 0x010C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSpoilsOfWarShown : 1;                            		// 0x010C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bShouldLevelUp : 1;                               		// 0x010C (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                NewTotalExperience;                               		// 0x0110 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    XPCountBeginAkEvent;                              		// 0x0114 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    XPCountEndAkEvent;                                		// 0x0118 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    XPAnimateBeginAkEvent;                            		// 0x011C (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    XPAnimateEndAkEvent;                              		// 0x0120 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    GPCountBeginAkEvent;                              		// 0x0124 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    GPCountEndAkEvent;                                		// 0x0128 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    RankUpAkEvent;                                    		// 0x012C (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    UnlockAkEvent;                                    		// 0x0130 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    GPSlamAkEvent;                                    		// 0x0134 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    GPEarnAkEvent;                                    		// 0x0138 (0x0004) [0x0000000000000000]              
	TArray< struct FInventoryMetaData >                AwardedItems;                                     		// 0x013C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           OfferFilter;                                      		// 0x0148 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FAARBoostInfo >                     Boosts;                                           		// 0x0154 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelfXPUpsellBoostID;                              		// 0x0160 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                TeamXPUpsellBoostID;                              		// 0x0164 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                SelfGPUpsellBoostID;                              		// 0x0168 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                TeamGPUpsellBoostID;                              		// 0x016C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector2D                                   BoostPlacement;                                   		// 0x0170 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	TArray< struct FUnlockItem >                       UnlockQueue;                                      		// 0x0178 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPostGameExperienceGain >           PostGameExperienceList;                           		// 0x0184 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPostGameExperienceGain >           EndRoundExpGainQueue;                             		// 0x0190 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPostGameExperienceGain >           GPGainedQueue;                                    		// 0x019C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NumUnlockedItems;                                 		// 0x01A8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SkipButton;                                       		// 0x01AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1813 ];

		return pClassPointer;
	};

	void as_ShowEventItemList ( int XPos, int YPos, struct FString HeaderTitle, TArray< struct FAARDataNodeInfo > EventItemInfo );
	void as_ShowGemList ( int XPos, int YPos, struct FString HeaderTitle, TArray< struct FAARDataNodeInfo > DataNodeInfo );
	void as_AddBoost ( int XPos, int YPos, TArray< struct FAARBoostInfo > BoostInfo );
	struct FString as_AddSkipButton ( int XPos, int YPos, struct FString Label, struct FString ToolTip, struct FString IconRef, struct FString ExtFunc, struct FString ExtArg, struct FString TransitionType, unsigned long bDisabled );
	void as_showGPGained ( int XPos, int YPos, struct FString TotalGPEarned, struct FString GPCategory );
	void as_addUnlockHeader ( float XPos, float YPos, struct FString HeaderText );
	void as_dockPlayer ( float XPos, float YPos );
	void as_addUnlock ( float XPos, float YPos, struct FUnlockItem NewUnlockItemInfo );
	void as_applyToPlayerExp ( int TargetExp, float RankPercentageIncrease, unsigned long bLevelUp );
	void as_addExperienceGain ( float XPos, float YPos, int ExpGained, struct FString Category );
	void as_showMatchTotalString ( struct FString MatchTotalString );
	void as_showRankUpString ( struct FString RankUpString );
	void as_updateCurrentRank ( struct FString NewRankString, int NewRankNum );
	void as_showMyAAR ( struct FString CurrentRankName, struct FString RankNum, float RankProgress, int TotalExp, struct FEmblemPanelEntry Emblem, struct FString PlayerName, struct FString PlayerTitle, struct FString ClanName, float XPos, float YPos );
	void ui_AddSkipButton ( int XPos, int YPos, struct FString IconRef );
	void ShowEventItemList ( TArray< struct FAARDataNodeInfo > EventItemInfo );
	void ShowGemList ( TArray< struct FAARDataNodeInfo > DataNodeInfo );
	void ShowGPGained ( int InGPEarned, struct FString Category );
	void AddExperienceGain ( int ExpGained, struct FString Category );
	void ShowMatchTotalString ( );
	void ShowRankUpString ( );
	void ShowMyAAR ( struct FString RankNum, float RankProgress, int TotalExp, struct FEmblemPanelEntry Emblem, struct FString PlayerName, struct FString PlayerTitle, struct FString ClanName );
	void StopAllAARSFX ( );
	void DockPlayer ( );
	void UpdateSkipButtonTime ( int TimeRemaining );
	void ei_SkipClicked ( );
	void ei_PlayGPSlam ( );
	void ei_PlayGPTickStop ( );
	void ei_PlayGPTickStart ( );
	void BoostPurchaseComplete ( unsigned long bSuccess, unsigned long bEquip );
	void ei_BoostClicked ( struct FString ItemGuid );
	void ShowBoosts ( );
	void AddUnlockHeader ( );
	void AddUnlock ( struct FUnlockItem NewUnlockItemInfo );
	void AnimateExperienceBar ( );
	void PumpExperienceGainEvent ( struct FString ExpEventName, int ExpGained );
	void PumpUnlock ( struct FString UnlockIconRef, struct FString UnlockName, unsigned long bReceived, struct FString GemColor, struct FString GemDurability );
	bool GetUpdatedItems ( TArray< unsigned char > IncludedUnlockTypes, TArray< unsigned char > ExcludedUnlockTypes, TArray< struct FInventoryMetaData >* OutputItems );
	TArray< struct FGemInfo > GetUnlockedGems ( );
	bool GetUnlockedEventItems ( TArray< struct FInventoryMetaData >* OutItems, TArray< struct FString >* OfferTags );
	void TryGiveGem ( );
	void CloseTimerFinished ( );
	void ei_DockMyPlayerDone ( );
	void ei_AddGPReady ( );
	void ApplyGPEarned ( );
	void ei_ApplyToPlayerExpDone ( );
	void ei_AARUnlockReady ( );
	bool IsReadyForDock ( );
	void ei_newRankReached ( );
	void ei_AARExperienceReady ( );
	void ApplyPostMatchExpGains ( );
	void OnTransitionedIn ( );
	void OnAARTimerTick ( );
	void Initialize ( );
};

UClass* UFoxAfterActionUI::pClassPointer = NULL;

// Class FoxGame.FoxArmoryUI
// 0x0548 (0x0584 - 0x003C)
class UFoxArmoryUI : public UObject
{
public:
	TArray< struct FProfileLoadoutSlot >               OriginalWeaponLoadoutSlots;                       		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FProfileLoadoutSlot >               WeaponLoadoutSlots;                               		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FProfileLoadoutSlot >               LoggedLoadouts;                                   		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FProfileGearInfo                            OriginalGearSlot;                                 		// 0x0060 (0x0024) [0x0000000000002000]              ( CPF_Transient )
	struct FProfileGearInfo                            CachedGearSlot;                                   		// 0x0084 (0x0024) [0x0000000000002000]              ( CPF_Transient )
	struct FProfileGearInfo                            SavedGearSlot;                                    		// 0x00A8 (0x0024) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      OriginalTauntSlots;                               		// 0x00CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      CachedTauntSlots;                                 		// 0x00D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      SavedTauntSlots;                                  		// 0x00E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FProfileDialogInfo                          OriginalDialogSlot;                               		// 0x00F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FProfileDialogInfo                          CachedDialogSlot;                                 		// 0x00F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FProfileDialogInfo                          SavedDialogSlot;                                  		// 0x0100 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      OriginalDepotSlots;                               		// 0x0108 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      CachedDepotSlots;                                 		// 0x0114 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      SavedDepotSlots;                                  		// 0x0120 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                OriginalAvatarIndex;                              		// 0x012C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedAvatarIndex;                                		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastSelectedAvatarIndex;                          		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SavedAvatarIndex;                                 		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                OriginalTitleUnlockID;                            		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedTitleUnlockID;                              		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SavedTitleUnlockID;                               		// 0x0144 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FProfileEmblemInfo                          OriginalEmblemInfo;                               		// 0x0148 (0x0018) [0x0000000000002000]              ( CPF_Transient )
	struct FProfileEmblemInfo                          CachedEmblemInfo;                                 		// 0x0160 (0x0018) [0x0000000000002000]              ( CPF_Transient )
	struct FProfileEmblemInfo                          SavedEmblemInfo;                                  		// 0x0178 (0x0018) [0x0000000000002000]              ( CPF_Transient )
	int                                                SelectedSlotIndex;                                		// 0x0190 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FFoxWeaponConfigInfo                        CachedPrimaryWeaponInfo;                          		// 0x0194 (0x002C) [0x0000000000002000]              ( CPF_Transient )
	struct FFoxWeaponConfigInfo                        SavedPrimaryWeaponInfo;                           		// 0x01C0 (0x002C) [0x0000000000002000]              ( CPF_Transient )
	struct FFoxWeaponConfigInfo                        CachedSecondaryWeaponInfo;                        		// 0x01EC (0x002C) [0x0000000000002000]              ( CPF_Transient )
	struct FFoxWeaponConfigInfo                        SavedSecondaryWeaponInfo;                         		// 0x0218 (0x002C) [0x0000000000002000]              ( CPF_Transient )
	class AFoxLoadoutInfo*                             LoadoutInfo;                                      		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SelectedCustomizationType;                        		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxCustomizationNode_Base*                  CustomizationNode;                                		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxSkillTreeGemSelection*                   GemList;                                          		// 0x0250 (0x0004) [0x0000000000000000]              
	class UFoxGemSocketting*                           GemSocket;                                        		// 0x0254 (0x0004) [0x0000000000000000]              
	class UFoxGemFusion*                               GemFusion;                                        		// 0x0258 (0x0004) [0x0000000000000000]              
	class AFoxPreviewSpawnPoint*                       PreviewSpawnPoint;                                		// 0x025C (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowOwned : 1;                                   		// 0x0260 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowUsable : 1;                                  		// 0x0260 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bQuickPurchase : 1;                               		// 0x0260 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIgnoreZoom : 1;                                  		// 0x0260 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bJustEquipped : 1;                                		// 0x0260 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bUsingAvatar : 1;                                 		// 0x0260 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bRotateButtonHeld : 1;                            		// 0x0260 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bOverrideCamera : 1;                              		// 0x0260 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bInventoryRead : 1;                               		// 0x0260 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bInventoryReadResponse : 1;                       		// 0x0260 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bStoreRead : 1;                                   		// 0x0260 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bStoreReadResponse : 1;                           		// 0x0260 (0x0004) [0x0000000000000000] [0x00000800] 
	int                                                CustomItemType;                                   		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxCustomActor*                             PreviewActor;                                     		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                WeaponXPos;                                       		// 0x026C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WeaponYPos;                                       		// 0x0270 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WeaponWidth;                                      		// 0x0274 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WeaponHeight;                                     		// 0x0278 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< class AFoxCustomWeaponActor* >             ModPreviewArray;                                  		// 0x027C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                SelectedScrollerIndex;                            		// 0x0288 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SelectedScrollerUnlock;                           		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ArmoryLocalizationSectionName;                    		// 0x0290 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     StatHeaderLocalizationSectionName;                		// 0x029C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     StatLocalizationSectionName;                      		// 0x02A8 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	int                                                ScrollerXPos;                                     		// 0x02B4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                ScrollerYPos;                                     		// 0x02B8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FString                                     PendingCommandGroup;                              		// 0x02BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                AvatarTypeIndex;                                  		// 0x02C8 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   EmblemScreenOffset;                               		// 0x02CC (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector2D                                   EmoteScreenOffset;                                		// 0x02D4 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FFoxPawnModInfo                             PawnModInfo;                                      		// 0x02DC (0x0034) [0x0000000000000000]              
	struct FFoxWeaponModInfo                           WeaponModInfo;                                    		// 0x0310 (0x0024) [0x0000000000000000]              
	struct FString                                     EquipClickLabel;                                  		// 0x0334 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PurchaseClickLabel;                               		// 0x0340 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivateClickLabel;                               		// 0x034C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LockedClickLabel;                                 		// 0x0358 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FVector2D >                         CurrentStats;                                     		// 0x0364 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FVector2D >                         AlteredStats;                                     		// 0x0370 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       RotateKey;                                        		// 0x037C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FRotator                                    StartingRotation;                                 		// 0x0384 (0x000C) [0x0000000000000000]              
	int                                                StartMouseX;                                      		// 0x0390 (0x0004) [0x0000000000000000]              
	int                                                StartMouseY;                                      		// 0x0394 (0x0004) [0x0000000000000000]              
	float                                              YawPixelMultipler;                                		// 0x0398 (0x0004) [0x0000000000000000]              
	float                                              PitchPixelMultipler;                              		// 0x039C (0x0004) [0x0000000000000000]              
	struct FName                                       ZoomInKey;                                        		// 0x03A0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ZoomOutKey;                                       		// 0x03A8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              ZoomStep;                                         		// 0x03B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UGFxObject*                                  LoadoutSlotButtons[ 0x6 ];                        		// 0x03B4 (0x0018) [0x0000000000000000]              
	TArray< struct FStatPanelEntry >                   DelayedStatsArray;                                		// 0x03CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  Profile;                                          		// 0x03D8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ProfileTitlesList;                                		// 0x03DC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  Hero;                                             		// 0x03E0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  Character;                                        		// 0x03E4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  Weapon;                                           		// 0x03E8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  DataNodeButton;                                   		// 0x03EC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  AvatarButton;                                     		// 0x03F0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  AvatarDepotButton;                                		// 0x03F4 (0x0004) [0x0000000000000000]              
	TArray< class UGFxObject* >                        AvatarGFXObjects;                                 		// 0x03F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UGFxObject* >                        GearGFXObjects;                                   		// 0x0404 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      SelectedGearTabIndex;                             		// 0x0410 (0x0001) [0x0000000000000000]              
	TArray< struct FFoxGearTab >                       GearTabs;                                         		// 0x0414 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UGFxObject* >                        DepotGFXObjects;                                  		// 0x0420 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UGFxObject* >                        PrimaryGFXObjects;                                		// 0x042C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UGFxObject* >                        SecondaryGFXObjects;                              		// 0x0438 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UGFxObject* >                        ModGFXObjects;                                    		// 0x0444 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      SlotOffsetArray;                                  		// 0x0450 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PresetIconString;                                 		// 0x045C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     ReceiverIconString;                               		// 0x0468 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     ScopeIconString;                                  		// 0x0474 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     BarrelIconString;                                 		// 0x0480 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     StockIconString;                                  		// 0x048C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     MuzzleIconString;                                 		// 0x0498 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     MagazineIconString;                               		// 0x04A4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GripIconString;                                   		// 0x04B0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     HangerIconString;                                 		// 0x04BC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     CamoIconString;                                   		// 0x04C8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GrenadeIconString;                                		// 0x04D4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     MeleeIconString;                                  		// 0x04E0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     PrimaryIconString;                                		// 0x04EC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     SecondaryIconString;                              		// 0x04F8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GearTabIconString;                                		// 0x0504 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     DepotTabIconString;                               		// 0x0510 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     ShieldTabIconString;                              		// 0x051C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     ClosedTabIconString;                              		// 0x0528 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     CachedBackTransition;                             		// 0x0534 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  StatsWindow;                                      		// 0x0540 (0x0004) [0x0000000000000000]              
	struct FString                                     ProfileTutorial;                                  		// 0x0544 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CharacterTutorial;                                		// 0x0550 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     HeroTutorial;                                     		// 0x055C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NodesTutorial;                                    		// 0x0568 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     WeaponTutorial;                                   		// 0x0574 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	class UFoxUIModalDialogWidget*                     ModalDialogWidget;                                		// 0x0580 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1814 ];

		return pClassPointer;
	};

	void as_hideDetailPanel ( );
	void as_showDetailPanel ( );
	void as_HideArmoryFusionNodeList ( );
	struct FString as_ShowArmoryFusionNodeList ( );
	struct FString as_AddArmoryFusionPanel ( int XPos, int YPos );
	struct FString as_AddSocketWidget ( int XPos, int YPos );
	struct FString as_ShowNodeList ( int XPos, int YPos, struct FString ExtInterface );
	void as_setLoadoutInfo ( struct FString Field, struct FString Field01, struct FString Field02, struct FString Field03, struct FString Field04, struct FString Field05, struct FString Field06, struct FString Field07, struct FString Field08, struct FString Field09, struct FString Field10 );
	void as_setCustomLabel ( struct FString Label1, struct FString Label2 );
	void as_addCustomLabel ( int XPos, int YPos, int PerspFOV, int YRotation, int Opacity );
	void as_addCustomButton ( struct FString btnLabel, struct FString btnTooltip, struct FString Icon, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString extRolloverInterfaceFunc, struct FString extRolloverInterfaceArg, struct FString Transition, unsigned long MakeSelected );
	void as_addCustomCategory ( struct FString btnLabel, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString extRolloverInterfaceFunc, struct FString extRolloverInterfaceArg, struct FString Transition );
	void as_addCustomDetailTab ( int xposition, int yposition );
	void as_addDesc ( struct FString Description );
	void as_updateStats ( int Index, struct FString CurrentValue, struct FString NewValue );
	struct FString as_addStats ( );
	void as_setCustomDetailTab ( struct FString DataText, struct FString loadoutName, TArray< struct FFoxLoadoutStrings > loadoutArray );
	void as_addCustomBasicButton ( struct FString btnLabel, unsigned long bEnabled, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString extRolloverInterfaceFunc, struct FString extRolloverInterfaceArg, struct FString Transition );
	void as_resetCustomization ( );
	void as_updateCustomScroller ( struct FString ButtonClickFuncName, struct FString ButtonClickArg );
	void as_addCustomScrollerBasic ( int xposition, int yposition, struct FString NameArray, struct FString Tag );
	void as_addCustomScroller ( int xposition, int yposition, TArray< struct FString > NameArray, TArray< struct FString > TagArray, int ArrayIndex, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString extRolloverInterfaceFunc, struct FString extRolloverInterfaceArg, struct FString Transition );
	void eventas_addCustomTab ( struct FString Label, struct FString btnTooltip, struct FString Icon, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString extRolloverInterfaceFunc, struct FString extRolloverInterfaceArg, struct FString Transition );
	void GenerateDepotDetails ( );
	void GenerateGearDetails ( );
	void DelayedUpdateStatsNow ( TArray< struct FStatPanelEntry > StatsArray );
	void OnDelayedUpdateStats ( );
	void UpdateStats ( TArray< struct FStatPanelEntry > StatsArray );
	void UpdateStatIndex ( int Index, struct FStatPanelEntry NewStats );
	void DisplayWeaponStats ( unsigned long bForceUpdate, TArray< struct FVector2D >* NewStats );
	void UpdateCurrentWeaponStats ( TArray< struct FVector2D >* NewStats );
	void UpdateWeaponStats ( );
	void DisplayArmorStats ( TArray< struct FVector2D >* NewStats );
	void UpdateCurrentArmorStats ( TArray< struct FVector2D >* NewStats );
	void GenerateArmoryDetails ( );
	void GenerateHeroDetails ( );
	void GenerateWeaponDetails ( );
	void ui_GenerateDetailTab ( int X, int Y );
	void ei_TestYaw ( struct FString YawValue );
	void ei_TestPitch ( struct FString PitchValue );
	void ei_TestDistance ( struct FString DistValue );
	void ei_TestZOffset ( struct FString zValue );
	void ei_TestXOffset ( struct FString xValue );
	void ei_TestYOffset ( struct FString yValue );
	void as_AddedPreviewRangeButtons ( );
	void AddJoeBox ( struct FString Element, float X, float Y, float Width, float Height );
	void SpawnPreviewMods ( int Num );
	void ei_LoadoutRollOver ( struct FString Index );
	void UpdateCharacterGear ( struct FProfileGearInfo* NewGear );
	void UpdateCharacterLoadout ( struct FFoxWeaponConfigInfo* NewConfig );
	void UpdateDepotPreviewActor ( struct FFoxDepotPresetInfo NewPresetInfo );
	void loadPreviewActor ( );
	void SetupLoadouts ( );
	void RebuildCachedDepotInfo ( );
	void SaveDepotInfo ( );
	void RebuildCachedEmblemInfo ( );
	void SaveEmblemInfo ( );
	void RebuildCachedDialogInfo ( );
	void SaveDialogInfo ( );
	void RebuildCachedTauntInfo ( );
	void SaveTauntInfo ( );
	void RebuildCachedGearInfo ( );
	void SaveGearInfo ( );
	void RebuildCachedWeaponInfo ( );
	void SaveCurrentLoadoutSlot ( );
	bool SetLoadoutIndex ( int Index );
	void ei_selectCharacter ( struct FString Index );
	void ei_DebugCharTypeStep ( struct FString Index );
	void ei_debugCharacter ( struct FString Index );
	void ei_selectLoadout ( struct FString Index );
	bool DidLoadoutChange ( );
	void SaveLoadout ( );
	void LogNewEquippedGear ( );
	void CloseArmory ( );
	void SetLoadoutInfo ( int I );
	bool IsGearTabLocked ( int TabIndex );
	void ei_equipButtonClicked ( struct FString SelectedIndex );
	bool GetNextAndPreviousIndices ( int CurrentIndex, int Length, int* previousIndex, int* nextIndex );
	void ei_equipLockedButtonClick ( );
	void ei_setLoadoutInfo ( struct FString Index );
	void ei_AddedPreviewRangeButtons ( );
	void ResetCustomLabel ( );
	void ei_viewHeroDepot ( struct FString Index );
	void ei_changeDepot ( struct FString Index );
	struct FFoxDepotPresetInfo GetDepotPresetFromIndex ( int DepotItemIndex );
	void ei_changeDepotType ( struct FString CustomizationTypeNum );
	void ei_changeGearType ( struct FString CustomizationTypeNum );
	void ei_viewHeroGear ( struct FString GearTypeNum );
	void ei_changeGear ( struct FString GearTypeNum );
	void ei_changeBadge ( struct FString ArmorTypeNum );
	void ei_changeLowerBody ( struct FString ArmorTypeNum );
	void ei_changeUpperBody ( struct FString ArmorTypeNum );
	void ei_changeHelmet ( struct FString ArmorTypeNum );
	void ei_changePawnCamo ( struct FString Param );
	void ei_changeArmorType ( struct FString CustomizationTypeNum );
	void ei_changeWeaponCamo ( struct FString Param );
	void ei_changeWeaponHanger ( struct FString Param );
	void ei_changeCustomModProvider ( struct FString Param );
	void ei_changeCustomMod ( struct FString Param );
	void ei_changeCustomReceiver ( struct FString Param );
	void ei_changeCustomPreset ( struct FString Param );
	void UpdateModObjects ( int OldItemType );
	void DisplayWeaponCustomization ( );
	void SetupSecondaryWeapon ( struct FString LoadoutIndex );
	void SetupPrimaryWeapon ( struct FString LoadoutIndex );
	void ResetSelectedLoadout ( );
	class UClass* GetWeaponClassForType ( int ModWeaponType );
	void as_generateLoadoutButtons ( struct FString btnLabel, struct FString btnTooltip, struct FString Icon, struct FString Transition );
	void ei_changeAvatar ( struct FString Param );
	void ei_toggleHeroCharacter ( struct FString UseAvatar );
	void LoadoutSlotPurchaseComplete ( unsigned long bSuccess, unsigned long bEquip );
	void ei_PurchaseNewLoadout ( );
	void SetSecondaryIcon ( int Index );
	void SetPrimaryIcon ( int Index );
	void UpdateLoadoutButtons ( );
	void ei_WeaponClicked ( );
	void ei_UseCustomCharacter ( );
	void ei_ShowCustomCharacter ( );
	void ei_clickAvatarType ( struct FString IndexString );
	struct FString GetSecondaryReceiverIcon ( int Index );
	struct FString GetPrimaryReceiverIcon ( int Index );
	void SetDepotIcon ( int Index );
	struct FString GetDepotIcon ( int Index );
	struct FString GetTacticalIcon ( unsigned char TacticalIndex );
	struct FString GetGearIcon ( unsigned char GearIndex );
	void SetCachedGearToZero ( unsigned char GearIndex );
	unsigned char GetCachedGearIndex ( unsigned char GearIndex );
	void UpdateGearSlots ( );
	void BuildHeroCharacterButtons ( );
	void BuildCustomCharacterButtons ( );
	void BuildHeroSelectButtons ( );
	void DelayedTransitionCharacterTab ( );
	void ei_CharacterClicked ( );
	void ei_HeroClicked ( );
	void ui_AddArmoryFusionPanel ( int XPos, int YPos );
	void ui_SetupGemSocket ( int XPos, int YPos );
	void ui_SetupGemList ( int XPos, int YPos );
	void ei_DataNodeClicked ( );
	void ei_dialogPacksPlayerClicked ( );
	void ei_dialogPacksAnnouncerClicked ( );
	void ei_emotesClicked ( );
	void ei_emblemClicked ( );
	void ei_titlesClicked ( );
	void ei_unlocksClicked ( );
	void ei_ProfileClicked ( );
	struct FString as_newArmorySlotHero ( struct FString Icon, struct FString ToolTip, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString TransitionType, unsigned long bIsLocked );
	struct FString as_addNewArmoryCharacterDetail ( struct FString Label, struct FString CharacterTabs, struct FString ToolTip, struct FString extClickInterfaceFunc );
	struct FString as_addNewArmoryCharacterTab ( struct FString Label, struct FString ToolTip, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString TransitionType, unsigned long bActive );
	struct FString as_addNewArmoryCharacter ( struct FString Label );
	struct FString as_addNewArmoryComponentButton ( struct FString Label, struct FString ToolTip, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString TransitionType, unsigned long bIsDisabled );
	struct FString as_addNewArmoryComponentList ( struct FString Label, int OffsetY );
	struct FString as_addNewArmorySlot ( struct FString Icon, struct FString ToolTip, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString TransitionType, unsigned long bLocked );
	struct FString as_addNewArmoryCharacterHero ( struct FString Label, float Width );
	struct FString as_addNewArmoryCharacterDetailCustom ( struct FString CharacterName, struct FString characterTags, struct FString ToolTip, struct FString extClickInterfaceFunc );
	struct FString as_addNewArmoryLoadout ( struct FString loadoutText, int loadoutNumber, struct FString loadoutQuickKey, unsigned long bLocked, struct FString LockedClickFunc, struct FString ToolTip );
	struct FString as_addNewArmoryProfileButton ( struct FString Label, struct FString ToolTip, struct FString extClickInterfaceFunc, struct FString extInterfaceArg, struct FString TransitionType, unsigned long bIsDisabled );
	struct FString as_addLoadoutsContainer ( struct FString Label, int WidgetSpacing, int MaxListWidth, int MaxListHeight, unsigned long bVerticleAign );
	struct FString as_addNewArmoryCharacterSelect ( struct FString Label, struct FString ToolTip, struct FString extClickInterfaceFuc, struct FString extInterfaceArg, struct FString TransitionType );
	struct FString as_addNewArmoryCharacterToggle ( struct FString Label, unsigned long bToggle, struct FString ToolTip, struct FString extClickInterfaceFuc, struct FString extInterfaceArg, struct FString TransitionType );
	struct FString as_addNewArmoryCategory ( struct FString Label, struct FString ToolTip, struct FString Icon, struct FString extClickInterfaceFuc, struct FString extInterfaceArg, struct FString TransitionType );
	void ui_addArmoryCategories ( );
	void ApplyCustomizationNode ( class UClass* NodeClass, unsigned long bSkipInitialize );
	void RefreshCacheComplete ( unsigned long bResult, struct FString FailureReason );
	void MergeUpdatedItems ( );
	void ForceCloseArmory ( unsigned long bResult );
	void Initialize ( struct FString InitCmdGroup, struct FString BackTransition );
};

UClass* UFoxArmoryUI::pClassPointer = NULL;

// Class FoxGame.FoxChatUI
// 0x00F4 (0x0130 - 0x003C)
class UFoxChatUI : public UObject
{
public:
	TArray< struct FString >                           HTMLUnsanitized;                                  		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           HTMLSanitized;                                    		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           FilteredChatWords;                                		// 0x0054 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FilteredChatString;                               		// 0x0060 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           ChatSlashCommands;                                		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           SlashCommands;                                    		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                CurrentChatMode;                                  		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FString                                     ReplyPlayer;                                      		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FChatRoom >                         AllChannels;                                      		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      UIReadyForDefaultMessage : 1;                     		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      ClanInterfaceReadyForDefaultMessage : 1;          		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNewClanMOTD : 1;                                 		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bHasShownHelpMessage : 1;                         		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000008] 
	int                                                OutstandingChatMessages;                          		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                MaxOutstandingChatMessages;                       		// 0x00A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TimeCycle;                                        		// 0x00AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ChatTimerRemaining;                               		// 0x00B0 (0x0004) [0x0000000000000000]              
	struct FString                                     PendingChatLogs[ 0x7 ];                           		// 0x00B4 (0x0054) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ChatPruneLimits[ 0x7 ];                           		// 0x0108 (0x001C) [0x0000000000000002]              ( CPF_Const )
	struct FScriptDelegate                             __OnFilterChat__Delegate;                         		// 0x0124 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1815 ];

		return pClassPointer;
	};

	void as_PruneChatLog ( int ChatLogIndex, int MaxLines );
	void as_ReloadPreservedChat ( struct FString ChatToReload );
	struct FString as_QueryPreservedChat ( );
	void as_ReloadChatLogByIndex ( int ChatLogIndex, struct FString ChatToReload );
	struct FString as_QueryChatLogByIndex ( int ChatLogIndex );
	void as_UpdateLog ( int Index, struct FString PlayerName, struct FString Message, unsigned long IsActiveLog );
	void as_ClearLog ( int Index );
	void as_RemoveLog ( int Index );
	void as_CreateLog ( int Index );
	void as_ShowChat ( int Index, struct FString PanelPath );
	void as_ClearButtons ( struct FString PanelPath );
	void as_RemoveButton ( int Index, struct FString PanelPath );
	void as_AddChatLog ( int LogIndex );
	struct FString as_AddChatButton ( struct FString Label, struct FString ClickInterface, int LogIndex, struct FString TransitionType, struct FString PanelPath );
	void as_SetInputText ( struct FString Label, struct FString PanelPath );
	struct FString as_CreateChatPanel ( int XPos, int YPos );
	void as_UpdateHUDInputString ( struct FString Label );
	void eventChatTimerFinished ( );
	void ClearChatTimer ( );
	void StartChatTimer ( );
	void ei_chatLink ( struct FString LinkedName );
	void SetUpPlayerNameForChat ( struct FString* PlayerName );
	void UpdateLog ( int Index, struct FString PlayerName, struct FString Message, unsigned long bIsActiveLog, unsigned long DoNotIncrementUnread );
	void SetButtonEnabled ( int Index, unsigned long Enabled );
	void EnableChannel ( int Index, unsigned long Enabled );
	struct FString GetCurrentChannelName ( );
	void AddSocialNotification ( struct FString DisplayString );
	void eventUpdateCurrentLog ( struct FString LogName, struct FString LogMessage, unsigned long DoNotIncrementUnread );
	void eventTryUpdateLog ( int Index, struct FString PlayerName, struct FString Message, unsigned long DoNotIncrementUnread );
	void ReplaceHMTLCharacters ( struct FString* ToClean );
	void SmartModeChange ( int NewMode );
	void SetUnreadCount ( struct FChatRoom Channel );
	void ClearDefaultLogs ( unsigned long IgnoringThis );
	void ClearGameSpecificLogs ( );
	void CreateChatButtons ( );
	void RefreshButtons ( );
	void SwitchToNextAvailableChannel ( );
	void ui_SetDefaultChatChannel ( );
	void ui_DoChatButtons ( );
	void LeaveChatChannel ( struct FString ChannelName );
	void PrepareBadWordsArray ( );
	void ParseChatList ( struct FString ChatList );
	void eventAddChatChannel ( int ChannelID, struct FString ChannelName );
	void JoinChatChannel ( struct FString ChannelName );
	void ui_TryShowDefaultChatMessages ( );
	void ui_SetUIReadyForDefaultMessage ( );
	void SendWhisper ( struct FString PlayerName, struct FString Message );
	void WhisperFiltered ( struct FString InPlayerName, struct FString Message, int Channel, class AFoxPRI* ForPRI );
	void ReceiveWhisper ( unsigned long Success, struct FString PlayerName, struct FString Message );
	void HandleSocialServerMessage ( struct FString InPlayerName, struct FString Message, int Channel, class AFoxPRI* PRI );
	void OnSocialServerMessage ( struct FString Channel, struct FString PlayerName, struct FString Message );
	void HandleNewChatMessage ( struct FString PlayerName, struct FString PlayerMessage, int Channel, class AFoxPRI* PRI );
	void DisplayChatMessage ( struct FString PlayerName, struct FString Message, int Channel, class AFoxPRI* PRI );
	void RefreshChat ( );
	void ChangeChatMode ( int NewMode );
	void ei_chatTabClicked ( int ChatIndex );
	void ParseWhisperCommand ( struct FString Message );
	bool CheckForDevCommands ( struct FString Message );
	void PrintHelp ( );
	void GetNextWord ( struct FString* Message );
	void eventProcessNumericSlashCommand ( int Index, struct FString Message );
	void Tweet ( struct FString Message );
	void TwitterLogin ( struct FString Message );
	void eventProcessSlashCommand ( int ComIndex, struct FString Message );
	void eventProcessChatSlashCommand ( int ComIndex );
	bool CheckForSlashCommands ( struct FString* Message );
	bool CheckCharacterSpam ( struct FString PlayerMessage );
	void FilterChat ( struct FString PlayerName, struct FString PlayerMessage, struct FScriptDelegate FilterCallback, int Channel, class AFoxPRI* PRI );
	void OnFilterChat ( struct FString PlayerName, struct FString Message, int Channel, class AFoxPRI* PRI );
	bool IsActiveLog ( int Index );
	bool IsSpectator ( );
	bool IsLobbyChatAvailable ( );
	bool IsTeamChatAvailable ( );
	void AddNewChatMessage ( struct FString MessageText );
	void SubmitChat ( struct FString MessageText );
	void CleanupFilterTasks ( );
	void Cleanup ( );
	void Initialize ( );
};

UClass* UFoxChatUI::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_Base
// 0x0020 (0x005C - 0x003C)
class UFoxCustomizationNode_Base : public UObject
{
public:
	TArray< struct FScrollerListEntry >                ScrollerEntries;                                  		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     ButtonContainerPath;                              		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UFoxUIWorkingDialogWidget*                   WorkingDialogWidget;                              		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  ScrollerBar;                                      		// 0x0058 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1816 ];

		return pClassPointer;
	};

	void UpdateDataProvider ( TArray< struct FScrollerListEntry > ReceiverArray );
	void NodeEquipButtonClicked ( struct FString SelectedIndex );
	void ei_ScrollerClicked ( struct FString SelectedIndex );
	void as_addCustomScrollerBasicNew ( int xposition, int yposition, struct FScrollerListEntry SingleListEntry );
	struct FString as_addNewCustomScroller ( int XPos, int YPos );
	void SortScrollerBar ( );
	void DelayedSetupScrollerBar ( );
	void SetupScrollerBar ( );
	bool SetScrollerEntry ( int UnlockID, int UnlockSkillID, struct FScrollerListEntry* ScrollerEntry );
	void UpdateNodeDetails ( );
	bool ShouldShowItem ( unsigned char UnlockState, unsigned char PurchaseState );
	bool IsPurchased ( int ItemId );
	void ReloadArmoryForItem ( int UnlockID, unsigned char PurchaseState );
	void StorePurchaseComplete ( unsigned long bSuccess, unsigned long bEquip );
	void TryActivateCurrentUnlockID ( );
	void TryPurchaseCurrentUnlockID ( int UnlockID, unsigned char UnlockState, unsigned long bIgnoreQuickPurchase );
	unsigned char GetCurrentPurchaseState ( );
	unsigned char GetCurrentUnlockState ( );
	int GetCurrentUnlockID ( );
	void ei_activateItem ( struct FString Param );
	void ei_buyItem ( struct FString Param );
	bool IsUnlockHidden ( int UnlockID );
	void RebuildScroller ( );
	void ei_filterOwnedToggle ( unsigned long bNewValue );
	void ei_filterUsableToggle ( unsigned long bNewValue );
	void ei_filterQuickPurchase ( unsigned long bNewValue );
	void as_addFilterLabel ( struct FString FilterLabel );
	void as_addFilterToggle ( struct FString Label, unsigned long Selected, struct FString ToolTip, struct FString eiFunctionName, struct FString Params );
	void as_addFilterButtonContainer ( int X, int Y, int Opac, int ButtonSpacing, int Width, int Height, unsigned long bVertical );
	void AddFilterButtons ( );
	void ei_changeScrollerIndex ( int NewIndex );
	void SetSelectedUnlock ( int UnlockID );
	int eventGetNumOfItemUsed ( int ItemId );
	void HideWorkingDialog ( );
	void ShowWorkingDialog ( struct FString TitleText );
	void Cleanup ( );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_Base::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_Avatar
// 0x0010 (0x006C - 0x005C)
class UFoxCustomizationNode_Avatar : public UFoxCustomizationNode_Base
{
public:
	TArray< struct FAvatarInfo >                       AvatarInfoArray;                                  		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UFoxDataProvider_AvatarType*                 AvatarTypeProvider;                               		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1817 ];

		return pClassPointer;
	};

	bool IsPurchased ( int ItemId );
	void UpdateNodeDetails ( );
	void ei_changeScrollerIndex ( int Index );
	void NodeEquipButtonClicked ( struct FString SelectedIndex );
	void ResetSelectedLoadout ( );
	void SortScrollerBar ( );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_Avatar::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_DialogBase
// 0x0014 (0x0070 - 0x005C)
class UFoxCustomizationNode_DialogBase : public UFoxCustomizationNode_Base
{
public:
	class UFoxUIDialogListWidget*                      DialogListWidget;                                 		// 0x005C (0x0004) [0x0000000000000000]              
	unsigned char                                      UnlockType;                                       		// 0x0060 (0x0001) [0x0000000000000000]              
	struct FString                                     WidgetContainerName;                              		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1818 ];

		return pClassPointer;
	};

	struct FString as_addArmoryVoiceList ( int PosX, int PosY, struct FString extClickInterfaceFunc );
	void ApplyToLoadout ( );
	void RebuildScroller ( );
	void Cleanup ( );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_DialogBase::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_Emblem
// 0x0004 (0x0060 - 0x005C)
class UFoxCustomizationNode_Emblem : public UFoxCustomizationNode_Base
{
public:
	class UFoxUIEmblemPanelWidget*                     EmblemPanelWidget;                                		// 0x005C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1819 ];

		return pClassPointer;
	};

	struct FString as_addArmoryEmblemPanel ( int PosX, int PosY );
	void ApplyToLoadout ( );
	void RebuildScroller ( );
	void SetGearFromEmblem ( int UnlockID );
	void Cleanup ( );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_Emblem::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_Emotes
// 0x0004 (0x0060 - 0x005C)
class UFoxCustomizationNode_Emotes : public UFoxCustomizationNode_Base
{
public:
	class UFoxUIEmoteListWidget*                       EmoteListWidget;                                  		// 0x005C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1820 ];

		return pClassPointer;
	};

	struct FString as_addArmoryEmoteList ( int PosX, int PosY, struct FString extClickInterfaceFunc );
	void ApplyToLoadout ( );
	void RebuildScroller ( );
	void Cleanup ( );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_Emotes::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_GearBase
// 0x000C (0x0068 - 0x005C)
class UFoxCustomizationNode_GearBase : public UFoxCustomizationNode_Base
{
public:
	TArray< struct FGearInfo >                         GearInfoArray;                                    		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1821 ];

		return pClassPointer;
	};

	void ei_changeScrollerIndex ( int Index );
	void SetupCustomItemType ( unsigned long bReset, TArray< class UUIResourceDataProvider* >* NewGearArray );
	void ResetSelectedLoadout ( );
	void UpdateNodeDetails ( );
	void GenerateDetails ( );
	bool ApplySelectedUnlock ( int GearIndex );
	int GetCurrentIndex ( );
	bool ShouldShowGearItem ( int ItemId, unsigned char UnlockState, unsigned char PurchaseState );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_GearBase::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_Gear
// 0x0000 (0x0068 - 0x0068)
class UFoxCustomizationNode_Gear : public UFoxCustomizationNode_GearBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1822 ];

		return pClassPointer;
	};

	void UpdateNodeDetails ( );
	void GenerateDetails ( );
	int GetNumOfItemUsed ( int ItemId );
	void SortScrollerBar ( );
	void SetupCustomItemType ( unsigned long bReset, TArray< class UUIResourceDataProvider* >* NewGearArray );
};

UClass* UFoxCustomizationNode_Gear::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_Titles
// 0x0004 (0x0060 - 0x005C)
class UFoxCustomizationNode_Titles : public UFoxCustomizationNode_Base
{
public:
	class UFoxUITitleListWidget*                       TitleListWidget;                                  		// 0x005C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1823 ];

		return pClassPointer;
	};

	struct FString as_addArmoryTitleList ( int PosX, int PosY, TArray< struct FBaseUnlockEntry > DataProvider, int SelectedIndex, struct FString extClickInterfaceFunc );
	void ApplyToLoadout ( );
	void RebuildScroller ( );
	void Cleanup ( );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_Titles::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_UnlockProgression
// 0x0004 (0x0060 - 0x005C)
class UFoxCustomizationNode_UnlockProgression : public UFoxCustomizationNode_Base
{
public:
	class UFoxUIUnlockProgressionWidget*               UnlockListWidget;                                 		// 0x005C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1824 ];

		return pClassPointer;
	};

	struct FString as_addArmoryUnlockList ( int PosX, int PosY, struct FString ExtInterfaceClickFunc );
	void RebuildScroller ( );
	void Cleanup ( );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_UnlockProgression::pClassPointer = NULL;

// Class FoxGame.FoxDialogBoxBase
// 0x0098 (0x00D4 - 0x003C)
class UFoxDialogBoxBase : public UObject
{
public:
	struct FString                                     AcceptButtonIDPostFix;                            		// 0x003C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CancelButtonIDPostFix;                            		// 0x0048 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DialogLocSectionName;                             		// 0x0054 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultValidVerifyTagColor;                       		// 0x0060 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultInvalidVerifyTagColor;                     		// 0x006C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	class UAkEvent*                                    OpenDialogEvent;                                  		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bAllowEscape : 1;                                 		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bErrorDialogBox : 1;                              		// 0x007C (0x0004) [0x0000000000000000] [0x00000002] 
	struct FString                                     ObjectPath;                                       		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LocAcceptLabel;                                   		// 0x008C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringConfirm;                                 		// 0x0098 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocCancelLabel;                                   		// 0x00A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocVerifyLabel;                                   		// 0x00B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __DialogButtonPressedDelegate__Delegate;          		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __StringInputDelegate__Delegate;                  		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1825 ];

		return pClassPointer;
	};

	void SetTitleText ( struct FString LocTitleText );
	void AddItemTileFromInventoryItem ( struct FInventoryMetaData InventoryItem );
	void AddItemTileFromID ( int UnlockID );
	void as_updateDialogBoxItem ( struct FBaseInventoryEntry ItemEntry );
	void as_addDialogBoxItem ( );
	struct FString AddInputBox ( struct FString HeaderLabel, struct FString VerifyLabel, struct FString VerifyCallbackName, int MaxInputChars, struct FString InputFunctionName );
	struct FString as_addDialogInputBox ( struct FString HeaderLabel, struct FString VerifyLabel, struct FString ExtInterfaceVerifyClickFunc, int MaxChars, struct FString InputFunc );
	struct FString ui_addDialogButton ( struct FString ButtonLabel, struct FString ExtInterfaceClickFunc, struct FString ExtInterfaceClickArg, unsigned long bHasInput, struct FString ButtonID );
	struct FString eventas_addDialogButton ( struct FString ButtonLabel, struct FString ExtInterfaceClickFunc, struct FString ExtInterfaceClickArg, unsigned long bHasInput );
	void as_removeDialogPanel ( );
	struct FString as_addDialogPanel ( );
	void ei_closeDialog ( );
	void ShowVerifyLabel ( struct FInputBoxVerify InputBox, struct FInputBoxVerifyTag VerifyTag );
	void NotifyButtonPressed ( unsigned long bResult );
	void ToggleAllowEscape ( unsigned long bShouldAllowEscape );
	struct FString GetBoundObjectPath ( );
	class UGFxObject* GetBoundObject ( );
	void BindObject ( struct FString InObjectPath );
	void CloseDialog ( );
	void BindDialog ( struct FScriptDelegate OnDialogButtonPressed, struct FString BoundObjectPath );
	void StringInputDelegate ( struct FString InputString );
	void DialogButtonPressedDelegate ( unsigned long bAccepted );
};

UClass* UFoxDialogBoxBase::pClassPointer = NULL;

// Class FoxGame.FoxDialogBox
// 0x00EC (0x01C0 - 0x00D4)
class UFoxDialogBox : public UFoxDialogBoxBase
{
public:
	struct FDialogBoxProperties                        CurrentProperties;                                		// 0x00D4 (0x00B0) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FDialogBoxProperties >              PendingProperties;                                		// 0x0184 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIsDoingTransition : 1;                           		// 0x0190 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsClearing : 1;                                  		// 0x0190 (0x0004) [0x0000000000000000] [0x00000002] 
	class UGFxObject*                                  ItemListObject;                                   		// 0x0194 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  OpenedItemObject;                                 		// 0x0198 (0x0004) [0x0000000000000000]              
	struct FString                                     BaseButtonID;                                     		// 0x019C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LocStringContents;                                		// 0x01A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringLevelLabel;                              		// 0x01B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1826 ];

		return pClassPointer;
	};

	void as_addSmallHeader ( struct FString Header );
	void eventas_updateDataProviderNew ( TArray< struct FBaseInventoryEntry > DataProvider );
	struct FString as_addItemList ( );
	void as_updateOpenedItem ( struct FBaseInventoryEntry ItemEntry );
	struct FString as_addOpenedItem ( );
	void eventui_addOpenedItem ( struct FBaseInventoryEntry ItemEntry );
	void as_showTimer ( unsigned long bShowTimer );
	void as_clearDialog ( );
	void as_disableDialogButton ( int ButtonIndex );
	void as_enableDialogButton ( int ButtonIndex );
	void ei_OnCancelPressed ( struct FString Arg );
	void ei_OnAcceptPressed ( struct FString Arg, struct FString Arg2 );
	void NotifyButtonPressed ( unsigned long bResult );
	void ei_InputString ( struct FString EnteredString );
	void AddCancelButton ( struct FString ButtonID );
	void AddOkButton ( unsigned long ExpectsInput, struct FString ButtonID );
	void AddExpiredItemList ( );
	void AddNewItemList ( unsigned long bShowHeaderItem );
	bool ReloadList ( unsigned long bShowHeaderItem );
	void ApplyButtonTemplate ( unsigned char DialogBoxType, unsigned long bShowTimer, struct FString ButtonID );
	void SetBodyText ( struct FString LocBodyText, unsigned long bAnimate );
	void DialogTextTransitionComplete ( );
	void addDialogContent ( );
	void CloseDialog ( );
	void eventUpdateDialog ( unsigned long bIgnoreClear );
	void ShowDialog ( struct FDialogBoxProperties Properties );
};

UClass* UFoxDialogBox::pClassPointer = NULL;

// Class FoxGame.FoxDialogBoxItemsExpired
// 0x0060 (0x0220 - 0x01C0)
class UFoxDialogBoxItemsExpired : public UFoxDialogBox
{
public:
	struct FString                                     ExpiredColor;                                     		// 0x01C0 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TrashColor;                                       		// 0x01CC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RenewColor;                                       		// 0x01D8 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bColorOverride : 1;                               		// 0x01E4 (0x0004) [0x0000000000004002] [0x00000001] ( CPF_Const | CPF_Config )
	TArray< struct FExpiredItemEntry >                 ExpiredEntries;                                   		// 0x01E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           ItemsToTrash;                                     		// 0x01F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           ItemsToRenew;                                     		// 0x0200 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     ExpiredTotalsPath;                                		// 0x020C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      CurrencyToUse;                                    		// 0x0218 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  ItemListToggleObject;                             		// 0x021C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1827 ];

		return pClassPointer;
	};

	void as_updateDataProviderExpiredIndex ( int Index, struct FExpiredItemEntry NewData );
	void eventas_updateDataProviderExpired ( TArray< struct FExpiredItemEntry > DataProvider );
	struct FString as_addExpiredItemToggle ( );
	struct FString as_addExpiredItemList ( );
	void as_setUseZP ( unsigned long bTrue );
	void as_setUseGP ( unsigned long bTrue );
	struct FString as_addExpiredListTotalsToggle ( );
	void CloseDialog ( );
	void RenewComplete ( );
	void OnRenewItem ( unsigned char eResult, struct FString ItemGuid );
	void DestroyItemComplete ( unsigned long bResult, unsigned long bEquip );
	void StartRenew ( );
	void StartDestroy ( );
	void AddOkButton ( unsigned long ExpectsInput, struct FString ButtonID );
	TArray< struct FString > GetLinkedStoreItems ( TArray< struct FString > InventoryItems );
	void OnRenewFailureClosed ( unsigned long bResult );
	void ShowRenewFailure ( unsigned char Result );
	void ei_OnAcceptPressed ( struct FString Arg, struct FString Arg2 );
	int RecalculatePrice ( unsigned char ForCurrency, TArray< struct FString >* InvalidItems );
	void RefreshPriceUI ( );
	void UpdateExpiredColor ( int Index );
	void ei_trashAllPressed ( unsigned long bChecked );
	void ei_renewAllPressed ( unsigned long bChecked );
	void ei_trashPressed ( unsigned long bChecked, int Index );
	void ei_renewPressed ( unsigned long bChecked, int Index );
	void ei_SetUseZP ( unsigned long bUse );
	void ei_SetUseGP ( unsigned long bUse );
	void AddExpiredItemList ( );
	bool ReloadList ( unsigned long bShowHeaderItem );
	struct FString eventLocalizeExpiredDialog ( struct FString Tag );
};

UClass* UFoxDialogBoxItemsExpired::pClassPointer = NULL;

// Class FoxGame.FoxDialogBoxCreateClan
// 0x0054 (0x0128 - 0x00D4)
class UFoxDialogBoxCreateClan : public UFoxDialogBoxBase
{
public:
	struct FString                                     NameVerifiedPath;                                 		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TagVerifiedPath;                                  		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LocClanParamValid;                                		// 0x00EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocClanParamInUse;                                		// 0x00F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocClanParamInvalidChar;                          		// 0x0104 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocClanParamBadWords;                             		// 0x0110 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocClanDefaultMOTD;                               		// 0x011C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1828 ];

		return pClassPointer;
	};

	void ei_OnCancelPressed ( struct FString Arg );
	void ei_OnAcceptPressed ( struct FString Arg, struct FString Arg2 );
	void SetVerified ( int InfoType, int ValidType );
	void SetAvailable ( int InfoType, unsigned long IsAvail );
	void ClanCreated ( unsigned long Success );
	void ei_VerifyTag ( struct FString VTag );
	bool ei_VerifyName ( struct FString VName );
	bool VerifyArg ( struct FString Arg, int InfoType );
	void TryCreateClan ( struct FString CName, struct FString CTag );
	void CloseDialog ( );
	void ShowClanCreateDialog ( struct FScriptDelegate InInputString, struct FScriptDelegate InButtonPressed );
};

UClass* UFoxDialogBoxCreateClan::pClassPointer = NULL;

// Class FoxGame.FoxDialogBoxCreatePlayer
// 0x012C (0x0200 - 0x00D4)
class UFoxDialogBoxCreatePlayer : public UFoxDialogBoxBase
{
public:
	struct FString                                     PlayerName;                                       		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      PlayerGender;                                     		// 0x00E0 (0x0001) [0x0000000000000000]              
	struct FInputBoxVerify                             PlayerNameInputBox;                               		// 0x00E4 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInputBoxVerifyTag                          PlayerNameVerifyTags[ 0x6 ];                      		// 0x0108 (0x0060) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bCentered : 1;                                    		// 0x0168 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWantsContinue : 1;                               		// 0x0168 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAllowCharacterPreview : 1;                       		// 0x0168 (0x0004) [0x0000000000000000] [0x00000004] 
	class UFoxCreatePlayerUI*                          CreatePlayerUI;                                   		// 0x016C (0x0004) [0x0000000000000000]              
	struct FString                                     LocCreatePlayerTitle;                             		// 0x0170 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocNameSelectHeader;                              		// 0x017C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocPlayerNameValid;                               		// 0x0188 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocPlayerNameInUse;                               		// 0x0194 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocPlayerNameInvalidChars;                        		// 0x01A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocPlayerNameInvalidWords;                        		// 0x01AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocPlayerNameUnknown;                             		// 0x01B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocPlayerNameTooShort;                            		// 0x01C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocGenderSelectHeader;                            		// 0x01D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocMaleLabel;                                     		// 0x01DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocFemaleLabel;                                   		// 0x01E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __PostCreatePlayer__Delegate;                     		// 0x01F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1829 ];

		return pClassPointer;
	};

	void as_addDropDownMenu ( struct FString HeaderLabel, TArray< struct FString > DataProvider, struct FString ExtInterfaceClickFunc, int SelectedIndex );
	void as_addGenderSelect ( struct FString HeaderLabel, struct FString MaleLabel, struct FString FemaleLabel, struct FString ExtInterfaceMaleClickFunc, struct FString ExtInterfaceFemaleClickFunc );
	struct FString eventas_addDialogButton ( struct FString ButtonLabel, struct FString ExtInterfaceClickFunc, struct FString ExtInterfaceClickArg, unsigned long bHasInput );
	struct FString as_addDialogPanel ( );
	void ei_cancelButtonPressed ( struct FString Arg );
	void ei_acceptButtonPressed ( struct FString Arg, struct FString Arg2 );
	void ei_inputPlayerName ( struct FString NewPlayerName );
	void ei_verifyPlayerName ( struct FString NewPlayerName );
	void ei_selectGenderFemale ( );
	void ei_selectGenderMale ( );
	void ValidatePlayerNameComplete ( struct FUniqueNetId NetId, unsigned long bSuccess, unsigned char InvalidReason );
	void GeneratePlayerNameVerifyTags ( );
	void CreatePlayer ( unsigned long bResult );
	void UpdatePreviewCharacter ( unsigned char NewGender );
	void SetTitleLabel ( struct FString TitleLabel );
	void CleanupOnlineDelegates ( );
	void RegisterOnlineDelegates ( );
	void CloseDialog ( );
	void ShowCreatePlayerDialog ( struct FCreatePlayerDialogBoxProperties Properties );
	void PostCreatePlayer ( unsigned long bComplete, struct FString CommandGroup );
};

UClass* UFoxDialogBoxCreatePlayer::pClassPointer = NULL;

// Class FoxGame.FoxDialogBoxChangeName
// 0x0000 (0x0200 - 0x0200)
class UFoxDialogBoxChangeName : public UFoxDialogBoxCreatePlayer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1830 ];

		return pClassPointer;
	};

	void ei_inputPlayerName ( struct FString NewPlayerName );
	void CloseDialog ( );
	void ShowChangeNameDialog ( struct FChangeNameDialogBoxProperties Properties );
};

UClass* UFoxDialogBoxChangeName::pClassPointer = NULL;

// Class FoxGame.FoxDialogBoxInviteClan
// 0x007C (0x0150 - 0x00D4)
class UFoxDialogBoxInviteClan : public UFoxDialogBoxBase
{
public:
	struct FClanInviteDialogBoxProperties              InviteInfo;                                       		// 0x00D4 (0x004C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LocStringClan;                                    		// 0x0120 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringFrom;                                    		// 0x012C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringFounded;                                 		// 0x0138 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringMembers;                                 		// 0x0144 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1831 ];

		return pClassPointer;
	};

	void eventas_AddName ( struct FString PlayerName, struct FString PlayerTag );
	void eventas_AddDivider ( struct FString Label );
	void eventas_AddClanInvite ( struct FString ClanName, struct FString ClanTag, struct FString Founded, struct FString Members );
	void ei_OnCancelPressed ( struct FString Arg );
	void ei_OnAcceptPressed ( struct FString Arg, struct FString Arg2 );
	void SendInvite ( );
	void CloseDialog ( );
	void SendInviteAccept ( struct FString ClanID );
	void ShowPendingInvite ( );
	void SetDialogBoxProperties ( struct FClanInviteDialogBoxProperties Props );
	void ShowClanInviteDialogBox ( struct FClanInviteDialogBoxProperties Props );
};

UClass* UFoxDialogBoxInviteClan::pClassPointer = NULL;

// Class FoxGame.FoxDialogBoxMessageBase
// 0x000C (0x00E0 - 0x00D4)
class UFoxDialogBoxMessageBase : public UFoxDialogBoxBase
{
public:
	struct FScriptDelegate                             __PostReadMessage__Delegate;                      		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1832 ];

		return pClassPointer;
	};

	void as_addDialogMessageBox ( struct FString BodyText );
	void as_addDialogMessageBoxHeader ( struct FString HeaderLabel );
	void ei_cancelButtonPressed ( );
	void ei_acceptButtonPressed ( );
	void SetDialogFromProperties ( struct FMessageDialogBoxProperties Properties );
	void PostReadMessage ( unsigned long bAccept );
};

UClass* UFoxDialogBoxMessageBase::pClassPointer = NULL;

// Class FoxGame.FoxDialogBoxMessageEULA
// 0x005C (0x013C - 0x00E0)
class UFoxDialogBoxMessageEULA : public UFoxDialogBoxMessageBase
{
public:
	struct FLocalizationEntry                          EULALocalization;                                 		// 0x00E0 (0x0024) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     EULATitleLabel;                                   		// 0x0104 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     EULAFilename;                                     		// 0x0110 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     EULAToggleLabel;                                  		// 0x011C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	int                                                EULAVersion;                                      		// 0x0128 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	TArray< struct FReplaceSubStringEntry >            ReplaceSubStrings;                                		// 0x012C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	class UGFxObject*                                  ConfirmButtonObject;                              		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1833 ];

		return pClassPointer;
	};

	struct FString as_addDialogToggle ( );
	void ei_selectEULAToggle ( unsigned long bEnabled );
	void ei_cancelButtonPressed ( );
	struct FString ResolveEULALocalizationEntry ( struct FString KeyName );
	void NotifyButtonPressed ( unsigned long bResult );
	void SetDialogFromProperties ( struct FMessageDialogBoxProperties Properties );
	struct FString GetFileText ( struct FString FileName );
	void ShowDialog ( struct FMessageDialogBoxProperties Properties );
};

UClass* UFoxDialogBoxMessageEULA::pClassPointer = NULL;

// Class FoxGame.FoxDialogBoxMessageNews
// 0x0044 (0x0124 - 0x00E0)
class UFoxDialogBoxMessageNews : public UFoxDialogBoxMessageBase
{
public:
	struct FNewsDialogBoxProperties                    CurrentProperties;                                		// 0x00E0 (0x0018) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                NextNewsIndex;                                    		// 0x00F8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsClearing : 1;                                  		// 0x00FC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FString                                     TitleLabel;                                       		// 0x0100 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SeperatorLabel;                                   		// 0x010C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ExternalLinkLabel;                                		// 0x0118 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1834 ];

		return pClassPointer;
	};

	void as_clearDialog ( );
	void ei_selectAttachedItem ( struct FString UnlockIDStr );
	void ei_showWebPage ( struct FString URL );
	void ei_cancelButtonPressed ( );
	void ei_acceptButtonPressed ( );
	void addDialogContent ( );
	void ShowNewsItem ( int Index, unsigned long bIgnoreClear );
	void CloseDialog ( );
	void ShowDialog ( struct FNewsDialogBoxProperties Properties );
};

UClass* UFoxDialogBoxMessageNews::pClassPointer = NULL;

// Class FoxGame.FoxItemPurchaseDialogBox
// 0x03C8 (0x049C - 0x00D4)
class UFoxItemPurchaseDialogBox : public UFoxDialogBoxBase
{
public:
	struct FString                                     PositiveBalanceColor;                             		// 0x00D4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NegativeBalanceColor;                             		// 0x00E0 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bUseItemIndicators : 1;                           		// 0x00EC (0x0004) [0x0000000000004002] [0x00000001] ( CPF_Const | CPF_Config )
	unsigned long                                      bCanEquip : 1;                                    		// 0x00EC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bLocked : 1;                                      		// 0x00EC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bEquipBased : 1;                                  		// 0x00EC (0x0004) [0x0000000000000000] [0x00000008] 
	TArray< unsigned char >                            QuantityBasedActivationTypes;                     		// 0x00F0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< unsigned char >                            EquipBasedActivationTypes;                        		// 0x00FC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FStoreMetaData                              StoreItem;                                        		// 0x0108 (0x0090) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FProfilePurchaseInfo                        PurchaseInfo;                                     		// 0x0198 (0x0010) [0x0000000000000000]              
	class UClass*                                      StoreClass;                                       		// 0x01A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FBaseInventoryEntry                         ItemTileEntry;                                    		// 0x01AC (0x0168) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            DurationOptions;                                  		// 0x0314 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPurchaseOptionsDropdown                    DurationDropdown;                                 		// 0x0320 (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      AmountOptions;                                    		// 0x0340 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPurchaseOptionsDropdown                    AmountDropdown;                                   		// 0x034C (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      PurchaseDesignation;                              		// 0x036C (0x0001) [0x0000000000000000]              
	int                                                SelectedPricingIndex;                             		// 0x0370 (0x0004) [0x0000000000000000]              
	int                                                SelectedDurationIndex;                            		// 0x0374 (0x0004) [0x0000000000000000]              
	int                                                SelectedAmountIndex;                              		// 0x0378 (0x0004) [0x0000000000000000]              
	struct FDateTime                                   CurrentTime;                                      		// 0x037C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FDesignationTab >                   DesignationTabList;                               		// 0x0388 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPricingToggleButton >              PricingToggles;                                   		// 0x0394 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  FirstEquipToggle;                                 		// 0x03A0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SecondEquipToggle;                                		// 0x03A4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ConfirmButtonObject;                              		// 0x03A8 (0x0004) [0x0000000000000000]              
	struct FString                                     DialogTitleLabel;                                 		// 0x03AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CurrencyDividerLabel;                             		// 0x03B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DurationDividerLabel;                             		// 0x03C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AmountDividerLabel;                               		// 0x03D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TotalDividerLabel;                                		// 0x03DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CurrentBalanceDividerLabel;                       		// 0x03E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EndBalanceDividerLabel;                           		// 0x03F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EquipNowLabel;                                    		// 0x0400 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EquipNowTooltip;                                  		// 0x040C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UseNowLabel;                                      		// 0x0418 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UseNowTooltip;                                    		// 0x0424 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivateNowLabel;                                 		// 0x0430 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivateNowTooltip;                               		// 0x043C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivateLaterLabel;                               		// 0x0448 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivateLaterTooltip;                             		// 0x0454 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           UnlockCriteriaLabels;                             		// 0x0460 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           PurchaseAmountLabels;                             		// 0x046C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __WorkingDialogShow__Delegate;                    		// 0x0478 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __WorkingDialogHide__Delegate;                    		// 0x0484 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __PostPurchaseItem__Delegate;                     		// 0x0490 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1835 ];

		return pClassPointer;
	};

	struct FString as_addConfirmationButton ( struct FString ButtonLabel, struct FString ButtonTooltip, struct FString ExtInterfaceClickFunc, struct FString ExtInterfaceClickArg, struct FString Transition, unsigned long bDisabled );
	struct FString as_addSecondEquipToggle ( struct FString ButtonLabel, unsigned long bToggle, struct FString ButtonTooltip, struct FString ExtInterfaceClickFunc );
	struct FString as_addFirstEquipToggle ( struct FString ButtonLabel, unsigned long bToggle, struct FString ButtonTooltip, struct FString ExtInterfaceClickFunc );
	void as_remoteSelectDesignationTab ( );
	struct FString as_addDesignationTabSend ( struct FString ButtonLabel, struct FString ButtonTooltip, struct FString ExtInterfaceClickFunc, struct FString ExtInterfaceClickArg );
	struct FString as_addDesignationTabMyself ( struct FString ButtonLabel, struct FString ButtonTooltip, struct FString ExtInterfaceClickFunc, struct FString ExtInterfaceClickArg );
	struct FString as_addAmountToggle ( struct FString ButtonLabel, unsigned long bToggle, struct FString ExtInterfaceClickFunc );
	void eventas_updateAmountDropdown ( TArray< struct FString > Amounts );
	struct FString as_addAmountDropdown ( struct FString ButtonLabel, TArray< struct FString > Amounts, struct FString ExtInterfaceClickFunc, int InitialIndex );
	void eventas_updateDurationDropdown ( TArray< struct FString > Durations );
	struct FString as_addDurationDropdown ( struct FString ButtonLabel, TArray< struct FString > Durations, struct FString ExtInterfaceClickFunc, int InitialIndex );
	struct FString as_addPricingToggleZP ( unsigned long bToggle, struct FString ButtonLabel, struct FString ExtInterfaceClickFunc, struct FString ItemCost, struct FString CurrencyLabel, struct FString OriginalCost, struct FString DiscountPercent, struct FString DiscountColor );
	struct FString as_addPricingToggleGP ( unsigned long bToggle, struct FString ButtonLabel, struct FString ExtInterfaceClickFunc, struct FString ItemCost, struct FString CurrencyLabel, struct FString OriginalCost, struct FString DiscountPercent, struct FString DiscountColor );
	void as_addItemInfo ( struct FBaseInventoryEntry ItemEntry );
	void as_toggleAdvancedOptions ( unsigned long bOpen );
	struct FString as_addDialogPanel ( );
	void ei_cancelButtonPressed ( struct FString Arg );
	void ei_acceptButtonPressed ( struct FString Arg );
	void ei_selectDurationEntry ( struct FString UnusedArg, struct FString DurationIndex );
	void ei_selectAmountEntry ( struct FString UnusedArg, struct FString AmountIndex );
	void ei_selectPricingToggle ( int PricingIndex );
	void ei_selectZPPricing ( );
	void ei_selectGPPricing ( );
	void ei_selectSecondEquipToggle ( );
	void ei_selectFirstEquipToggle ( );
	void ei_selectDesignationTab ( int Index );
	void ui_addDurationDropdown ( );
	void ui_addAmountDropdown ( );
	void ui_addPricingToggle ( int PricingIndex, struct FString PriceChangeColor );
	void ui_addDesignationTab ( struct FString ButtonLabel, struct FString ButtonTooltip, struct FString ExtInterfaceClickFunc, unsigned char Designation, unsigned long bDisabled );
	void ToggleSelectable ( class UGFxObject* ToggleObject, unsigned long bEnabled, struct FString FunctionName );
	void PurchaseItem ( unsigned long bResult );
	bool ApplyDurationOption ( int DurationIndex, TArray< int >* UsableOptions );
	bool ApplyAmountOption ( int AmountIndex, TArray< int >* UsableOptions );
	bool ApplyPricingOption ( int PricingIndex );
	bool TryApplyPurchaseOptions ( int PricingIndex, int DurationIndex, int AmountIndex );
	unsigned char ItemPricingCriteria ( int PricingIndex, int DurationIndex, int AmountIndex );
	bool UpdatePricing ( int PricingIndex, int DurationIndex, int AmountIndex );
	void RefreshPricing ( );
	void UpdateItemTile ( unsigned long bCanPurchase );
	void SetDialogFromProperties ( struct FPurchaseDialogBoxProperties Properties );
	void SetTotalPrice ( int Price, int Balance, unsigned char CurrencyType, float CostMult );
	void SetEndBalanceLabel ( struct FString EndBalanceLabel );
	void SetCurrentBalanceLabel ( struct FString CurrentBalanceLabel );
	void SetTotalDividerLabel ( struct FString TotalLabel );
	void SetAmountDividerLabel ( struct FString AmountLabel );
	void SetCurrencyDividerLabel ( struct FString CurrencyLabel );
	void SetTitleLabel ( struct FString TitleLabel );
	void ZPBalanceChanged ( struct FUniqueNetId ForId, unsigned char LocalUserNum, int ZPBalance );
	void GPBalanceChanged ( struct FUniqueNetId ForId, unsigned char LocalUserNum, int GPBalance );
	void BalancesChanged ( struct FUniqueNetId ForId, unsigned char LocalUserNum, int ZPBalance, int GPBalance );
	void CleanupOnlineDelegates ( );
	void RegisterOnlineDelegates ( );
	void CloseDialog ( );
	void ShowDialog ( struct FPurchaseDialogBoxProperties Properties );
	void PostPurchaseItem ( unsigned long bSuccess, unsigned long bEquip );
	void WorkingDialogHide ( );
	void WorkingDialogShow ( struct FString StatusText );
};

UClass* UFoxItemPurchaseDialogBox::pClassPointer = NULL;

// Class FoxGame.FoxItemRenewDialogBox
// 0x0060 (0x04FC - 0x049C)
class UFoxItemRenewDialogBox : public UFoxItemPurchaseDialogBox
{
public:
	struct FInventoryMetaData                          InventoryItem;                                    		// 0x049C (0x0060) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1836 ];

		return pClassPointer;
	};

	struct FString as_addDesignationTabSend ( struct FString ButtonLabel, struct FString ButtonTooltip, struct FString ExtInterfaceClickFunc, struct FString ExtInterfaceClickArg );
	void PurchaseItem ( unsigned long bResult );
	void ShowRenewDialog ( struct FRenewDialogBoxProperties DialogProperties );
};

UClass* UFoxItemRenewDialogBox::pClassPointer = NULL;

// Class FoxGame.FoxGameSearch
// 0x0010 (0x004C - 0x003C)
class UFoxGameSearch : public UObject
{
public:
	int                                                CachedGameSearchIndex;                            		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineGameSearch*                           Search;                                           		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineGameSettings*                         PendingGameJoinSettings;                          		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAutoJoinGame : 1;                                		// 0x0048 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bArbitratedSearch : 1;                            		// 0x0048 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bProcessingJoin : 1;                              		// 0x0048 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCloseOnError : 1;                                		// 0x0048 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bSpectator : 1;                                   		// 0x0048 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1837 ];

		return pClassPointer;
	};

	void ClearDelegates ( );
	void NullOurReference ( );
	void CleanupSearch ( );
	void CloseGameSearch ( );
	void OnDestroyForGameFailComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool HandleGameJoinFailed ( );
	void LaunchInvalidSearchMessageBox ( );
	void LaunchInvalidJoinMessage ( );
	void FailedToSearch ( );
	void CancelConnectToGame ( unsigned long bAccepted );
	void ConnectToGameWithPassword ( struct FString InPassword );
	void OpenPasswordPrompt ( );
	void TryConnectToGame ( );
	void OnJoinGameComplete ( struct FName SessionName, unsigned long bSuccessful );
	bool ProcessJoinSelection ( int Selection, unsigned long bInSpectator );
	void JoinBestGame ( );
	void TryJoinBestGame ( );
	void OnSearchGamesComplete ( unsigned long bWasSuccessful );
	bool BeginSearchNow ( );
	void OnDestroyForGameSearch ( struct FName SessionName, unsigned long bSuccessful );
	void RefreshSearchResults ( );
	void LaunchSearchMessageBox ( );
	class UOnlineGameSearch* Initialize ( int GameSearchIndex );
};

UClass* UFoxGameSearch::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchQuickJoin
// 0x0000 (0x004C - 0x004C)
class UFoxGameSearchQuickJoin : public UFoxGameSearch
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1838 ];

		return pClassPointer;
	};

	void LaunchInvalidSearchMessageBox ( );
	void NullOurReference ( );
	void OnQuickMatchCancel ( unsigned long bButton );
	void LaunchSearchMessageBox ( );
};

UClass* UFoxGameSearchQuickJoin::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchRanked
// 0x0000 (0x004C - 0x004C)
class UFoxGameSearchRanked : public UFoxGameSearch
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1839 ];

		return pClassPointer;
	};

	void NullOurReference ( );
	bool BeginSearchNow ( );
	void LaunchInvalidSearchMessageBox ( );
	void LaunchSearchMessageBox ( );
};

UClass* UFoxGameSearchRanked::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchServerBrowser
// 0x0000 (0x004C - 0x004C)
class UFoxGameSearchServerBrowser : public UFoxGameSearch
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1840 ];

		return pClassPointer;
	};

	void NullOurReference ( );
	void LaunchInvalidJoinMessage ( );
};

UClass* UFoxGameSearchServerBrowser::pClassPointer = NULL;

// Class FoxGame.FoxGemWidgetBase
// 0x0044 (0x00BC - 0x0078)
class UFoxGemWidgetBase : public UGFxObject
{
public:
	class AFoxPC*                                      PCOwner;                                          		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FGemInfo >                          CachedGems;                                       		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlineStoreInterface*                       StoreInterface;                                   		// 0x0088 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x008C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class AFoxServerConnection*                        ServerConn;                                       		// 0x0090 (0x0004) [0x0000000000000000]              
	class UFoxDataStore_StoreData*                     StoreDataStore;                                   		// 0x0094 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           GemQualityColors;                                 		// 0x0098 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     LocStringGemHours;                                		// 0x00A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringGemDays;                                 		// 0x00B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1841 ];

		return pClassPointer;
	};

	struct FString eventGemLocalize ( struct FString Key );
	void Initialize ( class AFoxPC* SceneOwner );
};

UClass* UFoxGemWidgetBase::pClassPointer = NULL;

// Class FoxGame.FoxGemFusion
// 0x0144 (0x0200 - 0x00BC)
class UFoxGemFusion : public UFoxGemWidgetBase
{
public:
	class UFoxSkillTreeGemSelection*                   GemSelectionObject;                               		// 0x00BC (0x0004) [0x0000000000000000]              
	struct FGemInfo                                    GemA;                                             		// 0x00C0 (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FGemInfo                                    GemB;                                             		// 0x00D8 (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FGemInfo                                    PreviousGemA;                                     		// 0x00F0 (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FGemInfo                                    PreviousGemB;                                     		// 0x0108 (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FInventoryMetaData >                CachedInventoryMetaData;                          		// 0x0120 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bInteractingWithSlotA : 1;                        		// 0x012C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bFusingNode : 1;                                  		// 0x012C (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                ChanceStepperIndex;                               		// 0x0130 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   GemListHelpTextPos;                               		// 0x0134 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	class UGFxObject*                                  GemListHelp;                                      		// 0x013C (0x0004) [0x0000000000000000]              
	struct FString                                     LocStringCombinationSpaceA;                       		// 0x0140 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringCombinationSpaceB;                       		// 0x014C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringClickToAdd;                              		// 0x0158 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRemaining;                               		// 0x0164 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringIncreaseChanceOfSuccess;                 		// 0x0170 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringChanceOfSuccess;                         		// 0x017C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSelectNodes;                             		// 0x0188 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringStartFusion;                             		// 0x0194 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringFree;                                    		// 0x01A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringAddPrimary;                              		// 0x01AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringAddSecondary;                            		// 0x01B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringFuseNodes;                               		// 0x01C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringCongrats;                                		// 0x01D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringListHelp;                                		// 0x01DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UAkEvent*                                    FusionSuccessAkEvent;                             		// 0x01E8 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    FusionFailAkEvent;                                		// 0x01EC (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    FusionIncreaseSuccessChance;                      		// 0x01F0 (0x0004) [0x0000000000000000]              
	TArray< struct FIncreasedFusionChance >            IncreasedFuseChances;                             		// 0x01F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1842 ];

		return pClassPointer;
	};

	void as_FinishAnimSuccess ( );
	void as_FinishAnimFail ( );
	void as_StartFusionAnim ( );
	struct FString as_CreateNodeListHelpText ( int XPos, int YPos );
	void as_HideHelp ( unsigned long bhide );
	void as_ShowResult ( unsigned long bShow );
	void as_UpdateNodeFusionButton ( struct FNodeFusionButtonInfo NewButtonInfo );
	void as_ShowResultSlotInfo ( struct FFusionSlotInfo NewSlotInfo );
	void as_ShowSuccess ( unsigned long bShow );
	void as_ShowFailB ( unsigned long bShow );
	void as_ShowFailA ( unsigned long bShow );
	void as_SetSlotBInfo ( struct FFusionSlotInfo SlotInfo );
	void as_SetSlotAInfo ( struct FFusionSlotInfo SlotInfo );
	void CreateNodeListHelpText ( );
	bool WidgetUnloaded ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void ei_FilterGemList ( int NewFilterIndex );
	void FinishGemFusion ( );
	void GemFusionSuccessful ( struct FString NewGemGuid );
	void PauseFusion ( );
	void GemFusionFailedB ( );
	void GemFusionFailedA ( );
	void OnNodeFusionComplete ( unsigned long bSuccess, struct FString ResultGuid );
	void ClearResultSlotInfo ( );
	void ei_NodeFusionButtonClicked ( );
	int CalculateIncreasedFusionChance ( );
	int CalculateGemFusionChance ( );
	void UpdateFusionButton ( );
	void ClearSlotB ( );
	void ClearSlotA ( );
	int GetNumRemainingOfGem ( struct FGemInfo Gem );
	void SetNewGemInSlot ( unsigned long bSlotA, struct FGemInfo NewGemInfo );
	void ei_NodeListItemClicked ( int SelectedIndex );
	void FilterGemSelectionAndUpdate ( struct FString SlotType );
	void ei_RemoveNodeFromSlotB ( );
	void ei_RemoveNodeFromSlotA ( );
	void ei_SlotClicked ( struct FString SlotType );
	bool AreGemsIdentical ( struct FGemInfo Gem1, struct FGemInfo Gem2 );
	void ei_ChanceStepperChanged ( int NewIndex );
	void BuildChanceStepper ( );
	void Initialize ( class AFoxPC* SceneOwner );
};

UClass* UFoxGemFusion::pClassPointer = NULL;

// Class FoxGame.FoxGemSocketting
// 0x0038 (0x00F4 - 0x00BC)
class UFoxGemSocketting : public UFoxGemWidgetBase
{
public:
	class UFoxSkillTreeGemSelection*                   GemList;                                          		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FGemSlot >                          CachedSockettedGems;                              		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SocketIndexClicked;                               		// 0x00CC (0x0004) [0x0000000000000000]              
	struct FGemInfo                                    PendingSocketGem;                                 		// 0x00D0 (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector2D                                   GemListPanelPos;                                  		// 0x00E8 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	class UAkEvent*                                    SocketAkEvent;                                    		// 0x00F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1843 ];

		return pClassPointer;
	};

	struct FString as_ShowSocketNodeSelection ( int XPos, int YPos );
	void as_SocketNode ( int SocketIndex );
	void as_SetSocketInfo ( int SocketIndex, struct FGemSocketInfo SocketData );
	void ei_FilterGemList ( int NewFilterIndex );
	bool IsCurrentGemSocketExpired ( );
	bool IsCurrentGemSocketEmpty ( );
	int GetIndexOfGemSlotFromSocketIndex ( int SocketIndex );
	bool CanSocketGem ( unsigned char GemType );
	void OnGemActivationComplete ( unsigned long bResult, unsigned char eResult );
	void BeginGemActivation ( );
	void OnGemDestroyed ( struct FString ItemGuid, unsigned long bResult );
	void BeginGemDestruction ( );
	void OnVerifyDestroyGem ( unsigned long bSocketGem );
	void BeginVerifyDestroy ( );
	void ShowActivationDialog ( );
	void ei_GemListClicked ( int GemListIndex );
	void FilterGemList ( );
	void ei_NodeSocketClicked ( struct FString GemSocketIndexString );
	void UpdateSockets ( );
	void Initialize ( class AFoxPC* SceneOwner );
};

UClass* UFoxGemSocketting::pClassPointer = NULL;

// Class FoxGame.FoxSkillTreeGemSelection
// 0x0010 (0x00CC - 0x00BC)
class UFoxSkillTreeGemSelection : public UFoxGemWidgetBase
{
public:
	unsigned char                                      GemListFilterType;                                		// 0x00BC (0x0001) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FGemListItem >                      CachedGemListItems;                               		// 0x00C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1844 ];

		return pClassPointer;
	};

	void eventas_UpdateNodeList ( TArray< struct FGemListItem > Gems );
	void as_SetFilterInfo ( TArray< struct FString > FilterStrings, int StartingIndex, struct FString FunctionCallback );
	void as_FadeOut ( );
	void ei_FilterGemList ( int NewFilterIndex );
	struct FGemInfo GetGemFromListIndex ( int ListIndex );
	void UpdateNodeList ( TArray< struct FGemInfo >* Gems );
	void Initialize ( class AFoxPC* SceneOwner );
};

UClass* UFoxSkillTreeGemSelection::pClassPointer = NULL;

// Class FoxGame.FoxItemDealUI
// 0x0034 (0x0070 - 0x003C)
class UFoxItemDealUI : public UObject
{
public:
	TArray< struct FString >                           OfferTags;                                        		// 0x003C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	float                                              DealDisplayTime;                                  		// 0x0048 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned long                                      bForceUpdate : 1;                                 		// 0x004C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class UFoxUIItemDealWidget*                        ItemDealWidget;                                   		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FStoreOfferMetaData >               StoreOffers;                                      		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CurrentOfferGuid;                                 		// 0x0060 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              CurrentDisplayTime;                               		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1845 ];

		return pClassPointer;
	};

	struct FString as_addItemDealWidget ( int PosX, int PosY );
	void ei_dealTimer ( float DisplayTime );
	void eventShowNextOffer ( unsigned long bUseCurrent );
	bool GetCachedOffers ( );
	void CloseItemDeal ( );
	void ShowItemDeal ( int PosX, int PosY );
	void Cleanup ( );
	void Initialize ( );
};

UClass* UFoxItemDealUI::pClassPointer = NULL;

// Class FoxGame.FoxLobbyUIBase
// 0x023C (0x0278 - 0x003C)
class UFoxLobbyUIBase : public UObject
{
public:
	struct FPlayerListWidget                           Team1ListWidget;                                  		// 0x003C (0x0018) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FPlayerListWidget                           Team2ListWidget;                                  		// 0x0054 (0x0018) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FPlayerListWidget                           PlayerDetailsWidget;                              		// 0x006C (0x0018) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FPlayerButtonContainerWidget                PlayerDetailsButtonContainer;                     		// 0x0084 (0x0034) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	int                                                PreviousLoadoutIndex;                             		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bLoadoutSelectionOpen : 1;                        		// 0x00BC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bTimerActive : 1;                                 		// 0x00BC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bLastWantsTeamChange : 1;                         		// 0x00BC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	int                                                TeamColor1;                                       		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                TeamColor2;                                       		// 0x00C4 (0x0004) [0x0000000000000000]              
	class UFoxPlayerListWidget*                        ScoreList1;                                       		// 0x00C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxPlayerListWidget*                        ScoreList2;                                       		// 0x00CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   ChatPanelPlacement;                               		// 0x00D0 (0x0008) [0x0000000000004000]              ( CPF_Config )
	class UClass*                                      GameClass;                                        		// 0x00D8 (0x0004) [0x0000000000000000]              
	unsigned char                                      LobbyType;                                        		// 0x00DC (0x0001) [0x0000000000000002]              ( CPF_Const )
	TArray< class UFoxDataProvider_MapInfo* >          MapInfos;                                         		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LastLobbyTimer;                                   		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                LastMyTeamScore;                                  		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                LastOtherTeamScore;                               		// 0x00F4 (0x0004) [0x0000000000000000]              
	int                                                LastMyRunningTotalTeamScore;                      		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                LastOtherRunningTotalTeamScore;                   		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                LastNumberOfPlayers;                              		// 0x0100 (0x0004) [0x0000000000000000]              
	struct FUniqueNetId                                ClickedUniqueId;                                  		// 0x0104 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  ChangeTeamsButton;                                		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  FriendsButton;                                    		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  ClanButton;                                       		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  PartyButton;                                      		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  InspectButton;                                    		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  IgnoreButton;                                     		// 0x0120 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  MuteButton;                                       		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  VoteKickButton;                                   		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  ReportPlayerButton;                               		// 0x012C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  LoadoutButton;                                    		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     DisplayedMapName;                                 		// 0x0134 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     DisplayedGameModeName;                            		// 0x0140 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     LocStringTeamScore;                               		// 0x014C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringTieBreaker;                              		// 0x0158 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringPlayers;                                 		// 0x0164 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSay;                                     		// 0x0170 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSelectedAgent;                           		// 0x017C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRank;                                    		// 0x0188 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringPendingPlayer;                           		// 0x0194 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringNext;                                    		// 0x01A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringNextMap;                                 		// 0x01AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringReportPlayer;                            		// 0x01B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringFriend;                                  		// 0x01C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringClan;                                    		// 0x01D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringParty;                                   		// 0x01DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringInspect;                                 		// 0x01E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringIgnore;                                  		// 0x01F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringUnIgnore;                                		// 0x0200 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringMute;                                    		// 0x020C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringUnMute;                                  		// 0x0218 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringAdminKick;                               		// 0x0224 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringVoteKick;                                		// 0x0230 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringVoteKicked;                              		// 0x023C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringVoteKickTitle;                           		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringVoteKickMessage;                         		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringFriendAddedTitle;                        		// 0x0260 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringFriendAddedMessage;                      		// 0x026C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1846 ];

		return pClassPointer;
	};

	void as_UpdateTitleBar ( struct FString NewTitle );
	struct FString as_AddLobbySceneButton ( int XPos, int YPos, struct FString Label, struct FString ToolTip, struct FString ExtFunctName, struct FString ExtArg, struct FString TransitionType );
	void as_RemoveLoadoutScene ( );
	void as_CreateLoadoutScene ( );
	void as_setLoadoutInfo ( TArray< struct FLoadoutData > LoadoutInfo );
	void eventas_setTimerStatus ( unsigned long bShow );
	void eventas_updateInGameTime ( struct FString TimeString );
	void eventas_updateTeam2Score ( int Score );
	void eventas_updateTeam1Score ( int Score );
	void eventas_updateTimerStatus ( struct FString TimerStatusString );
	void eventas_updateMorePlayersStatus ( struct FString MorePlayersString );
	void eventas_showNumPlayers ( int NumPlayers );
	void as_showMaxPlayers ( struct FString MaxPlayersString );
	void as_showMapName ( struct FString MapNameString );
	void as_showGameType ( struct FString GameTypeString );
	void as_addLobbyTopBar ( int XPos, int YPos, int FOV, int YRot, int ZPos, int Opacity );
	void as_showScoreBoard ( );
	void as_displayTeamListBars ( unsigned long bTeamGame );
	struct FString as_addPlayerButton ( struct FString ButtonLabel, struct FString OnClickFunctionName, struct FString ClickArg, struct FString RolloverFunctionName, struct FString RolloverArg, struct FString TransitionType );
	void as_showSelectedPlayerInfo ( int XPos, int YPos, int FOV, int YRot, int ZPos, int Opacity, TArray< struct FString > Options );
	struct FString as_addPlayerList ( int XPos, int YPos, int FOV, int YRot, int ZPos, int Opacity );
	void as_addLobbyPanel ( int XPos, int YPos, int FOV, int YRot, int Opacity, struct FString ExtCleanupFunc );
	void as_updateLobbyInfo ( struct FServerListEntry ItemEntry );
	void AddPlayerButtonContainer ( );
	void ShowSelectedPlayerInfo ( TArray< struct FString > Options );
	void GetClickedPlayerInfo ( struct FPlayerListEntry* ClickedEntry, struct FString* Kills, struct FString* Assists, struct FString* Deaths, struct FString* PointsString, struct FString* KillString, struct FString* AssistsString, struct FString* DeathsString );
	void eventUpdateRunningTotalScoreTeam2 ( );
	void eventUpdateRunningTotalScoreTeam1 ( );
	void ei_LoadoutSelected ( struct FString NewIndexString );
	void ui_CreateLoadoutSelectionUI ( );
	void ei_LoadoutSelectionButtonClicked ( );
	void ui_AddLoadoutSelectionButton ( struct FString Label, struct FString ToolTip, struct FString IconRef, struct FString ButtonID );
	void ui_showGameType ( class UClass* InGameClass );
	void ui_TryChangeTeams ( );
	void UpdateVoteKickButtonFor ( struct FUniqueNetId UniqueId );
	void UpdateMuteButtonFor ( struct FUniqueNetId PlayerID );
	void UpdateIgnoreButtonFor ( struct FUniqueNetId PlayerID );
	void PlayerClicked ( struct FPlayerListEntry* ClickedEntry );
	class UFoxPlayerListWidget* AddPlayerListTeam2 ( );
	class UFoxPlayerListWidget* AddPlayerListTeam1 ( );
	void SetReady ( unsigned long bReady );
	struct FString GetReadyText ( unsigned long bReady );
	bool HasReadyButton ( );
	void UpdatePlayerLists ( );
	void eventUpdateChangeTeamsButton ( unsigned long bHasTeamChangePending );
	void OnVoteKickResponse ( unsigned long bKick );
	void ei_OnKickButtonClicked ( );
	void ei_OnVoteKickButtonClicked ( );
	void ei_OnReportPlayerClicked ( );
	void ei_OnMuteButtonClicked ( );
	void ei_OnIgnoreButtonClicked ( );
	void ei_OnInspectButtonClicked ( );
	void ei_OnPartyButtonClicked ( );
	void ei_OnClanButtonClicked ( );
	void ei_OnFriendsButtonClicked ( );
	void ei_PlayerListClicked2 ( int PlayerIndex );
	void ei_PlayerListClicked1 ( int PlayerIndex );
	void eventSetTimerVisibility ( unsigned long bShow );
	void eventConditionalSetMapName ( );
	void NotifyReceivedGameClass ( );
	void SetMaxPlayers ( );
	void SetupGameTypeSpecificWidgets ( );
	void UpdateLobbyInfo ( );
	void GetMapInfos ( );
	void SetupLobbyWidgets ( );
	void NotifyClosing ( );
	void ui_InitializeLobby ( );
};

UClass* UFoxLobbyUIBase::pClassPointer = NULL;

// Class FoxGame.FoxLobbyUIIntermission
// 0x00EC (0x0364 - 0x0278)
class UFoxLobbyUIIntermission : public UFoxLobbyUIBase
{
public:
	int                                                LastNumPlayersNeededToStart;                      		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastVotesNeeded;                                  		// 0x027C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bVoteCasted : 1;                                  		// 0x0280 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bLastVotingOpen : 1;                              		// 0x0280 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIntermissionEnded : 1;                           		// 0x0280 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bPreviousResultsShown : 1;                        		// 0x0280 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bPreviousStatsShown : 1;                          		// 0x0280 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bForceUpdate : 1;                                 		// 0x0280 (0x0004) [0x0000000000000000] [0x00000020] 
	class UGFxObject*                                  PreviousMatchResultsButton;                       		// 0x0284 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  PreviousMatchStatsButton;                         		// 0x0288 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxPlayerListWidget*                        PreviousResultsList1;                             		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxPlayerListWidget*                        PreviousResultsList2;                             		// 0x0290 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkBank*                                     WaitingForPlayersAkBank;                          		// 0x0294 (0x0004) [0x0000000000000000]              
	class UAkBank*                                     FullPlayersAkBank;                                		// 0x0298 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    WaitingForPlayersStartMusicEvent;                 		// 0x029C (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    WaitingForPlayersEndMusicEvent;                   		// 0x02A0 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    FullPlayersStartMusicEvent;                       		// 0x02A4 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    FullPlayersEndMusicEvent;                         		// 0x02A8 (0x0004) [0x0000000000000000]              
	class UFoxMatchInfoWidget*                         IntermissionInfoWidget;                           		// 0x02AC (0x0004) [0x0000000000000000]              
	unsigned char                                      CurrentMusicState;                                		// 0x02B0 (0x0001) [0x0000000000000000]              
	struct FString                                     LocStringWaitingForPlayers;                       		// 0x02B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringIntermission;                            		// 0x02C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringMatchStarting;                           		// 0x02CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringMatchLoading;                            		// 0x02D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringMatchLoaded;                             		// 0x02E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringClickToSkipMap;                          		// 0x02F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringVoteReceived;                            		// 0x02FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringVoteSkipSuccess;                         		// 0x0308 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringVoteSkipFailure;                         		// 0x0314 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringVotesNeeded;                             		// 0x0320 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringNeedAgents;                              		// 0x032C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringNeedAgent;                               		// 0x0338 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringInProgress;                              		// 0x0344 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringMatch;                                   		// 0x0350 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FVector2D                                   TieBreakerPos;                                    		// 0x035C (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1847 ];

		return pClassPointer;
	};

	struct FString as_ShowTieBreaker ( int XPos, int YPos );
	void ShowIntermissionBars ( );
	void as_hideMapSkipWidget ( );
	void eventas_updateMapSkipText ( struct FString StatusText, struct FString VotesRemainingText, struct FString ExtInterfaceFuncName );
	class UGFxObject* ShowTieBreaker ( );
	void ClearMusicState ( );
	void eventStopIntermissionFullGameMusic ( );
	void StartIntermissionFullGameMusic ( );
	void eventStopIntermissionWaitingForPlayersMusic ( );
	void StartIntermissionWaitingForPlayersMusic ( );
	void StopIntermissionMusic ( );
	void PlayIntermissionMusic ( );
	void ui_StartIntermissionMusic ( );
	void ei_PreviousStatsClicked ( );
	void ui_AddShowPreviousStatsButton ( int XPos, int YPos );
	void as_showNumPlayers ( int NumPlayers );
	void NotifyMapLoaded ( );
	void ei_ReturnToIntermission ( );
	void ei_PreviousResultsButtonClicked ( );
	void ui_ShowPreviousMatchResults ( );
	void AddDebugPreviousMatchResults ( );
	void ui_AddPreviousMatchResultsButton ( struct FString Label, struct FString ToolTip, struct FString IconRef, unsigned long bDebug, struct FString ButtonID );
	void UpdateLobbyInfo ( );
	void eventUpdateMapSkipVoteText ( );
	void ei_CastVote ( );
	void ShowNextMap ( );
	void NotifyMatchCountdownStarted ( );
	void ei_OnEnterLobbyButtonClicked ( );
	void SetupIntermissionInfoWidget ( );
	void SetupGameTypeSpecificWidgets ( );
	void ui_showGameType ( class UClass* InGameClass );
	void SetupLobbyWidgets ( );
	void NotifyClosing ( );
};

UClass* UFoxLobbyUIIntermission::pClassPointer = NULL;

// Class FoxGame.FoxLobbyUIPreGame
// 0x0010 (0x0288 - 0x0278)
class UFoxLobbyUIPreGame : public UFoxLobbyUIBase
{
public:
	int                                                LastGameTimeMinutes;                              		// 0x0278 (0x0004) [0x0000000000000000]              
	int                                                LastGameTimeSeconds;                              		// 0x027C (0x0004) [0x0000000000000000]              
	unsigned long                                      bReadyForBGClose : 1;                             		// 0x0280 (0x0004) [0x0000000000000000] [0x00000001] 
	class UGFxObject*                                  EnterCombatButton;                                		// 0x0284 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1848 ];

		return pClassPointer;
	};

	void OnPreGameLobbyTimerFinished ( );
	void ClosePreGameLobbyUI ( );
	void NotifyMatchStarted ( );
	struct FString GetReadyText ( unsigned long bReady );
	bool HasReadyButton ( );
	void FlashEnterCombatButton ( );
	void SetEnterCombatButtonEnabled ( unsigned long bEnabled );
	void SetReady ( unsigned long bReady );
	void ui_enterGame ( );
	void ui_AddChangeTeamsButton ( struct FString ButtonID );
	void ui_AddEnterCombatButton ( struct FString ColorType, struct FString ButtonID );
	void SetupLobbyWidgets ( );
};

UClass* UFoxLobbyUIPreGame::pClassPointer = NULL;

// Class FoxGame.FoxLobbyUIPause
// 0x0038 (0x02C0 - 0x0288)
class UFoxLobbyUIPause : public UFoxLobbyUIPreGame
{
public:
	struct FString                                     LocStringKills;                                   		// 0x0288 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringAssists;                                 		// 0x0294 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringDeaths;                                  		// 0x02A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringPoints;                                  		// 0x02AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UAkEvent*                                    PauseMenuMusicStartAkEvent;                       		// 0x02B8 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    PauseMenuMusicEndAkEvent;                         		// 0x02BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1849 ];

		return pClassPointer;
	};

	void StopPauseLobbyMusic ( );
	void ui_StartPauseLobbyMusic ( );
};

UClass* UFoxLobbyUIPause::pClassPointer = NULL;

// Class FoxGame.FoxLobbyUIRoundEnd
// 0x000C (0x0284 - 0x0278)
class UFoxLobbyUIRoundEnd : public UFoxLobbyUIBase
{
public:
	struct FString                                     LocStringIntermissionIn;                          		// 0x0278 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1850 ];

		return pClassPointer;
	};

	void SetupLobbyWidgets ( );
};

UClass* UFoxLobbyUIRoundEnd::pClassPointer = NULL;

// Class FoxGame.FoxLoginUI
// 0x0250 (0x028C - 0x003C)
class UFoxLoginUI : public UObject
{
public:
	struct FString                                     LocStringTitle;                                   		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringUser;                                    		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringPass;                                    		// 0x0054 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringUserToolTip;                             		// 0x0060 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringPassToolTip;                             		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringLogin;                                   		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRegister;                                		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSupport;                                 		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringLoginToolTip;                            		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRegisterToolTip;                         		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSupportToolTip;                          		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRegionSelectHeader;                      		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRememberMe;                              		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRememberMeToolTip;                       		// 0x00D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRememberPassword;                        		// 0x00E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRememberPasswordToolTip;                 		// 0x00F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DriverOutOfDateTitle;                             		// 0x00FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DriverVersionLabel;                               		// 0x0108 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DriverLastUpdatedLabel;                           		// 0x0114 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DriverMonthsAgoLabel;                             		// 0x0120 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ServerStatusOffline;                              		// 0x012C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ServerStatusDown;                                 		// 0x0138 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ServerStatusOnline;                               		// 0x0144 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ServerPingUnits;                                  		// 0x0150 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ServerQueueSizeHigh;                              		// 0x015C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ServerQueueSizeLow;                               		// 0x0168 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ServerQueueSizeNone;                              		// 0x0174 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ServerWaitUnitsMin;                               		// 0x0180 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ServerWaitUnitsSec;                               		// 0x018C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PBNoticeLabel;                                    		// 0x0198 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PBNoticeBody;                                     		// 0x01A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SavedUserName;                                    		// 0x01B0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                DriverMonthsOldThreshold;                         		// 0x01BC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FString                                     DefaultLoginFailureCommandGroup;                  		// 0x01C0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FLoginFailureHandler >              LoginFailureHandlers;                             		// 0x01CC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           LoginNoticeColors;                                		// 0x01D8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     RedColor;                                         		// 0x01E4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     YellowColor;                                      		// 0x01F0 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     GreenColor;                                       		// 0x01FC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     BulletPoint;                                      		// 0x0208 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	int                                                LowQueueThreshold;                                		// 0x0214 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                HighQueueThreshold;                               		// 0x0218 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned long                                      bRememberLoginName : 1;                           		// 0x021C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWaitingForLogin : 1;                             		// 0x021C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNeedsEULA : 1;                                   		// 0x021C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsNewUser : 1;                                   		// 0x021C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bHasHashPassword : 1;                             		// 0x021C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bProfileRead : 1;                                 		// 0x021C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bInventoryRead : 1;                               		// 0x021C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bStoreRead : 1;                                   		// 0x021C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bMailRead : 1;                                    		// 0x021C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bInitialRegionSet : 1;                            		// 0x021C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bNeedsInitialRegionSet : 1;                       		// 0x021C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned char                                      PlayerRegion;                                     		// 0x0220 (0x0001) [0x0000000000000000]              
	TArray< struct FRegionListEntry >                  RegionList;                                       		// 0x0224 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DropdownPath;                                     		// 0x0230 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CachedLoginName;                                  		// 0x023C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CachedPassword;                                   		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PendingNoticePopupTitle;                          		// 0x0254 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     PendingNoticePopupBody;                           		// 0x0260 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UGFxObject*                                  NameInputBox;                                     		// 0x026C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  PasswordInputBox;                                 		// 0x0270 (0x0004) [0x0000000000000000]              
	class UFoxDialogBox*                               LoginBox;                                         		// 0x0274 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                QueuePosition;                                    		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                QueueSize;                                        		// 0x027C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                QueueTimer;                                       		// 0x0280 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxUINoticePopupWidget*                     NoticePopupWidget;                                		// 0x0284 (0x0004) [0x0000000000000000]              
	int                                                FirstRespondRegionID;                             		// 0x0288 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1851 ];

		return pClassPointer;
	};

	void eventas_UpdateProviderIndex ( int Index, struct FRegionListEntry InData );
	void as_UpdateProviderArray ( TArray< struct FRegionListEntry > InArray );
	void as_SetHeaderData ( struct FServerDropDownHeaderData InData );
	void as_setSelectedIndex ( int Index );
	struct FString as_addDropDownMenu ( int PosX, int PosY, struct FString ClickInterface, int SelectedIndex );
	void as_addSplashTab ( int XPos, int YPos, struct FString Label, struct FString Icon, struct FString ToolTip, struct FString OnClickFunctionName, struct FString OnClickArg, struct FString ButtonID );
	void as_addRememberButton ( int XPos, int YPos, struct FString ClickCallbackFunction, struct FString ButtonTooltip, int StartingIndex );
	struct FString as_addLoginInputBox ( int XPos, int YPos, struct FString Label, struct FString InitialText, unsigned long bPasswordEnabled, struct FString ButtonTooltip );
	void as_addLoginTitle ( int XPos, int YPos, struct FString LoginString, struct FString Version );
	int eventUpdateSelectedIndex ( );
	void eventServerAvailabilityUpdate ( int RegionID );
	void InitializeDropDownProvider ( );
	void ui_addRegionSelectionMenu ( int PosX, int PosY, struct FString ExtInterfaceClickFunc );
	void ui_AddSupportButton ( );
	void ui_AddRegisterButton ( );
	void ui_AddLoginButton ( );
	void ui_AddRememberPasswordButton ( int XPos, int YPos );
	void ui_AddRememberMeButton ( int XPos, int YPos );
	void ui_AddPasswordInputBox ( int XPos, int YPos );
	void ui_AddLoginInputBox ( int XPos, int YPos );
	void ui_AddLoginTitle ( int XPos, int YPos );
	void ui_AttemptAutoLogin ( );
	void ei_selectRegion ( struct FString UnusedArg, struct FString RegionIndexStr );
	void ei_loginRemoved ( );
	void NameChangeDialogButtonPressed ( unsigned long bResult, struct FString CommandGroup );
	void EULADialogButtonPressed ( unsigned long bResult );
	void OnReadProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void ui_hideNoticePopup ( );
	void ui_showPendingNoticePopup ( int PosX, int PosY );
	void ui_checkPunkBuster ( int PosX, int PosY );
	void eventui_showDriverNoticePopup ( int PosX, int PosY, struct FString DriverName, struct FString DriverVersion, struct FString DriverDate, int MonthsOld );
	void ui_showNoticePopupWarning ( int PosX, int PosY, struct FString TitleLabel, struct FString BodyLabel, unsigned long bLocalize );
	void ui_showNoticePopupError ( int PosX, int PosY, struct FString TitleLabel, struct FString BodyLabel, unsigned long bLocalize );
	void ui_showNoticePopup ( int PosX, int PosY, struct FString TitleLabel, struct FString BodyLabel, struct FString WidgetColor, unsigned long bLocalize );
	void ui_checkEULA ( );
	void ShowPendingNoticePopup ( );
	struct FString BuildDriverOutOfDateBody ( struct FString DriverName, struct FString DriverVersion, struct FString DriverDate, int MonthsOld );
	void ConditionalCreatePlayer ( );
	void ConditionalShowEULA ( );
	void ConditionalContinueLoginProcess ( unsigned long bResult, struct FString FailureReason );
	void ContinueLoginProcess ( );
	void ContinueToMainMenu ( struct FString CommandGroup );
	void OnGetServerAvailability ( unsigned char RegionID, unsigned char AvailabilityCode, int iParam1, int iParam2 );
	bool CheckShouldLoginImmediately ( );
	void eventStartServerTimeOutTimer ( );
	struct FString GetLoginQueueText ( );
	void UpdateQueueTimer ( );
	void OnLoginQueued ( unsigned char LocalUserNum, int NumPlayers, int PositionInQueue, int WaitTime );
	void CheckLoginQueue ( );
	void OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode );
	void ClearInputBox ( class UGFxObject* InputBox );
	void RemoteSelectInputBox ( class UGFxObject* InputBox );
	void CancelLogin ( unsigned long bResult );
	void OnLoginChange ( unsigned char LocalUserNum );
	void NativeLogin ( struct FString UserName, struct FString Password, unsigned long bHashedLogin );
	void BeginLogin ( struct FString UserName, struct FString Password, unsigned long bHashedLogin );
	void ei_OnLoginButtonClicked ( struct FString UserName, struct FString Password );
	void CreatePlayer ( );
	void ei_OnRememberPasswordClicked ( struct FString Selected );
	void ei_OnRememberMeClicked ( struct FString Selected );
	bool GetPasswordFromURL ( struct FString* Password );
	struct FString GetNameFromURL ( );
	void QueryAllServers ( );
	void AddServersToUDPWhitelist ( );
	void ui_LoadDLC ( );
	void ClearOnlineDelegates ( );
	void RegisterOnlineDelegates ( );
	void Cleanup ( );
	void Initialize ( );
};

UClass* UFoxLoginUI::pClassPointer = NULL;

// Class FoxGame.FoxMatchInfoWidget
// 0x00D4 (0x014C - 0x0078)
class UFoxMatchInfoWidget : public UGFxObject
{
public:
	class AFoxPC*                                      PCOwner;                                          		// 0x0078 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   Placement;                                        		// 0x007C (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FString                                     symbolname;                                       		// 0x0084 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     LocStringETA;                                     		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringEnter;                                   		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringLeave;                                   		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringEnterToolTip;                            		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringLeaveToolTip;                            		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringReturnToLobby;                           		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringReturnToLobbyToolTip;                    		// 0x00D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bAutoCountDown : 1;                               		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              ETASecondsRemaining;                              		// 0x00E8 (0x0004) [0x0000000000000000]              
	struct FMatchInfoData                              CachedData;                                       		// 0x00EC (0x0060) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1852 ];

		return pClassPointer;
	};

	void as_showTimer ( unsigned long bShow );
	void as_SetFlash ( unsigned long bFlash );
	void as_HideLeaveButton ( );
	void as_HideEnterButton ( );
	void as_AddLeaveButton ( struct FString Label, struct FString ToolTip, struct FString CallbackFuncName, struct FString CallbackArg );
	void as_AddEnterButton ( struct FString Label, struct FString ToolTip, struct FString CallbackFuncName, struct FString CallbackArg );
	void eventas_SetData ( struct FMatchInfoData MatchData );
	void AddReturnToLobbyButton ( struct FString CallbackFuncName );
	void AddLeaveButton ( struct FString CallbackFuncName );
	void AddEnterButton ( struct FString CallbackFuncName );
	void eventUpdateNeed ( struct FString NewNeedString );
	void eventUpdateNumPlayers ( int NumPlayers );
	void eventUpdateQueue ( struct FString NewQueue );
	void eventUpdateStatus ( struct FString NewStatusString );
	struct FString BuildTimeString ( int InSecondsRemaining );
	void eventUpdateETADisplay ( int InSecondsRemaining );
	void eventUpdateETA ( int TotalSecondsRemaining, unsigned long bInAutoCountDown );
	void eventUpdateGameMode ( struct FString NewGameMode );
	void eventUpdateTitle ( struct FString NewTitle );
	void SetupData ( struct FString Title, struct FString GameMode, int MaxPlayers );
	void Initialize ( );
};

UClass* UFoxMatchInfoWidget::pClassPointer = NULL;

// Class FoxGame.FoxMenuBackgroundUI
// 0x0014 (0x01A8 - 0x0194)
class UFoxMenuBackgroundUI : public UZeMovieBase
{
public:
	class AFoxPC*                                      PCOwner;                                          		// 0x0194 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bFadingOut : 1;                                   		// 0x0198 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FScriptDelegate                             __OnFadedInDelegate__Delegate;                    		// 0x019C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1853 ];

		return pClassPointer;
	};

	void as_HideTriangles ( );
	void as_ShowTriangles ( );
	void as_RemoveArmoryBox ( );
	void as_PlaceArmoryBox ( );
	void eventas_UpdateResolution ( );
	void as_FadeOut ( );
	void SetShowTriangles ( unsigned long bShow );
	void UpdateTriangleVisibility ( );
	void ei_BackgroundFadeInDone ( );
	void ei_BackgroundDone ( );
	void FadeOut ( );
	void Initialize ( );
	void OnFadedInDelegate ( );
};

UClass* UFoxMenuBackgroundUI::pClassPointer = NULL;

// Class FoxGame.FoxMovieUIInteraction
// 0x0008 (0x0084 - 0x007C)
class UFoxMovieUIInteraction : public UGFxInteraction
{
public:
	float                                              InputIdleKickTimeSeconds;                         		// 0x007C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastInputTimeSeconds;                             		// 0x0080 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1854 ];

		return pClassPointer;
	};

};

UClass* UFoxMovieUIInteraction::pClassPointer = NULL;

// Class FoxGame.FoxPlayerListWidget
// 0x00A4 (0x011C - 0x0078)
class UFoxPlayerListWidget : public UGFxObject
{
public:
	struct FString                                     LocStringPingMs;                                  		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringKillDeathRatio;                          		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringScore;                                   		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringDeaths;                                  		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringKills;                                   		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringAssists;                                 		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringDefends;                                 		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringAttacks;                                 		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringCaptures;                                		// 0x00D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringTagsCollected;                           		// 0x00E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringHacks;                                   		// 0x00F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringIgnored;                                 		// 0x00FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class AFoxPC*                                      PCOwner;                                          		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ListIndex;                                        		// 0x010C (0x0004) [0x0000000000000000]              
	TArray< struct FPlayerListEntry >                  CachedEntries;                                    		// 0x0110 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1855 ];

		return pClassPointer;
	};

	void as_ShowStats ( unsigned long bShow );
	void as_UpdateListIndex ( int Index, struct FPlayerListEntry Entry );
	void as_UpdateEntireList ( TArray< struct FPlayerListEntry > Entries );
	void eventUpdateListIndex ( int Index );
	void eventUpdateEntireList ( );
	void UpdateListWithNewEntries ( TArray< struct FPlayerListEntry >* NewEntries );
};

UClass* UFoxPlayerListWidget::pClassPointer = NULL;

// Class FoxGame.FoxPreviewUI
// 0x0018 (0x01AC - 0x0194)
class UFoxPreviewUI : public UZeMovieBase
{
public:
	class UGFxObject*                                  MyNode;                                           		// 0x0194 (0x0004) [0x0000000000000000]              
	class APlayerController*                           MyPC;                                             		// 0x0198 (0x0004) [0x0000000000000000]              
	struct FRotator                                    AdjustAllMatrixRotation;                          		// 0x019C (0x000C) [0x0000000000000000]              
	class AActor*                                      MyActor;                                          		// 0x01A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1856 ];

		return pClassPointer;
	};

	void eventPostWidgetInit ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void as_placeArmoryNodeDetail ( int XPos, int YPos, float XRot, float YRot, float Width, float Height, struct FString postion, struct FString NodeName, TArray< struct FString > StatNameArray, TArray< int > StatNumArray, TArray< int > CurrentStatNumArray );
	void as_removeArmoryNodes ( );
	void as_scaleArmory ( float NewScale, float AdjustTime );
	void as_hideArmoryNode ( int Index );
	void as_moveArmoryNode ( int Index, int XPos, int YPos, float AdjustTime );
	void as_placeArmoryNode ( struct FString ModType, struct FString ModName );
	void as_rotateScratchPanel ( float XRot, float YRot, float AdjustTime );
	void as_placeScratchPanel ( int XPos, int YPos, float XRot, float YRot );
};

UClass* UFoxPreviewUI::pClassPointer = NULL;

// Class FoxGame.FoxPrivateMatchCreateUI
// 0x00E8 (0x0160 - 0x0078)
class UFoxPrivateMatchCreateUI : public UGFxObject
{
public:
	class UGFxObject*                                  ServerSettingsObj;                                		// 0x0078 (0x0004) [0x0000000000000000]              
	class AFoxPC*                                      PCOwner;                                          		// 0x007C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ServerNameBox;                                    		// 0x0080 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  PasswordBox;                                      		// 0x0084 (0x0004) [0x0000000000000000]              
	unsigned long                                      bCreatingMatch : 1;                               		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bRandomGameType : 1;                              		// 0x0088 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bRandomMapType : 1;                               		// 0x0088 (0x0004) [0x0000000000000000] [0x00000004] 
	TArray< struct FString >                           PlaylistNames;                                    		// 0x008C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      PingThresholds;                                   		// 0x0098 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< float >                                    CPMultipliers;                                    		// 0x00A4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      TimeLimits;                                       		// 0x00B0 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< float >                                    GoalScoreMultipliers;                             		// 0x00BC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	int                                                PlaylistSelectedIndex;                            		// 0x00C8 (0x0004) [0x0000000000000000]              
	int                                                MaxPlayers;                                       		// 0x00CC (0x0004) [0x0000000000000000]              
	int                                                MaxSpectators;                                    		// 0x00D0 (0x0004) [0x0000000000000000]              
	class UFoxDataStore_Playlists*                     PlaylistsDataStore;                               		// 0x00D4 (0x0004) [0x0000000000000000]              
	class UFoxDataStore_MenuItems*                     MenuItemsDataStore;                               		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                MutatorsEnabled[ 0xB ];                           		// 0x00DC (0x002C) [0x0000000000004000]              ( CPF_Config )
	class UGFxObject*                                  MinLevelWidget;                                   		// 0x0108 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  MaxLevelWidget;                                   		// 0x010C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  MaxCPWidget;                                      		// 0x0110 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  StartingCPWidget;                                 		// 0x0114 (0x0004) [0x0000000000000000]              
	int                                                MaxBotsIndex;                                     		// 0x0118 (0x0004) [0x0000000000000000]              
	int                                                PingDropIndex;                                    		// 0x011C (0x0004) [0x0000000000000000]              
	int                                                CPMultiplierIndex;                                		// 0x0120 (0x0004) [0x0000000000000000]              
	int                                                MinLevel;                                         		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                MaxLevel;                                         		// 0x0128 (0x0004) [0x0000000000000000]              
	int                                                TimeLimitIndex;                                   		// 0x012C (0x0004) [0x0000000000000000]              
	int                                                GoalScoreMultiplierIndex;                         		// 0x0130 (0x0004) [0x0000000000000000]              
	class UFoxSettingsWidget*                          MutatorToggleWidgets[ 0xB ];                      		// 0x0134 (0x002C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1857 ];

		return pClassPointer;
	};

	struct FString as_AddMutatorToggleFullSize ( struct FString Label, unsigned long bToggleOn, struct FString ToolTip, struct FString ExtClickFunc, struct FString ExtArg, unsigned long bDisabled );
	struct FString as_AddMutatorToggle ( struct FString Label, unsigned long bToggleOn, struct FString ToolTip, struct FString ExtClickFunc, struct FString ExtArg, unsigned long bDisabled );
	void as_AddMutatorHeader ( struct FString Label );
	struct FString as_AddDoubleInputBox ( struct FDoubleInputBoxInfo InBoxInfo );
	struct FString as_AddInputBox ( struct FString Label, struct FString ToolTip, int MaxChars, struct FString DefaultText, struct FString ActualText, struct FString InputFunc, struct FString RestrictString, unsigned long bDisabled );
	struct FString as_AddDropDown ( struct FString Label, struct FString ToolTip, TArray< struct FString > InData, struct FString ExtClickFunc, int InitialIndex, unsigned long bDisabled );
	void as_SetOptionsListHeader ( struct FString HeaderLabel );
	void as_ClearListInfo ( );
	struct FString as_QueryPassword ( );
	struct FString as_QueryServerTitle ( );
	void as_UpdateGameTypeList ( TArray< struct FPlaylistListData > NewData );
	void as_updateMapList ( TArray< struct FPlaylistListData > NewData );
	struct FString as_AddServerNameBox ( struct FString Label, int MaxChars, struct FString DefaultText, struct FString ActualText, struct FString InputFunctionCallback, unsigned long bDisabled );
	struct FString as_AddPasswordBox ( struct FString Label, struct FString DefaultText, unsigned long bIsPassword, int MaxChars, unsigned long bDisabled );
	struct FString as_AddPasswordToggle ( struct FString Label, unsigned long bToggleOn, struct FString ToolTip, struct FString ClickCallbackFunc, unsigned long bDisabled );
	struct FString as_SetupCloseButton ( struct FString Label, struct FString ToolTip, struct FString ClickCallbackFunc, unsigned long bDisabled );
	struct FString as_SetupActivateButton ( struct FString Label, struct FString ToolTip, struct FString ClickCallbackFunc, unsigned long bDisabled );
	struct FString as_SetupModeDropDown ( struct FString Label, TArray< struct FString > Data, struct FString ClickCallbackFunc, int InitialIndex, unsigned long bDisabled );
	struct FString as_SetupNumSpectatorsDropDown ( struct FString Label, TArray< struct FString > Data, struct FString ClickCallbackFunc, int InitialIndex, unsigned long bDisabled );
	struct FString as_SetupNumPlayersDropDown ( struct FString Label, TArray< struct FString > Data, struct FString ClickCallbackFunc, int InitialIndex, unsigned long bDisabled );
	struct FString as_SetupGameTypeDropDown ( struct FString Label, TArray< struct FString > GameTypeNames, struct FString ClickCallbackFunc, int InitialIndex, unsigned long bDisabled );
	struct FString as_SetupMapDropDown ( struct FString Label, TArray< struct FString > MapNames, struct FString ClickCallbackFunc, int InitialIndex, unsigned long bDisabled );
	struct FString as_SetupPlaylistDropDown ( struct FString Label, TArray< struct FString > InPlaylistNames, struct FString ClickCallbackFunc, int InitialIndex, unsigned long bDisabled );
	void as_SetupPremiumButton ( struct FPremiumButtonInfo Info );
	struct FString as_SetGametypeDropInfo ( struct FString Label, TArray< struct FString > GameTypes, struct FString ExtClickFunc, int InitialIndex, unsigned long bDisabled );
	struct FString as_SetMapDropInfo ( struct FString Label, TArray< struct FString > MapNames, struct FString ExtClickFunc, int InitialIndex, unsigned long bDisabled );
	struct FString LocalizeMenuString ( struct FString StringID );
	void ei_MutatorToggleChanged ( struct FString ArgString, unsigned long bEnabled );
	void ei_MaxBotsChanged ( struct FString UnusedArg, struct FString NewSelectedIndex );
	void ei_PingDropDownChanged ( struct FString UnusedArg, struct FString NewSelectedIndex );
	void ei_CPMultiplierDropDownChanged ( struct FString UnusedArg, struct FString NewSelectedIndex );
	void ei_MaxLevelChanged ( struct FString UnusedArg, struct FString NewSelectedIndex );
	void ei_MinLevelChanged ( struct FString UnusedArg, struct FString NewSelectedIndex );
	void ei_GoalScoreMultiplierChanged ( struct FString UnusedArg, struct FString NewSelectedIndex );
	void ei_TimeLimitChanged ( struct FString UnusedArg, struct FString NewSelectedIndex );
	void ei_CloseCreateServerClick ( );
	void LaunchPrivateMatchFailMessage ( );
	bool HandleGameCreateFailed ( struct FString ErrorMessage );
	void OnCreatePrivateMatchComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnPrivateMatchCreateCancel ( unsigned long bCancel );
	void ShowInvalidCharactersInPasswordDialog ( );
	bool IsPasswordAlphaNumeric ( struct FString Password );
	void ShowInvalidPasswordDialog ( );
	void BuildPlaylistSettings ( int* OutSettingsData );
	void CreateCustomGame ( );
	void ei_ActivateServerClick ( );
	void ei_GameTypeDropDownClicked ( struct FString UnusedArg, struct FString NewIndexString );
	void ei_MapDropDownClicked ( struct FString UnusedArg, struct FString NewIndexString );
	void ei_NumPlayersChanged ( struct FString UnusedArg, struct FString NewIndexString );
	void ei_NumSpectatorsChanged ( struct FString UnusedArg, struct FString NewIndexString );
	void ei_PlaylistSelected ( struct FString UnusedArg, struct FString PlaylistIndexString );
	void BuildPlaylistNames ( );
	void AddMutatorToggle ( unsigned char MutatorType, struct FString Label, struct FString ToolTip, unsigned long bFullSize );
	void SetupPremiumOptions ( );
	void Initialize ( );
};

UClass* UFoxPrivateMatchCreateUI::pClassPointer = NULL;

// Class FoxGame.FoxReportBaseUI
// 0x00E8 (0x0160 - 0x0078)
class UFoxReportBaseUI : public UGFxObject
{
public:
	class AFoxPC*                                      PCOwner;                                          		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FUniqueNetId                                ForAccountID;                                     		// 0x007C (0x0008) [0x0000000000000000]              
	struct FString                                     LocStringTitle;                                   		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringInstructions;                            		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringReason;                                  		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringSummary;                                 		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBodyDefault;                             		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringReason1;                                 		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringReason2;                                 		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringReason3;                                 		// 0x00D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringReason4;                                 		// 0x00E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringReason5;                                 		// 0x00F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringReason6;                                 		// 0x00FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringConfirm;                                 		// 0x0108 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringConfirmToolTip;                          		// 0x0114 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringCancel;                                  		// 0x0120 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringCancelToolTip;                           		// 0x012C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ReasonStrings;                                    		// 0x0138 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ReasonTags;                                       		// 0x0144 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                MaxBodyChars;                                     		// 0x0150 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UGFxObject*                                  ConfirmButton;                                    		// 0x0154 (0x0004) [0x0000000000000000]              
	unsigned long                                      bInSocialMenu : 1;                                		// 0x0158 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                ReasonIndex;                                      		// 0x015C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1858 ];

		return pClassPointer;
	};

	void as_RemoveReportUI ( );
	struct FString as_addConfirmationButton ( struct FString Label, struct FString ToolTip, struct FString ClickInterfaceCallback, struct FString ClickArg, struct FString TransitionType, unsigned long bDisabled );
	struct FString as_GetBodyText ( );
	void as_SetReasonInfo ( TArray< struct FReportReason > Reasons );
	void ei_OnCancelReport ( );
	void ei_OnConfirmReport ( );
	void ei_OnReportReasonClicked ( struct FString ReasonIndexString );
	void Initialize ( class AFoxPC* InPCOwner, struct FUniqueNetId InForAccountID, unsigned long bSocialMenu );
};

UClass* UFoxReportBaseUI::pClassPointer = NULL;

// Class FoxGame.FoxReportBugUI
// 0x0000 (0x0160 - 0x0160)
class UFoxReportBugUI : public UFoxReportBaseUI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1859 ];

		return pClassPointer;
	};

	void CloseReport ( );
	void ei_OnCancelReport ( );
	void ei_OnConfirmReport ( );
};

UClass* UFoxReportBugUI::pClassPointer = NULL;

// Class FoxGame.FoxReportPlayerUI
// 0x0064 (0x01C4 - 0x0160)
class UFoxReportPlayerUI : public UFoxReportBaseUI
{
public:
	struct FString                                     LocStringReportPlayer;                            		// 0x0160 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringVerify;                                  		// 0x016C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VerifyingPlayerTitle;                             		// 0x0178 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VerifyingPlayerMessage;                           		// 0x0184 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VerifyPlayerSuccessTitle;                         		// 0x0190 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VerifyPlayerSuccessMessage;                       		// 0x019C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VerifyPlayerFailTitle;                            		// 0x01A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VerifyPlayerFailMessage;                          		// 0x01B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bSendReportAfterVerification : 1;                 		// 0x01C0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1860 ];

		return pClassPointer;
	};

	struct FString as_GetPlayerName ( );
	struct FString as_AddPlayerNameInfoBox ( struct FString Label, struct FString VerifyButtonLabel, struct FString VerifyButtonCallback, int MaxCharacters );
	void OnGetUniqueIdOfPlayerByName ( unsigned long bSuccess, struct FUniqueNetId ResultId );
	void VerifyPlayer ( unsigned long bSendAfterVerify );
	void ei_OnVerifyPlayerClicked ( struct FString PlayerName );
	void ui_AddPlayerNameInfoBox ( );
	void CloseReport ( );
	void ei_OnCancelReport ( );
	struct FString BuildReportLogString ( struct FString BodyText );
	void SendReport ( );
	void ei_OnConfirmReport ( );
};

UClass* UFoxReportPlayerUI::pClassPointer = NULL;

// Class FoxGame.FoxServerBrowserUI
// 0x00A4 (0x00E0 - 0x003C)
class UFoxServerBrowserUI : public UObject
{
public:
	struct FString                                     ServerBrowserLocalizationSectionName;             		// 0x003C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RefreshCommandGroupName;                          		// 0x0048 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RefreshFailCommandGroupName;                      		// 0x0054 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PostRefreshCommandGroupName;                      		// 0x0060 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      InitialSortPriorities;                            		// 0x006C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FServerListSortInfo >               SortDropdownEntries;                              		// 0x0078 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CreateMatchButtonID;                              		// 0x0084 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ServerBrowserButtonID;                            		// 0x0090 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UFoxUIModalDialogWidget*                     ModalDialogWidget;                                		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                InitialSortIndex;                                 		// 0x00A0 (0x0004) [0x0000000000000000]              
	class UFoxUIServerListWidget*                      ServerListWidget;                                 		// 0x00A4 (0x0004) [0x0000000000000000]              
	class UFoxUIServerDetailsWidget*                   DetailsWidget;                                    		// 0x00A8 (0x0004) [0x0000000000000000]              
	class UFoxUIServerFilterWidget*                    ServerFilterWidget;                               		// 0x00AC (0x0004) [0x0000000000000000]              
	class UFoxDataStore_GameSearchAll*                 GameSearchDataStore;                              		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                SelectedServerIndex;                              		// 0x00B4 (0x0004) [0x0000000000000000]              
	TArray< struct FServerListTab >                    ServerListTabs;                                   		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectedTabIndex;                                 		// 0x00C4 (0x0004) [0x0000000000000000]              
	TArray< struct FRegionListEntry >                  RegionList;                                       		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      InitialPlayerRegion;                              		// 0x00D4 (0x0001) [0x0000000000000000]              
	unsigned char                                      SelectedPlayerRegion;                             		// 0x00D5 (0x0001) [0x0000000000000000]              
	class UGFxObject*                                  CreateServerButton;                               		// 0x00D8 (0x0004) [0x0000000000000000]              
	class UFoxPrivateMatchCreateUI*                    PrivateMatchCreation;                             		// 0x00DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1861 ];

		return pClassPointer;
	};

	struct FString as_AddServerSettings ( int XPos, int YPos );
	void as_RemovePrivateMatchScene ( );
	void as_RemoveServerPage ( );
	void as_placeLobbyHorizLines ( struct FString instancename, int PosX, int PosY );
	struct FString as_addServerList ( int PosX, int PosY, int PerspFOV, int RotationY, int PosZ, int Opacity );
	void as_addServerButton ( struct FString ButtonLabel, struct FString ClickFunc, struct FString ClickArg, struct FString RolloverFunctionName, struct FString RolloverArg, struct FString TransitionType );
	void as_addLobbyAmount ( );
	struct FString as_addServerFilters ( );
	void as_addLobbySortDropDown ( int PosX, int PosY, struct FString HeaderLabel, TArray< struct FString > DataProvider, struct FString ExtInterfaceClickFunc, int SelectedIndex );
	struct FString as_addLobbyDropDown ( TArray< struct FString > DataProvider, struct FString ExtInterfaceClickFunc, int SelectedIndex );
	void as_remoteSelectTab ( );
	struct FString as_addTextTab ( struct FString ButtonLabel, struct FString ButtonTooltip, struct FString ExtInterfaceClickFunc, struct FString extInterfaceArg, struct FString Transition );
	void as_addLobbyPanel ( int PosX, int PosY, float PerspFOV, float RotationY, int Opacity );
	void ei_refreshServers ( );
	void ei_joinServer ( struct FString SpectatorString );
	void ei_toggleEmpty ( unsigned long bFilter );
	void ei_toggleFull ( unsigned long bFilter );
	void FilterChanged ( );
	void ei_selectSort ( struct FString UnusedArg, struct FString SortIndexStr );
	void ei_selectRegion ( struct FString UnusedArg, struct FString RegionIndexStr );
	void ei_selectTab ( struct FString TabIndex );
	void ui_refreshServers ( );
	void ui_hideModalDialog ( );
	void ui_showModalDialog ( int PosX, int PosY, struct FString WidgetLabel, struct FString DetailLabel );
	void ui_addServerFilters ( );
	void ui_addSortDropDown ( int PosX, int PosY, struct FString HeaderLabel, struct FString ExtInterfaceClickFunc, int SelectedIndex );
	void ui_addRegionDropDown ( struct FString ExtInterfaceClickFunc );
	void ui_addServerList ( int PosX, int PosY, int PerspFOV, int RotationY, int PosZ, int Opacity, struct FString ExtInterfaceClickFunc, struct FString ExtInterfaceDblClickFunc );
	struct FString as_addServerDetail ( int XPos, int YPos );
	void ui_addServerDetail ( int XPos, int YPos );
	void ui_addTextTab ( struct FString ButtonLabel, struct FString ButtonTooltip, struct FString ExtInterfaceClickFunc, unsigned long bDisabled );
	void UpdateServerList ( unsigned char Status, unsigned long bPostRefresh );
	void CancelFindOnlineGamesComplete ( unsigned long bSuccess );
	void FindOnlineGamesComplete ( unsigned long bSuccess );
	void FindOnlineGames ( struct FString Param );
	void RefreshServers ( );
	void JoinServerEntry ( int ServerIndex, unsigned long bJoinAsSpectator );
	void SelectJoinServerEntry ( struct FServerListEntry ServerEntry );
	void SelectServerEntry ( struct FServerListEntry ServerEntry, unsigned long bJoin );
	void SelectRegionIndex ( int RegionIndex );
	void ClosePrivateMatchScene ( );
	void SetupPrivateMatchScene ( );
	void ui_PrivateServerButtonClick ( );
	void ui_AddCreateServerButton ( );
	void SelectTabIndex ( int TabIndex );
	void ClearDelegates ( );
	bool ChangeRegion ( unsigned char PlayerRegion );
	void Cleanup ( );
	void Initialize ( );
};

UClass* UFoxServerBrowserUI::pClassPointer = NULL;

// Class FoxGame.FoxSettingsUIBase
// 0x00C8 (0x0104 - 0x003C)
class UFoxSettingsUIBase : public UObject
{
public:
	class UClass*                                      NextSettingsClass;                                		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxProfileSettings*                         ProfileSettings;                                  		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     SettingsLocalizationSectionName;                  		// 0x0044 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	int                                                NumSettings;                                      		// 0x0050 (0x0004) [0x0000000000000000]              
	TArray< float >                                    OriginalVals;                                     		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    CurrentVals;                                      		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    DefaultVals;                                      		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UFoxSettingsWidget* >                SettingsWidgets;                                  		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           EnabledDisabledStrings;                           		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ActiveInactiveStrings;                            		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           VisibleHiddenStrings;                             		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           NumberStepperOfThroughMax;                        		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FButtonContainerWidget                      SettingsContainerProperties;                      		// 0x00B4 (0x0028) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FButtonContainerWidget                      SettingsDividerContainerProperties;               		// 0x00DC (0x0028) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1862 ];

		return pClassPointer;
	};

	void as_placeHorizLinesSettings ( struct FString instancename, int PosX, int PosY );
	struct FString as_addSettingsDropDownMenu ( struct FString Label, struct FString ToolTip, TArray< struct FString > Data, struct FString extClickInterfaceFunc, int InitializeIndex );
	void as_addSettingsButton ( struct FString Label, struct FString ToolTip, unsigned long bIsLoginButton, struct FString extClickInterfaceFunc, struct FString extClickInterfaceArg );
	bool HasSettingsChanged ( );
	void ei_ApplyChanges ( );
	void SaveChanges ( );
	void ei_ResetToDefaults ( );
	void ei_RevertChanges ( unsigned long bSkipUpdate );
	void ApplyChanges ( );
	void ei_SettingChanged ( struct FString WidgetIndexString, struct FString NewSelectedIndexString );
	void OnSettingsClose ( );
	void BeginClose ( );
	void TryClose ( class UClass* TheNextSettingsClass );
	void GetDefaultVals ( );
	void GetOriginalVals ( );
	void SetupButtonContainer ( );
	void SetupSettingsScene ( );
	void SetupStrings ( );
	void Initialize ( );
};

UClass* UFoxSettingsUIBase::pClassPointer = NULL;

// Class FoxGame.FoxSettingsUIAccount
// 0x0000 (0x0104 - 0x0104)
class UFoxSettingsUIAccount : public UFoxSettingsUIBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1863 ];

		return pClassPointer;
	};

	void AddOptionToggle ( struct FString Label, struct FString ToolTip, struct FString extInterfaceArg, int SelectedIndex );
	void AddOptionStepper ( struct FString Label, struct FString ToolTip, struct FString extInterfaceArg, int SelectedIndex, TArray< struct FString >* Data );
	void ApplyChanges ( );
	void GetDefaultVals ( );
	void GetOriginalVals ( );
	void SetupSettingsScene ( );
};

UClass* UFoxSettingsUIAccount::pClassPointer = NULL;

// Class FoxGame.FoxSettingsUIAudio
// 0x0044 (0x0148 - 0x0104)
class UFoxSettingsUIAudio : public UFoxSettingsUIBase
{
public:
	class UFoxProfileSettingsPC*                       PCProfileSettings;                                		// 0x0104 (0x0004) [0x0000000000000000]              
	struct FButtonContainerWidget                      VOIPContainerProperties;                          		// 0x0108 (0x0028) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector                                     VOIPDividerPos;                                   		// 0x0130 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector                                     AstroDividerPos;                                  		// 0x013C (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1864 ];

		return pClassPointer;
	};

	void ApplyChanges ( );
	void GetDefaultVals ( );
	void GetOriginalVals ( );
	void ei_SettingChanged ( struct FString WidgetIndexString, struct FString NewSelectedIndexString );
	void SetupSettingsScene ( );
};

UClass* UFoxSettingsUIAudio::pClassPointer = NULL;

// Class FoxGame.FoxSettingsUIControls
// 0x0000 (0x0104 - 0x0104)
class UFoxSettingsUIControls : public UFoxSettingsUIBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1865 ];

		return pClassPointer;
	};

	void ei_TightAimSensitivityChanged ( struct FString NewValueString );
	void ei_MouseSensitivityChanged ( struct FString NewValueString );
	void ApplyChanges ( );
	void GetDefaultVals ( );
	void GetOriginalVals ( );
	void SetupSettingsScene ( );
};

UClass* UFoxSettingsUIControls::pClassPointer = NULL;

// Class FoxGame.FoxSettingsUIGameplay
// 0x00E4 (0x01E8 - 0x0104)
class UFoxSettingsUIGameplay : public UFoxSettingsUIBase
{
public:
	unsigned long                                      bReset : 1;                                       		// 0x0104 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     HDTestStartLabel;                                 		// 0x0108 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HDTestStopLabel;                                  		// 0x0114 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HDTestPerfLabel;                                  		// 0x0120 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HDTestPerfSpeedLabel;                             		// 0x012C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HDTestTooltipLabel;                               		// 0x0138 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HDTestProgressLabel;                              		// 0x0144 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HDTestCompleteLabel;                              		// 0x0150 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HDTestDetectedLabel;                              		// 0x015C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxObject*                                  HDTestObject;                                     		// 0x0168 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  HDTestToggle;                                     		// 0x016C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxSettingsWidgetCrosshair*                 MenuCrosshairs[ 0x4 ];                            		// 0x0170 (0x0010) [0x0000000000000000]              
	struct FButtonContainerWidget                      CrosshairContainerProperties;                     		// 0x0180 (0x0028) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FButtonContainerWidget                      PerformanceContainerProperties;                   		// 0x01A8 (0x0028) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector                                     CrosshairDividerPos;                              		// 0x01D0 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector                                     PerformanceDividerPos;                            		// 0x01DC (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1866 ];

		return pClassPointer;
	};

	struct FString as_AddColorDropDownMenu ( struct FString Label, struct FString ToolTip, TArray< struct FColorDropDownInfo > Data, struct FString extClickInterfaceFunc, struct FString ExtClickFuncArg, int InitialIndex );
	struct FString as_AddMenuCrosshair ( );
	struct FString as_addHDTest ( struct FString progressText, struct FString detectedText, float Progress, float Score, float scoreSpeed );
	void UpdateCrosshairColor ( int NewColorIndex, int WidgetIndex );
	void UpdateCrosshairAlpha ( int NewAlpha );
	void UpdateCrosshairRotation ( int NewRotation );
	void UpdateCrosshairLength ( int NewLength );
	void UpdateCrosshairTicks ( int NumTicks );
	void UpdateReticleAlpha ( int NewAlpha );
	void HDPerfProgressUpdate ( float CurrentScore, float Progress );
	void ei_HDTestClicked ( );
	void OnClearTutorialHistory ( unsigned long bApply );
	void ei_clearTutorialHistory ( struct FString WidgetIndexString, struct FString NewSelectedIndexString );
	void ei_SettingChanged ( struct FString WidgetIndexString, struct FString NewSelectedIndexString );
	void ei_FOVChanged ( struct FString NewValueString );
	void ei_ResetToDefaults ( );
	void ei_RevertChanges ( unsigned long bSkipUpdate );
	void ei_ApplyChanges ( );
	void ApplyChanges ( );
	void GetDefaultVals ( );
	void GetOriginalVals ( );
	void SetupSettingsScene ( );
};

UClass* UFoxSettingsUIGameplay::pClassPointer = NULL;

// Class FoxGame.FoxSettingsUIKeyBindings
// 0x0038 (0x013C - 0x0104)
class UFoxSettingsUIKeyBindings : public UFoxSettingsUIBase
{
public:
	TArray< class UFoxDataProvider_KeyBindings* >      KeyBindingProviders;                              		// 0x0104 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectedIndex;                                    		// 0x0110 (0x0004) [0x0000000000000000]              
	unsigned long                                      bChangePrimary : 1;                               		// 0x0114 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsBinding : 1;                                   		// 0x0114 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FKeyBindInfo >                      CurrentKeyBindings;                               		// 0x0118 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FKeyBindInfo >                      OriginalKeyBindings;                              		// 0x0124 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FKeyBindInfo >                      DefaultKeyBindings;                               		// 0x0130 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1867 ];

		return pClassPointer;
	};

	void as_addKeyBind ( struct FString Command, struct FString ToolTip, struct FString PrimaryKey, struct FString SecondaryKey );
	void as_addKeybindDivider ( int XPos, int YPos, struct FString Label, struct FString PrimaryLabel, struct FString SecondaryLabel, unsigned long bShortEnd );
	void as_updateBind ( int Index, unsigned long bPrimary, struct FString NewBindKey );
	bool HasSettingsChanged ( );
	void OnMessageBoxClose ( unsigned long bAccept );
	void ei_bindAlt ( struct FString Index );
	void ei_bindPrimary ( struct FString Index );
	void eventCloseDialogBox ( );
	void ApplyChanges ( );
	void eventSetNewKeyBinding ( struct FName InputKey );
	void UpdateAllBindings ( );
	void ei_RevertChanges ( unsigned long bSkipUpdate );
	void ei_ResetToDefaults ( );
	void SetupSettingsScene ( );
};

UClass* UFoxSettingsUIKeyBindings::pClassPointer = NULL;

// Class FoxGame.FoxSettingsUIVideo
// 0x009C (0x01A0 - 0x0104)
class UFoxSettingsUIVideo : public UFoxSettingsUIBase
{
public:
	int                                                TesselationLevelValues[ 0x5 ];                    		// 0x0104 (0x0014) [0x0000000000000000]              
	unsigned char                                      CurrentAspectRatio;                               		// 0x0118 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FVideoSettingResolution >           SupportedResolutions;                             		// 0x011C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CurrentResIndex;                                  		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsDX11 : 1;                                      		// 0x012C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCloseAfterApply : 1;                             		// 0x012C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	int                                                SaveDialogTime;                                   		// 0x0130 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                DialogTime;                                       		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FButtonContainerWidget                      AdvancedContainerProperties;                      		// 0x0138 (0x0028) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FButtonContainerWidget                      DX11ContainerProperties;                          		// 0x0160 (0x0028) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector                                     AdvancedDividerPos;                               		// 0x0188 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector                                     DX11DividerPos;                                   		// 0x0194 (0x000C) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1868 ];

		return pClassPointer;
	};

	void OnLostFocusPause ( unsigned long bEnable );
	void ei_ApplyChanges ( );
	void ei_ResetToDefaults ( );
	void ei_RevertChanges ( unsigned long bSkipUpdate );
	void ApplyChanges ( );
	void GetDefaultVals ( );
	void GetOriginalVals ( );
	void OnTimerTick ( );
	void OnSettingsClose ( );
	void OnSaveSettingsClose ( unsigned long bSaveSettings );
	void LaunchSaveDialog ( unsigned long bExitOnClose );
	void OnApplySettingsClose ( unsigned long bApply );
	void LaunchApplyDialog ( );
	void TryClose ( class UClass* TheNextSettingsClass );
	int eventTesselationScaleToLevel ( int Scale );
	int eventTesselationLevelToScale ( int Level );
	void ei_SettingChanged ( struct FString WidgetIndexString, struct FString NewSelectedIndexString );
	void ei_DecalCullScaleChanged ( struct FString NewValueString );
	void ei_GammaChanged ( struct FString NewValueString );
	int GetCurrentAspectRatioIndex ( );
	void CalculateAspectRatio ( );
	void RebuildResStrings ( unsigned long bSkipUpdate );
	TArray< struct FString > eventBuildResStrings ( );
	void GetSupportedResolutions ( int OurResX, int OurResY, int* NewCurrentResIndex );
	void UpdateDirectX11Widgets ( );
	void SetupSettingsScene ( );
};

UClass* UFoxSettingsUIVideo::pClassPointer = NULL;

// Class FoxGame.FoxSkeletalMeshPreviewComponent
// 0x00D7 (0x06CC - 0x05F5)
class UFoxSkeletalMeshPreviewComponent : public USkeletalMeshComponent
{
public:
	TArray< float >                                    IdealScale;                                       		// 0x05F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      ScaleIndex;                                       		// 0x0604 (0x0001) [0x0000000000000000]              
	float                                              ScreenWidth;                                      		// 0x0608 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ScreenHeight;                                     		// 0x060C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     BaseOffset;                                       		// 0x0610 (0x000C) [0x0000000000000000]              
	int                                                CustomItemType;                                   		// 0x061C (0x0004) [0x0000000000000000]              
	struct FVector                                     BoundCenter;                                      		// 0x0620 (0x000C) [0x0000000000000000]              
	struct FCamoUnlockInfo                             CamoInfo;                                         		// 0x062C (0x0098) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTexture*                                    BaseCamoTexture;                                  		// 0x06C4 (0x0004) [0x0000000000000000]              
	int                                                NumOfCamoTiles;                                   		// 0x06C8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1869 ];

		return pClassPointer;
	};

	void SetMeshMaterialsAndCamo ( class UMeshComponent* MyMeshComponent );
	void SetWeaponCamoTextures ( int CamoIndex );
	void GetPreviewBounds ( struct FRotator CamRotation, struct FVector* BoxCameraCenter, float* BoxWidth, float* BoxHeight );
	struct FVector GetOffsetBySocketBase ( struct FVector ActorLocation );
	struct FBox GetComponentBoundingBox ( class USkeletalMeshComponent* NewSMC );
	struct FVector FindIdealOffset ( struct FRotator CamRot );
	float FindIdealScale ( float IdealWidth, float IdealHeight, float CameraDistance, float CameraFOV, struct FRotator CamRot );
	struct FBox GetNewBoundingBox ( );
};

UClass* UFoxSkeletalMeshPreviewComponent::pClassPointer = NULL;

// Class FoxGame.FoxSkeletalMesh3rdPersonWeapon
// 0x0054 (0x0720 - 0x06CC)
class UFoxSkeletalMesh3rdPersonWeapon : public UFoxSkeletalMeshPreviewComponent
{
public:
	struct FFoxWeaponConfigInfo                        CurrentWeaponInfo;                                		// 0x06CC (0x002C) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      BarrelModMesh;                                    		// 0x06F8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      MuzzleModMesh;                                    		// 0x06FC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        StockModMesh;                                     		// 0x0700 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        ScopeModMesh;                                     		// 0x0704 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        MagazineModMesh;                                  		// 0x0708 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        RailMeshComponent;                                		// 0x070C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        TriggerMesh;                                      		// 0x0710 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       LeftHandIKSocketName;                             		// 0x0714 (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bHasPost : 1;                                     		// 0x071C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bWantsPost : 1;                                   		// 0x071C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1870 ];

		return pClassPointer;
	};

	void SetWeaponDepthPriorityGroup ( unsigned char NewDepthPriorityGroup );
	void SetVisibility ( unsigned long bShow );
	void SetWeaponCamoByIndex ( int CamoIndex );
	void DetachMods ( class USkeletalMeshComponent* BaseMesh );
	void DetachAllMods ( );
	void SetWeapon ( class UClass* NewWeaponClass );
	void UpdateConfigInfo ( struct FFoxWeaponConfigInfo NewWeaponInfo );
};

UClass* UFoxSkeletalMesh3rdPersonWeapon::pClassPointer = NULL;

// Class FoxGame.FoxSkeletalMeshWeaponPreviewComponent
// 0x0048 (0x0714 - 0x06CC)
class UFoxSkeletalMeshWeaponPreviewComponent : public UFoxSkeletalMeshPreviewComponent
{
public:
	struct FFoxWeaponConfigInfo                        CurrentWeaponInfo;                                		// 0x06CC (0x002C) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      BarrelModMesh;                                    		// 0x06F8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      MuzzleModMesh;                                    		// 0x06FC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      StockModMesh;                                     		// 0x0700 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      ScopeModMesh;                                     		// 0x0704 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      MagazineModMesh;                                  		// 0x0708 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      GripModMesh;                                      		// 0x070C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      RailMeshComponent;                                		// 0x0710 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1871 ];

		return pClassPointer;
	};

	void SetWeaponCamoByIndex ( int CamoIndex );
	void DetachMods ( class USkeletalMeshComponent* BaseMesh );
	void DetachAllMods ( );
	void SetWeapon ( class UClass* NewWeaponClass );
	void UpdateConfigInfo ( struct FFoxWeaponConfigInfo NewWeaponInfo );
	void GetPreviewBounds ( struct FRotator CamRotation, struct FVector* BoxCameraCenter, float* BoxWidth, float* BoxHeight );
	struct FBox GetNewBoundingBox ( );
};

UClass* UFoxSkeletalMeshWeaponPreviewComponent::pClassPointer = NULL;

// Class FoxGame.FoxSkillTreeTier
// 0x0008 (0x0080 - 0x0078)
class UFoxSkillTreeTier : public UGFxObject
{
public:
	class UFoxSkillTreeUI*                             SkillTree;                                        		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TierIndex;                                        		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1872 ];

		return pClassPointer;
	};

	void as_SocketNode ( int SocketIndex );
	void as_SetSocketInfo ( int SocketIndex, struct FDeprecatedGemSocketInfo SocketInfo );
	void as_SetSkillInactive ( int SkillIndex );
	void as_SetSkillActive ( int SkillIndex );
	void as_SetLocked ( unsigned long bLocked );
	void as_AddSkill ( struct FString IconRef, int PointsToUnlock, struct FString FriendlyName, struct FString ExtCallbackFunc, struct FString ExtCallbackArg, struct FString ExtRolleroverFunc, struct FString ExtRolloverArg );
	void SetGemSocketInfo ( unsigned char GemType, int GemQuality, int GemDuration, unsigned long bExpired, int TierSocketIndex, int ActualSocketIndex );
	void SetEmptySocketInfo ( int TierSocketIndex, int ActualSocketIndex );
	void UpdateTierSockets ( );
	void SetSkillActive ( int SkillIndex, unsigned long bActive );
};

UClass* UFoxSkillTreeTier::pClassPointer = NULL;

// Class FoxGame.FoxSkillTreeUI
// 0x00B8 (0x00F4 - 0x003C)
class UFoxSkillTreeUI : public UObject
{
public:
	struct FString                                     SkillTreeLocalizationSectionName;                 		// 0x003C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FVector2D                                   GemListPanelPos;                                  		// 0x0048 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FVector2D                                   SkillDetailPanelPos;                              		// 0x0050 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	class UGFxObject*                                  SkillsDatabaseBar;                                		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UFoxSkillTreeTier* >                 SkillsDatabaseTiers;                              		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UGFxObject*                                  SkillsDetailContainer;                            		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxSkillTreeGemSelection*                   GemListContainer;                                 		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  RefundButton;                                     		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxLoadoutInfo*                             Loadout;                                          		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FSkillItemInfo                              CurrentSkillInfo;                                 		// 0x0078 (0x0048) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PendingSkillID;                                   		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineStoreInterface*                       StoreInterface;                                   		// 0x00C4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00C8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	unsigned long                                      bPendingSkillWrite : 1;                           		// 0x00CC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                CurrentGemSocketIndex;                            		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PendingSocketGemIndex;                            		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FGemSlot >                          CachedGemSockets;                                 		// 0x00D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FGemInfo >                          CachedGemListInfo;                                		// 0x00E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AFoxServerConnection*                        ServerConn;                                       		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1873 ];

		return pClassPointer;
	};

	struct FString as_ShowNodeList ( int XPos, int YPos, struct FString ExtInterface );
	struct FString as_ShowNodeSelection ( int XPos, int YPos );
	struct FString as_addSkillSceneButton ( int XPos, int YPos, struct FString Label, struct FString ToolTip, struct FString ExtFunctionCall, struct FString ExtArg );
	struct FString as_addSkillDetailContainer ( int XPos, int YPos );
	struct FString as_addSkillDatabaseTier ( );
	struct FString as_addSkillDatabaseBar ( );
	void GemActivationComplete ( );
	void OnGemActivated ( unsigned long bResult, unsigned char eResult );
	void GemDestructionComplete ( );
	void OnGemDestroyed ( struct FString ItemGuid, unsigned long bResult );
	int GetIndexOfGemSlotFromSocketIndex ( int SocketIndex );
	bool eventIsCurrentGemSocketEmpty ( );
	bool CanSocketGemIndex ( int GemIndex );
	void ei_GemListClicked ( int GemListIndex );
	void ei_GemSocketClicked ( struct FString SocketIndexString );
	struct FString BuildTierUnlockString ( struct FString InString, int SkillPointsNeeded, int TierIndex );
	void ei_RefundSPClicked ( );
	void ActivateSkill ( );
	void UpdateSkillDetailContainer ( int SkillID );
	void ei_SkillClicked ( struct FString SkillIDString );
	void ei_SkillRollover ( struct FString SkillIDString );
	void OnSkillResetCompete ( unsigned char LocalUserNum, unsigned long bSuccess );
	void OnSkillUpdateComplete ( unsigned char LocalUserNum, unsigned long bSuccess );
	void UnlockSkill ( int SkillID );
	void SetSkillResetEnabled ( unsigned long bEnabled );
	void RefreshTiers ( );
	void UpdateTier ( int TierIndex );
	void ui_AddResetSkillsButton ( int XPos, int YPos );
	void ui_SetupGemList ( int XPos, int YPos );
	void ui_InitializeGemSelection ( );
	void InitializeSkillDetailContainer ( );
	void ui_AddTiers ( );
	void UpdateSkillPointsValue ( );
	void ui_SetupSkillDatabaseBar ( );
	void OnClose ( );
	void Initialize ( );
};

UClass* UFoxSkillTreeUI::pClassPointer = NULL;

// Class FoxGame.FoxSocialUI
// 0x00C4 (0x0100 - 0x003C)
class UFoxSocialUI : public UObject
{
public:
	unsigned long                                      bProfileDirty : 1;                                		// 0x003C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FString                                     OwnedItemColor;                                   		// 0x0040 (0x000C) [0x0000000000404003]              ( CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ExpiredItemColor;                                 		// 0x004C (0x000C) [0x0000000000404003]              ( CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     EmptyStackItemColor;                              		// 0x0058 (0x000C) [0x0000000000404003]              ( CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink )
	class UFoxSocialUICategoryBase*                    CurrentSocialCategory;                            		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ProfileTutorial;                                  		// 0x0068 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FriendsTutorial;                                  		// 0x0074 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PartyTutorial;                                    		// 0x0080 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ClanTutorial;                                     		// 0x008C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     MailTutorial;                                     		// 0x0098 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     InventoryTutorial;                                		// 0x00A4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NodesTutorial;                                    		// 0x00B0 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     SupportTutorial;                                  		// 0x00BC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FSearchTabInfo                              SearchTabInfoStruct;                              		// 0x00C8 (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     QueuedSendMailRecipient;                          		// 0x00E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __CurrentDisplayFunc__Delegate;                   		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1874 ];

		return pClassPointer;
	};

	void eventRefreshSocialTab ( );
	void SocialCategoryDelayInitialize ( );
	void ei_SocialButtonClicked ( struct FString Arg );
	struct FString SocialLocalize ( struct FString Key );
	void ClearDelegates ( );
	void MarkProfileDirty ( );
	void eventTryCallDisplayFunc ( );
	void Cleanup ( );
	void Initialize ( );
	void CurrentDisplayFunc ( );
};

UClass* UFoxSocialUI::pClassPointer = NULL;

// Class FoxGame.FoxSocialUICategoryBase
// 0x0010 (0x004C - 0x003C)
class UFoxSocialUICategoryBase : public UObject
{
public:
	struct FString                                     ButtonContainerPath;                              		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UFoxUIWorkingDialogWidget*                   WorkingDialogWidget;                              		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1875 ];

		return pClassPointer;
	};

	void as_ClearInventoryButtons ( );
	void as_AddDestroyItemButtonContainer ( struct FString ContainerName, int XPos, int YPos, int Spacing, int MaxWidth, int MaxHeight, unsigned long VertAlign );
	void as_AddCategoryBar ( int XPos, int YPos, TArray< struct FString > Categories, int StartIndex, struct FString CallbackFunc );
	void as_updateItemListItems ( TArray< struct FBaseInventoryEntry > Items, struct FString Path );
	struct FString as_AddSocialInputBox ( struct FString Label, int MaxChars, struct FString DefaultText, struct FString InterfaceFunc );
	void as_ShowInventoryItem ( int XPos, int YPos, struct FBaseInventoryEntry Item );
	void as_AddSocialSortDivider ( int XPos, int YPos, int Width );
	struct FString as_AddSocialListInput ( int XPos, int YPos, struct FString ButtonLabel, struct FString ClickInterface, int MaxChars, unsigned long ClickToUpdate );
	void as_AddGenericButton ( struct FString Label, struct FString ToolTip, struct FString ClickInterface, struct FString Argument, struct FString TransitionType );
	void as_AddGenericButtonContainer ( struct FString instancename, int WidgetSpacing, int MaxWidth, int MaxHeight, unsigned long AlignVert, unsigned long InternalContainer );
	void as_AddGenericTextBox ( int XPos, int YPos, struct FString Text );
	struct FString as_AddInventoryButtons ( struct FString Label, struct FString ToolTip, struct FString ClickInterface, struct FString ClickArg, struct FString TransitionType, unsigned long StartEnabled );
	void as_AddInventoryButtonContainer ( struct FString ContainerName, int XPos, int YPos, int Spacing, int MaxWidth, int MaxHeight, unsigned long VertAlign );
	struct FString as_AddSocialButtonContainer ( struct FString ContainerName, int XPos, int YPos, int Spacing, int MaxWidth, int MaxHeight, unsigned long VertAlign, unsigned long bInternalContainer );
	struct FString as_AddSocialSortButton ( struct FString Label, struct FString ToolTip, struct FString ClickInterface );
	struct FString as_AddSocialSubcategory ( struct FString Label, struct FString ToolTip, struct FString ClickInterface, struct FString InterfaceArg, struct FString TransitionType );
	void as_PlaceSocialHorizLines ( struct FString Label, int XPos, int YPos );
	struct FString as_AddFindList ( int XPos, int YPos, struct FString ClickInterface );
	void SetUpFriendSortButtons ( );
	struct FString InventoryLocalize ( struct FString Key );
	void ei_SetUpFindPlayerTab ( );
	void HideWorkingDialog ( );
	void ShowWorkingDialog ( struct FString TitleText );
	bool CanInvitePlayer ( );
	void ClearDelegates ( );
	void NotifyClosing ( );
	void SetupDelegates ( );
	void Initialize ( );
};

UClass* UFoxSocialUICategoryBase::pClassPointer = NULL;

// Class FoxGame.FoxSocialCategoryClan
// 0x007E (0x00CA - 0x004C)
class UFoxSocialCategoryClan : public UFoxSocialUICategoryBase
{
public:
	struct FClanTabInfo                                ClanTabInfoStruct;                                		// 0x004C (0x007C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      ClanSortMode;                                     		// 0x00C8 (0x0001) [0x0000000000000000]              
	unsigned char                                      SubSortMode;                                      		// 0x00C9 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1876 ];

		return pClassPointer;
	};

	void as_AddClanMembers ( TArray< struct FClanMemberDisplayInfo > Members );
	struct FString as_AddClanList ( int XPos, int YPos, struct FString ClickInterface );
	struct FString as_AddClanChallengeBox ( );
	struct FString as_AddClanNewsBox ( struct FString Label );
	struct FString as_AddSocialClanStatBox ( struct FString Label );
	struct FString as_AddClanMOTD ( );
	struct FString as_AddClanHeader ( );
	void ClearDelegates ( );
	void SetupDelegates ( );
	int SortMembersByRankDescending ( struct FClanMemberDisplayInfo LHS, struct FClanMemberDisplayInfo RHS );
	int SortMembersByRankAscending ( struct FClanMemberDisplayInfo LHS, struct FClanMemberDisplayInfo RHS );
	int SortMembersByNameDescending ( struct FClanMemberDisplayInfo LHS, struct FClanMemberDisplayInfo RHS );
	int SortMembersByNameAscending ( struct FClanMemberDisplayInfo LHS, struct FClanMemberDisplayInfo RHS );
	void ei_SortMembersByRank ( int SortMode );
	void ei_SortMembersByName ( int SortMode );
	void DisplayClanManageTab ( );
	void ei_SetUpClanManageTab ( );
	void ClanMemberRemove ( unsigned long OkClicked );
	void ei_ClanMemberRemove ( struct FString Arg );
	void AcceptInvite ( );
	void ei_ClanInventoryButtonClicked ( struct FString Arg );
	void ei_MemberClicked ( int Index );
	void RefreshClanMembersTab ( );
	void DisplayClanMembersTab ( );
	void ei_SetUpClanMembersTab ( );
	void DisplayClanInfoTab ( );
	void ei_SetUpClanInfoTab ( );
	void ei_BuyClanRegistrationItem ( );
	void DisplayNoClan ( );
	void Initialize ( );
};

UClass* UFoxSocialCategoryClan::pClassPointer = NULL;

// Class FoxGame.FoxSocialCategoryDatanodes
// 0x0008 (0x0054 - 0x004C)
class UFoxSocialCategoryDatanodes : public UFoxSocialUICategoryBase
{
public:
	class UFoxGemFusion*                               GemFusion;                                        		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFoxSkillTreeGemSelection*                   GemSelectionObject;                               		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1877 ];

		return pClassPointer;
	};

	void as_HideSocialFusionNodeList ( );
	struct FString as_ShowSocialFusionNodeList ( );
	struct FString as_AddSocialFusionPanel ( int XPos, int YPos );
	struct FString as_AddSocialNodeList ( int XPos, int YPos );
	void ui_AddSocialFusionPanel ( int XPos, int YPos );
	void ui_AddSocialNodeList ( int XPos, int YPos );
	void Initialize ( );
};

UClass* UFoxSocialCategoryDatanodes::pClassPointer = NULL;

// Class FoxGame.FoxSocialCategoryFindPlayer
// 0x0000 (0x004C - 0x004C)
class UFoxSocialCategoryFindPlayer : public UFoxSocialUICategoryBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1878 ];

		return pClassPointer;
	};

	void as_UpdateSearchList ( TArray< struct FPlayerSearchData > SearchList );
	void RefreshInventoryButtons ( );
	void ei_SearchInventoryButtonClicked ( struct FString Arg );
	void ei_SearchClicked ( int Index );
	void ei_FindPlayer ( struct FString NewName );
	void ParseSearchList ( TArray< struct FString > ReturnedNames );
	void eventDisplayFindPlayersTab ( );
	void ei_SetUpFindPlayersTab ( );
	void ClearDelegates ( );
	void SetupDelegates ( );
	void Initialize ( );
};

UClass* UFoxSocialCategoryFindPlayer::pClassPointer = NULL;

// Class FoxGame.FoxSocialCategoryFriends
// 0x0034 (0x0080 - 0x004C)
class UFoxSocialCategoryFriends : public UFoxSocialUICategoryBase
{
public:
	struct FString                                     FriendListPath;                                   		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ClickedMemberIndex;                               		// 0x0058 (0x0004) [0x0000000000000000]              
	struct FUniqueNetId                                ClickedUniqueId;                                  		// 0x005C (0x0008) [0x0000000000000000]              
	unsigned char                                      CurrentTab;                                       		// 0x0064 (0x0001) [0x0000000000000000]              
	TArray< struct FFriendDisplayInfo >                CachedFriends;                                    		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPlayerNameAndID >                  CachedIgnoreList;                                 		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1879 ];

		return pClassPointer;
	};

	void as_UpdateIgnoreList ( TArray< struct FPlayerNameAndID > IgnoreList );
	void as_UpdateFriend ( int Index, struct FPlayerListEntry ToUpdate );
	void as_UpdateFriendsList ( TArray< struct FFriendDisplayInfo > Friends );
	struct FString as_AddFriendsList ( int XPos, int YPos, struct FString ClickInterface );
	void ClearDelegates ( );
	void SetupDelegates ( );
	void DenyFriendRequest ( struct FUniqueNetId UniqueId );
	void AcceptFriendRequest ( struct FUniqueNetId UniqueId );
	int SortMembersByRankDescending ( struct FFriendDisplayInfo LHS, struct FFriendDisplayInfo RHS );
	int SortMembersByRankAscending ( struct FFriendDisplayInfo LHS, struct FFriendDisplayInfo RHS );
	int SortMembersByNameDescending ( struct FFriendDisplayInfo LHS, struct FFriendDisplayInfo RHS );
	int SortMembersByNameAscending ( struct FFriendDisplayInfo LHS, struct FFriendDisplayInfo RHS );
	void ei_SortMembersByRank ( int SortMode );
	void ei_SortMembersByName ( int SortMode );
	void RefreshFriendList ( );
	void OnFriendListRefreshed ( unsigned long bSuccessful );
	void ei_IgnoreClicked ( int Index );
	void ei_IgnorePlayer ( struct FString NewName );
	void DisplayIgnoredTab ( );
	void ei_SetUpIgnoredTab ( );
	void ei_InviteToPartyClicked ( );
	void AcceptInvite ( );
	void OnRemoveFriendDialogResponse ( unsigned long bRemove );
	void RemoveFriend ( );
	void ei_FriendInventoryButtonClicked ( struct FString Arg );
	void ei_FriendClicked ( int Index );
	void ei_SetUpFriendsTab ( );
	void Initialize ( );
};

UClass* UFoxSocialCategoryFriends::pClassPointer = NULL;

// Class FoxGame.FoxSocialCategoryInventory
// 0x0020 (0x006C - 0x004C)
class UFoxSocialCategoryInventory : public UFoxSocialUICategoryBase
{
public:
	TArray< struct FBaseUnlockFilterEntry >            UnlockFilters;                                    		// 0x004C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	class UFoxUIInventoryListWidget*                   InventoryListWidget;                              		// 0x0058 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ActivateButtonWidget;                             		// 0x005C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  DestroyButtonWidget;                              		// 0x0060 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  DeselectButtonWidget;                             		// 0x0064 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  InventorySelectCountWidget;                       		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1880 ];

		return pClassPointer;
	};

	struct FString as_AddInventoryInteractionButton ( struct FString Label, struct FString ToolTip, struct FString ClickInterface, struct FString ClickArg, struct FString TransitionType, unsigned long bEnabled );
	void as_ClearInventorylist ( struct FString Path );
	void as_UpdateInventoryList ( TArray< struct FInventoryItemEntry > Items, struct FString Path );
	struct FString as_AddInventoryList ( int XPos, int YPos, struct FString CallbackFunc );
	struct FString as_AddInventorySelectTotal ( );
	void ei_DestroyItem ( );
	void ei_DeselectItem ( );
	void ei_RenewItem ( struct FString InstanceId );
	void ei_activateItem ( );
	void ClearReusedVars ( struct FInventoryItemEntry* CurrItem );
	void GetInventoryInteractionButtonText ( int ItemCount, unsigned long bEnabled, struct FString* Label, struct FString* ToolTip );
	void SelectInventoryItem ( int UnlockID, struct FString ItemGuid );
	void ei_ChangeInventoryCategory ( int Index );
	void ApplyScrollerEntries ( );
	void SetSelectedItemCount ( int ItemCount );
	void SetInteractionButtons ( int ItemCount, unsigned long bCanActivate, unsigned long bCanDestroy );
	void SetUpInventoryPage ( struct FString TabType );
	void NotifyClosing ( );
	void Initialize ( );
};

UClass* UFoxSocialCategoryInventory::pClassPointer = NULL;

// Class FoxGame.FoxSocialCategoryMail
// 0x0068 (0x00B4 - 0x004C)
class UFoxSocialCategoryMail : public UFoxSocialUICategoryBase
{
public:
	struct FMailTabInfo                                MailTabInfoStruct;                                		// 0x004C (0x0044) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPendingMailInfo                            PendingSendMail;                                  		// 0x0090 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1881 ];

		return pClassPointer;
	};

	struct FString as_getSendBody ( struct FString Path );
	struct FString as_getSendSubject ( struct FString Path );
	struct FString as_getSendRecipient ( struct FString Path );
	struct FString as_addSendMail ( int XPos, int YPos );
	struct FString as_addReadMailItemList ( int XPos, int YPos, struct FString Title, struct FString Path );
	void as_setReadMailOneItem ( int XPos, int YPos, struct FString Title, struct FBaseInventoryEntry Entry, struct FString Path );
	void as_addMailOtherButton ( struct FString Label, struct FString Callback, struct FString Arg, struct FString Path );
	void as_addMailBasicButton ( struct FString Label, struct FString Callback, struct FString Arg, struct FString Path );
	struct FString as_addReadMail ( int XPos, int YPos );
	void as_updateMailitems ( TArray< struct FMailData > InItems, struct FString Path );
	struct FString as_addMailList ( int XPos, int YPos, struct FString ListCallback, struct FString DblClickCallback );
	struct FString as_addSocialListHeader ( int XPos, int YPos );
	struct FString as_addMailButton ( struct FString ButtonLabel, struct FString ButtonTooltip, struct FString ButtonCallback, struct FString ButtonCallbackArg, struct FString TransitionType );
	void as_addMailButtonContainer ( struct FString instancename, int XPos, int YPos, int Spacing, int MaxListWidth, int MaxListHeight, unsigned long bVertialAlign );
	void ClearDelegates ( );
	struct FString MailLocalize ( struct FString Key );
	void OnTakeItemsComplete ( unsigned char LocalUserNum, unsigned long bSuccessful );
	void ei_TakeItems ( struct FString Arg );
	void ei_CloseReadMail ( struct FString Arg );
	void OpenMailItem ( int MailIndex );
	void OnMailDeleteComplete ( unsigned char LocalUserNum, unsigned long bSuccessful );
	void OnConfirmDelete ( unsigned long bResult );
	void ei_mailButtonClicked ( struct FString Arg );
	void ei_DeleteMail ( int Index );
	void ei_mailItemClicked ( int Index );
	void SortMailItems ( TArray< struct FMailData >* MailItems );
	void RefreshCacheComplete ( unsigned long bResult, struct FString FailureReason );
	void ei_inboxClicked ( );
	void ei_CancelButtonClicked ( );
	void OnMailSent ( unsigned char LocalUserNum, unsigned long bSuccess );
	int GetColonCount ( struct FString ToCount );
	void OnMailFiltered ( struct FString PlayerName, struct FString Message, int Channel, class AFoxPRI* PRI );
	void ei_SendButtonClicked ( );
	void ei_sendClicked ( );
	void Initialize ( );
};

UClass* UFoxSocialCategoryMail::pClassPointer = NULL;

// Class FoxGame.FoxSocialCategoryNews
// 0x0000 (0x004C - 0x004C)
class UFoxSocialCategoryNews : public UFoxSocialUICategoryBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1882 ];

		return pClassPointer;
	};

};

UClass* UFoxSocialCategoryNews::pClassPointer = NULL;

// Class FoxGame.FoxSocialCategoryParty
// 0x0044 (0x0090 - 0x004C)
class UFoxSocialCategoryParty : public UFoxSocialUICategoryBase
{
public:
	unsigned char                                      CurrentTab;                                       		// 0x004C (0x0001) [0x0000000000000000]              
	class UFoxCacheParty*                              PartyCache;                                       		// 0x0050 (0x0004) [0x0000000000000000]              
	TArray< struct FPartyDisplayInfo >                 CachedParty;                                      		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PartyListPath;                                    		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PartyMemberIconRef;                               		// 0x006C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PartyLeaderIconRef;                               		// 0x0078 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	int                                                ClickedMemberIndex;                               		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FUniqueNetId                                ClickedUniqueId;                                  		// 0x0088 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1883 ];

		return pClassPointer;
	};

	void as_UpdatePartyList ( TArray< struct FPartyDisplayInfo > Friends );
	struct FString as_AddPartyList ( int XPos, int YPos, struct FString ClickInterface );
	void ClearDelegates ( );
	void SetupDelegates ( );
	int SortMembersByRankDescending ( struct FPartyDisplayInfo LHS, struct FPartyDisplayInfo RHS );
	int SortMembersByRankAscending ( struct FPartyDisplayInfo LHS, struct FPartyDisplayInfo RHS );
	int SortMembersByNameDescending ( struct FPartyDisplayInfo LHS, struct FPartyDisplayInfo RHS );
	int SortMembersByNameAscending ( struct FPartyDisplayInfo LHS, struct FPartyDisplayInfo RHS );
	void ei_SortMembersByRank ( int SortMode );
	void ei_SortMembersByName ( int SortMode );
	void OnPartyChanged ( );
	void ei_SetupSearchPlayerList ( );
	void RefreshPartyList ( );
	void ei_PromoteMember ( );
	void ei_AcceptPartyGameInvite ( );
	void SendPartyMemberGameInvite ( );
	void ei_JoinPartyMemberGame ( );
	void ei_AcceptPartyInvite ( );
	void ei_LeaveParty ( );
	void ei_RemovePartyMember ( );
	void ei_PartyMemberClicked ( int ClickMemberIndex );
	void ei_SetupPartyList ( );
	void ei_SetupClanTab ( );
	void ei_SetUpFriendsTab ( );
	void Initialize ( );
};

UClass* UFoxSocialCategoryParty::pClassPointer = NULL;

// Class FoxGame.FoxSocialCategoryProfile
// 0x0078 (0x00C4 - 0x004C)
class UFoxSocialCategoryProfile : public UFoxSocialUICategoryBase
{
public:
	class UFoxUITitleListWidget*                       TitleListWidget;                                  		// 0x004C (0x0004) [0x0000000000000000]              
	class UFoxUIEmblemPanelWidget*                     EmblemPanelWidget;                                		// 0x0050 (0x0004) [0x0000000000000000]              
	class UFoxUIUnlockProgressionWidget*               UnlockListWidget;                                 		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                CurrentTitleID;                                   		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CurrentRankIndex;                                 		// 0x005C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                OriginalTitleUnlockID;                            		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedTitleUnlockID;                              		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SavedTitleUnlockID;                               		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FProfileEmblemInfo                          OriginalEmblemInfo;                               		// 0x006C (0x0018) [0x0000000000002000]              ( CPF_Transient )
	struct FProfileEmblemInfo                          CachedEmblemInfo;                                 		// 0x0084 (0x0018) [0x0000000000002000]              ( CPF_Transient )
	struct FProfileEmblemInfo                          SavedEmblemInfo;                                  		// 0x009C (0x0018) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FStatInfo >                         StatInfoArray;                                    		// 0x00B4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                UpdateStatsPeriod;                                		// 0x00C0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1884 ];

		return pClassPointer;
	};

	struct FString as_addUnlockList ( int PosX, int PosY );
	struct FString as_addEmblemPanel ( int PosX, int PosY );
	struct FString as_addTitleList ( int PosX, int PosY, TArray< struct FBaseUnlockEntry > DataProvider, int SelectedIndex, struct FString ExtFunction );
	void as_ShowTempCareerStats ( );
	void as_AddSocialProfilePlayerInfo ( int XPos, int YPos, struct FString ActivatedString, struct FString TimePlayed, int XPNeedForNextLevel );
	void as_updateMyPlayerWidgetTitle ( struct FString PlayerTitle );
	void ei_selectProfileTab ( struct FString Title );
	void as_addSocialProfileUnlockBox ( struct FUnlockBoxInfo BoxInfo );
	void as_addSocialProfileStatBox ( struct FString careerString, TArray< struct FString > statLabelArray, TArray< struct FString > statNumberArray );
	void GetStatStrings ( struct FStatInfo CurrentStatInfo, struct FUniqueNetId MyNetID, class UOnlineStatsRead* CurrentStatsRead, struct FString* HeaderNameKey, struct FString* StatsString );
	struct FString SocialStats ( struct FString Key );
	void AddWeaponBox ( int WeaponID, int KillCount, struct FString Title, struct FString StatName );
	void ShowMyOnlineStats ( unsigned long bReadSuccessful );
	bool HasValidStats ( class UFoxOnlineStats_PlayerStats* MyOnlineStats );
	int GetSecondOfDay ( );
	void ui_SetupSocialPlayerProfileInfo ( int XPos, int YPos );
	void SetupUnlockListTab ( );
	void ApplyEmblemToLoadout ( );
	void SetupEmblemTab ( );
	void ApplyTitleToLoadout ( );
	void SetupTitlesTab ( );
	void NotifyClosing ( );
	void Initialize ( );
};

UClass* UFoxSocialCategoryProfile::pClassPointer = NULL;

// Class FoxGame.FoxSocialCategorySupport
// 0x0008 (0x0054 - 0x004C)
class UFoxSocialCategorySupport : public UFoxSocialUICategoryBase
{
public:
	class UGFxObject*                                  ReportPlayerTabButton;                            		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  ReportBugTabButton;                               		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1885 ];

		return pClassPointer;
	};

	struct FString as_AddReportSocialPanel ( int XPos, int YPos );
	void ui_ShowReportBugDialog ( int XPos, int YPos );
	void RemoteSelectReportBugTab ( );
	void ui_AddReportButton ( struct FString ButtonLabel, struct FString ButtonTooltip );
	void ui_ShowReportPlayerDialog ( int XPos, int YPos );
	void RemoteSelectReportPlayerTab ( );
	void Initialize ( );
};

UClass* UFoxSocialCategorySupport::pClassPointer = NULL;

// Class FoxGame.FoxStatsUI
// 0x0078 (0x00B4 - 0x003C)
class UFoxStatsUI : public UObject
{
public:
	TArray< struct FStatFormatEntry >                  ArmorStatFormatting;                              		// 0x003C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FStatFormatEntry >                  WeaponStatFormatting;                             		// 0x0048 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FStatFormatEntry >                  GeneralStatFormatting;                            		// 0x0054 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     StatLocalizationPackageName;                      		// 0x0060 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     StatHeaderLocalizationSectionName;                		// 0x006C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     StatTooltipLocalizationSectionName;               		// 0x0078 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     StatUnitLocalizationSectionName;                  		// 0x0084 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     StatLocalizationSectionName;                      		// 0x0090 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     MoreThanColorHTML;                                		// 0x009C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     LessThanColorHTML;                                		// 0x00A8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1886 ];

		return pClassPointer;
	};

	void GetSlashStatStrings ( int DecimalPlaces, float CurrentValueLeft, float CurrentValueRight, float NewValueLeft, float NewValueRight, unsigned long bLessIsMore, unsigned long bShowSign, struct FString Units, struct FString* CurrentString, struct FString* NewString );
	void GetStatStrings ( int DecimalPlaces, float CurrentValue, float NewValue, unsigned long bLessIsMore, unsigned long bShowSign, struct FString Units, struct FString* CurrentString, struct FString* NewString );
	void GetFormattedStatsFromDepotPreset ( TArray< struct FStatPanelEntry >* StatEntries, struct FFoxDepotPresetInfo* PresetInfo );
	void GetFormattedStatsFromGearProvider ( class UFoxDataProvider_GearInfo* GearProvider, TArray< struct FStatPanelEntry >* StatEntries );
	void GetFormattedStatsFromWeaponClass ( class UClass* WeaponClass, TArray< struct FStatPanelEntry >* StatEntries );
	void GetFormattedStatsFromWeaponModifiers ( TArray< struct FStatPanelEntry >* StatEntries, struct FFoxWeaponModInfo* WeaponModifiers );
	void GetFormattedStatsFromPawnModifiers ( TArray< struct FStatPanelEntry >* StatEntries, struct FFoxPawnModInfo* PawnModifiers );
	void GetFormattedWeaponStats ( TArray< struct FStatPanelEntry >* StatEntries, TArray< struct FVector2D >* OrigStats, TArray< struct FVector2D >* NewStats );
	void GetEmptyWeaponStats ( TArray< struct FStatPanelEntry >* StatEntries );
	void GetFormattedArmorStats ( TArray< struct FStatPanelEntry >* StatEntries, TArray< struct FVector2D >* OrigStats, TArray< struct FVector2D >* NewStats );
	void GetEmptyArmorStats ( TArray< struct FStatPanelEntry >* StatEntries );
	void GetWeaponStats ( class AFoxLoadoutInfo* Loadout, TArray< struct FVector2D >* StatValues, struct FFoxWeaponConfigInfo* WeaponConfig );
	void GetArmorStats ( class AFoxLoadoutInfo* Loadout, TArray< struct FVector2D >* StatValues, struct FProfileGearInfo* GearSlot );
};

UClass* UFoxStatsUI::pClassPointer = NULL;

// Class FoxGame.FoxStoreUIExtended
// 0x0054 (0x0090 - 0x003C)
class UFoxStoreUIExtended : public UObject
{
public:
	struct FString                                     StoreLocalizationSectionName;                     		// 0x003C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     StoreTagLocalizationSectionName;                  		// 0x0048 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           CachedSelectedStoreItemTags;                      		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           SelectedStoreItemTags;                            		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UFoxStoreUITagListWidget*                    TagListWidget;                                    		// 0x006C (0x0004) [0x0000000000000000]              
	class UFoxStoreUIItemListWidget*                   ItemListWidget;                                   		// 0x0070 (0x0004) [0x0000000000000000]              
	class UFoxStoreUIItemDetail*                       ItemDetailWidget;                                 		// 0x0074 (0x0004) [0x0000000000000000]              
	class UFoxUIModalDialogWidget*                     ModalDialogWidget;                                		// 0x0078 (0x0004) [0x0000000000000000]              
	class UFoxMenuStoreBackgroundUI*                   StoreBackgroundUI;                                		// 0x007C (0x0004) [0x0000000000000000]              
	struct FString                                     CachedBackTransition;                             		// 0x0080 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bFilterLockedItems : 1;                           		// 0x008C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bRebuildTagList : 1;                              		// 0x008C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bUseSortOverride : 1;                             		// 0x008C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsInventory : 1;                                 		// 0x008C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1887 ];

		return pClassPointer;
	};

	struct FString as_addNewStoreDetail ( int PosX, int PosY );
	struct FString as_addStoreItemList ( int PosX, int PosY );
	struct FString as_addStoreTagList ( int PosX, int PosY );
	struct FString as_addFilterToggle ( struct FString ButtonLabel, unsigned long bToggled, struct FString ButtonTooltip, struct FString ExtInterfaceClickFunc, struct FString Transition );
	struct FString as_addTextTab ( struct FString ButtonLabel, struct FString ButtonTooltip, struct FString ExtInterfaceClickFunc, struct FString extInterfaceArg, struct FString Transition );
	void ei_selectUsableToggle ( unsigned long bToggle );
	void ui_addStoreDetail ( int PosX, int PosY, struct FString DetailLabel, struct FString PurchaseLabel, struct FString UnablePurchaseLabel );
	void ui_addStoreItemList ( int PosX, int PosY );
	void ui_addStoreTagList ( int PosX, int PosY );
	void ui_refreshStore ( );
	void ui_hideModalDialog ( );
	void ui_showModalDialog ( int PosX, int PosY, struct FString WidgetLabel, struct FString DetailLabel );
	void SelectDestroyButton ( struct FString InstanceId );
	void SelectActivateButton ( struct FString InstanceId );
	void SelectRenewButton ( struct FString InstanceId );
	void SelectPurchaseButton ( struct FString ItemGuid );
	void DoubleClickListEntry ( int UnlockID, struct FString ItemGuid );
	void SelectListEntry ( int UnlockID, struct FString ItemGuid );
	void SelectTagEntry ( unsigned long bApplySortOverride, TArray< struct FString >* SelectedTags );
	void ChangeInventoryComplete ( unsigned long bSuccess, unsigned long bEquip );
	void RefreshCacheComplete ( unsigned long bResult );
	void RefreshCacheStarted ( );
	void ForceCloseStore ( unsigned long bResult );
	void Cleanup ( );
	void Initialize ( struct FString InitCmdGroup, struct FString BackTransition );
};

UClass* UFoxStoreUIExtended::pClassPointer = NULL;

// Class FoxGame.FoxStoreUIBaseWidget
// 0x0004 (0x0040 - 0x003C)
class UFoxStoreUIBaseWidget : public UObject
{
public:
	class UGFxObject*                                  WidgetObject;                                     		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1888 ];

		return pClassPointer;
	};

	class UGFxObject* GetBoundObject ( );
	void UnbindObject ( );
	void BindObject ( struct FString InObjectPath );
};

UClass* UFoxStoreUIBaseWidget::pClassPointer = NULL;

// Class FoxGame.FoxStoreUIItemDetail
// 0x0074 (0x00B4 - 0x0040)
class UFoxStoreUIItemDetail : public UFoxStoreUIBaseWidget
{
public:
	struct FString                                     WidgetLabel;                                      		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PurchaseLabel;                                    		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     UnablePurchaseLabel;                              		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AFoxCustomActor*                             PreviewActor;                                     		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UClass* >                            PreviewNodeClasses;                               		// 0x0068 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      PreviewNodeType;                                  		// 0x0074 (0x0001) [0x0000000000000000]              
	class UFoxStorePreviewNode_Base*                   MyPreviewNode;                                    		// 0x0078 (0x0004) [0x0000000000000000]              
	class AFoxPreviewSpawnPoint*                       PreviewSpawnPoint;                                		// 0x007C (0x0004) [0x0000000000000000]              
	unsigned long                                      bHideDetails : 1;                                 		// 0x0080 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FScriptDelegate                             __OnPurchaseItem__Delegate;                       		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnActivateItem__Delegate;                       		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDestroyItem__Delegate;                        		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRenewItem__Delegate;                          		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1889 ];

		return pClassPointer;
	};

	struct FString as_addButton ( struct FString ButtonLabel, struct FString ButtonTooltip, struct FString ExtInterfaceClickFunc, struct FString extInterfaceArg, struct FString Transition );
	void as_addDiscountPricing ( struct FString ItemCost, struct FString Currency, struct FString OriginalCost, struct FString DiscountPercent, struct FString DiscountColor );
	void as_addPricing ( struct FString ItemCost, struct FString Currency );
	void as_addTimedStoreTag ( struct FString TagLabel1, struct FString TagLabel2, struct FString TagLabel3, struct FString TagColor );
	void as_addStoreTag ( struct FString TagLabel, struct FString TagColor );
	void as_clearStoreDetail ( );
	void as_hideWelcome ( );
	void as_hideDetails ( unsigned long bState );
	void as_addStoreDetailStats ( TArray< struct FStatPanelEntry > Stats );
	void as_addStoreDetailDesc ( struct FString Description );
	struct FString as_addNewStoreDetail ( int PosX, int PosY );
	void ei_toggleDetails ( );
	void ei_RenewItem ( struct FString InstanceId );
	void ei_DestroyItem ( struct FString InstanceId );
	void ei_activateItem ( struct FString InstanceId );
	void ei_purchaseItem ( struct FString ItemGuid );
	void ApplyPurchaseLabel ( struct FString Label );
	void ApplyWidgetLabel ( struct FString Label );
	void AddItemTag ( struct FString TagLabelFirst, struct FString TagLabelSecond, struct FString TagLabelThird, struct FString TagColor );
	void AddEmptyPricing ( );
	bool AddPricing ( int ItemCost, unsigned char CurrencyType, float CostMult );
	void ClearItemDetails ( );
	void SetItemDetails ( int ItemId );
	void ApplyItemDetail ( unsigned long bCanPurchase, unsigned long bCanActivate, unsigned long bCanRenew, unsigned long bCanDestroy, struct FStoreMetaData* StoreItem, struct FInventoryMetaData* InventoryItem );
	void SetUnablePurchaseLabel ( struct FString Label );
	void SetPurchaseLabel ( struct FString Label );
	void SetWidgetLabel ( struct FString Label );
	void KillPreviewActor ( );
	void Cleanup ( );
	void Initialize ( int PosX, int PosY );
	void OnRenewItem ( struct FString InstanceId );
	void OnDestroyItem ( struct FString InstanceId );
	void OnActivateItem ( struct FString InstanceId );
	void OnPurchaseItem ( struct FString ItemGuid );
};

UClass* UFoxStoreUIItemDetail::pClassPointer = NULL;

// Class FoxGame.FoxStorePreviewNode_Base
// 0x0014 (0x0050 - 0x003C)
class UFoxStorePreviewNode_Base : public UObject
{
public:
	int                                                ItemUnlockID;                                     		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                WeaponXPos;                                       		// 0x0040 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WeaponYPos;                                       		// 0x0044 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WeaponWidth;                                      		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WeaponHeight;                                     		// 0x004C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1890 ];

		return pClassPointer;
	};

	void ApplyItemDetails ( struct FString Description );
	void Setup ( int ItemId );
	void Cleanup ( );
};

UClass* UFoxStorePreviewNode_Base::pClassPointer = NULL;

// Class FoxGame.FoxStorePreviewNode_PreviewBase
// 0x0000 (0x0050 - 0x0050)
class UFoxStorePreviewNode_PreviewBase : public UFoxStorePreviewNode_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1891 ];

		return pClassPointer;
	};

	void MakePreviewActor ( );
	void Setup ( int ItemId );
	void Cleanup ( );
};

UClass* UFoxStorePreviewNode_PreviewBase::pClassPointer = NULL;

// Class FoxGame.FoxStorePreviewNode_CharacterBase
// 0x0038 (0x0088 - 0x0050)
class UFoxStorePreviewNode_CharacterBase : public UFoxStorePreviewNode_PreviewBase
{
public:
	unsigned char                                      CustomItemType;                                   		// 0x0050 (0x0001) [0x0000000000000000]              
	struct FFoxPawnModInfo                             PawnModInfo;                                      		// 0x0054 (0x0034) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1892 ];

		return pClassPointer;
	};

	unsigned char GetCustomItemType ( );
	void SetupGear ( struct FProfileGearInfo* GearInfo );
	void UpdatePreviewActor ( );
	void MakePreviewActor ( );
	void ApplyItemStats ( struct FProfileGearInfo* GearInfo );
};

UClass* UFoxStorePreviewNode_CharacterBase::pClassPointer = NULL;

// Class FoxGame.FoxStorePreviewNode_Taunts
// 0x0001 (0x0089 - 0x0088)
class UFoxStorePreviewNode_Taunts : public UFoxStorePreviewNode_CharacterBase
{
public:
	unsigned char                                      CurrentSpecialMove;                               		// 0x0088 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1893 ];

		return pClassPointer;
	};

	unsigned char GetCustomItemType ( );
	void MakePreviewActor ( );
};

UClass* UFoxStorePreviewNode_Taunts::pClassPointer = NULL;

// Class FoxGame.FoxTutorialUI
// 0x0058 (0x0094 - 0x003C)
class UFoxTutorialUI : public UObject
{
public:
	struct FVector2D                                   PositionPresets[ 0x9 ];                           		// 0x003C (0x0048) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	class UFoxDataStore_Tutorials*                     TutorialDataStore;                                		// 0x0084 (0x0004) [0x0000000000000000]              
	class UFoxDataProvider_Tutorial*                   CurrentTutorialProvider;                          		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                CurrentTutorialIndex;                             		// 0x008C (0x0004) [0x0000000000000000]              
	class UFoxUITutorialPromptWidget*                  TutorialPrompt;                                   		// 0x0090 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1894 ];

		return pClassPointer;
	};

	void as_removeTutorialDialogPanel ( );
	struct FString as_addTutorialDialogPanel ( int PosX, int PosY );
	void ei_acceptButtonClicked ( struct FString ButtonArg );
	void ui_addTutorialDialogPanel ( int Preset );
	void CloseTutorialSequence ( );
	void ShowTutorialSequence ( struct FName TutorialName );
	void Cleanup ( );
	void Initialize ( );
};

UClass* UFoxTutorialUI::pClassPointer = NULL;

// Class FoxGame.FoxUIBaseTask
// 0x0004 (0x0040 - 0x003C)
class UFoxUIBaseTask : public UObject
{
public:
	unsigned long                                      bBlockSubsequent : 1;                             		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1895 ];

		return pClassPointer;
	};

	class UFoxUIBaseTask* GetRunningTask ( struct FName ClassName );
	int GetRunningTaskIndex ( struct FName ClassName );
	void NotifyProcessFailed ( unsigned long bResult );
	void NotifyProcessComplete ( unsigned long bResult );
	void CleanupOnlineDelegates ( );
	void RegisterOnlineDelegates ( );
	void StopTask ( unsigned long bResult );
	bool StartTask ( );
};

UClass* UFoxUIBaseTask::pClassPointer = NULL;

// Class FoxGame.FoxUIBaseTransactionTask
// 0x003C (0x007C - 0x0040)
class UFoxUIBaseTransactionTask : public UFoxUIBaseTask
{
public:
	TArray< struct FString >                           PurchaseResultLabels;                             		// 0x0040 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ActivationResultLabels;                           		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< unsigned char >                            AllowedActivationTypes;                           		// 0x0058 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWorkingDialogShow__Delegate;                  		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWorkingDialogHide__Delegate;                  		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1896 ];

		return pClassPointer;
	};

	bool GetUpdatedItemList ( struct FString InstanceId, struct FDialogBoxProperties* Properties );
	void HandlePostActivateItem ( int UnlockID );
	struct FString GetActivationData ( int UnlockID, class AFoxPC* PC, struct FString InputString );
	bool IsActivationSupported ( unsigned char ActivationType );
	bool RetrieveActivateResult ( unsigned char ActivationType, struct FString* ResultString );
	bool RetrievePurchaseResult ( unsigned char PurchaseResult, struct FString* ResultString );
	void OnWorkingDialogHide ( );
	void OnWorkingDialogShow ( struct FString StatusText );
};

UClass* UFoxUIBaseTransactionTask::pClassPointer = NULL;

// Class FoxGame.FoxUIBaseWidget
// 0x0028 (0x00A0 - 0x0078)
class UFoxUIBaseWidget : public UGFxObject
{
public:
	struct FString                                     LocalizationPackageName;                          		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LocalizationSectionName;                          		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bForceLocalization : 1;                           		// 0x0090 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	struct FScriptDelegate                             __OnClose__Delegate;                              		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1897 ];

		return pClassPointer;
	};

	struct FString eventGetLocalizedString ( struct FString Key, struct FString Section );
	void Cleanup ( );
	void OnClose ( );
};

UClass* UFoxUIBaseWidget::pClassPointer = NULL;

// Class FoxGame.FoxStoreUITagListWidget
// 0x0064 (0x0104 - 0x00A0)
class UFoxStoreUITagListWidget : public UFoxUIBaseWidget
{
public:
	TArray< struct FSpecialItemTag >                   SpecialItemTags;                                  		// 0x00A0 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	int                                                IndentAmountPx;                                   		// 0x00AC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                InitialSelectedIndex;                             		// 0x00B0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned long                                      bHideEmpty : 1;                                   		// 0x00B4 (0x0004) [0x0000000000004002] [0x00000001] ( CPF_Const | CPF_Config )
	unsigned long                                      bApplyChildTags : 1;                              		// 0x00B4 (0x0004) [0x0000000000004002] [0x00000002] ( CPF_Const | CPF_Config )
	unsigned long                                      bAddAdditionalIndentForChildTags : 1;             		// 0x00B4 (0x0004) [0x0000000000004002] [0x00000004] ( CPF_Const | CPF_Config )
	unsigned long                                      bReadOnly : 1;                                    		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bMultiSelect : 1;                                 		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	class AFoxPC*                                      PCOwner;                                          		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FTagListEntry >                     FullTagList;                                      		// 0x00BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTagListEntry >                     TagList;                                          		// 0x00C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      SelectedTagIndices;                               		// 0x00D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     ExtInterfaceHierarchyFunc;                        		// 0x00E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     HeaderLabel;                                      		// 0x00EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSelectListEntry__Delegate;                    		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1898 ];

		return pClassPointer;
	};

	void eventas_updateDataProvider ( TArray< struct FTagListEntry > DataProvider );
	void ei_expandTagEntry ( int TagIndex );
	void ei_selectTagEntry ( int TagIndex );
	void ApplyChildTags ( int TagIndex );
	void ApplyCurrentItemTags ( );
	void NotifyListEntrySelected ( int TagIndex );
	void ApplyHierarchicalItemTags ( TArray< struct FStoreTagMetaData >* ItemTag );
	void ToggleTagChildren ( int TagIndex );
	void ApplyItemTags ( TArray< struct FStoreTagMetaData >* ItemTags );
	void SetSelectedListItem ( int Index );
	void SetReadOnly ( unsigned long bState );
	void Cleanup ( );
	void Initialize ( class AFoxPC* PlayerController );
	void OnSelectListEntry ( unsigned long bApplySortOverride, TArray< struct FString >* SelectedTags );
};

UClass* UFoxStoreUITagListWidget::pClassPointer = NULL;

// Class FoxGame.FoxUIBaseUnlockWidget
// 0x0030 (0x00D0 - 0x00A0)
class UFoxUIBaseUnlockWidget : public UFoxUIBaseWidget
{
public:
	class AFoxPC*                                      PCOwner;                                          		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnlockType;                                       		// 0x00A4 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bWantsEquip : 1;                                  		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FScriptDelegate                             __OnRefreshCacheStarted__Delegate;                		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRefreshCacheComplete__Delegate;               		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnChangeInventoryComplete__Delegate;            		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1899 ];

		return pClassPointer;
	};

	void RefreshCacheComplete ( unsigned long bResult, struct FString FailureReason );
	void RefreshCacheStarted ( );
	void ChangeInventoryComplete ( unsigned long bResult, unsigned long bEquip );
	bool GetInventoryItemByGuid ( struct FString InstanceId, struct FInventoryMetaData* InventoryItem );
	bool GetStoreItemByGuid ( struct FString ItemGuid, struct FStoreMetaData* StoreItem );
	bool GetStoreItemByID ( int UnlockID, struct FStoreMetaData* StoreItem );
	void CreateDestroyItemTask ( class UFoxDestroyItemUI** DestroyItemUI, TArray< struct FInventoryMetaData >* InventoryItems );
	void DestroyItems ( TArray< struct FString > InstanceIds );
	void DestroyItem ( struct FString InstanceId );
	void CreateActivateItemTask ( unsigned long bEquip, class UFoxActivateItemUI** ActivateItemUI, TArray< struct FStoreMetaData >* StoreItems, TArray< struct FInventoryMetaData >* InventoryItems );
	void ActivateItems ( TArray< struct FString > InstanceIds, unsigned long bEquip, unsigned long bForceActivate );
	void ActivateItem ( struct FString InstanceId, unsigned long bEquip, unsigned long bForceActivate );
	void RenewItem ( struct FString InstanceId, unsigned long bCanEquip );
	void PurchaseItem ( struct FString ItemGuid, unsigned char FromLocation, unsigned long bCanEquip );
	bool CanDestroyItem ( struct FString InstanceId, struct FInventoryMetaData* InventoryItem );
	bool CanActivateItem ( struct FString InstanceId, struct FStoreMetaData* StoreItem, struct FInventoryMetaData* InventoryItem );
	bool CanRenewItem ( struct FString InstanceId, struct FStoreMetaData* StoreItem, struct FInventoryMetaData* InventoryItem );
	bool CanPurchaseItem ( struct FString ItemGuid, struct FStoreMetaData* StoreItem );
	void Refresh ( unsigned long bEquip );
	void Cleanup ( );
	void Initialize ( class AFoxPC* PlayerController, unsigned char ContainedUnlockType );
	void OnChangeInventoryComplete ( unsigned long bResult );
	void OnRefreshCacheComplete ( unsigned long bResult );
	void OnRefreshCacheStarted ( );
};

UClass* UFoxUIBaseUnlockWidget::pClassPointer = NULL;

// Class FoxGame.FoxUIBaseItemListWidget
// 0x008C (0x015C - 0x00D0)
class UFoxUIBaseItemListWidget : public UFoxUIBaseUnlockWidget
{
public:
	TArray< struct FListUpdateStateHandler >           ListUpdateHandlers;                               		// 0x00D0 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           SelectedItemGuids;                                		// 0x00DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            ExcludedUnlockTypes;                              		// 0x00E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FStoreTagMetaData >                 CachedStoreTags;                                  		// 0x00F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FStoreMetaData >                    CachedStoreItems;                                 		// 0x0100 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FInventoryMetaData >                CachedInventoryItems;                             		// 0x010C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bRefreshStore : 1;                                		// 0x0118 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bRefreshInventory : 1;                            		// 0x0118 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bInclusiveTagFilter : 1;                          		// 0x0118 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIgnoreHidden : 1;                                		// 0x0118 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bMultiSelect : 1;                                 		// 0x0118 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	TArray< struct FString >                           TagFilter;                                        		// 0x011C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            UnlockTypeFilter;                                 		// 0x0128 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      PurchaseStateFilter;                              		// 0x0134 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     HeaderLabel;                                      		// 0x0138 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSelectListEntry__Delegate;                    		// 0x0144 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDoubleClickListEntry__Delegate;               		// 0x0150 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1900 ];

		return pClassPointer;
	};

	void ChangeInventoryComplete ( unsigned long bResult, unsigned long bEquip );
	void RefreshCacheComplete ( unsigned long bResult, struct FString FailureReason );
	void ReloadList ( );
	bool GetInventoryItemByGuid ( struct FString InstanceId, struct FInventoryMetaData* InventoryItem );
	bool GetStoreItemByGuid ( struct FString ItemGuid, struct FStoreMetaData* StoreItem );
	bool GetStoreItemByID ( int UnlockID, struct FStoreMetaData* StoreItem );
	void UpdateListState ( unsigned char ListState );
	int GetNumListEntries ( );
	void ApplyPurchaseStateFilter ( unsigned char PurchaseState );
	void ApplyUnlockTypeFilter ( TArray< unsigned char >* UnlockTypes );
	void ApplyTagFilter ( unsigned long bInclusive, TArray< struct FString >* Tags );
	void ClearSelectedListItems ( );
	void SetSelectedListItems ( TArray< struct FString > ItemGuids );
	void SetSelectedListItem ( struct FString ItemGuid );
	void Refresh ( unsigned long bEquip );
	void Cleanup ( );
	void Initialize ( class AFoxPC* PlayerController, unsigned char ContainedUnlockType );
	void OnDoubleClickListEntry ( int UnlockID, struct FString ItemGuid );
	void OnSelectListEntry ( int UnlockID, struct FString ItemGuid );
};

UClass* UFoxUIBaseItemListWidget::pClassPointer = NULL;

// Class FoxGame.FoxUIInventoryListWidget
// 0x0024 (0x0180 - 0x015C)
class UFoxUIInventoryListWidget : public UFoxUIBaseItemListWidget
{
public:
	TArray< struct FInventoryListEntry >               FilteredItemList;                                 		// 0x015C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWorkingDialogShow__Delegate;                  		// 0x0168 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWorkingDialogHide__Delegate;                  		// 0x0174 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1901 ];

		return pClassPointer;
	};

	void eventas_updateDataProvider ( TArray< struct FInventoryListEntry > DataProvider );
	void ei_selectInventoryItemEntry ( int Index );
	void CreateDestroyItemTask ( class UFoxDestroyItemUI** DestroyItemUI, TArray< struct FInventoryMetaData >* InventoryItems );
	void CreateActivateItemTask ( unsigned long bEquip, class UFoxActivateItemUI** ActivateItemUI, TArray< struct FStoreMetaData >* StoreItems, TArray< struct FInventoryMetaData >* InventoryItems );
	void RefreshCacheComplete ( unsigned long bResult, struct FString FailureReason );
	void ReloadList ( );
	int GetNumListEntries ( );
	void DestroySelectedItems ( );
	void ActivateSelectedItems ( unsigned long bEquip, unsigned long bForceActivate );
	void ClearSelectedListItems ( );
	void SetSelectedListItems ( TArray< struct FString > ItemGuids );
	void SetSelectedListItem ( struct FString ItemGuid );
	TArray< struct FString > GetSelectedListItems ( );
	void Initialize ( class AFoxPC* PlayerController, unsigned char ContainedUnlockType );
	void OnWorkingDialogHide ( );
	void OnWorkingDialogShow ( struct FString StatusText );
};

UClass* UFoxUIInventoryListWidget::pClassPointer = NULL;

// Class FoxGame.FoxStoreUIItemListWidget
// 0x0010 (0x0190 - 0x0180)
class UFoxStoreUIItemListWidget : public UFoxUIInventoryListWidget
{
public:
	unsigned long                                      bReadOnly : 1;                                    		// 0x0180 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsInventory : 1;                                 		// 0x0180 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bApplySortOverride : 1;                           		// 0x0180 (0x0004) [0x0000000000000000] [0x00000004] 
	TArray< unsigned char >                            FilteredUnlockStates;                             		// 0x0184 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1902 ];

		return pClassPointer;
	};

	void ei_dblClickStoreItemEntry ( int Index );
	void ei_selectStoreItemEntry ( int Index );
	void ei_selectInventoryItemEntry ( int Index );
	void RefreshCacheComplete ( unsigned long bResult, struct FString FailureReason );
	void ReloadList ( );
	void GetFilterTagsFromItems ( TArray< struct FStoreTagMetaData >* Tags );
	void SetSortOverride ( unsigned long bState );
	void SetSelectedListItems ( TArray< struct FString > ItemGuids );
	void SetReadOnly ( unsigned long bState );
	void Initialize ( class AFoxPC* PlayerController, unsigned char ContainedUnlockType );
};

UClass* UFoxStoreUIItemListWidget::pClassPointer = NULL;

// Class FoxGame.FoxUIBaseUnlockListWidget
// 0x0094 (0x0164 - 0x00D0)
class UFoxUIBaseUnlockListWidget : public UFoxUIBaseUnlockWidget
{
public:
	struct FString                                     HeaderLabel;                                      		// 0x00D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EquipLabel;                                       		// 0x00DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PurchaseLabel;                                    		// 0x00E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LockedLabel;                                      		// 0x00F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EquippedLabel;                                    		// 0x0100 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EquipTooltip;                                     		// 0x010C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UnequipTooltip;                                   		// 0x0118 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PreviewTooltip;                                   		// 0x0124 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PurchaseTooltip;                                  		// 0x0130 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LockedTooltip;                                    		// 0x013C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                PendingUnlockID;                                  		// 0x0148 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnSelectListEntry__Delegate;                    		// 0x014C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSortList__Delegate;                           		// 0x0158 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1903 ];

		return pClassPointer;
	};

	int SortByUnlockID ( int InA, int InB );
	void RefreshCacheComplete ( unsigned long bResult, struct FString FailureReason );
	void RefreshCacheStarted ( );
	bool GetInventoryItemByGuid ( struct FString InstanceId, struct FInventoryMetaData* InventoryItem );
	bool GetStoreItemByGuid ( struct FString ItemGuid, struct FStoreMetaData* StoreItem );
	bool GetStoreItemByID ( int UnlockID, struct FStoreMetaData* StoreItem );
	bool GetListEntryDetails ( struct FBaseUnlockEntry* BaseEntry );
	void SetSelectedListEntry ( int Index );
	int GetUnlockFromIndex ( int Index );
	int GetIndexFromUnlock ( int UnlockID );
	void ReloadList ( );
	void SetSelectedListItem ( int Index );
	void SetListFromUnlocks ( TArray< int > Unlocks );
	void Cleanup ( );
	void Initialize ( class AFoxPC* PlayerController, unsigned char ContainedUnlockType );
	void OnSortList ( );
	void OnSelectListEntry ( int UnlockID );
};

UClass* UFoxUIBaseUnlockListWidget::pClassPointer = NULL;

// Class FoxGame.FoxUIDialogListWidget
// 0x0029 (0x018D - 0x0164)
class UFoxUIDialogListWidget : public UFoxUIBaseUnlockListWidget
{
public:
	struct FString                                     PlayerHeaderLabel;                                		// 0x0164 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AnnouncerHeaderLabel;                             		// 0x0170 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FDialogListEntry >                  DialogList;                                       		// 0x017C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                SelectedDialogUnlock;                             		// 0x0188 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      PlayerGender;                                     		// 0x018C (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1904 ];

		return pClassPointer;
	};

	void as_updateDataProvider ( TArray< struct FDialogListEntry > DataProvider );
	void ei_previewDialog ( int Index );
	void ei_selectDialog ( int DialogIndex );
	int SortByNameForPlayer ( struct FDialogListEntry InA, struct FDialogListEntry InB );
	int SortByNameForAnnouncer ( struct FDialogListEntry InA, struct FDialogListEntry InB );
	void ReloadList ( );
	void SetSelectedListEntry ( int Index );
	int GetUnlockFromIndex ( int Index );
	int GetIndexFromUnlock ( int UnlockID );
	int GetSelectedUnlock ( );
	void SetSelectedListItem ( int Index );
	void SetSelectedFromUnlock ( int SelectedUnlock );
	void SetListFromUnlocks ( TArray< int > Unlocks );
	void Initialize ( class AFoxPC* PlayerController, unsigned char ContainedUnlockType );
};

UClass* UFoxUIDialogListWidget::pClassPointer = NULL;

// Class FoxGame.FoxUIEmblemPanelWidget
// 0x001C (0x0180 - 0x0164)
class UFoxUIEmblemPanelWidget : public UFoxUIBaseUnlockListWidget
{
public:
	TArray< struct FEmblemComponentEntry >             EmblemComponents;                                 		// 0x0164 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectedEmblemComponentIndex;                     		// 0x0170 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FEmblemLayerEntry >                 EmblemList;                                       		// 0x0174 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1905 ];

		return pClassPointer;
	};

	void as_updateDataProvider ( TArray< struct FEmblemLayerEntry > DataProvider );
	void as_resetBottomColor ( );
	void as_resetMiddleColor ( );
	void as_resetTopColor ( );
	void as_disableColorButton ( int EmblemLayer, unsigned long bDisable );
	void as_remoteSelectColorButton ( int EmblemLayer );
	void as_updateColorButtonInfo ( int EmblemLayer, struct FString ColorRef, struct FString ExtInterfaceClickFunc, struct FString ExtInterfaceClickArg );
	void as_disableIconButton ( int EmblemLayer, unsigned long bDisable );
	void as_remoteSelectIconButton ( int EmblemLayer );
	void as_updateIconButtonInfo ( int EmblemLayer, struct FString IconRef, struct FString ExtInterfaceClickFunc, struct FString ExtInterfaceClickArg );
	void as_setListClickFunction ( struct FString ExtInterfaceClickFunc );
	void as_setEmblemLayer ( int EmblemLayer );
	void as_setSelectedIndex ( int Index );
	void ei_selectEmblemEntry ( int Index );
	void ei_selectEmblemComponent ( struct FString Index );
	void ReloadList ( );
	void ResetEmblemLayerColor ( unsigned char EmblemLayer );
	void ToggleEmblemLayerComponent ( unsigned long bEnabled, unsigned char EmblemComponentType, unsigned char EmblemLayer );
	int FindEmblemLayerComponent ( unsigned char EmblemComponentType, unsigned char EmblemLayer );
	void ApplyEmblemLayerComponent ( int Index, int UnlockID );
	void ApplyEmblemLayer ( int Index );
	void SetSelectedListEntry ( int Index );
	void SetSelectedEmblemComponent ( int Index );
	int GetUnlockFromIndex ( int Index );
	int GetIndexFromUnlock ( int UnlockID );
	void SetSelectedUnlocks ( struct FProfileEmblemInfo EmblemInfo );
	void GetSelectedUnlocks ( struct FProfileEmblemInfo* EmblemInfo );
	void SetSelectedListItem ( int Index );
	void SetSelectedFromUnlock ( int SelectedUnlock );
	void SetListFromUnlocks ( TArray< int > Unlocks );
	void Initialize ( class AFoxPC* PlayerController, unsigned char ContainedUnlockType );
};

UClass* UFoxUIEmblemPanelWidget::pClassPointer = NULL;

// Class FoxGame.FoxUIEmoteListWidget
// 0x0041 (0x01A5 - 0x0164)
class UFoxUIEmoteListWidget : public UFoxUIBaseUnlockListWidget
{
public:
	struct FString                                     SecondsLabel;                                     		// 0x0164 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class AFoxCustomPlayerActor*                       PreviewActor;                                     		// 0x0170 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FEmoteListEntry >                   EmoteList;                                        		// 0x0174 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FEmoteRadialEntry >                 EmoteRadialList;                                  		// 0x0180 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      SelectedEmoteUnlocks;                             		// 0x018C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UFoxDataStore_Unlockables*                   UnlockablesDataStore;                             		// 0x0198 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SelectedAvatarIndex;                              		// 0x019C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bShowRadial : 1;                                  		// 0x01A0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      CurrentSpecialMove;                               		// 0x01A4 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1906 ];

		return pClassPointer;
	};

	void as_updateDataProvider ( TArray< struct FEmoteListEntry > DataProvider );
	void as_updateRadial ( TArray< struct FEmoteRadialEntry > DataProvider );
	void ei_previewEmote ( int Index );
	void ei_selectEmote ( int EmoteIndex );
	int SortByName ( struct FEmoteListEntry InA, struct FEmoteListEntry InB );
	bool eventGetPreviewAnimName ( unsigned char TauntEnum, struct FName* AnimName, float* AnimDuration );
	void SetRadialFromUnlocks ( TArray< int > Unlocks );
	void ReloadList ( );
	void SetSelectedListEntry ( int Index );
	void ToggleListSelection ( unsigned long bState );
	void ToggleRadialPreview ( unsigned long bState );
	int GetUnlockFromIndex ( int Index );
	int GetIndexFromUnlock ( int UnlockID );
	TArray< int > GetSelectedUnlocks ( );
	void SetSelectedListItem ( int Index );
	void SetSelectedFromUnlocks ( TArray< int > SelectedUnlocks, int AvatarIndex );
	void SetListFromUnlocks ( TArray< int > Unlocks );
	void Initialize ( class AFoxPC* PlayerController, unsigned char ContainedUnlockType );
};

UClass* UFoxUIEmoteListWidget::pClassPointer = NULL;

// Class FoxGame.FoxUITitleListWidget
// 0x0010 (0x0174 - 0x0164)
class UFoxUITitleListWidget : public UFoxUIBaseUnlockListWidget
{
public:
	TArray< struct FBaseUnlockEntry >                  TitleList;                                        		// 0x0164 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                SelectedTitleUnlock;                              		// 0x0170 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1907 ];

		return pClassPointer;
	};

	void as_updateDataProvider ( TArray< struct FBaseUnlockEntry > DataProvider );
	void ei_selectTitle ( int TitleIndex );
	int SortByName ( struct FBaseUnlockEntry InA, struct FBaseUnlockEntry InB );
	void ReloadList ( );
	void SetSelectedListEntry ( int Index );
	int GetUnlockFromIndex ( int Index );
	int GetIndexFromUnlock ( int UnlockID );
	void GetSelectedUnlock ( int* UnlockID );
	void SetSelectedListItem ( int Index );
	void SetSelectedFromUnlock ( int SelectedUnlock );
	void SetListFromUnlocks ( TArray< int > Unlocks );
	void Initialize ( class AFoxPC* PlayerController, unsigned char ContainedUnlockType );
};

UClass* UFoxUITitleListWidget::pClassPointer = NULL;

// Class FoxGame.FoxUIUnlockProgressionWidget
// 0x0068 (0x01CC - 0x0164)
class UFoxUIUnlockProgressionWidget : public UFoxUIBaseUnlockListWidget
{
public:
	TArray< unsigned char >                            RootUnlockFilter;                                 		// 0x0164 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FUnlockExclusionEntry >             ExcludedUnlockStates;                             		// 0x0170 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FUnlockFilterEntry >                UnlockFilters;                                    		// 0x017C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< unsigned char >                            FilteredUnlockStates;                             		// 0x0188 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< unsigned char >                            FilteredPurchaseStates;                           		// 0x0194 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bShowPurchaseState : 1;                           		// 0x01A0 (0x0004) [0x0000000000004002] [0x00000001] ( CPF_Const | CPF_Config )
	unsigned long                                      bAlphabetical : 1;                                		// 0x01A0 (0x0004) [0x0000000000004002] [0x00000002] ( CPF_Const | CPF_Config )
	struct FUnlockFilterEntry                          SelectedUnlockFilter;                             		// 0x01A4 (0x001C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FUnlockProgressionListEntry >       UnlockList;                                       		// 0x01C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1908 ];

		return pClassPointer;
	};

	void as_updateDataProvider ( TArray< struct FUnlockProgressionListEntry > DataProvider );
	void as_addCategoryScroller ( TArray< struct FString > DataProvider, int SelectedIndex, struct FString ExtInterfaceClickFunc );
	void ei_selectScrollerEntry ( int ScrollerIndex );
	void SortList ( );
	void ReloadList ( );
	void ApplyScrollerEntries ( );
	bool GetListEntryDetails ( struct FBaseUnlockEntry* BaseEntry );
	void SetListFromUnlocks ( TArray< int > Unlocks );
	void Initialize ( class AFoxPC* PlayerController, unsigned char ContainedUnlockType );
};

UClass* UFoxUIUnlockProgressionWidget::pClassPointer = NULL;

// Class FoxGame.FoxUIItemDealWidget
// 0x0030 (0x0100 - 0x00D0)
class UFoxUIItemDealWidget : public UFoxUIBaseUnlockWidget
{
public:
	struct FString                                     TitleLabel;                                       		// 0x00D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LeftLabel;                                        		// 0x00DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OffLabel;                                         		// 0x00E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClickHereLabel;                                   		// 0x00F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1909 ];

		return pClassPointer;
	};

	void as_updateItem ( struct FBaseStoreEntry ItemEntry );
	void ei_selectItemDeal ( struct FString ItemGuid );
	bool GetStoreItemByGuid ( struct FString ItemGuid, struct FStoreMetaData* StoreItem );
	bool GetItemTileFromStoreItem ( struct FBaseStoreEntry* ItemEntry, struct FStoreMetaData* StoreItem );
	bool ApplyOfferItem ( struct FStoreOfferMetaData Offer, float* CurrentDisplayTime );
	void ToggleVisible ( unsigned long bToggle );
	void Initialize ( class AFoxPC* PlayerController, unsigned char ContainedUnlockType );
};

UClass* UFoxUIItemDealWidget::pClassPointer = NULL;

// Class FoxGame.FoxUIInventoryCountWidget
// 0x004C (0x00EC - 0x00A0)
class UFoxUIInventoryCountWidget : public UFoxUIBaseWidget
{
public:
	struct FString                                     WarningLabelColor;                                		// 0x00A0 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     MaxLabelColor;                                    		// 0x00AC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	float                                              WarningLabelRatio;                                		// 0x00B8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MaxLabelRatio;                                    		// 0x00BC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                InventoryItemCount;                               		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InventoryItemCap;                                 		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     HeaderLabel;                                      		// 0x00C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WarningLabel;                                     		// 0x00D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MaxLabel;                                         		// 0x00E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1910 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UFoxUIInventoryCountWidget::pClassPointer = NULL;

// Class FoxGame.FoxUIModalDialogWidget
// 0x0018 (0x00B8 - 0x00A0)
class UFoxUIModalDialogWidget : public UFoxUIBaseWidget
{
public:
	struct FString                                     WidgetSymbolName;                                 		// 0x00A0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     WidgetContainerPath;                              		// 0x00AC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1911 ];

		return pClassPointer;
	};

	void SetField3Label ( struct FString Label );
	void SetField2Label ( struct FString Label );
	void SetField1Label ( struct FString Label );
	void ToggleNoTop ( unsigned long bToggle );
	void Cleanup ( );
	void Initialize ( int PosX, int PosY, struct FString FirstLine, struct FString SecondLine, struct FString ThirdLine );
};

UClass* UFoxUIModalDialogWidget::pClassPointer = NULL;

// Class FoxGame.FoxUINoticePopupWidget
// 0x0018 (0x00B8 - 0x00A0)
class UFoxUINoticePopupWidget : public UFoxUIBaseWidget
{
public:
	struct FString                                     WidgetSymbolName;                                 		// 0x00A0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     WidgetContainerPath;                              		// 0x00AC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1912 ];

		return pClassPointer;
	};

	void SetWidgetColor ( struct FString WidgetColor );
	void SetBodyText ( struct FString BodyText );
	void SetTitleText ( struct FString TitleText );
	void Cleanup ( );
	void Initialize ( int PosX, int PosY, struct FString TitleText, struct FString BodyText, struct FString WidgetColor );
};

UClass* UFoxUINoticePopupWidget::pClassPointer = NULL;

// Class FoxGame.FoxUIServerDetailsWidget
// 0x018C (0x022C - 0x00A0)
class UFoxUIServerDetailsWidget : public UFoxUIBaseWidget
{
public:
	struct FServerListEntry                            CurrentEntry;                                     		// 0x00A0 (0x0110) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UFoxDataStore_Playlists*                     PlaylistDataStore;                                		// 0x01B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UFoxDataProvider_GameModeInfo* >     GameModeProviders;                                		// 0x01B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UFoxDataProvider_PlaylistGameInfo* > PlaylistGameProviders;                            		// 0x01C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UFoxDataProvider_MapInfo* >          MapInfoProviders;                                 		// 0x01CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CycleLabel;                                       		// 0x01D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RandomLabel;                                      		// 0x01E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     JoinButtonLabel;                                  		// 0x01F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     JoinButtonTooltip;                                		// 0x01FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WatchButtonLabel;                                 		// 0x0208 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WatchButtonTooltip;                               		// 0x0214 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnJoinServerEntry__Delegate;                    		// 0x0220 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1913 ];

		return pClassPointer;
	};

	void as_clearServerDetail ( );
	void as_updateGameModeList ( TArray< struct FServerDetailListEntry > DataProvider );
	void as_updateMapList ( TArray< struct FServerDetailListEntry > DataProvider );
	void as_watchButtonInfo ( struct FString Label, struct FString ToolTip, struct FString ExtClickFunc, struct FString ExtClickArg, unsigned long bDisabled );
	void as_joinButtonInfo ( struct FString Label, struct FString ToolTip, struct FString ExtClickFunc, struct FString ExtClickArg, unsigned long bDisabled );
	void GetDataProviders ( );
	void AddGameModeListEntry ( struct FName PlaylistGameName, unsigned long bUnique, TArray< int >* GameModeIndices, int* nUnique );
	void AddMapListEntry ( struct FName MapName, unsigned long bUnique, TArray< int >* MapIndices, int* nUnique );
	void SetAgentCount ( int nAgents, int nSpectators );
	void SetCycleType ( unsigned long bRandom );
	void SetOwnerName ( struct FString OwnerName );
	void SetDesignationType ( struct FServerDesignationDisplayInfo* DisplayInfo );
	void SetAccessType ( struct FServerAccessDisplayInfo* DisplayInfo );
	void AddEmptyEntries ( struct FString EmptyEntryName, TArray< struct FServerDetailListEntry >* DetailList );
	void AddDetailListEntry ( struct FString EntryName, unsigned long bCanInteract, unsigned long bIsDisabled, TArray< struct FServerDetailListEntry >* DetailList );
	void SetDetailsFromPlaylistSettings ( class UOnlineGameSettings* InGameSettings, class UFoxDataProvider_Playlist* InPlaylist );
	void SetDetailsFromPlaylist ( class UFoxDataProvider_Playlist* Playlist );
	void ClearServerDetails ( unsigned long bPartial );
	void UpdateServerDetails ( struct FServerListEntry Entry );
	void Initialize ( );
	void OnJoinServerEntry ( struct FServerListEntry ServerEntry );
};

UClass* UFoxUIServerDetailsWidget::pClassPointer = NULL;

// Class FoxGame.FoxUIServerFilterWidget
// 0x0180 (0x0220 - 0x00A0)
class UFoxUIServerFilterWidget : public UFoxUIBaseWidget
{
public:
	int                                                NumSlotThresholds;                                		// 0x00A0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FFilterDropdown                             SlotFilterDropdown;                               		// 0x00A4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FFilterDropdown                             PingFilterDropdown;                               		// 0x00B4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FLevelFilterToggleButton                    LevelFilterToggle;                                		// 0x00C4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FGameModeToggleButton >             GameModeToggles;                                  		// 0x00D0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     FilterOnLabel;                                    		// 0x00DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FilterOffLabel;                                   		// 0x00E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AnyLabel;                                         		// 0x00F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ToLabel;                                          		// 0x0100 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HideHeaderLabel;                                  		// 0x010C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HideEmptyLabel;                                   		// 0x0118 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HideEmptyTooltip;                                 		// 0x0124 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HideFullLabel;                                    		// 0x0130 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HideFullTooltip;                                  		// 0x013C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FreeSlotsLabel;                                   		// 0x0148 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FreeSlotsTooltip;                                 		// 0x0154 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PingFilterLabel;                                  		// 0x0160 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PingFilterTooltip;                                		// 0x016C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LevelFilterLabel;                                 		// 0x0178 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LevelFilterTooltip;                               		// 0x0184 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HideGameTypeLabel;                                		// 0x0190 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HidePersonalServersLabel;                         		// 0x019C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HidePersonalServersTooltip;                       		// 0x01A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HideNonLevelServersLabel;                         		// 0x01B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HideNonLevelServersTooltip;                       		// 0x01C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HideRestrictedServersLabel;                       		// 0x01CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HideRestrictedServersTooltip;                     		// 0x01D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HidePasswordServersLabel;                         		// 0x01E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HidePasswordServersTooltip;                       		// 0x01F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HideEndingServersLabel;                           		// 0x01FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HideEndingServersTooltip;                         		// 0x0208 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFilterChanged__Delegate;                      		// 0x0214 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1914 ];

		return pClassPointer;
	};

	struct FString as_addGameTypeFilterToggle ( struct FString Label, unsigned long bToggleOn, struct FString ToolTip, struct FString ExtInterfaceClickFunc );
	struct FString as_addDetailedFilter ( struct FString Label, unsigned long bToggleOn, struct FString ToolTip, struct FString ExtInterfaceClickFunc );
	void as_setLevelInputInfo ( struct FString DefaultLabelA, struct FString DefaultLabelB, struct FString ToLabelStr, int MaxChars, struct FString ExtInterfaceInputFuncA, struct FString ExtInterfaceInputFuncB );
	void as_setLevelFilter ( struct FString Label, unsigned long bToggleOn, struct FString ToolTip, struct FString ExtInterfaceClickFunc );
	struct FString as_setPingDropInfo ( struct FString Label, struct FString ToolTip, TArray< struct FString > Amounts, struct FString ExtInterfaceClickFunc, int InitialIndex, unsigned long bDisabled );
	struct FString as_setSlotDropInfo ( struct FString Label, struct FString ToolTip, TArray< struct FString > Amounts, struct FString ExtInterfaceClickFunc, int InitialIndex, unsigned long bDisabled );
	void ei_serverFiltersClosed ( );
	void ei_serverFiltersOpen ( );
	void ei_toggleGameMode ( );
	void ei_toggleEnding ( unsigned long bFilter );
	void ei_togglePassword ( unsigned long bFilter );
	void ei_toggleRestricted ( unsigned long bFilter );
	void ei_toggleNonLevelRestricted ( unsigned long bFilter );
	void ei_togglePersonal ( unsigned long bFilter );
	void ei_selectSlotDropdown ( struct FString UnusedArg, struct FString IndexStr );
	void ei_selectPingDropdown ( struct FString UnusedArg, struct FString IndexStr );
	void ei_inputLevelUpper ( struct FString Text, int Focus );
	void ei_inputLevelLower ( struct FString Text, int Focus );
	void ei_toggleLevelFilter ( unsigned long bFilter );
	void ei_toggleFull ( unsigned long bFilter );
	void ei_toggleEmpty ( unsigned long bFilter );
	void SetupPingFilter ( );
	void SetupSlotFilter ( );
	bool UpdateLevelFilter ( int LevelLowerBound, int LevelUpperBound, unsigned long bCompareLower, unsigned long bCompareUpper, unsigned long bTurnOn, unsigned long bLostFocus );
	void NotifyFiltersChanged ( );
	void SetupLevelFilter ( );
	void GetDefaultLevelFilter ( int* LevelLowerBound, int* LevelUpperBound );
	void GetLevelLabel ( int Level, struct FString* OutputStr, int* CachedLevel );
	void GetSlotLabel ( int Slots, struct FString* OutputStr );
	void GetPingLabel ( int PingMs, struct FString* OutputStr );
	void Cleanup ( );
	void Initialize ( );
	void OnFilterChanged ( );
};

UClass* UFoxUIServerFilterWidget::pClassPointer = NULL;

// Class FoxGame.FoxUIServerListWidget
// 0x006C (0x010C - 0x00A0)
class UFoxUIServerListWidget : public UFoxUIBaseWidget
{
public:
	TArray< int >                                      PingThresholds;                                   		// 0x00A0 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FServerAccessDisplayInfo >          ServerAccessInfo;                                 		// 0x00AC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FServerDesignationDisplayInfo >     ServerDesignationInfo;                            		// 0x00B8 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FServerListEntry >                  ServerList;                                       		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FServerListEntry >                  FullServerList;                                   		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectedServerId;                                 		// 0x00DC (0x0004) [0x0000000000000000]              
	TArray< int >                                      FilteredGameModes;                                		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                FilteredPingThreshold;                            		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                FilteredSlotThreshold;                            		// 0x00F0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFilterLevel : 1;                                 		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bReadOnly : 1;                                    		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bFilterEmpty : 1;                                 		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bFilterFull : 1;                                  		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bFilterNonLevelRestricted : 1;                    		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bFilterPrivate : 1;                               		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bFilterRestricted : 1;                            		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bFilterMatchEnding : 1;                           		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	int                                                MinPlayerLevel;                                   		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                MaxPlayerLevel;                                   		// 0x00FC (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnSelectServerEntry__Delegate;                  		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1915 ];

		return pClassPointer;
	};

	void eventas_updateDataProvider ( TArray< struct FServerListEntry > DataProvider );
	void ei_selectJoinServerEntry ( int Index );
	void ei_selectServerEntry ( int Index );
	int GetBarCountFromPing ( int PingInMs );
	struct FString MarkupLevelRestrictionString ( int MinLevel, int MaxLevel );
	void ApplyDesignationDisplayInfo ( unsigned char DesignationType, class AFoxPC* ForPC, struct FServerListEntry* ListEntry );
	void ApplyAccessDisplayInfo ( unsigned char AccessType, struct FServerListEntry* ListEntry );
	bool CreateServerListEntry ( class UOnlineGameSettings* GameSettings, class AFoxPC* ForPC, struct FString ForcedMapName, struct FString ForcedGameModeName, struct FString ForcedServerName, struct FString ForcedOwnerName, struct FServerListEntry* ListEntry );
	struct FString GetLocalizedAdminName ( struct FString Key );
	struct FString GetLocalizedServerName ( struct FString Key );
	void eventNotifySelectionChanged ( int SelectedIndex, unsigned long bJoin, unsigned long bForce );
	void ApplySorting ( );
	void RefreshList ( unsigned long bResort );
	void ChangeSortingPriority ( int SortIndex );
	void SetFilteredGameModes ( TArray< int > GameModeIndices );
	void SetFilteredSlotThreshold ( int SlotThreshold );
	void SetFilteredPingThreshold ( int PingThreshold );
	void SetLevelFilter ( int MinLevel, int MaxLevel );
	void ToggleNonLevelRestrictedFilter ( unsigned long bFilter );
	void ToggleMatchEndingFilter ( unsigned long bFilter );
	void ToggleRestrictedFilter ( unsigned long bFilter );
	void TogglePrivateFilter ( unsigned long bFilter );
	void ToggleFullFilter ( unsigned long bFilter );
	void ToggleEmptyFilter ( unsigned long bFilter );
	void SetServerListFromResults ( class AFoxPC* ForPC, TArray< struct FOnlineGameSearchResult > SearchResults );
	void SetReadOnly ( unsigned long bState );
	void Initialize ( struct FString ExtInterfaceClickFunc, struct FString ExtInterfaceDblClickFunc );
	void OnSelectServerEntry ( struct FServerListEntry ServerEntry, unsigned long bJoin );
};

UClass* UFoxUIServerListWidget::pClassPointer = NULL;

// Class FoxGame.FoxUITutorialPromptWidget
// 0x001C (0x00BC - 0x00A0)
class UFoxUITutorialPromptWidget : public UFoxUIBaseWidget
{
public:
	struct FString                                     OkayButtonLabel;                                  		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DisableTutorialsToggleLabel;                      		// 0x00AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bDisableTutorials : 1;                            		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1916 ];

		return pClassPointer;
	};

	void as_updateDataProvider ( TArray< struct FTutorialMessageInfo > DataProvider );
	void as_setToggleInfo ( struct FString ButtonLabel, struct FString ExtInterfaceClickFunc, struct FString ExtInterfaceClickArg );
	void as_setButtonInfo ( struct FString ButtonLabel, struct FString ExtInterfaceClickFunc, struct FString ExtInterfaceClickArg );
	void ei_toggleClicked ( struct FString ButtonArg );
	void SetPromptFromTutorialProvider ( class UFoxDataProvider_Tutorial* TutorialProvider );
	bool ShouldDisableTutorials ( );
	void Cleanup ( );
	void Initialize ( struct FString ExtInterfaceClickFunc );
};

UClass* UFoxUITutorialPromptWidget::pClassPointer = NULL;

// Class FoxGame.FoxUIWorkingDialogWidget
// 0x0018 (0x00B8 - 0x00A0)
class UFoxUIWorkingDialogWidget : public UFoxUIBaseWidget
{
public:
	struct FString                                     WidgetSymbolName;                                 		// 0x00A0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     WidgetContainerPath;                              		// 0x00AC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1917 ];

		return pClassPointer;
	};

	void SetBodyLabel ( struct FString Label );
	void SetTitleLabel ( struct FString Label );
	void Cleanup ( );
	void Initialize ( int PosX, int PosY, struct FString TitleText, struct FString BodyText );
};

UClass* UFoxUIWorkingDialogWidget::pClassPointer = NULL;

// Class FoxGame.FoxUIPublicConfig
// 0x002C (0x0068 - 0x003C)
class UFoxUIPublicConfig : public UObject
{
public:
	unsigned long                                      bHideEmpty : 1;                                   		// 0x003C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bHideFull : 1;                                    		// 0x003C (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bHidePersonalServers : 1;                         		// 0x003C (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bHideNonLevelRestrictedServers : 1;               		// 0x003C (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bHideRestrictedServers : 1;                       		// 0x003C (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bHidePasswordServers : 1;                         		// 0x003C (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bHideEndingServers : 1;                           		// 0x003C (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bLevelFilter : 1;                                 		// 0x003C (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	TArray< int >                                      SortPriorities;                                   		// 0x0040 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                SlotFilterMinimum;                                		// 0x004C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                PingFilterThreshold;                              		// 0x0050 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                LevelFilterLowerBound;                            		// 0x0054 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                LevelFilterUpperBound;                            		// 0x0058 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< int >                                      HiddenGameTypeIndices;                            		// 0x005C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1918 ];

		return pClassPointer;
	};

	bool FiltersOn ( );
};

UClass* UFoxUIPublicConfig::pClassPointer = NULL;

// Class FoxGame.FoxAccessControl
// 0x0000 (0x029C - 0x029C)
class AFoxAccessControl : public AAccessControl
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39502 ];

		return pClassPointer;
	};

	void KickBan ( struct FString Target );
	void PunkBustPlayer ( class APlayerController* C, struct FString Reason );
	bool KickPlayer ( class APlayerController* C, struct FString KickReason );
	struct FString GetAdminPassword ( );
	bool IsAdmin ( class APlayerController* P );
};

UClass* AFoxAccessControl::pClassPointer = NULL;

// Class FoxGame.FoxAdmin
// 0x0000 (0x0A3C - 0x0A3C)
class AFoxAdmin : public AFoxPC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39506 ];

		return pClassPointer;
	};

	void ServerSetHealth ( int newHealth );
	void SetHealth ( int newHealth );
	void ServerSkipMap ( );
	void SkipMap ( );
	void TestDestoryBeacon ( );
	void TestServerAvail ( unsigned char RegionID );
	void ServerSetIdleKickTime ( float NewIdleKickTime );
	void SetIdleKickTime ( float IdleKickTime );
	void TestNetConnection ( );
	void TestPlaylistBuild ( int MapIndex, int GameModeIndex );
	void TestPlaylists ( struct FName PlaylistName );
	void OnCreatePrivateMatchComplete ( struct FName SessionNam, unsigned long bWasSuccessful );
	void CreateCustomGame ( struct FString ServerName, struct FString Password, int MapIndex, int GameModeIndex, unsigned long bPremiumMatch );
	void SetControllerTightAimSensitivity ( float InSens );
	void SetControllerSensitivity ( float InSens );
	void PlayTakeDamageSound ( );
	void PlayGiveDamageSound ( );
	void ServerToggleClientSideHitDetection ( unsigned long bTurnOn );
	void ToggleClientSideHitDetection ( unsigned long bTurnOn );
	void TestHitBySounds ( unsigned char HitSoundtype );
	void JoinGameAsParty ( );
	void ForceGC ( );
	void PrintGfxObjects ( );
	void SwapBackground ( unsigned long bBad );
	void ChangeTickRate ( float NewRate );
	void DebugTeamBalance ( );
	void TestReportUI ( );
	void ToggleAllowScreenDoorFade ( unsigned long bOn );
	void QueryBasicProfile ( );
	void AddFriend ( struct FString FriendName );
	void QueryFriends ( );
	void SuppressWeapon ( unsigned long bSuppress );
	void TweakOffsetWeight ( float NewValue );
	void ServerPunkBustAll ( );
	void PunkBustAll ( );
	void TestDOFFalloffExponent ( float NewSize );
	void TestDOFInnerRadius ( float NewSize );
	void TestDOFMaxFarBlur ( float NewSize );
	void TestDOFMaxNearBlur ( float NewSize );
	void TestDOFKernalSize ( float NewSize );
	void TestAdminMessage ( struct FString l1, struct FString l2, struct FString l3 );
	void TweakWeaponSwitchRate ( float NewValue );
	void TweakReloadSpeed ( float NewValue );
	void TweakSpeed ( float NewValue );
	void TweakSpreadShotCountDecayRate ( float NewValue );
	void TweakRecoilSizeModifier ( float NewValue );
	void TweakMaximumSpread ( float NewValue );
	void TweakSpreadPerShotExp ( float NewValue );
	void TweakSpreadPerShot ( float NewValue );
	void TweakBaseSpread ( float NewValue );
	void TweakRecoilSlider ( int NewValue );
	void TweakAccuracySlider ( int NewValue );
	void MyTeamNum ( );
	void DebugState ( );
	void ServerGiveTactical ( int Index );
	void GiveTactical ( int Index );
	void ChangeGender ( );
	void AddDebugGem ( unsigned char GemType, int GemQuality, int GemDuration );
	void AddDebugGems ( );
	void DebugGemName ( unsigned char GemType, int GemQuality, int GemDuration );
	void ServerDebugInjure ( );
	void InjurePawn ( );
	void DebugInjure ( );
	void ServerElectrify ( );
	void MailDestroy ( int MailIndex );
	void MailOpen ( int MailIndex );
	void MailRead ( int MailIndex );
	void MailSend ( struct FString UserName, struct FString Subject, struct FString Message, int GPAmount );
	void MailQuery ( );
	void ServerStunSelf ( float Duration, unsigned long bFriendly );
	void StunSelf ( float Duration, unsigned long bFriendly );
	void Electrify ( );
	void DebugSortedPRIs ( );
	void CheckLoadoutInfo ( );
	void ServerGiveGear ( int Index );
	void GiveGear ( int Index );
	void ServerDebugChangeTeams ( );
	void DebugChangeTeams ( );
	void ForceHardDrive ( unsigned long bSuperFast );
	void ChangeAmmoType ( int AmmoType, unsigned long bPrimary );
	void ChangeHangerIndex ( int Index );
	void ChangeMagazine ( struct FString MagazineClassName, unsigned long bPrimary );
	void ChangeSecondaryMod ( struct FString ModClassName );
	void ChangePrimaryMod ( struct FString ModClassName );
	void ChangeScope ( struct FString ScopeClassName, unsigned long bPrimary );
	void TestHeros ( );
	void ChangeCrosshair ( int DataStoreIndex );
	void SetCrosshair ( int NumTicks, int TickLength, unsigned long bRotated );
	void ServerDebugRevive ( );
	void DebugRevive ( );
	void DebugUnlock ( int UnlockID );
	void ServerDebugBoosts ( );
	void DebugBoosts ( );
	void PWChangeGender ( unsigned long bNewFemale );
	void ServerChangeHelmet ( int Index );
	void ChangeHelmet ( int Index );
	void ServerChangeLowerBody ( int Index );
	void ChangeLowerBody ( int Index );
	void ServerChangeUpperBody ( int Index );
	void ChangeUpperBody ( int Index );
	void ServerSetRank ( int NewRankIndex );
	void SetRank ( int NewRankIndex );
	void ServerActivateSkill ( int SkillID );
	void ActivateSkill ( int SkillID );
	void PrintActorInfo ( );
	void ForceRot ( );
	void DebugRot ( );
	void ServerGodMode ( );
	void God ( );
	void ServerAddToTeamScore ( int Amount );
	void AddToTeamScore ( int Amount );
	void ServerApplyItem ( int ItemId );
	void ApplyItem ( int ItemId );
	void ClientGiveUseObject ( class AFoxGameObject* UseObject );
	void ServerGetUseObject ( );
	void DebugUseObject ( );
	void PWUpdateSkills ( int A, int B, int C, int D, int E );
	void PWQueryRank ( );
	void LeaveMatchmaking ( );
	void PWJoinMatchmaking ( );
	void PWUnlockAllSkills ( );
	void PWResetSkills ( );
	void PWQuerySkills ( );
	void PWGetXP ( );
	void PWAddXP ( int Amount );
	void PWCreateCustomGame ( struct FString ServerName, struct FString Password, struct FString Playlist );
	void PWFundQuery ( );
	void PWGPAdd ( int Amount );
	void PWLogin ( struct FString User, struct FString pass );
	void CyclePlaylist ( );
	void ForcePlaylistByName ( struct FName PlaylistName );
	void UnloadStreams ( );
	void ServerUnloadStreams ( );
	void BeginTheStream ( TArray< struct FName > LevelNames );
	void ServerStreamFoxEntry ( );
	void BeginStreamFoxEntry ( );
	void ServerStreamSlumlord ( );
	void BeginStreamSlumlord ( );
	void ServerStreamHardSuit ( );
	void BeginStreamHardSuit ( );
	void ServerStreamAlleyWay ( );
	void BeginStreamAlleyWay ( );
	void FOV ( float F );
	void SetPlayerHealth ( int Health );
	void DebugPlayers ( );
	void ServerKickPlayers ( );
	void KickPlayers ( );
	void LockDLC ( );
	void UnlockDLC ( );
	void DebugDLC ( );
	void DebugSignIn ( );
	void ClientDebugHost ( struct FString Host, struct FString BackupHost );
	void ServerDebugHost ( );
	void DebugHost ( );
	void SwitchLevel ( struct FString URL );
	void ServerChangePreset ( struct FString NewPreset );
	void ServerChangeDepotPreset ( struct FString NewDepotPreset );
	void ChangeDepotPreset ( struct FString NewDepotPreset );
	void ChangePreset ( struct FString NewPreset );
	void ScreenshotMode ( );
	void HurtSelf ( int Amount );
	void DebugAICover ( );
	void LookAtMe ( );
	void ShowCollision ( );
	void LightFXSetColor ( int Red, int Green, int Blue, int Brightness, struct FString StrLocation, int Priority, float Duration );
	void TestLightFXColor ( );
	void TestLightFXPulse ( );
	void TestLightFXMorph ( );
	void AdminSpectate ( );
	void ServerAdminSpectate ( );
	void ServerSetServerName ( struct FString NewServerName );
	void SetServerName ( struct FString NewServerName );
	void ServerSetAdminName ( struct FString NewAdminName );
	void SetAdminName ( struct FString NewAdminName );
	void ChangeOnlineDebugLevel ( int DebugLevel );
	void ServerForceEndRound ( );
	void ServerForceEndGame ( );
	void ForceEndRound ( );
	void ForceEndGame ( );
	void DebugLoadoutProfile ( );
	void DebugBind ( struct FName Key );
	void UnloadUI ( );
	void LoadUI ( );
	void ServerForcePlaylistSkip ( );
	void PlaylistSkip ( );
	void ServerEndIntermission ( );
	void EndIntermission ( );
	void EndMenuTimer ( );
	void RemoveTrialTime ( float Time );
	void AddTrialTime ( float Time );
	void RestoreTrialTime ( );
	void DrainTrialTime ( );
	void ServerForceGame ( class UClass* NewGameClass );
	void ForceGame ( struct FString GameMode );
	void ServerForceMap ( struct FString MapName );
	void ForceMap ( struct FString MapName );
	void ServerPauseMenuTimer ( );
	void PauseMenuTimer ( );
	void TestReadLeaderboards ( unsigned char FetchType );
	void ServerAddCP ( int Amount );
	void AddCP ( int Amount );
	void ServerAddGP ( int Amount );
	void AddGP ( int Amount );
	void ServerAddExperience ( int Exp );
	void AddExperience ( int Exp );
	void AddXP ( int Exp );
	void SpawnEnemyTurret ( );
	void SpawnBots ( int Number );
	void SpawnAIBotByProviderName ( struct FName ProviderName, unsigned long bRespawn );
	void ServerBalanceTeams ( );
	void BalanceTeams ( );
	void ServerSwitch ( struct FString URL );
	void Switch ( struct FString URL );
	void ServerRestartMap ( );
	void StartOnlineGame ( );
	void RestartMap ( );
	void PlayerList ( );
	void ServerKick ( struct FString S );
	void Kick ( struct FString S );
	void ServerKickBan ( struct FString S );
	void KickBan ( struct FString S );
	void ServerAdmin ( struct FString CommandLine );
	void Admin ( struct FString CommandLine );
	void eventPostBeginPlay ( );
	void ArmorySetWeaponWH ( int X, int Y );
	void ArmorySetWeaponXY ( int X, int Y );
	void SetPreviewWeaponColor ( float R, float G, float B, float A, float Specular );
	void SetPreviewWeaponMetalic ( float R, float G, float B, float A, float Specular );
	void SetPreviewOverlayColor ( float R, float G, float B );
	void SetPreviewBaseColor ( float R, float G, float B );
	void ServerRemoveAllAmmo ( );
	void RemoveAllAmmo ( );
	void ServerEndGame ( );
	void EndGame ( );
	void ServerKillPlayer ( struct FString PlayerName );
	void KillPlayer ( struct FString PlayerName );
	void TestDialog ( struct FString EventID, struct FString Arg1, struct FString Arg2, struct FString Arg3 );
	void ServerMessage ( struct FString Message );
	void Message ( struct FString Message );
};

UClass* AFoxAdmin::pClassPointer = NULL;

// Class FoxGame.FoxActivateItemUI
// 0x0070 (0x00EC - 0x007C)
class UFoxActivateItemUI : public UFoxUIBaseTransactionTask
{
public:
	TArray< struct FInventoryMetaData >                InventoryItems;                                   		// 0x007C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FStoreMetaData >                    StoreItems;                                       		// 0x0088 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bShowWorkingDialog : 1;                           		// 0x0094 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bEquip : 1;                                       		// 0x0094 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHasWorkingDialog : 1;                            		// 0x0094 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	struct FString                                     CachedInputString;                                		// 0x0098 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     LocErrorUnsupported;                              		// 0x00A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocConfirmActivate;                               		// 0x00B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocActivating;                                    		// 0x00BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocActivatingCaps;                                		// 0x00C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __PostActivateItem__Delegate;                     		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CancelActivateItem__Delegate;                   		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40278 ];

		return pClassPointer;
	};

	void ActivateItemFailed ( struct FString ErrorText, struct FInventoryMetaData* InventoryItem );
	void ActivateItemComplete ( unsigned long bResult, unsigned char PurchaseResult );
	void ActivateItemInputString ( struct FString InputString );
	void ConfirmActivateItemIntent ( unsigned long bResult );
	void PreActivateItem ( unsigned long bForceActivate );
	bool ValidateActivateItem ( struct FString* ErrorText, struct FInventoryMetaData* InventoryItem, struct FStoreMetaData* StoreItem );
	void NotifyProcessFailed ( unsigned long bResult );
	void NotifyProcessComplete ( unsigned long bResult );
	void PopFront ( struct FInventoryMetaData* InventoryItem, struct FStoreMetaData* StoreItem );
	void PeekFront ( struct FInventoryMetaData* InventoryItem, struct FStoreMetaData* StoreItem );
	void CleanupOnlineDelegates ( );
	void RegisterOnlineDelegates ( );
	bool ActivateItem ( unsigned long bForceActivate );
	void CancelActivateItem ( );
	void PostActivateItem ( unsigned long bSuccess, unsigned long bShouldEquip );
};

UClass* UFoxActivateItemUI::pClassPointer = NULL;

// Class FoxGame.FoxCameraLensEffect_HRVJammerBase
// 0x0003 (0x0204 - 0x0201)
class AFoxCameraLensEffect_HRVJammerBase : public AFoxCameraLensEffect_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40399 ];

		return pClassPointer;
	};

};

UClass* AFoxCameraLensEffect_HRVJammerBase::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_Fell
// 0x0003 (0x00E0 - 0x00DD)
class UFoxDamageType_Fell : public UFoxDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40773 ];

		return pClassPointer;
	};

};

UClass* UFoxDamageType_Fell::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_Explosion
// 0x0007 (0x00E4 - 0x00DD)
class UFoxDamageType_Explosion : public UFoxDamageType
{
public:
	class UAkEvent*                                    TinnitusEvent;                                    		// 0x00E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40882 ];

		return pClassPointer;
	};

};

UClass* UFoxDamageType_Explosion::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_TeamChange
// 0x0003 (0x00E0 - 0x00DD)
class UFoxDamageType_TeamChange : public UFoxDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40938 ];

		return pClassPointer;
	};

};

UClass* UFoxDamageType_TeamChange::pClassPointer = NULL;

// Class FoxGame.FoxUseVolume
// 0x0004 (0x0238 - 0x0234)
class AFoxUseVolume : public APhysicsVolume
{
public:
	class AFoxGameObject_Use*                          ObjectToUse;                                      		// 0x0234 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40956 ];

		return pClassPointer;
	};

	class AFoxGameObject_Use* GetObjectToUse ( );
	void eventPawnLeavingVolume ( class APawn* Other );
	void eventPawnEnteredVolume ( class APawn* Other );
	void SetUseObject ( class AFoxGameObject_Use* FGO );
	void ReplicatedEvent ( struct FName VarName );
};

UClass* AFoxUseVolume::pClassPointer = NULL;

// Class FoxGame.FoxPhysicalMaterialProperty
// 0x002C (0x0068 - 0x003C)
class UFoxPhysicalMaterialProperty : public UPhysicalMaterialPropertyBase
{
public:
	class UFoxPMPInfo_ImpactFX*                        ImpactFX_Info;                                    		// 0x003C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UFoxPMPInfo_FootSteps*                       FeetFX_Info;                                      		// 0x0040 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UFoxPMPInfo_Decals*                          StandardRoundDecal;                               		// 0x0044 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UFoxPMPInfo_Decals*                          IncendiaryDecal;                                  		// 0x0048 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UFoxPMPInfo_Decals*                          HighVelocityDecal;                                		// 0x004C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UFoxPMPInfo_Decals*                          SlashingMeleeDecal;                               		// 0x0050 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UFoxPMPInfo_Decals*                          BluntMeleeDecal;                                  		// 0x0054 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UFoxPMPInfo_Decals*                          MinigunDecal;                                     		// 0x0058 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	TArray< struct FDamageModifier >                   DamageModifiers;                                  		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41740 ];

		return pClassPointer;
	};

	class UPhysicalMaterial* GetImpactPhysicalMaterial ( struct FImpactInfo* Impact );
	int ModifyDamageBasedOnMaterial ( int DamageAmount, class UClass* DamageType );
};

UClass* UFoxPhysicalMaterialProperty::pClassPointer = NULL;

// Class FoxGame.FoxPMPInfoBase
// 0x0000 (0x003C - 0x003C)
class UFoxPMPInfoBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41768 ];

		return pClassPointer;
	};

};

UClass* UFoxPMPInfoBase::pClassPointer = NULL;

// Class FoxGame.FoxPMPInfo_FootSteps
// 0x0028 (0x0064 - 0x003C)
class UFoxPMPInfo_FootSteps : public UFoxPMPInfoBase
{
public:
	class UAkEvent*                                    FootStepSound;                                    		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    SprintFootStepSound;                              		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    CrouchedFootStepSound;                            		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    LandFootStepSound;                                		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    MechFootStepSound;                                		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AudioSwitchValue;                                 		// 0x0050 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             FootStepParticleSystem;                           		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             CrouchedFootStepParticleSystem;                   		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             MechFootStepParticleSystem;                       		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41767 ];

		return pClassPointer;
	};

};

UClass* UFoxPMPInfo_FootSteps::pClassPointer = NULL;

// Class FoxGame.FoxTeamSpawnVolume
// 0x0004 (0x01F8 - 0x01F4)
class AFoxTeamSpawnVolume : public AVolume
{
public:
	int                                                OwningTeamIndex;                                  		// 0x01F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41847 ];

		return pClassPointer;
	};

};

UClass* AFoxTeamSpawnVolume::pClassPointer = NULL;

// Class FoxGame.FoxAISeqAct_MoveTo
// 0x0010 (0x0100 - 0x00F0)
class UFoxAISeqAct_MoveTo : public USequenceAction
{
public:
	struct FVector                                     TargetLocation;                                   		// 0x00F0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      TargetDestination;                                		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41889 ];

		return pClassPointer;
	};

};

UClass* UFoxAISeqAct_MoveTo::pClassPointer = NULL;

// Class FoxGame.FoxCameraLensEffect_Spawn
// 0x0007 (0x0208 - 0x0201)
class AFoxCameraLensEffect_Spawn : public AFoxCameraLensEffect_Base
{
public:
	class UAkEvent*                                    SpawnEvent;                                       		// 0x0204 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42094 ];

		return pClassPointer;
	};

	void RegisterCamera ( class ACamera* C );
};

UClass* AFoxCameraLensEffect_Spawn::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_EnterCoverBase
// 0x0042 (0x00C0 - 0x007E)
class UFoxSpecialMove_EnterCoverBase : public UFoxSpecialMove
{
public:
	struct FBodyStance                                 BS_EnterAnimationRight;                           		// 0x0080 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_EnterAnimationLeft;                            		// 0x008C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_EnterAnimationSprintRight;                     		// 0x0098 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_EnterAnimationSprintLeft;                      		// 0x00A4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	float                                              BlendInTime;                                      		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTime;                                     		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWasSprinting : 1;                                		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnterLeft : 1;                                   		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              EnterCoverEffectDelay;                            		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42151 ];

		return pClassPointer;
	};

	struct FBodyStance GetBodyStance ( unsigned long bIsLeft );
	void CleanUpSpecialMove ( );
	void eventReachedPrecisePosition ( );
	void ReachPreciseDestinationTimeout ( );
	void StartSpecialMove ( );
	bool InternalCanDoSpecialMove ( );
};

UClass* UFoxSpecialMove_EnterCoverBase::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_EnterCoverMid
// 0x0000 (0x00C0 - 0x00C0)
class UFoxSpecialMove_EnterCoverMid : public UFoxSpecialMove_EnterCoverBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42150 ];

		return pClassPointer;
	};

};

UClass* UFoxSpecialMove_EnterCoverMid::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_EnterCoverStd
// 0x0000 (0x00C0 - 0x00C0)
class UFoxSpecialMove_EnterCoverStd : public UFoxSpecialMove_EnterCoverBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42152 ];

		return pClassPointer;
	};

};

UClass* UFoxSpecialMove_EnterCoverStd::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_PushOutOfCover
// 0x0036 (0x00B4 - 0x007E)
class UFoxSpecialMove_PushOutOfCover : public UFoxSpecialMove
{
public:
	struct FBodyStance                                 BS_Cov_Mid_CoverBreakRight;                       		// 0x0080 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_Cov_Mid_CoverBreakLeft;                        		// 0x008C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_Cov_Std_CoverBreakRight;                       		// 0x0098 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_Cov_Std_CoverBreakLeft;                        		// 0x00A4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bEnterLeft : 1;                                   		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42153 ];

		return pClassPointer;
	};

	struct FBodyStance GetBodyStance ( unsigned long bIsLeft );
	void CleanUpSpecialMove ( );
	void StartSpecialMove ( );
	bool InternalCanDoSpecialMove ( );
	bool CanChainMove ( unsigned char NextMove );
};

UClass* UFoxSpecialMove_PushOutOfCover::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_EnterLadder
// 0x0004 (0x00B0 - 0x00AC)
class UFoxSpecialMove_EnterLadder : public UFoxSpecialMove_AnimationBase
{
public:
	class AFoxLadderVolume*                            LadderTouching;                                   		// 0x00AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42154 ];

		return pClassPointer;
	};

	bool GetAnimsToPlay ( struct FWeaponAnimSet* OutAnims );
	void CleanUpSpecialMove ( );
	bool CanChainMove ( unsigned char NextMove );
};

UClass* UFoxSpecialMove_EnterLadder::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_Jump
// 0x0000 (0x00AC - 0x00AC)
class UFoxSpecialMove_Jump : public UFoxSpecialMove_AnimationBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42155 ];

		return pClassPointer;
	};

	bool GetAnimsToPlay ( struct FWeaponAnimSet* OutAnims );
	bool CanChainMove ( unsigned char NextMove );
	void StartAnimation ( );
	bool InternalCanDoSpecialMove ( );
};

UClass* UFoxSpecialMove_Jump::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_Land
// 0x0000 (0x00AC - 0x00AC)
class UFoxSpecialMove_Land : public UFoxSpecialMove_AnimationBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42156 ];

		return pClassPointer;
	};

	bool GetAnimsToPlay ( struct FWeaponAnimSet* OutAnims );
	bool CanChainMove ( unsigned char NextMove );
	void StartAnimation ( );
	bool InternalCanDoSpecialMove ( );
};

UClass* UFoxSpecialMove_Land::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_TauntUpperBody
// 0x0000 (0x00D4 - 0x00D4)
class UFoxSpecialMove_TauntUpperBody : public UFoxSpecialMove_TauntBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42157 ];

		return pClassPointer;
	};

};

UClass* UFoxSpecialMove_TauntUpperBody::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_TauntFullBody
// 0x0000 (0x00D4 - 0x00D4)
class UFoxSpecialMove_TauntFullBody : public UFoxSpecialMove_TauntBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42158 ];

		return pClassPointer;
	};

};

UClass* UFoxSpecialMove_TauntFullBody::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_TauntUpperCut
// 0x0000 (0x00D4 - 0x00D4)
class UFoxSpecialMove_TauntUpperCut : public UFoxSpecialMove_TauntFullBody
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42159 ];

		return pClassPointer;
	};

};

UClass* UFoxSpecialMove_TauntUpperCut::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_TauntCraneKick
// 0x0000 (0x00D4 - 0x00D4)
class UFoxSpecialMove_TauntCraneKick : public UFoxSpecialMove_TauntFullBody
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42160 ];

		return pClassPointer;
	};

};

UClass* UFoxSpecialMove_TauntCraneKick::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_Injured
// 0x0008 (0x00B4 - 0x00AC)
class UFoxSpecialMove_Injured : public UFoxSpecialMove_AnimationBase
{
public:
	struct FName                                       FallbackIdleAnimName;                             		// 0x00AC (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42161 ];

		return pClassPointer;
	};

	TArray< struct FInjureMap > GetAnimsToUse ( );
	bool GetAnimsToPlay ( struct FWeaponAnimSet* OutAnims );
	bool InternalCanDoSpecialMove ( );
};

UClass* UFoxSpecialMove_Injured::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_Revive
// 0x0000 (0x00B4 - 0x00B4)
class UFoxSpecialMove_Revive : public UFoxSpecialMove_Injured
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42162 ];

		return pClassPointer;
	};

	void CleanUpSpecialMove ( );
	bool GetAnimsToPlay ( struct FWeaponAnimSet* OutAnims );
	void StartAnimation ( );
	void StartSpecialMove ( );
};

UClass* UFoxSpecialMove_Revive::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_Idle
// 0x0000 (0x00AC - 0x00AC)
class UFoxSpecialMove_Idle : public UFoxSpecialMove_AnimationBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42163 ];

		return pClassPointer;
	};

};

UClass* UFoxSpecialMove_Idle::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_DeathAnim
// 0x0000 (0x00B4 - 0x00B4)
class UFoxSpecialMove_DeathAnim : public UFoxSpecialMove_Injured
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42164 ];

		return pClassPointer;
	};

	TArray< struct FInjureMap > GetAnimsToUse ( );
	void StartAnimation ( );
};

UClass* UFoxSpecialMove_DeathAnim::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_ToggleVisor
// 0x0000 (0x00AC - 0x00AC)
class UFoxSpecialMove_ToggleVisor : public UFoxSpecialMove_AnimationBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42166 ];

		return pClassPointer;
	};

	bool GetAnimsToPlay ( struct FWeaponAnimSet* OutAnims );
	bool CanChainMove ( unsigned char NextMove );
	bool InternalCanDoSpecialMove ( );
};

UClass* UFoxSpecialMove_ToggleVisor::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_ToggleVisorOn
// 0x0000 (0x00AC - 0x00AC)
class UFoxSpecialMove_ToggleVisorOn : public UFoxSpecialMove_ToggleVisor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42165 ];

		return pClassPointer;
	};

	void CleanUpSpecialMove ( );
	void StartSpecialMove ( );
	bool InternalCanDoSpecialMove ( );
};

UClass* UFoxSpecialMove_ToggleVisorOn::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_ToggleVisorOff
// 0x0000 (0x00AC - 0x00AC)
class UFoxSpecialMove_ToggleVisorOff : public UFoxSpecialMove_ToggleVisor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42167 ];

		return pClassPointer;
	};

	void CleanUpSpecialMove ( );
	void StartSpecialMove ( );
	bool InternalCanDoSpecialMove ( );
};

UClass* UFoxSpecialMove_ToggleVisorOff::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_CaptureControlPoint
// 0x0000 (0x00AC - 0x00AC)
class UFoxSpecialMove_CaptureControlPoint : public UFoxSpecialMove_AnimationBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42168 ];

		return pClassPointer;
	};

};

UClass* UFoxSpecialMove_CaptureControlPoint::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_HackFail
// 0x0000 (0x00AC - 0x00AC)
class UFoxSpecialMove_HackFail : public UFoxSpecialMove_AnimationBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42169 ];

		return pClassPointer;
	};

};

UClass* UFoxSpecialMove_HackFail::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_AIEntry
// 0x0000 (0x00AC - 0x00AC)
class UFoxSpecialMove_AIEntry : public UFoxSpecialMove_AnimationBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42170 ];

		return pClassPointer;
	};

	void CleanUpSpecialMove ( );
	void StartSpecialMove ( );
	bool GetAnimsToPlay ( struct FWeaponAnimSet* OutAnims );
	bool InternalCanDoSpecialMove ( );
};

UClass* UFoxSpecialMove_AIEntry::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_RemoveBomb
// 0x0004 (0x00B0 - 0x00AC)
class UFoxSpecialMove_RemoveBomb : public UFoxSpecialMove_AnimationBase
{
public:
	class AFoxGameObject_BombTarget*                   BombTarg;                                         		// 0x00AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42171 ];

		return pClassPointer;
	};

	void ReleaseBomb ( );
	bool GetAnimsToPlay ( struct FWeaponAnimSet* OutAnims );
	void CleanUpSpecialMove ( );
	void StartSpecialMove ( );
	bool InternalCanDoSpecialMove ( );
};

UClass* UFoxSpecialMove_RemoveBomb::pClassPointer = NULL;

// Class FoxGame.FoxActorFactory_DynamicSM
// 0x0003 (0x0074 - 0x0071)
class UFoxActorFactory_DynamicSM : public UActorFactoryDynamicSM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42183 ];

		return pClassPointer;
	};

};

UClass* UFoxActorFactory_DynamicSM::pClassPointer = NULL;

// Class FoxGame.FoxActorFactory_KActor
// 0x0000 (0x0098 - 0x0098)
class UFoxActorFactory_KActor : public UActorFactoryRigidBody
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42185 ];

		return pClassPointer;
	};

};

UClass* UFoxActorFactory_KActor::pClassPointer = NULL;

// Class FoxGame.FoxKActor
// 0x0004 (0x02BC - 0x02B8)
class AFoxKActor : public AKActor
{
public:
	class AFoxPawn*                                    CurrentCollidingPawn;                             		// 0x02B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42187 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* AFoxKActor::pClassPointer = NULL;

// Class FoxGame.FoxDummyPC
// 0x0000 (0x0A3C - 0x0A3C)
class AFoxDummyPC : public AFoxPC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42609 ];

		return pClassPointer;
	};

};

UClass* AFoxDummyPC::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_BeaconBase
// 0x0017 (0x0380 - 0x0369)
class AFoxProjectile_BeaconBase : public AFoxProjectile_MineBase
{
public:
	class AFoxPlayerStart_Beacon*                      PlayerStartBeacon;                                		// 0x036C (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    BeaconPSC;                                        		// 0x0370 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FRotator                                    SpawnBeaconRotation;                              		// 0x0374 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42971 ];

		return pClassPointer;
	};

	void Init ( struct FVector Direction );
	void Destroyed ( );
	void TimedCameraChange ( float TimerAmount );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void Activate ( );
	void SetEmissives ( );
	void eventPostBeginPlay ( );
};

UClass* AFoxProjectile_BeaconBase::pClassPointer = NULL;

// Class FoxGame.FoxPlayerStart_Beacon
// 0x0004 (0x02B4 - 0x02B0)
class AFoxPlayerStart_Beacon : public APlayerStart
{
public:
	class AController*                                 InstigatorController;                             		// 0x02B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42973 ];

		return pClassPointer;
	};

};

UClass* AFoxPlayerStart_Beacon::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_GunMelee
// 0x0003 (0x00E0 - 0x00DD)
class UFoxDamageType_GunMelee : public UFoxDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43140 ];

		return pClassPointer;
	};

};

UClass* UFoxDamageType_GunMelee::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_Splash
// 0x000F (0x00EC - 0x00DD)
class UFoxDamageType_Splash : public UFoxDamageType
{
public:
	float                                              DamagePercentageUsed;                             		// 0x00E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DamageRange;                                      		// 0x00E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bFlatSplashDamage : 1;                            		// 0x00E8 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43211 ];

		return pClassPointer;
	};

	void ApplyEffect ( class AFoxPawn* VictimPawn, class AController* ControllerInstigator, int* DamageAmount );
};

UClass* UFoxDamageType_Splash::pClassPointer = NULL;

// Class FoxGame.FoxCombatMessage
// 0x00FC (0x0138 - 0x003C)
class UFoxCombatMessage : public UObject
{
public:
	TArray< struct FString >                           DoubleKillMessages;                               		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           TripleKillMessages;                               		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           OverKillMessages;                                 		// 0x0054 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           MonsterKillMessages;                              		// 0x0060 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringHeadshot;                                		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringKillingSpree;                            		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringDominating;                              		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringUnstoppable;                             		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringGodlike;                                 		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBeastMode;                               		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringCapturedPoint;                           		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringHackedPoint;                             		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringCapturedFlag;                            		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBecameHighThreat;                        		// 0x00D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBecameWarlord;                           		// 0x00E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringYou;                                     		// 0x00F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringYourself;                                		// 0x00FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringHit;                                     		// 0x0108 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRepaired;                                		// 0x0114 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringHealed;                                  		// 0x0120 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FMultiKill >                        CachedMultiKillInfo;                              		// 0x012C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43213 ];

		return pClassPointer;
	};

	void GameplayMessage ( class AFoxPC* ForPC, class AFoxPRI* PRI, unsigned char EventType );
	void KillSpreeMessage ( class AFoxPC* ForPC, class AFoxPRI* KillSpreePRI, unsigned char KillSpreeType );
	struct FString GetDamageTypeName ( class UClass* DamageType );
	void PumpMultiKill ( class AFoxPC* ForPC, class AFoxPRI* KillerPRI, TArray< struct FKillInfo > TheKilledInfo );
	void PumpSingleKill ( class AFoxPC* ForPC, class AFoxPRI* KillerPRI, class AFoxPRI* KilledPRI, class UClass* DamageType, class UClass* WeaponClass, unsigned long bHeadShot );
	void PumpKillMessages ( class AFoxPC* ForPC, class AFoxPRI* KillerPRI, TArray< struct FKillInfo > TheKilledInfo );
	void PumpSuicide ( class AFoxPC* ForPC, class AFoxPRI* KilledPRI, class UClass* TheDamageType );
	void AddPlayerToMultiKillInfo ( class AFoxPRI* KillerPRI, class AFoxPRI* KilledPRI, class UClass* DamageType, class UClass* WeaponClass, unsigned long bHeadShot, TArray< struct FMultiKill >* OutMultiKillInfo );
	void DamageMessage ( class AFoxPRI* Other, unsigned char TypeOfDamage, class UClass* DamageTypeClass, int TotalDamage, unsigned long bWeInstigated, unsigned long bHeadShot );
	void KillMessage ( class AFoxPC* ForPC, class AFoxPRI* KillerPRI, class AFoxPRI* KilledPRI, class UClass* DamageType, class UClass* WeaponClass, unsigned long bHeadShot, unsigned long bMultikillEnd );
};

UClass* UFoxCombatMessage::pClassPointer = NULL;

// Class FoxGame.FoxKillingSpreeMessage
// 0x00A8 (0x00F8 - 0x0050)
class UFoxKillingSpreeMessage : public ULocalMessage
{
public:
	TArray< struct FKillMessage >                      MultiKillMessages;                                		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                KillStreakEndPoints;                              		// 0x005C (0x0004) [0x0000000000000000]              
	struct FColor                                      KillDrawColor;                                    		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              KillFontSize;                                     		// 0x0064 (0x0004) [0x0000000000000000]              
	struct FString                                     NormalKillMessageString;                          		// 0x0068 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HeadshotKillMessageString;                        		// 0x0074 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KillingSpreeMessageString;                        		// 0x0080 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DominatingMessageString;                          		// 0x008C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UnstoppableMessageString;                         		// 0x0098 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GodlikeMessageString;                             		// 0x00A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BeastModeMessageString;                           		// 0x00B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DoubleKillMessageString;                          		// 0x00BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TripleKillMessageString;                          		// 0x00C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OverKillMessageString;                            		// 0x00D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MonsterKillMessageString;                         		// 0x00E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AssistKillMessageString;                          		// 0x00EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43224 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* PC, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetMultiKillIcon ( int MultiKillType );
	struct FString GetKillSpreeIcon ( int KillSpreeType );
	struct FString GetKillStreakEndString ( unsigned long bIEndedStreak, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetMessageFromMultiKillType ( int MultiKillType );
	struct FString GetMessageFromKillSpreeType ( int KillSpreeType );
	int GetScoreFromMultiKillType ( int MultiKillType );
	int GetMultiKillType ( int NumMultiKills );
	int GetKillSpreeType ( class AFoxPRI* FPRI );
};

UClass* UFoxKillingSpreeMessage::pClassPointer = NULL;

// Class FoxGame.FoxScoringInfo
// 0x00B0 (0x00EC - 0x003C)
class UFoxScoringInfo : public UObject
{
public:
	int                                                ExpKill;                                          		// 0x003C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpAssist;                                        		// 0x0040 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpHeadshot;                                      		// 0x0044 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpBaseRevenge;                                   		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpKillRevenge;                                   		// 0x004C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpKillRival;                                     		// 0x0050 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpKillTurret;                                    		// 0x0054 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                ExpKillFromTurret;                                		// 0x0058 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                ExpKillBeacon;                                    		// 0x005C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpDoubleKill;                                    		// 0x0060 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpTripleKill;                                    		// 0x0064 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpOverKill;                                      		// 0x0068 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpMonsterKill;                                   		// 0x006C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpKillingSpree;                                  		// 0x0070 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpDominating;                                    		// 0x0074 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpUnstoppable;                                   		// 0x0078 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpGodLike;                                       		// 0x007C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpBeastMode;                                     		// 0x0080 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpEndingKillingSpree;                            		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpEndingDominating;                              		// 0x0088 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpEndingUnstoppable;                             		// 0x008C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpEndingGodlike;                                 		// 0x0090 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpEndingBeastMode;                               		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpKillVIP;                                       		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpBecomeThreat;                                  		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpKillHighThreat;                                		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpThreatKillMoraleBoost;                         		// 0x00A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpRevive;                                        		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpHeal;                                          		// 0x00AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RepairGunInterval;                                		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpHoldRepairGunInterval;                         		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpSupplyAmmo;                                    		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpKilledHardSuit;                                		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpDestroyBarricade;                              		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpDestroyProxMine;                               		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpDestroyStunMine;                               		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpDestroyDecoy;                                  		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpDestroyHRVJammer;                              		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpTauntUnder2Sec;                                		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpTauntUnder3Sec;                                		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpTauntUnder4Sec;                                		// 0x00DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpTauntUnder5Sec;                                		// 0x00E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpTauntOver5Sec;                                 		// 0x00E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              TimeForExpTauntGrief;                             		// 0x00E8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43227 ];

		return pClassPointer;
	};

	int CalculateRevengeExp ( int TotalKills );
	unsigned char GetScoreEventForGrief ( float GriefLengthSeconds );
	int GetExperienceFromMultiKillType ( int MultiKillType );
	int GetPointsForEndingKillStreak ( int KillStreak );
	int GetExperienceFromKillSpreeType ( int KillSpreeType );
};

UClass* UFoxScoringInfo::pClassPointer = NULL;

// Class FoxGame.FoxCameraActor_HeroPose
// 0x0018 (0x02D8 - 0x02C0)
class AFoxCameraActor_HeroPose : public ACameraActor
{
public:
	TArray< class AFoxHeroPoseActor* >                 HeroActors;                                       		// 0x02C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScriptDelegate                             __HeroActorSortDelegate__Delegate;                		// 0x02CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43405 ];

		return pClassPointer;
	};

	bool CanPlayTaunt ( class APlayerReplicationInfo* PRI );
	void AttemptTaunt ( class APlayerReplicationInfo* PRI, unsigned char Taunt );
	int HeroActorSortDelegate ( class AFoxHeroPoseActor* A, class AFoxHeroPoseActor* B );
	void AssignPRIs ( );
	void eventPostBeginPlay ( );
};

UClass* AFoxCameraActor_HeroPose::pClassPointer = NULL;

// Class FoxGame.FoxMapInfo
// 0x0030 (0x006C - 0x003C)
class UFoxMapInfo : public UZEMapInfo
{
public:
	TArray< class AFoxGameObject_Spectate* >           SpectateObjects;                                  		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AFoxCameraActor_HeroPose* >          HeroPoseCameras;                                  		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      SelectedHeroCameraIndex;                          		// 0x0054 (0x0001) [0x0000000000000000]              
	class AFoxCameraActor_Armory*                      ArmoryCamera;                                     		// 0x0058 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           WeaponPresets;                                    		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              WeaponPickupRespawnTime;                          		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43406 ];

		return pClassPointer;
	};

	class AFoxCameraActor_HeroPose* GetSelectedHeroCamera ( );
	void NotifyArmoryCameraCreated ( class AFoxCameraActor_Armory* NewArmoryCam );
	void NotifyHeroPoseCameraCreated ( class AFoxCameraActor_HeroPose* NewHeroPoseCam );
	void NotifySpectateCreated ( class AFoxGameObject_Spectate* specObject );
};

UClass* UFoxMapInfo::pClassPointer = NULL;

// Class FoxGame.FoxDeathMessage
// 0x0000 (0x0050 - 0x0050)
class UFoxDeathMessage : public ULocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43540 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* PC, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetDeathString ( class APlayerController* PC, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UFoxDeathMessage::pClassPointer = NULL;

// Class FoxGame.FoxGameMessage
// 0x0000 (0x0164 - 0x0164)
class UFoxGameMessage : public UGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43541 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UFoxGameMessage::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardWriteGameTypeBase
// 0x0008 (0x00A4 - 0x009C)
class UFoxLeaderboardWriteGameTypeBase : public UFoxLeaderboardWriteBase
{
public:
	class UClass*                                      WeaponsStatsClass;                                		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                TimePlayedPropertyID;                             		// 0x00A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43542 ];

		return pClassPointer;
	};

	void CopyAndWriteAllStats ( struct FUniqueNetId UniqId, class AFoxPRI* PRI, class UOnlineStatsInterface* StatsInterface );
	void CopyAllStats ( class AFoxPRI* PRI );
};

UClass* UFoxLeaderboardWriteGameTypeBase::pClassPointer = NULL;

// Class FoxGame.FoxPlayerStorage
// 0x0000 (0x0068 - 0x0068)
class UFoxPlayerStorage : public UOnlinePlayerStorage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43588 ];

		return pClassPointer;
	};

	void eventSetToDefaults ( );
	void OnStorageReadComplete ( );
	void AddInGameTimePlayed ( float NewTime );
	int GetVersionNumber ( );
	float GetInGameTimePlayed ( );
};

UClass* UFoxPlayerStorage::pClassPointer = NULL;

// Class FoxGame.FoxCameraLensEffect_Fading
// 0x0018 (0x0219 - 0x0201)
class AFoxCameraLensEffect_Fading : public AFoxCameraLensEffect_Base
{
public:
	class UMaterialInstanceConstant*                   FadeMIC;                                          		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FadeParamName;                                    		// 0x0208 (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              FadeInTime;                                       		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutTime;                                      		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FadeState;                                        		// 0x0218 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43714 ];

		return pClassPointer;
	};

	void SetStrength ( float NewStrength );
	void FadedOut ( );
	void StartFadeOut ( );
	void FadedIn ( );
	void StartFadeIn ( );
	void NotifyRetriggered ( );
	void eventPostBeginPlay ( );
	void Tick ( float DeltaTime );
};

UClass* AFoxCameraLensEffect_Fading::pClassPointer = NULL;

// Class FoxGame.FoxCameraLensEffect_HardSuitHRVPingBase
// 0x0003 (0x0204 - 0x0201)
class AFoxCameraLensEffect_HardSuitHRVPingBase : public AFoxCameraLensEffect_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44238 ];

		return pClassPointer;
	};

};

UClass* AFoxCameraLensEffect_HardSuitHRVPingBase::pClassPointer = NULL;

// Class FoxGame.FoxGameObject_Spectate
// 0x0004 (0x02C4 - 0x02C0)
class AFoxGameObject_Spectate : public ACameraActor
{
public:
	int                                                Team;                                             		// 0x02C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44387 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};

UClass* AFoxGameObject_Spectate::pClassPointer = NULL;

// Class FoxGame.FoxFirstPersonCamera
// 0x0000 (0x0048 - 0x0048)
class UFoxFirstPersonCamera : public UGameFixedCamera
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44511 ];

		return pClassPointer;
	};

	void SetDefaultFOV ( int NewFOV );
	void UpdateCamera ( class APawn* P, class AGamePlayerCamera* CameraActor, float DeltaTime, struct FTViewTarget* OutVT );
};

UClass* UFoxFirstPersonCamera::pClassPointer = NULL;

// Class FoxGame.FoxHostMigration
// 0x0001 (0x003D - 0x003C)
class UFoxHostMigration : public UObject
{
public:
	unsigned char                                      SessionState;                                     		// 0x003C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44803 ];

		return pClassPointer;
	};

	void ClearDelegates ( );
	void OnCreateBackupSessionComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ClientSideSetBackupSessionInfo ( unsigned char* PlatformSpecificInfo );
	void ServerSideSetBackupSessionInfo ( unsigned char* PlatformSpecificInfo );
	void CreateBackupHostSession ( );
	void OnJoinTravelToSessionComplete ( struct FName SessionName, unsigned long bSuccessful );
	void OnDestroyGameForTravelToNewURLComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void TravelToNextSession ( );
	void StoreGameSettings ( );
	void GoToIntermissionAsNewHost ( );
	void StartAsNewHost ( );
	void OnJoinNewHostSessionComplete ( struct FName SessionName, unsigned long bSuccessful );
	void JoinNewHost ( );
	bool HandleEndGameScenario ( );
	void OnDestroyGameForMigrateHost ( struct FName SessionName, unsigned long bWasSuccessful );
	void BeginHostMigration ( );
	void OnEndForMigrateHost ( struct FName SessionName, unsigned long bWasSuccessful );
	void MigrateHostTimer ( );
	void StartMigrateHostTimer ( );
	void OnResendStatIntentionFinished ( unsigned long bSuccessful );
	void HandleHostDisconnect ( );
	void eventNotifyConnectionToServerLost ( );
};

UClass* UFoxHostMigration::pClassPointer = NULL;

// Class FoxGame.FoxDataStore_OnlineStats
// 0x001C (0x00F0 - 0x00D4)
class UFoxDataStore_OnlineStats : public UUIDataStore_OnlineStats
{
public:
	int                                                TopRankOfPage;                                    		// 0x00D4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSearchInProgress : 1;                            		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                LastTopRankOfPage;                                		// 0x00DC (0x0004) [0x0000000000000000]              
	unsigned char                                      LastSearchType;                                   		// 0x00E0 (0x0001) [0x0000000000000000]              
	unsigned char                                      LastPlayControllerIndex;                          		// 0x00E1 (0x0001) [0x0000000000000000]              
	struct FScriptDelegate                             __OnStatsReadComplete__Delegate;                  		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44929 ];

		return pClassPointer;
	};

	void OnReadComplete ( unsigned long bWasSuccessful );
	void Advance ( unsigned long bForward );
	bool eventRefreshLeaderboardStats ( unsigned char ControllerIndex );
	void OnStatsReadComplete ( unsigned long bSuccessful );
};

UClass* UFoxDataStore_OnlineStats::pClassPointer = NULL;

// Class FoxGame.FoxGameSettingsDM
// 0x0000 (0x0108 - 0x0108)
class UFoxGameSettingsDM : public UFoxGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45009 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSettingsDM::pClassPointer = NULL;

// Class FoxGame.FoxGameSettingsTDM
// 0x0000 (0x0108 - 0x0108)
class UFoxGameSettingsTDM : public UFoxGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45010 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSettingsTDM::pClassPointer = NULL;

// Class FoxGame.FoxGameSettingsCP
// 0x000C (0x0114 - 0x0108)
class UFoxGameSettingsCP : public UFoxGameSettingsCommon
{
public:
	int                                                CPOwners[ 0x3 ];                                  		// 0x0108 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45011 ];

		return pClassPointer;
	};

	void ResetSavedSettings ( );
};

UClass* UFoxGameSettingsCP::pClassPointer = NULL;

// Class FoxGame.FoxGameSettingsTKOTH
// 0x0010 (0x0118 - 0x0108)
class UFoxGameSettingsTKOTH : public UFoxGameSettingsCommon
{
public:
	unsigned long                                      isHillActive : 1;                                 		// 0x0108 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                CurrentCapturingTeam;                             		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              timeOnHill_team0;                                 		// 0x0110 (0x0004) [0x0000000000000000]              
	float                                              timeOnHill_team1;                                 		// 0x0114 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45012 ];

		return pClassPointer;
	};

	void ResetSavedSettings ( );
};

UClass* UFoxGameSettingsTKOTH::pClassPointer = NULL;

// Class FoxGame.FoxGameSettingsCTF
// 0x0000 (0x0108 - 0x0108)
class UFoxGameSettingsCTF : public UFoxGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45013 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSettingsCTF::pClassPointer = NULL;

// Class FoxGame.FoxGameSettingsCTDM
// 0x0000 (0x0108 - 0x0108)
class UFoxGameSettingsCTDM : public UFoxGameSettingsTDM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45014 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSettingsCTDM::pClassPointer = NULL;

// Class FoxGame.FoxGameSettingsEOTS
// 0x0000 (0x0114 - 0x0114)
class UFoxGameSettingsEOTS : public UFoxGameSettingsCP
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45015 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSettingsEOTS::pClassPointer = NULL;

// Class FoxGame.FoxGameSettingsPL
// 0x0000 (0x0108 - 0x0108)
class UFoxGameSettingsPL : public UFoxGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45016 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSettingsPL::pClassPointer = NULL;

// Class FoxGame.FoxGameSettingsKC
// 0x0000 (0x0108 - 0x0108)
class UFoxGameSettingsKC : public UFoxGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45017 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSettingsKC::pClassPointer = NULL;

// Class FoxGame.FoxHudTechDemo
// 0x002C (0x0708 - 0x06DC)
class AFoxHudTechDemo : public AFoxHUD
{
public:
	unsigned long                                      bMenuActive : 1;                                  		// 0x06DC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bImageReflection : 1;                             		// 0x06DC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDeferredShading : 1;                             		// 0x06DC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bWireFrame : 1;                                   		// 0x06DC (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              TesselationScale;                                 		// 0x06E0 (0x0004) [0x0000000000000000]              
	int                                                TesselationIndex;                                 		// 0x06E4 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           TesselationValues;                                		// 0x06E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           OnOffStrings;                                     		// 0x06F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  TechDemoLogo;                                     		// 0x0700 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  MenuLabel;                                        		// 0x0704 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45304 ];

		return pClassPointer;
	};

	void OpenLoadoutMenu ( );
	void WireframeChanged ( int NewSelectedIndex );
	void DeferredShadingChanged ( int NewSelectedIndex );
	void OnTesselationChanged ( float NewValue );
	void ReflectionChanged ( int NewSelectedIndex );
	void OnWidgetChange ( int WidgetIndex, int NewSelectedIndex );
	void InitializeMenuWidgets ( );
	void SetLabelText ( unsigned long bMenuOpen );
	void ToggleMenu ( );
	void eventShowPauseScreen ( unsigned long bFocusOnChat );
	void eventToggleBackScreen ( unsigned long bShow );
	void OnFlyTimer ( );
	void OnDLCRefreshed ( );
	void ClientNotifyMapType ( unsigned long bEntryMap, unsigned long bSpectator, unsigned long bHasMatchStarted );
	void InitializeUI ( );
};

UClass* AFoxHudTechDemo::pClassPointer = NULL;

// Class FoxGame.FoxMiniGame_Base
// 0x0024 (0x01EC - 0x01C8)
class AFoxMiniGame_Base : public AActor
{
public:
	class UClass*                                      MiniGameUIClass;                                  		// 0x01C8 (0x0004) [0x0000000000000000]              
	class UFoxHudMiniGameBase*                         ActiveMiniGameMovie;                              		// 0x01CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinigameTime;                                     		// 0x01D0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned char                                      PawnSpecialMove;                                  		// 0x01D4 (0x0001) [0x0000000000000002]              ( CPF_Const )
	class AFoxPawn*                                    UsingPawn;                                        		// 0x01D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkEvent*                                    StartAudioEvent;                                  		// 0x01DC (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    SucceedAudioEvent;                                		// 0x01E0 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    FailAudioEvent;                                   		// 0x01E4 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    CancelAudioEvent;                                 		// 0x01E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45480 ];

		return pClassPointer;
	};

};

UClass* AFoxMiniGame_Base::pClassPointer = NULL;

// Class FoxGame.FoxCheatManager
// 0x0000 (0x005C - 0x005C)
class UFoxCheatManager : public UCheatManager
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45646 ];

		return pClassPointer;
	};

	void ResetPSV ( );
	void ChangePlayerStartAdjustments ( float NearByTeammateAdjustment, float VisibleTeammateAdjustment, float NearByEnemyAdjustment, float VisibleEnemyAdjustment );
	void ChangePlayerStartThresholds ( float VisibleEnemyDistThreshold, float VisibleTeammateDistThreshold, float NearByEnemyDistThreshold, float NearByTeammateDistThreshold );
	void sgod ( );
	void InfiniteClips ( );
	void IC ( );
	void InfiniteAmmo ( );
	void IA ( );
	void AllAmmo ( );
	void AllWeapons ( );
};

UClass* UFoxCheatManager::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_Smite
// 0x0003 (0x00E0 - 0x00DD)
class UFoxDamageType_Smite : public UFoxDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45663 ];

		return pClassPointer;
	};

};

UClass* UFoxDamageType_Smite::pClassPointer = NULL;

// Class FoxGame.FoxBadBackgroundUI
// 0x0000 (0x01A8 - 0x01A8)
class UFoxBadBackgroundUI : public UFoxMenuBackgroundUI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46203 ];

		return pClassPointer;
	};

};

UClass* UFoxBadBackgroundUI::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_GoToFiring
// 0x0000 (0x00AC - 0x00AC)
class UFoxAIAction_GoToFiring : public UFoxAIAction_GoTo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46833 ];

		return pClassPointer;
	};

};

UClass* UFoxAIAction_GoToFiring::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_FireBerserk
// 0x0000 (0x00D8 - 0x00D8)
class UFoxAIAction_FireBerserk : public UFoxAIAction_FireWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46922 ];

		return pClassPointer;
	};

};

UClass* UFoxAIAction_FireBerserk::pClassPointer = NULL;

// Class FoxGame.FoxAIAction_Vault
// 0x0000 (0x00A0 - 0x00A0)
class UFoxAIAction_Vault : public UFoxAIAction_SpecialMove
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47007 ];

		return pClassPointer;
	};

};

UClass* UFoxAIAction_Vault::pClassPointer = NULL;

// Class FoxGame.FoxBeacon
// 0x0008 (0x01D0 - 0x01C8)
class AFoxBeacon : public AActor
{
public:
	float                                              SpawnTime;                                        		// 0x01C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        BeaconMesh;                                       		// 0x01CC (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47076 ];

		return pClassPointer;
	};

	void InitBeacon ( struct FVector NewLocation, struct FRotator NewRotation );
	void Expire ( );
};

UClass* AFoxBeacon::pClassPointer = NULL;

// Class FoxGame.FoxAISeqAct_GenericEvent
// 0x0020 (0x0110 - 0x00F0)
class UFoxAISeqAct_GenericEvent : public USequenceAction
{
public:
	struct FString                                     EventText;                                        		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      EventInstigator;                                  		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      EventRecipient;                                   		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EventLocation;                                    		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47190 ];

		return pClassPointer;
	};

};

UClass* UFoxAISeqAct_GenericEvent::pClassPointer = NULL;

// Class FoxGame.FoxAIControllerInterface_Assault
// 0x0000 (0x0448 - 0x0448)
class AFoxAIControllerInterface_Assault : public AFoxAIControllerInterface_Idler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47335 ];

		return pClassPointer;
	};

};

UClass* AFoxAIControllerInterface_Assault::pClassPointer = NULL;

// Class FoxGame.FoxAIControllerInterface_IdleWander
// 0x0000 (0x0448 - 0x0448)
class AFoxAIControllerInterface_IdleWander : public AFoxAIControllerInterface_Idler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47346 ];

		return pClassPointer;
	};

};

UClass* AFoxAIControllerInterface_IdleWander::pClassPointer = NULL;

// Class FoxGame.FoxAIControllerInterface_MeleeAttacker
// 0x0000 (0x0448 - 0x0448)
class AFoxAIControllerInterface_MeleeAttacker : public AFoxAIControllerInterface_Idler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47351 ];

		return pClassPointer;
	};

};

UClass* AFoxAIControllerInterface_MeleeAttacker::pClassPointer = NULL;

// Class FoxGame.FoxAIControllerInterface_Sniper
// 0x0000 (0x0448 - 0x0448)
class AFoxAIControllerInterface_Sniper : public AFoxAIControllerInterface_Idler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47357 ];

		return pClassPointer;
	};

};

UClass* AFoxAIControllerInterface_Sniper::pClassPointer = NULL;

// Class FoxGame.FoxAIControllerInterface_WanderingFighter
// 0x0000 (0x0448 - 0x0448)
class AFoxAIControllerInterface_WanderingFighter : public AFoxAIControllerInterface_Idler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47366 ];

		return pClassPointer;
	};

};

UClass* AFoxAIControllerInterface_WanderingFighter::pClassPointer = NULL;

// Class FoxGame.FoxAnimNotify_AttachGrenade
// 0x0000 (0x0040 - 0x0040)
class UFoxAnimNotify_AttachGrenade : public UAnimNotify_Scripted
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47469 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UFoxAnimNotify_AttachGrenade::pClassPointer = NULL;

// Class FoxGame.FoxAnimNotify_BombReleased
// 0x0000 (0x0040 - 0x0040)
class UFoxAnimNotify_BombReleased : public UAnimNotify_Scripted
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47476 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UFoxAnimNotify_BombReleased::pClassPointer = NULL;

// Class FoxGame.FoxAnimNotify_MeleeDamage
// 0x0000 (0x0040 - 0x0040)
class UFoxAnimNotify_MeleeDamage : public UAnimNotify_Scripted
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47482 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UFoxAnimNotify_MeleeDamage::pClassPointer = NULL;

// Class FoxGame.FoxAnimNotify_ThrowGrenade
// 0x0000 (0x0040 - 0x0040)
class UFoxAnimNotify_ThrowGrenade : public UAnimNotify_Scripted
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47488 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UFoxAnimNotify_ThrowGrenade::pClassPointer = NULL;

// Class FoxGame.FoxAnimNotify_ToggleVisor
// 0x0000 (0x0040 - 0x0040)
class UFoxAnimNotify_ToggleVisor : public UAnimNotify_Scripted
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47495 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UFoxAnimNotify_ToggleVisor::pClassPointer = NULL;

// Class FoxGame.FoxRefreshCacheUI
// 0x0064 (0x00A4 - 0x0040)
class UFoxRefreshCacheUI : public UFoxUIBaseTask
{
public:
	unsigned long                                      bInventoryReadEnabled : 1;                        		// 0x0040 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bStoreReadEnabled : 1;                            		// 0x0040 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bMailReadEnabled : 1;                             		// 0x0040 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bClanReadEnabled : 1;                             		// 0x0040 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bFriendReadEnabled : 1;                           		// 0x0040 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bShowWorkingDialog : 1;                           		// 0x0040 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bInventoryRead : 1;                               		// 0x0040 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bInventoryReadResponse : 1;                       		// 0x0040 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bStoreRead : 1;                                   		// 0x0040 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bStoreReadResponse : 1;                           		// 0x0040 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bMailRead : 1;                                    		// 0x0040 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bMailReadResponse : 1;                            		// 0x0040 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bClanRead : 1;                                    		// 0x0040 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bClanReadResponse : 1;                            		// 0x0040 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bFriendread : 1;                                  		// 0x0040 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bFriendReadResponse : 1;                          		// 0x0040 (0x0004) [0x0000000000000000] [0x00008000] 
	struct FString                                     FailReason;                                       		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LocErrorInventoryAccess;                          		// 0x0050 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocErrorStoreAccess;                              		// 0x005C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocErrorMailAccess;                               		// 0x0068 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocErrorClanAccess;                               		// 0x0074 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocErrorFriendAccess;                             		// 0x0080 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __PreRefreshCache__Delegate;                      		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __PostRefreshCache__Delegate;                     		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47661 ];

		return pClassPointer;
	};

	void ReadFriendComplete ( unsigned long Success );
	void ReadClanComplete ( struct FString ClanInfo );
	void ReadMailComplete ( unsigned char LocalUserNum, struct FString MailData );
	void ReadStoreComplete ( struct FString StoreData );
	void ReadInventoryComplete ( struct FUniqueNetId ForId, unsigned long bSuccess, struct FString InventoryData );
	void ConditionalFinishCacheRefresh ( );
	void ConfirmRefreshCacheIntent ( unsigned long bResult );
	bool ReadFriendCache ( );
	bool ReadClanCache ( );
	bool ReadMailCache ( );
	bool ReadStoreCache ( );
	bool ReadInventoryCache ( );
	void CleanupOnlineDelegates ( );
	void RegisterOnlineDelegates ( );
	void NotifyProcessComplete ( unsigned long bResult );
	bool RefreshCache ( );
	void PostRefreshCache ( unsigned long bResult, struct FString FailureReason );
	void PreRefreshCache ( );
};

UClass* UFoxRefreshCacheUI::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_DialogAnnouncer
// 0x0000 (0x0070 - 0x0070)
class UFoxCustomizationNode_DialogAnnouncer : public UFoxCustomizationNode_DialogBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47790 ];

		return pClassPointer;
	};

	void ApplyToLoadout ( );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_DialogAnnouncer::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_DialogPlayer
// 0x0000 (0x0070 - 0x0070)
class UFoxCustomizationNode_DialogPlayer : public UFoxCustomizationNode_DialogBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47792 ];

		return pClassPointer;
	};

	void ApplyToLoadout ( );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_DialogPlayer::pClassPointer = NULL;

// Class FoxGame.FoxUIHeroSelectModalDialogWidget
// 0x0000 (0x00B8 - 0x00B8)
class UFoxUIHeroSelectModalDialogWidget : public UFoxUIModalDialogWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47891 ];

		return pClassPointer;
	};

};

UClass* UFoxUIHeroSelectModalDialogWidget::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_Preset
// 0x000C (0x0068 - 0x005C)
class UFoxCustomizationNode_Preset : public UFoxCustomizationNode_Base
{
public:
	TArray< struct FPresetInfo >                       WeaponPresets;                                    		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47974 ];

		return pClassPointer;
	};

	bool IsPurchased ( int ItemId );
	void NodeEquipButtonClicked ( struct FString SelectedIndex );
	void UpdateNodeDetails ( );
	void ei_changeScrollerIndex ( int NewIndex );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_Preset::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_Receiver
// 0x0038 (0x0094 - 0x005C)
class UFoxCustomizationNode_Receiver : public UFoxCustomizationNode_Base
{
public:
	TArray< struct FReceiverInfo >                     WeaponClasses;                                    		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FFoxWeaponConfigInfo                        EquippedWeaponConfig;                             		// 0x0068 (0x002C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47977 ];

		return pClassPointer;
	};

	void ei_equipButtonClicked ( struct FString SelectedIndex );
	void UpdateNodeDetails ( );
	bool IsPurchased ( int ItemId );
	void ei_changeScrollerIndex ( int NewIndex );
	void AdjustPresetToCurrentConfig ( struct FFoxWeaponConfigInfo* DefaultWeaponConfig );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_Receiver::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_ModBase
// 0x0018 (0x0074 - 0x005C)
class UFoxCustomizationNode_ModBase : public UFoxCustomizationNode_Base
{
public:
	TArray< struct FModInfo >                          SelectedModInfoList;                              		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __ModSortDelegate__Delegate;                      		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47981 ];

		return pClassPointer;
	};

	int ModSortDelegate ( struct FModInfo A, struct FModInfo B );
	void UpdateNodeDetails ( );
	void SetupModCustomScroller ( TArray< struct FString > WeaponModClassNames, class UClass* CurrentModClass, unsigned long bSelectEquipped );
	void GetModClasses ( TArray< struct FString > ModNames, class UClass* SelectedWeaponClass, TArray< struct FModInfo >* ModArray );
	void ei_changeScrollerIndex ( int NewIndex );
};

UClass* UFoxCustomizationNode_ModBase::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_Barrel
// 0x0000 (0x0074 - 0x0074)
class UFoxCustomizationNode_Barrel : public UFoxCustomizationNode_ModBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47980 ];

		return pClassPointer;
	};

	bool IsPurchased ( int ItemId );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_Barrel::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_Scope
// 0x0000 (0x0074 - 0x0074)
class UFoxCustomizationNode_Scope : public UFoxCustomizationNode_ModBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47982 ];

		return pClassPointer;
	};

	bool IsPurchased ( int ItemId );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_Scope::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_Stock
// 0x0000 (0x0074 - 0x0074)
class UFoxCustomizationNode_Stock : public UFoxCustomizationNode_ModBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47983 ];

		return pClassPointer;
	};

	bool IsPurchased ( int ItemId );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_Stock::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_Muzzle
// 0x0000 (0x0074 - 0x0074)
class UFoxCustomizationNode_Muzzle : public UFoxCustomizationNode_ModBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47984 ];

		return pClassPointer;
	};

	bool IsPurchased ( int ItemId );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_Muzzle::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_Grip
// 0x0000 (0x0074 - 0x0074)
class UFoxCustomizationNode_Grip : public UFoxCustomizationNode_ModBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47985 ];

		return pClassPointer;
	};

	bool IsPurchased ( int ItemId );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_Grip::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_ModProviderBase
// 0x000C (0x0068 - 0x005C)
class UFoxCustomizationNode_ModProviderBase : public UFoxCustomizationNode_Base
{
public:
	TArray< struct FModProviderInfo >                  SelectedModProviderInfoList;                      		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47989 ];

		return pClassPointer;
	};

	void UpdateNodeDetails ( );
	bool IsValidProviderForWeapon ( class UFoxDataProvider_ModBase* ModProvider, class UClass* SelectedWeaponClass );
	void SetupProviderCustomScroller ( TArray< class UFoxDataProvider_Unlockable* > ProviderList, class UFoxDataProvider_Unlockable* CurrentProvider, unsigned long bSelectEquipped );
	int GetModProviderSkillID ( class UFoxDataProvider_ModBase* ModObject );
	void GetModProviders ( TArray< class UUIResourceDataProvider* > ModProviders, class UClass* SelectedWeaponClass, TArray< struct FModProviderInfo >* ModArray );
};

UClass* UFoxCustomizationNode_ModProviderBase::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_Magazine
// 0x0000 (0x0068 - 0x0068)
class UFoxCustomizationNode_Magazine : public UFoxCustomizationNode_ModProviderBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47988 ];

		return pClassPointer;
	};

	void ei_changeScrollerIndex ( int NewIndex );
	int GetModProviderSkillID ( class UFoxDataProvider_ModBase* ModObject );
	bool IsPurchased ( int ItemId );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_Magazine::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_Hanger
// 0x0000 (0x0068 - 0x0068)
class UFoxCustomizationNode_Hanger : public UFoxCustomizationNode_ModProviderBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47992 ];

		return pClassPointer;
	};

	bool IsValidProviderForWeapon ( class UFoxDataProvider_ModBase* ModProvider, class UClass* SelectedWeaponClass );
	void GetModProviders ( TArray< class UUIResourceDataProvider* > ModProviders, class UClass* SelectedWeaponClass, TArray< struct FModProviderInfo >* ModArray );
	void ei_changeScrollerIndex ( int NewIndex );
	int GetModProviderSkillID ( class UFoxDataProvider_ModBase* ModObject );
	bool IsPurchased ( int ItemId );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_Hanger::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_CamoBase
// 0x000C (0x0068 - 0x005C)
class UFoxCustomizationNode_CamoBase : public UFoxCustomizationNode_Base
{
public:
	TArray< struct FCamoInfo >                         CamoInfoArray;                                    		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47996 ];

		return pClassPointer;
	};

	void UpdateNodeDetails ( );
};

UClass* UFoxCustomizationNode_CamoBase::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_CamoWeapon
// 0x0000 (0x0068 - 0x0068)
class UFoxCustomizationNode_CamoWeapon : public UFoxCustomizationNode_CamoBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47995 ];

		return pClassPointer;
	};

	void UpdateNodeDetails ( );
	bool IsPurchased ( int ItemId );
	void ei_changeScrollerIndex ( int NewIndex );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_CamoWeapon::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_CamoBody
// 0x0000 (0x0068 - 0x0068)
class UFoxCustomizationNode_CamoBody : public UFoxCustomizationNode_CamoBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48003 ];

		return pClassPointer;
	};

	void UpdateNodeDetails ( );
	bool IsPurchased ( int ItemId );
	void ei_changeScrollerIndex ( int Index );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_CamoBody::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_Helmet
// 0x0000 (0x0068 - 0x0068)
class UFoxCustomizationNode_Helmet : public UFoxCustomizationNode_GearBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48006 ];

		return pClassPointer;
	};

	bool IsPurchased ( int ItemId );
	void SetupCustomItemType ( unsigned long bReset, TArray< class UUIResourceDataProvider* >* NewGearArray );
};

UClass* UFoxCustomizationNode_Helmet::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_UpperBody
// 0x0000 (0x0068 - 0x0068)
class UFoxCustomizationNode_UpperBody : public UFoxCustomizationNode_GearBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48009 ];

		return pClassPointer;
	};

	bool IsPurchased ( int ItemId );
	void SetupCustomItemType ( unsigned long bReset, TArray< class UUIResourceDataProvider* >* NewGearArray );
};

UClass* UFoxCustomizationNode_UpperBody::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_LowerBody
// 0x0000 (0x0068 - 0x0068)
class UFoxCustomizationNode_LowerBody : public UFoxCustomizationNode_GearBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48012 ];

		return pClassPointer;
	};

	bool IsPurchased ( int ItemId );
	void SetupCustomItemType ( unsigned long bReset, TArray< class UUIResourceDataProvider* >* NewGearArray );
};

UClass* UFoxCustomizationNode_LowerBody::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_Trophy
// 0x0000 (0x0068 - 0x0068)
class UFoxCustomizationNode_Trophy : public UFoxCustomizationNode_GearBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48015 ];

		return pClassPointer;
	};

	bool IsPurchased ( int ItemId );
	void SetupCustomItemType ( unsigned long bReset, TArray< class UUIResourceDataProvider* >* NewGearArray );
};

UClass* UFoxCustomizationNode_Trophy::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_TacticalGear
// 0x0000 (0x0068 - 0x0068)
class UFoxCustomizationNode_TacticalGear : public UFoxCustomizationNode_GearBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48018 ];

		return pClassPointer;
	};

	void UpdateNodeDetails ( );
	void GenerateDetails ( );
	bool IsPurchased ( int ItemId );
	void SetupCustomItemType ( unsigned long bReset, TArray< class UUIResourceDataProvider* >* NewGearArray );
};

UClass* UFoxCustomizationNode_TacticalGear::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_LockedHeroGear
// 0x0000 (0x005C - 0x005C)
class UFoxCustomizationNode_LockedHeroGear : public UFoxCustomizationNode_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48021 ];

		return pClassPointer;
	};

	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_LockedHeroGear::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_Depot
// 0x0030 (0x008C - 0x005C)
class UFoxCustomizationNode_Depot : public UFoxCustomizationNode_Base
{
public:
	TArray< struct FDepotPresetInfo >                  DepotPresets;                                     		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           HeaderStats;                                      		// 0x0068 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           HealthPackStats;                                  		// 0x0074 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           AmmoPackStats;                                    		// 0x0080 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48041 ];

		return pClassPointer;
	};

	bool IsPurchased ( int ItemId );
	void UpdateNodeDetails ( );
	void NodeEquipButtonClicked ( struct FString SelectedIndex );
	void ResetSelectedLoadout ( );
	void ei_changeScrollerIndex ( int NewIndex );
	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_Depot::pClassPointer = NULL;

// Class FoxGame.FoxCustomizationNode_LockedHeroDepot
// 0x0000 (0x005C - 0x005C)
class UFoxCustomizationNode_LockedHeroDepot : public UFoxCustomizationNode_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48044 ];

		return pClassPointer;
	};

	void Initialize ( unsigned long bSelectEquipped );
};

UClass* UFoxCustomizationNode_LockedHeroDepot::pClassPointer = NULL;

// Class FoxGame.FoxPurchaseItemUI
// 0x011C (0x0198 - 0x007C)
class UFoxPurchaseItemUI : public UFoxUIBaseTransactionTask
{
public:
	struct FStoreMetaData                              StoreItem;                                        		// 0x007C (0x0090) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FProfilePurchaseInfo                        PurchaseInfo;                                     		// 0x010C (0x0010) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bLocked : 1;                                      		// 0x011C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCanEquip : 1;                                    		// 0x011C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bRenewExpired : 1;                                		// 0x011C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bShowWorkingDialog : 1;                           		// 0x011C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bPostActivate : 1;                                		// 0x011C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bHasWorkingDialog : 1;                            		// 0x011C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	struct FString                                     RecipientName;                                    		// 0x0120 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     RenewInstanceId;                                  		// 0x012C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            PostActivationTypes;                              		// 0x0138 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     LocErrorBadPricing;                               		// 0x0144 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocErrorAutoActivate;                             		// 0x0150 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocConfirmPurchase;                               		// 0x015C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocPurchasing;                                    		// 0x0168 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocPurchasingCaps;                                		// 0x0174 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocOfferExpiredLabel;                             		// 0x0180 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __PostPurchaseItem__Delegate;                     		// 0x018C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48071 ];

		return pClassPointer;
	};

	void PurchaseItemInvalid ( unsigned long bResult );
	void ActivateItemCancelled ( );
	void ActivateItemFailed ( unsigned long bResult );
	void RenewItemComplete ( unsigned char PurchaseResult, struct FString InstanceId );
	void PurchaseItemComplete ( unsigned char PurchaseResult, struct FString InstanceId );
	void ConfirmPurchaseItemIntent ( unsigned long bResult );
	void PrePurchase ( );
	struct FString GetRenewalInstanceId ( int UnlockID, struct FString ProposedInstanceId );
	void NotifyProcessComplete ( unsigned long bResult );
	void CleanupOnlineDelegates ( );
	void RegisterOnlineDelegates ( );
	void OffersExpired ( );
	bool PurchaseItem ( unsigned long bForcePurchase );
	void PostPurchaseItem ( unsigned long bSuccess, unsigned long bEquip );
};

UClass* UFoxPurchaseItemUI::pClassPointer = NULL;

// Class FoxGame.FoxRenewItemUI
// 0x0000 (0x0198 - 0x0198)
class UFoxRenewItemUI : public UFoxPurchaseItemUI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48072 ];

		return pClassPointer;
	};

	void PurchaseItemInvalid ( unsigned long bResult );
	bool PurchaseItem ( unsigned long bForcePurchase );
};

UClass* UFoxRenewItemUI::pClassPointer = NULL;

// Class FoxGame.FoxDestroyItemUI
// 0x0064 (0x00E0 - 0x007C)
class UFoxDestroyItemUI : public UFoxUIBaseTransactionTask
{
public:
	struct FString                                     LocErrorNoItem;                                   		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocErrorDestroyFailed;                            		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocConfirmDestroy;                                		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocDestroying;                                    		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocDestroyingCaps;                                		// 0x00AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocDestroyComplete;                               		// 0x00B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FInventoryMetaData >                InventoryItems;                                   		// 0x00C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bShowWorkingDialog : 1;                           		// 0x00D0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bKillWorkingDialog : 1;                           		// 0x00D0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHasWorkingDialog : 1;                            		// 0x00D0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	struct FScriptDelegate                             __PostDestroyItem__Delegate;                      		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48073 ];

		return pClassPointer;
	};

	void DestroyItemFailed ( struct FString ErrorText, struct FInventoryMetaData* InventoryItem );
	void DestroyItemComplete ( struct FString InstanceId, unsigned long bResult );
	void ConfirmDestroyItemIntent ( unsigned long bResult );
	void PreDestroyItem ( );
	bool ValidateDestroyItem ( struct FString* ErrorText, struct FInventoryMetaData* InventoryItem );
	void HideWorkingDialog ( );
	void ShowWorkingDialog ( );
	void NotifyProcessFailed ( unsigned long bResult );
	void NotifyProcessComplete ( unsigned long bResult );
	void PopFront ( struct FInventoryMetaData* InventoryItem );
	void PeekFront ( struct FInventoryMetaData* InventoryItem );
	void CleanupOnlineDelegates ( );
	void RegisterOnlineDelegates ( );
	bool DestroyItem ( unsigned long bForceDestroy );
	void PostDestroyItem ( unsigned long bResult, unsigned long bEquip );
};

UClass* UFoxDestroyItemUI::pClassPointer = NULL;

// Class FoxGame.FoxCustomHealthActor
// 0x0000 (0x03C0 - 0x03C0)
class AFoxCustomHealthActor : public AFoxCustomSkeletalActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48147 ];

		return pClassPointer;
	};

};

UClass* AFoxCustomHealthActor::pClassPointer = NULL;

// Class FoxGame.FoxCustomAmmoActor
// 0x0004 (0x03C4 - 0x03C0)
class AFoxCustomAmmoActor : public AFoxCustomSkeletalActor
{
public:
	class UStaticMeshComponent*                        StaticPreviewMesh;                                		// 0x03C0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48148 ];

		return pClassPointer;
	};

	void SetPreviewMesh ( );
};

UClass* AFoxCustomAmmoActor::pClassPointer = NULL;

// Class FoxGame.FoxCustomHeavyRefillActor
// 0x0000 (0x03C0 - 0x03C0)
class AFoxCustomHeavyRefillActor : public AFoxCustomSkeletalActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48149 ];

		return pClassPointer;
	};

};

UClass* AFoxCustomHeavyRefillActor::pClassPointer = NULL;

// Class FoxGame.FoxCustomTurretActor
// 0x0000 (0x03C0 - 0x03C0)
class AFoxCustomTurretActor : public AFoxCustomSkeletalActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48150 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
};

UClass* AFoxCustomTurretActor::pClassPointer = NULL;

// Class FoxGame.FoxBeaconCamera
// 0x0000 (0x0198 - 0x0198)
class UFoxBeaconCamera : public UGameThirdPersonCamera
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48412 ];

		return pClassPointer;
	};

	void UpdateCamera ( class APawn* P, class AGamePlayerCamera* CameraActor, float DeltaTime, struct FTViewTarget* OutVT );
};

UClass* UFoxBeaconCamera::pClassPointer = NULL;

// Class FoxGame.FoxGameObject_SpawnPoint
// 0x002C (0x0210 - 0x01E4)
class AFoxGameObject_SpawnPoint : public AFoxGameObject
{
public:
	class UClass*                                      ObjectToSpawn;                                    		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSpawnInitial : 1;                                		// 0x01E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDropOntoSpawn : 1;                               		// 0x01E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              SpawnInterval;                                    		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxSpawnedObjectsAlive;                           		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinSpawnedObjectsAlive;                           		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SpawnParticleSystem;                              		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AFoxGameObject* >                    SpawnedObjects;                                   		// 0x01FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              TriggeredRespawnDelay;                            		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DropOffset;                                       		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48728 ];

		return pClassPointer;
	};

	void ObjectDestroyed ( class AFoxGameObject* DestroyedObject );
	bool ShouldSpawnObject ( );
	void SpawnObject ( );
	void eventPostBeginPlay ( );
};

UClass* AFoxGameObject_SpawnPoint::pClassPointer = NULL;

// Class FoxGame.FoxBillboardUIInteract
// 0x0000 (0x0138 - 0x0138)
class UFoxBillboardUIInteract : public UFoxBillboardUIObjectBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48779 ];

		return pClassPointer;
	};

};

UClass* UFoxBillboardUIInteract::pClassPointer = NULL;

// Class FoxGame.FoxCorpseCamera
// 0x0000 (0x0198 - 0x0198)
class UFoxCorpseCamera : public UGameThirdPersonCamera
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48935 ];

		return pClassPointer;
	};

	void UpdateCamera ( class APawn* P, class AGamePlayerCamera* CameraActor, float DeltaTime, struct FTViewTarget* OutVT );
};

UClass* UFoxCorpseCamera::pClassPointer = NULL;

// Class FoxGame.FoxFollowCamera
// 0x0000 (0x0198 - 0x0198)
class UFoxFollowCamera : public UGameThirdPersonCamera
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48936 ];

		return pClassPointer;
	};

	void UpdateCamera ( class APawn* P, class AGamePlayerCamera* CameraActor, float DeltaTime, struct FTViewTarget* OutVT );
};

UClass* UFoxFollowCamera::pClassPointer = NULL;

// Class FoxGame.FoxPreviewCamera
// 0x0000 (0x0198 - 0x0198)
class UFoxPreviewCamera : public UGameThirdPersonCamera
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48937 ];

		return pClassPointer;
	};

	void UpdateCamera ( class APawn* P, class AGamePlayerCamera* CameraActor, float DeltaTime, struct FTViewTarget* OutVT );
};

UClass* UFoxPreviewCamera::pClassPointer = NULL;

// Class FoxGame.FoxHeroCamera
// 0x0000 (0x0048 - 0x0048)
class UFoxHeroCamera : public UGameFixedCamera
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48938 ];

		return pClassPointer;
	};

	void UpdateCamera ( class APawn* P, class AGamePlayerCamera* CameraActor, float DeltaTime, struct FTViewTarget* OutVT );
};

UClass* UFoxHeroCamera::pClassPointer = NULL;

// Class FoxGame.FoxThirdPersonCamera
// 0x0008 (0x01A0 - 0x0198)
class UFoxThirdPersonCamera : public UGameThirdPersonCamera
{
public:
	class UGameThirdPersonCameraMode*                  HumanCameraMode;                                  		// 0x0198 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UClass*                                      HumanCameraModeDefaultClass;                      		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48939 ];

		return pClassPointer;
	};

	class UGameThirdPersonCameraMode* FindBestCameraMode ( class APawn* P );
	void Init ( );
};

UClass* UFoxThirdPersonCamera::pClassPointer = NULL;

// Class FoxGame.FoxCameraLensEffect_EMP
// 0x000B (0x0224 - 0x0219)
class AFoxCameraLensEffect_EMP : public AFoxCameraLensEffect_Fading
{
public:
	struct FName                                       EMPHRVParamName;                                  		// 0x021C (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48989 ];

		return pClassPointer;
	};

	void SetStrength ( float NewStrength );
};

UClass* AFoxCameraLensEffect_EMP::pClassPointer = NULL;

// Class FoxGame.FoxCameraLensEffect_Indicator
// 0x000B (0x020C - 0x0201)
class AFoxCameraLensEffect_Indicator : public AFoxCameraLensEffect_Base
{
public:
	struct FName                                       EffectRotationParameterName;                      		// 0x0204 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48999 ];

		return pClassPointer;
	};

	void SetIndicatorRotation ( float NewRotation );
	void Destroyed ( );
};

UClass* AFoxCameraLensEffect_Indicator::pClassPointer = NULL;

// Class FoxGame.FoxCameraLensEffect_StunMine
// 0x000B (0x020C - 0x0201)
class AFoxCameraLensEffect_StunMine : public AFoxCameraLensEffect_Base
{
public:
	struct FName                                       InterpParamName;                                  		// 0x0204 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49013 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
};

UClass* AFoxCameraLensEffect_StunMine::pClassPointer = NULL;

// Class FoxGame.FoxCameraLensEffect_TouchVisorHVT
// 0x0003 (0x0204 - 0x0201)
class AFoxCameraLensEffect_TouchVisorHVT : public AFoxCameraLensEffect_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49024 ];

		return pClassPointer;
	};

};

UClass* AFoxCameraLensEffect_TouchVisorHVT::pClassPointer = NULL;

// Class FoxGame.FoxContentHelperBase
// 0x0018 (0x0054 - 0x003C)
class UFoxContentHelperBase : public UObject
{
public:
	TArray< class UAnimSet* >                          PawnTPAnimSetArray;                               		// 0x003C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          GrenadeTPAnimSetArray;                            		// 0x0048 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49463 ];

		return pClassPointer;
	};

};

UClass* UFoxContentHelperBase::pClassPointer = NULL;

// Class FoxGame.FoxCreatePlayerUI
// 0x0068 (0x00A8 - 0x0040)
class UFoxCreatePlayerUI : public UFoxUIBaseTask
{
public:
	int                                                ProfileSyncInterval;                              		// 0x0040 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     TrainingButtonID;                                 		// 0x0044 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PlayerName;                                       		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bPlayerGender : 1;                                		// 0x005C (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     PostCommandGroup;                                 		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LocErrorCreatePlayerFailed;                       		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocCreatingPlayer;                                		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocCreatePlayerComplete;                          		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocCreatePlayerSyncing;                           		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPostCreatePlayer__Delegate;                   		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49483 ];

		return pClassPointer;
	};

	void ConfirmTrainingLevelIntent ( unsigned long bResult );
	void CreatePlayerComplete ( unsigned char LocalUserNum, unsigned long bResult );
	void ConfirmCreateNewPlayerIntent ( unsigned long bResult );
	void NotifyProcessFailed ( unsigned long bResult );
	void NotifyProcessComplete ( unsigned long bResult );
	void CleanupOnlineDelegates ( );
	void RegisterOnlineDelegates ( );
	void CancelCreatePlayer ( );
	bool CreatePlayer ( struct FString NewPlayerName, unsigned char NewPlayerGender );
	void OnPostCreatePlayer ( unsigned long bComplete, struct FString CommandGroup );
};

UClass* UFoxCreatePlayerUI::pClassPointer = NULL;

// Class FoxGame.FoxCustomGearActor
// 0x0008 (0x03C8 - 0x03C0)
class AFoxCustomGearActor : public AFoxCustomSkeletalActor
{
public:
	int                                                CurrentGearIndex;                                 		// 0x03C0 (0x0004) [0x0000000000000000]              
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x03C4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49611 ];

		return pClassPointer;
	};

	void SetGearIndex ( int NewIndex );
	void SetPreviewMesh ( );
};

UClass* AFoxCustomGearActor::pClassPointer = NULL;

// Class FoxGame.FoxCustomHardSuitActor
// 0x0000 (0x03C0 - 0x03C0)
class AFoxCustomHardSuitActor : public AFoxCustomSkeletalActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49624 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
};

UClass* AFoxCustomHardSuitActor::pClassPointer = NULL;

// Class FoxGame.FoxCustomizableCharacterActor
// 0x0010 (0x0218 - 0x0208)
class AFoxCustomizableCharacterActor : public ASkeletalMeshActor
{
public:
	class UTexture*                                    CurrBaseCamoTex;                                  		// 0x0208 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTexture*                                    CurrColorOverlayTex;                              		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUseMetallic : 1;                                 		// 0x0210 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                NumTexureTiles;                                   		// 0x0214 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49638 ];

		return pClassPointer;
	};

	void SetCharacterCamo ( class UTexture* BaseCamoTex, class UTexture* ColorOverlayTex, int NumTiles, unsigned long bMetallic );
	void SetCharacterMesh ( class UClass* NewPawnClass );
};

UClass* AFoxCustomizableCharacterActor::pClassPointer = NULL;

// Class FoxGame.FoxCustomizableWeaponActor
// 0x0038 (0x0240 - 0x0208)
class AFoxCustomizableWeaponActor : public ASkeletalMeshActor
{
public:
	class UClass*                                      CurrWeaponClass;                                  		// 0x0208 (0x0004) [0x0000000000000000]              
	class AFoxSceneCaptureActor*                       WeaponCameraActor;                                		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFoxSceneCaptureActor*                       HangerCameraActor;                                		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      BarrelModMesh;                                    		// 0x0214 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      MuzzleModMesh;                                    		// 0x0218 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      StockModMesh;                                     		// 0x021C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      ScopeModMesh;                                     		// 0x0220 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      MagazineModMesh;                                  		// 0x0224 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      GripModMesh;                                      		// 0x0228 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      HangerMesh;                                       		// 0x022C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       WeaponName;                                       		// 0x0230 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    CurrBaseCamoTex;                                  		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumTexureTiles;                                   		// 0x023C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49659 ];

		return pClassPointer;
	};

	void AttachWeaponTo ( class AFoxCustomizableCharacterActor* CustomizableCharacterActor );
	void UpdateSkeletalMeshCamo ( class USkeletalMeshComponent* CamoMesh, int NumTiles );
	void SetWeaponCamo ( class UTexture* BaseCamoTex, int NumTiles );
	void DetachMods ( class USkeletalMeshComponent* ModMesh );
	void DetachAllMods ( );
	void RebuildWeapon ( );
	void AttachMod ( class UClass* ModClassBase );
	void SetWeapon ( class UClass* NewWeaponClass );
};

UClass* AFoxCustomizableWeaponActor::pClassPointer = NULL;

// Class FoxGame.FoxSceneCaptureActor
// 0x0008 (0x01D8 - 0x01D0)
class AFoxSceneCaptureActor : public ASceneCapture2DActor
{
public:
	struct FName                                       ViewName;                                         		// 0x01D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49671 ];

		return pClassPointer;
	};

};

UClass* AFoxSceneCaptureActor::pClassPointer = NULL;

// Class FoxGame.FoxCustomizableWeaponActorSpawnable
// 0x0000 (0x0240 - 0x0240)
class AFoxCustomizableWeaponActorSpawnable : public AFoxCustomizableWeaponActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49721 ];

		return pClassPointer;
	};

};

UClass* AFoxCustomizableWeaponActorSpawnable::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_Bullet
// 0x0003 (0x00E0 - 0x00DD)
class UFoxDamageType_Bullet : public UFoxDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50752 ];

		return pClassPointer;
	};

};

UClass* UFoxDamageType_Bullet::pClassPointer = NULL;

// Class FoxGame.FoxEmitterSpawnableSimulated
// 0x0000 (0x01E0 - 0x01E0)
class AFoxEmitterSpawnableSimulated : public AEmitterSpawnable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50783 ];

		return pClassPointer;
	};

	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
};

UClass* AFoxEmitterSpawnableSimulated::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_Corrosive_Bullet
// 0x0000 (0x011C - 0x011C)
class UFoxDamageType_Corrosive_Bullet : public UFoxDamageType_Corrosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50802 ];

		return pClassPointer;
	};

};

UClass* UFoxDamageType_Corrosive_Bullet::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_Electric
// 0x0003 (0x00E0 - 0x00DD)
class UFoxDamageType_Electric : public UFoxDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50806 ];

		return pClassPointer;
	};

};

UClass* UFoxDamageType_Electric::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_Fire
// 0x0003 (0x00E0 - 0x00DD)
class UFoxDamageType_Fire : public UFoxDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50816 ];

		return pClassPointer;
	};

};

UClass* UFoxDamageType_Fire::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_HighImpact
// 0x0004 (0x00E4 - 0x00E0)
class UFoxDamageType_HighImpact : public UFoxDamageType_Bullet
{
public:
	class UParticleSystem*                             ThirdPersonEffectPS;                              		// 0x00E0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50823 ];

		return pClassPointer;
	};

	void ApplyEffect ( class AFoxPawn* VictimPawn, class AController* ControllerInstigator, int* DamageAmount );
};

UClass* UFoxDamageType_HighImpact::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_HOT
// 0x0000 (0x011C - 0x011C)
class UFoxDamageType_HOT : public UFoxDamageType_Corrosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50833 ];

		return pClassPointer;
	};

	void eventApplyDamage ( float Delta, class AFoxPawn* VictimPawn, struct FDOTInfo* CurrentDOTInfo );
};

UClass* UFoxDamageType_HOT::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_MeleeTaunt
// 0x0007 (0x00E4 - 0x00DD)
class UFoxDamageType_MeleeTaunt : public UFoxDamageType
{
public:
	int                                                TauntUnlockID;                                    		// 0x00E0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50846 ];

		return pClassPointer;
	};

};

UClass* UFoxDamageType_MeleeTaunt::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_MeleeTaunt_CraneKick
// 0x0000 (0x00E4 - 0x00E4)
class UFoxDamageType_MeleeTaunt_CraneKick : public UFoxDamageType_MeleeTaunt
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50851 ];

		return pClassPointer;
	};

};

UClass* UFoxDamageType_MeleeTaunt_CraneKick::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_MeleeTaunt_UpperCut
// 0x0000 (0x00E4 - 0x00E4)
class UFoxDamageType_MeleeTaunt_UpperCut : public UFoxDamageType_MeleeTaunt
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50855 ];

		return pClassPointer;
	};

};

UClass* UFoxDamageType_MeleeTaunt_UpperCut::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_RanOver
// 0x0003 (0x00E0 - 0x00DD)
class UFoxDamageType_RanOver : public UFoxDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50859 ];

		return pClassPointer;
	};

};

UClass* UFoxDamageType_RanOver::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_Repair
// 0x0003 (0x00E0 - 0x00DD)
class UFoxDamageType_Repair : public UFoxDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50863 ];

		return pClassPointer;
	};

};

UClass* UFoxDamageType_Repair::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_Slashing
// 0x0003 (0x00E0 - 0x00DD)
class UFoxDamageType_Slashing : public UFoxDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50867 ];

		return pClassPointer;
	};

};

UClass* UFoxDamageType_Slashing::pClassPointer = NULL;

// Class FoxGame.FoxDamageType_Tracer
// 0x0003 (0x00E0 - 0x00DD)
class UFoxDamageType_Tracer : public UFoxDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50887 ];

		return pClassPointer;
	};

};

UClass* UFoxDamageType_Tracer::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchAll
// 0x0000 (0x00F4 - 0x00F4)
class UFoxGameSearchAll : public UFoxGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51179 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSearchAll::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchDM
// 0x0000 (0x00F4 - 0x00F4)
class UFoxGameSearchDM : public UFoxGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51180 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSearchDM::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchTDM
// 0x0000 (0x00F4 - 0x00F4)
class UFoxGameSearchTDM : public UFoxGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51181 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSearchTDM::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchCTDM
// 0x0000 (0x00F4 - 0x00F4)
class UFoxGameSearchCTDM : public UFoxGameSearchTDM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51182 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSearchCTDM::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchCP
// 0x0000 (0x00F4 - 0x00F4)
class UFoxGameSearchCP : public UFoxGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51183 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSearchCP::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchCTF
// 0x0000 (0x00F4 - 0x00F4)
class UFoxGameSearchCTF : public UFoxGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51184 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSearchCTF::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchTKOTH
// 0x0000 (0x00F4 - 0x00F4)
class UFoxGameSearchTKOTH : public UFoxGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51185 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSearchTKOTH::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchEOTS
// 0x0000 (0x00F4 - 0x00F4)
class UFoxGameSearchEOTS : public UFoxGameSearchCP
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51186 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSearchEOTS::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchPL
// 0x0000 (0x00F4 - 0x00F4)
class UFoxGameSearchPL : public UFoxGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51187 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSearchPL::pClassPointer = NULL;

// Class FoxGame.FoxGameMP_CTDM
// 0x0000 (0x062C - 0x062C)
class AFoxGameMP_CTDM : public AFoxGameMP_TDM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51312 ];

		return pClassPointer;
	};

	class ATeamInfo* GetWinningTeam ( );
	bool CheckScore ( class APlayerReplicationInfo* TestPRI );
};

UClass* AFoxGameMP_CTDM::pClassPointer = NULL;

// Class FoxGame.FoxGameMP_EOTS
// 0x0030 (0x0670 - 0x0640)
class AFoxGameMP_EOTS : public AFoxGameMP_CP
{
public:
	int                                                TeamIntervalScoreNodesCaptured1;                  		// 0x0640 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                TeamIntervalScoreNodesCaptured2;                  		// 0x0644 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                TeamIntervalScoreNodesCaptured3;                  		// 0x0648 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                TeamIntervalScoreNodesCaptured4;                  		// 0x064C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                PointsFlagCapturePerNodesCaptured1;               		// 0x0650 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                PointsFlagCapturePerNodesCaptured2;               		// 0x0654 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                PointsFlagCapturePerNodesCaptured3;               		// 0x0658 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                PointsFlagCapturePerNodesCaptured4;               		// 0x065C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                TeamLosingRespawnTime;                            		// 0x0660 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                LosingTeamCatchUpPoints;                          		// 0x0664 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              BecomeLosingTeamRatio;                            		// 0x0668 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                LosingTeamIndex;                                  		// 0x066C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51313 ];

		return pClassPointer;
	};

	void UpdateLosingTeam ( );
	float GetRespawnTimeForPlayer ( class AController* Player );
	void FlagPickedUp ( class AFoxGameObject_Flag* Flag, class AFoxPRI* FoxPRI );
	void ScoreValidKill ( class AController* Killer, class AController* KilledPlayer );
	int GetFlagCaptureScoreForPointsControlled ( int PointsControlled );
	void FlagCaptured ( class AFoxPRI* CapturingPRI );
	int GetScoreIntervalForPointsControlled ( int PointsControlled );
	int GetNumberOfPointsControlledByTeam ( int TeamIndex );
	void UpdatePointCaptureScore ( );
};

UClass* AFoxGameMP_EOTS::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStats_PlayerStats
// 0x0000 (0x0088 - 0x0088)
class UFoxOnlineStats_PlayerStats : public UOnlineStatsRead
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51407 ];

		return pClassPointer;
	};

	void eventOnReadComplete ( );
};

UClass* UFoxOnlineStats_PlayerStats::pClassPointer = NULL;

// Class FoxGame.FoxPMPInfo_Decals
// 0x002C (0x0068 - 0x003C)
class UFoxPMPInfo_Decals : public UFoxPMPInfoBase
{
public:
	TArray< class UMaterialInterface* >                DecalMaterials;                                   		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      ClipDecalsUsingFastPath : 1;                      		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRandomizeRotation : 1;                           		// 0x0048 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              Width;                                            		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Height;                                           		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Thickness;                                        		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   RandomScalingRange;                               		// 0x0058 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomRadiusOffset;                               		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LifeSpan;                                         		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51824 ];

		return pClassPointer;
	};

};

UClass* UFoxPMPInfo_Decals::pClassPointer = NULL;

// Class FoxGame.FoxDestructiblePlaceable
// 0x0000 (0x030C - 0x030C)
class AFoxDestructiblePlaceable : public AFoxDestructible
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52061 ];

		return pClassPointer;
	};

};

UClass* AFoxDestructiblePlaceable::pClassPointer = NULL;

// Class FoxGame.FoxDialogBoxPassword
// 0x0000 (0x00D4 - 0x00D4)
class UFoxDialogBoxPassword : public UFoxDialogBoxBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52594 ];

		return pClassPointer;
	};

	void ei_OnCancelPressed ( struct FString Arg );
	void ei_OnConfirmPressed ( struct FString Arg, struct FString Arg2 );
	void ShowPasswordDialog ( struct FPasswordDialogBoxProperties Properties );
};

UClass* UFoxDialogBoxPassword::pClassPointer = NULL;

// Class FoxGame.FoxDownloadableContentEnumeratorPC
// 0x0000 (0x006C - 0x006C)
class UFoxDownloadableContentEnumeratorPC : public UDownloadableContentEnumerator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52609 ];

		return pClassPointer;
	};

};

UClass* UFoxDownloadableContentEnumeratorPC::pClassPointer = NULL;

// Class FoxGame.FoxDownloadableContentManager
// 0x0004 (0x00BC - 0x00B8)
class UFoxDownloadableContentManager : public UDownloadableContentManager
{
public:
	unsigned long                                      bHasRefreshed : 1;                                		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52611 ];

		return pClassPointer;
	};

	void RefreshDLCComplete ( );
	void RefreshDLC ( );
	void eventInit ( );
};

UClass* UFoxDownloadableContentManager::pClassPointer = NULL;

// Class FoxGame.FoxEmitterSpawnable
// 0x0000 (0x01E0 - 0x01E0)
class AFoxEmitterSpawnable : public AEmitterSpawnable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52740 ];

		return pClassPointer;
	};

	void HideSelf ( );
	void OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent );
};

UClass* AFoxEmitterSpawnable::pClassPointer = NULL;

// Class FoxGame.FoxFogVolumeSphericalDensityInfoSpawnable
// 0x0000 (0x01D4 - 0x01D4)
class AFoxFogVolumeSphericalDensityInfoSpawnable : public AFogVolumeSphericalDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52763 ];

		return pClassPointer;
	};

};

UClass* AFoxFogVolumeSphericalDensityInfoSpawnable::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardWriteDM
// 0x0000 (0x00A4 - 0x00A4)
class UFoxLeaderboardWriteDM : public UFoxLeaderboardWriteGameTypeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52855 ];

		return pClassPointer;
	};

	void CopyAllStats ( class AFoxPRI* PRI );
};

UClass* UFoxLeaderboardWriteDM::pClassPointer = NULL;

// Class FoxGame.FoxGameSettingsBO
// 0x0000 (0x0108 - 0x0108)
class UFoxGameSettingsBO : public UFoxGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52876 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSettingsBO::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardWriteTDM
// 0x0000 (0x00A4 - 0x00A4)
class UFoxLeaderboardWriteTDM : public UFoxLeaderboardWriteGameTypeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52964 ];

		return pClassPointer;
	};

	void CopyAllStats ( class AFoxPRI* PRI );
};

UClass* UFoxLeaderboardWriteTDM::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardWriteCP
// 0x0000 (0x00A4 - 0x00A4)
class UFoxLeaderboardWriteCP : public UFoxLeaderboardWriteGameTypeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53034 ];

		return pClassPointer;
	};

	void CopyAllStats ( class AFoxPRI* PRI );
};

UClass* UFoxLeaderboardWriteCP::pClassPointer = NULL;

// Class FoxGame.FoxHudCTDM
// 0x0000 (0x0768 - 0x0768)
class AFoxHudCTDM : public AFoxHUDTDM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53047 ];

		return pClassPointer;
	};

};

UClass* AFoxHudCTDM::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardWriteCTF
// 0x0000 (0x00A4 - 0x00A4)
class UFoxLeaderboardWriteCTF : public UFoxLeaderboardWriteGameTypeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53112 ];

		return pClassPointer;
	};

	void CopyAllStats ( class AFoxPRI* PRI );
};

UClass* UFoxLeaderboardWriteCTF::pClassPointer = NULL;

// Class FoxGame.FoxGameMP_Detonate
// 0x0020 (0x064C - 0x062C)
class AFoxGameMP_Detonate : public AFoxGameMP_TDM
{
public:
	class AFoxGameObject_Bomb*                         Bomb;                                             		// 0x062C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxPRI*                                     BombPlanter;                                      		// 0x0630 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ATeamInfo*                                   PlantersTeamInfo;                                 		// 0x0634 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFoxGameObject_BombTarget*                   RedBombTarget;                                    		// 0x0638 (0x0004) [0x0000000000000000]              
	class AFoxGameObject_BombTarget*                   BlueBombTarget;                                   		// 0x063C (0x0004) [0x0000000000000000]              
	float                                              PlantedBombPersonalScoreAdjustment;               		// 0x0640 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DisArmedBombPersonalScoreAdjustment;              		// 0x0644 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DefendedPlantedBombPersonalScoreAdjustment;       		// 0x0648 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53113 ];

		return pClassPointer;
	};

	void RestartPlayer ( class AController* NewPlayer );
	void RestartRound ( );
	void ScoreValidKill ( class AController* Killer, class AController* KilledPlayer );
	void BombPickedUp ( class AFoxPRI* FoxPRI );
	void BombDropped ( class AFoxPRI* FoxPRI );
	void BombReset ( class AFoxPRI* FoxPRI );
	void ExplodeBomb ( );
	void DefuseBomb ( class AFoxPawn* Defuser );
	void PlantBomb ( class AFoxPawn* Planter );
	void RegisterBombTarget ( class AFoxGameObject_BombTarget* Target );
	void NotifyBombSpawned ( class AFoxGameObject_Bomb* NewBomb );
	void InitializeTeams ( );
};

UClass* AFoxGameMP_Detonate::pClassPointer = NULL;

// Class FoxGame.FoxGameObject_Bomb
// 0x0064 (0x0298 - 0x0234)
class AFoxGameObject_Bomb : public AFoxGameObject_Carry
{
public:
	unsigned long                                      bBombPlanted : 1;                                 		// 0x0234 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bHRVIsEnabled : 1;                                		// 0x0234 (0x0004) [0x0000000000000000] [0x00000002] 
	class AFoxGameObject_BombTarget*                   PlantTarget;                                      		// 0x0238 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FName                                       PlacementSocket;                                  		// 0x023C (0x0008) [0x0000000000000000]              
	class UFoxFirstPersonSkeletalMeshComponent*        FPBombMesh;                                       		// 0x0244 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      TPBombMesh;                                       		// 0x0248 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        CarriedBombMesh;                                  		// 0x024C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAnimNodeSequence*                           PlantedAnim;                                      		// 0x0250 (0x0004) [0x0000000000000000]              
	struct FName                                       PlantedAnimName;                                  		// 0x0254 (0x0008) [0x0000000000000000]              
	class UAkEvent*                                    PickupAudioEvent;                                 		// 0x025C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UMaterialInstanceConstant*                   BombMaterial;                                     		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   BombMIC;                                          		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   HRVBombMaterial;                                  		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   HRVBombMIC;                                       		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ObjectMeshScale;                                  		// 0x0270 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      CurrentBombStatus;                                		// 0x027C (0x0001) [0x0000000000000020]              ( CPF_Net )
	struct FName                                       BombIconColorName;                                		// 0x0280 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       BombHasBaseName;                                  		// 0x0288 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       BombHasArrowName;                                 		// 0x0290 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53122 ];

		return pClassPointer;
	};

	void ToggleHRVEffects ( unsigned long bHRVEnabled );
	void SetBombState ( unsigned char NewState );
	void BombScaleUpdated ( );
	void SetBombScale ( );
	void SetBombColor ( );
	void NotifyBombColorSet ( );
	struct FLinearColor GetCarrierColor ( );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void Drop ( );
	void Pickup ( class AFoxPawn* PickedUpPawn );
	void ReturnToBase ( class AFoxPRI* ReturningPRI );
	void CheckForTouchAfterSpawn ( );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AFoxGameObject_Bomb::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardWriteDET
// 0x0000 (0x00A4 - 0x00A4)
class UFoxLeaderboardWriteDET : public UFoxLeaderboardWriteGameTypeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53154 ];

		return pClassPointer;
	};

	void CopyAllStats ( class AFoxPRI* PRI );
};

UClass* UFoxLeaderboardWriteDET::pClassPointer = NULL;

// Class FoxGame.FoxGameSettingsDet
// 0x0000 (0x0108 - 0x0108)
class UFoxGameSettingsDet : public UFoxGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53155 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSettingsDet::pClassPointer = NULL;

// Class FoxGame.FoxGameObject_EOSPoint
// 0x0004 (0x02EC - 0x02E8)
class AFoxGameObject_EOSPoint : public AFoxGameObject_ControlPoint
{
public:
	float                                              NuetralUncaptureRateModifier;                     		// 0x02E8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53196 ];

		return pClassPointer;
	};

	void CheckFlagCapture ( );
	class AFoxTeamInfo* GetOwningTeam ( );
};

UClass* AFoxGameObject_EOSPoint::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteGameTypeEOTS
// 0x0000 (0x00B4 - 0x00B4)
class UFoxOnlineStatsWriteGameTypeEOTS : public UFoxOnlineStatsWriteGameTypeCP
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53206 ];

		return pClassPointer;
	};

};

UClass* UFoxOnlineStatsWriteGameTypeEOTS::pClassPointer = NULL;

// Class FoxGame.FoxHudEOTS
// 0x0000 (0x07E0 - 0x07E0)
class AFoxHudEOTS : public AFoxHudCP
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53207 ];

		return pClassPointer;
	};

	void GetCapturedNodes ( int* TotalNodes, int* OurCappedNodes, int* TheirCappedNodes );
	void NotifyTeamScore ( unsigned char EventType, int TeamIndex );
	struct FString GetEventName ( unsigned char EventType, unsigned long bFriendly );
};

UClass* AFoxHudEOTS::pClassPointer = NULL;

// Class FoxGame.FoxGRI_EOTS
// 0x0000 (0x03D4 - 0x03D4)
class AFoxGRI_EOTS : public AFoxGRI_CP
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53208 ];

		return pClassPointer;
	};

	int GetScoreForEvent ( unsigned char EventType );
};

UClass* AFoxGRI_EOTS::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteGameTypeKC
// 0x0000 (0x00B0 - 0x00B0)
class UFoxOnlineStatsWriteGameTypeKC : public UFoxOnlineStatsWriteGameTypeTeamBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53228 ];

		return pClassPointer;
	};

};

UClass* UFoxOnlineStatsWriteGameTypeKC::pClassPointer = NULL;

// Class FoxGame.FoxHudKC
// 0x003C (0x07A4 - 0x0768)
class AFoxHudKC : public AFoxHUDTDM
{
public:
	struct FString                                     LocStringGrabYourKillTag;                         		// 0x0768 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringOtherGrabYourKillTag;                    		// 0x0774 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringGrabOtherKillTag;                        		// 0x0780 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringDenyTag;                                 		// 0x078C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringTeamDenyTag;                             		// 0x0798 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53229 ];

		return pClassPointer;
	};

	struct FString GetEventName ( unsigned char EventType, unsigned long bFriendly );
};

UClass* AFoxHudKC::pClassPointer = NULL;

// Class FoxGame.FoxGRI_LMS
// 0x0010 (0x03DC - 0x03CC)
class AFoxGRI_LMS : public AFoxGRI_DM
{
public:
	struct FString                                     WinnersName;                                      		// 0x03CC (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	int                                                RemainingPlayers;                                 		// 0x03D8 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53247 ];

		return pClassPointer;
	};

};

UClass* AFoxGRI_LMS::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardWriteLMS
// 0x0000 (0x00A4 - 0x00A4)
class UFoxLeaderboardWriteLMS : public UFoxLeaderboardWriteGameTypeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53272 ];

		return pClassPointer;
	};

	void CopyAllStats ( class AFoxPRI* PRI );
};

UClass* UFoxLeaderboardWriteLMS::pClassPointer = NULL;

// Class FoxGame.FoxGameSettingsLMS
// 0x0000 (0x0108 - 0x0108)
class UFoxGameSettingsLMS : public UFoxGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53273 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSettingsLMS::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardWriteLTS
// 0x0000 (0x00A4 - 0x00A4)
class UFoxLeaderboardWriteLTS : public UFoxLeaderboardWriteGameTypeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53300 ];

		return pClassPointer;
	};

	void CopyAllStats ( class AFoxPRI* PRI );
};

UClass* UFoxLeaderboardWriteLTS::pClassPointer = NULL;

// Class FoxGame.FoxGameSettingsLTS
// 0x0000 (0x0108 - 0x0108)
class UFoxGameSettingsLTS : public UFoxGameSettingsCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53301 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSettingsLTS::pClassPointer = NULL;

// Class FoxGame.FoxSiegeTeamInfo
// 0x0008 (0x02D8 - 0x02D0)
class AFoxSiegeTeamInfo : public AFoxTeamInfo
{
public:
	unsigned long                                      bIsAttackingTeam : 1;                             		// 0x02D0 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	int                                                AttackingTeamWinTime;                             		// 0x02D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53309 ];

		return pClassPointer;
	};

};

UClass* AFoxSiegeTeamInfo::pClassPointer = NULL;

// Class FoxGame.FoxPayloadStopVolume
// 0x0008 (0x023C - 0x0234)
class AFoxPayloadStopVolume : public APhysicsVolume
{
public:
	unsigned long                                      PayloadCanPass : 1;                               		// 0x0234 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	class AFoxGameMP_PL*                               GameMode;                                         		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53313 ];

		return pClassPointer;
	};

	void eventPawnLeavingVolume ( class APawn* Other );
	void eventPawnEnteredVolume ( class APawn* Other );
	void UpdatePayload ( );
	void eventAllowPayloadToPass ( );
	void eventPostBeginPlay ( );
	void ReplicatedEvent ( struct FName VarName );
};

UClass* AFoxPayloadStopVolume::pClassPointer = NULL;

// Class FoxGame.FoxSeqEvent_PayloadStart
// 0x0000 (0x0108 - 0x0108)
class UFoxSeqEvent_PayloadStart : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53357 ];

		return pClassPointer;
	};

};

UClass* UFoxSeqEvent_PayloadStart::pClassPointer = NULL;

// Class FoxGame.FoxSeqEvent_PayloadStop
// 0x0000 (0x0108 - 0x0108)
class UFoxSeqEvent_PayloadStop : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53358 ];

		return pClassPointer;
	};

};

UClass* UFoxSeqEvent_PayloadStop::pClassPointer = NULL;

// Class FoxGame.FoxHUDPL
// 0x0078 (0x07E0 - 0x0768)
class AFoxHUDPL : public AFoxHUDTDM
{
public:
	struct FString                                     LocStringKillPayloadPilot;                        		// 0x0768 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringBecomePayloadPilot;                      		// 0x0774 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringDisablePayload;                          		// 0x0780 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringRepairPayload;                           		// 0x078C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringDoorHacked;                              		// 0x0798 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringFixPayload;                              		// 0x07A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringNewDoorToHack;                           		// 0x07B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringClearCheckPoint;                         		// 0x07BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringDefendTank;                              		// 0x07C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocStringAttackTank;                              		// 0x07D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53424 ];

		return pClassPointer;
	};

	void GetCapturedNodes ( int* TotalNodes, int* OurCappedNodes, int* TheirCappedNodes );
	void ShowRoundEndUI ( unsigned char inWinningTeamIndex, int inTeam1Score, int inTeam2Score );
	void RemoveObjective ( class AFoxObjectiveMarker_Base* Marker );
	void PostPanelDialog ( );
	void eventAnnounceObjective ( class AFoxObjectiveMarker_Base* Marker );
	void ShowObjective ( class AFoxObjectiveMarker_Base* Marker );
	void AddObjective ( class AFoxObjectiveMarker_Base* Marker );
	struct FString GetEventName ( unsigned char EventType, unsigned long bFriendly );
	void PostBeginPlay ( );
};

UClass* AFoxHUDPL::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardWritePL
// 0x0000 (0x00A4 - 0x00A4)
class UFoxLeaderboardWritePL : public UFoxLeaderboardWriteGameTypeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53425 ];

		return pClassPointer;
	};

};

UClass* UFoxLeaderboardWritePL::pClassPointer = NULL;

// Class FoxGame.FoxSeqEvent_UseSuccess
// 0x0000 (0x0108 - 0x0108)
class UFoxSeqEvent_UseSuccess : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53625 ];

		return pClassPointer;
	};

};

UClass* UFoxSeqEvent_UseSuccess::pClassPointer = NULL;

// Class FoxGame.FoxSeqEvent_UseFailed
// 0x0000 (0x0108 - 0x0108)
class UFoxSeqEvent_UseFailed : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53628 ];

		return pClassPointer;
	};

};

UClass* UFoxSeqEvent_UseFailed::pClassPointer = NULL;

// Class FoxGame.FoxMiniGame_Align
// 0x0040 (0x022C - 0x01EC)
class AFoxMiniGame_Align : public AFoxMiniGame_Base
{
public:
	TArray< float >                                    SliderPlacements;                                 		// 0x01EC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                TotalSliders;                                     		// 0x01F8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SliderMinMax;                                     		// 0x01FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      GameCompleted : 1;                                		// 0x0200 (0x0004) [0x0000000000000000] [0x00000001] 
	class UAkEvent*                                    VerticalMoveAudioEvent;                           		// 0x0204 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkEvent*                                    HorizontalMoveAudioEvent;                         		// 0x0208 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkEvent*                                    BadMoveAudioEvent;                                		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentSelectedSlider;                            		// 0x0210 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     AlignAnnouncement;                                		// 0x0214 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SuccesssAnnouncement;                             		// 0x0220 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53712 ];

		return pClassPointer;
	};

};

UClass* AFoxMiniGame_Align::pClassPointer = NULL;

// Class FoxGame.FoxScoringInfoTDM
// 0x0008 (0x00F4 - 0x00EC)
class UFoxScoringInfoTDM : public UFoxScoringInfo
{
public:
	int                                                ExpTeamWin;                                       		// 0x00EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpTeamLose;                                      		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53801 ];

		return pClassPointer;
	};

};

UClass* UFoxScoringInfoTDM::pClassPointer = NULL;

// Class FoxGame.FoxScoringInfoCP
// 0x0024 (0x0118 - 0x00F4)
class UFoxScoringInfoCP : public UFoxScoringInfoTDM
{
public:
	int                                                ExpPointCapture;                                  		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TeamScoreInterval;                                		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpTeamScoreInterval;                             		// 0x00FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                HoldInterval;                                     		// 0x0100 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpHoldScoreInterval;                             		// 0x0104 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpPointCaptureAssist;                            		// 0x0108 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpPointHack;                                     		// 0x010C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpPointDefend;                                   		// 0x0110 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpPointAttack;                                   		// 0x0114 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53800 ];

		return pClassPointer;
	};

};

UClass* UFoxScoringInfoCP::pClassPointer = NULL;

// Class FoxGame.FoxSeqEvent_Captured
// 0x0000 (0x0108 - 0x0108)
class UFoxSeqEvent_Captured : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53813 ];

		return pClassPointer;
	};

};

UClass* UFoxSeqEvent_Captured::pClassPointer = NULL;

// Class FoxGame.FoxSeqEvent_UnCaptured
// 0x0000 (0x0108 - 0x0108)
class UFoxSeqEvent_UnCaptured : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53836 ];

		return pClassPointer;
	};

};

UClass* UFoxSeqEvent_UnCaptured::pClassPointer = NULL;

// Class FoxGame.FoxMiniGame_Simon
// 0x0000 (0x01EC - 0x01EC)
class AFoxMiniGame_Simon : public AFoxMiniGame_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53952 ];

		return pClassPointer;
	};

};

UClass* AFoxMiniGame_Simon::pClassPointer = NULL;

// Class FoxGame.FoxGameObject_HealthPack
// 0x0008 (0x01EC - 0x01E4)
class AFoxGameObject_HealthPack : public AFoxGameObject
{
public:
	int                                                AmountToHeal;                                     		// 0x01E4 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    PickedupAudioEvent;                               		// 0x01E8 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54042 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool CanInteractWith ( class AFoxPawn* InteractingPawn );
	void eventPostBeginPlay ( );
};

UClass* AFoxGameObject_HealthPack::pClassPointer = NULL;

// Class FoxGame.FoxGameObject_HealthSpawnPoint
// 0x0010 (0x0220 - 0x0210)
class AFoxGameObject_HealthSpawnPoint : public AFoxGameObject_SpawnPoint
{
public:
	int                                                PlayersRequiredToSpawn;                           		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                HealthRefillAmount;                               		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TotalRespawnsAllowed;                             		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RespawnCounter;                                   		// 0x021C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54077 ];

		return pClassPointer;
	};

	void ObjectDestroyed ( class AFoxGameObject* DestroyedObject );
	void SpawnObject ( );
	void eventPostBeginPlay ( );
};

UClass* AFoxGameObject_HealthSpawnPoint::pClassPointer = NULL;

// Class FoxGame.FoxScoringInfoTKOTH
// 0x0020 (0x0114 - 0x00F4)
class UFoxScoringInfoTKOTH : public UFoxScoringInfoTDM
{
public:
	int                                                ExpPointCapture;                                  		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TeamScoreInterval;                                		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpTeamScoreInterval;                             		// 0x00FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                HoldInterval;                                     		// 0x0100 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpHoldScoreInterval;                             		// 0x0104 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpPointCaptureAssist;                            		// 0x0108 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpPointDefend;                                   		// 0x010C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpPointAttack;                                   		// 0x0110 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54201 ];

		return pClassPointer;
	};

};

UClass* UFoxScoringInfoTKOTH::pClassPointer = NULL;

// Class FoxGame.FoxMiniGame_WeaponDepot
// 0x0000 (0x01EC - 0x01EC)
class AFoxMiniGame_WeaponDepot : public AFoxMiniGame_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54348 ];

		return pClassPointer;
	};

};

UClass* AFoxMiniGame_WeaponDepot::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchBO
// 0x0000 (0x00F4 - 0x00F4)
class UFoxGameSearchBO : public UFoxGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54518 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSearchBO::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchDet
// 0x0000 (0x00F4 - 0x00F4)
class UFoxGameSearchDet : public UFoxGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54524 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSearchDet::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchKC
// 0x0000 (0x00F4 - 0x00F4)
class UFoxGameSearchKC : public UFoxGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54528 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSearchKC::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchLMS
// 0x0000 (0x00F4 - 0x00F4)
class UFoxGameSearchLMS : public UFoxGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54530 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSearchLMS::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchLTS
// 0x0000 (0x00F4 - 0x00F4)
class UFoxGameSearchLTS : public UFoxGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54532 ];

		return pClassPointer;
	};

};

UClass* UFoxGameSearchLTS::pClassPointer = NULL;

// Class FoxGame.FoxGameSearchPartyRanked
// 0x0000 (0x004C - 0x004C)
class UFoxGameSearchPartyRanked : public UFoxGameSearchRanked
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54542 ];

		return pClassPointer;
	};

	void ClearDelegates ( );
	void OnPartyGameReady ( class UOnlineGameSearch** SearchResult );
	void LaunchSearchMessageBox ( );
	bool BeginSearchNow ( );
	class UOnlineGameSearch* Initialize ( int GameSearchIndex );
};

UClass* UFoxGameSearchPartyRanked::pClassPointer = NULL;

// Class FoxGame.FoxGameTypeDynamicSMActor
// 0x0014 (0x0218 - 0x0204)
class AFoxGameTypeDynamicSMActor : public ADynamicSMActor
{
public:
	TArray< class UClass* >                            ValidGameTypes;                                   		// 0x0204 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bShowInHRV : 1;                                   		// 0x0210 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bValidForAllGameTypes : 1;                        		// 0x0210 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	class UMaterial*                                   HRVMaterial;                                      		// 0x0214 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54839 ];

		return pClassPointer;
	};

	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void ToggleHRVEffects ( unsigned long bEnabled );
	void DeleteActor ( );
	void eventPostBeginPlay ( );
};

UClass* AFoxGameTypeDynamicSMActor::pClassPointer = NULL;

// Class FoxGame.FoxGearHudWidget
// 0x0004 (0x007C - 0x0078)
class UFoxGearHudWidget : public UGFxObject
{
public:
	class AFoxPC*                                      PCOwner;                                          		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54875 ];

		return pClassPointer;
	};

	void as_DestroyGear ( int GearIndex );
	void as_SetGearSelected ( int NewSelectedGearIndex );
	void as_UpdateGearItem ( int GearIndex, struct FHudGearInfo NewGearInfo );
	void NotifyMineDestroyed ( class AFoxProjectile_MineBase* Mine );
	void OnNewWeaponSelected ( class AFoxWeapon* NewWeapon );
	void UpdateGear ( );
};

UClass* UFoxGearHudWidget::pClassPointer = NULL;

// Class FoxGame.FoxScoringInfoDM
// 0x000C (0x00F8 - 0x00EC)
class UFoxScoringInfoDM : public UFoxScoringInfo
{
public:
	int                                                ExpFirstPlace;                                    		// 0x00EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpSecondPlace;                                   		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpThirdPlace;                                    		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55632 ];

		return pClassPointer;
	};

};

UClass* UFoxScoringInfoDM::pClassPointer = NULL;

// Class FoxGame.FoxScoringInfoCTDM
// 0x0000 (0x00F4 - 0x00F4)
class UFoxScoringInfoCTDM : public UFoxScoringInfoTDM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55722 ];

		return pClassPointer;
	};

};

UClass* UFoxScoringInfoCTDM::pClassPointer = NULL;

// Class FoxGame.FoxScoringInfoCTF
// 0x0014 (0x0108 - 0x00F4)
class UFoxScoringInfoCTF : public UFoxScoringInfoTDM
{
public:
	int                                                ExpCanisterGrab;                                  		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpCanisterCapture;                               		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpCanisterCarrierKill;                           		// 0x00FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpCanisterReturn;                                		// 0x0100 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpTeamCanisterCapture;                           		// 0x0104 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55728 ];

		return pClassPointer;
	};

};

UClass* UFoxScoringInfoCTF::pClassPointer = NULL;

// Class FoxGame.FoxScoringInfoEOTS
// 0x0010 (0x0128 - 0x0118)
class UFoxScoringInfoEOTS : public UFoxScoringInfoCP
{
public:
	int                                                ExpCanisterGrab;                                  		// 0x0118 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpCanisterCapture;                               		// 0x011C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpCanisterCarrierKill;                           		// 0x0120 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExpTeamCanisterCapture;                           		// 0x0124 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55749 ];

		return pClassPointer;
	};

};

UClass* UFoxScoringInfoEOTS::pClassPointer = NULL;

// Class FoxGame.FoxScoringInfoKC
// 0x0014 (0x0108 - 0x00F4)
class UFoxScoringInfoKC : public UFoxScoringInfoTDM
{
public:
	int                                                ExpCollectYourKillTag;                            		// 0x00F4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                ExpCollectOtherKillTag;                           		// 0x00F8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                ExpTeamCollectedTag;                              		// 0x00FC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                ExpDenyTag;                                       		// 0x0100 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                ExpTeamDeny;                                      		// 0x0104 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55761 ];

		return pClassPointer;
	};

};

UClass* UFoxScoringInfoKC::pClassPointer = NULL;

// Class FoxGame.FoxScoringInfoPL
// 0x002C (0x0120 - 0x00F4)
class UFoxScoringInfoPL : public UFoxScoringInfoTDM
{
public:
	float                                              ExpKillPayloadPilot;                              		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ExpEnterPayload;                                  		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ExpHackDoor;                                      		// 0x00FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ExpDisablePayload;                                		// 0x0100 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ExpDisablePayloadTeam;                            		// 0x0104 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ExpRepairPayload;                                 		// 0x0108 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ExpFixPayload;                                    		// 0x010C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ExpFixPayloadTeam;                                		// 0x0110 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ExpClearCheckPoint;                               		// 0x0114 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ExpAttackTank;                                    		// 0x0118 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              ExpDefendTank;                                    		// 0x011C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55776 ];

		return pClassPointer;
	};

};

UClass* UFoxScoringInfoPL::pClassPointer = NULL;

// Class FoxGame.FoxSkeletalMesh3rdPersonHeroWeapon
// 0x0000 (0x0720 - 0x0720)
class UFoxSkeletalMesh3rdPersonHeroWeapon : public UFoxSkeletalMesh3rdPersonWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55869 ];

		return pClassPointer;
	};

};

UClass* UFoxSkeletalMesh3rdPersonHeroWeapon::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_ProximityMineBase
// 0x0003 (0x036C - 0x0369)
class AFoxProjectile_ProximityMineBase : public AFoxProjectile_MineBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55952 ];

		return pClassPointer;
	};

	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
};

UClass* AFoxProjectile_ProximityMineBase::pClassPointer = NULL;

// Class FoxGame.FoxRadialMenuQuickGrenade
// 0x000C (0x00B0 - 0x00A4)
class UFoxRadialMenuQuickGrenade : public UFoxRadialMenuBase
{
public:
	TArray< int >                                      GearIndexMappings;                                		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56160 ];

		return pClassPointer;
	};

	void OnSelectItem ( int NewItemIndex );
	void Initialize ( );
};

UClass* UFoxRadialMenuQuickGrenade::pClassPointer = NULL;

// Class FoxGame.FoxHudUI_DM
// 0x0000 (0x0C50 - 0x0C50)
class UFoxHudUI_DM : public UFoxHudUI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56340 ];

		return pClassPointer;
	};

	void SetupGameTypeWidget ( );
};

UClass* UFoxHudUI_DM::pClassPointer = NULL;

// Class FoxGame.FoxHudUI_BO
// 0x0004 (0x0C54 - 0x0C50)
class UFoxHudUI_BO : public UFoxHudUI
{
public:
	class AFoxObjectiveMarker*                         PendingObjective;                                 		// 0x0C50 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56349 ];

		return pClassPointer;
	};

	void ei_UpdateDetailDone ( );
	void SetupGameTypeWidget ( );
	void ShowGameModeDetail ( );
	void AddGameplayDetailFromObjective ( class AFoxObjectiveMarker* Objective );
};

UClass* UFoxHudUI_BO::pClassPointer = NULL;

// Class FoxGame.FoxHudEffect_Damage
// 0x0024 (0x0208 - 0x01E4)
class AFoxHudEffect_Damage : public AZEHudEffect
{
public:
	struct FName                                       OpacityParameterName;                             		// 0x01E4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       SeparationParameterName;                          		// 0x01EC (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              FadeInTime;                                       		// 0x01F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              StayTime;                                         		// 0x01F8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FadeOutTime;                                      		// 0x01FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              StartFade;                                        		// 0x0200 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EndFade;                                          		// 0x0204 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56480 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};

UClass* AFoxHudEffect_Damage::pClassPointer = NULL;

// Class FoxGame.FoxHudEffect_Spawn
// 0x0010 (0x01F4 - 0x01E4)
class AFoxHudEffect_Spawn : public AZEHudEffect
{
public:
	struct FName                                       InterpEffectParamName;                            		// 0x01E4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    SpawnEvent;                                       		// 0x01EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bPlayed : 1;                                      		// 0x01F0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56504 ];

		return pClassPointer;
	};

	void UpdateEffect ( );
};

UClass* AFoxHudEffect_Spawn::pClassPointer = NULL;

// Class FoxGame.FoxHudUI_KC
// 0x0000 (0x0C50 - 0x0C50)
class UFoxHudUI_KC : public UFoxHudUI_TDM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56533 ];

		return pClassPointer;
	};

};

UClass* UFoxHudUI_KC::pClassPointer = NULL;

// Class FoxGame.FoxIniLocPatcher
// 0x0000 (0x005C - 0x005C)
class UFoxIniLocPatcher : public UIniLocPatcher
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58239 ];

		return pClassPointer;
	};

	void OnReadFileComplete ( unsigned long bWasSuccessful, struct FString FileName );
	void Init ( );
};

UClass* UFoxIniLocPatcher::pClassPointer = NULL;

// Class FoxGame.FoxInventorymanagerHardSuit
// 0x0000 (0x0200 - 0x0200)
class AFoxInventorymanagerHardSuit : public AFoxInventoryManager
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58467 ];

		return pClassPointer;
	};

	void ChangedWeapon ( class AWeapon* DesiredWeapon );
	void InternalSetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void ClientWeaponSet ( class AWeapon* NewWeapon, unsigned long bOptionalSet, unsigned long bDoNotActivate );
};

UClass* AFoxInventorymanagerHardSuit::pClassPointer = NULL;

// Class FoxGame.FoxJointConstraintSpawnable
// 0x0000 (0x01E4 - 0x01E4)
class AFoxJointConstraintSpawnable : public ARB_ConstraintActorSpawnable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59157 ];

		return pClassPointer;
	};

};

UClass* AFoxJointConstraintSpawnable::pClassPointer = NULL;

// Class FoxGame.FoxPotentialClimbWatcher
// 0x0000 (0x01C8 - 0x01C8)
class AFoxPotentialClimbWatcher : public APotentialClimbWatcher
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59260 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
};

UClass* AFoxPotentialClimbWatcher::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardReadBase
// 0x0000 (0x0088 - 0x0088)
class UFoxLeaderboardReadBase : public UOnlineStatsRead
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59265 ];

		return pClassPointer;
	};

};

UClass* UFoxLeaderboardReadBase::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardReadBO
// 0x0000 (0x0088 - 0x0088)
class UFoxLeaderboardReadBO : public UFoxLeaderboardReadBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59377 ];

		return pClassPointer;
	};

};

UClass* UFoxLeaderboardReadBO::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardReadCP
// 0x0000 (0x0088 - 0x0088)
class UFoxLeaderboardReadCP : public UFoxLeaderboardReadBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59379 ];

		return pClassPointer;
	};

};

UClass* UFoxLeaderboardReadCP::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardReadCTF
// 0x0000 (0x0088 - 0x0088)
class UFoxLeaderboardReadCTF : public UFoxLeaderboardReadBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59381 ];

		return pClassPointer;
	};

};

UClass* UFoxLeaderboardReadCTF::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardReadDET
// 0x0000 (0x0088 - 0x0088)
class UFoxLeaderboardReadDET : public UFoxLeaderboardReadBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59383 ];

		return pClassPointer;
	};

};

UClass* UFoxLeaderboardReadDET::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardReadDM
// 0x0000 (0x0088 - 0x0088)
class UFoxLeaderboardReadDM : public UFoxLeaderboardReadBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59385 ];

		return pClassPointer;
	};

};

UClass* UFoxLeaderboardReadDM::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardReadGlobal
// 0x0000 (0x0088 - 0x0088)
class UFoxLeaderboardReadGlobal : public UFoxLeaderboardReadBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59387 ];

		return pClassPointer;
	};

};

UClass* UFoxLeaderboardReadGlobal::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardReadGlobalPS3
// 0x0000 (0x0088 - 0x0088)
class UFoxLeaderboardReadGlobalPS3 : public UFoxLeaderboardReadBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59389 ];

		return pClassPointer;
	};

};

UClass* UFoxLeaderboardReadGlobalPS3::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardReadLMS
// 0x0000 (0x0088 - 0x0088)
class UFoxLeaderboardReadLMS : public UFoxLeaderboardReadBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59391 ];

		return pClassPointer;
	};

};

UClass* UFoxLeaderboardReadLMS::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardReadLTS
// 0x0000 (0x0088 - 0x0088)
class UFoxLeaderboardReadLTS : public UFoxLeaderboardReadBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59393 ];

		return pClassPointer;
	};

};

UClass* UFoxLeaderboardReadLTS::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardReadPL
// 0x0000 (0x0088 - 0x0088)
class UFoxLeaderboardReadPL : public UFoxLeaderboardReadBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59395 ];

		return pClassPointer;
	};

};

UClass* UFoxLeaderboardReadPL::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardReadRanked
// 0x0000 (0x0088 - 0x0088)
class UFoxLeaderboardReadRanked : public UFoxLeaderboardReadBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59397 ];

		return pClassPointer;
	};

};

UClass* UFoxLeaderboardReadRanked::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardReadTDM
// 0x0000 (0x0088 - 0x0088)
class UFoxLeaderboardReadTDM : public UFoxLeaderboardReadBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59399 ];

		return pClassPointer;
	};

};

UClass* UFoxLeaderboardReadTDM::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardReadWeapons
// 0x0000 (0x0088 - 0x0088)
class UFoxLeaderboardReadWeapons : public UFoxLeaderboardReadBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59401 ];

		return pClassPointer;
	};

};

UClass* UFoxLeaderboardReadWeapons::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardWriteWeapons
// 0x0000 (0x009C - 0x009C)
class UFoxLeaderboardWriteWeapons : public UFoxLeaderboardWriteBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59536 ];

		return pClassPointer;
	};

	void CopyAllStats ( class AFoxPRI* PRI );
};

UClass* UFoxLeaderboardWriteWeapons::pClassPointer = NULL;

// Class FoxGame.FoxLeaderboardWriteBO
// 0x0000 (0x00A4 - 0x00A4)
class UFoxLeaderboardWriteBO : public UFoxLeaderboardWriteGameTypeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59541 ];

		return pClassPointer;
	};

	void CopyAllStats ( class AFoxPRI* PRI );
};

UClass* UFoxLeaderboardWriteBO::pClassPointer = NULL;

// Class FoxGame.FoxLoginUINoticePopupWidget
// 0x0000 (0x00B8 - 0x00B8)
class UFoxLoginUINoticePopupWidget : public UFoxUINoticePopupWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61411 ];

		return pClassPointer;
	};

};

UClass* UFoxLoginUINoticePopupWidget::pClassPointer = NULL;

// Class FoxGame.FoxMenuStoreBackgroundUI
// 0x0000 (0x0194 - 0x0194)
class UFoxMenuStoreBackgroundUI : public UZeMovieBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61651 ];

		return pClassPointer;
	};

	void ei_fadeOutFakeBGDone ( );
	void as_FadeOutFakeBG ( );
	void as_FadeInFakeBG ( );
	void Initialize ( );
};

UClass* UFoxMenuStoreBackgroundUI::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_Tracer
// 0x001C (0x0250 - 0x0234)
class AFoxProjectile_Tracer : public AFoxProjectile
{
public:
	float                                              AccelRate;                                        		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ParticleSystemTemplate;                           		// 0x0238 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystemComponent*                    TracerParticleSystem;                             		// 0x023C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     DestinationLoc;                                   		// 0x0240 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAllowTracersMovingFromTarget : 1;                		// 0x024C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62433 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
	void SpawnImpactEffect ( struct FVector HitLocation, struct FVector HitNormal );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void CalcTracerAccel ( );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void WakeProjectile ( );
	void eventOutsideWorldBounds ( );
	void Reset ( );
	void Recycle ( );
	void InitTracer ( struct FVector Start, struct FVector End );
	void Init ( struct FVector Direction );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AFoxProjectile_Tracer::pClassPointer = NULL;

// Class FoxGame.FoxTeamBeacon
// 0x0000 (0x01D0 - 0x01D0)
class AFoxTeamBeacon : public AFoxBeacon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62448 ];

		return pClassPointer;
	};

};

UClass* AFoxTeamBeacon::pClassPointer = NULL;

// Class FoxGame.FoxOnlineStatsWriteTaunts
// 0x0000 (0x00A4 - 0x00A4)
class UFoxOnlineStatsWriteTaunts : public UZeOnlineStatsWrite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62767 ];

		return pClassPointer;
	};

	void SetTaunt ( int TauntUnlockID, float completedTime );
};

UClass* UFoxOnlineStatsWriteTaunts::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_VehicleSpawnLand
// 0x0000 (0x00AC - 0x00AC)
class UFoxSpecialMove_VehicleSpawnLand : public UFoxSpecialMove_Land
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63137 ];

		return pClassPointer;
	};

	void StartSpecialMove ( );
};

UClass* UFoxSpecialMove_VehicleSpawnLand::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_VehicleActivate
// 0x0000 (0x00AC - 0x00AC)
class UFoxSpecialMove_VehicleActivate : public UFoxSpecialMove_AnimationBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63575 ];

		return pClassPointer;
	};

	bool GetAnimsToPlay ( struct FWeaponAnimSet* OutAnims );
};

UClass* UFoxSpecialMove_VehicleActivate::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_TauntHardSuit
// 0x0000 (0x00D4 - 0x00D4)
class UFoxSpecialMove_TauntHardSuit : public UFoxSpecialMove_TauntBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63576 ];

		return pClassPointer;
	};

};

UClass* UFoxSpecialMove_TauntHardSuit::pClassPointer = NULL;

// Class FoxGame.FoxPayloadScoreVolume
// 0x0000 (0x0234 - 0x0234)
class AFoxPayloadScoreVolume : public APhysicsVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63712 ];

		return pClassPointer;
	};

	void eventPawnEnteredVolume ( class APawn* Other );
};

UClass* AFoxPayloadScoreVolume::pClassPointer = NULL;

// Class FoxGame.FoxPMPInfo_ImpactFX
// 0x0088 (0x00C4 - 0x003C)
class UFoxPMPInfo_ImpactFX : public UFoxPMPInfoBase
{
public:
	class UParticleSystem*                             StandardRoundImpactFX;                            		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    StandardRoundImpactSound;                         		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             IncendiaryRoundImpactFX;                          		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    IncendiaryRoundImpactSound;                       		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ToxicRoundImpactFX;                               		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    ToxicRoundImpactSound;                            		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ElectroRoundImpactFX;                             		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    ElectroRoundImpactSound;                          		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ExplosiveRoundImpactFX;                           		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    ExplosiveRoundImpactSound;                        		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             MagnumRoundImpactFX;                              		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    MagnumRoundImpactSound;                           		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             HighVelocityRoundImpactFX;                        		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    HighVelocityRoundImpactSound;                     		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             MinigunImpactFX;                                  		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    MinigunImpactSound;                               		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SlashingMeleeImpactFX;                            		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    SlashingMeleeImpactSound;                         		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             BluntMeleeImpactFX;                               		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    BluntMeleeImpactSound;                            		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             HammerMeleeImpactFX;                              		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    HammerMeleeImpactSound;                           		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             FlameImpactFX;                                    		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    FlameImpactSound;                                 		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             RepairImpactFX;                                   		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    RepairImpackSound;                                		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             HealImpactFX;                                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    HealImpackSound;                                  		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             PoisonImpactFX;                                   		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    PoisonImpackSound;                                		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             CrowBarImpactFX;                                  		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    CrowBarImpactSound;                               		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ProjectileImpactFX;                               		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    ProjectileImpactSound;                            		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63740 ];

		return pClassPointer;
	};

	class UAkEvent* GetImpactEffectSound ( unsigned char ImpactType );
	class UParticleSystem* GetImpactEffectPS ( unsigned char ImpactType );
};

UClass* UFoxPMPInfo_ImpactFX::pClassPointer = NULL;

// Class FoxGame.FoxSeqEvent_KeyPressed
// 0x000C (0x0114 - 0x0108)
class UFoxSeqEvent_KeyPressed : public USequenceEvent
{
public:
	struct FString                                     Command;                                          		// 0x0108 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63917 ];

		return pClassPointer;
	};

	bool HasCommand ( struct FString InCommand );
};

UClass* UFoxSeqEvent_KeyPressed::pClassPointer = NULL;

// Class FoxGame.FoxSettingsWidget
// 0x0004 (0x007C - 0x0078)
class UFoxSettingsWidget : public UGFxObject
{
public:
	unsigned long                                      bDropDownWidget : 1;                              		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64487 ];

		return pClassPointer;
	};

	void as_SetDisabled ( unsigned long bDisabled );
	void as_Hide ( );
	void as_UpdateListData ( TArray< struct FString > NewData );
	void SetEnabled ( unsigned long bEnabled );
	void as_SetValue ( int NewIndex );
};

UClass* UFoxSettingsWidget::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_AirStrikeBeaconBase
// 0x0018 (0x0320 - 0x0308)
class AFoxProjectile_AirStrikeBeaconBase : public AFoxProjectile_GrenadeBase
{
public:
	float                                              StrikeHeight;                                     		// 0x0308 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      ProjectileClass;                                  		// 0x030C (0x0004) [0x0000000000000000]              
	class ULensFlareComponent*                         LensFlareComp;                                    		// 0x0310 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULensFlare*                                  FriendlyLensFlare;                                		// 0x0314 (0x0004) [0x0000000000000000]              
	class ULensFlare*                                  EnemyLensFlare;                                   		// 0x0318 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    StrikeEvent;                                      		// 0x031C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65471 ];

		return pClassPointer;
	};

	void HandleStickTo ( struct FStickToDetails NewStickToInfo );
	void SetEmissives ( );
	void DoExplosion ( );
};

UClass* AFoxProjectile_AirStrikeBeaconBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_HardSuitTargeterBase
// 0x0008 (0x0CF4 - 0x0CEC)
class AFoxWeapon_HardSuitTargeterBase : public AFoxWeapon_TargeterBase
{
public:
	class UAkEvent*                                    SuccessfulCallEvent;                              		// 0x0CEC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DropHeight;                                       		// 0x0CF0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65641 ];

		return pClassPointer;
	};

	void SpawnHardSuit ( struct FVector Loc, struct FVector Rot );
	void CustomFire ( );
};

UClass* AFoxWeapon_HardSuitTargeterBase::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_BounceGrenadeBase
// 0x0004 (0x030C - 0x0308)
class AFoxProjectile_BounceGrenadeBase : public AFoxProjectile_GrenadeBase
{
public:
	float                                              BounceTimer;                                      		// 0x0308 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65666 ];

		return pClassPointer;
	};

	void Bounce ( struct FVector HitLocation, struct FVector HitNormal );
};

UClass* AFoxProjectile_BounceGrenadeBase::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_DartBase
// 0x0014 (0x031C - 0x0308)
class AFoxProjectile_DartBase : public AFoxProjectile_GrenadeBase
{
public:
	class UAkEvent*                                    StartLoopEvent;                                   		// 0x0308 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    StopLoopEvent;                                    		// 0x030C (0x0004) [0x0000000000000000]              
	class ULensFlareComponent*                         LensFlareComp;                                    		// 0x0310 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bExplodeOnStick : 1;                              		// 0x0314 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	float                                              KillMomentumScalar;                               		// 0x0318 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65700 ];

		return pClassPointer;
	};

	void HandleStickTo ( struct FStickToDetails NewStickToInfo );
	void eventDestroyed ( );
	void TurnOffFlare ( );
	void TurnOnFlare ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void eventPostBeginPlay ( );
};

UClass* AFoxProjectile_DartBase::pClassPointer = NULL;

// Class FoxGame.FoxProjectile_SyringeBase
// 0x0000 (0x0308 - 0x0308)
class AFoxProjectile_SyringeBase : public AFoxProjectile_GrenadeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65933 ];

		return pClassPointer;
	};

};

UClass* AFoxProjectile_SyringeBase::pClassPointer = NULL;

// Class FoxGame.FoxRegionRevertUI
// 0x0002 (0x0042 - 0x0040)
class UFoxRegionRevertUI : public UFoxUIBaseTask
{
public:
	unsigned char                                      InitialRegion;                                    		// 0x0040 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      DesiredRegion;                                    		// 0x0041 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66226 ];

		return pClassPointer;
	};

	void ApplyRegionChange ( unsigned char PlayerRegion );
	void StopTask ( unsigned long bResult );
	bool StartTask ( );
};

UClass* UFoxRegionRevertUI::pClassPointer = NULL;

// Class FoxGame.FoxScout
// 0x0000 (0x04EC - 0x04EC)
class AFoxScout : public AScout
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66397 ];

		return pClassPointer;
	};

};

UClass* AFoxScout::pClassPointer = NULL;

// Class FoxGame.FoxSeqAct_AddTime
// 0x0000 (0x00F0 - 0x00F0)
class UFoxSeqAct_AddTime : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66401 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UFoxSeqAct_AddTime::pClassPointer = NULL;

// Class FoxGame.FoxSeqAct_BeginObjective
// 0x0004 (0x00F4 - 0x00F0)
class UFoxSeqAct_BeginObjective : public USequenceAction
{
public:
	class AFoxObjectiveMarker_Base*                    ObjectiveMarker;                                  		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66405 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UFoxSeqAct_BeginObjective::pClassPointer = NULL;

// Class FoxGame.FoxSeqAct_ChangeObjectiveTeam
// 0x0008 (0x00F8 - 0x00F0)
class UFoxSeqAct_ChangeObjectiveTeam : public USequenceAction
{
public:
	class AFoxTeamObjectiveMarker*                     ObjectiveMarker;                                  		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NewTeamIndex;                                     		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66409 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UFoxSeqAct_ChangeObjectiveTeam::pClassPointer = NULL;

// Class FoxGame.FoxSeqAct_CompleteObjective
// 0x0004 (0x00F4 - 0x00F0)
class UFoxSeqAct_CompleteObjective : public USequenceAction
{
public:
	class AFoxObjectiveMarker_Base*                    ObjectiveMarker;                                  		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66414 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UFoxSeqAct_CompleteObjective::pClassPointer = NULL;

// Class FoxGame.FoxSeqAct_EndGame
// 0x0000 (0x00F0 - 0x00F0)
class UFoxSeqAct_EndGame : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66418 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UFoxSeqAct_EndGame::pClassPointer = NULL;

// Class FoxGame.FoxSeqAct_HUD_DisplayObjective
// 0x003C (0x0130 - 0x00F4)
class UFoxSeqAct_HUD_DisplayObjective : public UFoxSeqAct_HUD_Base
{
public:
	struct FString                                     TitleLabel;                                       		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DescriptionLabel;                                 		// 0x0100 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     UpdateLabel;                                      		// 0x010C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SectionName;                                      		// 0x0118 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     PackageName;                                      		// 0x0124 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66451 ];

		return pClassPointer;
	};

	void eventSpawnUIElement ( class UFoxUI* DynamicUI );
	void SpawnObjectiveUI ( class UFoxUI* DynamicUI, struct FString LocTitle, struct FString LocDescription, struct FString LocUpdate, struct FString LocSectionName, struct FString LocPackageName, float DispTime );
};

UClass* UFoxSeqAct_HUD_DisplayObjective::pClassPointer = NULL;

// Class FoxGame.FoxSeqAct_HUD_DisplayUpdate
// 0x0024 (0x0118 - 0x00F4)
class UFoxSeqAct_HUD_DisplayUpdate : public UFoxSeqAct_HUD_Base
{
public:
	struct FString                                     UpdateLabel;                                      		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SectionName;                                      		// 0x0100 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     PackageName;                                      		// 0x010C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66468 ];

		return pClassPointer;
	};

	void eventSpawnUIElement ( class UFoxUI* DynamicUI );
	void SpawnGameplayUpdateUI ( class UFoxUI* DynamicUI, struct FString LocUpdate, struct FString LocSectionName, struct FString LocPackageName, float DispTime );
};

UClass* UFoxSeqAct_HUD_DisplayUpdate::pClassPointer = NULL;

// Class FoxGame.FoxSeqAct_HUD_TextToScreen
// 0x0010 (0x0100 - 0x00F0)
class UFoxSeqAct_HUD_TextToScreen : public USequenceAction
{
public:
	float                                              DisplayTime;                                      		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Text;                                             		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66482 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UFoxSeqAct_HUD_TextToScreen::pClassPointer = NULL;

// Class FoxGame.FoxSeqAct_SetEnterCombatReady
// 0x0000 (0x00F0 - 0x00F0)
class UFoxSeqAct_SetEnterCombatReady : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66490 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UFoxSeqAct_SetEnterCombatReady::pClassPointer = NULL;

// Class FoxGame.FoxSeqAct_TriggerBOAAR
// 0x0004 (0x00F4 - 0x00F0)
class UFoxSeqAct_TriggerBOAAR : public USequenceAction
{
public:
	unsigned long                                      bMissionSuccessful : 1;                           		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66494 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UFoxSeqAct_TriggerBOAAR::pClassPointer = NULL;

// Class FoxGame.FoxSeqAct_TryMovePayload
// 0x0000 (0x00F0 - 0x00F0)
class UFoxSeqAct_TryMovePayload : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66498 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UFoxSeqAct_TryMovePayload::pClassPointer = NULL;

// Class FoxGame.FoxSeqAct_UpdateProgressBar
// 0x0004 (0x00F4 - 0x00F0)
class UFoxSeqAct_UpdateProgressBar : public USequenceAction
{
public:
	float                                              Progress;                                         		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66502 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UFoxSeqAct_UpdateProgressBar::pClassPointer = NULL;

// Class FoxGame.FoxSeqCond_GameDifficulty
// 0x0000 (0x00D8 - 0x00D8)
class UFoxSeqCond_GameDifficulty : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66507 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UFoxSeqCond_GameDifficulty::pClassPointer = NULL;

// Class FoxGame.FoxSeqCond_GetGameType
// 0x0000 (0x00D8 - 0x00D8)
class UFoxSeqCond_GetGameType : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66511 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};

UClass* UFoxSeqCond_GetGameType::pClassPointer = NULL;

// Class FoxGame.FoxSeqCond_IsDestructibleAlive
// 0x0004 (0x00DC - 0x00D8)
class UFoxSeqCond_IsDestructibleAlive : public USequenceCondition
{
public:
	class AFoxDestructible*                            DestructibleActor;                                		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66517 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UFoxSeqCond_IsDestructibleAlive::pClassPointer = NULL;

// Class FoxGame.FoxSeqCond_NumBOPlayers
// 0x0000 (0x00D8 - 0x00D8)
class UFoxSeqCond_NumBOPlayers : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66522 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UFoxSeqCond_NumBOPlayers::pClassPointer = NULL;

// Class FoxGame.FoxUIServerListModalDialogWidget
// 0x0000 (0x00B8 - 0x00B8)
class UFoxUIServerListModalDialogWidget : public UFoxUIModalDialogWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66660 ];

		return pClassPointer;
	};

};

UClass* UFoxUIServerListModalDialogWidget::pClassPointer = NULL;

// Class FoxGame.FoxSettingsUIAudioVideo
// 0x0000 (0x003C - 0x003C)
class UFoxSettingsUIAudioVideo : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67024 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UFoxSettingsUIAudioVideo::pClassPointer = NULL;

// Class FoxGame.FoxSettingsWidgetCrosshair
// 0x0000 (0x007C - 0x007C)
class UFoxSettingsWidgetCrosshair : public UFoxSettingsWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67042 ];

		return pClassPointer;
	};

	void as_UpdateCrosshairColor ( TArray< int > NewColors );
	void as_UpdateCrosshairAlpha ( int NewAlpha );
	void as_UpdateCrosshairRotation ( int NewRotation );
	void as_UpdateCrosshairLength ( int NewLength );
	void as_UpdateCrosshairTicks ( int NumTicks );
	void as_UpdateReticleAlpha ( int NewAlpha );
};

UClass* UFoxSettingsWidgetCrosshair::pClassPointer = NULL;

// Class FoxGame.FoxUIPlayerSearchModalDialogWidget
// 0x0000 (0x00B8 - 0x00B8)
class UFoxUIPlayerSearchModalDialogWidget : public UFoxUIModalDialogWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68010 ];

		return pClassPointer;
	};

};

UClass* UFoxUIPlayerSearchModalDialogWidget::pClassPointer = NULL;

// Class FoxGame.FoxSocialNotification
// 0x0001 (0x0079 - 0x0078)
class UFoxSocialNotification : public UGFxObject
{
public:
	unsigned char                                      NotificationType;                                 		// 0x0078 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68593 ];

		return pClassPointer;
	};

	void as_RemoveMovieClip ( );
	void as_TransFromLeft ( );
	void as_TransFromRight ( );
	void as_SetEmblemInfo ( struct FEmblemPanelEntry EmblemInfo );
	void GetMessageAndIconFromEventType ( unsigned char EventType, struct FString* DisplayMessage, struct FString* IconRef );
	struct FString GetSymbolNameForPlacementType ( unsigned char PlacementType );
	void Initialize ( unsigned char EventType, unsigned char Placement, struct FString InstigatorPlayerName, struct FEmblemPanelEntry EmblemInfo, struct FString AdditionalInfo );
};

UClass* UFoxSocialNotification::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_CoverRun
// 0x0002 (0x0080 - 0x007E)
class UFoxSpecialMove_CoverRun : public UFoxSpecialMove
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68753 ];

		return pClassPointer;
	};

	bool InternalCanDoSpecialMove ( );
};

UClass* UFoxSpecialMove_CoverRun::pClassPointer = NULL;

// Class FoxGame.FoxSpecialMove_RootMotionBase
// 0x0038 (0x00B6 - 0x007E)
class UFoxSpecialMove_RootMotionBase : public UFoxSpecialMove
{
public:
	TArray< struct FBodyStance >                       RootMotionAnims;                                  		// 0x0080 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FBodyStance >                       RootMotionSprintAnims;                            		// 0x008C (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	int                                                AnimationVariation;                               		// 0x0098 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUsePrecisePosition : 1;                          		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHasSprintAnim : 1;                               		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCanSprintFrom : 1;                               		// 0x009C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              BlendInSpeed;                                     		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutSpeed;                                    		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartOffset;                                      		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      JumpingPhysics;                                   		// 0x00B4 (0x0001) [0x0000000000000000]              
	unsigned char                                      FallingPhysics;                                   		// 0x00B5 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68923 ];

		return pClassPointer;
	};

	struct FBodyStance GetBodyStance ( );
	void SeedAnimationVariation ( );
	void eventReachedPrecisePosition ( );
	void MoveToPrecisePositionTimeOut ( );
	void GetPrecisePosition ( struct FVector* TargetLocation, struct FRotator* TargetRotation );
	void MoveToPrecisePosition ( );
	void StopAnimation ( );
	void AnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StartAnimation ( );
	void StartSpecialMove ( );
	bool InternalCanDoSpecialMove ( );
	bool CanChainMove ( unsigned char NextMove );
};

UClass* UFoxSpecialMove_RootMotionBase::pClassPointer = NULL;

// Class FoxGame.FoxStorePreviewNode_Avatar
// 0x0000 (0x0088 - 0x0088)
class UFoxStorePreviewNode_Avatar : public UFoxStorePreviewNode_CharacterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69388 ];

		return pClassPointer;
	};

	unsigned char GetCustomItemType ( );
	void SetupGear ( struct FProfileGearInfo* GearInfo );
};

UClass* UFoxStorePreviewNode_Avatar::pClassPointer = NULL;

// Class FoxGame.FoxStorePreviewNode_Camo
// 0x0000 (0x0088 - 0x0088)
class UFoxStorePreviewNode_Camo : public UFoxStorePreviewNode_CharacterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69395 ];

		return pClassPointer;
	};

	unsigned char GetCustomItemType ( );
	void SetupGear ( struct FProfileGearInfo* GearInfo );
};

UClass* UFoxStorePreviewNode_Camo::pClassPointer = NULL;

// Class FoxGame.FoxStorePreviewNode_Depot
// 0x000C (0x005C - 0x0050)
class UFoxStorePreviewNode_Depot : public UFoxStorePreviewNode_PreviewBase
{
public:
	struct FString                                     PresetNameID;                                     		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69405 ];

		return pClassPointer;
	};

	void MakePreviewActor ( );
	void ApplyItemStats ( struct FFoxDepotPresetInfo* PresetInfo );
};

UClass* UFoxStorePreviewNode_Depot::pClassPointer = NULL;

// Class FoxGame.FoxStorePreviewNode_GearBase
// 0x0008 (0x0058 - 0x0050)
class UFoxStorePreviewNode_GearBase : public UFoxStorePreviewNode_PreviewBase
{
public:
	unsigned char                                      CustomItemType;                                   		// 0x0050 (0x0001) [0x0000000000000000]              
	int                                                CurrentGearIndex;                                 		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69417 ];

		return pClassPointer;
	};

	void UpdatePreviewActor ( );
	void MakePreviewActor ( );
	void ApplyItemStats ( );
};

UClass* UFoxStorePreviewNode_GearBase::pClassPointer = NULL;

// Class FoxGame.FoxStorePreviewNode_WeaponBase
// 0x0058 (0x00A8 - 0x0050)
class UFoxStorePreviewNode_WeaponBase : public UFoxStorePreviewNode_PreviewBase
{
public:
	unsigned char                                      CustomItemType;                                   		// 0x0050 (0x0001) [0x0000000000000000]              
	struct FFoxWeaponConfigInfo                        WeaponConfig;                                     		// 0x0054 (0x002C) [0x0000000000000000]              
	struct FFoxWeaponModInfo                           WeaponModInfo;                                    		// 0x0080 (0x0024) [0x0000000000000000]              
	unsigned long                                      bSnapToLocation : 1;                              		// 0x00A4 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69428 ];

		return pClassPointer;
	};

	unsigned char GetCustomItemType ( );
	void SetupWeaponConfig ( struct FFoxWeaponConfigInfo* ConfigInfo );
	void MakePreviewActor ( );
	void ApplyItemStats ( );
};

UClass* UFoxStorePreviewNode_WeaponBase::pClassPointer = NULL;

// Class FoxGame.FoxStorePreviewNode_Magazine
// 0x0000 (0x00A8 - 0x00A8)
class UFoxStorePreviewNode_Magazine : public UFoxStorePreviewNode_WeaponBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69450 ];

		return pClassPointer;
	};

	void SetupWeaponConfig ( struct FFoxWeaponConfigInfo* ConfigInfo );
};

UClass* UFoxStorePreviewNode_Magazine::pClassPointer = NULL;

// Class FoxGame.FoxStorePreviewNode_Mod
// 0x0000 (0x00A8 - 0x00A8)
class UFoxStorePreviewNode_Mod : public UFoxStorePreviewNode_WeaponBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69458 ];

		return pClassPointer;
	};

	void SetupWeaponConfig ( struct FFoxWeaponConfigInfo* ConfigInfo );
};

UClass* UFoxStorePreviewNode_Mod::pClassPointer = NULL;

// Class FoxGame.FoxStorePreviewNode_Pack
// 0x0000 (0x0050 - 0x0050)
class UFoxStorePreviewNode_Pack : public UFoxStorePreviewNode_PreviewBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69471 ];

		return pClassPointer;
	};

	void UpdatePreviewActor ( );
	void MakePreviewActor ( );
};

UClass* UFoxStorePreviewNode_Pack::pClassPointer = NULL;

// Class FoxGame.FoxStorePreviewNode_Preset
// 0x0000 (0x00A8 - 0x00A8)
class UFoxStorePreviewNode_Preset : public UFoxStorePreviewNode_WeaponBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69475 ];

		return pClassPointer;
	};

	unsigned char GetCustomItemType ( );
	void SetupWeaponConfig ( struct FFoxWeaponConfigInfo* ConfigInfo );
};

UClass* UFoxStorePreviewNode_Preset::pClassPointer = NULL;

// Class FoxGame.FoxStorePreviewNode_Reciever
// 0x0000 (0x00A8 - 0x00A8)
class UFoxStorePreviewNode_Reciever : public UFoxStorePreviewNode_WeaponBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69481 ];

		return pClassPointer;
	};

	void SetupWeaponConfig ( struct FFoxWeaponConfigInfo* ConfigInfo );
};

UClass* UFoxStorePreviewNode_Reciever::pClassPointer = NULL;

// Class FoxGame.FoxStorePreviewNode_WeaponCamo
// 0x0000 (0x00A8 - 0x00A8)
class UFoxStorePreviewNode_WeaponCamo : public UFoxStorePreviewNode_WeaponBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69494 ];

		return pClassPointer;
	};

	void SetupWeaponConfig ( struct FFoxWeaponConfigInfo* ConfigInfo );
};

UClass* UFoxStorePreviewNode_WeaponCamo::pClassPointer = NULL;

// Class FoxGame.FoxStoreUIModalDialogWidget
// 0x0000 (0x00B8 - 0x00B8)
class UFoxStoreUIModalDialogWidget : public UFoxUIModalDialogWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69570 ];

		return pClassPointer;
	};

};

UClass* UFoxStoreUIModalDialogWidget::pClassPointer = NULL;

// Class FoxGame.FoxTestDummySpawner
// 0x0010 (0x02C0 - 0x02B0)
class AFoxTestDummySpawner : public APlayerStart
{
public:
	class AFoxPawn*                                    MyTestDummyAI;                                    		// 0x02B0 (0x0004) [0x0000000000000000]              
	float                                              RespawnTimer;                                     		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PresetID;                                         		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDefaultChar : 1;                                 		// 0x02BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70176 ];

		return pClassPointer;
	};

	void SpawnNewAI ( );
	void TickMyDummy ( );
	void eventPostBeginPlay ( );
};

UClass* AFoxTestDummySpawner::pClassPointer = NULL;

// Class FoxGame.FoxThirdPersonCameraMode_HumanPawn
// 0x0000 (0x023C - 0x023C)
class UFoxThirdPersonCameraMode_HumanPawn : public UGameThirdPersonCameraMode_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70199 ];

		return pClassPointer;
	};

};

UClass* UFoxThirdPersonCameraMode_HumanPawn::pClassPointer = NULL;

// Class FoxGame.FoxThirdPersonCameraMode_HardSuit
// 0x0000 (0x023C - 0x023C)
class UFoxThirdPersonCameraMode_HardSuit : public UGameThirdPersonCameraMode_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70200 ];

		return pClassPointer;
	};

	void OnBecomeInActive ( class APawn* TargetPawn, class UGameThirdPersonCameraMode* NewMode );
	void OnBecomeActive ( class APawn* TargetPawn, class UGameThirdPersonCameraMode* PrevMode );
};

UClass* UFoxThirdPersonCameraMode_HardSuit::pClassPointer = NULL;

// Class FoxGame.FoxThirdPersonCameraMode_CrewServed
// 0x0000 (0x023C - 0x023C)
class UFoxThirdPersonCameraMode_CrewServed : public UGameThirdPersonCameraMode_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70201 ];

		return pClassPointer;
	};

};

UClass* UFoxThirdPersonCameraMode_CrewServed::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_LauncherBase
// 0x0004 (0x0BEC - 0x0BE8)
class AFoxWeapon_LauncherBase : public AFoxWeapon_SemiAutomaticRifleBase
{
public:
	unsigned long                                      bOnlyZoomFire : 1;                                		// 0x0BE8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73639 ];

		return pClassPointer;
	};

	int FillAmmo ( );
	void SetAmmoTypeAttributes ( );
	void StartFire ( unsigned char FireModeNum );
};

UClass* AFoxWeapon_LauncherBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_AirStrikeBase
// 0x0000 (0x0BEC - 0x0BEC)
class AFoxWeapon_AirStrikeBase : public AFoxWeapon_LauncherBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73655 ];

		return pClassPointer;
	};

};

UClass* AFoxWeapon_AirStrikeBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_AlternatingMeleeBase
// 0x004C (0x0D70 - 0x0D24)
class AFoxWeapon_AlternatingMeleeBase : public AFoxWeapon_MeleeBase
{
public:
	TArray< struct FWeaponAnimSet >                    AN_HitMeleeList;                                  		// 0x0D24 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FWeaponAnimSet >                    AN_MissMeleeList;                                 		// 0x0D30 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponAnimSet                              AN_CurrentMelee;                                  		// 0x0D3C (0x0034) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73831 ];

		return pClassPointer;
	};

	void StopMeleeAnim ( );
	float StartFPMeleeAnim ( unsigned long bHitSomething );
};

UClass* AFoxWeapon_AlternatingMeleeBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_BarricadeBase
// 0x0008 (0x0C64 - 0x0C5C)
class AFoxWeapon_BarricadeBase : public AFoxWeapon_DeployableBase
{
public:
	class AFoxDeployable_Base*                         Barricade;                                        		// 0x0C5C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BarricadeDestroyTime;                             		// 0x0C60 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73976 ];

		return pClassPointer;
	};

	void SpawnDeployable ( struct FVector DeployLocation, struct FRotator DeployRotation );
	void eventDestroyed ( );
};

UClass* AFoxWeapon_BarricadeBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_HMGBase
// 0x0010 (0x0BF8 - 0x0BE8)
class AFoxWeapon_HMGBase : public AFoxWeapon_AutomaticRifleBase
{
public:
	float                                              WarmupFireTime;                                   		// 0x0BE8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              StartWarmUpTime;                                  		// 0x0BEC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkEvent*                                    WarmUpEvent;                                      		// 0x0BF0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWarmedUp : 1;                                    		// 0x0BF4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74301 ];

		return pClassPointer;
	};

	void TryToGetBackToZoom ( );
	void TryToGetBackToFiringState ( );
};

UClass* AFoxWeapon_HMGBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_ItemBase
// 0x0000 (0x0BE8 - 0x0BE8)
class AFoxWeapon_ItemBase : public AFoxWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74326 ];

		return pClassPointer;
	};

};

UClass* AFoxWeapon_ItemBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_PistolBase
// 0x0000 (0x0BE8 - 0x0BE8)
class AFoxWeapon_PistolBase : public AFoxWeapon_SemiAutomaticRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74335 ];

		return pClassPointer;
	};

};

UClass* AFoxWeapon_PistolBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_PreviewDepot
// 0x0000 (0x0BE8 - 0x0BE8)
class AFoxWeapon_PreviewDepot : public AFoxWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74344 ];

		return pClassPointer;
	};

};

UClass* AFoxWeapon_PreviewDepot::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_QuickGrenadeBase
// 0x0000 (0x0D24 - 0x0D24)
class AFoxWeapon_QuickGrenadeBase : public AFoxWeapon_GrenadeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74353 ];

		return pClassPointer;
	};

	bool ShouldRefire ( );
	void OnReleaseWeaponSelect ( );
	void OnWeaponSelect ( );
	void PlayGrenadeReEquip ( );
	void TimeWeaponEquipping ( );
	void TimeWeaponPutDown ( );
	void CookTimeOut ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
};

UClass* AFoxWeapon_QuickGrenadeBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_RocketLauncherBase
// 0x0010 (0x0BFC - 0x0BEC)
class AFoxWeapon_RocketLauncherBase : public AFoxWeapon_LauncherBase
{
public:
	float                                              FireZoomOutDelay;                                 		// 0x0BEC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystemComponent*                    RocketSightEffect;                                		// 0x0BF0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       RocketBoneName;                                   		// 0x0BF4 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74500 ];

		return pClassPointer;
	};

	void StartZooming ( );
	void StopZoomMode ( );
	void TimedUnZoom ( );
	void UnHideRocket ( );
	void HideRocket ( );
	void FireAmmunition ( );
	void PostBeginPlay ( );
};

UClass* AFoxWeapon_RocketLauncherBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_ShellGunBase
// 0x0000 (0x0BF8 - 0x0BF8)
class AFoxWeapon_ShellGunBase : public AFoxWeapon_ShotgunBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74651 ];

		return pClassPointer;
	};

	void AddKillMomentum ( class AFoxPawn* Victum, struct FVector TraceStart );
};

UClass* AFoxWeapon_ShellGunBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_SingleActionBase
// 0x003C (0x0C24 - 0x0BE8)
class AFoxWeapon_SingleActionBase : public AFoxWeapon_SemiAutomaticRifleBase
{
public:
	float                                              FireZoomOutDelay;                                 		// 0x0BE8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bNeedsToCock : 1;                                 		// 0x0BEC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FWeaponAnimSet                              AN_Cock;                                          		// 0x0BF0 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74665 ];

		return pClassPointer;
	};

	void StopCockAnim ( );
	bool ShouldRefire ( );
	void StartReloadAnim ( unsigned char FireMode );
	void PerformReload ( int AmountToReload );
	void TryToAutoReload ( );
	bool IsFireButtonHeld ( );
	void GlobalStopMuzzleEffect ( );
	void StartFire ( unsigned char FireModeNum );
	void LeaveZoom ( );
	void FireAmmunition ( );
};

UClass* AFoxWeapon_SingleActionBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_SingleActionMeleeBase
// 0x0038 (0x0D5C - 0x0D24)
class AFoxWeapon_SingleActionMeleeBase : public AFoxWeapon_MeleeBase
{
public:
	unsigned long                                      bNeedsCock : 1;                                   		// 0x0D24 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FWeaponAnimSet                              AN_HitMelee;                                      		// 0x0D28 (0x0034) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74720 ];

		return pClassPointer;
	};

	bool CanMelee ( );
	void PerformReload ( int AmountToReload );
	bool ShouldAutoReload ( );
	bool CanReload ( );
	bool HasAnyAmmo ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	float StartMeleeAnim ( );
	float StartFPMeleeAnim ( unsigned long bHitSomething );
};

UClass* AFoxWeapon_SingleActionMeleeBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_StunMineBase
// 0x0000 (0x0D28 - 0x0D28)
class AFoxWeapon_StunMineBase : public AFoxWeapon_MineBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74755 ];

		return pClassPointer;
	};

};

UClass* AFoxWeapon_StunMineBase::pClassPointer = NULL;

// Class FoxGame.FoxWeapon_ThrownBase
// 0x0000 (0x0D24 - 0x0D24)
class AFoxWeapon_ThrownBase : public AFoxWeapon_MeleeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74804 ];

		return pClassPointer;
	};

	void StepZoom ( );
};

UClass* AFoxWeapon_ThrownBase::pClassPointer = NULL;

// Class FoxGame.FoxWeaponAttachment_AutomaticBase
// 0x0000 (0x0700 - 0x0700)
class AFoxWeaponAttachment_AutomaticBase : public AFoxWeaponAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75248 ];

		return pClassPointer;
	};

	class UFoxPMPInfo_Decals* GetWeaponSpecificDecalData ( class UFoxPhysicalMaterialProperty* PMP_Info, unsigned char FiringMode );
	class UAkEvent* GetWeaponSpecificImpactSound ( class UFoxPMPInfo_ImpactFX* ImpactFX_Info, unsigned char FiringMode );
	class UParticleSystem* GetWeaponSpecificImpactEffect ( class UFoxPMPInfo_ImpactFX* ImpactFX_Info, unsigned char FiringMode );
};

UClass* AFoxWeaponAttachment_AutomaticBase::pClassPointer = NULL;

// Class FoxGame.FoxWeaponAttachment_BarricadeBase
// 0x0000 (0x0700 - 0x0700)
class AFoxWeaponAttachment_BarricadeBase : public AFoxWeaponAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75266 ];

		return pClassPointer;
	};

	void DetachWeapon ( );
	void ActivateEmissive ( );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName );
	void StartReloadAnim ( unsigned char FireMode );
};

UClass* AFoxWeaponAttachment_BarricadeBase::pClassPointer = NULL;

// Class FoxGame.FoxWeaponAttachment_GrenadeBase
// 0x0000 (0x0700 - 0x0700)
class AFoxWeaponAttachment_GrenadeBase : public AFoxWeaponAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75332 ];

		return pClassPointer;
	};

	void StartFireAnim ( unsigned char FireNodeNum );
	void SetupWeaponCamoMIC ( );
};

UClass* AFoxWeaponAttachment_GrenadeBase::pClassPointer = NULL;

// Class FoxGame.FoxWeaponAttachment_SemiAutomaticBase
// 0x0000 (0x0700 - 0x0700)
class AFoxWeaponAttachment_SemiAutomaticBase : public AFoxWeaponAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75341 ];

		return pClassPointer;
	};

	class UFoxPMPInfo_Decals* GetWeaponSpecificDecalData ( class UFoxPhysicalMaterialProperty* PMP_Info, unsigned char FiringMode );
	class UParticleSystem* GetWeaponSpecificImpactEffect ( class UFoxPMPInfo_ImpactFX* ImpactFX_Info, unsigned char FiringMode );
};

UClass* AFoxWeaponAttachment_SemiAutomaticBase::pClassPointer = NULL;

// Class FoxGame.FoxWeaponAttachment_LauncherBase
// 0x0000 (0x0700 - 0x0700)
class AFoxWeaponAttachment_LauncherBase : public AFoxWeaponAttachment_SemiAutomaticBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75355 ];

		return pClassPointer;
	};

	void StartFireAnim ( unsigned char FireNodeNum );
};

UClass* AFoxWeaponAttachment_LauncherBase::pClassPointer = NULL;

// Class FoxGame.FoxWeaponAttachment_MeleeBase
// 0x0000 (0x0700 - 0x0700)
class AFoxWeaponAttachment_MeleeBase : public AFoxWeaponAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75363 ];

		return pClassPointer;
	};

	class UAkEvent* GetWeaponSpecificImpactSound ( class UFoxPMPInfo_ImpactFX* ImpactFX_Info, unsigned char FiringMode );
	class UParticleSystem* GetWeaponSpecificImpactEffect ( class UFoxPMPInfo_ImpactFX* ImpactFX_Info, unsigned char FiringMode );
	struct FVector GetMuzzleLoc ( );
	bool SkipSoundEffects ( class AActor* HitActor, unsigned char FireMode );
};

UClass* AFoxWeaponAttachment_MeleeBase::pClassPointer = NULL;

// Class FoxGame.FoxWeaponAttachment_PistolBase
// 0x0000 (0x0700 - 0x0700)
class AFoxWeaponAttachment_PistolBase : public AFoxWeaponAttachment_SemiAutomaticBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75384 ];

		return pClassPointer;
	};

};

UClass* AFoxWeaponAttachment_PistolBase::pClassPointer = NULL;

// Class FoxGame.FoxWeaponAttachment_ShotgunBase
// 0x0000 (0x0700 - 0x0700)
class AFoxWeaponAttachment_ShotgunBase : public AFoxWeaponAttachment_SemiAutomaticBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75390 ];

		return pClassPointer;
	};

	struct FImpactInfo CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, TArray< struct FImpactInfo >* ImpactList );
	struct FRotator AddSpread ( struct FRotator BaseAim, float Spread );
};

UClass* AFoxWeaponAttachment_ShotgunBase::pClassPointer = NULL;

// Class FoxGame.FoxWeaponAttachment_ShellGunBase
// 0x0000 (0x0700 - 0x0700)
class AFoxWeaponAttachment_ShellGunBase : public AFoxWeaponAttachment_ShotgunBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75417 ];

		return pClassPointer;
	};

	void PlayImpactEffects ( struct FVector HitLocation );
};

UClass* AFoxWeaponAttachment_ShellGunBase::pClassPointer = NULL;

// Class FoxGame.FoxWeaponBarrel_Grip_Base
// 0x0000 (0x01A4 - 0x01A4)
class UFoxWeaponBarrel_Grip_Base : public UFoxWeaponBarrel_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75510 ];

		return pClassPointer;
	};

};

UClass* UFoxWeaponBarrel_Grip_Base::pClassPointer = NULL;

// Class FoxGame.FoxWeaponMuzzle_SilencedBase
// 0x0008 (0x016C - 0x0164)
class UFoxWeaponMuzzle_SilencedBase : public UFoxWeaponMuzzle_Base
{
public:
	class UParticleSystem*                             FPMuzzleFlashTemplateSemiAuto;                    		// 0x0164 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             TPMuzzleFlashTemplateSemiAuto;                    		// 0x0168 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75539 ];

		return pClassPointer;
	};

	class UParticleSystemComponent* GetMuzzleFlashParticleSystemComp ( unsigned long bFirstPerson, unsigned long bAutomaticWeapon );
};

UClass* UFoxWeaponMuzzle_SilencedBase::pClassPointer = NULL;


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif